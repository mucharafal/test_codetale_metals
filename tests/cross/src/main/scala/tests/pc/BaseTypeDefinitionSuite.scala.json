[
  {
    "id" : "4133f5ea-c7c7-45d7-96a9-6f2f3a3eb8ed",
    "prId" : 978,
    "comments" : [
      {
        "id" : "47f5b86c-1b71-49a2-bf5a-712b135c68fd",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I don't think the filename here matters - you can set it explicitly to be a default value of `Main.scala`",
        "createdAt" : "2019-11-04T11:33:07Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,83 @@\n+package tests.pc\n+\n+import tests.BasePCSuite\n+import scala.concurrent.duration.Duration\n+import scala.meta.internal.metals.CompilerOffsetParams\n+import collection.JavaConverters._\n+import org.eclipse.{lsp4j => l}\n+\n+class BaseTypeDefinitionSuite extends BasePCSuite {\n+\n+  override def beforeAll(): Unit = {\n+    indexJDK()\n+    indexScalaLibrary()\n+  }\n+\n+  def locationFromString(str: String): l.Location = {\n+    def positionFromString(str: String): l.Position = {\n+      val ints = str.split(\":\").map(_.toInt)\n+      new l.Position(ints.head, ints.last)\n+    }\n+\n+    val split = str.split(\"\"\"/\\\\\"\"\")\n+    assertEquals(split.length, 3, \"Incorrect location string format\")\n+    val (uri, rest) = (split.head, split.tail)\n+    val range =\n+      new l.Range(positionFromString(rest.head), positionFromString(rest.last))\n+    new l.Location(uri, range)\n+  }\n+\n+  def locationToString(loc: l.Location): String = {\n+    val (uri, start, end) =\n+      (loc.getUri, loc.getRange.getStart, loc.getRange.getEnd)\n+    s\"|$uri/\\\\${start.getLine}:${start.getCharacter}/\\\\${end.getLine}:${end.getCharacter}|\"\n+  }\n+\n+  def check(\n+      name: String,\n+      code: String,\n+      expected: String,\n+      duration: Duration = Duration(\"3 min\")\n+  ): Unit = {\n+    val filename = {"
  },
  {
    "id" : "0ab9018e-cca4-449f-aa86-8acdd80e95d2",
    "prId" : 978,
    "comments" : [
      {
        "id" : "01a32d34-80de-4643-9d97-3f622fc9e91a",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Do we need to do this for both? Maybe just compare raw ones.",
        "createdAt" : "2019-11-04T11:38:47Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,83 @@\n+package tests.pc\n+\n+import tests.BasePCSuite\n+import scala.concurrent.duration.Duration\n+import scala.meta.internal.metals.CompilerOffsetParams\n+import collection.JavaConverters._\n+import org.eclipse.{lsp4j => l}\n+\n+class BaseTypeDefinitionSuite extends BasePCSuite {\n+\n+  override def beforeAll(): Unit = {\n+    indexJDK()\n+    indexScalaLibrary()\n+  }\n+\n+  def locationFromString(str: String): l.Location = {\n+    def positionFromString(str: String): l.Position = {\n+      val ints = str.split(\":\").map(_.toInt)\n+      new l.Position(ints.head, ints.last)\n+    }\n+\n+    val split = str.split(\"\"\"/\\\\\"\"\")\n+    assertEquals(split.length, 3, \"Incorrect location string format\")\n+    val (uri, rest) = (split.head, split.tail)\n+    val range =\n+      new l.Range(positionFromString(rest.head), positionFromString(rest.last))\n+    new l.Location(uri, range)\n+  }\n+\n+  def locationToString(loc: l.Location): String = {\n+    val (uri, start, end) =\n+      (loc.getUri, loc.getRange.getStart, loc.getRange.getEnd)\n+    s\"|$uri/\\\\${start.getLine}:${start.getCharacter}/\\\\${end.getLine}:${end.getCharacter}|\"\n+  }\n+\n+  def check(\n+      name: String,\n+      code: String,\n+      expected: String,\n+      duration: Duration = Duration(\"3 min\")\n+  ): Unit = {\n+    val filename = {\n+      val tmp = code.lines\n+        .map(_.trim)\n+        .find(s => s.startsWith(\"class\") || s.startsWith(\"object\"))\n+        .get\n+        .replaceFirst(\"[(]\", \" \")\n+      val start = tmp.indexWhere(_.isUpper)\n+      val end = tmp.indexOf(\" \", start)\n+\n+      s\"${tmp.substring(start, end)}.scala\"\n+    }\n+\n+    val raw = \"package a\\n\" + code\n+    val paramsT = params(raw, filename)\n+    test(name) {\n+      pc.typeDefinition(\n+          CompilerOffsetParams(\n+            filename,\n+            paramsT._1,\n+            paramsT._2\n+          )\n+        )\n+        .get\n+        .asScala\n+        .toList match {\n+        case h :: _ =>\n+          val loc = locationToString(h)\n+            .dropWhile(_ == '|')"
  },
  {
    "id" : "bb7608de-e718-4149-9177-d478c01f8495",
    "prId" : 978,
    "comments" : [
      {
        "id" : "b77acadb-06fa-48e9-b96d-9f3035017a11",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "we can change it a bit to make the call site a bit nicer: \r\n```scala \r\ndef check(name:String)(code:String, expected:String,duration:Duration=(...))\r\n```\r\n\r\nnow, we call it like:\r\n```scala\r\ncheck(\"foo\")(\r\n  code = ???,\r\n  expected = ???\r\n)\r\n```",
        "createdAt" : "2019-11-13T08:17:22Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "45889de7-69f5-45d9-9f5a-83b63387904b",
        "parentId" : "b77acadb-06fa-48e9-b96d-9f3035017a11",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "Fixed.",
        "createdAt" : "2019-11-13T16:14:26Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,65 @@\n+package tests.pc\n+\n+import tests.BasePCSuite\n+import scala.concurrent.duration.Duration\n+import scala.meta.internal.metals.CompilerOffsetParams\n+import collection.JavaConverters._\n+import org.eclipse.{lsp4j => l}\n+\n+class BaseTypeDefinitionSuite extends BasePCSuite {\n+\n+  override def beforeAll(): Unit = {\n+    indexJDK()\n+    indexScalaLibrary()\n+  }\n+\n+  def locationFromString(str: String): l.Location = {\n+    def positionFromString(str: String): l.Position = {\n+      val ints = str.split(\":\").map(_.toInt)\n+      new l.Position(ints.head, ints.last)\n+    }\n+\n+    val split = str.split(\"\"\"/\\\\\"\"\")\n+    assertEquals(split.length, 3, \"Incorrect location string format\")\n+    val (uri, rest) = (split.head, split.tail)\n+    val range =\n+      new l.Range(positionFromString(rest.head), positionFromString(rest.last))\n+    new l.Location(uri, range)\n+  }\n+\n+  def locationToString(loc: l.Location): String = {\n+    val (uri, start, end) =\n+      (loc.getUri, loc.getRange.getStart, loc.getRange.getEnd)\n+    s\"|$uri/\\\\${start.getLine}:${start.getCharacter}/\\\\${end.getLine}:${end.getCharacter}|\"\n+  }\n+\n+  def check("
  },
  {
    "id" : "bfb65835-cc8e-45fb-8196-35f4a3bd2c89",
    "prId" : 978,
    "comments" : [
      {
        "id" : "dcb73b45-52cb-4452-8c1a-503387a85cfa",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "print the actual content and maybe a hint on why it is incorrent",
        "createdAt" : "2019-11-13T08:18:20Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d1d4430e-0568-49d8-b28d-4c653554581c",
        "parentId" : "dcb73b45-52cb-4452-8c1a-503387a85cfa",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "Fixed.",
        "createdAt" : "2019-11-13T16:14:35Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,65 @@\n+package tests.pc\n+\n+import tests.BasePCSuite\n+import scala.concurrent.duration.Duration\n+import scala.meta.internal.metals.CompilerOffsetParams\n+import collection.JavaConverters._\n+import org.eclipse.{lsp4j => l}\n+\n+class BaseTypeDefinitionSuite extends BasePCSuite {\n+\n+  override def beforeAll(): Unit = {\n+    indexJDK()\n+    indexScalaLibrary()\n+  }\n+\n+  def locationFromString(str: String): l.Location = {\n+    def positionFromString(str: String): l.Position = {\n+      val ints = str.split(\":\").map(_.toInt)\n+      new l.Position(ints.head, ints.last)\n+    }\n+\n+    val split = str.split(\"\"\"/\\\\\"\"\")\n+    assertEquals(split.length, 3, \"Incorrect location string format\")"
  },
  {
    "id" : "ae8cf627-d3be-44df-b23f-32141fff1491",
    "prId" : 978,
    "comments" : [
      {
        "id" : "5ee0a352-0de0-4f75-b59c-438b7c2a3eb3",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "what does the `T` stand for ?",
        "createdAt" : "2019-11-13T08:18:51Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b7a39b0c-8d22-4998-8541-24d4f6011fa3",
        "parentId" : "5ee0a352-0de0-4f75-b59c-438b7c2a3eb3",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "It stands for tuple.",
        "createdAt" : "2019-11-13T15:56:06Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9f81f428-7ad0-4c8d-a4c1-0eaf87c70624",
        "parentId" : "5ee0a352-0de0-4f75-b59c-438b7c2a3eb3",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "then it can be dropped.",
        "createdAt" : "2019-11-14T15:47:39Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "918a28f7-be6a-49e4-a23a-fd999115588d",
        "parentId" : "5ee0a352-0de0-4f75-b59c-438b7c2a3eb3",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "I've added it to prevent clashing with params method.",
        "createdAt" : "2019-11-18T12:13:41Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,65 @@\n+package tests.pc\n+\n+import tests.BasePCSuite\n+import scala.concurrent.duration.Duration\n+import scala.meta.internal.metals.CompilerOffsetParams\n+import collection.JavaConverters._\n+import org.eclipse.{lsp4j => l}\n+\n+class BaseTypeDefinitionSuite extends BasePCSuite {\n+\n+  override def beforeAll(): Unit = {\n+    indexJDK()\n+    indexScalaLibrary()\n+  }\n+\n+  def locationFromString(str: String): l.Location = {\n+    def positionFromString(str: String): l.Position = {\n+      val ints = str.split(\":\").map(_.toInt)\n+      new l.Position(ints.head, ints.last)\n+    }\n+\n+    val split = str.split(\"\"\"/\\\\\"\"\")\n+    assertEquals(split.length, 3, \"Incorrect location string format\")\n+    val (uri, rest) = (split.head, split.tail)\n+    val range =\n+      new l.Range(positionFromString(rest.head), positionFromString(rest.last))\n+    new l.Location(uri, range)\n+  }\n+\n+  def locationToString(loc: l.Location): String = {\n+    val (uri, start, end) =\n+      (loc.getUri, loc.getRange.getStart, loc.getRange.getEnd)\n+    s\"|$uri/\\\\${start.getLine}:${start.getCharacter}/\\\\${end.getLine}:${end.getCharacter}|\"\n+  }\n+\n+  def check(\n+      name: String,\n+      code: String,\n+      expected: String,\n+      duration: Duration = Duration(\"3 min\")\n+  ): Unit = {\n+    val filename = \"Main.scala\"\n+\n+    val raw = \"package a\\n\" + code\n+    val paramsT = params(raw, filename)"
  },
  {
    "id" : "400c71f2-6add-4573-b5e2-567cd40e66b5",
    "prId" : 978,
    "comments" : [
      {
        "id" : "08ae90b1-351e-41ce-9808-77fbb4d605bb",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "extract to a variable",
        "createdAt" : "2019-11-13T08:19:09Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "58f45ef3-1449-4163-b332-36a8ad14a3f0",
        "parentId" : "08ae90b1-351e-41ce-9808-77fbb4d605bb",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "Fixed.",
        "createdAt" : "2019-11-13T16:14:42Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,65 @@\n+package tests.pc\n+\n+import tests.BasePCSuite\n+import scala.concurrent.duration.Duration\n+import scala.meta.internal.metals.CompilerOffsetParams\n+import collection.JavaConverters._\n+import org.eclipse.{lsp4j => l}\n+\n+class BaseTypeDefinitionSuite extends BasePCSuite {\n+\n+  override def beforeAll(): Unit = {\n+    indexJDK()\n+    indexScalaLibrary()\n+  }\n+\n+  def locationFromString(str: String): l.Location = {\n+    def positionFromString(str: String): l.Position = {\n+      val ints = str.split(\":\").map(_.toInt)\n+      new l.Position(ints.head, ints.last)\n+    }\n+\n+    val split = str.split(\"\"\"/\\\\\"\"\")\n+    assertEquals(split.length, 3, \"Incorrect location string format\")\n+    val (uri, rest) = (split.head, split.tail)\n+    val range =\n+      new l.Range(positionFromString(rest.head), positionFromString(rest.last))\n+    new l.Location(uri, range)\n+  }\n+\n+  def locationToString(loc: l.Location): String = {\n+    val (uri, start, end) =\n+      (loc.getUri, loc.getRange.getStart, loc.getRange.getEnd)\n+    s\"|$uri/\\\\${start.getLine}:${start.getCharacter}/\\\\${end.getLine}:${end.getCharacter}|\"\n+  }\n+\n+  def check(\n+      name: String,\n+      code: String,\n+      expected: String,\n+      duration: Duration = Duration(\"3 min\")\n+  ): Unit = {\n+    val filename = \"Main.scala\"\n+\n+    val raw = \"package a\\n\" + code\n+    val paramsT = params(raw, filename)\n+    test(name) {\n+      pc.typeDefinition(\n+          CompilerOffsetParams(\n+            filename,\n+            paramsT._1,\n+            paramsT._2\n+          )\n+        )\n+        .get\n+        .asScala\n+        .toList match {"
  },
  {
    "id" : "f80a79c7-83b1-4f30-b43e-b1bafe0175b0",
    "prId" : 978,
    "comments" : [
      {
        "id" : "fecd1aa7-6c40-4a55-adc4-234deb48aa90",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "maybe also print what was expected? ",
        "createdAt" : "2019-11-13T08:19:39Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bad1824f-3da6-47ad-ad55-b2f9db798629",
        "parentId" : "fecd1aa7-6c40-4a55-adc4-234deb48aa90",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "assertEquals prints both expected and obtained results in case of fail.",
        "createdAt" : "2019-11-13T16:00:52Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f102a404-b9ca-421d-b95f-3893abe3b08e",
        "parentId" : "fecd1aa7-6c40-4a55-adc4-234deb48aa90",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Does it work for `fail` too?",
        "createdAt" : "2019-11-14T15:41:11Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,65 @@\n+package tests.pc\n+\n+import tests.BasePCSuite\n+import scala.concurrent.duration.Duration\n+import scala.meta.internal.metals.CompilerOffsetParams\n+import collection.JavaConverters._\n+import org.eclipse.{lsp4j => l}\n+\n+class BaseTypeDefinitionSuite extends BasePCSuite {\n+\n+  override def beforeAll(): Unit = {\n+    indexJDK()\n+    indexScalaLibrary()\n+  }\n+\n+  def locationFromString(str: String): l.Location = {\n+    def positionFromString(str: String): l.Position = {\n+      val ints = str.split(\":\").map(_.toInt)\n+      new l.Position(ints.head, ints.last)\n+    }\n+\n+    val split = str.split(\"\"\"/\\\\\"\"\")\n+    assertEquals(split.length, 3, \"Incorrect location string format\")\n+    val (uri, rest) = (split.head, split.tail)\n+    val range =\n+      new l.Range(positionFromString(rest.head), positionFromString(rest.last))\n+    new l.Location(uri, range)\n+  }\n+\n+  def locationToString(loc: l.Location): String = {\n+    val (uri, start, end) =\n+      (loc.getUri, loc.getRange.getStart, loc.getRange.getEnd)\n+    s\"|$uri/\\\\${start.getLine}:${start.getCharacter}/\\\\${end.getLine}:${end.getCharacter}|\"\n+  }\n+\n+  def check(\n+      name: String,\n+      code: String,\n+      expected: String,\n+      duration: Duration = Duration(\"3 min\")\n+  ): Unit = {\n+    val filename = \"Main.scala\"\n+\n+    val raw = \"package a\\n\" + code\n+    val paramsT = params(raw, filename)\n+    test(name) {\n+      pc.typeDefinition(\n+          CompilerOffsetParams(\n+            filename,\n+            paramsT._1,\n+            paramsT._2\n+          )\n+        )\n+        .get\n+        .asScala\n+        .toList match {\n+        case h :: _ =>\n+          assertEquals(locationToString(h), expected)\n+        case _ =>\n+          fail(\"typeDefinition didn't produce any results\")"
  },
  {
    "id" : "fec66723-dd1c-4f6f-9ce6-f30ec8d90a77",
    "prId" : 978,
    "comments" : [
      {
        "id" : "36d88273-7fad-4f6f-bb7c-cad79f3acf76",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Let's try to use the same testing infrastructure as \"textDocument/definition\" instead of coming up with a new expect syntax.",
        "createdAt" : "2019-11-18T05:05:10Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "19dc9f59-4d8f-4db8-949b-41440c67bc22",
        "parentId" : "36d88273-7fad-4f6f-bb7c-cad79f3acf76",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "In general, I have found it helpful to test \"goto definition\" by running it on all possible tokens instead of writing individual test cases for custom positions. ",
        "createdAt" : "2019-11-18T05:11:30Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7a1ad9e4-7dd6-4413-8537-cdd17f45942e",
        "parentId" : "36d88273-7fad-4f6f-bb7c-cad79f3acf76",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "Could you give me example of suite you have in mind?",
        "createdAt" : "2019-11-18T11:40:55Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2631937e-24b2-40f3-bd1c-5a4f6f1be6a7",
        "parentId" : "36d88273-7fad-4f6f-bb7c-cad79f3acf76",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I was referring to something like `DefinitionLspSuite`\r\n\r\n",
        "createdAt" : "2019-11-18T15:20:01Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d669d723-8a7f-49e4-9e14-092aff7a4f55",
        "parentId" : "36d88273-7fad-4f6f-bb7c-cad79f3acf76",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "https://github.com/scalameta/metals/blob/cf7b95265a6019a99b0dea323caef47096dd8a58/tests/unit/src/test/scala/tests/DefinitionLspSuite.scala#L59-L78\r\n\r\nbut it seems to only be available in lsp suites",
        "createdAt" : "2019-11-18T15:20:17Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "64568a66-30cb-4fa4-91de-d99831087e8b",
        "parentId" : "36d88273-7fad-4f6f-bb7c-cad79f3acf76",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Instead of using that structure, we can reuse `PcDefinitionSuite`, see https://github.com/scalameta/metals/blob/cf7b95265a6019a99b0dea323caef47096dd8a58/tests/cross/src/test/scala/tests/pc/PcDefinitionSuite.scala#L52",
        "createdAt" : "2019-11-18T15:20:49Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6414aafb-b5e3-4446-b9c7-a9f2e13c2f95",
        "parentId" : "36d88273-7fad-4f6f-bb7c-cad79f3acf76",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "As a general rule of thumb, avoid hardcoding line:column numbers in expect tests. Numbers are harder review than something like \"Int.scala\"",
        "createdAt" : "2019-11-18T15:21:47Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "230aad39-37bd-4132-84aa-9b8a88690787",
        "parentId" : "36d88273-7fad-4f6f-bb7c-cad79f3acf76",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "Ok, I see what you have in mind.",
        "createdAt" : "2019-11-18T16:29:59Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "85327174-5192-4ef7-ae0b-9b842da0e144",
        "parentId" : "36d88273-7fad-4f6f-bb7c-cad79f3acf76",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "I've changed cross tests for goto-type-definition, now they share code with cross tests for goto-definition.",
        "createdAt" : "2019-12-04T18:26:32Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,73 @@\n+package tests.pc\n+\n+import tests.BasePCSuite\n+import scala.concurrent.duration.Duration\n+import scala.meta.internal.metals.CompilerOffsetParams\n+import collection.JavaConverters._\n+import org.eclipse.{lsp4j => l}\n+\n+class BaseTypeDefinitionSuite extends BasePCSuite {\n+\n+  override def beforeAll(): Unit = {\n+    indexJDK()\n+    indexScalaLibrary()\n+  }\n+\n+  def locationFromString(str: String): l.Location = {"
  },
  {
    "id" : "58a65ccb-738d-4c43-942e-9bd881f7a7c9",
    "prId" : 978,
    "comments" : [
      {
        "id" : "7a6590a3-2b68-49b0-aa6c-b1a6fd4cd849",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Move this to the top of the method, otherwise one failing test case will block the subsequent test cases from starting.",
        "createdAt" : "2019-11-18T05:06:23Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2ad2b40e-b81c-4f78-8357-4dda123dea71",
        "parentId" : "7a6590a3-2b68-49b0-aa6c-b1a6fd4cd849",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "Like that?",
        "createdAt" : "2019-11-18T12:15:58Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,73 @@\n+package tests.pc\n+\n+import tests.BasePCSuite\n+import scala.concurrent.duration.Duration\n+import scala.meta.internal.metals.CompilerOffsetParams\n+import collection.JavaConverters._\n+import org.eclipse.{lsp4j => l}\n+\n+class BaseTypeDefinitionSuite extends BasePCSuite {\n+\n+  override def beforeAll(): Unit = {\n+    indexJDK()\n+    indexScalaLibrary()\n+  }\n+\n+  def locationFromString(str: String): l.Location = {\n+    def positionFromString(str: String): l.Position = {\n+      val ints = str.split(\":\").map(_.toInt)\n+      new l.Position(ints.head, ints.last)\n+    }\n+\n+    val split = str.split(\"\"\"/\\\\\"\"\")\n+    assertEquals(\n+      split.length,\n+      3,\n+      s\"Incorrect location string format, is: $str, \" +\n+        \"should be: |url/\\\\startLine:startCharacter/\\\\endLine:endCharacter|\"\n+    )\n+\n+    val (uri, rest) = (split.head, split.tail)\n+    val range =\n+      new l.Range(positionFromString(rest.head), positionFromString(rest.last))\n+    new l.Location(uri, range)\n+  }\n+\n+  def locationToString(loc: l.Location): String = {\n+    val (uri, start, end) =\n+      (loc.getUri, loc.getRange.getStart, loc.getRange.getEnd)\n+    s\"$uri [${start.getLine}:${start.getCharacter} -> ${end.getLine}:${end.getCharacter}]\"\n+  }\n+\n+  def check(name: String)(\n+      code: String,\n+      expected: String,\n+      duration: Duration = Duration(\"3 min\")\n+  ): Unit = {\n+    val filename = \"Main.scala\"\n+\n+    val raw = \"package a\\n\" + code\n+    val paramsT = params(raw, filename)\n+    val typeDef = pc\n+      .typeDefinition(\n+        CompilerOffsetParams(\n+          filename,\n+          paramsT._1,\n+          paramsT._2\n+        )\n+      )\n+      .get\n+      .asScala\n+      .toList\n+\n+    test(name) {"
  },
  {
    "id" : "75f65e94-70f1-47c7-be79-b77bba2c24ca",
    "prId" : 978,
    "comments" : [
      {
        "id" : "a226e5d0-c473-4e5d-a17f-4a6020019118",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Can we rename this to to something more meaningful?",
        "createdAt" : "2019-12-17T09:30:57Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cfc8a132-d768-4e8b-9f97-97b99d8e26ca",
        "parentId" : "a226e5d0-c473-4e5d-a17f-4a6020019118",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "Changed.",
        "createdAt" : "2019-12-18T16:11:43Z",
        "updatedAt" : "2019-12-18T16:11:43Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,27 @@\n+package tests.pc\n+\n+import tests.BasePCSuite\n+import scala.concurrent.duration.Duration\n+\n+class BaseTypeDefinitionSuite extends BasePCSuite {\n+  val test: (String, String) => (String, String) ="
  },
  {
    "id" : "1f845ce1-35e9-47c5-8580-13070f3275a2",
    "prId" : 978,
    "comments" : [
      {
        "id" : "3c5ad53e-04d2-48eb-b6ea-f2c74ed8f91b",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Doesn't look like we need this as a separate class altogether - it's only utility methods used in one suite.",
        "createdAt" : "2019-12-17T09:31:57Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0ca280c7-137c-4500-ba73-93627d9068c6",
        "parentId" : "3c5ad53e-04d2-48eb-b6ea-f2c74ed8f91b",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "Changed.",
        "createdAt" : "2019-12-18T16:11:54Z",
        "updatedAt" : "2019-12-18T16:11:54Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,27 @@\n+package tests.pc\n+\n+import tests.BasePCSuite\n+import scala.concurrent.duration.Duration\n+\n+class BaseTypeDefinitionSuite extends BasePCSuite {"
  }
]