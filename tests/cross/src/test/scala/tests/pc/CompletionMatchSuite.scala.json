[
  {
    "id" : "417940e8-cc2e-4cfc-9932-32ff5358586c",
    "prId" : 712,
    "comments" : [
      {
        "id" : "fffa65a3-726f-4701-a8b6-972d49250e08",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Is this used any other way than `_ => false` or `_=> true` ? It could just be a flag then",
        "createdAt" : "2019-05-07T14:52:35Z",
        "updatedAt" : "2019-05-24T13:32:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6869b6db-beca-43aa-a733-f9e6ccaae5c6",
        "parentId" : "fffa65a3-726f-4701-a8b6-972d49250e08",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "The `filter: String => Boolean` parameter is identical to the `checkEditLine` method.",
        "createdAt" : "2019-05-07T15:17:43Z",
        "updatedAt" : "2019-05-24T13:32:42Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c468269d2e0e47b5eaffc75cab0b2c825678b7fe",
    "line" : 6,
    "diffHunk" : "@@ -43,7 +43,8 @@ object CompletionMatchSuite extends BaseCompletionSuite {\n       |case object Weekend extends Weekday\n       |@@\n       |\"\"\".stripMargin,\n-    \"\"\n+    \"\",\n+    filter = _ => false"
  },
  {
    "id" : "f142f35d-1faf-473b-b77e-b416e6f0085d",
    "prId" : 1174,
    "comments" : [
      {
        "id" : "f8e6e1fa-d31e-4260-bdbd-635914277617",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "we generally use short meaningful names for the tests (e.g. `exhaustive-sorting`), so that they can be used as targets for `testOnly`.",
        "createdAt" : "2019-12-09T15:23:05Z",
        "updatedAt" : "2019-12-16T12:57:43Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0d5f96fb977b6c73c44b8b5c061480393ecb1c82",
    "line" : null,
    "diffHunk" : "@@ -103,6 +103,33 @@ object CompletionMatchSuite extends BaseCompletionSuite {\n     filter = _.contains(\"exhaustive\")\n   )\n \n+  checkEdit(\n+    \"Sort auto-completed exhaustive match keywords by declaration order\","
  },
  {
    "id" : "b645994c-3b14-4348-be49-42dbf87cabef",
    "prId" : 1174,
    "comments" : [
      {
        "id" : "ab796ad5-4149-4710-b62c-38e2c92e5630",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Can we add another cross test case for 3rd party defined symbols? Cross tests have the ability to index library dependencies, see `indexScalaLibrary()`",
        "createdAt" : "2019-12-13T12:36:29Z",
        "updatedAt" : "2019-12-16T12:57:43Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0d5f96fb977b6c73c44b8b5c061480393ecb1c82",
    "line" : 16,
    "diffHunk" : "@@ -103,6 +103,33 @@ object CompletionMatchSuite extends BaseCompletionSuite {\n     filter = _.contains(\"exhaustive\")\n   )\n \n+  checkEdit(\n+    \"exhaustive-sorting\","
  },
  {
    "id" : "87670fc2-0bac-4c56-9dba-400332ca05b1",
    "prId" : 1174,
    "comments" : [
      {
        "id" : "2cec5e03-38d6-471e-b91c-8df4fea01184",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Yay, really excited to finally get the `Some` case at the top",
        "createdAt" : "2019-12-15T11:00:14Z",
        "updatedAt" : "2019-12-16T12:57:43Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0d5f96fb977b6c73c44b8b5c061480393ecb1c82",
    "line" : null,
    "diffHunk" : "@@ -103,6 +107,63 @@ object CompletionMatchSuite extends BaseCompletionSuite {\n     filter = _.contains(\"exhaustive\")\n   )\n \n+  checkEdit(\n+    \"exhaustive-sorting\",\n+    \"\"\"package sort\n+      |sealed abstract class TestTree\n+      |case class Branch1(t1: TestTree) extends TestTree\n+      |case class Leaf(v: Int) extends TestTree\n+      |case class Branch2(t1: TestTree, t2: TestTree) extends TestTree\n+      |object App {\n+      |  null.asInstanceOf[TestTree] matc@@\n+      |}\n+      |\"\"\".stripMargin,\n+    \"\"\"|package sort\n+       |sealed abstract class TestTree\n+       |case class Branch1(t1: TestTree) extends TestTree\n+       |case class Leaf(v: Int) extends TestTree\n+       |case class Branch2(t1: TestTree, t2: TestTree) extends TestTree\n+       |object App {\n+       |  null.asInstanceOf[TestTree] match {\n+       |\\tcase Branch1(t1) => $0\n+       |\\tcase Leaf(v) =>\n+       |\\tcase Branch2(t1, t2) =>\n+       |}\n+       |}\n+       |\"\"\".stripMargin,\n+    filter = _.contains(\"exhaustive\")\n+  )\n+\n+  if (!isScala211) {\n+    checkEdit(\n+      \"exhaustive-sorting-scalalib\",\n+      \"\"\"package sort\n+        |object App {\n+        |  Option(1) matc@@\n+        |}\n+        |\"\"\".stripMargin,\n+      if (!isScala211)\n+        \"\"\"package sort\n+          |object App {\n+          |  Option(1) match {\n+          |\\tcase Some(value) => $0"
  },
  {
    "id" : "1b61282a-1fa5-4a77-9e98-2678cd4bc615",
    "prId" : 1174,
    "comments" : [
      {
        "id" : "6275600a-9e5c-4fdb-9243-de309beddfe6",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I don't think we need the else here? `!isScala211` is already tested at the top",
        "createdAt" : "2019-12-16T08:20:10Z",
        "updatedAt" : "2019-12-16T12:57:43Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "590c117f-9d12-4ce6-8a67-3cd776e6a3d2",
        "parentId" : "6275600a-9e5c-4fdb-9243-de309beddfe6",
        "author" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Oops, we don't need it. I meant like this https://github.com/scalameta/metals/pull/1174/commits/0d5f96fb977b6c73c44b8b5c061480393ecb1c82, thank you for pointing it out :)",
        "createdAt" : "2019-12-16T13:00:34Z",
        "updatedAt" : "2019-12-16T13:00:34Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0d5f96fb977b6c73c44b8b5c061480393ecb1c82",
    "line" : null,
    "diffHunk" : "@@ -103,6 +107,63 @@ object CompletionMatchSuite extends BaseCompletionSuite {\n     filter = _.contains(\"exhaustive\")\n   )\n \n+  checkEdit(\n+    \"exhaustive-sorting\",\n+    \"\"\"package sort\n+      |sealed abstract class TestTree\n+      |case class Branch1(t1: TestTree) extends TestTree\n+      |case class Leaf(v: Int) extends TestTree\n+      |case class Branch2(t1: TestTree, t2: TestTree) extends TestTree\n+      |object App {\n+      |  null.asInstanceOf[TestTree] matc@@\n+      |}\n+      |\"\"\".stripMargin,\n+    \"\"\"|package sort\n+       |sealed abstract class TestTree\n+       |case class Branch1(t1: TestTree) extends TestTree\n+       |case class Leaf(v: Int) extends TestTree\n+       |case class Branch2(t1: TestTree, t2: TestTree) extends TestTree\n+       |object App {\n+       |  null.asInstanceOf[TestTree] match {\n+       |\\tcase Branch1(t1) => $0\n+       |\\tcase Leaf(v) =>\n+       |\\tcase Branch2(t1, t2) =>\n+       |}\n+       |}\n+       |\"\"\".stripMargin,\n+    filter = _.contains(\"exhaustive\")\n+  )\n+\n+  if (!isScala211) {\n+    checkEdit(\n+      \"exhaustive-sorting-scalalib\",\n+      \"\"\"package sort\n+        |object App {\n+        |  Option(1) matc@@\n+        |}\n+        |\"\"\".stripMargin,\n+      if (!isScala211)\n+        \"\"\"package sort\n+          |object App {\n+          |  Option(1) match {\n+          |\\tcase Some(value) => $0\n+          |\\tcase None =>\n+          |}\n+          |}\n+          |\"\"\".stripMargin\n+      else"
  },
  {
    "id" : "618d0f37-4fbd-43d0-87d1-8513d90a9537",
    "prId" : 1254,
    "comments" : [
      {
        "id" : "320ce4f2-ecb7-440a-a2ba-d326542b7f3d",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "this test passes because it fails 🙃 ",
        "createdAt" : "2020-01-05T13:23:32Z",
        "updatedAt" : "2020-01-05T17:30:54Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8c01432863b62a73bbfb809ed6739a6bf33ed62f",
    "line" : null,
    "diffHunk" : "@@ -184,4 +184,29 @@ object CompletionMatchSuite extends BaseCompletionSuite {\n       \"2.11\" -> \"match\"\n     )\n   )\n+\n+  // https://github.com/scalameta/metals/issues/1253\n+  checkEditBug("
  },
  {
    "id" : "28b3af97-48f6-4dd5-9a3b-41d5adc47cae",
    "prId" : 1254,
    "comments" : [
      {
        "id" : "a4a19f6b-e91d-4ed2-ade7-55490b5a7ecc",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "here's an example. You could technically also do \r\n\r\n```suggestion\r\n    \"exhaustive-fully-qualify\".tag(Tag.ExpectedFailure),\r\n```\r\n\r\nbut since we'll reasonably have a few tags, I opted for a utility \"DSL\" method",
        "createdAt" : "2020-01-05T17:06:10Z",
        "updatedAt" : "2020-01-05T17:30:54Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "dbeaa24c-b68e-4955-a223-388abf1e25f4",
        "parentId" : "a4a19f6b-e91d-4ed2-ade7-55490b5a7ecc",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I think it's fine to have a method here to ease discovery.",
        "createdAt" : "2020-01-05T17:38:33Z",
        "updatedAt" : "2020-01-05T17:40:53Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8c01432863b62a73bbfb809ed6739a6bf33ed62f",
    "line" : 7,
    "diffHunk" : "@@ -184,4 +184,29 @@ object CompletionMatchSuite extends BaseCompletionSuite {\n       \"2.11\" -> \"match\"\n     )\n   )\n+\n+  // https://github.com/scalameta/metals/issues/1253\n+  checkEdit(\n+    \"exhaustive-fully-qualify\".expectedToFail,"
  },
  {
    "id" : "e2cbd176-317f-4f91-842e-8a1e9ec3b202",
    "prId" : 1787,
    "comments" : [
      {
        "id" : "d3ce788e-c812-4d8a-b48a-555949f238b4",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Could we maybe add a test also with `def testExhaustive[T <: TestA](test: T): Boolean =`\r\n\r\nTo be sure it works without refinement too?",
        "createdAt" : "2020-06-05T15:02:50Z",
        "updatedAt" : "2020-06-05T16:00:28Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "45149f57-79d9-4f14-abaa-8f9efa841cbd",
        "parentId" : "d3ce788e-c812-4d8a-b48a-555949f238b4",
        "author" : {
          "login" : "ltrojanowski",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3951626?v=4"
        },
        "body" : "Added",
        "createdAt" : "2020-06-05T15:56:31Z",
        "updatedAt" : "2020-06-05T16:00:28Z",
        "lastEditedBy" : {
          "login" : "ltrojanowski",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3951626?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5dbc361817838563154efde0e38d589afc1909ac",
    "line" : 48,
    "diffHunk" : "@@ -242,4 +242,42 @@ class CompletionMatchSuite extends BaseCompletionSuite {\n       |}\"\"\".stripMargin,\n     filter = _.contains(\"exhaustive\")\n   )\n+\n+  checkEdit(\n+    \"exhaustive-upper-type-bounds\",\n+    \"\"\"\n+      |package example\n+      |\n+      |sealed trait TestA\n+      |case object Foo extends TestA\n+      |case object Bar extends TestA\n+      |sealed trait TestB\n+      |case object Baz extends TestB\n+      |case object Goo extends TestB\n+      |\n+      |object Main {\n+      |  def testExhaustive[T <: TestA with TestB](test: T): Boolean ="
  }
]