[
  {
    "id" : "59909763-b139-417e-9b95-2f5875dbe438",
    "prId" : 1031,
    "comments" : [
      {
        "id" : "a172ffd1-3860-42d4-b7ae-4d0cc5740a70",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "How does the code look like after running the completion?",
        "createdAt" : "2019-10-31T16:36:54Z",
        "updatedAt" : "2019-11-10T21:00:37Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f8bb8ebe-ae0a-4440-a823-417f51c10a56",
        "parentId" : "a172ffd1-3860-42d4-b7ae-4d0cc5740a70",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "It will end up looking like this\r\n```scala\r\npackage a { class Foo }\r\npackage b { class Foo }\r\n\r\ntrait Foo {\r\n  def one: a.Foo\r\n  def two: b.Foo\r\n}\r\nobject Main {\r\n  val x = new Foo {\r\n    def one: a.Foo = ???\r\n    def two: b.Foo = ???\r\n  }\r\n}\r\n```",
        "createdAt" : "2019-11-02T11:59:31Z",
        "updatedAt" : "2019-11-10T21:00:37Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a10b940c-37f8-4927-b42a-808f47e2e634",
        "parentId" : "a172ffd1-3860-42d4-b7ae-4d0cc5740a70",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "we should have a test case to ensure it produces that code, if we render the methods separately there's a risk we produce\r\n```\r\nimport a.Foo\r\nimport b.Foo\r\n...\r\n   def one: Foo = ???\r\n   def two: Foo = ???\r\n```",
        "createdAt" : "2019-11-02T13:43:06Z",
        "updatedAt" : "2019-11-10T21:00:37Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e41cd207-cb34-4c8e-852e-7b9e64a0bb54",
        "parentId" : "a172ffd1-3860-42d4-b7ae-4d0cc5740a70",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Sounds good. I added a few more tests in for the various cases to actually check what will be produced.",
        "createdAt" : "2019-11-02T21:36:06Z",
        "updatedAt" : "2019-11-10T21:00:37Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d86f1fab85d5e22c96d5b7f681c79dc78116aaac",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,180 @@\n+package tests.pc\n+\n+import tests.BaseCompletionSuite\n+\n+object CompletionOverrideAllSuite extends BaseCompletionSuite {\n+\n+  override def beforeAll(): Unit = {\n+    indexJDK()\n+  }\n+\n+  check(\n+    \"simple\",\n+    \"\"\"\n+      |package example\n+      |\n+      |trait Foo {\n+      |  def foo: Int\n+      |  def bar: Int\n+      |}\n+      |object Main {\n+      |  val x = new Foo {\n+      |    def@@\n+      |  }\n+      |}\n+      |\"\"\".stripMargin,\n+    \"\"\"|Implement all members(2 members)\n+       |\"\"\".stripMargin,\n+    filter = _.contains(\"Implement\")\n+  )\n+\n+  check(\n+    \"simple-three\",\n+    \"\"\"\n+      |package example\n+      |\n+      |trait Foo {\n+      |  def foo: Int\n+      |  def bar: Int\n+      |  def car: Int\n+      |}\n+      |object Main {\n+      |  val x = new Foo {\n+      |    def@@\n+      |  }\n+      |}\n+      |\"\"\".stripMargin,\n+    \"\"\"|Implement all members(3 members)\n+       |\"\"\".stripMargin,\n+    filter = _.contains(\"Implement\")\n+  )\n+\n+  check(\n+    \"two-left\",\n+    \"\"\"\n+      |package example\n+      |\n+      |trait Foo {\n+      |  def foo: Int\n+      |  def bar: Int\n+      |  def car: Int\n+      |}\n+      |object Main {\n+      |  val x = new Foo {\n+           def foo = 2\n+      |    def@@\n+      |  }\n+      |}\n+      |\"\"\".stripMargin,\n+    \"\"\"|Implement all members(2 members)\n+       |\"\"\".stripMargin,\n+    filter = _.contains(\"Implement\")\n+  )\n+\n+  check(\n+    \"none-with-one\",\n+    \"\"\"\n+      |package example\n+      |\n+      |trait Foo {\n+      |  def foo: Int\n+      |}\n+      |object Main {\n+      |  val x = new Foo {\n+      |    def@@\n+      |  }\n+      |}\n+      |\"\"\".stripMargin,\n+    \"\",\n+    filter = _.contains(\"Implement\")\n+  )\n+\n+  check(\n+    \"same-scope\",\n+    \"\"\"\n+      |package a { class Foo }\n+      |package b { class Foo }\n+      |\n+      |trait Foo {\n+      |  def one: a.Foo\n+      |  def two: b.Foo\n+      |}\n+      |object Main {\n+      |  val x = new Foo {\n+      |    def@@\n+      |  }\n+      |}\n+      |\"\"\".stripMargin,\n+    \"\"\"|Implement all members(2 members)"
  },
  {
    "id" : "24e5dde1-aec9-4e4e-bec6-8cf093fe43be",
    "prId" : 1031,
    "comments" : [
      {
        "id" : "e9fb1d94-04ea-4e18-bfe4-4ee2ae17226f",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "So the formatting is a bit odd in these. I'm assuming because either range or type formatting isn't being triggered when these lines are being put in here? I'm not sure if I should just rely on when you're in the editor and the line is put there that it will then automatically be formated by (I think the range formatting?), or if I need to also calculate the amount of indent there should be there?",
        "createdAt" : "2019-11-02T21:46:44Z",
        "updatedAt" : "2019-11-10T21:00:37Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2127e3c5-bf05-4318-a819-dea82113ed8e",
        "parentId" : "e9fb1d94-04ea-4e18-bfe4-4ee2ae17226f",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I would expect the completions to include the indentation here and I think we already calculate the necessary indentation for similar features. ",
        "createdAt" : "2019-11-02T23:12:20Z",
        "updatedAt" : "2019-11-10T21:00:37Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d86f1fab85d5e22c96d5b7f681c79dc78116aaac",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,362 @@\n+package tests.pc\n+\n+import tests.BaseCompletionSuite\n+\n+object CompletionOverrideAllSuite extends BaseCompletionSuite {\n+\n+  override def beforeAll(): Unit = {\n+    indexJDK()\n+  }\n+\n+  check(\n+    \"simple\",\n+    \"\"\"|package example\n+       |\n+       |trait Foo {\n+       |  def foo: Int\n+       |  def bar: Int\n+       |}\n+       |object Main {\n+       |  val x = new Foo {\n+       |    def@@\n+       |  }\n+       |}\n+       |\"\"\".stripMargin,\n+    \"\"\"|Implement all members (2 total)\n+       |\"\"\".stripMargin,\n+    filter = _.contains(\"Implement\")\n+  )\n+\n+  checkEdit(\n+    \"simple-edit\",\n+    \"\"\"|package example\n+       |\n+       |trait Foo {\n+       |  def foo: Int\n+       |  def bar: Int\n+       |}\n+       |object Main {\n+       |  val x = new Foo {\n+       |    def@@\n+       |  }\n+       |}\n+       |\"\"\".stripMargin,\n+    \"\"\"|package example\n+       |\n+       |trait Foo {\n+       |  def foo: Int\n+       |  def bar: Int\n+       |}\n+       |object Main {\n+       |  val x = new Foo {\n+       |    def foo: Int = ${0:???}\n+       |def bar: Int = ${0:???}"
  },
  {
    "id" : "6f6e3d8d-56ab-4cc3-bed4-e9cecd89ca4c",
    "prId" : 1031,
    "comments" : [
      {
        "id" : "e566ce2e-5784-4970-a378-4f6b77129df2",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "If the test behavior is different than the actual one, this may be a bug in \r\nhttps://github.com/scalameta/metals/blob/f7dc2c5d6732bb484420451cccc8e386807d49fd/tests/mtest/src/main/scala/tests/TextEdits.scala#L13-L34",
        "createdAt" : "2019-11-03T16:35:57Z",
        "updatedAt" : "2019-11-10T21:00:37Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a4fb739b-349b-4ac9-bc81-273f87538b91",
        "parentId" : "e566ce2e-5784-4970-a378-4f6b77129df2",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "I'll take a closer look at this here to see if I can find anything to explain what's happening. Thanks!",
        "createdAt" : "2019-11-03T16:42:40Z",
        "updatedAt" : "2019-11-10T21:00:37Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d86f1fab85d5e22c96d5b7f681c79dc78116aaac",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,366 @@\n+package tests.pc\n+\n+import tests.BaseCompletionSuite\n+\n+object CompletionOverrideAllSuite extends BaseCompletionSuite {\n+\n+  override def beforeAll(): Unit = {\n+    indexJDK()\n+  }\n+\n+  check(\n+    \"simple\",\n+    \"\"\"|package example\n+       |\n+       |trait Foo {\n+       |  def foo: Int\n+       |  def bar: Int\n+       |}\n+       |object Main {\n+       |  val x = new Foo {\n+       |    def@@\n+       |  }\n+       |}\n+       |\"\"\".stripMargin,\n+    \"\"\"|Implement all members (2 total)\n+       |\"\"\".stripMargin,\n+    filter = _.contains(\"Implement\")\n+  )\n+\n+  // Note: ckipp01 the indentation for the completions on the edits\n+  // look a bit odd, but it seems the tests aren't respecting the actual\n+  // indentation as these all work locally as expected, and when the actual\n+  // indent is added, the necessary indent is unnecessarily doubled"
  },
  {
    "id" : "528dbf47-1ce8-4536-a280-cbe603dde1fa",
    "prId" : 1031,
    "comments" : [
      {
        "id" : "3d950172-3dec-4e75-abb9-16f4b5a17686",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "What happens if a method we override needs an import?\r\n```scala\r\ntrait Foo {\r\n  def file: java.io.File \r\n}\r\nclass Bar {\r\n  def file@@ // implement all members\r\n}\r\n```",
        "createdAt" : "2019-11-08T15:25:07Z",
        "updatedAt" : "2019-11-10T21:00:37Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d4e12d7e-84d3-48c6-86b1-120d2c5c4958",
        "parentId" : "3d950172-3dec-4e75-abb9-16f4b5a17686",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Just tested it locally and it imports it, but let me add a test to actually check it.",
        "createdAt" : "2019-11-08T15:35:38Z",
        "updatedAt" : "2019-11-10T21:00:37Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8af6fbf4-5beb-47d4-9236-5618be474b00",
        "parentId" : "3d950172-3dec-4e75-abb9-16f4b5a17686",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Actually nevermind, it does for a single member but not like I thought it would with the implement all. Good catch, thanks.",
        "createdAt" : "2019-11-08T15:41:43Z",
        "updatedAt" : "2019-11-10T21:00:37Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d86f1fab85d5e22c96d5b7f681c79dc78116aaac",
    "line" : 318,
    "diffHunk" : "@@ -0,0 +1,361 @@\n+package tests.pc\n+\n+import tests.BaseCompletionSuite\n+\n+object CompletionOverrideAllSuite extends BaseCompletionSuite {\n+\n+  override def beforeAll(): Unit = {\n+    indexJDK()\n+  }\n+\n+  check(\n+    \"simple\",\n+    \"\"\"|package example\n+       |\n+       |trait Foo {\n+       |  def foo: Int\n+       |  def bar: Int\n+       |}\n+       |object Main {\n+       |  val x = new Foo {\n+       |    def@@\n+       |  }\n+       |}\n+       |\"\"\".stripMargin,\n+    \"\"\"|Implement all members (2 total)\n+       |\"\"\".stripMargin,\n+    filter = _.contains(\"Implement\")\n+  )\n+\n+  checkEdit(\n+    \"simple-edit\",\n+    \"\"\"|package example\n+       |\n+       |trait Foo {\n+       |  def foo: Int\n+       |  def bar: Int\n+       |}\n+       |object Main {\n+       |  val x = new Foo {\n+       |    def@@\n+       |  }\n+       |}\n+       |\"\"\".stripMargin,\n+    \"\"\"|package example\n+       |\n+       |trait Foo {\n+       |  def foo: Int\n+       |  def bar: Int\n+       |}\n+       |object Main {\n+       |  val x = new Foo {\n+       |    def foo: Int = ${0:???}\n+       |    def bar: Int = ${0:???}\n+       |  }\n+       |}\n+       |\"\"\".stripMargin,\n+    filter = _.contains(\"Implement\")\n+  )\n+\n+  check(\n+    \"simple-three\",\n+    \"\"\"|package example\n+       |\n+       |trait Foo {\n+       |  def foo: Int\n+       |  def bar: Int\n+       |  def car: Int\n+       |}\n+       |object Main {\n+       |  val x = new Foo {\n+       |    def@@\n+       |  }\n+       |}\n+       |\"\"\".stripMargin,\n+    \"\"\"|Implement all members (3 total)\n+       |\"\"\".stripMargin,\n+    filter = _.contains(\"Implement\")\n+  )\n+\n+  checkEdit(\n+    \"simple-three-edit\",\n+    \"\"\"|package example\n+       |\n+       |trait Foo {\n+       |  def foo: Int\n+       |  def bar: Int\n+       |  def car: Int\n+       |}\n+       |object Main {\n+       |  val x = new Foo {\n+       |    def@@\n+       |  }\n+       |}\n+       |\"\"\".stripMargin,\n+    \"\"\"\n+      |package example\n+      |\n+      |trait Foo {\n+      |  def foo: Int\n+      |  def bar: Int\n+      |  def car: Int\n+      |}\n+      |object Main {\n+      |  val x = new Foo {\n+      |    def foo: Int = ${0:???}\n+      |    def bar: Int = ${0:???}\n+      |    def car: Int = ${0:???}\n+      |  }\n+      |}\n+      |\"\"\".stripMargin,\n+    filter = _.contains(\"Implement\")\n+  )\n+\n+  check(\n+    \"two-left\",\n+    \"\"\"|package example\n+       |\n+       |trait Foo {\n+       |  def foo: Int\n+       |  def bar: Int\n+       |  def car: Int\n+       |}\n+       |object Main {\n+       |  val x = new Foo {\n+           def foo = 2\n+       |    def@@\n+       |  }\n+       |}\n+       |\"\"\".stripMargin,\n+    \"\"\"|Implement all members (2 total)\n+       |\"\"\".stripMargin,\n+    filter = _.contains(\"Implement\")\n+  )\n+\n+  checkEdit(\n+    \"two-left-edit\",\n+    \"\"\"|package example\n+       |\n+       |trait Foo {\n+       |  def foo: Int\n+       |  def bar: Int\n+       |  def car: Int\n+       |}\n+       |object Main {\n+       |  val x = new Foo {\n+       |    def foo = 2\n+       |    def@@\n+       |  }\n+       |}\n+       |\"\"\".stripMargin,\n+    \"\"\"|package example\n+       |\n+       |trait Foo {\n+       |  def foo: Int\n+       |  def bar: Int\n+       |  def car: Int\n+       |}\n+       |object Main {\n+       |  val x = new Foo {\n+       |    def foo = 2\n+       |    def bar: Int = ${0:???}\n+       |    def car: Int = ${0:???}\n+       |  }\n+       |}\n+       |\"\"\".stripMargin,\n+    filter = _.contains(\"Implement\")\n+  )\n+\n+  check(\n+    \"none-with-one\",\n+    \"\"\"|package example\n+       |\n+       |trait Foo {\n+       |  def foo: Int\n+       |}\n+       |object Main {\n+       |  val x = new Foo {\n+       |    def@@\n+       |  }\n+       |}\n+       |\"\"\".stripMargin,\n+    \"\",\n+    filter = _.contains(\"Implement\")\n+  )\n+\n+  check(\n+    \"same-scope\",\n+    \"\"\"|package a { class Foo }\n+       |package b { class Foo }\n+       |\n+       |trait Foo {\n+       |  def one: a.Foo\n+       |  def two: b.Foo\n+       |}\n+       |object Main {\n+       |  val x = new Foo {\n+       |    def@@\n+       |  }\n+       |}\n+       |\"\"\".stripMargin,\n+    \"\"\"|Implement all members (2 total)\n+       |\"\"\".stripMargin,\n+    filter = _.contains(\"Implement\")\n+  )\n+\n+  checkEdit(\n+    \"same-scope-edit\",\n+    \"\"\"|package a { class Foo }\n+       |package b { class Foo }\n+       |\n+       |trait Foo {\n+       |  def one: a.Foo\n+       |  def two: b.Foo\n+       |}\n+       |object Main {\n+       |  val x = new Foo {\n+       |    def@@\n+       |  }\n+       |}\n+       |\"\"\".stripMargin,\n+    \"\"\"|package a { class Foo }\n+       |package b { class Foo }\n+       |\n+       |trait Foo {\n+       |  def one: a.Foo\n+       |  def two: b.Foo\n+       |}\n+       |object Main {\n+       |  val x = new Foo {\n+       |    def one: a.Foo = ${0:???}\n+       |    def two: b.Foo = ${0:???}\n+       |  }\n+       |}\n+       |\"\"\".stripMargin,\n+    filter = _.contains(\"Implement\")\n+  )\n+\n+  check(\n+    \"include-val-var\",\n+    \"\"\"|package example\n+       |\n+       |trait Foo {\n+       |  def foo: Int\n+       |  val bar: Int\n+       |  var car: Int\n+       |}\n+       |object Main {\n+       |  val x = new Foo {\n+       |    def@@\n+       |  }\n+       |}\n+       |\"\"\".stripMargin,\n+    \"\"\"|Implement all members (3 total)\n+       |\"\"\".stripMargin,\n+    filter = _.contains(\"Implement\")\n+  )\n+\n+  checkEdit(\n+    \"include-val-var-edit\",\n+    \"\"\"|package example\n+       |\n+       |trait Foo {\n+       |  def foo: Int\n+       |  val bar: Int\n+       |  var car: Int\n+       |}\n+       |object Main {\n+       |  val x = new Foo {\n+       |    def@@\n+       |  }\n+       |}\n+       |\"\"\".stripMargin,\n+    \"\"\"|package example\n+       |\n+       |trait Foo {\n+       |  def foo: Int\n+       |  val bar: Int\n+       |  var car: Int\n+       |}\n+       |object Main {\n+       |  val x = new Foo {\n+       |    def foo: Int = ${0:???}\n+       |    val bar: Int = ${0:???}\n+       |    var car: Int = ${0:???}\n+       |  }\n+       |}\n+       |\"\"\".stripMargin,\n+    filter = _.contains(\"Implement\")\n+  )\n+\n+  check(\n+    \"mixed-partial\",\n+    \"\"\"|package example\n+       |\n+       |trait Foo {\n+       |  def foo: Int\n+       |  def foo2: Int\n+       |  var bar: Int\n+       |  var bar2: Int\n+       |  val car: Int\n+       |  val car2: Int\n+       |}\n+       |object Main {\n+       |  val x = new Foo {\n+       |   def foo: int = 3\n+       |   var bar: int = 2\n+       |   val car: Int = 1\n+       |   def@@\n+       |  }\n+       |}\n+       |\"\"\".stripMargin,\n+    \"\"\"|Implement all members (3 total)\n+       |\"\"\".stripMargin,\n+    filter = _.contains(\"Implement\")\n+  )\n+\n+  checkEdit(\n+    \"mixed-partial-edit\","
  }
]