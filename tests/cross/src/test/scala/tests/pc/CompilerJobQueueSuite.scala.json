[
  {
    "id" : "b0eaf793-148d-41d0-95d1-0fe920d6b087",
    "prId" : 736,
    "comments" : [
      {
        "id" : "87d2d3d2-91f1-45cb-b057-05dfe88c7020",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "maybe `tasks` ? `original` doesn't tell me anything. If the intent is that it is something we expect to get after the `when/act` phase, then `expected` is - I think - well established name.",
        "createdAt" : "2019-05-29T14:56:40Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "175f8b04-9fcf-4cf5-90e8-5806bd08704c",
        "parentId" : "87d2d3d2-91f1-45cb-b057-05dfe88c7020",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "`original` is used consistently in the metals test suites to represent the original input, for example\r\n```scala\r\ndef check(name: String, original: String, expected: String): Unit =\r\n  test(name) {\r\n    val obtained = someFunction(original)\r\n    assert(obtained == expected)\r\n  }\r\n```",
        "createdAt" : "2019-05-31T09:38:47Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : 40,
    "diffHunk" : "@@ -0,0 +1,59 @@\n+package tests.pc\n+\n+import tests.BaseSuite\n+import scala.meta.internal.pc.CompilerJobQueue\n+import scala.concurrent.Promise\n+import scala.concurrent.Future\n+import scala.concurrent.Await\n+import scala.concurrent.duration.Duration\n+import scala.concurrent.ExecutionContext.Implicits.global\n+import scala.collection.mutable\n+import java.util.concurrent.CompletableFuture\n+import java.util.concurrent.TimeUnit\n+\n+object CompilerJobQueueSuite extends BaseSuite {\n+  var jobs: CompilerJobQueue = null\n+\n+  override def utestBeforeEach(path: Seq[String]): Unit = {\n+    jobs = CompilerJobQueue()\n+    super.utestBeforeEach(path)\n+  }\n+  override def utestAfterEach(path: Seq[String]): Unit = {\n+    jobs.shutdown()\n+    super.utestAfterEach(path)\n+  }\n+\n+  test(\"cancel\") {\n+    val cancelled = new CompletableFuture[Unit]()\n+    cancelled.cancel(false)\n+    jobs.submit(cancelled, () => {\n+      Thread.sleep(50)\n+    })\n+    jobs.executor.shutdown()\n+    // Assert that cancelled task never execute.\n+    jobs.executor.awaitTermination(10, TimeUnit.MILLISECONDS)\n+  }\n+\n+  test(\"order\") {\n+    val obtained = mutable.ListBuffer.empty[Int]\n+    val size = 10\n+    val original = 1.to(size).toList"
  },
  {
    "id" : "f5809fab-aca7-4583-b6f8-d7b60fc70170",
    "prId" : 736,
    "comments" : [
      {
        "id" : "d9271d98-1110-4dd7-baf9-0fea2aa747bf",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "swap with line 56 ;)",
        "createdAt" : "2019-05-29T14:58:55Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0a50a906-a82c-4c19-a823-a2dabd7a448c",
        "parentId" : "d9271d98-1110-4dd7-baf9-0fea2aa747bf",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Good catch!",
        "createdAt" : "2019-05-31T09:39:09Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,59 @@\n+package tests.pc\n+\n+import tests.BaseSuite\n+import scala.meta.internal.pc.CompilerJobQueue\n+import scala.concurrent.Promise\n+import scala.concurrent.Future\n+import scala.concurrent.Await\n+import scala.concurrent.duration.Duration\n+import scala.concurrent.ExecutionContext.Implicits.global\n+import scala.collection.mutable\n+import java.util.concurrent.CompletableFuture\n+import java.util.concurrent.TimeUnit\n+\n+object CompilerJobQueueSuite extends BaseSuite {\n+  var jobs: CompilerJobQueue = null\n+\n+  override def utestBeforeEach(path: Seq[String]): Unit = {\n+    jobs = CompilerJobQueue()\n+    super.utestBeforeEach(path)\n+  }\n+  override def utestAfterEach(path: Seq[String]): Unit = {\n+    jobs.shutdown()\n+    super.utestAfterEach(path)\n+  }\n+\n+  test(\"cancel\") {\n+    val cancelled = new CompletableFuture[Unit]()\n+    cancelled.cancel(false)\n+    jobs.submit(cancelled, () => {\n+      Thread.sleep(50)\n+    })\n+    jobs.executor.shutdown()\n+    // Assert that cancelled task never execute.\n+    jobs.executor.awaitTermination(10, TimeUnit.MILLISECONDS)\n+  }\n+\n+  test(\"order\") {\n+    val obtained = mutable.ListBuffer.empty[Int]\n+    val size = 10\n+    val original = 1.to(size).toList\n+    val all = Future.traverse(original) { i =>\n+      val promise = Promise[Unit]()\n+      jobs.submit(() => {\n+        Thread.sleep(i * 5)\n+        obtained += i\n+        promise.success(())\n+      })\n+      promise.future\n+    }\n+\n+    Await.result(all, Duration(\"1s\"))\n+\n+    // Assert that the jobs don't run in the default order."
  }
]