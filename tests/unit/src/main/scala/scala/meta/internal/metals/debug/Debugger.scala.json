[
  {
    "id" : "8c1d5a4c-9491-4a93-8c62-97e685211d60",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "0a4e8ce7-ecdc-43de-9687-efa6d6600c3d",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "nit: let's use `import java.lang{Long => JLong}` instead",
        "createdAt" : "2019-12-15T11:37:25Z",
        "updatedAt" : "2019-12-18T11:36:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "39ad6740-5df8-4de2-88d3-a78b9a7dd59b",
        "parentId" : "0a4e8ce7-ecdc-43de-9687-efa6d6600c3d",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Good catch. In fact, we should use the Scala `Long` here.",
        "createdAt" : "2019-12-16T07:56:42Z",
        "updatedAt" : "2019-12-18T11:36:11Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "04ef30f47759c2620cd886265e4c50169245a539",
    "line" : null,
    "diffHunk" : "@@ -47,6 +64,88 @@ final class Debugger(server: RemoteServer)(implicit ec: ExecutionContext) {\n     server.disconnect(args).asScala.ignoreValue\n   }\n \n+  def setBreakpoints(\n+      source: Source,\n+      breakpoints: Array[SourceBreakpoint]\n+  ): Future[SetBreakpointsResponse] = {\n+    val args = new SetBreakpointsArguments\n+    args.setSource(source)\n+    args.setBreakpoints(breakpoints)\n+    server.setBreakpoints(args).asScala\n+  }\n+\n+  def step(threadId: Long, nextStep: DebugStep): Future[Unit] = {\n+    nextStep match {\n+      case DebugStep.Continue =>\n+        val args = new ContinueArguments()\n+        args.setThreadId(threadId)\n+        server.continue_(args).asScala.ignoreValue\n+      case DebugStep.StepIn =>\n+        val args = new StepInArguments()\n+        args.setThreadId(threadId)\n+        server.stepIn(args).asScala.ignoreValue\n+      case DebugStep.StepOut =>\n+        val args = new StepOutArguments()\n+        args.setThreadId(threadId)\n+        server.stepOut(args).asScala.ignoreValue\n+      case DebugStep.StepOver =>\n+        val args = new NextArguments()\n+        args.setThreadId(threadId)\n+        server.next(args).asScala.ignoreValue\n+      case cause =>\n+        val error = s\"Unsupported debug step $cause\"\n+        Future.failed(new IllegalStateException(error))\n+    }\n+  }\n+\n+  def stackFrame(threadId: lang.Long): Future[StackFrame] = {"
  },
  {
    "id" : "a7fa0d48-3c1a-44fa-bbd5-2c77570f09a5",
    "prId" : 1556,
    "comments" : [
      {
        "id" : "dfc492f2-dc72-4aea-8541-796a1473650a",
        "parentId" : null,
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "1L.toInt -> 1 \r\n:)",
        "createdAt" : "2020-03-29T08:22:40Z",
        "updatedAt" : "2020-03-29T09:22:05Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "424c3045-73c2-488e-ba33-dcd9624724c1",
        "parentId" : "dfc492f2-dc72-4aea-8541-796a1473650a",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "ðŸ˜¬ ",
        "createdAt" : "2020-03-29T08:30:54Z",
        "updatedAt" : "2020-03-29T09:22:05Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "48a23bb706b675598d79fe12725768b2507fe3bc",
    "line" : null,
    "diffHunk" : "@@ -122,20 +122,20 @@ final class Debugger(server: RemoteServer)(implicit ec: ExecutionContext) {\n \n   def stackTrace(thread: Long): Future[StackTraceResponse] = {\n     val args = new StackTraceArguments\n-    args.setThreadId(thread)\n-    args.setLevels(1L)\n+    args.setThreadId(thread.toInt)\n+    args.setLevels(1L.toInt)"
  },
  {
    "id" : "96ab1264-ee5e-4e51-943d-d0834e32420c",
    "prId" : 1556,
    "comments" : [
      {
        "id" : "f8bdb390-d007-4111-93e4-7f6901e9e394",
        "parentId" : null,
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "I would change `thread: Long` -> `threadId -> Int` (threadId is Int now) ",
        "createdAt" : "2020-03-29T08:39:38Z",
        "updatedAt" : "2020-03-29T09:22:05Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "66c93e77-9e12-48fa-97d9-18dd5cef5b96",
        "parentId" : "f8bdb390-d007-4111-93e4-7f6901e9e394",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Do you think it also makes sense to then change both `def scopes` and also `def variables` below to be `Int`s as well?",
        "createdAt" : "2020-03-29T09:18:51Z",
        "updatedAt" : "2020-03-29T09:22:05Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dccb3fd9-f76b-4b08-b118-0ede531fa31c",
        "parentId" : "f8bdb390-d007-4111-93e4-7f6901e9e394",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "yes because right now it is: Int from LSP -> convert to Long -> modify other thing -> convert to Int -> put into LSP (we could simply avoid `convert` step)",
        "createdAt" : "2020-03-29T10:22:31Z",
        "updatedAt" : "2020-03-29T10:22:31Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dcb619b8-facf-4853-94dc-43ed82889563",
        "parentId" : "f8bdb390-d007-4111-93e4-7f6901e9e394",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Sounds good. I changed these as well.",
        "createdAt" : "2020-03-29T12:46:49Z",
        "updatedAt" : "2020-03-29T12:46:49Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "48a23bb706b675598d79fe12725768b2507fe3bc",
    "line" : null,
    "diffHunk" : "@@ -122,20 +122,20 @@ final class Debugger(server: RemoteServer)(implicit ec: ExecutionContext) {\n \n   def stackTrace(thread: Long): Future[StackTraceResponse] = {"
  }
]