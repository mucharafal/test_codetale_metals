[
  {
    "id" : "1484af2f-b30c-4978-9622-e4c00f8466af",
    "prId" : 978,
    "comments" : [
      {
        "id" : "13e4247b-03be-439d-8edf-5f8d986c3b58",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Might not make sense to have a separate base class if this is used in one suite. Better to add those methods as private to the bottom of the suite. I don't imagine this hierachy will be used.",
        "createdAt" : "2019-12-17T09:35:47Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bfd0a347-8f09-490d-8713-f773d2cf6f4e",
        "parentId" : "13e4247b-03be-439d-8edf-5f8d986c3b58",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "Changed.",
        "createdAt" : "2019-12-18T16:12:33Z",
        "updatedAt" : "2019-12-18T16:12:33Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,111 @@\n+package tests\n+\n+import scala.meta.internal.metals.TextEdits\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.Future\n+import scala.meta.inputs.Input\n+import scala.meta.inputs.Position\n+import scala.meta.internal.mtags.MtagsEnrichments._\n+\n+class BaseTypeDefinitionLspSuite extends BaseLspSuite(\"typeDefinition\") {"
  },
  {
    "id" : "259a8178-b9be-46de-8096-064a222bbc34",
    "prId" : 978,
    "comments" : [
      {
        "id" : "0b02670b-f18d-4657-8640-91fea6ea48ca",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "You can check this after running FileLayout. Should be simpler then.",
        "createdAt" : "2019-12-17T09:40:48Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,111 @@\n+package tests\n+\n+import scala.meta.internal.metals.TextEdits\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.Future\n+import scala.meta.inputs.Input\n+import scala.meta.inputs.Position\n+import scala.meta.internal.mtags.MtagsEnrichments._\n+\n+class BaseTypeDefinitionLspSuite extends BaseLspSuite(\"typeDefinition\") {\n+  def check(\n+      name: String\n+  )(query: String, expectedLocs: List[String] = Nil): Unit = {\n+    testAsync(name) {\n+      cleanWorkspace()\n+      val code =\n+        query\n+          .replaceAll(\"(@@)?(<<)?(>>)?\", \"\")\n+          .replaceAll(\"\"\"\\/\\*[^\\*]+\\*\\/\"\"\", \"\")\n+      val files = query.lines"
  },
  {
    "id" : "4d2eb6b0-79ec-4abe-b06a-fce0a4ff0ec8",
    "prId" : 978,
    "comments" : [
      {
        "id" : "cdbd4726-b18f-4174-9eaa-3cffc04fe1a7",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We can have it separate here by default like in RenameLspSuie",
        "createdAt" : "2019-12-17T09:44:07Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,111 @@\n+package tests\n+\n+import scala.meta.internal.metals.TextEdits\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.Future\n+import scala.meta.inputs.Input\n+import scala.meta.inputs.Position\n+import scala.meta.internal.mtags.MtagsEnrichments._\n+\n+class BaseTypeDefinitionLspSuite extends BaseLspSuite(\"typeDefinition\") {\n+  def check(\n+      name: String\n+  )(query: String, expectedLocs: List[String] = Nil): Unit = {\n+    testAsync(name) {\n+      cleanWorkspace()\n+      val code =\n+        query\n+          .replaceAll(\"(@@)?(<<)?(>>)?\", \"\")\n+          .replaceAll(\"\"\"\\/\\*[^\\*]+\\*\\/\"\"\", \"\")\n+      val files = query.lines\n+        .filter(_.startsWith(\"/\"))\n+        .filter(_.filter(!_.isWhitespace) != \"/metals.json\")"
  },
  {
    "id" : "aea5d0bf-4f25-47c0-9c9a-9ca0e21e5cb6",
    "prId" : 978,
    "comments" : [
      {
        "id" : "1a907ba7-3e20-4dc8-bd96-1476a6b98499",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Is `expectedLocs` used still?",
        "createdAt" : "2019-12-17T09:45:17Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a56453e5-78df-41bf-ac88-b5c576932fed",
        "parentId" : "1a907ba7-3e20-4dc8-bd96-1476a6b98499",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "`ext-library` uses it. It makes it possible to specify exact position in another file.",
        "createdAt" : "2019-12-17T10:45:32Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,111 @@\n+package tests\n+\n+import scala.meta.internal.metals.TextEdits\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.Future\n+import scala.meta.inputs.Input\n+import scala.meta.inputs.Position\n+import scala.meta.internal.mtags.MtagsEnrichments._\n+\n+class BaseTypeDefinitionLspSuite extends BaseLspSuite(\"typeDefinition\") {\n+  def check(\n+      name: String\n+  )(query: String, expectedLocs: List[String] = Nil): Unit = {"
  },
  {
    "id" : "fbeac2e5-46cb-49d0-b1f1-038645496fe1",
    "prId" : 978,
    "comments" : [
      {
        "id" : "d1c5fc16-8cb6-4e34-904c-c337e36a7d1b",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "This is already used in the PCSuite I think? Can we reuse the same code?",
        "createdAt" : "2019-12-17T09:48:09Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "24afe21b-7471-4ab2-bc00-36bfc2687b61",
        "parentId" : "d1c5fc16-8cb6-4e34-904c-c337e36a7d1b",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "I think I removed duplicates of it.",
        "createdAt" : "2019-12-18T14:58:50Z",
        "updatedAt" : "2019-12-18T14:58:50Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,111 @@\n+package tests\n+\n+import scala.meta.internal.metals.TextEdits\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.Future\n+import scala.meta.inputs.Input\n+import scala.meta.inputs.Position\n+import scala.meta.internal.mtags.MtagsEnrichments._\n+\n+class BaseTypeDefinitionLspSuite extends BaseLspSuite(\"typeDefinition\") {\n+  def check(\n+      name: String\n+  )(query: String, expectedLocs: List[String] = Nil): Unit = {\n+    testAsync(name) {\n+      cleanWorkspace()\n+      val code =\n+        query\n+          .replaceAll(\"(@@)?(<<)?(>>)?\", \"\")\n+          .replaceAll(\"\"\"\\/\\*[^\\*]+\\*\\/\"\"\", \"\")\n+      val files = query.lines\n+        .filter(_.startsWith(\"/\"))\n+        .filter(_.filter(!_.isWhitespace) != \"/metals.json\")\n+        .map(_.stripPrefix(\"/\"))\n+\n+      for {\n+        _ <- server.initialize(\n+          s\"\"\"${code.trim}\"\"\".stripMargin\n+        )\n+        _ <- Future.sequence(files.map(server.didOpen))\n+        expected = expectedLocs.flatMap(\n+          TestingServer.locationFromString(_, workspace)\n+        )\n+        _ <- server.assertTypeDefinition(\n+          queryStr = query,\n+          expectedLocs = expected,\n+          root = workspace\n+        )\n+        _ = assertNoDiagnostics()\n+        _ = if (!server.server.isInitialized.get())\n+          fail(\"Build tool not initialized\")\n+      } yield ()\n+    }\n+  }\n+\n+  def prepareDefinition(original: String): String =\n+    original.replaceAll(\"(<<)?(>>)?\", \"\")\n+\n+  def locationsToCode("
  }
]