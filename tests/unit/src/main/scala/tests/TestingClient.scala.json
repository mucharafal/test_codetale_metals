[
  {
    "id" : "775c1afc-2402-468a-964e-cce179047f50",
    "prId" : 737,
    "comments" : [
      {
        "id" : "38850b0a-c020-494f-8c9d-82b8f39ba7fa",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "```suggestion\r\n        .contains(params)\r\n```",
        "createdAt" : "2019-06-05T13:13:58Z",
        "updatedAt" : "2019-06-05T15:06:18Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3b0b2cfc5be483b031004060e57b22729000de09",
    "line" : null,
    "diffHunk" : "@@ -169,7 +169,9 @@ final class TestingClient(workspace: AbsolutePath, buffers: Buffers)\n     def isSameMessage(\n         createParams: String => ShowMessageRequestParams\n     ): Boolean = {\n-      createParams(\"gradle\") == params || createParams(\"sbt\") == params\n+      Set(\"gradle\", \"sbt\", \"maven\", \"mill\")\n+        .map(createParams)\n+        .exists(_ == params)"
  },
  {
    "id" : "bbe13ec6-5800-4ea9-99ae-4ea97df11fc3",
    "prId" : 862,
    "comments" : [
      {
        "id" : "12bc8c31-8690-4692-bbc0-da4521afd5ac",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I would lose the additional newlines here too.",
        "createdAt" : "2019-08-09T14:24:06Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0bffe13a-8910-461a-a65c-1c93706fa5ed",
        "parentId" : "12bc8c31-8690-4692-bbc0-da4521afd5ac",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "newlines are great. And here they separate the three steps of the function quite well:\r\n1. prepare the input\r\n2. apply the edit\r\n3. write the new content\r\n\r\nmaybe 1. and 2. could be aggregated into?\r\n```scala\r\n      val content = uri.toAbsolutePath.readText\r\n      val editedContent = \r\n        TextEdits.applyEdits(content, textEdits.asScala.toList)\r\n```",
        "createdAt" : "2019-08-09T19:34:24Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "da3ac6c8-6b7c-4b1c-8d79-595128fc722b",
        "parentId" : "12bc8c31-8690-4692-bbc0-da4521afd5ac",
        "author" : {
          "login" : "tdudzik",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/6402694?v=4"
        },
        "body" : "It doesn't work.\r\n`Illegal character in path at index 44: /home/tdudzik/Projects/metals/target/e2e/add package/single-level/a/src/main/scala/a/Main.scala` \r\n\r\nAlso, `AbsolutePath` is used two times (`readText` and `writeText`) so I think it's good idea to have the `path` value. ",
        "createdAt" : "2019-08-12T10:02:38Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "tdudzik",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/6402694?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c9cc12c4-2f5a-4fb7-8b55-7057600223f3",
        "parentId" : "12bc8c31-8690-4692-bbc0-da4521afd5ac",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Illegal path seems to be because of the whitespace I think.",
        "createdAt" : "2019-08-12T10:12:26Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e68f7339-6c85-4056-a9a2-540f1f1df1c3",
        "parentId" : "12bc8c31-8690-4692-bbc0-da4521afd5ac",
        "author" : {
          "login" : "tdudzik",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/6402694?v=4"
        },
        "body" : "Yes but after fixing whitespace issue another exception is thrown `Missing scheme\r\njava.lang.IllegalArgumentException: Missing scheme`",
        "createdAt" : "2019-08-12T10:21:57Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "tdudzik",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/6402694?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5d2d12c2-d13f-439b-973b-664a7eb8b37f",
        "parentId" : "12bc8c31-8690-4692-bbc0-da4521afd5ac",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Ok, let's jsut leave whatever works, that's jsut the testing client",
        "createdAt" : "2019-08-12T10:34:59Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "909e79755bb7dc96fad63232599fe13092152914",
    "line" : 27,
    "diffHunk" : "@@ -66,6 +69,24 @@ final class TestingClient(workspace: AbsolutePath, buffers: Buffers)\n   ): Unit = {\n     clientCommands.addLast(params)\n   }\n+\n+  override def applyEdit(\n+      params: ApplyWorkspaceEditParams\n+  ): CompletableFuture[ApplyWorkspaceEditResponse] = {\n+    def applyEdits(uri: String, textEdits: java.util.List[TextEdit]): Unit = {\n+      val path = AbsolutePath(uri)\n+"
  },
  {
    "id" : "9a03688a-3e71-4ae7-bade-b6fcadbcbc9a",
    "prId" : 862,
    "comments" : [
      {
        "id" : "5b13dbcd-5b4a-45fc-aa9c-16c9fa725f5f",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "this does some additional magic to string uri (see [XtensionStringUriProtocol::toAbsolutePath](https://github.com/scalameta/metals/blob/7f85d79c3596721e3afe7b7443860c8582648c86/metals/src/main/scala/scala/meta/internal/metals/MetalsEnrichments.scala#L329))\r\n```suggestion\r\n      val path = uri.toAbsolutePath\r\n```",
        "createdAt" : "2019-08-09T19:33:35Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5e311fc0-906e-4bb7-9633-f58ee53ad954",
        "parentId" : "5b13dbcd-5b4a-45fc-aa9c-16c9fa725f5f",
        "author" : {
          "login" : "tdudzik",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/6402694?v=4"
        },
        "body" : "After this change exception is thrown: `Missing scheme java.lang.IllegalArgumentException: Missing scheme`. It seems that `uri` is actually not a valid URI. ",
        "createdAt" : "2019-08-12T10:20:34Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "tdudzik",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/6402694?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "909e79755bb7dc96fad63232599fe13092152914",
    "line" : 26,
    "diffHunk" : "@@ -66,6 +69,24 @@ final class TestingClient(workspace: AbsolutePath, buffers: Buffers)\n   ): Unit = {\n     clientCommands.addLast(params)\n   }\n+\n+  override def applyEdit(\n+      params: ApplyWorkspaceEditParams\n+  ): CompletableFuture[ApplyWorkspaceEditResponse] = {\n+    def applyEdits(uri: String, textEdits: java.util.List[TextEdit]): Unit = {\n+      val path = AbsolutePath(uri)"
  },
  {
    "id" : "66541b3a-145c-4592-b755-ebfee6181732",
    "prId" : 994,
    "comments" : [
      {
        "id" : "7c3043e1-2b23-4817-9bfb-e7d9ccf613f9",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Can you use the `identity` function?",
        "createdAt" : "2019-10-17T09:10:35Z",
        "updatedAt" : "2019-10-18T19:07:35Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "aaf364fe67cd256af8a8f743e5008246635310ce",
    "line" : null,
    "diffHunk" : "@@ -64,10 +65,24 @@ final class TestingClient(workspace: AbsolutePath, buffers: Buffers)\n       None\n   }\n \n+  private var refreshedOnIndex = false\n+  var refreshModelHandler: Unit => Unit = { _: Unit =>"
  },
  {
    "id" : "157936ee-682f-4156-b35e-49f1e5b6f6b0",
    "prId" : 994,
    "comments" : [
      {
        "id" : "5f2c6946-5b39-4df8-8a27-8b25ec860547",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Nit: Could you keep the braces consistent?",
        "createdAt" : "2019-10-17T09:12:18Z",
        "updatedAt" : "2019-10-18T19:07:35Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "aaf364fe67cd256af8a8f743e5008246635310ce",
    "line" : 22,
    "diffHunk" : "@@ -64,10 +65,24 @@ final class TestingClient(workspace: AbsolutePath, buffers: Buffers)\n       None\n   }\n \n+  private var refreshedOnIndex = false\n+  var refreshModelHandler: Unit => Unit = { _: Unit =>\n+  }\n+\n   override def metalsExecuteClientCommand(\n       params: ExecuteCommandParams\n   ): Unit = {\n     clientCommands.addLast(params)\n+    params.getCommand match {\n+      case ClientCommands.RefreshModel.id =>\n+        if (refreshedOnIndex)\n+          refreshModelHandler()"
  },
  {
    "id" : "b30e2bd5-3140-4b42-8870-4d040cb0f35b",
    "prId" : 994,
    "comments" : [
      {
        "id" : "05b0f99d-af3b-49ff-a8ef-e24d44e740d1",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Is this needed?",
        "createdAt" : "2019-10-17T09:12:34Z",
        "updatedAt" : "2019-10-18T19:07:35Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "aaf364fe67cd256af8a8f743e5008246635310ce",
    "line" : null,
    "diffHunk" : "@@ -64,10 +65,24 @@ final class TestingClient(workspace: AbsolutePath, buffers: Buffers)\n       None\n   }\n \n+  private var refreshedOnIndex = false\n+  var refreshModelHandler: Unit => Unit = { _: Unit =>\n+  }\n+\n   override def metalsExecuteClientCommand(\n       params: ExecuteCommandParams\n   ): Unit = {\n     clientCommands.addLast(params)\n+    params.getCommand match {\n+      case ClientCommands.RefreshModel.id =>\n+        if (refreshedOnIndex)\n+          refreshModelHandler()\n+        else {\n+          refreshedOnIndex = true\n+        }\n+      case _ =>\n+        println()"
  },
  {
    "id" : "8308c379-b36f-4117-9764-58243ad74797",
    "prId" : 994,
    "comments" : [
      {
        "id" : "e145b71a-4742-486a-be5c-af8d22fe1623",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Is this used?",
        "createdAt" : "2019-10-18T14:49:27Z",
        "updatedAt" : "2019-10-18T19:07:35Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "aaf364fe67cd256af8a8f743e5008246635310ce",
    "line" : null,
    "diffHunk" : "@@ -268,3 +281,9 @@ final class TestingClient(workspace: AbsolutePath, buffers: Buffers)\n   }\n \n }\n+\n+object TestingClient {\n+  trait Listener {\n+    def onRefreshModel(): Unit"
  },
  {
    "id" : "8fcdb6e9-806e-475d-8a98-4c46395905b1",
    "prId" : 1447,
    "comments" : [
      {
        "id" : "d9982fb0-f48f-4874-aa17-257e74537059",
        "parentId" : null,
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "while picking kind of file can be expressed via `showMessageRequest`, asking for name of the new file cannot, so I had to add this handler for testing purposes.",
        "createdAt" : "2020-02-17T19:06:49Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "87da3c91-d5a1-4262-9d4a-29a389cdc95f",
        "parentId" : "d9982fb0-f48f-4874-aa17-257e74537059",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Can you add a default implementation returning some random name? You can have `var nameToPick = \"Foo\"` and replace that if needed. You also have None as the default if it's an issue.\r\n\r\nOtherwise, we will get a null pointer in case of some particular changes.",
        "createdAt" : "2020-02-19T18:01:55Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "948961c16a2b407e9b6be832f69458537ee4bc93",
    "line" : null,
    "diffHunk" : "@@ -71,6 +71,7 @@ final class TestingClient(workspace: AbsolutePath, buffers: Buffers)\n     _: ShowMessageRequestParams =>\n       None\n   }\n+  var inputBoxHandler: MetalsInputBoxParams => Option[MetalsInputBoxResult] = _"
  },
  {
    "id" : "4631743a-5fce-4bba-bb16-ff3200904e3e",
    "prId" : 1528,
    "comments" : [
      {
        "id" : "5adcf262-9e31-4af4-ade3-c9784bc05404",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "This is now as per the LSP specification: if `edit` and `command` are both present, first `edit` is applied then `command` is executed.",
        "createdAt" : "2020-03-23T10:25:27Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "29e8820c0560d7d7e678b124344d3884ba5c2bda",
    "line" : null,
    "diffHunk" : "@@ -342,8 +343,21 @@ final class TestingClient(workspace: AbsolutePath, buffers: Buffers)\n       .mkString(\"----\\n\")\n   }\n \n-  def applyCodeAction(codeAction: CodeAction): Unit = {\n-    applyWorkspaceEdit(codeAction.getEdit())\n+  private def executeServerCommand(\n+      command: Command,\n+      server: TestingServer\n+  ): Unit = {\n+    server.executeCommand(\n+      command.getCommand(),\n+      command.getArguments().asScala: _*\n+    )\n+  }\n+\n+  def applyCodeAction(codeAction: CodeAction, server: TestingServer): Unit = {\n+    val edit = codeAction.getEdit()\n+    val command = codeAction.getCommand()\n+    if (edit != null) applyWorkspaceEdit(edit)\n+    if (command != null) executeServerCommand(command, server)"
  },
  {
    "id" : "cf6c1386-9137-46b2-9724-01a1ca40a5a6",
    "prId" : 1758,
    "comments" : [
      {
        "id" : "8aa6a821-51fa-458e-abe5-51d0ea2e0f12",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Could we look for `sbt` instead? If the order changes at any point the test will fail.",
        "createdAt" : "2020-05-19T17:09:19Z",
        "updatedAt" : "2020-05-21T13:59:54Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "21613ea4-179b-4fce-8db7-8cb2a958e690",
        "parentId" : "8aa6a821-51fa-458e-abe5-51d0ea2e0f12",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Ah, good point 👍 ",
        "createdAt" : "2020-05-19T17:27:01Z",
        "updatedAt" : "2020-05-21T13:59:54Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "82833ad1c0108993cd84f5b3b8aba65d1107aace",
    "line" : null,
    "diffHunk" : "@@ -244,6 +260,9 @@ final class TestingClient(workspace: AbsolutePath, buffers: Buffers)\n           CheckDoctor.moreInformation\n         } else if (SelectBspServer.isSelectBspServer(params)) {\n           params.getActions.asScala.find(_.getTitle == \"Bob\").get\n+        } else if (isSameMessageFromList(ChooseBuildTool.params)) {\n+          params.getActions.asScala.toList.headOption"
  }
]