[
  {
    "id" : "c5d3aaea-6837-4045-9da2-379381bf356f",
    "prId" : 424,
    "comments" : [
      {
        "id" : "c66ba26b-548b-48fb-8efb-0e0c8c140f3b",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "unused",
        "createdAt" : "2018-12-18T11:41:47Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "eade48fd8ffbc5572cad7092e373fee0027e4f0f",
    "line" : null,
    "diffHunk" : "@@ -176,6 +178,23 @@ final class TestingServer(\n       )\n       .asScala\n   }\n+\n+  def didClose(filename: String): Future[Unit] = {\n+    Debug.printEnclosing()\n+    val abspath = toPath(filename)\n+    val uri = abspath.toURI.toString\n+    val extension = PathIO.extension(abspath.toNIO)"
  },
  {
    "id" : "9c8fde27-9ddb-4a35-9cfe-ed2045678bf2",
    "prId" : 424,
    "comments" : [
      {
        "id" : "4dd27091-9dd6-4c72-ab1e-374993f5cec0",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "unused",
        "createdAt" : "2018-12-18T11:42:04Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "eade48fd8ffbc5572cad7092e373fee0027e4f0f",
    "line" : null,
    "diffHunk" : "@@ -176,6 +178,23 @@ final class TestingServer(\n       )\n       .asScala\n   }\n+\n+  def didClose(filename: String): Future[Unit] = {\n+    Debug.printEnclosing()\n+    val abspath = toPath(filename)\n+    val uri = abspath.toURI.toString\n+    val extension = PathIO.extension(abspath.toNIO)\n+    val text = abspath.readText"
  },
  {
    "id" : "b7b91dd6-cd41-4525-9544-3fa2634561ec",
    "prId" : 429,
    "comments" : [
      {
        "id" : "b6c0abb7-420d-4282-9773-dba89d3aa692",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "We should update in-memory buffers to use the new text file contents. That avoids testing against `List[TextEdit]`",
        "createdAt" : "2018-12-20T12:36:25Z",
        "updatedAt" : "2018-12-22T11:11:14Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d12f8e17-6b24-4d70-982a-cd44051cb491",
        "parentId" : "b6c0abb7-420d-4282-9773-dba89d3aa692",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Ah yes, I thought of it then I forgot completely ðŸ˜…",
        "createdAt" : "2018-12-20T12:40:35Z",
        "updatedAt" : "2018-12-22T11:11:14Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ec1161fecfaec6824cba1eb2a21806f972c8f67f",
    "line" : null,
    "diffHunk" : "@@ -202,6 +206,18 @@ final class TestingServer(\n     }\n   }\n \n+  def formatting(filename: String): Future[util.List[TextEdit]] = {"
  },
  {
    "id" : "ba70277c-dfbc-41c9-9498-38a4e0d4bf41",
    "prId" : 429,
    "comments" : [
      {
        "id" : "b2dc86d7-e01c-47e1-bdb4-b26ed9af6cd5",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Better to return `String` and on error `throw new NoSuchElementException(filename)`",
        "createdAt" : "2018-12-20T15:31:25Z",
        "updatedAt" : "2018-12-22T11:11:14Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ec1161fecfaec6824cba1eb2a21806f972c8f67f",
    "line" : null,
    "diffHunk" : "@@ -279,6 +314,9 @@ final class TestingServer(\n     Semanticdbs.printTextDocument(textDocument)\n   }\n \n+  def bufferContent(filename: String): Option[String] =\n+    buffers.get(toPath(filename))"
  },
  {
    "id" : "7d7c4c4a-7eae-4631-b5dd-8d63fe46f794",
    "prId" : 621,
    "comments" : [
      {
        "id" : "e25f2a56-ad77-4a74-bcda-39cee05bbf2c",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I think we might be able to avoid `expected` by encoding the `<<` ranges in the `query` string.\r\n```scala\r\nassertHover(\r\n\"\"\"\r\nobject Main {\r\n  val <<abc>> = 1\r\n  println(<<a@@bc>> + <<abc>>)\r\n}\r\n```\r\n\r\nI don't feel strongly about it, you can use the approach you prefer",
        "createdAt" : "2019-04-02T15:08:19Z",
        "updatedAt" : "2019-04-05T09:13:03Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "11dd3225-643c-43ce-8736-fabd934243b8",
        "parentId" : "e25f2a56-ad77-4a74-bcda-39cee05bbf2c",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "It's one string now, should be simpler to write new tests.",
        "createdAt" : "2019-04-04T14:05:34Z",
        "updatedAt" : "2019-04-05T09:13:03Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6f03d2264f9c4e8e28d2e258ca99d24915c82e17",
    "line" : 7,
    "diffHunk" : "@@ -429,6 +429,37 @@ final class TestingServer(\n     }\n   }\n \n+  def assertHighlight(\n+      filename: String,\n+      query: String,\n+      expected: String,"
  },
  {
    "id" : "baa7cce3-a930-4f76-92a3-1de6ed2f63da",
    "prId" : 923,
    "comments" : [
      {
        "id" : "6e15b98f-e43b-430f-a5eb-7383116c4110",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Let's not use wildcard imports, they often produce unexpected results and might make compilation slower",
        "createdAt" : "2019-09-18T10:45:49Z",
        "updatedAt" : "2019-09-24T10:49:11Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "34b736c65504efc71e34421317b1346d8671e0ea",
    "line" : null,
    "diffHunk" : "@@ -56,30 +32,18 @@ import scala.concurrent.Future\n import scala.meta.Input\n import scala.meta.internal.io.FileIO\n import scala.meta.internal.io.PathIO\n-import scala.meta.internal.metals.Buffers\n-import scala.meta.internal.metals.Debug\n-import scala.meta.internal.metals.DidFocusResult\n-import scala.meta.internal.metals.WindowStateDidChangeParams\n-import scala.meta.internal.metals.Directories\n import scala.meta.internal.metals.MetalsEnrichments._\n-import scala.meta.internal.metals.MetalsLanguageServer\n-import scala.meta.internal.metals.MetalsServerConfig\n import scala.meta.internal.metals.PositionSyntax._\n-import scala.meta.internal.metals.ProgressTicks\n-import scala.meta.internal.metals.Time\n-import scala.meta.internal.metals.UserConfiguration\n+import scala.meta.internal.metals._"
  },
  {
    "id" : "dbeac547-900a-4b0a-ae9b-e53e8832c75a",
    "prId" : 923,
    "comments" : [
      {
        "id" : "e5bfe5b8-c541-4f66-9e4d-d54e3c22865f",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "maybe `collect` with match on URI?  Let's at least merge the two maps",
        "createdAt" : "2019-09-18T10:50:30Z",
        "updatedAt" : "2019-09-24T10:49:11Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "34b736c65504efc71e34421317b1346d8671e0ea",
    "line" : null,
    "diffHunk" : "@@ -283,15 +248,26 @@ final class TestingServer(\n   def toPath(filename: String): AbsolutePath =\n     TestingServer.toPath(workspace, filename)\n \n-  def executeCommand(command: String): Future[Unit] = {\n+  def executeCommand(command: String, params: Object*): Future[Any] = {\n     Debug.printEnclosing()\n     server\n-      .executeCommand(\n-        new ExecuteCommandParams(command, Collections.emptyList())\n-      )\n+      .executeCommand(new ExecuteCommandParams(command, params.asJava))\n       .asScala\n-      .ignoreValue\n   }\n+\n+  def startDebugging(\n+      a: String,\n+      kind: String,\n+      parameter: AnyRef\n+  ): Future[TestDebugger] = {\n+    val targets = List(new b.BuildTargetIdentifier(buildTarget(a)))\n+    val params = new DebugSessionParams(targets.asJava, kind, parameter.toJson)\n+\n+    executeCommand(ServerCommands.StartDebugAdapter.id, params)\n+      .map(_.asInstanceOf[URI])"
  },
  {
    "id" : "93617be5-8979-401b-909a-023ec10d698a",
    "prId" : 934,
    "comments" : [
      {
        "id" : "2faecd3d-9634-4bf5-9ce3-df1aa4a66f7b",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "I know we have a convention of calling those names `assertFoo` but I would like to propose that at one point we rename those `assertFoo` to `verifyFoo` because after reading `assert implementation` I want to ask `assert that implementation *what*?` Let's make the act of verification explicit in the name.",
        "createdAt" : "2019-09-19T15:21:04Z",
        "updatedAt" : "2019-10-03T13:51:34Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d837625e03b77aa42a76d4f700137294452174fa",
    "line" : 9,
    "diffHunk" : "@@ -612,7 +612,33 @@ final class TestingServer(\n       (text, params) <- offsetParams(filename, query, root)\n       highlights <- server.documentHighlights(params).asScala\n     } yield {\n-      TestHighlights.renderAsString(text, highlights.asScala.toList)\n+      TestRanges.renderHighlightsAsString(text, highlights.asScala.toList)\n+    }\n+  }\n+\n+  def assertImplementation("
  },
  {
    "id" : "193074b2-ac4d-4a26-82d3-72042b158a5c",
    "prId" : 934,
    "comments" : [
      {
        "id" : "614076b9-28fd-4335-986f-57baff87c000",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "why not implementations?",
        "createdAt" : "2019-09-20T09:30:42Z",
        "updatedAt" : "2019-10-03T13:51:34Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2c1cac5a-2f0d-4a44-aaa3-25227ec2068b",
        "parentId" : "614076b9-28fd-4335-986f-57baff87c000",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I liked the word I made up :P #zabawopsuj",
        "createdAt" : "2019-09-20T09:39:45Z",
        "updatedAt" : "2019-10-03T13:51:34Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d837625e03b77aa42a76d4f700137294452174fa",
    "line" : null,
    "diffHunk" : "@@ -612,7 +612,33 @@ final class TestingServer(\n       (text, params) <- offsetParams(filename, query, root)\n       highlights <- server.documentHighlights(params).asScala\n     } yield {\n-      TestHighlights.renderAsString(text, highlights.asScala.toList)\n+      TestRanges.renderHighlightsAsString(text, highlights.asScala.toList)\n+    }\n+  }\n+\n+  def verifyImplementation(\n+      filename: String,\n+      query: String,\n+      expected: String\n+  ): Future[Unit] = {\n+    for {\n+      implementations <- implementation(filename, query)\n+    } yield {\n+      DiffAssertions.assertNoDiffOrPrintObtained(\n+        implementations,\n+        expected,\n+        \"obtained\",\n+        \"expected\"\n+      )\n+    }\n+  }\n+\n+  def implementation(filename: String, query: String) = {\n+    for {\n+      (text, params) <- offsetParams(filename, query, workspace)\n+      implemtees <- server.implementation(params).asScala"
  },
  {
    "id" : "97efd317-db60-4b24-8ca1-61bfa06202df",
    "prId" : 934,
    "comments" : [
      {
        "id" : "b9b68e88-75c1-4482-a5b5-4ce68453e9c4",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "For consistency with other methods\r\n```suggestion\r\n  def assertImplementation(\r\n```",
        "createdAt" : "2019-09-20T09:34:11Z",
        "updatedAt" : "2019-10-03T13:51:34Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "60fc8bb2-0a73-422a-8cf4-1444a2a98a5a",
        "parentId" : "b9b68e88-75c1-4482-a5b5-4ce68453e9c4",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Changed to assert",
        "createdAt" : "2019-09-20T15:08:50Z",
        "updatedAt" : "2019-10-03T13:51:34Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d837625e03b77aa42a76d4f700137294452174fa",
    "line" : null,
    "diffHunk" : "@@ -612,7 +612,33 @@ final class TestingServer(\n       (text, params) <- offsetParams(filename, query, root)\n       highlights <- server.documentHighlights(params).asScala\n     } yield {\n-      TestHighlights.renderAsString(text, highlights.asScala.toList)\n+      TestRanges.renderHighlightsAsString(text, highlights.asScala.toList)\n+    }\n+  }\n+\n+  def verifyImplementation("
  },
  {
    "id" : "f9291990-0099-432d-be74-a1bb62de1f0a",
    "prId" : 978,
    "comments" : [
      {
        "id" : "185affb7-333d-4854-b5d3-be97cd9a2850",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "```scala\r\nfor {\r\n      typeDefinitions <- typeDefinition(filename, query)\r\n      location <- typeDefinitions\r\n      locationsString = locationToString(location)\r\n} \r\n```\r\n\r\nMaybe something like this? We shouldn't need to mix map and for comprehensions.",
        "createdAt" : "2019-10-14T10:55:41Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : 62,
    "diffHunk" : "@@ -666,6 +666,45 @@ final class TestingServer(\n     }\n   }\n \n+  def assertTypeDefinition(\n+      filename: String,\n+      query: String,\n+      expectedPos: Location\n+  ): Future[Unit] = {\n+    def locationToString(loc: l.Location): String = {\n+      val (uri, start, end) =\n+        (loc.getUri, loc.getRange.getStart, loc.getRange.getEnd)\n+      s\"|$uri/\\\\${start.getLine}:${start.getCharacter}/\\\\${end.getLine}:${end.getCharacter}|\"\n+    }\n+\n+    for {"
  },
  {
    "id" : "319d78ce-4ad1-4958-ab11-98733a31567b",
    "prId" : 978,
    "comments" : [
      {
        "id" : "f7853e3c-735c-437a-824e-38544d948d4b",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Remove empty line - not needed.",
        "createdAt" : "2019-10-14T10:56:07Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -666,6 +666,45 @@ final class TestingServer(\n     }\n   }\n \n+  def assertTypeDefinition(\n+      filename: String,\n+      query: String,\n+      expectedPos: Location\n+  ): Future[Unit] = {\n+    def locationToString(loc: l.Location): String = {\n+      val (uri, start, end) =\n+        (loc.getUri, loc.getRange.getStart, loc.getRange.getEnd)\n+      s\"|$uri/\\\\${start.getLine}:${start.getCharacter}/\\\\${end.getLine}:${end.getCharacter}|\"\n+    }\n+\n+    for {\n+      typeDefinitions <- typeDefinition(filename, query).map(\n+        _.map(locationToString)\n+      )\n+    } yield {\n+      DiffAssertions.assertNoDiff(\n+        typeDefinitions.headOption.getOrElse(\"\"),\n+        locationToString(expectedPos)\n+      )\n+    }\n+  }\n+\n+  def typeDefinition(\n+      filename: String,\n+      query: String\n+  ): Future[List[l.Location]] = {\n+"
  },
  {
    "id" : "720c2b95-ce11-4832-a79c-94d7c6713d60",
    "prId" : 978,
    "comments" : [
      {
        "id" : "2a1620d5-3db3-433d-9940-2d43e1c1d21b",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I would change it to `definitions` really, because it can be mixed up with the method name.",
        "createdAt" : "2019-10-14T11:13:04Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -666,6 +666,45 @@ final class TestingServer(\n     }\n   }\n \n+  def assertTypeDefinition(\n+      filename: String,\n+      query: String,\n+      expectedPos: Location\n+  ): Future[Unit] = {\n+    def locationToString(loc: l.Location): String = {\n+      val (uri, start, end) =\n+        (loc.getUri, loc.getRange.getStart, loc.getRange.getEnd)\n+      s\"|$uri/\\\\${start.getLine}:${start.getCharacter}/\\\\${end.getLine}:${end.getCharacter}|\"\n+    }\n+\n+    for {\n+      typeDefinitions <- typeDefinition(filename, query).map(\n+        _.map(locationToString)\n+      )\n+    } yield {\n+      DiffAssertions.assertNoDiff(\n+        typeDefinitions.headOption.getOrElse(\"\"),\n+        locationToString(expectedPos)\n+      )\n+    }\n+  }\n+\n+  def typeDefinition(\n+      filename: String,\n+      query: String\n+  ): Future[List[l.Location]] = {\n+\n+    for {\n+      (_, params) <- offsetParams(filename, query, workspace)\n+      typeDefinitions <- server"
  },
  {
    "id" : "55776741-0c09-464d-adde-34e692031037",
    "prId" : 978,
    "comments" : [
      {
        "id" : "709233fc-867c-4af4-aece-74c2523506e3",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "why `for` inside a `for`?",
        "createdAt" : "2019-11-13T08:20:50Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -700,6 +700,47 @@ final class TestingServer(\n     }\n   }\n \n+  def assertTypeDefinition(\n+      filename: String,\n+      query: String,\n+      expected: String\n+  ): Future[Unit] = {\n+    def locationToString(loc: l.Location): String = {\n+      val (uri, start, end) =\n+        (loc.getUri, loc.getRange.getStart, loc.getRange.getEnd)\n+      s\"|$uri/\\\\${start.getLine}:${start.getCharacter}/\\\\${end.getLine}:${end.getCharacter}|\"\n+    }\n+\n+    for {\n+      typeDefinitions <- typeDefinition(filename, query)\n+    } yield {\n+      for (location <- typeDefinitions)"
  },
  {
    "id" : "4cca2026-ace9-41c8-bbef-b4ad745d1941",
    "prId" : 978,
    "comments" : [
      {
        "id" : "4e756e41-d859-4e16-bbcb-21cabea1bb30",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "this map can be moved to the `yield` clause which would increase the readability as:\r\na) the server.typeDefinition(...).asScala chain can be put in a single line\r\nb) the result transformations would be in a single place: `yield { definitions.asScala.toList } `",
        "createdAt" : "2019-11-14T16:52:39Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "efcbf609-b33c-4f39-9235-387009288910",
        "parentId" : "4e756e41-d859-4e16-bbcb-21cabea1bb30",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "Changed.",
        "createdAt" : "2019-11-15T08:33:54Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -792,6 +792,45 @@ final class TestingServer(\n     }\n   }\n \n+  def assertTypeDefinition(\n+      filename: String,\n+      query: String,\n+      expected: l.Location\n+  ): Future[Unit] = {\n+    def locationToString(loc: l.Location): String = {\n+      val (uri, start, end) =\n+        (loc.getUri, loc.getRange.getStart, loc.getRange.getEnd)\n+      s\"$uri [${start.getLine}:${start.getCharacter} -> ${end.getLine}:${end.getCharacter}]\"\n+    }\n+\n+    for {\n+      typeDefinitions <- typeDefinition(filename, query)\n+    } yield {\n+      typeDefinitions.foreach(\n+        location =>\n+          DiffAssertions.assertNoDiff(\n+            locationToString(location),\n+            locationToString(expected)\n+          )\n+      )\n+    }\n+  }\n+\n+  def typeDefinition(\n+      filename: String,\n+      query: String\n+  ): Future[List[l.Location]] = {\n+    for {\n+      (_, params) <- offsetParams(filename, query, workspace)\n+      definitions <- server\n+        .typeDefinition(params)\n+        .asScala\n+        .map(l => l.asScala.toList)"
  },
  {
    "id" : "3db12899-1342-4fe7-9cc2-3d040c008fa2",
    "prId" : 978,
    "comments" : [
      {
        "id" : "444749a9-7441-43ec-964d-edd038a03c6f",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Can we move most of the logic from here to the TestSuite - it seems that it can be simplified a lot really.",
        "createdAt" : "2019-12-17T09:51:36Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : 32,
    "diffHunk" : "@@ -862,6 +862,103 @@ final class TestingServer(\n     }\n   }\n \n+  def assertTypeDefinition(\n+      filenameStr: String = \"\",\n+      queryStr: String,\n+      expectedLocs: List[l.Location] = Nil,\n+      root: AbsolutePath\n+  ): Future[Unit] = {\n+    val fMap =\n+      FileLayout.mapFromString(queryStr).filter(_._1.endsWith(\".scala\"))\n+\n+    val (filename, query, uri) = if (filenameStr.isEmpty) {\n+      val uriRegex = \"\"\"^[^/]*/\\*([^*]+)\\*/[^/]*$\"\"\".r\n+\n+      fMap.find(_._2.contains(\"@@\")) match {\n+        case Some(file) =>\n+          val (filename, content) = file\n+          (\n+            filename,\n+            content.replaceAll(\"\"\"/\\*[^\\*]*\\*/\"\"\", \"\"),\n+            content.lines.find(_.contains(\"@@\")).collect {\n+              case uriRegex(uri) => uri\n+            }\n+          )\n+        case _ => (filenameStr, queryStr, None)\n+      }\n+    } else (filenameStr, queryStr, None)\n+\n+    val extractedExp = if (expectedLocs.isEmpty) {"
  },
  {
    "id" : "d7a88914-ba27-466d-897d-0c28fbe82e01",
    "prId" : 1019,
    "comments" : [
      {
        "id" : "6a538fa6-8045-410b-b7d6-8d22e8ca0ff0",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "what is the motivation for this change? 30 seconds is a long timeout.",
        "createdAt" : "2019-10-25T08:36:25Z",
        "updatedAt" : "2019-10-30T11:44:17Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cebbaa25-99b0-4dc7-b7d0-c642e42c8149",
        "parentId" : "6a538fa6-8045-410b-b7d6-8d22e8ca0ff0",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Indeed it is. But the timeout here prevents the whole test suite from hanging.\r\nOn the other hand, I can see now that there already is a `maxDuration = 10 minutes` for each async test case, so this particular change can probably be avoided",
        "createdAt" : "2019-10-25T09:20:05Z",
        "updatedAt" : "2019-10-30T11:44:17Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "35345e713c35479f38e4211db46b8e758640e70b",
    "line" : null,
    "diffHunk" : "@@ -494,7 +498,7 @@ final class TestingServer(\n       _ = client.refreshModelHandler = handler\n       // first compilation, to trigger the handler\n       _ <- server.compilations.compileFiles(List(path))\n-      lenses <- codeLenses.future\n+      lenses <- codeLenses.future.withTimeout(30, TimeUnit.SECONDS)"
  },
  {
    "id" : "649e2c9e-dc28-4bf7-b671-0b9ab5dff109",
    "prId" : 1286,
    "comments" : [
      {
        "id" : "a2854ee9-d642-4f3c-9e6f-cb62a16587f2",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "the `endOffset` is adjusted to account for the removal of the range markers",
        "createdAt" : "2020-01-11T16:13:53Z",
        "updatedAt" : "2020-01-11T17:12:09Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c7c7b4be-c47c-4d9d-ad01-c8494de96964",
        "parentId" : "a2854ee9-d642-4f3c-9e6f-cb62a16587f2",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "A lot of this code seem duplicate to what we already have. Would it be possible to reuse the methods that we use for changing to the position in params? ",
        "createdAt" : "2020-01-12T16:48:48Z",
        "updatedAt" : "2020-01-12T16:49:11Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a94c722e-9c3a-4df3-815e-ef8c547f965b",
        "parentId" : "a2854ee9-d642-4f3c-9e6f-cb62a16587f2",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "@tgodzik which method? Anyway, sure, I'll open a tech debt issue.",
        "createdAt" : "2020-01-14T09:20:07Z",
        "updatedAt" : "2020-01-14T09:20:07Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7e6135a896a913f6ec9a1ae82ca098806ffdfea3",
    "line" : 25,
    "diffHunk" : "@@ -584,6 +584,39 @@ final class TestingServer(\n     }\n   }\n \n+  private def rangeFromString[T](\n+      filename: String,\n+      original: String,\n+      root: AbsolutePath,\n+      replaceWith: String = \"\"\n+  )(\n+      fn: (String, TextDocumentIdentifier, l.Range) => T\n+  ): Future[T] = {\n+    val startOffset = original.indexOf(\"<<\")\n+    val endOffset = original.indexOf(\">>\")\n+    if (startOffset < 0) sys.error(s\"missing <<\\n$original\")\n+    if (endOffset < 0) sys.error(s\"missing >>\\n$original\")\n+    if (startOffset > endOffset)\n+      sys.error(s\"invalid range, >> must come after <<\\n$original\")\n+    val text =\n+      original\n+        .replaceAllLiterally(\"<<\", replaceWith)\n+        .replaceAllLiterally(\">>\", replaceWith)\n+    val input = m.Input.String(text)\n+    val path = root.resolve(filename)\n+    path.touch()\n+    val pos = m.Position.Range(input, startOffset, endOffset - \"<<>>\".length())"
  },
  {
    "id" : "ad7b4d18-b6d7-45c9-8149-5438a694ed18",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "f70599c4-b06d-417f-8c45-3a6ca5a0101e",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Why do we need it? If a future returns a failure then the tests should fail with this error anyway. :thinking: ",
        "createdAt" : "2020-02-10T12:10:21Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -390,13 +387,18 @@ final class TestingServer(\n     val uri = abspath.toURI.toString\n     val extension = PathIO.extension(abspath.toNIO)\n     val text = abspath.readText\n-    server\n+    val f = server\n       .didOpen(\n         new DidOpenTextDocumentParams(\n           new TextDocumentItem(uri, extension, 0, text)\n         )\n       )\n       .asScala\n+    f.onFailure {\n+      case error =>\n+        println(s\"Failed to open file! ${filename} with error ${error}\")"
  },
  {
    "id" : "f8cf9f09-b105-4b21-a830-8a6351383912",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "2e942299-430a-4a88-a76f-acca439935f5",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "You can sort the results here, so that the tests don't fail.",
        "createdAt" : "2020-02-10T12:10:57Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "75ca5ff5-5d42-4baa-8b71-223e4fd6fee4",
        "parentId" : "2e942299-430a-4a88-a76f-acca439935f5",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "it returns a String :/",
        "createdAt" : "2020-02-11T08:15:11Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : 120,
    "diffHunk" : "@@ -214,6 +199,18 @@ final class TestingServer(\n       expectedDiff\n     )\n   }\n+\n+  def assertReferenceDiff(\n+      filename: String,\n+      substring: String,\n+      expectedDiff: String\n+  )(implicit loc: munit.Location): Unit = {\n+    Assertions.assertNoDiff(\n+      references(filename, substring),"
  },
  {
    "id" : "a9bb81cc-99f5-4e00-bc48-df68906621c2",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "90951d26-3d56-4af7-b1be-1589d9f2f53c",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Let's avoid the wildcard imports.",
        "createdAt" : "2020-02-17T13:05:54Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -50,45 +52,26 @@ import scala.collection.mutable\n import scala.collection.mutable.ListBuffer\n import scala.concurrent.ExecutionContextExecutorService\n import scala.concurrent.Future\n+import scala.concurrent.Promise\n import scala.meta.Input\n import scala.meta.internal.io.FileIO\n import scala.meta.internal.io.PathIO\n-import scala.meta.internal.metals.Buffers\n-import scala.meta.internal.metals.Debug\n-import scala.meta.internal.metals.DidFocusResult\n-import scala.meta.internal.metals.WindowStateDidChangeParams\n-import scala.meta.internal.metals.Directories\n import scala.meta.internal.metals.MetalsEnrichments._\n-import scala.meta.internal.metals.MetalsLanguageServer\n-import scala.meta.internal.metals.MetalsServerConfig\n import scala.meta.internal.metals.PositionSyntax._\n-import scala.meta.internal.metals.ProgressTicks\n-import scala.meta.internal.metals.Time\n-import scala.meta.internal.metals.UserConfiguration\n+import scala.meta.internal.metals._"
  },
  {
    "id" : "4e9f76bb-9046-47ae-9f8d-582d0012a5a7",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "03163c87-b841-4677-9c9d-b53a0fa00c09",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Let's avoid the wildcard import here too.",
        "createdAt" : "2020-02-17T13:06:23Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -3,17 +3,15 @@ package tests\n import java.io.IOException\n import java.net.URI\n import java.nio.charset.StandardCharsets\n-import java.nio.file.FileVisitResult\n-import java.nio.file.Files\n-import java.nio.file.Path\n-import java.nio.file.Paths\n-import java.nio.file.SimpleFileVisitor\n+import java.nio.file._"
  },
  {
    "id" : "4335d141-dfba-4104-8ec4-040a6c608896",
    "prId" : 1487,
    "comments" : [
      {
        "id" : "d70d3ec5-e373-438e-ad7d-edd14a561902",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "`goToSuperMethod` should be private and we should use `executeCommand`",
        "createdAt" : "2020-03-12T11:40:36Z",
        "updatedAt" : "2020-03-24T16:45:28Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "160c8db8-62e9-42da-9170-6d62b528eac0",
        "parentId" : "d70d3ec5-e373-438e-ad7d-edd14a561902",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "I can do checking for super method, but for hierarchy where I invoke QuickPick it is much harder.\r\nI will take a look if it is something doable",
        "createdAt" : "2020-03-13T16:15:27Z",
        "updatedAt" : "2020-03-24T16:45:28Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "55838e6c9f4127bc8d06a8d31a6df496a0b729a8",
    "line" : null,
    "diffHunk" : "@@ -195,6 +197,33 @@ final class TestingServer(\n     }\n   }\n \n+  def assertGotoSuperMethod(\n+      pos: Int,\n+      maybeSuperPos: Option[Int],\n+      context: Map[Int, (l.Position, String)]\n+  )(implicit loc: munit.Location): Unit = {\n+    val command = GoToSuperMethodParams(context(pos)._2, context(pos)._1)\n+    val maybeFoundLocation =\n+      server.goToSuperMethod.getGoToSuperMethodLocation(command)"
  },
  {
    "id" : "93be4ec9-8b95-4148-a8ee-33dc2de04d89",
    "prId" : 1487,
    "comments" : [
      {
        "id" : "2a9c52f6-8abf-445c-866d-dacf34f922b1",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "`val (position, symbol) = context(pos)` to avoid using _1 and _2?",
        "createdAt" : "2020-03-12T11:42:01Z",
        "updatedAt" : "2020-03-24T16:45:28Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "55838e6c9f4127bc8d06a8d31a6df496a0b729a8",
    "line" : null,
    "diffHunk" : "@@ -195,6 +197,33 @@ final class TestingServer(\n     }\n   }\n \n+  def assertGotoSuperMethod(\n+      pos: Int,\n+      maybeSuperPos: Option[Int],\n+      context: Map[Int, (l.Position, String)]\n+  )(implicit loc: munit.Location): Unit = {\n+    val command = GoToSuperMethodParams(context(pos)._2, context(pos)._1)"
  },
  {
    "id" : "c8d00a03-4b01-4212-a8d9-54eabd822156",
    "prId" : 1526,
    "comments" : [
      {
        "id" : "935e5122-2148-4608-8345-7fb4977efcdb",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "You can just do `assert(references.sortWith(...) == references)`.\r\n",
        "createdAt" : "2020-03-24T17:05:25Z",
        "updatedAt" : "2020-03-26T06:02:00Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bc79b856-0a7b-4f0e-b904-cad2591e911d",
        "parentId" : "935e5122-2148-4608-8345-7fb4977efcdb",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "So I originally had that, but then Iâ€™m asserting the order is correct by the same logic I actually do the sorting with in the reference provider. ",
        "createdAt" : "2020-03-24T17:07:16Z",
        "updatedAt" : "2020-03-26T06:02:00Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0dd99b8e-80c8-4b59-ae03-a6e98bd42023",
        "parentId" : "935e5122-2148-4608-8345-7fb4977efcdb",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "The other option is to just have a separate assert that we can write with the expected results like:\r\n```\r\nassertReferences(\r\n  \"A.scala:5-6\"\r\n  \"A.scala:8-9\"\r\n)\r\n```\r\nAnd translate entries to locations.",
        "createdAt" : "2020-03-24T18:06:47Z",
        "updatedAt" : "2020-03-26T06:02:00Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9fa3ece8-e67e-420b-94e1-ef10391ba3c5",
        "parentId" : "935e5122-2148-4608-8345-7fb4977efcdb",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Unfortunately, it makes the RangesSuite not that useful here :/ \r\n\r\nSorry for the confusion! ",
        "createdAt" : "2020-03-24T18:08:34Z",
        "updatedAt" : "2020-03-26T06:02:00Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "23b0eb4f-2f49-49cb-8f72-9998ba94f411",
        "parentId" : "935e5122-2148-4608-8345-7fb4977efcdb",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Blah. Yea, this is frustrating that just testing the order is this difficult. I added the assertion back in right before you said this, so I will take it back out and go back to the drawing board.",
        "createdAt" : "2020-03-24T18:14:56Z",
        "updatedAt" : "2020-03-26T06:02:00Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "13e263e8bec9aef93562dd691f75ec7caa748212",
    "line" : null,
    "diffHunk" : "@@ -873,6 +894,22 @@ final class TestingServer(\n     }\n   }\n \n+  def getReferenceLocations(\n+      filename: String,\n+      query: String,\n+      base: Map[String, String]\n+  ): Future[Map[String, String]] = {\n+    for {\n+      (_, params) <- offsetParams(filename, query, workspace)\n+      refParams = new ReferenceParams(new ReferenceContext(true))\n+      _ = refParams.setPosition(params.getPosition())\n+      _ = refParams.setTextDocument(params.getTextDocument())\n+      references <- server.references(refParams).asScala\n+    } yield {\n+      TestRanges.renderLocationsAsString(base, references.asScala.toList)"
  },
  {
    "id" : "498ed881-713c-4e23-93f0-17885c784e0c",
    "prId" : 1538,
    "comments" : [
      {
        "id" : "ce29f957-b697-480b-b0fe-cbbec153af54",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "If these methods are very specific to the Ammonite suite I would move them there.  We already have things like `assertHover` here, so I would like to avoid duplicating the ways of asserting specific things.\r\n\r\nWe do not have assert definition in TestingServer, but I would go a different way showing the whole file in the test case like shown in the other comment.\r\n",
        "createdAt" : "2020-04-09T11:14:43Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f6b38f9e-e830-4bbd-b217-d1d9a815cf44",
        "parentId" : "ce29f957-b697-480b-b0fe-cbbec153af54",
        "author" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "body" : "Just moved that to `BaseAmmoniteSuite`.",
        "createdAt" : "2020-04-11T15:37:29Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0681fa0b1417b7ac622101d279667c6900a2506e",
    "line" : null,
    "diffHunk" : "@@ -1281,6 +1281,84 @@ final class TestingServer(\n     Assertions.assertNoDiff(obtained, expected)\n   }\n \n+  def assertDefinitionAtLocation("
  },
  {
    "id" : "90c60de2-e23c-42ad-aeaa-370936b2b873",
    "prId" : 1608,
    "comments" : [
      {
        "id" : "f4161a4b-6d29-4c49-8647-df1cd29c9c4f",
        "parentId" : null,
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "While I wanted to reuse, what `DefinitionLspSuite` does, I was not sure about it testing not actual endpoint method `definition`, which returns a list of locations, but some inner method, which returns a bit richer `DefinitionResult`, to use resolved `symbol` for the tests sake - this a bit breaks the `integration` in testing. So, without the `symbol` I had to tinker this method a bit.",
        "createdAt" : "2020-04-13T13:39:56Z",
        "updatedAt" : "2020-04-24T15:04:54Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2fefe65a56c118f859636dd00b1cb434b41dccc8",
    "line" : 54,
    "diffHunk" : "@@ -1011,17 +1011,56 @@ final class TestingServer(\n     }\n   }\n \n+  private def workspaceDefinitions(\n+      getDocumentMarkedWithDefinitions: AbsolutePath => s.TextDocument\n+  ): String = {\n+    buffers.open.toSeq\n+      .sortBy(_.toURI.toString)\n+      .map { path =>\n+        val textDocument = getDocumentMarkedWithDefinitions(path)\n+        val relpath =\n+          path.toRelative(workspace).toURI(isDirectory = false).toString\n+        val printedTextDocument = Semanticdbs.printTextDocument(textDocument)\n+        s\"/$relpath\\n$printedTextDocument\"\n+      }\n+      .mkString(\"\\n\")\n+  }\n+\n   private def toSemanticdbTextDocument(path: AbsolutePath): s.TextDocument = {\n+    toDefinitionsTextDocument(path, { params =>\n+      server\n+        .definitionOrReferences(params, definitionOnly = true)\n+        .asJava\n+        .get()\n+    })\n+  }\n+\n+  private def toTypeDefinitionsTextDocument(\n+      path: AbsolutePath\n+  ): s.TextDocument = {\n+    toDefinitionsTextDocument(path, { params =>\n+      server\n+        .typeDefinition(params)\n+        .asScala\n+        .map(DefinitionResult(_, \"\", None, None))\n+        .asJava\n+        .get()\n+    }, markNoSymbol = false)\n+  }\n+\n+  private def toDefinitionsTextDocument(\n+      path: AbsolutePath,\n+      getDefinition: TextDocumentPositionParams => DefinitionResult,\n+      //in case no resolved symbol gotten\n+      markNoSymbol: Boolean = true"
  },
  {
    "id" : "9fecb4fc-df4a-42f3-b962-5f367fbdb10f",
    "prId" : 1728,
    "comments" : [
      {
        "id" : "75e57f68-b6f5-45a9-95ae-16cd30eab2f2",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "If you're changing this to `initializationOption`, you should probably change the name and also replace the default with `InitializationOptions.default` rather than `ClientExperimentalCapabilities.Default....`",
        "createdAt" : "2020-05-18T18:34:46Z",
        "updatedAt" : "2020-06-15T12:58:29Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0f5b2819-5c6e-41c2-a8f8-d7567af8939d",
        "parentId" : "75e57f68-b6f5-45a9-95ae-16cd30eab2f2",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed!",
        "createdAt" : "2020-06-03T14:05:59Z",
        "updatedAt" : "2020-06-15T12:58:29Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b8fc594e56a5aefca5b9a80fb273aca01de04ede",
    "line" : null,
    "diffHunk" : "@@ -385,7 +386,7 @@ final class TestingServer(\n     val workspaceCapabilities = new WorkspaceClientCapabilities()\n     val textDocumentCapabilities = new TextDocumentClientCapabilities\n     textDocumentCapabilities.setFoldingRange(new FoldingRangeCapabilities)\n-    val experimental = experimentalCapabilities.getOrElse(\n+    val experimental = initializationOptions.getOrElse("
  },
  {
    "id" : "869ffc96-2f00-4f64-8fa1-71fc1eadbdd9",
    "prId" : 1753,
    "comments" : [
      {
        "id" : "a712ddd3-1eb5-4e15-ab93-b88c4306310f",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "`triggerCharacter` ?",
        "createdAt" : "2020-05-15T15:29:47Z",
        "updatedAt" : "2020-05-29T09:53:41Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d973acfc-53cd-456f-aa56-74a7a8312f5b",
        "parentId" : "a712ddd3-1eb5-4e15-ab93-b88c4306310f",
        "author" : {
          "login" : "mlachkar",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/7843237?u=d2941da73011b9a49767ac863ce5bc20b7b10ed7&v=4"
        },
        "body" : "ok",
        "createdAt" : "2020-05-15T16:10:53Z",
        "updatedAt" : "2020-05-29T09:53:41Z",
        "lastEditedBy" : {
          "login" : "mlachkar",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/7843237?u=d2941da73011b9a49767ac863ce5bc20b7b10ed7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f2522c3a-ea32-41bc-874b-972d45a9da62",
        "parentId" : "a712ddd3-1eb5-4e15-ab93-b88c4306310f",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I think this might have been fixed in the other commit we had issues with. Could you change it again?",
        "createdAt" : "2020-05-20T16:08:50Z",
        "updatedAt" : "2020-05-29T09:53:41Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "60e701e5d87db159576e92e8239681d2abd92c6e",
    "line" : 4,
    "diffHunk" : "@@ -604,10 +604,17 @@ final class TestingServer(\n       query: String,\n       expected: String,\n       autoIndent: String,\n+      replaceWith: String,"
  },
  {
    "id" : "411e5fbf-a1cf-493b-9e10-5f7f74840b42",
    "prId" : 1898,
    "comments" : [
      {
        "id" : "14de7a1b-c10c-4637-b030-6049e94285a0",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "So I'm open to some feedback here about how we should do this. The tests starting failing after the changes due to us just calling `.toJson` here, which would convert our `Option`s to `{}`. That would cause the `InitializationOptions` to just be default not matter what. I thought about writing something for gson that would turn an Option into the value it holds, but then for `None` we are stuck with null. Since most clients aren't just going to send a valid key with a `null` field for this, I wanted to actually mimic how they'd do it by _only_ sending in the keys that they would want to set. So in the end, this does just that and sends in an object only with the desired keys set. I think this is actually good for testing as it more resembles what happens in real life, but then I'm stuck with this gross thing because of how we build up the `InitializtionOptions` in the test and then convert them to json. I don't now how else to _only_ get the fields that are set. Thoughts?",
        "createdAt" : "2020-07-09T11:58:36Z",
        "updatedAt" : "2020-07-10T20:39:59Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a09c54df4983c2390e8b249633004d3433d16915",
    "line" : null,
    "diffHunk" : "@@ -393,16 +393,33 @@ final class TestingServer(\n     textDocumentCapabilities.setFoldingRange(new FoldingRangeCapabilities)\n     val initOptions = initializationOptions.getOrElse(\n       InitializationOptions.Default.copy(\n-        debuggingProvider = true,\n-        treeViewProvider = true,\n-        slowTaskProvider = true\n+        debuggingProvider = Some(true),\n+        treeViewProvider = Some(true),\n+        slowTaskProvider = Some(true)\n       )\n     )\n+\n+    // Yes, this is a bit gross :/\n+    // However, I want to only get the existing fields that are being set\n+    // much like it'd be when a client actually sends this. This will just\n+    // collect the fields that are set, get the values, and then make them into\n+    // a map that will become a JsonObject to pass in as the InitializationOptions\n+    val existingInitOptions =\n+      initOptions.getClass.getDeclaredFields\n+        .foldLeft(Map.empty[String, Any]) { (acc, field) =>\n+          field.setAccessible(true)\n+          acc + (field.getName -> field.get(initOptions))\n+        }\n+        .collect {\n+          case (key, Some(value)) => key -> value\n+        }\n+        .asJava"
  },
  {
    "id" : "6ee077b5-6b82-43bf-92db-887649f9b760",
    "prId" : 1898,
    "comments" : [
      {
        "id" : "6aa558f3-5ee6-486b-ae9f-e85d80f84991",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "We must have missed this when we migrated to `InitilizationOptions` because we were actually still passing the values for that into the `ClientCapabilities` experimental param. Now we just pass in an empty object there and do the values here.",
        "createdAt" : "2020-07-09T16:00:27Z",
        "updatedAt" : "2020-07-10T20:39:59Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "caf7035a-52b6-46b2-92d4-d0ddd21b8510",
        "parentId" : "6aa558f3-5ee6-486b-ae9f-e85d80f84991",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "I keep finding small fixes, but no the one that fixes my issue ðŸ˜† ",
        "createdAt" : "2020-07-09T16:01:17Z",
        "updatedAt" : "2020-07-10T20:39:59Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a09c54df4983c2390e8b249633004d3433d16915",
    "line" : 30,
    "diffHunk" : "@@ -393,16 +393,35 @@ final class TestingServer(\n     textDocumentCapabilities.setFoldingRange(new FoldingRangeCapabilities)\n     val initOptions = initializationOptions.getOrElse(\n       InitializationOptions.Default.copy(\n-        debuggingProvider = true,\n-        treeViewProvider = true,\n-        slowTaskProvider = true\n+        debuggingProvider = Some(true),\n+        treeViewProvider = Some(true),\n+        slowTaskProvider = Some(true)\n       )\n     )\n+\n+    // Yes, this is a bit gross :/\n+    // However, I want to only get the existing fields that are being set\n+    // much like it'd be when a client actually sends this. This will just\n+    // collect the fields that are set, get the values, and then make them into\n+    // a map that will become a JsonObject to pass in as the InitializationOptions\n+    val existingInitOptions =\n+      initOptions.getClass.getDeclaredFields\n+        .map { field =>\n+          field.setAccessible(true)\n+          field.getName -> field.get(initOptions)\n+        }\n+        .collect {\n+          case (key, Some(value)) => key -> value\n+        }\n+        .toMap\n+        .asJava\n+\n+    params.setInitializationOptions(existingInitOptions.toJson)"
  },
  {
    "id" : "8519bf82-e2c7-4cad-9deb-bcbec78a31a9",
    "prId" : 1898,
    "comments" : [
      {
        "id" : "ac45ed57-bbb3-4341-9c88-e0dee8ef3978",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I would just add a simple json library for tests that takes into account options for tests, would be much nicer. ",
        "createdAt" : "2020-07-10T15:22:26Z",
        "updatedAt" : "2020-07-10T20:39:59Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "48ad97f5-6abc-4ed6-bf27-9c54121467d5",
        "parentId" : "ac45ed57-bbb3-4341-9c88-e0dee8ef3978",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Could you expand on what you mean by this?",
        "createdAt" : "2020-07-10T16:59:41Z",
        "updatedAt" : "2020-07-10T20:39:59Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7140f63e-a330-43b0-b15b-c6c499def877",
        "parentId" : "ac45ed57-bbb3-4341-9c88-e0dee8ef3978",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Ach, that was totally not clear. I just meant adding something like upickle. Automatically transforming case class into a string and then using gson to parse that.  This should have the same effect as the reflective access.",
        "createdAt" : "2020-07-10T17:06:58Z",
        "updatedAt" : "2020-07-10T20:39:59Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "33e9bd1c-5007-4e74-8724-f7c63bf5e903",
        "parentId" : "ac45ed57-bbb3-4341-9c88-e0dee8ef3978",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "So it looks like in order for uPickle to handle this correctly I would need to define a serializer in the companion object of `InitializationOptions`, but we don't include uPickle. I'm hesitant to add a library just to do this. What do you think?",
        "createdAt" : "2020-07-10T20:24:58Z",
        "updatedAt" : "2020-07-10T20:39:59Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "789116c4-93a4-47d7-a4ea-81ce028f7643",
        "parentId" : "ac45ed57-bbb3-4341-9c88-e0dee8ef3978",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I haven't noticed that, I was thinking of only adding a library to the test project. This way we wouldn't be adding additional dependencies to the project itself.\r\n\r\nWe can leave it as is, it was just an idea.",
        "createdAt" : "2020-07-10T20:38:07Z",
        "updatedAt" : "2020-07-10T20:39:59Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a09c54df4983c2390e8b249633004d3433d16915",
    "line" : 18,
    "diffHunk" : "@@ -393,16 +393,35 @@ final class TestingServer(\n     textDocumentCapabilities.setFoldingRange(new FoldingRangeCapabilities)\n     val initOptions = initializationOptions.getOrElse(\n       InitializationOptions.Default.copy(\n-        debuggingProvider = true,\n-        treeViewProvider = true,\n-        slowTaskProvider = true\n+        debuggingProvider = Some(true),\n+        treeViewProvider = Some(true),\n+        slowTaskProvider = Some(true)\n       )\n     )\n+\n+    // Yes, this is a bit gross :/\n+    // However, I want to only get the existing fields that are being set\n+    // much like it'd be when a client actually sends this. This will just\n+    // collect the fields that are set, get the values, and then make them into\n+    // a map that will become a JsonObject to pass in as the InitializationOptions\n+    val existingInitOptions ="
  },
  {
    "id" : "eaf3fa12-9e9d-4b3e-988f-4feffbe206cb",
    "prId" : 2025,
    "comments" : [
      {
        "id" : "0f831da9-e6e6-463e-ac36-f7e4ab287ecf",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "One of the tests for TreeViewLSP suite is failing on Windows. Added something to debug the issue, hopefully it helps.",
        "createdAt" : "2020-08-26T11:52:05Z",
        "updatedAt" : "2020-08-27T16:12:55Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "65350f9ec9db1c63c2e86da122435347242ab809",
    "line" : null,
    "diffHunk" : "@@ -1339,7 +1339,16 @@ final class TestingServer(\n           PrettyPrintTree(\n             label(uri),\n             parent.nodes\n-              .map(n => PrettyPrintTree(label(n.nodeUri)))\n+              .map { n =>"
  },
  {
    "id" : "2f1d5963-fcd8-4136-bf50-160c13db1f5e",
    "prId" : 2025,
    "comments" : [
      {
        "id" : "d9fcade9-e4da-481e-8a96-6bf3a57dfff6",
        "parentId" : null,
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "it fails actually here, and it failed again :/",
        "createdAt" : "2020-08-26T12:30:33Z",
        "updatedAt" : "2020-08-27T16:12:55Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "68de4b35-bf28-43ed-8177-51566dcea0db",
        "parentId" : "d9fcade9-e4da-481e-8a96-6bf3a57dfff6",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Right! Changed it. It's super weird it fails, labels are produced for exactly the same keys, which is weird this happens.",
        "createdAt" : "2020-08-26T13:06:09Z",
        "updatedAt" : "2020-08-27T16:12:55Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "322420d0-1d9c-41b7-907c-94b917e9931c",
        "parentId" : "d9fcade9-e4da-481e-8a96-6bf3a57dfff6",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "So it seems the label exists, but it's still not being found in the map :/",
        "createdAt" : "2020-08-26T14:08:01Z",
        "updatedAt" : "2020-08-27T16:12:55Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "471577cb-6ffc-4a45-bf2e-6d693b388ee6",
        "parentId" : "d9fcade9-e4da-481e-8a96-6bf3a57dfff6",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "it is in the map according to logs!!! WTF",
        "createdAt" : "2020-08-26T15:33:17Z",
        "updatedAt" : "2020-08-27T16:12:55Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b91c014c-7f9b-4c6c-ac70-9b0dc0889098",
        "parentId" : "d9fcade9-e4da-481e-8a96-6bf3a57dfff6",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Trying with stripping BOM",
        "createdAt" : "2020-08-26T15:36:59Z",
        "updatedAt" : "2020-08-27T16:12:55Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8fc19081-567a-4e17-bbdb-5d9e1ba2c7ae",
        "parentId" : "d9fcade9-e4da-481e-8a96-6bf3a57dfff6",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "nope ðŸ˜­ ",
        "createdAt" : "2020-08-26T16:22:23Z",
        "updatedAt" : "2020-08-27T16:12:55Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4c882889-f83d-470d-b943-42881f6a6608",
        "parentId" : "d9fcade9-e4da-481e-8a96-6bf3a57dfff6",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Sooo it seems again, it was `c:` instead of `C:` - why Windows? Why!?",
        "createdAt" : "2020-08-27T16:13:37Z",
        "updatedAt" : "2020-08-27T16:13:38Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "65350f9ec9db1c63c2e86da122435347242ab809",
    "line" : null,
    "diffHunk" : "@@ -1339,7 +1339,16 @@ final class TestingServer(\n           PrettyPrintTree(\n             label(uri),"
  }
]