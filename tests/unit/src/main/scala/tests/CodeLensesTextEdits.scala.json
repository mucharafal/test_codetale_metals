[
  {
    "id" : "8705f76b-78a4-47f2-afdc-384972872385",
    "prId" : 720,
    "comments" : [
      {
        "id" : "cf0bdad7-b704-4fe4-ab45-a412ba340361",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Let's use `Seq[l.CodeLens]` and force the call-site to use `.asScala` if necessary. By convention, I try to use Scala collections/futures in our internal APIs",
        "createdAt" : "2019-05-15T13:45:14Z",
        "updatedAt" : "2019-05-16T11:54:05Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b142f5cd4b8e8230bbc6afa68fbe49c21214b35d",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,23 @@\n+package tests\n+\n+import java.util\n+import org.eclipse.lsp4j.TextEdit\n+import org.eclipse.{lsp4j => l}\n+import scala.collection.JavaConverters._\n+\n+object CodeLensesTextEdits {\n+  def apply(ranges: util.List[l.CodeLens]): List[l.TextEdit] = {"
  },
  {
    "id" : "8bd2682f-4edb-46c2-9a96-77f112930978",
    "prId" : 1200,
    "comments" : [
      {
        "id" : "65b1dca0-fb54-4516-9f53-5b11c2c4d18f",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Will it not be a problem on windows by any chance?",
        "createdAt" : "2020-01-02T17:36:05Z",
        "updatedAt" : "2020-01-07T08:15:23Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a1d20fa6-7531-4a93-8e5f-36d75905c680",
        "parentId" : "65b1dca0-fb54-4516-9f53-5b11c2c4d18f",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Changed to `System.lineSeparator`\r\n",
        "createdAt" : "2020-01-07T08:16:12Z",
        "updatedAt" : "2020-01-07T08:16:12Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7204180218dcea0d2bccc3e583a68ae1e9a4fb53",
    "line" : null,
    "diffHunk" : "@@ -3,18 +3,21 @@ package tests\n import org.eclipse.{lsp4j => l}\n \n object CodeLensesTextEdits {\n-  def apply(ranges: Seq[l.CodeLens]): List[l.TextEdit] = {\n-    ranges.map(convert).toList\n+  def apply(lenses: Seq[l.CodeLens]): Iterable[l.TextEdit] = {\n+    for {\n+      (line, lenses) <- lenses.groupBy(_.getRange.getStart.getLine)\n+      textEdit = convert(line, lenses)\n+    } yield textEdit\n   }\n \n-  private def convert(lens: l.CodeLens): l.TextEdit = {\n-    val range = lens.getRange\n-    val pos = new l.Position(range.getStart.getLine, 0)\n-    new l.TextEdit(new l.Range(pos, pos), print(lens))\n+  private def convert(line: Int, lenses: Seq[l.CodeLens]): l.TextEdit = {\n+    val pos = new l.Position(line, 0)\n+    val edit = lenses.map(print).mkString\n+    new l.TextEdit(new l.Range(pos, pos), edit + \"\\n\")"
  }
]