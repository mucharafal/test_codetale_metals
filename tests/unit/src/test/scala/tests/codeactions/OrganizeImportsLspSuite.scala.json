[
  {
    "id" : "04a1b605-26b4-45b2-af25-699b9d26d205",
    "prId" : 1971,
    "comments" : [
      {
        "id" : "2472b871-8c32-4c9e-8b71-2d5649caba03",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "we generally keep test names short and without spaces, so that they're easier to target with a test filter. So something like:\r\n\r\n```suggestion\r\n    \"basic\",\r\n```\r\n\r\nand so on",
        "createdAt" : "2020-09-13T08:23:48Z",
        "updatedAt" : "2020-09-13T08:26:40Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ebd2632e5db66829b27658c5dd9e9289d1b5ba6d",
    "line" : 33,
    "diffHunk" : "@@ -0,0 +1,112 @@\n+package tests.codeactions\n+\n+import scala.meta.internal.metals.codeactions.OrganizeImports\n+\n+class OrganizeImportsLspSuite\n+    extends BaseCodeActionLspSuite(\"OrganizeImports\") {\n+  val kind: String = OrganizeImports.kind\n+  val scalacOption: List[String] = List(\"-Ywarn-unused-import\")\n+  val scalafixConf: String =\n+    \"\"\"|/.scalafix.conf\n+       |rules = [\n+       |  OrganizeImports,\n+       |  ExplicitResultTypes,\n+       |  RemoveUnused\n+       |]\n+       |\n+       |ExplicitResultTypes.rewriteStructuralTypesToNamedSubclass = false\n+       |\n+       |RemoveUnused.imports = false\n+       |\n+       |OrganizeImports.groupedImports = Explode\n+       |OrganizeImports.expandRelative = true\n+       |OrganizeImports.removeUnused = true\n+       |OrganizeImports.groups = [\n+       |  \"scala.\"\n+       |  \"re:javax?\\\\.\"\n+       |  \"*\"\n+       |]\n+       |\n+       |\"\"\".stripMargin\n+\n+  check(\n+    \"basic organize imports\","
  },
  {
    "id" : "5dced02b-2df1-4c9c-a56a-19fa9417335b",
    "prId" : 1971,
    "comments" : [
      {
        "id" : "044cc07f-19a9-4e89-931c-6ab87112f007",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Is this test documenting a missing feature or do we actively want to prevent this working in worksheets/ammonite files?\r\n\r\nIf that's the latter, then üëç , otherwise I would suggest using the `.fail`.\r\n\r\nIt would look like\r\n\r\n```scala\r\ncheck(\"test-name\".fail)\r\n```\r\n\r\nThe main advantage of this is that we can still document the expected behavior, and explicitly say that this isn't working yet.",
        "createdAt" : "2020-09-13T08:25:20Z",
        "updatedAt" : "2020-09-13T08:26:40Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ebd2632e5db66829b27658c5dd9e9289d1b5ba6d",
    "line" : 90,
    "diffHunk" : "@@ -0,0 +1,112 @@\n+package tests.codeactions\n+\n+import scala.meta.internal.metals.codeactions.OrganizeImports\n+\n+class OrganizeImportsLspSuite\n+    extends BaseCodeActionLspSuite(\"OrganizeImports\") {\n+  val kind: String = OrganizeImports.kind\n+  val scalacOption: List[String] = List(\"-Ywarn-unused-import\")\n+  val scalafixConf: String =\n+    \"\"\"|/.scalafix.conf\n+       |rules = [\n+       |  OrganizeImports,\n+       |  ExplicitResultTypes,\n+       |  RemoveUnused\n+       |]\n+       |\n+       |ExplicitResultTypes.rewriteStructuralTypesToNamedSubclass = false\n+       |\n+       |RemoveUnused.imports = false\n+       |\n+       |OrganizeImports.groupedImports = Explode\n+       |OrganizeImports.expandRelative = true\n+       |OrganizeImports.removeUnused = true\n+       |OrganizeImports.groups = [\n+       |  \"scala.\"\n+       |  \"re:javax?\\\\.\"\n+       |  \"*\"\n+       |]\n+       |\n+       |\"\"\".stripMargin\n+\n+  check(\n+    \"basic organize imports\",\n+    \"\"\"\n+      |package a\n+      |import scala.concurrent.duration._\n+      |import scala.concurrent.Future<<>>\n+      |import scala.concurrent.ExecutionContext.global\n+      |\n+      |object A {\n+      |  val d = Duration(10, MICROSECONDS)\n+      |  val k = Future.successful(1)\n+      |}\n+      |\"\"\".stripMargin,\n+    s\"${OrganizeImports.title}\",\n+    \"\"\"\n+      |package a\n+      |import scala.concurrent.Future\n+      |import scala.concurrent.duration._\n+      |\n+      |object A {\n+      |  val d = Duration(10, MICROSECONDS)\n+      |  val k = Future.successful(1)\n+      |}\n+      |\"\"\".stripMargin.replace(\"'\", \"\\\"\"),\n+    kind = List(kind),\n+    scalacOptions = scalacOption\n+  )\n+\n+  check(\n+    \"basic organize imports with existing config\",\n+    \"\"\"\n+      |package a\n+      |import scala.concurrent.duration._\n+      |import java.util.Optional<<>>\n+      |\n+      |object A {\n+      |  val d = Duration(10, MICROSECONDS)\n+      |  val optional = Optional.empty()\n+      |}\n+      |\"\"\".stripMargin,\n+    s\"${OrganizeImports.title}\",\n+    \"\"\"\n+      |package a\n+      |import scala.concurrent.duration._\n+      |\n+      |import java.util.Optional\n+      |\n+      |object A {\n+      |  val d = Duration(10, MICROSECONDS)\n+      |  val optional = Optional.empty()\n+      |}\n+      |\"\"\".stripMargin.replace(\"'\", \"\\\"\"),\n+    kind = List(kind),\n+    scalafixConf = scalafixConf,\n+    scalacOptions = scalacOption\n+  )\n+\n+  check(\n+    \"should not work on worksheet or Ammonite files\","
  }
]