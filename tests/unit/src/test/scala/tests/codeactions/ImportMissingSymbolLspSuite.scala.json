[
  {
    "id" : "1ab7a2d8-4a4a-4b3b-8133-b5939fbfea2c",
    "prId" : 1652,
    "comments" : [
      {
        "id" : "2ba13afd-3db5-4d45-aaf1-3a9fb854043c",
        "parentId" : null,
        "author" : {
          "login" : "coline-lunatech",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/61458304?u=d07ef5e896f36297ec345c775cc18f9a35806659&v=4"
        },
        "body" : "I don't know why there's a space here ... Moreover tests sometimes pass and sometimes not cause the imports are reversed ",
        "createdAt" : "2020-04-21T12:32:28Z",
        "updatedAt" : "2020-04-23T06:23:45Z",
        "lastEditedBy" : {
          "login" : "coline-lunatech",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/61458304?u=d07ef5e896f36297ec345c775cc18f9a35806659&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fbe6504c-8463-45ac-ac99-551005b2fbeb",
        "parentId" : "2ba13afd-3db5-4d45-aaf1-3a9fb854043c",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "If you add a sort in the code action that returns them, does it fix this?",
        "createdAt" : "2020-04-22T07:36:24Z",
        "updatedAt" : "2020-04-23T06:23:45Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3f1b39cf-30c5-454d-a9ed-46ccfdde7c50",
        "parentId" : "2ba13afd-3db5-4d45-aaf1-3a9fb854043c",
        "author" : {
          "login" : "coline-lunatech",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/61458304?u=d07ef5e896f36297ec345c775cc18f9a35806659&v=4"
        },
        "body" : "I wanted to keep the \"import all\" above all the others but it does not work quite well anyway.. I'll try different ways",
        "createdAt" : "2020-04-22T08:17:09Z",
        "updatedAt" : "2020-04-23T06:23:45Z",
        "lastEditedBy" : {
          "login" : "coline-lunatech",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/61458304?u=d07ef5e896f36297ec345c775cc18f9a35806659&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "480a69ed-4b38-49ef-8dcf-40008844b459",
        "parentId" : "2ba13afd-3db5-4d45-aaf1-3a9fb854043c",
        "author" : {
          "login" : "coline-lunatech",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/61458304?u=d07ef5e896f36297ec345c775cc18f9a35806659&v=4"
        },
        "body" : "It will not fix anyway because it's not the order of actions but the order of TextEdits that could matter.\r\nBut actually it looks like it's kind of random, text edits order is always the same but they seems not to be applied in that order.\r\n\r\n=> after some checks I found that it's only on tests. On files when I use the codeAction they are always applied in the same order. (Could be the textEdits.scala file)",
        "createdAt" : "2020-04-22T10:28:11Z",
        "updatedAt" : "2020-04-23T06:23:45Z",
        "lastEditedBy" : {
          "login" : "coline-lunatech",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/61458304?u=d07ef5e896f36297ec345c775cc18f9a35806659&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dadcc3a8-559b-4400-a3cd-02b8f10bb8db",
        "parentId" : "2ba13afd-3db5-4d45-aaf1-3a9fb854043c",
        "author" : {
          "login" : "coline-lunatech",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/61458304?u=d07ef5e896f36297ec345c775cc18f9a35806659&v=4"
        },
        "body" : "About the spaces it's also a textEdits issue but not only for tests. If a file has no imports yet, imports textEdits are prepend with a \\n. In our case we concatenate textEdits so they all are prepend with it..\r\n\r\nI'm not sure I can fix this two issues",
        "createdAt" : "2020-04-22T10:30:54Z",
        "updatedAt" : "2020-04-23T06:23:45Z",
        "lastEditedBy" : {
          "login" : "coline-lunatech",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/61458304?u=d07ef5e896f36297ec345c775cc18f9a35806659&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7581a01c-04c5-4a61-ba01-b9f15f565f68",
        "parentId" : "2ba13afd-3db5-4d45-aaf1-3a9fb854043c",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Ahhhh of course...\r\nhttps://github.com/scalameta/metals/pull/1051\r\nI should have known that.. seeing that I added it ðŸ˜¬ .\r\n\r\nI suppose this is an edge case that you'll only hit on if you are triggering this code action from a file that has no imports yet. ðŸ¤” I'm trying to think what the best approach to fixing this is. We could just check the text edits and strip out the leading `\\n` on the second textEdit, but that will still fail in this test if it's flaky. I'm not 100% sure why the textEdits aren't applied in a uniform way in tests. @tgodzik may know more on that.",
        "createdAt" : "2020-04-22T11:09:54Z",
        "updatedAt" : "2020-04-23T06:23:45Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3e3fb402-6dd4-4c45-b9a6-b15f6fa3470a",
        "parentId" : "2ba13afd-3db5-4d45-aaf1-3a9fb854043c",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We do sort them by start to apply them properly:\r\n```\r\n      val positions = edits\r\n        .map(edit => edit -> edit.getRange.toMeta(input))\r\n        .sortBy(_._2.start)\r\n```\r\nin `TextEdits.scala`. I am not sure what will be the behaviour in case of multiple imports, but I believe we need to fix it there. ",
        "createdAt" : "2020-04-22T14:22:10Z",
        "updatedAt" : "2020-04-23T06:23:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6210392e5ab0214ee811acda5622269e560acfec",
    "line" : null,
    "diffHunk" : "@@ -78,26 +78,102 @@ class ImportMissingSymbolLspSuite\n   )\n \n   check(\n-    \"multi-across-lines\",\n+    \"multi-across-lines-non-ambiguous\",\n     \"\"\"|package a\n+       |\n+       |import scala.concurrent.Future\n        |\n        |object A {\n        |  val f = Future.successful(<<Instant.now)\n        |  val b = ListBuffer.newBuilder[Int]>>\n        |}\n        |\"\"\".stripMargin,\n-    s\"\"\"|${ImportMissingSymbol.title(\"Instant\", \"java.time\")}\n+    s\"\"\"|${ImportMissingSymbol.allSymbolsTitle}\n+        |${ImportMissingSymbol.title(\"Instant\", \"java.time\")}\n+        |${ImportMissingSymbol.title(\"ListBuffer\", \"scala.collection.mutable\")}\n+        |${CreateNewSymbol.title(\"Instant\")}\n+        |${CreateNewSymbol.title(\"ListBuffer\")}\n+        |\"\"\".stripMargin,\n+    \"\"\"|package a\n+       |\n+       |import scala.concurrent.Future\n+       |import java.time.Instant\n+       |import scala.collection.mutable\n+       |\n+       |object A {\n+       |  val f = Future.successful(Instant.now)\n+       |  val b = mutable.ListBuffer.newBuilder[Int]\n+       |}\n+       |\"\"\".stripMargin,\n+    expectNoDiagnostics = false\n+  )\n+\n+  check(\n+    \"multi-across-lines-ambiguous-and-non-ambiguous\",\n+    \"\"\"|package a\n+       |\n+       |object A {\n+       |  val f = <<Future.successful(Instant.now)\n+       |  val b = ListBuffer.newBuilder[Int]>>\n+       |}\n+       |\"\"\".stripMargin,\n+    s\"\"\"|${ImportMissingSymbol.allSymbolsTitle}\n+        |${ImportMissingSymbol.title(\"Future\", \"scala.concurrent\")}\n+        |${ImportMissingSymbol.title(\"Future\", \"java.util.concurrent\")}\n+        |${ImportMissingSymbol.title(\"Instant\", \"java.time\")}\n         |${ImportMissingSymbol.title(\"ListBuffer\", \"scala.collection.mutable\")}\n+        |${CreateNewSymbol.title(\"Future\")}\n         |${CreateNewSymbol.title(\"Instant\")}\n         |${CreateNewSymbol.title(\"ListBuffer\")}\n         |\"\"\".stripMargin,\n     \"\"\"|package a\n        |\n        |import java.time.Instant\n        |\n+       |import scala.collection.mutable\n+       |\n        |object A {\n        |  val f = Future.successful(Instant.now)\n+       |  val b = mutable.ListBuffer.newBuilder[Int]\n+       |}\n+       |\"\"\".stripMargin,\n+    expectNoDiagnostics = false\n+  )\n+\n+  check(\n+    \"multi-same-symbol\",\n+    \"\"\"|package a\n+       |\n+       |object A {\n+       |  val f = <<Future.successful(Instant.now)\n        |  val b = ListBuffer.newBuilder[Int]\n+       |  val t = Future.successful(ListBuffer.empty)>>\n+       |}\n+       |\"\"\".stripMargin,\n+    s\"\"\"|${ImportMissingSymbol.allSymbolsTitle}\n+        |${ImportMissingSymbol.title(\"Future\", \"scala.concurrent\")}\n+        |${ImportMissingSymbol.title(\"Future\", \"java.util.concurrent\")}\n+        |${ImportMissingSymbol.title(\"Instant\", \"java.time\")}\n+        |${ImportMissingSymbol.title(\"ListBuffer\", \"scala.collection.mutable\")}\n+        |${ImportMissingSymbol.title(\"Future\", \"scala.concurrent\")}\n+        |${ImportMissingSymbol.title(\"Future\", \"java.util.concurrent\")}\n+        |${ImportMissingSymbol.title(\"ListBuffer\", \"scala.collection.mutable\")}\n+        |${CreateNewSymbol.title(\"Future\")}\n+        |${CreateNewSymbol.title(\"Instant\")}\n+        |${CreateNewSymbol.title(\"ListBuffer\")}\n+        |${CreateNewSymbol.title(\"Future\")}\n+        |${CreateNewSymbol.title(\"ListBuffer\")}\n+        |\"\"\".stripMargin,\n+    \"\"\"|package a\n+       |\n+       |import java.time.Instant\n+       |"
  },
  {
    "id" : "ee0d83c3-7c86-4c41-960d-4bb08f26e497",
    "prId" : 1947,
    "comments" : [
      {
        "id" : "204771d5-6bff-42b7-89a9-61118617ecbf",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Maybe not super important, but previously these suggestions seemed to be given from the top of the file down. These are now reversed starting from the bottom up. Do you think it'd be a good idea to keep them as is and shown top down?",
        "createdAt" : "2020-07-27T08:43:31Z",
        "updatedAt" : "2020-07-27T11:50:05Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "681ae306-813f-4e11-a01d-194c4cf09656",
        "parentId" : "204771d5-6bff-42b7-89a9-61118617ecbf",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Good idea! Added sorting by a first diagnostic",
        "createdAt" : "2020-07-27T09:23:11Z",
        "updatedAt" : "2020-07-27T11:50:05Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "26a86a94e740c4ae59b4910184fd805b363c9302",
    "line" : null,
    "diffHunk" : "@@ -118,13 +145,13 @@ class ImportMissingSymbolLspSuite\n        |}\n        |\"\"\".stripMargin,\n     s\"\"\"|${ImportMissingSymbol.allSymbolsTitle}\n-        |${ImportMissingSymbol.title(\"Future\", \"scala.concurrent\")}\n-        |${ImportMissingSymbol.title(\"Future\", \"java.util.concurrent\")}\n-        |${ImportMissingSymbol.title(\"Instant\", \"java.time\")}\n         |${ImportMissingSymbol.title(\"ListBuffer\", \"scala.collection.mutable\")}\n+        |${ImportMissingSymbol.title(\"Instant\", \"java.time\")}\n+        |${ImportMissingSymbol.title(\"Future\", \"java.util.concurrent\")}\n+        |${ImportMissingSymbol.title(\"Future\", \"scala.concurrent\")}\n+        |${CreateNewSymbol.title(\"ListBuffer\")}"
  }
]