[
  {
    "id" : "eb3aaff6-0edd-44d9-82ae-60825afae942",
    "prId" : 1487,
    "comments" : [
      {
        "id" : "70fb0ebd-6122-4287-9432-2d67eabd26cd",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Awesome!",
        "createdAt" : "2020-03-12T11:52:45Z",
        "updatedAt" : "2020-03-24T16:45:28Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "55838e6c9f4127bc8d06a8d31a6df496a0b729a8",
    "line" : 13,
    "diffHunk" : "@@ -0,0 +1,329 @@\n+package tests\n+\n+import org.eclipse.lsp4j.Position\n+\n+import scala.concurrent.Future\n+\n+class SuperMethodLspSuite extends BaseLspSuite(\"gotosupermethod\") {\n+\n+  test(\"simple\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |trait A { def <<1->0>>xxx: String = \"A\" }"
  },
  {
    "id" : "f39f603c-cea5-448d-8e42-fcade58c2890",
    "prId" : 1487,
    "comments" : [
      {
        "id" : "ad0a54b0-e478-460a-9ac0-26aeeadf2bbb",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Remove println",
        "createdAt" : "2020-03-12T11:54:05Z",
        "updatedAt" : "2020-03-24T16:45:28Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "55838e6c9f4127bc8d06a8d31a6df496a0b729a8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,329 @@\n+package tests\n+\n+import org.eclipse.lsp4j.Position\n+\n+import scala.concurrent.Future\n+\n+class SuperMethodLspSuite extends BaseLspSuite(\"gotosupermethod\") {\n+\n+  test(\"simple\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |trait A { def <<1->0>>xxx: String = \"A\" }\n+        |trait B extends A { override def <<2->1>>xxx: String = \"B -> \" + super.xxx }\n+        |trait C extends A { override def <<3->1>>xxx: String = \"C -> \" + super.xxx }\n+        |trait D extends C { override def <<4->3>>xxx: String = \"D -> \" + super.xxx }\n+        |\"\"\".stripMargin\n+    checkSuperMethod(code)\n+  }\n+\n+  test(\"complex\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |trait A { def <<1->0>>xxx: String = \"A\" }\n+        |trait B1 extends A\n+        |trait B2 extends B1\n+        |trait B3 extends B2 { override def <<2->1>>xxx: String = \"B3 -> \" + super.xxx }\n+        |\n+        |trait C1 extends A\n+        |trait C2 extends C1 { override def <<3->1>>xxx: String = \"C2 -> \" + super.xxx }\n+        |trait C3 extends C2 { override def <<4->3>>xxx: String = \"C3 -> \" + super.xxx }\n+        |\n+        |trait D1 extends B1 { override def <<5->1>>xxx: String = \"D1 -> \" + super.xxx }\n+        |trait D2 extends B2\n+        |trait D3 extends B3\n+        |\n+        |class E1 extends A with C3 with B3 { override def <<6->2>>xxx: String = \"E1 -> \" + super.xxx }\n+        |class E2 extends A with C3 with B2 { override def <<7->4>>xxx: String = \"E2 -> \" + super.xxx }\n+        |class E3 extends A with C2 with B2 { override def <<8->3>>xxx: String = \"E3 -> \" + super.xxx }\n+        |class E4 extends A with C1 with B2 { override def <<9->1>>xxx: String = \"E4 -> \" + super.xxx }\n+        |\n+        |class E5 extends D1 with C2 with B2 { override def <<10->3>>xxx: String = \"E5 -> \" + super.xxx }\n+        |class E6 extends D1 with C1 with B2 { override def <<11->5>>xxx: String = \"E6 -> \" + super.xxx }\n+        |class E7 extends D3 with C2 with B3 { override def <<12->3>>xxx: String = \"E7 -> \" + super.xxx }\n+        |class E8 extends D3 with C1 with B3 { override def <<13->2>>xxx: String = \"E8 -> \" + super.xxx }\n+        |\"\"\".stripMargin\n+    checkSuperMethod(code)\n+  }\n+\n+  test(\"type inheritance\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |trait A { def <<1->0>>xxx: String = \"A\" }\n+        |trait B1 extends A\n+        |trait B2 extends B1 { override def <<2->1>>xxx: String = \"B2 -> \" + super.xxx }\n+        |trait B3 extends B2 { override def <<3->2>>xxx: String = \"B3 -> \" + super.xxx }\n+        |\n+        |object MidTypes {\n+        |  type Middle2 = B2\n+        |  type Middle3 = B3\n+        |\n+        |  class X1 extends Middle2 { override def <<4->2>>xxx: String = \"X1 -> \" + super.xxx }\n+        |  class X2 extends A with Middle2 { override def <<5->2>>xxx: String = \"X2 -> \" + super.xxx }\n+        |  class X3 extends Middle3 with Middle2 { override def <<6->3>>xxx: String = \"X3 -> \" + super.xxx }\n+        |}\n+        |\n+        |\"\"\".stripMargin\n+    checkSuperMethod(code)\n+  }\n+\n+  test(\"anonymousclass\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |trait A { def <<1->0>>xxx: String = \"A\" }\n+        |trait B1 extends A\n+        |trait B2 extends B1 { override def <<2->1>>xxx: String = \"B2 -> \" + super.xxx }\n+        |trait B3 extends B2 { override def <<3->2>>xxx: String = \"B3 -> \" + super.xxx }\n+        |\n+        |object Anonymous {\n+        |  val c = new B2 { override def <<4->2>>xxx: String = \"c -> \" + super.xxx }\n+        |  val d = new B3 { override def <<5->3>>xxx: String = \"d -> \" + super.xxx }\n+        |  val e = new A with B2 with B3 { override def <<6->3>>xxx: String = \"e -> \" + super.xxx }\n+        |}\n+        |\n+        |\"\"\".stripMargin\n+    checkSuperMethod(code)\n+  }\n+\n+  test(\"object\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |trait A { def <<1->0>>xxx: String = \"A\" }\n+        |trait B1 extends A\n+        |trait B2 extends B1 { override def <<2->1>>xxx: String = \"B2 -> \" + super.xxx }\n+        |\n+        |object O extends B2 {\n+        |  override def <<3->2>>xxx: String = \"O -> \" + super.xxx\n+        |}\n+        |\n+        |\"\"\".stripMargin\n+    checkSuperMethod(code)\n+  }\n+\n+  test(\"generic types\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |trait A\n+        |trait A1 extends A\n+        |case class AX() extends A1\n+        |\n+        |trait X[TP <: A] { def <<1->0>>fn(p: TP): String = \"X\" }\n+        |\n+        |trait X1[TP <: A] extends X[TP] { override def <<2->1>>fn(p: TP): String = s\"X1 -> ${super.fn(p)}\" }\n+        |trait X2[C] extends X[A] { override def <<3->1>>fn(p: A): String = s\"X2[C] -> ${super.fn(p)}\" }\n+        |trait X3 extends X[A1] { override def <<4->1>>fn(p: A1): String = s\"X3 -> ${super.fn(p)}\" }\n+        |\n+        |trait Y1[TP <: A] extends X1[TP] { override def <<5->2>>fn(p: TP): String = s\"Y1[TP] -> ${super.fn(p)}\" }\n+        |trait Y2[C] extends X1[A1] { override def <<6->2>>fn(p: A1): String = s\"Y2[C] -> ${super.fn(p)}\" }\n+        |trait Y3 extends X1[A] { override def <<6->2>>fn(p: A): String = s\"Y3 -> ${super.fn(p)}\" }\n+        |\n+        |trait Z2 extends X2[String] { override def <<7->3>>fn(p: A): String = s\"Z2 -> ${super.fn(p)}\" }\n+        |trait Z3 extends X3 { override def <<8->4>>fn(p: A1): String = s\"Z3 -> ${super.fn(p)}\" }\n+        |\n+        |\"\"\".stripMargin\n+    checkSuperMethod(code)\n+  }\n+\n+  test(\"matching methods\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |\n+        |trait X1\n+        |trait X2 extends X1\n+        |\n+        |trait A {\n+        |  def <<1->0>>a(a: String): String = \"A.a(s)\"\n+        |  def <<2->0>>a(a: Int): String = \"A.a(i)\"\n+        |  def <<3->0>>a(a: String, b: Int): String = \"A.a(s,i)\"\n+        |\n+        |  def <<4->0>>a(fn: Int => String): String = s\"A.f(I->S)=${fn(1)}\"\n+        |  def <<5->0>>a(x: Boolean): X1 = ???\n+        |}\n+        |\n+        |trait B extends A {\n+        |  override def <<6->1>>a(b: String): String = s\"B.a(s) -> ${super.a(b)}\"\n+        |  override def <<7->2>>a(b: Int): String = s\"B.a(i) -> ${super.a(b)}\"\n+        |  override def <<8->3>>a(x: String, y: Int) = s\"B.a(s,i) -> ${super.a(x,y)}\"\n+        |\n+        |  override def <<9->4>>a(fx: Int => String): String = s\"B.f(I->S)=${fx(1)} -> ${super.a(fx)}\"\n+        |  override def <<10->5>>a(x: Boolean): X2 = ???\n+        |}\n+        |\n+        |trait A1 { def <<20->0>>a(a: String, b: Boolean = true): String = ??? }\n+        |trait B1 extends A1 { override def <<21->20>>a(a: String, b: Boolean): String = ??? }\n+        |\n+        |trait A2 { def <<22->0>>a(a: String, b: Boolean): String = ??? }\n+        |trait B2 extends A2 { override def <<23->22>>a(a: String, b: Boolean = true): String = ??? }\n+        |\n+        |\"\"\".stripMargin\n+    checkSuperMethod(code)\n+  }\n+\n+  test(\"multi files\") {\n+    val codeA =\n+      \"\"\"\n+        |package a\n+        |\n+        |trait A { def <<1->0>>xxx: String = \"A\" }\n+        |trait B1 extends A\n+        |trait B2 extends B1 { override def <<2->1>>xxx: String = \"B2 -> \" + super.xxx }\n+        |trait B3 extends B2 { override def <<3->2>>xxx: String = \"B3 -> \" + super.xxx }\n+        |\n+        |\"\"\".stripMargin\n+\n+    val codeB =\n+      \"\"\"\n+        |package b\n+        |\n+        |trait C1 extends a.B1 { override def <<4->1>>xxx: String = \"C1 -> \" + super.xxx }\n+        |trait C2 extends a.B2 { override def <<5->2>>xxx: String = \"C2 -> \" + super.xxx }\n+        |trait C3 extends a.B3 { override def <<6->3>>xxx: String = \"C3 -> \" + super.xxx }\n+        |\n+        |\"\"\".stripMargin\n+\n+    checkSuperMethodMulti(\n+      codeA,\n+      codeB\n+    )\n+  }\n+\n+  test(\"jump to external dependency\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |import io.circe.Decoder\n+        |\n+        |trait CustomDecoder extends Decoder[String] {\n+        |  override def <<1->50>>apply(c: io.circe.HCursor): Decoder.Result[String] = ???\n+        |}\n+        |\n+        |\"\"\".stripMargin\n+\n+    checkSuperMethod(code)\n+  }\n+\n+  def checkSuperMethodMulti(\n+      codeA: String,\n+      codeB: String\n+  ): Future[Unit] = {\n+    val header = s\"\"\"\n+                    |/metals.json\n+                    |{\n+                    |  \"a\": { },\n+                    |  \"b\": {\"dependsOn\": [\"a\"]}\n+                    |}\n+                    |/a/src/main/scala/a/A.scala\n+                    |${codeA}\n+                    |/b/src/main/scala/b/B.scala\n+                    |${codeB}\n+                    |\"\"\".stripMargin\n+\n+    cleanWorkspace()\n+    for {\n+      _ <- server.initialize(strip(header))\n+      _ <- server.didOpen(\"a/src/main/scala/a/A.scala\")\n+      _ <- server.didOpen(\"b/src/main/scala/b/B.scala\")\n+      _ = assertNoDiagnostics()\n+    } yield {\n+      val pathA = server.toPath(\"a/src/main/scala/a/A.scala\").toURI.toString\n+      val pathB = server.toPath(\"b/src/main/scala/b/B.scala\").toURI.toString\n+      val (contextA, assertsA) = parseWithUri(codeA, pathA)\n+      val (contextB, assertsB) = parseWithUri(codeB, pathB)\n+      for (check <- assertsA ++ assertsB) {\n+        println(s\"CHECKING ${check}\")"
  },
  {
    "id" : "7d3802d7-e46f-4121-8756-e10d2e84b2c2",
    "prId" : 1487,
    "comments" : [
      {
        "id" : "81fe3072-7555-47bb-8595-ff7edfa9f663",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Remove println",
        "createdAt" : "2020-03-12T11:54:30Z",
        "updatedAt" : "2020-03-24T16:45:28Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "55838e6c9f4127bc8d06a8d31a6df496a0b729a8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,329 @@\n+package tests\n+\n+import org.eclipse.lsp4j.Position\n+\n+import scala.concurrent.Future\n+\n+class SuperMethodLspSuite extends BaseLspSuite(\"gotosupermethod\") {\n+\n+  test(\"simple\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |trait A { def <<1->0>>xxx: String = \"A\" }\n+        |trait B extends A { override def <<2->1>>xxx: String = \"B -> \" + super.xxx }\n+        |trait C extends A { override def <<3->1>>xxx: String = \"C -> \" + super.xxx }\n+        |trait D extends C { override def <<4->3>>xxx: String = \"D -> \" + super.xxx }\n+        |\"\"\".stripMargin\n+    checkSuperMethod(code)\n+  }\n+\n+  test(\"complex\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |trait A { def <<1->0>>xxx: String = \"A\" }\n+        |trait B1 extends A\n+        |trait B2 extends B1\n+        |trait B3 extends B2 { override def <<2->1>>xxx: String = \"B3 -> \" + super.xxx }\n+        |\n+        |trait C1 extends A\n+        |trait C2 extends C1 { override def <<3->1>>xxx: String = \"C2 -> \" + super.xxx }\n+        |trait C3 extends C2 { override def <<4->3>>xxx: String = \"C3 -> \" + super.xxx }\n+        |\n+        |trait D1 extends B1 { override def <<5->1>>xxx: String = \"D1 -> \" + super.xxx }\n+        |trait D2 extends B2\n+        |trait D3 extends B3\n+        |\n+        |class E1 extends A with C3 with B3 { override def <<6->2>>xxx: String = \"E1 -> \" + super.xxx }\n+        |class E2 extends A with C3 with B2 { override def <<7->4>>xxx: String = \"E2 -> \" + super.xxx }\n+        |class E3 extends A with C2 with B2 { override def <<8->3>>xxx: String = \"E3 -> \" + super.xxx }\n+        |class E4 extends A with C1 with B2 { override def <<9->1>>xxx: String = \"E4 -> \" + super.xxx }\n+        |\n+        |class E5 extends D1 with C2 with B2 { override def <<10->3>>xxx: String = \"E5 -> \" + super.xxx }\n+        |class E6 extends D1 with C1 with B2 { override def <<11->5>>xxx: String = \"E6 -> \" + super.xxx }\n+        |class E7 extends D3 with C2 with B3 { override def <<12->3>>xxx: String = \"E7 -> \" + super.xxx }\n+        |class E8 extends D3 with C1 with B3 { override def <<13->2>>xxx: String = \"E8 -> \" + super.xxx }\n+        |\"\"\".stripMargin\n+    checkSuperMethod(code)\n+  }\n+\n+  test(\"type inheritance\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |trait A { def <<1->0>>xxx: String = \"A\" }\n+        |trait B1 extends A\n+        |trait B2 extends B1 { override def <<2->1>>xxx: String = \"B2 -> \" + super.xxx }\n+        |trait B3 extends B2 { override def <<3->2>>xxx: String = \"B3 -> \" + super.xxx }\n+        |\n+        |object MidTypes {\n+        |  type Middle2 = B2\n+        |  type Middle3 = B3\n+        |\n+        |  class X1 extends Middle2 { override def <<4->2>>xxx: String = \"X1 -> \" + super.xxx }\n+        |  class X2 extends A with Middle2 { override def <<5->2>>xxx: String = \"X2 -> \" + super.xxx }\n+        |  class X3 extends Middle3 with Middle2 { override def <<6->3>>xxx: String = \"X3 -> \" + super.xxx }\n+        |}\n+        |\n+        |\"\"\".stripMargin\n+    checkSuperMethod(code)\n+  }\n+\n+  test(\"anonymousclass\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |trait A { def <<1->0>>xxx: String = \"A\" }\n+        |trait B1 extends A\n+        |trait B2 extends B1 { override def <<2->1>>xxx: String = \"B2 -> \" + super.xxx }\n+        |trait B3 extends B2 { override def <<3->2>>xxx: String = \"B3 -> \" + super.xxx }\n+        |\n+        |object Anonymous {\n+        |  val c = new B2 { override def <<4->2>>xxx: String = \"c -> \" + super.xxx }\n+        |  val d = new B3 { override def <<5->3>>xxx: String = \"d -> \" + super.xxx }\n+        |  val e = new A with B2 with B3 { override def <<6->3>>xxx: String = \"e -> \" + super.xxx }\n+        |}\n+        |\n+        |\"\"\".stripMargin\n+    checkSuperMethod(code)\n+  }\n+\n+  test(\"object\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |trait A { def <<1->0>>xxx: String = \"A\" }\n+        |trait B1 extends A\n+        |trait B2 extends B1 { override def <<2->1>>xxx: String = \"B2 -> \" + super.xxx }\n+        |\n+        |object O extends B2 {\n+        |  override def <<3->2>>xxx: String = \"O -> \" + super.xxx\n+        |}\n+        |\n+        |\"\"\".stripMargin\n+    checkSuperMethod(code)\n+  }\n+\n+  test(\"generic types\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |trait A\n+        |trait A1 extends A\n+        |case class AX() extends A1\n+        |\n+        |trait X[TP <: A] { def <<1->0>>fn(p: TP): String = \"X\" }\n+        |\n+        |trait X1[TP <: A] extends X[TP] { override def <<2->1>>fn(p: TP): String = s\"X1 -> ${super.fn(p)}\" }\n+        |trait X2[C] extends X[A] { override def <<3->1>>fn(p: A): String = s\"X2[C] -> ${super.fn(p)}\" }\n+        |trait X3 extends X[A1] { override def <<4->1>>fn(p: A1): String = s\"X3 -> ${super.fn(p)}\" }\n+        |\n+        |trait Y1[TP <: A] extends X1[TP] { override def <<5->2>>fn(p: TP): String = s\"Y1[TP] -> ${super.fn(p)}\" }\n+        |trait Y2[C] extends X1[A1] { override def <<6->2>>fn(p: A1): String = s\"Y2[C] -> ${super.fn(p)}\" }\n+        |trait Y3 extends X1[A] { override def <<6->2>>fn(p: A): String = s\"Y3 -> ${super.fn(p)}\" }\n+        |\n+        |trait Z2 extends X2[String] { override def <<7->3>>fn(p: A): String = s\"Z2 -> ${super.fn(p)}\" }\n+        |trait Z3 extends X3 { override def <<8->4>>fn(p: A1): String = s\"Z3 -> ${super.fn(p)}\" }\n+        |\n+        |\"\"\".stripMargin\n+    checkSuperMethod(code)\n+  }\n+\n+  test(\"matching methods\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |\n+        |trait X1\n+        |trait X2 extends X1\n+        |\n+        |trait A {\n+        |  def <<1->0>>a(a: String): String = \"A.a(s)\"\n+        |  def <<2->0>>a(a: Int): String = \"A.a(i)\"\n+        |  def <<3->0>>a(a: String, b: Int): String = \"A.a(s,i)\"\n+        |\n+        |  def <<4->0>>a(fn: Int => String): String = s\"A.f(I->S)=${fn(1)}\"\n+        |  def <<5->0>>a(x: Boolean): X1 = ???\n+        |}\n+        |\n+        |trait B extends A {\n+        |  override def <<6->1>>a(b: String): String = s\"B.a(s) -> ${super.a(b)}\"\n+        |  override def <<7->2>>a(b: Int): String = s\"B.a(i) -> ${super.a(b)}\"\n+        |  override def <<8->3>>a(x: String, y: Int) = s\"B.a(s,i) -> ${super.a(x,y)}\"\n+        |\n+        |  override def <<9->4>>a(fx: Int => String): String = s\"B.f(I->S)=${fx(1)} -> ${super.a(fx)}\"\n+        |  override def <<10->5>>a(x: Boolean): X2 = ???\n+        |}\n+        |\n+        |trait A1 { def <<20->0>>a(a: String, b: Boolean = true): String = ??? }\n+        |trait B1 extends A1 { override def <<21->20>>a(a: String, b: Boolean): String = ??? }\n+        |\n+        |trait A2 { def <<22->0>>a(a: String, b: Boolean): String = ??? }\n+        |trait B2 extends A2 { override def <<23->22>>a(a: String, b: Boolean = true): String = ??? }\n+        |\n+        |\"\"\".stripMargin\n+    checkSuperMethod(code)\n+  }\n+\n+  test(\"multi files\") {\n+    val codeA =\n+      \"\"\"\n+        |package a\n+        |\n+        |trait A { def <<1->0>>xxx: String = \"A\" }\n+        |trait B1 extends A\n+        |trait B2 extends B1 { override def <<2->1>>xxx: String = \"B2 -> \" + super.xxx }\n+        |trait B3 extends B2 { override def <<3->2>>xxx: String = \"B3 -> \" + super.xxx }\n+        |\n+        |\"\"\".stripMargin\n+\n+    val codeB =\n+      \"\"\"\n+        |package b\n+        |\n+        |trait C1 extends a.B1 { override def <<4->1>>xxx: String = \"C1 -> \" + super.xxx }\n+        |trait C2 extends a.B2 { override def <<5->2>>xxx: String = \"C2 -> \" + super.xxx }\n+        |trait C3 extends a.B3 { override def <<6->3>>xxx: String = \"C3 -> \" + super.xxx }\n+        |\n+        |\"\"\".stripMargin\n+\n+    checkSuperMethodMulti(\n+      codeA,\n+      codeB\n+    )\n+  }\n+\n+  test(\"jump to external dependency\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |import io.circe.Decoder\n+        |\n+        |trait CustomDecoder extends Decoder[String] {\n+        |  override def <<1->50>>apply(c: io.circe.HCursor): Decoder.Result[String] = ???\n+        |}\n+        |\n+        |\"\"\".stripMargin\n+\n+    checkSuperMethod(code)\n+  }\n+\n+  def checkSuperMethodMulti(\n+      codeA: String,\n+      codeB: String\n+  ): Future[Unit] = {\n+    val header = s\"\"\"\n+                    |/metals.json\n+                    |{\n+                    |  \"a\": { },\n+                    |  \"b\": {\"dependsOn\": [\"a\"]}\n+                    |}\n+                    |/a/src/main/scala/a/A.scala\n+                    |${codeA}\n+                    |/b/src/main/scala/b/B.scala\n+                    |${codeB}\n+                    |\"\"\".stripMargin\n+\n+    cleanWorkspace()\n+    for {\n+      _ <- server.initialize(strip(header))\n+      _ <- server.didOpen(\"a/src/main/scala/a/A.scala\")\n+      _ <- server.didOpen(\"b/src/main/scala/b/B.scala\")\n+      _ = assertNoDiagnostics()\n+    } yield {\n+      val pathA = server.toPath(\"a/src/main/scala/a/A.scala\").toURI.toString\n+      val pathB = server.toPath(\"b/src/main/scala/b/B.scala\").toURI.toString\n+      val (contextA, assertsA) = parseWithUri(codeA, pathA)\n+      val (contextB, assertsB) = parseWithUri(codeB, pathB)\n+      for (check <- assertsA ++ assertsB) {\n+        println(s\"CHECKING ${check}\")\n+        server.assertGotoSuperMethod(check._1, check._2, contextA ++ contextB)\n+      }\n+    }\n+  }\n+\n+  def checkSuperMethod(\n+      code: String\n+  ): Future[Unit] = {\n+    val header = \"\"\"\n+                   |/metals.json\n+                   |{\n+                   |  \"a\": {\n+                   |    \"libraryDependencies\": [\n+                   |      \"io.circe::circe-generic:0.12.0\"\n+                   |    ]\n+                   |  }\n+                   |}\n+                   |/a/src/main/scala/a/A.scala\n+                   |\"\"\".stripMargin\n+\n+    // Checked manually it is actually there and operated under artificial ID link \"50\"\n+    val externalDep = Map(\n+      50 -> (new Position(60, 6), workspace.toURI.toString + \".metals/readonly/io/circe/Decoder.scala\")\n+    )\n+\n+    cleanWorkspace()\n+    for {\n+      _ <- server.initialize(strip(header + code))\n+      _ <- server.didOpen(\"a/src/main/scala/a/A.scala\")\n+      _ = assertNoDiagnostics()\n+    } yield {\n+      val path = server.toPath(\"a/src/main/scala/a/A.scala\").toURI.toString\n+      val (context, assertions) = parseWithUri(code, path)\n+      for (check <- assertions) {\n+        println(s\"CHECKING ${check}\")"
  },
  {
    "id" : "c2ee4a0c-b726-40a6-8c5c-66d9df5f42ea",
    "prId" : 1487,
    "comments" : [
      {
        "id" : "8ebffe08-daf6-4a94-a0ce-fcde2082237e",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Same as in SuperHierarchyLspSuite, this can be simplified by finding the offset and using the scalameta Postion\r\n\r\n",
        "createdAt" : "2020-03-12T11:56:50Z",
        "updatedAt" : "2020-03-24T16:45:28Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "52ab9cb7-268d-43ed-8fc3-2f19c4b6636e",
        "parentId" : "8ebffe08-daf6-4a94-a0ce-fcde2082237e",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "I can understand searching for <<1>> <<2>> until not found, but searching for every <<X->Y>> ?\r\nI might not get idea, can you provide more defails how it should work?",
        "createdAt" : "2020-03-13T15:59:59Z",
        "updatedAt" : "2020-03-24T16:45:28Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "71c874d1-cb70-4c10-806b-f75707ce85cd",
        "parentId" : "8ebffe08-daf6-4a94-a0ce-fcde2082237e",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Ok, I was thinking we could make it simpler, but after thinking it might be more complex to rework.",
        "createdAt" : "2020-03-13T16:26:00Z",
        "updatedAt" : "2020-03-24T16:45:28Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "55838e6c9f4127bc8d06a8d31a6df496a0b729a8",
    "line" : 293,
    "diffHunk" : "@@ -0,0 +1,329 @@\n+package tests\n+\n+import org.eclipse.lsp4j.Position\n+\n+import scala.concurrent.Future\n+\n+class SuperMethodLspSuite extends BaseLspSuite(\"gotosupermethod\") {\n+\n+  test(\"simple\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |trait A { def <<1->0>>xxx: String = \"A\" }\n+        |trait B extends A { override def <<2->1>>xxx: String = \"B -> \" + super.xxx }\n+        |trait C extends A { override def <<3->1>>xxx: String = \"C -> \" + super.xxx }\n+        |trait D extends C { override def <<4->3>>xxx: String = \"D -> \" + super.xxx }\n+        |\"\"\".stripMargin\n+    checkSuperMethod(code)\n+  }\n+\n+  test(\"complex\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |trait A { def <<1->0>>xxx: String = \"A\" }\n+        |trait B1 extends A\n+        |trait B2 extends B1\n+        |trait B3 extends B2 { override def <<2->1>>xxx: String = \"B3 -> \" + super.xxx }\n+        |\n+        |trait C1 extends A\n+        |trait C2 extends C1 { override def <<3->1>>xxx: String = \"C2 -> \" + super.xxx }\n+        |trait C3 extends C2 { override def <<4->3>>xxx: String = \"C3 -> \" + super.xxx }\n+        |\n+        |trait D1 extends B1 { override def <<5->1>>xxx: String = \"D1 -> \" + super.xxx }\n+        |trait D2 extends B2\n+        |trait D3 extends B3\n+        |\n+        |class E1 extends A with C3 with B3 { override def <<6->2>>xxx: String = \"E1 -> \" + super.xxx }\n+        |class E2 extends A with C3 with B2 { override def <<7->4>>xxx: String = \"E2 -> \" + super.xxx }\n+        |class E3 extends A with C2 with B2 { override def <<8->3>>xxx: String = \"E3 -> \" + super.xxx }\n+        |class E4 extends A with C1 with B2 { override def <<9->1>>xxx: String = \"E4 -> \" + super.xxx }\n+        |\n+        |class E5 extends D1 with C2 with B2 { override def <<10->3>>xxx: String = \"E5 -> \" + super.xxx }\n+        |class E6 extends D1 with C1 with B2 { override def <<11->5>>xxx: String = \"E6 -> \" + super.xxx }\n+        |class E7 extends D3 with C2 with B3 { override def <<12->3>>xxx: String = \"E7 -> \" + super.xxx }\n+        |class E8 extends D3 with C1 with B3 { override def <<13->2>>xxx: String = \"E8 -> \" + super.xxx }\n+        |\"\"\".stripMargin\n+    checkSuperMethod(code)\n+  }\n+\n+  test(\"type inheritance\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |trait A { def <<1->0>>xxx: String = \"A\" }\n+        |trait B1 extends A\n+        |trait B2 extends B1 { override def <<2->1>>xxx: String = \"B2 -> \" + super.xxx }\n+        |trait B3 extends B2 { override def <<3->2>>xxx: String = \"B3 -> \" + super.xxx }\n+        |\n+        |object MidTypes {\n+        |  type Middle2 = B2\n+        |  type Middle3 = B3\n+        |\n+        |  class X1 extends Middle2 { override def <<4->2>>xxx: String = \"X1 -> \" + super.xxx }\n+        |  class X2 extends A with Middle2 { override def <<5->2>>xxx: String = \"X2 -> \" + super.xxx }\n+        |  class X3 extends Middle3 with Middle2 { override def <<6->3>>xxx: String = \"X3 -> \" + super.xxx }\n+        |}\n+        |\n+        |\"\"\".stripMargin\n+    checkSuperMethod(code)\n+  }\n+\n+  test(\"anonymousclass\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |trait A { def <<1->0>>xxx: String = \"A\" }\n+        |trait B1 extends A\n+        |trait B2 extends B1 { override def <<2->1>>xxx: String = \"B2 -> \" + super.xxx }\n+        |trait B3 extends B2 { override def <<3->2>>xxx: String = \"B3 -> \" + super.xxx }\n+        |\n+        |object Anonymous {\n+        |  val c = new B2 { override def <<4->2>>xxx: String = \"c -> \" + super.xxx }\n+        |  val d = new B3 { override def <<5->3>>xxx: String = \"d -> \" + super.xxx }\n+        |  val e = new A with B2 with B3 { override def <<6->3>>xxx: String = \"e -> \" + super.xxx }\n+        |}\n+        |\n+        |\"\"\".stripMargin\n+    checkSuperMethod(code)\n+  }\n+\n+  test(\"object\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |trait A { def <<1->0>>xxx: String = \"A\" }\n+        |trait B1 extends A\n+        |trait B2 extends B1 { override def <<2->1>>xxx: String = \"B2 -> \" + super.xxx }\n+        |\n+        |object O extends B2 {\n+        |  override def <<3->2>>xxx: String = \"O -> \" + super.xxx\n+        |}\n+        |\n+        |\"\"\".stripMargin\n+    checkSuperMethod(code)\n+  }\n+\n+  test(\"generic types\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |trait A\n+        |trait A1 extends A\n+        |case class AX() extends A1\n+        |\n+        |trait X[TP <: A] { def <<1->0>>fn(p: TP): String = \"X\" }\n+        |\n+        |trait X1[TP <: A] extends X[TP] { override def <<2->1>>fn(p: TP): String = s\"X1 -> ${super.fn(p)}\" }\n+        |trait X2[C] extends X[A] { override def <<3->1>>fn(p: A): String = s\"X2[C] -> ${super.fn(p)}\" }\n+        |trait X3 extends X[A1] { override def <<4->1>>fn(p: A1): String = s\"X3 -> ${super.fn(p)}\" }\n+        |\n+        |trait Y1[TP <: A] extends X1[TP] { override def <<5->2>>fn(p: TP): String = s\"Y1[TP] -> ${super.fn(p)}\" }\n+        |trait Y2[C] extends X1[A1] { override def <<6->2>>fn(p: A1): String = s\"Y2[C] -> ${super.fn(p)}\" }\n+        |trait Y3 extends X1[A] { override def <<6->2>>fn(p: A): String = s\"Y3 -> ${super.fn(p)}\" }\n+        |\n+        |trait Z2 extends X2[String] { override def <<7->3>>fn(p: A): String = s\"Z2 -> ${super.fn(p)}\" }\n+        |trait Z3 extends X3 { override def <<8->4>>fn(p: A1): String = s\"Z3 -> ${super.fn(p)}\" }\n+        |\n+        |\"\"\".stripMargin\n+    checkSuperMethod(code)\n+  }\n+\n+  test(\"matching methods\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |\n+        |trait X1\n+        |trait X2 extends X1\n+        |\n+        |trait A {\n+        |  def <<1->0>>a(a: String): String = \"A.a(s)\"\n+        |  def <<2->0>>a(a: Int): String = \"A.a(i)\"\n+        |  def <<3->0>>a(a: String, b: Int): String = \"A.a(s,i)\"\n+        |\n+        |  def <<4->0>>a(fn: Int => String): String = s\"A.f(I->S)=${fn(1)}\"\n+        |  def <<5->0>>a(x: Boolean): X1 = ???\n+        |}\n+        |\n+        |trait B extends A {\n+        |  override def <<6->1>>a(b: String): String = s\"B.a(s) -> ${super.a(b)}\"\n+        |  override def <<7->2>>a(b: Int): String = s\"B.a(i) -> ${super.a(b)}\"\n+        |  override def <<8->3>>a(x: String, y: Int) = s\"B.a(s,i) -> ${super.a(x,y)}\"\n+        |\n+        |  override def <<9->4>>a(fx: Int => String): String = s\"B.f(I->S)=${fx(1)} -> ${super.a(fx)}\"\n+        |  override def <<10->5>>a(x: Boolean): X2 = ???\n+        |}\n+        |\n+        |trait A1 { def <<20->0>>a(a: String, b: Boolean = true): String = ??? }\n+        |trait B1 extends A1 { override def <<21->20>>a(a: String, b: Boolean): String = ??? }\n+        |\n+        |trait A2 { def <<22->0>>a(a: String, b: Boolean): String = ??? }\n+        |trait B2 extends A2 { override def <<23->22>>a(a: String, b: Boolean = true): String = ??? }\n+        |\n+        |\"\"\".stripMargin\n+    checkSuperMethod(code)\n+  }\n+\n+  test(\"multi files\") {\n+    val codeA =\n+      \"\"\"\n+        |package a\n+        |\n+        |trait A { def <<1->0>>xxx: String = \"A\" }\n+        |trait B1 extends A\n+        |trait B2 extends B1 { override def <<2->1>>xxx: String = \"B2 -> \" + super.xxx }\n+        |trait B3 extends B2 { override def <<3->2>>xxx: String = \"B3 -> \" + super.xxx }\n+        |\n+        |\"\"\".stripMargin\n+\n+    val codeB =\n+      \"\"\"\n+        |package b\n+        |\n+        |trait C1 extends a.B1 { override def <<4->1>>xxx: String = \"C1 -> \" + super.xxx }\n+        |trait C2 extends a.B2 { override def <<5->2>>xxx: String = \"C2 -> \" + super.xxx }\n+        |trait C3 extends a.B3 { override def <<6->3>>xxx: String = \"C3 -> \" + super.xxx }\n+        |\n+        |\"\"\".stripMargin\n+\n+    checkSuperMethodMulti(\n+      codeA,\n+      codeB\n+    )\n+  }\n+\n+  test(\"jump to external dependency\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |import io.circe.Decoder\n+        |\n+        |trait CustomDecoder extends Decoder[String] {\n+        |  override def <<1->50>>apply(c: io.circe.HCursor): Decoder.Result[String] = ???\n+        |}\n+        |\n+        |\"\"\".stripMargin\n+\n+    checkSuperMethod(code)\n+  }\n+\n+  def checkSuperMethodMulti(\n+      codeA: String,\n+      codeB: String\n+  ): Future[Unit] = {\n+    val header = s\"\"\"\n+                    |/metals.json\n+                    |{\n+                    |  \"a\": { },\n+                    |  \"b\": {\"dependsOn\": [\"a\"]}\n+                    |}\n+                    |/a/src/main/scala/a/A.scala\n+                    |${codeA}\n+                    |/b/src/main/scala/b/B.scala\n+                    |${codeB}\n+                    |\"\"\".stripMargin\n+\n+    cleanWorkspace()\n+    for {\n+      _ <- server.initialize(strip(header))\n+      _ <- server.didOpen(\"a/src/main/scala/a/A.scala\")\n+      _ <- server.didOpen(\"b/src/main/scala/b/B.scala\")\n+      _ = assertNoDiagnostics()\n+    } yield {\n+      val pathA = server.toPath(\"a/src/main/scala/a/A.scala\").toURI.toString\n+      val pathB = server.toPath(\"b/src/main/scala/b/B.scala\").toURI.toString\n+      val (contextA, assertsA) = parseWithUri(codeA, pathA)\n+      val (contextB, assertsB) = parseWithUri(codeB, pathB)\n+      for (check <- assertsA ++ assertsB) {\n+        println(s\"CHECKING ${check}\")\n+        server.assertGotoSuperMethod(check._1, check._2, contextA ++ contextB)\n+      }\n+    }\n+  }\n+\n+  def checkSuperMethod(\n+      code: String\n+  ): Future[Unit] = {\n+    val header = \"\"\"\n+                   |/metals.json\n+                   |{\n+                   |  \"a\": {\n+                   |    \"libraryDependencies\": [\n+                   |      \"io.circe::circe-generic:0.12.0\"\n+                   |    ]\n+                   |  }\n+                   |}\n+                   |/a/src/main/scala/a/A.scala\n+                   |\"\"\".stripMargin\n+\n+    // Checked manually it is actually there and operated under artificial ID link \"50\"\n+    val externalDep = Map(\n+      50 -> (new Position(60, 6), workspace.toURI.toString + \".metals/readonly/io/circe/Decoder.scala\")\n+    )\n+\n+    cleanWorkspace()\n+    for {\n+      _ <- server.initialize(strip(header + code))\n+      _ <- server.didOpen(\"a/src/main/scala/a/A.scala\")\n+      _ = assertNoDiagnostics()\n+    } yield {\n+      val path = server.toPath(\"a/src/main/scala/a/A.scala\").toURI.toString\n+      val (context, assertions) = parseWithUri(code, path)\n+      for (check <- assertions) {\n+        println(s\"CHECKING ${check}\")\n+        server.assertGotoSuperMethod(check._1, check._2, context ++ externalDep)\n+      }\n+    }\n+  }\n+\n+  private def strip(code: String): String = {\n+    code.replaceAll(\"\\\\<\\\\<\\\\S*\\\\>\\\\>\", \"\")\n+  }\n+\n+  private def parseWithUri(\n+      code: String,\n+      uri: String\n+  ): (Map[Int, (Position, String)], Map[Int, Option[Int]]) = {\n+    val (mapping, asserts) = parse(code)\n+    (mapping.mapValues((_, uri)), asserts)\n+  }\n+\n+  private def parse(\n+      code: String\n+  ): (Map[Int, Position], Map[Int, Option[Int]]) = {"
  },
  {
    "id" : "02fa6390-baef-4ea7-879d-2932f2b7875d",
    "prId" : 1572,
    "comments" : [
      {
        "id" : "52d88a89-b68e-438c-beb0-53fc07d89f55",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "nit: we try to avoid spaces in test names to make it easier to  run a single test from the command-line\r\n```suggestion\r\n  test(\"anonymous-class\") {\r\n```",
        "createdAt" : "2020-03-31T08:38:51Z",
        "updatedAt" : "2020-03-31T09:40:47Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "be06926c-6184-4bd1-a86c-ce970856de77",
        "parentId" : "52d88a89-b68e-438c-beb0-53fc07d89f55",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "`testOnly tests.SuperMethodLspSuite -- --tests \"*anonymous class*\"` works just fine :)\r\nand alternative:\r\n`testOnly tests.SuperMethodLspSuite -- --test \"tests.SuperMethodLspSuite.anonymous class\"`",
        "createdAt" : "2020-03-31T09:20:46Z",
        "updatedAt" : "2020-03-31T09:40:47Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "503972ab-16b4-4ca3-be05-c927c92e29d2",
        "parentId" : "52d88a89-b68e-438c-beb0-53fc07d89f55",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "I looked at munit docs and with recommended commands there even with '-' it doesn't work :/",
        "createdAt" : "2020-03-31T09:39:21Z",
        "updatedAt" : "2020-03-31T09:40:47Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "77e7c2de-4cb1-4dbc-ac70-478103214b9f",
        "parentId" : "52d88a89-b68e-438c-beb0-53fc07d89f55",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "anyway all test names changed in this file",
        "createdAt" : "2020-03-31T09:41:27Z",
        "updatedAt" : "2020-03-31T09:41:28Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3a26a6dc476b4dde6756301a01a398cf70421ec2",
    "line" : null,
    "diffHunk" : "@@ -70,7 +84,7 @@ class SuperMethodLspSuite extends BaseLspSuite(\"gotosupermethod\") {\n     checkSuperMethod(code)\n   }\n \n-  test(\"anonymousclass\") {\n+  test(\"anonymous class\") {"
  }
]