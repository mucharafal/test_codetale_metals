[
  {
    "id" : "7f3516f1-8b86-4553-8d68-e1cfec10c6ce",
    "prId" : 424,
    "comments" : [
      {
        "id" : "5c0a1a0f-9072-4c89-a47c-10440f396716",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Is this method needed?",
        "createdAt" : "2018-12-18T15:40:01Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e44339d4-d1c1-4cd6-92ea-506056723b42",
        "parentId" : "5c0a1a0f-9072-4c89-a47c-10440f396716",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "It doesn't have to be a method, I'll refactor it into a simple val. (it was more complicated before)",
        "createdAt" : "2018-12-18T15:59:33Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "eade48fd8ffbc5572cad7092e373fee0027e4f0f",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,40 @@\n+package tests\n+\n+import scala.meta.internal.metals.Buffers\n+import scala.meta.internal.metals.DocumentSymbolProvider\n+import scala.meta.internal.mtags.Semanticdbs\n+import scala.meta.internal.{semanticdb => s}\n+import org.eclipse.lsp4j.DocumentSymbol\n+import MetalsTestEnrichments._\n+\n+/**\n+ * Checks the positions of document symbols inside a document\n+ */\n+object DocumentSymbolSuite extends DirectoryExpectSuite(\"documentSymbol\") {\n+  val documentSymbolProvider = new DocumentSymbolProvider(new Buffers())\n+\n+  override def testCases(): List[ExpectTestCase] = {\n+    input.scalaFiles.map { file =>\n+      ExpectTestCase(\n+        file, { () =>\n+          val documentSymbols =\n+            documentSymbolProvider.documentSymbols(file.file)\n+\n+          def toTextDocument("
  }
]