[
  {
    "id" : "fbbf4b00-9428-43de-8e75-0615474f8839",
    "prId" : 1254,
    "comments" : [
      {
        "id" : "fc6ff1ff-0d5a-4414-8213-d336f97d79d2",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "this was needed in order to please the type checker, which was inferring `Serializable` when inlined.",
        "createdAt" : "2020-01-05T17:08:47Z",
        "updatedAt" : "2020-01-05T17:30:54Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1bfc1895-d47d-4148-ba06-ab1cd9abcb23",
        "parentId" : "fc6ff1ff-0d5a-4414-8213-d336f97d79d2",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "What ðŸ˜Ÿ That's surprising. Looks like a compiler bug in that case. Is it worth adding a `def test(name: String, tags: Tag*)` overload to avoid similarly confusing failures for basic cases?",
        "createdAt" : "2020-01-05T17:40:30Z",
        "updatedAt" : "2020-01-05T17:40:53Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8c01432863b62a73bbfb809ed6739a6bf33ed62f",
    "line" : 6,
    "diffHunk" : "@@ -6,7 +6,8 @@ import scala.meta.internal.metals.ClassfileElementPart\n object CompressionSuite extends BaseSuite {\n   def checkRoundtrip(a: String): Unit = {\n     val nonempty = a.trim.linesIterator.map(_.trim).filterNot(_.isEmpty).toArray\n-    test(nonempty.headOption.getOrElse(\"<empty>\")) {\n+    val testName = nonempty.headOption.getOrElse(\"<empty>\")\n+    test(testName) {"
  }
]