[
  {
    "id" : "08fbf62e-a5e1-4f47-9e56-9adc43d9dec5",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "8022842f-d2d6-4442-afdc-36058e1272ba",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Interesting, this should be totally fixable inside `Mtags.toplevels`. I've considered extending the parser to emit global def/val/var symbols as well. Can we open a ticket for this?",
        "createdAt" : "2019-12-16T11:14:21Z",
        "updatedAt" : "2019-12-18T11:36:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b53be6d9-2e08-4861-8000-8c2a27630c68",
        "parentId" : "8022842f-d2d6-4442-afdc-36058e1272ba",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This is BTW a totally fine limitation for now, we'll make it clear in the release announcement that the debugging support has known issues",
        "createdAt" : "2019-12-16T11:15:04Z",
        "updatedAt" : "2019-12-18T11:36:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4435f6e4-adbb-4200-a6ca-ab8e22f81f32",
        "parentId" : "8022842f-d2d6-4442-afdc-36058e1272ba",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Opened https://github.com/scalameta/metals/issues/1195",
        "createdAt" : "2019-12-17T08:41:21Z",
        "updatedAt" : "2019-12-18T11:36:11Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "04ef30f47759c2620cd886265e4c50169245a539",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,468 @@\n+package tests.debug\n+import tests.BaseDapSuite\n+import scala.meta.internal.metals.debug.DebugStep._\n+import scala.meta.internal.metals.debug.DebugFileLayout\n+import scala.meta.internal.metals.debug.StepNavigator\n+\n+object BreakpointDapSuite extends BaseDapSuite(\"debug-breakpoint\") {\n+\n+  // disabled, because finding enclosing class for the breakpoint line is not working\n+  // see [[scala.meta.internal.metals.debug.SetBreakpointsRequestHandler]]\n+  assertFileBreakpoints(\"preceding-class\", disabled = true)("
  },
  {
    "id" : "7f079704-64be-4670-80f8-5afae9d71ee0",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "88a777aa-6936-49ad-bf9e-9d95d264bef1",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This is a known limitation that also applies to \"goto definition\". We can open a followup ticket and remove this TODO",
        "createdAt" : "2019-12-16T11:16:53Z",
        "updatedAt" : "2019-12-18T11:36:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e1c3dd3f-daee-4296-9ef1-b8c568b735f6",
        "parentId" : "88a777aa-6936-49ad-bf9e-9d95d264bef1",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Opened https://github.com/scalameta/metals/issues/1196",
        "createdAt" : "2019-12-17T08:53:58Z",
        "updatedAt" : "2019-12-18T11:36:11Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "04ef30f47759c2620cd886265e4c50169245a539",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,468 @@\n+package tests.debug\n+import tests.BaseDapSuite\n+import scala.meta.internal.metals.debug.DebugStep._\n+import scala.meta.internal.metals.debug.DebugFileLayout\n+import scala.meta.internal.metals.debug.StepNavigator\n+\n+object BreakpointDapSuite extends BaseDapSuite(\"debug-breakpoint\") {\n+\n+  // disabled, because finding enclosing class for the breakpoint line is not working\n+  // see [[scala.meta.internal.metals.debug.SetBreakpointsRequestHandler]]\n+  assertFileBreakpoints(\"preceding-class\", disabled = true)(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Main {\n+                |  class Preceding\n+                |\n+                |  def main(args: Array[String]): Unit = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"succeeding-class\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Main {\n+                |  // this line must remain empty\n+                |  def main(args: Array[String]): Unit = {\n+                |>>  println()\n+                |  }\n+                |  class Succeeding\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"object\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Bar {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    Bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"object-apply\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Bar {\n+                |  def apply(): Boolean = {\n+                |>>  true\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    Bar()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"object-unapply\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Bar {\n+                |  def unapply(any: Any) :Boolean = {\n+                |>>  true\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    this match {\n+                |      case Bar() =>\n+                |    }\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"trait\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |trait Bar {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    val bar = new Bar {}\n+                |    bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"class\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |class Bar {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    val bar = new Bar\n+                |    bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"case-class\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |case class Bar() {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    val bar = new Bar\n+                |    bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"case-class-unapply\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |case class Bar() {\n+                |  def unapply(arg: Any): Option[Int] = {\n+                |>>    Some(1)\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    val bar = Bar()\n+                |    this match {\n+                |      case bar(1) => println()\n+                |      case _ =>\n+                |    }\n+                |  }\n+                |}\n+\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"companion\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |case class Bar()\n+                |\n+                |object Bar {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    Bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"companion-apply\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |case class Bar()\n+                |\n+                |object Bar {\n+                |  def apply() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    Bar()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"for-comprehension\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    for {\n+                |>>    x <- List()\n+                |    } println(x)\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  // TODO investigate what happens\n+  assertFileBreakpoints(\"for-each-comprehension\", disabled = true)(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    for {\n+                |    x <- List()\n+                |  } {\n+                |>>    println(x)\n+                |    }\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  // TODO investigate what happens\n+  assertFileBreakpoints(\"for-yield\", disabled = true)(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    for {\n+                |    x <- List()\n+                |    } yield {\n+                |>>    println(x)\n+                |    }\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"nested object\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |trait Foo {\n+                |  object Bar {\n+                |    def call() = {\n+                |>>    println()\n+                |    }\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    val foo = new Foo {}\n+                |    foo.Bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"nested class\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |trait Foo {\n+                |  class Bar {\n+                |    def call() = {\n+                |>>    println()\n+                |    }\n+                |  }\n+                |}\n+                |\n+                |object Main extends Foo {\n+                |    def main(args: Array[String]): Unit = {\n+                |      val bar = new Bar\n+                |      bar.call()\n+                |    }\n+                |  }\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"nested trait\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |trait Foo {\n+                |  trait Bar {\n+                |    def call() = {\n+                |>>    println()\n+                |    }\n+                |  }\n+                |}\n+                |\n+                |object Main extends Foo {\n+                |    def main(args: Array[String]): Unit = {\n+                |      val bar = new Bar {}\n+                |      bar.call()\n+                |    }\n+                |  }\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertProjectBreakpoints(\"package-object\")(\n+    sources = List(\n+      \"\"\"|a/src/main/scala/a/package.scala\n+         |package object a {\n+         |  def call() = {\n+         |>>  println()\n+         |  }\n+         |}\n+         |\"\"\".stripMargin,\n+      \"\"\"|a/src/main/scala/a/Main.scala\n+         |package a\n+         |object Main {\n+         |    def main(args: Array[String]): Unit = {\n+         |      call()\n+         |    }\n+         |}\n+         |\"\"\".stripMargin\n+    )\n+  )\n+\n+  assertProjectBreakpoints(\"not-matching-filename\")(\n+    sources = List(\n+      \"\"\"|a/src/main/scala/a/not-matching.scala\n+         |package a\n+         |\n+         |object Foo {\n+         |  def call() = {\n+         |>>  println()\n+         |  }\n+         |}\n+         |\"\"\".stripMargin,\n+      \"\"\"|a/src/main/scala/a/Main.scala\n+         |package a\n+         |object Main {\n+         |    def main(args: Array[String]): Unit = {\n+         |      a.Foo.call()\n+         |    }\n+         |}\n+         |\"\"\".stripMargin\n+    )\n+  )\n+\n+  assertProjectBreakpoints(\"not-matching-package\")(\n+    sources = List(\n+      \"\"\"|a/src/main/scala/Foo.scala\n+         |package not.matching\n+         |\n+         |object Foo {\n+         |  def call() = {\n+         |>>  println()\n+         |  }\n+         |}\n+         |\"\"\".stripMargin,\n+      \"\"\"|a/src/main/scala/a/Main.scala\n+         |package a\n+         |object Main {\n+         |    def main(args: Array[String]): Unit = {\n+         |      not.matching.Foo.call()\n+         |    }\n+         |}\n+         |\"\"\".stripMargin\n+    )\n+  )\n+\n+  // TODO OnDemandSymbolIndex doesn't distinguish between build targets"
  },
  {
    "id" : "defc9f19-47ec-4053-a8be-d6f3f2d5e888",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "e1f2337d-cb31-472e-a42d-0792ea44c5b3",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "😍 ",
        "createdAt" : "2019-12-16T11:17:09Z",
        "updatedAt" : "2019-12-18T11:36:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c8ba6775-f142-40a9-99a2-9b3a0d120999",
        "parentId" : "e1f2337d-cb31-472e-a42d-0792ea44c5b3",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "So much blood, sweat and tears to deliver this functionality 💪 ",
        "createdAt" : "2019-12-16T11:17:26Z",
        "updatedAt" : "2019-12-18T11:36:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "04ef30f47759c2620cd886265e4c50169245a539",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,468 @@\n+package tests.debug\n+import tests.BaseDapSuite\n+import scala.meta.internal.metals.debug.DebugStep._\n+import scala.meta.internal.metals.debug.DebugFileLayout\n+import scala.meta.internal.metals.debug.StepNavigator\n+\n+object BreakpointDapSuite extends BaseDapSuite(\"debug-breakpoint\") {\n+\n+  // disabled, because finding enclosing class for the breakpoint line is not working\n+  // see [[scala.meta.internal.metals.debug.SetBreakpointsRequestHandler]]\n+  assertFileBreakpoints(\"preceding-class\", disabled = true)(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Main {\n+                |  class Preceding\n+                |\n+                |  def main(args: Array[String]): Unit = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"succeeding-class\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Main {\n+                |  // this line must remain empty\n+                |  def main(args: Array[String]): Unit = {\n+                |>>  println()\n+                |  }\n+                |  class Succeeding\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"object\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Bar {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    Bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"object-apply\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Bar {\n+                |  def apply(): Boolean = {\n+                |>>  true\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    Bar()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"object-unapply\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Bar {\n+                |  def unapply(any: Any) :Boolean = {\n+                |>>  true\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    this match {\n+                |      case Bar() =>\n+                |    }\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"trait\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |trait Bar {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    val bar = new Bar {}\n+                |    bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"class\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |class Bar {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    val bar = new Bar\n+                |    bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"case-class\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |case class Bar() {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    val bar = new Bar\n+                |    bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"case-class-unapply\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |case class Bar() {\n+                |  def unapply(arg: Any): Option[Int] = {\n+                |>>    Some(1)\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    val bar = Bar()\n+                |    this match {\n+                |      case bar(1) => println()\n+                |      case _ =>\n+                |    }\n+                |  }\n+                |}\n+\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"companion\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |case class Bar()\n+                |\n+                |object Bar {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    Bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"companion-apply\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |case class Bar()\n+                |\n+                |object Bar {\n+                |  def apply() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    Bar()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"for-comprehension\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    for {\n+                |>>    x <- List()\n+                |    } println(x)\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  // TODO investigate what happens\n+  assertFileBreakpoints(\"for-each-comprehension\", disabled = true)(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    for {\n+                |    x <- List()\n+                |  } {\n+                |>>    println(x)\n+                |    }\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  // TODO investigate what happens\n+  assertFileBreakpoints(\"for-yield\", disabled = true)(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    for {\n+                |    x <- List()\n+                |    } yield {\n+                |>>    println(x)\n+                |    }\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"nested object\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |trait Foo {\n+                |  object Bar {\n+                |    def call() = {\n+                |>>    println()\n+                |    }\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    val foo = new Foo {}\n+                |    foo.Bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"nested class\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |trait Foo {\n+                |  class Bar {\n+                |    def call() = {\n+                |>>    println()\n+                |    }\n+                |  }\n+                |}\n+                |\n+                |object Main extends Foo {\n+                |    def main(args: Array[String]): Unit = {\n+                |      val bar = new Bar\n+                |      bar.call()\n+                |    }\n+                |  }\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"nested trait\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |trait Foo {\n+                |  trait Bar {\n+                |    def call() = {\n+                |>>    println()\n+                |    }\n+                |  }\n+                |}\n+                |\n+                |object Main extends Foo {\n+                |    def main(args: Array[String]): Unit = {\n+                |      val bar = new Bar {}\n+                |      bar.call()\n+                |    }\n+                |  }\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertProjectBreakpoints(\"package-object\")(\n+    sources = List(\n+      \"\"\"|a/src/main/scala/a/package.scala\n+         |package object a {\n+         |  def call() = {\n+         |>>  println()\n+         |  }\n+         |}\n+         |\"\"\".stripMargin,\n+      \"\"\"|a/src/main/scala/a/Main.scala\n+         |package a\n+         |object Main {\n+         |    def main(args: Array[String]): Unit = {\n+         |      call()\n+         |    }\n+         |}\n+         |\"\"\".stripMargin\n+    )\n+  )\n+\n+  assertProjectBreakpoints(\"not-matching-filename\")("
  },
  {
    "id" : "67eebf05-4f5c-4dc8-92c7-4abf9d5161ad",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "42106bda-5822-48c1-851a-3340e9592818",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Let's open a followup ticket or remove the TODO comment.",
        "createdAt" : "2019-12-16T11:18:11Z",
        "updatedAt" : "2019-12-18T11:36:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "699ca656-1ad4-409c-8d7c-b6d28237b309",
        "parentId" : "42106bda-5822-48c1-851a-3340e9592818",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Fixed, it turns out one needs a non-empty list to iterate over (and there was `for (i <- List())`)",
        "createdAt" : "2019-12-17T09:03:11Z",
        "updatedAt" : "2019-12-18T11:36:11Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5de18455-eb22-473b-87ee-56ee43b5314d",
        "parentId" : "42106bda-5822-48c1-851a-3340e9592818",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Awesome!",
        "createdAt" : "2019-12-18T10:23:56Z",
        "updatedAt" : "2019-12-18T11:36:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "04ef30f47759c2620cd886265e4c50169245a539",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,468 @@\n+package tests.debug\n+import tests.BaseDapSuite\n+import scala.meta.internal.metals.debug.DebugStep._\n+import scala.meta.internal.metals.debug.DebugFileLayout\n+import scala.meta.internal.metals.debug.StepNavigator\n+\n+object BreakpointDapSuite extends BaseDapSuite(\"debug-breakpoint\") {\n+\n+  // disabled, because finding enclosing class for the breakpoint line is not working\n+  // see [[scala.meta.internal.metals.debug.SetBreakpointsRequestHandler]]\n+  assertFileBreakpoints(\"preceding-class\", disabled = true)(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Main {\n+                |  class Preceding\n+                |\n+                |  def main(args: Array[String]): Unit = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"succeeding-class\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Main {\n+                |  // this line must remain empty\n+                |  def main(args: Array[String]): Unit = {\n+                |>>  println()\n+                |  }\n+                |  class Succeeding\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"object\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Bar {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    Bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"object-apply\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Bar {\n+                |  def apply(): Boolean = {\n+                |>>  true\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    Bar()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"object-unapply\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Bar {\n+                |  def unapply(any: Any) :Boolean = {\n+                |>>  true\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    this match {\n+                |      case Bar() =>\n+                |    }\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"trait\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |trait Bar {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    val bar = new Bar {}\n+                |    bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"class\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |class Bar {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    val bar = new Bar\n+                |    bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"case-class\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |case class Bar() {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    val bar = new Bar\n+                |    bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"case-class-unapply\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |case class Bar() {\n+                |  def unapply(arg: Any): Option[Int] = {\n+                |>>    Some(1)\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    val bar = Bar()\n+                |    this match {\n+                |      case bar(1) => println()\n+                |      case _ =>\n+                |    }\n+                |  }\n+                |}\n+\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"companion\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |case class Bar()\n+                |\n+                |object Bar {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    Bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"companion-apply\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |case class Bar()\n+                |\n+                |object Bar {\n+                |  def apply() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    Bar()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"for-comprehension\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    for {\n+                |>>    x <- List()\n+                |    } println(x)\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  // TODO investigate what happens\n+  assertFileBreakpoints(\"for-each-comprehension\", disabled = true)(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    for {\n+                |    x <- List()\n+                |  } {\n+                |>>    println(x)\n+                |    }\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  // TODO investigate what happens"
  },
  {
    "id" : "4033eb06-3153-4ad5-974b-d59f557ac060",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "2d08c8da-e4ce-46c5-b07d-4789696da812",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Let's open followup ticket",
        "createdAt" : "2019-12-16T11:18:30Z",
        "updatedAt" : "2019-12-18T11:36:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b40a8ac0-deba-48a1-8931-dd6221efbfd2",
        "parentId" : "2d08c8da-e4ce-46c5-b07d-4789696da812",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Did we open a followup ticket?",
        "createdAt" : "2019-12-18T10:23:49Z",
        "updatedAt" : "2019-12-18T11:36:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "118b2635-7ba5-4d1f-8eab-05bf67a97406",
        "parentId" : "2d08c8da-e4ce-46c5-b07d-4789696da812",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Nope, I was iterating over a `List()` which is empty, hence the breakpoint was not effective",
        "createdAt" : "2019-12-18T11:32:24Z",
        "updatedAt" : "2019-12-18T11:36:11Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "04ef30f47759c2620cd886265e4c50169245a539",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,468 @@\n+package tests.debug\n+import tests.BaseDapSuite\n+import scala.meta.internal.metals.debug.DebugStep._\n+import scala.meta.internal.metals.debug.DebugFileLayout\n+import scala.meta.internal.metals.debug.StepNavigator\n+\n+object BreakpointDapSuite extends BaseDapSuite(\"debug-breakpoint\") {\n+\n+  // disabled, because finding enclosing class for the breakpoint line is not working\n+  // see [[scala.meta.internal.metals.debug.SetBreakpointsRequestHandler]]\n+  assertFileBreakpoints(\"preceding-class\", disabled = true)(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Main {\n+                |  class Preceding\n+                |\n+                |  def main(args: Array[String]): Unit = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"succeeding-class\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Main {\n+                |  // this line must remain empty\n+                |  def main(args: Array[String]): Unit = {\n+                |>>  println()\n+                |  }\n+                |  class Succeeding\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"object\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Bar {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    Bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"object-apply\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Bar {\n+                |  def apply(): Boolean = {\n+                |>>  true\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    Bar()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"object-unapply\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Bar {\n+                |  def unapply(any: Any) :Boolean = {\n+                |>>  true\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    this match {\n+                |      case Bar() =>\n+                |    }\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"trait\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |trait Bar {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    val bar = new Bar {}\n+                |    bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"class\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |class Bar {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    val bar = new Bar\n+                |    bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"case-class\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |case class Bar() {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    val bar = new Bar\n+                |    bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"case-class-unapply\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |case class Bar() {\n+                |  def unapply(arg: Any): Option[Int] = {\n+                |>>    Some(1)\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    val bar = Bar()\n+                |    this match {\n+                |      case bar(1) => println()\n+                |      case _ =>\n+                |    }\n+                |  }\n+                |}\n+\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"companion\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |case class Bar()\n+                |\n+                |object Bar {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    Bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"companion-apply\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |case class Bar()\n+                |\n+                |object Bar {\n+                |  def apply() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    Bar()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"for-comprehension\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    for {\n+                |>>    x <- List()\n+                |    } println(x)\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  // TODO investigate what happens"
  },
  {
    "id" : "7a3acabc-3029-4cbb-b75d-b9cd96a39a75",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "c0a8ce58-bcc9-4deb-9881-0407962c3a44",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Can we reuse FileLayout here?",
        "createdAt" : "2019-12-16T13:30:28Z",
        "updatedAt" : "2019-12-18T11:36:11Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9afc57d1-287c-4de5-b493-518a89f742bc",
        "parentId" : "c0a8ce58-bcc9-4deb-9881-0407962c3a44",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Can you elaborate?",
        "createdAt" : "2019-12-18T10:24:18Z",
        "updatedAt" : "2019-12-18T11:36:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "04ef30f47759c2620cd886265e4c50169245a539",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,468 @@\n+package tests.debug\n+import tests.BaseDapSuite\n+import scala.meta.internal.metals.debug.DebugStep._\n+import scala.meta.internal.metals.debug.DebugFileLayout\n+import scala.meta.internal.metals.debug.StepNavigator\n+\n+object BreakpointDapSuite extends BaseDapSuite(\"debug-breakpoint\") {\n+\n+  // disabled, because finding enclosing class for the breakpoint line is not working\n+  // see [[scala.meta.internal.metals.debug.SetBreakpointsRequestHandler]]\n+  assertFileBreakpoints(\"preceding-class\", disabled = true)(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Main {\n+                |  class Preceding\n+                |\n+                |  def main(args: Array[String]): Unit = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"succeeding-class\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Main {\n+                |  // this line must remain empty\n+                |  def main(args: Array[String]): Unit = {\n+                |>>  println()\n+                |  }\n+                |  class Succeeding\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"object\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Bar {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    Bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"object-apply\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Bar {\n+                |  def apply(): Boolean = {\n+                |>>  true\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    Bar()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"object-unapply\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Bar {\n+                |  def unapply(any: Any) :Boolean = {\n+                |>>  true\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    this match {\n+                |      case Bar() =>\n+                |    }\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"trait\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |trait Bar {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    val bar = new Bar {}\n+                |    bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"class\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |class Bar {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    val bar = new Bar\n+                |    bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"case-class\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |case class Bar() {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    val bar = new Bar\n+                |    bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"case-class-unapply\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |case class Bar() {\n+                |  def unapply(arg: Any): Option[Int] = {\n+                |>>    Some(1)\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    val bar = Bar()\n+                |    this match {\n+                |      case bar(1) => println()\n+                |      case _ =>\n+                |    }\n+                |  }\n+                |}\n+\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"companion\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |case class Bar()\n+                |\n+                |object Bar {\n+                |  def call() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    Bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"companion-apply\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |case class Bar()\n+                |\n+                |object Bar {\n+                |  def apply() = {\n+                |>>  println()\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    Bar()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"for-comprehension\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    for {\n+                |>>    x <- List()\n+                |    } println(x)\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  // TODO investigate what happens\n+  assertFileBreakpoints(\"for-each-comprehension\", disabled = true)(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    for {\n+                |    x <- List()\n+                |  } {\n+                |>>    println(x)\n+                |    }\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  // TODO investigate what happens\n+  assertFileBreakpoints(\"for-yield\", disabled = true)(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    for {\n+                |    x <- List()\n+                |    } yield {\n+                |>>    println(x)\n+                |    }\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"nested object\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |trait Foo {\n+                |  object Bar {\n+                |    def call() = {\n+                |>>    println()\n+                |    }\n+                |  }\n+                |}\n+                |\n+                |object Main {\n+                |  def main(args: Array[String]): Unit = {\n+                |    val foo = new Foo {}\n+                |    foo.Bar.call()\n+                |  }\n+                |}\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"nested class\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |trait Foo {\n+                |  class Bar {\n+                |    def call() = {\n+                |>>    println()\n+                |    }\n+                |  }\n+                |}\n+                |\n+                |object Main extends Foo {\n+                |    def main(args: Array[String]): Unit = {\n+                |      val bar = new Bar\n+                |      bar.call()\n+                |    }\n+                |  }\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertFileBreakpoints(\"nested trait\")(\n+    source = \"\"\"|a/src/main/scala/a/Main.scala\n+                |package a\n+                |\n+                |trait Foo {\n+                |  trait Bar {\n+                |    def call() = {\n+                |>>    println()\n+                |    }\n+                |  }\n+                |}\n+                |\n+                |object Main extends Foo {\n+                |    def main(args: Array[String]): Unit = {\n+                |      val bar = new Bar {}\n+                |      bar.call()\n+                |    }\n+                |  }\n+                |\"\"\".stripMargin\n+  )\n+\n+  assertProjectBreakpoints(\"package-object\")(\n+    sources = List(\n+      \"\"\"|a/src/main/scala/a/package.scala\n+         |package object a {\n+         |  def call() = {\n+         |>>  println()\n+         |  }\n+         |}\n+         |\"\"\".stripMargin,\n+      \"\"\"|a/src/main/scala/a/Main.scala\n+         |package a\n+         |object Main {\n+         |    def main(args: Array[String]): Unit = {\n+         |      call()\n+         |    }\n+         |}\n+         |\"\"\".stripMargin\n+    )\n+  )\n+\n+  assertProjectBreakpoints(\"not-matching-filename\")(\n+    sources = List(\n+      \"\"\"|a/src/main/scala/a/not-matching.scala\n+         |package a\n+         |\n+         |object Foo {\n+         |  def call() = {\n+         |>>  println()\n+         |  }\n+         |}\n+         |\"\"\".stripMargin,\n+      \"\"\"|a/src/main/scala/a/Main.scala\n+         |package a\n+         |object Main {\n+         |    def main(args: Array[String]): Unit = {\n+         |      a.Foo.call()\n+         |    }\n+         |}\n+         |\"\"\".stripMargin\n+    )\n+  )\n+\n+  assertProjectBreakpoints(\"not-matching-package\")(\n+    sources = List(\n+      \"\"\"|a/src/main/scala/Foo.scala\n+         |package not.matching\n+         |\n+         |object Foo {\n+         |  def call() = {\n+         |>>  println()\n+         |  }\n+         |}\n+         |\"\"\".stripMargin,\n+      \"\"\"|a/src/main/scala/a/Main.scala\n+         |package a\n+         |object Main {\n+         |    def main(args: Array[String]): Unit = {\n+         |      not.matching.Foo.call()\n+         |    }\n+         |}\n+         |\"\"\".stripMargin\n+    )\n+  )\n+\n+  // TODO OnDemandSymbolIndex doesn't distinguish between build targets\n+  assertProjectBreakpoints(\"ambiguous\", disabled = true)(\n+    sources = List(\n+      \"\"\"|a/src/main/scala/Target.scala\n+         |package foo\n+         |\n+         |object Target {\n+         |  def call() = {\n+         |>>  println(\"Correct Target\")\n+         |  }\n+         |}\n+         |\"\"\".stripMargin,\n+      \"\"\"|b/src/main/scala/Target.scala\n+         |package foo\n+         |\n+         |object Target {\n+         |  def call() = {\n+         |    println(\"Incorrect Target\")\n+         |  }\n+         |}\n+         |\"\"\".stripMargin,\n+      \"\"\"|a/src/main/scala/a/Main.scala\n+         |package a\n+         |object Main {\n+         |    def main(args: Array[String]): Unit = {\n+         |      foo.Target.call()\n+         |    }\n+         |}\n+         |\"\"\".stripMargin\n+    )\n+  )\n+\n+  def assertFileBreakpoints(name: String, disabled: Boolean = false)(\n+      source: String\n+  ): Unit = {\n+    assertProjectBreakpoints(name, disabled)(List(source))\n+  }\n+\n+  def assertProjectBreakpoints(name: String, disabled: Boolean = false)(\n+      sources: List[String]\n+  ): Unit = {\n+    if (disabled) return\n+\n+    testAsync(name) {\n+      cleanWorkspace()\n+      val fileLayouts = sources.map(DebugFileLayout.apply)\n+\n+      val layout =\n+        s\"\"\"|/metals.json\n+            |{ \"a\": {}, \"b\": {} }\n+            |\n+            |${fileLayouts.map(_.layout).mkString(\"\\n\")}"
  }
]