[
  {
    "id" : "0ae5facf-af6c-4a9e-aaa1-ff43557fea6e",
    "prId" : 1546,
    "comments" : [
      {
        "id" : "e786314b-35dd-4474-8dec-3f4acc73a051",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "/cc @olafurpg dogfooding the new scalacheck module ðŸ‘‡ ",
        "createdAt" : "2020-03-26T09:41:52Z",
        "updatedAt" : "2020-03-27T07:54:00Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e98971aa-e99c-4312-a398-acaec2d5aa8c",
        "parentId" : "e786314b-35dd-4474-8dec-3f4acc73a051",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Do we really need Scalacheck here though? It's supposed to be used over a set of possible values and here it is just normal testing. I have never found a usage for property based testing and maybe it would be better to keep the tests consistent?  \r\n\r\n",
        "createdAt" : "2020-03-26T11:55:17Z",
        "updatedAt" : "2020-03-27T07:54:00Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "460e5060-208d-4b6c-a419-b4ef59885fd1",
        "parentId" : "e786314b-35dd-4474-8dec-3f4acc73a051",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "> It's supposed to be used over a set of possible values and here it is just normal testing\r\n\r\nI'm using Scalacheck to test \"all\" possible positions of the cursor inside a (fixed) document.\r\n\r\n\r\n> Do we really need Scalacheck here though?\r\n\r\nIt's not strictly necessary, but it just gives me a little more confidence that the computation is not right by chance but it holds for \"all\" possible cursor positions.\r\n\r\nThat said, if you prefer we can remove it.",
        "createdAt" : "2020-03-27T07:55:51Z",
        "updatedAt" : "2020-03-27T07:55:51Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "502e4935-94b1-43db-a630-b442f0e9f835",
        "parentId" : "e786314b-35dd-4474-8dec-3f4acc73a051",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "> I'm using Scalacheck to test \"all\" possible positions of the cursor inside a (fixed) document.\r\n\r\nI am totally blind and have not seen it. It's a perfectly valid scenario to use it in. :+1: \r\n",
        "createdAt" : "2020-03-27T08:58:08Z",
        "updatedAt" : "2020-03-27T08:58:09Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9509aaa1d7c1803f9c5304e9517a4c0370590f23",
    "line" : 7,
    "diffHunk" : "@@ -0,0 +1,33 @@\n+package tests\n+\n+import munit.ScalaCheckSuite\n+import scala.meta.internal.metals.NewFileTemplate\n+import org.scalacheck.Gen\n+import org.scalacheck.Prop.forAll\n+"
  },
  {
    "id" : "ece2e3e8-9b9b-4b8f-9fc1-0facc563b5a7",
    "prId" : 1546,
    "comments" : [
      {
        "id" : "b3ce3464-9cf2-44b6-adb8-761e39841f47",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Should we stick to short names as in other suites?",
        "createdAt" : "2020-03-26T11:43:16Z",
        "updatedAt" : "2020-03-27T07:54:00Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "de1ad743-7d0f-46bc-ba2b-27c8bd59b8bd",
        "parentId" : "b3ce3464-9cf2-44b6-adb8-761e39841f47",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Ah, absolutely, I completely forgot. Fixed",
        "createdAt" : "2020-03-27T07:54:03Z",
        "updatedAt" : "2020-03-27T07:54:03Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9509aaa1d7c1803f9c5304e9517a4c0370590f23",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,33 @@\n+package tests\n+\n+import munit.ScalaCheckSuite\n+import scala.meta.internal.metals.NewFileTemplate\n+import org.scalacheck.Gen\n+import org.scalacheck.Prop.forAll\n+\n+class NewFileTemplateSuite extends BaseSuite with ScalaCheckSuite {\n+\n+  test(\"it requires exactly one cursor marker\") {"
  },
  {
    "id" : "12945da1-53b5-45f3-9e47-5dcc7cb8e3f6",
    "prId" : 1546,
    "comments" : [
      {
        "id" : "ab41b302-51b2-43ad-93e0-26519a48c902",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "What is the difference between `forAll` here and `0.to(template.length).foreach { .. }`?",
        "createdAt" : "2020-03-27T11:22:16Z",
        "updatedAt" : "2020-03-27T11:22:16Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "35f551d3-4a32-4a51-bba5-3666888dfc89",
        "parentId" : "ab41b302-51b2-43ad-93e0-26519a48c902",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "ah, good point: in this case just the number of iterations (100 with ScalaCheck). I can revert to just using a range",
        "createdAt" : "2020-03-27T11:31:03Z",
        "updatedAt" : "2020-03-27T11:31:03Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "579f8042-eeed-4bf5-bcc8-25de175162ef",
        "parentId" : "ab41b302-51b2-43ad-93e0-26519a48c902",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I think `1.to(100)` would be clearer and more consistent with the rest of the tests. Property based testing is more helpful when you can't tests all possible inputs. ",
        "createdAt" : "2020-03-27T12:04:18Z",
        "updatedAt" : "2020-03-27T12:04:18Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9509aaa1d7c1803f9c5304e9517a4c0370590f23",
    "line" : 26,
    "diffHunk" : "@@ -0,0 +1,33 @@\n+package tests\n+\n+import munit.ScalaCheckSuite\n+import scala.meta.internal.metals.NewFileTemplate\n+import org.scalacheck.Gen\n+import org.scalacheck.Prop.forAll\n+\n+class NewFileTemplateSuite extends BaseSuite with ScalaCheckSuite {\n+\n+  test(\"cursor-marker-errors\") {\n+    intercept[IllegalArgumentException] {\n+      NewFileTemplate(\"no cursor markers\")\n+    }\n+    intercept[IllegalArgumentException] {\n+      NewFileTemplate(\"many cursor @@ markers @@\")\n+    }\n+  }\n+\n+  property(\"cursor-marker-position\") {\n+    val template =\n+      s\"\"\"|package a\n+          |\n+          |case class Foo()\n+          |\"\"\".stripMargin\n+    val cursorOffsetGen = Gen.chooseNum(0, template.length)\n+    forAll(cursorOffsetGen) { cursorOffset =>"
  }
]