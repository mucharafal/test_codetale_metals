[
  {
    "id" : "6d4bfbec-2e20-4345-a407-5ef33d99f3a9",
    "prId" : 942,
    "comments" : [
      {
        "id" : "9e3a8413-3a8c-476a-978c-36ee4b5fd3af",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Can we replace `mainFile` withe actual file, it would be a bit clearer and all code in one place.",
        "createdAt" : "2019-09-25T11:18:55Z",
        "updatedAt" : "2019-10-04T07:32:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "47ea581fbaa603a2dc171e3e913392f05fc4ba11",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,104 @@\n+package tests\n+import java.util.Collections.emptyList\n+import java.util.concurrent.TimeUnit.SECONDS\n+\n+import ch.epfl.scala.bsp4j.DebugSessionParamsDataKind\n+import ch.epfl.scala.bsp4j.ScalaMainClass\n+\n+import scala.meta.internal.metals.MetalsEnrichments._\n+\n+object DebugProtocolSuite extends BaseSlowSuite(\"debug-protocol\") {\n+  private val mainFile = \"a/src/main/scala/a/Main.scala\"\n+\n+  testAsync(\"start\") {\n+    for {\n+      _ <- server.initialize(\n+        s\"\"\"/metals.json\n+           |{\n+           |  \"a\": {}\n+           |}\n+           |/$mainFile"
  },
  {
    "id" : "c6804cd9-7fe9-46fc-9804-141603e1f778",
    "prId" : 1020,
    "comments" : [
      {
        "id" : "01b147bf-cf9a-4e5f-9a10-0f99386eedb6",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Debug is not working - ignored",
        "createdAt" : "2019-10-27T19:15:05Z",
        "updatedAt" : "2019-10-28T15:54:32Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "bf83d588297229d15d4ae4ac49c6d318dae867af",
    "line" : 7,
    "diffHunk" : "@@ -5,8 +5,23 @@ import java.util.concurrent.TimeUnit.SECONDS\n import ch.epfl.scala.bsp4j.ScalaMainClass\n import ch.epfl.scala.bsp4j.DebugSessionParamsDataKind\n import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.concurrent.duration.Duration\n+import scala.concurrent.Future\n \n object DebugProtocolSuite extends BaseLspSuite(\"debug-protocol\") {"
  },
  {
    "id" : "6e84b721-9d62-466a-9363-f10645f2b93d",
    "prId" : 1238,
    "comments" : [
      {
        "id" : "754eea5d-3776-4498-94bb-a85a3e6abf1e",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I think all of those test fail sometimes, but rather rare. I don't think we should remove them on Windows, since they are pretty neccessary for making sure debugging works on Windows.",
        "createdAt" : "2020-01-02T10:07:09Z",
        "updatedAt" : "2020-01-02T11:16:55Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "65f276544e50e1759832dd4001f6c1e607b428d8",
    "line" : null,
    "diffHunk" : "@@ -35,35 +35,39 @@ object DebugProtocolSuite extends BaseLspSuite(\"debug-protocol\") {\n     } yield assertNoDiff(output, \"Foo\")\n   }\n \n-  testAsync(\"disconnect\") {\n-    for {\n-      _ <- server.initialize(\n-        s\"\"\"/metals.json\n-           |{\n-           |  \"a\": {}\n-           |}\n-           |/a/src/main/scala/a/Main.scala\n-           |package a\n-           |object Main {\n-           |  def main(args: Array[String]) = { \n-           |    synchronized(wait())\n-           |  }\n-           |}\n-           |\"\"\".stripMargin\n-      )\n-      debugger <- server.startDebugging(\n-        \"a\",\n-        DebugSessionParamsDataKind.SCALA_MAIN_CLASS,\n-        new ScalaMainClass(\"a.Main\", emptyList(), emptyList())\n-      )\n-      _ <- debugger.initialize\n-      _ <- debugger.launch\n-      _ <- debugger.configurationDone\n-      _ <- debugger.disconnect\n-      _ <- debugger.shutdown\n-      output <- debugger.allOutput\n-    } yield assertNoDiff(output, \"\")\n-  }\n+  // TODO: renable when this test is no longer flaky on Windows\n+  // https://github.com/scalameta/metals/pull/1238/checks?check_run_id=370216834\n+  // [1.321s][warning][os,thread] Failed to start thread - _beginthreadex failed (EACCES) for attributes: stacksize: default, flags: CREATE_SUSPENDED STACK_SIZE_PARAM_IS.\n+  if (!isWindows)"
  },
  {
    "id" : "c0170e9f-e943-4430-9f92-617b56fd81db",
    "prId" : 1466,
    "comments" : [
      {
        "id" : "83753b10-c09b-4f27-852a-01f209761866",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Could you elaborate on the failure cause?",
        "createdAt" : "2020-03-18T09:33:32Z",
        "updatedAt" : "2020-04-03T11:50:57Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d72fc182a42fd127dd0593dfbb3028ac615338b9",
    "line" : null,
    "diffHunk" : "@@ -106,4 +110,66 @@ class DebugProtocolSuite extends BaseLspSuite(\"debug-protocol\") {\n       output <- debugger.allOutput\n     } yield assertNoDiff(output, \"Bar\\n\")\n   }\n+\n+  test(\"run-unresolved-params\") {\n+    for {\n+      _ <- server.initialize(\n+        s\"\"\"/metals.json\n+           |{\n+           |  \"a\": {}\n+           |}\n+           |/a/src/main/scala/a/Main.scala\n+           |package a\n+           |object Main {\n+           |  def main(args: Array[String]) = {\n+           |    print(args(0))\n+           |  }\n+           |}\n+           |\"\"\".stripMargin\n+      )\n+      _ = Thread.sleep(1000) //it fails otherwise\n+      debugger <- server.startDebuggingUnresolved(\n+        new DebugUnresolvedMainClassParams(\n+          \"a.Main\",\n+          \"a\",\n+          singletonList(\"Foo\")\n+        ).toJson\n+      )\n+      _ <- debugger.initialize\n+      _ <- debugger.launch\n+      _ <- debugger.configurationDone\n+      _ <- debugger.shutdown\n+      output <- debugger.allOutput\n+    } yield assertNoDiff(output, \"Foo\")\n+  }\n+\n+  test(\"test-unresolved-params\") {\n+    for {\n+      _ <- server.initialize(\n+        s\"\"\"/metals.json\n+           |{\n+           |  \"a\": {\n+           |    \"libraryDependencies\":[\"org.scalatest::scalatest:3.0.5\"]\n+           |  }\n+           |}\n+           |/a/src/main/scala/a/Foo.scala\n+           |package a\n+           |class Foo extends org.scalatest.FunSuite {\n+           |  test(\"foo\") {}\n+           |}\n+           |\"\"\".stripMargin\n+      )\n+      _ = Thread.sleep(1000) //it fails otherwise"
  },
  {
    "id" : "4b59826d-c71f-4e17-a6c6-c5a5385936dd",
    "prId" : 1466,
    "comments" : [
      {
        "id" : "9e34c6ce-6158-481c-b5a9-c07606f00a43",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Could you elaborate on the failure cause?\r\n\r\n",
        "createdAt" : "2020-03-18T09:33:49Z",
        "updatedAt" : "2020-04-03T11:50:57Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ecc02460-5822-4a87-9b9d-9c2a6f765599",
        "parentId" : "9e34c6ce-6158-481c-b5a9-c07606f00a43",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Also, this is a place where possible flakiness may come from due to some underlying race conditions.",
        "createdAt" : "2020-03-18T09:34:40Z",
        "updatedAt" : "2020-04-03T11:50:57Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d72fc182a42fd127dd0593dfbb3028ac615338b9",
    "line" : null,
    "diffHunk" : "@@ -106,4 +110,66 @@ class DebugProtocolSuite extends BaseLspSuite(\"debug-protocol\") {\n       output <- debugger.allOutput\n     } yield assertNoDiff(output, \"Bar\\n\")\n   }\n+\n+  test(\"run-unresolved-params\") {\n+    for {\n+      _ <- server.initialize(\n+        s\"\"\"/metals.json\n+           |{\n+           |  \"a\": {}\n+           |}\n+           |/a/src/main/scala/a/Main.scala\n+           |package a\n+           |object Main {\n+           |  def main(args: Array[String]) = {\n+           |    print(args(0))\n+           |  }\n+           |}\n+           |\"\"\".stripMargin\n+      )\n+      _ = Thread.sleep(1000) //it fails otherwise"
  },
  {
    "id" : "248655e0-70c7-489e-9d58-dd9a2a82daac",
    "prId" : 1466,
    "comments" : [
      {
        "id" : "00fdd763-f59d-4a80-8518-0d5a5b0fdb9d",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "could be extracted to `server.awaitIndexingDone()` or something like that - it would be then obvious more discoverable for others in case they ever needed this.",
        "createdAt" : "2020-03-24T07:06:09Z",
        "updatedAt" : "2020-04-03T11:50:57Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d72fc182a42fd127dd0593dfbb3028ac615338b9",
    "line" : null,
    "diffHunk" : "@@ -106,4 +110,66 @@ class DebugProtocolSuite extends BaseLspSuite(\"debug-protocol\") {\n       output <- debugger.allOutput\n     } yield assertNoDiff(output, \"Bar\\n\")\n   }\n+\n+  test(\"run-unresolved-params\") {\n+    for {\n+      _ <- server.initialize(\n+        s\"\"\"/metals.json\n+           |{\n+           |  \"a\": {}\n+           |}\n+           |/a/src/main/scala/a/Main.scala\n+           |package a\n+           |object Main {\n+           |  def main(args: Array[String]) = {\n+           |    print(args(0))\n+           |  }\n+           |}\n+           |\"\"\".stripMargin\n+      )\n+      _ <- server.server.indexingPromise.future"
  },
  {
    "id" : "5c4376b9-1130-4135-8b74-e9892c7e67eb",
    "prId" : 1625,
    "comments" : [
      {
        "id" : "9a113fb5-141f-43fb-82a6-e3dd6636a20a",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Status bar is actually updated concurrently, which is causing spurious errors in CI",
        "createdAt" : "2020-05-08T18:11:04Z",
        "updatedAt" : "2020-05-11T14:17:44Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b7c6f9fa61606c4021d0457804114d0f344e41a8",
    "line" : 97,
    "diffHunk" : "@@ -302,11 +308,11 @@ class DebugProtocolSuite extends BaseLspSuite(\"debug-protocol\") {\n         )\n         .recover {\n           case WorkspaceErrorsException =>\n-            server.statusBarHistory\n+            WorkspaceErrorsException"
  },
  {
    "id" : "104e262b-4b3c-416a-a513-d7ada011c9f5",
    "prId" : 1625,
    "comments" : [
      {
        "id" : "725ba730-131f-4ec3-9b31-4610ffe1a8dd",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "We could add an automatic test during`server.startDebugging` checking if the main class contains the `System.exit(0)` string - it would be relatively fast and straight-forward smoke test preventing recurrence of this issue.",
        "createdAt" : "2020-05-11T09:31:59Z",
        "updatedAt" : "2020-05-11T14:17:44Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9ff0c48c-4ebf-419b-ba43-373d624fdd93",
        "parentId" : "725ba730-131f-4ec3-9b31-4610ffe1a8dd",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Added and it actually detected one bad test.",
        "createdAt" : "2020-05-11T14:19:50Z",
        "updatedAt" : "2020-05-11T14:19:51Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b7c6f9fa61606c4021d0457804114d0f344e41a8",
    "line" : 8,
    "diffHunk" : "@@ -8,9 +8,10 @@ import scala.meta.internal.metals.DebugUnresolvedMainClassParams\n import scala.meta.internal.metals.DebugUnresolvedTestClassParams\n import scala.meta.internal.metals.JsonParser._\n import scala.meta.internal.metals.debug.WorkspaceErrorsException\n-import scala.meta.internal.metals.Messages\n \n-class DebugProtocolSuite extends BaseLspSuite(\"debug-protocol\") {\n+// note(@tgodzik) all test have `System.exit(0)` added to avoid occasional issue due to:\n+// https://stackoverflow.com/questions/2225737/error-jdwp-unable-to-get-jni-1-2-environment"
  },
  {
    "id" : "24e1fb74-6ae9-4751-9578-03315d397bcc",
    "prId" : 1658,
    "comments" : [
      {
        "id" : "71e5df13-bda6-4f3a-b505-4d795a05e62c",
        "parentId" : null,
        "author" : {
          "login" : "mlachkar",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/7843237?u=d2941da73011b9a49767ac863ce5bc20b7b10ed7&v=4"
        },
        "body" : "not necessary to add \"case other\" (since recover takes partial functions)",
        "createdAt" : "2020-04-27T14:38:51Z",
        "updatedAt" : "2020-04-27T16:10:09Z",
        "lastEditedBy" : {
          "login" : "mlachkar",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/7843237?u=d2941da73011b9a49767ac863ce5bc20b7b10ed7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3b2eedd1-d730-49e3-aba8-f598af95f5ec",
        "parentId" : "71e5df13-bda6-4f3a-b505-4d795a05e62c",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed!",
        "createdAt" : "2020-04-27T15:21:25Z",
        "updatedAt" : "2020-04-27T16:10:09Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a85757ad79d2c98e7698e8eb798381fc1936ad30",
    "line" : null,
    "diffHunk" : "@@ -174,4 +268,49 @@ class DebugProtocolSuite extends BaseLspSuite(\"debug-protocol\") {\n       output <- debugger.allOutput\n     } yield assert(output.contains(\"All tests in a.Foo passed\"))\n   }\n+\n+  test(\"abort-test-broken-workspace\") {\n+    cleanCompileCache(\"a\")\n+    cleanWorkspace()\n+    for {\n+      _ <- server.initialize(\n+        s\"\"\"/metals.json\n+           |{\n+           |  \"a\": {\n+           |    \"libraryDependencies\":[\"org.scalatest::scalatest:3.0.5\"]\n+           |  }\n+           |}\n+           |/a/src/main/scala/a/Foo.scala\n+           |package a\n+           |class Foo extends org.scalatest.FunSuite {\n+           |  test(\"foo\") {}\n+           |}\n+           |\"\"\".stripMargin\n+      )\n+      _ <- server.didOpen(\"a/src/main/scala/a/Foo.scala\")\n+      _ <- server.didSave(\"a/src/main/scala/a/Foo.scala\") { _ =>\n+        \"\"\"|package a\n+           |class Foo extends org.scalatest.FunSuite {\n+           |  test(\"foo\") {\n+           |    val a : Int = \"\"\n+           |  }\n+           |}\"\"\".stripMargin\n+      }\n+      result <- server\n+        .startDebuggingUnresolved(\n+          new DebugUnresolvedTestClassParams(\n+            \"a.Foo\"\n+          ).toJson\n+        )\n+        .recover {\n+          case WorkspaceErrorsException =>\n+            server.statusBarHistory\n+          case other =>"
  },
  {
    "id" : "d3c1d933-1093-417f-b80e-c15aeb098c5b",
    "prId" : 1658,
    "comments" : [
      {
        "id" : "7e493ad6-5c40-4e45-98f7-f5d1bccc757f",
        "parentId" : null,
        "author" : {
          "login" : "mlachkar",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/7843237?u=d2941da73011b9a49767ac863ce5bc20b7b10ed7&v=4"
        },
        "body" : "same here",
        "createdAt" : "2020-04-27T14:40:16Z",
        "updatedAt" : "2020-04-27T16:10:09Z",
        "lastEditedBy" : {
          "login" : "mlachkar",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/7843237?u=d2941da73011b9a49767ac863ce5bc20b7b10ed7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3022ed68-0148-4de9-9866-87bdbf69083a",
        "parentId" : "7e493ad6-5c40-4e45-98f7-f5d1bccc757f",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed!",
        "createdAt" : "2020-04-27T15:21:32Z",
        "updatedAt" : "2020-04-27T16:10:09Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a85757ad79d2c98e7698e8eb798381fc1936ad30",
    "line" : null,
    "diffHunk" : "@@ -144,6 +146,98 @@ class DebugProtocolSuite extends BaseLspSuite(\"debug-protocol\") {\n     } yield assertNoDiff(output, \"Foo\")\n   }\n \n+  test(\"run-unrelated-error\") {\n+    cleanCompileCache(\"a\")\n+    cleanWorkspace()\n+    for {\n+      _ <- server.initialize(\n+        s\"\"\"/metals.json\n+           |{\n+           |  \"a\": {},\n+           |  \"c\": {\"dependsOn\": [\"a\"]}\n+           |}\n+           |/a/src/main/scala/a/Main.scala\n+           |package a\n+           |object Main {\n+           |  def main(args: Array[String]) = {\n+           |    print(args(0))\n+           |  }\n+           |}\n+           |/c/src/main/scala/c/Other.scala\n+           |package c\n+           |object Other {\n+           |  val a : Int = \"\"\n+           |}\n+           |\"\"\".stripMargin\n+      )\n+      _ <- server.didOpen(\"a/src/main/scala/a/Main.scala\")\n+      _ <- server.didOpen(\"c/src/main/scala/c/Other.scala\")\n+      debugger <- server.startDebuggingUnresolved(\n+        new DebugUnresolvedMainClassParams(\n+          \"a.Main\",\n+          \"a\",\n+          singletonList(\"Foo\")\n+        ).toJson\n+      )\n+      _ <- debugger.initialize\n+      _ <- debugger.launch\n+      _ <- debugger.configurationDone\n+      _ <- debugger.shutdown\n+      output <- debugger.allOutput\n+    } yield assertNoDiff(output, \"Foo\")\n+  }\n+\n+  test(\"abort-run-broken-workspace\") {\n+    cleanCompileCache(\"a\")\n+    cleanWorkspace()\n+    for {\n+      _ <- server.initialize(\n+        s\"\"\"/metals.json\n+           |{\n+           |  \"a\": {\"dependsOn\": [\"c\"]},\n+           |  \"c\": {}\n+           |}\n+           |/a/src/main/scala/a/Main.scala\n+           |package a\n+           |object Main {\n+           |  def main(args: Array[String]) = {\n+           |    print(args(0))\n+           |  }\n+           |}\n+           |/c/src/main/scala/c/Other.scala\n+           |package c\n+           |object Other {\n+           |  val a : Int = 1\n+           |}\n+           |\"\"\".stripMargin\n+      )\n+      _ <- server.didOpen(\"a/src/main/scala/a/Main.scala\")\n+      _ <- server.didSave(\"a/src/main/scala/a/Main.scala\") { _ =>\n+        \"\"\"|package c\n+           |object Other {\n+           |  val a : Int = \"\"\n+           |}}\"\"\".stripMargin\n+      }\n+      result <- server\n+        .startDebuggingUnresolved(\n+          new DebugUnresolvedMainClassParams(\n+            \"a.Main\",\n+            \"a\",\n+            singletonList(\"Foo\")\n+          ).toJson\n+        )\n+        .recover {\n+          case WorkspaceErrorsException =>\n+            server.statusBarHistory\n+          case other =>"
  }
]