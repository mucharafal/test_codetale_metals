[
  {
    "id" : "1d5c5c4e-30f2-4dc4-925d-fc65ca8c83ec",
    "prId" : 709,
    "comments" : [
      {
        "id" : "8bfca20e-dd9f-48c3-92a8-8c450334b2c3",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "It's not clear to me what functionality this test is stressing ðŸ¤” Some thoughts\r\n\r\n- I'm not sure we need the lock, we can make the test fully synchronous with `Future.successful` and `Future.value`\r\n- assert that calling an unpaused evaluates immediately `future.value.isDefined`\r\n- assert that calling a paused function does not evaluate immediately\r\n- assert that unpausing triggers evaluation",
        "createdAt" : "2019-05-16T11:57:29Z",
        "updatedAt" : "2019-05-31T13:37:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "03c1628a-acc9-4e8d-b41a-d96886b2f981",
        "parentId" : "8bfca20e-dd9f-48c3-92a8-8c450334b2c3",
        "author" : {
          "login" : "agajek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/12413667?u=65dfb6ffae1005eb93db585e8ebfa5d70cf07b21&v=4"
        },
        "body" : "Tried \r\n```scala\r\n    val mkString = BatchedFunction.fromFuture[String, String]{ numbers =>\r\n      Future.successful {\r\n        numbers.mkString\r\n      }\r\n    }\r\n\r\n    assertEquals(mkString(\"a\").value.isDefined, true)\r\n  }\r\n```\r\nbut test fails. Probably we cannot make it fully synchronous because of use Promise inside the `BatchedFunction`",
        "createdAt" : "2019-05-16T16:49:59Z",
        "updatedAt" : "2019-05-31T13:37:41Z",
        "lastEditedBy" : {
          "login" : "agajek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/12413667?u=65dfb6ffae1005eb93db585e8ebfa5d70cf07b21&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5fe045dc-acb8-4c3e-bb39-77b318a870f3",
        "parentId" : "8bfca20e-dd9f-48c3-92a8-8c450334b2c3",
        "author" : {
          "login" : "agajek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/12413667?u=65dfb6ffae1005eb93db585e8ebfa5d70cf07b21&v=4"
        },
        "body" : "@olafurpg do you have any idea how should I approach that test as this does not work as expected? ",
        "createdAt" : "2019-05-23T15:22:46Z",
        "updatedAt" : "2019-05-31T13:37:41Z",
        "lastEditedBy" : {
          "login" : "agajek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/12413667?u=65dfb6ffae1005eb93db585e8ebfa5d70cf07b21&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "50388413-8cd3-4a1b-bb77-ddf05015a5a9",
        "parentId" : "8bfca20e-dd9f-48c3-92a8-8c450334b2c3",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Here's a fully synchronous test that passes on my local computer\r\n```scala\r\n  test(\"pause\") {\r\n    implicit val ec: ExecutionContext = new ExecutionContext {\r\n      def execute(runnable: Runnable): Unit = runnable.run()\r\n      def reportFailure(cause: Throwable): Unit = cause.printStackTrace()\r\n    }\r\n    val lock = new Object\r\n    val mkString = BatchedFunction.fromFuture[String, String]({ numbers =>\r\n      Future.successful {\r\n        numbers.mkString\r\n      }\r\n    })\r\n    val unpaused = mkString(List(\"a\"))\r\n    assert(unpaused.value == Some(Success(\"a\")))\r\n    mkString.accumulate\r\n    val paused = mkString(\"b\")\r\n    assert(!paused.isCompleted)\r\n    val paused2 = mkString(\"c\")\r\n    assert(!paused2.isCompleted)\r\n    mkString.restart\r\n    assert(paused.value == Some(Success(\"bc\")))\r\n    assert(paused2.value == Some(Success(\"bc\")))\r\n  }\r\n```",
        "createdAt" : "2019-05-23T18:58:57Z",
        "updatedAt" : "2019-05-31T13:37:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8180db12-24dc-453f-bf5a-459ed3701c5a",
        "parentId" : "8bfca20e-dd9f-48c3-92a8-8c450334b2c3",
        "author" : {
          "login" : "agajek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/12413667?u=65dfb6ffae1005eb93db585e8ebfa5d70cf07b21&v=4"
        },
        "body" : "Sorry, I didn't notice your comment. Done. Thanks for help! ",
        "createdAt" : "2019-05-29T18:36:21Z",
        "updatedAt" : "2019-05-31T13:37:41Z",
        "lastEditedBy" : {
          "login" : "agajek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/12413667?u=65dfb6ffae1005eb93db585e8ebfa5d70cf07b21&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e996d0d719a59efbb86d5727fb306a454ea1623b",
    "line" : null,
    "diffHunk" : "@@ -36,4 +36,39 @@ object BatchedFunctionSuite extends BaseSuite {\n     }\n   }\n \n+  testAsync(\"accumulate\") {\n+    val lock = new Object\n+    val mkString = BatchedFunction.fromFuture[String, String]({ numbers =>\n+      Future {\n+        lock.synchronized {\n+          numbers.mkString\n+        }\n+      }\n+    })\n+    val results = lock.synchronized {\n+      mkString.accumulate"
  }
]