[
  {
    "id" : "4e7dee27-32e5-4b98-be21-f492446acd41",
    "prId" : 1487,
    "comments" : [
      {
        "id" : "b6ea9e48-685a-4768-8701-2f7e5d096edd",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Let's do kebab case: `supermethodhierarchy` -> `super-method-hierarchy`",
        "createdAt" : "2020-03-12T11:44:40Z",
        "updatedAt" : "2020-03-24T16:45:28Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "55838e6c9f4127bc8d06a8d31a6df496a0b729a8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,103 @@\n+package tests\n+\n+import org.eclipse.lsp4j.Position\n+\n+import scala.concurrent.Future\n+\n+class SuperHierarchyLspSuite extends BaseLspSuite(\"supermethodhierarchy\") {"
  },
  {
    "id" : "569c9492-ee2a-4518-a8ef-01ea69bc4b52",
    "prId" : 1487,
    "comments" : [
      {
        "id" : "f330a420-e068-4e3f-a56b-5451b6c5b5a7",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "TODO?",
        "createdAt" : "2020-03-12T11:45:04Z",
        "updatedAt" : "2020-03-24T16:45:28Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "55838e6c9f4127bc8d06a8d31a6df496a0b729a8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,103 @@\n+package tests\n+\n+import org.eclipse.lsp4j.Position\n+\n+import scala.concurrent.Future\n+\n+class SuperHierarchyLspSuite extends BaseLspSuite(\"supermethodhierarchy\") {\n+\n+  test(\"simple\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |trait A { def <<1>>xxx: String = \"A\" }\n+        |trait B extends A\n+        |trait C extends A { override def <<3>>xxx: String = \"C -> \" + super.xxx }\n+        |trait D extends C { override def <<4>>xxx: String = \"D -> \" + super.xxx }\n+        |\"\"\".stripMargin\n+\n+    for {\n+      _ <- checkHierarchy(code, 4, List(\"a.C#xxx\", \"a.A#xxx\"))\n+      _ <- checkHierarchy(code, 3, List(\"a.A#xxx\"))\n+      _ <- checkNoHierarchy(code, 1)\n+    } yield ()\n+  }\n+\n+  test(\"complex\") {\n+    //TODO: Implement"
  },
  {
    "id" : "a320796a-2802-40d9-a4b6-7a35dc5a9d14",
    "prId" : 1487,
    "comments" : [
      {
        "id" : "06b2df08-1abd-43b3-afee-e78426b41c7f",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Also here?",
        "createdAt" : "2020-03-12T11:46:25Z",
        "updatedAt" : "2020-03-24T16:45:28Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "55838e6c9f4127bc8d06a8d31a6df496a0b729a8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,103 @@\n+package tests\n+\n+import org.eclipse.lsp4j.Position\n+\n+import scala.concurrent.Future\n+\n+class SuperHierarchyLspSuite extends BaseLspSuite(\"supermethodhierarchy\") {\n+\n+  test(\"simple\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |trait A { def <<1>>xxx: String = \"A\" }\n+        |trait B extends A\n+        |trait C extends A { override def <<3>>xxx: String = \"C -> \" + super.xxx }\n+        |trait D extends C { override def <<4>>xxx: String = \"D -> \" + super.xxx }\n+        |\"\"\".stripMargin\n+\n+    for {\n+      _ <- checkHierarchy(code, 4, List(\"a.C#xxx\", \"a.A#xxx\"))\n+      _ <- checkHierarchy(code, 3, List(\"a.A#xxx\"))\n+      _ <- checkNoHierarchy(code, 1)\n+    } yield ()\n+  }\n+\n+  test(\"complex\") {\n+    //TODO: Implement\n+  }\n+\n+  test(\"with external dep\") {\n+    //TODO: Implement"
  },
  {
    "id" : "72628b86-6408-4c73-a1ce-4d99ef09492e",
    "prId" : 1487,
    "comments" : [
      {
        "id" : "4244f0c8-7747-4dcb-8952-0fd969ed09ee",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Maybe just do indexOf(\"<<0>>\") and increment until none is found?\r\nYou can use the offset to create `m.Position.Range(input, offset, offset)`, which can easily be converted to LSP Position\r\nExample can be found in `TestServer.positionFromString`",
        "createdAt" : "2020-03-12T11:52:26Z",
        "updatedAt" : "2020-03-24T16:45:28Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2d2768fc-d1a8-4898-822c-84e0e6c490a0",
        "parentId" : "4244f0c8-7747-4dcb-8952-0fd969ed09ee",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "then for each marker I would have to copy whole code and convert to position which also iterates whole code again.\r\nAre you okay with this performance penalty?",
        "createdAt" : "2020-03-13T15:52:49Z",
        "updatedAt" : "2020-03-24T16:45:28Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "91108ea8-b7cf-4729-993e-2a8424260873",
        "parentId" : "4244f0c8-7747-4dcb-8952-0fd969ed09ee",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I don't believe the performance would be much worse in this case, I prefer readability in the tests here. No need to have a super optimized code for test.",
        "createdAt" : "2020-03-13T16:06:13Z",
        "updatedAt" : "2020-03-24T16:45:28Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b537aed2-e3af-48b4-8b2c-ae0908351492",
        "parentId" : "4244f0c8-7747-4dcb-8952-0fd969ed09ee",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Ok nvm me, I think it might not be much easier to implement, let's leave it.",
        "createdAt" : "2020-03-13T16:26:40Z",
        "updatedAt" : "2020-03-24T16:45:28Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "55838e6c9f4127bc8d06a8d31a6df496a0b729a8",
    "line" : 132,
    "diffHunk" : "@@ -0,0 +1,103 @@\n+package tests\n+\n+import org.eclipse.lsp4j.Position\n+\n+import scala.concurrent.Future\n+\n+class SuperHierarchyLspSuite extends BaseLspSuite(\"supermethodhierarchy\") {\n+\n+  test(\"simple\") {\n+    val code =\n+      \"\"\"\n+        |package a\n+        |trait A { def <<1>>xxx: String = \"A\" }\n+        |trait B extends A\n+        |trait C extends A { override def <<3>>xxx: String = \"C -> \" + super.xxx }\n+        |trait D extends C { override def <<4>>xxx: String = \"D -> \" + super.xxx }\n+        |\"\"\".stripMargin\n+\n+    for {\n+      _ <- checkHierarchy(code, 4, List(\"a.C#xxx\", \"a.A#xxx\"))\n+      _ <- checkHierarchy(code, 3, List(\"a.A#xxx\"))\n+      _ <- checkNoHierarchy(code, 1)\n+    } yield ()\n+  }\n+\n+  test(\"complex\") {\n+    //TODO: Implement\n+  }\n+\n+  test(\"with external dep\") {\n+    //TODO: Implement\n+  }\n+\n+  private def checkHierarchy(\n+      uri: String,\n+      pos: Int,\n+      expected: List[String]\n+  ): Future[Unit] = checkHierarchyInternal(uri, pos, expected)\n+\n+  private def checkNoHierarchy(uri: String, pos: Int): Future[Unit] =\n+    checkHierarchyInternal(uri, pos, List())\n+\n+  private def checkHierarchyInternal(\n+      code: String,\n+      pos: Int,\n+      expected: List[String]\n+  ): Future[Unit] = {\n+    val header = \"\"\"\n+                   |/metals.json\n+                   |{\n+                   |  \"a\": { }\n+                   |}\n+                   |/a/src/main/scala/a/A.scala\n+                   |\"\"\".stripMargin\n+\n+    cleanWorkspace()\n+    for {\n+      _ <- server.initialize(strip(header + code))\n+      _ <- server.didOpen(\"a/src/main/scala/a/A.scala\")\n+      _ = assertNoDiagnostics()\n+    } yield {\n+      val path = server.toPath(\"a/src/main/scala/a/A.scala\").toURI.toString\n+      val context = parse(code)\n+      server.assertSuperMethodHierarchy(path, context(pos), expected)\n+    }\n+  }\n+\n+  private def parse("
  }
]