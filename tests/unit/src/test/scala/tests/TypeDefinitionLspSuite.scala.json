[
  {
    "id" : "be612e1c-8e51-4fd6-8fb3-91f5484fe4a5",
    "prId" : 978,
    "comments" : [
      {
        "id" : "caa4c1e4-9cca-4e97-a5f2-2fb7a783b75d",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Is this needed?",
        "createdAt" : "2019-10-14T11:13:26Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : 17,
    "diffHunk" : "@@ -0,0 +1,146 @@\n+package tests\n+\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.Future\n+import scala.concurrent.duration.Duration\n+import scala.meta.internal.metals.MetalsServerConfig\n+import scala.meta.internal.metals.StatisticsConfig\n+\n+object TypeDefinitionLspSuite\n+    extends BaseLspSuite(\"typeDefinition\")\n+    with TestHovers {\n+  override def serverConfig: MetalsServerConfig =\n+    super.serverConfig.copy(\n+      statistics = new StatisticsConfig(\"diagnostics\")"
  },
  {
    "id" : "e6194491-402e-4792-90c3-375ac2a14eae",
    "prId" : 978,
    "comments" : [
      {
        "id" : "1bb8b9e7-0616-414e-9639-6cd6c7f5c8f1",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Is `TestHovers` needed?",
        "createdAt" : "2019-10-14T11:13:42Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : 14,
    "diffHunk" : "@@ -0,0 +1,146 @@\n+package tests\n+\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.Future\n+import scala.concurrent.duration.Duration\n+import scala.meta.internal.metals.MetalsServerConfig\n+import scala.meta.internal.metals.StatisticsConfig\n+\n+object TypeDefinitionLspSuite\n+    extends BaseLspSuite(\"typeDefinition\")\n+    with TestHovers {"
  },
  {
    "id" : "6389328b-f084-4fe9-b03a-b803a4df606b",
    "prId" : 978,
    "comments" : [
      {
        "id" : "057e79ca-c6a2-4970-8a98-436094b07449",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We can move initialize to separate helper method like in ImplementationProvider.",
        "createdAt" : "2019-10-14T11:15:35Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,146 @@\n+package tests\n+\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.Future\n+import scala.concurrent.duration.Duration\n+import scala.meta.internal.metals.MetalsServerConfig\n+import scala.meta.internal.metals.StatisticsConfig\n+\n+object TypeDefinitionLspSuite\n+    extends BaseLspSuite(\"typeDefinition\")\n+    with TestHovers {\n+  override def serverConfig: MetalsServerConfig =\n+    super.serverConfig.copy(\n+      statistics = new StatisticsConfig(\"diagnostics\")\n+    )\n+\n+  override def testAsync(\n+      name: String,\n+      maxDuration: Duration = Duration(\"3min\")\n+  )(run: => Future[Unit]): Unit = {\n+    if (isWindows) {\n+      // src.zip is missing on Appveyor which breaks definition tests.\n+      ignore(name) {}\n+    } else {\n+      super.testAsync(name, maxDuration)(run)\n+    }\n+  }\n+\n+  def locationFromString(str: String): l.Location = {\n+    def positionFromString(str: String): l.Position = {\n+      val ints = str.split(\":\").map(_.toInt)\n+      new l.Position(ints.head, ints.last)\n+    }\n+\n+    val split = str.split(\"\"\"/\\\\\"\"\")\n+    val (uri, rest) = (split.head, split.tail)\n+    val range =\n+      new l.Range(positionFromString(rest.head), positionFromString(rest.last))\n+    new l.Location(\n+      workspace.toURI.resolve(uri).toString.replaceFirst(\"/\", \"///\"),\n+      range\n+    )\n+  }\n+\n+  def createLocation(\n+      uri: String,\n+      begin: (Int, Int),\n+      end: (Int, Int)\n+  ): l.Location = {\n+    val startPos = new l.Position(begin._1, begin._2)\n+    val endPos = new l.Position(end._1, end._2)\n+\n+    new l.Location(uri, new l.Range(startPos, endPos))\n+  }\n+\n+  testAsync(\"int\") {\n+    for {\n+      _ <- server.initialize(\n+        \"\"\"/metals.json\n+          |{\n+          |   \"a\":{}\n+          |}\n+        \"\"\".stripMargin\n+      )\n+      _ <- server.assertTypeDefinition(\n+        \"a/src/main/scala/a/Main.scala\",\n+        \"\"\"\n+          |object Main {\n+          |  val ts@@t: Int = 2\n+          |}\"\"\".stripMargin,\n+        locationFromString(\".metals/readonly/scala/Int.scala/\\\\25:21/\\\\25:24\")\n+      )\n+    } yield ()\n+  }\n+\n+  testAsync(\"basic\") {\n+    cleanWorkspace()\n+    for {\n+      _ <- server.initialize("
  },
  {
    "id" : "55271269-b2cb-48bd-9ad7-466687ba2bae",
    "prId" : 978,
    "comments" : [
      {
        "id" : "1eee942b-55b0-4a90-8ef8-74ad91380560",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Let's add a test with cursor on a invocation `foo` - it should go to the method definition.",
        "createdAt" : "2019-10-14T11:17:55Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,146 @@\n+package tests\n+\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.Future\n+import scala.concurrent.duration.Duration\n+import scala.meta.internal.metals.MetalsServerConfig\n+import scala.meta.internal.metals.StatisticsConfig\n+\n+object TypeDefinitionLspSuite\n+    extends BaseLspSuite(\"typeDefinition\")\n+    with TestHovers {\n+  override def serverConfig: MetalsServerConfig =\n+    super.serverConfig.copy(\n+      statistics = new StatisticsConfig(\"diagnostics\")\n+    )\n+\n+  override def testAsync(\n+      name: String,\n+      maxDuration: Duration = Duration(\"3min\")\n+  )(run: => Future[Unit]): Unit = {\n+    if (isWindows) {\n+      // src.zip is missing on Appveyor which breaks definition tests.\n+      ignore(name) {}\n+    } else {\n+      super.testAsync(name, maxDuration)(run)\n+    }\n+  }\n+\n+  def locationFromString(str: String): l.Location = {\n+    def positionFromString(str: String): l.Position = {\n+      val ints = str.split(\":\").map(_.toInt)\n+      new l.Position(ints.head, ints.last)\n+    }\n+\n+    val split = str.split(\"\"\"/\\\\\"\"\")\n+    val (uri, rest) = (split.head, split.tail)\n+    val range =\n+      new l.Range(positionFromString(rest.head), positionFromString(rest.last))\n+    new l.Location(\n+      workspace.toURI.resolve(uri).toString.replaceFirst(\"/\", \"///\"),\n+      range\n+    )\n+  }\n+\n+  def createLocation(\n+      uri: String,\n+      begin: (Int, Int),\n+      end: (Int, Int)\n+  ): l.Location = {\n+    val startPos = new l.Position(begin._1, begin._2)\n+    val endPos = new l.Position(end._1, end._2)\n+\n+    new l.Location(uri, new l.Range(startPos, endPos))\n+  }\n+\n+  testAsync(\"int\") {\n+    for {\n+      _ <- server.initialize(\n+        \"\"\"/metals.json\n+          |{\n+          |   \"a\":{}\n+          |}\n+        \"\"\".stripMargin\n+      )\n+      _ <- server.assertTypeDefinition(\n+        \"a/src/main/scala/a/Main.scala\",\n+        \"\"\"\n+          |object Main {\n+          |  val ts@@t: Int = 2\n+          |}\"\"\".stripMargin,\n+        locationFromString(\".metals/readonly/scala/Int.scala/\\\\25:21/\\\\25:24\")\n+      )\n+    } yield ()\n+  }\n+\n+  testAsync(\"basic\") {\n+    cleanWorkspace()\n+    for {\n+      _ <- server.initialize(\n+        \"\"\"/metals.json\n+          |{\"a\":{}}\n+          |\n+          |/a/src/main/scala/a/Main.scala\n+          |package a\n+          |class Main(i: Int) {}\n+          |\n+          |object Main extends App {\n+          |  val test = new Main(1)\n+          |}\n+        \"\"\".stripMargin\n+      )\n+      _ <- server.didOpen(\"a/src/main/scala/a/Main.scala\")\n+      _ = server.workspaceDefinitions\n+      _ <- server.assertTypeDefinition(\n+        \"a/src/main/scala/a/Main.scala\",\n+        \"\"\"\n+          |package a\n+          |class Main(i: Int) {}\n+          |\n+          |object Main extends App {\n+          |  val te@@st = new Main(1)\n+          |}\n+        \"\"\".stripMargin,\n+        locationFromString(\"a/src/main/scala/a/Main.scala/\\\\2:6/\\\\2:10\")\n+      )\n+    } yield ()\n+  }\n+\n+  testAsync(\"method\", Duration(\"10 min\")) {\n+    cleanWorkspace()\n+    for {\n+      _ <- server.initialize(\n+        \"\"\"/metals.json\n+          |{\"a\":{}}\n+          |\n+          |/a/src/main/scala/a/Main.scala\n+          |package a\n+          |class Main(i: Int) {}\n+          |\n+          |object Main extends App {\n+          |  def foo(mn: Main): Unit = {\n+          |     println(mn)\n+          |  }\n+          |}\n+        \"\"\".stripMargin\n+      )\n+      _ <- server.didOpen(\"a/src/main/scala/a/Main.scala\")\n+      _ = server.workspaceDefinitions\n+      _ <- server.assertTypeDefinition(\n+        \"a/src/main/scala/a/Main.scala\",\n+        \"\"\"\n+          |package a\n+          |class Main(i: Int) {}\n+          |\n+          |object Main extends App {\n+          |  def foo(mn: Main): Unit = {"
  },
  {
    "id" : "2b5e6896-a243-4619-b638-e8eb232c3c58",
    "prId" : 978,
    "comments" : [
      {
        "id" : "895c5a28-d7f4-49f7-8dda-85bb28ec6a26",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Let's move the utility methods to the bottom, so that tests are more visible.",
        "createdAt" : "2019-11-12T11:58:24Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7a0eb72c-f34d-4669-bf51-3645f3f8b93a",
        "parentId" : "895c5a28-d7f4-49f7-8dda-85bb28ec6a26",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "Fixed.",
        "createdAt" : "2019-11-13T16:10:30Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,163 @@\n+package tests\n+\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.Future\n+import scala.concurrent.duration.Duration\n+import scala.meta.internal.metals.MetalsServerConfig\n+import scala.meta.internal.metals.StatisticsConfig\n+\n+object TypeDefinitionLspSuite\n+    extends BaseLspSuite(\"typeDefinition\")\n+    with TestHovers {\n+  override def serverConfig: MetalsServerConfig =\n+    super.serverConfig.copy(\n+      statistics = new StatisticsConfig(\"diagnostics\")\n+    )\n+\n+  override def testAsync(\n+      name: String,\n+      maxDuration: Duration = Duration(\"3min\")\n+  )(run: => Future[Unit]): Unit = {\n+    if (BaseSuite.isWindows) {\n+      // src.zip is missing on Appveyor which breaks definition tests.\n+      ignore(name) {}\n+    } else {\n+      super.testAsync(name, maxDuration)(run)\n+    }\n+  }\n+\n+  def check(name: String, testCase: String, expected: String): Unit = {"
  },
  {
    "id" : "de8f51cc-bc26-4736-ba10-40e4144b2a6e",
    "prId" : 978,
    "comments" : [
      {
        "id" : "8ad703e7-3464-40f7-8944-92a586235c15",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "It shouldn't be disabled currently. Don't override.",
        "createdAt" : "2019-11-12T11:58:56Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "98ebdcfa-2e11-4260-b383-ac38f3f07bc2",
        "parentId" : "8ad703e7-3464-40f7-8944-92a586235c15",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "Fixed.",
        "createdAt" : "2019-11-13T16:10:39Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,163 @@\n+package tests\n+\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.Future\n+import scala.concurrent.duration.Duration\n+import scala.meta.internal.metals.MetalsServerConfig\n+import scala.meta.internal.metals.StatisticsConfig\n+\n+object TypeDefinitionLspSuite\n+    extends BaseLspSuite(\"typeDefinition\")\n+    with TestHovers {\n+  override def serverConfig: MetalsServerConfig =\n+    super.serverConfig.copy(\n+      statistics = new StatisticsConfig(\"diagnostics\")\n+    )\n+\n+  override def testAsync(\n+      name: String,\n+      maxDuration: Duration = Duration(\"3min\")\n+  )(run: => Future[Unit]): Unit = {\n+    if (BaseSuite.isWindows) {"
  },
  {
    "id" : "8a5cb2d5-353a-43db-8ce3-e6b25c9dfc0c",
    "prId" : 978,
    "comments" : [
      {
        "id" : "2e956a97-22a7-47e9-be3c-4a27540ae603",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Let's add tests also for unapply in case it is defined and in case it isn't.",
        "createdAt" : "2019-11-12T12:01:37Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,163 @@\n+package tests\n+\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.Future\n+import scala.concurrent.duration.Duration\n+import scala.meta.internal.metals.MetalsServerConfig\n+import scala.meta.internal.metals.StatisticsConfig\n+\n+object TypeDefinitionLspSuite\n+    extends BaseLspSuite(\"typeDefinition\")\n+    with TestHovers {\n+  override def serverConfig: MetalsServerConfig =\n+    super.serverConfig.copy(\n+      statistics = new StatisticsConfig(\"diagnostics\")\n+    )\n+\n+  override def testAsync(\n+      name: String,\n+      maxDuration: Duration = Duration(\"3min\")\n+  )(run: => Future[Unit]): Unit = {\n+    if (BaseSuite.isWindows) {\n+      // src.zip is missing on Appveyor which breaks definition tests.\n+      ignore(name) {}\n+    } else {\n+      super.testAsync(name, maxDuration)(run)\n+    }\n+  }\n+\n+  def check(name: String, testCase: String, expected: String): Unit = {\n+    val base = testCase.replaceAll(\"@@\", \"\")\n+    testAsync(name) {\n+      cleanWorkspace()\n+      for {\n+        _ <- server.initialize(\n+          s\"\"\"/metals.json\n+             |{\"a\":{}}\n+             |/a/src/main/scala/a/Main.scala\n+             |$base\n+      \"\"\".stripMargin\n+        )\n+        _ <- server.didOpen(\"a/src/main/scala/a/Main.scala\")\n+        _ <- server.assertTypeDefinition(\n+          \"a/src/main/scala/a/Main.scala\",\n+          testCase,\n+          s\"|${workspace.toURI.toString}$expected|\"\n+        )\n+      } yield ()\n+    }\n+  }\n+\n+  def locationFromString(str: String): l.Location = {\n+    def positionFromString(str: String): l.Position = {\n+      val ints = str.split(\":\").map(_.toInt)\n+      new l.Position(ints.head, ints.last)\n+    }\n+\n+    val split = str.split(\"\"\"/\\\\\"\"\")\n+    assertEquals(split.length, 3, \"Incorrect location string format\")\n+    val (uri, rest) = (split.head, split.tail)\n+    val range =\n+      new l.Range(positionFromString(rest.head), positionFromString(rest.last))\n+    new l.Location(\n+      workspace.toURI.resolve(uri).toString.replaceFirst(\"/\", \"///\"),\n+      range\n+    )\n+  }\n+\n+  def createLocation(\n+      uri: String,\n+      begin: (Int, Int),\n+      end: (Int, Int)\n+  ): l.Location = {\n+    val startPos = new l.Position(begin._1, begin._2)\n+    val endPos = new l.Position(end._1, end._2)\n+\n+    new l.Location(uri, new l.Range(startPos, endPos))\n+  }\n+\n+  check(\n+    \"int\",\n+    \"\"\"\n+      |object Main {\n+      |  val ts@@t: Int = 2\n+      |}\"\"\".stripMargin,\n+    \".metals/readonly/scala/Int.scala/\\\\25:21/\\\\25:24\"\n+  )\n+\n+  check(\n+    \"basic\",\n+    \"\"\"\n+      |package a\n+      |\n+      |class Main(i: Int) {}\n+      |\n+      |object Main extends App {\n+      |  val te@@st = new Main(1)\n+      |}\n+        \"\"\".stripMargin,\n+    \"a/src/main/scala/a/Main.scala/\\\\3:6/\\\\3:9\"\n+  )\n+\n+  check(\n+    \"method\",\n+    \"\"\"\n+      |package a\n+      |\n+      |class Main(i: Int) {}\n+      |\n+      |object Main extends App {\n+      |  def foo(mn: Main): Unit = {\n+      |     println(m@@n)\n+      |  }\n+      |}\n+        \"\"\".stripMargin,\n+    \"a/src/main/scala/a/Main.scala/\\\\3:6/\\\\3:9\"\n+  )\n+\n+  check(\n+    \"method-definition\",\n+    \"\"\"\n+      |package a\n+      |class Main(i: Int) {}\n+      |\n+      |object Main extends App {\n+      |  def foo(mn: Main): Unit = {\n+      |     println(mn)\n+      |  }\n+      |\n+      |  fo@@o(new Main(1))\n+      |}\n+        \"\"\".stripMargin,\n+    \"a/src/main/scala/a/Main.scala/\\\\5:6/\\\\5:8\"\n+  )\n+\n+  check(\n+    \"named-parameter\",\n+    \"\"\"\n+      |case class CClass(str: String) {}\n+      |\n+      |object Main {\n+      |  def tst(par: CClass): Unit = {}\n+      |\n+      |  tst(p@@ar = CClass(\"dads\"))\n+      |}\"\"\".stripMargin,\n+    \"a/src/main/scala/a/Main.scala/\\\\4:6/\\\\4:8\"\n+  )\n+\n+  check(\n+    \"pattern-match\",\n+    \"\"\"\n+      |case class CClass(str: String) {}\n+      |\n+      |object Main {\n+      |  CClass(\"test\") match {\n+      |    case CClass(st@@r) =>"
  },
  {
    "id" : "76205897-e091-4d62-9607-5de5f4b91419",
    "prId" : 978,
    "comments" : [
      {
        "id" : "fb2d8109-5551-4110-8237-949a8ddac11d",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Let's also add tests:\r\n- when multiple files are involved.\r\n- multiple build targets\r\n- external library that is not basic Scala one\r\n\r\nLet's also try to move most of the tests involving single files to cross test.",
        "createdAt" : "2019-11-12T12:03:12Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : 1,
    "diffHunk" : "@@ -0,0 +1,163 @@\n+package tests"
  },
  {
    "id" : "ffeff6d5-726b-464d-9321-b45551ef1941",
    "prId" : 978,
    "comments" : [
      {
        "id" : "646805cc-fb2e-467c-ac86-619ddea84bbb",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "print the malformed string, so the user doesn't have to guess how it looked like",
        "createdAt" : "2019-11-14T16:54:35Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "44060d2c-2e9f-4b91-a6de-58503f34a3c0",
        "parentId" : "646805cc-fb2e-467c-ac86-619ddea84bbb",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "Changed.",
        "createdAt" : "2019-11-15T08:33:59Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,143 @@\n+package tests\n+\n+import org.eclipse.{lsp4j => l}\n+import scala.meta.internal.metals.MetalsServerConfig\n+import scala.meta.internal.metals.StatisticsConfig\n+\n+object TypeDefinitionLspSuite\n+    extends BaseLspSuite(\"typeDefinition\")\n+    with TestHovers {\n+  override def serverConfig: MetalsServerConfig =\n+    super.serverConfig.copy(\n+      statistics = new StatisticsConfig(\"diagnostics\")\n+    )\n+\n+  check(\"int\")(\n+    \"\"\"\n+      |object Main {\n+      |  val ts@@t: Int = 2\n+      |}\"\"\".stripMargin,\n+    \".metals/readonly/scala/Int.scala [25:21 -> 25:24]\"\n+  )\n+\n+  check(\"basic\")(\n+    \"\"\"\n+      |package a\n+      |\n+      |class Main(i: Int) {}\n+      |\n+      |object Main extends App {\n+      |  val te@@st = new Main(1)\n+      |}\n+        \"\"\".stripMargin,\n+    \"a/src/main/scala/a/Main.scala [3:6 -> 3:9]\"\n+  )\n+\n+  check(\"method\")(\n+    \"\"\"\n+      |package a\n+      |\n+      |class Main(i: Int) {}\n+      |\n+      |object Main extends App {\n+      |  def foo(mn: Main): Unit = {\n+      |     println(m@@n)\n+      |  }\n+      |}\n+        \"\"\".stripMargin,\n+    \"a/src/main/scala/a/Main.scala [3:6 -> 3:9]\"\n+  )\n+\n+  check(\"method-definition\")(\n+    \"\"\"\n+      |package a\n+      |class Main(i: Int) {}\n+      |\n+      |object Main extends App {\n+      |  def foo(mn: Main): Unit = {\n+      |     println(mn)\n+      |  }\n+      |\n+      |  fo@@o(new Main(1))\n+      |}\n+        \"\"\".stripMargin,\n+    \"a/src/main/scala/a/Main.scala [5:6 -> 5:8]\"\n+  )\n+\n+  check(\"named-parameter\")(\n+    \"\"\"\n+      |case class CClass(str: String) {}\n+      |\n+      |object Main {\n+      |  def tst(par: CClass): Unit = {}\n+      |\n+      |  tst(p@@ar = CClass(\"dads\"))\n+      |}\"\"\".stripMargin,\n+    \"a/src/main/scala/a/Main.scala [4:6 -> 4:8]\"\n+  )\n+\n+  check(\"pattern-match\")(\n+    \"\"\"\n+      |case class CClass(str: String) {}\n+      |\n+      |object Main {\n+      |  CClass(\"test\") match {\n+      |    case CClass(st@@r) =>\n+      |       println(str)\n+      |    case _ =>\n+      |  }\n+      |}\"\"\".stripMargin,\n+    \"a/src/main/scala/a/Main.scala [3:16 -> 3:18]\"\n+  )\n+\n+  def check(name: String)(testCase: String, expected: String): Unit = {\n+    val base = testCase.replaceAll(\"@@\", \"\")\n+    testAsync(name) {\n+      cleanWorkspace()\n+      for {\n+        _ <- server.initialize(\n+          s\"\"\"/metals.json\n+             |{\"a\":{}}\n+             |/a/src/main/scala/a/Main.scala\n+             |$base\n+      \"\"\".stripMargin\n+        )\n+        _ <- server.didOpen(\"a/src/main/scala/a/Main.scala\")\n+        _ <- server.assertTypeDefinition(\n+          \"a/src/main/scala/a/Main.scala\",\n+          testCase,\n+          locationFromString(expected)\n+        )\n+      } yield ()\n+    }\n+  }\n+\n+  def locationFromString(str: String): l.Location = {\n+\n+    val regex =\n+      \"\"\"\\s*([^\\s]+)\\s* \\[([0-9]+):([0-9]+)\\s* ->\\s* ([0-9]+):([0-9]+)\\]\\s*\"\"\".r\n+\n+    str match {\n+      case regex(uri, startL, startC, endL, endC) =>\n+        createLocation(\n+          workspace.toURI.resolve(uri).toString.replaceFirst(\"/\", \"///\"),\n+          (startL.toInt, startC.toInt),\n+          (endL.toInt, endC.toInt)\n+        )\n+      case _ =>\n+        fail(\"Incorrect location string format\")"
  },
  {
    "id" : "c30801f8-589f-4dcd-9fde-e95353293bf9",
    "prId" : 978,
    "comments" : [
      {
        "id" : "0fa4d683-ce6d-4857-a17b-d2124ba8a86e",
        "parentId" : null,
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "this seems to be not used",
        "createdAt" : "2020-03-24T08:34:28Z",
        "updatedAt" : "2020-04-02T17:08:31Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : 264,
    "diffHunk" : "@@ -0,0 +1,264 @@\n+package tests\n+\n+import scala.concurrent.Future\n+import scala.meta.inputs.Input\n+import scala.meta.inputs.Position\n+import scala.meta.internal.metals.MetalsServerConfig\n+import scala.meta.internal.metals.StatisticsConfig\n+import scala.meta.internal.metals.TextEdits\n+import scala.meta.internal.mtags.MtagsEnrichments._\n+import org.eclipse.{lsp4j => l}\n+\n+object TypeDefinitionLspSuite\n+    extends BaseLspSuite(\"typeDefinition\")\n+    with TestHovers {\n+  override def serverConfig: MetalsServerConfig =\n+    super.serverConfig.copy(\n+      statistics = new StatisticsConfig(\"diagnostics\")\n+    )\n+\n+  check(\"multi-target\")(\n+    query = \"\"\"\n+              |/a/src/main/scala/a/A.scala\n+              |package a\n+              |object A {\n+              |  val name = \"John\"\n+              |  def main() = {\n+              |    print/*.metals/readonly/scala/Unit.scala*/@@ln(name)\n+              |  }\n+              |}\n+              |/b/src/main/scala/a/B.scala\n+              |package a\n+              |object B {\n+              |  def main() = {\n+              |    println(A.name)\n+              |  }\n+              |}\"\"\".stripMargin\n+  )\n+\n+  check(\"int\")(\n+    query = \"\"\"\n+              |/a/src/main/scala/a/Main.scala\n+              |object Main {\n+              |  val ts/*.metals/readonly/scala/Int.scala*/@@t: Int = 2\n+              |}\"\"\".stripMargin\n+  )\n+\n+  check(\"basic\")(\n+    query = \"\"\"\n+              |/a/src/main/scala/a/Main.scala\n+              |\n+              |package a\n+              |\n+              |<<class Main(i: Int) {}>>\n+              |\n+              |object Main extends App {\n+              |  val te@@st = new Main(1)\n+              |}\n+        \"\"\".stripMargin\n+  )\n+  check(\"basicMultifile\")(\n+    query = \"\"\"\n+              |/a/src/main/scala/a/Main.scala\n+              |package a\n+              |object Main {\n+              |  val ts@@t = new A(2)\n+              |}\n+              |/a/src/main/scala/a/Clazz.scala\n+              |package a\n+              |class <<A>>(i: Int){}\n+              |\"\"\".stripMargin\n+  )\n+\n+  check(\"ext-library\")(\n+    query = \"\"\"\n+              |/a/src/main/java/a/Message.java\n+              |package a;\n+              |public class Message {\n+              |  public static String message = \"Hello world!\";\n+              |}\n+              |/a/src/main/scala/a/Main.scala\n+              |package a\n+              |import java.util.concurrent.Future // unused\n+              |import scala.util.Failure // unused\n+              |object Main extends App {\n+              |  val message = Message.message\n+              |  new java.io.PrintStream(new java.io.ByteArrayOutputStream())\n+              |  println(message)\n+              |}\n+              |/b/src/main/scala/a/MainSuite.scala\n+              |package a\n+              |import java.util.concurrent.Future // unused\n+              |import scala.util.Failure // unused\n+              |import org.scalatest.FunSuite\n+              |object MainSuite extends FunSuite {\n+              |  test(\"a\") {\n+              |    val condition = Main.message.contains(\"Hello\")\n+              |    asse@@rt(condition)\n+              |  }\n+              |}\n+              |\"\"\".stripMargin,\n+    expectedLocs = List(\n+      \".metals/readonly/org/scalatest/compatible/Assertion.scala [28:6 -> 28:15]\"\n+    )\n+  )\n+\n+  check(\"method\")(\n+    query = \"\"\"\n+              |/a/src/main/scala/a/Main.scala\n+              |\n+              |package a\n+              |\n+              |<<class Main(i: Int) {}>>\n+              |\n+              |object Main extends App {\n+              |  def foo(mn: Main): Unit = {\n+              |     println(m@@n)\n+              |  }\n+              |}\n+        \"\"\".stripMargin\n+  )\n+\n+  check(\"method-definition\")(\n+    query = \"\"\"\n+              |/a/src/main/scala/a/Main.scala\n+              |package a\n+              |class Main(i: Int) {}\n+              |object Main extends App {\n+              |  def foo(mn: Main): Unit = {\n+              |     println(mn)\n+              |  }\n+              |  fo/*.metals/readonly/scala/Unit.scala*/@@o(new Main(1))\n+              |}\n+        \"\"\".stripMargin\n+  )\n+\n+  check(\"named-parameter\")(\n+    query = \"\"\"\n+              |/a/src/main/scala/a/Main.scala\n+              |<<case class CClass(str: String) {}>>\n+              |\n+              |object Main {\n+              |  def tst(par: CClass): Unit = {}\n+              |\n+              |  tst(p@@ar = CClass(\"dads\"))\n+              |}\"\"\".stripMargin\n+  )\n+\n+  check(\"pattern-match\")(\n+    query = \"\"\"\n+              |/a/src/main/scala/a/Main.scala\n+              |case class CClass(str: String) {}\n+              |\n+              |object Main {\n+              |  CClass(\"test\") match {\n+              |    case CClass(st/*.metals/readonly/java/lang/String.java*/@@r) =>\n+              |       println(str)\n+              |    case _ =>\n+              |  }\n+              |}\"\"\".stripMargin\n+  )\n+\n+  check(\"pattern-match-defined-unapply\")(\n+    query = \"\"\"\n+              |/a/src/main/scala/a/Main.scala\n+              |object CClass {\n+              | def unapply(c: CClass): Option[Int] = Some(1)\n+              |}\n+              |case class CClass(str: String)\n+              |\n+              |object Main {\n+              |  CClass(\"test\") match {\n+              |    case CClass(st/*.metals/readonly/java/lang/String.java*/@@r) =>\n+              |       println(str)\n+              |    case _ =>\n+              |  }\n+              |}\"\"\".stripMargin\n+  )\n+\n+  def check(\n+      name: String\n+  )(query: String, expectedLocs: List[String] = Nil): Unit = {\n+    testAsync(name) {\n+      cleanWorkspace()\n+      val code =\n+        TestingUtils\n+          .prepareDefinition(query, removeAt = true)\n+          .replaceAll(\"\"\"\\/\\*[^\\*]+\\*\\/\"\"\", \"\")\n+      val files = query.linesIterator\n+        .filter(_.startsWith(\"/\"))\n+        .filter(_.filter(!_.isWhitespace) != \"/metals.json\")\n+        .map(_.stripPrefix(\"/\"))\n+\n+      for {\n+        _ <- server.initialize(\n+          s\"\"\"\n+             |/metals.json\n+             |{\n+             |  \"a\": { },\n+             |  \"b\": {\n+             |    \"libraryDependencies\": [\n+             |      \"org.scalatest::scalatest:3.0.5\"\n+             |    ],\n+             |    \"dependsOn\": [ \"a\" ]\n+             |  }\n+             |}\n+             |${code.trim}\"\"\".stripMargin\n+        )\n+        _ <- Future.sequence(files.map(server.didOpen))\n+        expected = expectedLocs.flatMap(\n+          TestingUtils.locationFromString(_, workspace)\n+        )\n+        _ <- server.assertTypeDefinition(\n+          queryStr = query,\n+          expectedLocs = expected,\n+          root = workspace,\n+          isJava8 = isJava8\n+        )\n+        _ = assertNoDiagnostics()\n+        _ = if (!server.server.isInitialized.get())\n+          fail(\"Build tool not initialized\")\n+      } yield ()\n+    }\n+  }\n+\n+  def locationsToCode(\n+      code: String,\n+      uri: String,\n+      offsetRange: l.Range,\n+      locations: List[l.Location]\n+  ): String = {\n+    val edits = locations.flatMap { loc =>\n+      {\n+        val location = new l.Location(\n+          workspace.toURI.relativize(new java.net.URI(loc.getUri)).toString,\n+          loc.getRange\n+        )\n+        locationToCode(code, uri, offsetRange, location)\n+      }\n+    }\n+    TextEdits.applyEdits(code, edits)\n+  }\n+\n+  def obtainedAndExpected(original: String, uri: String): Future[String] = {\n+    val code = TestingUtils.prepareDefinition(original)\n+    val offset = code.indexOf(\"@@\")\n+    if (offset < 0) fail(\"@@ missing\")\n+\n+    val offsetRange = Position.Range(Input.String(code), offset, offset).toLSP\n+    val locationsF = server.typeDefinition(uri, code)\n+    locationsF.map(l => locationsToCode(code, uri, offsetRange, l))\n+  }\n+\n+  def checkTypeDefinition(\n+      query: String,\n+      name: String = \"Main.scala\"\n+  ): Future[Unit] = {\n+    val obtainedF =\n+      obtainedAndExpected(query, workspace.toURI.resolve(name).toString)\n+\n+    val expected = query\n+    obtainedF.map(o => assertNoDiff(o, expected))\n+  }\n+\n+}"
  }
]