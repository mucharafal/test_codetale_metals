[
  {
    "id" : "8f43d71f-f81a-49b6-96d5-19df795f056a",
    "prId" : 720,
    "comments" : [
      {
        "id" : "6852ea60-866a-47dd-ad09-1a512dc1c5a9",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Nice! ",
        "createdAt" : "2019-05-15T13:52:06Z",
        "updatedAt" : "2019-05-16T11:54:05Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "09333275-e7e8-411b-98ca-01f68c342685",
        "parentId" : "6852ea60-866a-47dd-ad09-1a512dc1c5a9",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "but not ideal :(\r\nit could also cover the UI name and command arguments like in:\r\n`<<name shown on the UI | command(arg1, arg2, arg3)>>`\r\ne.g. `<<run|metals-scala-run(file://foo/Main.scala,Main)>>`\r\n\r\nbut it would be much more cluttered (not to mention, that it would be ugly when expecting a `uri` argument.\r\n",
        "createdAt" : "2019-05-15T14:22:26Z",
        "updatedAt" : "2019-05-16T11:54:05Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cb4d2455-978a-4565-9006-af8df1de9700",
        "parentId" : "6852ea60-866a-47dd-ad09-1a512dc1c5a9",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "URIs can be pretty-printed to relative files. I think it might be best to to display the text that appears in the editor and ignore the command ID and arguments (since they're implementation details). We care most about how the code lens appears in the UI, we should test the functionality works as expected separately.",
        "createdAt" : "2019-05-15T14:46:47Z",
        "updatedAt" : "2019-05-16T11:54:05Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b142f5cd4b8e8230bbc6afa68fbe49c21214b35d",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,41 @@\n+package tests\n+import scala.concurrent.Future\n+\n+object CodeLensesSlowSuite extends BaseSlowSuite(\"codeLenses\") {\n+  testAsync(\"run\") {\n+    for {\n+      _ <- server.initialize(\n+        \"\"\"|/metals.json\n+           |{\n+           |  \"a\": { }\n+           |}\n+           |\n+           |/a/src/main/scala/Main.scala\n+           |object Main {\n+           |  def main(args: Array[String]): Unit = {}\n+           |}\"\"\".stripMargin\n+      )\n+      _ <- verifyCodeLenses(\n+        \"a/src/main/scala/Main.scala\",\n+        \"\"\"<<metals-scala-run>>"
  },
  {
    "id" : "6c60658d-fea7-4ec7-aad8-e0a3d620835b",
    "prId" : 720,
    "comments" : [
      {
        "id" : "dcf559da-a24a-4924-b39c-c11cd2271ac2",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "by convention, we use \"assert\" as a prefix for functions that compare two strings: `assertCodeLens`. This would be consistent with for example `assertCompletion`",
        "createdAt" : "2019-05-15T14:48:06Z",
        "updatedAt" : "2019-05-16T11:54:05Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b142f5cd4b8e8230bbc6afa68fbe49c21214b35d",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,41 @@\n+package tests\n+import scala.concurrent.Future\n+\n+object CodeLensesSlowSuite extends BaseSlowSuite(\"codeLenses\") {\n+  testAsync(\"run\") {\n+    for {\n+      _ <- server.initialize(\n+        \"\"\"|/metals.json\n+           |{\n+           |  \"a\": { }\n+           |}\n+           |\n+           |/a/src/main/scala/Main.scala\n+           |object Main {\n+           |  def main(args: Array[String]): Unit = {}\n+           |}\"\"\".stripMargin\n+      )\n+      _ <- verifyCodeLenses("
  },
  {
    "id" : "0a87a9a7-ac60-49ef-970f-08d2ced114a1",
    "prId" : 721,
    "comments" : [
      {
        "id" : "9d47bdc1-b814-446f-a6c4-d06471d4ae1f",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Can we add another test case for the situation when there are two main classes in the same build target?",
        "createdAt" : "2019-05-20T10:35:32Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e3c999e9b79f7d0d6a4c95756d12ec54f6abbc90",
    "line" : 69,
    "diffHunk" : "@@ -0,0 +1,69 @@\n+package tests\n+import scala.concurrent.Future\n+\n+object CodeLensesSlowSuite extends BaseSlowSuite(\"codeLenses\") {\n+  testAsync(\"run\") {\n+    for {\n+      _ <- server.initialize(\n+        \"\"\"|/metals.json\n+           |{\n+           |  \"a\": { }\n+           |}\n+           |\n+           |/a/src/main/scala/Main.scala\n+           |object Main {\n+           |  def main(args: Array[String]): Unit = {}\n+           |}\"\"\".stripMargin\n+      )\n+      _ <- assertCodeLenses(\n+        \"a/src/main/scala/Main.scala\",\n+        \"\"\"<<run>>\n+          |object Main {\n+          |  def main(args: Array[String]): Unit = {}\n+          |}\n+          |\"\"\".stripMargin\n+      )\n+    } yield ()\n+  }\n+\n+  /**\n+   * Tests, whether main class in one project does not affect\n+   * other class with same name in other project\n+   */\n+  testAsync(\"run-multi-module\") {"
  },
  {
    "id" : "b4c74626-1507-4c5f-b6cf-2ff9da19f7a1",
    "prId" : 721,
    "comments" : [
      {
        "id" : "fad10b15-0ce6-4efd-941b-3d84496884c4",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "nit: use `//` comment. Scaladocs should be reserved for definitions.",
        "createdAt" : "2019-05-20T10:36:04Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e3c999e9b79f7d0d6a4c95756d12ec54f6abbc90",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,69 @@\n+package tests\n+import scala.concurrent.Future\n+\n+object CodeLensesSlowSuite extends BaseSlowSuite(\"codeLenses\") {\n+  testAsync(\"run\") {\n+    for {\n+      _ <- server.initialize(\n+        \"\"\"|/metals.json\n+           |{\n+           |  \"a\": { }\n+           |}\n+           |\n+           |/a/src/main/scala/Main.scala\n+           |object Main {\n+           |  def main(args: Array[String]): Unit = {}\n+           |}\"\"\".stripMargin\n+      )\n+      _ <- assertCodeLenses(\n+        \"a/src/main/scala/Main.scala\",\n+        \"\"\"<<run>>\n+          |object Main {\n+          |  def main(args: Array[String]): Unit = {}\n+          |}\n+          |\"\"\".stripMargin\n+      )\n+    } yield ()\n+  }\n+\n+  /**\n+   * Tests, whether main class in one project does not affect"
  },
  {
    "id" : "cc801efe-7840-44e6-938f-59fa6406e3c9",
    "prId" : 942,
    "comments" : [
      {
        "id" : "0227d1eb-5d60-49ef-9793-0c7b52a1d5fd",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Maybe we should report it as a bug in Bloop?",
        "createdAt" : "2019-09-25T11:27:02Z",
        "updatedAt" : "2019-10-04T07:32:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "47ea581fbaa603a2dc171e3e913392f05fc4ba11",
    "line" : null,
    "diffHunk" : "@@ -96,12 +93,48 @@ object CodeLensesSlowSuite extends BaseSlowSuite(\"codeLenses\") {\n     } yield ()\n   }\n \n+  testAsync(\"remove-stale-lenses\") {\n+    for {\n+      _ <- server.initialize(\n+        \"\"\"|/metals.json\n+           |{\n+           |  \"a\": { }\n+           |}\n+           |\n+           |/a/src/main/scala/Main.scala\n+           |object Main {\n+           |  def main(args: Array[String]): Unit = {}\n+           |}\"\"\".stripMargin\n+      )\n+      _ <- assertCodeLenses(\n+        \"a/src/main/scala/Main.scala\",\n+        \"\"\"<<run>>\n+          |object Main {\n+          |  def main(args: Array[String]): Unit = {}\n+          |}\n+          |\"\"\".stripMargin\n+      )\n+      _ <- server.didSave(\"a/src/main/scala/Main.scala\")(\n+        text => text.replace(\"object Main\", \"class Main\")\n+      )\n+      _ <- assertCodeLenses(\n+        \"a/src/main/scala/Main.scala\",\n+        \"\"\"class Main {\n+          |  def main(args: Array[String]): Unit = {}\n+          |}\n+          |\"\"\".stripMargin\n+      )\n+\n+    } yield ()\n+  }\n+\n   private def assertCodeLenses(\n       filename: String,\n       expected: String\n   ): Future[Unit] =\n     for {\n       _ <- server.didOpen(filename)\n+      _ <- server.didSave(filename)(x => x) // first compilation could have not yet persisted analysis"
  }
]