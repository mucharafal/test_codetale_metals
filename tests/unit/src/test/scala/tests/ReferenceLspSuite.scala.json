[
  {
    "id" : "494744bc-7aad-4ce5-8c08-99920a11b6ce",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "a79b980f-7c67-4fb5-bb10-029da9bf068b",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Maybe move \"\"\" to newline?",
        "createdAt" : "2020-02-10T12:12:11Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "490edb7a-704e-4198-ac5b-e0dbfde99b94",
        "parentId" : "a79b980f-7c67-4fb5-bb10-029da9bf068b",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "this is formated by scalafix.",
        "createdAt" : "2020-02-11T08:53:43Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : 64,
    "diffHunk" : "@@ -212,4 +214,174 @@ class ReferenceLspSuite extends BaseLspSuite(\"reference\") {\n       _ = server.assertReferenceDefinitionBijection()\n     } yield ()\n   }\n+\n+  test(\"method-hierarchy\") {\n+    cleanWorkspace()\n+    for {\n+      _ <- server.initialize(\n+        \"\"\"\n+          |/metals.json\n+          |{\n+          |  \"a\": {}\n+          |}\n+          |/a/src/main/scala/a/A.scala\n+          |\n+          |package a\n+          |\n+          |object TestHierarchy {\n+          |\n+          |  class A { def fx(): Unit = () }\n+          |  class B extends A { override def fx(): Unit = () }\n+          |  class C extends B { override def fx(): Unit = () }\n+          |  class D extends C\n+          |  class E extends D { override def fx(): Unit = () }\n+          |\n+          |  class X { def fx(): Unit = () }\n+          |\n+          |  val a = new A()\n+          |  a.fx()\n+          |\n+          |  val b = new B();\n+          |  b.fx()\n+          |\n+          |  val c = new C();\n+          |  c.fx()\n+          |\n+          |  val d = new D();\n+          |  d.fx()\n+          |\n+          |  val e = new E();\n+          |  e.fx()\n+          |}\n+          |\n+          |\"\"\".stripMargin\n+      )\n+      expectedDiff = \"\"\""
  },
  {
    "id" : "37ecf4d9-addf-4818-8570-181e4e4e7d62",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "8f92ea0a-d060-45d4-a8da-b76e4fc5eb21",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Move to next line?",
        "createdAt" : "2020-02-10T12:12:25Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "64b0db1c-2ab1-4b56-90bc-3062497459d1",
        "parentId" : "8f92ea0a-d060-45d4-a8da-b76e4fc5eb21",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "this is formated by scalafix.",
        "createdAt" : "2020-02-11T08:53:53Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : 151,
    "diffHunk" : "@@ -212,4 +214,174 @@ class ReferenceLspSuite extends BaseLspSuite(\"reference\") {\n       _ = server.assertReferenceDefinitionBijection()\n     } yield ()\n   }\n+\n+  test(\"method-hierarchy\") {\n+    cleanWorkspace()\n+    for {\n+      _ <- server.initialize(\n+        \"\"\"\n+          |/metals.json\n+          |{\n+          |  \"a\": {}\n+          |}\n+          |/a/src/main/scala/a/A.scala\n+          |\n+          |package a\n+          |\n+          |object TestHierarchy {\n+          |\n+          |  class A { def fx(): Unit = () }\n+          |  class B extends A { override def fx(): Unit = () }\n+          |  class C extends B { override def fx(): Unit = () }\n+          |  class D extends C\n+          |  class E extends D { override def fx(): Unit = () }\n+          |\n+          |  class X { def fx(): Unit = () }\n+          |\n+          |  val a = new A()\n+          |  a.fx()\n+          |\n+          |  val b = new B();\n+          |  b.fx()\n+          |\n+          |  val c = new C();\n+          |  c.fx()\n+          |\n+          |  val d = new D();\n+          |  d.fx()\n+          |\n+          |  val e = new E();\n+          |  e.fx()\n+          |}\n+          |\n+          |\"\"\".stripMargin\n+      )\n+      expectedDiff = \"\"\"\n+                       |a/src/main/scala/a/A.scala:6:17: info: reference\n+                       |  class A { def fx(): Unit = () }\n+                       |                ^^\n+                       |a/src/main/scala/a/A.scala:7:36: info: reference\n+                       |  class B extends A { override def fx(): Unit = () }\n+                       |                                   ^^\n+                       |a/src/main/scala/a/A.scala:8:36: info: reference\n+                       |  class C extends B { override def fx(): Unit = () }\n+                       |                                   ^^\n+                       |a/src/main/scala/a/A.scala:10:36: info: reference\n+                       |  class E extends D { override def fx(): Unit = () }\n+                       |                                   ^^\n+                       |a/src/main/scala/a/A.scala:15:5: info: reference\n+                       |  a.fx()\n+                       |    ^^\n+                       |a/src/main/scala/a/A.scala:18:5: info: reference\n+                       |  b.fx()\n+                       |    ^^\n+                       |a/src/main/scala/a/A.scala:21:5: info: reference\n+                       |  c.fx()\n+                       |    ^^\n+                       |a/src/main/scala/a/A.scala:24:5: info: reference\n+                       |  d.fx()\n+                       |    ^^\n+                       |a/src/main/scala/a/A.scala:27:5: info: reference\n+                       |  e.fx()\n+                       |    ^^\n+                       |\"\"\".stripMargin\n+      _ <- server.didOpen(\"a/src/main/scala/a/A.scala\")\n+      _ = assertNoDiagnostics()\n+      _ = server.assertReferenceDiff(\n+        \"a/src/main/scala/a/A.scala\",\n+        \"b.fx\",\n+        expectedDiff\n+      )\n+      _ = server.assertReferenceDiff(\n+        \"a/src/main/scala/a/A.scala\",\n+        \"e.fx\",\n+        expectedDiff\n+      )\n+      _ = server.assertReferenceDiff(\n+        \"a/src/main/scala/a/A.scala\",\n+        \"a.fx\",\n+        expectedDiff\n+      )\n+    } yield ()\n+  }\n+\n+  test(\"method-hierarchy-multiple-files\") {\n+    cleanWorkspace()\n+    for {\n+      _ <- server.initialize(\n+        \"\"\"\n+          |/metals.json\n+          |{\n+          |  \"a\": {},\n+          |  \"b\": {\"dependsOn\": [\"a\"]}\n+          |}\n+          |/a/src/main/scala/a/A.scala\n+          |package a\n+          |class A { def fx(): Unit = () }\n+          |class B extends A { override def fx(): Unit = () }\n+          |class C extends B { override def fx(): Unit = () }\n+          |class D extends C\n+          |class E extends D { override def fx(): Unit = () }\n+          |\n+          |object A {\n+          |  val a = new A()\n+          |  a.fx()\n+          |  val b = new B();\n+          |  b.fx()\n+          |  val c = new C();\n+          |  c.fx()\n+          |  val d = new D();\n+          |  d.fx()\n+          |  val e = new E();\n+          |  e.fx()\n+          |}\n+          |/b/src/main/scala/b/B.scala\n+          |package b\n+          |object B {\n+          |  val bc = new a.C()\n+          |  bc.fx()\n+          |}\n+          |\"\"\".stripMargin\n+      )\n+      expectedDiff = \"\"\""
  },
  {
    "id" : "b6a30fa5-35eb-4657-ae79-39f6bb7f6a2b",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "91b75033-fe7c-43a4-a149-3487825cea9b",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I was wrong, let's put it after the code definition, since it's more natural to read.",
        "createdAt" : "2020-02-17T13:11:13Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -212,4 +214,176 @@ class ReferenceLspSuite extends BaseLspSuite(\"reference\") {\n       _ = server.assertReferenceDefinitionBijection()\n     } yield ()\n   }\n+\n+  test(\"method-hierarchy\") {\n+    cleanWorkspace()\n+    val expectedDiff ="
  },
  {
    "id" : "29beda35-d364-41e5-8f79-7a77c427bb49",
    "prId" : 1727,
    "comments" : [
      {
        "id" : "a9dc711a-07ef-4d5a-9f02-cfd33bf92c4e",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Let's maybe add the reference to https://github.com/scalameta/metals/issues/1553\r\n",
        "createdAt" : "2020-05-22T17:05:17Z",
        "updatedAt" : "2020-05-25T10:33:20Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "90682414-f914-4f54-bf07-20978c0c876e",
        "parentId" : "a9dc711a-07ef-4d5a-9f02-cfd33bf92c4e",
        "author" : {
          "login" : "faizk",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1107648?v=4"
        },
        "body" : "OK, I'm going to reference the conversation where it becomes clear that we've got 2 bugs (and what the bugs are).",
        "createdAt" : "2020-05-25T10:36:53Z",
        "updatedAt" : "2020-05-25T10:36:53Z",
        "lastEditedBy" : {
          "login" : "faizk",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1107648?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "18d3a1ef96a22a70b89b2a3d28b7cda48cae9f3f",
    "line" : null,
    "diffHunk" : "@@ -107,6 +107,113 @@ class ReferenceLspSuite extends BaseRangesSuite(\"reference\") {\n     } yield ()\n   }\n \n+  /** References should be found correctly regardless of the whether or not\n+   *  the declaring code and the refering share the same compilation unit.\n+   *\n+   *  This checks both cases by first placing them in the same file and then\n+   *  spread across different files. The package stays the same - this is\n+   *  actually necessary to test that references to synthetics can be found\n+   *  even in the absence of an explicit `import`, which is often the case when\n+   *  the referencing code shares with the declaring code the same package\n+   *  (but possibly a different compilation unit)\n+   */\n+  def checkInSamePackage(\n+      name: String,\n+      code: String,\n+      moreCode: String*\n+  ): Unit = {\n+    def input(chunks: Seq[String]): String =\n+      chunks.zipWithIndex\n+        .map {\n+          case (chunk, i) =>\n+            s\"\"\"|/a/src/main/scala/a/Chunk$i.scala\n+                |package a\n+                |$chunk\n+                |\"\"\".stripMargin\n+        }\n+        .mkString(\"\\n\")\n+    check(s\"$name-together\", input(Seq((code +: moreCode) mkString \"\\n\")))\n+    check(s\"$name-split-up\", input(code +: moreCode))\n+  }\n+\n+  checkInSamePackage(\n+    \"simple-case-class\",\n+    \"\"\"|case class <<Ma@@in>>(name: String)\n+       |object F {\n+       |  val ma = <<Main>>(\"a\")\n+       |}\n+       |\"\"\".stripMargin,\n+    \"\"\"|object Other {\n+       |  val mb = <<Main>>.apply(\"b\")\n+       |}\n+       |\"\"\".stripMargin\n+  )\n+\n+  checkInSamePackage( // FIXME: doesn't find the case class declaration"
  }
]