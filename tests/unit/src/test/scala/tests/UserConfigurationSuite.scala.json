[
  {
    "id" : "42285156-7b10-4288-872f-2b31cf017f58",
    "prId" : 387,
    "comments" : [
      {
        "id" : "0a7889ac-db45-4593-b86b-1d95e8e3c5bd",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "See my comment above, the client actually sends these nested inside a `\"metals\"` key.",
        "createdAt" : "2018-12-08T17:49:46Z",
        "updatedAt" : "2018-12-09T18:05:10Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4d3fee01-4cfa-4854-bb9b-6c5f2de268ca",
        "parentId" : "0a7889ac-db45-4593-b86b-1d95e8e3c5bd",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Adding more details to this.\r\n\r\nI strongly suspect there's no agreement on how clients will send this.\r\nI'm sure VSCode will wrap the settings in `metals`, but by reading the code I don't think Atom does the same. It looks like it will send them wrapped in `settings`.\r\n\r\n@laughedelic I don't have Atom on my machine. If you have a minute, can you confirm which format Atom uses for configuration?",
        "createdAt" : "2018-12-09T10:32:52Z",
        "updatedAt" : "2018-12-09T18:05:10Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3308eb73-f78b-4a0d-b7c3-ef2c366e19af",
        "parentId" : "0a7889ac-db45-4593-b86b-1d95e8e3c5bd",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Atom seems to send the same structure as vscode\r\n```json\r\n{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"method\": \"workspace/didChangeConfiguration\",\r\n  \"params\": {\r\n    \"settings\": {\r\n      \"metals\": {\r\n        \"version\": \"0.4.0-SNAPSHOT\",\r\n        \"javaArgs\": [\r\n          \"-XX:+UseG1GC\",\r\n          \"-XX:+UseStringDeduplication\",\r\n          \"-Xss4m\",\r\n          \"-Xms1G\",\r\n          \"-Xmx4G\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}\r\n```",
        "createdAt" : "2018-12-09T11:58:24Z",
        "updatedAt" : "2018-12-09T18:05:10Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8aaa7187-a07e-42ee-815d-34183d72c7ee",
        "parentId" : "0a7889ac-db45-4593-b86b-1d95e8e3c5bd",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Right, Atom wraps it in `settings`:\r\n\r\nhttps://github.com/atom/atom-languageclient/blob/cc8975d70c7e93b3d017ad7454635bb14f9439ac/lib/auto-languageclient.ts#L340-L342\r\n\r\nAnd there is a hook to transform the configuration object before sending it to the server:\r\n\r\nhttps://github.com/atom/atom-languageclient/blob/cc8975d70c7e93b3d017ad7454635bb14f9439ac/lib/auto-languageclient.ts#L220-L228",
        "createdAt" : "2018-12-09T13:23:57Z",
        "updatedAt" : "2018-12-09T18:05:10Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1b1118ae5909e6fd535bcd79958b0dfde37041e3",
    "line" : 59,
    "diffHunk" : "@@ -0,0 +1,127 @@\n+package tests\n+\n+import com.google.gson.JsonParser\n+import java.util.Properties\n+import scala.meta.internal.metals.UserConfiguration\n+import scala.collection.JavaConverters._\n+\n+object UserConfigurationSuite extends BaseSuite {\n+  def check(\n+      name: String,\n+      original: String,\n+      props: Map[String, String] = Map.empty\n+  )(fn: Either[List[String], UserConfiguration] => Unit): Unit = {\n+    test(name) {\n+      val json = new JsonParser().parse(original).getAsJsonObject\n+      val jprops = new Properties()\n+      jprops.putAll(props.asJava)\n+      val obtained = UserConfiguration.fromJson(json, jprops)\n+      fn(obtained)\n+    }\n+  }\n+\n+  def checkOK(\n+      name: String,\n+      original: String,\n+      props: Map[String, String] = Map.empty\n+  )(fn: UserConfiguration => Unit): Unit = {\n+    check(name, original, props) {\n+      case Left(errs) =>\n+        fail(s\"Expected success. Obtained error: $errs\")\n+      case Right(obtained) =>\n+        fn(obtained)\n+    }\n+  }\n+  def checkError(\n+      name: String,\n+      original: String,\n+      expected: String\n+  ): Unit = {\n+    check(name, original) {\n+      case Right(ok) =>\n+        fail(s\"Expected error. Obtained successful value $ok\")\n+      case Left(errs) =>\n+        val obtained = errs.mkString(\"\\n\")\n+        assertNoDiff(obtained, expected)\n+    }\n+  }\n+\n+  checkOK(\n+    \"basic\",\n+    \"\"\"\n+      |{\n+      | \"sbt-launcher\": \"launch\",\n+      | \"java-home\": \"home\",\n+      | \"sbt-options\": \"a b\"\n+      |}\n+    \"\"\".stripMargin"
  }
]