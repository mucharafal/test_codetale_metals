[
  {
    "id" : "b60e9555-d131-47ce-bb6f-7f5d67c89886",
    "prId" : 1277,
    "comments" : [
      {
        "id" : "be191258-668f-488b-bc5e-962007404939",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "This exists almost verbatim in funsuite, but it's a private method",
        "createdAt" : "2020-01-09T11:54:16Z",
        "updatedAt" : "2020-01-26T10:34:42Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5bc1d91e-2143-42c1-97af-2c35d4176102",
        "parentId" : "be191258-668f-488b-bc5e-962007404939",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "We can make it public in FunSuite",
        "createdAt" : "2020-01-09T14:51:21Z",
        "updatedAt" : "2020-01-26T10:34:42Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "49287d98409399c613ea481aeb08529f827e5982",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,90 @@\n+package tests\n+\n+import funsuite.Location\n+import scala.meta.io.AbsolutePath\n+import scala.collection.JavaConverters._\n+\n+trait Assertions extends funsuite.Assertions {\n+\n+  def unifiedDiff(expected: String, obtained: String): String = {\n+    def splitIntoLines(string: String): Seq[String] =\n+      string.trim.replace(\"\\r\\n\", \"\\n\").split(\"\\n\")\n+\n+    val references = splitIntoLines(expected).asJava\n+    val definition = splitIntoLines(obtained).asJava\n+    val diff = difflib.DiffUtils.diff(references, definition)\n+    difflib.DiffUtils\n+      .generateUnifiedDiff(\n+        \"references\",\n+        \"definition\",\n+        references,\n+        diff,\n+        1\n+      )\n+      .asScala\n+      .iterator\n+      .filterNot(_.startsWith(\"@@\"))\n+      .mkString(\"\\n\")\n+  }"
  },
  {
    "id" : "c76d7c86-c6e9-4ba5-bfeb-b770a92994fc",
    "prId" : 1277,
    "comments" : [
      {
        "id" : "62241aa3-0209-48ee-9ee5-f716db5c650f",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "What the comment says",
        "createdAt" : "2020-01-09T11:54:43Z",
        "updatedAt" : "2020-01-26T10:34:42Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "49287d98409399c613ea481aeb08529f827e5982",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,90 @@\n+package tests\n+\n+import funsuite.Location\n+import scala.meta.io.AbsolutePath\n+import scala.collection.JavaConverters._\n+\n+trait Assertions extends funsuite.Assertions {\n+\n+  def unifiedDiff(expected: String, obtained: String): String = {\n+    def splitIntoLines(string: String): Seq[String] =\n+      string.trim.replace(\"\\r\\n\", \"\\n\").split(\"\\n\")\n+\n+    val references = splitIntoLines(expected).asJava\n+    val definition = splitIntoLines(obtained).asJava\n+    val diff = difflib.DiffUtils.diff(references, definition)\n+    difflib.DiffUtils\n+      .generateUnifiedDiff(\n+        \"references\",\n+        \"definition\",\n+        references,\n+        diff,\n+        1\n+      )\n+      .asScala\n+      .iterator\n+      .filterNot(_.startsWith(\"@@\"))\n+      .mkString(\"\\n\")\n+  }\n+\n+  def assertNoDiffOrPrintObtained(\n+      obtained: String,\n+      expected: String\n+  )(implicit loc: Location): Unit = {\n+    // FIXME(gabro): surface this in funsuite Assertions\n+    funsuite.internal.Diffs.assertNoDiffOrPrintExpected(obtained, expected)\n+  }"
  },
  {
    "id" : "7d936fa3-98c4-43d1-9b84-54e70571a21a",
    "prId" : 1277,
    "comments" : [
      {
        "id" : "32a5fabf-3bf6-4b83-aba3-2e168bf6fe59",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Does this print the obtained when it fails?",
        "createdAt" : "2020-01-16T07:35:51Z",
        "updatedAt" : "2020-01-26T10:34:42Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e4d17403-1b2d-49ae-90fe-5774425f9dfe",
        "parentId" : "32a5fabf-3bf6-4b83-aba3-2e168bf6fe59",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Yes. Thatâ€™s the default behavior",
        "createdAt" : "2020-01-16T07:43:45Z",
        "updatedAt" : "2020-01-26T10:34:42Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6a02707b-2aa9-4be3-8c4f-6f5152dbb76e",
        "parentId" : "32a5fabf-3bf6-4b83-aba3-2e168bf6fe59",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "cool, than we can just remove this method and use `assertNoDiff` directly",
        "createdAt" : "2020-01-16T07:49:34Z",
        "updatedAt" : "2020-01-26T10:34:42Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "49287d98409399c613ea481aeb08529f827e5982",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,70 @@\n+package tests\n+\n+import munit.Location\n+import scala.meta.io.AbsolutePath\n+\n+trait Assertions extends munit.Assertions {\n+\n+  def assertNoDiffOrPrintObtained(\n+      obtained: String,\n+      expected: String\n+  )(implicit loc: Location): Unit = {\n+    // FIXME(gabro): surface this in funsuite Assertions\n+    munit.Diffs.assertNoDiff(obtained, expected)"
  },
  {
    "id" : "54705daf-6db8-4a6f-8466-330f35b1c3e2",
    "prId" : 1526,
    "comments" : [
      {
        "id" : "ee097e99-797e-4cda-a3d8-a7bc0213b5a9",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "So I'm a bit stuck with this. I feel like this isn't doing anything since I'm just using the same logic to sort in `ReferenceProvider` as we are to test it. I know this isn't right. However, again, the way the tests are, it doesn't make it easy to be explicit about what exactly is going to be returned. Do you think it makes sense to change the input of `check` to include another parameter that is just a string representation of the expected references to ensure that they are in order?",
        "createdAt" : "2020-03-24T13:27:43Z",
        "updatedAt" : "2020-03-26T06:02:00Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "13e263e8bec9aef93562dd691f75ec7caa748212",
    "line" : null,
    "diffHunk" : "@@ -57,6 +58,24 @@ trait Assertions extends munit.Assertions {\n     }\n   }\n \n+  def assertReferencesInOrder(locations: List[lsp4j.Location]): Unit = {\n+\n+    val grouped = locations.groupBy(_.getUri)\n+    def sortByLocationPosition(\n+        l1: lsp4j.Location,\n+        l2: lsp4j.Location\n+    ): Boolean = {\n+      l1.getRange.getStart.getLine < l2.getRange.getStart.getLine\n+    }\n+\n+    grouped.foreach {\n+      case (_, group) =>\n+        assertNoDiff("
  },
  {
    "id" : "e204b08c-cb1e-4687-a3f0-24536cf57e61",
    "prId" : 1526,
    "comments" : [
      {
        "id" : "668c1e63-dc1d-42c8-97d2-04637a091b30",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "So, I just took a step back and tried to make this as simple as possible. In order to actually be able to just leave the new reference suite the way you had it @tgodzik I just grab the locations when I have them, group them by uri, grab all the line starts, and then assert that they are in order for each uri. The alternative to this would be having to make an entirely different way to do the check. I feel like this is the easiest way to do a simple check on the ordering. What do you think?",
        "createdAt" : "2020-03-26T06:04:55Z",
        "updatedAt" : "2020-03-26T06:04:56Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "13e263e8bec9aef93562dd691f75ec7caa748212",
    "line" : 11,
    "diffHunk" : "@@ -57,6 +58,15 @@ trait Assertions extends munit.Assertions {\n     }\n   }\n \n+  def assertSimpleLocationOrdering(locations: List[lsp4j.Location]): Unit = {"
  }
]