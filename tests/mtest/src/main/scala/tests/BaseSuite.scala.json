[
  {
    "id" : "236aa4c1-1ac4-402e-aed9-dc0553ce1a9d",
    "prId" : 621,
    "comments" : [
      {
        "id" : "c115033f-5426-4b89-a25e-680045945ea2",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I think the IntelliJ formatter does this sometimes, I'm not sure why. It would be nice to limit diffs like this to avoid conflicts.",
        "createdAt" : "2019-04-02T14:31:22Z",
        "updatedAt" : "2019-04-05T09:13:03Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c564ca2b-10be-44a3-8f2c-05e33f474ce6",
        "parentId" : "c115033f-5426-4b89-a25e-680045945ea2",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I disabled the Intellij formater - should have any more problems.",
        "createdAt" : "2019-04-04T14:03:47Z",
        "updatedAt" : "2019-04-05T09:13:03Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6f03d2264f9c4e8e28d2e258ca99d24915c82e17",
    "line" : null,
    "diffHunk" : "@@ -22,23 +22,33 @@ import scala.meta.internal.metals.Testing\n  */\n class BaseSuite extends TestSuite {\n   Testing.enable()\n+"
  },
  {
    "id" : "95d9dfa5-4977-4209-b9fd-b52d83d3fa6e",
    "prId" : 1171,
    "comments" : [
      {
        "id" : "67471c36-217e-41d0-80b7-6b0e20763b00",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "nit: let's remove this helper and use `if (isValidScalaVersion(..)` instead",
        "createdAt" : "2019-12-15T11:49:24Z",
        "updatedAt" : "2019-12-16T16:29:10Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ca11c6e6-ab4e-46d3-b279-33c31d2535f2",
        "parentId" : "67471c36-217e-41d0-80b7-6b0e20763b00",
        "author" : {
          "login" : "isomarcte",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/6734045?u=7d31a74744a3bf20f443ec7b7e84b95bb4ceb397&v=4"
        },
        "body" : "Once we decide on what to do here (https://github.com/scalameta/metals/pull/1171#discussion_r357985278) I'll remove this.",
        "createdAt" : "2019-12-15T15:13:12Z",
        "updatedAt" : "2019-12-16T16:29:10Z",
        "lastEditedBy" : {
          "login" : "isomarcte",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/6734045?u=7d31a74744a3bf20f443ec7b7e84b95bb4ceb397&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "49558cba-2567-4c18-bca3-882e70ee45fc",
        "parentId" : "67471c36-217e-41d0-80b7-6b0e20763b00",
        "author" : {
          "login" : "isomarcte",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/6734045?u=7d31a74744a3bf20f443ec7b7e84b95bb4ceb397&v=4"
        },
        "body" : "Updated.",
        "createdAt" : "2019-12-16T15:56:24Z",
        "updatedAt" : "2019-12-16T16:29:10Z",
        "lastEditedBy" : {
          "login" : "isomarcte",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/6734045?u=7d31a74744a3bf20f443ec7b7e84b95bb4ceb397&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9e846caa6fa993ed1b3cd404be6e07dc74d46b64",
    "line" : null,
    "diffHunk" : "@@ -37,6 +37,21 @@ class BaseSuite extends TestSuite {\n   def beforeAll(): Unit = ()\n   def afterAll(): Unit = ()\n   def intercept[T: ClassTag](exprs: Unit): T = macro Asserts.interceptProxy[T]\n+  def isValidScalaVersionForEnv(scalaVersion: String): Boolean =\n+    ScalaVersion\n+      .fromString(scalaVersion)\n+      .fold(\n+        (e: ScalaVersion.ScalaVersionParseError) => this.fail(e.errorMessage),\n+        (sv: ScalaVersion) => ScalaVersion.validScalaVersionForCurrentJDK(sv)\n+      )\n+\n+  def guardOnScalaVersion(scalaVersion: String)(f: => Unit): Unit ="
  },
  {
    "id" : "130f0315-a3f8-4d26-b6ae-11a0541d539b",
    "prId" : 1254,
    "comments" : [
      {
        "id" : "8a81584f-932b-4f29-b408-4d7e53ac9b9e",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I'm tempted to do\r\n\r\n```scala\r\n    test(utest.ufansi.Color.LightRed(s\"EXPECTED FAILURE - $name\").toString()) {\r\n      intercept[TestFailedException](fun)\r\n    }\r\n```\r\n\r\nand obtain\r\n\r\n![image](https://user-images.githubusercontent.com/691940/71780886-51c43800-2fc8-11ea-984c-16a32f316c65.png)\r\n\r\n\r\nbut then it becomes hard to select a single test to run.",
        "createdAt" : "2020-01-05T13:33:28Z",
        "updatedAt" : "2020-01-05T17:30:54Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d124a7fc-c0d2-46b4-9430-cfa4294df560",
        "parentId" : "8a81584f-932b-4f29-b408-4d7e53ac9b9e",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I agree it’s better to leave the test name unchanged. ",
        "createdAt" : "2020-01-05T13:49:21Z",
        "updatedAt" : "2020-01-05T17:30:54Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8c01432863b62a73bbfb809ed6739a6bf33ed62f",
    "line" : null,
    "diffHunk" : "@@ -149,6 +149,11 @@ class BaseSuite extends TestSuite {\n       myTests += FlatTest(name, () => fun)\n     }\n   }\n+\n+  def failingTest(name: String)(fun: => Any): Unit = {\n+    test(name)(intercept[TestFailedException](fun))"
  },
  {
    "id" : "cedb720d-108f-436c-938a-c87f52c14cb6",
    "prId" : 1254,
    "comments" : [
      {
        "id" : "e10a9b2c-dc6d-4ba3-aa07-f5771f72e211",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "“testFailing”?",
        "createdAt" : "2020-01-05T13:50:46Z",
        "updatedAt" : "2020-01-05T17:30:54Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8c01432863b62a73bbfb809ed6739a6bf33ed62f",
    "line" : null,
    "diffHunk" : "@@ -149,6 +149,11 @@ class BaseSuite extends TestSuite {\n       myTests += FlatTest(name, () => fun)\n     }\n   }\n+\n+  def failingTest(name: String)(fun: => Any): Unit = {"
  },
  {
    "id" : "36da70ee-47d0-4eb3-abb6-7ff4c68d4649",
    "prId" : 1254,
    "comments" : [
      {
        "id" : "f2da1935-d7f9-4195-a8e5-3680dda39c0b",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I think we can avoid some duplicate logic by encoding the failure bit where we collect the tests ",
        "createdAt" : "2020-01-05T13:56:32Z",
        "updatedAt" : "2020-01-05T17:30:54Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8c01432863b62a73bbfb809ed6739a6bf33ed62f",
    "line" : null,
    "diffHunk" : "@@ -158,6 +163,15 @@ class BaseSuite extends TestSuite {\n     }\n   }\n \n+  def failingAsyncTest(name: String, maxDuration: Duration = Duration(\"10min\"))("
  },
  {
    "id" : "cde640e7-3e10-417a-9f99-0d28140f9dfa",
    "prId" : 1254,
    "comments" : [
      {
        "id" : "c56edabf-f5a4-40d8-8437-b4e184613102",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This is an improvement! I am not sure it's a good idea to add such a specific parameter to this signature however. I have wanted to add tag support down the road so that we can classify some tests for example as flaky. What do you think about this approach instead?\r\n```suggestion\r\nclass Tag\r\ncase object ExpectFailure extends Tag\r\n  def test(name: String, tags: Tag*)(fun: => Any): Unit = {\r\n    val isExpectFailure = tags.contains(ExpectFailure)\r\n```",
        "createdAt" : "2020-01-05T16:02:38Z",
        "updatedAt" : "2020-01-05T17:30:54Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b70c92a3-295d-4de9-9490-2f5ee2906c65",
        "parentId" : "c56edabf-f5a4-40d8-8437-b4e184613102",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Another design I have thought of could be to replace `name: String` with a custom data structure\r\n\r\n```scala\r\ncase class TestData(name: String, isExpectedFailure: Boolean, tags: List[Tag]) {\r\n  def isFailing: TestData = copy(isExpectedFailure = true)\r\n  def tag(t: Tags): TestData.copy(tags = t :: tags)\r\n}\r\nobject TestData {\r\n  implicit def generate(name: String): TestData = TestData(name, false, Nil)\r\n}\r\ndef test(data: TestData)(fun: => Unit): Unit = ...\r\n```\r\n\r\nThe implicit conversion will make existing tests continue to work unchanged and we can more easily introduce new APIs to tweak the test metadata\r\n\r\n```scala\r\ntest(\"issue-42\".isFailing.tag(Flaky)) { ... }\r\n```",
        "createdAt" : "2020-01-05T16:12:41Z",
        "updatedAt" : "2020-01-05T17:30:54Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7949863b-08b3-445c-86d3-b3f43afcf0d0",
        "parentId" : "c56edabf-f5a4-40d8-8437-b4e184613102",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Just validated this compiles and works as expected\r\n<img width=\"558\" alt=\"Screenshot 2020-01-05 at 17 17 27\" src=\"https://user-images.githubusercontent.com/1408093/71782871-4a5c5900-2fdf-11ea-8fee-3066759d712f.png\">\r\n",
        "createdAt" : "2020-01-05T16:17:55Z",
        "updatedAt" : "2020-01-05T17:30:54Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1d9ee7c2-b1a2-42a7-abf6-bde048828085",
        "parentId" : "c56edabf-f5a4-40d8-8437-b4e184613102",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I like the design! I've submitted a proposal that implements it",
        "createdAt" : "2020-01-05T17:03:54Z",
        "updatedAt" : "2020-01-05T17:30:54Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8c01432863b62a73bbfb809ed6739a6bf33ed62f",
    "line" : null,
    "diffHunk" : "@@ -144,15 +144,26 @@ class BaseSuite extends TestSuite {\n \n   def isTestSuiteEnabled: Boolean = true\n \n-  def test(name: String)(fun: => Any): Unit = {\n+  def test(name: String, expectFailure: Boolean = false)(fun: => Any): Unit = {"
  },
  {
    "id" : "74815a57-30cf-4317-9087-b6e61f697563",
    "prId" : 1277,
    "comments" : [
      {
        "id" : "6a099f89-3752-4225-b73f-9ef949cd42ed",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "The `skipSuite` utility may end up in funsuite (as discussed with @olafurpg)",
        "createdAt" : "2020-01-09T11:57:16Z",
        "updatedAt" : "2020-01-26T10:34:42Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "49287d98409399c613ea481aeb08529f827e5982",
    "line" : null,
    "diffHunk" : "@@ -1,196 +1,58 @@\n package tests\n \n-import scala.collection.mutable\n import scala.concurrent.Await\n import scala.concurrent.Future\n import scala.concurrent.duration.Duration\n-import scala.language.experimental.macros\n import scala.meta.internal.metals.JdkSources\n-import scala.meta.internal.metals.Testing\n import scala.meta.internal.mtags\n import scala.meta.internal.semver.SemVer\n-import scala.meta.io.AbsolutePath\n-import scala.reflect.ClassTag\n import scala.util.Properties\n-import utest.TestSuite\n-import utest.Tests\n-import utest.asserts.Asserts\n-import utest.framework.Formatter\n-import utest.framework.TestCallTree\n-import utest.framework.Tree\n-import utest.ufansi.Attrs\n-import utest.ufansi.Str\n-\n-/**\n- * Test suite that replace utest DSL with FunSuite-style syntax from ScalaTest.\n- */\n-class BaseSuite extends TestSuite with TestOptionsConversions {\n-  Testing.enable()\n+import funsuite.Test\n+import funsuite.Location\n+\n+class BaseSuite extends funsuite.FunSuite with Assertions {\n   def isJava8: Boolean =\n     !Properties.isJavaAtLeast(\"9\")\n+\n   def isScala211: Boolean =\n     mtags.BuildInfo.scalaCompilerVersion.startsWith(\"2.11\")\n+\n   def hasJdkSources: Boolean = JdkSources().isDefined\n+\n   def isWindows: Boolean =\n     Properties.isWin\n-  def isCI: Boolean =\n-    \"true\".equalsIgnoreCase(System.getenv(\"CI\"))\n-  def beforeAll(): Unit = ()\n-  def afterAll(): Unit = ()\n-  def intercept[T: ClassTag](exprs: Unit): T = macro Asserts.interceptProxy[T]\n+\n   def isValidScalaVersionForEnv(scalaVersion: String): Boolean =\n     this.isJava8 || SemVer.isCompatibleVersion(\n       BaseSuite.minScalaVersionForJDK9OrHigher,\n       scalaVersion\n     )\n \n-  def assertNotEmpty(string: String): Unit = {\n-    if (string.isEmpty) {\n-      fail(\n-        s\"expected non-empty string, obtained empty string.\",\n-        stackBump = 1\n-      )\n-    }\n-  }\n-  def assertEmpty(string: String): Unit = {\n-    if (!string.isEmpty) {\n-      fail(\n-        s\"expected empty string, obtained: $string\",\n-        stackBump = 1\n-      )\n-    }\n-  }\n-  def assertContains(string: String, substring: String): Unit = {\n-    assert(string.contains(substring))\n-  }\n-  def assertNotContains(string: String, substring: String): Unit = {\n-    assert(!string.contains(substring))\n-  }\n-  def assert(exprs: Boolean*): Unit = macro Asserts.assertProxy\n-  def assertNotEquals[T](obtained: T, expected: T, hint: String = \"\"): Unit = {\n-    if (obtained == expected) {\n-      val hintMsg = if (hint.isEmpty) \"\" else s\" (hint: $hint)\"\n-      assertNoDiff(obtained.toString, expected.toString, hint)\n-      fail(s\"obtained=<$obtained> == expected=<$expected>$hintMsg\")\n-    }\n-  }\n-  def assertEquals[T](obtained: T, expected: T, hint: String = \"\"): Unit = {\n-    if (obtained != expected) {\n-      val hintMsg = if (hint.isEmpty) \"\" else s\" (hint: $hint)\"\n-      assertNoDiff(obtained.toString, expected.toString, hint)\n-      fail(s\"obtained=<$obtained> != expected=<$expected>$hintMsg\")\n-    }\n-  }\n-  def assertNotFile(path: AbsolutePath): Unit = {\n-    if (path.isFile) {\n-      fail(s\"file exists: $path\", stackBump = 1)\n-    }\n-  }\n-  def assertIsFile(path: AbsolutePath): Unit = {\n-    if (!path.isFile) {\n-      fail(s\"no such file: $path\", stackBump = 1)\n-    }\n-  }\n-  def assertIsNotDirectory(path: AbsolutePath): Unit = {\n-    if (path.isDirectory) {\n-      fail(s\"directory exists: $path\", stackBump = 1)\n-    }\n-  }\n-  def assertNoDiff(\n-      obtained: String,\n-      expected: String,\n-      title: String = \"\"\n-  )(implicit filename: sourcecode.File, line: sourcecode.Line): Unit = {\n-    DiffAssertions.colored {\n-      DiffAssertions.assertNoDiffOrPrintObtained(\n-        obtained,\n-        expected,\n-        title,\n-        title\n-      )\n-    }\n-  }\n-  override def utestAfterAll(): Unit = afterAll()\n-\n-  override def utestFormatter: Formatter = new Formatter {\n-    override def exceptionMsgColor: Attrs = Attrs.Empty\n-    override def exceptionStackFrameHighlighter(\n-        s: StackTraceElement\n-    ): Boolean = {\n-      s.getClassName.startsWith(\"scala.meta.internal.worksheets.\") ||\n-      s.getClassName.startsWith(\"scala.meta.internal.tvp.\") ||\n-      s.getClassName.startsWith(\"scala.meta.internal.pc.\") ||\n-      s.getClassName.startsWith(\"scala.meta.internal.mtags.\") ||\n-      s.getClassName.startsWith(\"scala.meta.internal.metals.\") ||\n-      s.getClassName.startsWith(\"scala.meta.metals.\") ||\n-      s.getClassName.startsWith(\"scala.meta.pc.\") ||\n-      (s.getClassName.startsWith(\"tests\") &&\n-      !s.getClassName.startsWith(\"tests.DiffAssertions\") &&\n-      !s.getClassName.startsWith(\"tests.MegaSuite\"))\n-    }\n-    override def formatWrapWidth: Int = 3000\n-    override def formatException(x: Throwable, leftIndent: String): Str =\n-      super.formatException(x, \"\")\n-  }\n-  case class FlatTest(name: String, thunk: () => Unit)\n-  private val myTests = mutable.ArrayBuffer.empty[FlatTest]\n+  def skipSuite: Boolean = false\n \n-  def ignore(options: TestOptions)(fun: => Any): Unit = {\n-    myTests += FlatTest(\n-      utest.ufansi.Color.LightRed(s\"IGNORED - ${options.name}\").toString(),\n-      () => ()\n-    )\n-  }\n-\n-  def isTestSuiteEnabled: Boolean = true\n-\n-  def test(options: TestOptions)(fun: => Any): Unit = {\n-    if (isTestSuiteEnabled) {\n-      myTests += FlatTest(options.name, () => {\n-        if (options.tags.contains(Tag.ExpectFailure)) {\n-          intercept[TestFailedException](fun)\n-        } else {\n-          fun\n-        }\n-      })\n-    }\n+  override def funsuiteTests(): Seq[Test] = {\n+    if (skipSuite) Seq.empty\n+    else super.funsuiteTests()"
  },
  {
    "id" : "d65c1f77-42e4-45dc-b709-8c75fdb45a8a",
    "prId" : 1277,
    "comments" : [
      {
        "id" : "660e1bf2-c6e1-4061-8a54-3078b1c57040",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "should we `override def isFlakyFailureOk = isCI`?",
        "createdAt" : "2020-01-09T12:16:25Z",
        "updatedAt" : "2020-01-26T10:34:42Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a836d4a4-415a-485c-be40-d66e63af23a5",
        "parentId" : "660e1bf2-c6e1-4061-8a54-3078b1c57040",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "BTW, we should be able to implement a basic `intercept` assertion that's not macro based\r\n```scala\r\ndef intercept[T <: Throwable]body: => Unit)(implicit ev: ClassTag[T]): T = {\r\n  try {\r\n    body\r\n    fail(\"expected exception but body evaluated successfully\")\r\n  }\r\n  catch {\r\n    case NonFatal(e) =>\r\n      if (!ev.isAssignableFrom(e)) fail(\"expected ${ev.runtimeClass}, obtained ${e.getClass}\")\r\n  }\r\n```",
        "createdAt" : "2020-01-09T12:20:44Z",
        "updatedAt" : "2020-01-26T10:34:42Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ccc63d5e-9163-4157-b692-60c6d980fc99",
        "parentId" : "660e1bf2-c6e1-4061-8a54-3078b1c57040",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I'm torn about this. What's the benefit of marking flaky tests and then ignoring them vs just ignoring them? Or a bit further: why don't we just remove those tests?\r\n\r\n",
        "createdAt" : "2020-01-09T12:21:33Z",
        "updatedAt" : "2020-01-26T10:34:42Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "69c37481-7c16-4b15-86a3-a2ff7d99b5ea",
        "parentId" : "660e1bf2-c6e1-4061-8a54-3078b1c57040",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "as per `intercept`, I've added it to unblock this PR, although I think it would make sense in funsuite, so that it's properly tested",
        "createdAt" : "2020-01-09T12:31:32Z",
        "updatedAt" : "2020-01-26T10:34:42Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "49287d98409399c613ea481aeb08529f827e5982",
    "line" : 51,
    "diffHunk" : "@@ -1,196 +1,59 @@\n package tests\n \n-import scala.collection.mutable\n import scala.concurrent.Await\n import scala.concurrent.Future\n import scala.concurrent.duration.Duration\n-import scala.language.experimental.macros\n import scala.meta.internal.metals.JdkSources\n-import scala.meta.internal.metals.Testing\n import scala.meta.internal.mtags\n import scala.meta.internal.semver.SemVer\n-import scala.meta.io.AbsolutePath\n-import scala.reflect.ClassTag\n import scala.util.Properties\n-import utest.TestSuite\n-import utest.Tests\n-import utest.asserts.Asserts\n-import utest.framework.Formatter\n-import utest.framework.TestCallTree\n-import utest.framework.Tree\n-import utest.ufansi.Attrs\n-import utest.ufansi.Str\n-\n-/**\n- * Test suite that replace utest DSL with FunSuite-style syntax from ScalaTest.\n- */\n-class BaseSuite extends TestSuite with TestOptionsConversions {\n-  Testing.enable()\n+import funsuite.Test\n+import funsuite.TestOptions\n+import funsuite.Location\n+\n+class BaseSuite extends funsuite.FunSuite with Assertions {\n   def isJava8: Boolean =\n     !Properties.isJavaAtLeast(\"9\")\n+\n   def isScala211: Boolean =\n     mtags.BuildInfo.scalaCompilerVersion.startsWith(\"2.11\")\n+\n   def hasJdkSources: Boolean = JdkSources().isDefined\n+\n   def isWindows: Boolean =\n     Properties.isWin\n-  def isCI: Boolean =\n-    \"true\".equalsIgnoreCase(System.getenv(\"CI\"))\n-  def beforeAll(): Unit = ()\n-  def afterAll(): Unit = ()\n-  def intercept[T: ClassTag](exprs: Unit): T = macro Asserts.interceptProxy[T]"
  },
  {
    "id" : "2c3e9f17-ac5c-4ddb-9b8c-19b741b12ec6",
    "prId" : 1277,
    "comments" : [
      {
        "id" : "7beee57f-0b94-4649-a0c5-35288f50239b",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I have considered adding built-in support in `FunSuite` that captures `Future[_]` values and automatically awaits then with a default timeout, which would avoid `testAsync`",
        "createdAt" : "2020-01-09T12:17:28Z",
        "updatedAt" : "2020-01-26T10:34:42Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "49287d98409399c613ea481aeb08529f827e5982",
    "line" : null,
    "diffHunk" : "@@ -1,196 +1,59 @@\n package tests\n \n-import scala.collection.mutable\n import scala.concurrent.Await\n import scala.concurrent.Future\n import scala.concurrent.duration.Duration\n-import scala.language.experimental.macros\n import scala.meta.internal.metals.JdkSources\n-import scala.meta.internal.metals.Testing\n import scala.meta.internal.mtags\n import scala.meta.internal.semver.SemVer\n-import scala.meta.io.AbsolutePath\n-import scala.reflect.ClassTag\n import scala.util.Properties\n-import utest.TestSuite\n-import utest.Tests\n-import utest.asserts.Asserts\n-import utest.framework.Formatter\n-import utest.framework.TestCallTree\n-import utest.framework.Tree\n-import utest.ufansi.Attrs\n-import utest.ufansi.Str\n-\n-/**\n- * Test suite that replace utest DSL with FunSuite-style syntax from ScalaTest.\n- */\n-class BaseSuite extends TestSuite with TestOptionsConversions {\n-  Testing.enable()\n+import funsuite.Test\n+import funsuite.TestOptions\n+import funsuite.Location\n+\n+class BaseSuite extends funsuite.FunSuite with Assertions {\n   def isJava8: Boolean =\n     !Properties.isJavaAtLeast(\"9\")\n+\n   def isScala211: Boolean =\n     mtags.BuildInfo.scalaCompilerVersion.startsWith(\"2.11\")\n+\n   def hasJdkSources: Boolean = JdkSources().isDefined\n+\n   def isWindows: Boolean =\n     Properties.isWin\n-  def isCI: Boolean =\n-    \"true\".equalsIgnoreCase(System.getenv(\"CI\"))\n-  def beforeAll(): Unit = ()\n-  def afterAll(): Unit = ()\n-  def intercept[T: ClassTag](exprs: Unit): T = macro Asserts.interceptProxy[T]\n+\n   def isValidScalaVersionForEnv(scalaVersion: String): Boolean =\n     this.isJava8 || SemVer.isCompatibleVersion(\n       BaseSuite.minScalaVersionForJDK9OrHigher,\n       scalaVersion\n     )\n \n-  def assertNotEmpty(string: String): Unit = {\n-    if (string.isEmpty) {\n-      fail(\n-        s\"expected non-empty string, obtained empty string.\",\n-        stackBump = 1\n-      )\n-    }\n-  }\n-  def assertEmpty(string: String): Unit = {\n-    if (!string.isEmpty) {\n-      fail(\n-        s\"expected empty string, obtained: $string\",\n-        stackBump = 1\n-      )\n-    }\n-  }\n-  def assertContains(string: String, substring: String): Unit = {\n-    assert(string.contains(substring))\n-  }\n-  def assertNotContains(string: String, substring: String): Unit = {\n-    assert(!string.contains(substring))\n-  }\n-  def assert(exprs: Boolean*): Unit = macro Asserts.assertProxy\n-  def assertNotEquals[T](obtained: T, expected: T, hint: String = \"\"): Unit = {\n-    if (obtained == expected) {\n-      val hintMsg = if (hint.isEmpty) \"\" else s\" (hint: $hint)\"\n-      assertNoDiff(obtained.toString, expected.toString, hint)\n-      fail(s\"obtained=<$obtained> == expected=<$expected>$hintMsg\")\n-    }\n-  }\n-  def assertEquals[T](obtained: T, expected: T, hint: String = \"\"): Unit = {\n-    if (obtained != expected) {\n-      val hintMsg = if (hint.isEmpty) \"\" else s\" (hint: $hint)\"\n-      assertNoDiff(obtained.toString, expected.toString, hint)\n-      fail(s\"obtained=<$obtained> != expected=<$expected>$hintMsg\")\n-    }\n-  }\n-  def assertNotFile(path: AbsolutePath): Unit = {\n-    if (path.isFile) {\n-      fail(s\"file exists: $path\", stackBump = 1)\n-    }\n-  }\n-  def assertIsFile(path: AbsolutePath): Unit = {\n-    if (!path.isFile) {\n-      fail(s\"no such file: $path\", stackBump = 1)\n-    }\n-  }\n-  def assertIsNotDirectory(path: AbsolutePath): Unit = {\n-    if (path.isDirectory) {\n-      fail(s\"directory exists: $path\", stackBump = 1)\n-    }\n-  }\n-  def assertNoDiff(\n-      obtained: String,\n-      expected: String,\n-      title: String = \"\"\n-  )(implicit filename: sourcecode.File, line: sourcecode.Line): Unit = {\n-    DiffAssertions.colored {\n-      DiffAssertions.assertNoDiffOrPrintObtained(\n-        obtained,\n-        expected,\n-        title,\n-        title\n-      )\n-    }\n-  }\n-  override def utestAfterAll(): Unit = afterAll()\n-\n-  override def utestFormatter: Formatter = new Formatter {\n-    override def exceptionMsgColor: Attrs = Attrs.Empty\n-    override def exceptionStackFrameHighlighter(\n-        s: StackTraceElement\n-    ): Boolean = {\n-      s.getClassName.startsWith(\"scala.meta.internal.worksheets.\") ||\n-      s.getClassName.startsWith(\"scala.meta.internal.tvp.\") ||\n-      s.getClassName.startsWith(\"scala.meta.internal.pc.\") ||\n-      s.getClassName.startsWith(\"scala.meta.internal.mtags.\") ||\n-      s.getClassName.startsWith(\"scala.meta.internal.metals.\") ||\n-      s.getClassName.startsWith(\"scala.meta.metals.\") ||\n-      s.getClassName.startsWith(\"scala.meta.pc.\") ||\n-      (s.getClassName.startsWith(\"tests\") &&\n-      !s.getClassName.startsWith(\"tests.DiffAssertions\") &&\n-      !s.getClassName.startsWith(\"tests.MegaSuite\"))\n-    }\n-    override def formatWrapWidth: Int = 3000\n-    override def formatException(x: Throwable, leftIndent: String): Str =\n-      super.formatException(x, \"\")\n-  }\n-  case class FlatTest(name: String, thunk: () => Unit)\n-  private val myTests = mutable.ArrayBuffer.empty[FlatTest]\n+  def skipSuite: Boolean = false\n \n-  def ignore(options: TestOptions)(fun: => Any): Unit = {\n-    myTests += FlatTest(\n-      utest.ufansi.Color.LightRed(s\"IGNORED - ${options.name}\").toString(),\n-      () => ()\n-    )\n-  }\n-\n-  def isTestSuiteEnabled: Boolean = true\n-\n-  def test(options: TestOptions)(fun: => Any): Unit = {\n-    if (isTestSuiteEnabled) {\n-      myTests += FlatTest(options.name, () => {\n-        if (options.tags.contains(Tag.ExpectFailure)) {\n-          intercept[TestFailedException](fun)\n-        } else {\n-          fun\n-        }\n-      })\n-    }\n+  override def funsuiteTests(): Seq[Test] = {\n+    if (skipSuite) Seq.empty\n+    else super.funsuiteTests()\n   }\n \n   def testAsync("
  },
  {
    "id" : "5afcd9f5-6ead-4313-96d9-51486a2ef960",
    "prId" : 1277,
    "comments" : [
      {
        "id" : "05d7e22d-92c3-4788-b594-3b3400db847c",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "intercept is now in munit",
        "createdAt" : "2020-01-16T07:39:06Z",
        "updatedAt" : "2020-01-26T10:34:42Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "49287d98409399c613ea481aeb08529f827e5982",
    "line" : null,
    "diffHunk" : "@@ -1,196 +1,79 @@\n package tests\n \n-import scala.collection.mutable\n import scala.concurrent.Await\n import scala.concurrent.Future\n import scala.concurrent.duration.Duration\n-import scala.language.experimental.macros\n import scala.meta.internal.metals.JdkSources\n-import scala.meta.internal.metals.Testing\n import scala.meta.internal.mtags\n import scala.meta.internal.semver.SemVer\n-import scala.meta.io.AbsolutePath\n-import scala.reflect.ClassTag\n import scala.util.Properties\n-import utest.TestSuite\n-import utest.Tests\n-import utest.asserts.Asserts\n-import utest.framework.Formatter\n-import utest.framework.TestCallTree\n-import utest.framework.Tree\n-import utest.ufansi.Attrs\n-import utest.ufansi.Str\n-\n-/**\n- * Test suite that replace utest DSL with FunSuite-style syntax from ScalaTest.\n- */\n-class BaseSuite extends TestSuite with TestOptionsConversions {\n-  Testing.enable()\n+import munit.TestOptions\n+import munit.Location\n+import munit.FailException\n+import munit.TestValues.FlakyFailure\n+import scala.reflect.ClassTag\n+import scala.util.control.NonFatal\n+\n+class BaseSuite extends munit.FunSuite with Assertions {\n   def isJava8: Boolean =\n     !Properties.isJavaAtLeast(\"9\")\n+\n   def isScala211: Boolean =\n     mtags.BuildInfo.scalaCompilerVersion.startsWith(\"2.11\")\n+\n   def hasJdkSources: Boolean = JdkSources().isDefined\n+\n   def isWindows: Boolean =\n     Properties.isWin\n-  def isCI: Boolean =\n-    \"true\".equalsIgnoreCase(System.getenv(\"CI\"))\n-  def beforeAll(): Unit = ()\n-  def afterAll(): Unit = ()\n-  def intercept[T: ClassTag](exprs: Unit): T = macro Asserts.interceptProxy[T]\n+\n   def isValidScalaVersionForEnv(scalaVersion: String): Boolean =\n     this.isJava8 || SemVer.isCompatibleVersion(\n       BaseSuite.minScalaVersionForJDK9OrHigher,\n       scalaVersion\n     )\n \n-  def assertNotEmpty(string: String): Unit = {\n-    if (string.isEmpty) {\n-      fail(\n-        s\"expected non-empty string, obtained empty string.\",\n-        stackBump = 1\n-      )\n-    }\n-  }\n-  def assertEmpty(string: String): Unit = {\n-    if (!string.isEmpty) {\n+  def intercept[T <: Throwable]("
  },
  {
    "id" : "65370242-b485-4b92-b9ad-499a75310c96",
    "prId" : 1277,
    "comments" : [
      {
        "id" : "bae12fee-c5b3-411b-8a27-3f21f2561368",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "replace with munitIgnore (which is now in munit)",
        "createdAt" : "2020-01-16T07:40:27Z",
        "updatedAt" : "2020-01-26T10:34:42Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "49287d98409399c613ea481aeb08529f827e5982",
    "line" : null,
    "diffHunk" : "@@ -1,196 +1,79 @@\n package tests\n \n-import scala.collection.mutable\n import scala.concurrent.Await\n import scala.concurrent.Future\n import scala.concurrent.duration.Duration\n-import scala.language.experimental.macros\n import scala.meta.internal.metals.JdkSources\n-import scala.meta.internal.metals.Testing\n import scala.meta.internal.mtags\n import scala.meta.internal.semver.SemVer\n-import scala.meta.io.AbsolutePath\n-import scala.reflect.ClassTag\n import scala.util.Properties\n-import utest.TestSuite\n-import utest.Tests\n-import utest.asserts.Asserts\n-import utest.framework.Formatter\n-import utest.framework.TestCallTree\n-import utest.framework.Tree\n-import utest.ufansi.Attrs\n-import utest.ufansi.Str\n-\n-/**\n- * Test suite that replace utest DSL with FunSuite-style syntax from ScalaTest.\n- */\n-class BaseSuite extends TestSuite with TestOptionsConversions {\n-  Testing.enable()\n+import munit.TestOptions\n+import munit.Location\n+import munit.FailException\n+import munit.TestValues.FlakyFailure\n+import scala.reflect.ClassTag\n+import scala.util.control.NonFatal\n+\n+class BaseSuite extends munit.FunSuite with Assertions {\n   def isJava8: Boolean =\n     !Properties.isJavaAtLeast(\"9\")\n+\n   def isScala211: Boolean =\n     mtags.BuildInfo.scalaCompilerVersion.startsWith(\"2.11\")\n+\n   def hasJdkSources: Boolean = JdkSources().isDefined\n+\n   def isWindows: Boolean =\n     Properties.isWin\n-  def isCI: Boolean =\n-    \"true\".equalsIgnoreCase(System.getenv(\"CI\"))\n-  def beforeAll(): Unit = ()\n-  def afterAll(): Unit = ()\n-  def intercept[T: ClassTag](exprs: Unit): T = macro Asserts.interceptProxy[T]\n+\n   def isValidScalaVersionForEnv(scalaVersion: String): Boolean =\n     this.isJava8 || SemVer.isCompatibleVersion(\n       BaseSuite.minScalaVersionForJDK9OrHigher,\n       scalaVersion\n     )\n \n-  def assertNotEmpty(string: String): Unit = {\n-    if (string.isEmpty) {\n-      fail(\n-        s\"expected non-empty string, obtained empty string.\",\n-        stackBump = 1\n-      )\n-    }\n-  }\n-  def assertEmpty(string: String): Unit = {\n-    if (!string.isEmpty) {\n+  def intercept[T <: Throwable](\n+      body: => Any\n+  )(implicit ev: ClassTag[T], loc: Location): Unit = {\n+    try {\n+      body\n       fail(\n-        s\"expected empty string, obtained: $string\",\n-        stackBump = 1\n+        s\"expected exception of type ${ev.runtimeClass} but body evaluated successfully\"\n       )\n+    } catch {\n+      case e: FailException => throw e\n+      case e: FlakyFailure => throw e\n+      case NonFatal(e) =>\n+        if (!ev.runtimeClass.isAssignableFrom(e.getClass()))\n+          fail(s\"expected ${ev.runtimeClass}, obtained ${e.getClass()}\")\n     }\n   }\n-  def assertContains(string: String, substring: String): Unit = {\n-    assert(string.contains(substring))\n-  }\n-  def assertNotContains(string: String, substring: String): Unit = {\n-    assert(!string.contains(substring))\n-  }\n-  def assert(exprs: Boolean*): Unit = macro Asserts.assertProxy\n-  def assertNotEquals[T](obtained: T, expected: T, hint: String = \"\"): Unit = {\n-    if (obtained == expected) {\n-      val hintMsg = if (hint.isEmpty) \"\" else s\" (hint: $hint)\"\n-      assertNoDiff(obtained.toString, expected.toString, hint)\n-      fail(s\"obtained=<$obtained> == expected=<$expected>$hintMsg\")\n-    }\n-  }\n-  def assertEquals[T](obtained: T, expected: T, hint: String = \"\"): Unit = {\n-    if (obtained != expected) {\n-      val hintMsg = if (hint.isEmpty) \"\" else s\" (hint: $hint)\"\n-      assertNoDiff(obtained.toString, expected.toString, hint)\n-      fail(s\"obtained=<$obtained> != expected=<$expected>$hintMsg\")\n-    }\n-  }\n-  def assertNotFile(path: AbsolutePath): Unit = {\n-    if (path.isFile) {\n-      fail(s\"file exists: $path\", stackBump = 1)\n-    }\n-  }\n-  def assertIsFile(path: AbsolutePath): Unit = {\n-    if (!path.isFile) {\n-      fail(s\"no such file: $path\", stackBump = 1)\n-    }\n-  }\n-  def assertIsNotDirectory(path: AbsolutePath): Unit = {\n-    if (path.isDirectory) {\n-      fail(s\"directory exists: $path\", stackBump = 1)\n-    }\n-  }\n-  def assertNoDiff(\n-      obtained: String,\n-      expected: String,\n-      title: String = \"\"\n-  )(implicit filename: sourcecode.File, line: sourcecode.Line): Unit = {\n-    DiffAssertions.colored {\n-      DiffAssertions.assertNoDiffOrPrintObtained(\n-        obtained,\n-        expected,\n-        title,\n-        title\n-      )\n-    }\n-  }\n-  override def utestAfterAll(): Unit = afterAll()\n-\n-  override def utestFormatter: Formatter = new Formatter {\n-    override def exceptionMsgColor: Attrs = Attrs.Empty\n-    override def exceptionStackFrameHighlighter(\n-        s: StackTraceElement\n-    ): Boolean = {\n-      s.getClassName.startsWith(\"scala.meta.internal.worksheets.\") ||\n-      s.getClassName.startsWith(\"scala.meta.internal.tvp.\") ||\n-      s.getClassName.startsWith(\"scala.meta.internal.pc.\") ||\n-      s.getClassName.startsWith(\"scala.meta.internal.mtags.\") ||\n-      s.getClassName.startsWith(\"scala.meta.internal.metals.\") ||\n-      s.getClassName.startsWith(\"scala.meta.metals.\") ||\n-      s.getClassName.startsWith(\"scala.meta.pc.\") ||\n-      (s.getClassName.startsWith(\"tests\") &&\n-      !s.getClassName.startsWith(\"tests.DiffAssertions\") &&\n-      !s.getClassName.startsWith(\"tests.MegaSuite\"))\n-    }\n-    override def formatWrapWidth: Int = 3000\n-    override def formatException(x: Throwable, leftIndent: String): Str =\n-      super.formatException(x, \"\")\n-  }\n-  case class FlatTest(name: String, thunk: () => Unit)\n-  private val myTests = mutable.ArrayBuffer.empty[FlatTest]\n \n-  def ignore(options: TestOptions)(fun: => Any): Unit = {\n-    myTests += FlatTest(\n-      utest.ufansi.Color.LightRed(s\"IGNORED - ${options.name}\").toString(),\n-      () => ()\n-    )\n-  }\n+  def skipSuite: Boolean = false"
  },
  {
    "id" : "14dd1f79-ccd8-40ae-9b50-a83a26be317e",
    "prId" : 1277,
    "comments" : [
      {
        "id" : "156a5a9a-23a2-4bb1-b5cb-2256cf9c05f5",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "s/flak/flaky",
        "createdAt" : "2020-01-26T04:11:38Z",
        "updatedAt" : "2020-01-26T10:34:42Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "49287d98409399c613ea481aeb08529f827e5982",
    "line" : 173,
    "diffHunk" : "@@ -1,196 +1,40 @@\n package tests\n \n-import scala.collection.mutable\n-import scala.concurrent.Await\n-import scala.concurrent.Future\n import scala.concurrent.duration.Duration\n-import scala.language.experimental.macros\n import scala.meta.internal.metals.JdkSources\n-import scala.meta.internal.metals.Testing\n import scala.meta.internal.mtags\n import scala.meta.internal.semver.SemVer\n-import scala.meta.io.AbsolutePath\n-import scala.reflect.ClassTag\n import scala.util.Properties\n-import utest.TestSuite\n-import utest.Tests\n-import utest.asserts.Asserts\n-import utest.framework.Formatter\n-import utest.framework.TestCallTree\n-import utest.framework.Tree\n-import utest.ufansi.Attrs\n-import utest.ufansi.Str\n \n-/**\n- * Test suite that replace utest DSL with FunSuite-style syntax from ScalaTest.\n- */\n-class BaseSuite extends TestSuite with TestOptionsConversions {\n-  Testing.enable()\n+class BaseSuite extends munit.FunSuite with Assertions {\n   def isJava8: Boolean =\n     !Properties.isJavaAtLeast(\"9\")\n+\n   def isScala211: Boolean =\n     mtags.BuildInfo.scalaCompilerVersion.startsWith(\"2.11\")\n+\n   def hasJdkSources: Boolean = JdkSources().isDefined\n+\n   def isWindows: Boolean =\n     Properties.isWin\n-  def isCI: Boolean =\n-    \"true\".equalsIgnoreCase(System.getenv(\"CI\"))\n-  def beforeAll(): Unit = ()\n-  def afterAll(): Unit = ()\n-  def intercept[T: ClassTag](exprs: Unit): T = macro Asserts.interceptProxy[T]\n+\n   def isValidScalaVersionForEnv(scalaVersion: String): Boolean =\n     this.isJava8 || SemVer.isCompatibleVersion(\n       BaseSuite.minScalaVersionForJDK9OrHigher,\n       scalaVersion\n     )\n \n-  def assertNotEmpty(string: String): Unit = {\n-    if (string.isEmpty) {\n-      fail(\n-        s\"expected non-empty string, obtained empty string.\",\n-        stackBump = 1\n-      )\n-    }\n-  }\n-  def assertEmpty(string: String): Unit = {\n-    if (!string.isEmpty) {\n-      fail(\n-        s\"expected empty string, obtained: $string\",\n-        stackBump = 1\n-      )\n-    }\n-  }\n-  def assertContains(string: String, substring: String): Unit = {\n-    assert(string.contains(substring))\n-  }\n-  def assertNotContains(string: String, substring: String): Unit = {\n-    assert(!string.contains(substring))\n-  }\n-  def assert(exprs: Boolean*): Unit = macro Asserts.assertProxy\n-  def assertNotEquals[T](obtained: T, expected: T, hint: String = \"\"): Unit = {\n-    if (obtained == expected) {\n-      val hintMsg = if (hint.isEmpty) \"\" else s\" (hint: $hint)\"\n-      assertNoDiff(obtained.toString, expected.toString, hint)\n-      fail(s\"obtained=<$obtained> == expected=<$expected>$hintMsg\")\n-    }\n-  }\n-  def assertEquals[T](obtained: T, expected: T, hint: String = \"\"): Unit = {\n-    if (obtained != expected) {\n-      val hintMsg = if (hint.isEmpty) \"\" else s\" (hint: $hint)\"\n-      assertNoDiff(obtained.toString, expected.toString, hint)\n-      fail(s\"obtained=<$obtained> != expected=<$expected>$hintMsg\")\n-    }\n-  }\n-  def assertNotFile(path: AbsolutePath): Unit = {\n-    if (path.isFile) {\n-      fail(s\"file exists: $path\", stackBump = 1)\n-    }\n-  }\n-  def assertIsFile(path: AbsolutePath): Unit = {\n-    if (!path.isFile) {\n-      fail(s\"no such file: $path\", stackBump = 1)\n-    }\n-  }\n-  def assertIsNotDirectory(path: AbsolutePath): Unit = {\n-    if (path.isDirectory) {\n-      fail(s\"directory exists: $path\", stackBump = 1)\n-    }\n-  }\n-  def assertNoDiff(\n-      obtained: String,\n-      expected: String,\n-      title: String = \"\"\n-  )(implicit filename: sourcecode.File, line: sourcecode.Line): Unit = {\n-    DiffAssertions.colored {\n-      DiffAssertions.assertNoDiffOrPrintObtained(\n-        obtained,\n-        expected,\n-        title,\n-        title\n-      )\n-    }\n-  }\n-  override def utestAfterAll(): Unit = afterAll()\n-\n-  override def utestFormatter: Formatter = new Formatter {\n-    override def exceptionMsgColor: Attrs = Attrs.Empty\n-    override def exceptionStackFrameHighlighter(\n-        s: StackTraceElement\n-    ): Boolean = {\n-      s.getClassName.startsWith(\"scala.meta.internal.worksheets.\") ||\n-      s.getClassName.startsWith(\"scala.meta.internal.tvp.\") ||\n-      s.getClassName.startsWith(\"scala.meta.internal.pc.\") ||\n-      s.getClassName.startsWith(\"scala.meta.internal.mtags.\") ||\n-      s.getClassName.startsWith(\"scala.meta.internal.metals.\") ||\n-      s.getClassName.startsWith(\"scala.meta.metals.\") ||\n-      s.getClassName.startsWith(\"scala.meta.pc.\") ||\n-      (s.getClassName.startsWith(\"tests\") &&\n-      !s.getClassName.startsWith(\"tests.DiffAssertions\") &&\n-      !s.getClassName.startsWith(\"tests.MegaSuite\"))\n-    }\n-    override def formatWrapWidth: Int = 3000\n-    override def formatException(x: Throwable, leftIndent: String): Str =\n-      super.formatException(x, \"\")\n-  }\n-  case class FlatTest(name: String, thunk: () => Unit)\n-  private val myTests = mutable.ArrayBuffer.empty[FlatTest]\n-\n-  def ignore(options: TestOptions)(fun: => Any): Unit = {\n-    myTests += FlatTest(\n-      utest.ufansi.Color.LightRed(s\"IGNORED - ${options.name}\").toString(),\n-      () => ()\n-    )\n-  }\n-\n-  def isTestSuiteEnabled: Boolean = true\n-\n-  def test(options: TestOptions)(fun: => Any): Unit = {\n-    if (isTestSuiteEnabled) {\n-      myTests += FlatTest(options.name, () => {\n-        if (options.tags.contains(Tag.ExpectFailure)) {\n-          intercept[TestFailedException](fun)\n-        } else {\n-          fun\n-        }\n-      })\n-    }\n-  }\n-\n-  def testAsync(\n-      options: TestOptions,\n-      maxDuration: Duration = Duration(\"10min\")\n-  )(\n-      run: => Future[Unit]\n-  ): Unit = {\n-    test(options) {\n-      val fut = run\n-      Await.result(fut, maxDuration)\n-    }\n-  }\n-\n-  def fail(msg: String, stackBump: Int = 0): Nothing = {\n-    val ex = new TestFailedException(msg)\n-    ex.setStackTrace(ex.getStackTrace.slice(1 + stackBump, 2 + stackBump))\n-    throw ex\n-  }\n+  override def munitTimeout: Duration = Duration(\"10min\")\n \n-  lazy val tests: Tests = {\n-    if (myTests.isEmpty) {\n-      myTests += FlatTest(\"empty\", () => ())\n-    }\n-    this.beforeAll()\n-    val names = Tree(\"\", myTests.map(x => Tree(x.name)).toSeq: _*)\n-    val inner = Right(\n-      myTests.map(x => new TestCallTree(Left(x.thunk()))).toIndexedSeq\n-    )\n-    val thunks = new TestCallTree(inner)\n-    Tests(names, thunks)\n-  }\n+  // NOTE(olafur): always ignore flak test failures."
  },
  {
    "id" : "15e0a7da-766a-4f2b-93ce-7033b80e678a",
    "prId" : 1523,
    "comments" : [
      {
        "id" : "3ed8c2bc-ea55-41dd-b472-557d66e5a504",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Changed this to startsWith, so that we can use \"0.\" -> for Scala 3. We can also just add a condition for major version, opinions?",
        "createdAt" : "2020-03-25T22:12:05Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1990833d-e7fe-43ce-bdf5-2f0ba11c5e15",
        "parentId" : "3ed8c2bc-ea55-41dd-b472-557d66e5a504",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "startsWith looks okay, (collect + headOption == collectFirst)",
        "createdAt" : "2020-04-01T08:41:38Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "91ac195f-2641-42e4-bc89-f9cf40800621",
        "parentId" : "3ed8c2bc-ea55-41dd-b472-557d66e5a504",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Thanks, fixed!",
        "createdAt" : "2020-04-06T17:59:58Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1142490703f832961ac0df1debd14b4f3b12ce7d",
    "line" : 42,
    "diffHunk" : "@@ -58,16 +51,18 @@ class BaseSuite extends munit.FunSuite with Assertions {\n   def getExpected(\n       default: String,\n       compat: Map[String, String],\n-      scalaVersion: String = this.scalaVersion\n+      scalaVersion: String\n   ): String = {\n     val postProcess = compatProcess\n-      .get(scalaBinary(scalaVersion))\n-      .orElse(compatProcess.get(scalaVersion))\n+      .collect {\n+        case (ver, process) if scalaVersion.startsWith(ver) => process"
  },
  {
    "id" : "69e8b507-d4c4-4251-addf-13f2caad16aa",
    "prId" : 1534,
    "comments" : [
      {
        "id" : "4985ded7-dab3-4194-a5bc-e766d1260149",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "you can use `munitExecutionContext` which is in scope",
        "createdAt" : "2020-03-24T15:52:15Z",
        "updatedAt" : "2020-03-25T13:55:15Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "faff6085-2ca4-4a6d-8ffa-d34bc3b947d1",
        "parentId" : "4985ded7-dab3-4194-a5bc-e766d1260149",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I would actually recommend using it inline, so that we don't accidentally use it implicitly anywhere else",
        "createdAt" : "2020-03-24T16:00:33Z",
        "updatedAt" : "2020-03-25T13:55:15Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3d3fe3a7-781a-4d5f-b17c-06bdd8a4551e",
        "parentId" : "4985ded7-dab3-4194-a5bc-e766d1260149",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "I can't figure out where to put this inline... Can you give me a hint. 😬 ",
        "createdAt" : "2020-03-24T16:17:56Z",
        "updatedAt" : "2020-03-25T13:55:15Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0ff3fbe8-ae09-496d-9a57-3eea461948b1",
        "parentId" : "4985ded7-dab3-4194-a5bc-e766d1260149",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Actually it doesn't matter. I'm going to remove \"Rerun\" anyways....",
        "createdAt" : "2020-03-24T16:18:45Z",
        "updatedAt" : "2020-03-25T13:55:15Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ef5d4b7c53eb3cc408ce35d7c1b7223026636ccf",
    "line" : null,
    "diffHunk" : "@@ -5,11 +5,19 @@ import scala.meta.internal.metals.JdkSources\n import scala.meta.internal.mtags\n import scala.meta.internal.semver.SemVer\n import scala.util.Properties\n+import munit.internal.FutureCompat._\n import munit.Tag\n-import munit.TestOptions\n+import munit.TestValues\n+import scala.concurrent.Future\n+import scala.util.Failure\n+import scala.util.Success\n+import scala.concurrent.ExecutionContextExecutor\n \n class BaseSuite extends munit.FunSuite with Assertions {\n \n+  implicit val ec: ExecutionContextExecutor =\n+    scala.concurrent.ExecutionContext.global"
  },
  {
    "id" : "03bed206-fade-41e0-8495-965e8793baf1",
    "prId" : 1534,
    "comments" : [
      {
        "id" : "b13fa895-769d-4967-8d06-18618853a752",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "is this a new tag we want to use? Do we use it anywhere?",
        "createdAt" : "2020-03-24T15:53:41Z",
        "updatedAt" : "2020-03-25T13:55:15Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ad090dec-d843-4a2d-97e6-badb98f6023a",
        "parentId" : "b13fa895-769d-4967-8d06-18618853a752",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "We don't actually use it anywhere, but the old implementation of `FlakyTest` had the ability to pass in a number for max retries. Since I removed that I wanted to replace it with something that offered the same functionality. Do you think I should just remove it?",
        "createdAt" : "2020-03-24T16:04:39Z",
        "updatedAt" : "2020-03-25T13:55:15Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cb21756f-7091-4609-be6d-e26939586158",
        "parentId" : "b13fa895-769d-4967-8d06-18618853a752",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I personally think so, since it's unused. We can easily add it back if we need it",
        "createdAt" : "2020-03-24T16:12:29Z",
        "updatedAt" : "2020-03-25T13:55:15Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ef5d4b7c53eb3cc408ce35d7c1b7223026636ccf",
    "line" : null,
    "diffHunk" : "@@ -32,18 +40,41 @@ class BaseSuite extends munit.FunSuite with Assertions {\n \n   override def munitTimeout: Duration = Duration(\"10min\")\n \n-  // NOTE(olafur): always ignore flak test failures.\n+  // NOTE(olafur): always ignore flaky test failures.\n   override def munitFlakyOK = true\n-  override def munitRunTest(\n-      options: TestOptions,\n-      body: => Any\n-  ): Any = {\n-    if (Properties.isWin && options.tags(FlakyWindows)) {\n-      munitFlaky(options, body)\n-    } else {\n-      super.munitRunTest(options, body)\n-    }\n-  }\n+\n+  case class Rerun(count: Int) extends munit.Tag(\"Rerun\")\n+\n+  override def munitTestTransforms: List[TestTransform] =\n+    super.munitTestTransforms ++ List(\n+      new TestTransform(\"Rerun\", { test =>\n+        val rerunCount = test.tags\n+          .collectFirst { case Rerun(n) => n }\n+          .getOrElse(1)\n+        if (rerunCount == 1) test\n+        else {\n+          test.withBody(() => {\n+            Future.sequence(1.to(rerunCount).map(_ => test.body()).toList)\n+          })\n+        }\n+      }),"
  },
  {
    "id" : "3323dc56-a07f-405c-8f62-9bc77812a916",
    "prId" : 1534,
    "comments" : [
      {
        "id" : "ec7a961a-224d-44af-95e3-a2c5ef349dfd",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "minor: you could do\r\n\r\n```suggestion\r\n        if (Properties.isWin && test.tags(FlakyWindows)) {\r\n```",
        "createdAt" : "2020-03-24T15:55:40Z",
        "updatedAt" : "2020-03-25T13:55:15Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ef5d4b7c53eb3cc408ce35d7c1b7223026636ccf",
    "line" : null,
    "diffHunk" : "@@ -32,18 +40,41 @@ class BaseSuite extends munit.FunSuite with Assertions {\n \n   override def munitTimeout: Duration = Duration(\"10min\")\n \n-  // NOTE(olafur): always ignore flak test failures.\n+  // NOTE(olafur): always ignore flaky test failures.\n   override def munitFlakyOK = true\n-  override def munitRunTest(\n-      options: TestOptions,\n-      body: => Any\n-  ): Any = {\n-    if (Properties.isWin && options.tags(FlakyWindows)) {\n-      munitFlaky(options, body)\n-    } else {\n-      super.munitRunTest(options, body)\n-    }\n-  }\n+\n+  case class Rerun(count: Int) extends munit.Tag(\"Rerun\")\n+\n+  override def munitTestTransforms: List[TestTransform] =\n+    super.munitTestTransforms ++ List(\n+      new TestTransform(\"Rerun\", { test =>\n+        val rerunCount = test.tags\n+          .collectFirst { case Rerun(n) => n }\n+          .getOrElse(1)\n+        if (rerunCount == 1) test\n+        else {\n+          test.withBody(() => {\n+            Future.sequence(1.to(rerunCount).map(_ => test.body()).toList)\n+          })\n+        }\n+      }),\n+      new TestTransform(\"Flaky Windows\", { test =>\n+        if (Properties.isWin && test.tags.contains(FlakyWindows)) {"
  },
  {
    "id" : "b2f442cc-8501-4898-844d-e29d31d89e33",
    "prId" : 1534,
    "comments" : [
      {
        "id" : "1c306d01-78d4-4721-bf7a-e949b4f047ad",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "@olafurpg is there a way to reuse the default implementation (like we did in 0.5 using `munitFlaky`?",
        "createdAt" : "2020-03-24T15:56:43Z",
        "updatedAt" : "2020-03-25T13:55:15Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "46d98472-f145-4779-af69-fd754633de24",
        "parentId" : "1c306d01-78d4-4721-bf7a-e949b4f047ad",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "`munitFlakyTransform` is the default transform, which you can apply as a `Test => Test` function",
        "createdAt" : "2020-03-25T13:04:20Z",
        "updatedAt" : "2020-03-25T13:55:15Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c5aaaa85-c631-4c8d-baf0-5d0bdde454e6",
        "parentId" : "1c306d01-78d4-4721-bf7a-e949b4f047ad",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "An alternative approach is to add the `Flaky` tag based on `Properties.isWin`\r\n\r\n```scala\r\nnew TestTransform(\"FlakyWindows\", test => if (test.tags(FlakyWindows) && Properties.isWin) test.tag(Flaky) else test)\r\n```\r\nAs long as that transform comes before `munitFlakyTransform` then you don't need to re-implement the `.flaky` logic",
        "createdAt" : "2020-03-25T13:06:01Z",
        "updatedAt" : "2020-03-25T13:55:15Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a9c1e50b-126d-477e-9be2-84f13dead481",
        "parentId" : "1c306d01-78d4-4721-bf7a-e949b4f047ad",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Ah, cool. I'll do that.",
        "createdAt" : "2020-03-25T13:09:27Z",
        "updatedAt" : "2020-03-25T13:55:15Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ef5d4b7c53eb3cc408ce35d7c1b7223026636ccf",
    "line" : null,
    "diffHunk" : "@@ -32,18 +40,41 @@ class BaseSuite extends munit.FunSuite with Assertions {\n \n   override def munitTimeout: Duration = Duration(\"10min\")\n \n-  // NOTE(olafur): always ignore flak test failures.\n+  // NOTE(olafur): always ignore flaky test failures.\n   override def munitFlakyOK = true\n-  override def munitRunTest(\n-      options: TestOptions,\n-      body: => Any\n-  ): Any = {\n-    if (Properties.isWin && options.tags(FlakyWindows)) {\n-      munitFlaky(options, body)\n-    } else {\n-      super.munitRunTest(options, body)\n-    }\n-  }\n+\n+  case class Rerun(count: Int) extends munit.Tag(\"Rerun\")\n+\n+  override def munitTestTransforms: List[TestTransform] =\n+    super.munitTestTransforms ++ List(\n+      new TestTransform(\"Rerun\", { test =>\n+        val rerunCount = test.tags\n+          .collectFirst { case Rerun(n) => n }\n+          .getOrElse(1)\n+        if (rerunCount == 1) test\n+        else {\n+          test.withBody(() => {\n+            Future.sequence(1.to(rerunCount).map(_ => test.body()).toList)\n+          })\n+        }\n+      }),\n+      new TestTransform(\"Flaky Windows\", { test =>\n+        if (Properties.isWin && test.tags.contains(FlakyWindows)) {\n+          test.withBodyMap(_.transformCompat {\n+            case Success(value) => Success(value)\n+            case Failure(exception) =>\n+              if (munitFlakyOK) {\n+                Success(new TestValues.FlakyFailure(exception))\n+              } else {\n+                throw exception\n+              }\n+          }(munitExecutionContext))"
  },
  {
    "id" : "711a3961-253b-47a4-af8f-137a32a5cd44",
    "prId" : 1534,
    "comments" : [
      {
        "id" : "bf2787e3-e1dc-4e7e-b64e-1fbd6447306b",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Unused?",
        "createdAt" : "2020-03-25T13:51:52Z",
        "updatedAt" : "2020-03-25T13:55:15Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "373e7483-9444-4bb2-9a07-f6c3caf2f5b6",
        "parentId" : "bf2787e3-e1dc-4e7e-b64e-1fbd6447306b",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Ahh yea. Good catch, I forgot to remove it.",
        "createdAt" : "2020-03-25T13:55:22Z",
        "updatedAt" : "2020-03-25T13:55:22Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ef5d4b7c53eb3cc408ce35d7c1b7223026636ccf",
    "line" : null,
    "diffHunk" : "@@ -32,18 +32,21 @@ class BaseSuite extends munit.FunSuite with Assertions {\n \n   override def munitTimeout: Duration = Duration(\"10min\")\n \n-  // NOTE(olafur): always ignore flak test failures.\n+  // NOTE(olafur): always ignore flaky test failures.\n   override def munitFlakyOK = true\n-  override def munitRunTest(\n-      options: TestOptions,\n-      body: => Any\n-  ): Any = {\n-    if (Properties.isWin && options.tags(FlakyWindows)) {\n-      munitFlaky(options, body)\n-    } else {\n-      super.munitRunTest(options, body)\n-    }\n-  }\n+\n+  case class Rerun(count: Int) extends munit.Tag(\"Rerun\")"
  },
  {
    "id" : "298a784d-6ab2-4279-a7a8-d332ae831265",
    "prId" : 1534,
    "comments" : [
      {
        "id" : "52dbaa51-b264-4850-8771-d463e6d40a99",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : ":+ new TestTransform ?",
        "createdAt" : "2020-03-25T13:52:25Z",
        "updatedAt" : "2020-03-25T13:55:15Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "24b2e94e-c3f4-45ea-b608-5754142bcddf",
        "parentId" : "52dbaa51-b264-4850-8771-d463e6d40a99",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "But this is a list of the new `FlakyWindows` and `munitFlakyTransform`?",
        "createdAt" : "2020-03-25T13:54:19Z",
        "updatedAt" : "2020-03-25T13:55:15Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "52aa956d-c346-4a54-bbeb-f3ca566638f4",
        "parentId" : "52dbaa51-b264-4850-8771-d463e6d40a99",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Ah, I hadn’t noticed. Sorry",
        "createdAt" : "2020-03-25T13:55:30Z",
        "updatedAt" : "2020-03-25T13:55:30Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ef5d4b7c53eb3cc408ce35d7c1b7223026636ccf",
    "line" : 29,
    "diffHunk" : "@@ -32,18 +32,21 @@ class BaseSuite extends munit.FunSuite with Assertions {\n \n   override def munitTimeout: Duration = Duration(\"10min\")\n \n-  // NOTE(olafur): always ignore flak test failures.\n+  // NOTE(olafur): always ignore flaky test failures.\n   override def munitFlakyOK = true\n-  override def munitRunTest(\n-      options: TestOptions,\n-      body: => Any\n-  ): Any = {\n-    if (Properties.isWin && options.tags(FlakyWindows)) {\n-      munitFlaky(options, body)\n-    } else {\n-      super.munitRunTest(options, body)\n-    }\n-  }\n+\n+  case class Rerun(count: Int) extends munit.Tag(\"Rerun\")\n+\n+  override def munitTestTransforms: List[TestTransform] =\n+    super.munitTestTransforms ++ List("
  }
]