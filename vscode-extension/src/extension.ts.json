[
  {
    "id" : "3cedb4de-e43c-4464-a248-80bef5dc1c99",
    "prId" : 108,
    "comments" : [
      {
        "id" : "1d16e17b-c446-4e03-9e30-67241390bc73",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "by the way, this and the other import above were added automatically as I was typing ❤️  /cc @olafurpg ",
        "createdAt" : "2017-12-10T11:11:54Z",
        "updatedAt" : "2017-12-10T17:08:36Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b1d77900-6dc3-4a23-b144-e3b9f72b833a",
        "parentId" : "1d16e17b-c446-4e03-9e30-67241390bc73",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I've had this for Scala in IJ for a long time, hard to live without once you get used to it :)\r\n",
        "createdAt" : "2017-12-10T11:12:48Z",
        "updatedAt" : "2017-12-10T17:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d70930516287ca7b7c4d7cf5be37c376e93809bd",
    "line" : 13,
    "diffHunk" : "@@ -10,6 +10,7 @@ import {\n   RevealOutputChannelOn\n } from 'vscode-languageclient';\n import { Requirements } from './requirements';\n+import { exec } from 'child_process';"
  },
  {
    "id" : "4ac4be61-3cf7-4341-a73e-77cc852419b6",
    "prId" : 108,
    "comments" : [
      {
        "id" : "11dde2f8-ccef-4f65-84ce-1a511b93db86",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "The argument of `show` is `preserveFocus`. When `true` the output channel doesn't take focus.",
        "createdAt" : "2017-12-10T11:12:47Z",
        "updatedAt" : "2017-12-10T17:08:36Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d70930516287ca7b7c4d7cf5be37c376e93809bd",
    "line" : null,
    "diffHunk" : "@@ -69,12 +70,26 @@ export async function activate(context: ExtensionContext) {\n     revealOutputChannelOn: RevealOutputChannelOn.Never\n   };\n \n-  const disposable = new LanguageClient(\n+  const client = new LanguageClient(\n     'scalameta',\n     'Scalameta',\n     serverOptions,\n     clientOptions\n-  ).start();\n+  );\n \n-  context.subscriptions.push(disposable);\n+  const restartServerCommand = commands.registerCommand(\"scalameta.restartServer\", async () => {\n+    await exec(\"jps | grep coursier | awk '{ print $1 }' | xargs kill\");\n+    const showLogsAction = \"Show server logs\";\n+    const selectedAction = await window.showInformationMessage(\n+      \"Scalameta Language Server killed, it should restart in a few seconds\",\n+      showLogsAction\n+    );\n+    const myOutputChannel = window.createOutputChannel('Scalameta');\n+\n+    if (selectedAction === showLogsAction) {\n+      client.outputChannel.show(true);"
  },
  {
    "id" : "ff5afd98-43a5-44f6-a030-1d0245a6bf10",
    "prId" : 108,
    "comments" : [
      {
        "id" : "3b7b0c34-1e7e-4327-a4b9-98f80f37897a",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This might catch other long running coursier processes, I would be careful to run this on client machines. Is there any way for us to get the pid of the process of the server when we start it?",
        "createdAt" : "2017-12-10T11:13:45Z",
        "updatedAt" : "2017-12-10T17:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "55869d9a-1f06-4635-ac29-e52b5bd41847",
        "parentId" : "3b7b0c34-1e7e-4327-a4b9-98f80f37897a",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Ah, right, it's a bit overkill this way. I may be able to retrieve the server pid from the client. I'll try later ",
        "createdAt" : "2017-12-10T11:23:46Z",
        "updatedAt" : "2017-12-10T17:08:36Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "48e5f05e-1b04-4daf-9c79-3b290febc8ca",
        "parentId" : "3b7b0c34-1e7e-4327-a4b9-98f80f37897a",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "done! I had to access a private variable of the language client, but it seems to work reliably. `private` a is compile-time only concept in TypeScript and can be easily bypassed.",
        "createdAt" : "2017-12-10T15:14:55Z",
        "updatedAt" : "2017-12-10T17:08:36Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d70930516287ca7b7c4d7cf5be37c376e93809bd",
    "line" : null,
    "diffHunk" : "@@ -69,12 +70,26 @@ export async function activate(context: ExtensionContext) {\n     revealOutputChannelOn: RevealOutputChannelOn.Never\n   };\n \n-  const disposable = new LanguageClient(\n+  const client = new LanguageClient(\n     'scalameta',\n     'Scalameta',\n     serverOptions,\n     clientOptions\n-  ).start();\n+  );\n \n-  context.subscriptions.push(disposable);\n+  const restartServerCommand = commands.registerCommand(\"scalameta.restartServer\", async () => {\n+    await exec(\"jps | grep coursier | awk '{ print $1 }' | xargs kill\");"
  },
  {
    "id" : "5094c377-5457-4414-a726-a89d4f50ded6",
    "prId" : 131,
    "comments" : [
      {
        "id" : "867f2b6b-9db5-4b0c-b11c-de3b7c19c1c2",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Is this needed for every new command? I thought codeActions was a way for the server to list the commands it supports.",
        "createdAt" : "2017-12-15T11:42:58Z",
        "updatedAt" : "2017-12-15T11:43:33Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "437d357b-30f0-44ce-8410-cd571ed6ae35",
        "parentId" : "867f2b6b-9db5-4b0c-b11c-de3b7c19c1c2",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Yes, it is. codeAction is not very well integrated in the client library, as of now. I guess it may depend by the requirement for extensions to statically include commands in the manifest",
        "createdAt" : "2017-12-15T11:52:03Z",
        "updatedAt" : "2017-12-15T11:52:04Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "867e5b2b0a081dfb481be2a14c9b7bffa47a2d98",
    "line" : 15,
    "diffHunk" : "@@ -91,5 +92,12 @@ export async function activate(context: ExtensionContext) {\n     }\n   });\n \n+  client.onReady().then(() => {\n+    const clearIndexCacheCommand = commands.registerCommand(\"scalameta.clearIndexCache\", async () => {"
  },
  {
    "id" : "689bfb0e-049f-4c51-ad80-e8d680744efa",
    "prId" : 218,
    "comments" : [
      {
        "id" : "dd2a9641-3eac-4ccc-9ab9-5200a0f43e2f",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I've tested this locally: the default currently returns an error (because there's no 0.1.0 artifact published yet), and changing it to `0.1-SNAPSHOT` works correctly.",
        "createdAt" : "2018-04-02T10:39:24Z",
        "updatedAt" : "2018-04-02T13:59:00Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "068a26e77742148e377252e19071478495c26d1e",
    "line" : 10,
    "diffHunk" : "@@ -21,10 +21,12 @@ export async function activate(context: ExtensionContext) {\n \n   const coursierPath = path.join(context.extensionPath, \"./coursier\");\n \n+  const serverVersion = workspace.getConfiguration(\"metals\").get(\"serverVersion\")\n+\n   const coursierArgs = [\n     \"launch\",\n     \"-r\", \"bintray:scalameta/maven\",\n-    \"org.scalameta:metals_2.12:0.1-SNAPSHOT\",\n+    `org.scalameta:metals_2.12:${serverVersion}`,"
  },
  {
    "id" : "76b0a7c6-7437-4edb-9ff5-9b23b374c4ab",
    "prId" : 274,
    "comments" : [
      {
        "id" : "2db3b2ab-0586-4789-875b-5d163b39e68d",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "I suggest that we move as much as possible of the command implementation to the server side, so that clients only need to invoke the command and provide any optional UI. Can we write the zip from the server?",
        "createdAt" : "2018-04-10T16:43:51Z",
        "updatedAt" : "2018-09-27T11:32:08Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e1ac5747-8730-4305-9569-64c18a19db69",
        "parentId" : "2db3b2ab-0586-4789-875b-5d163b39e68d",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I think you're right, it's much easier for the client.\r\n\r\nI was still working under the assumption that server and client could technically live on different machines, but I think it's a bit of a stretch as of today.",
        "createdAt" : "2018-04-10T19:46:57Z",
        "updatedAt" : "2018-09-27T11:32:08Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "391ee6b1-cfba-4133-aae8-429b653ab9c8",
        "parentId" : "2db3b2ab-0586-4789-875b-5d163b39e68d",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I agree with @laughedelic this should be handled fully server side. Remote LSP is an interesting application that is not supported currently and would require custom development to work.",
        "createdAt" : "2018-04-11T10:53:41Z",
        "updatedAt" : "2018-09-27T11:32:08Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4131c4727560c4849e4a0b6eb1b5270a23a01ddd",
    "line" : null,
    "diffHunk" : "@@ -102,10 +103,29 @@ export async function activate(context: ExtensionContext) {\n         });\n       }\n     );\n+    const downloadDebugPayloadCommand = commands.registerCommand(\n+      'metals.downloadDebugPayload',\n+      async () => {\n+        const byteArray = await client.sendRequest(ExecuteCommandRequest.type, {\n+          command: \"downloadDebugPayload\",\n+          arguments: [window.activeTextEditor.document.uri.toString()]\n+        })\n+        const workspaceRoot = workspace.workspaceFolders[0].uri.fsPath\n+        const fileName = `${workspaceRoot}/.metals/debug-${Date.now()}.zip`\n+        writeFile(fileName, new Buffer(byteArray), (err: Error) => {"
  },
  {
    "id" : "e9bc61c4-3a8b-4e35-adc6-7ae30c37e874",
    "prId" : 304,
    "comments" : [
      {
        "id" : "f92abf0a-88aa-4e03-a56a-b1dbf01d1e2e",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "minor, but since you're using a single function from `child_process` I would do\r\n\r\n```js\r\nimport { spawn } from 'child_process';\r\n```",
        "createdAt" : "2018-05-07T14:48:53Z",
        "updatedAt" : "2018-05-08T23:18:28Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1466cbda2b89853fd14f1faf7d5cfa76127b16a8",
    "line" : null,
    "diffHunk" : "@@ -1,6 +1,7 @@\n \"use strict\";\n \n import * as path from \"path\";\n+import * as cp from 'child_process';"
  },
  {
    "id" : "fbb73b6d-1eaf-47e8-8bf9-42173daaace9",
    "prId" : 304,
    "comments" : [
      {
        "id" : "fb69ad63-b632-4729-b456-8ff544148c22",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "You can use the \"fat-arrow\" for conciseness:\r\n\r\n```js\r\n.on('exit', code => {\r\n  ...\r\n})\r\n```",
        "createdAt" : "2018-05-07T14:50:12Z",
        "updatedAt" : "2018-05-08T23:18:28Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1466cbda2b89853fd14f1faf7d5cfa76127b16a8",
    "line" : null,
    "diffHunk" : "@@ -110,5 +124,18 @@ export async function activate(context: ExtensionContext) {\n     );\n   });\n \n-  context.subscriptions.push(client.start(), restartServerCommand);\n+\n+  cp.spawn('java', resolveArgs)\n+    .on('exit', function(code) {"
  },
  {
    "id" : "e4c72da6-5ba3-42dc-8afc-5e34853276ff",
    "prId" : 304,
    "comments" : [
      {
        "id" : "292e72e8-3ff7-4e72-a3b3-c1a6b6c4147e",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Do you need to have the console open to see this message? I just tried locally with a dummy serverVersion and couldn't get this message to appear 🤔 ",
        "createdAt" : "2018-05-08T07:43:20Z",
        "updatedAt" : "2018-05-08T23:18:28Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "61fed647-3ffc-4cc5-8061-4e50c5fdb7bf",
        "parentId" : "292e72e8-3ff7-4e72-a3b3-c1a6b6c4147e",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "how about making this a `window.showErrorMessage` instead? I think it's worth being extra explicit when this happens",
        "createdAt" : "2018-05-08T22:00:16Z",
        "updatedAt" : "2018-05-08T23:18:28Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "61ed0a23-4e38-4084-aaf1-c30b9ad6c082",
        "parentId" : "292e72e8-3ff7-4e72-a3b3-c1a6b6c4147e",
        "author" : {
          "login" : "benhutchison",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/95460?v=4"
        },
        "body" : "Makes sense, done. I send the errror message to both console & window because I think console should retain history log of important events like this.",
        "createdAt" : "2018-05-08T22:42:46Z",
        "updatedAt" : "2018-05-08T23:18:28Z",
        "lastEditedBy" : {
          "login" : "benhutchison",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/95460?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1466cbda2b89853fd14f1faf7d5cfa76127b16a8",
    "line" : null,
    "diffHunk" : "@@ -110,5 +124,18 @@ export async function activate(context: ExtensionContext) {\n     );\n   });\n \n-  context.subscriptions.push(client.start(), restartServerCommand);\n+\n+  spawn('java', resolveArgs)\n+    .on('exit', code => {\n+      if (code !== 0) {\n+        console.error("
  },
  {
    "id" : "5d653376-80e1-41c5-acd9-1ab280646dd6",
    "prId" : 304,
    "comments" : [
      {
        "id" : "064d6ad2-6a41-4ef1-96dd-9f6b0c9808fc",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "I don't know if there's a better way to do this in TS, but it wasn't obvious for me that this is meant to be like `.stripMargin` in Scala.",
        "createdAt" : "2018-05-08T22:47:45Z",
        "updatedAt" : "2018-05-08T23:18:28Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8e334546-5354-4222-8750-e7bfa75a2ea1",
        "parentId" : "064d6ad2-6a41-4ef1-96dd-9f6b0c9808fc",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I really miss `.stripMargin` in JavaScript.\r\n\r\nThe \"trick\" I usually adopt is:\r\n\r\n```js\r\nconst msg = [\r\n  'Could not find Metals server artifact, ensure that metals.serverVersion setting is correct.',\r\n  `Coursier resolve failed on:${artifact} with exit code:${code}.`\r\n].join('\\n')\r\n```",
        "createdAt" : "2018-05-08T22:48:00Z",
        "updatedAt" : "2018-05-08T23:18:28Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1466cbda2b89853fd14f1faf7d5cfa76127b16a8",
    "line" : null,
    "diffHunk" : "@@ -110,5 +124,18 @@ export async function activate(context: ExtensionContext) {\n     );\n   });\n \n-  context.subscriptions.push(client.start(), restartServerCommand);\n+\n+  spawn('java', resolveArgs)\n+    .on('exit', code => {\n+      if (code !== 0) {\n+        const msg =  `Could not find Metals server artifact, ensure that metals.serverVersion setting is correct.\n+                      Coursier resolve failed on:${artifact} with exit code:${code}.`.replace(/^(\\s{2})+/gm, '');"
  }
]