[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "no space before `(`",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-21T00:03:22Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps.initcontainer\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.Constants._\n+\n+class InitContainerConfigOrchestratorSuite extends SparkFunSuite {\n+\n+  private val DOCKER_IMAGE = \"init-container\"\n+  private val SPARK_JARS = Seq(\n+    \"hdfs://localhost:9000/app/jars/jar1.jar\", \"file:///app/jars/jar2.jar\")\n+  private val SPARK_FILES = Seq(\n+    \"hdfs://localhost:9000/app/files/file1.txt\", \"file:///app/files/file2.txt\")\n+  private val JARS_DOWNLOAD_PATH = \"/var/data/jars\"\n+  private val FILES_DOWNLOAD_PATH = \"/var/data/files\"\n+  private val DOCKER_IMAGE_PULL_POLICY: String = \"IfNotPresent\"\n+  private val CUSTOM_LABEL_KEY = \"customLabel\"\n+  private val CUSTOM_LABEL_VALUE = \"customLabelValue\"\n+  private val INIT_CONTAINER_CONFIG_MAP_NAME = \"spark-init-config-map\"\n+  private val INIT_CONTAINER_CONFIG_MAP_KEY = \"spark-init-config-map-key\"\n+  private val SECRET_FOO = \"foo\"\n+  private val SECRET_BAR = \"bar\"\n+  private val SECRET_MOUNT_PATH = \"/etc/secrets/init-container\"\n+\n+  test (\"including basic configuration step\") {"
  }],
  "prId": 19954
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "no space before `:`; in fact the type isn't really needed here.",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-21T00:03:48Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps.initcontainer\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.Constants._\n+\n+class InitContainerConfigOrchestratorSuite extends SparkFunSuite {\n+\n+  private val DOCKER_IMAGE = \"init-container\"\n+  private val SPARK_JARS = Seq(\n+    \"hdfs://localhost:9000/app/jars/jar1.jar\", \"file:///app/jars/jar2.jar\")\n+  private val SPARK_FILES = Seq(\n+    \"hdfs://localhost:9000/app/files/file1.txt\", \"file:///app/files/file2.txt\")\n+  private val JARS_DOWNLOAD_PATH = \"/var/data/jars\"\n+  private val FILES_DOWNLOAD_PATH = \"/var/data/files\"\n+  private val DOCKER_IMAGE_PULL_POLICY: String = \"IfNotPresent\"\n+  private val CUSTOM_LABEL_KEY = \"customLabel\"\n+  private val CUSTOM_LABEL_VALUE = \"customLabelValue\"\n+  private val INIT_CONTAINER_CONFIG_MAP_NAME = \"spark-init-config-map\"\n+  private val INIT_CONTAINER_CONFIG_MAP_KEY = \"spark-init-config-map-key\"\n+  private val SECRET_FOO = \"foo\"\n+  private val SECRET_BAR = \"bar\"\n+  private val SECRET_MOUNT_PATH = \"/etc/secrets/init-container\"\n+\n+  test (\"including basic configuration step\") {\n+    val sparkConf = new SparkConf(true)\n+      .set(INIT_CONTAINER_IMAGE, DOCKER_IMAGE)\n+      .set(s\"$KUBERNETES_DRIVER_LABEL_PREFIX$CUSTOM_LABEL_KEY\", CUSTOM_LABEL_VALUE)\n+\n+    val orchestrator = new InitContainerConfigOrchestrator(\n+      SPARK_JARS.take(1),\n+      SPARK_FILES,\n+      JARS_DOWNLOAD_PATH,\n+      FILES_DOWNLOAD_PATH,\n+      DOCKER_IMAGE_PULL_POLICY,\n+      INIT_CONTAINER_CONFIG_MAP_NAME,\n+      INIT_CONTAINER_CONFIG_MAP_KEY,\n+      sparkConf)\n+    val initSteps : Seq[InitContainerConfigurationStep] =\n+      orchestrator.getAllConfigurationSteps\n+    assert(initSteps.lengthCompare(1) == 0)\n+    assert(initSteps.head.isInstanceOf[BasicInitContainerConfigurationStep])\n+  }\n+\n+  test(\"including step to mount user-specified secrets\") {\n+    val sparkConf = new SparkConf(false)\n+      .set(INIT_CONTAINER_IMAGE, DOCKER_IMAGE)\n+      .set(s\"$KUBERNETES_DRIVER_SECRETS_PREFIX$SECRET_FOO\", SECRET_MOUNT_PATH)\n+      .set(s\"$KUBERNETES_DRIVER_SECRETS_PREFIX$SECRET_BAR\", SECRET_MOUNT_PATH)\n+\n+    val orchestrator = new InitContainerConfigOrchestrator(\n+      SPARK_JARS.take(1),\n+      SPARK_FILES,\n+      JARS_DOWNLOAD_PATH,\n+      FILES_DOWNLOAD_PATH,\n+      DOCKER_IMAGE_PULL_POLICY,\n+      INIT_CONTAINER_CONFIG_MAP_NAME,\n+      INIT_CONTAINER_CONFIG_MAP_KEY,\n+      sparkConf)\n+    val initSteps : Seq[InitContainerConfigurationStep] ="
  }],
  "prId": 19954
}]