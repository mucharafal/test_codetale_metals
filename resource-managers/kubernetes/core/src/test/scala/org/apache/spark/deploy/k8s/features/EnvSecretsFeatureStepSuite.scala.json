[{
  "comments": [{
    "author": {
      "login": "liyinan926"
    },
    "body": "It's better if the bests also verify the values of the env vars.",
    "commit": "b55d3f0070cbac932f0410b1a42b45d84ea493ce",
    "createdAt": "2018-05-21T16:32:55Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features\n+\n+import io.fabric8.kubernetes.api.model.PodBuilder\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.k8s._\n+\n+class EnvSecretsFeatureStepSuite extends SparkFunSuite{\n+  private val KEY_REF_NAME_FOO = \"foo\"\n+  private val KEY_REF_NAME_BAR = \"bar\"\n+  private val KEY_REF_KEY_FOO = \"key_foo\"\n+  private val KEY_REF_KEY_BAR = \"key_bar\"\n+  private val ENV_NAME_FOO = \"MY_FOO\"\n+  private val ENV_NAME_BAR = \"MY_bar\"\n+\n+  test(\"sets up all keyRefs\") {\n+    val baseDriverPod = SparkPod.initialPod()\n+    val envVarsToKeys = Map(\n+      ENV_NAME_BAR -> s\"${KEY_REF_NAME_BAR}:${KEY_REF_KEY_BAR}\",\n+      ENV_NAME_FOO -> s\"${KEY_REF_NAME_FOO}:${KEY_REF_KEY_FOO}\")\n+    val sparkConf = new SparkConf(false)\n+    val kubernetesConf = KubernetesConf(\n+      sparkConf,\n+      KubernetesExecutorSpecificConf(\"1\", new PodBuilder().build()),\n+      \"resource-name-prefix\",\n+      \"app-id\",\n+      Map.empty,\n+      Map.empty,\n+      Map.empty,\n+      envVarsToKeys,\n+      Map.empty)\n+\n+    val step = new EnvSecretsFeatureStep(kubernetesConf)\n+    val driverContainerWithEnvSecrets = step.configurePod(baseDriverPod).container\n+\n+    val expectedVars =\n+      Seq(s\"${ENV_NAME_BAR}\", s\"${ENV_NAME_FOO}\")\n+\n+    expectedVars.foreach { envName =>\n+      assert(SecretEnvUtils.containerHasEnvVar(driverContainerWithEnvSecrets, envName))"
  }, {
    "author": {
      "login": "skonto"
    },
    "body": "Will try, makes sense. \r\n@liyinan926 On the other hand, how do I attach a secret to the pod to test then the container's env.\r\nShould I introduce any mocking like in the one in test shown here: https://github.com/fabric8io/kubernetes-client ?\r\nI don't see anything related to that in the mount secrets tests.\r\nWould be ok to introduce the [kubernetes-server-mock](https://mvnrepository.com/artifact/io.fabric8/kubernetes-server-mock/3.1.12) dependency to create the pod and then check its container's env? Were you thinking of that?",
    "commit": "b55d3f0070cbac932f0410b1a42b45d84ea493ce",
    "createdAt": "2018-05-23T13:19:31Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features\n+\n+import io.fabric8.kubernetes.api.model.PodBuilder\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.k8s._\n+\n+class EnvSecretsFeatureStepSuite extends SparkFunSuite{\n+  private val KEY_REF_NAME_FOO = \"foo\"\n+  private val KEY_REF_NAME_BAR = \"bar\"\n+  private val KEY_REF_KEY_FOO = \"key_foo\"\n+  private val KEY_REF_KEY_BAR = \"key_bar\"\n+  private val ENV_NAME_FOO = \"MY_FOO\"\n+  private val ENV_NAME_BAR = \"MY_bar\"\n+\n+  test(\"sets up all keyRefs\") {\n+    val baseDriverPod = SparkPod.initialPod()\n+    val envVarsToKeys = Map(\n+      ENV_NAME_BAR -> s\"${KEY_REF_NAME_BAR}:${KEY_REF_KEY_BAR}\",\n+      ENV_NAME_FOO -> s\"${KEY_REF_NAME_FOO}:${KEY_REF_KEY_FOO}\")\n+    val sparkConf = new SparkConf(false)\n+    val kubernetesConf = KubernetesConf(\n+      sparkConf,\n+      KubernetesExecutorSpecificConf(\"1\", new PodBuilder().build()),\n+      \"resource-name-prefix\",\n+      \"app-id\",\n+      Map.empty,\n+      Map.empty,\n+      Map.empty,\n+      envVarsToKeys,\n+      Map.empty)\n+\n+    val step = new EnvSecretsFeatureStep(kubernetesConf)\n+    val driverContainerWithEnvSecrets = step.configurePod(baseDriverPod).container\n+\n+    val expectedVars =\n+      Seq(s\"${ENV_NAME_BAR}\", s\"${ENV_NAME_FOO}\")\n+\n+    expectedVars.foreach { envName =>\n+      assert(SecretEnvUtils.containerHasEnvVar(driverContainerWithEnvSecrets, envName))"
  }, {
    "author": {
      "login": "skonto"
    },
    "body": "As we discussed this is K8s responsibility we shouldnt verify the values.",
    "commit": "b55d3f0070cbac932f0410b1a42b45d84ea493ce",
    "createdAt": "2018-05-24T09:06:27Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features\n+\n+import io.fabric8.kubernetes.api.model.PodBuilder\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.k8s._\n+\n+class EnvSecretsFeatureStepSuite extends SparkFunSuite{\n+  private val KEY_REF_NAME_FOO = \"foo\"\n+  private val KEY_REF_NAME_BAR = \"bar\"\n+  private val KEY_REF_KEY_FOO = \"key_foo\"\n+  private val KEY_REF_KEY_BAR = \"key_bar\"\n+  private val ENV_NAME_FOO = \"MY_FOO\"\n+  private val ENV_NAME_BAR = \"MY_bar\"\n+\n+  test(\"sets up all keyRefs\") {\n+    val baseDriverPod = SparkPod.initialPod()\n+    val envVarsToKeys = Map(\n+      ENV_NAME_BAR -> s\"${KEY_REF_NAME_BAR}:${KEY_REF_KEY_BAR}\",\n+      ENV_NAME_FOO -> s\"${KEY_REF_NAME_FOO}:${KEY_REF_KEY_FOO}\")\n+    val sparkConf = new SparkConf(false)\n+    val kubernetesConf = KubernetesConf(\n+      sparkConf,\n+      KubernetesExecutorSpecificConf(\"1\", new PodBuilder().build()),\n+      \"resource-name-prefix\",\n+      \"app-id\",\n+      Map.empty,\n+      Map.empty,\n+      Map.empty,\n+      envVarsToKeys,\n+      Map.empty)\n+\n+    val step = new EnvSecretsFeatureStep(kubernetesConf)\n+    val driverContainerWithEnvSecrets = step.configurePod(baseDriverPod).container\n+\n+    val expectedVars =\n+      Seq(s\"${ENV_NAME_BAR}\", s\"${ENV_NAME_FOO}\")\n+\n+    expectedVars.foreach { envName =>\n+      assert(SecretEnvUtils.containerHasEnvVar(driverContainerWithEnvSecrets, envName))"
  }],
  "prId": 21317
}]