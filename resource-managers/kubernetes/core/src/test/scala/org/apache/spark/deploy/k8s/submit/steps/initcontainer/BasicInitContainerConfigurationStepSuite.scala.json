[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "remove \"Test of\"",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-21T00:01:42Z",
    "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps.initcontainer\n+\n+import scala.collection.JavaConverters._\n+\n+import io.fabric8.kubernetes.api.model._\n+import org.mockito.{Mock, MockitoAnnotations}\n+import org.mockito.Matchers.any\n+import org.mockito.Mockito.when\n+import org.mockito.invocation.InvocationOnMock\n+import org.mockito.stubbing.Answer\n+import org.scalatest.BeforeAndAfter\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.deploy.k8s.{InitContainerBootstrap, PodWithDetachedInitContainer}\n+import org.apache.spark.deploy.k8s.Config._\n+\n+class BasicInitContainerConfigurationStepSuite extends SparkFunSuite with BeforeAndAfter {\n+\n+  private val SPARK_JARS = Seq(\n+    \"hdfs://localhost:9000/app/jars/jar1.jar\", \"file:///app/jars/jar2.jar\")\n+  private val SPARK_FILES = Seq(\n+    \"hdfs://localhost:9000/app/files/file1.txt\", \"file:///app/files/file2.txt\")\n+  private val JARS_DOWNLOAD_PATH = \"/var/data/jars\"\n+  private val FILES_DOWNLOAD_PATH = \"/var/data/files\"\n+  private val POD_LABEL = Map(\"bootstrap\" -> \"true\")\n+  private val INIT_CONTAINER_NAME = \"init-container\"\n+  private val DRIVER_CONTAINER_NAME = \"driver-container\"\n+\n+  @Mock\n+  private var podAndInitContainerBootstrap : InitContainerBootstrap = _\n+\n+  before {\n+    MockitoAnnotations.initMocks(this)\n+    when(podAndInitContainerBootstrap.bootstrapInitContainer(\n+      any[PodWithDetachedInitContainer])).thenAnswer(new Answer[PodWithDetachedInitContainer] {\n+      override def answer(invocation: InvocationOnMock) : PodWithDetachedInitContainer = {\n+        val pod = invocation.getArgumentAt(0, classOf[PodWithDetachedInitContainer])\n+        pod.copy(\n+          pod = new PodBuilder(pod.pod)\n+            .withNewMetadata()\n+            .addToLabels(\"bootstrap\", \"true\")\n+            .endMetadata()\n+            .withNewSpec().endSpec()\n+            .build(),\n+          initContainer = new ContainerBuilder()\n+            .withName(INIT_CONTAINER_NAME)\n+            .build(),\n+          mainContainer = new ContainerBuilder()\n+            .withName(DRIVER_CONTAINER_NAME)\n+            .build()\n+        )}})\n+  }\n+\n+  test(\"Test of additionalDriverSparkConf with mix of remote files and jars\") {"
  }],
  "prId": 19954
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "`===`",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-21T00:02:00Z",
    "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps.initcontainer\n+\n+import scala.collection.JavaConverters._\n+\n+import io.fabric8.kubernetes.api.model._\n+import org.mockito.{Mock, MockitoAnnotations}\n+import org.mockito.Matchers.any\n+import org.mockito.Mockito.when\n+import org.mockito.invocation.InvocationOnMock\n+import org.mockito.stubbing.Answer\n+import org.scalatest.BeforeAndAfter\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.deploy.k8s.{InitContainerBootstrap, PodWithDetachedInitContainer}\n+import org.apache.spark.deploy.k8s.Config._\n+\n+class BasicInitContainerConfigurationStepSuite extends SparkFunSuite with BeforeAndAfter {\n+\n+  private val SPARK_JARS = Seq(\n+    \"hdfs://localhost:9000/app/jars/jar1.jar\", \"file:///app/jars/jar2.jar\")\n+  private val SPARK_FILES = Seq(\n+    \"hdfs://localhost:9000/app/files/file1.txt\", \"file:///app/files/file2.txt\")\n+  private val JARS_DOWNLOAD_PATH = \"/var/data/jars\"\n+  private val FILES_DOWNLOAD_PATH = \"/var/data/files\"\n+  private val POD_LABEL = Map(\"bootstrap\" -> \"true\")\n+  private val INIT_CONTAINER_NAME = \"init-container\"\n+  private val DRIVER_CONTAINER_NAME = \"driver-container\"\n+\n+  @Mock\n+  private var podAndInitContainerBootstrap : InitContainerBootstrap = _\n+\n+  before {\n+    MockitoAnnotations.initMocks(this)\n+    when(podAndInitContainerBootstrap.bootstrapInitContainer(\n+      any[PodWithDetachedInitContainer])).thenAnswer(new Answer[PodWithDetachedInitContainer] {\n+      override def answer(invocation: InvocationOnMock) : PodWithDetachedInitContainer = {\n+        val pod = invocation.getArgumentAt(0, classOf[PodWithDetachedInitContainer])\n+        pod.copy(\n+          pod = new PodBuilder(pod.pod)\n+            .withNewMetadata()\n+            .addToLabels(\"bootstrap\", \"true\")\n+            .endMetadata()\n+            .withNewSpec().endSpec()\n+            .build(),\n+          initContainer = new ContainerBuilder()\n+            .withName(INIT_CONTAINER_NAME)\n+            .build(),\n+          mainContainer = new ContainerBuilder()\n+            .withName(DRIVER_CONTAINER_NAME)\n+            .build()\n+        )}})\n+  }\n+\n+  test(\"Test of additionalDriverSparkConf with mix of remote files and jars\") {\n+    val baseInitStep = new BasicInitContainerConfigurationStep(\n+      SPARK_JARS,\n+      SPARK_FILES,\n+      JARS_DOWNLOAD_PATH,\n+      FILES_DOWNLOAD_PATH,\n+      podAndInitContainerBootstrap)\n+    val expectedDriverSparkConf = Map(\n+      JARS_DOWNLOAD_LOCATION.key -> JARS_DOWNLOAD_PATH,\n+      FILES_DOWNLOAD_LOCATION.key -> FILES_DOWNLOAD_PATH,\n+      INIT_CONTAINER_REMOTE_JARS.key -> \"hdfs://localhost:9000/app/jars/jar1.jar\",\n+      INIT_CONTAINER_REMOTE_FILES.key -> \"hdfs://localhost:9000/app/files/file1.txt\")\n+    val initContainerSpec = InitContainerSpec(\n+      Map.empty[String, String],\n+      Map.empty[String, String],\n+      new Container(),\n+      new Container(),\n+      new Pod,\n+      Seq.empty[HasMetadata])\n+    val returnContainerSpec = baseInitStep.configureInitContainer(initContainerSpec)\n+    assert(expectedDriverSparkConf === returnContainerSpec.properties)\n+    assert(returnContainerSpec.initContainer.getName == INIT_CONTAINER_NAME)"
  }],
  "prId": 19954
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "`===`",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-21T00:02:07Z",
    "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps.initcontainer\n+\n+import scala.collection.JavaConverters._\n+\n+import io.fabric8.kubernetes.api.model._\n+import org.mockito.{Mock, MockitoAnnotations}\n+import org.mockito.Matchers.any\n+import org.mockito.Mockito.when\n+import org.mockito.invocation.InvocationOnMock\n+import org.mockito.stubbing.Answer\n+import org.scalatest.BeforeAndAfter\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.deploy.k8s.{InitContainerBootstrap, PodWithDetachedInitContainer}\n+import org.apache.spark.deploy.k8s.Config._\n+\n+class BasicInitContainerConfigurationStepSuite extends SparkFunSuite with BeforeAndAfter {\n+\n+  private val SPARK_JARS = Seq(\n+    \"hdfs://localhost:9000/app/jars/jar1.jar\", \"file:///app/jars/jar2.jar\")\n+  private val SPARK_FILES = Seq(\n+    \"hdfs://localhost:9000/app/files/file1.txt\", \"file:///app/files/file2.txt\")\n+  private val JARS_DOWNLOAD_PATH = \"/var/data/jars\"\n+  private val FILES_DOWNLOAD_PATH = \"/var/data/files\"\n+  private val POD_LABEL = Map(\"bootstrap\" -> \"true\")\n+  private val INIT_CONTAINER_NAME = \"init-container\"\n+  private val DRIVER_CONTAINER_NAME = \"driver-container\"\n+\n+  @Mock\n+  private var podAndInitContainerBootstrap : InitContainerBootstrap = _\n+\n+  before {\n+    MockitoAnnotations.initMocks(this)\n+    when(podAndInitContainerBootstrap.bootstrapInitContainer(\n+      any[PodWithDetachedInitContainer])).thenAnswer(new Answer[PodWithDetachedInitContainer] {\n+      override def answer(invocation: InvocationOnMock) : PodWithDetachedInitContainer = {\n+        val pod = invocation.getArgumentAt(0, classOf[PodWithDetachedInitContainer])\n+        pod.copy(\n+          pod = new PodBuilder(pod.pod)\n+            .withNewMetadata()\n+            .addToLabels(\"bootstrap\", \"true\")\n+            .endMetadata()\n+            .withNewSpec().endSpec()\n+            .build(),\n+          initContainer = new ContainerBuilder()\n+            .withName(INIT_CONTAINER_NAME)\n+            .build(),\n+          mainContainer = new ContainerBuilder()\n+            .withName(DRIVER_CONTAINER_NAME)\n+            .build()\n+        )}})\n+  }\n+\n+  test(\"Test of additionalDriverSparkConf with mix of remote files and jars\") {\n+    val baseInitStep = new BasicInitContainerConfigurationStep(\n+      SPARK_JARS,\n+      SPARK_FILES,\n+      JARS_DOWNLOAD_PATH,\n+      FILES_DOWNLOAD_PATH,\n+      podAndInitContainerBootstrap)\n+    val expectedDriverSparkConf = Map(\n+      JARS_DOWNLOAD_LOCATION.key -> JARS_DOWNLOAD_PATH,\n+      FILES_DOWNLOAD_LOCATION.key -> FILES_DOWNLOAD_PATH,\n+      INIT_CONTAINER_REMOTE_JARS.key -> \"hdfs://localhost:9000/app/jars/jar1.jar\",\n+      INIT_CONTAINER_REMOTE_FILES.key -> \"hdfs://localhost:9000/app/files/file1.txt\")\n+    val initContainerSpec = InitContainerSpec(\n+      Map.empty[String, String],\n+      Map.empty[String, String],\n+      new Container(),\n+      new Container(),\n+      new Pod,\n+      Seq.empty[HasMetadata])\n+    val returnContainerSpec = baseInitStep.configureInitContainer(initContainerSpec)\n+    assert(expectedDriverSparkConf === returnContainerSpec.properties)\n+    assert(returnContainerSpec.initContainer.getName == INIT_CONTAINER_NAME)\n+    assert(returnContainerSpec.driverContainer.getName == DRIVER_CONTAINER_NAME)"
  }],
  "prId": 19954
}]