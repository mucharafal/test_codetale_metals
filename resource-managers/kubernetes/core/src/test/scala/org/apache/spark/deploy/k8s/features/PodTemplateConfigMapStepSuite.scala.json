[{
  "comments": [{
    "author": {
      "login": "skonto"
    },
    "body": "Can we add a test with a malformed template?",
    "commit": "3707e6a411cdb8410365cde8e79b8d3ec01a7fee",
    "createdAt": "2018-08-29T09:46:30Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features\n+\n+import java.io.{File, PrintWriter}\n+import java.nio.file.Files\n+\n+import io.fabric8.kubernetes.api.model.ConfigMap\n+import org.mockito.Mockito\n+import org.scalatest.BeforeAndAfter\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.k8s._\n+\n+class PodTemplateConfigMapStepSuite extends SparkFunSuite with BeforeAndAfter {\n+  private var sparkConf: SparkConf = _\n+  private var kubernetesConf : KubernetesConf[_ <: KubernetesRoleSpecificConf] = _\n+  private var templateFile: File = _\n+\n+  before {\n+    sparkConf = Mockito.mock(classOf[SparkConf])\n+    kubernetesConf = KubernetesConf(\n+      sparkConf,\n+      KubernetesDriverSpecificConf(\n+        None,\n+        \"app-name\",\n+        \"main\",\n+        Seq.empty),\n+      \"resource\",\n+      \"app-id\",\n+      Map.empty,\n+      Map.empty,\n+      Map.empty,\n+      Map.empty,\n+      Map.empty,\n+      Nil,\n+      Seq.empty[String])\n+    templateFile = Files.createTempFile(\"pod-template\", \"yml\").toFile\n+    templateFile.deleteOnExit()\n+    Mockito.doReturn(Option(templateFile.getAbsolutePath)).when(sparkConf)\n+      .get(Config.KUBERNETES_EXECUTOR_PODTEMPLATE_FILE)\n+  }\n+\n+  test(\"Mounts executor template volume if config specified\") {",
    "line": 59
  }, {
    "author": {
      "login": "onursatici"
    },
    "body": "Because we need a kubernetesClient to be able to load a yaml file (not ideal design decision from fabric8 for this case), I think we can only test that in integration tests",
    "commit": "3707e6a411cdb8410365cde8e79b8d3ec01a7fee",
    "createdAt": "2018-08-29T21:50:33Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features\n+\n+import java.io.{File, PrintWriter}\n+import java.nio.file.Files\n+\n+import io.fabric8.kubernetes.api.model.ConfigMap\n+import org.mockito.Mockito\n+import org.scalatest.BeforeAndAfter\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.k8s._\n+\n+class PodTemplateConfigMapStepSuite extends SparkFunSuite with BeforeAndAfter {\n+  private var sparkConf: SparkConf = _\n+  private var kubernetesConf : KubernetesConf[_ <: KubernetesRoleSpecificConf] = _\n+  private var templateFile: File = _\n+\n+  before {\n+    sparkConf = Mockito.mock(classOf[SparkConf])\n+    kubernetesConf = KubernetesConf(\n+      sparkConf,\n+      KubernetesDriverSpecificConf(\n+        None,\n+        \"app-name\",\n+        \"main\",\n+        Seq.empty),\n+      \"resource\",\n+      \"app-id\",\n+      Map.empty,\n+      Map.empty,\n+      Map.empty,\n+      Map.empty,\n+      Map.empty,\n+      Nil,\n+      Seq.empty[String])\n+    templateFile = Files.createTempFile(\"pod-template\", \"yml\").toFile\n+    templateFile.deleteOnExit()\n+    Mockito.doReturn(Option(templateFile.getAbsolutePath)).when(sparkConf)\n+      .get(Config.KUBERNETES_EXECUTOR_PODTEMPLATE_FILE)\n+  }\n+\n+  test(\"Mounts executor template volume if config specified\") {",
    "line": 59
  }, {
    "author": {
      "login": "skonto"
    },
    "body": "Ok as long as there is a test its ok.",
    "commit": "3707e6a411cdb8410365cde8e79b8d3ec01a7fee",
    "createdAt": "2018-08-30T17:37:34Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features\n+\n+import java.io.{File, PrintWriter}\n+import java.nio.file.Files\n+\n+import io.fabric8.kubernetes.api.model.ConfigMap\n+import org.mockito.Mockito\n+import org.scalatest.BeforeAndAfter\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.k8s._\n+\n+class PodTemplateConfigMapStepSuite extends SparkFunSuite with BeforeAndAfter {\n+  private var sparkConf: SparkConf = _\n+  private var kubernetesConf : KubernetesConf[_ <: KubernetesRoleSpecificConf] = _\n+  private var templateFile: File = _\n+\n+  before {\n+    sparkConf = Mockito.mock(classOf[SparkConf])\n+    kubernetesConf = KubernetesConf(\n+      sparkConf,\n+      KubernetesDriverSpecificConf(\n+        None,\n+        \"app-name\",\n+        \"main\",\n+        Seq.empty),\n+      \"resource\",\n+      \"app-id\",\n+      Map.empty,\n+      Map.empty,\n+      Map.empty,\n+      Map.empty,\n+      Map.empty,\n+      Nil,\n+      Seq.empty[String])\n+    templateFile = Files.createTempFile(\"pod-template\", \"yml\").toFile\n+    templateFile.deleteOnExit()\n+    Mockito.doReturn(Option(templateFile.getAbsolutePath)).when(sparkConf)\n+      .get(Config.KUBERNETES_EXECUTOR_PODTEMPLATE_FILE)\n+  }\n+\n+  test(\"Mounts executor template volume if config specified\") {",
    "line": 59
  }],
  "prId": 22146
}]