[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "indentation",
    "commit": "119f5a360b6064c4f033c9a34f0a5b4efcbe83a0",
    "createdAt": "2019-03-12T22:25:31Z",
    "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit\n+\n+import java.io.PrintStream\n+\n+import scala.collection.JavaConverters._\n+\n+import io.fabric8.kubernetes.api.model._\n+import io.fabric8.kubernetes.client.KubernetesClient\n+import io.fabric8.kubernetes.client.dsl.PodResource\n+import org.mockito.{ArgumentMatchers, Mock, MockitoAnnotations}\n+import org.mockito.Mockito.{times, verify, when}\n+import org.scalatest.BeforeAndAfter\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.k8s.Config.KUBERNETES_SUBMIT_GRACE_PERIOD\n+import org.apache.spark.deploy.k8s.Constants.{SPARK_APP_ID_LABEL, SPARK_POD_DRIVER_ROLE, SPARK_ROLE_LABEL}\n+import org.apache.spark.deploy.k8s.Fabric8Aliases.PODS\n+import org.apache.spark.scheduler.cluster.k8s.ExecutorLifecycleTestUtils.TEST_SPARK_APP_ID\n+\n+class K8sSubmitOpSuite extends SparkFunSuite with BeforeAndAfter {\n+  private val oldErr = System.err\n+  private val driverPodName1 = \"driver1\"\n+  private val driverPodName2 = \"driver2\"\n+  private val driverPod1 = buildDriverPod(driverPodName1, \"1\")\n+  private val driverPod2 = buildDriverPod(driverPodName2, \"2\")\n+  private val podList = List(driverPod1, driverPod2)\n+  private val namespace = \"test\"\n+\n+  @Mock\n+  private var podOperations: PODS = _\n+\n+  @Mock\n+  private var driverPodOperations1: PodResource[Pod, DoneablePod] = _\n+\n+  @Mock\n+  private var driverPodOperations2: PodResource[Pod, DoneablePod] = _\n+\n+  @Mock\n+  private var kubernetesClient: KubernetesClient = _\n+\n+  @Mock\n+  private var err: PrintStream = _\n+\n+  before {\n+    MockitoAnnotations.initMocks(this)\n+    when(kubernetesClient.pods()).thenReturn(podOperations)\n+    when(podOperations.inNamespace(namespace)).thenReturn(podOperations)\n+    when(podOperations.delete(podList.asJava)).thenReturn(true)\n+    when(podOperations.withName(driverPodName1)).thenReturn(driverPodOperations1)\n+    when(podOperations.withName(driverPodName2)).thenReturn(driverPodOperations2)\n+    when(driverPodOperations1.get).thenReturn(driverPod1)\n+    when(driverPodOperations1.delete()).thenReturn(true)\n+    when(driverPodOperations2.get).thenReturn(driverPod2)\n+    when(driverPodOperations2.delete()).thenReturn(true)\n+  }\n+\n+  test(\"List app status\") {\n+    System.setErr(err)\n+    implicit val kubeClient: KubernetesClient = kubernetesClient\n+    val listStatus = new ListStatus\n+    listStatus.executeOnPod(driverPodName1, Option(namespace), new SparkConf())\n+      // scalastyle:off"
  }],
  "prId": 23599
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "It's safer to set `listStatus.printStream` instead; also in other tests.\r\n\r\nIf that's not possible for whatever reason, then it's better to do this in before / after blocks.",
    "commit": "119f5a360b6064c4f033c9a34f0a5b4efcbe83a0",
    "createdAt": "2019-03-12T22:27:26Z",
    "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit\n+\n+import java.io.PrintStream\n+\n+import scala.collection.JavaConverters._\n+\n+import io.fabric8.kubernetes.api.model._\n+import io.fabric8.kubernetes.client.KubernetesClient\n+import io.fabric8.kubernetes.client.dsl.PodResource\n+import org.mockito.{ArgumentMatchers, Mock, MockitoAnnotations}\n+import org.mockito.Mockito.{times, verify, when}\n+import org.scalatest.BeforeAndAfter\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.k8s.Config.KUBERNETES_SUBMIT_GRACE_PERIOD\n+import org.apache.spark.deploy.k8s.Constants.{SPARK_APP_ID_LABEL, SPARK_POD_DRIVER_ROLE, SPARK_ROLE_LABEL}\n+import org.apache.spark.deploy.k8s.Fabric8Aliases.PODS\n+import org.apache.spark.scheduler.cluster.k8s.ExecutorLifecycleTestUtils.TEST_SPARK_APP_ID\n+\n+class K8sSubmitOpSuite extends SparkFunSuite with BeforeAndAfter {\n+  private val oldErr = System.err\n+  private val driverPodName1 = \"driver1\"\n+  private val driverPodName2 = \"driver2\"\n+  private val driverPod1 = buildDriverPod(driverPodName1, \"1\")\n+  private val driverPod2 = buildDriverPod(driverPodName2, \"2\")\n+  private val podList = List(driverPod1, driverPod2)\n+  private val namespace = \"test\"\n+\n+  @Mock\n+  private var podOperations: PODS = _\n+\n+  @Mock\n+  private var driverPodOperations1: PodResource[Pod, DoneablePod] = _\n+\n+  @Mock\n+  private var driverPodOperations2: PodResource[Pod, DoneablePod] = _\n+\n+  @Mock\n+  private var kubernetesClient: KubernetesClient = _\n+\n+  @Mock\n+  private var err: PrintStream = _\n+\n+  before {\n+    MockitoAnnotations.initMocks(this)\n+    when(kubernetesClient.pods()).thenReturn(podOperations)\n+    when(podOperations.inNamespace(namespace)).thenReturn(podOperations)\n+    when(podOperations.delete(podList.asJava)).thenReturn(true)\n+    when(podOperations.withName(driverPodName1)).thenReturn(driverPodOperations1)\n+    when(podOperations.withName(driverPodName2)).thenReturn(driverPodOperations2)\n+    when(driverPodOperations1.get).thenReturn(driverPod1)\n+    when(driverPodOperations1.delete()).thenReturn(true)\n+    when(driverPodOperations2.get).thenReturn(driverPod2)\n+    when(driverPodOperations2.delete()).thenReturn(true)\n+  }\n+\n+  test(\"List app status\") {\n+    System.setErr(err)\n+    implicit val kubeClient: KubernetesClient = kubernetesClient\n+    val listStatus = new ListStatus\n+    listStatus.executeOnPod(driverPodName1, Option(namespace), new SparkConf())\n+      // scalastyle:off\n+    verify(err).println(ArgumentMatchers.eq(getPodStatus(driverPodName1, \"1\")))\n+    // scalastyle:on\n+    System.setErr(oldErr)\n+  }\n+\n+  test(\"List status for multiple apps with glob\") {\n+    System.setErr(err)"
  }, {
    "author": {
      "login": "skonto"
    },
    "body": "Initially I had it this way in these blocks but I kept it outside there because it affects only a subset of the tests and I wanted to be specific. I can put it back. \r\nI am not setting that because I want to test the output against the mocked err stream which is easier that mocking listStatus and making it return an err stream again. ",
    "commit": "119f5a360b6064c4f033c9a34f0a5b4efcbe83a0",
    "createdAt": "2019-03-15T16:13:13Z",
    "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit\n+\n+import java.io.PrintStream\n+\n+import scala.collection.JavaConverters._\n+\n+import io.fabric8.kubernetes.api.model._\n+import io.fabric8.kubernetes.client.KubernetesClient\n+import io.fabric8.kubernetes.client.dsl.PodResource\n+import org.mockito.{ArgumentMatchers, Mock, MockitoAnnotations}\n+import org.mockito.Mockito.{times, verify, when}\n+import org.scalatest.BeforeAndAfter\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.k8s.Config.KUBERNETES_SUBMIT_GRACE_PERIOD\n+import org.apache.spark.deploy.k8s.Constants.{SPARK_APP_ID_LABEL, SPARK_POD_DRIVER_ROLE, SPARK_ROLE_LABEL}\n+import org.apache.spark.deploy.k8s.Fabric8Aliases.PODS\n+import org.apache.spark.scheduler.cluster.k8s.ExecutorLifecycleTestUtils.TEST_SPARK_APP_ID\n+\n+class K8sSubmitOpSuite extends SparkFunSuite with BeforeAndAfter {\n+  private val oldErr = System.err\n+  private val driverPodName1 = \"driver1\"\n+  private val driverPodName2 = \"driver2\"\n+  private val driverPod1 = buildDriverPod(driverPodName1, \"1\")\n+  private val driverPod2 = buildDriverPod(driverPodName2, \"2\")\n+  private val podList = List(driverPod1, driverPod2)\n+  private val namespace = \"test\"\n+\n+  @Mock\n+  private var podOperations: PODS = _\n+\n+  @Mock\n+  private var driverPodOperations1: PodResource[Pod, DoneablePod] = _\n+\n+  @Mock\n+  private var driverPodOperations2: PodResource[Pod, DoneablePod] = _\n+\n+  @Mock\n+  private var kubernetesClient: KubernetesClient = _\n+\n+  @Mock\n+  private var err: PrintStream = _\n+\n+  before {\n+    MockitoAnnotations.initMocks(this)\n+    when(kubernetesClient.pods()).thenReturn(podOperations)\n+    when(podOperations.inNamespace(namespace)).thenReturn(podOperations)\n+    when(podOperations.delete(podList.asJava)).thenReturn(true)\n+    when(podOperations.withName(driverPodName1)).thenReturn(driverPodOperations1)\n+    when(podOperations.withName(driverPodName2)).thenReturn(driverPodOperations2)\n+    when(driverPodOperations1.get).thenReturn(driverPod1)\n+    when(driverPodOperations1.delete()).thenReturn(true)\n+    when(driverPodOperations2.get).thenReturn(driverPod2)\n+    when(driverPodOperations2.delete()).thenReturn(true)\n+  }\n+\n+  test(\"List app status\") {\n+    System.setErr(err)\n+    implicit val kubeClient: KubernetesClient = kubernetesClient\n+    val listStatus = new ListStatus\n+    listStatus.executeOnPod(driverPodName1, Option(namespace), new SparkConf())\n+      // scalastyle:off\n+    verify(err).println(ArgumentMatchers.eq(getPodStatus(driverPodName1, \"1\")))\n+    // scalastyle:on\n+    System.setErr(oldErr)\n+  }\n+\n+  test(\"List status for multiple apps with glob\") {\n+    System.setErr(err)"
  }],
  "prId": 23599
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Remind me again why `listStatus.printStream = err` does not work and you have to mess with System.err instead?",
    "commit": "119f5a360b6064c4f033c9a34f0a5b4efcbe83a0",
    "createdAt": "2019-03-22T23:43:41Z",
    "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit\n+\n+import java.io.PrintStream\n+\n+import scala.collection.JavaConverters._\n+\n+import io.fabric8.kubernetes.api.model._\n+import io.fabric8.kubernetes.client.KubernetesClient\n+import io.fabric8.kubernetes.client.dsl.PodResource\n+import org.mockito.{ArgumentMatchers, Mock, MockitoAnnotations}\n+import org.mockito.Mockito.{times, verify, when}\n+import org.scalatest.BeforeAndAfter\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.k8s.Config.KUBERNETES_SUBMIT_GRACE_PERIOD\n+import org.apache.spark.deploy.k8s.Constants.{SPARK_APP_ID_LABEL, SPARK_POD_DRIVER_ROLE, SPARK_ROLE_LABEL}\n+import org.apache.spark.deploy.k8s.Fabric8Aliases.PODS\n+import org.apache.spark.scheduler.cluster.k8s.ExecutorLifecycleTestUtils.TEST_SPARK_APP_ID\n+\n+class K8sSubmitOpSuite extends SparkFunSuite with BeforeAndAfter {\n+  private val oldErr = System.err\n+  private val driverPodName1 = \"driver1\"\n+  private val driverPodName2 = \"driver2\"\n+  private val driverPod1 = buildDriverPod(driverPodName1, \"1\")\n+  private val driverPod2 = buildDriverPod(driverPodName2, \"2\")\n+  private val podList = List(driverPod1, driverPod2)\n+  private val namespace = \"test\"\n+\n+  @Mock\n+  private var podOperations: PODS = _\n+\n+  @Mock\n+  private var driverPodOperations1: PodResource[Pod, DoneablePod] = _\n+\n+  @Mock\n+  private var driverPodOperations2: PodResource[Pod, DoneablePod] = _\n+\n+  @Mock\n+  private var kubernetesClient: KubernetesClient = _\n+\n+  @Mock\n+  private var err: PrintStream = _\n+\n+  before {\n+    MockitoAnnotations.initMocks(this)\n+    when(kubernetesClient.pods()).thenReturn(podOperations)\n+    when(podOperations.inNamespace(namespace)).thenReturn(podOperations)\n+    when(podOperations.delete(podList.asJava)).thenReturn(true)\n+    when(podOperations.withName(driverPodName1)).thenReturn(driverPodOperations1)\n+    when(podOperations.withName(driverPodName2)).thenReturn(driverPodOperations2)\n+    when(driverPodOperations1.get).thenReturn(driverPod1)\n+    when(driverPodOperations1.delete()).thenReturn(true)\n+    when(driverPodOperations2.get).thenReturn(driverPod2)\n+    when(driverPodOperations2.delete()).thenReturn(true)\n+    System.setErr(err)\n+  }\n+\n+  after {\n+    System.setErr(oldErr)"
  }, {
    "author": {
      "login": "skonto"
    },
    "body": "@vanzin one is `MixedOperation<T, L, D, R extends Resource<T, D>> extends Operation<T, L, D, R>, NonNamespaceOperation<T, L, D, R>` and the other is NonNamespaceOperation, so `NonNamespaceOperation` is the common one. I noticed when refactored it, so I will make this a private function.",
    "commit": "119f5a360b6064c4f033c9a34f0a5b4efcbe83a0",
    "createdAt": "2019-03-23T23:38:03Z",
    "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit\n+\n+import java.io.PrintStream\n+\n+import scala.collection.JavaConverters._\n+\n+import io.fabric8.kubernetes.api.model._\n+import io.fabric8.kubernetes.client.KubernetesClient\n+import io.fabric8.kubernetes.client.dsl.PodResource\n+import org.mockito.{ArgumentMatchers, Mock, MockitoAnnotations}\n+import org.mockito.Mockito.{times, verify, when}\n+import org.scalatest.BeforeAndAfter\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.k8s.Config.KUBERNETES_SUBMIT_GRACE_PERIOD\n+import org.apache.spark.deploy.k8s.Constants.{SPARK_APP_ID_LABEL, SPARK_POD_DRIVER_ROLE, SPARK_ROLE_LABEL}\n+import org.apache.spark.deploy.k8s.Fabric8Aliases.PODS\n+import org.apache.spark.scheduler.cluster.k8s.ExecutorLifecycleTestUtils.TEST_SPARK_APP_ID\n+\n+class K8sSubmitOpSuite extends SparkFunSuite with BeforeAndAfter {\n+  private val oldErr = System.err\n+  private val driverPodName1 = \"driver1\"\n+  private val driverPodName2 = \"driver2\"\n+  private val driverPod1 = buildDriverPod(driverPodName1, \"1\")\n+  private val driverPod2 = buildDriverPod(driverPodName2, \"2\")\n+  private val podList = List(driverPod1, driverPod2)\n+  private val namespace = \"test\"\n+\n+  @Mock\n+  private var podOperations: PODS = _\n+\n+  @Mock\n+  private var driverPodOperations1: PodResource[Pod, DoneablePod] = _\n+\n+  @Mock\n+  private var driverPodOperations2: PodResource[Pod, DoneablePod] = _\n+\n+  @Mock\n+  private var kubernetesClient: KubernetesClient = _\n+\n+  @Mock\n+  private var err: PrintStream = _\n+\n+  before {\n+    MockitoAnnotations.initMocks(this)\n+    when(kubernetesClient.pods()).thenReturn(podOperations)\n+    when(podOperations.inNamespace(namespace)).thenReturn(podOperations)\n+    when(podOperations.delete(podList.asJava)).thenReturn(true)\n+    when(podOperations.withName(driverPodName1)).thenReturn(driverPodOperations1)\n+    when(podOperations.withName(driverPodName2)).thenReturn(driverPodOperations2)\n+    when(driverPodOperations1.get).thenReturn(driverPod1)\n+    when(driverPodOperations1.delete()).thenReturn(true)\n+    when(driverPodOperations2.get).thenReturn(driverPod2)\n+    when(driverPodOperations2.delete()).thenReturn(true)\n+    System.setErr(err)\n+  }\n+\n+  after {\n+    System.setErr(oldErr)"
  }, {
    "author": {
      "login": "skonto"
    },
    "body": "`listStatus.printStream = err` does not work because It is defined in:\r\n```\r\ntrait CommandLineLoggingUtils {\r\n  // Exposed for testing\r\n  private[spark] var exitFn: Int => Unit = (exitCode: Int) => System.exit(exitCode)\r\n\r\n  private[spark] var printStream: PrintStream = System.err\r\n...\r\n```\r\nI dont want to mock the ops (which is the subject of testing) which inherit from `K8sSubmitOp` which inherit from `CommandLineLoggingUtils` I would like to test the real op. So I set a mocked stream from which I grab the println calls.    `CommandLineLoggingUtils` is used by SparkSubmit so didnt want to touch it (could use a def for the val). The val there is already set when the trait is mixed in. I dont think it is a mess, it is just local in the tests.",
    "commit": "119f5a360b6064c4f033c9a34f0a5b4efcbe83a0",
    "createdAt": "2019-03-23T23:44:27Z",
    "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit\n+\n+import java.io.PrintStream\n+\n+import scala.collection.JavaConverters._\n+\n+import io.fabric8.kubernetes.api.model._\n+import io.fabric8.kubernetes.client.KubernetesClient\n+import io.fabric8.kubernetes.client.dsl.PodResource\n+import org.mockito.{ArgumentMatchers, Mock, MockitoAnnotations}\n+import org.mockito.Mockito.{times, verify, when}\n+import org.scalatest.BeforeAndAfter\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.k8s.Config.KUBERNETES_SUBMIT_GRACE_PERIOD\n+import org.apache.spark.deploy.k8s.Constants.{SPARK_APP_ID_LABEL, SPARK_POD_DRIVER_ROLE, SPARK_ROLE_LABEL}\n+import org.apache.spark.deploy.k8s.Fabric8Aliases.PODS\n+import org.apache.spark.scheduler.cluster.k8s.ExecutorLifecycleTestUtils.TEST_SPARK_APP_ID\n+\n+class K8sSubmitOpSuite extends SparkFunSuite with BeforeAndAfter {\n+  private val oldErr = System.err\n+  private val driverPodName1 = \"driver1\"\n+  private val driverPodName2 = \"driver2\"\n+  private val driverPod1 = buildDriverPod(driverPodName1, \"1\")\n+  private val driverPod2 = buildDriverPod(driverPodName2, \"2\")\n+  private val podList = List(driverPod1, driverPod2)\n+  private val namespace = \"test\"\n+\n+  @Mock\n+  private var podOperations: PODS = _\n+\n+  @Mock\n+  private var driverPodOperations1: PodResource[Pod, DoneablePod] = _\n+\n+  @Mock\n+  private var driverPodOperations2: PodResource[Pod, DoneablePod] = _\n+\n+  @Mock\n+  private var kubernetesClient: KubernetesClient = _\n+\n+  @Mock\n+  private var err: PrintStream = _\n+\n+  before {\n+    MockitoAnnotations.initMocks(this)\n+    when(kubernetesClient.pods()).thenReturn(podOperations)\n+    when(podOperations.inNamespace(namespace)).thenReturn(podOperations)\n+    when(podOperations.delete(podList.asJava)).thenReturn(true)\n+    when(podOperations.withName(driverPodName1)).thenReturn(driverPodOperations1)\n+    when(podOperations.withName(driverPodName2)).thenReturn(driverPodOperations2)\n+    when(driverPodOperations1.get).thenReturn(driverPod1)\n+    when(driverPodOperations1.delete()).thenReturn(true)\n+    when(driverPodOperations2.get).thenReturn(driverPod2)\n+    when(driverPodOperations2.delete()).thenReturn(true)\n+    System.setErr(err)\n+  }\n+\n+  after {\n+    System.setErr(oldErr)"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "I still don't follow you.\r\n\r\n `ListStatus` inherits from `CommandLineLoggingUtils` through `CommandLineLoggingUtils`. So it has a `var` named `printStream`. Why exactly can't you set it to whatever you want?\r\n\r\nCan you post the exact compiler error you see when you do that?",
    "commit": "119f5a360b6064c4f033c9a34f0a5b4efcbe83a0",
    "createdAt": "2019-03-24T02:05:06Z",
    "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit\n+\n+import java.io.PrintStream\n+\n+import scala.collection.JavaConverters._\n+\n+import io.fabric8.kubernetes.api.model._\n+import io.fabric8.kubernetes.client.KubernetesClient\n+import io.fabric8.kubernetes.client.dsl.PodResource\n+import org.mockito.{ArgumentMatchers, Mock, MockitoAnnotations}\n+import org.mockito.Mockito.{times, verify, when}\n+import org.scalatest.BeforeAndAfter\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.k8s.Config.KUBERNETES_SUBMIT_GRACE_PERIOD\n+import org.apache.spark.deploy.k8s.Constants.{SPARK_APP_ID_LABEL, SPARK_POD_DRIVER_ROLE, SPARK_ROLE_LABEL}\n+import org.apache.spark.deploy.k8s.Fabric8Aliases.PODS\n+import org.apache.spark.scheduler.cluster.k8s.ExecutorLifecycleTestUtils.TEST_SPARK_APP_ID\n+\n+class K8sSubmitOpSuite extends SparkFunSuite with BeforeAndAfter {\n+  private val oldErr = System.err\n+  private val driverPodName1 = \"driver1\"\n+  private val driverPodName2 = \"driver2\"\n+  private val driverPod1 = buildDriverPod(driverPodName1, \"1\")\n+  private val driverPod2 = buildDriverPod(driverPodName2, \"2\")\n+  private val podList = List(driverPod1, driverPod2)\n+  private val namespace = \"test\"\n+\n+  @Mock\n+  private var podOperations: PODS = _\n+\n+  @Mock\n+  private var driverPodOperations1: PodResource[Pod, DoneablePod] = _\n+\n+  @Mock\n+  private var driverPodOperations2: PodResource[Pod, DoneablePod] = _\n+\n+  @Mock\n+  private var kubernetesClient: KubernetesClient = _\n+\n+  @Mock\n+  private var err: PrintStream = _\n+\n+  before {\n+    MockitoAnnotations.initMocks(this)\n+    when(kubernetesClient.pods()).thenReturn(podOperations)\n+    when(podOperations.inNamespace(namespace)).thenReturn(podOperations)\n+    when(podOperations.delete(podList.asJava)).thenReturn(true)\n+    when(podOperations.withName(driverPodName1)).thenReturn(driverPodOperations1)\n+    when(podOperations.withName(driverPodName2)).thenReturn(driverPodOperations2)\n+    when(driverPodOperations1.get).thenReturn(driverPod1)\n+    when(driverPodOperations1.delete()).thenReturn(true)\n+    when(driverPodOperations2.get).thenReturn(driverPod2)\n+    when(driverPodOperations2.delete()).thenReturn(true)\n+    System.setErr(err)\n+  }\n+\n+  after {\n+    System.setErr(oldErr)"
  }, {
    "author": {
      "login": "skonto"
    },
    "body": "Yeah ok I misread, it is a var (thought it was val). ",
    "commit": "119f5a360b6064c4f033c9a34f0a5b4efcbe83a0",
    "createdAt": "2019-03-24T13:32:00Z",
    "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit\n+\n+import java.io.PrintStream\n+\n+import scala.collection.JavaConverters._\n+\n+import io.fabric8.kubernetes.api.model._\n+import io.fabric8.kubernetes.client.KubernetesClient\n+import io.fabric8.kubernetes.client.dsl.PodResource\n+import org.mockito.{ArgumentMatchers, Mock, MockitoAnnotations}\n+import org.mockito.Mockito.{times, verify, when}\n+import org.scalatest.BeforeAndAfter\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.k8s.Config.KUBERNETES_SUBMIT_GRACE_PERIOD\n+import org.apache.spark.deploy.k8s.Constants.{SPARK_APP_ID_LABEL, SPARK_POD_DRIVER_ROLE, SPARK_ROLE_LABEL}\n+import org.apache.spark.deploy.k8s.Fabric8Aliases.PODS\n+import org.apache.spark.scheduler.cluster.k8s.ExecutorLifecycleTestUtils.TEST_SPARK_APP_ID\n+\n+class K8sSubmitOpSuite extends SparkFunSuite with BeforeAndAfter {\n+  private val oldErr = System.err\n+  private val driverPodName1 = \"driver1\"\n+  private val driverPodName2 = \"driver2\"\n+  private val driverPod1 = buildDriverPod(driverPodName1, \"1\")\n+  private val driverPod2 = buildDriverPod(driverPodName2, \"2\")\n+  private val podList = List(driverPod1, driverPod2)\n+  private val namespace = \"test\"\n+\n+  @Mock\n+  private var podOperations: PODS = _\n+\n+  @Mock\n+  private var driverPodOperations1: PodResource[Pod, DoneablePod] = _\n+\n+  @Mock\n+  private var driverPodOperations2: PodResource[Pod, DoneablePod] = _\n+\n+  @Mock\n+  private var kubernetesClient: KubernetesClient = _\n+\n+  @Mock\n+  private var err: PrintStream = _\n+\n+  before {\n+    MockitoAnnotations.initMocks(this)\n+    when(kubernetesClient.pods()).thenReturn(podOperations)\n+    when(podOperations.inNamespace(namespace)).thenReturn(podOperations)\n+    when(podOperations.delete(podList.asJava)).thenReturn(true)\n+    when(podOperations.withName(driverPodName1)).thenReturn(driverPodOperations1)\n+    when(podOperations.withName(driverPodName2)).thenReturn(driverPodOperations2)\n+    when(driverPodOperations1.get).thenReturn(driverPod1)\n+    when(driverPodOperations1.delete()).thenReturn(true)\n+    when(driverPodOperations2.get).thenReturn(driverPod2)\n+    when(driverPodOperations2.delete()).thenReturn(true)\n+    System.setErr(err)\n+  }\n+\n+  after {\n+    System.setErr(oldErr)"
  }],
  "prId": 23599
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Not used.",
    "commit": "119f5a360b6064c4f033c9a34f0a5b4efcbe83a0",
    "createdAt": "2019-03-26T18:48:58Z",
    "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit\n+\n+import java.io.PrintStream\n+\n+import scala.collection.JavaConverters._\n+\n+import io.fabric8.kubernetes.api.model._\n+import io.fabric8.kubernetes.client.KubernetesClient\n+import io.fabric8.kubernetes.client.dsl.PodResource\n+import org.mockito.{ArgumentMatchers, Mock, MockitoAnnotations}\n+import org.mockito.Mockito.{times, verify, when}\n+import org.scalatest.BeforeAndAfter\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.k8s.Config.KUBERNETES_SUBMIT_GRACE_PERIOD\n+import org.apache.spark.deploy.k8s.Constants.{SPARK_APP_ID_LABEL, SPARK_POD_DRIVER_ROLE, SPARK_ROLE_LABEL}\n+import org.apache.spark.deploy.k8s.Fabric8Aliases.PODS\n+import org.apache.spark.scheduler.cluster.k8s.ExecutorLifecycleTestUtils.TEST_SPARK_APP_ID\n+\n+class K8sSubmitOpSuite extends SparkFunSuite with BeforeAndAfter {\n+  private val oldErr = System.err",
    "line": 37
  }],
  "prId": 23599
}]