[{
  "comments": [{
    "author": {
      "login": "liyinan926"
    },
    "body": "Can we just name it `hadoopConfBootPod`?",
    "commit": "f2948a0622f6f6d34834ba4525e573cc81b4ed7b",
    "createdAt": "2018-10-22T17:32:59Z",
    "diffHunk": "@@ -63,4 +63,40 @@ object KubernetesFeaturesTestUtils {\n   def containerHasEnvVar(container: Container, envVarName: String): Boolean = {\n     container.getEnv.asScala.exists(envVar => envVar.getName == envVarName)\n   }\n+\n+  def podHasLabels(pod: Pod, labels: Map[String, String]): Boolean = {\n+    labels.toSet.subsetOf(pod.getMetadata.getLabels.asScala.toSet)\n+  }\n+\n+  // Kerberos Specific Test utils\n+\n+  // Upon use of bootstrapHadoopConfDir\n+  def hConfBootPod(inputPod: SparkPod): SparkPod ="
  }],
  "prId": 22760
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "space before `}`\r\n\r\nAlso in other places.",
    "commit": "f2948a0622f6f6d34834ba4525e573cc81b4ed7b",
    "createdAt": "2018-11-01T22:44:02Z",
    "diffHunk": "@@ -63,4 +63,54 @@ object KubernetesFeaturesTestUtils {\n   def containerHasEnvVar(container: Container, envVarName: String): Boolean = {\n     container.getEnv.asScala.exists(envVar => envVar.getName == envVarName)\n   }\n+\n+  def containerHasEnvVars(container: Container, envs: Map[String, String]): Boolean = {\n+    envs.toSet.subsetOf(container.getEnv.asScala\n+      .map { e => (e.getName, e.getValue)}.toSet)"
  }],
  "prId": 22760
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Unnecessary comment.",
    "commit": "f2948a0622f6f6d34834ba4525e573cc81b4ed7b",
    "createdAt": "2018-11-01T22:44:39Z",
    "diffHunk": "@@ -63,4 +63,54 @@ object KubernetesFeaturesTestUtils {\n   def containerHasEnvVar(container: Container, envVarName: String): Boolean = {\n     container.getEnv.asScala.exists(envVar => envVar.getName == envVarName)\n   }\n+\n+  def containerHasEnvVars(container: Container, envs: Map[String, String]): Boolean = {\n+    envs.toSet.subsetOf(container.getEnv.asScala\n+      .map { e => (e.getName, e.getValue)}.toSet)\n+  }\n+\n+  def containerHasVolumeMounts(container: Container, vms: Map[String, String]): Boolean = {\n+    vms.toSet.subsetOf(container.getVolumeMounts.asScala\n+      .map { vm => (vm.getName, vm.getMountPath)}.toSet)\n+  }\n+\n+  def podHasLabels(pod: Pod, labels: Map[String, String]): Boolean = {\n+    labels.toSet.subsetOf(pod.getMetadata.getLabels.asScala.toSet)\n+  }\n+\n+  def podHasVolumes(pod: Pod, volumes: Seq[Volume]): Boolean = {\n+    volumes.toSet.subsetOf(pod.getSpec.getVolumes.asScala.toSet)\n+  }\n+\n+  // Kerberos Specific Test utils"
  }],
  "prId": 22760
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Not sure I understand what this comment means.",
    "commit": "f2948a0622f6f6d34834ba4525e573cc81b4ed7b",
    "createdAt": "2018-11-01T22:44:50Z",
    "diffHunk": "@@ -63,4 +63,54 @@ object KubernetesFeaturesTestUtils {\n   def containerHasEnvVar(container: Container, envVarName: String): Boolean = {\n     container.getEnv.asScala.exists(envVar => envVar.getName == envVarName)\n   }\n+\n+  def containerHasEnvVars(container: Container, envs: Map[String, String]): Boolean = {\n+    envs.toSet.subsetOf(container.getEnv.asScala\n+      .map { e => (e.getName, e.getValue)}.toSet)\n+  }\n+\n+  def containerHasVolumeMounts(container: Container, vms: Map[String, String]): Boolean = {\n+    vms.toSet.subsetOf(container.getVolumeMounts.asScala\n+      .map { vm => (vm.getName, vm.getMountPath)}.toSet)\n+  }\n+\n+  def podHasLabels(pod: Pod, labels: Map[String, String]): Boolean = {\n+    labels.toSet.subsetOf(pod.getMetadata.getLabels.asScala.toSet)\n+  }\n+\n+  def podHasVolumes(pod: Pod, volumes: Seq[Volume]): Boolean = {\n+    volumes.toSet.subsetOf(pod.getSpec.getVolumes.asScala.toSet)\n+  }\n+\n+  // Kerberos Specific Test utils\n+\n+  // Upon use of bootstrapHadoopConfDir"
  }],
  "prId": 22760
}, {
  "comments": [{
    "author": {
      "login": "mccheah"
    },
    "body": "This interaction seems really awkward to me. Why can't we just embed the error message directly into the assertion on each assertion statement? I'm also not familiar enough with the ScalaTest framework but perhaps we can explore other options the library has to offer. (In Java I'm used to using [AssertJ](https://github.com/joel-costigliola/assertj-core) for fluent assertions but I'm not sure if that will be of any help for Scala objects, particularly Scala collections without converting everything.)",
    "commit": "f2948a0622f6f6d34834ba4525e573cc81b4ed7b",
    "createdAt": "2018-11-05T22:46:38Z",
    "diffHunk": "@@ -63,4 +63,66 @@ object KubernetesFeaturesTestUtils {\n   def containerHasEnvVar(container: Container, envVarName: String): Boolean = {\n     container.getEnv.asScala.exists(envVar => envVar.getName == envVarName)\n   }\n+\n+  def containerHasEnvVars(container: Container, envs: Map[String, String]): Unit = {\n+    assertHelper[Set[(String, String)]](envs.toSet,\n+      container.getEnv.asScala\n+        .map { e => (e.getName, e.getValue) }.toSet,\n+      subsetOfTup[Set[(String, String)], String], \"a subset of\")\n+  }\n+\n+  def containerHasVolumeMounts(container: Container, vms: Map[String, String]): Unit = {\n+    assertHelper[Set[(String, String)]](vms.toSet,\n+      container.getVolumeMounts.asScala\n+        .map { vm => (vm.getName, vm.getMountPath) }.toSet,\n+      subsetOfTup[Set[(String, String)], String], \"a subset of\")\n+  }\n+\n+  def podHasLabels(pod: Pod, labels: Map[String, String]): Unit = {\n+    assertHelper[Set[(String, String)]](labels.toSet, pod.getMetadata.getLabels.asScala.toSet,\n+      subsetOfTup[Set[(String, String)], String], \"a subset of\")\n+  }\n+\n+  def podHasVolumes(pod: Pod, volumes: Seq[Volume]): Unit = {\n+    assertHelper[Set[Volume]](volumes.toSet, pod.getSpec.getVolumes.asScala.toSet,\n+      subsetOfElem[Set[Volume], Volume], \"a subset of\")\n+  }\n+\n+  // Mocking bootstrapHadoopConfDir\n+  def hadoopConfBootPod(inputPod: SparkPod): SparkPod =\n+    SparkPod(\n+      new PodBuilder(inputPod.pod)\n+        .editOrNewMetadata()\n+          .addToLabels(\"bootstrap-hconf\", \"true\")\n+          .endMetadata()\n+        .build(),\n+      inputPod.container)\n+\n+  // Mocking bootstrapKerberosPod\n+  def krbBootPod(inputPod: SparkPod): SparkPod =\n+    SparkPod(\n+      new PodBuilder(inputPod.pod)\n+        .editOrNewMetadata()\n+          .addToLabels(\"bootstrap-kerberos\", \"true\")\n+          .endMetadata()\n+        .build(),\n+      inputPod.container)\n+\n+  // Mocking bootstrapSparkUserPod\n+  def userBootPod(inputPod: SparkPod): SparkPod =\n+    SparkPod(\n+      new PodBuilder(inputPod.pod)\n+        .editOrNewMetadata()\n+          .addToLabels(\"bootstrap-user\", \"true\")\n+          .endMetadata()\n+        .build(),\n+      inputPod.container)\n+\n+  def subsetOfElem[T <: Set[B], B <: Any]: (T, T) => Boolean = (a, b) => a.subsetOf(b)\n+  def subsetOfTup[T <: Set[(B, B)], B <: Any]: (T, T) => Boolean = (a, b) => a.subsetOf(b)\n+\n+  def assertHelper[T](con1: T, con2: T,\n+      expr: (T, T) => Boolean = (a: T, b: T) => a == b, exprMsg: String = \"equal to\"): Unit = {\n+    assert(expr(con1, con2), s\"$con1 is not $exprMsg $con2 as expected\")"
  }, {
    "author": {
      "login": "ifilonenko"
    },
    "body": "I thought it would be better than doing a custom string at every assert statement. I don't find it to be too awkward, but *shrug* :) I actually kind of like it since we could do a check with any expression",
    "commit": "f2948a0622f6f6d34834ba4525e573cc81b4ed7b",
    "createdAt": "2018-11-05T23:21:25Z",
    "diffHunk": "@@ -63,4 +63,66 @@ object KubernetesFeaturesTestUtils {\n   def containerHasEnvVar(container: Container, envVarName: String): Boolean = {\n     container.getEnv.asScala.exists(envVar => envVar.getName == envVarName)\n   }\n+\n+  def containerHasEnvVars(container: Container, envs: Map[String, String]): Unit = {\n+    assertHelper[Set[(String, String)]](envs.toSet,\n+      container.getEnv.asScala\n+        .map { e => (e.getName, e.getValue) }.toSet,\n+      subsetOfTup[Set[(String, String)], String], \"a subset of\")\n+  }\n+\n+  def containerHasVolumeMounts(container: Container, vms: Map[String, String]): Unit = {\n+    assertHelper[Set[(String, String)]](vms.toSet,\n+      container.getVolumeMounts.asScala\n+        .map { vm => (vm.getName, vm.getMountPath) }.toSet,\n+      subsetOfTup[Set[(String, String)], String], \"a subset of\")\n+  }\n+\n+  def podHasLabels(pod: Pod, labels: Map[String, String]): Unit = {\n+    assertHelper[Set[(String, String)]](labels.toSet, pod.getMetadata.getLabels.asScala.toSet,\n+      subsetOfTup[Set[(String, String)], String], \"a subset of\")\n+  }\n+\n+  def podHasVolumes(pod: Pod, volumes: Seq[Volume]): Unit = {\n+    assertHelper[Set[Volume]](volumes.toSet, pod.getSpec.getVolumes.asScala.toSet,\n+      subsetOfElem[Set[Volume], Volume], \"a subset of\")\n+  }\n+\n+  // Mocking bootstrapHadoopConfDir\n+  def hadoopConfBootPod(inputPod: SparkPod): SparkPod =\n+    SparkPod(\n+      new PodBuilder(inputPod.pod)\n+        .editOrNewMetadata()\n+          .addToLabels(\"bootstrap-hconf\", \"true\")\n+          .endMetadata()\n+        .build(),\n+      inputPod.container)\n+\n+  // Mocking bootstrapKerberosPod\n+  def krbBootPod(inputPod: SparkPod): SparkPod =\n+    SparkPod(\n+      new PodBuilder(inputPod.pod)\n+        .editOrNewMetadata()\n+          .addToLabels(\"bootstrap-kerberos\", \"true\")\n+          .endMetadata()\n+        .build(),\n+      inputPod.container)\n+\n+  // Mocking bootstrapSparkUserPod\n+  def userBootPod(inputPod: SparkPod): SparkPod =\n+    SparkPod(\n+      new PodBuilder(inputPod.pod)\n+        .editOrNewMetadata()\n+          .addToLabels(\"bootstrap-user\", \"true\")\n+          .endMetadata()\n+        .build(),\n+      inputPod.container)\n+\n+  def subsetOfElem[T <: Set[B], B <: Any]: (T, T) => Boolean = (a, b) => a.subsetOf(b)\n+  def subsetOfTup[T <: Set[(B, B)], B <: Any]: (T, T) => Boolean = (a, b) => a.subsetOf(b)\n+\n+  def assertHelper[T](con1: T, con2: T,\n+      expr: (T, T) => Boolean = (a: T, b: T) => a == b, exprMsg: String = \"equal to\"): Unit = {\n+    assert(expr(con1, con2), s\"$con1 is not $exprMsg $con2 as expected\")"
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "I think here the simpler approach is preferred - on each assertion line I want to see right then and there what error message I'll get back, not having to go through a helper method.",
    "commit": "f2948a0622f6f6d34834ba4525e573cc81b4ed7b",
    "createdAt": "2018-11-06T00:37:23Z",
    "diffHunk": "@@ -63,4 +63,66 @@ object KubernetesFeaturesTestUtils {\n   def containerHasEnvVar(container: Container, envVarName: String): Boolean = {\n     container.getEnv.asScala.exists(envVar => envVar.getName == envVarName)\n   }\n+\n+  def containerHasEnvVars(container: Container, envs: Map[String, String]): Unit = {\n+    assertHelper[Set[(String, String)]](envs.toSet,\n+      container.getEnv.asScala\n+        .map { e => (e.getName, e.getValue) }.toSet,\n+      subsetOfTup[Set[(String, String)], String], \"a subset of\")\n+  }\n+\n+  def containerHasVolumeMounts(container: Container, vms: Map[String, String]): Unit = {\n+    assertHelper[Set[(String, String)]](vms.toSet,\n+      container.getVolumeMounts.asScala\n+        .map { vm => (vm.getName, vm.getMountPath) }.toSet,\n+      subsetOfTup[Set[(String, String)], String], \"a subset of\")\n+  }\n+\n+  def podHasLabels(pod: Pod, labels: Map[String, String]): Unit = {\n+    assertHelper[Set[(String, String)]](labels.toSet, pod.getMetadata.getLabels.asScala.toSet,\n+      subsetOfTup[Set[(String, String)], String], \"a subset of\")\n+  }\n+\n+  def podHasVolumes(pod: Pod, volumes: Seq[Volume]): Unit = {\n+    assertHelper[Set[Volume]](volumes.toSet, pod.getSpec.getVolumes.asScala.toSet,\n+      subsetOfElem[Set[Volume], Volume], \"a subset of\")\n+  }\n+\n+  // Mocking bootstrapHadoopConfDir\n+  def hadoopConfBootPod(inputPod: SparkPod): SparkPod =\n+    SparkPod(\n+      new PodBuilder(inputPod.pod)\n+        .editOrNewMetadata()\n+          .addToLabels(\"bootstrap-hconf\", \"true\")\n+          .endMetadata()\n+        .build(),\n+      inputPod.container)\n+\n+  // Mocking bootstrapKerberosPod\n+  def krbBootPod(inputPod: SparkPod): SparkPod =\n+    SparkPod(\n+      new PodBuilder(inputPod.pod)\n+        .editOrNewMetadata()\n+          .addToLabels(\"bootstrap-kerberos\", \"true\")\n+          .endMetadata()\n+        .build(),\n+      inputPod.container)\n+\n+  // Mocking bootstrapSparkUserPod\n+  def userBootPod(inputPod: SparkPod): SparkPod =\n+    SparkPod(\n+      new PodBuilder(inputPod.pod)\n+        .editOrNewMetadata()\n+          .addToLabels(\"bootstrap-user\", \"true\")\n+          .endMetadata()\n+        .build(),\n+      inputPod.container)\n+\n+  def subsetOfElem[T <: Set[B], B <: Any]: (T, T) => Boolean = (a, b) => a.subsetOf(b)\n+  def subsetOfTup[T <: Set[(B, B)], B <: Any]: (T, T) => Boolean = (a, b) => a.subsetOf(b)\n+\n+  def assertHelper[T](con1: T, con2: T,\n+      expr: (T, T) => Boolean = (a: T, b: T) => a == b, exprMsg: String = \"equal to\"): Unit = {\n+    assert(expr(con1, con2), s\"$con1 is not $exprMsg $con2 as expected\")"
  }],
  "prId": 22760
}]