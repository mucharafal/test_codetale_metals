[{
  "comments": [{
    "author": {
      "login": "erikerlandson"
    },
    "body": "So events are pods themselves, as opposed to some event structure on pods?",
    "commit": "1a99dceeb9dfbfc58e26885c290461cbf37a5428",
    "createdAt": "2018-05-24T23:14:55Z",
    "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.scheduler.cluster.k8s\n+\n+import io.fabric8.kubernetes.api.model.Pod\n+import scala.collection.mutable\n+\n+class DeterministicExecutorPodsEventQueue extends ExecutorPodsEventQueue {\n+\n+  private val eventBuffer = mutable.Buffer.empty[Pod]\n+  private val subscribers = mutable.Buffer.empty[(Seq[Pod]) => Unit]\n+\n+  override def addSubscriber\n+      (processBatchIntervalMillis: Long)\n+      (onNextBatch: (Seq[Pod]) => Unit): Unit = {\n+    subscribers += onNextBatch\n+  }\n+\n+  override def stopProcessingEvents(): Unit = {}\n+\n+  override def pushPodUpdate(updatedPod: Pod): Unit = eventBuffer += updatedPod"
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "Yup, basically just a live stream of the pod statuses as reported by the API.",
    "commit": "1a99dceeb9dfbfc58e26885c290461cbf37a5428",
    "createdAt": "2018-05-25T00:09:06Z",
    "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.scheduler.cluster.k8s\n+\n+import io.fabric8.kubernetes.api.model.Pod\n+import scala.collection.mutable\n+\n+class DeterministicExecutorPodsEventQueue extends ExecutorPodsEventQueue {\n+\n+  private val eventBuffer = mutable.Buffer.empty[Pod]\n+  private val subscribers = mutable.Buffer.empty[(Seq[Pod]) => Unit]\n+\n+  override def addSubscriber\n+      (processBatchIntervalMillis: Long)\n+      (onNextBatch: (Seq[Pod]) => Unit): Unit = {\n+    subscribers += onNextBatch\n+  }\n+\n+  override def stopProcessingEvents(): Unit = {}\n+\n+  override def pushPodUpdate(updatedPod: Pod): Unit = eventBuffer += updatedPod"
  }],
  "prId": 21366
}]