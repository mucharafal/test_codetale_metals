[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "`.foreach { volumeName =>`",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-21T00:00:51Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.k8s.MountSecretsBootstrap\n+import org.apache.spark.deploy.k8s.submit.{KubernetesDriverSpec, SecretVolumeUtils}\n+\n+class DriverMountSecretsStepSuite extends SparkFunSuite {\n+\n+  private val SECRET_FOO = \"foo\"\n+  private val SECRET_BAR = \"bar\"\n+  private val SECRET_MOUNT_PATH = \"/etc/secrets/driver\"\n+\n+  test(\"Mounts all given secrets\") {\n+    val baseDriverSpec = KubernetesDriverSpec.initialSpec(new SparkConf(false))\n+    val secretNamesToMountPaths = Map(\n+      SECRET_FOO -> SECRET_MOUNT_PATH,\n+      SECRET_BAR -> SECRET_MOUNT_PATH)\n+\n+    val mountSecretsBootstrap = new MountSecretsBootstrap(secretNamesToMountPaths)\n+    val mountSecretsStep = new DriverMountSecretsStep(mountSecretsBootstrap)\n+    val configuredDriverSpec = mountSecretsStep.configureDriver(baseDriverSpec)\n+    val driverPodWithSecretsMounted = configuredDriverSpec.driverPod\n+    val driverContainerWithSecretsMounted = configuredDriverSpec.driverContainer\n+\n+    Seq(s\"$SECRET_FOO-volume\", s\"$SECRET_BAR-volume\").foreach(volumeName =>"
  }],
  "prId": 19954
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": ".foreach { volumeName =>\r\n\r\n",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-21T00:00:59Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.k8s.MountSecretsBootstrap\n+import org.apache.spark.deploy.k8s.submit.{KubernetesDriverSpec, SecretVolumeUtils}\n+\n+class DriverMountSecretsStepSuite extends SparkFunSuite {\n+\n+  private val SECRET_FOO = \"foo\"\n+  private val SECRET_BAR = \"bar\"\n+  private val SECRET_MOUNT_PATH = \"/etc/secrets/driver\"\n+\n+  test(\"Mounts all given secrets\") {\n+    val baseDriverSpec = KubernetesDriverSpec.initialSpec(new SparkConf(false))\n+    val secretNamesToMountPaths = Map(\n+      SECRET_FOO -> SECRET_MOUNT_PATH,\n+      SECRET_BAR -> SECRET_MOUNT_PATH)\n+\n+    val mountSecretsBootstrap = new MountSecretsBootstrap(secretNamesToMountPaths)\n+    val mountSecretsStep = new DriverMountSecretsStep(mountSecretsBootstrap)\n+    val configuredDriverSpec = mountSecretsStep.configureDriver(baseDriverSpec)\n+    val driverPodWithSecretsMounted = configuredDriverSpec.driverPod\n+    val driverContainerWithSecretsMounted = configuredDriverSpec.driverContainer\n+\n+    Seq(s\"$SECRET_FOO-volume\", s\"$SECRET_BAR-volume\").foreach(volumeName =>\n+      assert(SecretVolumeUtils.podHasVolume(driverPodWithSecretsMounted, volumeName)))\n+    Seq(s\"$SECRET_FOO-volume\", s\"$SECRET_BAR-volume\").foreach(volumeName =>"
  }],
  "prId": 19954
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "start test names with lower case",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-21T00:02:57Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.k8s.MountSecretsBootstrap\n+import org.apache.spark.deploy.k8s.submit.{KubernetesDriverSpec, SecretVolumeUtils}\n+\n+class DriverMountSecretsStepSuite extends SparkFunSuite {\n+\n+  private val SECRET_FOO = \"foo\"\n+  private val SECRET_BAR = \"bar\"\n+  private val SECRET_MOUNT_PATH = \"/etc/secrets/driver\"\n+\n+  test(\"Mounts all given secrets\") {"
  }],
  "prId": 19954
}]