[{
  "comments": [{
    "author": {
      "login": "foxish"
    },
    "body": "Unrelated to this PR, but @mccheah, should we have something like the fluent/builder pattern here for `KubernetesConf` since it's grown to quite a few params. I'm happy to take a stab at it if we agree that's a good direction.",
    "commit": "a61d8973a8961fa69e50757f049b04bda292a088",
    "createdAt": "2018-04-18T18:09:51Z",
    "diffHunk": "@@ -89,6 +97,29 @@ class KubernetesDriverBuilderSuite extends SparkFunSuite {\n       SECRETS_STEP_TYPE)\n   }\n \n+  test(\"Apply Python step if main resource is python.\") {\n+    val conf = KubernetesConf("
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "Depends on what we want to use the builder for. One advantage of a builder is handled by case classes already: the fact that you don't have to order arguments in a particular way; you can get around this by using named parameters when you construct the object. But, if you want to stage the construction of the object in multiple calls, then a builder will get you that while a case class by itself will not.\r\n\r\nI think it would be neater to have a builder. The [SparkSession Builder](https://github.com/apache/spark/blob/master/sql/core/src/main/scala/org/apache/spark/sql/SparkSession.scala#L775) is an example from the project we can follow.",
    "commit": "a61d8973a8961fa69e50757f049b04bda292a088",
    "createdAt": "2018-04-19T00:27:50Z",
    "diffHunk": "@@ -89,6 +97,29 @@ class KubernetesDriverBuilderSuite extends SparkFunSuite {\n       SECRETS_STEP_TYPE)\n   }\n \n+  test(\"Apply Python step if main resource is python.\") {\n+    val conf = KubernetesConf("
  }],
  "prId": 21092
}]