[{
  "comments": [{
    "author": {
      "login": "liyinan926"
    },
    "body": "The first `image` can be removed.",
    "commit": "0291f0f8401fe02a927504aca78d13d6ff5d4f55",
    "createdAt": "2018-03-13T18:16:39Z",
    "diffHunk": "@@ -54,6 +54,12 @@ private[spark] object Config extends Logging {\n       .checkValues(Set(\"Always\", \"Never\", \"IfNotPresent\"))\n       .createWithDefault(\"IfNotPresent\")\n \n+  val IMAGE_PULL_SECRET =\n+    ConfigBuilder(\"spark.kubernetes.imagePullSecret\")\n+      .doc(\"Specifies the Kubernetes image secret used to access private image registry.\")"
  }],
  "prId": 20811
}, {
  "comments": [{
    "author": {
      "login": "foxish"
    },
    "body": "Given there's an option `spark.kubernetes.container.image.pullPolicy`, we should make this consistent as `spark.kubernetes.container.image.pullSecret`\r\n\r\n\r\n\r\n",
    "commit": "0291f0f8401fe02a927504aca78d13d6ff5d4f55",
    "createdAt": "2018-04-03T18:44:24Z",
    "diffHunk": "@@ -54,6 +54,12 @@ private[spark] object Config extends Logging {\n       .checkValues(Set(\"Always\", \"Never\", \"IfNotPresent\"))\n       .createWithDefault(\"IfNotPresent\")\n \n+  val IMAGE_PULL_SECRET =\n+    ConfigBuilder(\"spark.kubernetes.imagePullSecret\")"
  }, {
    "author": {
      "login": "andrusha"
    },
    "body": "Done",
    "commit": "0291f0f8401fe02a927504aca78d13d6ff5d4f55",
    "createdAt": "2018-04-03T20:12:21Z",
    "diffHunk": "@@ -54,6 +54,12 @@ private[spark] object Config extends Logging {\n       .checkValues(Set(\"Always\", \"Never\", \"IfNotPresent\"))\n       .createWithDefault(\"IfNotPresent\")\n \n+  val IMAGE_PULL_SECRET =\n+    ConfigBuilder(\"spark.kubernetes.imagePullSecret\")"
  }],
  "prId": 20811
}, {
  "comments": [{
    "author": {
      "login": "foxish"
    },
    "body": "Based on a conversation with the node team, this is meant to be an array of possibly many secret names; since one could have multiple secrets specified for different registries and spread across multiple k8s secrets. \r\n\r\nSo, I'd suggest we implement the full API - this should be capable of accepting a comma separated list of one or more secret names.",
    "commit": "0291f0f8401fe02a927504aca78d13d6ff5d4f55",
    "createdAt": "2018-04-03T22:39:39Z",
    "diffHunk": "@@ -54,6 +54,12 @@ private[spark] object Config extends Logging {\n       .checkValues(Set(\"Always\", \"Never\", \"IfNotPresent\"))\n       .createWithDefault(\"IfNotPresent\")\n \n+  val IMAGE_PULL_SECRET =\n+    ConfigBuilder(\"spark.kubernetes.container.image.pullSecret\")"
  }, {
    "author": {
      "login": "foxish"
    },
    "body": "Also should be named `...image.pullSecrets` to stay consistent with the field we're setting on the pods.",
    "commit": "0291f0f8401fe02a927504aca78d13d6ff5d4f55",
    "createdAt": "2018-04-03T22:40:24Z",
    "diffHunk": "@@ -54,6 +54,12 @@ private[spark] object Config extends Logging {\n       .checkValues(Set(\"Always\", \"Never\", \"IfNotPresent\"))\n       .createWithDefault(\"IfNotPresent\")\n \n+  val IMAGE_PULL_SECRET =\n+    ConfigBuilder(\"spark.kubernetes.container.image.pullSecret\")"
  }, {
    "author": {
      "login": "andrusha"
    },
    "body": "@foxish done",
    "commit": "0291f0f8401fe02a927504aca78d13d6ff5d4f55",
    "createdAt": "2018-04-04T12:51:21Z",
    "diffHunk": "@@ -54,6 +54,12 @@ private[spark] object Config extends Logging {\n       .checkValues(Set(\"Always\", \"Never\", \"IfNotPresent\"))\n       .createWithDefault(\"IfNotPresent\")\n \n+  val IMAGE_PULL_SECRET =\n+    ConfigBuilder(\"spark.kubernetes.container.image.pullSecret\")"
  }],
  "prId": 20811
}]