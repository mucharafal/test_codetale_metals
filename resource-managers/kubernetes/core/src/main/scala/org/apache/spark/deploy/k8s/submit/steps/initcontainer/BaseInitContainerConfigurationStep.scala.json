[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "`Map()`.",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-15T23:59:18Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps.initcontainer\n+\n+import org.apache.spark.deploy.k8s.{InitContainerBootstrap, PodWithDetachedInitContainer}\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.submit.KubernetesFileUtils\n+\n+private[spark] class BaseInitContainerConfigurationStep(\n+    sparkJars: Seq[String],\n+    sparkFiles: Seq[String],\n+    jarsDownloadPath: String,\n+    filesDownloadPath: String,\n+    initContainerBootstrap: InitContainerBootstrap)\n+  extends InitContainerConfigurationStep {\n+\n+  override def configureInitContainer(initContainerSpec: InitContainerSpec): InitContainerSpec = {\n+    val remoteJarsToDownload = KubernetesFileUtils.getOnlyRemoteFiles(sparkJars)\n+    val remoteFilesToDownload = KubernetesFileUtils.getOnlyRemoteFiles(sparkFiles)\n+    val remoteJarsConf = if (remoteJarsToDownload.nonEmpty) {\n+      Map(INIT_CONTAINER_REMOTE_JARS.key -> remoteJarsToDownload.mkString(\",\"))\n+    } else {\n+      Map.empty[String, String]"
  }],
  "prId": 19954
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "`Map()`.",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-15T23:59:23Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps.initcontainer\n+\n+import org.apache.spark.deploy.k8s.{InitContainerBootstrap, PodWithDetachedInitContainer}\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.submit.KubernetesFileUtils\n+\n+private[spark] class BaseInitContainerConfigurationStep(\n+    sparkJars: Seq[String],\n+    sparkFiles: Seq[String],\n+    jarsDownloadPath: String,\n+    filesDownloadPath: String,\n+    initContainerBootstrap: InitContainerBootstrap)\n+  extends InitContainerConfigurationStep {\n+\n+  override def configureInitContainer(initContainerSpec: InitContainerSpec): InitContainerSpec = {\n+    val remoteJarsToDownload = KubernetesFileUtils.getOnlyRemoteFiles(sparkJars)\n+    val remoteFilesToDownload = KubernetesFileUtils.getOnlyRemoteFiles(sparkFiles)\n+    val remoteJarsConf = if (remoteJarsToDownload.nonEmpty) {\n+      Map(INIT_CONTAINER_REMOTE_JARS.key -> remoteJarsToDownload.mkString(\",\"))\n+    } else {\n+      Map.empty[String, String]\n+    }\n+    val remoteFilesConf = if (remoteFilesToDownload.nonEmpty) {\n+      Map(INIT_CONTAINER_REMOTE_FILES.key -> remoteFilesToDownload.mkString(\",\"))\n+    } else {\n+      Map.empty[String, String]"
  }],
  "prId": 19954
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Scala is generally pretty good at inferring types, you don't need to be explicit about the type parameters everywhere.",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-16T00:00:35Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps.initcontainer\n+\n+import org.apache.spark.deploy.k8s.{InitContainerBootstrap, PodWithDetachedInitContainer}\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.submit.KubernetesFileUtils\n+\n+private[spark] class BaseInitContainerConfigurationStep(\n+    sparkJars: Seq[String],\n+    sparkFiles: Seq[String],\n+    jarsDownloadPath: String,\n+    filesDownloadPath: String,\n+    initContainerBootstrap: InitContainerBootstrap)\n+  extends InitContainerConfigurationStep {\n+\n+  override def configureInitContainer(initContainerSpec: InitContainerSpec): InitContainerSpec = {\n+    val remoteJarsToDownload = KubernetesFileUtils.getOnlyRemoteFiles(sparkJars)\n+    val remoteFilesToDownload = KubernetesFileUtils.getOnlyRemoteFiles(sparkFiles)\n+    val remoteJarsConf = if (remoteJarsToDownload.nonEmpty) {\n+      Map(INIT_CONTAINER_REMOTE_JARS.key -> remoteJarsToDownload.mkString(\",\"))\n+    } else {\n+      Map.empty[String, String]\n+    }\n+    val remoteFilesConf = if (remoteFilesToDownload.nonEmpty) {\n+      Map(INIT_CONTAINER_REMOTE_FILES.key -> remoteFilesToDownload.mkString(\",\"))\n+    } else {\n+      Map.empty[String, String]\n+    }\n+\n+    val baseInitContainerConfig = Map[String, String]("
  }],
  "prId": 19954
}, {
  "comments": [{
    "author": {
      "login": "ueshin"
    },
    "body": "`properties = spec.properties ++ baseInitContainerConfig`, just in case?",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-19T09:59:59Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps.initcontainer\n+\n+import org.apache.spark.deploy.k8s.{InitContainerBootstrap, PodWithDetachedInitContainer}\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.submit.KubernetesFileUtils\n+\n+private[spark] class BaseInitContainerConfigurationStep(\n+    sparkJars: Seq[String],\n+    sparkFiles: Seq[String],\n+    jarsDownloadPath: String,\n+    filesDownloadPath: String,\n+    bootstrap: InitContainerBootstrap)\n+  extends InitContainerConfigurationStep {\n+\n+  override def configureInitContainer(spec: InitContainerSpec): InitContainerSpec = {\n+    val remoteJarsToDownload = KubernetesFileUtils.getOnlyRemoteFiles(sparkJars)\n+    val remoteFilesToDownload = KubernetesFileUtils.getOnlyRemoteFiles(sparkFiles)\n+    val remoteJarsConf = if (remoteJarsToDownload.nonEmpty) {\n+      Map(INIT_CONTAINER_REMOTE_JARS.key -> remoteJarsToDownload.mkString(\",\"))\n+    } else {\n+      Map()\n+    }\n+    val remoteFilesConf = if (remoteFilesToDownload.nonEmpty) {\n+      Map(INIT_CONTAINER_REMOTE_FILES.key -> remoteFilesToDownload.mkString(\",\"))\n+    } else {\n+      Map()\n+    }\n+\n+    val baseInitContainerConfig = Map(\n+      JARS_DOWNLOAD_LOCATION.key -> jarsDownloadPath,\n+      FILES_DOWNLOAD_LOCATION.key -> filesDownloadPath) ++\n+      remoteJarsConf ++\n+      remoteFilesConf\n+    val bootstrapped = bootstrap.bootstrapInitContainer(\n+      PodWithDetachedInitContainer(\n+        spec.driverPod,\n+        spec.initContainer,\n+        spec.driverContainer))\n+\n+    spec.copy(\n+      initContainer = bootstrapped.initContainer,\n+      driverContainer = bootstrapped.mainContainer,\n+      driverPod = bootstrapped.pod,\n+      properties = baseInitContainerConfig)"
  }, {
    "author": {
      "login": "liyinan926"
    },
    "body": "Yes, good point.",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-19T17:04:51Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps.initcontainer\n+\n+import org.apache.spark.deploy.k8s.{InitContainerBootstrap, PodWithDetachedInitContainer}\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.submit.KubernetesFileUtils\n+\n+private[spark] class BaseInitContainerConfigurationStep(\n+    sparkJars: Seq[String],\n+    sparkFiles: Seq[String],\n+    jarsDownloadPath: String,\n+    filesDownloadPath: String,\n+    bootstrap: InitContainerBootstrap)\n+  extends InitContainerConfigurationStep {\n+\n+  override def configureInitContainer(spec: InitContainerSpec): InitContainerSpec = {\n+    val remoteJarsToDownload = KubernetesFileUtils.getOnlyRemoteFiles(sparkJars)\n+    val remoteFilesToDownload = KubernetesFileUtils.getOnlyRemoteFiles(sparkFiles)\n+    val remoteJarsConf = if (remoteJarsToDownload.nonEmpty) {\n+      Map(INIT_CONTAINER_REMOTE_JARS.key -> remoteJarsToDownload.mkString(\",\"))\n+    } else {\n+      Map()\n+    }\n+    val remoteFilesConf = if (remoteFilesToDownload.nonEmpty) {\n+      Map(INIT_CONTAINER_REMOTE_FILES.key -> remoteFilesToDownload.mkString(\",\"))\n+    } else {\n+      Map()\n+    }\n+\n+    val baseInitContainerConfig = Map(\n+      JARS_DOWNLOAD_LOCATION.key -> jarsDownloadPath,\n+      FILES_DOWNLOAD_LOCATION.key -> filesDownloadPath) ++\n+      remoteJarsConf ++\n+      remoteFilesConf\n+    val bootstrapped = bootstrap.bootstrapInitContainer(\n+      PodWithDetachedInitContainer(\n+        spec.driverPod,\n+        spec.initContainer,\n+        spec.driverContainer))\n+\n+    spec.copy(\n+      initContainer = bootstrapped.initContainer,\n+      driverContainer = bootstrapped.mainContainer,\n+      driverPod = bootstrapped.pod,\n+      properties = baseInitContainerConfig)"
  }],
  "prId": 19954
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "It's kinda weird for a class called `BaseBlah` to extend a class called `Blah`. Perhaps `Basic` instead.",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-19T22:10:52Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps.initcontainer\n+\n+import org.apache.spark.deploy.k8s.{InitContainerBootstrap, PodWithDetachedInitContainer}\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.submit.KubernetesFileUtils\n+\n+/**\n+ * Performs basic configuration for the driver init-container with most of the work delegated to\n+ * the given InitContainerBootstrap.\n+ */\n+private[spark] class BaseInitContainerConfigurationStep("
  }, {
    "author": {
      "login": "liyinan926"
    },
    "body": "Done.",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-20T00:31:53Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps.initcontainer\n+\n+import org.apache.spark.deploy.k8s.{InitContainerBootstrap, PodWithDetachedInitContainer}\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.submit.KubernetesFileUtils\n+\n+/**\n+ * Performs basic configuration for the driver init-container with most of the work delegated to\n+ * the given InitContainerBootstrap.\n+ */\n+private[spark] class BaseInitContainerConfigurationStep("
  }],
  "prId": 19954
}]