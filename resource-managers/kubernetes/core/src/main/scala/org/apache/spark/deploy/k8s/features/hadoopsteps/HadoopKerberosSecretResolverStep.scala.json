[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "This whole \"steps\" thing used in the k8s backend always throws me off... but given the comment, why isn't the code in this step just part of the step that actually does the required initialization of the delegation token stuff?",
    "commit": "dd95fcab754e71e9465f4e46818c3cef09e86c8b",
    "createdAt": "2018-09-05T21:38:32Z",
    "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features.hadoopsteps\n+\n+import org.apache.spark.deploy.k8s.security.KubernetesHadoopDelegationTokenManager\n+import org.apache.spark.internal.Logging\n+\n+ /**\n+  * This step assumes that you have already done all the heavy lifting in retrieving a"
  }, {
    "author": {
      "login": "ifilonenko"
    },
    "body": "This specific \"step\" is used when the delegation token has already been stored in a pre-existing secret (that is not created on-the-fly by the Submission Client). This is a use-case we have seen desired by those running on Kubernetes Clusters where they do not wish to provide certain clients with keytabs and merely wish to point to pre-populated secrets that the user has access to (access is restricted via RBAC). \r\n\r\nI thought that secret creation logic and non-creation logic should be separated, but I can combine them into the same step. I just thought it would be more clear. \r\n\r\n(Also easier for unit testing). ",
    "commit": "dd95fcab754e71e9465f4e46818c3cef09e86c8b",
    "createdAt": "2018-09-06T01:14:01Z",
    "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features.hadoopsteps\n+\n+import org.apache.spark.deploy.k8s.security.KubernetesHadoopDelegationTokenManager\n+import org.apache.spark.internal.Logging\n+\n+ /**\n+  * This step assumes that you have already done all the heavy lifting in retrieving a"
  }],
  "prId": 21669
}]