[{
  "comments": [{
    "author": {
      "login": "mccheah"
    },
    "body": "I was under the impression that generally we don' want to match against option types - instead we should be using `option.map.getOrElse`? More just my impression of the Scala idiomatic style than anything.",
    "commit": "0d755d6549c46332ee7fa54c335d5c6c19727671",
    "createdAt": "2018-11-01T16:55:27Z",
    "diffHunk": "@@ -58,16 +58,13 @@ private[spark] class BasicExecutorFeatureStep(\n       (kubernetesConf.get(MEMORY_OVERHEAD_FACTOR) * executorMemoryMiB).toInt,\n       MEMORY_OVERHEAD_MIN_MIB))\n   private val executorMemoryWithOverhead = executorMemoryMiB + memoryOverheadMiB\n-  private val executorMemoryTotal = kubernetesConf.sparkConf\n-    .getOption(APP_RESOURCE_TYPE.key).map{ res =>\n-      val additionalPySparkMemory = res match {\n-        case \"python\" =>\n-          kubernetesConf.sparkConf\n-            .get(PYSPARK_EXECUTOR_MEMORY).map(_.toInt).getOrElse(0)\n-        case _ => 0\n-      }\n-    executorMemoryWithOverhead + additionalPySparkMemory\n-  }.getOrElse(executorMemoryWithOverhead)\n+  private val executorMemoryTotal = kubernetesConf.get(APP_RESOURCE_TYPE) match {\n+    case Some(\"python\") =>"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "We use both depending on the context. In this case, I think this is more readable than the previous code.",
    "commit": "0d755d6549c46332ee7fa54c335d5c6c19727671",
    "createdAt": "2018-11-01T17:36:47Z",
    "diffHunk": "@@ -58,16 +58,13 @@ private[spark] class BasicExecutorFeatureStep(\n       (kubernetesConf.get(MEMORY_OVERHEAD_FACTOR) * executorMemoryMiB).toInt,\n       MEMORY_OVERHEAD_MIN_MIB))\n   private val executorMemoryWithOverhead = executorMemoryMiB + memoryOverheadMiB\n-  private val executorMemoryTotal = kubernetesConf.sparkConf\n-    .getOption(APP_RESOURCE_TYPE.key).map{ res =>\n-      val additionalPySparkMemory = res match {\n-        case \"python\" =>\n-          kubernetesConf.sparkConf\n-            .get(PYSPARK_EXECUTOR_MEMORY).map(_.toInt).getOrElse(0)\n-        case _ => 0\n-      }\n-    executorMemoryWithOverhead + additionalPySparkMemory\n-  }.getOrElse(executorMemoryWithOverhead)\n+  private val executorMemoryTotal = kubernetesConf.get(APP_RESOURCE_TYPE) match {\n+    case Some(\"python\") =>"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "(I can use an `if` here if you prefer it. Probably better than either.)",
    "commit": "0d755d6549c46332ee7fa54c335d5c6c19727671",
    "createdAt": "2018-11-01T17:58:21Z",
    "diffHunk": "@@ -58,16 +58,13 @@ private[spark] class BasicExecutorFeatureStep(\n       (kubernetesConf.get(MEMORY_OVERHEAD_FACTOR) * executorMemoryMiB).toInt,\n       MEMORY_OVERHEAD_MIN_MIB))\n   private val executorMemoryWithOverhead = executorMemoryMiB + memoryOverheadMiB\n-  private val executorMemoryTotal = kubernetesConf.sparkConf\n-    .getOption(APP_RESOURCE_TYPE.key).map{ res =>\n-      val additionalPySparkMemory = res match {\n-        case \"python\" =>\n-          kubernetesConf.sparkConf\n-            .get(PYSPARK_EXECUTOR_MEMORY).map(_.toInt).getOrElse(0)\n-        case _ => 0\n-      }\n-    executorMemoryWithOverhead + additionalPySparkMemory\n-  }.getOrElse(executorMemoryWithOverhead)\n+  private val executorMemoryTotal = kubernetesConf.get(APP_RESOURCE_TYPE) match {\n+    case Some(\"python\") =>"
  }],
  "prId": 22897
}, {
  "comments": [{
    "author": {
      "login": "liyinan926"
    },
    "body": "Can we define a constant for each resource type string? I saw `python` being used in a couple of places.",
    "commit": "0d755d6549c46332ee7fa54c335d5c6c19727671",
    "createdAt": "2018-11-02T16:09:28Z",
    "diffHunk": "@@ -58,16 +58,13 @@ private[spark] class BasicExecutorFeatureStep(\n       (kubernetesConf.get(MEMORY_OVERHEAD_FACTOR) * executorMemoryMiB).toInt,\n       MEMORY_OVERHEAD_MIN_MIB))\n   private val executorMemoryWithOverhead = executorMemoryMiB + memoryOverheadMiB\n-  private val executorMemoryTotal = kubernetesConf.sparkConf\n-    .getOption(APP_RESOURCE_TYPE.key).map{ res =>\n-      val additionalPySparkMemory = res match {\n-        case \"python\" =>\n-          kubernetesConf.sparkConf\n-            .get(PYSPARK_EXECUTOR_MEMORY).map(_.toInt).getOrElse(0)\n-        case _ => 0\n-      }\n-    executorMemoryWithOverhead + additionalPySparkMemory\n-  }.getOrElse(executorMemoryWithOverhead)\n+  private val executorMemoryTotal =\n+    if (kubernetesConf.get(APP_RESOURCE_TYPE) == Some(\"python\")) {"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Will do.",
    "commit": "0d755d6549c46332ee7fa54c335d5c6c19727671",
    "createdAt": "2018-11-02T16:43:50Z",
    "diffHunk": "@@ -58,16 +58,13 @@ private[spark] class BasicExecutorFeatureStep(\n       (kubernetesConf.get(MEMORY_OVERHEAD_FACTOR) * executorMemoryMiB).toInt,\n       MEMORY_OVERHEAD_MIN_MIB))\n   private val executorMemoryWithOverhead = executorMemoryMiB + memoryOverheadMiB\n-  private val executorMemoryTotal = kubernetesConf.sparkConf\n-    .getOption(APP_RESOURCE_TYPE.key).map{ res =>\n-      val additionalPySparkMemory = res match {\n-        case \"python\" =>\n-          kubernetesConf.sparkConf\n-            .get(PYSPARK_EXECUTOR_MEMORY).map(_.toInt).getOrElse(0)\n-        case _ => 0\n-      }\n-    executorMemoryWithOverhead + additionalPySparkMemory\n-  }.getOrElse(executorMemoryWithOverhead)\n+  private val executorMemoryTotal =\n+    if (kubernetesConf.get(APP_RESOURCE_TYPE) == Some(\"python\")) {"
  }],
  "prId": 22897
}]