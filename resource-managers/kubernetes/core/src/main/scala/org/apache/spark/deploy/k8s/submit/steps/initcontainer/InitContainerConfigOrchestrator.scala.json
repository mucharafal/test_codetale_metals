[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Same about using `Seq` directly instead of an option.",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-19T22:05:50Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps.initcontainer\n+\n+import org.apache.spark.{SparkConf, SparkException}\n+import org.apache.spark.deploy.k8s.{ConfigurationUtils, InitContainerBootstrap, MountSecretsBootstrap}\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.Constants._\n+\n+/**\n+ * Figures out and returns the complete ordered list of InitContainerConfigurationSteps required to\n+ * configure the driver init-container. The returned steps will be applied in the given order to\n+ * produce a final InitContainerSpec that is used to construct the driver init-container in\n+ * DriverInitContainerBootstrapStep. This class is only used when an init-container is needed, i.e.,\n+ * when there are remote application dependencies to localize.\n+ */\n+private[spark] class InitContainerConfigOrchestrator(\n+    sparkJars: Seq[String],\n+    sparkFiles: Seq[String],\n+    jarsDownloadPath: String,\n+    filesDownloadPath: String,\n+    imagePullPolicy: String,\n+    configMapName: String,\n+    configMapKey: String,\n+    sparkConf: SparkConf) {\n+\n+  private val initContainerImage = sparkConf\n+    .get(INIT_CONTAINER_IMAGE)\n+    .getOrElse(throw new SparkException(\n+      \"Must specify the init-container image when there are remote dependencies\"))\n+\n+  def getAllConfigurationSteps: Seq[InitContainerConfigurationStep] = {\n+    val initContainerBootstrap = new InitContainerBootstrap(\n+      initContainerImage,\n+      imagePullPolicy,\n+      jarsDownloadPath,\n+      filesDownloadPath,\n+      configMapName,\n+      configMapKey,\n+      SPARK_POD_DRIVER_ROLE,\n+      sparkConf)\n+    val baseStep = new BaseInitContainerConfigurationStep(\n+      sparkJars,\n+      sparkFiles,\n+      jarsDownloadPath,\n+      filesDownloadPath,\n+      initContainerBootstrap)\n+\n+    val secretNamesToMountPaths = ConfigurationUtils.parsePrefixedKeyValuePairs(\n+      sparkConf,\n+      KUBERNETES_DRIVER_SECRETS_PREFIX)\n+    // Mount user-specified driver secrets also into the driver's init-container. The\n+    // init-container may need credentials in the secrets to be able to download remote\n+    // dependencies. The driver's main container and its init-container share the secrets\n+    // because the init-container is sort of an implementation details and this sharing\n+    // avoids introducing a dedicated configuration property just for the init-container.\n+    val maybeMountSecretsStep = if (secretNamesToMountPaths.nonEmpty) {"
  }, {
    "author": {
      "login": "liyinan926"
    },
    "body": "Done.",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-20T00:39:31Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps.initcontainer\n+\n+import org.apache.spark.{SparkConf, SparkException}\n+import org.apache.spark.deploy.k8s.{ConfigurationUtils, InitContainerBootstrap, MountSecretsBootstrap}\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.Constants._\n+\n+/**\n+ * Figures out and returns the complete ordered list of InitContainerConfigurationSteps required to\n+ * configure the driver init-container. The returned steps will be applied in the given order to\n+ * produce a final InitContainerSpec that is used to construct the driver init-container in\n+ * DriverInitContainerBootstrapStep. This class is only used when an init-container is needed, i.e.,\n+ * when there are remote application dependencies to localize.\n+ */\n+private[spark] class InitContainerConfigOrchestrator(\n+    sparkJars: Seq[String],\n+    sparkFiles: Seq[String],\n+    jarsDownloadPath: String,\n+    filesDownloadPath: String,\n+    imagePullPolicy: String,\n+    configMapName: String,\n+    configMapKey: String,\n+    sparkConf: SparkConf) {\n+\n+  private val initContainerImage = sparkConf\n+    .get(INIT_CONTAINER_IMAGE)\n+    .getOrElse(throw new SparkException(\n+      \"Must specify the init-container image when there are remote dependencies\"))\n+\n+  def getAllConfigurationSteps: Seq[InitContainerConfigurationStep] = {\n+    val initContainerBootstrap = new InitContainerBootstrap(\n+      initContainerImage,\n+      imagePullPolicy,\n+      jarsDownloadPath,\n+      filesDownloadPath,\n+      configMapName,\n+      configMapKey,\n+      SPARK_POD_DRIVER_ROLE,\n+      sparkConf)\n+    val baseStep = new BaseInitContainerConfigurationStep(\n+      sparkJars,\n+      sparkFiles,\n+      jarsDownloadPath,\n+      filesDownloadPath,\n+      initContainerBootstrap)\n+\n+    val secretNamesToMountPaths = ConfigurationUtils.parsePrefixedKeyValuePairs(\n+      sparkConf,\n+      KUBERNETES_DRIVER_SECRETS_PREFIX)\n+    // Mount user-specified driver secrets also into the driver's init-container. The\n+    // init-container may need credentials in the secrets to be able to download remote\n+    // dependencies. The driver's main container and its init-container share the secrets\n+    // because the init-container is sort of an implementation details and this sharing\n+    // avoids introducing a dedicated configuration property just for the init-container.\n+    val maybeMountSecretsStep = if (secretNamesToMountPaths.nonEmpty) {"
  }],
  "prId": 19954
}]