[{
  "comments": [{
    "author": {
      "login": "mccheah"
    },
    "body": "We did this before, in the prototype, but since we made the new feature steps API I'm not sure about having two tiers of steps. I think it'll be clearer to just use the top level feature steps and just do all Hadoop things in a single step class. Specific submodules can be factored out into separate classes, without the strict requirement of sharing the same interface.",
    "commit": "dd95fcab754e71e9465f4e46818c3cef09e86c8b",
    "createdAt": "2018-09-05T22:25:28Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features.hadoopsteps\n+\n+import java.io.File\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.features.OptionRequirements\n+import org.apache.spark.deploy.k8s.security.KubernetesHadoopDelegationTokenManager\n+import org.apache.spark.internal.Logging\n+\n+private[spark] class HadoopStepsOrchestrator(\n+  conf: SparkConf,\n+  kubernetesResourceNamePrefix: String,\n+  hadoopConfDir: String,\n+  hadoopConfigMapName: String,\n+  isKerberosEnabled: Boolean) extends Logging {\n+\n+  private val maybePrincipal = conf.get(KUBERNETES_KERBEROS_PRINCIPAL)\n+  private val maybeKeytab = conf.get(KUBERNETES_KERBEROS_KEYTAB)\n+    .map(k => new File(k))\n+  private val maybeExistingSecretName = conf.get(KUBERNETES_KERBEROS_DT_SECRET_NAME)\n+  private val maybeExistingSecretItemKey =\n+    conf.get(KUBERNETES_KERBEROS_DT_SECRET_ITEM_KEY)\n+  private val maybeRenewerPrincipal =\n+    conf.get(KUBERNETES_KERBEROS_RENEWER_PRINCIPAL)\n+\n+  require(maybeKeytab.forall( _ => isKerberosEnabled ),\n+    \"You must enable Kerberos support if you are specifying a Kerberos Keytab\")\n+\n+  require(maybeExistingSecretName.forall( _ => isKerberosEnabled ),\n+    \"You must enable Kerberos support if you are specifying a Kerberos Secret\")\n+\n+  OptionRequirements.requireBothOrNeitherDefined(\n+    maybeKeytab,\n+    maybePrincipal,\n+    \"If a Kerberos keytab is specified you must also specify a Kerberos principal\",\n+    \"If a Kerberos principal is specified you must also specify a Kerberos keytab\")\n+\n+  OptionRequirements.requireBothOrNeitherDefined(\n+    maybeExistingSecretName,\n+    maybeExistingSecretItemKey,\n+    \"If a secret storing a Kerberos Delegation Token is specified you must also\" +\n+      \" specify the label where the data is stored\",\n+    \"If a secret data item-key where the data of the Kerberos Delegation Token is specified\" +\n+      \" you must also specify the name of the secret\")\n+\n+  def getHadoopSteps(kubeTokenManager: KubernetesHadoopDelegationTokenManager):"
  }, {
    "author": {
      "login": "ifilonenko"
    },
    "body": "I thought that the interface was clear and easier to understand then using specific submodules which could bloat a single step, making it trickier, imo, to unit test. But welcome a discussion on a different design. ",
    "commit": "dd95fcab754e71e9465f4e46818c3cef09e86c8b",
    "createdAt": "2018-09-06T01:15:45Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features.hadoopsteps\n+\n+import java.io.File\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.features.OptionRequirements\n+import org.apache.spark.deploy.k8s.security.KubernetesHadoopDelegationTokenManager\n+import org.apache.spark.internal.Logging\n+\n+private[spark] class HadoopStepsOrchestrator(\n+  conf: SparkConf,\n+  kubernetesResourceNamePrefix: String,\n+  hadoopConfDir: String,\n+  hadoopConfigMapName: String,\n+  isKerberosEnabled: Boolean) extends Logging {\n+\n+  private val maybePrincipal = conf.get(KUBERNETES_KERBEROS_PRINCIPAL)\n+  private val maybeKeytab = conf.get(KUBERNETES_KERBEROS_KEYTAB)\n+    .map(k => new File(k))\n+  private val maybeExistingSecretName = conf.get(KUBERNETES_KERBEROS_DT_SECRET_NAME)\n+  private val maybeExistingSecretItemKey =\n+    conf.get(KUBERNETES_KERBEROS_DT_SECRET_ITEM_KEY)\n+  private val maybeRenewerPrincipal =\n+    conf.get(KUBERNETES_KERBEROS_RENEWER_PRINCIPAL)\n+\n+  require(maybeKeytab.forall( _ => isKerberosEnabled ),\n+    \"You must enable Kerberos support if you are specifying a Kerberos Keytab\")\n+\n+  require(maybeExistingSecretName.forall( _ => isKerberosEnabled ),\n+    \"You must enable Kerberos support if you are specifying a Kerberos Secret\")\n+\n+  OptionRequirements.requireBothOrNeitherDefined(\n+    maybeKeytab,\n+    maybePrincipal,\n+    \"If a Kerberos keytab is specified you must also specify a Kerberos principal\",\n+    \"If a Kerberos principal is specified you must also specify a Kerberos keytab\")\n+\n+  OptionRequirements.requireBothOrNeitherDefined(\n+    maybeExistingSecretName,\n+    maybeExistingSecretItemKey,\n+    \"If a secret storing a Kerberos Delegation Token is specified you must also\" +\n+      \" specify the label where the data is stored\",\n+    \"If a secret data item-key where the data of the Kerberos Delegation Token is specified\" +\n+      \" you must also specify the name of the secret\")\n+\n+  def getHadoopSteps(kubeTokenManager: KubernetesHadoopDelegationTokenManager):"
  }],
  "prId": 21669
}]