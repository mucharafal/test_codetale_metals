[{
  "comments": [{
    "author": {
      "login": "liyinan926"
    },
    "body": "Is there a equivalent to Java's `volatile` in Scala? If so, `watchConnection` should be `volatile` so your `watchConnection == null` check below is safe.",
    "commit": "1a99dceeb9dfbfc58e26885c290461cbf37a5428",
    "createdAt": "2018-05-23T18:41:15Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.scheduler.cluster.k8s\n+\n+import java.io.Closeable\n+\n+import io.fabric8.kubernetes.api.model.Pod\n+import io.fabric8.kubernetes.client.{KubernetesClient, KubernetesClientException, Watcher}\n+import io.fabric8.kubernetes.client.Watcher.Action\n+\n+import org.apache.spark.deploy.k8s.Constants._\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+private[spark] class ExecutorPodsWatchEventSource(\n+    eventHandler: ExecutorPodsEventHandler,\n+    kubernetesClient: KubernetesClient) extends Logging {\n+\n+  private var watchConnection: Closeable = null"
  }, {
    "author": {
      "login": "liyinan926"
    },
    "body": "Ditto for `pollingFuture` above.",
    "commit": "1a99dceeb9dfbfc58e26885c290461cbf37a5428",
    "createdAt": "2018-05-23T18:42:05Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.scheduler.cluster.k8s\n+\n+import java.io.Closeable\n+\n+import io.fabric8.kubernetes.api.model.Pod\n+import io.fabric8.kubernetes.client.{KubernetesClient, KubernetesClientException, Watcher}\n+import io.fabric8.kubernetes.client.Watcher.Action\n+\n+import org.apache.spark.deploy.k8s.Constants._\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+private[spark] class ExecutorPodsWatchEventSource(\n+    eventHandler: ExecutorPodsEventHandler,\n+    kubernetesClient: KubernetesClient) extends Logging {\n+\n+  private var watchConnection: Closeable = null"
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "In general `start` and `stop` actions happen at completely disjoint times; i.e. there shouldn't be concurrent threads trying to `start` and `stop` any component at the same time. So I think it's fine to make all data structures that are only accessed in `start` and `stop` not thread safe.",
    "commit": "1a99dceeb9dfbfc58e26885c290461cbf37a5428",
    "createdAt": "2018-05-23T19:09:01Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.scheduler.cluster.k8s\n+\n+import java.io.Closeable\n+\n+import io.fabric8.kubernetes.api.model.Pod\n+import io.fabric8.kubernetes.client.{KubernetesClient, KubernetesClientException, Watcher}\n+import io.fabric8.kubernetes.client.Watcher.Action\n+\n+import org.apache.spark.deploy.k8s.Constants._\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+private[spark] class ExecutorPodsWatchEventSource(\n+    eventHandler: ExecutorPodsEventHandler,\n+    kubernetesClient: KubernetesClient) extends Logging {\n+\n+  private var watchConnection: Closeable = null"
  }],
  "prId": 21366
}]