[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "I commented on the spec, and I have issues with this microservice thingy, but since it's not being added in this PR the comment should not refer to it; instead just say renewals are not yet supported.",
    "commit": "dd95fcab754e71e9465f4e46818c3cef09e86c8b",
    "createdAt": "2018-09-05T21:40:16Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.k8s.security\n+\n+import java.io.File\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.{Credentials, UserGroupInformation}\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.deploy.security.HadoopDelegationTokenManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.{Clock, SystemClock}\n+\n+ /**\n+  * The KubernetesHadoopDelegationTokenManager fetches and updates Hadoop delegation tokens\n+  * on the behalf of the Kubernetes submission client. It is modeled after the YARN\n+  * AMCredentialRenewer, renewals in Kubernetes happen in a seperate microservice that will"
  }],
  "prId": 21669
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "This is not what the YARN backend does anymore.",
    "commit": "dd95fcab754e71e9465f4e46818c3cef09e86c8b",
    "createdAt": "2018-09-05T21:40:32Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.k8s.security\n+\n+import java.io.File\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.{Credentials, UserGroupInformation}\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.deploy.security.HadoopDelegationTokenManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.{Clock, SystemClock}\n+\n+ /**\n+  * The KubernetesHadoopDelegationTokenManager fetches and updates Hadoop delegation tokens\n+  * on the behalf of the Kubernetes submission client. It is modeled after the YARN\n+  * AMCredentialRenewer, renewals in Kubernetes happen in a seperate microservice that will\n+  * automatically update the Tokens via Kubernetes Secrets. The principal difference is that\n+  * instead of writing the new credentials to HDFS and incrementing the timestamp of the file,"
  }],
  "prId": 21669
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Main method. Or just drop the comment altogether, it's not really adding anything.",
    "commit": "dd95fcab754e71e9465f4e46818c3cef09e86c8b",
    "createdAt": "2018-09-05T21:41:48Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.k8s.security\n+\n+import java.io.File\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.{Credentials, UserGroupInformation}\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.deploy.security.HadoopDelegationTokenManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.{Clock, SystemClock}\n+\n+ /**\n+  * The KubernetesHadoopDelegationTokenManager fetches and updates Hadoop delegation tokens\n+  * on the behalf of the Kubernetes submission client. It is modeled after the YARN\n+  * AMCredentialRenewer, renewals in Kubernetes happen in a seperate microservice that will\n+  * automatically update the Tokens via Kubernetes Secrets. The principal difference is that\n+  * instead of writing the new credentials to HDFS and incrementing the timestamp of the file,\n+  * the new credentials (called Tokens when they are serialized) are stored in Secrets accessible\n+  * to the driver and executors, when new Tokens are received they overwrite the current Secrets.\n+  */\n+private[spark] class KubernetesHadoopDelegationTokenManager extends Logging {\n+\n+   // HadoopUGI Util methods\n+   private val clock: Clock = new SystemClock()\n+   def getCurrentUser: UserGroupInformation = UserGroupInformation.getCurrentUser\n+   def getShortUserName : String = getCurrentUser.getShortUserName\n+   def getFileSystem(hadoopConf: Configuration) : FileSystem = FileSystem.get(hadoopConf)\n+   def isSecurityEnabled: Boolean = UserGroupInformation.isSecurityEnabled\n+   def loginUserFromKeytabAndReturnUGI(principal: String, keytab: String): UserGroupInformation =\n+     UserGroupInformation.loginUserFromKeytabAndReturnUGI(principal, keytab)\n+   def getCurrentTime: Long = clock.getTimeMillis()\n+   def serializeCreds(creds: Credentials): Array[Byte] = SparkHadoopUtil.get.serialize(creds)\n+   def nextRT(rt: Long, conf: SparkConf): Long = SparkHadoopUtil.nextCredentialRenewalTime(rt, conf)\n+\n+   // Grab files in the HADOOP_CONF directory\n+   def getHadoopConfFiles(path: String) : Seq[File] = {\n+     val dir = new File(path)\n+     if (dir.isDirectory) {\n+       dir.listFiles.flatMap { file => Some(file).filter(_.isFile) }.toSeq\n+     } else {\n+       Seq.empty[File]\n+     }\n+   }\n+\n+   // Principle method in charge of retrieving new Delegation Tokens"
  }],
  "prId": 21669
}, {
  "comments": [{
    "author": {
      "login": "liyinan926"
    },
    "body": "This is purely a utility method and probably should be moved to `HadoopBoostrapUtil`?",
    "commit": "dd95fcab754e71e9465f4e46818c3cef09e86c8b",
    "createdAt": "2018-10-01T16:36:55Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.k8s.security\n+\n+import java.io.File\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.{Credentials, UserGroupInformation}\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.deploy.security.HadoopDelegationTokenManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.{Clock, SystemClock}\n+\n+ /**\n+  * The KubernetesHadoopDelegationTokenManager fetches Hadoop delegation tokens\n+  * on the behalf of the Kubernetes submission client. The new credentials\n+  * (called Tokens when they are serialized) are stored in Secrets accessible\n+  * to the driver and executors, when new Tokens are received they overwrite the current Secrets.\n+  */\n+private[spark] class KubernetesHadoopDelegationTokenManager extends Logging {\n+\n+   // HadoopUGI Util methods\n+   private val clock: Clock = new SystemClock()\n+   def getCurrentUser: UserGroupInformation = UserGroupInformation.getCurrentUser\n+   def getShortUserName : String = getCurrentUser.getShortUserName\n+   def getFileSystem(hadoopConf: Configuration) : FileSystem = FileSystem.get(hadoopConf)\n+   def isSecurityEnabled: Boolean = UserGroupInformation.isSecurityEnabled\n+   def loginUserFromKeytabAndReturnUGI(principal: String, keytab: String): UserGroupInformation =\n+     UserGroupInformation.loginUserFromKeytabAndReturnUGI(principal, keytab)\n+   def getCurrentTime: Long = clock.getTimeMillis()\n+   def serializeCreds(creds: Credentials): Array[Byte] = SparkHadoopUtil.get.serialize(creds)\n+   def nextRT(rt: Long, conf: SparkConf): Long = SparkHadoopUtil.nextCredentialRenewalTime(rt, conf)\n+\n+   // Grab files in the HADOOP_CONF directory\n+   def getHadoopConfFiles(path: String) : Seq[File] = {"
  }],
  "prId": 21669
}, {
  "comments": [{
    "author": {
      "login": "liyinan926"
    },
    "body": "Why do you need this class if the only thing it does is to use a `HadoopDelegationTokenManager` to get a DT? Looks like you can use `HadoopDelegationTokenManager` directly?",
    "commit": "dd95fcab754e71e9465f4e46818c3cef09e86c8b",
    "createdAt": "2018-10-01T16:42:12Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.k8s.security\n+\n+import java.io.File\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.{Credentials, UserGroupInformation}\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.deploy.security.HadoopDelegationTokenManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.{Clock, SystemClock}\n+\n+ /**\n+  * The KubernetesHadoopDelegationTokenManager fetches Hadoop delegation tokens\n+  * on the behalf of the Kubernetes submission client. The new credentials\n+  * (called Tokens when they are serialized) are stored in Secrets accessible\n+  * to the driver and executors, when new Tokens are received they overwrite the current Secrets.\n+  */\n+private[spark] class KubernetesHadoopDelegationTokenManager extends Logging {"
  }],
  "prId": 21669
}]