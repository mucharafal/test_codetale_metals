[{
  "comments": [{
    "author": {
      "login": "liyinan926"
    },
    "body": "What if the key is missing?",
    "commit": "45eb477623d89fb9352bf38b75c0a27e228f291f",
    "createdAt": "2018-05-31T15:33:31Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features\n+\n+import io.fabric8.kubernetes.api.model._\n+\n+import org.apache.spark.deploy.k8s.{KubernetesConf, KubernetesRoleSpecificConf, KubernetesVolumeSpec, SparkPod}\n+import org.apache.spark.deploy.k8s.Config._\n+\n+private[spark] class MountVolumesFeatureStep(\n+  kubernetesConf: KubernetesConf[_ <: KubernetesRoleSpecificConf])\n+  extends KubernetesFeatureConfigStep {\n+\n+  override def configurePod(pod: SparkPod): SparkPod = {\n+    val (volumeMounts, volumes) = constructVolumes(kubernetesConf.roleVolumes).unzip\n+\n+    val podWithVolumes = new PodBuilder(pod.pod)\n+      .editSpec()\n+      .addToVolumes(volumes.toSeq: _*)\n+      .endSpec()\n+      .build()\n+\n+    val containerWithVolumeMounts = new ContainerBuilder(pod.container)\n+      .addToVolumeMounts(volumeMounts.toSeq: _*)\n+      .build()\n+\n+    SparkPod(podWithVolumes, containerWithVolumeMounts)\n+  }\n+\n+  override def getAdditionalPodSystemProperties(): Map[String, String] = Map.empty\n+\n+  override def getAdditionalKubernetesResources(): Seq[HasMetadata] = Seq.empty\n+\n+  private def constructVolumes(\n+    volumeSpecs: Iterable[KubernetesVolumeSpec]): Iterable[(VolumeMount, Volume)] = {\n+    volumeSpecs.map { spec =>\n+      val volumeMount = new VolumeMountBuilder()\n+        .withMountPath(spec.mountPath)\n+        .withReadOnly(spec.mountReadOnly)\n+        .withName(spec.volumeName)\n+        .build()\n+\n+      val volumeBuilder = spec.volumeType match {\n+        case KUBERNETES_VOLUMES_HOSTPATH_KEY =>\n+          val hostPath = spec.optionsSpec(KUBERNETES_VOLUMES_PATH_KEY)"
  }],
  "prId": 21260
}, {
  "comments": [{
    "author": {
      "login": "liyinan926"
    },
    "body": "Ditto: what if the keys are missing?",
    "commit": "45eb477623d89fb9352bf38b75c0a27e228f291f",
    "createdAt": "2018-05-31T15:33:42Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features\n+\n+import io.fabric8.kubernetes.api.model._\n+\n+import org.apache.spark.deploy.k8s.{KubernetesConf, KubernetesRoleSpecificConf, KubernetesVolumeSpec, SparkPod}\n+import org.apache.spark.deploy.k8s.Config._\n+\n+private[spark] class MountVolumesFeatureStep(\n+  kubernetesConf: KubernetesConf[_ <: KubernetesRoleSpecificConf])\n+  extends KubernetesFeatureConfigStep {\n+\n+  override def configurePod(pod: SparkPod): SparkPod = {\n+    val (volumeMounts, volumes) = constructVolumes(kubernetesConf.roleVolumes).unzip\n+\n+    val podWithVolumes = new PodBuilder(pod.pod)\n+      .editSpec()\n+      .addToVolumes(volumes.toSeq: _*)\n+      .endSpec()\n+      .build()\n+\n+    val containerWithVolumeMounts = new ContainerBuilder(pod.container)\n+      .addToVolumeMounts(volumeMounts.toSeq: _*)\n+      .build()\n+\n+    SparkPod(podWithVolumes, containerWithVolumeMounts)\n+  }\n+\n+  override def getAdditionalPodSystemProperties(): Map[String, String] = Map.empty\n+\n+  override def getAdditionalKubernetesResources(): Seq[HasMetadata] = Seq.empty\n+\n+  private def constructVolumes(\n+    volumeSpecs: Iterable[KubernetesVolumeSpec]): Iterable[(VolumeMount, Volume)] = {\n+    volumeSpecs.map { spec =>\n+      val volumeMount = new VolumeMountBuilder()\n+        .withMountPath(spec.mountPath)\n+        .withReadOnly(spec.mountReadOnly)\n+        .withName(spec.volumeName)\n+        .build()\n+\n+      val volumeBuilder = spec.volumeType match {\n+        case KUBERNETES_VOLUMES_HOSTPATH_KEY =>\n+          val hostPath = spec.optionsSpec(KUBERNETES_VOLUMES_PATH_KEY)\n+          new VolumeBuilder()\n+            .withHostPath(new HostPathVolumeSource(hostPath))\n+\n+        case KUBERNETES_VOLUMES_PVC_KEY =>\n+          val claimName = spec.optionsSpec(KUBERNETES_VOLUMES_CLAIM_NAME_KEY)\n+          new VolumeBuilder()\n+            .withPersistentVolumeClaim(\n+              new PersistentVolumeClaimVolumeSource(claimName, spec.mountReadOnly))\n+\n+        case KUBERNETES_VOLUMES_EMPTYDIR_KEY =>\n+          val medium = spec.optionsSpec(KUBERNETES_VOLUMES_MEDIUM_KEY)"
  }],
  "prId": 21260
}, {
  "comments": [{
    "author": {
      "login": "liyinan926"
    },
    "body": "Unnecessary extra empty line.",
    "commit": "45eb477623d89fb9352bf38b75c0a27e228f291f",
    "createdAt": "2018-05-31T15:41:29Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features\n+\n+import io.fabric8.kubernetes.api.model._\n+\n+import org.apache.spark.deploy.k8s.{KubernetesConf, KubernetesRoleSpecificConf, KubernetesVolumeSpec, SparkPod}\n+import org.apache.spark.deploy.k8s.Config._\n+\n+private[spark] class MountVolumesFeatureStep(\n+  kubernetesConf: KubernetesConf[_ <: KubernetesRoleSpecificConf])\n+  extends KubernetesFeatureConfigStep {\n+\n+  override def configurePod(pod: SparkPod): SparkPod = {\n+    val (volumeMounts, volumes) = constructVolumes(kubernetesConf.roleVolumes).unzip\n+\n+    val podWithVolumes = new PodBuilder(pod.pod)\n+      .editSpec()\n+      .addToVolumes(volumes.toSeq: _*)\n+      .endSpec()\n+      .build()\n+\n+    val containerWithVolumeMounts = new ContainerBuilder(pod.container)\n+      .addToVolumeMounts(volumeMounts.toSeq: _*)\n+      .build()\n+\n+    SparkPod(podWithVolumes, containerWithVolumeMounts)\n+  }\n+\n+  override def getAdditionalPodSystemProperties(): Map[String, String] = Map.empty\n+\n+  override def getAdditionalKubernetesResources(): Seq[HasMetadata] = Seq.empty\n+\n+  private def constructVolumes(\n+    volumeSpecs: Iterable[KubernetesVolumeSpec]): Iterable[(VolumeMount, Volume)] = {\n+    volumeSpecs.map { spec =>\n+      val volumeMount = new VolumeMountBuilder()\n+        .withMountPath(spec.mountPath)\n+        .withReadOnly(spec.mountReadOnly)\n+        .withName(spec.volumeName)\n+        .build()\n+\n+      val volumeBuilder = spec.volumeType match {\n+        case KUBERNETES_VOLUMES_HOSTPATH_KEY =>\n+          val hostPath = spec.optionsSpec(KUBERNETES_VOLUMES_PATH_KEY)\n+          new VolumeBuilder()\n+            .withHostPath(new HostPathVolumeSource(hostPath))\n+\n+        case KUBERNETES_VOLUMES_PVC_KEY =>\n+          val claimName = spec.optionsSpec(KUBERNETES_VOLUMES_CLAIM_NAME_KEY)\n+          new VolumeBuilder()\n+            .withPersistentVolumeClaim(\n+              new PersistentVolumeClaimVolumeSource(claimName, spec.mountReadOnly))\n+\n+        case KUBERNETES_VOLUMES_EMPTYDIR_KEY =>\n+          val medium = spec.optionsSpec(KUBERNETES_VOLUMES_MEDIUM_KEY)\n+          val sizeLimit = spec.optionsSpec(KUBERNETES_VOLUMES_SIZE_LIMIT_KEY)\n+          new VolumeBuilder()\n+            .withEmptyDir(new EmptyDirVolumeSource(medium, new Quantity(sizeLimit)))\n+      }\n+\n+      val volume = volumeBuilder.withName(spec.volumeName).build()\n+"
  }],
  "prId": 21260
}, {
  "comments": [{
    "author": {
      "login": "liyinan926"
    },
    "body": "The class parameter line should be indented 4 spaces.",
    "commit": "45eb477623d89fb9352bf38b75c0a27e228f291f",
    "createdAt": "2018-06-11T16:17:06Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features\n+\n+import io.fabric8.kubernetes.api.model._\n+\n+import org.apache.spark.deploy.k8s._\n+\n+private[spark] class MountVolumesFeatureStep(\n+  kubernetesConf: KubernetesConf[_ <: KubernetesRoleSpecificConf])"
  }],
  "prId": 21260
}]