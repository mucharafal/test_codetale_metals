[{
  "comments": [{
    "author": {
      "login": "mccheah"
    },
    "body": "Match the indentation here with the indentation style down below.",
    "commit": "3707e6a411cdb8410365cde8e79b8d3ec01a7fee",
    "createdAt": "2018-08-22T00:32:53Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features\n+\n+import io.fabric8.kubernetes.api.model.{Config => _, _}\n+\n+import org.apache.spark.deploy.k8s._\n+\n+private[spark] class TemplateVolumeStep(\n+   conf: KubernetesConf[_ <: KubernetesRoleSpecificConf])\n+  extends KubernetesFeatureConfigStep {\n+  def configurePod(pod: SparkPod): SparkPod = {\n+    require(conf.get(Config.KUBERNETES_EXECUTOR_PODTEMPLATE_FILE).isDefined)\n+    val podTemplateFile = conf.get(Config.KUBERNETES_EXECUTOR_PODTEMPLATE_FILE).get\n+    val podWithVolume = new PodBuilder(pod.pod)\n+      .editSpec()"
  }],
  "prId": 22146
}, {
  "comments": [{
    "author": {
      "login": "mccheah"
    },
    "body": "`addNewVolumeMount()`",
    "commit": "3707e6a411cdb8410365cde8e79b8d3ec01a7fee",
    "createdAt": "2018-08-22T00:33:19Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features\n+\n+import io.fabric8.kubernetes.api.model.{Config => _, _}\n+\n+import org.apache.spark.deploy.k8s._\n+\n+private[spark] class TemplateVolumeStep(\n+   conf: KubernetesConf[_ <: KubernetesRoleSpecificConf])\n+  extends KubernetesFeatureConfigStep {\n+  def configurePod(pod: SparkPod): SparkPod = {\n+    require(conf.get(Config.KUBERNETES_EXECUTOR_PODTEMPLATE_FILE).isDefined)\n+    val podTemplateFile = conf.get(Config.KUBERNETES_EXECUTOR_PODTEMPLATE_FILE).get\n+    val podWithVolume = new PodBuilder(pod.pod)\n+      .editSpec()\n+      .addNewVolume()\n+      .withName(Constants.POD_TEMPLATE_VOLUME)\n+      .withHostPath(new HostPathVolumeSource(podTemplateFile))\n+      .endVolume()\n+      .endSpec()\n+      .build()\n+\n+    val containerWithVolume = new ContainerBuilder(pod.container)\n+        .withVolumeMounts(new VolumeMountBuilder()"
  }],
  "prId": 22146
}, {
  "comments": [{
    "author": {
      "login": "mccheah"
    },
    "body": "`hostPath` is not the correct volume type here. Instead, do the following:\r\n\r\n- Override `getAdditionalKubernetesResources()` with the following:\r\n    1. Load the contents of the template file from this process's local disk into a UTF-8 String\r\n    2. Create and return a  `ConfigMap` object containing the contents of that config map, with some given key\r\n- In `configurePod`, add the config map as a volume in the pod spec, and add a volume mount pointing to that volume as done here.",
    "commit": "3707e6a411cdb8410365cde8e79b8d3ec01a7fee",
    "createdAt": "2018-08-22T00:48:07Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features\n+\n+import io.fabric8.kubernetes.api.model.{Config => _, _}\n+\n+import org.apache.spark.deploy.k8s._\n+\n+private[spark] class TemplateVolumeStep(\n+   conf: KubernetesConf[_ <: KubernetesRoleSpecificConf])\n+  extends KubernetesFeatureConfigStep {\n+  def configurePod(pod: SparkPod): SparkPod = {\n+    require(conf.get(Config.KUBERNETES_EXECUTOR_PODTEMPLATE_FILE).isDefined)\n+    val podTemplateFile = conf.get(Config.KUBERNETES_EXECUTOR_PODTEMPLATE_FILE).get\n+    val podWithVolume = new PodBuilder(pod.pod)\n+      .editSpec()\n+      .addNewVolume()\n+      .withName(Constants.POD_TEMPLATE_VOLUME)\n+      .withHostPath(new HostPathVolumeSource(podTemplateFile))"
  }, {
    "author": {
      "login": "liyinan926"
    },
    "body": "Can we also change the name of this class to something like `PodTemplateConfigMapStep` to make it clear that is uses a ConfigMap to ship the template file?",
    "commit": "3707e6a411cdb8410365cde8e79b8d3ec01a7fee",
    "createdAt": "2018-08-22T18:51:33Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features\n+\n+import io.fabric8.kubernetes.api.model.{Config => _, _}\n+\n+import org.apache.spark.deploy.k8s._\n+\n+private[spark] class TemplateVolumeStep(\n+   conf: KubernetesConf[_ <: KubernetesRoleSpecificConf])\n+  extends KubernetesFeatureConfigStep {\n+  def configurePod(pod: SparkPod): SparkPod = {\n+    require(conf.get(Config.KUBERNETES_EXECUTOR_PODTEMPLATE_FILE).isDefined)\n+    val podTemplateFile = conf.get(Config.KUBERNETES_EXECUTOR_PODTEMPLATE_FILE).get\n+    val podWithVolume = new PodBuilder(pod.pod)\n+      .editSpec()\n+      .addNewVolume()\n+      .withName(Constants.POD_TEMPLATE_VOLUME)\n+      .withHostPath(new HostPathVolumeSource(podTemplateFile))"
  }],
  "prId": 22146
}, {
  "comments": [{
    "author": {
      "login": "mccheah"
    },
    "body": "So this pushes the pod spec yml from the spark-submit process's local disk up to the driver pod. It may be worthwhile to support specifying the file as a location in the driver pod that hasn't been mounted by spark-submit, but I think doing it this way is fine for now.",
    "commit": "3707e6a411cdb8410365cde8e79b8d3ec01a7fee",
    "createdAt": "2018-08-22T00:51:26Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features\n+\n+import io.fabric8.kubernetes.api.model.{Config => _, _}\n+\n+import org.apache.spark.deploy.k8s._\n+\n+private[spark] class TemplateVolumeStep("
  }],
  "prId": 22146
}]