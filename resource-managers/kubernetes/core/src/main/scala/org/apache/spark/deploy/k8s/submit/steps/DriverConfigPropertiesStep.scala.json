[{
  "comments": [{
    "author": {
      "login": "mccheah"
    },
    "body": "it's risky to pass the driver spark configuration this way. The way this is built, this step must be specifically placed last in the list of steps returned by the orchestrator. Ideally, the orchestrators should be able to return monads that can be applied in any order. But this is done in such a way that the driver spark configuration must be completely built in the spec before this step is run.\r\n\r\nI think this code shouldn't necessarily even live in a config step, but instead are run directly in the outer submission client. This is what we were doing before, when we just passed all of the driver Spark configurations as system properties to the main class. We can replace that instead with passing these values as `--conf` options. Thoughts?",
    "commit": "f8f42f063ba23d417750bc1eaa3b26b59907535d",
    "createdAt": "2018-03-06T22:09:35Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps\n+\n+import java.io.StringWriter\n+import java.util.Properties\n+\n+import io.fabric8.kubernetes.api.model._\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.Constants._\n+import org.apache.spark.deploy.k8s.submit.KubernetesDriverSpec\n+\n+/**\n+ * Create a config map with the driver configuration and attach it to the pod. This needs to\n+ * come at the end of the driver configuration so that all modifications to the Spark config\n+ * are reflected in the generated config map.\n+ */\n+private[spark] class DriverConfigPropertiesStep(resourceNamePrefix: String)\n+    extends DriverConfigurationStep {\n+\n+  override def configureDriver(spec: KubernetesDriverSpec): KubernetesDriverSpec = {\n+    val configMapName = s\"$resourceNamePrefix-driver-conf-map\"\n+    val configMap = buildConfigMap(configMapName, spec.driverSparkConf)"
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "One other question - how are we passing `spark.driver.extraJavaOptions` properties to the driver now?",
    "commit": "f8f42f063ba23d417750bc1eaa3b26b59907535d",
    "createdAt": "2018-03-06T22:12:23Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps\n+\n+import java.io.StringWriter\n+import java.util.Properties\n+\n+import io.fabric8.kubernetes.api.model._\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.Constants._\n+import org.apache.spark.deploy.k8s.submit.KubernetesDriverSpec\n+\n+/**\n+ * Create a config map with the driver configuration and attach it to the pod. This needs to\n+ * come at the end of the driver configuration so that all modifications to the Spark config\n+ * are reflected in the generated config map.\n+ */\n+private[spark] class DriverConfigPropertiesStep(resourceNamePrefix: String)\n+    extends DriverConfigurationStep {\n+\n+  override def configureDriver(spec: KubernetesDriverSpec): KubernetesDriverSpec = {\n+    val configMapName = s\"$resourceNamePrefix-driver-conf-map\"\n+    val configMap = buildConfigMap(configMapName, spec.driverSparkConf)"
  }, {
    "author": {
      "login": "ifilonenko"
    },
    "body": "I agree in that it should be in any order. I will restructure it as such. ",
    "commit": "f8f42f063ba23d417750bc1eaa3b26b59907535d",
    "createdAt": "2018-03-11T17:56:39Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps\n+\n+import java.io.StringWriter\n+import java.util.Properties\n+\n+import io.fabric8.kubernetes.api.model._\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.Constants._\n+import org.apache.spark.deploy.k8s.submit.KubernetesDriverSpec\n+\n+/**\n+ * Create a config map with the driver configuration and attach it to the pod. This needs to\n+ * come at the end of the driver configuration so that all modifications to the Spark config\n+ * are reflected in the generated config map.\n+ */\n+private[spark] class DriverConfigPropertiesStep(resourceNamePrefix: String)\n+    extends DriverConfigurationStep {\n+\n+  override def configureDriver(spec: KubernetesDriverSpec): KubernetesDriverSpec = {\n+    val configMapName = s\"$resourceNamePrefix-driver-conf-map\"\n+    val configMap = buildConfigMap(configMapName, spec.driverSparkConf)"
  }, {
    "author": {
      "login": "ifilonenko"
    },
    "body": "I will also include `--conf spark.driver.extraJavaOptions=` in the spark-submit launched in the driver",
    "commit": "f8f42f063ba23d417750bc1eaa3b26b59907535d",
    "createdAt": "2018-03-11T18:53:51Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps\n+\n+import java.io.StringWriter\n+import java.util.Properties\n+\n+import io.fabric8.kubernetes.api.model._\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.Constants._\n+import org.apache.spark.deploy.k8s.submit.KubernetesDriverSpec\n+\n+/**\n+ * Create a config map with the driver configuration and attach it to the pod. This needs to\n+ * come at the end of the driver configuration so that all modifications to the Spark config\n+ * are reflected in the generated config map.\n+ */\n+private[spark] class DriverConfigPropertiesStep(resourceNamePrefix: String)\n+    extends DriverConfigurationStep {\n+\n+  override def configureDriver(spec: KubernetesDriverSpec): KubernetesDriverSpec = {\n+    val configMapName = s\"$resourceNamePrefix-driver-conf-map\"\n+    val configMap = buildConfigMap(configMapName, spec.driverSparkConf)"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Not sure I understand why being able to declare things in any order is important.\r\n\r\nNot doing so means you'll have to pass properties as command line arguments. Which, in a way, is already enforcing ordering - it assumes that the code that sets those command line arguments runs last, so it can see all parameters.\r\n\r\nThis approach also means you don't need to think about things such as java options. They're in the config file, which is processed by spark-submit. The whole point of this exercise was to avoid duplicating stuff that spark-submit already does.",
    "commit": "f8f42f063ba23d417750bc1eaa3b26b59907535d",
    "createdAt": "2018-03-12T16:46:43Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps\n+\n+import java.io.StringWriter\n+import java.util.Properties\n+\n+import io.fabric8.kubernetes.api.model._\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.Constants._\n+import org.apache.spark.deploy.k8s.submit.KubernetesDriverSpec\n+\n+/**\n+ * Create a config map with the driver configuration and attach it to the pod. This needs to\n+ * come at the end of the driver configuration so that all modifications to the Spark config\n+ * are reflected in the generated config map.\n+ */\n+private[spark] class DriverConfigPropertiesStep(resourceNamePrefix: String)\n+    extends DriverConfigurationStep {\n+\n+  override def configureDriver(spec: KubernetesDriverSpec): KubernetesDriverSpec = {\n+    val configMapName = s\"$resourceNamePrefix-driver-conf-map\"\n+    val configMap = buildConfigMap(configMapName, spec.driverSparkConf)"
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "I see - using the config map is a good idea then, but it still can't be in a config step because it has to assume that all the properties its given are the absolute final ones. We should keep the driver properties code in the same _place_ as it was before, which was separate from the config steps and after all the steps were processed. The implementation can still be with the config map which allows spark-submit to pick up these properties.\r\n\r\nJust to double check, will this logic need to be re-used anywhere? I don't think the executor pods have to mount the same properties config map.\r\n\r\n> I will also include --conf spark.driver.extraJavaOptions= in the spark-submit launched in the driver\r\n\r\nThat won't work because by the time spark-submit is running, you'll want to _already_ have these JVM options applied since spark-submit will be running the driver JVM itself. You'll need to find a way to get the spark-submit JVM to run with these JVM options.",
    "commit": "f8f42f063ba23d417750bc1eaa3b26b59907535d",
    "createdAt": "2018-03-12T16:59:40Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps\n+\n+import java.io.StringWriter\n+import java.util.Properties\n+\n+import io.fabric8.kubernetes.api.model._\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.Constants._\n+import org.apache.spark.deploy.k8s.submit.KubernetesDriverSpec\n+\n+/**\n+ * Create a config map with the driver configuration and attach it to the pod. This needs to\n+ * come at the end of the driver configuration so that all modifications to the Spark config\n+ * are reflected in the generated config map.\n+ */\n+private[spark] class DriverConfigPropertiesStep(resourceNamePrefix: String)\n+    extends DriverConfigurationStep {\n+\n+  override def configureDriver(spec: KubernetesDriverSpec): KubernetesDriverSpec = {\n+    val configMapName = s\"$resourceNamePrefix-driver-conf-map\"\n+    val configMap = buildConfigMap(configMapName, spec.driverSparkConf)"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "> Just to double check, will this logic need to be re-used anywhere? I don't think the executor pods have to mount the same properties config map.\r\n\r\nCurrently, I don't think so, since executors aren't started with spark-submit. That would be nice to do at some point, to simplify how executors are started, but that's a little beyond what this PR is doing.",
    "commit": "f8f42f063ba23d417750bc1eaa3b26b59907535d",
    "createdAt": "2018-03-12T19:04:15Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps\n+\n+import java.io.StringWriter\n+import java.util.Properties\n+\n+import io.fabric8.kubernetes.api.model._\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.Constants._\n+import org.apache.spark.deploy.k8s.submit.KubernetesDriverSpec\n+\n+/**\n+ * Create a config map with the driver configuration and attach it to the pod. This needs to\n+ * come at the end of the driver configuration so that all modifications to the Spark config\n+ * are reflected in the generated config map.\n+ */\n+private[spark] class DriverConfigPropertiesStep(resourceNamePrefix: String)\n+    extends DriverConfigurationStep {\n+\n+  override def configureDriver(spec: KubernetesDriverSpec): KubernetesDriverSpec = {\n+    val configMapName = s\"$resourceNamePrefix-driver-conf-map\"\n+    val configMap = buildConfigMap(configMapName, spec.driverSparkConf)"
  }],
  "prId": 20669
}]