[{
  "comments": [{
    "author": {
      "login": "mccheah"
    },
    "body": "Indentation",
    "commit": "c04179b48056b14912a95016d5040777bdb1007c",
    "createdAt": "2018-05-25T18:22:10Z",
    "diffHunk": "@@ -16,55 +16,45 @@\n  */\n package org.apache.spark.deploy.k8s.submit\n \n-import java.util.concurrent.{CountDownLatch, TimeUnit}\n+import java.util.concurrent.CountDownLatch\n \n import scala.collection.JavaConverters._\n \n-import io.fabric8.kubernetes.api.model.{ContainerStateRunning, ContainerStateTerminated, ContainerStateWaiting, ContainerStatus, Pod, Time}\n-import io.fabric8.kubernetes.client.{KubernetesClientException, Watcher}\n+import io.fabric8.kubernetes.api.model.{ContainerStateRunning, ContainerStateTerminated, ContainerStateWaiting, ContainerStatus, Job, Pod, Time}\n+import io.fabric8.kubernetes.client.{KubernetesClient, KubernetesClientException, Watcher}\n import io.fabric8.kubernetes.client.Watcher.Action\n \n import org.apache.spark.SparkException\n import org.apache.spark.internal.Logging\n-import org.apache.spark.util.ThreadUtils\n \n-private[k8s] trait LoggingPodStatusWatcher extends Watcher[Pod] {\n+private[k8s] trait LoggingJobStatusWatcher extends Watcher[Job] {\n   def awaitCompletion(): Unit\n }\n \n-/**\n- * A monitor for the running Kubernetes pod of a Spark application. Status logging occurs on\n- * every state change and also at an interval for liveness.\n- *\n- * @param appId application ID.\n- * @param maybeLoggingInterval ms between each state request. If provided, must be a positive\n- *                             number.\n- */\n-private[k8s] class LoggingPodStatusWatcherImpl(\n-    appId: String,\n-    maybeLoggingInterval: Option[Long])\n-  extends LoggingPodStatusWatcher with Logging {\n-\n-  private val podCompletedFuture = new CountDownLatch(1)\n-  // start timer for periodic logging\n-  private val scheduler =\n-    ThreadUtils.newDaemonSingleThreadScheduledExecutor(\"logging-pod-status-watcher\")\n-  private val logRunnable: Runnable = new Runnable {\n-    override def run() = logShortStatus()\n-  }\n-\n-  private var pod = Option.empty[Pod]\n-\n-  private def phase: String = pod.map(_.getStatus.getPhase).getOrElse(\"unknown\")\n-\n-  def start(): Unit = {\n-    maybeLoggingInterval.foreach { interval =>\n-      scheduler.scheduleAtFixedRate(logRunnable, 0, interval, TimeUnit.MILLISECONDS)\n+ /**\n+  * A monitor for the running Kubernetes pod of a Spark application. Status logging occurs on\n+  * every state change and also at an interval for liveness.\n+  *\n+  * @param appId application ID.\n+  * @param kubernetesClient kubernetes client.\n+  */\n+private[k8s] class LoggingJobStatusWatcherImpl(\n+                                                appId: String,"
  }],
  "prId": 21067
}]