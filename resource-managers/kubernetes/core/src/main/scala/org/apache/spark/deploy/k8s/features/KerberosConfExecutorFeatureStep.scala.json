[{
  "comments": [{
    "author": {
      "login": "liyinan926"
    },
    "body": "Why you build the krb5 ConfigMap for executor pods? The ConfigMap should only be created once for the entire application and mount into the driver and executor pods.",
    "commit": "dd95fcab754e71e9465f4e46818c3cef09e86c8b",
    "createdAt": "2018-10-08T17:16:52Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features\n+\n+import io.fabric8.kubernetes.api.model.HasMetadata\n+\n+import org.apache.spark.deploy.k8s.{KubernetesConf, KubernetesUtils, SparkPod}\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.Constants._\n+import org.apache.spark.deploy.k8s.KubernetesExecutorSpecificConf\n+import org.apache.spark.deploy.k8s.features.hadooputils.HadoopBootstrapUtil\n+import org.apache.spark.internal.Logging\n+\n+ /**\n+  * This step is responsible for mounting the DT secret for the executors\n+  */\n+private[spark] class KerberosConfExecutorFeatureStep(\n+  kubernetesConf: KubernetesConf[KubernetesExecutorSpecificConf])\n+  extends KubernetesFeatureConfigStep with Logging{\n+   private val sparkConf = kubernetesConf.sparkConf\n+   private val maybeKrb5File = sparkConf.get(KUBERNETES_KERBEROS_KRB5_FILE)\n+   private val maybeKrb5CMap = sparkConf.get(KUBERNETES_KERBEROS_KRB5_CONFIG_MAP)\n+   KubernetesUtils.requireNandDefined(\n+     maybeKrb5File,\n+     maybeKrb5CMap,\n+     \"Do not specify both a Krb5 local file and the ConfigMap as the creation \" +\n+       \"of an additional ConfigMap, when one is already specified, is extraneous\")\n+\n+  override def configurePod(pod: SparkPod): SparkPod = {\n+    logInfo(s\"Mounting Kerberos DT for Kerberos\")\n+    HadoopBootstrapUtil.bootstrapKerberosPod(\n+      sparkConf.get(KERBEROS_KEYTAB_SECRET_NAME),\n+      sparkConf.get(KERBEROS_KEYTAB_SECRET_KEY),\n+      sparkConf.get(KERBEROS_SPARK_USER_NAME),\n+      maybeKrb5File,\n+      kubernetesConf.kRBConfigMapName,\n+      maybeKrb5CMap,\n+      pod)\n+  }\n+\n+  override def getAdditionalPodSystemProperties(): Map[String, String] = Map.empty\n+\n+  override def getAdditionalKubernetesResources(): Seq[HasMetadata] = {\n+    maybeKrb5File\n+      .map(fileLocation => HadoopBootstrapUtil.buildkrb5ConfigMap("
  }],
  "prId": 21669
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "space before `{`.\r\n\r\nPlease go over your code and fix all these style issues.\r\n- proper arg indentation (double indented), indentation in general.\r\n- spaces around braces\r\n- closing braces on their own line (unless the whole closure fits in a single line)\r\n- use `.foo { blah => ... }` instead of parentheses\r\n",
    "commit": "dd95fcab754e71e9465f4e46818c3cef09e86c8b",
    "createdAt": "2018-10-08T22:38:28Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features\n+\n+import io.fabric8.kubernetes.api.model.HasMetadata\n+\n+import org.apache.spark.deploy.k8s.{KubernetesConf, KubernetesUtils, SparkPod}\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.Constants._\n+import org.apache.spark.deploy.k8s.KubernetesExecutorSpecificConf\n+import org.apache.spark.deploy.k8s.features.hadooputils.HadoopBootstrapUtil\n+import org.apache.spark.internal.Logging\n+\n+ /**\n+  * This step is responsible for mounting the DT secret for the executors\n+  */\n+private[spark] class KerberosConfExecutorFeatureStep(\n+  kubernetesConf: KubernetesConf[KubernetesExecutorSpecificConf])\n+  extends KubernetesFeatureConfigStep with Logging{"
  }],
  "prId": 21669
}]