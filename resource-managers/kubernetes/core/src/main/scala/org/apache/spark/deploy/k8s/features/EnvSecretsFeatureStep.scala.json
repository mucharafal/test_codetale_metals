[{
  "comments": [{
    "author": {
      "login": "liyinan926"
    },
    "body": "The indention seems incorrect.",
    "commit": "b55d3f0070cbac932f0410b1a42b45d84ea493ce",
    "createdAt": "2018-05-21T16:22:11Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features\n+\n+import scala.collection.JavaConverters._\n+\n+import io.fabric8.kubernetes.api.model.{ContainerBuilder, EnvVarBuilder, HasMetadata}\n+\n+import org.apache.spark.deploy.k8s.{KubernetesConf, KubernetesRoleSpecificConf, SparkPod}\n+\n+private[spark] class EnvSecretsFeatureStep(\n+    kubernetesConf: KubernetesConf[_ <: KubernetesRoleSpecificConf])\n+  extends KubernetesFeatureConfigStep {\n+  override def configurePod(pod: SparkPod): SparkPod = {\n+    val addedEnvSecrets = kubernetesConf\n+      .roleSecretEnvNamesToKeyRefs\n+      .map{ case (envName, keyRef) =>\n+        // Keyref parts\n+        val keyRefParts = keyRef.split(\":\")\n+        require(keyRefParts.size == 2, \"KeyRef must be in the form name:key.\")\n+        val name = keyRefParts(0)\n+        val key = keyRefParts(1)\n+        new EnvVarBuilder()\n+          .withName(envName)\n+          .withNewValueFrom()\n+          .withNewSecretKeyRef()\n+          .withKey(key)"
  }, {
    "author": {
      "login": "skonto"
    },
    "body": "Not so sure. I just follow the indentation rules I see in other similar cases. So two spaces on the right for all of these calls. I will double check.",
    "commit": "b55d3f0070cbac932f0410b1a42b45d84ea493ce",
    "createdAt": "2018-05-23T13:18:57Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features\n+\n+import scala.collection.JavaConverters._\n+\n+import io.fabric8.kubernetes.api.model.{ContainerBuilder, EnvVarBuilder, HasMetadata}\n+\n+import org.apache.spark.deploy.k8s.{KubernetesConf, KubernetesRoleSpecificConf, SparkPod}\n+\n+private[spark] class EnvSecretsFeatureStep(\n+    kubernetesConf: KubernetesConf[_ <: KubernetesRoleSpecificConf])\n+  extends KubernetesFeatureConfigStep {\n+  override def configurePod(pod: SparkPod): SparkPod = {\n+    val addedEnvSecrets = kubernetesConf\n+      .roleSecretEnvNamesToKeyRefs\n+      .map{ case (envName, keyRef) =>\n+        // Keyref parts\n+        val keyRefParts = keyRef.split(\":\")\n+        require(keyRefParts.size == 2, \"KeyRef must be in the form name:key.\")\n+        val name = keyRefParts(0)\n+        val key = keyRefParts(1)\n+        new EnvVarBuilder()\n+          .withName(envName)\n+          .withNewValueFrom()\n+          .withNewSecretKeyRef()\n+          .withKey(key)"
  }, {
    "author": {
      "login": "liyinan926"
    },
    "body": "`withNewValueFrom` and `withNewSecretKeyRef` should both start a deeper indention if you look at other classes with code building k8s objects.",
    "commit": "b55d3f0070cbac932f0410b1a42b45d84ea493ce",
    "createdAt": "2018-05-24T16:26:01Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features\n+\n+import scala.collection.JavaConverters._\n+\n+import io.fabric8.kubernetes.api.model.{ContainerBuilder, EnvVarBuilder, HasMetadata}\n+\n+import org.apache.spark.deploy.k8s.{KubernetesConf, KubernetesRoleSpecificConf, SparkPod}\n+\n+private[spark] class EnvSecretsFeatureStep(\n+    kubernetesConf: KubernetesConf[_ <: KubernetesRoleSpecificConf])\n+  extends KubernetesFeatureConfigStep {\n+  override def configurePod(pod: SparkPod): SparkPod = {\n+    val addedEnvSecrets = kubernetesConf\n+      .roleSecretEnvNamesToKeyRefs\n+      .map{ case (envName, keyRef) =>\n+        // Keyref parts\n+        val keyRefParts = keyRef.split(\":\")\n+        require(keyRefParts.size == 2, \"KeyRef must be in the form name:key.\")\n+        val name = keyRefParts(0)\n+        val key = keyRefParts(1)\n+        new EnvVarBuilder()\n+          .withName(envName)\n+          .withNewValueFrom()\n+          .withNewSecretKeyRef()\n+          .withKey(key)"
  }],
  "prId": 21317
}, {
  "comments": [{
    "author": {
      "login": "liyinan926"
    },
    "body": "s/`KeyRef`/`SecretKeyRef`/.",
    "commit": "b55d3f0070cbac932f0410b1a42b45d84ea493ce",
    "createdAt": "2018-05-21T16:28:55Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features\n+\n+import scala.collection.JavaConverters._\n+\n+import io.fabric8.kubernetes.api.model.{ContainerBuilder, EnvVarBuilder, HasMetadata}\n+\n+import org.apache.spark.deploy.k8s.{KubernetesConf, KubernetesRoleSpecificConf, SparkPod}\n+\n+private[spark] class EnvSecretsFeatureStep(\n+    kubernetesConf: KubernetesConf[_ <: KubernetesRoleSpecificConf])\n+  extends KubernetesFeatureConfigStep {\n+  override def configurePod(pod: SparkPod): SparkPod = {\n+    val addedEnvSecrets = kubernetesConf\n+      .roleSecretEnvNamesToKeyRefs\n+      .map{ case (envName, keyRef) =>\n+        // Keyref parts\n+        val keyRefParts = keyRef.split(\":\")\n+        require(keyRefParts.size == 2, \"KeyRef must be in the form name:key.\")"
  }, {
    "author": {
      "login": "skonto"
    },
    "body": "yes correct, will fix.",
    "commit": "b55d3f0070cbac932f0410b1a42b45d84ea493ce",
    "createdAt": "2018-05-23T13:19:18Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features\n+\n+import scala.collection.JavaConverters._\n+\n+import io.fabric8.kubernetes.api.model.{ContainerBuilder, EnvVarBuilder, HasMetadata}\n+\n+import org.apache.spark.deploy.k8s.{KubernetesConf, KubernetesRoleSpecificConf, SparkPod}\n+\n+private[spark] class EnvSecretsFeatureStep(\n+    kubernetesConf: KubernetesConf[_ <: KubernetesRoleSpecificConf])\n+  extends KubernetesFeatureConfigStep {\n+  override def configurePod(pod: SparkPod): SparkPod = {\n+    val addedEnvSecrets = kubernetesConf\n+      .roleSecretEnvNamesToKeyRefs\n+      .map{ case (envName, keyRef) =>\n+        // Keyref parts\n+        val keyRefParts = keyRef.split(\":\")\n+        require(keyRefParts.size == 2, \"KeyRef must be in the form name:key.\")"
  }],
  "prId": 21317
}]