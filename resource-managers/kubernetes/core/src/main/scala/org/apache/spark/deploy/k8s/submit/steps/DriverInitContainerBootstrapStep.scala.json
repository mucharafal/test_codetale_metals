[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "`}` goes in next line, or you could have everything in one line.",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-15T23:57:45Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps\n+\n+import java.io.StringWriter\n+import java.util.Properties\n+\n+import io.fabric8.kubernetes.api.model.{ConfigMap, ConfigMapBuilder, ContainerBuilder, HasMetadata}\n+\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.submit.{InitContainerUtil, KubernetesDriverSpec}\n+import org.apache.spark.deploy.k8s.submit.steps.initcontainer.{InitContainerConfigurationStep, InitContainerSpec}\n+\n+/**\n+ * Configures the init-container that bootstraps dependencies into the driver pod, including\n+ * building a ConfigMap that will be mounted into the init-container. The ConfigMap carries\n+ * configuration properties for the init-container.\n+ */\n+private[spark] class DriverInitContainerBootstrapStep(\n+    initContainerConfigurationSteps: Seq[InitContainerConfigurationStep],\n+    initContainerConfigMapName: String,\n+    initContainerConfigMapKey: String)\n+  extends DriverConfigurationStep {\n+\n+  override def configureDriver(driverSpec: KubernetesDriverSpec): KubernetesDriverSpec = {\n+    var currentInitContainerSpec = InitContainerSpec(\n+      initContainerProperties = Map.empty[String, String],\n+      driverSparkConf = Map.empty[String, String],\n+      initContainer = new ContainerBuilder().build(),\n+      driverContainer = driverSpec.driverContainer,\n+      driverPod = driverSpec.driverPod,\n+      initContainerDependentResources = Seq.empty[HasMetadata])\n+    for (nextStep <- initContainerConfigurationSteps) {\n+      currentInitContainerSpec = nextStep.configureInitContainer(currentInitContainerSpec)\n+    }\n+\n+    val configMap = buildConfigMap(\n+      initContainerConfigMapName,\n+      initContainerConfigMapKey,\n+      currentInitContainerSpec.initContainerProperties)\n+    val resolvedDriverSparkConf = driverSpec.driverSparkConf\n+      .clone()\n+      .set(INIT_CONTAINER_CONFIG_MAP_NAME, initContainerConfigMapName)\n+      .set(INIT_CONTAINER_CONFIG_MAP_KEY_CONF, initContainerConfigMapKey)\n+      .setAll(currentInitContainerSpec.driverSparkConf)\n+    val resolvedDriverPod = InitContainerUtil.appendInitContainer(\n+      currentInitContainerSpec.driverPod, currentInitContainerSpec.initContainer)\n+\n+    driverSpec.copy(\n+      driverPod = resolvedDriverPod,\n+      driverContainer = currentInitContainerSpec.driverContainer,\n+      driverSparkConf = resolvedDriverSparkConf,\n+      otherKubernetesResources =\n+        driverSpec.otherKubernetesResources ++\n+          currentInitContainerSpec.initContainerDependentResources ++\n+          Seq(configMap))\n+  }\n+\n+  private def buildConfigMap(\n+      configMapName: String,\n+      configMapKey: String,\n+      config: Map[String, String]): ConfigMap = {\n+    val properties = new Properties()\n+    config.foreach { entry =>\n+      properties.setProperty(entry._1, entry._2) }"
  }],
  "prId": 19954
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Another place where variable names are unnecessarily long and harm readability. `initContainer` is already implicit given the name of the class. I have to parse the variable name every time and ignore the prefix to know which one it is.",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-19T00:05:44Z",
    "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps\n+\n+import java.io.StringWriter\n+import java.util.Properties\n+\n+import io.fabric8.kubernetes.api.model.{ConfigMap, ConfigMapBuilder, ContainerBuilder, HasMetadata}\n+\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.submit.{InitContainerUtil, KubernetesDriverSpec}\n+import org.apache.spark.deploy.k8s.submit.steps.initcontainer.{InitContainerConfigurationStep, InitContainerSpec}\n+\n+/**\n+ * Configures the init-container that bootstraps dependencies into the driver pod, including\n+ * building a ConfigMap that will be mounted into the init-container. The ConfigMap carries\n+ * configuration properties for the init-container.\n+ */\n+private[spark] class DriverInitContainerBootstrapStep(\n+    initContainerConfigurationSteps: Seq[InitContainerConfigurationStep],"
  }],
  "prId": 19954
}, {
  "comments": [{
    "author": {
      "login": "mccheah"
    },
    "body": "I don't think we want to be using a separate step hierarchy here. Originally we weren't sure how many different configurations the init-container could have. But now that we've had the init-container around for awhile we've only seen two variations: submitting local files vs. not submitting local files. I think we can inline these configurations into the step directly.",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-19T23:03:01Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps\n+\n+import java.io.StringWriter\n+import java.util.Properties\n+\n+import io.fabric8.kubernetes.api.model.{ConfigMap, ConfigMapBuilder, ContainerBuilder, HasMetadata}\n+\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.submit.{InitContainerUtil, KubernetesDriverSpec}\n+import org.apache.spark.deploy.k8s.submit.steps.initcontainer.{InitContainerConfigurationStep, InitContainerSpec}\n+\n+/**\n+ * Configures the driver init-container that localizes remote dependencies into the driver pod.\n+ * It applies the given InitContainerConfigurationSteps in the given order to produce a final\n+ * InitContainerSpec that is then used to configure the driver pod with the init-container attached.\n+ * It also builds a ConfigMap that will be mounted into the init-container. The ConfigMap carries\n+ * configuration properties for the init-container.\n+ */\n+private[spark] class DriverInitContainerBootstrapStep(\n+    steps: Seq[InitContainerConfigurationStep],",
    "line": 37
  }, {
    "author": {
      "login": "liyinan926"
    },
    "body": "I think we can address this as part of the refactoring work.",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-20T16:41:04Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit.steps\n+\n+import java.io.StringWriter\n+import java.util.Properties\n+\n+import io.fabric8.kubernetes.api.model.{ConfigMap, ConfigMapBuilder, ContainerBuilder, HasMetadata}\n+\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.submit.{InitContainerUtil, KubernetesDriverSpec}\n+import org.apache.spark.deploy.k8s.submit.steps.initcontainer.{InitContainerConfigurationStep, InitContainerSpec}\n+\n+/**\n+ * Configures the driver init-container that localizes remote dependencies into the driver pod.\n+ * It applies the given InitContainerConfigurationSteps in the given order to produce a final\n+ * InitContainerSpec that is then used to configure the driver pod with the init-container attached.\n+ * It also builds a ConfigMap that will be mounted into the init-container. The ConfigMap carries\n+ * configuration properties for the init-container.\n+ */\n+private[spark] class DriverInitContainerBootstrapStep(\n+    steps: Seq[InitContainerConfigurationStep],",
    "line": 37
  }],
  "prId": 19954
}]