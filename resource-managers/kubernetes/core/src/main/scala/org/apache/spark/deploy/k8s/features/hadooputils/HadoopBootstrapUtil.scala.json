[{
  "comments": [{
    "author": {
      "login": "liyinan926"
    },
    "body": "You don't need `maybeFileLocation` given the `newKrb5ConfName` below. BTW: `newKrb5ConfName` should be `Option[String]` instead.",
    "commit": "dd95fcab754e71e9465f4e46818c3cef09e86c8b",
    "createdAt": "2018-10-08T20:41:39Z",
    "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features.hadooputils\n+\n+import java.io.File\n+\n+import scala.collection.JavaConverters._\n+\n+import com.google.common.base.Charsets\n+import com.google.common.io.Files\n+import io.fabric8.kubernetes.api.model._\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.deploy.k8s.Constants._\n+import org.apache.spark.deploy.k8s.SparkPod\n+\n+private[spark] object HadoopBootstrapUtil {\n+\n+   /**\n+    * Mounting the DT secret for both the Driver and the executors\n+    *\n+    * @param dtSecretName Name of the secret that stores the Delegation Token\n+    * @param dtSecretItemKey Name of the Item Key storing the Delegation Token\n+    * @param userName Name of the SparkUser to set SPARK_USER\n+    * @param maybeFileLocation Optional Location of the krb5 file\n+    * @param newKrb5ConfName Optional location of the ConfigMap for Krb5\n+    * @param maybeKrb5ConfName Optional name of ConfigMap for Krb5\n+    * @param pod Input pod to be appended to\n+    * @return a modified SparkPod\n+    */\n+  def bootstrapKerberosPod(\n+    dtSecretName: String,\n+    dtSecretItemKey: String,\n+    userName: String,\n+    maybeFileLocation: Option[String],"
  }],
  "prId": 21669
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Fits in previous line.\r\n\r\nBut isn't this check already performed in `KerberosConfDriverFeatureStep`? Feels like you could avoid this extra check here somehow.",
    "commit": "dd95fcab754e71e9465f4e46818c3cef09e86c8b",
    "createdAt": "2018-10-08T22:40:13Z",
    "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.features.hadooputils\n+\n+import java.io.File\n+\n+import scala.collection.JavaConverters._\n+\n+import com.google.common.base.Charsets\n+import com.google.common.io.Files\n+import io.fabric8.kubernetes.api.model._\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.deploy.k8s.Constants._\n+import org.apache.spark.deploy.k8s.SparkPod\n+\n+private[spark] object HadoopBootstrapUtil {\n+\n+   /**\n+    * Mounting the DT secret for both the Driver and the executors\n+    *\n+    * @param dtSecretName Name of the secret that stores the Delegation Token\n+    * @param dtSecretItemKey Name of the Item Key storing the Delegation Token\n+    * @param userName Name of the SparkUser to set SPARK_USER\n+    * @param maybeFileLocation Optional Location of the krb5 file\n+    * @param newKrb5ConfName Optional location of the ConfigMap for Krb5\n+    * @param maybeKrb5ConfName Optional name of ConfigMap for Krb5\n+    * @param pod Input pod to be appended to\n+    * @return a modified SparkPod\n+    */\n+  def bootstrapKerberosPod(\n+    dtSecretName: String,\n+    dtSecretItemKey: String,\n+    userName: String,\n+    maybeFileLocation: Option[String],\n+    newKrb5ConfName: String,\n+    maybeKrb5ConfName: Option[String],\n+    pod: SparkPod) : SparkPod = {\n+\n+    val maybePreConfigMapVolume = maybeKrb5ConfName.map { kconf =>\n+      new VolumeBuilder()\n+        .withName(KRB_FILE_VOLUME)\n+        .withNewConfigMap()\n+          .withName(kconf)\n+          .endConfigMap()\n+        .build() }\n+\n+    val maybeCreateConfigMapVolume = maybeFileLocation.map {\n+      fileLocation =>\n+      val krb5File = new File(fileLocation)\n+      val fileStringPath = krb5File.toPath.getFileName.toString\n+      new VolumeBuilder()\n+        .withName(KRB_FILE_VOLUME)\n+        .withNewConfigMap()\n+          .withName(newKrb5ConfName)\n+          .withItems(new KeyToPathBuilder()\n+            .withKey(fileStringPath)\n+            .withPath(fileStringPath)\n+            .build())\n+          .endConfigMap()\n+        .build() }\n+\n+    // Breaking up Volume Creation for clarity\n+    val configMapVolume =\n+      maybePreConfigMapVolume.getOrElse(\n+        maybeCreateConfigMapVolume.getOrElse(\n+          throw new SparkException(\n+            \"Must specify krb5 file locally or via ConfigMap\")"
  }],
  "prId": 21669
}]