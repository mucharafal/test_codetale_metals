[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "This looks a lot like `resolveFilePaths`, you could probably merge the two in some way.",
    "commit": "cbcd30ea0a5eb75ed831f50707bc97035c0a3371",
    "createdAt": "2017-12-04T19:49:35Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit\n+\n+import java.io.File\n+\n+import org.apache.spark.util.Utils\n+\n+private[spark] object KubernetesFileUtils {\n+\n+  /**\n+   * For the given collection of file URIs, resolves them as follows:\n+   * - File URIs with scheme file:// are resolved to the given download path.\n+   * - File URIs with scheme local:// resolve to just the path of the URI.\n+   * - Otherwise, the URIs are returned as-is.\n+   */\n+  def resolveSubmittedUris(\n+      fileUris: Iterable[String],\n+      fileDownloadPath: String): Iterable[String] = {\n+    fileUris.map { uri =>\n+      val fileUri = Utils.resolveURI(uri)\n+      val fileScheme = Option(fileUri.getScheme).getOrElse(\"file\")\n+      fileScheme match {"
  }, {
    "author": {
      "login": "liyinan926"
    },
    "body": "Done.",
    "commit": "cbcd30ea0a5eb75ed831f50707bc97035c0a3371",
    "createdAt": "2017-12-04T22:57:00Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.submit\n+\n+import java.io.File\n+\n+import org.apache.spark.util.Utils\n+\n+private[spark] object KubernetesFileUtils {\n+\n+  /**\n+   * For the given collection of file URIs, resolves them as follows:\n+   * - File URIs with scheme file:// are resolved to the given download path.\n+   * - File URIs with scheme local:// resolve to just the path of the URI.\n+   * - Otherwise, the URIs are returned as-is.\n+   */\n+  def resolveSubmittedUris(\n+      fileUris: Iterable[String],\n+      fileDownloadPath: String): Iterable[String] = {\n+    fileUris.map { uri =>\n+      val fileUri = Utils.resolveURI(uri)\n+      val fileScheme = Option(fileUri.getScheme).getOrElse(\"file\")\n+      fileScheme match {"
  }],
  "prId": 19717
}]