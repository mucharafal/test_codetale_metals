[{
  "comments": [{
    "author": {
      "login": "liyinan926"
    },
    "body": "Wrong indention.",
    "commit": "ab992ca6f0374e057d865bafb11de7f3ccae2e10",
    "createdAt": "2018-02-01T22:52:49Z",
    "diffHunk": "@@ -88,6 +103,60 @@ private[spark] object SparkKubernetesClientFactory {\n     new DefaultKubernetesClient(httpClientWithCustomDispatcher, config)\n   }\n \n+  def createOutClusterKubernetesClient(\n+                             master: String,"
  }],
  "prId": 20451
}, {
  "comments": [{
    "author": {
      "login": "tnachen"
    },
    "body": "Since it's only used once I'm not sure it warrents a separate file/method for checking Options.\r\nAlso the method signature isn't quite clear for me what it does. (especially requireN)\r\nHow about just a simple match that @squito suggested here?",
    "commit": "ab992ca6f0374e057d865bafb11de7f3ccae2e10",
    "createdAt": "2018-07-01T07:29:36Z",
    "diffHunk": "@@ -88,6 +103,56 @@ private[spark] object SparkKubernetesClientFactory {\n     new DefaultKubernetesClient(httpClientWithCustomDispatcher, config)\n   }\n \n+  def createOutClusterKubernetesClient(\n+                             master: String,\n+                             namespace: Option[String],\n+                             kubernetesAuthConfPrefix: String,\n+                             sparkConf: SparkConf,\n+                             maybeServiceAccountToken: Option[File],\n+                             maybeServiceAccountCaCert: Option[File]): KubernetesClient = {\n+     val oauthTokenFileConf = s\"$kubernetesAuthConfPrefix.$OAUTH_TOKEN_FILE_CONF_SUFFIX\"\n+     val oauthTokenConf = s\"$kubernetesAuthConfPrefix.$OAUTH_TOKEN_CONF_SUFFIX\"\n+     val oauthTokenFile = sparkConf.getOption(oauthTokenFileConf)\n+       .map(new File(_))\n+       .orElse(maybeServiceAccountToken)\n+     val oauthTokenValue = sparkConf.getOption(oauthTokenConf)\n+     OptionRequirements.requireNandDefined("
  }, {
    "author": {
      "login": "echarles"
    },
    "body": "I did not introduce  `OptionRequirements.requireNandDefined` but reused what was already in place.",
    "commit": "ab992ca6f0374e057d865bafb11de7f3ccae2e10",
    "createdAt": "2018-07-10T04:34:18Z",
    "diffHunk": "@@ -88,6 +103,56 @@ private[spark] object SparkKubernetesClientFactory {\n     new DefaultKubernetesClient(httpClientWithCustomDispatcher, config)\n   }\n \n+  def createOutClusterKubernetesClient(\n+                             master: String,\n+                             namespace: Option[String],\n+                             kubernetesAuthConfPrefix: String,\n+                             sparkConf: SparkConf,\n+                             maybeServiceAccountToken: Option[File],\n+                             maybeServiceAccountCaCert: Option[File]): KubernetesClient = {\n+     val oauthTokenFileConf = s\"$kubernetesAuthConfPrefix.$OAUTH_TOKEN_FILE_CONF_SUFFIX\"\n+     val oauthTokenConf = s\"$kubernetesAuthConfPrefix.$OAUTH_TOKEN_CONF_SUFFIX\"\n+     val oauthTokenFile = sparkConf.getOption(oauthTokenFileConf)\n+       .map(new File(_))\n+       .orElse(maybeServiceAccountToken)\n+     val oauthTokenValue = sparkConf.getOption(oauthTokenConf)\n+     OptionRequirements.requireNandDefined("
  }],
  "prId": 20451
}, {
  "comments": [{
    "author": {
      "login": "tnachen"
    },
    "body": "Fix ident",
    "commit": "ab992ca6f0374e057d865bafb11de7f3ccae2e10",
    "createdAt": "2018-07-01T07:29:54Z",
    "diffHunk": "@@ -88,6 +103,56 @@ private[spark] object SparkKubernetesClientFactory {\n     new DefaultKubernetesClient(httpClientWithCustomDispatcher, config)\n   }\n \n+  def createOutClusterKubernetesClient(\n+                             master: String,"
  }, {
    "author": {
      "login": "echarles"
    },
    "body": "Done.",
    "commit": "ab992ca6f0374e057d865bafb11de7f3ccae2e10",
    "createdAt": "2018-07-10T04:08:21Z",
    "diffHunk": "@@ -88,6 +103,56 @@ private[spark] object SparkKubernetesClientFactory {\n     new DefaultKubernetesClient(httpClientWithCustomDispatcher, config)\n   }\n \n+  def createOutClusterKubernetesClient(\n+                             master: String,"
  }],
  "prId": 20451
}]