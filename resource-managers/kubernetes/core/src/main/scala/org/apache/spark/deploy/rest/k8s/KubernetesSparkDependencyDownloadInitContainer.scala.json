[{
  "comments": [{
    "author": {
      "login": "ueshin"
    },
    "body": "nit: remove `s`.",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-15T08:34:04Z",
    "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.rest.k8s\n+\n+import java.io.File\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.spark.{SecurityManager => SparkSecurityManager, SparkConf}\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.{ThreadUtils, Utils}\n+\n+/**\n+ * Process that fetches files from a resource staging server and/or arbitrary remote locations.\n+ *\n+ * The init-container can handle fetching files from any of those sources, but not all of the\n+ * sources need to be specified. This allows for composing multiple instances of this container\n+ * with different configurations for different download sources, or using the same container to\n+ * download everything at once.\n+ */\n+private[spark] class KubernetesSparkDependencyDownloadInitContainer(\n+    sparkConf: SparkConf,\n+    fileFetcher: FileFetcher) extends Logging {\n+\n+  private implicit val downloadExecutor = ExecutionContext.fromExecutorService(\n+    ThreadUtils.newDaemonCachedThreadPool(\"download-executor\"))\n+\n+  private val jarsDownloadDir = new File(\n+    sparkConf.get(JARS_DOWNLOAD_LOCATION))\n+  private val filesDownloadDir = new File(\n+    sparkConf.get(FILES_DOWNLOAD_LOCATION))\n+\n+  private val remoteJars = sparkConf.get(INIT_CONTAINER_REMOTE_JARS)\n+  private val remoteFiles = sparkConf.get(INIT_CONTAINER_REMOTE_FILES)\n+\n+  private val downloadTimeoutMinutes = sparkConf.get(INIT_CONTAINER_MOUNT_TIMEOUT)\n+\n+  def run(): Unit = {\n+    val remoteJarsDownload = Future[Unit] {\n+      logInfo(s\"Downloading remote jars: $remoteJars\")\n+      downloadFiles(\n+        remoteJars,\n+        jarsDownloadDir,\n+        s\"Remote jars download directory specified at $jarsDownloadDir does not exist \" +\n+          s\"or is not a directory.\")"
  }, {
    "author": {
      "login": "liyinan926"
    },
    "body": "Done.",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-15T16:45:51Z",
    "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.rest.k8s\n+\n+import java.io.File\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.spark.{SecurityManager => SparkSecurityManager, SparkConf}\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.{ThreadUtils, Utils}\n+\n+/**\n+ * Process that fetches files from a resource staging server and/or arbitrary remote locations.\n+ *\n+ * The init-container can handle fetching files from any of those sources, but not all of the\n+ * sources need to be specified. This allows for composing multiple instances of this container\n+ * with different configurations for different download sources, or using the same container to\n+ * download everything at once.\n+ */\n+private[spark] class KubernetesSparkDependencyDownloadInitContainer(\n+    sparkConf: SparkConf,\n+    fileFetcher: FileFetcher) extends Logging {\n+\n+  private implicit val downloadExecutor = ExecutionContext.fromExecutorService(\n+    ThreadUtils.newDaemonCachedThreadPool(\"download-executor\"))\n+\n+  private val jarsDownloadDir = new File(\n+    sparkConf.get(JARS_DOWNLOAD_LOCATION))\n+  private val filesDownloadDir = new File(\n+    sparkConf.get(FILES_DOWNLOAD_LOCATION))\n+\n+  private val remoteJars = sparkConf.get(INIT_CONTAINER_REMOTE_JARS)\n+  private val remoteFiles = sparkConf.get(INIT_CONTAINER_REMOTE_FILES)\n+\n+  private val downloadTimeoutMinutes = sparkConf.get(INIT_CONTAINER_MOUNT_TIMEOUT)\n+\n+  def run(): Unit = {\n+    val remoteJarsDownload = Future[Unit] {\n+      logInfo(s\"Downloading remote jars: $remoteJars\")\n+      downloadFiles(\n+        remoteJars,\n+        jarsDownloadDir,\n+        s\"Remote jars download directory specified at $jarsDownloadDir does not exist \" +\n+          s\"or is not a directory.\")"
  }],
  "prId": 19954
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "This name is so long it becomes confusing. How about `KubernetesInitContainer`? Or do you plan to have multiple different init containers for different things (ugh)?",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-16T00:06:58Z",
    "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.rest.k8s\n+\n+import java.io.File\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.spark.{SecurityManager => SparkSecurityManager, SparkConf}\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.{ThreadUtils, Utils}\n+\n+/**\n+ * Process that fetches files from a resource staging server and/or arbitrary remote locations.\n+ *\n+ * The init-container can handle fetching files from any of those sources, but not all of the\n+ * sources need to be specified. This allows for composing multiple instances of this container\n+ * with different configurations for different download sources, or using the same container to\n+ * download everything at once.\n+ */\n+private[spark] class KubernetesSparkDependencyDownloadInitContainer("
  }, {
    "author": {
      "login": "liyinan926"
    },
    "body": "Renamed to `SparkPodInitContainer`.",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-16T00:48:03Z",
    "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.rest.k8s\n+\n+import java.io.File\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.spark.{SecurityManager => SparkSecurityManager, SparkConf}\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.{ThreadUtils, Utils}\n+\n+/**\n+ * Process that fetches files from a resource staging server and/or arbitrary remote locations.\n+ *\n+ * The init-container can handle fetching files from any of those sources, but not all of the\n+ * sources need to be specified. This allows for composing multiple instances of this container\n+ * with different configurations for different download sources, or using the same container to\n+ * download everything at once.\n+ */\n+private[spark] class KubernetesSparkDependencyDownloadInitContainer("
  }],
  "prId": 19954
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "You have a thread pool, but really you're just submitting two tasks. Why not one task for each file / jar?",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-16T00:08:40Z",
    "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.rest.k8s\n+\n+import java.io.File\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.spark.{SecurityManager => SparkSecurityManager, SparkConf}\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.{ThreadUtils, Utils}\n+\n+/**\n+ * Process that fetches files from a resource staging server and/or arbitrary remote locations.\n+ *\n+ * The init-container can handle fetching files from any of those sources, but not all of the\n+ * sources need to be specified. This allows for composing multiple instances of this container\n+ * with different configurations for different download sources, or using the same container to\n+ * download everything at once.\n+ */\n+private[spark] class KubernetesSparkDependencyDownloadInitContainer(\n+    sparkConf: SparkConf,\n+    fileFetcher: FileFetcher) extends Logging {\n+\n+  private implicit val downloadExecutor = ExecutionContext.fromExecutorService(\n+    ThreadUtils.newDaemonCachedThreadPool(\"download-executor\"))\n+\n+  private val jarsDownloadDir = new File(\n+    sparkConf.get(JARS_DOWNLOAD_LOCATION))\n+  private val filesDownloadDir = new File(\n+    sparkConf.get(FILES_DOWNLOAD_LOCATION))\n+\n+  private val remoteJars = sparkConf.get(INIT_CONTAINER_REMOTE_JARS)\n+  private val remoteFiles = sparkConf.get(INIT_CONTAINER_REMOTE_FILES)\n+\n+  private val downloadTimeoutMinutes = sparkConf.get(INIT_CONTAINER_MOUNT_TIMEOUT)\n+\n+  def run(): Unit = {\n+    val remoteJarsDownload = Future[Unit] {\n+      logInfo(s\"Downloading remote jars: $remoteJars\")\n+      downloadFiles(\n+        remoteJars,\n+        jarsDownloadDir,\n+        s\"Remote jars download directory specified at $jarsDownloadDir does not exist \" +\n+          \"or is not a directory.\")\n+    }\n+    val remoteFilesDownload = Future[Unit] {\n+      logInfo(s\"Downloading remote files: $remoteFiles\")\n+      downloadFiles(\n+        remoteFiles,\n+        filesDownloadDir,\n+        s\"Remote files download directory specified at $filesDownloadDir does not exist \" +\n+          \"or is not a directory.\")\n+    }\n+    waitForFutures("
  }, {
    "author": {
      "login": "liyinan926"
    },
    "body": "This class actually handles more tasks in our fork. For example, is is also responsible for downloading from the resource staging server that hosts submission client dependencies. The resource staging server will be in a future PR.",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-16T00:52:16Z",
    "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.rest.k8s\n+\n+import java.io.File\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.spark.{SecurityManager => SparkSecurityManager, SparkConf}\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.{ThreadUtils, Utils}\n+\n+/**\n+ * Process that fetches files from a resource staging server and/or arbitrary remote locations.\n+ *\n+ * The init-container can handle fetching files from any of those sources, but not all of the\n+ * sources need to be specified. This allows for composing multiple instances of this container\n+ * with different configurations for different download sources, or using the same container to\n+ * download everything at once.\n+ */\n+private[spark] class KubernetesSparkDependencyDownloadInitContainer(\n+    sparkConf: SparkConf,\n+    fileFetcher: FileFetcher) extends Logging {\n+\n+  private implicit val downloadExecutor = ExecutionContext.fromExecutorService(\n+    ThreadUtils.newDaemonCachedThreadPool(\"download-executor\"))\n+\n+  private val jarsDownloadDir = new File(\n+    sparkConf.get(JARS_DOWNLOAD_LOCATION))\n+  private val filesDownloadDir = new File(\n+    sparkConf.get(FILES_DOWNLOAD_LOCATION))\n+\n+  private val remoteJars = sparkConf.get(INIT_CONTAINER_REMOTE_JARS)\n+  private val remoteFiles = sparkConf.get(INIT_CONTAINER_REMOTE_FILES)\n+\n+  private val downloadTimeoutMinutes = sparkConf.get(INIT_CONTAINER_MOUNT_TIMEOUT)\n+\n+  def run(): Unit = {\n+    val remoteJarsDownload = Future[Unit] {\n+      logInfo(s\"Downloading remote jars: $remoteJars\")\n+      downloadFiles(\n+        remoteJars,\n+        jarsDownloadDir,\n+        s\"Remote jars download directory specified at $jarsDownloadDir does not exist \" +\n+          \"or is not a directory.\")\n+    }\n+    val remoteFilesDownload = Future[Unit] {\n+      logInfo(s\"Downloading remote files: $remoteFiles\")\n+      downloadFiles(\n+        remoteFiles,\n+        filesDownloadDir,\n+        s\"Remote files download directory specified at $filesDownloadDir does not exist \" +\n+          \"or is not a directory.\")\n+    }\n+    waitForFutures("
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Sure, but that's not my point. If you have 10 jars and 10 files to download, the current code will only download 2 at a time. If you submit each jar / file separately, you'll download as many as your thread pool allows, and you can make that configurable.",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-16T00:53:39Z",
    "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.rest.k8s\n+\n+import java.io.File\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.spark.{SecurityManager => SparkSecurityManager, SparkConf}\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.{ThreadUtils, Utils}\n+\n+/**\n+ * Process that fetches files from a resource staging server and/or arbitrary remote locations.\n+ *\n+ * The init-container can handle fetching files from any of those sources, but not all of the\n+ * sources need to be specified. This allows for composing multiple instances of this container\n+ * with different configurations for different download sources, or using the same container to\n+ * download everything at once.\n+ */\n+private[spark] class KubernetesSparkDependencyDownloadInitContainer(\n+    sparkConf: SparkConf,\n+    fileFetcher: FileFetcher) extends Logging {\n+\n+  private implicit val downloadExecutor = ExecutionContext.fromExecutorService(\n+    ThreadUtils.newDaemonCachedThreadPool(\"download-executor\"))\n+\n+  private val jarsDownloadDir = new File(\n+    sparkConf.get(JARS_DOWNLOAD_LOCATION))\n+  private val filesDownloadDir = new File(\n+    sparkConf.get(FILES_DOWNLOAD_LOCATION))\n+\n+  private val remoteJars = sparkConf.get(INIT_CONTAINER_REMOTE_JARS)\n+  private val remoteFiles = sparkConf.get(INIT_CONTAINER_REMOTE_FILES)\n+\n+  private val downloadTimeoutMinutes = sparkConf.get(INIT_CONTAINER_MOUNT_TIMEOUT)\n+\n+  def run(): Unit = {\n+    val remoteJarsDownload = Future[Unit] {\n+      logInfo(s\"Downloading remote jars: $remoteJars\")\n+      downloadFiles(\n+        remoteJars,\n+        jarsDownloadDir,\n+        s\"Remote jars download directory specified at $jarsDownloadDir does not exist \" +\n+          \"or is not a directory.\")\n+    }\n+    val remoteFilesDownload = Future[Unit] {\n+      logInfo(s\"Downloading remote files: $remoteFiles\")\n+      downloadFiles(\n+        remoteFiles,\n+        filesDownloadDir,\n+        s\"Remote files download directory specified at $filesDownloadDir does not exist \" +\n+          \"or is not a directory.\")\n+    }\n+    waitForFutures("
  }, {
    "author": {
      "login": "liyinan926"
    },
    "body": "Got it, will address this.",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-16T01:04:34Z",
    "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.rest.k8s\n+\n+import java.io.File\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.spark.{SecurityManager => SparkSecurityManager, SparkConf}\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.{ThreadUtils, Utils}\n+\n+/**\n+ * Process that fetches files from a resource staging server and/or arbitrary remote locations.\n+ *\n+ * The init-container can handle fetching files from any of those sources, but not all of the\n+ * sources need to be specified. This allows for composing multiple instances of this container\n+ * with different configurations for different download sources, or using the same container to\n+ * download everything at once.\n+ */\n+private[spark] class KubernetesSparkDependencyDownloadInitContainer(\n+    sparkConf: SparkConf,\n+    fileFetcher: FileFetcher) extends Logging {\n+\n+  private implicit val downloadExecutor = ExecutionContext.fromExecutorService(\n+    ThreadUtils.newDaemonCachedThreadPool(\"download-executor\"))\n+\n+  private val jarsDownloadDir = new File(\n+    sparkConf.get(JARS_DOWNLOAD_LOCATION))\n+  private val filesDownloadDir = new File(\n+    sparkConf.get(FILES_DOWNLOAD_LOCATION))\n+\n+  private val remoteJars = sparkConf.get(INIT_CONTAINER_REMOTE_JARS)\n+  private val remoteFiles = sparkConf.get(INIT_CONTAINER_REMOTE_FILES)\n+\n+  private val downloadTimeoutMinutes = sparkConf.get(INIT_CONTAINER_MOUNT_TIMEOUT)\n+\n+  def run(): Unit = {\n+    val remoteJarsDownload = Future[Unit] {\n+      logInfo(s\"Downloading remote jars: $remoteJars\")\n+      downloadFiles(\n+        remoteJars,\n+        jarsDownloadDir,\n+        s\"Remote jars download directory specified at $jarsDownloadDir does not exist \" +\n+          \"or is not a directory.\")\n+    }\n+    val remoteFilesDownload = Future[Unit] {\n+      logInfo(s\"Downloading remote files: $remoteFiles\")\n+      downloadFiles(\n+        remoteFiles,\n+        filesDownloadDir,\n+        s\"Remote files download directory specified at $filesDownloadDir does not exist \" +\n+          \"or is not a directory.\")\n+    }\n+    waitForFutures("
  }, {
    "author": {
      "login": "liyinan926"
    },
    "body": "Updated to create one task per file/jar to download. Regarding the type of thread pool, we are using a `CachedThreadPool`, which I think makes sense as it can be expected that the tasks are not long-lived.  ",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-16T21:34:35Z",
    "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.rest.k8s\n+\n+import java.io.File\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.spark.{SecurityManager => SparkSecurityManager, SparkConf}\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.{ThreadUtils, Utils}\n+\n+/**\n+ * Process that fetches files from a resource staging server and/or arbitrary remote locations.\n+ *\n+ * The init-container can handle fetching files from any of those sources, but not all of the\n+ * sources need to be specified. This allows for composing multiple instances of this container\n+ * with different configurations for different download sources, or using the same container to\n+ * download everything at once.\n+ */\n+private[spark] class KubernetesSparkDependencyDownloadInitContainer(\n+    sparkConf: SparkConf,\n+    fileFetcher: FileFetcher) extends Logging {\n+\n+  private implicit val downloadExecutor = ExecutionContext.fromExecutorService(\n+    ThreadUtils.newDaemonCachedThreadPool(\"download-executor\"))\n+\n+  private val jarsDownloadDir = new File(\n+    sparkConf.get(JARS_DOWNLOAD_LOCATION))\n+  private val filesDownloadDir = new File(\n+    sparkConf.get(FILES_DOWNLOAD_LOCATION))\n+\n+  private val remoteJars = sparkConf.get(INIT_CONTAINER_REMOTE_JARS)\n+  private val remoteFiles = sparkConf.get(INIT_CONTAINER_REMOTE_FILES)\n+\n+  private val downloadTimeoutMinutes = sparkConf.get(INIT_CONTAINER_MOUNT_TIMEOUT)\n+\n+  def run(): Unit = {\n+    val remoteJarsDownload = Future[Unit] {\n+      logInfo(s\"Downloading remote jars: $remoteJars\")\n+      downloadFiles(\n+        remoteJars,\n+        jarsDownloadDir,\n+        s\"Remote jars download directory specified at $jarsDownloadDir does not exist \" +\n+          \"or is not a directory.\")\n+    }\n+    val remoteFilesDownload = Future[Unit] {\n+      logInfo(s\"Downloading remote files: $remoteFiles\")\n+      downloadFiles(\n+        remoteFiles,\n+        filesDownloadDir,\n+        s\"Remote files download directory specified at $filesDownloadDir does not exist \" +\n+          \"or is not a directory.\")\n+    }\n+    waitForFutures("
  }],
  "prId": 19954
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "`: Unit = {`\r\n\r\nBut really, there's a single caller, so just inline.",
    "commit": "28343fb50310826bc9962e785f25d1af9b3c3f4a",
    "createdAt": "2017-12-16T00:09:38Z",
    "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.rest.k8s\n+\n+import java.io.File\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.spark.{SecurityManager => SparkSecurityManager, SparkConf}\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.{ThreadUtils, Utils}\n+\n+/**\n+ * Process that fetches files from a resource staging server and/or arbitrary remote locations.\n+ *\n+ * The init-container can handle fetching files from any of those sources, but not all of the\n+ * sources need to be specified. This allows for composing multiple instances of this container\n+ * with different configurations for different download sources, or using the same container to\n+ * download everything at once.\n+ */\n+private[spark] class KubernetesSparkDependencyDownloadInitContainer(\n+    sparkConf: SparkConf,\n+    fileFetcher: FileFetcher) extends Logging {\n+\n+  private implicit val downloadExecutor = ExecutionContext.fromExecutorService(\n+    ThreadUtils.newDaemonCachedThreadPool(\"download-executor\"))\n+\n+  private val jarsDownloadDir = new File(\n+    sparkConf.get(JARS_DOWNLOAD_LOCATION))\n+  private val filesDownloadDir = new File(\n+    sparkConf.get(FILES_DOWNLOAD_LOCATION))\n+\n+  private val remoteJars = sparkConf.get(INIT_CONTAINER_REMOTE_JARS)\n+  private val remoteFiles = sparkConf.get(INIT_CONTAINER_REMOTE_FILES)\n+\n+  private val downloadTimeoutMinutes = sparkConf.get(INIT_CONTAINER_MOUNT_TIMEOUT)\n+\n+  def run(): Unit = {\n+    val remoteJarsDownload = Future[Unit] {\n+      logInfo(s\"Downloading remote jars: $remoteJars\")\n+      downloadFiles(\n+        remoteJars,\n+        jarsDownloadDir,\n+        s\"Remote jars download directory specified at $jarsDownloadDir does not exist \" +\n+          \"or is not a directory.\")\n+    }\n+    val remoteFilesDownload = Future[Unit] {\n+      logInfo(s\"Downloading remote files: $remoteFiles\")\n+      downloadFiles(\n+        remoteFiles,\n+        filesDownloadDir,\n+        s\"Remote files download directory specified at $filesDownloadDir does not exist \" +\n+          \"or is not a directory.\")\n+    }\n+    waitForFutures(\n+      remoteJarsDownload,\n+      remoteFilesDownload)\n+  }\n+\n+  private def downloadFiles(\n+      filesCommaSeparated: Option[String],\n+      downloadDir: File,\n+      errMessageOnDestinationNotADirectory: String): Unit = {\n+    if (filesCommaSeparated.isDefined) {\n+      require(downloadDir.isDirectory, errMessageOnDestinationNotADirectory)\n+    }\n+    filesCommaSeparated.map(_.split(\",\")).toSeq.flatten.foreach { file =>\n+      fileFetcher.fetchFile(file, downloadDir)\n+    }\n+  }\n+\n+  private def waitForFutures(futures: Future[_]*) {"
  }],
  "prId": 19954
}]