[{
  "comments": [{
    "author": {
      "login": "mccheah"
    },
    "body": "It's noteworthy that the resync polls can also be done in `ExecutorPodsEventHandler#processEvents`. The reason we don't is because we probably want the resync polls to occur on a different interval than the event handling passes. You may, for example, ask for the event handler to trigger very frequently so that pod updates are dealt with promptly. But you don't want to be polling the API server every 5 seconds.",
    "commit": "1a99dceeb9dfbfc58e26885c290461cbf37a5428",
    "createdAt": "2018-05-18T21:52:24Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.scheduler.cluster.k8s\n+\n+import java.util.concurrent.{Future, ScheduledExecutorService, TimeUnit}\n+\n+import io.fabric8.kubernetes.client.KubernetesClient\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.deploy.k8s.Constants._\n+\n+private[spark] class ExecutorPodsPollingEventSource("
  }],
  "prId": 21366
}, {
  "comments": [{
    "author": {
      "login": "mccheah"
    },
    "body": "Should make these and other intervals like it configurable.",
    "commit": "1a99dceeb9dfbfc58e26885c290461cbf37a5428",
    "createdAt": "2018-05-18T21:53:43Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.scheduler.cluster.k8s\n+\n+import java.util.concurrent.{Future, ScheduledExecutorService, TimeUnit}\n+\n+import io.fabric8.kubernetes.client.KubernetesClient\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.deploy.k8s.Constants._\n+\n+private[spark] class ExecutorPodsPollingEventSource(\n+    kubernetesClient: KubernetesClient,\n+    eventHandler: ExecutorPodsEventHandler,\n+    pollingExecutor: ScheduledExecutorService) {\n+\n+  private var pollingFuture: Future[_] = _\n+\n+  def start(applicationId: String): Unit = {\n+    require(pollingFuture == null, \"Cannot start polling more than once.\")\n+    pollingFuture = pollingExecutor.scheduleWithFixedDelay(\n+      new PollRunnable(applicationId), 0L, 30L, TimeUnit.SECONDS)"
  }, {
    "author": {
      "login": "liyinan926"
    },
    "body": "Agreed.",
    "commit": "1a99dceeb9dfbfc58e26885c290461cbf37a5428",
    "createdAt": "2018-05-23T18:37:09Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.scheduler.cluster.k8s\n+\n+import java.util.concurrent.{Future, ScheduledExecutorService, TimeUnit}\n+\n+import io.fabric8.kubernetes.client.KubernetesClient\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.deploy.k8s.Constants._\n+\n+private[spark] class ExecutorPodsPollingEventSource(\n+    kubernetesClient: KubernetesClient,\n+    eventHandler: ExecutorPodsEventHandler,\n+    pollingExecutor: ScheduledExecutorService) {\n+\n+  private var pollingFuture: Future[_] = _\n+\n+  def start(applicationId: String): Unit = {\n+    require(pollingFuture == null, \"Cannot start polling more than once.\")\n+    pollingFuture = pollingExecutor.scheduleWithFixedDelay(\n+      new PollRunnable(applicationId), 0L, 30L, TimeUnit.SECONDS)"
  }],
  "prId": 21366
}, {
  "comments": [{
    "author": {
      "login": "liyinan926"
    },
    "body": "Ditto. the `pollingExecutor` should be shutdown properly.",
    "commit": "1a99dceeb9dfbfc58e26885c290461cbf37a5428",
    "createdAt": "2018-05-23T18:37:42Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.scheduler.cluster.k8s\n+\n+import java.util.concurrent.{Future, ScheduledExecutorService, TimeUnit}\n+\n+import io.fabric8.kubernetes.client.KubernetesClient\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.deploy.k8s.Constants._\n+\n+private[spark] class ExecutorPodsPollingEventSource(\n+    kubernetesClient: KubernetesClient,\n+    eventHandler: ExecutorPodsEventHandler,\n+    pollingExecutor: ScheduledExecutorService) {\n+\n+  private var pollingFuture: Future[_] = null\n+\n+  def start(applicationId: String): Unit = {\n+    require(pollingFuture == null, \"Cannot start polling more than once.\")\n+    pollingFuture = pollingExecutor.scheduleWithFixedDelay(\n+      new PollRunnable(applicationId), 0L, 30L, TimeUnit.SECONDS)\n+  }\n+\n+  def stop(): Unit = {\n+    if (pollingFuture != null) {\n+      pollingFuture.cancel(true)\n+      pollingFuture = null"
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "Done, see below.",
    "commit": "1a99dceeb9dfbfc58e26885c290461cbf37a5428",
    "createdAt": "2018-05-25T01:08:51Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.scheduler.cluster.k8s\n+\n+import java.util.concurrent.{Future, ScheduledExecutorService, TimeUnit}\n+\n+import io.fabric8.kubernetes.client.KubernetesClient\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.deploy.k8s.Constants._\n+\n+private[spark] class ExecutorPodsPollingEventSource(\n+    kubernetesClient: KubernetesClient,\n+    eventHandler: ExecutorPodsEventHandler,\n+    pollingExecutor: ScheduledExecutorService) {\n+\n+  private var pollingFuture: Future[_] = null\n+\n+  def start(applicationId: String): Unit = {\n+    require(pollingFuture == null, \"Cannot start polling more than once.\")\n+    pollingFuture = pollingExecutor.scheduleWithFixedDelay(\n+      new PollRunnable(applicationId), 0L, 30L, TimeUnit.SECONDS)\n+  }\n+\n+  def stop(): Unit = {\n+    if (pollingFuture != null) {\n+      pollingFuture.cancel(true)\n+      pollingFuture = null"
  }],
  "prId": 21366
}, {
  "comments": [{
    "author": {
      "login": "liyinan926"
    },
    "body": "It's better to use https://google.github.io/guava/releases/17.0/api/docs/com/google/common/util/concurrent/MoreExecutors.html#shutdownAndAwaitTermination(java.util.concurrent.ExecutorService,%20long,%20java.util.concurrent.TimeUnit) to shutdown an executor service.",
    "commit": "1a99dceeb9dfbfc58e26885c290461cbf37a5428",
    "createdAt": "2018-05-25T17:02:45Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.scheduler.cluster.k8s\n+\n+import java.util.concurrent.{Future, ScheduledExecutorService, TimeUnit}\n+\n+import io.fabric8.kubernetes.client.KubernetesClient\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.Constants._\n+\n+private[spark] class ExecutorPodsPollingEventSource(\n+    conf: SparkConf,\n+    kubernetesClient: KubernetesClient,\n+    eventQueue: ExecutorPodsEventQueue,\n+    pollingExecutor: ScheduledExecutorService) {\n+\n+  private val pollingInterval = conf.get(KUBERNETES_EXECUTOR_API_POLLING_INTERVAL)\n+\n+  private var pollingFuture: Future[_] = _\n+\n+  def start(applicationId: String): Unit = {\n+    require(pollingFuture == null, \"Cannot start polling more than once.\")\n+    pollingFuture = pollingExecutor.scheduleWithFixedDelay(\n+      new PollRunnable(applicationId), pollingInterval, pollingInterval, TimeUnit.MILLISECONDS)\n+  }\n+\n+  def stop(): Unit = {\n+    if (pollingFuture != null) {\n+      pollingFuture.cancel(true)\n+      pollingFuture = null\n+    }\n+    pollingExecutor.shutdown()"
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "I don't think we use `MoreExecutors` to shut down executors throughout the Spark project in general. See e.g. `BlockManager#stop()`.",
    "commit": "1a99dceeb9dfbfc58e26885c290461cbf37a5428",
    "createdAt": "2018-05-25T17:42:10Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.scheduler.cluster.k8s\n+\n+import java.util.concurrent.{Future, ScheduledExecutorService, TimeUnit}\n+\n+import io.fabric8.kubernetes.client.KubernetesClient\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.Constants._\n+\n+private[spark] class ExecutorPodsPollingEventSource(\n+    conf: SparkConf,\n+    kubernetesClient: KubernetesClient,\n+    eventQueue: ExecutorPodsEventQueue,\n+    pollingExecutor: ScheduledExecutorService) {\n+\n+  private val pollingInterval = conf.get(KUBERNETES_EXECUTOR_API_POLLING_INTERVAL)\n+\n+  private var pollingFuture: Future[_] = _\n+\n+  def start(applicationId: String): Unit = {\n+    require(pollingFuture == null, \"Cannot start polling more than once.\")\n+    pollingFuture = pollingExecutor.scheduleWithFixedDelay(\n+      new PollRunnable(applicationId), pollingInterval, pollingInterval, TimeUnit.MILLISECONDS)\n+  }\n+\n+  def stop(): Unit = {\n+    if (pollingFuture != null) {\n+      pollingFuture.cancel(true)\n+      pollingFuture = null\n+    }\n+    pollingExecutor.shutdown()"
  }, {
    "author": {
      "login": "liyinan926"
    },
    "body": "Yes, but that's unfortunate. But for our code I think we should use a consistent mechanism to gracefully shutdown the executors.",
    "commit": "1a99dceeb9dfbfc58e26885c290461cbf37a5428",
    "createdAt": "2018-05-25T17:44:26Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.scheduler.cluster.k8s\n+\n+import java.util.concurrent.{Future, ScheduledExecutorService, TimeUnit}\n+\n+import io.fabric8.kubernetes.client.KubernetesClient\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.Constants._\n+\n+private[spark] class ExecutorPodsPollingEventSource(\n+    conf: SparkConf,\n+    kubernetesClient: KubernetesClient,\n+    eventQueue: ExecutorPodsEventQueue,\n+    pollingExecutor: ScheduledExecutorService) {\n+\n+  private val pollingInterval = conf.get(KUBERNETES_EXECUTOR_API_POLLING_INTERVAL)\n+\n+  private var pollingFuture: Future[_] = _\n+\n+  def start(applicationId: String): Unit = {\n+    require(pollingFuture == null, \"Cannot start polling more than once.\")\n+    pollingFuture = pollingExecutor.scheduleWithFixedDelay(\n+      new PollRunnable(applicationId), pollingInterval, pollingInterval, TimeUnit.MILLISECONDS)\n+  }\n+\n+  def stop(): Unit = {\n+    if (pollingFuture != null) {\n+      pollingFuture.cancel(true)\n+      pollingFuture = null\n+    }\n+    pollingExecutor.shutdown()"
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "And also since Spark depends on Guava 14.0.1 we don't have that method.",
    "commit": "1a99dceeb9dfbfc58e26885c290461cbf37a5428",
    "createdAt": "2018-05-25T17:53:25Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.scheduler.cluster.k8s\n+\n+import java.util.concurrent.{Future, ScheduledExecutorService, TimeUnit}\n+\n+import io.fabric8.kubernetes.client.KubernetesClient\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.Constants._\n+\n+private[spark] class ExecutorPodsPollingEventSource(\n+    conf: SparkConf,\n+    kubernetesClient: KubernetesClient,\n+    eventQueue: ExecutorPodsEventQueue,\n+    pollingExecutor: ScheduledExecutorService) {\n+\n+  private val pollingInterval = conf.get(KUBERNETES_EXECUTOR_API_POLLING_INTERVAL)\n+\n+  private var pollingFuture: Future[_] = _\n+\n+  def start(applicationId: String): Unit = {\n+    require(pollingFuture == null, \"Cannot start polling more than once.\")\n+    pollingFuture = pollingExecutor.scheduleWithFixedDelay(\n+      new PollRunnable(applicationId), pollingInterval, pollingInterval, TimeUnit.MILLISECONDS)\n+  }\n+\n+  def stop(): Unit = {\n+    if (pollingFuture != null) {\n+      pollingFuture.cancel(true)\n+      pollingFuture = null\n+    }\n+    pollingExecutor.shutdown()"
  }, {
    "author": {
      "login": "liyinan926"
    },
    "body": "Oops. Yes, that's true. Let's have a utility method and do the following in the method:\r\n\r\n```\r\nexecutor.shutdown()\r\nexecutor.waitForTermination(30, TimeUnit.SECONDS)\r\nif (!executor.isShutdown()) {\r\n    executor.shutdownNow()\r\n}\r\n```",
    "commit": "1a99dceeb9dfbfc58e26885c290461cbf37a5428",
    "createdAt": "2018-05-25T17:56:41Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.scheduler.cluster.k8s\n+\n+import java.util.concurrent.{Future, ScheduledExecutorService, TimeUnit}\n+\n+import io.fabric8.kubernetes.client.KubernetesClient\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.k8s.Config._\n+import org.apache.spark.deploy.k8s.Constants._\n+\n+private[spark] class ExecutorPodsPollingEventSource(\n+    conf: SparkConf,\n+    kubernetesClient: KubernetesClient,\n+    eventQueue: ExecutorPodsEventQueue,\n+    pollingExecutor: ScheduledExecutorService) {\n+\n+  private val pollingInterval = conf.get(KUBERNETES_EXECUTOR_API_POLLING_INTERVAL)\n+\n+  private var pollingFuture: Future[_] = _\n+\n+  def start(applicationId: String): Unit = {\n+    require(pollingFuture == null, \"Cannot start polling more than once.\")\n+    pollingFuture = pollingExecutor.scheduleWithFixedDelay(\n+      new PollRunnable(applicationId), pollingInterval, pollingInterval, TimeUnit.MILLISECONDS)\n+  }\n+\n+  def stop(): Unit = {\n+    if (pollingFuture != null) {\n+      pollingFuture.cancel(true)\n+      pollingFuture = null\n+    }\n+    pollingExecutor.shutdown()"
  }],
  "prId": 21366
}]