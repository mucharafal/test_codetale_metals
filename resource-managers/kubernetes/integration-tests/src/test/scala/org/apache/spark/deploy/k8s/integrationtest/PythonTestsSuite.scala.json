[{
  "comments": [{
    "author": {
      "login": "skonto"
    },
    "body": "@ifilonenko @srowen  I didnt touch this. Was this intended for testing python secrets? This was unused code. Should I remove it or should I add another test for python or @ifilonenko you are planning to do so?",
    "commit": "67df340d943d38afd1ea4c12c02b417b5434970f",
    "createdAt": "2018-07-17T16:54:08Z",
    "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.integrationtest\n+\n+import org.apache.spark.deploy.k8s.integrationtest.TestConfig.{getTestImageRepo, getTestImageTag}\n+\n+private[spark] trait PythonTestsSuite { k8sSuite: KubernetesSuite =>\n+\n+  import PythonTestsSuite._\n+\n+  test(\"Run PySpark on simple pi.py example\") {\n+    sparkAppConf\n+      .set(\"spark.kubernetes.container.image\", s\"${getTestImageRepo}/spark-py:${getTestImageTag}\")\n+    runSparkApplicationAndVerifyCompletion(\n+      appResource = PYSPARK_PI,\n+      mainClass = \"\",\n+      expectedLogOnCompletion = Seq(\"Pi is roughly 3\"),\n+      appArgs = Array(\"5\"),\n+      driverPodChecker = doBasicDriverPyPodCheck,\n+      executorPodChecker = doBasicExecutorPyPodCheck,\n+      appLocator = appLocator,\n+      isJVM = false)\n+  }\n+\n+  test(\"Run PySpark with Python2 to test a pyfiles example\") {\n+    sparkAppConf\n+      .set(\"spark.kubernetes.container.image\", s\"${getTestImageRepo}/spark-py:${getTestImageTag}\")\n+      .set(\"spark.kubernetes.pyspark.pythonversion\", \"2\")\n+    runSparkApplicationAndVerifyCompletion(\n+      appResource = PYSPARK_FILES,\n+      mainClass = \"\",\n+      expectedLogOnCompletion = Seq(\n+        \"Python runtime version check is: True\",\n+        \"Python environment version check is: True\"),\n+      appArgs = Array(\"python\"),\n+      driverPodChecker = doBasicDriverPyPodCheck,\n+      executorPodChecker = doBasicExecutorPyPodCheck,\n+      appLocator = appLocator,\n+      isJVM = false,\n+      pyFiles = Some(PYSPARK_CONTAINER_TESTS))\n+  }\n+\n+  test(\"Run PySpark with Python3 to test a pyfiles example\") {\n+    sparkAppConf\n+      .set(\"spark.kubernetes.container.image\", s\"${getTestImageRepo}/spark-py:${getTestImageTag}\")\n+      .set(\"spark.kubernetes.pyspark.pythonversion\", \"3\")\n+    runSparkApplicationAndVerifyCompletion(\n+      appResource = PYSPARK_FILES,\n+      mainClass = \"\",\n+      expectedLogOnCompletion = Seq(\n+        \"Python runtime version check is: True\",\n+        \"Python environment version check is: True\"),\n+      appArgs = Array(\"python3\"),\n+      driverPodChecker = doBasicDriverPyPodCheck,\n+      executorPodChecker = doBasicExecutorPyPodCheck,\n+      appLocator = appLocator,\n+      isJVM = false,\n+      pyFiles = Some(PYSPARK_CONTAINER_TESTS))\n+  }\n+}\n+\n+private[spark] object PythonTestsSuite {\n+  val CONTAINER_LOCAL_PYSPARK: String = \"local:///opt/spark/examples/src/main/python/\"\n+  val PYSPARK_PI: String = CONTAINER_LOCAL_PYSPARK + \"pi.py\"\n+  val PYSPARK_FILES: String = CONTAINER_LOCAL_PYSPARK + \"pyfiles.py\"\n+  val PYSPARK_CONTAINER_TESTS: String = CONTAINER_LOCAL_PYSPARK + \"py_container_checks.py\"\n+\n+  val TEST_SECRET_NAME_PREFIX = \"test-secret-\""
  }, {
    "author": {
      "login": "ifilonenko"
    },
    "body": "This was not leveraged for python secrets. You may delete, in regards to the `PythonTestsSuite.` Otherwise, this was for testing secrets I believe and seems to be deprecated. ",
    "commit": "67df340d943d38afd1ea4c12c02b417b5434970f",
    "createdAt": "2018-07-17T17:12:09Z",
    "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.integrationtest\n+\n+import org.apache.spark.deploy.k8s.integrationtest.TestConfig.{getTestImageRepo, getTestImageTag}\n+\n+private[spark] trait PythonTestsSuite { k8sSuite: KubernetesSuite =>\n+\n+  import PythonTestsSuite._\n+\n+  test(\"Run PySpark on simple pi.py example\") {\n+    sparkAppConf\n+      .set(\"spark.kubernetes.container.image\", s\"${getTestImageRepo}/spark-py:${getTestImageTag}\")\n+    runSparkApplicationAndVerifyCompletion(\n+      appResource = PYSPARK_PI,\n+      mainClass = \"\",\n+      expectedLogOnCompletion = Seq(\"Pi is roughly 3\"),\n+      appArgs = Array(\"5\"),\n+      driverPodChecker = doBasicDriverPyPodCheck,\n+      executorPodChecker = doBasicExecutorPyPodCheck,\n+      appLocator = appLocator,\n+      isJVM = false)\n+  }\n+\n+  test(\"Run PySpark with Python2 to test a pyfiles example\") {\n+    sparkAppConf\n+      .set(\"spark.kubernetes.container.image\", s\"${getTestImageRepo}/spark-py:${getTestImageTag}\")\n+      .set(\"spark.kubernetes.pyspark.pythonversion\", \"2\")\n+    runSparkApplicationAndVerifyCompletion(\n+      appResource = PYSPARK_FILES,\n+      mainClass = \"\",\n+      expectedLogOnCompletion = Seq(\n+        \"Python runtime version check is: True\",\n+        \"Python environment version check is: True\"),\n+      appArgs = Array(\"python\"),\n+      driverPodChecker = doBasicDriverPyPodCheck,\n+      executorPodChecker = doBasicExecutorPyPodCheck,\n+      appLocator = appLocator,\n+      isJVM = false,\n+      pyFiles = Some(PYSPARK_CONTAINER_TESTS))\n+  }\n+\n+  test(\"Run PySpark with Python3 to test a pyfiles example\") {\n+    sparkAppConf\n+      .set(\"spark.kubernetes.container.image\", s\"${getTestImageRepo}/spark-py:${getTestImageTag}\")\n+      .set(\"spark.kubernetes.pyspark.pythonversion\", \"3\")\n+    runSparkApplicationAndVerifyCompletion(\n+      appResource = PYSPARK_FILES,\n+      mainClass = \"\",\n+      expectedLogOnCompletion = Seq(\n+        \"Python runtime version check is: True\",\n+        \"Python environment version check is: True\"),\n+      appArgs = Array(\"python3\"),\n+      driverPodChecker = doBasicDriverPyPodCheck,\n+      executorPodChecker = doBasicExecutorPyPodCheck,\n+      appLocator = appLocator,\n+      isJVM = false,\n+      pyFiles = Some(PYSPARK_CONTAINER_TESTS))\n+  }\n+}\n+\n+private[spark] object PythonTestsSuite {\n+  val CONTAINER_LOCAL_PYSPARK: String = \"local:///opt/spark/examples/src/main/python/\"\n+  val PYSPARK_PI: String = CONTAINER_LOCAL_PYSPARK + \"pi.py\"\n+  val PYSPARK_FILES: String = CONTAINER_LOCAL_PYSPARK + \"pyfiles.py\"\n+  val PYSPARK_CONTAINER_TESTS: String = CONTAINER_LOCAL_PYSPARK + \"py_container_checks.py\"\n+\n+  val TEST_SECRET_NAME_PREFIX = \"test-secret-\""
  }, {
    "author": {
      "login": "skonto"
    },
    "body": "Ok I will remove thanks.",
    "commit": "67df340d943d38afd1ea4c12c02b417b5434970f",
    "createdAt": "2018-07-17T19:58:15Z",
    "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.deploy.k8s.integrationtest\n+\n+import org.apache.spark.deploy.k8s.integrationtest.TestConfig.{getTestImageRepo, getTestImageTag}\n+\n+private[spark] trait PythonTestsSuite { k8sSuite: KubernetesSuite =>\n+\n+  import PythonTestsSuite._\n+\n+  test(\"Run PySpark on simple pi.py example\") {\n+    sparkAppConf\n+      .set(\"spark.kubernetes.container.image\", s\"${getTestImageRepo}/spark-py:${getTestImageTag}\")\n+    runSparkApplicationAndVerifyCompletion(\n+      appResource = PYSPARK_PI,\n+      mainClass = \"\",\n+      expectedLogOnCompletion = Seq(\"Pi is roughly 3\"),\n+      appArgs = Array(\"5\"),\n+      driverPodChecker = doBasicDriverPyPodCheck,\n+      executorPodChecker = doBasicExecutorPyPodCheck,\n+      appLocator = appLocator,\n+      isJVM = false)\n+  }\n+\n+  test(\"Run PySpark with Python2 to test a pyfiles example\") {\n+    sparkAppConf\n+      .set(\"spark.kubernetes.container.image\", s\"${getTestImageRepo}/spark-py:${getTestImageTag}\")\n+      .set(\"spark.kubernetes.pyspark.pythonversion\", \"2\")\n+    runSparkApplicationAndVerifyCompletion(\n+      appResource = PYSPARK_FILES,\n+      mainClass = \"\",\n+      expectedLogOnCompletion = Seq(\n+        \"Python runtime version check is: True\",\n+        \"Python environment version check is: True\"),\n+      appArgs = Array(\"python\"),\n+      driverPodChecker = doBasicDriverPyPodCheck,\n+      executorPodChecker = doBasicExecutorPyPodCheck,\n+      appLocator = appLocator,\n+      isJVM = false,\n+      pyFiles = Some(PYSPARK_CONTAINER_TESTS))\n+  }\n+\n+  test(\"Run PySpark with Python3 to test a pyfiles example\") {\n+    sparkAppConf\n+      .set(\"spark.kubernetes.container.image\", s\"${getTestImageRepo}/spark-py:${getTestImageTag}\")\n+      .set(\"spark.kubernetes.pyspark.pythonversion\", \"3\")\n+    runSparkApplicationAndVerifyCompletion(\n+      appResource = PYSPARK_FILES,\n+      mainClass = \"\",\n+      expectedLogOnCompletion = Seq(\n+        \"Python runtime version check is: True\",\n+        \"Python environment version check is: True\"),\n+      appArgs = Array(\"python3\"),\n+      driverPodChecker = doBasicDriverPyPodCheck,\n+      executorPodChecker = doBasicExecutorPyPodCheck,\n+      appLocator = appLocator,\n+      isJVM = false,\n+      pyFiles = Some(PYSPARK_CONTAINER_TESTS))\n+  }\n+}\n+\n+private[spark] object PythonTestsSuite {\n+  val CONTAINER_LOCAL_PYSPARK: String = \"local:///opt/spark/examples/src/main/python/\"\n+  val PYSPARK_PI: String = CONTAINER_LOCAL_PYSPARK + \"pi.py\"\n+  val PYSPARK_FILES: String = CONTAINER_LOCAL_PYSPARK + \"pyfiles.py\"\n+  val PYSPARK_CONTAINER_TESTS: String = CONTAINER_LOCAL_PYSPARK + \"py_container_checks.py\"\n+\n+  val TEST_SECRET_NAME_PREFIX = \"test-secret-\""
  }],
  "prId": 21652
}]