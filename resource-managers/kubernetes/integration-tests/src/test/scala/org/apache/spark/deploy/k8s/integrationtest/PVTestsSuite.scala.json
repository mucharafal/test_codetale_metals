[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Hi, @holdenk . Could you confirm that this doesn't break the other backends? The supported backends are documented here.\r\n- https://github.com/apache/spark/blob/master/resource-managers/kubernetes/integration-tests/README.md\r\n\r\nPreviously, it was supported but it's easily broken because we don't run the integration test on it in Jenkins.\r\n\r\nAFAIK, this `PVTestsSuite` suite works until my commit on July. (At that time, another one test suite fail on `Docker Desktop`.)\r\n- [SPARK-28534][K8S][TEST] Update node affinity for DockerForDesktop backend in PVTestsSuite",
    "commit": "c9bb1a07a16ca62154853a3498f042f522e30e40",
    "createdAt": "2019-09-10T22:09:36Z",
    "diffHunk": "@@ -42,23 +48,14 @@ private[spark] trait PVTestsSuite { k8sSuite: KubernetesSuite =>\n       .withKind(\"PersistentVolume\")\n       .withApiVersion(\"v1\")\n       .withNewMetadata()\n-        .withName(\"test-local-pv\")\n+        .withName(PV_NAME)\n       .endMetadata()\n       .withNewSpec()\n         .withCapacity(Map(\"storage\" -> new QuantityBuilder().withAmount(\"1Gi\").build()).asJava)\n         .withAccessModes(\"ReadWriteOnce\")\n         .withPersistentVolumeReclaimPolicy(\"Retain\")\n-        .withStorageClassName(\"test-local-storage\")\n-        .withLocal(new LocalVolumeSourceBuilder().withPath(VM_PATH).build())\n-          .withNewNodeAffinity()\n-            .withNewRequired()\n-              .withNodeSelectorTerms(new NodeSelectorTermBuilder()\n-                .withMatchExpressions(new NodeSelectorRequirementBuilder()\n-                  .withKey(\"kubernetes.io/hostname\")\n-                  .withOperator(\"In\")\n-                  .withValues(\"minikube\", \"docker-for-desktop\", \"docker-desktop\").build()).build())",
    "line": 38
  }, {
    "author": {
      "login": "holdenk"
    },
    "body": "So I thought this test only ran on MiniKube already based on the `test(\"PVs with local storage\", k8sTestTag, MinikubeTag`",
    "commit": "c9bb1a07a16ca62154853a3498f042f522e30e40",
    "createdAt": "2019-09-11T05:16:04Z",
    "diffHunk": "@@ -42,23 +48,14 @@ private[spark] trait PVTestsSuite { k8sSuite: KubernetesSuite =>\n       .withKind(\"PersistentVolume\")\n       .withApiVersion(\"v1\")\n       .withNewMetadata()\n-        .withName(\"test-local-pv\")\n+        .withName(PV_NAME)\n       .endMetadata()\n       .withNewSpec()\n         .withCapacity(Map(\"storage\" -> new QuantityBuilder().withAmount(\"1Gi\").build()).asJava)\n         .withAccessModes(\"ReadWriteOnce\")\n         .withPersistentVolumeReclaimPolicy(\"Retain\")\n-        .withStorageClassName(\"test-local-storage\")\n-        .withLocal(new LocalVolumeSourceBuilder().withPath(VM_PATH).build())\n-          .withNewNodeAffinity()\n-            .withNewRequired()\n-              .withNodeSelectorTerms(new NodeSelectorTermBuilder()\n-                .withMatchExpressions(new NodeSelectorRequirementBuilder()\n-                  .withKey(\"kubernetes.io/hostname\")\n-                  .withOperator(\"In\")\n-                  .withValues(\"minikube\", \"docker-for-desktop\", \"docker-desktop\").build()).build())",
    "line": 38
  }, {
    "author": {
      "login": "holdenk"
    },
    "body": "Looking at the `dev-run-integration-tests.sh` it would appear this would be already excluded along with the `DepsTestSuite` when running non-minikube tests. So I'm not concerned about it working on docker-for-desktop or similar.",
    "commit": "c9bb1a07a16ca62154853a3498f042f522e30e40",
    "createdAt": "2019-09-12T18:04:43Z",
    "diffHunk": "@@ -42,23 +48,14 @@ private[spark] trait PVTestsSuite { k8sSuite: KubernetesSuite =>\n       .withKind(\"PersistentVolume\")\n       .withApiVersion(\"v1\")\n       .withNewMetadata()\n-        .withName(\"test-local-pv\")\n+        .withName(PV_NAME)\n       .endMetadata()\n       .withNewSpec()\n         .withCapacity(Map(\"storage\" -> new QuantityBuilder().withAmount(\"1Gi\").build()).asJava)\n         .withAccessModes(\"ReadWriteOnce\")\n         .withPersistentVolumeReclaimPolicy(\"Retain\")\n-        .withStorageClassName(\"test-local-storage\")\n-        .withLocal(new LocalVolumeSourceBuilder().withPath(VM_PATH).build())\n-          .withNewNodeAffinity()\n-            .withNewRequired()\n-              .withNodeSelectorTerms(new NodeSelectorTermBuilder()\n-                .withMatchExpressions(new NodeSelectorRequirementBuilder()\n-                  .withKey(\"kubernetes.io/hostname\")\n-                  .withOperator(\"In\")\n-                  .withValues(\"minikube\", \"docker-for-desktop\", \"docker-desktop\").build()).build())",
    "line": 38
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "I'm agree with you that `minikube` is the facto standard here~\r\nIf you need to exclude `PVTestsSuite` like `DepsTestSuite` in this PR, please file another JIRA issue to recover it later and add an IDed TODO to `PVTestsSuite` class description. Otherwise, this test coverage loss will not be recovered.",
    "commit": "c9bb1a07a16ca62154853a3498f042f522e30e40",
    "createdAt": "2019-09-12T18:46:22Z",
    "diffHunk": "@@ -42,23 +48,14 @@ private[spark] trait PVTestsSuite { k8sSuite: KubernetesSuite =>\n       .withKind(\"PersistentVolume\")\n       .withApiVersion(\"v1\")\n       .withNewMetadata()\n-        .withName(\"test-local-pv\")\n+        .withName(PV_NAME)\n       .endMetadata()\n       .withNewSpec()\n         .withCapacity(Map(\"storage\" -> new QuantityBuilder().withAmount(\"1Gi\").build()).asJava)\n         .withAccessModes(\"ReadWriteOnce\")\n         .withPersistentVolumeReclaimPolicy(\"Retain\")\n-        .withStorageClassName(\"test-local-storage\")\n-        .withLocal(new LocalVolumeSourceBuilder().withPath(VM_PATH).build())\n-          .withNewNodeAffinity()\n-            .withNewRequired()\n-              .withNodeSelectorTerms(new NodeSelectorTermBuilder()\n-                .withMatchExpressions(new NodeSelectorRequirementBuilder()\n-                  .withKey(\"kubernetes.io/hostname\")\n-                  .withOperator(\"In\")\n-                  .withValues(\"minikube\", \"docker-for-desktop\", \"docker-desktop\").build()).build())",
    "line": 38
  }, {
    "author": {
      "login": "holdenk"
    },
    "body": "I'm saying this test is already excluded from non-minikube tests so I'm not adding an exclusion. But I'm happy to leave an JIRA ( https://issues.apache.org/jira/browse/SPARK-29076 ) to explore what would be needed to remove the minikube only restriction for this test. I don't think it belongs as a TODO in the code though.",
    "commit": "c9bb1a07a16ca62154853a3498f042f522e30e40",
    "createdAt": "2019-09-13T19:41:57Z",
    "diffHunk": "@@ -42,23 +48,14 @@ private[spark] trait PVTestsSuite { k8sSuite: KubernetesSuite =>\n       .withKind(\"PersistentVolume\")\n       .withApiVersion(\"v1\")\n       .withNewMetadata()\n-        .withName(\"test-local-pv\")\n+        .withName(PV_NAME)\n       .endMetadata()\n       .withNewSpec()\n         .withCapacity(Map(\"storage\" -> new QuantityBuilder().withAmount(\"1Gi\").build()).asJava)\n         .withAccessModes(\"ReadWriteOnce\")\n         .withPersistentVolumeReclaimPolicy(\"Retain\")\n-        .withStorageClassName(\"test-local-storage\")\n-        .withLocal(new LocalVolumeSourceBuilder().withPath(VM_PATH).build())\n-          .withNewNodeAffinity()\n-            .withNewRequired()\n-              .withNodeSelectorTerms(new NodeSelectorTermBuilder()\n-                .withMatchExpressions(new NodeSelectorRequirementBuilder()\n-                  .withKey(\"kubernetes.io/hostname\")\n-                  .withOperator(\"In\")\n-                  .withValues(\"minikube\", \"docker-for-desktop\", \"docker-desktop\").build()).build())",
    "line": 38
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "It seems that I wasn't clear enough.\r\n\r\nWhat I meant in the above is that the following is wrong.\r\n> I'm saying this test is already excluded from non-minikube tests \r\n\r\nThe following is the result of `DockerDesktop` backend on the master branch as of today.\r\n\r\n```\r\n$ kubectl cluster-info\r\nKubernetes master is running at https://kubernetes.docker.internal:6443\r\nKubeDNS is running at https://kubernetes.docker.internal:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\r\n\r\n$ ./dev/make-distribution.sh --pip --tgz -Phadoop-2.7 -Pkubernetes\r\n\r\n$ resource-managers/kubernetes/integration-tests/dev/dev-run-integration-tests.sh --deploy-mode docker-for-desktop --spark-tgz $PWD/spark-*.tgz\r\nRun starting. Expected test count is: 18\r\nKubernetesSuite:\r\n- Run SparkPi with no resources\r\n- Run SparkPi with a very long application name.\r\n- Use SparkLauncher.NO_RESOURCE\r\n- Run SparkPi with a master URL without a scheme.\r\n- Run SparkPi with an argument.\r\n- Run SparkPi with custom labels, annotations, and environment variables.\r\n- All pods have the same service account by default\r\n- Run extraJVMOptions check on driver\r\n- Run SparkRemoteFileTest using a remote data file\r\n- Run SparkPi with env and mount secrets.\r\n- Run PySpark on simple pi.py example\r\n- Run PySpark with Python2 to test a pyfiles example\r\n- Run PySpark with Python3 to test a pyfiles example\r\n- Run PySpark with memory customization\r\n- Run in client mode.\r\n- Start pod creation from template\r\n- PVs with local storage\r\n- Launcher client dependencies *** FAILED ***\r\nTests: succeeded 17, failed 1, canceled 0, ignored 0, pending 0\r\n*** 1 TEST FAILED ***\r\n```\r\n\r\nI didn't test this on this PR. Please try to run it. That was my initial request, @holdenk .",
    "commit": "c9bb1a07a16ca62154853a3498f042f522e30e40",
    "createdAt": "2019-09-13T21:30:02Z",
    "diffHunk": "@@ -42,23 +48,14 @@ private[spark] trait PVTestsSuite { k8sSuite: KubernetesSuite =>\n       .withKind(\"PersistentVolume\")\n       .withApiVersion(\"v1\")\n       .withNewMetadata()\n-        .withName(\"test-local-pv\")\n+        .withName(PV_NAME)\n       .endMetadata()\n       .withNewSpec()\n         .withCapacity(Map(\"storage\" -> new QuantityBuilder().withAmount(\"1Gi\").build()).asJava)\n         .withAccessModes(\"ReadWriteOnce\")\n         .withPersistentVolumeReclaimPolicy(\"Retain\")\n-        .withStorageClassName(\"test-local-storage\")\n-        .withLocal(new LocalVolumeSourceBuilder().withPath(VM_PATH).build())\n-          .withNewNodeAffinity()\n-            .withNewRequired()\n-              .withNodeSelectorTerms(new NodeSelectorTermBuilder()\n-                .withMatchExpressions(new NodeSelectorRequirementBuilder()\n-                  .withKey(\"kubernetes.io/hostname\")\n-                  .withOperator(\"In\")\n-                  .withValues(\"minikube\", \"docker-for-desktop\", \"docker-desktop\").build()).build())",
    "line": 38
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Note that `- PVs with local storage` test passes as of today.",
    "commit": "c9bb1a07a16ca62154853a3498f042f522e30e40",
    "createdAt": "2019-09-13T21:31:17Z",
    "diffHunk": "@@ -42,23 +48,14 @@ private[spark] trait PVTestsSuite { k8sSuite: KubernetesSuite =>\n       .withKind(\"PersistentVolume\")\n       .withApiVersion(\"v1\")\n       .withNewMetadata()\n-        .withName(\"test-local-pv\")\n+        .withName(PV_NAME)\n       .endMetadata()\n       .withNewSpec()\n         .withCapacity(Map(\"storage\" -> new QuantityBuilder().withAmount(\"1Gi\").build()).asJava)\n         .withAccessModes(\"ReadWriteOnce\")\n         .withPersistentVolumeReclaimPolicy(\"Retain\")\n-        .withStorageClassName(\"test-local-storage\")\n-        .withLocal(new LocalVolumeSourceBuilder().withPath(VM_PATH).build())\n-          .withNewNodeAffinity()\n-            .withNewRequired()\n-              .withNodeSelectorTerms(new NodeSelectorTermBuilder()\n-                .withMatchExpressions(new NodeSelectorRequirementBuilder()\n-                  .withKey(\"kubernetes.io/hostname\")\n-                  .withOperator(\"In\")\n-                  .withValues(\"minikube\", \"docker-for-desktop\", \"docker-desktop\").build()).build())",
    "line": 38
  }, {
    "author": {
      "login": "holdenk"
    },
    "body": "Gotcha. Would it make sense (in the follow up) to add a test tag for able to run on docker4desktop or minikube but not in fully distributed so folks can still run the integration tests with the script?\r\nI'll work around the possible d4d issue.",
    "commit": "c9bb1a07a16ca62154853a3498f042f522e30e40",
    "createdAt": "2019-09-19T18:42:03Z",
    "diffHunk": "@@ -42,23 +48,14 @@ private[spark] trait PVTestsSuite { k8sSuite: KubernetesSuite =>\n       .withKind(\"PersistentVolume\")\n       .withApiVersion(\"v1\")\n       .withNewMetadata()\n-        .withName(\"test-local-pv\")\n+        .withName(PV_NAME)\n       .endMetadata()\n       .withNewSpec()\n         .withCapacity(Map(\"storage\" -> new QuantityBuilder().withAmount(\"1Gi\").build()).asJava)\n         .withAccessModes(\"ReadWriteOnce\")\n         .withPersistentVolumeReclaimPolicy(\"Retain\")\n-        .withStorageClassName(\"test-local-storage\")\n-        .withLocal(new LocalVolumeSourceBuilder().withPath(VM_PATH).build())\n-          .withNewNodeAffinity()\n-            .withNewRequired()\n-              .withNodeSelectorTerms(new NodeSelectorTermBuilder()\n-                .withMatchExpressions(new NodeSelectorRequirementBuilder()\n-                  .withKey(\"kubernetes.io/hostname\")\n-                  .withOperator(\"In\")\n-                  .withValues(\"minikube\", \"docker-for-desktop\", \"docker-desktop\").build()).build())",
    "line": 38
  }, {
    "author": {
      "login": "holdenk"
    },
    "body": "I did some more poking and running docker-for-desktop is kind of a pain for me, 0% of the tests pass with the default configuration. This test is already tagged for minikube only, so I'd argue the correct run path for running the docker-for-desktop-tests would be `resource-managers/kubernetes/integration-tests/dev/dev-run-integration-tests.sh --deploy-mode docker-for-desktop --spark-tgz $PWD/spark-*.tgz --exclude-tags minikube` and then the docker for desktop test suite passes.\r\n\r\nI'm down to spend a few hours trying to get docker for desktop working on my machine if folks actually use this for their testing rather than MiniKube, but I think given that the https://github.com/apache/spark/blob/master/resource-managers/kubernetes/integration-tests/README.md suggests `MiniKube` as the way to run our integration tests and the test is already tagged for MiniKube only, just supporting MiniKube and leaving a follow up issue for someone who cares about docker-4-desktop is an OK path forward.\r\n\r\nIf that is not OK I could switch this into a README PR that tells people to set up the bind mounts manually, would that be an ok option with you?",
    "commit": "c9bb1a07a16ca62154853a3498f042f522e30e40",
    "createdAt": "2019-09-20T17:16:05Z",
    "diffHunk": "@@ -42,23 +48,14 @@ private[spark] trait PVTestsSuite { k8sSuite: KubernetesSuite =>\n       .withKind(\"PersistentVolume\")\n       .withApiVersion(\"v1\")\n       .withNewMetadata()\n-        .withName(\"test-local-pv\")\n+        .withName(PV_NAME)\n       .endMetadata()\n       .withNewSpec()\n         .withCapacity(Map(\"storage\" -> new QuantityBuilder().withAmount(\"1Gi\").build()).asJava)\n         .withAccessModes(\"ReadWriteOnce\")\n         .withPersistentVolumeReclaimPolicy(\"Retain\")\n-        .withStorageClassName(\"test-local-storage\")\n-        .withLocal(new LocalVolumeSourceBuilder().withPath(VM_PATH).build())\n-          .withNewNodeAffinity()\n-            .withNewRequired()\n-              .withNodeSelectorTerms(new NodeSelectorTermBuilder()\n-                .withMatchExpressions(new NodeSelectorRequirementBuilder()\n-                  .withKey(\"kubernetes.io/hostname\")\n-                  .withOperator(\"In\")\n-                  .withValues(\"minikube\", \"docker-for-desktop\", \"docker-desktop\").build()).build())",
    "line": 38
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Yep. The following was my suggestion (https://github.com/apache/spark/pull/25748#discussion_r323895070), too. Let's have IDed TODO comment and move forward~\r\n>  leaving a follow up issue for someone who cares about docker-4-desktop is an OK path forward.",
    "commit": "c9bb1a07a16ca62154853a3498f042f522e30e40",
    "createdAt": "2019-09-20T17:23:24Z",
    "diffHunk": "@@ -42,23 +48,14 @@ private[spark] trait PVTestsSuite { k8sSuite: KubernetesSuite =>\n       .withKind(\"PersistentVolume\")\n       .withApiVersion(\"v1\")\n       .withNewMetadata()\n-        .withName(\"test-local-pv\")\n+        .withName(PV_NAME)\n       .endMetadata()\n       .withNewSpec()\n         .withCapacity(Map(\"storage\" -> new QuantityBuilder().withAmount(\"1Gi\").build()).asJava)\n         .withAccessModes(\"ReadWriteOnce\")\n         .withPersistentVolumeReclaimPolicy(\"Retain\")\n-        .withStorageClassName(\"test-local-storage\")\n-        .withLocal(new LocalVolumeSourceBuilder().withPath(VM_PATH).build())\n-          .withNewNodeAffinity()\n-            .withNewRequired()\n-              .withNodeSelectorTerms(new NodeSelectorTermBuilder()\n-                .withMatchExpressions(new NodeSelectorRequirementBuilder()\n-                  .withKey(\"kubernetes.io/hostname\")\n-                  .withOperator(\"In\")\n-                  .withValues(\"minikube\", \"docker-for-desktop\", \"docker-desktop\").build()).build())",
    "line": 38
  }],
  "prId": 25748
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "So, is this to avoid the Jenkins pre-configured storage?",
    "commit": "c9bb1a07a16ca62154853a3498f042f522e30e40",
    "createdAt": "2019-09-24T04:00:43Z",
    "diffHunk": "@@ -156,12 +167,18 @@ private[spark] trait PVTestsSuite { k8sSuite: KubernetesSuite =>\n }\n \n private[spark] object PVTestsSuite {\n-  val STORAGE_NAME = \"test-local-storage\"\n+  val STORAGE_NAME = \"test-local-storage-2\"",
    "line": 93
  }, {
    "author": {
      "login": "holdenk"
    },
    "body": "This was just to make sure I had got all of the places we used the raw string. I'll switch this back.",
    "commit": "c9bb1a07a16ca62154853a3498f042f522e30e40",
    "createdAt": "2019-09-24T17:46:12Z",
    "diffHunk": "@@ -156,12 +167,18 @@ private[spark] trait PVTestsSuite { k8sSuite: KubernetesSuite =>\n }\n \n private[spark] object PVTestsSuite {\n-  val STORAGE_NAME = \"test-local-storage\"\n+  val STORAGE_NAME = \"test-local-storage-2\"",
    "line": 93
  }],
  "prId": 25748
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Shall we remove extra empty line 114?",
    "commit": "c9bb1a07a16ca62154853a3498f042f522e30e40",
    "createdAt": "2019-09-24T04:02:59Z",
    "diffHunk": "@@ -111,15 +109,28 @@ private[spark] trait PVTestsSuite { k8sSuite: KubernetesSuite =>\n       .storageClasses()\n       .withName(STORAGE_NAME)\n       .delete()\n+\n+    mountProcess.foreach(_.destroy())\n+",
    "line": 61
  }, {
    "author": {
      "login": "holdenk"
    },
    "body": "Sure",
    "commit": "c9bb1a07a16ca62154853a3498f042f522e30e40",
    "createdAt": "2019-09-24T17:46:16Z",
    "diffHunk": "@@ -111,15 +109,28 @@ private[spark] trait PVTestsSuite { k8sSuite: KubernetesSuite =>\n       .storageClasses()\n       .withName(STORAGE_NAME)\n       .delete()\n+\n+    mountProcess.foreach(_.destroy())\n+",
    "line": 61
  }],
  "prId": 25748
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Do we need to check this additionally before checking the file content via `cat`?",
    "commit": "c9bb1a07a16ca62154853a3498f042f522e30e40",
    "createdAt": "2019-09-24T04:05:16Z",
    "diffHunk": "@@ -111,15 +109,28 @@ private[spark] trait PVTestsSuite { k8sSuite: KubernetesSuite =>\n       .storageClasses()\n       .withName(STORAGE_NAME)\n       .delete()\n+\n+    mountProcess.foreach(_.destroy())\n+\n   }\n \n   private def checkPVs(pod: Pod, file: String) = {\n+    implicit val podName: String = pod.getMetadata.getName\n+    implicit val components: KubernetesTestComponents = kubernetesTestComponents\n     Eventually.eventually(TIMEOUT, INTERVAL) {\n-      implicit val podName: String = pod.getMetadata.getName\n-      implicit val components: KubernetesTestComponents = kubernetesTestComponents\n-      val contents = Utils.executeCommand(\"cat\", s\"$CONTAINER_MOUNT_PATH/$file\")\n-      assert(contents.toString.trim.equals(FILE_CONTENTS))\n+      Utils.executeCommand(\"ls\", s\"$CONTAINER_MOUNT_PATH/\")",
    "line": 72
  }, {
    "author": {
      "login": "holdenk"
    },
    "body": "This is to improve the debugging. We can see if the directory exists first and then check the file contents and have the failures be separate. This makes it easier to see if the PV mount failed or if the bind mount into minikube failed.",
    "commit": "c9bb1a07a16ca62154853a3498f042f522e30e40",
    "createdAt": "2019-09-24T17:47:45Z",
    "diffHunk": "@@ -111,15 +109,28 @@ private[spark] trait PVTestsSuite { k8sSuite: KubernetesSuite =>\n       .storageClasses()\n       .withName(STORAGE_NAME)\n       .delete()\n+\n+    mountProcess.foreach(_.destroy())\n+\n   }\n \n   private def checkPVs(pod: Pod, file: String) = {\n+    implicit val podName: String = pod.getMetadata.getName\n+    implicit val components: KubernetesTestComponents = kubernetesTestComponents\n     Eventually.eventually(TIMEOUT, INTERVAL) {\n-      implicit val podName: String = pod.getMetadata.getName\n-      implicit val components: KubernetesTestComponents = kubernetesTestComponents\n-      val contents = Utils.executeCommand(\"cat\", s\"$CONTAINER_MOUNT_PATH/$file\")\n-      assert(contents.toString.trim.equals(FILE_CONTENTS))\n+      Utils.executeCommand(\"ls\", s\"$CONTAINER_MOUNT_PATH/\")",
    "line": 72
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Got it~",
    "commit": "c9bb1a07a16ca62154853a3498f042f522e30e40",
    "createdAt": "2019-09-24T17:50:23Z",
    "diffHunk": "@@ -111,15 +109,28 @@ private[spark] trait PVTestsSuite { k8sSuite: KubernetesSuite =>\n       .storageClasses()\n       .withName(STORAGE_NAME)\n       .delete()\n+\n+    mountProcess.foreach(_.destroy())\n+\n   }\n \n   private def checkPVs(pod: Pod, file: String) = {\n+    implicit val podName: String = pod.getMetadata.getName\n+    implicit val components: KubernetesTestComponents = kubernetesTestComponents\n     Eventually.eventually(TIMEOUT, INTERVAL) {\n-      implicit val podName: String = pod.getMetadata.getName\n-      implicit val components: KubernetesTestComponents = kubernetesTestComponents\n-      val contents = Utils.executeCommand(\"cat\", s\"$CONTAINER_MOUNT_PATH/$file\")\n-      assert(contents.toString.trim.equals(FILE_CONTENTS))\n+      Utils.executeCommand(\"ls\", s\"$CONTAINER_MOUNT_PATH/\")",
    "line": 72
  }],
  "prId": 25748
}]