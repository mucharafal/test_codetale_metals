[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: indent an extra level",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-04-28T23:38:17Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * This class exists for backwards compatibility.  It loads services registered under the\n+ * deprecated [[org.apache.spark.deploy.yarn.security.ServiceCredentialProvider]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,"
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "It looks like other classes in the codebase use 4-space indents for the parameters.  I just compared to `CredentialUpdater`, for example.",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-05-18T20:18:23Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * This class exists for backwards compatibility.  It loads services registered under the\n+ * deprecated [[org.apache.spark.deploy.yarn.security.ServiceCredentialProvider]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,"
  }],
  "prId": 17723
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Do you need the fully qualified name? You're not importing the core class.\r\n\r\nIf you do need for whatever reason, probably cleaner to import it at the top with an alias.",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-04-28T23:40:02Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * This class exists for backwards compatibility.  It loads services registered under the\n+ * deprecated [[org.apache.spark.deploy.yarn.security.ServiceCredentialProvider]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration)\n+    extends ConfigurableCredentialManager(\n+      sparkConf,\n+      hadoopConf,\n+      new YARNHadoopAccessManager(hadoopConf, sparkConf)) {\n+\n+  val deprecatedCredentialProviders = getDeprecatedCredentialProviders\n+\n+  def getDeprecatedCredentialProviders:\n+    Map[String, org.apache.spark.deploy.yarn.security.ServiceCredentialProvider] = {"
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "I was trying to differentiate clearly between the deprecated version and the new version, but I actually just renamed the new version to `HadoopDelegationTokenProvider` to be more clear about what it does, so I'll fix this now.",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-05-18T20:19:10Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * This class exists for backwards compatibility.  It loads services registered under the\n+ * deprecated [[org.apache.spark.deploy.yarn.security.ServiceCredentialProvider]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration)\n+    extends ConfigurableCredentialManager(\n+      sparkConf,\n+      hadoopConf,\n+      new YARNHadoopAccessManager(hadoopConf, sparkConf)) {\n+\n+  val deprecatedCredentialProviders = getDeprecatedCredentialProviders\n+\n+  def getDeprecatedCredentialProviders:\n+    Map[String, org.apache.spark.deploy.yarn.security.ServiceCredentialProvider] = {"
  }],
  "prId": 17723
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "private?",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-05-19T19:31:41Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * This class exists for backwards compatibility.  It loads services registered under the\n+ * deprecated [[ServiceCredentialProvider]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration)\n+    extends ConfigurableCredentialManager(\n+      sparkConf,\n+      hadoopConf,\n+      new YARNHadoopAccessManager(hadoopConf, sparkConf)) {\n+\n+  val deprecatedCredentialProviders = getDeprecatedCredentialProviders\n+\n+  def getDeprecatedCredentialProviders:"
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "Fixed.",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-05-22T23:40:33Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * This class exists for backwards compatibility.  It loads services registered under the\n+ * deprecated [[ServiceCredentialProvider]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration)\n+    extends ConfigurableCredentialManager(\n+      sparkConf,\n+      hadoopConf,\n+      new YARNHadoopAccessManager(hadoopConf, sparkConf)) {\n+\n+  val deprecatedCredentialProviders = getDeprecatedCredentialProviders\n+\n+  def getDeprecatedCredentialProviders:"
  }],
  "prId": 17723
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Comment is not out of date.",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-01T23:25:47Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+\n+/**\n+ * This class exists for backwards compatibility.  It loads services registered under the"
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "fixed",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-02T19:17:11Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+\n+/**\n+ * This class exists for backwards compatibility.  It loads services registered under the"
  }],
  "prId": 17723
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "This can still be called `obtainYARNCredentials`, right? It would avoid some changes in other places.",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-01T23:26:13Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+\n+/**\n+ * This class exists for backwards compatibility.  It loads services registered under the\n+ * deprecated [[ServiceCredentialProvider]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration,\n+    fileSystems: Set[FileSystem]) extends Logging {\n+\n+  private val configurableCredentialManager =\n+    new ConfigurableCredentialManager(sparkConf, hadoopConf, fileSystems)\n+\n+  // public for testing\n+  val deprecatedCredentialProviders = getDeprecatedCredentialProviders\n+\n+  def obtainYARNCredentials("
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "You mean `obtainCredentials`?",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-02T19:18:35Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+\n+/**\n+ * This class exists for backwards compatibility.  It loads services registered under the\n+ * deprecated [[ServiceCredentialProvider]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration,\n+    fileSystems: Set[FileSystem]) extends Logging {\n+\n+  private val configurableCredentialManager =\n+    new ConfigurableCredentialManager(sparkConf, hadoopConf, fileSystems)\n+\n+  // public for testing\n+  val deprecatedCredentialProviders = getDeprecatedCredentialProviders\n+\n+  def obtainYARNCredentials("
  }],
  "prId": 17723
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Not deprecated anymore, right?",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-01T23:27:20Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+\n+/**\n+ * This class exists for backwards compatibility.  It loads services registered under the\n+ * deprecated [[ServiceCredentialProvider]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration,\n+    fileSystems: Set[FileSystem]) extends Logging {\n+\n+  private val configurableCredentialManager =\n+    new ConfigurableCredentialManager(sparkConf, hadoopConf, fileSystems)\n+\n+  // public for testing\n+  val deprecatedCredentialProviders = getDeprecatedCredentialProviders\n+\n+  def obtainYARNCredentials(\n+    hadoopConf: Configuration,\n+    creds: Credentials): Long = {\n+\n+    val superInterval = configurableCredentialManager.obtainCredentials(\n+      hadoopConf,\n+      creds)\n+\n+    deprecatedCredentialProviders.values.flatMap { provider =>"
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "fixed (everywhere)",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-02T19:18:44Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+\n+/**\n+ * This class exists for backwards compatibility.  It loads services registered under the\n+ * deprecated [[ServiceCredentialProvider]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration,\n+    fileSystems: Set[FileSystem]) extends Logging {\n+\n+  private val configurableCredentialManager =\n+    new ConfigurableCredentialManager(sparkConf, hadoopConf, fileSystems)\n+\n+  // public for testing\n+  val deprecatedCredentialProviders = getDeprecatedCredentialProviders\n+\n+  def obtainYARNCredentials(\n+    hadoopConf: Configuration,\n+    creds: Credentials): Long = {\n+\n+    val superInterval = configurableCredentialManager.obtainCredentials(\n+      hadoopConf,\n+      creds)\n+\n+    deprecatedCredentialProviders.values.flatMap { provider =>"
  }],
  "prId": 17723
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Hmm... code reuse is nice and all, but this is deprecating the configurations currently used by the YARN extensions for no good reason. Better to keep a separate `isServiceEnabled` for this class, and then the other one can be made private.",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-07T22:11:10Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+\n+/**\n+ * This class loads credential providers registered under the YARN-specific\n+ * [[ServiceCredentialProvider]] interface, as well as the builtin credential providers defined\n+ * in [[ConfigurableCredentialManager]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration,\n+    fileSystems: Set[FileSystem]) extends Logging {\n+\n+  private val configurableCredentialManager =\n+    new ConfigurableCredentialManager(sparkConf, hadoopConf, fileSystems)\n+\n+  // public for testing\n+  val credentialProviders = getCredentialProviders\n+\n+  def obtainYARNCredentials(\n+    hadoopConf: Configuration,\n+    creds: Credentials): Long = {\n+\n+    val superInterval = configurableCredentialManager.obtainCredentials(\n+      hadoopConf,\n+      creds)\n+\n+    credentialProviders.values.flatMap { provider =>\n+      if (provider.credentialsRequired(hadoopConf)) {\n+        provider.obtainCredentials(hadoopConf, sparkConf, creds)\n+      } else {\n+        logDebug(s\"Service ${provider.serviceName} does not require a token.\" +\n+          s\" Check your configuration to see if security is disabled or not.\")\n+        None\n+      }\n+    }.foldLeft(superInterval)(math.min)\n+  }\n+\n+  private def getCredentialProviders:\n+    Map[String, ServiceCredentialProvider] = {\n+    val providers = loadCredentialProviders\n+\n+    providers.\n+      filter { p => configurableCredentialManager.isServiceEnabled(p.serviceName) }"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Oops, I actually meant to remove this comment; I see that it makes the documentation simpler since you only need to mention the new configs instead of separate ones for the built-in providers.\r\n\r\nStill, might be nice to suppress the deprecation messages when dealing with the non-built-in providers.",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-07T23:25:45Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+\n+/**\n+ * This class loads credential providers registered under the YARN-specific\n+ * [[ServiceCredentialProvider]] interface, as well as the builtin credential providers defined\n+ * in [[ConfigurableCredentialManager]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration,\n+    fileSystems: Set[FileSystem]) extends Logging {\n+\n+  private val configurableCredentialManager =\n+    new ConfigurableCredentialManager(sparkConf, hadoopConf, fileSystems)\n+\n+  // public for testing\n+  val credentialProviders = getCredentialProviders\n+\n+  def obtainYARNCredentials(\n+    hadoopConf: Configuration,\n+    creds: Credentials): Long = {\n+\n+    val superInterval = configurableCredentialManager.obtainCredentials(\n+      hadoopConf,\n+      creds)\n+\n+    credentialProviders.values.flatMap { provider =>\n+      if (provider.credentialsRequired(hadoopConf)) {\n+        provider.obtainCredentials(hadoopConf, sparkConf, creds)\n+      } else {\n+        logDebug(s\"Service ${provider.serviceName} does not require a token.\" +\n+          s\" Check your configuration to see if security is disabled or not.\")\n+        None\n+      }\n+    }.foldLeft(superInterval)(math.min)\n+  }\n+\n+  private def getCredentialProviders:\n+    Map[String, ServiceCredentialProvider] = {\n+    val providers = loadCredentialProviders\n+\n+    providers.\n+      filter { p => configurableCredentialManager.isServiceEnabled(p.serviceName) }"
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "Why?  Those configs are still deprecated, for both builtin and non-builtin providers.",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-08T21:31:52Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+\n+/**\n+ * This class loads credential providers registered under the YARN-specific\n+ * [[ServiceCredentialProvider]] interface, as well as the builtin credential providers defined\n+ * in [[ConfigurableCredentialManager]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration,\n+    fileSystems: Set[FileSystem]) extends Logging {\n+\n+  private val configurableCredentialManager =\n+    new ConfigurableCredentialManager(sparkConf, hadoopConf, fileSystems)\n+\n+  // public for testing\n+  val credentialProviders = getCredentialProviders\n+\n+  def obtainYARNCredentials(\n+    hadoopConf: Configuration,\n+    creds: Credentials): Long = {\n+\n+    val superInterval = configurableCredentialManager.obtainCredentials(\n+      hadoopConf,\n+      creds)\n+\n+    credentialProviders.values.flatMap { provider =>\n+      if (provider.credentialsRequired(hadoopConf)) {\n+        provider.obtainCredentials(hadoopConf, sparkConf, creds)\n+      } else {\n+        logDebug(s\"Service ${provider.serviceName} does not require a token.\" +\n+          s\" Check your configuration to see if security is disabled or not.\")\n+        None\n+      }\n+    }.foldLeft(superInterval)(math.min)\n+  }\n+\n+  private def getCredentialProviders:\n+    Map[String, ServiceCredentialProvider] = {\n+    val providers = loadCredentialProviders\n+\n+    providers.\n+      filter { p => configurableCredentialManager.isServiceEnabled(p.serviceName) }"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Because it's weird. Why are you changing the config names if that particular feature (extensions loaded by YARN code) are not really a feature in core?\r\n\r\nIt would be just unnecessary log noise. When/if this is exposed as an actual API in core, then it would make more sense to warn about deprecating those configs.\r\n\r\nAnyway, not a big deal.",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-08T21:34:57Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+\n+/**\n+ * This class loads credential providers registered under the YARN-specific\n+ * [[ServiceCredentialProvider]] interface, as well as the builtin credential providers defined\n+ * in [[ConfigurableCredentialManager]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration,\n+    fileSystems: Set[FileSystem]) extends Logging {\n+\n+  private val configurableCredentialManager =\n+    new ConfigurableCredentialManager(sparkConf, hadoopConf, fileSystems)\n+\n+  // public for testing\n+  val credentialProviders = getCredentialProviders\n+\n+  def obtainYARNCredentials(\n+    hadoopConf: Configuration,\n+    creds: Credentials): Long = {\n+\n+    val superInterval = configurableCredentialManager.obtainCredentials(\n+      hadoopConf,\n+      creds)\n+\n+    credentialProviders.values.flatMap { provider =>\n+      if (provider.credentialsRequired(hadoopConf)) {\n+        provider.obtainCredentials(hadoopConf, sparkConf, creds)\n+      } else {\n+        logDebug(s\"Service ${provider.serviceName} does not require a token.\" +\n+          s\" Check your configuration to see if security is disabled or not.\")\n+        None\n+      }\n+    }.foldLeft(superInterval)(math.min)\n+  }\n+\n+  private def getCredentialProviders:\n+    Map[String, ServiceCredentialProvider] = {\n+    val providers = loadCredentialProviders\n+\n+    providers.\n+      filter { p => configurableCredentialManager.isServiceEnabled(p.serviceName) }"
  }],
  "prId": 17723
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Thought I commented on this. `obtainYARNCredentials` is a weird name, you're not getting YARN credentials. `obtainCredentials` is more correct.",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-07T22:11:46Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+\n+/**\n+ * This class loads credential providers registered under the YARN-specific\n+ * [[ServiceCredentialProvider]] interface, as well as the builtin credential providers defined\n+ * in [[ConfigurableCredentialManager]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration,\n+    fileSystems: Set[FileSystem]) extends Logging {\n+\n+  private val configurableCredentialManager =\n+    new ConfigurableCredentialManager(sparkConf, hadoopConf, fileSystems)\n+\n+  // public for testing\n+  val credentialProviders = getCredentialProviders\n+\n+  def obtainYARNCredentials("
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "Oh yea I changed this when I was using inheritence, but now that I'm using composition, there should be no name conflict.  reverting...",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-08T21:26:48Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+\n+/**\n+ * This class loads credential providers registered under the YARN-specific\n+ * [[ServiceCredentialProvider]] interface, as well as the builtin credential providers defined\n+ * in [[ConfigurableCredentialManager]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration,\n+    fileSystems: Set[FileSystem]) extends Logging {\n+\n+  private val configurableCredentialManager =\n+    new ConfigurableCredentialManager(sparkConf, hadoopConf, fileSystems)\n+\n+  // public for testing\n+  val credentialProviders = getCredentialProviders\n+\n+  def obtainYARNCredentials("
  }],
  "prId": 17723
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Too many empty lines.",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-07T22:24:22Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+"
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "fixed",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-08T21:26:17Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+"
  }],
  "prId": 17723
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: fits in one line.",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-09T22:42:43Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * This class loads credential providers registered under the YARN-specific\n+ * [[ServiceCredentialProvider]] interface, as well as the builtin credential providers defined\n+ * in [[ConfigurableCredentialManager]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration,\n+    fileSystems: Set[FileSystem]) extends Logging {\n+\n+  private val configurableCredentialManager =\n+    new ConfigurableCredentialManager(sparkConf, hadoopConf, fileSystems)\n+\n+  // public for testing\n+  val credentialProviders = getCredentialProviders\n+\n+  def obtainCredentials("
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "fixed",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-12T17:48:45Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * This class loads credential providers registered under the YARN-specific\n+ * [[ServiceCredentialProvider]] interface, as well as the builtin credential providers defined\n+ * in [[ConfigurableCredentialManager]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration,\n+    fileSystems: Set[FileSystem]) extends Logging {\n+\n+  private val configurableCredentialManager =\n+    new ConfigurableCredentialManager(sparkConf, hadoopConf, fileSystems)\n+\n+  // public for testing\n+  val credentialProviders = getCredentialProviders\n+\n+  def obtainCredentials("
  }],
  "prId": 17723
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: fits in one line.",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-09T22:43:07Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * This class loads credential providers registered under the YARN-specific\n+ * [[ServiceCredentialProvider]] interface, as well as the builtin credential providers defined\n+ * in [[ConfigurableCredentialManager]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration,\n+    fileSystems: Set[FileSystem]) extends Logging {\n+\n+  private val configurableCredentialManager =\n+    new ConfigurableCredentialManager(sparkConf, hadoopConf, fileSystems)\n+\n+  // public for testing\n+  val credentialProviders = getCredentialProviders\n+\n+  def obtainCredentials(\n+      hadoopConf: Configuration,\n+      creds: Credentials): Long = {\n+\n+    val superInterval = configurableCredentialManager.obtainCredentials("
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "fixed",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-12T17:55:37Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * This class loads credential providers registered under the YARN-specific\n+ * [[ServiceCredentialProvider]] interface, as well as the builtin credential providers defined\n+ * in [[ConfigurableCredentialManager]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration,\n+    fileSystems: Set[FileSystem]) extends Logging {\n+\n+  private val configurableCredentialManager =\n+    new ConfigurableCredentialManager(sparkConf, hadoopConf, fileSystems)\n+\n+  // public for testing\n+  val credentialProviders = getCredentialProviders\n+\n+  def obtainCredentials(\n+      hadoopConf: Configuration,\n+      creds: Credentials): Long = {\n+\n+    val superInterval = configurableCredentialManager.obtainCredentials("
  }],
  "prId": 17723
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: the `load(...)` call fits in one line.",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-09T22:43:43Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * This class loads credential providers registered under the YARN-specific\n+ * [[ServiceCredentialProvider]] interface, as well as the builtin credential providers defined\n+ * in [[ConfigurableCredentialManager]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration,\n+    fileSystems: Set[FileSystem]) extends Logging {\n+\n+  private val configurableCredentialManager =\n+    new ConfigurableCredentialManager(sparkConf, hadoopConf, fileSystems)\n+\n+  // public for testing\n+  val credentialProviders = getCredentialProviders\n+\n+  def obtainCredentials(\n+      hadoopConf: Configuration,\n+      creds: Credentials): Long = {\n+\n+    val superInterval = configurableCredentialManager.obtainCredentials(\n+      hadoopConf,\n+      creds)\n+\n+    credentialProviders.values.flatMap { provider =>\n+      if (provider.credentialsRequired(hadoopConf)) {\n+        provider.obtainCredentials(hadoopConf, sparkConf, creds)\n+      } else {\n+        logDebug(s\"Service ${provider.serviceName} does not require a token.\" +\n+          s\" Check your configuration to see if security is disabled or not.\")\n+        None\n+      }\n+    }.foldLeft(superInterval)(math.min)\n+  }\n+\n+  private def getCredentialProviders: Map[String, ServiceCredentialProvider] = {\n+    val providers = loadCredentialProviders\n+\n+    providers.\n+      filter { p => configurableCredentialManager.isServiceEnabled(p.serviceName) }\n+      .map { p => (p.serviceName, p) }\n+      .toMap\n+  }\n+\n+  private def loadCredentialProviders: List[ServiceCredentialProvider] = {\n+    ServiceLoader.load("
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "fixed.  would be nice if `scalastyle` caught all of these spacing issues.",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-12T17:56:05Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * This class loads credential providers registered under the YARN-specific\n+ * [[ServiceCredentialProvider]] interface, as well as the builtin credential providers defined\n+ * in [[ConfigurableCredentialManager]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration,\n+    fileSystems: Set[FileSystem]) extends Logging {\n+\n+  private val configurableCredentialManager =\n+    new ConfigurableCredentialManager(sparkConf, hadoopConf, fileSystems)\n+\n+  // public for testing\n+  val credentialProviders = getCredentialProviders\n+\n+  def obtainCredentials(\n+      hadoopConf: Configuration,\n+      creds: Credentials): Long = {\n+\n+    val superInterval = configurableCredentialManager.obtainCredentials(\n+      hadoopConf,\n+      creds)\n+\n+    credentialProviders.values.flatMap { provider =>\n+      if (provider.credentialsRequired(hadoopConf)) {\n+        provider.obtainCredentials(hadoopConf, sparkConf, creds)\n+      } else {\n+        logDebug(s\"Service ${provider.serviceName} does not require a token.\" +\n+          s\" Check your configuration to see if security is disabled or not.\")\n+        None\n+      }\n+    }.foldLeft(superInterval)(math.min)\n+  }\n+\n+  private def getCredentialProviders: Map[String, ServiceCredentialProvider] = {\n+    val providers = loadCredentialProviders\n+\n+    providers.\n+      filter { p => configurableCredentialManager.isServiceEnabled(p.serviceName) }\n+      .map { p => (p.serviceName, p) }\n+      .toMap\n+  }\n+\n+  private def loadCredentialProviders: List[ServiceCredentialProvider] = {\n+    ServiceLoader.load("
  }],
  "prId": 17723
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`YARNConfigurableCredentialManager ` is not extending `ConfigurableCredentialManager `. Please add the function description for this function too. ",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-10T19:21:45Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * This class loads credential providers registered under the YARN-specific\n+ * [[ServiceCredentialProvider]] interface, as well as the builtin credential providers defined\n+ * in [[ConfigurableCredentialManager]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration,\n+    fileSystems: Set[FileSystem]) extends Logging {\n+\n+  private val configurableCredentialManager =\n+    new ConfigurableCredentialManager(sparkConf, hadoopConf, fileSystems)\n+\n+  // public for testing\n+  val credentialProviders = getCredentialProviders\n+\n+  def obtainCredentials("
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "done",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-12T17:55:15Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * This class loads credential providers registered under the YARN-specific\n+ * [[ServiceCredentialProvider]] interface, as well as the builtin credential providers defined\n+ * in [[ConfigurableCredentialManager]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration,\n+    fileSystems: Set[FileSystem]) extends Logging {\n+\n+  private val configurableCredentialManager =\n+    new ConfigurableCredentialManager(sparkConf, hadoopConf, fileSystems)\n+\n+  // public for testing\n+  val credentialProviders = getCredentialProviders\n+\n+  def obtainCredentials("
  }],
  "prId": 17723
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Add the comment above this line to explain why `YARNConfigurableCredentialManager` does not extend `ConfigurableCredentialManager `",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-10T19:25:04Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * This class loads credential providers registered under the YARN-specific\n+ * [[ServiceCredentialProvider]] interface, as well as the builtin credential providers defined\n+ * in [[ConfigurableCredentialManager]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration,\n+    fileSystems: Set[FileSystem]) extends Logging {\n+\n+  private val configurableCredentialManager ="
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "I'm not sure what you mean.  Is composition vs. inheritance something that needs to be justified?  ",
    "commit": "c4149ddb940c32285fde8b1c08a5b212fced5d66",
    "createdAt": "2017-06-12T17:48:18Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.util.ServiceLoader\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.security.ConfigurableCredentialManager\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * This class loads credential providers registered under the YARN-specific\n+ * [[ServiceCredentialProvider]] interface, as well as the builtin credential providers defined\n+ * in [[ConfigurableCredentialManager]].\n+ */\n+private[yarn] class YARNConfigurableCredentialManager(\n+    sparkConf: SparkConf,\n+    hadoopConf: Configuration,\n+    fileSystems: Set[FileSystem]) extends Logging {\n+\n+  private val configurableCredentialManager ="
  }],
  "prId": 17723
}]