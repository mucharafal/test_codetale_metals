[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "The size of `getPendingAllocate` might be an interesting metric, but need to check whether it requires synchronization... and it may be an expensive operation, not sure if the AM client has a better API to get the number of pending requests.",
    "commit": "0b86788e7ec7b367c779cb5517f9dd294f99dd4b",
    "createdAt": "2018-06-27T20:18:08Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import com.codahale.metrics.{Gauge, MetricRegistry}\n+\n+import org.apache.spark.metrics.source.Source\n+\n+private[spark] class YarnClusterSchedulerSource(yarnAllocator: YarnAllocator) extends Source {\n+\n+  override val sourceName: String = \"yarn\"\n+  override val metricRegistry: MetricRegistry = new MetricRegistry()\n+\n+  metricRegistry.register(MetricRegistry.name(\"numExecutorsFailed\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumExecutorsFailed\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numExecutorsRunning\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumExecutorsRunning\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numReleasedContainers\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumReleasedContainers\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numPendingLossReasonRequests\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumPendingLossReasonRequests\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numLocalityAwareTasks\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.numLocalityAwareTasks\n+  })\n+\n+}"
  }, {
    "author": {
      "login": "attilapiros"
    },
    "body": "Yes, I have seen the call goes to YARN and I also was afraid abut its execution time so this is why I finally decided to leave it out. \r\n\r\nBut I will check whether there is something better to get it.",
    "commit": "0b86788e7ec7b367c779cb5517f9dd294f99dd4b",
    "createdAt": "2018-06-27T20:25:24Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import com.codahale.metrics.{Gauge, MetricRegistry}\n+\n+import org.apache.spark.metrics.source.Source\n+\n+private[spark] class YarnClusterSchedulerSource(yarnAllocator: YarnAllocator) extends Source {\n+\n+  override val sourceName: String = \"yarn\"\n+  override val metricRegistry: MetricRegistry = new MetricRegistry()\n+\n+  metricRegistry.register(MetricRegistry.name(\"numExecutorsFailed\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumExecutorsFailed\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numExecutorsRunning\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumExecutorsRunning\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numReleasedContainers\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumReleasedContainers\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numPendingLossReasonRequests\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumPendingLossReasonRequests\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numLocalityAwareTasks\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.numLocalityAwareTasks\n+  })\n+\n+}"
  }, {
    "author": {
      "login": "attilapiros"
    },
    "body": "The getPendingAllocate seams to me quite cheap as it just uses local maps (and tables) to calculate a list of ContainerRequests.",
    "commit": "0b86788e7ec7b367c779cb5517f9dd294f99dd4b",
    "createdAt": "2018-06-27T21:06:39Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import com.codahale.metrics.{Gauge, MetricRegistry}\n+\n+import org.apache.spark.metrics.source.Source\n+\n+private[spark] class YarnClusterSchedulerSource(yarnAllocator: YarnAllocator) extends Source {\n+\n+  override val sourceName: String = \"yarn\"\n+  override val metricRegistry: MetricRegistry = new MetricRegistry()\n+\n+  metricRegistry.register(MetricRegistry.name(\"numExecutorsFailed\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumExecutorsFailed\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numExecutorsRunning\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumExecutorsRunning\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numReleasedContainers\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumReleasedContainers\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numPendingLossReasonRequests\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumPendingLossReasonRequests\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numLocalityAwareTasks\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.numLocalityAwareTasks\n+  })\n+\n+}"
  }],
  "prId": 21635
}, {
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "I'm not sure how useful this metric is, did you have specific use case?",
    "commit": "0b86788e7ec7b367c779cb5517f9dd294f99dd4b",
    "createdAt": "2018-07-02T14:54:11Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import com.codahale.metrics.{Gauge, MetricRegistry}\n+\n+import org.apache.spark.metrics.source.Source\n+\n+private[spark] class YarnClusterSchedulerSource(yarnAllocator: YarnAllocator) extends Source {\n+\n+  override val sourceName: String = \"yarn\"\n+  override val metricRegistry: MetricRegistry = new MetricRegistry()\n+\n+  metricRegistry.register(MetricRegistry.name(\"numExecutorsFailed\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumExecutorsFailed\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numExecutorsRunning\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumExecutorsRunning\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numReleasedContainers\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumReleasedContainers\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numPendingLossReasonRequests\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumPendingLossReasonRequests"
  }, {
    "author": {
      "login": "attilapiros"
    },
    "body": "Sorry I have no use case for it. I added it as in previous comments it was requested to have more metrics and this one was something easy to collect If it is totally useless then better to remove it.\r\n",
    "commit": "0b86788e7ec7b367c779cb5517f9dd294f99dd4b",
    "createdAt": "2018-07-02T15:01:57Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import com.codahale.metrics.{Gauge, MetricRegistry}\n+\n+import org.apache.spark.metrics.source.Source\n+\n+private[spark] class YarnClusterSchedulerSource(yarnAllocator: YarnAllocator) extends Source {\n+\n+  override val sourceName: String = \"yarn\"\n+  override val metricRegistry: MetricRegistry = new MetricRegistry()\n+\n+  metricRegistry.register(MetricRegistry.name(\"numExecutorsFailed\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumExecutorsFailed\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numExecutorsRunning\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumExecutorsRunning\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numReleasedContainers\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumReleasedContainers\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numPendingLossReasonRequests\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumPendingLossReasonRequests"
  }, {
    "author": {
      "login": "tgravescs"
    },
    "body": "yeah I would leave it out if no one specifically requested it and we can't think of use case.  Its easier to add later then to remove.",
    "commit": "0b86788e7ec7b367c779cb5517f9dd294f99dd4b",
    "createdAt": "2018-07-02T15:53:57Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import com.codahale.metrics.{Gauge, MetricRegistry}\n+\n+import org.apache.spark.metrics.source.Source\n+\n+private[spark] class YarnClusterSchedulerSource(yarnAllocator: YarnAllocator) extends Source {\n+\n+  override val sourceName: String = \"yarn\"\n+  override val metricRegistry: MetricRegistry = new MetricRegistry()\n+\n+  metricRegistry.register(MetricRegistry.name(\"numExecutorsFailed\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumExecutorsFailed\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numExecutorsRunning\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumExecutorsRunning\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numReleasedContainers\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumReleasedContainers\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numPendingLossReasonRequests\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumPendingLossReasonRequests"
  }],
  "prId": 21635
}, {
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "should we give these a more clear name.  Like numContainersPendingAllocate?",
    "commit": "0b86788e7ec7b367c779cb5517f9dd294f99dd4b",
    "createdAt": "2018-07-09T16:26:25Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import com.codahale.metrics.{Gauge, MetricRegistry}\n+\n+import org.apache.spark.metrics.source.Source\n+\n+private[spark] class YarnClusterSchedulerSource(yarnAllocator: YarnAllocator) extends Source {\n+\n+  override val sourceName: String = \"yarn\"\n+  override val metricRegistry: MetricRegistry = new MetricRegistry()\n+\n+  metricRegistry.register(MetricRegistry.name(\"numExecutorsFailed\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumExecutorsFailed\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numExecutorsRunning\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumExecutorsRunning\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numReleasedContainers\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumReleasedContainers\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numLocalityAwareTasks\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.numLocalityAwareTasks\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numPendingAllocate\"), new Gauge[Int] {"
  }, {
    "author": {
      "login": "attilapiros"
    },
    "body": "Sure we can do that.",
    "commit": "0b86788e7ec7b367c779cb5517f9dd294f99dd4b",
    "createdAt": "2018-07-10T12:59:47Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import com.codahale.metrics.{Gauge, MetricRegistry}\n+\n+import org.apache.spark.metrics.source.Source\n+\n+private[spark] class YarnClusterSchedulerSource(yarnAllocator: YarnAllocator) extends Source {\n+\n+  override val sourceName: String = \"yarn\"\n+  override val metricRegistry: MetricRegistry = new MetricRegistry()\n+\n+  metricRegistry.register(MetricRegistry.name(\"numExecutorsFailed\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumExecutorsFailed\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numExecutorsRunning\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumExecutorsRunning\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numReleasedContainers\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.getNumReleasedContainers\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numLocalityAwareTasks\"), new Gauge[Int] {\n+    override def getValue: Int = yarnAllocator.numLocalityAwareTasks\n+  })\n+\n+  metricRegistry.register(MetricRegistry.name(\"numPendingAllocate\"), new Gauge[Int] {"
  }],
  "prId": 21635
}]