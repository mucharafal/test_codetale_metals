[{
  "comments": [{
    "author": {
      "login": "jerryshao"
    },
    "body": "I would suggest to change the first `-1` to `Utils#getDynamicAllocationInitialExecutors`, and the second to be \"0\".",
    "commit": "45aac34d312bd80d4e67ab41939cebca8164868b",
    "createdAt": "2017-06-06T13:02:31Z",
    "diffHunk": "@@ -68,6 +68,8 @@ private[spark] abstract class YarnSchedulerBackend(\n   // Flag to specify whether this schedulerBackend should be reset.\n   private var shouldResetOnAmRegister = false\n \n+  private var lastRequestExecutors = RequestExecutors(-1, -1, Map.empty, Set.empty)"
  }, {
    "author": {
      "login": "witgo"
    },
    "body": "Done.",
    "commit": "45aac34d312bd80d4e67ab41939cebca8164868b",
    "createdAt": "2017-06-07T15:04:16Z",
    "diffHunk": "@@ -68,6 +68,8 @@ private[spark] abstract class YarnSchedulerBackend(\n   // Flag to specify whether this schedulerBackend should be reset.\n   private var shouldResetOnAmRegister = false\n \n+  private var lastRequestExecutors = RequestExecutors(-1, -1, Map.empty, Set.empty)"
  }],
  "prId": 17882
}, {
  "comments": [{
    "author": {
      "login": "jerryshao"
    },
    "body": "Why would you remove this method, AFAIK it is still necessary, otherwise who will reset the state of `ExecutorAllocationManager`?",
    "commit": "45aac34d312bd80d4e67ab41939cebca8164868b",
    "createdAt": "2017-06-06T13:04:23Z",
    "diffHunk": "@@ -176,16 +179,6 @@ private[spark] abstract class YarnSchedulerBackend(\n   }\n \n   /**\n-   * Reset the state of SchedulerBackend to the initial state. This is happened when AM is failed\n-   * and re-registered itself to driver after a failure. The stale state in driver should be\n-   * cleaned.\n-   */\n-  override protected def reset(): Unit = {"
  }, {
    "author": {
      "login": "witgo"
    },
    "body": "From the current code, we reset the state of `ExecutorAllocationManager` is not correct. Iy causes the `RetrieveLastRequestExecutors` message to not work properly",
    "commit": "45aac34d312bd80d4e67ab41939cebca8164868b",
    "createdAt": "2017-06-07T14:39:47Z",
    "diffHunk": "@@ -176,16 +179,6 @@ private[spark] abstract class YarnSchedulerBackend(\n   }\n \n   /**\n-   * Reset the state of SchedulerBackend to the initial state. This is happened when AM is failed\n-   * and re-registered itself to driver after a failure. The stale state in driver should be\n-   * cleaned.\n-   */\n-  override protected def reset(): Unit = {"
  }, {
    "author": {
      "login": "jerryshao"
    },
    "body": "OK, then if `ExecutorAllocationManager#reset` is not required, then why would you still keep that method?\r\n\r\nAlso should we clean this two fields during AM restart in `ExecutorAllocationManager`?\r\n\r\n```\r\n    executorsPendingToRemove.clear()\r\n    removeTimes.clear()\r\n```",
    "commit": "45aac34d312bd80d4e67ab41939cebca8164868b",
    "createdAt": "2017-06-08T06:37:48Z",
    "diffHunk": "@@ -176,16 +179,6 @@ private[spark] abstract class YarnSchedulerBackend(\n   }\n \n   /**\n-   * Reset the state of SchedulerBackend to the initial state. This is happened when AM is failed\n-   * and re-registered itself to driver after a failure. The stale state in driver should be\n-   * cleaned.\n-   */\n-  override protected def reset(): Unit = {"
  }, {
    "author": {
      "login": "witgo"
    },
    "body": "I think `ExecutorAllocationManager#reset` is still necessary, but the following code should be removed\r\n```scala\r\n    initializing = true\r\n    numExecutorsTarget = initialNumExecutors\r\n    numExecutorsToAdd = 1\r\n```",
    "commit": "45aac34d312bd80d4e67ab41939cebca8164868b",
    "createdAt": "2017-06-14T15:00:10Z",
    "diffHunk": "@@ -176,16 +179,6 @@ private[spark] abstract class YarnSchedulerBackend(\n   }\n \n   /**\n-   * Reset the state of SchedulerBackend to the initial state. This is happened when AM is failed\n-   * and re-registered itself to driver after a failure. The stale state in driver should be\n-   * cleaned.\n-   */\n-  override protected def reset(): Unit = {"
  }],
  "prId": 17882
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Why make a new call for this? What I had in mind would re-use `RetrieveLastAllocatedExecutorId` adding new properties that tell the AM what's the initial state. Might be good to change the name of the message at that point to (e.g. `GetAMInitialState` or something).\r\n\r\nThat call is already made during initialization of `YarnAllocator`, so it should be a smaller change overall.\r\n\r\nSo, you'd have one already existing RPC instead of a new RPC from the AM to the driver that may cause the AM to send another RPC to itself.",
    "commit": "45aac34d312bd80d4e67ab41939cebca8164868b",
    "createdAt": "2017-06-07T18:38:49Z",
    "diffHunk": "@@ -307,6 +301,9 @@ private[spark] abstract class YarnSchedulerBackend(\n \n       case RetrieveLastAllocatedExecutorId =>\n         context.reply(currentExecutorIdCounter)\n+\n+      case RetrieveLastRequestExecutors =>"
  }],
  "prId": 17882
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "The way this class is used isn't really helping. You could have the two fields as mutable fields in the parent instead of declaring a separate type.\r\n\r\nI'd suggest either getting rid of this class, or turning it into a proper type to be sent as a reply to the \"get\" RPC, defined in `CoarseGrainedClusterMessage.scala` (meaning you'd keep state in fields here, and the message itself would be instantiated only when replying to the RPC, and would be immutable).\r\n\r\nAlso, either suggestion means you don't need the changes around `setCurrentExecutorIdCounter`. The old code was fine.\r\n\r\nFinally, I know I suggested the name, but making the names of the classes more generic would be better (since that file is not YARN-specific). e.g. `GetExecutorAllocatorState` and `ExecutorAllocatorState` for the reply.",
    "commit": "45aac34d312bd80d4e67ab41939cebca8164868b",
    "createdAt": "2017-06-15T23:30:47Z",
    "diffHunk": "@@ -68,6 +68,12 @@ private[spark] abstract class YarnSchedulerBackend(\n   // Flag to specify whether this schedulerBackend should be reset.\n   private var shouldResetOnAmRegister = false\n \n+  private val currentState = new CurrentAMState(0,\n+    RequestExecutors(Utils.getDynamicAllocationInitialExecutors(conf), 0, Map.empty, Set.empty))\n+\n+  protected class CurrentAMState(",
    "line": 16
  }],
  "prId": 17882
}]