[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Do you want the shared instance here instead?",
    "commit": "ad63e154b0aae43e2e83fc2ea7700b0545c2fd99",
    "createdAt": "2019-03-29T23:16:50Z",
    "diffHunk": "@@ -83,7 +83,7 @@ private[spark] class YarnRMClient extends Logging {\n       localResources: Map[String, LocalResource]): YarnAllocator = {\n     require(registered, \"Must register AM before creating allocator.\")\n     new YarnAllocator(driverUrl, driverRef, conf, sparkConf, amClient, appAttemptId, securityMgr,\n-      localResources, new SparkRackResolver())\n+      localResources, new SparkRackResolver(conf))"
  }, {
    "author": {
      "login": "squito"
    },
    "body": "oh good point, i do want the shared instance, to use a shared `CachedDnsToSwitchMapping`.  In cluster mode that will make sure we re-use the cache.",
    "commit": "ad63e154b0aae43e2e83fc2ea7700b0545c2fd99",
    "createdAt": "2019-03-30T01:26:57Z",
    "diffHunk": "@@ -83,7 +83,7 @@ private[spark] class YarnRMClient extends Logging {\n       localResources: Map[String, LocalResource]): YarnAllocator = {\n     require(registered, \"Must register AM before creating allocator.\")\n     new YarnAllocator(driverUrl, driverRef, conf, sparkConf, amClient, appAttemptId, securityMgr,\n-      localResources, new SparkRackResolver())\n+      localResources, new SparkRackResolver(conf))"
  }],
  "prId": 24245
}]