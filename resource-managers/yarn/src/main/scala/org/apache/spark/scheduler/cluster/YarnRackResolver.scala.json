[{
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "typo: resolve\r\n\r\nIf I understand what you mean here, I think a better comment would be:\r\n\r\n```\r\nUtility to resolve the rack for hosts in an efficient manner.  It will cache the rack for individual hosts to avoid\r\nrepeatedly performing the same expensive lookup.\r\n\r\nThis will be unnecessary in hadoop releases with YARN-9332.  With that, we could just directly use org.apache.hadoop.yarn.util.RackResolver.  In the meantime, this is a re-implementation for spark's use.\r\n```",
    "commit": "92ef335c27b4a0d74e5831da370a920eb90cc191",
    "createdAt": "2019-03-05T18:40:37Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ArrayBuffer\n+\n+import com.google.common.base.Strings\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic\n+import org.apache.hadoop.net._\n+import org.apache.hadoop.util.ReflectionUtils\n+\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * Added in SPARK-27038. Before using the higher Hadoop version which applied YARN-9332,\n+ * we construct [[YarnRackResolver]] instead of [[org.apache.hadoop.yarn.util.RackResolver]]\n+ * to revolve the rack info."
  }, {
    "author": {
      "login": "LantaoJin"
    },
    "body": "adopted",
    "commit": "92ef335c27b4a0d74e5831da370a920eb90cc191",
    "createdAt": "2019-03-07T11:26:58Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ArrayBuffer\n+\n+import com.google.common.base.Strings\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic\n+import org.apache.hadoop.net._\n+import org.apache.hadoop.util.ReflectionUtils\n+\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * Added in SPARK-27038. Before using the higher Hadoop version which applied YARN-9332,\n+ * we construct [[YarnRackResolver]] instead of [[org.apache.hadoop.yarn.util.RackResolver]]\n+ * to revolve the rack info."
  }],
  "prId": 23951
}, {
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "i don't understand the `numArgs` part at all, can you please explain?",
    "commit": "92ef335c27b4a0d74e5831da370a920eb90cc191",
    "createdAt": "2019-03-05T20:19:25Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ArrayBuffer\n+\n+import com.google.common.base.Strings\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic\n+import org.apache.hadoop.net._\n+import org.apache.hadoop.util.ReflectionUtils\n+\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * Added in SPARK-27038. Before using the higher Hadoop version which applied YARN-9332,\n+ * we construct [[YarnRackResolver]] instead of [[org.apache.hadoop.yarn.util.RackResolver]]\n+ * to revolve the rack info.\n+ */\n+object YarnRackResolver extends Logging {\n+  private var dnsToSwitchMapping: DNSToSwitchMapping = _\n+  private var initCalled = false\n+  // advisory count of arguments for rack script\n+  private val ADVISORY_MINIMUM_NUMBER_SCRIPT_ARGS = 10000\n+\n+  def init(conf: Configuration): Unit = {\n+    if (!initCalled) {\n+      initCalled = true\n+      val dnsToSwitchMappingClass =\n+        conf.getClass(CommonConfigurationKeysPublic.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY,\n+          classOf[ScriptBasedMapping], classOf[DNSToSwitchMapping])\n+      if (classOf[ScriptBasedMapping].isAssignableFrom(dnsToSwitchMappingClass)) {\n+        val numArgs = conf.getInt(CommonConfigurationKeysPublic.NET_TOPOLOGY_SCRIPT_NUMBER_ARGS_KEY,\n+          CommonConfigurationKeysPublic.NET_TOPOLOGY_SCRIPT_NUMBER_ARGS_DEFAULT)\n+        if (numArgs < ADVISORY_MINIMUM_NUMBER_SCRIPT_ARGS) {"
  }, {
    "author": {
      "login": "LantaoJin"
    },
    "body": "This is the max allowed count of script arguments in one execution. In Hadoop, the length of script arguments over `numArgs` will be executed in next round in loop. The default value 100 means hosts over 100 couldn't be resolved in one shot. For instance, we have 201 hosts to be resolved for a job, Hadoop will launch script three times to resolve:\r\n\r\n> script.py host1 host2 ... host100\r\n> script.py host101... host200, host201\r\n> script.py host201\r\n\r\nIt launches this python script 3 times. First is for host1 to host100, the second round resolves host100 to host200, the last round only resolves host201.\r\n\r\nFor Spark, in a big cluster, we hope to reduce the script execution rounds. 100 may be too small. In a small cluster or small job, whatever this value is 100 or 10000, there is no harm. But in for a large cluster with a big job. Logging out this warning log is to remind users to increase the configuration `net.topology.script.number.args` to reduce the inefficient execution loops of script.",
    "commit": "92ef335c27b4a0d74e5831da370a920eb90cc191",
    "createdAt": "2019-03-07T10:20:35Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ArrayBuffer\n+\n+import com.google.common.base.Strings\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic\n+import org.apache.hadoop.net._\n+import org.apache.hadoop.util.ReflectionUtils\n+\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * Added in SPARK-27038. Before using the higher Hadoop version which applied YARN-9332,\n+ * we construct [[YarnRackResolver]] instead of [[org.apache.hadoop.yarn.util.RackResolver]]\n+ * to revolve the rack info.\n+ */\n+object YarnRackResolver extends Logging {\n+  private var dnsToSwitchMapping: DNSToSwitchMapping = _\n+  private var initCalled = false\n+  // advisory count of arguments for rack script\n+  private val ADVISORY_MINIMUM_NUMBER_SCRIPT_ARGS = 10000\n+\n+  def init(conf: Configuration): Unit = {\n+    if (!initCalled) {\n+      initCalled = true\n+      val dnsToSwitchMappingClass =\n+        conf.getClass(CommonConfigurationKeysPublic.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY,\n+          classOf[ScriptBasedMapping], classOf[DNSToSwitchMapping])\n+      if (classOf[ScriptBasedMapping].isAssignableFrom(dnsToSwitchMappingClass)) {\n+        val numArgs = conf.getInt(CommonConfigurationKeysPublic.NET_TOPOLOGY_SCRIPT_NUMBER_ARGS_KEY,\n+          CommonConfigurationKeysPublic.NET_TOPOLOGY_SCRIPT_NUMBER_ARGS_DEFAULT)\n+        if (numArgs < ADVISORY_MINIMUM_NUMBER_SCRIPT_ARGS) {"
  }, {
    "author": {
      "login": "LantaoJin"
    },
    "body": "Also, the value 10000 I set hasn't any evidence from production testing. I just think it could be resolved in one execution shot and I think almost clusters in industry are under 10000 nodes.",
    "commit": "92ef335c27b4a0d74e5831da370a920eb90cc191",
    "createdAt": "2019-03-07T10:25:49Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ArrayBuffer\n+\n+import com.google.common.base.Strings\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic\n+import org.apache.hadoop.net._\n+import org.apache.hadoop.util.ReflectionUtils\n+\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * Added in SPARK-27038. Before using the higher Hadoop version which applied YARN-9332,\n+ * we construct [[YarnRackResolver]] instead of [[org.apache.hadoop.yarn.util.RackResolver]]\n+ * to revolve the rack info.\n+ */\n+object YarnRackResolver extends Logging {\n+  private var dnsToSwitchMapping: DNSToSwitchMapping = _\n+  private var initCalled = false\n+  // advisory count of arguments for rack script\n+  private val ADVISORY_MINIMUM_NUMBER_SCRIPT_ARGS = 10000\n+\n+  def init(conf: Configuration): Unit = {\n+    if (!initCalled) {\n+      initCalled = true\n+      val dnsToSwitchMappingClass =\n+        conf.getClass(CommonConfigurationKeysPublic.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY,\n+          classOf[ScriptBasedMapping], classOf[DNSToSwitchMapping])\n+      if (classOf[ScriptBasedMapping].isAssignableFrom(dnsToSwitchMappingClass)) {\n+        val numArgs = conf.getInt(CommonConfigurationKeysPublic.NET_TOPOLOGY_SCRIPT_NUMBER_ARGS_KEY,\n+          CommonConfigurationKeysPublic.NET_TOPOLOGY_SCRIPT_NUMBER_ARGS_DEFAULT)\n+        if (numArgs < ADVISORY_MINIMUM_NUMBER_SCRIPT_ARGS) {"
  }, {
    "author": {
      "login": "LantaoJin"
    },
    "body": "So the warning log doesn't give user any gold value for it. ",
    "commit": "92ef335c27b4a0d74e5831da370a920eb90cc191",
    "createdAt": "2019-03-07T10:27:01Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ArrayBuffer\n+\n+import com.google.common.base.Strings\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic\n+import org.apache.hadoop.net._\n+import org.apache.hadoop.util.ReflectionUtils\n+\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * Added in SPARK-27038. Before using the higher Hadoop version which applied YARN-9332,\n+ * we construct [[YarnRackResolver]] instead of [[org.apache.hadoop.yarn.util.RackResolver]]\n+ * to revolve the rack info.\n+ */\n+object YarnRackResolver extends Logging {\n+  private var dnsToSwitchMapping: DNSToSwitchMapping = _\n+  private var initCalled = false\n+  // advisory count of arguments for rack script\n+  private val ADVISORY_MINIMUM_NUMBER_SCRIPT_ARGS = 10000\n+\n+  def init(conf: Configuration): Unit = {\n+    if (!initCalled) {\n+      initCalled = true\n+      val dnsToSwitchMappingClass =\n+        conf.getClass(CommonConfigurationKeysPublic.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY,\n+          classOf[ScriptBasedMapping], classOf[DNSToSwitchMapping])\n+      if (classOf[ScriptBasedMapping].isAssignableFrom(dnsToSwitchMappingClass)) {\n+        val numArgs = conf.getInt(CommonConfigurationKeysPublic.NET_TOPOLOGY_SCRIPT_NUMBER_ARGS_KEY,\n+          CommonConfigurationKeysPublic.NET_TOPOLOGY_SCRIPT_NUMBER_ARGS_DEFAULT)\n+        if (numArgs < ADVISORY_MINIMUM_NUMBER_SCRIPT_ARGS) {"
  }, {
    "author": {
      "login": "squito"
    },
    "body": "OK, so this has no effect on how you prepare the arguments to this script in spark itself, it just controls the behavior of that script, right?\r\n\r\nso is there a downside to running with a huge number, say 10M?  Not knowing anything about that script, I figure there must be *some* tradeoff here.  I am not sure you should be setting the value to 10K if you haven't tried anything which hits that limit.",
    "commit": "92ef335c27b4a0d74e5831da370a920eb90cc191",
    "createdAt": "2019-03-07T15:46:38Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ArrayBuffer\n+\n+import com.google.common.base.Strings\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic\n+import org.apache.hadoop.net._\n+import org.apache.hadoop.util.ReflectionUtils\n+\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * Added in SPARK-27038. Before using the higher Hadoop version which applied YARN-9332,\n+ * we construct [[YarnRackResolver]] instead of [[org.apache.hadoop.yarn.util.RackResolver]]\n+ * to revolve the rack info.\n+ */\n+object YarnRackResolver extends Logging {\n+  private var dnsToSwitchMapping: DNSToSwitchMapping = _\n+  private var initCalled = false\n+  // advisory count of arguments for rack script\n+  private val ADVISORY_MINIMUM_NUMBER_SCRIPT_ARGS = 10000\n+\n+  def init(conf: Configuration): Unit = {\n+    if (!initCalled) {\n+      initCalled = true\n+      val dnsToSwitchMappingClass =\n+        conf.getClass(CommonConfigurationKeysPublic.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY,\n+          classOf[ScriptBasedMapping], classOf[DNSToSwitchMapping])\n+      if (classOf[ScriptBasedMapping].isAssignableFrom(dnsToSwitchMappingClass)) {\n+        val numArgs = conf.getInt(CommonConfigurationKeysPublic.NET_TOPOLOGY_SCRIPT_NUMBER_ARGS_KEY,\n+          CommonConfigurationKeysPublic.NET_TOPOLOGY_SCRIPT_NUMBER_ARGS_DEFAULT)\n+        if (numArgs < ADVISORY_MINIMUM_NUMBER_SCRIPT_ARGS) {"
  }, {
    "author": {
      "login": "LantaoJin"
    },
    "body": "There isn't any existing \"the script\" in Hadoop or Spark. This needs to be provided by Hadoop administrator. If it is not set, the default value of DEFAULT_RACK is returned for all node names. But whatever the script looks like, the interface [runResolveCommand](https://github.com/apache/hadoop/blob/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/ScriptBasedMapping.java#L220) in `ScriptBasedMapping` is fixed: It accepts a host list and executes several times based on `net.topology.script.number.args` we mentioned above. So I didn't take account of any execution performance of this script. Logging with a higher advisory value is based on the character of Spark jobs comparing to MR job. I will change this logging to INFO and remove the fixed value 10k.",
    "commit": "92ef335c27b4a0d74e5831da370a920eb90cc191",
    "createdAt": "2019-03-08T03:11:51Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ArrayBuffer\n+\n+import com.google.common.base.Strings\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic\n+import org.apache.hadoop.net._\n+import org.apache.hadoop.util.ReflectionUtils\n+\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * Added in SPARK-27038. Before using the higher Hadoop version which applied YARN-9332,\n+ * we construct [[YarnRackResolver]] instead of [[org.apache.hadoop.yarn.util.RackResolver]]\n+ * to revolve the rack info.\n+ */\n+object YarnRackResolver extends Logging {\n+  private var dnsToSwitchMapping: DNSToSwitchMapping = _\n+  private var initCalled = false\n+  // advisory count of arguments for rack script\n+  private val ADVISORY_MINIMUM_NUMBER_SCRIPT_ARGS = 10000\n+\n+  def init(conf: Configuration): Unit = {\n+    if (!initCalled) {\n+      initCalled = true\n+      val dnsToSwitchMappingClass =\n+        conf.getClass(CommonConfigurationKeysPublic.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY,\n+          classOf[ScriptBasedMapping], classOf[DNSToSwitchMapping])\n+      if (classOf[ScriptBasedMapping].isAssignableFrom(dnsToSwitchMappingClass)) {\n+        val numArgs = conf.getInt(CommonConfigurationKeysPublic.NET_TOPOLOGY_SCRIPT_NUMBER_ARGS_KEY,\n+          CommonConfigurationKeysPublic.NET_TOPOLOGY_SCRIPT_NUMBER_ARGS_DEFAULT)\n+        if (numArgs < ADVISORY_MINIMUM_NUMBER_SCRIPT_ARGS) {"
  }],
  "prId": 23951
}]