[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "The mechanics of adding the metric source are ok, but have you thought of other metrics to expose? `YarnAllocator` has a lot of things that could be easily hooked up here.",
    "commit": "0b86788e7ec7b367c779cb5517f9dd294f99dd4b",
    "createdAt": "2018-06-25T23:52:34Z",
    "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster\n+\n+import com.codahale.metrics.{Gauge, MetricRegistry}\n+\n+import org.apache.spark.deploy.yarn.FailureTracker\n+import org.apache.spark.metrics.source.Source\n+\n+private[spark] class YarnClusterSchedulerSource(failureTracker: FailureTracker) extends Source {\n+\n+  override val sourceName: String = \"yarn_cluster\"\n+  override val metricRegistry: MetricRegistry = new MetricRegistry()\n+\n+  metricRegistry.register("
  }, {
    "author": {
      "login": "jerryshao"
    },
    "body": "Agreed, creating metric source with only one metrics seems overkill. Maybe we can mix this into  `FailureTracker`.",
    "commit": "0b86788e7ec7b367c779cb5517f9dd294f99dd4b",
    "createdAt": "2018-06-26T03:40:50Z",
    "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster\n+\n+import com.codahale.metrics.{Gauge, MetricRegistry}\n+\n+import org.apache.spark.deploy.yarn.FailureTracker\n+import org.apache.spark.metrics.source.Source\n+\n+private[spark] class YarnClusterSchedulerSource(failureTracker: FailureTracker) extends Source {\n+\n+  override val sourceName: String = \"yarn_cluster\"\n+  override val metricRegistry: MetricRegistry = new MetricRegistry()\n+\n+  metricRegistry.register("
  }, {
    "author": {
      "login": "attilapiros"
    },
    "body": "I have added some new metrics. So the current metrics are:\r\n- yarn.numExecutorsFailed\r\n- yarn.numExecutorsRunning\r\n- yarn.numLocalityAwareTasks\r\n- yarn.numPendingLossReasonRequests\r\n- yarn.numReleasedContainers\r\n            ",
    "commit": "0b86788e7ec7b367c779cb5517f9dd294f99dd4b",
    "createdAt": "2018-06-26T12:05:06Z",
    "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster\n+\n+import com.codahale.metrics.{Gauge, MetricRegistry}\n+\n+import org.apache.spark.deploy.yarn.FailureTracker\n+import org.apache.spark.metrics.source.Source\n+\n+private[spark] class YarnClusterSchedulerSource(failureTracker: FailureTracker) extends Source {\n+\n+  override val sourceName: String = \"yarn_cluster\"\n+  override val metricRegistry: MetricRegistry = new MetricRegistry()\n+\n+  metricRegistry.register("
  }],
  "prId": 21635
}]