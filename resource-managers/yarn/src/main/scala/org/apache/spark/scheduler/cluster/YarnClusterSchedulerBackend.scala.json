[{
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "you can avoid the `var` here by just having the final expression be the result at the end of the try and the catch:\r\n\r\n```scala\r\ntry {\r\n  ...\r\n  Some(Map(\r\n    ...\r\n  ))\r\n} catch {\r\n  case e: Exception =>\r\n   logInfo(...)\r\n   None\r\n}\r\n```",
    "commit": "2d0480239a4eea655b95a521ac71ed44482acde7",
    "createdAt": "2019-01-22T15:53:48Z",
    "diffHunk": "@@ -64,4 +66,42 @@ private[spark] class YarnClusterSchedulerBackend(\n     }\n     driverLogs\n   }\n+\n+  override def getDriverAttributes: Option[Map[String, String]] = {\n+    var attributes: Option[Map[String, String]] = None\n+    try {\n+      val yarnConf = new YarnConfiguration(sc.hadoopConfiguration)\n+      val containerId = YarnSparkHadoopUtil.getContainerId\n+      val clusterId: Option[String] = try {\n+        Some(YarnConfiguration.getClusterId(yarnConf))\n+      } catch {\n+        case _: HadoopIllegalArgumentException => None\n+      }\n+\n+      val httpAddress = System.getenv(Environment.NM_HOST.name()) +\n+        \":\" + System.getenv(Environment.NM_HTTP_PORT.name())\n+\n+      // lookup appropriate http scheme for container log urls\n+      val yarnHttpPolicy = yarnConf.get(\n+        YarnConfiguration.YARN_HTTP_POLICY_KEY,\n+        YarnConfiguration.YARN_HTTP_POLICY_DEFAULT\n+      )\n+      val user = Utils.getCurrentUserName()\n+      val httpScheme = if (yarnHttpPolicy == \"HTTPS_ONLY\") \"https://\" else \"http://\"\n+\n+      attributes = Some(Map(\n+        \"HTTP_SCHEME\" -> httpScheme,\n+        \"NODE_HTTP_ADDRESS\" -> httpAddress,\n+        \"CLUSTER_ID\" -> clusterId.getOrElse(\"\"),\n+        \"CONTAINER_ID\" -> ConverterUtils.toString(containerId),\n+        \"USER\" -> user,\n+        \"LOG_FILES\" -> \"stderr,stdout\"\n+      ))\n+    } catch {\n+      case e: Exception =>\n+        logInfo(\"Error while retrieving attributes on driver, so driver logs will not \" +\n+          \"be replaced with custom log pattern\", e)\n+    }\n+    attributes"
  }],
  "prId": 23260
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Can this logic somehow be in a helper method so that both the driver and executor code can call it? They seem rather similar.",
    "commit": "2d0480239a4eea655b95a521ac71ed44482acde7",
    "createdAt": "2019-01-25T01:03:40Z",
    "diffHunk": "@@ -64,4 +66,41 @@ private[spark] class YarnClusterSchedulerBackend(\n     }\n     driverLogs\n   }\n+\n+  override def getDriverAttributes: Option[Map[String, String]] = {",
    "line": 48
  }],
  "prId": 23260
}]