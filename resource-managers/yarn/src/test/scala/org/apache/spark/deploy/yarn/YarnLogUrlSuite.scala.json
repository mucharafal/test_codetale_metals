[{
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "nit: double-indent (4 spaces) the continuation line",
    "commit": "2d0480239a4eea655b95a521ac71ed44482acde7",
    "createdAt": "2018-12-11T16:27:19Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class YarnLogUrlSuite extends SparkFunSuite {\n+\n+  private val testHttpScheme = \"https://\"\n+  private val testNodeHttpAddress = \"nodeManager:1234\"\n+  private val testContainerId = \"testContainer\"\n+  private val testUser = \"testUser\"\n+  private val testEnvNameToFileNameMap = Map(\"TEST_ENV_STDOUT\" -> \"stdout\",\n+    \"TEST_ENV_STDERR\" -> \"stderr\")\n+\n+  test(\"Custom log URL - leverage all patterns, all values for patterns are available\") {\n+    val logUrlPattern = \"{{HttpScheme}}{{NodeHttpAddress}}/logs/clusters/{{ClusterId}}\" +\n+      \"/containers/{{ContainerId}}/users/{{User}}/files/{{FileName}}\"\n+\n+    val clusterId = Some(\"testCluster\")\n+\n+    val logUrls = ExecutorRunnable.buildLogUrls(logUrlPattern, testHttpScheme, testNodeHttpAddress,\n+      clusterId, testContainerId, testUser, testEnvNameToFileNameMap)\n+\n+    val expectedLogUrls = testEnvNameToFileNameMap.map { case (envName, fileName) =>\n+      envName -> (s\"$testHttpScheme$testNodeHttpAddress/logs/clusters/${clusterId.get}\" +\n+        s\"/containers/$testContainerId/users/$testUser/files/$fileName\")\n+    }\n+\n+    assert(logUrls === expectedLogUrls)\n+  }\n+\n+  test(\"Custom log URL - optional pattern is not used in log URL\") {\n+    // here {{ClusterId}} is excluded in this pattern\n+    val logUrlPattern = \"{{HttpScheme}}{{NodeHttpAddress}}/logs/containers/{{ContainerId}}\" +\n+      \"/users/{{User}}/files/{{FileName}}\"\n+\n+    // suppose the value of {{ClusterId}} pattern is not available\n+    val clusterId = None\n+\n+    // This should not throw an exception: the value for optional pattern is not available\n+    // but we also don't use the pattern in log URL.\n+    val logUrls = ExecutorRunnable.buildLogUrls(logUrlPattern, testHttpScheme, testNodeHttpAddress,\n+      clusterId, testContainerId, testUser, testEnvNameToFileNameMap)\n+\n+    val expectedLogUrls = testEnvNameToFileNameMap.map { case (envName, fileName) =>\n+      envName -> (s\"$testHttpScheme$testNodeHttpAddress/logs/containers/$testContainerId\" +\n+        s\"/users/$testUser/files/$fileName\")\n+    }\n+\n+    assert(logUrls === expectedLogUrls)\n+  }\n+\n+  test(\"Custom log URL - optional pattern is used in log URL but the value \" +\n+    \"is not present\") {"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Will address.",
    "commit": "2d0480239a4eea655b95a521ac71ed44482acde7",
    "createdAt": "2018-12-11T22:33:32Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class YarnLogUrlSuite extends SparkFunSuite {\n+\n+  private val testHttpScheme = \"https://\"\n+  private val testNodeHttpAddress = \"nodeManager:1234\"\n+  private val testContainerId = \"testContainer\"\n+  private val testUser = \"testUser\"\n+  private val testEnvNameToFileNameMap = Map(\"TEST_ENV_STDOUT\" -> \"stdout\",\n+    \"TEST_ENV_STDERR\" -> \"stderr\")\n+\n+  test(\"Custom log URL - leverage all patterns, all values for patterns are available\") {\n+    val logUrlPattern = \"{{HttpScheme}}{{NodeHttpAddress}}/logs/clusters/{{ClusterId}}\" +\n+      \"/containers/{{ContainerId}}/users/{{User}}/files/{{FileName}}\"\n+\n+    val clusterId = Some(\"testCluster\")\n+\n+    val logUrls = ExecutorRunnable.buildLogUrls(logUrlPattern, testHttpScheme, testNodeHttpAddress,\n+      clusterId, testContainerId, testUser, testEnvNameToFileNameMap)\n+\n+    val expectedLogUrls = testEnvNameToFileNameMap.map { case (envName, fileName) =>\n+      envName -> (s\"$testHttpScheme$testNodeHttpAddress/logs/clusters/${clusterId.get}\" +\n+        s\"/containers/$testContainerId/users/$testUser/files/$fileName\")\n+    }\n+\n+    assert(logUrls === expectedLogUrls)\n+  }\n+\n+  test(\"Custom log URL - optional pattern is not used in log URL\") {\n+    // here {{ClusterId}} is excluded in this pattern\n+    val logUrlPattern = \"{{HttpScheme}}{{NodeHttpAddress}}/logs/containers/{{ContainerId}}\" +\n+      \"/users/{{User}}/files/{{FileName}}\"\n+\n+    // suppose the value of {{ClusterId}} pattern is not available\n+    val clusterId = None\n+\n+    // This should not throw an exception: the value for optional pattern is not available\n+    // but we also don't use the pattern in log URL.\n+    val logUrls = ExecutorRunnable.buildLogUrls(logUrlPattern, testHttpScheme, testNodeHttpAddress,\n+      clusterId, testContainerId, testUser, testEnvNameToFileNameMap)\n+\n+    val expectedLogUrls = testEnvNameToFileNameMap.map { case (envName, fileName) =>\n+      envName -> (s\"$testHttpScheme$testNodeHttpAddress/logs/containers/$testContainerId\" +\n+        s\"/users/$testUser/files/$fileName\")\n+    }\n+\n+    assert(logUrls === expectedLogUrls)\n+  }\n+\n+  test(\"Custom log URL - optional pattern is used in log URL but the value \" +\n+    \"is not present\") {"
  }],
  "prId": 23260
}]