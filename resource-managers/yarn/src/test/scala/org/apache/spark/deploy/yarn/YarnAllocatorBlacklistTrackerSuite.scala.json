[{
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "shouldn't change this unless you are importing > 5?",
    "commit": "8062de82fdf2381e317421b645beb46c0eb3bb6b",
    "createdAt": "2019-01-27T00:19:48Z",
    "diffHunk": "@@ -25,7 +25,7 @@ import org.mockito.Mockito._\n import org.scalatest.{BeforeAndAfterEach, Matchers}\n \n import org.apache.spark.{SparkConf, SparkFunSuite}\n-import org.apache.spark.deploy.yarn.config.YARN_EXECUTOR_LAUNCH_BLACKLIST_ENABLED\n+import org.apache.spark.deploy.yarn.config._"
  }, {
    "author": {
      "login": "attilapiros"
    },
    "body": "Oh I see: line was longer than 100 but for imports this is allowed (but advised to avoid if possible). Thanks!",
    "commit": "8062de82fdf2381e317421b645beb46c0eb3bb6b",
    "createdAt": "2019-01-30T13:17:11Z",
    "diffHunk": "@@ -25,7 +25,7 @@ import org.mockito.Mockito._\n import org.scalatest.{BeforeAndAfterEach, Matchers}\n \n import org.apache.spark.{SparkConf, SparkFunSuite}\n-import org.apache.spark.deploy.yarn.config.YARN_EXECUTOR_LAUNCH_BLACKLIST_ENABLED\n+import org.apache.spark.deploy.yarn.config._"
  }],
  "prId": 23616
}, {
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "Just thinking aloud -- could this just be added to one of the other tests, eg. \"combining scheduler and allocation blacklist\"?  After the first check, the rest of this test doesn't seem distinct from the others, I'm not sure its worth having a separate test for it (harder to maintain redundant tests down the road if behavior changes, etc.)",
    "commit": "8062de82fdf2381e317421b645beb46c0eb3bb6b",
    "createdAt": "2019-02-11T21:14:37Z",
    "diffHunk": "@@ -137,4 +144,41 @@ class YarnAllocatorBlacklistTrackerSuite extends SparkFunSuite with Matchers\n     verify(amClientMock).updateBlacklist(Arrays.asList(\"host4\"), Collections.emptyList())\n     assert(yarnBlacklistTracker.isAllNodeBlacklisted === true)\n   }\n+\n+  test(\"test with initial blacklisting\") {\n+    sparkConf.set(YARN_EXECUTOR_INITIAL_BLACKLISTED_NODES, Seq(\"initial1\", \"initial2\"))\n+    val yarnBlacklistTracker = createYarnAllocatorBlacklistTracker(sparkConf)\n+    yarnBlacklistTracker.setSchedulerBlacklistedNodes(Set())"
  }, {
    "author": {
      "login": "attilapiros"
    },
    "body": "Sounds fine for me.",
    "commit": "8062de82fdf2381e317421b645beb46c0eb3bb6b",
    "createdAt": "2019-02-11T21:49:06Z",
    "diffHunk": "@@ -137,4 +144,41 @@ class YarnAllocatorBlacklistTrackerSuite extends SparkFunSuite with Matchers\n     verify(amClientMock).updateBlacklist(Arrays.asList(\"host4\"), Collections.emptyList())\n     assert(yarnBlacklistTracker.isAllNodeBlacklisted === true)\n   }\n+\n+  test(\"test with initial blacklisting\") {\n+    sparkConf.set(YARN_EXECUTOR_INITIAL_BLACKLISTED_NODES, Seq(\"initial1\", \"initial2\"))\n+    val yarnBlacklistTracker = createYarnAllocatorBlacklistTracker(sparkConf)\n+    yarnBlacklistTracker.setSchedulerBlacklistedNodes(Set())"
  }],
  "prId": 23616
}]