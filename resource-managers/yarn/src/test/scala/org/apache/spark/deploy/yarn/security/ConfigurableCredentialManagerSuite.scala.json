[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Could you leave comments for each deleted test case to explain what are the new location?",
    "commit": "e32afeeac95883138751c060a3ebfaf309e3d22f",
    "createdAt": "2017-05-19T17:52:57Z",
    "diffHunk": "@@ -45,106 +42,13 @@ class ConfigurableCredentialManagerSuite extends SparkFunSuite with Matchers wit\n     super.afterAll()\n   }\n \n-  test(\"Correctly load default credential providers\") {\n-    credentialManager = new ConfigurableCredentialManager(sparkConf, hadoopConf)\n+  test(\"Correctly load YARNHadoopFSCredentialProvider\") {\n+    credentialManager = new YARNConfigurableCredentialManager(sparkConf, hadoopConf)\n \n-    credentialManager.getServiceCredentialProvider(\"hadoopfs\") should not be (None)\n-    credentialManager.getServiceCredentialProvider(\"hbase\") should not be (None)\n-    credentialManager.getServiceCredentialProvider(\"hive\") should not be (None)\n+    assert(credentialManager\n+      .getServiceCredentialProvider(\"hadoopfs\")\n+      .get\n+      .isInstanceOf[YARNHadoopFSCredentialProvider])\n   }\n \n-  test(\"disable hive credential provider\") {\n-    sparkConf.set(\"spark.yarn.security.credentials.hive.enabled\", \"false\")\n-    credentialManager = new ConfigurableCredentialManager(sparkConf, hadoopConf)\n-\n-    credentialManager.getServiceCredentialProvider(\"hadoopfs\") should not be (None)\n-    credentialManager.getServiceCredentialProvider(\"hbase\") should not be (None)\n-    credentialManager.getServiceCredentialProvider(\"hive\") should be (None)\n-  }\n-\n-  test(\"using deprecated configurations\") {\n-    sparkConf.set(\"spark.yarn.security.tokens.hadoopfs.enabled\", \"false\")\n-    sparkConf.set(\"spark.yarn.security.tokens.hive.enabled\", \"false\")\n-    credentialManager = new ConfigurableCredentialManager(sparkConf, hadoopConf)\n-\n-    credentialManager.getServiceCredentialProvider(\"hadoopfs\") should be (None)\n-    credentialManager.getServiceCredentialProvider(\"hive\") should be (None)\n-    credentialManager.getServiceCredentialProvider(\"test\") should not be (None)\n-    credentialManager.getServiceCredentialProvider(\"hbase\") should not be (None)\n-  }\n-\n-  test(\"verify obtaining credentials from provider\") {\n-    credentialManager = new ConfigurableCredentialManager(sparkConf, hadoopConf)\n-    val creds = new Credentials()\n-\n-    // Tokens can only be obtained from TestTokenProvider, for hdfs, hbase and hive tokens cannot\n-    // be obtained.\n-    credentialManager.obtainCredentials(hadoopConf, creds)\n-    val tokens = creds.getAllTokens\n-    tokens.size() should be (1)\n-    tokens.iterator().next().getService should be (new Text(\"test\"))\n-  }\n-\n-  test(\"verify getting credential renewal info\") {\n-    credentialManager = new ConfigurableCredentialManager(sparkConf, hadoopConf)\n-    val creds = new Credentials()\n-\n-    val testCredentialProvider = credentialManager.getServiceCredentialProvider(\"test\").get\n-      .asInstanceOf[TestCredentialProvider]\n-    // Only TestTokenProvider can get the time of next token renewal\n-    val nextRenewal = credentialManager.obtainCredentials(hadoopConf, creds)\n-    nextRenewal should be (testCredentialProvider.timeOfNextTokenRenewal)\n-  }\n-\n-  test(\"obtain tokens For HiveMetastore\") {\n-    val hadoopConf = new Configuration()\n-    hadoopConf.set(\"hive.metastore.kerberos.principal\", \"bob\")\n-    // thrift picks up on port 0 and bails out, without trying to talk to endpoint\n-    hadoopConf.set(\"hive.metastore.uris\", \"http://localhost:0\")\n-\n-    val hiveCredentialProvider = new HiveCredentialProvider()\n-    val credentials = new Credentials()\n-    hiveCredentialProvider.obtainCredentials(hadoopConf, sparkConf, credentials)\n-\n-    credentials.getAllTokens.size() should be (0)\n-  }\n-\n-  test(\"Obtain tokens For HBase\") {\n-    val hadoopConf = new Configuration()\n-    hadoopConf.set(\"hbase.security.authentication\", \"kerberos\")\n-\n-    val hbaseTokenProvider = new HBaseCredentialProvider()\n-    val creds = new Credentials()\n-    hbaseTokenProvider.obtainCredentials(hadoopConf, sparkConf, creds)\n-\n-    creds.getAllTokens.size should be (0)\n-  }\n-}\n-\n-class TestCredentialProvider extends ServiceCredentialProvider {\n-  val tokenRenewalInterval = 86400 * 1000L\n-  var timeOfNextTokenRenewal = 0L\n-\n-  override def serviceName: String = \"test\"\n-\n-  override def credentialsRequired(conf: Configuration): Boolean = true\n-\n-  override def obtainCredentials(\n-      hadoopConf: Configuration,\n-      sparkConf: SparkConf,\n-      creds: Credentials): Option[Long] = {\n-    if (creds == null) {\n-      // Guard out other unit test failures.\n-      return None\n-    }\n-\n-    val emptyToken = new Token()\n-    emptyToken.setService(new Text(\"test\"))\n-    creds.addToken(emptyToken.getService, emptyToken)\n-\n-    val currTime = System.currentTimeMillis()\n-    timeOfNextTokenRenewal = (currTime - currTime % tokenRenewalInterval) + tokenRenewalInterval\n-\n-    Some(timeOfNextTokenRenewal)\n-  }",
    "line": 130
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "Sure.  I'll come back to all of your requests once #17723 gets merged.",
    "commit": "e32afeeac95883138751c060a3ebfaf309e3d22f",
    "createdAt": "2017-05-19T18:13:31Z",
    "diffHunk": "@@ -45,106 +42,13 @@ class ConfigurableCredentialManagerSuite extends SparkFunSuite with Matchers wit\n     super.afterAll()\n   }\n \n-  test(\"Correctly load default credential providers\") {\n-    credentialManager = new ConfigurableCredentialManager(sparkConf, hadoopConf)\n+  test(\"Correctly load YARNHadoopFSCredentialProvider\") {\n+    credentialManager = new YARNConfigurableCredentialManager(sparkConf, hadoopConf)\n \n-    credentialManager.getServiceCredentialProvider(\"hadoopfs\") should not be (None)\n-    credentialManager.getServiceCredentialProvider(\"hbase\") should not be (None)\n-    credentialManager.getServiceCredentialProvider(\"hive\") should not be (None)\n+    assert(credentialManager\n+      .getServiceCredentialProvider(\"hadoopfs\")\n+      .get\n+      .isInstanceOf[YARNHadoopFSCredentialProvider])\n   }\n \n-  test(\"disable hive credential provider\") {\n-    sparkConf.set(\"spark.yarn.security.credentials.hive.enabled\", \"false\")\n-    credentialManager = new ConfigurableCredentialManager(sparkConf, hadoopConf)\n-\n-    credentialManager.getServiceCredentialProvider(\"hadoopfs\") should not be (None)\n-    credentialManager.getServiceCredentialProvider(\"hbase\") should not be (None)\n-    credentialManager.getServiceCredentialProvider(\"hive\") should be (None)\n-  }\n-\n-  test(\"using deprecated configurations\") {\n-    sparkConf.set(\"spark.yarn.security.tokens.hadoopfs.enabled\", \"false\")\n-    sparkConf.set(\"spark.yarn.security.tokens.hive.enabled\", \"false\")\n-    credentialManager = new ConfigurableCredentialManager(sparkConf, hadoopConf)\n-\n-    credentialManager.getServiceCredentialProvider(\"hadoopfs\") should be (None)\n-    credentialManager.getServiceCredentialProvider(\"hive\") should be (None)\n-    credentialManager.getServiceCredentialProvider(\"test\") should not be (None)\n-    credentialManager.getServiceCredentialProvider(\"hbase\") should not be (None)\n-  }\n-\n-  test(\"verify obtaining credentials from provider\") {\n-    credentialManager = new ConfigurableCredentialManager(sparkConf, hadoopConf)\n-    val creds = new Credentials()\n-\n-    // Tokens can only be obtained from TestTokenProvider, for hdfs, hbase and hive tokens cannot\n-    // be obtained.\n-    credentialManager.obtainCredentials(hadoopConf, creds)\n-    val tokens = creds.getAllTokens\n-    tokens.size() should be (1)\n-    tokens.iterator().next().getService should be (new Text(\"test\"))\n-  }\n-\n-  test(\"verify getting credential renewal info\") {\n-    credentialManager = new ConfigurableCredentialManager(sparkConf, hadoopConf)\n-    val creds = new Credentials()\n-\n-    val testCredentialProvider = credentialManager.getServiceCredentialProvider(\"test\").get\n-      .asInstanceOf[TestCredentialProvider]\n-    // Only TestTokenProvider can get the time of next token renewal\n-    val nextRenewal = credentialManager.obtainCredentials(hadoopConf, creds)\n-    nextRenewal should be (testCredentialProvider.timeOfNextTokenRenewal)\n-  }\n-\n-  test(\"obtain tokens For HiveMetastore\") {\n-    val hadoopConf = new Configuration()\n-    hadoopConf.set(\"hive.metastore.kerberos.principal\", \"bob\")\n-    // thrift picks up on port 0 and bails out, without trying to talk to endpoint\n-    hadoopConf.set(\"hive.metastore.uris\", \"http://localhost:0\")\n-\n-    val hiveCredentialProvider = new HiveCredentialProvider()\n-    val credentials = new Credentials()\n-    hiveCredentialProvider.obtainCredentials(hadoopConf, sparkConf, credentials)\n-\n-    credentials.getAllTokens.size() should be (0)\n-  }\n-\n-  test(\"Obtain tokens For HBase\") {\n-    val hadoopConf = new Configuration()\n-    hadoopConf.set(\"hbase.security.authentication\", \"kerberos\")\n-\n-    val hbaseTokenProvider = new HBaseCredentialProvider()\n-    val creds = new Credentials()\n-    hbaseTokenProvider.obtainCredentials(hadoopConf, sparkConf, creds)\n-\n-    creds.getAllTokens.size should be (0)\n-  }\n-}\n-\n-class TestCredentialProvider extends ServiceCredentialProvider {\n-  val tokenRenewalInterval = 86400 * 1000L\n-  var timeOfNextTokenRenewal = 0L\n-\n-  override def serviceName: String = \"test\"\n-\n-  override def credentialsRequired(conf: Configuration): Boolean = true\n-\n-  override def obtainCredentials(\n-      hadoopConf: Configuration,\n-      sparkConf: SparkConf,\n-      creds: Credentials): Option[Long] = {\n-    if (creds == null) {\n-      // Guard out other unit test failures.\n-      return None\n-    }\n-\n-    val emptyToken = new Token()\n-    emptyToken.setService(new Text(\"test\"))\n-    creds.addToken(emptyToken.getService, emptyToken)\n-\n-    val currTime = System.currentTimeMillis()\n-    timeOfNextTokenRenewal = (currTime - currTime % tokenRenewalInterval) + tokenRenewalInterval\n-\n-    Some(timeOfNextTokenRenewal)\n-  }",
    "line": 130
  }],
  "prId": 17665
}]