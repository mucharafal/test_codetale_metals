[{
  "comments": [{
    "author": {
      "login": "jerryshao"
    },
    "body": "Just wondering if we could add some yarn side UT to verify the container memory size, rather than verifying the correctness of off-heap configuration.",
    "commit": "bb2948811e42eba2b99a1d118a5eb4559cae57bb",
    "createdAt": "2019-08-08T09:56:35Z",
    "diffHunk": "@@ -140,4 +141,31 @@ class YarnSparkHadoopUtilSuite extends SparkFunSuite with Matchers with Logging\n     }\n \n   }\n+\n+  test(\"executorOffHeapMemorySizeAsMb when MEMORY_OFFHEAP_ENABLED is false\") {\n+    val executorOffHeapMemory = YarnSparkHadoopUtil.executorOffHeapMemorySizeAsMb(new SparkConf())\n+    assert(executorOffHeapMemory == 0)\n+  }\n+\n+  test(\"executorOffHeapMemorySizeAsMb when MEMORY_OFFHEAP_ENABLED is true\") {\n+    val offHeapMemoryInMB = 50\n+    val offHeapMemory: Long = offHeapMemoryInMB * 1024 * 1024\n+    val sparkConf = new SparkConf()\n+      .set(MEMORY_OFFHEAP_ENABLED, true)\n+      .set(MEMORY_OFFHEAP_SIZE, offHeapMemory)\n+    val executorOffHeapMemory = YarnSparkHadoopUtil.executorOffHeapMemorySizeAsMb(sparkConf)\n+    assert(executorOffHeapMemory == offHeapMemoryInMB)\n+  }\n+\n+  test(\"executorMemoryOverhead when MEMORY_OFFHEAP_ENABLED is true, \" +",
    "line": 28
  }, {
    "author": {
      "login": "LuciferYang"
    },
    "body": "ok ~ I'll try to add it.",
    "commit": "bb2948811e42eba2b99a1d118a5eb4559cae57bb",
    "createdAt": "2019-08-08T11:36:48Z",
    "diffHunk": "@@ -140,4 +141,31 @@ class YarnSparkHadoopUtilSuite extends SparkFunSuite with Matchers with Logging\n     }\n \n   }\n+\n+  test(\"executorOffHeapMemorySizeAsMb when MEMORY_OFFHEAP_ENABLED is false\") {\n+    val executorOffHeapMemory = YarnSparkHadoopUtil.executorOffHeapMemorySizeAsMb(new SparkConf())\n+    assert(executorOffHeapMemory == 0)\n+  }\n+\n+  test(\"executorOffHeapMemorySizeAsMb when MEMORY_OFFHEAP_ENABLED is true\") {\n+    val offHeapMemoryInMB = 50\n+    val offHeapMemory: Long = offHeapMemoryInMB * 1024 * 1024\n+    val sparkConf = new SparkConf()\n+      .set(MEMORY_OFFHEAP_ENABLED, true)\n+      .set(MEMORY_OFFHEAP_SIZE, offHeapMemory)\n+    val executorOffHeapMemory = YarnSparkHadoopUtil.executorOffHeapMemorySizeAsMb(sparkConf)\n+    assert(executorOffHeapMemory == offHeapMemoryInMB)\n+  }\n+\n+  test(\"executorMemoryOverhead when MEMORY_OFFHEAP_ENABLED is true, \" +",
    "line": 28
  }, {
    "author": {
      "login": "LuciferYang"
    },
    "body": "Add a new test suite `SPARK-28577#YarnAllocator.resource.memory should include offHeapSize when offHeapEnabled is true.`  in YarnAllocatorSuite",
    "commit": "bb2948811e42eba2b99a1d118a5eb4559cae57bb",
    "createdAt": "2019-08-08T12:34:56Z",
    "diffHunk": "@@ -140,4 +141,31 @@ class YarnSparkHadoopUtilSuite extends SparkFunSuite with Matchers with Logging\n     }\n \n   }\n+\n+  test(\"executorOffHeapMemorySizeAsMb when MEMORY_OFFHEAP_ENABLED is false\") {\n+    val executorOffHeapMemory = YarnSparkHadoopUtil.executorOffHeapMemorySizeAsMb(new SparkConf())\n+    assert(executorOffHeapMemory == 0)\n+  }\n+\n+  test(\"executorOffHeapMemorySizeAsMb when MEMORY_OFFHEAP_ENABLED is true\") {\n+    val offHeapMemoryInMB = 50\n+    val offHeapMemory: Long = offHeapMemoryInMB * 1024 * 1024\n+    val sparkConf = new SparkConf()\n+      .set(MEMORY_OFFHEAP_ENABLED, true)\n+      .set(MEMORY_OFFHEAP_SIZE, offHeapMemory)\n+    val executorOffHeapMemory = YarnSparkHadoopUtil.executorOffHeapMemorySizeAsMb(sparkConf)\n+    assert(executorOffHeapMemory == offHeapMemoryInMB)\n+  }\n+\n+  test(\"executorMemoryOverhead when MEMORY_OFFHEAP_ENABLED is true, \" +",
    "line": 28
  }],
  "prId": 25309
}]