[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "This is an example of where it is more canonical to use the postfix ops syntax `allResourceTypes ++= ...`",
    "commit": "dc2e382ff1e468f7e54e14a12fdfcf983b70ea0f",
    "createdAt": "2018-09-18T15:23:08Z",
    "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ListBuffer\n+\n+import org.apache.hadoop.yarn.api.records.Resource\n+import org.junit.Assert\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+object TestYarnResourceTypeHelper extends Logging {\n+  def initializeResourceTypes(resourceTypes: List[String]): Unit = {\n+    if (!ResourceTypeHelper.isYarnResourceTypesAvailable()) {\n+      throw new IllegalStateException(\"initializeResourceTypes() should not be invoked \" +\n+        \"since YARN resource types is not available because of old Hadoop version!\" )\n+    }\n+\n+    val allResourceTypes = new ListBuffer[AnyRef]\n+    val defaultResourceTypes = List(\n+      createResourceTypeInfo(\"memory-mb\"),\n+      createResourceTypeInfo(\"vcores\"))\n+    val customResourceTypes = resourceTypes.map(rt => createResourceTypeInfo(rt))\n+\n+    allResourceTypes.++=(defaultResourceTypes)"
  }, {
    "author": {
      "login": "szilard-nemeth"
    },
    "body": "fixed",
    "commit": "dc2e382ff1e468f7e54e14a12fdfcf983b70ea0f",
    "createdAt": "2018-09-19T11:24:23Z",
    "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ListBuffer\n+\n+import org.apache.hadoop.yarn.api.records.Resource\n+import org.junit.Assert\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+object TestYarnResourceTypeHelper extends Logging {\n+  def initializeResourceTypes(resourceTypes: List[String]): Unit = {\n+    if (!ResourceTypeHelper.isYarnResourceTypesAvailable()) {\n+      throw new IllegalStateException(\"initializeResourceTypes() should not be invoked \" +\n+        \"since YARN resource types is not available because of old Hadoop version!\" )\n+    }\n+\n+    val allResourceTypes = new ListBuffer[AnyRef]\n+    val defaultResourceTypes = List(\n+      createResourceTypeInfo(\"memory-mb\"),\n+      createResourceTypeInfo(\"vcores\"))\n+    val customResourceTypes = resourceTypes.map(rt => createResourceTypeInfo(rt))\n+\n+    allResourceTypes.++=(defaultResourceTypes)"
  }],
  "prId": 20761
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Nit: `java.util.List[_]`? the generic type won't mean anything. Not sure if the compiler warns on this.",
    "commit": "dc2e382ff1e468f7e54e14a12fdfcf983b70ea0f",
    "createdAt": "2018-09-18T15:23:52Z",
    "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ListBuffer\n+\n+import org.apache.hadoop.yarn.api.records.Resource\n+import org.junit.Assert\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+object TestYarnResourceTypeHelper extends Logging {\n+  def initializeResourceTypes(resourceTypes: List[String]): Unit = {\n+    if (!ResourceTypeHelper.isYarnResourceTypesAvailable()) {\n+      throw new IllegalStateException(\"initializeResourceTypes() should not be invoked \" +\n+        \"since YARN resource types is not available because of old Hadoop version!\" )\n+    }\n+\n+    val allResourceTypes = new ListBuffer[AnyRef]\n+    val defaultResourceTypes = List(\n+      createResourceTypeInfo(\"memory-mb\"),\n+      createResourceTypeInfo(\"vcores\"))\n+    val customResourceTypes = resourceTypes.map(rt => createResourceTypeInfo(rt))\n+\n+    allResourceTypes.++=(defaultResourceTypes)\n+    allResourceTypes.++=(customResourceTypes)\n+\n+    reinitializeResources(allResourceTypes)\n+  }\n+\n+  private def createResourceTypeInfo(resourceName: String): AnyRef = {\n+    val resTypeInfoClass = Utils.classForName(\"org.apache.hadoop.yarn.api.records.ResourceTypeInfo\")\n+    val resTypeInfoNewInstanceMethod = resTypeInfoClass.getMethod(\"newInstance\", classOf[String])\n+    resTypeInfoNewInstanceMethod.invoke(null, resourceName)\n+  }\n+\n+  private def reinitializeResources(resourceTypes: ListBuffer[AnyRef]): Unit = {\n+    val resourceUtilsClass =\n+      Utils.classForName(\"org.apache.hadoop.yarn.util.resource.ResourceUtils\")\n+    val reinitializeResourcesMethod = resourceUtilsClass.getMethod(\"reinitializeResources\",\n+      classOf[java.util.List[AnyRef]])"
  }, {
    "author": {
      "login": "szilard-nemeth"
    },
    "body": "As I remember, this was the only way to properly derefernece the method via reflection, so I would keep the type as it is now.",
    "commit": "dc2e382ff1e468f7e54e14a12fdfcf983b70ea0f",
    "createdAt": "2018-09-19T11:26:06Z",
    "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ListBuffer\n+\n+import org.apache.hadoop.yarn.api.records.Resource\n+import org.junit.Assert\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+object TestYarnResourceTypeHelper extends Logging {\n+  def initializeResourceTypes(resourceTypes: List[String]): Unit = {\n+    if (!ResourceTypeHelper.isYarnResourceTypesAvailable()) {\n+      throw new IllegalStateException(\"initializeResourceTypes() should not be invoked \" +\n+        \"since YARN resource types is not available because of old Hadoop version!\" )\n+    }\n+\n+    val allResourceTypes = new ListBuffer[AnyRef]\n+    val defaultResourceTypes = List(\n+      createResourceTypeInfo(\"memory-mb\"),\n+      createResourceTypeInfo(\"vcores\"))\n+    val customResourceTypes = resourceTypes.map(rt => createResourceTypeInfo(rt))\n+\n+    allResourceTypes.++=(defaultResourceTypes)\n+    allResourceTypes.++=(customResourceTypes)\n+\n+    reinitializeResources(allResourceTypes)\n+  }\n+\n+  private def createResourceTypeInfo(resourceName: String): AnyRef = {\n+    val resTypeInfoClass = Utils.classForName(\"org.apache.hadoop.yarn.api.records.ResourceTypeInfo\")\n+    val resTypeInfoNewInstanceMethod = resTypeInfoClass.getMethod(\"newInstance\", classOf[String])\n+    resTypeInfoNewInstanceMethod.invoke(null, resourceName)\n+  }\n+\n+  private def reinitializeResources(resourceTypes: ListBuffer[AnyRef]): Unit = {\n+    val resourceUtilsClass =\n+      Utils.classForName(\"org.apache.hadoop.yarn.util.resource.ResourceUtils\")\n+    val reinitializeResourcesMethod = resourceUtilsClass.getMethod(\"reinitializeResources\",\n+      classOf[java.util.List[AnyRef]])"
  }],
  "prId": 20761
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Why not just let the exception fly to fail the test? it gives more detail.",
    "commit": "dc2e382ff1e468f7e54e14a12fdfcf983b70ea0f",
    "createdAt": "2018-09-18T15:24:23Z",
    "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ListBuffer\n+\n+import org.apache.hadoop.yarn.api.records.Resource\n+import org.junit.Assert\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+object TestYarnResourceTypeHelper extends Logging {\n+  def initializeResourceTypes(resourceTypes: List[String]): Unit = {\n+    if (!ResourceTypeHelper.isYarnResourceTypesAvailable()) {\n+      throw new IllegalStateException(\"initializeResourceTypes() should not be invoked \" +\n+        \"since YARN resource types is not available because of old Hadoop version!\" )\n+    }\n+\n+    val allResourceTypes = new ListBuffer[AnyRef]\n+    val defaultResourceTypes = List(\n+      createResourceTypeInfo(\"memory-mb\"),\n+      createResourceTypeInfo(\"vcores\"))\n+    val customResourceTypes = resourceTypes.map(rt => createResourceTypeInfo(rt))\n+\n+    allResourceTypes.++=(defaultResourceTypes)\n+    allResourceTypes.++=(customResourceTypes)\n+\n+    reinitializeResources(allResourceTypes)\n+  }\n+\n+  private def createResourceTypeInfo(resourceName: String): AnyRef = {\n+    val resTypeInfoClass = Utils.classForName(\"org.apache.hadoop.yarn.api.records.ResourceTypeInfo\")\n+    val resTypeInfoNewInstanceMethod = resTypeInfoClass.getMethod(\"newInstance\", classOf[String])\n+    resTypeInfoNewInstanceMethod.invoke(null, resourceName)\n+  }\n+\n+  private def reinitializeResources(resourceTypes: ListBuffer[AnyRef]): Unit = {\n+    val resourceUtilsClass =\n+      Utils.classForName(\"org.apache.hadoop.yarn.util.resource.ResourceUtils\")\n+    val reinitializeResourcesMethod = resourceUtilsClass.getMethod(\"reinitializeResources\",\n+      classOf[java.util.List[AnyRef]])\n+    try {\n+      reinitializeResourcesMethod.invoke(null, resourceTypes.asJava)\n+    } catch {\n+      case e: Exception =>"
  }, {
    "author": {
      "login": "szilard-nemeth"
    },
    "body": "Good point, fixed!",
    "commit": "dc2e382ff1e468f7e54e14a12fdfcf983b70ea0f",
    "createdAt": "2018-09-19T11:27:00Z",
    "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ListBuffer\n+\n+import org.apache.hadoop.yarn.api.records.Resource\n+import org.junit.Assert\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+object TestYarnResourceTypeHelper extends Logging {\n+  def initializeResourceTypes(resourceTypes: List[String]): Unit = {\n+    if (!ResourceTypeHelper.isYarnResourceTypesAvailable()) {\n+      throw new IllegalStateException(\"initializeResourceTypes() should not be invoked \" +\n+        \"since YARN resource types is not available because of old Hadoop version!\" )\n+    }\n+\n+    val allResourceTypes = new ListBuffer[AnyRef]\n+    val defaultResourceTypes = List(\n+      createResourceTypeInfo(\"memory-mb\"),\n+      createResourceTypeInfo(\"vcores\"))\n+    val customResourceTypes = resourceTypes.map(rt => createResourceTypeInfo(rt))\n+\n+    allResourceTypes.++=(defaultResourceTypes)\n+    allResourceTypes.++=(customResourceTypes)\n+\n+    reinitializeResources(allResourceTypes)\n+  }\n+\n+  private def createResourceTypeInfo(resourceName: String): AnyRef = {\n+    val resTypeInfoClass = Utils.classForName(\"org.apache.hadoop.yarn.api.records.ResourceTypeInfo\")\n+    val resTypeInfoNewInstanceMethod = resTypeInfoClass.getMethod(\"newInstance\", classOf[String])\n+    resTypeInfoNewInstanceMethod.invoke(null, resourceName)\n+  }\n+\n+  private def reinitializeResources(resourceTypes: ListBuffer[AnyRef]): Unit = {\n+    val resourceUtilsClass =\n+      Utils.classForName(\"org.apache.hadoop.yarn.util.resource.ResourceUtils\")\n+    val reinitializeResourcesMethod = resourceUtilsClass.getMethod(\"reinitializeResources\",\n+      classOf[java.util.List[AnyRef]])\n+    try {\n+      reinitializeResourcesMethod.invoke(null, resourceTypes.asJava)\n+    } catch {\n+      case e: Exception =>"
  }],
  "prId": 20761
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Nit: is it clearer to cast above right where you invoke the method?",
    "commit": "dc2e382ff1e468f7e54e14a12fdfcf983b70ea0f",
    "createdAt": "2018-09-18T15:24:49Z",
    "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ListBuffer\n+\n+import org.apache.hadoop.yarn.api.records.Resource\n+import org.junit.Assert\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+object TestYarnResourceTypeHelper extends Logging {\n+  def initializeResourceTypes(resourceTypes: List[String]): Unit = {\n+    if (!ResourceTypeHelper.isYarnResourceTypesAvailable()) {\n+      throw new IllegalStateException(\"initializeResourceTypes() should not be invoked \" +\n+        \"since YARN resource types is not available because of old Hadoop version!\" )\n+    }\n+\n+    val allResourceTypes = new ListBuffer[AnyRef]\n+    val defaultResourceTypes = List(\n+      createResourceTypeInfo(\"memory-mb\"),\n+      createResourceTypeInfo(\"vcores\"))\n+    val customResourceTypes = resourceTypes.map(rt => createResourceTypeInfo(rt))\n+\n+    allResourceTypes.++=(defaultResourceTypes)\n+    allResourceTypes.++=(customResourceTypes)\n+\n+    reinitializeResources(allResourceTypes)\n+  }\n+\n+  private def createResourceTypeInfo(resourceName: String): AnyRef = {\n+    val resTypeInfoClass = Utils.classForName(\"org.apache.hadoop.yarn.api.records.ResourceTypeInfo\")\n+    val resTypeInfoNewInstanceMethod = resTypeInfoClass.getMethod(\"newInstance\", classOf[String])\n+    resTypeInfoNewInstanceMethod.invoke(null, resourceName)\n+  }\n+\n+  private def reinitializeResources(resourceTypes: ListBuffer[AnyRef]): Unit = {\n+    val resourceUtilsClass =\n+      Utils.classForName(\"org.apache.hadoop.yarn.util.resource.ResourceUtils\")\n+    val reinitializeResourcesMethod = resourceUtilsClass.getMethod(\"reinitializeResources\",\n+      classOf[java.util.List[AnyRef]])\n+    try {\n+      reinitializeResourcesMethod.invoke(null, resourceTypes.asJava)\n+    } catch {\n+      case e: Exception =>\n+        e.printStackTrace()\n+        Assert.fail(\"resource map initialization failed\")\n+    }\n+  }\n+\n+  def getResourceTypeValue(res: Resource, name: String): AnyRef = {\n+    val resourceInformation: AnyRef = getResourceInformation(res, name)\n+    invokeMethod(resourceInformation, \"getValue\")\n+  }\n+\n+  def getResourceInformationByName(res: Resource, nameParam: String): ResourceInformation = {\n+    val resourceInformation: AnyRef = getResourceInformation(res, nameParam)\n+    val name = invokeMethod(resourceInformation, \"getName\")\n+    val value = invokeMethod(resourceInformation, \"getValue\")\n+    val units = invokeMethod(resourceInformation, \"getUnits\")\n+    new ResourceInformation(\n+      name.asInstanceOf[String],"
  }, {
    "author": {
      "login": "szilard-nemeth"
    },
    "body": "Good point, fixed.",
    "commit": "dc2e382ff1e468f7e54e14a12fdfcf983b70ea0f",
    "createdAt": "2018-09-19T11:29:57Z",
    "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ListBuffer\n+\n+import org.apache.hadoop.yarn.api.records.Resource\n+import org.junit.Assert\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+object TestYarnResourceTypeHelper extends Logging {\n+  def initializeResourceTypes(resourceTypes: List[String]): Unit = {\n+    if (!ResourceTypeHelper.isYarnResourceTypesAvailable()) {\n+      throw new IllegalStateException(\"initializeResourceTypes() should not be invoked \" +\n+        \"since YARN resource types is not available because of old Hadoop version!\" )\n+    }\n+\n+    val allResourceTypes = new ListBuffer[AnyRef]\n+    val defaultResourceTypes = List(\n+      createResourceTypeInfo(\"memory-mb\"),\n+      createResourceTypeInfo(\"vcores\"))\n+    val customResourceTypes = resourceTypes.map(rt => createResourceTypeInfo(rt))\n+\n+    allResourceTypes.++=(defaultResourceTypes)\n+    allResourceTypes.++=(customResourceTypes)\n+\n+    reinitializeResources(allResourceTypes)\n+  }\n+\n+  private def createResourceTypeInfo(resourceName: String): AnyRef = {\n+    val resTypeInfoClass = Utils.classForName(\"org.apache.hadoop.yarn.api.records.ResourceTypeInfo\")\n+    val resTypeInfoNewInstanceMethod = resTypeInfoClass.getMethod(\"newInstance\", classOf[String])\n+    resTypeInfoNewInstanceMethod.invoke(null, resourceName)\n+  }\n+\n+  private def reinitializeResources(resourceTypes: ListBuffer[AnyRef]): Unit = {\n+    val resourceUtilsClass =\n+      Utils.classForName(\"org.apache.hadoop.yarn.util.resource.ResourceUtils\")\n+    val reinitializeResourcesMethod = resourceUtilsClass.getMethod(\"reinitializeResources\",\n+      classOf[java.util.List[AnyRef]])\n+    try {\n+      reinitializeResourcesMethod.invoke(null, resourceTypes.asJava)\n+    } catch {\n+      case e: Exception =>\n+        e.printStackTrace()\n+        Assert.fail(\"resource map initialization failed\")\n+    }\n+  }\n+\n+  def getResourceTypeValue(res: Resource, name: String): AnyRef = {\n+    val resourceInformation: AnyRef = getResourceInformation(res, name)\n+    invokeMethod(resourceInformation, \"getValue\")\n+  }\n+\n+  def getResourceInformationByName(res: Resource, nameParam: String): ResourceInformation = {\n+    val resourceInformation: AnyRef = getResourceInformation(res, nameParam)\n+    val name = invokeMethod(resourceInformation, \"getName\")\n+    val value = invokeMethod(resourceInformation, \"getValue\")\n+    val units = invokeMethod(resourceInformation, \"getUnits\")\n+    new ResourceInformation(\n+      name.asInstanceOf[String],"
  }],
  "prId": 20761
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Can you add a comment about what is this class about? It looks odd, since it's not a test.",
    "commit": "dc2e382ff1e468f7e54e14a12fdfcf983b70ea0f",
    "createdAt": "2018-09-24T23:58:48Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ListBuffer\n+\n+import org.apache.hadoop.yarn.api.records.Resource\n+import org.junit.Assert\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+object TestYarnResourceTypeHelper extends Logging {"
  }, {
    "author": {
      "login": "szilard-nemeth"
    },
    "body": "This is intended to be a test helper class, used by many test classes.\r\nCan you suggest a better name or naming convention you normally use for these classes? Thanks!",
    "commit": "dc2e382ff1e468f7e54e14a12fdfcf983b70ea0f",
    "createdAt": "2018-10-02T04:01:58Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ListBuffer\n+\n+import org.apache.hadoop.yarn.api.records.Resource\n+import org.junit.Assert\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+object TestYarnResourceTypeHelper extends Logging {"
  }, {
    "author": {
      "login": "szilard-nemeth"
    },
    "body": "Renamed as you suggested in a later comment.",
    "commit": "dc2e382ff1e468f7e54e14a12fdfcf983b70ea0f",
    "createdAt": "2018-10-05T21:24:43Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ListBuffer\n+\n+import org.apache.hadoop.yarn.api.records.Resource\n+import org.junit.Assert\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+object TestYarnResourceTypeHelper extends Logging {"
  }],
  "prId": 20761
}]