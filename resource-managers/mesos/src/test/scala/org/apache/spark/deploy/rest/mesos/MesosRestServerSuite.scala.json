[{
  "comments": [{
    "author": {
      "login": "rvesse"
    },
    "body": "Can you add one more test that covers the behaviour where the overhead is set to a lower value than the minimum overhead?  \r\n\r\nIn which case your code should be selecting 384 as the minimum overhead",
    "commit": "c156dd73680f4a1416c97f9ae0290e381b606b7c",
    "createdAt": "2019-01-10T18:24:29Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest.mesos\n+\n+import javax.servlet.http.HttpServletResponse\n+\n+import org.scalatest.mockito.MockitoSugar\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.TestPrematureExit\n+import org.apache.spark.deploy.mesos.MesosDriverDescription\n+import org.apache.spark.deploy.rest.{CreateSubmissionRequest, CreateSubmissionResponse, SubmitRestProtocolMessage, SubmitRestProtocolResponse}\n+import org.apache.spark.internal.config\n+import org.apache.spark.scheduler.cluster.mesos.{MesosClusterPersistenceEngineFactory, MesosClusterScheduler}\n+\n+class MesosRestServerSuite extends SparkFunSuite\n+  with TestPrematureExit with MockitoSugar {\n+\n+  test(\"test default driver overhead memory\") {\n+    testOverheadMemory(new SparkConf(), 2384)\n+  }\n+\n+  test(\"test configured driver overhead memory\") {\n+    val conf = new SparkConf()\n+    conf.set(config.DRIVER_MEMORY_OVERHEAD.key, \"1000\")\n+    testOverheadMemory(conf, 3000)\n+  }\n+",
    "line": 47
  }, {
    "author": {
      "login": "devaraj-kavali"
    },
    "body": "if the overhead mem is set it takes the value as it is, when there is no value set then it takes max (0.10*driver_mem, 384). I have added test for the overhead factor.",
    "commit": "c156dd73680f4a1416c97f9ae0290e381b606b7c",
    "createdAt": "2019-01-11T20:01:53Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest.mesos\n+\n+import javax.servlet.http.HttpServletResponse\n+\n+import org.scalatest.mockito.MockitoSugar\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.TestPrematureExit\n+import org.apache.spark.deploy.mesos.MesosDriverDescription\n+import org.apache.spark.deploy.rest.{CreateSubmissionRequest, CreateSubmissionResponse, SubmitRestProtocolMessage, SubmitRestProtocolResponse}\n+import org.apache.spark.internal.config\n+import org.apache.spark.scheduler.cluster.mesos.{MesosClusterPersistenceEngineFactory, MesosClusterScheduler}\n+\n+class MesosRestServerSuite extends SparkFunSuite\n+  with TestPrematureExit with MockitoSugar {\n+\n+  test(\"test default driver overhead memory\") {\n+    testOverheadMemory(new SparkConf(), 2384)\n+  }\n+\n+  test(\"test configured driver overhead memory\") {\n+    val conf = new SparkConf()\n+    conf.set(config.DRIVER_MEMORY_OVERHEAD.key, \"1000\")\n+    testOverheadMemory(conf, 3000)\n+  }\n+",
    "line": 47
  }, {
    "author": {
      "login": "rvesse"
    },
    "body": "I was specifically asking about the case where it is explicitly configured with a low values e.g. `conf.set(config.DRIVER_MEMORY_OVERHEAD.key, \"10\")`\r\n\r\nIn which case they only get 10MB of overhead memory which I am not sure is the intent of your PR because I think you meant to always set a minimum?\r\n",
    "commit": "c156dd73680f4a1416c97f9ae0290e381b606b7c",
    "createdAt": "2019-01-14T09:58:37Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest.mesos\n+\n+import javax.servlet.http.HttpServletResponse\n+\n+import org.scalatest.mockito.MockitoSugar\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.TestPrematureExit\n+import org.apache.spark.deploy.mesos.MesosDriverDescription\n+import org.apache.spark.deploy.rest.{CreateSubmissionRequest, CreateSubmissionResponse, SubmitRestProtocolMessage, SubmitRestProtocolResponse}\n+import org.apache.spark.internal.config\n+import org.apache.spark.scheduler.cluster.mesos.{MesosClusterPersistenceEngineFactory, MesosClusterScheduler}\n+\n+class MesosRestServerSuite extends SparkFunSuite\n+  with TestPrematureExit with MockitoSugar {\n+\n+  test(\"test default driver overhead memory\") {\n+    testOverheadMemory(new SparkConf(), 2384)\n+  }\n+\n+  test(\"test configured driver overhead memory\") {\n+    val conf = new SparkConf()\n+    conf.set(config.DRIVER_MEMORY_OVERHEAD.key, \"1000\")\n+    testOverheadMemory(conf, 3000)\n+  }\n+",
    "line": 47
  }, {
    "author": {
      "login": "devaraj-kavali"
    },
    "body": "Sorry If I did not understand you correctly.\r\n\r\nHere the intent of PR is to take the value whatever is set for `config.DRIVER_MEMORY_OVERHEAD.key`, if there is no value set for `config.DRIVER_MEMORY_OVERHEAD.key` then take the max (0.10*driver_mem, 384). \r\n\r\nHaving another test with `conf.set(config.DRIVER_MEMORY_OVERHEAD.key, \"10\")` doesn't make the difference with the existing one `conf.set(config.DRIVER_MEMORY_OVERHEAD.key, \"1000\")` since it is going to take the value whatever set.\r\n\r\nPlease let me know if it still doesn't make sense.",
    "commit": "c156dd73680f4a1416c97f9ae0290e381b606b7c",
    "createdAt": "2019-01-14T11:04:19Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest.mesos\n+\n+import javax.servlet.http.HttpServletResponse\n+\n+import org.scalatest.mockito.MockitoSugar\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.TestPrematureExit\n+import org.apache.spark.deploy.mesos.MesosDriverDescription\n+import org.apache.spark.deploy.rest.{CreateSubmissionRequest, CreateSubmissionResponse, SubmitRestProtocolMessage, SubmitRestProtocolResponse}\n+import org.apache.spark.internal.config\n+import org.apache.spark.scheduler.cluster.mesos.{MesosClusterPersistenceEngineFactory, MesosClusterScheduler}\n+\n+class MesosRestServerSuite extends SparkFunSuite\n+  with TestPrematureExit with MockitoSugar {\n+\n+  test(\"test default driver overhead memory\") {\n+    testOverheadMemory(new SparkConf(), 2384)\n+  }\n+\n+  test(\"test configured driver overhead memory\") {\n+    val conf = new SparkConf()\n+    conf.set(config.DRIVER_MEMORY_OVERHEAD.key, \"1000\")\n+    testOverheadMemory(conf, 3000)\n+  }\n+",
    "line": 47
  }, {
    "author": {
      "login": "rvesse"
    },
    "body": "Basically I was asking does it make sense to allow the user to specify a low value for this configuration i.e. by allowing users to do this are they going to break their applications?\r\n\r\nSince it cases where it is not set you automatically calculate a minimum value is there a also a minimum we should enforce regardless of what the user requests?\r\n\r\nAlso a related point, presumably I could also do something nonsensical like `conf.set(config.DRIVER_MEMORY_OVERHEAD.key, \"-1000\")` which I think would end up subtracting memory unless the config entry is configured to prevent negative values?",
    "commit": "c156dd73680f4a1416c97f9ae0290e381b606b7c",
    "createdAt": "2019-01-14T11:11:35Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest.mesos\n+\n+import javax.servlet.http.HttpServletResponse\n+\n+import org.scalatest.mockito.MockitoSugar\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.TestPrematureExit\n+import org.apache.spark.deploy.mesos.MesosDriverDescription\n+import org.apache.spark.deploy.rest.{CreateSubmissionRequest, CreateSubmissionResponse, SubmitRestProtocolMessage, SubmitRestProtocolResponse}\n+import org.apache.spark.internal.config\n+import org.apache.spark.scheduler.cluster.mesos.{MesosClusterPersistenceEngineFactory, MesosClusterScheduler}\n+\n+class MesosRestServerSuite extends SparkFunSuite\n+  with TestPrematureExit with MockitoSugar {\n+\n+  test(\"test default driver overhead memory\") {\n+    testOverheadMemory(new SparkConf(), 2384)\n+  }\n+\n+  test(\"test configured driver overhead memory\") {\n+    val conf = new SparkConf()\n+    conf.set(config.DRIVER_MEMORY_OVERHEAD.key, \"1000\")\n+    testOverheadMemory(conf, 3000)\n+  }\n+",
    "line": 47
  }, {
    "author": {
      "login": "devaraj-kavali"
    },
    "body": "Thanks @rvesse for explaining it.\r\n\r\nI don't think it is a better way to auto-correct the wrong value if it is explicitly configured by the user instead of failing and letting the user know. And also it makes no-way to configure small value if the users want to have based on their workload.\r\n\r\nI see that the same is followed in yarn and k8s deployment modes as well, if we want to change this we may have to change in yarn and k8s also.\r\nPlease let me know either way.",
    "commit": "c156dd73680f4a1416c97f9ae0290e381b606b7c",
    "createdAt": "2019-01-14T17:51:01Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest.mesos\n+\n+import javax.servlet.http.HttpServletResponse\n+\n+import org.scalatest.mockito.MockitoSugar\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.TestPrematureExit\n+import org.apache.spark.deploy.mesos.MesosDriverDescription\n+import org.apache.spark.deploy.rest.{CreateSubmissionRequest, CreateSubmissionResponse, SubmitRestProtocolMessage, SubmitRestProtocolResponse}\n+import org.apache.spark.internal.config\n+import org.apache.spark.scheduler.cluster.mesos.{MesosClusterPersistenceEngineFactory, MesosClusterScheduler}\n+\n+class MesosRestServerSuite extends SparkFunSuite\n+  with TestPrematureExit with MockitoSugar {\n+\n+  test(\"test default driver overhead memory\") {\n+    testOverheadMemory(new SparkConf(), 2384)\n+  }\n+\n+  test(\"test configured driver overhead memory\") {\n+    val conf = new SparkConf()\n+    conf.set(config.DRIVER_MEMORY_OVERHEAD.key, \"1000\")\n+    testOverheadMemory(conf, 3000)\n+  }\n+",
    "line": 47
  }, {
    "author": {
      "login": "rvesse"
    },
    "body": "Provided its consistent with other resource managers then it's likely fine as-is",
    "commit": "c156dd73680f4a1416c97f9ae0290e381b606b7c",
    "createdAt": "2019-01-14T18:01:18Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest.mesos\n+\n+import javax.servlet.http.HttpServletResponse\n+\n+import org.scalatest.mockito.MockitoSugar\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.TestPrematureExit\n+import org.apache.spark.deploy.mesos.MesosDriverDescription\n+import org.apache.spark.deploy.rest.{CreateSubmissionRequest, CreateSubmissionResponse, SubmitRestProtocolMessage, SubmitRestProtocolResponse}\n+import org.apache.spark.internal.config\n+import org.apache.spark.scheduler.cluster.mesos.{MesosClusterPersistenceEngineFactory, MesosClusterScheduler}\n+\n+class MesosRestServerSuite extends SparkFunSuite\n+  with TestPrematureExit with MockitoSugar {\n+\n+  test(\"test default driver overhead memory\") {\n+    testOverheadMemory(new SparkConf(), 2384)\n+  }\n+\n+  test(\"test configured driver overhead memory\") {\n+    val conf = new SparkConf()\n+    conf.set(config.DRIVER_MEMORY_OVERHEAD.key, \"1000\")\n+    testOverheadMemory(conf, 3000)\n+  }\n+",
    "line": 47
  }],
  "prId": 17726
}]