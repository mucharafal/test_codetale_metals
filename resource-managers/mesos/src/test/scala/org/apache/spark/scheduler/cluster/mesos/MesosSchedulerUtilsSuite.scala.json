[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "We normally use a different approach:\r\n\r\n```\r\nintercept[SparkException] {\r\n  // code\r\n}\r\n```",
    "commit": "30e1cbd89ca801e0c6d0ac28b5d10554921b72d9",
    "createdAt": "2018-01-18T20:48:25Z",
    "diffHunk": "@@ -237,4 +242,88 @@ class MesosSchedulerUtilsSuite extends SparkFunSuite with Matchers with MockitoS\n     val portsToUse = getRangesFromResources(resourcesToBeUsed).map{r => r._1}\n     portsToUse.isEmpty shouldBe true\n   }\n+  \n+  test(\"Principal specified via spark.mesos.principal\") {\n+    val conf = new SparkConf()\n+    conf.set(\"spark.mesos.principal\", \"test-principal\")\n+    \n+    val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())\n+    credBuilder.hasPrincipal shouldBe true\n+    credBuilder.getPrincipal shouldBe \"test-principal\"\n+  }\n+  \n+  test(\"Principal specified via spark.mesos.principal.file\") {\n+    val pFile = File.createTempFile(\"MesosSchedulerUtilsSuite\", \".txt\");\n+    pFile.deleteOnExit()\n+    Files.write(\"test-principal\".getBytes(\"UTF-8\"), pFile);\n+    val conf = new SparkConf()\n+    conf.set(\"spark.mesos.principal.file\", pFile.getAbsolutePath())\n+    \n+    val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())\n+    credBuilder.hasPrincipal shouldBe true\n+    credBuilder.getPrincipal shouldBe \"test-principal\"\n+  }\n+  \n+  test(\"Principal specified via SPARK_MESOS_PRINCIPAL_FILE\") {\n+    val pFile = File.createTempFile(\"MesosSchedulerUtilsSuite\", \".txt\");\n+    pFile.deleteOnExit()\n+    Files.write(\"test-principal\".getBytes(\"UTF-8\"), pFile);\n+    val conf = new SparkConfWithEnv(Map(\"SPARK_MESOS_PRINCIPAL_FILE\" -> pFile.getAbsolutePath()))\n+    \n+    val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())\n+    credBuilder.hasPrincipal shouldBe true\n+    credBuilder.getPrincipal shouldBe \"test-principal\"\n+  }\n+  \n+  test(\"Secret specified via spark.mesos.secret\") {\n+    val conf = new SparkConf()\n+    conf.set(\"spark.mesos.principal\", \"test-principal\")\n+    conf.set(\"spark.mesos.secret\", \"my-secret\")\n+    \n+    val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())\n+    credBuilder.hasPrincipal shouldBe true\n+    credBuilder.getPrincipal shouldBe \"test-principal\"\n+    credBuilder.hasSecret shouldBe true\n+    credBuilder.getSecret shouldBe \"my-secret\"\n+  }\n+  \n+  test(\"Principal specified via spark.mesos.secret.file\") {\n+    val sFile = File.createTempFile(\"MesosSchedulerUtilsSuite\", \".txt\");\n+    sFile.deleteOnExit()\n+    Files.write(\"my-secret\".getBytes(\"UTF-8\"), sFile);\n+    val conf = new SparkConf()\n+    conf.set(\"spark.mesos.principal\", \"test-principal\")\n+    conf.set(\"spark.mesos.secret.file\", sFile.getAbsolutePath())\n+    \n+    val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())\n+    credBuilder.hasPrincipal shouldBe true\n+    credBuilder.getPrincipal shouldBe \"test-principal\"\n+    credBuilder.hasSecret shouldBe true\n+    credBuilder.getSecret shouldBe \"my-secret\"\n+  }\n+  \n+  test(\"Principal specified via SPARK_MESOS_SECRET_FILE\") {\n+    val sFile = File.createTempFile(\"MesosSchedulerUtilsSuite\", \".txt\");\n+    sFile.deleteOnExit()\n+    Files.write(\"my-secret\".getBytes(\"UTF-8\"), sFile);\n+    \n+    val sFilePath = sFile.getAbsolutePath()\n+    val env = Map(\"SPARK_MESOS_SECRET_FILE\" -> sFilePath)\n+    val conf = new SparkConfWithEnv(env)\n+    conf.set(\"spark.mesos.principal\", \"test-principal\")\n+    conf.set(\"spark.mesos.secret.file\", sFile.getAbsolutePath())\n+    \n+    val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())\n+    credBuilder.hasPrincipal shouldBe true\n+    credBuilder.getPrincipal shouldBe \"test-principal\"\n+    credBuilder.hasSecret shouldBe true\n+    credBuilder.getSecret shouldBe \"my-secret\"\n+  }\n+  \n+  test(\"Secret specified with no principal\") {\n+    val conf = new SparkConf()\n+    conf.set(\"spark.mesos.secret\", \"my-secret\")\n+    \n+    an [SparkException] should be thrownBy utils.buildCredentials(conf, FrameworkInfo.newBuilder())"
  }],
  "prId": 20167
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Why do you need this explicit import?",
    "commit": "30e1cbd89ca801e0c6d0ac28b5d10554921b72d9",
    "createdAt": "2018-02-08T20:48:08Z",
    "diffHunk": "@@ -17,16 +17,21 @@\n \n package org.apache.spark.scheduler.cluster.mesos\n \n+import java.io.{File, FileNotFoundException}\n+\n import scala.collection.JavaConverters._\n+import scala.collection.immutable.Map"
  }],
  "prId": 20167
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "`val credBuilder =` is unnecessary.",
    "commit": "30e1cbd89ca801e0c6d0ac28b5d10554921b72d9",
    "createdAt": "2018-02-08T20:48:30Z",
    "diffHunk": "@@ -237,4 +242,157 @@ class MesosSchedulerUtilsSuite extends SparkFunSuite with Matchers with MockitoS\n     val portsToUse = getRangesFromResources(resourcesToBeUsed).map{r => r._1}\n     portsToUse.isEmpty shouldBe true\n   }\n+\n+  test(\"Principal specified via spark.mesos.principal\") {\n+    val conf = new SparkConf()\n+    conf.set(\"spark.mesos.principal\", \"test-principal\")\n+\n+    val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())\n+    credBuilder.hasPrincipal shouldBe true\n+    credBuilder.getPrincipal shouldBe \"test-principal\"\n+  }\n+\n+  test(\"Principal specified via spark.mesos.principal.file\") {\n+    val pFile = File.createTempFile(\"MesosSchedulerUtilsSuite\", \".txt\");\n+    pFile.deleteOnExit()\n+    Files.write(\"test-principal\".getBytes(\"UTF-8\"), pFile);\n+    val conf = new SparkConf()\n+    conf.set(\"spark.mesos.principal.file\", pFile.getAbsolutePath())\n+\n+    val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())\n+    credBuilder.hasPrincipal shouldBe true\n+    credBuilder.getPrincipal shouldBe \"test-principal\"\n+  }\n+\n+  test(\"Principal specified via spark.mesos.principal.file that does not exist\") {\n+    val conf = new SparkConf()\n+    conf.set(\"spark.mesos.principal.file\", \"/tmp/does-not-exist\")\n+\n+    intercept[FileNotFoundException] {\n+      val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())"
  }],
  "prId": 20167
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "`val credBuilder = ` is unnecessary.",
    "commit": "30e1cbd89ca801e0c6d0ac28b5d10554921b72d9",
    "createdAt": "2018-02-08T20:48:47Z",
    "diffHunk": "@@ -237,4 +242,157 @@ class MesosSchedulerUtilsSuite extends SparkFunSuite with Matchers with MockitoS\n     val portsToUse = getRangesFromResources(resourcesToBeUsed).map{r => r._1}\n     portsToUse.isEmpty shouldBe true\n   }\n+\n+  test(\"Principal specified via spark.mesos.principal\") {\n+    val conf = new SparkConf()\n+    conf.set(\"spark.mesos.principal\", \"test-principal\")\n+\n+    val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())\n+    credBuilder.hasPrincipal shouldBe true\n+    credBuilder.getPrincipal shouldBe \"test-principal\"\n+  }\n+\n+  test(\"Principal specified via spark.mesos.principal.file\") {\n+    val pFile = File.createTempFile(\"MesosSchedulerUtilsSuite\", \".txt\");\n+    pFile.deleteOnExit()\n+    Files.write(\"test-principal\".getBytes(\"UTF-8\"), pFile);\n+    val conf = new SparkConf()\n+    conf.set(\"spark.mesos.principal.file\", pFile.getAbsolutePath())\n+\n+    val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())\n+    credBuilder.hasPrincipal shouldBe true\n+    credBuilder.getPrincipal shouldBe \"test-principal\"\n+  }\n+\n+  test(\"Principal specified via spark.mesos.principal.file that does not exist\") {\n+    val conf = new SparkConf()\n+    conf.set(\"spark.mesos.principal.file\", \"/tmp/does-not-exist\")\n+\n+    intercept[FileNotFoundException] {\n+      val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())\n+    }\n+  }\n+\n+  test(\"Principal specified via SPARK_MESOS_PRINCIPAL\") {\n+    val conf = new SparkConfWithEnv(Map(\"SPARK_MESOS_PRINCIPAL\" -> \"test-principal\"))\n+\n+    val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())\n+    credBuilder.hasPrincipal shouldBe true\n+    credBuilder.getPrincipal shouldBe \"test-principal\"\n+  }\n+\n+  test(\"Principal specified via SPARK_MESOS_PRINCIPAL_FILE\") {\n+    val pFile = File.createTempFile(\"MesosSchedulerUtilsSuite\", \".txt\");\n+    pFile.deleteOnExit()\n+    Files.write(\"test-principal\".getBytes(\"UTF-8\"), pFile);\n+    val conf = new SparkConfWithEnv(Map(\"SPARK_MESOS_PRINCIPAL_FILE\" -> pFile.getAbsolutePath()))\n+\n+    val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())\n+    credBuilder.hasPrincipal shouldBe true\n+    credBuilder.getPrincipal shouldBe \"test-principal\"\n+  }\n+\n+  test(\"Principal specified via SPARK_MESOS_PRINCIPAL_FILE that does not exist\") {\n+    val conf = new SparkConfWithEnv(Map(\"SPARK_MESOS_PRINCIPAL_FILE\" -> \"/tmp/does-not-exist\"))\n+\n+    intercept[FileNotFoundException] {\n+      val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())"
  }],
  "prId": 20167
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "`val credBuilder = ` is unnecessary.",
    "commit": "30e1cbd89ca801e0c6d0ac28b5d10554921b72d9",
    "createdAt": "2018-02-08T20:49:08Z",
    "diffHunk": "@@ -237,4 +242,157 @@ class MesosSchedulerUtilsSuite extends SparkFunSuite with Matchers with MockitoS\n     val portsToUse = getRangesFromResources(resourcesToBeUsed).map{r => r._1}\n     portsToUse.isEmpty shouldBe true\n   }\n+\n+  test(\"Principal specified via spark.mesos.principal\") {\n+    val conf = new SparkConf()\n+    conf.set(\"spark.mesos.principal\", \"test-principal\")\n+\n+    val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())\n+    credBuilder.hasPrincipal shouldBe true\n+    credBuilder.getPrincipal shouldBe \"test-principal\"\n+  }\n+\n+  test(\"Principal specified via spark.mesos.principal.file\") {\n+    val pFile = File.createTempFile(\"MesosSchedulerUtilsSuite\", \".txt\");\n+    pFile.deleteOnExit()\n+    Files.write(\"test-principal\".getBytes(\"UTF-8\"), pFile);\n+    val conf = new SparkConf()\n+    conf.set(\"spark.mesos.principal.file\", pFile.getAbsolutePath())\n+\n+    val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())\n+    credBuilder.hasPrincipal shouldBe true\n+    credBuilder.getPrincipal shouldBe \"test-principal\"\n+  }\n+\n+  test(\"Principal specified via spark.mesos.principal.file that does not exist\") {\n+    val conf = new SparkConf()\n+    conf.set(\"spark.mesos.principal.file\", \"/tmp/does-not-exist\")\n+\n+    intercept[FileNotFoundException] {\n+      val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())\n+    }\n+  }\n+\n+  test(\"Principal specified via SPARK_MESOS_PRINCIPAL\") {\n+    val conf = new SparkConfWithEnv(Map(\"SPARK_MESOS_PRINCIPAL\" -> \"test-principal\"))\n+\n+    val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())\n+    credBuilder.hasPrincipal shouldBe true\n+    credBuilder.getPrincipal shouldBe \"test-principal\"\n+  }\n+\n+  test(\"Principal specified via SPARK_MESOS_PRINCIPAL_FILE\") {\n+    val pFile = File.createTempFile(\"MesosSchedulerUtilsSuite\", \".txt\");\n+    pFile.deleteOnExit()\n+    Files.write(\"test-principal\".getBytes(\"UTF-8\"), pFile);\n+    val conf = new SparkConfWithEnv(Map(\"SPARK_MESOS_PRINCIPAL_FILE\" -> pFile.getAbsolutePath()))\n+\n+    val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())\n+    credBuilder.hasPrincipal shouldBe true\n+    credBuilder.getPrincipal shouldBe \"test-principal\"\n+  }\n+\n+  test(\"Principal specified via SPARK_MESOS_PRINCIPAL_FILE that does not exist\") {\n+    val conf = new SparkConfWithEnv(Map(\"SPARK_MESOS_PRINCIPAL_FILE\" -> \"/tmp/does-not-exist\"))\n+\n+    intercept[FileNotFoundException] {\n+      val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())\n+    }\n+  }\n+\n+  test(\"Secret specified via spark.mesos.secret\") {\n+    val conf = new SparkConf()\n+    conf.set(\"spark.mesos.principal\", \"test-principal\")\n+    conf.set(\"spark.mesos.secret\", \"my-secret\")\n+\n+    val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())\n+    credBuilder.hasPrincipal shouldBe true\n+    credBuilder.getPrincipal shouldBe \"test-principal\"\n+    credBuilder.hasSecret shouldBe true\n+    credBuilder.getSecret shouldBe \"my-secret\"\n+  }\n+\n+  test(\"Principal specified via spark.mesos.secret.file\") {\n+    val sFile = File.createTempFile(\"MesosSchedulerUtilsSuite\", \".txt\");\n+    sFile.deleteOnExit()\n+    Files.write(\"my-secret\".getBytes(\"UTF-8\"), sFile);\n+    val conf = new SparkConf()\n+    conf.set(\"spark.mesos.principal\", \"test-principal\")\n+    conf.set(\"spark.mesos.secret.file\", sFile.getAbsolutePath())\n+\n+    val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())\n+    credBuilder.hasPrincipal shouldBe true\n+    credBuilder.getPrincipal shouldBe \"test-principal\"\n+    credBuilder.hasSecret shouldBe true\n+    credBuilder.getSecret shouldBe \"my-secret\"\n+  }\n+\n+  test(\"Principal specified via spark.mesos.secret.file that does not exist\") {\n+    val conf = new SparkConf()\n+    conf.set(\"spark.mesos.principal\", \"test-principal\")\n+    conf.set(\"spark.mesos.secret.file\", \"/tmp/does-not-exist\")\n+\n+    intercept[FileNotFoundException] {\n+      val credBuilder = utils.buildCredentials(conf, FrameworkInfo.newBuilder())"
  }],
  "prId": 20167
}]