[{
  "comments": [{
    "author": {
      "login": "skonto"
    },
    "body": "assert(envVars.count(!\\_.getName.startsWith(\"SPARK_\")) == 2)",
    "commit": "88dfb42bfd794ab1eea969c3b51970e68e4ca407",
    "createdAt": "2017-10-06T15:29:48Z",
    "diffHunk": "@@ -105,4 +108,108 @@ object Utils {\n   def createTaskId(taskId: String): TaskID = {\n     TaskID.newBuilder().setValue(taskId).build()\n   }\n+\n+  def configEnvBasedRefSecrets(secretConfig: MesosSecretConfig): Map[String, String] = {\n+    val secretName = \"/path/to/secret,/anothersecret\"\n+    val envKey = \"SECRET_ENV_KEY,PASSWORD\"\n+    Map(\n+      secretConfig.SECRET_NAME.key -> secretName,\n+      secretConfig.SECRET_ENVKEY.key -> envKey\n+    )\n+  }\n+\n+  def verifyEnvBasedRefSecrets(launchedTasks: List[TaskInfo]): Unit = {\n+    val envVars = launchedTasks.head\n+      .getCommand\n+      .getEnvironment\n+      .getVariablesList\n+      .asScala\n+    assert(envVars\n+      .filter(!_.getName.startsWith(\"SPARK_\")).length == 2)  // user-defined secret env vars\n+    val variableOne = envVars.filter(_.getName == \"SECRET_ENV_KEY\").head\n+    assert(variableOne.getSecret.isInitialized)\n+    assert(variableOne.getSecret.getType == Secret.Type.REFERENCE)\n+    assert(variableOne.getSecret.getReference.getName == \"/path/to/secret\")\n+    assert(variableOne.getType == Environment.Variable.Type.SECRET)\n+    val variableTwo = envVars.filter(_.getName == \"PASSWORD\").head\n+    assert(variableTwo.getSecret.isInitialized)\n+    assert(variableTwo.getSecret.getType == Secret.Type.REFERENCE)\n+    assert(variableTwo.getSecret.getReference.getName == \"/anothersecret\")\n+    assert(variableTwo.getType == Environment.Variable.Type.SECRET)\n+  }\n+\n+  def configEnvBasedValueSecrets(secretConfig: MesosSecretConfig): Map[String, String] = {\n+    val secretValues = \"user,password\"\n+    val envKeys = \"USER,PASSWORD\"\n+    Map(\n+      secretConfig.SECRET_VALUE.key -> secretValues,\n+      secretConfig.SECRET_ENVKEY.key -> envKeys\n+    )\n+  }\n+\n+  def verifyEnvBasedValueSecrets(launchedTasks: List[TaskInfo]): Unit = {\n+    val envVars = launchedTasks.head\n+      .getCommand\n+      .getEnvironment\n+      .getVariablesList\n+      .asScala\n+    assert(envVars\n+      .filter(!_.getName.startsWith(\"SPARK_\")).length == 2)  // user-defined secret env vars"
  }, {
    "author": {
      "login": "susanxhuynh"
    },
    "body": "Done",
    "commit": "88dfb42bfd794ab1eea969c3b51970e68e4ca407",
    "createdAt": "2017-10-09T20:40:04Z",
    "diffHunk": "@@ -105,4 +108,108 @@ object Utils {\n   def createTaskId(taskId: String): TaskID = {\n     TaskID.newBuilder().setValue(taskId).build()\n   }\n+\n+  def configEnvBasedRefSecrets(secretConfig: MesosSecretConfig): Map[String, String] = {\n+    val secretName = \"/path/to/secret,/anothersecret\"\n+    val envKey = \"SECRET_ENV_KEY,PASSWORD\"\n+    Map(\n+      secretConfig.SECRET_NAME.key -> secretName,\n+      secretConfig.SECRET_ENVKEY.key -> envKey\n+    )\n+  }\n+\n+  def verifyEnvBasedRefSecrets(launchedTasks: List[TaskInfo]): Unit = {\n+    val envVars = launchedTasks.head\n+      .getCommand\n+      .getEnvironment\n+      .getVariablesList\n+      .asScala\n+    assert(envVars\n+      .filter(!_.getName.startsWith(\"SPARK_\")).length == 2)  // user-defined secret env vars\n+    val variableOne = envVars.filter(_.getName == \"SECRET_ENV_KEY\").head\n+    assert(variableOne.getSecret.isInitialized)\n+    assert(variableOne.getSecret.getType == Secret.Type.REFERENCE)\n+    assert(variableOne.getSecret.getReference.getName == \"/path/to/secret\")\n+    assert(variableOne.getType == Environment.Variable.Type.SECRET)\n+    val variableTwo = envVars.filter(_.getName == \"PASSWORD\").head\n+    assert(variableTwo.getSecret.isInitialized)\n+    assert(variableTwo.getSecret.getType == Secret.Type.REFERENCE)\n+    assert(variableTwo.getSecret.getReference.getName == \"/anothersecret\")\n+    assert(variableTwo.getType == Environment.Variable.Type.SECRET)\n+  }\n+\n+  def configEnvBasedValueSecrets(secretConfig: MesosSecretConfig): Map[String, String] = {\n+    val secretValues = \"user,password\"\n+    val envKeys = \"USER,PASSWORD\"\n+    Map(\n+      secretConfig.SECRET_VALUE.key -> secretValues,\n+      secretConfig.SECRET_ENVKEY.key -> envKeys\n+    )\n+  }\n+\n+  def verifyEnvBasedValueSecrets(launchedTasks: List[TaskInfo]): Unit = {\n+    val envVars = launchedTasks.head\n+      .getCommand\n+      .getEnvironment\n+      .getVariablesList\n+      .asScala\n+    assert(envVars\n+      .filter(!_.getName.startsWith(\"SPARK_\")).length == 2)  // user-defined secret env vars"
  }],
  "prId": 19437
}, {
  "comments": [{
    "author": {
      "login": "skonto"
    },
    "body": "assert(envVars.count(!\\_.getName.startsWith(\"SPARK_\")) == 2)",
    "commit": "88dfb42bfd794ab1eea969c3b51970e68e4ca407",
    "createdAt": "2017-10-06T15:30:13Z",
    "diffHunk": "@@ -105,4 +108,108 @@ object Utils {\n   def createTaskId(taskId: String): TaskID = {\n     TaskID.newBuilder().setValue(taskId).build()\n   }\n+\n+  def configEnvBasedRefSecrets(secretConfig: MesosSecretConfig): Map[String, String] = {\n+    val secretName = \"/path/to/secret,/anothersecret\"\n+    val envKey = \"SECRET_ENV_KEY,PASSWORD\"\n+    Map(\n+      secretConfig.SECRET_NAME.key -> secretName,\n+      secretConfig.SECRET_ENVKEY.key -> envKey\n+    )\n+  }\n+\n+  def verifyEnvBasedRefSecrets(launchedTasks: List[TaskInfo]): Unit = {\n+    val envVars = launchedTasks.head\n+      .getCommand\n+      .getEnvironment\n+      .getVariablesList\n+      .asScala\n+    assert(envVars\n+      .filter(!_.getName.startsWith(\"SPARK_\")).length == 2)  // user-defined secret env vars"
  }, {
    "author": {
      "login": "susanxhuynh"
    },
    "body": "Thanks, I'll fix it.",
    "commit": "88dfb42bfd794ab1eea969c3b51970e68e4ca407",
    "createdAt": "2017-10-09T18:12:27Z",
    "diffHunk": "@@ -105,4 +108,108 @@ object Utils {\n   def createTaskId(taskId: String): TaskID = {\n     TaskID.newBuilder().setValue(taskId).build()\n   }\n+\n+  def configEnvBasedRefSecrets(secretConfig: MesosSecretConfig): Map[String, String] = {\n+    val secretName = \"/path/to/secret,/anothersecret\"\n+    val envKey = \"SECRET_ENV_KEY,PASSWORD\"\n+    Map(\n+      secretConfig.SECRET_NAME.key -> secretName,\n+      secretConfig.SECRET_ENVKEY.key -> envKey\n+    )\n+  }\n+\n+  def verifyEnvBasedRefSecrets(launchedTasks: List[TaskInfo]): Unit = {\n+    val envVars = launchedTasks.head\n+      .getCommand\n+      .getEnvironment\n+      .getVariablesList\n+      .asScala\n+    assert(envVars\n+      .filter(!_.getName.startsWith(\"SPARK_\")).length == 2)  // user-defined secret env vars"
  }],
  "prId": 19437
}]