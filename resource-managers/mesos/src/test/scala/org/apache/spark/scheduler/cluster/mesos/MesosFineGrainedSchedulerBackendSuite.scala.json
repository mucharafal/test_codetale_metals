[{
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "why is this change needed?",
    "commit": "c5bee33443bf14b868800a3c30677b89f8251b7f",
    "createdAt": "2019-02-10T19:08:53Z",
    "diffHunk": "@@ -80,9 +81,9 @@ class MesosFineGrainedSchedulerBackendSuite\n   }\n \n   test(\"Use configured mesosExecutor.cores for ExecutorInfo\") {\n-    val mesosExecutorCores = 3\n+    val mesosExecutorCores = 3.0",
    "line": 22
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "The type of EXECUTOR_CORES is actually `double` instead of `int` or `long` and if my memory is right compiler complained. If we don't want to touch this we may need to change below line to `conf.set(EXECUTOR_CORES.key, mesosExecutorCores.toString)`",
    "commit": "c5bee33443bf14b868800a3c30677b89f8251b7f",
    "createdAt": "2019-02-10T21:34:07Z",
    "diffHunk": "@@ -80,9 +81,9 @@ class MesosFineGrainedSchedulerBackendSuite\n   }\n \n   test(\"Use configured mesosExecutor.cores for ExecutorInfo\") {\n-    val mesosExecutorCores = 3\n+    val mesosExecutorCores = 3.0",
    "line": 22
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "The type of a number of cores is logically an integer and can be used where a double is expected. In a few cases a cast may be needed but doesn't require thinking of number of cores as a float",
    "commit": "c5bee33443bf14b868800a3c30677b89f8251b7f",
    "createdAt": "2019-02-10T22:01:38Z",
    "diffHunk": "@@ -80,9 +81,9 @@ class MesosFineGrainedSchedulerBackendSuite\n   }\n \n   test(\"Use configured mesosExecutor.cores for ExecutorInfo\") {\n-    val mesosExecutorCores = 3\n+    val mesosExecutorCores = 3.0",
    "line": 22
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "I'm honestly not a expert on this but the documentation of `spark.mesos.mesosExecutor.cores` clarify that it can receive floating point number so the type still makes sense.\r\n\r\nhttps://github.com/apache/spark/blob/master/docs/running-on-mesos.md\r\n\r\n```\r\n<tr>\r\n  <td><code>spark.mesos.mesosExecutor.cores</code></td>\r\n  <td><code>1.0</code></td>\r\n  <td>\r\n    (Fine-grained mode only) Number of cores to give each Mesos executor. This does not\r\n    include the cores used to run the Spark tasks. In other words, even if no Spark task\r\n    is being run, each Mesos executor will occupy the number of cores configured here.\r\n    The value can be a floating point number.\r\n  </td>\r\n</tr>\r\n```\r\n\r\nThe default value is also explained as `1.0` instead of 1. I'll update the config entry to reflect the sync.",
    "commit": "c5bee33443bf14b868800a3c30677b89f8251b7f",
    "createdAt": "2019-02-10T22:10:17Z",
    "diffHunk": "@@ -80,9 +81,9 @@ class MesosFineGrainedSchedulerBackendSuite\n   }\n \n   test(\"Use configured mesosExecutor.cores for ExecutorInfo\") {\n-    val mesosExecutorCores = 3\n+    val mesosExecutorCores = 3.0",
    "line": 22
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Oh right mesos can specify fractional cores. OK this makes sense then. ",
    "commit": "c5bee33443bf14b868800a3c30677b89f8251b7f",
    "createdAt": "2019-02-10T22:22:54Z",
    "diffHunk": "@@ -80,9 +81,9 @@ class MesosFineGrainedSchedulerBackendSuite\n   }\n \n   test(\"Use configured mesosExecutor.cores for ExecutorInfo\") {\n-    val mesosExecutorCores = 3\n+    val mesosExecutorCores = 3.0",
    "line": 22
  }],
  "prId": 23743
}]