[{
  "comments": [{
    "author": {
      "login": "mgummelt"
    },
    "body": "Ideally, this would be more functional.  I tried to model it with map/fold, but I'm not smart enough.  If someone cares, I can try to rewrite it to be recursive, at least.",
    "commit": "fe916b263a1da10289a65a67c6303c6203dcc2ed",
    "createdAt": "2017-06-07T22:48:29Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import org.apache.mesos.Protos\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.internal.Logging\n+\n+object MesosProtoUtils extends Logging {\n+\n+  /** Parses a label string of the format specified in spark.mesos.task.labels. */\n+  def mesosLabels(labelsStr: String): Protos.Labels.Builder = {\n+    var key: Option[String] = None\n+    var value: Option[String] = None\n+    var currStr = \"\"\n+    var i = 0\n+    val labels = Protos.Labels.newBuilder()\n+\n+    // 0 -> parsing key\n+    // 1 -> parsing value\n+    var state = 0\n+\n+    def addLabel() = {\n+      value = Some(currStr)\n+      if (key.isEmpty) {\n+        throw new SparkException(s\"Error while parsing label string: ${labelsStr}.  \" +\n+          s\"Empty label key.\")\n+      } else {\n+        val label = Protos.Label.newBuilder().setKey(key.get).setValue(value.get)\n+        labels.addLabels(label)\n+\n+        key = None\n+        value = None\n+        currStr = \"\"\n+        state = 0\n+      }\n+    }\n+\n+    while(i < labelsStr.length) {"
  }],
  "prId": 18220
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Nit, don't need interpolation but whatever",
    "commit": "fe916b263a1da10289a65a67c6303c6203dcc2ed",
    "createdAt": "2017-06-08T09:38:56Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import org.apache.mesos.Protos\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.internal.Logging\n+\n+object MesosProtoUtils extends Logging {\n+\n+  /** Parses a label string of the format specified in spark.mesos.task.labels. */\n+  def mesosLabels(labelsStr: String): Protos.Labels.Builder = {\n+    var key: Option[String] = None\n+    var value: Option[String] = None\n+    var currStr = \"\"\n+    var i = 0\n+    val labels = Protos.Labels.newBuilder()\n+\n+    // 0 -> parsing key\n+    // 1 -> parsing value\n+    var state = 0\n+\n+    def addLabel() = {\n+      value = Some(currStr)\n+      if (key.isEmpty) {\n+        throw new SparkException(s\"Error while parsing label string: ${labelsStr}.  \" +\n+          s\"Empty label key.\")"
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "Fixed",
    "commit": "fe916b263a1da10289a65a67c6303c6203dcc2ed",
    "createdAt": "2017-06-08T20:59:15Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import org.apache.mesos.Protos\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.internal.Logging\n+\n+object MesosProtoUtils extends Logging {\n+\n+  /** Parses a label string of the format specified in spark.mesos.task.labels. */\n+  def mesosLabels(labelsStr: String): Protos.Labels.Builder = {\n+    var key: Option[String] = None\n+    var value: Option[String] = None\n+    var currStr = \"\"\n+    var i = 0\n+    val labels = Protos.Labels.newBuilder()\n+\n+    // 0 -> parsing key\n+    // 1 -> parsing value\n+    var state = 0\n+\n+    def addLabel() = {\n+      value = Some(currStr)\n+      if (key.isEmpty) {\n+        throw new SparkException(s\"Error while parsing label string: ${labelsStr}.  \" +\n+          s\"Empty label key.\")"
  }],
  "prId": 18220
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Nit: space after while",
    "commit": "fe916b263a1da10289a65a67c6303c6203dcc2ed",
    "createdAt": "2017-06-08T09:40:07Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import org.apache.mesos.Protos\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.internal.Logging\n+\n+object MesosProtoUtils extends Logging {\n+\n+  /** Parses a label string of the format specified in spark.mesos.task.labels. */\n+  def mesosLabels(labelsStr: String): Protos.Labels.Builder = {\n+    var key: Option[String] = None\n+    var value: Option[String] = None\n+    var currStr = \"\"\n+    var i = 0\n+    val labels = Protos.Labels.newBuilder()\n+\n+    // 0 -> parsing key\n+    // 1 -> parsing value\n+    var state = 0\n+\n+    def addLabel() = {\n+      value = Some(currStr)\n+      if (key.isEmpty) {\n+        throw new SparkException(s\"Error while parsing label string: ${labelsStr}.  \" +\n+          s\"Empty label key.\")\n+      } else {\n+        val label = Protos.Label.newBuilder().setKey(key.get).setValue(value.get)\n+        labels.addLabels(label)\n+\n+        key = None\n+        value = None\n+        currStr = \"\"\n+        state = 0\n+      }\n+    }\n+\n+    while(i < labelsStr.length) {"
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "this code was removed, so this is fixed.",
    "commit": "fe916b263a1da10289a65a67c6303c6203dcc2ed",
    "createdAt": "2017-06-08T20:59:27Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import org.apache.mesos.Protos\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.internal.Logging\n+\n+object MesosProtoUtils extends Logging {\n+\n+  /** Parses a label string of the format specified in spark.mesos.task.labels. */\n+  def mesosLabels(labelsStr: String): Protos.Labels.Builder = {\n+    var key: Option[String] = None\n+    var value: Option[String] = None\n+    var currStr = \"\"\n+    var i = 0\n+    val labels = Protos.Labels.newBuilder()\n+\n+    // 0 -> parsing key\n+    // 1 -> parsing value\n+    var state = 0\n+\n+    def addLabel() = {\n+      value = Some(currStr)\n+      if (key.isEmpty) {\n+        throw new SparkException(s\"Error while parsing label string: ${labelsStr}.  \" +\n+          s\"Empty label key.\")\n+      } else {\n+        val label = Protos.Label.newBuilder().setKey(key.get).setValue(value.get)\n+        labels.addLabels(label)\n+\n+        key = None\n+        value = None\n+        currStr = \"\"\n+        state = 0\n+      }\n+    }\n+\n+    while(i < labelsStr.length) {"
  }],
  "prId": 18220
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "This all looks excessively complex. Can't you do this with a regex in a few lines?",
    "commit": "fe916b263a1da10289a65a67c6303c6203dcc2ed",
    "createdAt": "2017-06-08T09:40:43Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import org.apache.mesos.Protos\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.internal.Logging\n+\n+object MesosProtoUtils extends Logging {\n+\n+  /** Parses a label string of the format specified in spark.mesos.task.labels. */\n+  def mesosLabels(labelsStr: String): Protos.Labels.Builder = {\n+    var key: Option[String] = None\n+    var value: Option[String] = None\n+    var currStr = \"\"\n+    var i = 0\n+    val labels = Protos.Labels.newBuilder()\n+\n+    // 0 -> parsing key\n+    // 1 -> parsing value\n+    var state = 0"
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "I simplified it, but I can't do a simple regex splitting, because I have to condition the match on characters (the escape sequence), that shouldn't actually be considered part of the matched string.  So I just wrote a custom `splitUnescaped` method to implement what I need.",
    "commit": "fe916b263a1da10289a65a67c6303c6203dcc2ed",
    "createdAt": "2017-06-08T20:58:59Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import org.apache.mesos.Protos\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.internal.Logging\n+\n+object MesosProtoUtils extends Logging {\n+\n+  /** Parses a label string of the format specified in spark.mesos.task.labels. */\n+  def mesosLabels(labelsStr: String): Protos.Labels.Builder = {\n+    var key: Option[String] = None\n+    var value: Option[String] = None\n+    var currStr = \"\"\n+    var i = 0\n+    val labels = Protos.Labels.newBuilder()\n+\n+    // 0 -> parsing key\n+    // 1 -> parsing value\n+    var state = 0"
  }],
  "prId": 18220
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "I still think you can do this much more directly with regexes, even with escapes. It looks a little tricky but a negative lookbehind does the trick. For example:\r\n\r\n```\r\nscala> \"\"\"key:value,key2:a\\:b,key3:a\\,b\"\"\".split(\"\"\"(?<!\\\\),\"\"\")\r\nres3: Array[String] = Array(key:value, key2:a\\:b, key3:a\\,b)\r\n```",
    "commit": "fe916b263a1da10289a65a67c6303c6203dcc2ed",
    "createdAt": "2017-06-09T09:21:41Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.mesos.Protos\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.internal.Logging\n+\n+object MesosProtoUtils extends Logging {\n+\n+  /** Parses a label string of the format specified in spark.mesos.task.labels. */\n+  def mesosLabels(labelsStr: String): Protos.Labels.Builder = {\n+\n+    // Return str split around unescaped occurrences of c.\n+    def splitUnescaped(str: String, c: Char): Seq[String] = {"
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "That's exactly what I was looking for! Thanks! Fixed.",
    "commit": "fe916b263a1da10289a65a67c6303c6203dcc2ed",
    "createdAt": "2017-06-09T18:36:04Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.mesos.Protos\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.internal.Logging\n+\n+object MesosProtoUtils extends Logging {\n+\n+  /** Parses a label string of the format specified in spark.mesos.task.labels. */\n+  def mesosLabels(labelsStr: String): Protos.Labels.Builder = {\n+\n+    // Return str split around unescaped occurrences of c.\n+    def splitUnescaped(str: String, c: Char): Seq[String] = {"
  }],
  "prId": 18220
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "You could do this too, though I don't think it matters enough to bother:\r\n```\r\nval Array(key, value) = parts.map(_.replaceAll(\"\"\"\\\\(.)\"\"\", \"$1\"))\r\n```",
    "commit": "fe916b263a1da10289a65a67c6303c6203dcc2ed",
    "createdAt": "2017-06-09T19:17:42Z",
    "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.mesos.Protos\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.internal.Logging\n+\n+object MesosProtoUtils extends Logging {\n+\n+  /** Parses a label string of the format specified in spark.mesos.task.labels. */\n+  def mesosLabels(labelsStr: String): Protos.Labels.Builder = {\n+    val labels = labelsStr.split(\"\"\"(?<!\\\\),\"\"\").toSeq.map { labelStr =>\n+      val parts = labelStr.split(\"\"\"(?<!\\\\):\"\"\")\n+      if (parts.length != 2) {\n+        throw new SparkException(s\"Malformed label: ${labelStr}\")\n+      }\n+\n+      val cleanedParts = parts"
  }],
  "prId": 18220
}]