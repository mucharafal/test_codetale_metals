[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "This is not a part of SPARK-26192.",
    "commit": "d8b4f1eb0a8d43e2316200afcaf74d79f560f5a1",
    "createdAt": "2019-05-27T05:00:42Z",
    "diffHunk": "@@ -129,4 +129,22 @@ package object config {\n         \"when launching drivers. Default is to accept all offers with sufficient resources.\")\n       .stringConf\n       .createWithDefault(\"\")\n+\n+  private[spark] val MAX_DRIVERS =\n+    ConfigBuilder(\"spark.mesos.maxDrivers\").intConf.createWithDefault(200)",
    "line": 6
  }, {
    "author": {
      "login": "mwlon"
    },
    "body": "It's part of later additions for SPARK-26082 that SPARK-26192 built on in master. I think it's good practice to use these config objects rather than magic strings, and something we want to keep.",
    "commit": "d8b4f1eb0a8d43e2316200afcaf74d79f560f5a1",
    "createdAt": "2019-05-28T19:19:05Z",
    "diffHunk": "@@ -129,4 +129,22 @@ package object config {\n         \"when launching drivers. Default is to accept all offers with sufficient resources.\")\n       .stringConf\n       .createWithDefault(\"\")\n+\n+  private[spark] val MAX_DRIVERS =\n+    ConfigBuilder(\"spark.mesos.maxDrivers\").intConf.createWithDefault(200)",
    "line": 6
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Backporting the improvement is not allowed. @mwlon . In addition, it's not a good practice to disguise one PR(SPARK-26082) into another PR (SPARK-26192) silently.",
    "commit": "d8b4f1eb0a8d43e2316200afcaf74d79f560f5a1",
    "createdAt": "2019-05-28T19:58:03Z",
    "diffHunk": "@@ -129,4 +129,22 @@ package object config {\n         \"when launching drivers. Default is to accept all offers with sufficient resources.\")\n       .stringConf\n       .createWithDefault(\"\")\n+\n+  private[spark] val MAX_DRIVERS =\n+    ConfigBuilder(\"spark.mesos.maxDrivers\").intConf.createWithDefault(200)",
    "line": 6
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Although it's not crazy to backport small enhancements, I'd not backport this change. 3.0 changes most all of the configs to use ConfigBuilder, but I don't necessarily think we want to change just a few of them in 2.4, just out of general consistency.",
    "commit": "d8b4f1eb0a8d43e2316200afcaf74d79f560f5a1",
    "createdAt": "2019-05-29T12:12:56Z",
    "diffHunk": "@@ -129,4 +129,22 @@ package object config {\n         \"when launching drivers. Default is to accept all offers with sufficient resources.\")\n       .stringConf\n       .createWithDefault(\"\")\n+\n+  private[spark] val MAX_DRIVERS =\n+    ConfigBuilder(\"spark.mesos.maxDrivers\").intConf.createWithDefault(200)",
    "line": 6
  }],
  "prId": 24713
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "ditto.",
    "commit": "d8b4f1eb0a8d43e2316200afcaf74d79f560f5a1",
    "createdAt": "2019-05-27T05:00:50Z",
    "diffHunk": "@@ -129,4 +129,22 @@ package object config {\n         \"when launching drivers. Default is to accept all offers with sufficient resources.\")\n       .stringConf\n       .createWithDefault(\"\")\n+\n+  private[spark] val MAX_DRIVERS =\n+    ConfigBuilder(\"spark.mesos.maxDrivers\").intConf.createWithDefault(200)\n+\n+  private[spark] val RETAINED_DRIVERS =\n+    ConfigBuilder(\"spark.mesos.retainedDrivers\").intConf.createWithDefault(200)",
    "line": 9
  }, {
    "author": {
      "login": "mwlon"
    },
    "body": "ditto.",
    "commit": "d8b4f1eb0a8d43e2316200afcaf74d79f560f5a1",
    "createdAt": "2019-05-28T19:19:13Z",
    "diffHunk": "@@ -129,4 +129,22 @@ package object config {\n         \"when launching drivers. Default is to accept all offers with sufficient resources.\")\n       .stringConf\n       .createWithDefault(\"\")\n+\n+  private[spark] val MAX_DRIVERS =\n+    ConfigBuilder(\"spark.mesos.maxDrivers\").intConf.createWithDefault(200)\n+\n+  private[spark] val RETAINED_DRIVERS =\n+    ConfigBuilder(\"spark.mesos.retainedDrivers\").intConf.createWithDefault(200)",
    "line": 9
  }],
  "prId": 24713
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "ditto.",
    "commit": "d8b4f1eb0a8d43e2316200afcaf74d79f560f5a1",
    "createdAt": "2019-05-27T05:00:58Z",
    "diffHunk": "@@ -129,4 +129,22 @@ package object config {\n         \"when launching drivers. Default is to accept all offers with sufficient resources.\")\n       .stringConf\n       .createWithDefault(\"\")\n+\n+  private[spark] val MAX_DRIVERS =\n+    ConfigBuilder(\"spark.mesos.maxDrivers\").intConf.createWithDefault(200)\n+\n+  private[spark] val RETAINED_DRIVERS =\n+    ConfigBuilder(\"spark.mesos.retainedDrivers\").intConf.createWithDefault(200)\n+\n+  private[spark] val CLUSTER_RETRY_WAIT_MAX_SECONDS =\n+    ConfigBuilder(\"spark.mesos.cluster.retry.wait.max\")\n+        .intConf\n+        .createWithDefault(60) // 1 minute",
    "line": 14
  }, {
    "author": {
      "login": "mwlon"
    },
    "body": "ditto.",
    "commit": "d8b4f1eb0a8d43e2316200afcaf74d79f560f5a1",
    "createdAt": "2019-05-28T19:19:16Z",
    "diffHunk": "@@ -129,4 +129,22 @@ package object config {\n         \"when launching drivers. Default is to accept all offers with sufficient resources.\")\n       .stringConf\n       .createWithDefault(\"\")\n+\n+  private[spark] val MAX_DRIVERS =\n+    ConfigBuilder(\"spark.mesos.maxDrivers\").intConf.createWithDefault(200)\n+\n+  private[spark] val RETAINED_DRIVERS =\n+    ConfigBuilder(\"spark.mesos.retainedDrivers\").intConf.createWithDefault(200)\n+\n+  private[spark] val CLUSTER_RETRY_WAIT_MAX_SECONDS =\n+    ConfigBuilder(\"spark.mesos.cluster.retry.wait.max\")\n+        .intConf\n+        .createWithDefault(60) // 1 minute",
    "line": 14
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "ditto.",
    "commit": "d8b4f1eb0a8d43e2316200afcaf74d79f560f5a1",
    "createdAt": "2019-05-28T19:58:42Z",
    "diffHunk": "@@ -129,4 +129,22 @@ package object config {\n         \"when launching drivers. Default is to accept all offers with sufficient resources.\")\n       .stringConf\n       .createWithDefault(\"\")\n+\n+  private[spark] val MAX_DRIVERS =\n+    ConfigBuilder(\"spark.mesos.maxDrivers\").intConf.createWithDefault(200)\n+\n+  private[spark] val RETAINED_DRIVERS =\n+    ConfigBuilder(\"spark.mesos.retainedDrivers\").intConf.createWithDefault(200)\n+\n+  private[spark] val CLUSTER_RETRY_WAIT_MAX_SECONDS =\n+    ConfigBuilder(\"spark.mesos.cluster.retry.wait.max\")\n+        .intConf\n+        .createWithDefault(60) // 1 minute",
    "line": 14
  }],
  "prId": 24713
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Let's not add this. What we need is just the functional logic of SPARK-26192.",
    "commit": "d8b4f1eb0a8d43e2316200afcaf74d79f560f5a1",
    "createdAt": "2019-05-27T05:01:26Z",
    "diffHunk": "@@ -129,4 +129,22 @@ package object config {\n         \"when launching drivers. Default is to accept all offers with sufficient resources.\")\n       .stringConf\n       .createWithDefault(\"\")\n+\n+  private[spark] val MAX_DRIVERS =\n+    ConfigBuilder(\"spark.mesos.maxDrivers\").intConf.createWithDefault(200)\n+\n+  private[spark] val RETAINED_DRIVERS =\n+    ConfigBuilder(\"spark.mesos.retainedDrivers\").intConf.createWithDefault(200)\n+\n+  private[spark] val CLUSTER_RETRY_WAIT_MAX_SECONDS =\n+    ConfigBuilder(\"spark.mesos.cluster.retry.wait.max\")\n+        .intConf\n+        .createWithDefault(60) // 1 minute\n+\n+  private[spark] val ENABLE_FETCHER_CACHE =\n+    ConfigBuilder(\"spark.mesos.fetcherCache.enable\")\n+        .doc(\"If set to true, all URIs (example: `spark.executor.uri`, `spark.mesos.uris`) will \" +\n+            \"be cached by the Mesos Fetcher Cache.\")\n+        .booleanConf\n+        .createWithDefault(false)",
    "line": 21
  }, {
    "author": {
      "login": "mwlon"
    },
    "body": "So use magic strings instead of config objects?",
    "commit": "d8b4f1eb0a8d43e2316200afcaf74d79f560f5a1",
    "createdAt": "2019-05-28T19:19:50Z",
    "diffHunk": "@@ -129,4 +129,22 @@ package object config {\n         \"when launching drivers. Default is to accept all offers with sufficient resources.\")\n       .stringConf\n       .createWithDefault(\"\")\n+\n+  private[spark] val MAX_DRIVERS =\n+    ConfigBuilder(\"spark.mesos.maxDrivers\").intConf.createWithDefault(200)\n+\n+  private[spark] val RETAINED_DRIVERS =\n+    ConfigBuilder(\"spark.mesos.retainedDrivers\").intConf.createWithDefault(200)\n+\n+  private[spark] val CLUSTER_RETRY_WAIT_MAX_SECONDS =\n+    ConfigBuilder(\"spark.mesos.cluster.retry.wait.max\")\n+        .intConf\n+        .createWithDefault(60) // 1 minute\n+\n+  private[spark] val ENABLE_FETCHER_CACHE =\n+    ConfigBuilder(\"spark.mesos.fetcherCache.enable\")\n+        .doc(\"If set to true, all URIs (example: `spark.executor.uri`, `spark.mesos.uris`) will \" +\n+            \"be cached by the Mesos Fetcher Cache.\")\n+        .booleanConf\n+        .createWithDefault(false)",
    "line": 21
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Of course, that's the backport. You should not pull the master branch code blindly.",
    "commit": "d8b4f1eb0a8d43e2316200afcaf74d79f560f5a1",
    "createdAt": "2019-05-28T19:58:55Z",
    "diffHunk": "@@ -129,4 +129,22 @@ package object config {\n         \"when launching drivers. Default is to accept all offers with sufficient resources.\")\n       .stringConf\n       .createWithDefault(\"\")\n+\n+  private[spark] val MAX_DRIVERS =\n+    ConfigBuilder(\"spark.mesos.maxDrivers\").intConf.createWithDefault(200)\n+\n+  private[spark] val RETAINED_DRIVERS =\n+    ConfigBuilder(\"spark.mesos.retainedDrivers\").intConf.createWithDefault(200)\n+\n+  private[spark] val CLUSTER_RETRY_WAIT_MAX_SECONDS =\n+    ConfigBuilder(\"spark.mesos.cluster.retry.wait.max\")\n+        .intConf\n+        .createWithDefault(60) // 1 minute\n+\n+  private[spark] val ENABLE_FETCHER_CACHE =\n+    ConfigBuilder(\"spark.mesos.fetcherCache.enable\")\n+        .doc(\"If set to true, all URIs (example: `spark.executor.uri`, `spark.mesos.uris`) will \" +\n+            \"be cached by the Mesos Fetcher Cache.\")\n+        .booleanConf\n+        .createWithDefault(false)",
    "line": 21
  }],
  "prId": 24713
}]