[{
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "you should have `as.integer(limit)` instead\r\ncould we add a test in R?",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-08-31T05:08:45Z",
    "diffHunk": "@@ -3410,13 +3410,14 @@ setMethod(\"collect_set\",\n #' \\dontrun{\n #' head(select(df, split_string(df$Sex, \"a\")))\n #' head(select(df, split_string(df$Class, \"\\\\d\")))\n+#' head(select(df, split_string(df$Class, \"\\\\d\", 2)))\n #' # This is equivalent to the following SQL expression\n #' head(selectExpr(df, \"split(Class, '\\\\\\\\d')\"))}\n #' @note split_string 2.3.0\n setMethod(\"split_string\",\n           signature(x = \"Column\", pattern = \"character\"),\n-          function(x, pattern) {\n-            jc <- callJStatic(\"org.apache.spark.sql.functions\", \"split\", x@jc, pattern)\n+          function(x, pattern, limit = -1) {\n+            jc <- callJStatic(\"org.apache.spark.sql.functions\", \"split\", x@jc, pattern, limit)"
  }, {
    "author": {
      "login": "phegstrom"
    },
    "body": "@felixcheung what's the best way to run a single unit test group with testthat in this repo? spark docs only point to ./run-tests.sh which runs all R unit tests. ",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-08-31T14:50:15Z",
    "diffHunk": "@@ -3410,13 +3410,14 @@ setMethod(\"collect_set\",\n #' \\dontrun{\n #' head(select(df, split_string(df$Sex, \"a\")))\n #' head(select(df, split_string(df$Class, \"\\\\d\")))\n+#' head(select(df, split_string(df$Class, \"\\\\d\", 2)))\n #' # This is equivalent to the following SQL expression\n #' head(selectExpr(df, \"split(Class, '\\\\\\\\d')\"))}\n #' @note split_string 2.3.0\n setMethod(\"split_string\",\n           signature(x = \"Column\", pattern = \"character\"),\n-          function(x, pattern) {\n-            jc <- callJStatic(\"org.apache.spark.sql.functions\", \"split\", x@jc, pattern)\n+          function(x, pattern, limit = -1) {\n+            jc <- callJStatic(\"org.apache.spark.sql.functions\", \"split\", x@jc, pattern, limit)"
  }],
  "prId": 22227
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "We should add documentation for R side too. Please document `limit` here ",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-09-03T02:01:42Z",
    "diffHunk": "@@ -3410,13 +3410,15 @@ setMethod(\"collect_set\",\n #' \\dontrun{\n #' head(select(df, split_string(df$Sex, \"a\")))\n #' head(select(df, split_string(df$Class, \"\\\\d\")))\n+#' head(select(df, split_string(df$Class, \"\\\\d\", 2)))"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "The current build failure:\r\n\r\n```\r\nUndocumented arguments in documentation object 'column_string_functions'\r\n  'limit'\r\n\r\nFunctions with \\usage entries need to have the appropriate \\alias\r\nentries, and all their arguments documented.\r\nThe \\usage entries must correspond to syntactically valid R code.\r\nSee the chapter 'Writing R documentation files' in the 'Writing R\r\n```",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-09-03T02:43:09Z",
    "diffHunk": "@@ -3410,13 +3410,15 @@ setMethod(\"collect_set\",\n #' \\dontrun{\n #' head(select(df, split_string(df$Sex, \"a\")))\n #' head(select(df, split_string(df$Class, \"\\\\d\")))\n+#' head(select(df, split_string(df$Class, \"\\\\d\", 2)))"
  }],
  "prId": 22227
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "you can't use backtick in R doc",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-09-08T06:38:08Z",
    "diffHunk": "@@ -3404,19 +3404,24 @@ setMethod(\"collect_set\",\n #' Equivalent to \\code{split} SQL function.\n #'\n #' @rdname column_string_functions\n+#' @param limit determines the size of the returned array. If `limit` is positive,\n+#'        size of the array will be at most `limit`. If `limit` is negative, the"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Let's also match the doc. You can refer https://github.com/apache/spark/blob/4e84df0a80c1e610068884f937b73478be7e1c1c/R/pkg/R/functions.R#L186-L191\r\n\r\nfor listing items",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-09-10T02:37:05Z",
    "diffHunk": "@@ -3404,19 +3404,24 @@ setMethod(\"collect_set\",\n #' Equivalent to \\code{split} SQL function.\n #'\n #' @rdname column_string_functions\n+#' @param limit determines the size of the returned array. If `limit` is positive,\n+#'        size of the array will be at most `limit`. If `limit` is negative, the"
  }, {
    "author": {
      "login": "phegstrom"
    },
    "body": "will do",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-09-10T09:04:39Z",
    "diffHunk": "@@ -3404,19 +3404,24 @@ setMethod(\"collect_set\",\n #' Equivalent to \\code{split} SQL function.\n #'\n #' @rdname column_string_functions\n+#' @param limit determines the size of the returned array. If `limit` is positive,\n+#'        size of the array will be at most `limit`. If `limit` is negative, the"
  }],
  "prId": 22227
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "To make it consistent with the reference I gave:\r\n\r\n```\r\n#' @param limit determines the length of the returned array.\r\n#'              \\itemize{\r\n#'              \\item \\code{limit > 0}: length of the array will be at most \\code{limit}\r\n#'              \\item \\code{limit <= 0}: the returned array can have any length\r\n#'              }\r\n```",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-09-12T08:34:14Z",
    "diffHunk": "@@ -3404,19 +3404,27 @@ setMethod(\"collect_set\",\n #' Equivalent to \\code{split} SQL function.\n #'\n #' @rdname column_string_functions\n+#' @param limit determines the length of the returned array.\n+#'          \\itemize{\n+#'          \\item \\code{limit > 0}: length of the array will be at most \\code{limit}\n+#'          \\item \\code{limit <= 0}: the returned array can have any length\n+#'          }"
  }],
  "prId": 22227
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "hmm i think L3418 shall be followed by L3420?",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-09-23T07:34:13Z",
    "diffHunk": "@@ -3404,19 +3404,27 @@ setMethod(\"collect_set\",\n #' Equivalent to \\code{split} SQL function.\n #'\n #' @rdname column_string_functions\n+#' @param limit determines the length of the returned array.\n+#'              \\itemize{\n+#'              \\item \\code{limit > 0}: length of the array will be at most \\code{limit}\n+#'              \\item \\code{limit <= 0}: the returned array can have any length\n+#'              }\n+#'\n #' @aliases split_string split_string,Column-method\n #' @examples\n #'\n #' \\dontrun{\n #' head(select(df, split_string(df$Sex, \"a\")))\n #' head(select(df, split_string(df$Class, \"\\\\d\")))\n+#' head(select(df, split_string(df$Class, \"\\\\d\", 2)))\n #' # This is equivalent to the following SQL expression\n #' head(selectExpr(df, \"split(Class, '\\\\\\\\d')\"))}",
    "line": 23
  }, {
    "author": {
      "login": "felixcheung"
    },
    "body": "good point - also the example should run in the order documented.\r\n",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-09-23T23:02:04Z",
    "diffHunk": "@@ -3404,19 +3404,27 @@ setMethod(\"collect_set\",\n #' Equivalent to \\code{split} SQL function.\n #'\n #' @rdname column_string_functions\n+#' @param limit determines the length of the returned array.\n+#'              \\itemize{\n+#'              \\item \\code{limit > 0}: length of the array will be at most \\code{limit}\n+#'              \\item \\code{limit <= 0}: the returned array can have any length\n+#'              }\n+#'\n #' @aliases split_string split_string,Column-method\n #' @examples\n #'\n #' \\dontrun{\n #' head(select(df, split_string(df$Sex, \"a\")))\n #' head(select(df, split_string(df$Class, \"\\\\d\")))\n+#' head(select(df, split_string(df$Class, \"\\\\d\", 2)))\n #' # This is equivalent to the following SQL expression\n #' head(selectExpr(df, \"split(Class, '\\\\\\\\d')\"))}",
    "line": 23
  }, {
    "author": {
      "login": "phegstrom"
    },
    "body": "yes will make that change @viirya @felixcheung ",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-10-01T14:57:04Z",
    "diffHunk": "@@ -3404,19 +3404,27 @@ setMethod(\"collect_set\",\n #' Equivalent to \\code{split} SQL function.\n #'\n #' @rdname column_string_functions\n+#' @param limit determines the length of the returned array.\n+#'              \\itemize{\n+#'              \\item \\code{limit > 0}: length of the array will be at most \\code{limit}\n+#'              \\item \\code{limit <= 0}: the returned array can have any length\n+#'              }\n+#'\n #' @aliases split_string split_string,Column-method\n #' @examples\n #'\n #' \\dontrun{\n #' head(select(df, split_string(df$Sex, \"a\")))\n #' head(select(df, split_string(df$Class, \"\\\\d\")))\n+#' head(select(df, split_string(df$Class, \"\\\\d\", 2)))\n #' # This is equivalent to the following SQL expression\n #' head(selectExpr(df, \"split(Class, '\\\\\\\\d')\"))}",
    "line": 23
  }],
  "prId": 22227
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "shall we mention this is an optional param?",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-09-23T07:38:07Z",
    "diffHunk": "@@ -3404,19 +3404,27 @@ setMethod(\"collect_set\",\n #' Equivalent to \\code{split} SQL function.\n #'\n #' @rdname column_string_functions\n+#' @param limit determines the length of the returned array.",
    "line": 9
  }, {
    "author": {
      "login": "phegstrom"
    },
    "body": "going to include this in the `@details` section, as other functions like `ltrim` handle optionality of one of its params there.",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-10-01T18:14:26Z",
    "diffHunk": "@@ -3404,19 +3404,27 @@ setMethod(\"collect_set\",\n #' Equivalent to \\code{split} SQL function.\n #'\n #' @rdname column_string_functions\n+#' @param limit determines the length of the returned array.",
    "line": 9
  }],
  "prId": 22227
}]