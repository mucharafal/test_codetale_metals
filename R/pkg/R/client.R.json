[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "nit: `stop(paste(\"Java version\", sparkJavaVersion, \", or greater, is required for this package; found version:\",`",
    "commit": "4531ced5892da7aee890c29027cf66b487375b39",
    "createdAt": "2019-08-16T09:41:39Z",
    "diffHunk": "@@ -91,10 +91,15 @@ checkJavaVersion <- function() {\n       }, javaVersionOut)\n \n   javaVersionStr <- strsplit(javaVersionFilter[[1]], \"[\\\"]\")[[1L]][2]\n-  # javaVersionStr is of the form 1.8.0_92.\n-  # Extract 8 from it to compare to sparkJavaVersion\n-  javaVersionNum <- as.integer(strsplit(javaVersionStr, \"[.]\")[[1L]][2])\n-  if (javaVersionNum != sparkJavaVersion) {\n+  # javaVersionStr is of the form 1.8.0_92/9.0.x/11.0.x.\n+  # We are using 8, 9, 10, 11 for sparkJavaVersion.\n+  versions = strsplit(javaVersionStr, \"[.]\")[[1L]]\n+  if (\"1\" == versions[1]) {\n+      javaVersionNum <- as.integer(versions[2])\n+  } else {\n+      javaVersionNum <- as.integer(versions[1])\n+  }\n+  if (javaVersionNum < sparkJavaVersion) {\n     stop(paste(\"Java version\", sparkJavaVersion, \"is required for this package; found version:\","
  }],
  "prId": 25472
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "nit: 2-spaced indentation",
    "commit": "4531ced5892da7aee890c29027cf66b487375b39",
    "createdAt": "2019-08-16T09:42:51Z",
    "diffHunk": "@@ -91,10 +91,15 @@ checkJavaVersion <- function() {\n       }, javaVersionOut)\n \n   javaVersionStr <- strsplit(javaVersionFilter[[1]], \"[\\\"]\")[[1L]][2]\n-  # javaVersionStr is of the form 1.8.0_92.\n-  # Extract 8 from it to compare to sparkJavaVersion\n-  javaVersionNum <- as.integer(strsplit(javaVersionStr, \"[.]\")[[1L]][2])\n-  if (javaVersionNum != sparkJavaVersion) {\n+  # javaVersionStr is of the form 1.8.0_92/9.0.x/11.0.x.\n+  # We are using 8, 9, 10, 11 for sparkJavaVersion.\n+  versions = strsplit(javaVersionStr, \"[.]\")[[1L]]\n+  if (\"1\" == versions[1]) {\n+      javaVersionNum <- as.integer(versions[2])\n+  } else {\n+      javaVersionNum <- as.integer(versions[1])"
  }],
  "prId": 25472
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Oops. length and `versions <- trsplit(javaVersion...`",
    "commit": "4531ced5892da7aee890c29027cf66b487375b39",
    "createdAt": "2019-08-16T10:22:58Z",
    "diffHunk": "@@ -91,11 +91,16 @@ checkJavaVersion <- function() {\n       }, javaVersionOut)\n \n   javaVersionStr <- strsplit(javaVersionFilter[[1]], \"[\\\"]\")[[1L]][2]\n-  # javaVersionStr is of the form 1.8.0_92.\n-  # Extract 8 from it to compare to sparkJavaVersion\n-  javaVersionNum <- as.integer(strsplit(javaVersionStr, \"[.]\")[[1L]][2])\n-  if (javaVersionNum != sparkJavaVersion) {\n-    stop(paste(\"Java version\", sparkJavaVersion, \"is required for this package; found version:\",\n+  # javaVersionStr is of the form 1.8.0_92/9.0.x/11.0.x.\n+  # We are using 8, 9, 10, 11 for sparkJavaVersion.\n+  versions = strsplit(javaVersionStr, \"[.]\")[[1L]]\n+  if (\"1\" == versions[1]) {\n+    javaVersionNum <- as.integer(versions[2])\n+  } else {\n+    javaVersionNum <- as.integer(versions[1])\n+  }\n+  if (javaVersionNum < sparkJavaVersion) {\n+    stop(paste(\"Java version\", sparkJavaVersion, \", or greater, is required for this package; found version:\","
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Oops.",
    "commit": "4531ced5892da7aee890c29027cf66b487375b39",
    "createdAt": "2019-08-16T10:34:12Z",
    "diffHunk": "@@ -91,11 +91,16 @@ checkJavaVersion <- function() {\n       }, javaVersionOut)\n \n   javaVersionStr <- strsplit(javaVersionFilter[[1]], \"[\\\"]\")[[1L]][2]\n-  # javaVersionStr is of the form 1.8.0_92.\n-  # Extract 8 from it to compare to sparkJavaVersion\n-  javaVersionNum <- as.integer(strsplit(javaVersionStr, \"[.]\")[[1L]][2])\n-  if (javaVersionNum != sparkJavaVersion) {\n-    stop(paste(\"Java version\", sparkJavaVersion, \"is required for this package; found version:\",\n+  # javaVersionStr is of the form 1.8.0_92/9.0.x/11.0.x.\n+  # We are using 8, 9, 10, 11 for sparkJavaVersion.\n+  versions = strsplit(javaVersionStr, \"[.]\")[[1L]]\n+  if (\"1\" == versions[1]) {\n+    javaVersionNum <- as.integer(versions[2])\n+  } else {\n+    javaVersionNum <- as.integer(versions[1])\n+  }\n+  if (javaVersionNum < sparkJavaVersion) {\n+    stop(paste(\"Java version\", sparkJavaVersion, \", or greater, is required for this package; found version:\","
  }],
  "prId": 25472
}]