[{
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "should it have `numPartitions`?",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-07T06:03:10Z",
    "diffHunk": "@@ -0,0 +1,144 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth Model\n+#' \n+#' Provides FP-growth algorithm to mine frequent itemsets. \n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param featuresCol Features column name.\n+#' @param predictionCol Prediction column name.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' \n+#' @rdname spark.fpGrowth\n+#' @name spark.fpGrowth\n+#' @aliases spark.fpGrowth,SparkDataFrame-method\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' itemsets <- data.frame(features = c(\"a,b\", \"a,b,c\", \"c,d\"))\n+#' data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as features\")\n+#' model <- spark.fpGrowth(data)\n+#' \n+#' # Show frequent itemsets\n+#' frequent_itemsets <- freqItemsets(model)\n+#' showDF(frequent_itemsets)\n+#' \n+#' # Show association rules\n+#' association_rules <- associationRules(model)\n+#' showDF(association_rules)\n+#' \n+#' # Predict on new data\n+#' new_itemsets <- data.frame(features = c(\"b\", \"a,c\", \"d\"))\n+#' new_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as features\")\n+#' predict(model, new_data)\n+#' \n+#' # Save and load model\n+#' path <- \"/path/to/model\"\n+#' write.ml(model, path)\n+#' read.ml(path)\n+#' \n+#' # Optional arguments\n+#' baskets_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as baskets\")\n+#' another_model <- spark.fpGrowth(data, minSupport = 0.1, minConfidence = 0.5\n+#'                                 featureCol = \"baskets\", predictionCol = \"predicted\")\n+#' }\n+#' @note spark.fpGrowth since 2.2.0\n+setMethod(\"spark.fpGrowth\", signature(data = \"SparkDataFrame\"),\n+          function(data, minSupport = 0.3, minConfidence = 0.8,"
  }, {
    "author": {
      "login": "zero323"
    },
    "body": "Done.",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-07T22:50:29Z",
    "diffHunk": "@@ -0,0 +1,144 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth Model\n+#' \n+#' Provides FP-growth algorithm to mine frequent itemsets. \n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param featuresCol Features column name.\n+#' @param predictionCol Prediction column name.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' \n+#' @rdname spark.fpGrowth\n+#' @name spark.fpGrowth\n+#' @aliases spark.fpGrowth,SparkDataFrame-method\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' itemsets <- data.frame(features = c(\"a,b\", \"a,b,c\", \"c,d\"))\n+#' data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as features\")\n+#' model <- spark.fpGrowth(data)\n+#' \n+#' # Show frequent itemsets\n+#' frequent_itemsets <- freqItemsets(model)\n+#' showDF(frequent_itemsets)\n+#' \n+#' # Show association rules\n+#' association_rules <- associationRules(model)\n+#' showDF(association_rules)\n+#' \n+#' # Predict on new data\n+#' new_itemsets <- data.frame(features = c(\"b\", \"a,c\", \"d\"))\n+#' new_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as features\")\n+#' predict(model, new_data)\n+#' \n+#' # Save and load model\n+#' path <- \"/path/to/model\"\n+#' write.ml(model, path)\n+#' read.ml(path)\n+#' \n+#' # Optional arguments\n+#' baskets_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as baskets\")\n+#' another_model <- spark.fpGrowth(data, minSupport = 0.1, minConfidence = 0.5\n+#'                                 featureCol = \"baskets\", predictionCol = \"predicted\")\n+#' }\n+#' @note spark.fpGrowth since 2.2.0\n+setMethod(\"spark.fpGrowth\", signature(data = \"SparkDataFrame\"),\n+          function(data, minSupport = 0.3, minConfidence = 0.8,"
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "instead of `features` it should take a formula?",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-07T06:03:39Z",
    "diffHunk": "@@ -0,0 +1,144 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth Model\n+#' \n+#' Provides FP-growth algorithm to mine frequent itemsets. \n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param featuresCol Features column name.\n+#' @param predictionCol Prediction column name.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' \n+#' @rdname spark.fpGrowth\n+#' @name spark.fpGrowth\n+#' @aliases spark.fpGrowth,SparkDataFrame-method\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' itemsets <- data.frame(features = c(\"a,b\", \"a,b,c\", \"c,d\"))\n+#' data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as features\")\n+#' model <- spark.fpGrowth(data)\n+#' \n+#' # Show frequent itemsets\n+#' frequent_itemsets <- freqItemsets(model)\n+#' showDF(frequent_itemsets)\n+#' \n+#' # Show association rules\n+#' association_rules <- associationRules(model)\n+#' showDF(association_rules)\n+#' \n+#' # Predict on new data\n+#' new_itemsets <- data.frame(features = c(\"b\", \"a,c\", \"d\"))\n+#' new_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as features\")\n+#' predict(model, new_data)\n+#' \n+#' # Save and load model\n+#' path <- \"/path/to/model\"\n+#' write.ml(model, path)\n+#' read.ml(path)\n+#' \n+#' # Optional arguments\n+#' baskets_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as baskets\")\n+#' another_model <- spark.fpGrowth(data, minSupport = 0.1, minConfidence = 0.5\n+#'                                 featureCol = \"baskets\", predictionCol = \"predicted\")\n+#' }\n+#' @note spark.fpGrowth since 2.2.0\n+setMethod(\"spark.fpGrowth\", signature(data = \"SparkDataFrame\"),\n+          function(data, minSupport = 0.3, minConfidence = 0.8,\n+                   featuresCol = \"features\", predictionCol = \"prediction\") {"
  }, {
    "author": {
      "login": "felixcheung"
    },
    "body": "we generally avoid allow setting `predictionCol` too",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-07T06:04:48Z",
    "diffHunk": "@@ -0,0 +1,144 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth Model\n+#' \n+#' Provides FP-growth algorithm to mine frequent itemsets. \n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param featuresCol Features column name.\n+#' @param predictionCol Prediction column name.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' \n+#' @rdname spark.fpGrowth\n+#' @name spark.fpGrowth\n+#' @aliases spark.fpGrowth,SparkDataFrame-method\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' itemsets <- data.frame(features = c(\"a,b\", \"a,b,c\", \"c,d\"))\n+#' data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as features\")\n+#' model <- spark.fpGrowth(data)\n+#' \n+#' # Show frequent itemsets\n+#' frequent_itemsets <- freqItemsets(model)\n+#' showDF(frequent_itemsets)\n+#' \n+#' # Show association rules\n+#' association_rules <- associationRules(model)\n+#' showDF(association_rules)\n+#' \n+#' # Predict on new data\n+#' new_itemsets <- data.frame(features = c(\"b\", \"a,c\", \"d\"))\n+#' new_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as features\")\n+#' predict(model, new_data)\n+#' \n+#' # Save and load model\n+#' path <- \"/path/to/model\"\n+#' write.ml(model, path)\n+#' read.ml(path)\n+#' \n+#' # Optional arguments\n+#' baskets_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as baskets\")\n+#' another_model <- spark.fpGrowth(data, minSupport = 0.1, minConfidence = 0.5\n+#'                                 featureCol = \"baskets\", predictionCol = \"predicted\")\n+#' }\n+#' @note spark.fpGrowth since 2.2.0\n+setMethod(\"spark.fpGrowth\", signature(data = \"SparkDataFrame\"),\n+          function(data, minSupport = 0.3, minConfidence = 0.8,\n+                   featuresCol = \"features\", predictionCol = \"prediction\") {"
  }, {
    "author": {
      "login": "felixcheung"
    },
    "body": "about here-  thought?",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-07T18:07:50Z",
    "diffHunk": "@@ -0,0 +1,144 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth Model\n+#' \n+#' Provides FP-growth algorithm to mine frequent itemsets. \n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param featuresCol Features column name.\n+#' @param predictionCol Prediction column name.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' \n+#' @rdname spark.fpGrowth\n+#' @name spark.fpGrowth\n+#' @aliases spark.fpGrowth,SparkDataFrame-method\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' itemsets <- data.frame(features = c(\"a,b\", \"a,b,c\", \"c,d\"))\n+#' data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as features\")\n+#' model <- spark.fpGrowth(data)\n+#' \n+#' # Show frequent itemsets\n+#' frequent_itemsets <- freqItemsets(model)\n+#' showDF(frequent_itemsets)\n+#' \n+#' # Show association rules\n+#' association_rules <- associationRules(model)\n+#' showDF(association_rules)\n+#' \n+#' # Predict on new data\n+#' new_itemsets <- data.frame(features = c(\"b\", \"a,c\", \"d\"))\n+#' new_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as features\")\n+#' predict(model, new_data)\n+#' \n+#' # Save and load model\n+#' path <- \"/path/to/model\"\n+#' write.ml(model, path)\n+#' read.ml(path)\n+#' \n+#' # Optional arguments\n+#' baskets_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as baskets\")\n+#' another_model <- spark.fpGrowth(data, minSupport = 0.1, minConfidence = 0.5\n+#'                                 featureCol = \"baskets\", predictionCol = \"predicted\")\n+#' }\n+#' @note spark.fpGrowth since 2.2.0\n+setMethod(\"spark.fpGrowth\", signature(data = \"SparkDataFrame\"),\n+          function(data, minSupport = 0.3, minConfidence = 0.8,\n+                   featuresCol = \"features\", predictionCol = \"prediction\") {"
  }, {
    "author": {
      "login": "zero323"
    },
    "body": "To be honest I am not sure. If you think that setting `predictionCol` should  be disabled I am fine with that but I don't see how formulas could be useful here. `FPGrowth` doesn't really conform to the conventions used in other ML algorithms. It doesn't use vectors and fixed size buckets are unlikely to happen.",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-07T22:53:53Z",
    "diffHunk": "@@ -0,0 +1,144 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth Model\n+#' \n+#' Provides FP-growth algorithm to mine frequent itemsets. \n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param featuresCol Features column name.\n+#' @param predictionCol Prediction column name.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' \n+#' @rdname spark.fpGrowth\n+#' @name spark.fpGrowth\n+#' @aliases spark.fpGrowth,SparkDataFrame-method\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' itemsets <- data.frame(features = c(\"a,b\", \"a,b,c\", \"c,d\"))\n+#' data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as features\")\n+#' model <- spark.fpGrowth(data)\n+#' \n+#' # Show frequent itemsets\n+#' frequent_itemsets <- freqItemsets(model)\n+#' showDF(frequent_itemsets)\n+#' \n+#' # Show association rules\n+#' association_rules <- associationRules(model)\n+#' showDF(association_rules)\n+#' \n+#' # Predict on new data\n+#' new_itemsets <- data.frame(features = c(\"b\", \"a,c\", \"d\"))\n+#' new_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as features\")\n+#' predict(model, new_data)\n+#' \n+#' # Save and load model\n+#' path <- \"/path/to/model\"\n+#' write.ml(model, path)\n+#' read.ml(path)\n+#' \n+#' # Optional arguments\n+#' baskets_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as baskets\")\n+#' another_model <- spark.fpGrowth(data, minSupport = 0.1, minConfidence = 0.5\n+#'                                 featureCol = \"baskets\", predictionCol = \"predicted\")\n+#' }\n+#' @note spark.fpGrowth since 2.2.0\n+setMethod(\"spark.fpGrowth\", signature(data = \"SparkDataFrame\"),\n+          function(data, minSupport = 0.3, minConfidence = 0.8,\n+                   featuresCol = \"features\", predictionCol = \"prediction\") {"
  }, {
    "author": {
      "login": "felixcheung"
    },
    "body": "I believe predictionCol param only allow you to change the name of the column - prediction is always still going to be there, no?",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-20T20:49:38Z",
    "diffHunk": "@@ -0,0 +1,144 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth Model\n+#' \n+#' Provides FP-growth algorithm to mine frequent itemsets. \n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param featuresCol Features column name.\n+#' @param predictionCol Prediction column name.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' \n+#' @rdname spark.fpGrowth\n+#' @name spark.fpGrowth\n+#' @aliases spark.fpGrowth,SparkDataFrame-method\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' itemsets <- data.frame(features = c(\"a,b\", \"a,b,c\", \"c,d\"))\n+#' data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as features\")\n+#' model <- spark.fpGrowth(data)\n+#' \n+#' # Show frequent itemsets\n+#' frequent_itemsets <- freqItemsets(model)\n+#' showDF(frequent_itemsets)\n+#' \n+#' # Show association rules\n+#' association_rules <- associationRules(model)\n+#' showDF(association_rules)\n+#' \n+#' # Predict on new data\n+#' new_itemsets <- data.frame(features = c(\"b\", \"a,c\", \"d\"))\n+#' new_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as features\")\n+#' predict(model, new_data)\n+#' \n+#' # Save and load model\n+#' path <- \"/path/to/model\"\n+#' write.ml(model, path)\n+#' read.ml(path)\n+#' \n+#' # Optional arguments\n+#' baskets_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as baskets\")\n+#' another_model <- spark.fpGrowth(data, minSupport = 0.1, minConfidence = 0.5\n+#'                                 featureCol = \"baskets\", predictionCol = \"predicted\")\n+#' }\n+#' @note spark.fpGrowth since 2.2.0\n+setMethod(\"spark.fpGrowth\", signature(data = \"SparkDataFrame\"),\n+          function(data, minSupport = 0.3, minConfidence = 0.8,\n+                   featuresCol = \"features\", predictionCol = \"prediction\") {"
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "you may want to `as.numeric` on `minSupport`, `minConfidence` in case someone is passing in an integer and `callJStatic` would fail to match the wrapper method",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-07T06:06:38Z",
    "diffHunk": "@@ -0,0 +1,144 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth Model\n+#' \n+#' Provides FP-growth algorithm to mine frequent itemsets. \n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param featuresCol Features column name.\n+#' @param predictionCol Prediction column name.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' \n+#' @rdname spark.fpGrowth\n+#' @name spark.fpGrowth\n+#' @aliases spark.fpGrowth,SparkDataFrame-method\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' itemsets <- data.frame(features = c(\"a,b\", \"a,b,c\", \"c,d\"))\n+#' data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as features\")\n+#' model <- spark.fpGrowth(data)\n+#' \n+#' # Show frequent itemsets\n+#' frequent_itemsets <- freqItemsets(model)\n+#' showDF(frequent_itemsets)\n+#' \n+#' # Show association rules\n+#' association_rules <- associationRules(model)\n+#' showDF(association_rules)\n+#' \n+#' # Predict on new data\n+#' new_itemsets <- data.frame(features = c(\"b\", \"a,c\", \"d\"))\n+#' new_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as features\")\n+#' predict(model, new_data)\n+#' \n+#' # Save and load model\n+#' path <- \"/path/to/model\"\n+#' write.ml(model, path)\n+#' read.ml(path)\n+#' \n+#' # Optional arguments\n+#' baskets_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as baskets\")\n+#' another_model <- spark.fpGrowth(data, minSupport = 0.1, minConfidence = 0.5\n+#'                                 featureCol = \"baskets\", predictionCol = \"predicted\")\n+#' }\n+#' @note spark.fpGrowth since 2.2.0\n+setMethod(\"spark.fpGrowth\", signature(data = \"SparkDataFrame\"),\n+          function(data, minSupport = 0.3, minConfidence = 0.8,\n+                   featuresCol = \"features\", predictionCol = \"prediction\") {\n+            if (!is.numeric(minSupport) || minSupport < 0 || minSupport > 1) {\n+              stop(\"minSupport should be a number [0, 1].\")\n+            }\n+            if (!is.numeric(minConfidence) || minConfidence < 0 || minConfidence > 1) {\n+              stop(\"minConfidence should be a number [0, 1].\")\n+            }\n+\n+            jobj <- callJStatic(\"org.apache.spark.ml.r.FPGrowthWrapper\", \"fit\",\n+                                data@sdf, minSupport, minConfidence,"
  }, {
    "author": {
      "login": "zero323"
    },
    "body": "Done.",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-07T22:54:09Z",
    "diffHunk": "@@ -0,0 +1,144 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth Model\n+#' \n+#' Provides FP-growth algorithm to mine frequent itemsets. \n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param featuresCol Features column name.\n+#' @param predictionCol Prediction column name.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' \n+#' @rdname spark.fpGrowth\n+#' @name spark.fpGrowth\n+#' @aliases spark.fpGrowth,SparkDataFrame-method\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' itemsets <- data.frame(features = c(\"a,b\", \"a,b,c\", \"c,d\"))\n+#' data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as features\")\n+#' model <- spark.fpGrowth(data)\n+#' \n+#' # Show frequent itemsets\n+#' frequent_itemsets <- freqItemsets(model)\n+#' showDF(frequent_itemsets)\n+#' \n+#' # Show association rules\n+#' association_rules <- associationRules(model)\n+#' showDF(association_rules)\n+#' \n+#' # Predict on new data\n+#' new_itemsets <- data.frame(features = c(\"b\", \"a,c\", \"d\"))\n+#' new_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as features\")\n+#' predict(model, new_data)\n+#' \n+#' # Save and load model\n+#' path <- \"/path/to/model\"\n+#' write.ml(model, path)\n+#' read.ml(path)\n+#' \n+#' # Optional arguments\n+#' baskets_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as baskets\")\n+#' another_model <- spark.fpGrowth(data, minSupport = 0.1, minConfidence = 0.5\n+#'                                 featureCol = \"baskets\", predictionCol = \"predicted\")\n+#' }\n+#' @note spark.fpGrowth since 2.2.0\n+setMethod(\"spark.fpGrowth\", signature(data = \"SparkDataFrame\"),\n+          function(data, minSupport = 0.3, minConfidence = 0.8,\n+                   featuresCol = \"features\", predictionCol = \"prediction\") {\n+            if (!is.numeric(minSupport) || minSupport < 0 || minSupport > 1) {\n+              stop(\"minSupport should be a number [0, 1].\")\n+            }\n+            if (!is.numeric(minConfidence) || minConfidence < 0 || minConfidence > 1) {\n+              stop(\"minConfidence should be a number [0, 1].\")\n+            }\n+\n+            jobj <- callJStatic(\"org.apache.spark.ml.r.FPGrowthWrapper\", \"fit\",\n+                                data@sdf, minSupport, minConfidence,"
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "It might make sense to do this in a single line:\r\n```\r\ndataFrame(callJMethod(object@jobj, \"freqItemsets\")\r\n```\r\n\r\nmight be more readable that way. ditto with Association Rules below",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-07T06:10:05Z",
    "diffHunk": "@@ -0,0 +1,144 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth Model\n+#' \n+#' Provides FP-growth algorithm to mine frequent itemsets. \n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param featuresCol Features column name.\n+#' @param predictionCol Prediction column name.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' \n+#' @rdname spark.fpGrowth\n+#' @name spark.fpGrowth\n+#' @aliases spark.fpGrowth,SparkDataFrame-method\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' itemsets <- data.frame(features = c(\"a,b\", \"a,b,c\", \"c,d\"))\n+#' data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as features\")\n+#' model <- spark.fpGrowth(data)\n+#' \n+#' # Show frequent itemsets\n+#' frequent_itemsets <- freqItemsets(model)\n+#' showDF(frequent_itemsets)\n+#' \n+#' # Show association rules\n+#' association_rules <- associationRules(model)\n+#' showDF(association_rules)\n+#' \n+#' # Predict on new data\n+#' new_itemsets <- data.frame(features = c(\"b\", \"a,c\", \"d\"))\n+#' new_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as features\")\n+#' predict(model, new_data)\n+#' \n+#' # Save and load model\n+#' path <- \"/path/to/model\"\n+#' write.ml(model, path)\n+#' read.ml(path)\n+#' \n+#' # Optional arguments\n+#' baskets_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as baskets\")\n+#' another_model <- spark.fpGrowth(data, minSupport = 0.1, minConfidence = 0.5\n+#'                                 featureCol = \"baskets\", predictionCol = \"predicted\")\n+#' }\n+#' @note spark.fpGrowth since 2.2.0\n+setMethod(\"spark.fpGrowth\", signature(data = \"SparkDataFrame\"),\n+          function(data, minSupport = 0.3, minConfidence = 0.8,\n+                   featuresCol = \"features\", predictionCol = \"prediction\") {\n+            if (!is.numeric(minSupport) || minSupport < 0 || minSupport > 1) {\n+              stop(\"minSupport should be a number [0, 1].\")\n+            }\n+            if (!is.numeric(minConfidence) || minConfidence < 0 || minConfidence > 1) {\n+              stop(\"minConfidence should be a number [0, 1].\")\n+            }\n+\n+            jobj <- callJStatic(\"org.apache.spark.ml.r.FPGrowthWrapper\", \"fit\",\n+                                data@sdf, minSupport, minConfidence,\n+                                featuresCol, predictionCol)\n+            new(\"FPGrowthModel\", jobj = jobj)\n+          })\n+\n+# Get frequent itemsets.\n+#' @param object a fitted FPGrowth model.\n+#' @return A DataFrame with frequent itemsets.\n+#' \n+#' @rdname spark.fpGrowth\n+#' @aliases freqItemsets,FPGrowthModel-method\n+#' @export\n+#' @note freqItemsets(FPGrowthModel) since 2.2.0\n+setMethod(\"freqItemsets\", signature(object = \"FPGrowthModel\"),\n+          function(object) {\n+            jobj <- object@jobj\n+            freqItemsets <- callJMethod(jobj, \"freqItemsets\")\n+            dataFrame(freqItemsets)"
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "could you use the long form name (eg. look at LDA) and drop the word \"Model\" which we avoid using",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-07T06:11:07Z",
    "diffHunk": "@@ -0,0 +1,144 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth Model"
  }, {
    "author": {
      "login": "zero323"
    },
    "body": "Do you mean `spark.FPGrowth`? I can but as far as I can tell all classes use `Model` suffix ([`GeneralizedLinearRegressionModel`](https://github.com/apache/spark/blob/89cd3845b6edb165236a6498dcade033975ee276/R/pkg/R/mllib_regression.R#L33), [`GaussianMixtureModel`](https://github.com/apache/spark/blob/89cd3845b6edb165236a6498dcade033975ee276/R/pkg/R/mllib_clustering.R#L32) [`LDAModel`](https://github.com/apache/spark/blob/89cd3845b6edb165236a6498dcade033975ee276/R/pkg/R/mllib_clustering.R#L46) and so on) and none is using `spark` prefix.\r\n\r\nOr do you mean `representation` instead of `slots`? I believe that representation is no longer recommended.",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-07T16:16:03Z",
    "diffHunk": "@@ -0,0 +1,144 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth Model"
  }, {
    "author": {
      "login": "felixcheung"
    },
    "body": "I mean this \r\nhttps://github.com/apache/spark/blob/master/R/pkg/R/mllib_clustering.R#L467\r\nhttps://github.com/apache/spark/blob/master/R/pkg/R/mllib_clustering.R#L316\r\nwhich may or may not include the word model\r\n",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-07T18:06:03Z",
    "diffHunk": "@@ -0,0 +1,144 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth Model"
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "instead of duplicating `createDataFrame`, set `itemsets <- createDataFrame(data.frame(features = c(\"a,b\", \"a,b,c\", \"c,d\")))`\r\n\r\nbtw, do we have real data to use instead?",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-07T06:12:13Z",
    "diffHunk": "@@ -0,0 +1,144 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth Model\n+#' \n+#' Provides FP-growth algorithm to mine frequent itemsets. \n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param featuresCol Features column name.\n+#' @param predictionCol Prediction column name.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' \n+#' @rdname spark.fpGrowth\n+#' @name spark.fpGrowth\n+#' @aliases spark.fpGrowth,SparkDataFrame-method\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' itemsets <- data.frame(features = c(\"a,b\", \"a,b,c\", \"c,d\"))\n+#' data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as features\")"
  }, {
    "author": {
      "login": "zero323"
    },
    "body": "Yes, we do. Adjusted.",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-07T16:57:30Z",
    "diffHunk": "@@ -0,0 +1,144 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth Model\n+#' \n+#' Provides FP-growth algorithm to mine frequent itemsets. \n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param featuresCol Features column name.\n+#' @param predictionCol Prediction column name.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' \n+#' @rdname spark.fpGrowth\n+#' @name spark.fpGrowth\n+#' @aliases spark.fpGrowth,SparkDataFrame-method\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' itemsets <- data.frame(features = c(\"a,b\", \"a,b,c\", \"c,d\"))\n+#' data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as features\")"
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "collapse this to `head(freqItemsets(model))`",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-07T06:12:39Z",
    "diffHunk": "@@ -0,0 +1,144 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth Model\n+#' \n+#' Provides FP-growth algorithm to mine frequent itemsets. \n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param featuresCol Features column name.\n+#' @param predictionCol Prediction column name.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' \n+#' @rdname spark.fpGrowth\n+#' @name spark.fpGrowth\n+#' @aliases spark.fpGrowth,SparkDataFrame-method\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' itemsets <- data.frame(features = c(\"a,b\", \"a,b,c\", \"c,d\"))\n+#' data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as features\")\n+#' model <- spark.fpGrowth(data)\n+#' \n+#' # Show frequent itemsets\n+#' frequent_itemsets <- freqItemsets(model)\n+#' showDF(frequent_itemsets)"
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "wangmiao1981"
    },
    "body": "This line seems exceeding the length limit. ",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-17T05:38:40Z",
    "diffHunk": "@@ -0,0 +1,152 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth\n+#' \n+#' A parallel FP-growth algorithm to mine frequent itemsets. The algorithm is described in\n+#' Li et al., PFP: Parallel FP-Growth for Query\n+#' Recommendation <\\url{http://dx.doi.org/10.1145/1454008.1454027}>. PFP distributes computation in such a way that each worker executes an"
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "wangmiao1981"
    },
    "body": "Other APIs do not have blank line here. I think we should be consistent. ",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-17T05:40:03Z",
    "diffHunk": "@@ -0,0 +1,152 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth\n+#' \n+#' A parallel FP-growth algorithm to mine frequent itemsets. The algorithm is described in\n+#' Li et al., PFP: Parallel FP-Growth for Query\n+#' Recommendation <\\url{http://dx.doi.org/10.1145/1454008.1454027}>. PFP distributes computation in such a way that each worker executes an\n+#' independent group of mining tasks. The FP-Growth algorithm is described in\n+#' Han et al., Mining frequent patterns without\n+#' candidate generation <\\url{http://dx.doi.org/10.1145/335191.335372}>.\n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param featuresCol Features column name.\n+#' @param predictionCol Prediction column name.\n+#' @param numPartitions Number of partitions used for fitting.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' "
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "wangmiao1981"
    },
    "body": "add blank line. See other examples.",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-17T05:42:03Z",
    "diffHunk": "@@ -0,0 +1,152 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth\n+#' \n+#' A parallel FP-growth algorithm to mine frequent itemsets. The algorithm is described in\n+#' Li et al., PFP: Parallel FP-Growth for Query\n+#' Recommendation <\\url{http://dx.doi.org/10.1145/1454008.1454027}>. PFP distributes computation in such a way that each worker executes an\n+#' independent group of mining tasks. The FP-Growth algorithm is described in\n+#' Han et al., Mining frequent patterns without\n+#' candidate generation <\\url{http://dx.doi.org/10.1145/335191.335372}>.\n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param featuresCol Features column name.\n+#' @param predictionCol Prediction column name.\n+#' @param numPartitions Number of partitions used for fitting.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' \n+#' @rdname spark.fpGrowth\n+#' @name spark.fpGrowth\n+#' @aliases spark.fpGrowth,SparkDataFrame-method\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' raw_data <- read.df(\n+#'   \"data/mllib/sample_fpgrowth.txt\",\n+#'   source = \"csv\",\n+#'   schema = structType(structField(\"raw_features\", \"string\")))\n+#'\n+#' data <- selectExpr(raw_data, \"split(raw_features, ' ') as features\")\n+#' model <- spark.fpGrowth(data)\n+#'\n+#' # Show frequent itemsets\n+#' frequent_itemsets <- spark.freqItemsets(model)\n+#' showDF(frequent_itemsets)\n+#'\n+#' # Show association rules\n+#' association_rules <- spark.associationRules(model)\n+#' showDF(association_rules)\n+#'\n+#' # Predict on new data\n+#' new_itemsets <- data.frame(features = c(\"t\", \"t,s\"))\n+#' new_data <- selectExpr(createDataFrame(new_itemsets), \"split(features, ',') as features\")\n+#' predict(model, new_data)\n+#'\n+#' # Save and load model\n+#' path <- \"/path/to/model\"\n+#' write.ml(model, path)\n+#' read.ml(path)\n+#'\n+#' # Optional arguments\n+#' baskets_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as baskets\")\n+#' another_model <- spark.fpGrowth(data, minSupport = 0.1, minConfidence = 0.5\n+#'                                 featureCol = \"baskets\", predictionCol = \"predicted\",\n+#'                                 numPartitions = 10)\n+#' }\n+#' @references \\url{http://en.wikipedia.org/wiki/Association_rule_learning}\n+#' @note spark.fpGrowth since 2.2.0\n+setMethod(\"spark.fpGrowth\", signature(data = \"SparkDataFrame\"),\n+          function(data, minSupport = 0.3, minConfidence = 0.8,\n+                   featuresCol = \"features\", predictionCol = \"prediction\",\n+                   numPartitions = -1) {\n+            if (!is.numeric(minSupport) || minSupport < 0 || minSupport > 1) {\n+              stop(\"minSupport should be a number [0, 1].\")\n+            }\n+            if (!is.numeric(minConfidence) || minConfidence < 0 || minConfidence > 1) {\n+              stop(\"minConfidence should be a number [0, 1].\")\n+            }\n+\n+            jobj <- callJStatic(\"org.apache.spark.ml.r.FPGrowthWrapper\", \"fit\",\n+                                data@sdf, as.numeric(minSupport), as.numeric(minConfidence),\n+                                featuresCol, predictionCol, as.integer(numPartitions))\n+            new(\"FPGrowthModel\", jobj = jobj)\n+          })\n+\n+# Get frequent itemsets.\n+#' @param object a fitted FPGrowth model."
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "wangmiao1981"
    },
    "body": "no blank line here.",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-17T05:42:27Z",
    "diffHunk": "@@ -0,0 +1,152 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth\n+#' \n+#' A parallel FP-growth algorithm to mine frequent itemsets. The algorithm is described in\n+#' Li et al., PFP: Parallel FP-Growth for Query\n+#' Recommendation <\\url{http://dx.doi.org/10.1145/1454008.1454027}>. PFP distributes computation in such a way that each worker executes an\n+#' independent group of mining tasks. The FP-Growth algorithm is described in\n+#' Han et al., Mining frequent patterns without\n+#' candidate generation <\\url{http://dx.doi.org/10.1145/335191.335372}>.\n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param featuresCol Features column name.\n+#' @param predictionCol Prediction column name.\n+#' @param numPartitions Number of partitions used for fitting.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' \n+#' @rdname spark.fpGrowth\n+#' @name spark.fpGrowth\n+#' @aliases spark.fpGrowth,SparkDataFrame-method\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' raw_data <- read.df(\n+#'   \"data/mllib/sample_fpgrowth.txt\",\n+#'   source = \"csv\",\n+#'   schema = structType(structField(\"raw_features\", \"string\")))\n+#'\n+#' data <- selectExpr(raw_data, \"split(raw_features, ' ') as features\")\n+#' model <- spark.fpGrowth(data)\n+#'\n+#' # Show frequent itemsets\n+#' frequent_itemsets <- spark.freqItemsets(model)\n+#' showDF(frequent_itemsets)\n+#'\n+#' # Show association rules\n+#' association_rules <- spark.associationRules(model)\n+#' showDF(association_rules)\n+#'\n+#' # Predict on new data\n+#' new_itemsets <- data.frame(features = c(\"t\", \"t,s\"))\n+#' new_data <- selectExpr(createDataFrame(new_itemsets), \"split(features, ',') as features\")\n+#' predict(model, new_data)\n+#'\n+#' # Save and load model\n+#' path <- \"/path/to/model\"\n+#' write.ml(model, path)\n+#' read.ml(path)\n+#'\n+#' # Optional arguments\n+#' baskets_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as baskets\")\n+#' another_model <- spark.fpGrowth(data, minSupport = 0.1, minConfidence = 0.5\n+#'                                 featureCol = \"baskets\", predictionCol = \"predicted\",\n+#'                                 numPartitions = 10)\n+#' }\n+#' @references \\url{http://en.wikipedia.org/wiki/Association_rule_learning}\n+#' @note spark.fpGrowth since 2.2.0\n+setMethod(\"spark.fpGrowth\", signature(data = \"SparkDataFrame\"),\n+          function(data, minSupport = 0.3, minConfidence = 0.8,\n+                   featuresCol = \"features\", predictionCol = \"prediction\",\n+                   numPartitions = -1) {\n+            if (!is.numeric(minSupport) || minSupport < 0 || minSupport > 1) {\n+              stop(\"minSupport should be a number [0, 1].\")\n+            }\n+            if (!is.numeric(minConfidence) || minConfidence < 0 || minConfidence > 1) {\n+              stop(\"minConfidence should be a number [0, 1].\")\n+            }\n+\n+            jobj <- callJStatic(\"org.apache.spark.ml.r.FPGrowthWrapper\", \"fit\",\n+                                data@sdf, as.numeric(minSupport), as.numeric(minConfidence),\n+                                featuresCol, predictionCol, as.integer(numPartitions))\n+            new(\"FPGrowthModel\", jobj = jobj)\n+          })\n+\n+# Get frequent itemsets.\n+#' @param object a fitted FPGrowth model.\n+#' @return A DataFrame with frequent itemsets.\n+#' "
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "wangmiao1981"
    },
    "body": "Add blank line.",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-17T05:42:44Z",
    "diffHunk": "@@ -0,0 +1,152 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth\n+#' \n+#' A parallel FP-growth algorithm to mine frequent itemsets. The algorithm is described in\n+#' Li et al., PFP: Parallel FP-Growth for Query\n+#' Recommendation <\\url{http://dx.doi.org/10.1145/1454008.1454027}>. PFP distributes computation in such a way that each worker executes an\n+#' independent group of mining tasks. The FP-Growth algorithm is described in\n+#' Han et al., Mining frequent patterns without\n+#' candidate generation <\\url{http://dx.doi.org/10.1145/335191.335372}>.\n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param featuresCol Features column name.\n+#' @param predictionCol Prediction column name.\n+#' @param numPartitions Number of partitions used for fitting.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' \n+#' @rdname spark.fpGrowth\n+#' @name spark.fpGrowth\n+#' @aliases spark.fpGrowth,SparkDataFrame-method\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' raw_data <- read.df(\n+#'   \"data/mllib/sample_fpgrowth.txt\",\n+#'   source = \"csv\",\n+#'   schema = structType(structField(\"raw_features\", \"string\")))\n+#'\n+#' data <- selectExpr(raw_data, \"split(raw_features, ' ') as features\")\n+#' model <- spark.fpGrowth(data)\n+#'\n+#' # Show frequent itemsets\n+#' frequent_itemsets <- spark.freqItemsets(model)\n+#' showDF(frequent_itemsets)\n+#'\n+#' # Show association rules\n+#' association_rules <- spark.associationRules(model)\n+#' showDF(association_rules)\n+#'\n+#' # Predict on new data\n+#' new_itemsets <- data.frame(features = c(\"t\", \"t,s\"))\n+#' new_data <- selectExpr(createDataFrame(new_itemsets), \"split(features, ',') as features\")\n+#' predict(model, new_data)\n+#'\n+#' # Save and load model\n+#' path <- \"/path/to/model\"\n+#' write.ml(model, path)\n+#' read.ml(path)\n+#'\n+#' # Optional arguments\n+#' baskets_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as baskets\")\n+#' another_model <- spark.fpGrowth(data, minSupport = 0.1, minConfidence = 0.5\n+#'                                 featureCol = \"baskets\", predictionCol = \"predicted\",\n+#'                                 numPartitions = 10)\n+#' }\n+#' @references \\url{http://en.wikipedia.org/wiki/Association_rule_learning}\n+#' @note spark.fpGrowth since 2.2.0\n+setMethod(\"spark.fpGrowth\", signature(data = \"SparkDataFrame\"),\n+          function(data, minSupport = 0.3, minConfidence = 0.8,\n+                   featuresCol = \"features\", predictionCol = \"prediction\",\n+                   numPartitions = -1) {\n+            if (!is.numeric(minSupport) || minSupport < 0 || minSupport > 1) {\n+              stop(\"minSupport should be a number [0, 1].\")\n+            }\n+            if (!is.numeric(minConfidence) || minConfidence < 0 || minConfidence > 1) {\n+              stop(\"minConfidence should be a number [0, 1].\")\n+            }\n+\n+            jobj <- callJStatic(\"org.apache.spark.ml.r.FPGrowthWrapper\", \"fit\",\n+                                data@sdf, as.numeric(minSupport), as.numeric(minConfidence),\n+                                featuresCol, predictionCol, as.integer(numPartitions))\n+            new(\"FPGrowthModel\", jobj = jobj)\n+          })\n+\n+# Get frequent itemsets.\n+#' @param object a fitted FPGrowth model.\n+#' @return A DataFrame with frequent itemsets.\n+#' \n+#' @rdname spark.fpGrowth\n+#' @aliases freqItemsets,FPGrowthModel-method\n+#' @export\n+#' @note spark.freqItemsets(FPGrowthModel) since 2.2.0\n+setMethod(\"spark.freqItemsets\", signature(object = \"FPGrowthModel\"),\n+          function(object) {\n+            dataFrame(callJMethod(object@jobj, \"freqItemsets\"))\n+          })\n+\n+# Get association rules.\n+#' @return A DataFrame with association rules."
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "wangmiao1981"
    },
    "body": "Add blank line",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-17T05:43:05Z",
    "diffHunk": "@@ -0,0 +1,152 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth\n+#' \n+#' A parallel FP-growth algorithm to mine frequent itemsets. The algorithm is described in\n+#' Li et al., PFP: Parallel FP-Growth for Query\n+#' Recommendation <\\url{http://dx.doi.org/10.1145/1454008.1454027}>. PFP distributes computation in such a way that each worker executes an\n+#' independent group of mining tasks. The FP-Growth algorithm is described in\n+#' Han et al., Mining frequent patterns without\n+#' candidate generation <\\url{http://dx.doi.org/10.1145/335191.335372}>.\n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param featuresCol Features column name.\n+#' @param predictionCol Prediction column name.\n+#' @param numPartitions Number of partitions used for fitting.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' \n+#' @rdname spark.fpGrowth\n+#' @name spark.fpGrowth\n+#' @aliases spark.fpGrowth,SparkDataFrame-method\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' raw_data <- read.df(\n+#'   \"data/mllib/sample_fpgrowth.txt\",\n+#'   source = \"csv\",\n+#'   schema = structType(structField(\"raw_features\", \"string\")))\n+#'\n+#' data <- selectExpr(raw_data, \"split(raw_features, ' ') as features\")\n+#' model <- spark.fpGrowth(data)\n+#'\n+#' # Show frequent itemsets\n+#' frequent_itemsets <- spark.freqItemsets(model)\n+#' showDF(frequent_itemsets)\n+#'\n+#' # Show association rules\n+#' association_rules <- spark.associationRules(model)\n+#' showDF(association_rules)\n+#'\n+#' # Predict on new data\n+#' new_itemsets <- data.frame(features = c(\"t\", \"t,s\"))\n+#' new_data <- selectExpr(createDataFrame(new_itemsets), \"split(features, ',') as features\")\n+#' predict(model, new_data)\n+#'\n+#' # Save and load model\n+#' path <- \"/path/to/model\"\n+#' write.ml(model, path)\n+#' read.ml(path)\n+#'\n+#' # Optional arguments\n+#' baskets_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as baskets\")\n+#' another_model <- spark.fpGrowth(data, minSupport = 0.1, minConfidence = 0.5\n+#'                                 featureCol = \"baskets\", predictionCol = \"predicted\",\n+#'                                 numPartitions = 10)\n+#' }\n+#' @references \\url{http://en.wikipedia.org/wiki/Association_rule_learning}\n+#' @note spark.fpGrowth since 2.2.0\n+setMethod(\"spark.fpGrowth\", signature(data = \"SparkDataFrame\"),\n+          function(data, minSupport = 0.3, minConfidence = 0.8,\n+                   featuresCol = \"features\", predictionCol = \"prediction\",\n+                   numPartitions = -1) {\n+            if (!is.numeric(minSupport) || minSupport < 0 || minSupport > 1) {\n+              stop(\"minSupport should be a number [0, 1].\")\n+            }\n+            if (!is.numeric(minConfidence) || minConfidence < 0 || minConfidence > 1) {\n+              stop(\"minConfidence should be a number [0, 1].\")\n+            }\n+\n+            jobj <- callJStatic(\"org.apache.spark.ml.r.FPGrowthWrapper\", \"fit\",\n+                                data@sdf, as.numeric(minSupport), as.numeric(minConfidence),\n+                                featuresCol, predictionCol, as.integer(numPartitions))\n+            new(\"FPGrowthModel\", jobj = jobj)\n+          })\n+\n+# Get frequent itemsets.\n+#' @param object a fitted FPGrowth model.\n+#' @return A DataFrame with frequent itemsets.\n+#' \n+#' @rdname spark.fpGrowth\n+#' @aliases freqItemsets,FPGrowthModel-method\n+#' @export\n+#' @note spark.freqItemsets(FPGrowthModel) since 2.2.0\n+setMethod(\"spark.freqItemsets\", signature(object = \"FPGrowthModel\"),\n+          function(object) {\n+            dataFrame(callJMethod(object@jobj, \"freqItemsets\"))\n+          })\n+\n+# Get association rules.\n+#' @return A DataFrame with association rules.\n+#' @rdname spark.fpGrowth\n+#' @aliases associationRules,FPGrowthModel-method\n+#' @export\n+#' @note spark.associationRules(FPGrowthModel) since 2.2.0\n+setMethod(\"spark.associationRules\", signature(object = \"FPGrowthModel\"),\n+          function(object) {\n+            dataFrame(callJMethod(object@jobj, \"associationRules\"))\n+          })\n+\n+#  Makes predictions based on generated association rules\n+#' @param newData a SparkDataFrame for testing."
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "wangmiao1981"
    },
    "body": "add blank line",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-17T05:43:25Z",
    "diffHunk": "@@ -0,0 +1,152 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth\n+#' \n+#' A parallel FP-growth algorithm to mine frequent itemsets. The algorithm is described in\n+#' Li et al., PFP: Parallel FP-Growth for Query\n+#' Recommendation <\\url{http://dx.doi.org/10.1145/1454008.1454027}>. PFP distributes computation in such a way that each worker executes an\n+#' independent group of mining tasks. The FP-Growth algorithm is described in\n+#' Han et al., Mining frequent patterns without\n+#' candidate generation <\\url{http://dx.doi.org/10.1145/335191.335372}>.\n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param featuresCol Features column name.\n+#' @param predictionCol Prediction column name.\n+#' @param numPartitions Number of partitions used for fitting.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' \n+#' @rdname spark.fpGrowth\n+#' @name spark.fpGrowth\n+#' @aliases spark.fpGrowth,SparkDataFrame-method\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' raw_data <- read.df(\n+#'   \"data/mllib/sample_fpgrowth.txt\",\n+#'   source = \"csv\",\n+#'   schema = structType(structField(\"raw_features\", \"string\")))\n+#'\n+#' data <- selectExpr(raw_data, \"split(raw_features, ' ') as features\")\n+#' model <- spark.fpGrowth(data)\n+#'\n+#' # Show frequent itemsets\n+#' frequent_itemsets <- spark.freqItemsets(model)\n+#' showDF(frequent_itemsets)\n+#'\n+#' # Show association rules\n+#' association_rules <- spark.associationRules(model)\n+#' showDF(association_rules)\n+#'\n+#' # Predict on new data\n+#' new_itemsets <- data.frame(features = c(\"t\", \"t,s\"))\n+#' new_data <- selectExpr(createDataFrame(new_itemsets), \"split(features, ',') as features\")\n+#' predict(model, new_data)\n+#'\n+#' # Save and load model\n+#' path <- \"/path/to/model\"\n+#' write.ml(model, path)\n+#' read.ml(path)\n+#'\n+#' # Optional arguments\n+#' baskets_data <- selectExpr(createDataFrame(itemsets), \"split(features, ',') as baskets\")\n+#' another_model <- spark.fpGrowth(data, minSupport = 0.1, minConfidence = 0.5\n+#'                                 featureCol = \"baskets\", predictionCol = \"predicted\",\n+#'                                 numPartitions = 10)\n+#' }\n+#' @references \\url{http://en.wikipedia.org/wiki/Association_rule_learning}\n+#' @note spark.fpGrowth since 2.2.0\n+setMethod(\"spark.fpGrowth\", signature(data = \"SparkDataFrame\"),\n+          function(data, minSupport = 0.3, minConfidence = 0.8,\n+                   featuresCol = \"features\", predictionCol = \"prediction\",\n+                   numPartitions = -1) {\n+            if (!is.numeric(minSupport) || minSupport < 0 || minSupport > 1) {\n+              stop(\"minSupport should be a number [0, 1].\")\n+            }\n+            if (!is.numeric(minConfidence) || minConfidence < 0 || minConfidence > 1) {\n+              stop(\"minConfidence should be a number [0, 1].\")\n+            }\n+\n+            jobj <- callJStatic(\"org.apache.spark.ml.r.FPGrowthWrapper\", \"fit\",\n+                                data@sdf, as.numeric(minSupport), as.numeric(minConfidence),\n+                                featuresCol, predictionCol, as.integer(numPartitions))\n+            new(\"FPGrowthModel\", jobj = jobj)\n+          })\n+\n+# Get frequent itemsets.\n+#' @param object a fitted FPGrowth model.\n+#' @return A DataFrame with frequent itemsets.\n+#' \n+#' @rdname spark.fpGrowth\n+#' @aliases freqItemsets,FPGrowthModel-method\n+#' @export\n+#' @note spark.freqItemsets(FPGrowthModel) since 2.2.0\n+setMethod(\"spark.freqItemsets\", signature(object = \"FPGrowthModel\"),\n+          function(object) {\n+            dataFrame(callJMethod(object@jobj, \"freqItemsets\"))\n+          })\n+\n+# Get association rules.\n+#' @return A DataFrame with association rules.\n+#' @rdname spark.fpGrowth\n+#' @aliases associationRules,FPGrowthModel-method\n+#' @export\n+#' @note spark.associationRules(FPGrowthModel) since 2.2.0\n+setMethod(\"spark.associationRules\", signature(object = \"FPGrowthModel\"),\n+          function(object) {\n+            dataFrame(callJMethod(object@jobj, \"associationRules\"))\n+          })\n+\n+#  Makes predictions based on generated association rules\n+#' @param newData a SparkDataFrame for testing.\n+#' @return \\code{predict} returns a SparkDataFrame containing predicted values.\n+#' @rdname spark.fpGrowth\n+#' @aliases predict,FPGrowthModel-method\n+#' @export\n+#' @note predict(FPGrowthModel) since 2.2.0\n+setMethod(\"predict\", signature(object = \"FPGrowthModel\"),\n+          function(object, newData) {\n+            predict_internal(object, newData)\n+          })\n+\n+#  Saves the FPGrowth model to the output path.\n+#' @param path the directory where the model is saved."
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "I think we discussed this - let's make it `FP-Growth` or `Frequent Pattern Mining` (https://spark.apache.org/docs/latest/mllib-frequent-pattern-mining.html) as the title",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-20T20:35:28Z",
    "diffHunk": "@@ -0,0 +1,153 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth"
  }, {
    "author": {
      "login": "felixcheung"
    },
    "body": "was https://github.com/apache/spark/pull/17170#discussion_r104736398",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-20T20:50:56Z",
    "diffHunk": "@@ -0,0 +1,153 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth"
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "can you check if this generate the doc properly\r\n`<\\url{http://dx.doi.org/10.1145/1454008.1454027}>`\r\ngenerally it should be \r\n`\\href{http://...}{Text}`",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-20T20:36:37Z",
    "diffHunk": "@@ -0,0 +1,153 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth\n+#' \n+#' A parallel FP-growth algorithm to mine frequent itemsets. The algorithm is described in\n+#' Li et al., PFP: Parallel FP-Growth for Query\n+#' Recommendation <\\url{http://dx.doi.org/10.1145/1454008.1454027}>. "
  }, {
    "author": {
      "login": "zero323"
    },
    "body": "It does render the link as expected, but linking ML docs is indeed a better choice.",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-21T14:27:38Z",
    "diffHunk": "@@ -0,0 +1,153 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth\n+#' \n+#' A parallel FP-growth algorithm to mine frequent itemsets. The algorithm is described in\n+#' Li et al., PFP: Parallel FP-Growth for Query\n+#' Recommendation <\\url{http://dx.doi.org/10.1145/1454008.1454027}>. "
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "ditto here for url.\r\nIn fact, I'm not sure we need to include all the links here but instead link to \r\nhttps://spark.apache.org/docs/latest/mllib-frequent-pattern-mining.html",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-20T20:37:12Z",
    "diffHunk": "@@ -0,0 +1,153 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth\n+#' \n+#' A parallel FP-growth algorithm to mine frequent itemsets. The algorithm is described in\n+#' Li et al., PFP: Parallel FP-Growth for Query\n+#' Recommendation <\\url{http://dx.doi.org/10.1145/1454008.1454027}>. \n+#' PFP distributes computation in such a way that each worker executes an\n+#' independent group of mining tasks. The FP-Growth algorithm is described in\n+#' Han et al., Mining frequent patterns without\n+#' candidate generation <\\url{http://dx.doi.org/10.1145/335191.335372}>."
  }, {
    "author": {
      "login": "zero323"
    },
    "body": "Sounds good. I'll link the docs.",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-21T14:26:24Z",
    "diffHunk": "@@ -0,0 +1,153 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth\n+#' \n+#' A parallel FP-growth algorithm to mine frequent itemsets. The algorithm is described in\n+#' Li et al., PFP: Parallel FP-Growth for Query\n+#' Recommendation <\\url{http://dx.doi.org/10.1145/1454008.1454027}>. \n+#' PFP distributes computation in such a way that each worker executes an\n+#' independent group of mining tasks. The FP-Growth algorithm is described in\n+#' Han et al., Mining frequent patterns without\n+#' candidate generation <\\url{http://dx.doi.org/10.1145/335191.335372}>."
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "we don't generally use this tag. Do you want to move to @seealso, or just link to in the description above",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-20T20:39:00Z",
    "diffHunk": "@@ -0,0 +1,153 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth\n+#' \n+#' A parallel FP-growth algorithm to mine frequent itemsets. The algorithm is described in\n+#' Li et al., PFP: Parallel FP-Growth for Query\n+#' Recommendation <\\url{http://dx.doi.org/10.1145/1454008.1454027}>. \n+#' PFP distributes computation in such a way that each worker executes an\n+#' independent group of mining tasks. The FP-Growth algorithm is described in\n+#' Han et al., Mining frequent patterns without\n+#' candidate generation <\\url{http://dx.doi.org/10.1145/335191.335372}>.\n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param itemsCol Items column name.\n+#' @param numPartitions Number of partitions used for fitting.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' @rdname spark.fpGrowth\n+#' @name spark.fpGrowth\n+#' @aliases spark.fpGrowth,SparkDataFrame-method\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' raw_data <- read.df(\n+#'   \"data/mllib/sample_fpgrowth.txt\",\n+#'   source = \"csv\",\n+#'   schema = structType(structField(\"raw_items\", \"string\")))\n+#'\n+#' data <- selectExpr(raw_data, \"split(raw_items, ' ') as items\")\n+#' model <- spark.fpGrowth(data)\n+#'\n+#' # Show frequent itemsets\n+#' frequent_itemsets <- spark.freqItemsets(model)\n+#' showDF(frequent_itemsets)\n+#'\n+#' # Show association rules\n+#' association_rules <- spark.associationRules(model)\n+#' showDF(association_rules)\n+#'\n+#' # Predict on new data\n+#' new_itemsets <- data.frame(items = c(\"t\", \"t,s\"))\n+#' new_data <- selectExpr(createDataFrame(new_itemsets), \"split(items, ',') as items\")\n+#' predict(model, new_data)\n+#'\n+#' # Save and load model\n+#' path <- \"/path/to/model\"\n+#' write.ml(model, path)\n+#' read.ml(path)\n+#'\n+#' # Optional arguments\n+#' baskets_data <- selectExpr(createDataFrame(itemsets), \"split(items, ',') as baskets\")\n+#' another_model <- spark.fpGrowth(data, minSupport = 0.1, minConfidence = 0.5\n+#'                                 itemsCol = \"baskets\", numPartitions = 10)\n+#' }\n+#' @references \\url{http://en.wikipedia.org/wiki/Association_rule_learning}"
  }, {
    "author": {
      "login": "zero323"
    },
    "body": " I'll remove it completely and just link to the docs.",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-21T21:33:47Z",
    "diffHunk": "@@ -0,0 +1,153 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth\n+#' \n+#' A parallel FP-growth algorithm to mine frequent itemsets. The algorithm is described in\n+#' Li et al., PFP: Parallel FP-Growth for Query\n+#' Recommendation <\\url{http://dx.doi.org/10.1145/1454008.1454027}>. \n+#' PFP distributes computation in such a way that each worker executes an\n+#' independent group of mining tasks. The FP-Growth algorithm is described in\n+#' Han et al., Mining frequent patterns without\n+#' candidate generation <\\url{http://dx.doi.org/10.1145/335191.335372}>.\n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param itemsCol Items column name.\n+#' @param numPartitions Number of partitions used for fitting.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' @rdname spark.fpGrowth\n+#' @name spark.fpGrowth\n+#' @aliases spark.fpGrowth,SparkDataFrame-method\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' raw_data <- read.df(\n+#'   \"data/mllib/sample_fpgrowth.txt\",\n+#'   source = \"csv\",\n+#'   schema = structType(structField(\"raw_items\", \"string\")))\n+#'\n+#' data <- selectExpr(raw_data, \"split(raw_items, ' ') as items\")\n+#' model <- spark.fpGrowth(data)\n+#'\n+#' # Show frequent itemsets\n+#' frequent_itemsets <- spark.freqItemsets(model)\n+#' showDF(frequent_itemsets)\n+#'\n+#' # Show association rules\n+#' association_rules <- spark.associationRules(model)\n+#' showDF(association_rules)\n+#'\n+#' # Predict on new data\n+#' new_itemsets <- data.frame(items = c(\"t\", \"t,s\"))\n+#' new_data <- selectExpr(createDataFrame(new_itemsets), \"split(items, ',') as items\")\n+#' predict(model, new_data)\n+#'\n+#' # Save and load model\n+#' path <- \"/path/to/model\"\n+#' write.ml(model, path)\n+#' read.ml(path)\n+#'\n+#' # Optional arguments\n+#' baskets_data <- selectExpr(createDataFrame(itemsets), \"split(items, ',') as baskets\")\n+#' another_model <- spark.fpGrowth(data, minSupport = 0.1, minConfidence = 0.5\n+#'                                 itemsCol = \"baskets\", numPartitions = 10)\n+#' }\n+#' @references \\url{http://en.wikipedia.org/wiki/Association_rule_learning}"
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "`numPartitions` by default is not set in Scala - let's default this to NULL instead here\r\n\r\nbut do not as.integer if value is NULL - something like\r\nnumPartitions <- if (is.null(numPartitions)) NULL else as.integer(numPartitions)\r\nbefore passing to JVM side\r\n",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-20T20:41:51Z",
    "diffHunk": "@@ -0,0 +1,153 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FPGrowth\n+#' \n+#' A parallel FP-growth algorithm to mine frequent itemsets. The algorithm is described in\n+#' Li et al., PFP: Parallel FP-Growth for Query\n+#' Recommendation <\\url{http://dx.doi.org/10.1145/1454008.1454027}>. \n+#' PFP distributes computation in such a way that each worker executes an\n+#' independent group of mining tasks. The FP-Growth algorithm is described in\n+#' Han et al., Mining frequent patterns without\n+#' candidate generation <\\url{http://dx.doi.org/10.1145/335191.335372}>.\n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param itemsCol Items column name.\n+#' @param numPartitions Number of partitions used for fitting.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' @rdname spark.fpGrowth\n+#' @name spark.fpGrowth\n+#' @aliases spark.fpGrowth,SparkDataFrame-method\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' raw_data <- read.df(\n+#'   \"data/mllib/sample_fpgrowth.txt\",\n+#'   source = \"csv\",\n+#'   schema = structType(structField(\"raw_items\", \"string\")))\n+#'\n+#' data <- selectExpr(raw_data, \"split(raw_items, ' ') as items\")\n+#' model <- spark.fpGrowth(data)\n+#'\n+#' # Show frequent itemsets\n+#' frequent_itemsets <- spark.freqItemsets(model)\n+#' showDF(frequent_itemsets)\n+#'\n+#' # Show association rules\n+#' association_rules <- spark.associationRules(model)\n+#' showDF(association_rules)\n+#'\n+#' # Predict on new data\n+#' new_itemsets <- data.frame(items = c(\"t\", \"t,s\"))\n+#' new_data <- selectExpr(createDataFrame(new_itemsets), \"split(items, ',') as items\")\n+#' predict(model, new_data)\n+#'\n+#' # Save and load model\n+#' path <- \"/path/to/model\"\n+#' write.ml(model, path)\n+#' read.ml(path)\n+#'\n+#' # Optional arguments\n+#' baskets_data <- selectExpr(createDataFrame(itemsets), \"split(items, ',') as baskets\")\n+#' another_model <- spark.fpGrowth(data, minSupport = 0.1, minConfidence = 0.5\n+#'                                 itemsCol = \"baskets\", numPartitions = 10)\n+#' }\n+#' @references \\url{http://en.wikipedia.org/wiki/Association_rule_learning}\n+#' @note spark.fpGrowth since 2.2.0\n+setMethod(\"spark.fpGrowth\", signature(data = \"SparkDataFrame\"),\n+          function(data, minSupport = 0.3, minConfidence = 0.8,\n+                   itemsCol = \"items\", numPartitions = -1) {"
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "as this https://github.com/apache/spark/pull/17170/commits/65229163721475f7769387d3e4ba912e570cecc3#r107011745 we should check numPartitions too?\r\nHow about changing it to\r\n```\r\nif (!is.null(numPartitions)) {\r\n  numPartitions <- as.integer(numPartitions)\r\n  stopifnot(numPartitions > 0)\r\n}\r\n```",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-22T07:57:37Z",
    "diffHunk": "@@ -0,0 +1,148 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FP-growth\n+#' \n+#' A parallel FP-growth algorithm to mine frequent itemsets.\n+#' For more details, see \n+#' \\href{https://spark.apache.org/docs/latest/mllib-frequent-pattern-mining.html#fp-growth}{\n+#' FP-growth}.\n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param itemsCol Features column name.\n+#' @param numPartitions Number of partitions used for fitting.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' @rdname spark.fpGrowth\n+#' @name spark.fpGrowth\n+#' @aliases spark.fpGrowth,SparkDataFrame-method\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' raw_data <- read.df(\n+#'   \"data/mllib/sample_fpgrowth.txt\",\n+#'   source = \"csv\",\n+#'   schema = structType(structField(\"raw_items\", \"string\")))\n+#'\n+#' data <- selectExpr(raw_data, \"split(raw_items, ' ') as items\")\n+#' model <- spark.fpGrowth(data)\n+#'\n+#' # Show frequent itemsets\n+#' frequent_itemsets <- spark.freqItemsets(model)\n+#' showDF(frequent_itemsets)\n+#'\n+#' # Show association rules\n+#' association_rules <- spark.associationRules(model)\n+#' showDF(association_rules)\n+#'\n+#' # Predict on new data\n+#' new_itemsets <- data.frame(items = c(\"t\", \"t,s\"))\n+#' new_data <- selectExpr(createDataFrame(new_itemsets), \"split(items, ',') as items\")\n+#' predict(model, new_data)\n+#'\n+#' # Save and load model\n+#' path <- \"/path/to/model\"\n+#' write.ml(model, path)\n+#' read.ml(path)\n+#'\n+#' # Optional arguments\n+#' baskets_data <- selectExpr(createDataFrame(itemsets), \"split(items, ',') as baskets\")\n+#' another_model <- spark.fpGrowth(data, minSupport = 0.1, minConfidence = 0.5,\n+#'                                 itemsCol = \"baskets\", numPartitions = 10)\n+#' }\n+#' @note spark.fpGrowth since 2.2.0\n+setMethod(\"spark.fpGrowth\", signature(data = \"SparkDataFrame\"),\n+          function(data, minSupport = 0.3, minConfidence = 0.8,\n+                   itemsCol = \"items\", numPartitions = NULL) {\n+            if (!is.numeric(minSupport) || minSupport < 0 || minSupport > 1) {\n+              stop(\"minSupport should be a number [0, 1].\")\n+            }\n+            if (!is.numeric(minConfidence) || minConfidence < 0 || minConfidence > 1) {\n+              stop(\"minConfidence should be a number [0, 1].\")\n+            }\n+\n+            numPartitions <- if (is.null(numPartitions)) NULL else as.integer(numPartitions)"
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "let's document the list of column like in Python: https://github.com/apache/spark/pull/17218/files#diff-b6dbf16870bd2cca9b4140df8aebd681R121\r\n\r\nfor reference, see https://github.com/apache/spark/blob/master/R/pkg/R/mllib_clustering.R#L249",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-27T01:44:30Z",
    "diffHunk": "@@ -0,0 +1,148 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# mllib_fpm.R: Provides methods for MLlib frequent pattern mining algorithms integration\n+\n+#' S4 class that represents a FPGrowthModel\n+#'\n+#' @param jobj a Java object reference to the backing Scala FPGrowthModel\n+#' @export\n+#' @note FPGrowthModel since 2.2.0\n+setClass(\"FPGrowthModel\", slots = list(jobj = \"jobj\"))\n+\n+#' FP-growth\n+#' \n+#' A parallel FP-growth algorithm to mine frequent itemsets.\n+#' For more details, see \n+#' \\href{https://spark.apache.org/docs/latest/mllib-frequent-pattern-mining.html#fp-growth}{\n+#' FP-growth}.\n+#'\n+#' @param data A SparkDataFrame for training.\n+#' @param minSupport Minimal support level.\n+#' @param minConfidence Minimal confidence level.\n+#' @param itemsCol Features column name.\n+#' @param numPartitions Number of partitions used for fitting.\n+#' @param ... additional argument(s) passed to the method.\n+#' @return \\code{spark.fpGrowth} returns a fitted FPGrowth model.\n+#' @rdname spark.fpGrowth\n+#' @name spark.fpGrowth\n+#' @aliases spark.fpGrowth,SparkDataFrame-method\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' raw_data <- read.df(\n+#'   \"data/mllib/sample_fpgrowth.txt\",\n+#'   source = \"csv\",\n+#'   schema = structType(structField(\"raw_items\", \"string\")))\n+#'\n+#' data <- selectExpr(raw_data, \"split(raw_items, ' ') as items\")\n+#' model <- spark.fpGrowth(data)\n+#'\n+#' # Show frequent itemsets\n+#' frequent_itemsets <- spark.freqItemsets(model)\n+#' showDF(frequent_itemsets)\n+#'\n+#' # Show association rules\n+#' association_rules <- spark.associationRules(model)\n+#' showDF(association_rules)\n+#'\n+#' # Predict on new data\n+#' new_itemsets <- data.frame(items = c(\"t\", \"t,s\"))\n+#' new_data <- selectExpr(createDataFrame(new_itemsets), \"split(items, ',') as items\")\n+#' predict(model, new_data)\n+#'\n+#' # Save and load model\n+#' path <- \"/path/to/model\"\n+#' write.ml(model, path)\n+#' read.ml(path)\n+#'\n+#' # Optional arguments\n+#' baskets_data <- selectExpr(createDataFrame(itemsets), \"split(items, ',') as baskets\")\n+#' another_model <- spark.fpGrowth(data, minSupport = 0.1, minConfidence = 0.5,\n+#'                                 itemsCol = \"baskets\", numPartitions = 10)\n+#' }\n+#' @note spark.fpGrowth since 2.2.0\n+setMethod(\"spark.fpGrowth\", signature(data = \"SparkDataFrame\"),\n+          function(data, minSupport = 0.3, minConfidence = 0.8,\n+                   itemsCol = \"items\", numPartitions = NULL) {\n+            if (!is.numeric(minSupport) || minSupport < 0 || minSupport > 1) {\n+              stop(\"minSupport should be a number [0, 1].\")\n+            }\n+            if (!is.numeric(minConfidence) || minConfidence < 0 || minConfidence > 1) {\n+              stop(\"minConfidence should be a number [0, 1].\")\n+            }\n+\n+            numPartitions <- if (is.null(numPartitions)) NULL else as.integer(numPartitions)\n+            jobj <- callJStatic(\"org.apache.spark.ml.r.FPGrowthWrapper\", \"fit\",\n+                                data@sdf, as.numeric(minSupport), as.numeric(minConfidence),\n+                                itemsCol, numPartitions)\n+            new(\"FPGrowthModel\", jobj = jobj)\n+          })\n+\n+# Get frequent itemsets.\n+\n+#' @param object a fitted FPGrowth model.\n+#' @return A DataFrame with frequent itemsets.\n+#' @rdname spark.fpGrowth\n+#' @aliases freqItemsets,FPGrowthModel-method\n+#' @export\n+#' @note spark.freqItemsets(FPGrowthModel) since 2.2.0\n+setMethod(\"spark.freqItemsets\", signature(object = \"FPGrowthModel\"),\n+          function(object) {\n+            dataFrame(callJMethod(object@jobj, \"freqItemsets\"))\n+          })\n+\n+# Get association rules.\n+\n+#' @return A DataFrame with association rules."
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "Actually, sorry we need to change `DataFrame` to `SparkDataFrame` in R",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-29T17:20:18Z",
    "diffHunk": "@@ -99,7 +99,10 @@ setMethod(\"spark.fpGrowth\", signature(data = \"SparkDataFrame\"),\n # Get frequent itemsets.\n \n #' @param object a fitted FPGrowth model.\n-#' @return A DataFrame with frequent itemsets.\n+#' @return A \\code{DataFrame} with frequent itemsets."
  }],
  "prId": 17170
}]