[{
  "comments": [{
    "author": {
      "login": "shivaram"
    },
    "body": "It would cool if we also have versions which take in columns instead of just strings ? \n@rxin Any reason all the stat functions only take string column names in Scala ?\n",
    "commit": "e73c8f3a01a68a4ea839aa3925581e67744cfddd",
    "createdAt": "2015-09-26T06:23:01Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# DataFrameStatFunctions.R - Statistic functions for DataFrames.\n+\n+setOldClass(\"jobj\")\n+\n+#' crosstab\n+#'\n+#' Computes a pair-wise frequency table of the given columns. Also known as a contingency\n+#' table. The number of distinct values for each column should be less than 1e4. At most 1e6\n+#' non-zero pair frequencies will be returned.\n+#'\n+#' @param col1 name of the first column. Distinct items will make the first item of each row.\n+#' @param col2 name of the second column. Distinct items will make the column names of the output.\n+#' @return a local R data.frame representing the contingency table. The first column of each row\n+#'         will be the distinct values of `col1` and the column names will be the distinct values\n+#'         of `col2`. The name of the first column will be `$col1_$col2`. Pairs that have no\n+#'         occurrences will have zero as their counts.\n+#'\n+#' @rdname statfunctions\n+#' @name crosstab\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' df <- jsonFile(sqlCtx, \"/path/to/file.json\")\n+#' ct <- crosstab(df, \"title\", \"gender\")\n+#' }\n+setMethod(\"crosstab\",\n+          signature(x = \"DataFrame\", col1 = \"character\", col2 = \"character\"),\n+          function(x, col1, col2) {\n+            statFunctions <- callJMethod(x@sdf, \"stat\")\n+            sct <- callJMethod(statFunctions, \"crosstab\", col1, col2)\n+            collect(dataFrame(sct))\n+          })\n+\n+#' cov\n+#'\n+#' Calculate the sample covariance of two numerical columns of a DataFrame.\n+#'\n+#' @param x A SparkSQL DataFrame\n+#' @param col1 the name of the first column\n+#' @param col2 the name of the second column\n+#' @return the covariance of the two columns.\n+#'\n+#' @rdname statfunctions\n+#' @name cov\n+#' @export\n+#' @examples\n+#'\\dontrun{\n+#' df <- jsonFile(sqlCtx, \"/path/to/file.json\")\n+#' cov <- cov(df, \"title\", \"gender\")\n+#' }\n+setMethod(\"cov\",\n+          signature(x = \"DataFrame\", col1 = \"character\", col2 = \"character\"),"
  }, {
    "author": {
      "login": "NarineK"
    },
    "body": "Hi there, \nI have some points about correlation and covariance.\n1. R calls the method 'cor' and not 'corr', so if we want to have the same syntax as R, we might want to use the 'cor'.\n2. The actual syntax for cor (cov has a similar one) is : cor(x, y = NULL, use = \"everything\",\n    method = c(\"pearson\", \"kendall\", \"spearman\"))\nwhere X is a dataframe and y can be another dataframe, a vector or matrix \nand in R I can get smth like this:\ncor(longley)\n             GNP.deflator       GNP   Unemployed .... \nGNP.deflator    1.0000000 0.9915892\nGNP             0.9915892 1.0000000\nUnemployed      0.6206334 0.6042609\nArmed.Forces    0.4647442 0.4464368\nPopulation      0.9791634 0.9910901\nYear            0.9911492 0.9952735\nEmployed        0.9708985 0.9835516\n\nI wonder if we can get this in SparkR too.\nI see at least 2 options here:\n1. we make K number of calls to dataframe api for each column pair or\n2. we extend scala dataframe api so that it also accepts a list of columns ... \nI can help you with this if you think that it makes sense and we want to add it.\n\nThanks,\nNarine\n",
    "commit": "e73c8f3a01a68a4ea839aa3925581e67744cfddd",
    "createdAt": "2015-09-28T17:40:22Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# DataFrameStatFunctions.R - Statistic functions for DataFrames.\n+\n+setOldClass(\"jobj\")\n+\n+#' crosstab\n+#'\n+#' Computes a pair-wise frequency table of the given columns. Also known as a contingency\n+#' table. The number of distinct values for each column should be less than 1e4. At most 1e6\n+#' non-zero pair frequencies will be returned.\n+#'\n+#' @param col1 name of the first column. Distinct items will make the first item of each row.\n+#' @param col2 name of the second column. Distinct items will make the column names of the output.\n+#' @return a local R data.frame representing the contingency table. The first column of each row\n+#'         will be the distinct values of `col1` and the column names will be the distinct values\n+#'         of `col2`. The name of the first column will be `$col1_$col2`. Pairs that have no\n+#'         occurrences will have zero as their counts.\n+#'\n+#' @rdname statfunctions\n+#' @name crosstab\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' df <- jsonFile(sqlCtx, \"/path/to/file.json\")\n+#' ct <- crosstab(df, \"title\", \"gender\")\n+#' }\n+setMethod(\"crosstab\",\n+          signature(x = \"DataFrame\", col1 = \"character\", col2 = \"character\"),\n+          function(x, col1, col2) {\n+            statFunctions <- callJMethod(x@sdf, \"stat\")\n+            sct <- callJMethod(statFunctions, \"crosstab\", col1, col2)\n+            collect(dataFrame(sct))\n+          })\n+\n+#' cov\n+#'\n+#' Calculate the sample covariance of two numerical columns of a DataFrame.\n+#'\n+#' @param x A SparkSQL DataFrame\n+#' @param col1 the name of the first column\n+#' @param col2 the name of the second column\n+#' @return the covariance of the two columns.\n+#'\n+#' @rdname statfunctions\n+#' @name cov\n+#' @export\n+#' @examples\n+#'\\dontrun{\n+#' df <- jsonFile(sqlCtx, \"/path/to/file.json\")\n+#' cov <- cov(df, \"title\", \"gender\")\n+#' }\n+setMethod(\"cov\",\n+          signature(x = \"DataFrame\", col1 = \"character\", col2 = \"character\"),"
  }, {
    "author": {
      "login": "felixcheung"
    },
    "body": "Link to the function name: https://stat.ethz.ch/R-manual/R-devel/library/stats/html/cor.html\n",
    "commit": "e73c8f3a01a68a4ea839aa3925581e67744cfddd",
    "createdAt": "2015-09-29T00:53:52Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# DataFrameStatFunctions.R - Statistic functions for DataFrames.\n+\n+setOldClass(\"jobj\")\n+\n+#' crosstab\n+#'\n+#' Computes a pair-wise frequency table of the given columns. Also known as a contingency\n+#' table. The number of distinct values for each column should be less than 1e4. At most 1e6\n+#' non-zero pair frequencies will be returned.\n+#'\n+#' @param col1 name of the first column. Distinct items will make the first item of each row.\n+#' @param col2 name of the second column. Distinct items will make the column names of the output.\n+#' @return a local R data.frame representing the contingency table. The first column of each row\n+#'         will be the distinct values of `col1` and the column names will be the distinct values\n+#'         of `col2`. The name of the first column will be `$col1_$col2`. Pairs that have no\n+#'         occurrences will have zero as their counts.\n+#'\n+#' @rdname statfunctions\n+#' @name crosstab\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' df <- jsonFile(sqlCtx, \"/path/to/file.json\")\n+#' ct <- crosstab(df, \"title\", \"gender\")\n+#' }\n+setMethod(\"crosstab\",\n+          signature(x = \"DataFrame\", col1 = \"character\", col2 = \"character\"),\n+          function(x, col1, col2) {\n+            statFunctions <- callJMethod(x@sdf, \"stat\")\n+            sct <- callJMethod(statFunctions, \"crosstab\", col1, col2)\n+            collect(dataFrame(sct))\n+          })\n+\n+#' cov\n+#'\n+#' Calculate the sample covariance of two numerical columns of a DataFrame.\n+#'\n+#' @param x A SparkSQL DataFrame\n+#' @param col1 the name of the first column\n+#' @param col2 the name of the second column\n+#' @return the covariance of the two columns.\n+#'\n+#' @rdname statfunctions\n+#' @name cov\n+#' @export\n+#' @examples\n+#'\\dontrun{\n+#' df <- jsonFile(sqlCtx, \"/path/to/file.json\")\n+#' cov <- cov(df, \"title\", \"gender\")\n+#' }\n+setMethod(\"cov\",\n+          signature(x = \"DataFrame\", col1 = \"character\", col2 = \"character\"),"
  }, {
    "author": {
      "login": "sun-rui"
    },
    "body": "@NarineK, thank you for your comments. You suggestion needs extensions to Scala DataFrame. I prefer that you can submit a new JIRA in the community. @shivaram, what do you think?\n",
    "commit": "e73c8f3a01a68a4ea839aa3925581e67744cfddd",
    "createdAt": "2015-09-29T06:51:24Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# DataFrameStatFunctions.R - Statistic functions for DataFrames.\n+\n+setOldClass(\"jobj\")\n+\n+#' crosstab\n+#'\n+#' Computes a pair-wise frequency table of the given columns. Also known as a contingency\n+#' table. The number of distinct values for each column should be less than 1e4. At most 1e6\n+#' non-zero pair frequencies will be returned.\n+#'\n+#' @param col1 name of the first column. Distinct items will make the first item of each row.\n+#' @param col2 name of the second column. Distinct items will make the column names of the output.\n+#' @return a local R data.frame representing the contingency table. The first column of each row\n+#'         will be the distinct values of `col1` and the column names will be the distinct values\n+#'         of `col2`. The name of the first column will be `$col1_$col2`. Pairs that have no\n+#'         occurrences will have zero as their counts.\n+#'\n+#' @rdname statfunctions\n+#' @name crosstab\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' df <- jsonFile(sqlCtx, \"/path/to/file.json\")\n+#' ct <- crosstab(df, \"title\", \"gender\")\n+#' }\n+setMethod(\"crosstab\",\n+          signature(x = \"DataFrame\", col1 = \"character\", col2 = \"character\"),\n+          function(x, col1, col2) {\n+            statFunctions <- callJMethod(x@sdf, \"stat\")\n+            sct <- callJMethod(statFunctions, \"crosstab\", col1, col2)\n+            collect(dataFrame(sct))\n+          })\n+\n+#' cov\n+#'\n+#' Calculate the sample covariance of two numerical columns of a DataFrame.\n+#'\n+#' @param x A SparkSQL DataFrame\n+#' @param col1 the name of the first column\n+#' @param col2 the name of the second column\n+#' @return the covariance of the two columns.\n+#'\n+#' @rdname statfunctions\n+#' @name cov\n+#' @export\n+#' @examples\n+#'\\dontrun{\n+#' df <- jsonFile(sqlCtx, \"/path/to/file.json\")\n+#' cov <- cov(df, \"title\", \"gender\")\n+#' }\n+setMethod(\"cov\",\n+          signature(x = \"DataFrame\", col1 = \"character\", col2 = \"character\"),"
  }, {
    "author": {
      "login": "davies"
    },
    "body": "It will be great if we could have same signature as R API. Given the fact that Spark DataFrame is much different than R dataframe, this will be hard, maybe we could only support a small subset of what the R API can do. Instead of confusing users, it's more clear to use different name, if they can't be compatible.\n\nDoes this sound reasonable?\n",
    "commit": "e73c8f3a01a68a4ea839aa3925581e67744cfddd",
    "createdAt": "2015-10-01T21:28:44Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# DataFrameStatFunctions.R - Statistic functions for DataFrames.\n+\n+setOldClass(\"jobj\")\n+\n+#' crosstab\n+#'\n+#' Computes a pair-wise frequency table of the given columns. Also known as a contingency\n+#' table. The number of distinct values for each column should be less than 1e4. At most 1e6\n+#' non-zero pair frequencies will be returned.\n+#'\n+#' @param col1 name of the first column. Distinct items will make the first item of each row.\n+#' @param col2 name of the second column. Distinct items will make the column names of the output.\n+#' @return a local R data.frame representing the contingency table. The first column of each row\n+#'         will be the distinct values of `col1` and the column names will be the distinct values\n+#'         of `col2`. The name of the first column will be `$col1_$col2`. Pairs that have no\n+#'         occurrences will have zero as their counts.\n+#'\n+#' @rdname statfunctions\n+#' @name crosstab\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' df <- jsonFile(sqlCtx, \"/path/to/file.json\")\n+#' ct <- crosstab(df, \"title\", \"gender\")\n+#' }\n+setMethod(\"crosstab\",\n+          signature(x = \"DataFrame\", col1 = \"character\", col2 = \"character\"),\n+          function(x, col1, col2) {\n+            statFunctions <- callJMethod(x@sdf, \"stat\")\n+            sct <- callJMethod(statFunctions, \"crosstab\", col1, col2)\n+            collect(dataFrame(sct))\n+          })\n+\n+#' cov\n+#'\n+#' Calculate the sample covariance of two numerical columns of a DataFrame.\n+#'\n+#' @param x A SparkSQL DataFrame\n+#' @param col1 the name of the first column\n+#' @param col2 the name of the second column\n+#' @return the covariance of the two columns.\n+#'\n+#' @rdname statfunctions\n+#' @name cov\n+#' @export\n+#' @examples\n+#'\\dontrun{\n+#' df <- jsonFile(sqlCtx, \"/path/to/file.json\")\n+#' cov <- cov(df, \"title\", \"gender\")\n+#' }\n+setMethod(\"cov\",\n+          signature(x = \"DataFrame\", col1 = \"character\", col2 = \"character\"),"
  }, {
    "author": {
      "login": "sun-rui"
    },
    "body": "yeah, I agree.\n",
    "commit": "e73c8f3a01a68a4ea839aa3925581e67744cfddd",
    "createdAt": "2015-10-03T13:23:40Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# DataFrameStatFunctions.R - Statistic functions for DataFrames.\n+\n+setOldClass(\"jobj\")\n+\n+#' crosstab\n+#'\n+#' Computes a pair-wise frequency table of the given columns. Also known as a contingency\n+#' table. The number of distinct values for each column should be less than 1e4. At most 1e6\n+#' non-zero pair frequencies will be returned.\n+#'\n+#' @param col1 name of the first column. Distinct items will make the first item of each row.\n+#' @param col2 name of the second column. Distinct items will make the column names of the output.\n+#' @return a local R data.frame representing the contingency table. The first column of each row\n+#'         will be the distinct values of `col1` and the column names will be the distinct values\n+#'         of `col2`. The name of the first column will be `$col1_$col2`. Pairs that have no\n+#'         occurrences will have zero as their counts.\n+#'\n+#' @rdname statfunctions\n+#' @name crosstab\n+#' @export\n+#' @examples\n+#' \\dontrun{\n+#' df <- jsonFile(sqlCtx, \"/path/to/file.json\")\n+#' ct <- crosstab(df, \"title\", \"gender\")\n+#' }\n+setMethod(\"crosstab\",\n+          signature(x = \"DataFrame\", col1 = \"character\", col2 = \"character\"),\n+          function(x, col1, col2) {\n+            statFunctions <- callJMethod(x@sdf, \"stat\")\n+            sct <- callJMethod(statFunctions, \"crosstab\", col1, col2)\n+            collect(dataFrame(sct))\n+          })\n+\n+#' cov\n+#'\n+#' Calculate the sample covariance of two numerical columns of a DataFrame.\n+#'\n+#' @param x A SparkSQL DataFrame\n+#' @param col1 the name of the first column\n+#' @param col2 the name of the second column\n+#' @return the covariance of the two columns.\n+#'\n+#' @rdname statfunctions\n+#' @name cov\n+#' @export\n+#' @examples\n+#'\\dontrun{\n+#' df <- jsonFile(sqlCtx, \"/path/to/file.json\")\n+#' cov <- cov(df, \"title\", \"gender\")\n+#' }\n+setMethod(\"cov\",\n+          signature(x = \"DataFrame\", col1 = \"character\", col2 = \"character\"),"
  }],
  "prId": 8869
}]