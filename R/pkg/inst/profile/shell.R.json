[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "i thought this was here to align with the previous lines?",
    "commit": "fad25e2905271f6971c3147fb289331b9ae7c218",
    "createdAt": "2018-12-12T00:17:33Z",
    "diffHunk": "@@ -47,5 +47,5 @@\n   cat(\"    /_/\", \"\\n\")\n   cat(\"\\n\")\n \n-  cat(\"\\n SparkSession available as 'spark'.\\n\")\n+  cat(\"\\nSparkSession available as 'spark'.\\n\")",
    "line": 26
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Yea, \r\n\r\n\r\n```diff\r\n   Welcome to\r\n      ____              __\r\n     / __/__  ___ _____/ /__\r\n    _\\ \\/ _ \\/ _ `/ __/  '_/\r\n   /___/ .__/\\_,_/_/ /_/\\_\\   version  3.0.0-SNAPSHOT\r\n      /_/\r\n\r\n\r\n-  SparkSession available as 'spark'.\r\n+ SparkSession available as 'spark'.\r\n```\r\n\r\nMaybe we can consider to check if all other shells messages look in the same format or coherent for some reasons, and then match them. But I wouldn't bother fixing it.",
    "commit": "fad25e2905271f6971c3147fb289331b9ae7c218",
    "createdAt": "2018-12-12T00:25:25Z",
    "diffHunk": "@@ -47,5 +47,5 @@\n   cat(\"    /_/\", \"\\n\")\n   cat(\"\\n\")\n \n-  cat(\"\\n SparkSession available as 'spark'.\\n\")\n+  cat(\"\\nSparkSession available as 'spark'.\\n\")",
    "line": 26
  }, {
    "author": {
      "login": "AzureQ"
    },
    "body": "Yea, it's aligned with previous lines. Didn't see empty spaces in other shell cmd(spark-shell, pyspark). I'll close this if it's confirmed not necessary. ",
    "commit": "fad25e2905271f6971c3147fb289331b9ae7c218",
    "createdAt": "2018-12-12T00:41:19Z",
    "diffHunk": "@@ -47,5 +47,5 @@\n   cat(\"    /_/\", \"\\n\")\n   cat(\"\\n\")\n \n-  cat(\"\\n SparkSession available as 'spark'.\\n\")\n+  cat(\"\\nSparkSession available as 'spark'.\\n\")",
    "line": 26
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Can you show other shell messages and explain why this change makes it consistent 8n the PR description?",
    "commit": "fad25e2905271f6971c3147fb289331b9ae7c218",
    "createdAt": "2018-12-12T02:09:57Z",
    "diffHunk": "@@ -47,5 +47,5 @@\n   cat(\"    /_/\", \"\\n\")\n   cat(\"\\n\")\n \n-  cat(\"\\n SparkSession available as 'spark'.\\n\")\n+  cat(\"\\nSparkSession available as 'spark'.\\n\")",
    "line": 26
  }, {
    "author": {
      "login": "AzureQ"
    },
    "body": "Updated the description.\r\n",
    "commit": "fad25e2905271f6971c3147fb289331b9ae7c218",
    "createdAt": "2018-12-12T15:43:11Z",
    "diffHunk": "@@ -47,5 +47,5 @@\n   cat(\"    /_/\", \"\\n\")\n   cat(\"\\n\")\n \n-  cat(\"\\n SparkSession available as 'spark'.\\n\")\n+  cat(\"\\nSparkSession available as 'spark'.\\n\")",
    "line": 26
  }],
  "prId": 23293
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Don't these lines actually have to have 3 spaces in front to be consistent? ",
    "commit": "fad25e2905271f6971c3147fb289331b9ae7c218",
    "createdAt": "2018-12-13T02:05:51Z",
    "diffHunk": "@@ -33,12 +33,12 @@\n   sc <- SparkR:::callJStatic(\"org.apache.spark.sql.api.r.SQLUtils\", \"getJavaSparkContext\", spark)\n   assign(\"sc\", sc, envir = .GlobalEnv)\n   sparkVer <- SparkR:::callJMethod(sc, \"version\")\n-  cat(\"\\n Welcome to\")\n+  cat(\"\\nWelcome to\")\n   cat(\"\\n\")\n-  cat(\"    ____              __\", \"\\n\")\n-  cat(\"   / __/__  ___ _____/ /__\", \"\\n\")\n-  cat(\"  _\\\\ \\\\/ _ \\\\/ _ `/ __/  '_/\", \"\\n\")\n-  cat(\" /___/ .__/\\\\_,_/_/ /_/\\\\_\\\\\")\n+  cat(\"   ____              __\", \"\\n\")\n+  cat(\"  / __/__  ___ _____/ /__\", \"\\n\")\n+  cat(\" _\\\\ \\\\/ _ \\\\/ _ `/ __/  '_/\", \"\\n\")\n+  cat(\"/___/ .__/\\\\_,_/_/ /_/\\\\_\\\\\")"
  }, {
    "author": {
      "login": "AzureQ"
    },
    "body": "Right, I was thinking of getting rid of one empty space per line. But I just reset these lines back to origin.",
    "commit": "fad25e2905271f6971c3147fb289331b9ae7c218",
    "createdAt": "2018-12-13T02:48:41Z",
    "diffHunk": "@@ -33,12 +33,12 @@\n   sc <- SparkR:::callJStatic(\"org.apache.spark.sql.api.r.SQLUtils\", \"getJavaSparkContext\", spark)\n   assign(\"sc\", sc, envir = .GlobalEnv)\n   sparkVer <- SparkR:::callJMethod(sc, \"version\")\n-  cat(\"\\n Welcome to\")\n+  cat(\"\\nWelcome to\")\n   cat(\"\\n\")\n-  cat(\"    ____              __\", \"\\n\")\n-  cat(\"   / __/__  ___ _____/ /__\", \"\\n\")\n-  cat(\"  _\\\\ \\\\/ _ \\\\/ _ `/ __/  '_/\", \"\\n\")\n-  cat(\" /___/ .__/\\\\_,_/_/ /_/\\\\_\\\\\")\n+  cat(\"   ____              __\", \"\\n\")\n+  cat(\"  / __/__  ___ _____/ /__\", \"\\n\")\n+  cat(\" _\\\\ \\\\/ _ \\\\/ _ `/ __/  '_/\", \"\\n\")\n+  cat(\"/___/ .__/\\\\_,_/_/ /_/\\\\_\\\\\")"
  }, {
    "author": {
      "login": "AzureQ"
    },
    "body": "Sorry I misunderstood it. Setting indent of these lines to 3 also.",
    "commit": "fad25e2905271f6971c3147fb289331b9ae7c218",
    "createdAt": "2018-12-13T03:07:33Z",
    "diffHunk": "@@ -33,12 +33,12 @@\n   sc <- SparkR:::callJStatic(\"org.apache.spark.sql.api.r.SQLUtils\", \"getJavaSparkContext\", spark)\n   assign(\"sc\", sc, envir = .GlobalEnv)\n   sparkVer <- SparkR:::callJMethod(sc, \"version\")\n-  cat(\"\\n Welcome to\")\n+  cat(\"\\nWelcome to\")\n   cat(\"\\n\")\n-  cat(\"    ____              __\", \"\\n\")\n-  cat(\"   / __/__  ___ _____/ /__\", \"\\n\")\n-  cat(\"  _\\\\ \\\\/ _ \\\\/ _ `/ __/  '_/\", \"\\n\")\n-  cat(\" /___/ .__/\\\\_,_/_/ /_/\\\\_\\\\\")\n+  cat(\"   ____              __\", \"\\n\")\n+  cat(\"  / __/__  ___ _____/ /__\", \"\\n\")\n+  cat(\" _\\\\ \\\\/ _ \\\\/ _ `/ __/  '_/\", \"\\n\")\n+  cat(\"/___/ .__/\\\\_,_/_/ /_/\\\\_\\\\\")"
  }],
  "prId": 23293
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I think @srowen meant we should have three spaces for this whole logo like:\r\n\r\n```\r\n      ____              __\r\n     / __/__  ___ _____/ /__\r\n    _\\ \\/ _ \\/ _ `/ __/  '_/\r\n   /__ / .__/\\_,_/_/ /_/\\_\\\r\n      /_/\r\n```\r\n\r\nCan you post the before/after results in the PR description at \"How was this patch tested?\"? Looks existing tests don't cover this change.",
    "commit": "fad25e2905271f6971c3147fb289331b9ae7c218",
    "createdAt": "2018-12-13T02:52:04Z",
    "diffHunk": "@@ -33,7 +33,7 @@\n   sc <- SparkR:::callJStatic(\"org.apache.spark.sql.api.r.SQLUtils\", \"getJavaSparkContext\", spark)\n   assign(\"sc\", sc, envir = .GlobalEnv)\n   sparkVer <- SparkR:::callJMethod(sc, \"version\")\n-  cat(\"\\n Welcome to\")\n+  cat(\"\\nWelcome to\")\n   cat(\"\\n\")\n   cat(\"    ____              __\", \"\\n\")\n   cat(\"   / __/__  ___ _____/ /__\", \"\\n\")"
  }, {
    "author": {
      "login": "AzureQ"
    },
    "body": "Updated.",
    "commit": "fad25e2905271f6971c3147fb289331b9ae7c218",
    "createdAt": "2018-12-13T03:07:50Z",
    "diffHunk": "@@ -33,7 +33,7 @@\n   sc <- SparkR:::callJStatic(\"org.apache.spark.sql.api.r.SQLUtils\", \"getJavaSparkContext\", spark)\n   assign(\"sc\", sc, envir = .GlobalEnv)\n   sparkVer <- SparkR:::callJMethod(sc, \"version\")\n-  cat(\"\\n Welcome to\")\n+  cat(\"\\nWelcome to\")\n   cat(\"\\n\")\n   cat(\"    ____              __\", \"\\n\")\n   cat(\"   / __/__  ___ _____/ /__\", \"\\n\")"
  }],
  "prId": 23293
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Looks the space after `version` should be removed for consistency ",
    "commit": "fad25e2905271f6971c3147fb289331b9ae7c218",
    "createdAt": "2018-12-13T03:40:59Z",
    "diffHunk": "@@ -33,19 +33,19 @@\n   sc <- SparkR:::callJStatic(\"org.apache.spark.sql.api.r.SQLUtils\", \"getJavaSparkContext\", spark)\n   assign(\"sc\", sc, envir = .GlobalEnv)\n   sparkVer <- SparkR:::callJMethod(sc, \"version\")\n-  cat(\"\\n Welcome to\")\n+  cat(\"\\nWelcome to\")\n   cat(\"\\n\")\n-  cat(\"    ____              __\", \"\\n\")\n-  cat(\"   / __/__  ___ _____/ /__\", \"\\n\")\n-  cat(\"  _\\\\ \\\\/ _ \\\\/ _ `/ __/  '_/\", \"\\n\")\n-  cat(\" /___/ .__/\\\\_,_/_/ /_/\\\\_\\\\\")\n+  cat(\"      ____              __\", \"\\n\")\n+  cat(\"     / __/__  ___ _____/ /__\", \"\\n\")\n+  cat(\"    _\\\\ \\\\/ _ \\\\/ _ `/ __/  '_/\", \"\\n\")\n+  cat(\"   /___/ .__/\\\\_,_/_/ /_/\\\\_\\\\\")\n   if (nchar(sparkVer) == 0) {\n     cat(\"\\n\")\n   } else {\n     cat(\"   version \", sparkVer, \"\\n\")"
  }, {
    "author": {
      "login": "AzureQ"
    },
    "body": "Yep, just noticed that. Removed",
    "commit": "fad25e2905271f6971c3147fb289331b9ae7c218",
    "createdAt": "2018-12-13T03:47:56Z",
    "diffHunk": "@@ -33,19 +33,19 @@\n   sc <- SparkR:::callJStatic(\"org.apache.spark.sql.api.r.SQLUtils\", \"getJavaSparkContext\", spark)\n   assign(\"sc\", sc, envir = .GlobalEnv)\n   sparkVer <- SparkR:::callJMethod(sc, \"version\")\n-  cat(\"\\n Welcome to\")\n+  cat(\"\\nWelcome to\")\n   cat(\"\\n\")\n-  cat(\"    ____              __\", \"\\n\")\n-  cat(\"   / __/__  ___ _____/ /__\", \"\\n\")\n-  cat(\"  _\\\\ \\\\/ _ \\\\/ _ `/ __/  '_/\", \"\\n\")\n-  cat(\" /___/ .__/\\\\_,_/_/ /_/\\\\_\\\\\")\n+  cat(\"      ____              __\", \"\\n\")\n+  cat(\"     / __/__  ___ _____/ /__\", \"\\n\")\n+  cat(\"    _\\\\ \\\\/ _ \\\\/ _ `/ __/  '_/\", \"\\n\")\n+  cat(\"   /___/ .__/\\\\_,_/_/ /_/\\\\_\\\\\")\n   if (nchar(sparkVer) == 0) {\n     cat(\"\\n\")\n   } else {\n     cat(\"   version \", sparkVer, \"\\n\")"
  }],
  "prId": 23293
}]