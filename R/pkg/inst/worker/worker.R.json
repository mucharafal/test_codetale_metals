[{
  "comments": [{
    "author": {
      "login": "sun-rui"
    },
    "body": "same as above. SparkR::: is not needed\n",
    "commit": "91d69be8ed0ff133a1a3f7f304fd6e366d46bca5",
    "createdAt": "2016-08-24T06:29:39Z",
    "diffHunk": "@@ -36,7 +36,14 @@ compute <- function(mode, partition, serializer, deserializer, key,\n       # available since R 3.2.4. So we set the global option here.\n       oldOpt <- getOption(\"stringsAsFactors\")\n       options(stringsAsFactors = FALSE)\n-      inputData <- do.call(rbind.data.frame, inputData)\n+\n+      # Handle binary data types\n+      if (\"raw\" %in% sapply(inputData[[1]], class)) {\n+        inputData <- SparkR:::rbindRaws(inputData)",
    "line": 8
  }, {
    "author": {
      "login": "clarkfitzg"
    },
    "body": "True, but looking through the rest of `worker.R` it seems that using `:::` is the convention in this file?\n",
    "commit": "91d69be8ed0ff133a1a3f7f304fd6e366d46bca5",
    "createdAt": "2016-08-24T07:08:25Z",
    "diffHunk": "@@ -36,7 +36,14 @@ compute <- function(mode, partition, serializer, deserializer, key,\n       # available since R 3.2.4. So we set the global option here.\n       oldOpt <- getOption(\"stringsAsFactors\")\n       options(stringsAsFactors = FALSE)\n-      inputData <- do.call(rbind.data.frame, inputData)\n+\n+      # Handle binary data types\n+      if (\"raw\" %in% sapply(inputData[[1]], class)) {\n+        inputData <- SparkR:::rbindRaws(inputData)",
    "line": 8
  }, {
    "author": {
      "login": "clarkfitzg"
    },
    "body": "Running tests locally without it- appears it is necessary here.\n",
    "commit": "91d69be8ed0ff133a1a3f7f304fd6e366d46bca5",
    "createdAt": "2016-08-24T07:10:55Z",
    "diffHunk": "@@ -36,7 +36,14 @@ compute <- function(mode, partition, serializer, deserializer, key,\n       # available since R 3.2.4. So we set the global option here.\n       oldOpt <- getOption(\"stringsAsFactors\")\n       options(stringsAsFactors = FALSE)\n-      inputData <- do.call(rbind.data.frame, inputData)\n+\n+      # Handle binary data types\n+      if (\"raw\" %in% sapply(inputData[[1]], class)) {\n+        inputData <- SparkR:::rbindRaws(inputData)",
    "line": 8
  }, {
    "author": {
      "login": "sun-rui"
    },
    "body": "No it is not a preferred style in worker.R. It seems that they were some changes left slip under some previous code review. \n\n```\n    suppressPackageStartupMessages(library(SparkR))\n```\n\nshould be moved to the front of work.R, and thus SparkR::: can be removed. A lot of \"SparkR:::\" is annoying.\n",
    "commit": "91d69be8ed0ff133a1a3f7f304fd6e366d46bca5",
    "createdAt": "2016-08-24T07:16:53Z",
    "diffHunk": "@@ -36,7 +36,14 @@ compute <- function(mode, partition, serializer, deserializer, key,\n       # available since R 3.2.4. So we set the global option here.\n       oldOpt <- getOption(\"stringsAsFactors\")\n       options(stringsAsFactors = FALSE)\n-      inputData <- do.call(rbind.data.frame, inputData)\n+\n+      # Handle binary data types\n+      if (\"raw\" %in% sapply(inputData[[1]], class)) {\n+        inputData <- SparkR:::rbindRaws(inputData)",
    "line": 8
  }, {
    "author": {
      "login": "clarkfitzg"
    },
    "body": "When I remove `SparkR:::` and run the tests locally I see error with `rbindRaws not found`. \n\nSo it looks like the `SparkR:::` needs to be there to access private functions in SparkR from the worker node.\n",
    "commit": "91d69be8ed0ff133a1a3f7f304fd6e366d46bca5",
    "createdAt": "2016-08-24T07:36:10Z",
    "diffHunk": "@@ -36,7 +36,14 @@ compute <- function(mode, partition, serializer, deserializer, key,\n       # available since R 3.2.4. So we set the global option here.\n       oldOpt <- getOption(\"stringsAsFactors\")\n       options(stringsAsFactors = FALSE)\n-      inputData <- do.call(rbind.data.frame, inputData)\n+\n+      # Handle binary data types\n+      if (\"raw\" %in% sapply(inputData[[1]], class)) {\n+        inputData <- SparkR:::rbindRaws(inputData)",
    "line": 8
  }, {
    "author": {
      "login": "clarkfitzg"
    },
    "body": "And `rbindRaws` doesn't need to be exported.\n",
    "commit": "91d69be8ed0ff133a1a3f7f304fd6e366d46bca5",
    "createdAt": "2016-08-24T07:37:43Z",
    "diffHunk": "@@ -36,7 +36,14 @@ compute <- function(mode, partition, serializer, deserializer, key,\n       # available since R 3.2.4. So we set the global option here.\n       oldOpt <- getOption(\"stringsAsFactors\")\n       options(stringsAsFactors = FALSE)\n-      inputData <- do.call(rbind.data.frame, inputData)\n+\n+      # Handle binary data types\n+      if (\"raw\" %in% sapply(inputData[[1]], class)) {\n+        inputData <- SparkR:::rbindRaws(inputData)",
    "line": 8
  }, {
    "author": {
      "login": "sun-rui"
    },
    "body": "sure. \"SparkR:::\" is needed for private functions.\n",
    "commit": "91d69be8ed0ff133a1a3f7f304fd6e366d46bca5",
    "createdAt": "2016-08-24T07:40:09Z",
    "diffHunk": "@@ -36,7 +36,14 @@ compute <- function(mode, partition, serializer, deserializer, key,\n       # available since R 3.2.4. So we set the global option here.\n       oldOpt <- getOption(\"stringsAsFactors\")\n       options(stringsAsFactors = FALSE)\n-      inputData <- do.call(rbind.data.frame, inputData)\n+\n+      # Handle binary data types\n+      if (\"raw\" %in% sapply(inputData[[1]], class)) {\n+        inputData <- SparkR:::rbindRaws(inputData)",
    "line": 8
  }],
  "prId": 14783
}]