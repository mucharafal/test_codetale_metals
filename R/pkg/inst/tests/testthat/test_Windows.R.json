[{
  "comments": [{
    "author": {
      "login": "shivaram"
    },
    "body": "Can we add a similar test with something getting printed on `stdout` from the JVM ?",
    "commit": "322b7600838f20ea48a7108e6e00ffcb51e1818e",
    "createdAt": "2017-01-22T04:27:09Z",
    "diffHunk": "@@ -20,7 +20,7 @@ test_that(\"sparkJars tag in SparkContext\", {\n   if (.Platform$OS.type != \"windows\") {\n     skip(\"This test is only for Windows, skipped\")\n   }\n-  testOutput <- launchScript(\"ECHO\", \"a/b/c\", capture = TRUE)\n+  testOutput <- launchScript(\"ECHO\", \"a/b/c\", wait = TRUE)",
    "line": 5
  }, {
    "author": {
      "login": "felixcheung"
    },
    "body": "we could, but unfortunately, we don't actually call launchScript with wait/capture = TRUE\r\nwe call wait/capture = FALSE and expect to let console/stdout to leak through, and return NULL.\r\n\r\nI'll try to add test for that.",
    "commit": "322b7600838f20ea48a7108e6e00ffcb51e1818e",
    "createdAt": "2017-01-22T06:29:43Z",
    "diffHunk": "@@ -20,7 +20,7 @@ test_that(\"sparkJars tag in SparkContext\", {\n   if (.Platform$OS.type != \"windows\") {\n     skip(\"This test is only for Windows, skipped\")\n   }\n-  testOutput <- launchScript(\"ECHO\", \"a/b/c\", capture = TRUE)\n+  testOutput <- launchScript(\"ECHO\", \"a/b/c\", wait = TRUE)",
    "line": 5
  }, {
    "author": {
      "login": "felixcheung"
    },
    "body": "Hmm, I've tried, I don't think it would work.\r\nWhen calling `system2(.., wait = FALSE, capture = \"\")` the output to stdout is actually from the child process, so I don't think we would be able to see it from the R process.\r\nWe could redirect it, but then it would be the same as `system2(..., wait = FALSE, capture = TRUE)` but again it wouldn't be what we are normally calling.\r\n\r\nI think we would need to dig deeper on this.",
    "commit": "322b7600838f20ea48a7108e6e00ffcb51e1818e",
    "createdAt": "2017-01-22T07:09:10Z",
    "diffHunk": "@@ -20,7 +20,7 @@ test_that(\"sparkJars tag in SparkContext\", {\n   if (.Platform$OS.type != \"windows\") {\n     skip(\"This test is only for Windows, skipped\")\n   }\n-  testOutput <- launchScript(\"ECHO\", \"a/b/c\", capture = TRUE)\n+  testOutput <- launchScript(\"ECHO\", \"a/b/c\", wait = TRUE)",
    "line": 5
  }, {
    "author": {
      "login": "shivaram"
    },
    "body": "I see - I expected the stdout = \"\" to be piping it to the R process stdout. We could also explicitly pass a `fd` to do this pipe ?",
    "commit": "322b7600838f20ea48a7108e6e00ffcb51e1818e",
    "createdAt": "2017-01-22T18:24:23Z",
    "diffHunk": "@@ -20,7 +20,7 @@ test_that(\"sparkJars tag in SparkContext\", {\n   if (.Platform$OS.type != \"windows\") {\n     skip(\"This test is only for Windows, skipped\")\n   }\n-  testOutput <- launchScript(\"ECHO\", \"a/b/c\", capture = TRUE)\n+  testOutput <- launchScript(\"ECHO\", \"a/b/c\", wait = TRUE)",
    "line": 5
  }, {
    "author": {
      "login": "felixcheung"
    },
    "body": "From what I observed running SparkR as a package, I'm not sure we should pipe/redirect the stdout always - it could get very noisy running SparkR from an IDE. On the other hand, often times the result (error) is not enough to debug the issue.\r\n\r\nI'd propose we don't redirect stdout by default in keeping the IDE experience cleaner, however we should have an API to \"turn this on and off\" programmatically on demand. Although it is not clear `system2` supports that though, `stdout` is either TRUE (capture to return as a character vector), NULL/FALSE (drop), \"\" (to the console *of that child process*), \"name\" (file name to write into)",
    "commit": "322b7600838f20ea48a7108e6e00ffcb51e1818e",
    "createdAt": "2017-01-23T19:15:35Z",
    "diffHunk": "@@ -20,7 +20,7 @@ test_that(\"sparkJars tag in SparkContext\", {\n   if (.Platform$OS.type != \"windows\") {\n     skip(\"This test is only for Windows, skipped\")\n   }\n-  testOutput <- launchScript(\"ECHO\", \"a/b/c\", capture = TRUE)\n+  testOutput <- launchScript(\"ECHO\", \"a/b/c\", wait = TRUE)",
    "line": 5
  }, {
    "author": {
      "login": "felixcheung"
    },
    "body": "This is an example of what in a R IDE see:\r\n```\r\n> head(p, 40)\r\nError in handleErrors(returnStatus, conn) :\r\n  org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 70.0 failed 1 times, most recent failure: Lost task 0.0 in stage 70.0 (TID 115, localhost, executor driver): org.apache.spark.SparkException: Failed to execute user defined function($anonfun$4: (string) => double)\r\n       at org.apache.spark.sql.catalyst.expressions.GeneratedClass$GeneratedIterator.processNext(Unknown Source)\r\n       at org.apache.spark.sql.execution.BufferedRowIterator.hasNext(BufferedRowIterator.java:43)\r\n       at org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8$$anon$1.hasNext(WholeStageCodegenExec.scala:377)\r\n       at org.apache.spark.sql.execution.SparkPlan$$anonfun$2.apply(SparkPlan.scala:231)\r\n       at org.apache.spark.sql.execution.SparkPlan$$anonfun$2.apply(SparkPlan.scala:225)\r\n       at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$25.apply(RDD.scala:826)\r\n       at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$25.apply(RDD.scala:826)\r\n```",
    "commit": "322b7600838f20ea48a7108e6e00ffcb51e1818e",
    "createdAt": "2017-01-26T07:14:06Z",
    "diffHunk": "@@ -20,7 +20,7 @@ test_that(\"sparkJars tag in SparkContext\", {\n   if (.Platform$OS.type != \"windows\") {\n     skip(\"This test is only for Windows, skipped\")\n   }\n-  testOutput <- launchScript(\"ECHO\", \"a/b/c\", capture = TRUE)\n+  testOutput <- launchScript(\"ECHO\", \"a/b/c\", wait = TRUE)",
    "line": 5
  }, {
    "author": {
      "login": "shivaram"
    },
    "body": "Is this what they see before this change or after it ?",
    "commit": "322b7600838f20ea48a7108e6e00ffcb51e1818e",
    "createdAt": "2017-01-26T21:13:21Z",
    "diffHunk": "@@ -20,7 +20,7 @@ test_that(\"sparkJars tag in SparkContext\", {\n   if (.Platform$OS.type != \"windows\") {\n     skip(\"This test is only for Windows, skipped\")\n   }\n-  testOutput <- launchScript(\"ECHO\", \"a/b/c\", capture = TRUE)\n+  testOutput <- launchScript(\"ECHO\", \"a/b/c\", wait = TRUE)",
    "line": 5
  }, {
    "author": {
      "login": "felixcheung"
    },
    "body": "this is from https://github.com/apache/spark/pull/16670#discussion_r97393450 this is \"often times the result (error) is not enough to debug the issue.\"\r\n\r\nour options are:\r\n- redirect stdout always (could be very noisy)\r\n- do not redirect stdout by default, but also do not drop (this PR) - if R shell share the console with JVM (aka sparkR shell) then user would see messages, but if IDE, user would not see like https://github.com/apache/spark/pull/16670#discussion_r97939920\r\n  - I'd further propose an API to turn on redirect on demand which would address the R IDE case",
    "commit": "322b7600838f20ea48a7108e6e00ffcb51e1818e",
    "createdAt": "2017-01-26T23:05:06Z",
    "diffHunk": "@@ -20,7 +20,7 @@ test_that(\"sparkJars tag in SparkContext\", {\n   if (.Platform$OS.type != \"windows\") {\n     skip(\"This test is only for Windows, skipped\")\n   }\n-  testOutput <- launchScript(\"ECHO\", \"a/b/c\", capture = TRUE)\n+  testOutput <- launchScript(\"ECHO\", \"a/b/c\", wait = TRUE)",
    "line": 5
  }, {
    "author": {
      "login": "shivaram"
    },
    "body": "I think the second option is fine - i.e not redirecting it by default but happening to share stdout with the R process. That way if say the R IDE has some way to save or view logs from the stdout of R, then users can use that (Does RStudio have something like this ?)\r\n\r\nThe API to redirect on demand might be useful (it'll be something like setLogLevel ?) but I'm not sure we can change it for an already running JVM ?\r\n\r\nAnyways let me review this PR one more time, I think we  can discuss the new API in a separate JIRA",
    "commit": "322b7600838f20ea48a7108e6e00ffcb51e1818e",
    "createdAt": "2017-01-27T18:46:23Z",
    "diffHunk": "@@ -20,7 +20,7 @@ test_that(\"sparkJars tag in SparkContext\", {\n   if (.Platform$OS.type != \"windows\") {\n     skip(\"This test is only for Windows, skipped\")\n   }\n-  testOutput <- launchScript(\"ECHO\", \"a/b/c\", capture = TRUE)\n+  testOutput <- launchScript(\"ECHO\", \"a/b/c\", wait = TRUE)",
    "line": 5
  }],
  "prId": 16670
}]