[{
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "add `sparkR.session.stop()`\n",
    "commit": "d1ec80b3a57b0610ce0367447e9802923ad02ae9",
    "createdAt": "2016-08-23T21:39:16Z",
    "diffHunk": "@@ -0,0 +1,41 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+context(\"JVM API\")\n+\n+sparkSession <- sparkR.session(enableHiveSupport = FALSE)\n+\n+test_that(\"Create and call methods on object\", {\n+  jarr <- newJObject(\"java.util.ArrayList\")\n+  # Add an element to the array\n+  callJMethod(jarr, \"add\", 1L)\n+  # Check if get returns the same element\n+  expect_equal(callJMethod(jarr, \"get\", 0L), 1L)\n+})\n+\n+test_that(\"Call static methods\", {\n+  # Convert a boolean to a string\n+  strTrue <- callJStatic(\"java.lang.String\", \"valueOf\", TRUE)\n+  expect_equal(strTrue, \"true\")\n+})\n+\n+test_that(\"Manually garbage collect objects\", {\n+  jarr <- newJObject(\"java.util.ArrayList\")\n+  cleanup.jobj(jarr)\n+  # Using a jobj after GC should throw an error\n+  expect_error(print(jarr), \"Error in invokeJava.*\")\n+})",
    "line": 41
  }, {
    "author": {
      "login": "shivaram"
    },
    "body": "Done\n",
    "commit": "d1ec80b3a57b0610ce0367447e9802923ad02ae9",
    "createdAt": "2016-08-27T22:07:45Z",
    "diffHunk": "@@ -0,0 +1,41 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+context(\"JVM API\")\n+\n+sparkSession <- sparkR.session(enableHiveSupport = FALSE)\n+\n+test_that(\"Create and call methods on object\", {\n+  jarr <- newJObject(\"java.util.ArrayList\")\n+  # Add an element to the array\n+  callJMethod(jarr, \"add\", 1L)\n+  # Check if get returns the same element\n+  expect_equal(callJMethod(jarr, \"get\", 0L), 1L)\n+})\n+\n+test_that(\"Call static methods\", {\n+  # Convert a boolean to a string\n+  strTrue <- callJStatic(\"java.lang.String\", \"valueOf\", TRUE)\n+  expect_equal(strTrue, \"true\")\n+})\n+\n+test_that(\"Manually garbage collect objects\", {\n+  jarr <- newJObject(\"java.util.ArrayList\")\n+  cleanup.jobj(jarr)\n+  # Using a jobj after GC should throw an error\n+  expect_error(print(jarr), \"Error in invokeJava.*\")\n+})",
    "line": 41
  }],
  "prId": 14775
}]