[{
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "nit: would be great to align the tolerance parameter with indentation\n",
    "commit": "b1f7b238a4655e5f4493a741daff1d0a45521e5a",
    "createdAt": "2016-11-19T00:25:12Z",
    "diffHunk": "@@ -637,31 +637,31 @@ test_that(\"spark.isotonicRegression\", {\n \n test_that(\"spark.logit\", {\n   # test binary logistic regression\n-  label <- c(1.0, 1.0, 1.0, 0.0, 0.0)\n+  label <- c(0.0, 0.0, 0.0, 1.0, 1.0)\n   feature <- c(1.1419053, 0.9194079, -0.9498666, -1.1069903, 0.2809776)\n   binary_data <- as.data.frame(cbind(label, feature))\n   binary_df <- createDataFrame(binary_data)\n \n   blr_model <- spark.logit(binary_df, label ~ feature, thresholds = 1.0)\n   blr_predict <- collect(select(predict(blr_model, binary_df), \"prediction\"))\n-  expect_equal(blr_predict$prediction, c(0, 0, 0, 0, 0))\n+  expect_equal(blr_predict$prediction, c(\"0.0\", \"0.0\", \"0.0\", \"0.0\", \"0.0\"))\n   blr_model1 <- spark.logit(binary_df, label ~ feature, thresholds = 0.0)\n   blr_predict1 <- collect(select(predict(blr_model1, binary_df), \"prediction\"))\n-  expect_equal(blr_predict1$prediction, c(1, 1, 1, 1, 1))\n+  expect_equal(blr_predict1$prediction, c(\"1.0\", \"1.0\", \"1.0\", \"1.0\", \"1.0\"))\n \n   # test summary of binary logistic regression\n   blr_summary <- summary(blr_model)\n   blr_fmeasure <- collect(select(blr_summary$fMeasureByThreshold, \"threshold\", \"F-Measure\"))\n-  expect_equal(blr_fmeasure$threshold, c(0.8221347, 0.7884005, 0.6674709, 0.3785437, 0.3434487),\n-               tolerance = 1e-4)\n-  expect_equal(blr_fmeasure$\"F-Measure\", c(0.5000000, 0.8000000, 0.6666667, 0.8571429, 0.7500000),\n-               tolerance = 1e-4)\n+  expect_equal(blr_fmeasure$threshold, c(0.6565513, 0.6214563, 0.3325291, 0.2115995, 0.1778653),\n+  tolerance = 1e-4)"
  }],
  "prId": 15910
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "how reliable is this test? the order of rows is not guaranteed unless it is enforced by a sort or something, right?\n",
    "commit": "b1f7b238a4655e5f4493a741daff1d0a45521e5a",
    "createdAt": "2016-11-19T00:26:31Z",
    "diffHunk": "@@ -674,6 +674,16 @@ test_that(\"spark.logit\", {\n   expect_error(summary(blr_model2))\n   unlink(modelPath)\n \n+  # test prediction label as text\n+  training <- suppressWarnings(createDataFrame(iris))\n+  binomial_training <- training[training$Species %in% c(\"versicolor\", \"virginica\"), ]\n+  binomial_model <- spark.logit(binomial_training, Species ~ Sepal_Length + Sepal_Width)\n+  prediction <- predict(binomial_model, binomial_training)\n+  expect_equal(typeof(take(select(prediction, \"prediction\"), 1)$prediction), \"character\")\n+  expected <- c(\"virginica\", \"virginica\", \"virginica\", \"versicolor\", \"virginica\",\n+                \"versicolor\", \"virginica\", \"versicolor\", \"virginica\", \"versicolor\")\n+  expect_equal(as.list(take(select(prediction, \"prediction\"), 10))[[1]], expected)",
    "line": 50
  }, {
    "author": {
      "login": "yanboliang"
    },
    "body": "Theoretically, the order is not guaranteed. However, we did similar work from the first test case of mllib.R, but never had a problem until now. I'd like to enforce the tests here and other places, but may be in a separate work should be better since it involves lots of other tests?\n",
    "commit": "b1f7b238a4655e5f4493a741daff1d0a45521e5a",
    "createdAt": "2016-11-19T11:16:31Z",
    "diffHunk": "@@ -674,6 +674,16 @@ test_that(\"spark.logit\", {\n   expect_error(summary(blr_model2))\n   unlink(modelPath)\n \n+  # test prediction label as text\n+  training <- suppressWarnings(createDataFrame(iris))\n+  binomial_training <- training[training$Species %in% c(\"versicolor\", \"virginica\"), ]\n+  binomial_model <- spark.logit(binomial_training, Species ~ Sepal_Length + Sepal_Width)\n+  prediction <- predict(binomial_model, binomial_training)\n+  expect_equal(typeof(take(select(prediction, \"prediction\"), 1)$prediction), \"character\")\n+  expected <- c(\"virginica\", \"virginica\", \"virginica\", \"versicolor\", \"virginica\",\n+                \"versicolor\", \"virginica\", \"versicolor\", \"virginica\", \"versicolor\")\n+  expect_equal(as.list(take(select(prediction, \"prediction\"), 10))[[1]], expected)",
    "line": 50
  }, {
    "author": {
      "login": "felixcheung"
    },
    "body": "sounds good, separate JIRA then. If tests haven't been failing perhaps it is not huge problem\n",
    "commit": "b1f7b238a4655e5f4493a741daff1d0a45521e5a",
    "createdAt": "2016-11-20T19:03:43Z",
    "diffHunk": "@@ -674,6 +674,16 @@ test_that(\"spark.logit\", {\n   expect_error(summary(blr_model2))\n   unlink(modelPath)\n \n+  # test prediction label as text\n+  training <- suppressWarnings(createDataFrame(iris))\n+  binomial_training <- training[training$Species %in% c(\"versicolor\", \"virginica\"), ]\n+  binomial_model <- spark.logit(binomial_training, Species ~ Sepal_Length + Sepal_Width)\n+  prediction <- predict(binomial_model, binomial_training)\n+  expect_equal(typeof(take(select(prediction, \"prediction\"), 1)$prediction), \"character\")\n+  expected <- c(\"virginica\", \"virginica\", \"virginica\", \"versicolor\", \"virginica\",\n+                \"versicolor\", \"virginica\", \"versicolor\", \"virginica\", \"versicolor\")\n+  expect_equal(as.list(take(select(prediction, \"prediction\"), 10))[[1]], expected)",
    "line": 50
  }, {
    "author": {
      "login": "wangmiao1981"
    },
    "body": "I will try to create follow-up jira for this.",
    "commit": "b1f7b238a4655e5f4493a741daff1d0a45521e5a",
    "createdAt": "2016-11-28T18:55:46Z",
    "diffHunk": "@@ -674,6 +674,16 @@ test_that(\"spark.logit\", {\n   expect_error(summary(blr_model2))\n   unlink(modelPath)\n \n+  # test prediction label as text\n+  training <- suppressWarnings(createDataFrame(iris))\n+  binomial_training <- training[training$Species %in% c(\"versicolor\", \"virginica\"), ]\n+  binomial_model <- spark.logit(binomial_training, Species ~ Sepal_Length + Sepal_Width)\n+  prediction <- predict(binomial_model, binomial_training)\n+  expect_equal(typeof(take(select(prediction, \"prediction\"), 1)$prediction), \"character\")\n+  expected <- c(\"virginica\", \"virginica\", \"virginica\", \"versicolor\", \"virginica\",\n+                \"versicolor\", \"virginica\", \"versicolor\", \"virginica\", \"versicolor\")\n+  expect_equal(as.list(take(select(prediction, \"prediction\"), 10))[[1]], expected)",
    "line": 50
  }],
  "prId": 15910
}]