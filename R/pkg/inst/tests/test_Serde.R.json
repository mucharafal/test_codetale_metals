[{
  "comments": [{
    "author": {
      "login": "shivaram"
    },
    "body": "Could we also add some tests with empty columns / empty lists (as we have some code paths just to handle these)\n",
    "commit": "eae33411f0cf597072560fa6176174dda4f75d24",
    "createdAt": "2015-08-25T03:21:20Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+context(\"SerDe functionality\")\n+\n+sc <- sparkR.init()\n+\n+test_that(\"SerDe of primitive types\", {\n+  x <- callJStatic(\"SparkRHandler\", \"echo\", 1L)\n+  expect_equal(x, 1L)\n+  expect_equal(class(x), \"integer\")\n+  \n+  x <- callJStatic(\"SparkRHandler\", \"echo\", 1)\n+  expect_equal(x, 1)\n+  expect_equal(class(x), \"numeric\")\n+\n+  x <- callJStatic(\"SparkRHandler\", \"echo\", TRUE)\n+  expect_true(x)\n+  expect_equal(class(x), \"logical\")\n+  \n+  x <- callJStatic(\"SparkRHandler\", \"echo\", \"abc\")\n+  expect_equal(x, \"abc\")\n+  expect_equal(class(x), \"character\")  \n+})\n+\n+test_that(\"SerDe of list of primitive types\", {\n+  x <- list(1L, 2L, 3L)\n+  y <- callJStatic(\"SparkRHandler\", \"echo\", x)\n+  expect_equal(x, y)\n+  expect_equal(class(y[[1]]), \"integer\")\n+\n+  x <- list(1, 2, 3)\n+  y <- callJStatic(\"SparkRHandler\", \"echo\", x)\n+  expect_equal(x, y)\n+  expect_equal(class(y[[1]]), \"numeric\")\n+  \n+  x <- list(TRUE, FALSE)\n+  y <- callJStatic(\"SparkRHandler\", \"echo\", x)\n+  expect_equal(x, y)\n+  expect_equal(class(y[[1]]), \"logical\")\n+  \n+  x <- list(\"a\", \"b\", \"c\")\n+  y <- callJStatic(\"SparkRHandler\", \"echo\", x)\n+  expect_equal(x, y)\n+  expect_equal(class(y[[1]]), \"character\")\n+})\n+\n+test_that(\"SerDe of list of lists\", {\n+  x <- list(list(1L, 2L, 3L), list(1, 2, 3),\n+            list(TRUE, FALSE), list(\"a\", \"b\", \"c\"))\n+  y <- callJStatic(\"SparkRHandler\", \"echo\", x)\n+  expect_equal(x, y)",
    "line": 71
  }, {
    "author": {
      "login": "sun-rui"
    },
    "body": "added.\n",
    "commit": "eae33411f0cf597072560fa6176174dda4f75d24",
    "createdAt": "2015-08-25T05:04:31Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+context(\"SerDe functionality\")\n+\n+sc <- sparkR.init()\n+\n+test_that(\"SerDe of primitive types\", {\n+  x <- callJStatic(\"SparkRHandler\", \"echo\", 1L)\n+  expect_equal(x, 1L)\n+  expect_equal(class(x), \"integer\")\n+  \n+  x <- callJStatic(\"SparkRHandler\", \"echo\", 1)\n+  expect_equal(x, 1)\n+  expect_equal(class(x), \"numeric\")\n+\n+  x <- callJStatic(\"SparkRHandler\", \"echo\", TRUE)\n+  expect_true(x)\n+  expect_equal(class(x), \"logical\")\n+  \n+  x <- callJStatic(\"SparkRHandler\", \"echo\", \"abc\")\n+  expect_equal(x, \"abc\")\n+  expect_equal(class(x), \"character\")  \n+})\n+\n+test_that(\"SerDe of list of primitive types\", {\n+  x <- list(1L, 2L, 3L)\n+  y <- callJStatic(\"SparkRHandler\", \"echo\", x)\n+  expect_equal(x, y)\n+  expect_equal(class(y[[1]]), \"integer\")\n+\n+  x <- list(1, 2, 3)\n+  y <- callJStatic(\"SparkRHandler\", \"echo\", x)\n+  expect_equal(x, y)\n+  expect_equal(class(y[[1]]), \"numeric\")\n+  \n+  x <- list(TRUE, FALSE)\n+  y <- callJStatic(\"SparkRHandler\", \"echo\", x)\n+  expect_equal(x, y)\n+  expect_equal(class(y[[1]]), \"logical\")\n+  \n+  x <- list(\"a\", \"b\", \"c\")\n+  y <- callJStatic(\"SparkRHandler\", \"echo\", x)\n+  expect_equal(x, y)\n+  expect_equal(class(y[[1]]), \"character\")\n+})\n+\n+test_that(\"SerDe of list of lists\", {\n+  x <- list(list(1L, 2L, 3L), list(1, 2, 3),\n+            list(TRUE, FALSE), list(\"a\", \"b\", \"c\"))\n+  y <- callJStatic(\"SparkRHandler\", \"echo\", x)\n+  expect_equal(x, y)",
    "line": 71
  }],
  "prId": 8276
}]