[
  {
    "id" : "201d119b-936d-4a2d-a051-8ebf9e2d45f4",
    "prId" : 1523,
    "comments" : [
      {
        "id" : "b1cae196-0baf-4588-91ba-076b55ebac03",
        "parentId" : null,
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "Question: currently we cannot use MultilineStringFormatting directly for dotty because we cannot tokenize scala3 code and need to use compiler for that? But when we get tokenizer for dotty code we will move it back?",
        "createdAt" : "2020-03-31T15:24:13Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7c83549a-988b-4383-8296-05bf9aac52f5",
        "parentId" : "b1cae196-0baf-4588-91ba-076b55ebac03",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We should be able, but not 100 % sure yet. We might need to keep it in the new place.",
        "createdAt" : "2020-04-03T16:57:55Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1142490703f832961ac0df1debd14b4f3b12ce7d",
    "line" : null,
    "diffHunk" : "@@ -126,25 +120,24 @@ final class MultilineStringFormattingProvider(\n \n   private def withToken(\n       textId: TextDocumentIdentifier,\n+      sourceText: String,\n       range: Range,\n       newlineAdded: Boolean\n-  )(fn: (String, meta.Position) => List[TextEdit]): Future[List[TextEdit]] =\n-    Future {\n-      val source = textId.getUri.toAbsolutePath\n-      if (source.exists) {\n-        val sourceText = buffer.get(source).getOrElse(\"\")\n-        val pos = range.getStart.toMeta(\n-          Input.VirtualFile(source.toString(), sourceText)\n-        )\n-        if (pipeInScope(pos, sourceText, newlineAdded)) {\n-          val tokens =\n-            Input.VirtualFile(source.toString(), sourceText).tokenize.toOption\n-          tokens.toList\n-            .filter(multilineStringInTokens(_, pos, sourceText))\n-            .flatMap(_ => fn(sourceText, pos))\n-        } else Nil\n+  )(fn: (String, meta.Position) => List[TextEdit]): List[TextEdit] = {\n+    val source = textId.getUri.toAbsolutePath\n+    if (source.exists) {\n+      val pos = range.getStart.toMeta(\n+        Input.VirtualFile(source.toString(), sourceText)\n+      )\n+      if (pipeInScope(pos, sourceText, newlineAdded)) {\n+        val tokens =\n+          Input.VirtualFile(source.toString(), sourceText).tokenize.toOption"
  }
]