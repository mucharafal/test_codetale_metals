[
  {
    "id" : "03b565ff-7aef-4cf8-b97c-ece1258d24f6",
    "prId" : 1523,
    "comments" : [
      {
        "id" : "987b72a2-7786-4278-9e5f-634d07fe1874",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "The code here is mostly copied from Dotty Language Server and will be mostly likely reworked heavily soon, so I wouldn't concentrate on this too much. Tests are a better  documentation showing what's currently working.",
        "createdAt" : "2020-03-25T17:15:35Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6913d483-63a7-44ac-bcab-c3da76bdbeff",
        "parentId" : "987b72a2-7786-4278-9e5f-634d07fe1874",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "ok :+1:",
        "createdAt" : "2020-04-01T08:56:19Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1142490703f832961ac0df1debd14b4f3b12ce7d",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,538 @@\n+package scala.meta.internal.pc\n+\n+import java.util.concurrent.ExecutorService\n+import java.util.concurrent.ScheduledExecutorService\n+import java.util.concurrent.CompletableFuture\n+import java.util.Optional\n+import java.io.File\n+import java.io.BufferedWriter\n+import java.io.OutputStreamWriter\n+import java.nio.file.Path\n+import java.nio.file.Paths\n+import java.net.URI\n+import java.{util => ju}\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.ExecutionContextExecutor\n+import scala.io.Codec\n+import scala.collection.JavaConverters._\n+import scala.language.implicitConversions\n+import org.eclipse.lsp4j.Diagnostic\n+import org.eclipse.lsp4j.Location\n+import org.eclipse.lsp4j.CompletionItem\n+import org.eclipse.lsp4j.CompletionItemKind\n+import org.eclipse.lsp4j.CompletionList\n+import org.eclipse.lsp4j.Position\n+import org.eclipse.lsp4j.Range\n+import org.eclipse.lsp4j.Hover\n+import org.eclipse.lsp4j.SignatureHelp\n+import org.eclipse.lsp4j.SignatureInformation\n+import org.eclipse.lsp4j.ParameterInformation\n+import org.eclipse.lsp4j.MarkupContent\n+import org.eclipse.lsp4j.FoldingRange\n+import org.eclipse.lsp4j.DocumentSymbol\n+import org.eclipse.lsp4j.DocumentOnTypeFormattingParams\n+import org.eclipse.lsp4j.DocumentRangeFormattingParams\n+import org.eclipse.lsp4j.TextEdit\n+import org.eclipse.lsp4j.DiagnosticSeverity\n+import dotty.tools.dotc.interactive.InteractiveDriver\n+import dotty.tools.dotc.interactive.Interactive\n+import dotty.tools.dotc.interactive.Completion\n+import dotty.tools.dotc.core.Contexts.Context\n+import dotty.tools.dotc.core.Symbols._\n+import dotty.tools.dotc.core.Names._\n+import dotty.tools.dotc.core.Types._\n+import dotty.tools.dotc.core.Flags\n+import dotty.tools.dotc.core.SymDenotations._\n+import dotty.tools.dotc.core.NameOps._\n+import dotty.tools.dotc.core.NameKinds._\n+import dotty.tools.dotc.core.Flags._\n+import dotty.tools.dotc.core.Annotations.AnnotInfo\n+import dotty.tools.dotc.util.SourcePosition\n+import dotty.tools.dotc.util.Spans\n+import dotty.tools.dotc.util.ParsedComment\n+import dotty.tools.dotc.util.Signatures\n+import dotty.tools.dotc.util.SourceFile\n+import dotty.tools.dotc.parsing.Parsers.Parser\n+import dotty.tools.dotc.printing.PlainPrinter\n+import dotty.tools.dotc.reporting.diagnostic.Message\n+import dotty.tools.dotc.reporting.StoreReporter\n+import dotty.tools.dotc.reporting.diagnostic.MessageContainer\n+import dotty.tools.io.VirtualFile\n+import dotty.tools.dotc.interfaces.{Diagnostic => DottyDiagnostic}\n+import dotty.tools.dotc.ast.tpd\n+import scala.meta.internal.pc.EmptyCancelToken\n+import scala.meta.internal.pc.DefinitionResultImpl\n+import scala.meta.internal.pc.CompilerAccess\n+import scala.meta.pc.VirtualFileParams\n+import scala.meta.pc.PresentationCompilerConfig\n+import scala.meta.pc.PresentationCompiler\n+import scala.meta.pc.SymbolSearch\n+import scala.meta.pc.DefinitionResult\n+import scala.meta.pc.OffsetParams\n+\n+case class ScalaPresentationCompiler("
  },
  {
    "id" : "08cb3f95-f7c6-4642-80ef-17b846e18cdf",
    "prId" : 1523,
    "comments" : [
      {
        "id" : "d0f0f1ac-181f-435f-a117-0f6dda6e71f1",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Some of the features are not yet implemented, but Metals work perfectly well without them, so I would rather merge this without those features and work on them later. Plus it can be later worked on by multiple people when needed.",
        "createdAt" : "2020-03-25T17:16:25Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1142490703f832961ac0df1debd14b4f3b12ce7d",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,538 @@\n+package scala.meta.internal.pc\n+\n+import java.util.concurrent.ExecutorService\n+import java.util.concurrent.ScheduledExecutorService\n+import java.util.concurrent.CompletableFuture\n+import java.util.Optional\n+import java.io.File\n+import java.io.BufferedWriter\n+import java.io.OutputStreamWriter\n+import java.nio.file.Path\n+import java.nio.file.Paths\n+import java.net.URI\n+import java.{util => ju}\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.ExecutionContextExecutor\n+import scala.io.Codec\n+import scala.collection.JavaConverters._\n+import scala.language.implicitConversions\n+import org.eclipse.lsp4j.Diagnostic\n+import org.eclipse.lsp4j.Location\n+import org.eclipse.lsp4j.CompletionItem\n+import org.eclipse.lsp4j.CompletionItemKind\n+import org.eclipse.lsp4j.CompletionList\n+import org.eclipse.lsp4j.Position\n+import org.eclipse.lsp4j.Range\n+import org.eclipse.lsp4j.Hover\n+import org.eclipse.lsp4j.SignatureHelp\n+import org.eclipse.lsp4j.SignatureInformation\n+import org.eclipse.lsp4j.ParameterInformation\n+import org.eclipse.lsp4j.MarkupContent\n+import org.eclipse.lsp4j.FoldingRange\n+import org.eclipse.lsp4j.DocumentSymbol\n+import org.eclipse.lsp4j.DocumentOnTypeFormattingParams\n+import org.eclipse.lsp4j.DocumentRangeFormattingParams\n+import org.eclipse.lsp4j.TextEdit\n+import org.eclipse.lsp4j.DiagnosticSeverity\n+import dotty.tools.dotc.interactive.InteractiveDriver\n+import dotty.tools.dotc.interactive.Interactive\n+import dotty.tools.dotc.interactive.Completion\n+import dotty.tools.dotc.core.Contexts.Context\n+import dotty.tools.dotc.core.Symbols._\n+import dotty.tools.dotc.core.Names._\n+import dotty.tools.dotc.core.Types._\n+import dotty.tools.dotc.core.Flags\n+import dotty.tools.dotc.core.SymDenotations._\n+import dotty.tools.dotc.core.NameOps._\n+import dotty.tools.dotc.core.NameKinds._\n+import dotty.tools.dotc.core.Flags._\n+import dotty.tools.dotc.core.Annotations.AnnotInfo\n+import dotty.tools.dotc.util.SourcePosition\n+import dotty.tools.dotc.util.Spans\n+import dotty.tools.dotc.util.ParsedComment\n+import dotty.tools.dotc.util.Signatures\n+import dotty.tools.dotc.util.SourceFile\n+import dotty.tools.dotc.parsing.Parsers.Parser\n+import dotty.tools.dotc.printing.PlainPrinter\n+import dotty.tools.dotc.reporting.diagnostic.Message\n+import dotty.tools.dotc.reporting.StoreReporter\n+import dotty.tools.dotc.reporting.diagnostic.MessageContainer\n+import dotty.tools.io.VirtualFile\n+import dotty.tools.dotc.interfaces.{Diagnostic => DottyDiagnostic}\n+import dotty.tools.dotc.ast.tpd\n+import scala.meta.internal.pc.EmptyCancelToken\n+import scala.meta.internal.pc.DefinitionResultImpl\n+import scala.meta.internal.pc.CompilerAccess\n+import scala.meta.pc.VirtualFileParams\n+import scala.meta.pc.PresentationCompilerConfig\n+import scala.meta.pc.PresentationCompiler\n+import scala.meta.pc.SymbolSearch\n+import scala.meta.pc.DefinitionResult\n+import scala.meta.pc.OffsetParams\n+\n+case class ScalaPresentationCompiler(\n+    classpath: Seq[Path] = Nil,\n+    options: List[String] = Nil,\n+    search: SymbolSearch = EmptySymbolSearch,\n+    ec: ExecutionContextExecutor = ExecutionContext.global,\n+    sh: Option[ScheduledExecutorService] = None,\n+    config: PresentationCompilerConfig = PresentationCompilerConfigImpl()\n+) extends PresentationCompiler {\n+\n+  def this() = this(Nil, Nil)\n+\n+  import InteractiveDriver._\n+\n+  val compilerAccess: CompilerAccess[StoreReporter, InteractiveDriver] = {\n+    Scala3CompilerAccess(\n+      config,\n+      sh,\n+      () => new Scala3CompilerWrapper(newDriver)\n+    )(\n+      ec\n+    )\n+  }\n+\n+  def newDriver: InteractiveDriver = {\n+    val defaultFlags = List(\"-color:never\")\n+    val settings =\n+      options ::: defaultFlags ::: \"-classpath\" :: classpath.mkString(\n+        File.pathSeparator\n+      ) :: Nil\n+    new InteractiveDriver(settings)\n+  }\n+\n+  def complete(params: OffsetParams): CompletableFuture[CompletionList] = {\n+    compilerAccess.withInterruptableCompiler(emptyCompletion(), params.token) {\n+      access =>\n+        val driver = access.compiler()\n+        val uri = params.uri\n+        driver.run(uri, params.text)\n+        implicit def ctx: Context = driver.currentCtx\n+\n+        val pos = sourcePosition(driver, params, uri)\n+        val items = driver.compilationUnits.get(uri) match {\n+          case Some(unit) =>\n+            Completion.completions(pos)(ctx.fresh.setCompilationUnit(unit))._2\n+          case None => Nil\n+        }\n+\n+        new CompletionList(\n+          /*isIncomplete = */ false,\n+          items.map(completionItem).asJava\n+        )\n+    }\n+  }\n+\n+  def definition(params: OffsetParams): CompletableFuture[DefinitionResult] = {\n+    compilerAccess.withNonInterruptableCompiler(\n+      DefinitionResultImpl.empty,\n+      params.token\n+    ) { access =>\n+      val driver = access.compiler()\n+      implicit def ctx: Context = driver.currentCtx\n+      val uri = params.uri\n+      driver.run(uri, params.text)\n+      val pos = sourcePosition(driver, params, uri)\n+      val path = Interactive.pathTo(driver.openedTrees(uri), pos)\n+      val definitions = Interactive.findDefinitions(path, pos, driver).toList\n+\n+      DefinitionResultImpl(\n+        \"\",\n+        definitions.flatMap(d => location(d.namePos)).asJava\n+      )\n+\n+    }\n+  }\n+\n+  def shutdown(): Unit = {\n+    compilerAccess.shutdown()\n+  }\n+\n+  def restart(): Unit = {\n+    compilerAccess.shutdownCurrentCompiler()\n+  }\n+\n+  def diagnosticsForDebuggingPurposes(): ju.List[String] = List[String]().asJava\n+\n+  // TODO NOT IMPLEMENTED\n+  def semanticdbTextDocument(\n+      filename: String,\n+      code: String\n+  ): CompletableFuture[Array[Byte]] = {\n+    CompletableFuture.completedFuture(\n+      List[Byte]().toArray\n+    )\n+  }\n+\n+  // TODO NOT IMPLEMENTED\n+  def completionItemResolve(\n+      item: CompletionItem,\n+      symbol: String\n+  ): CompletableFuture[CompletionItem] = {\n+    CompletableFuture.completedFuture(\n+      null\n+    )\n+  }\n+\n+  // TODO NOT IMPLEMENTED"
  }
]