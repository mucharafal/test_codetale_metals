[
  {
    "id" : "7601c503-03f1-482d-88c3-c9857219895f",
    "prId" : 1639,
    "comments" : [
      {
        "id" : "c4e79ba9-bff3-4b41-aa5a-a9439e2a2890",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "@tgodzik not strictly related to this PR, but I've noticed that `SourceFile.virtual` simplifies this a lot",
        "createdAt" : "2020-04-17T15:59:32Z",
        "updatedAt" : "2020-04-17T16:01:05Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c54637f1-2487-4453-ac9f-2d7f66690d84",
        "parentId" : "c4e79ba9-bff3-4b41-aa5a-a9439e2a2890",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I think this is actually copied form the Dotty Language Server, I mostly left utility methods intact.",
        "createdAt" : "2020-04-17T16:03:19Z",
        "updatedAt" : "2020-04-17T16:03:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9e51f1e24fcfd8adefc5bbaf256dfd74a42b7a7d",
    "line" : 87,
    "diffHunk" : "@@ -526,15 +538,12 @@ case class ScalaPresentationCompiler(\n       )\n     }\n \n+  private def toSource(params: VirtualFileParams): SourceFile =\n+    toSource(params.uri, params.text)\n+\n   private def toSource(uri: URI, sourceCode: String): SourceFile = {\n     val path = Paths.get(uri)\n-    val virtualFile = new VirtualFile(path.getFileName.toString, path.toString)\n-    val writer = new BufferedWriter(\n-      new OutputStreamWriter(virtualFile.output, \"UTF-8\")\n-    )\n-    writer.write(sourceCode)\n-    writer.close()\n-    new SourceFile(virtualFile, Codec.UTF8)\n+    SourceFile.virtual(path.getFileName().toString, sourceCode)"
  },
  {
    "id" : "445661b0-c1d3-43ea-9320-7c1dba71edba",
    "prId" : 1639,
    "comments" : [
      {
        "id" : "80d56897-2e9a-4736-bef4-0605ec51d441",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "here we're running the PC: I've tried parsing the text directly but then I got all `-1` for the positions...",
        "createdAt" : "2020-04-17T16:00:24Z",
        "updatedAt" : "2020-04-17T16:01:05Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9e51f1e24fcfd8adefc5bbaf256dfd74a42b7a7d",
    "line" : 55,
    "diffHunk" : "@@ -186,13 +195,17 @@ case class ScalaPresentationCompiler(\n     )\n   }\n \n-  // TODO NOT IMPLEMENTED\n   def documentSymbols(\n       params: VirtualFileParams\n   ): CompletableFuture[ju.List[DocumentSymbol]] = {\n-    CompletableFuture.completedFuture(\n-      List.empty[DocumentSymbol].asJava\n-    )\n+    compilerAccess.withInterruptableCompiler(\n+      List.empty[DocumentSymbol].asJava,\n+      params.token\n+    ) { access =>\n+      val driver = access.compiler()\n+      driver.run(params.uri, params.text)"
  },
  {
    "id" : "18004de3-03b9-4468-a656-bee3a9f31981",
    "prId" : 1701,
    "comments" : [
      {
        "id" : "c2332d5d-f6c3-452a-9657-4fddc955dd1a",
        "parentId" : null,
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "hover has also 1 arg constructor, no need to provide null here",
        "createdAt" : "2020-05-06T19:39:48Z",
        "updatedAt" : "2020-05-07T11:03:43Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "502ee886-bd31-4053-9cc0-5fb062c5791d",
        "parentId" : "c2332d5d-f6c3-452a-9657-4fddc955dd1a",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed!",
        "createdAt" : "2020-05-07T11:03:51Z",
        "updatedAt" : "2020-05-07T11:03:51Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0f0d5dc59e43252c15114646f132c3b02be3d1b7",
    "line" : null,
    "diffHunk" : "@@ -254,17 +254,26 @@ case class ScalaPresentationCompiler(\n           case Nil =>\n             ju.Optional.empty()\n           case symbols =>\n+            val printer = SymbolPrinter()\n             val docComments = symbols.flatMap(ParsedComment.docOf)\n-\n             val keywordName = symbols.headOption.map { symbol =>\n-              SymbolPrinter().fullDefinition(\n+              printer.fullDefinition(\n                 symbol,\n                 tpw\n               )\n             }\n+            val typeString = symbols.headOption.map { symbol =>\n+              tpw match {\n+                // https://github.com/lampepfl/dotty/issues/8891\n+                case _: ImportType =>\n+                  printer.typeString(symbol.typeRef)\n+                case _ =>\n+                  printer.typeString(tpw)\n+              }\n+            }\n             val content = hoverContent(\n               keywordName,\n-              Some(tpw.show),\n+              typeString,\n               docComments\n             )\n             ju.Optional.of(new Hover(content, null))"
  }
]