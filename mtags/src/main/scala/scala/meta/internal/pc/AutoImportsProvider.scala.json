[
  {
    "id" : "c5e84261-980d-4415-a0e6-ee1ace17126a",
    "prId" : 1065,
    "comments" : [
      {
        "id" : "6895a0a3-66cd-48a2-999c-66540a6922b5",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "this is analogous to the homonymous class in `CompletionProvider`, except we visit symbols directly (instead of normalizing everything into a completion `Member`)",
        "createdAt" : "2019-12-06T18:05:34Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "05b1ca6f-33e7-42be-b174-2a3add65d1cb",
        "parentId" : "6895a0a3-66cd-48a2-999c-66540a6922b5",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Might make sense to use the same logic with an additional transformer (TextEdit => T) function that might be identity by default.",
        "createdAt" : "2019-12-09T21:22:00Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6e1a279e-8c2d-4916-ab5d-5d62040033e3",
        "parentId" : "6895a0a3-66cd-48a2-999c-66540a6922b5",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Done, take a look!",
        "createdAt" : "2019-12-10T10:10:49Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1e046b2b878d476d389f19bdcaa73ae4b7c121c9",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,148 @@\n+package scala.meta.internal.pc\n+\n+import scala.meta.pc.OffsetParams\n+import org.eclipse.{lsp4j => l}\n+import scala.meta.pc.SymbolSearchVisitor\n+import java.nio.file.Path\n+import scala.meta.pc.AutoImportsResult\n+import scala.collection.mutable\n+import scala.collection.JavaConverters._\n+import scala.util.control.NonFatal\n+\n+final class AutoImportsProvider(\n+    val compiler: MetalsGlobal,\n+    name: String,\n+    params: OffsetParams\n+) {\n+  import compiler._\n+\n+  def autoImports(): List[AutoImportsResult] = {\n+    val unit = addCompilationUnit(\n+      code = params.text,\n+      filename = params.filename,\n+      cursor = Some(params.offset)\n+    )\n+    val pos = unit.position(params.offset)\n+    val importPosition = autoImportPosition(pos, params.text())\n+    val context = doLocateImportContext(pos, importPosition)\n+    val isSeen = mutable.Set.empty[String]\n+    val symbols = List.newBuilder[Symbol]\n+\n+    def visit(sym: Symbol): Boolean = {\n+      val id = sym.fullName\n+      if (!isSeen(id)) {\n+        isSeen += id\n+        symbols += sym\n+        true\n+      }\n+      false\n+    }\n+\n+    val visitor = new CompilerSearchVisitor(name, context, visit)\n+\n+    search.search(name, buildTargetIdentifier, visitor)\n+\n+    symbols.result.collect {\n+      case sym if sym.name.dropLocal.decoded == name =>\n+        val ident = Identifier.backtickWrap(sym.name.dropLocal.decoded)\n+        val pkg = sym.owner.fullName\n+        val edits = importPosition match {\n+          case None => Nil\n+          case Some(value) =>\n+            val (short, edits) = ShortenedNames.synthesize(\n+              TypeRef(ThisType(sym.owner), sym, Nil),\n+              pos,\n+              context,\n+              value\n+            )\n+            edits\n+        }\n+        AutoImportsResultImpl(pkg, edits.asJava)\n+    }\n+  }\n+\n+  private class CompilerSearchVisitor("
  },
  {
    "id" : "2c53bbae-3fc6-4ecb-9607-943e8501e02c",
    "prId" : 1065,
    "comments" : [
      {
        "id" : "ead98b7a-dc8d-4385-b8be-371f7c56dcc1",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "could it make sense to move this utility into `MetalsGlobal`?",
        "createdAt" : "2019-12-06T18:06:12Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bfc01b44-8e9f-436e-a97a-9c3e9b34c261",
        "parentId" : "ead98b7a-dc8d-4385-b8be-371f7c56dcc1",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Maybe via additional trait? I think it makes sense though.",
        "createdAt" : "2019-12-09T21:22:31Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3e0b460b-5de3-44d9-ac11-e5bc4d6fe311",
        "parentId" : "ead98b7a-dc8d-4385-b8be-371f7c56dcc1",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Done 👍 ",
        "createdAt" : "2019-12-10T10:11:00Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1e046b2b878d476d389f19bdcaa73ae4b7c121c9",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,148 @@\n+package scala.meta.internal.pc\n+\n+import scala.meta.pc.OffsetParams\n+import org.eclipse.{lsp4j => l}\n+import scala.meta.pc.SymbolSearchVisitor\n+import java.nio.file.Path\n+import scala.meta.pc.AutoImportsResult\n+import scala.collection.mutable\n+import scala.collection.JavaConverters._\n+import scala.util.control.NonFatal\n+\n+final class AutoImportsProvider(\n+    val compiler: MetalsGlobal,\n+    name: String,\n+    params: OffsetParams\n+) {\n+  import compiler._\n+\n+  def autoImports(): List[AutoImportsResult] = {\n+    val unit = addCompilationUnit(\n+      code = params.text,\n+      filename = params.filename,\n+      cursor = Some(params.offset)\n+    )\n+    val pos = unit.position(params.offset)\n+    val importPosition = autoImportPosition(pos, params.text())\n+    val context = doLocateImportContext(pos, importPosition)\n+    val isSeen = mutable.Set.empty[String]\n+    val symbols = List.newBuilder[Symbol]\n+\n+    def visit(sym: Symbol): Boolean = {\n+      val id = sym.fullName\n+      if (!isSeen(id)) {\n+        isSeen += id\n+        symbols += sym\n+        true\n+      }\n+      false\n+    }\n+\n+    val visitor = new CompilerSearchVisitor(name, context, visit)\n+\n+    search.search(name, buildTargetIdentifier, visitor)\n+\n+    symbols.result.collect {\n+      case sym if sym.name.dropLocal.decoded == name =>\n+        val ident = Identifier.backtickWrap(sym.name.dropLocal.decoded)\n+        val pkg = sym.owner.fullName\n+        val edits = importPosition match {\n+          case None => Nil\n+          case Some(value) =>\n+            val (short, edits) = ShortenedNames.synthesize(\n+              TypeRef(ThisType(sym.owner), sym, Nil),\n+              pos,\n+              context,\n+              value\n+            )\n+            edits\n+        }\n+        AutoImportsResultImpl(pkg, edits.asJava)\n+    }\n+  }\n+\n+  private class CompilerSearchVisitor(\n+      query: String,\n+      context: Context,\n+      visitSymbol: Symbol => Boolean\n+  ) extends SymbolSearchVisitor {\n+\n+    def visit(top: SymbolSearchCandidate): Int = {\n+      var added = 0\n+      for {\n+        sym <- loadSymbolFromClassfile(top)\n+        if context.lookupSymbol(sym.name, _ => true).symbol != sym\n+      } {\n+        if (visitSymbol(sym)) {\n+          added += 1\n+        }\n+      }\n+      added\n+    }\n+\n+    def visitClassfile(pkg: String, filename: String): Int = {\n+      visit(SymbolSearchCandidate.Classfile(pkg, filename))\n+    }\n+\n+    def visitWorkspaceSymbol(\n+        path: Path,\n+        symbol: String,\n+        kind: l.SymbolKind,\n+        range: l.Range\n+    ): Int = {\n+      visit(SymbolSearchCandidate.Workspace(symbol))\n+    }\n+\n+    def shouldVisitPackage(pkg: String): Boolean =\n+      packageSymbolFromString(pkg).isDefined\n+\n+    override def isCancelled: Boolean =\n+      false\n+\n+  }\n+\n+  // FIXME(gabro): this is copy-pasted from CompletionProvider, we should de-dupe it\n+  private def loadSymbolFromClassfile("
  },
  {
    "id" : "e1109cff-9de0-4733-aa1d-bd4db7474dd9",
    "prId" : 1065,
    "comments" : [
      {
        "id" : "fe15adcb-7e19-4898-84ae-a819614cb4ab",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "@olafurpg is there a smarter way of doing this? If I omit it `autoImportPosition` fails because `pos.source` isn't loaded yet.",
        "createdAt" : "2019-12-10T12:36:55Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7ba43d32-1bd5-4628-86a7-7b06d9c54e67",
        "parentId" : "fe15adcb-7e19-4898-84ae-a819614cb4ab",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "There isn't. This is needed.",
        "createdAt" : "2019-12-10T14:19:56Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e5d45465-7f28-4a59-a493-cc174be9ddef",
        "parentId" : "fe15adcb-7e19-4898-84ae-a819614cb4ab",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Fair enough! ¯\\\\\\_(ツ)\\_/¯",
        "createdAt" : "2019-12-10T14:21:45Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1e046b2b878d476d389f19bdcaa73ae4b7c121c9",
    "line" : 24,
    "diffHunk" : "@@ -0,0 +1,75 @@\n+package scala.meta.internal.pc\n+\n+import scala.meta.pc.OffsetParams\n+import scala.meta.pc.AutoImportsResult\n+import scala.collection.mutable\n+import scala.collection.JavaConverters._\n+import org.eclipse.lsp4j.TextEdit\n+\n+final class AutoImportsProvider(\n+    val compiler: MetalsGlobal,\n+    name: String,\n+    params: OffsetParams\n+) {\n+  import compiler._\n+\n+  def autoImports(): List[AutoImportsResult] = {\n+    val unit = addCompilationUnit(\n+      code = params.text(),\n+      filename = params.filename(),\n+      cursor = Some(params.offset())\n+    )\n+    val pos = unit.position(params.offset)\n+    // make sure the compilation unit is loaded\n+    typedTreeAt(pos)"
  },
  {
    "id" : "95c3bffb-738c-40de-b5e6-c70ad1c5a42d",
    "prId" : 1065,
    "comments" : [
      {
        "id" : "a13e313a-4a92-4a7b-bc4e-04cb07827e14",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "this is needed since `search` above will return partially matching results, whereas we only want exact results for symbols.\r\n\r\n@olafurpg is there a different way we could do this? I tried, but I couldn't find a way to instruct `search` to only return exact matches",
        "createdAt" : "2019-12-10T15:44:58Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4a19ed45-7824-446b-bc88-1607bbe6072b",
        "parentId" : "a13e313a-4a92-4a7b-bc4e-04cb07827e14",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "It's possible to do exact searches and the index is optimized for this use-case, I can't remember the most relevant place to look into, maybe\r\n\r\nhttps://github.com/scalameta/metals/blob/24cfabf16cae3d6187a094e0711d71c125e9e79f/mtags/src/main/scala/scala/meta/internal/metals/WorkspaceSymbolQuery.scala#L35",
        "createdAt" : "2019-12-10T15:47:12Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2006df6d-16c3-4faf-b4ae-2e25340c7c03",
        "parentId" : "a13e313a-4a92-4a7b-bc4e-04cb07827e14",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I saw that, but it seems `exact` still produces a list of alternatives. Anyway, it's fast enough not to be a concern (it's upper bound by completions, by definition)",
        "createdAt" : "2019-12-10T15:48:48Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1e046b2b878d476d389f19bdcaa73ae4b7c121c9",
    "line" : 45,
    "diffHunk" : "@@ -0,0 +1,75 @@\n+package scala.meta.internal.pc\n+\n+import scala.meta.pc.OffsetParams\n+import scala.meta.pc.AutoImportsResult\n+import scala.collection.mutable\n+import scala.collection.JavaConverters._\n+import org.eclipse.lsp4j.TextEdit\n+\n+final class AutoImportsProvider(\n+    val compiler: MetalsGlobal,\n+    name: String,\n+    params: OffsetParams\n+) {\n+  import compiler._\n+\n+  def autoImports(): List[AutoImportsResult] = {\n+    val unit = addCompilationUnit(\n+      code = params.text(),\n+      filename = params.filename(),\n+      cursor = Some(params.offset())\n+    )\n+    val pos = unit.position(params.offset)\n+    // make sure the compilation unit is loaded\n+    typedTreeAt(pos)\n+    val importPosition = autoImportPosition(pos, params.text())\n+    val context = doLocateImportContext(pos, importPosition)\n+    val isSeen = mutable.Set.empty[String]\n+    val symbols = List.newBuilder[Symbol]\n+\n+    def visit(sym: Symbol): Boolean = {\n+      val id = sym.fullName\n+      if (!isSeen(id)) {\n+        isSeen += id\n+        symbols += sym\n+        true\n+      }\n+      false\n+    }\n+\n+    val visitor = new CompilerSearchVisitor(name, context, visit)\n+\n+    search.search(name, buildTargetIdentifier, visitor)\n+\n+    def isExactMatch(sym: Symbol, name: String): Boolean =\n+      sym.name.dropLocal.decoded == name"
  }
]