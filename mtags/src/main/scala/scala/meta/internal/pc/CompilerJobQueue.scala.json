[
  {
    "id" : "7d2442ce-84dd-41cc-ba9c-c29dc60d788d",
    "prId" : 736,
    "comments" : [
      {
        "id" : "834b61e6-f8bf-4cf9-8b2e-05951ecde670",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Can we somehow limit the capacity? Unbounded queues in multi-threaded environment make me uneasy",
        "createdAt" : "2019-05-29T14:51:25Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d6b5b560-671b-4485-b5e4-02f8c0756a3c",
        "parentId" : "834b61e6-f8bf-4cf9-8b2e-05951ecde670",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "We construct the queue in the same way as `Executors.newSingleThreadExecutor()`. All submitted jobs are automatically cancelled after a configurable timeout and cancelled runnables exit immediately (they don't even call the submitted function).",
        "createdAt" : "2019-05-31T09:20:12Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : 79,
    "diffHunk" : "@@ -0,0 +1,84 @@\n+package scala.meta.internal.pc\n+\n+import java.util.concurrent.ThreadPoolExecutor\n+import java.util.concurrent.PriorityBlockingQueue\n+import java.{util => ju}\n+import java.util.concurrent.TimeUnit\n+import java.util.concurrent.CompletableFuture\n+import java.util.concurrent.CancellationException\n+\n+/**\n+ * A thread pool executor to execute jobs on a single thread in a last-in-first-out order.\n+ *\n+ * The last-in-first-out order is important because it's common for Metals\n+ * users to send multiple completion/hover/signatureHelp requests in rapid\n+ * succession. In these situations, we care most about responding to the latest\n+ * request even if it comes at the expense of ignoring older requests.\n+ *\n+ * To restrict unsafe multi-threaded access to the presentation compiler we\n+ * schedule jobs to run on a single thread. We use this executor instead of the\n+ * presentation compiler thread (see MetalsGlobalThread) for the following reasons:\n+ * - we limit the usage of sleep/notify/wait/synchronized primitives.\n+ * - some blocking compiler APIs like `ask[T](op: () => T)` don't seem to work as advertised.\n+ * - it's preferable to work on top of CompletableFuture[T] instead of the custom Response[T] from the compiler,\n+ *   which is required to execute tasks on the presentation compiler thread:\n+ *   - CompletableFuture[T] can be passed via Java-only reflection APIs in mtags-interfaces.\n+ *   - CompletableFuture[T] can be returned to lsp4j, for non-blocking JSON-RPC request handling.\n+ *   - CompletableFuture[T] can be converted to Scala Futures for easier composition.\n+ */\n+class CompilerJobQueue(val executor: ThreadPoolExecutor) {\n+  override def toString(): String = s\"CompilerJobQueue($executor)\"\n+  def shutdown(): Unit = executor.shutdown()\n+  def submit(fn: () => Unit): Unit = {\n+    submit(new CompletableFuture[Unit](), fn)\n+  }\n+  def submit(result: CompletableFuture[_], fn: () => Unit): Unit = {\n+    executor.execute(new CompilerJobQueue.Job(result, fn))\n+  }\n+}\n+\n+object CompilerJobQueue {\n+\n+  def apply(): CompilerJobQueue = {\n+    val singleThreadExecutor = new ThreadPoolExecutor(\n+      1,\n+      1,\n+      0,\n+      TimeUnit.MILLISECONDS,\n+      new LastInFirstOutBlockingQueue\n+    )\n+    singleThreadExecutor.setRejectedExecutionHandler((r, _) => {\n+      r match {\n+        case j: Job =>\n+          j.reject()\n+        case _ =>\n+      }\n+    })\n+    new CompilerJobQueue(singleThreadExecutor)\n+  }\n+\n+  /** Runnable with a timestamp and attached completable future. */\n+  private class Job(result: CompletableFuture[_], _run: () => Unit)\n+      extends Runnable {\n+    def reject(): Unit = {\n+      result.completeExceptionally(new CancellationException(\"rejected\"))\n+    }\n+    val start = System.nanoTime()\n+    def run(): Unit = {\n+      if (!result.isDone()) {\n+        _run()\n+      }\n+    }\n+  }\n+\n+  /** Priority queue that runs the most recently submitted task first. */\n+  private class LastInFirstOutBlockingQueue"
  },
  {
    "id" : "9f6b5bb7-450c-42e4-b577-82aeb7bac6aa",
    "prId" : 736,
    "comments" : [
      {
        "id" : "c8943c21-3089-4704-b947-49fe8a3214ae",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Can we make it `PriorityBlockingQueue[Job]`?",
        "createdAt" : "2019-05-29T14:52:03Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cf992880-91c2-4110-abd3-1decb2e997db",
        "parentId" : "c8943c21-3089-4704-b947-49fe8a3214ae",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "We can but then we would have to move the cast to `asInstanceOf[BlockingQueue[Runnable]]` in the `ThreadPoolExecutor`. I added a comment why these casts are safe.",
        "createdAt" : "2019-05-31T09:37:27Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : 80,
    "diffHunk" : "@@ -0,0 +1,84 @@\n+package scala.meta.internal.pc\n+\n+import java.util.concurrent.ThreadPoolExecutor\n+import java.util.concurrent.PriorityBlockingQueue\n+import java.{util => ju}\n+import java.util.concurrent.TimeUnit\n+import java.util.concurrent.CompletableFuture\n+import java.util.concurrent.CancellationException\n+\n+/**\n+ * A thread pool executor to execute jobs on a single thread in a last-in-first-out order.\n+ *\n+ * The last-in-first-out order is important because it's common for Metals\n+ * users to send multiple completion/hover/signatureHelp requests in rapid\n+ * succession. In these situations, we care most about responding to the latest\n+ * request even if it comes at the expense of ignoring older requests.\n+ *\n+ * To restrict unsafe multi-threaded access to the presentation compiler we\n+ * schedule jobs to run on a single thread. We use this executor instead of the\n+ * presentation compiler thread (see MetalsGlobalThread) for the following reasons:\n+ * - we limit the usage of sleep/notify/wait/synchronized primitives.\n+ * - some blocking compiler APIs like `ask[T](op: () => T)` don't seem to work as advertised.\n+ * - it's preferable to work on top of CompletableFuture[T] instead of the custom Response[T] from the compiler,\n+ *   which is required to execute tasks on the presentation compiler thread:\n+ *   - CompletableFuture[T] can be passed via Java-only reflection APIs in mtags-interfaces.\n+ *   - CompletableFuture[T] can be returned to lsp4j, for non-blocking JSON-RPC request handling.\n+ *   - CompletableFuture[T] can be converted to Scala Futures for easier composition.\n+ */\n+class CompilerJobQueue(val executor: ThreadPoolExecutor) {\n+  override def toString(): String = s\"CompilerJobQueue($executor)\"\n+  def shutdown(): Unit = executor.shutdown()\n+  def submit(fn: () => Unit): Unit = {\n+    submit(new CompletableFuture[Unit](), fn)\n+  }\n+  def submit(result: CompletableFuture[_], fn: () => Unit): Unit = {\n+    executor.execute(new CompilerJobQueue.Job(result, fn))\n+  }\n+}\n+\n+object CompilerJobQueue {\n+\n+  def apply(): CompilerJobQueue = {\n+    val singleThreadExecutor = new ThreadPoolExecutor(\n+      1,\n+      1,\n+      0,\n+      TimeUnit.MILLISECONDS,\n+      new LastInFirstOutBlockingQueue\n+    )\n+    singleThreadExecutor.setRejectedExecutionHandler((r, _) => {\n+      r match {\n+        case j: Job =>\n+          j.reject()\n+        case _ =>\n+      }\n+    })\n+    new CompilerJobQueue(singleThreadExecutor)\n+  }\n+\n+  /** Runnable with a timestamp and attached completable future. */\n+  private class Job(result: CompletableFuture[_], _run: () => Unit)\n+      extends Runnable {\n+    def reject(): Unit = {\n+      result.completeExceptionally(new CancellationException(\"rejected\"))\n+    }\n+    val start = System.nanoTime()\n+    def run(): Unit = {\n+      if (!result.isDone()) {\n+        _run()\n+      }\n+    }\n+  }\n+\n+  /** Priority queue that runs the most recently submitted task first. */\n+  private class LastInFirstOutBlockingQueue\n+      extends PriorityBlockingQueue[Runnable](10, new ju.Comparator[Runnable] {"
  },
  {
    "id" : "fef7c788-8798-4d81-b485-8ea0911b0b61",
    "prId" : 736,
    "comments" : [
      {
        "id" : "a7e81466-cca0-4c57-985d-2db123ce66f8",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "can it just be `=> Unit` ? Would avoid having to write additional () => when submitting any job.",
        "createdAt" : "2019-05-30T14:56:02Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "41578469-7532-4fa0-b785-f867d5dc9b60",
        "parentId" : "a7e81466-cca0-4c57-985d-2db123ce66f8",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "It can be but I don't think it would make the code more readable. As a general rule of thumb I avoid by-name parameters until it's become painful to write the leading `() =>`. In this case, we only call `submit` once.  ",
        "createdAt" : "2019-05-31T09:18:36Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "75008f8d-3520-4317-933c-a122d54be488",
        "parentId" : "a7e81466-cca0-4c57-985d-2db123ce66f8",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "It's also a couple times in tests, but it's ok with me.",
        "createdAt" : "2019-05-31T10:06:41Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5aac4e50-a9a0-4478-a99c-d28f96fec0c7",
        "parentId" : "a7e81466-cca0-4c57-985d-2db123ce66f8",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I personally think it's more readable with the leading `() =>` at call-sites. It's only for APIs that are used a lot like `Option[T].getOrElse(=>T)` where I think by-name is justified.",
        "createdAt" : "2019-05-31T10:09:29Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : 32,
    "diffHunk" : "@@ -0,0 +1,84 @@\n+package scala.meta.internal.pc\n+\n+import java.util.concurrent.ThreadPoolExecutor\n+import java.util.concurrent.PriorityBlockingQueue\n+import java.{util => ju}\n+import java.util.concurrent.TimeUnit\n+import java.util.concurrent.CompletableFuture\n+import java.util.concurrent.CancellationException\n+\n+/**\n+ * A thread pool executor to execute jobs on a single thread in a last-in-first-out order.\n+ *\n+ * The last-in-first-out order is important because it's common for Metals\n+ * users to send multiple completion/hover/signatureHelp requests in rapid\n+ * succession. In these situations, we care most about responding to the latest\n+ * request even if it comes at the expense of ignoring older requests.\n+ *\n+ * To restrict unsafe multi-threaded access to the presentation compiler we\n+ * schedule jobs to run on a single thread. We use this executor instead of the\n+ * presentation compiler thread (see MetalsGlobalThread) for the following reasons:\n+ * - we limit the usage of sleep/notify/wait/synchronized primitives.\n+ * - some blocking compiler APIs like `ask[T](op: () => T)` don't seem to work as advertised.\n+ * - it's preferable to work on top of CompletableFuture[T] instead of the custom Response[T] from the compiler,\n+ *   which is required to execute tasks on the presentation compiler thread:\n+ *   - CompletableFuture[T] can be passed via Java-only reflection APIs in mtags-interfaces.\n+ *   - CompletableFuture[T] can be returned to lsp4j, for non-blocking JSON-RPC request handling.\n+ *   - CompletableFuture[T] can be converted to Scala Futures for easier composition.\n+ */\n+class CompilerJobQueue(val executor: ThreadPoolExecutor) {\n+  override def toString(): String = s\"CompilerJobQueue($executor)\"\n+  def shutdown(): Unit = executor.shutdown()\n+  def submit(fn: () => Unit): Unit = {"
  },
  {
    "id" : "cc35c0ab-b395-4a37-962b-c110585d3910",
    "prId" : 1070,
    "comments" : [
      {
        "id" : "9c1dbc0a-6e41-40e8-b6d0-0a9f7fe396ad",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Could we use named params here? Or at least add /* name= */? The numbers are bit unclear what they mean.",
        "createdAt" : "2019-11-18T10:25:43Z",
        "updatedAt" : "2019-11-20T13:47:26Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "90f107a9-8c92-4abd-abd8-9746d4503fd4",
        "parentId" : "9c1dbc0a-6e41-40e8-b6d0-0a9f7fe396ad",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Done.",
        "createdAt" : "2019-11-18T10:49:55Z",
        "updatedAt" : "2019-11-20T13:47:26Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8e9ddf5e5c6478ce25ea66ea4938fa0c64f27aba",
    "line" : null,
    "diffHunk" : "@@ -26,39 +27,66 @@ import java.util.concurrent.CancellationException\n  *   - CompletableFuture[T] can be returned to lsp4j, for non-blocking JSON-RPC request handling.\n  *   - CompletableFuture[T] can be converted to Scala Futures for easier composition.\n  */\n-class CompilerJobQueue(val executor: ThreadPoolExecutor) {\n-  override def toString(): String = s\"CompilerJobQueue($executor)\"\n-  def shutdown(): Unit = executor.shutdown()\n+class CompilerJobQueue(newExecutor: () => ThreadPoolExecutor) {\n+  private val myExecutor = new AtomicReference[ThreadPoolExecutor]()\n+  def executor(): ThreadPoolExecutor = {\n+    val result = myExecutor.get()\n+    if (result != null) {\n+      if (result.isShutdown()) {\n+        myExecutor.compareAndSet(result, null)\n+        executor()\n+      } else {\n+        result\n+      }\n+    } else {\n+      val next = newExecutor()\n+      val isSet = myExecutor.compareAndSet(null, next)\n+      if (!isSet) {\n+        next.shutdown()\n+      }\n+      myExecutor.get()\n+    }\n+  }\n+  override def toString(): String = s\"CompilerJobQueue(${myExecutor.get()})\"\n+  def shutdown(): Unit = {\n+    val ex = myExecutor.get()\n+    if (ex != null) {\n+      ex.shutdown()\n+      myExecutor.compareAndSet(ex, null)\n+    }\n+  }\n   def submit(fn: () => Unit): Unit = {\n     submit(new CompletableFuture[Unit](), fn)\n   }\n   def submit(result: CompletableFuture[_], fn: () => Unit): Unit = {\n-    executor.execute(new CompilerJobQueue.Job(result, fn))\n+    executor().execute(new CompilerJobQueue.Job(result, fn))\n   }\n   // The implementation of `Executors.newSingleThreadExecutor()` uses finalize.\n   override def finalize(): Unit = {\n-    executor.shutdown()\n+    shutdown()\n   }\n }\n \n object CompilerJobQueue {\n \n   def apply(): CompilerJobQueue = {\n-    val singleThreadExecutor = new ThreadPoolExecutor(\n-      1,\n-      1,\n-      0,\n-      TimeUnit.MILLISECONDS,\n-      new LastInFirstOutBlockingQueue\n-    )\n-    singleThreadExecutor.setRejectedExecutionHandler((r, _) => {\n-      r match {\n-        case j: Job =>\n-          j.reject()\n-        case _ =>\n-      }\n+    new CompilerJobQueue(() => {\n+      val singleThreadExecutor = new ThreadPoolExecutor(\n+        1,"
  }
]