[
  {
    "id" : "79793e3b-6d03-46ab-8b71-6219efc69326",
    "prId" : 736,
    "comments" : [
      {
        "id" : "544b257a-1244-4d1a-8a5f-31f910dc167c",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "please, move fields to the top - especially if they are used in methods above the declaration ;)",
        "createdAt" : "2019-05-29T14:33:44Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4c18bdb7-8722-4dad-82ef-64ad8fe05a05",
        "parentId" : "544b257a-1244-4d1a-8a5f-31f910dc167c",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-05-31T09:15:41Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : null,
    "diffHunk" : "@@ -149,15 +170,45 @@ class CompilerAccess(\n   private def handleError(e: Throwable): Unit = {\n     CompilerThrowable.trimStackTrace(e)\n     logger.log(Level.SEVERE, e.getMessage, e)\n-    shutdown()\n+    restart()\n   }\n   private var _compiler: MetalsGlobal = _"
  },
  {
    "id" : "c8ebe622-7a1d-4d19-810d-865dfe3d275d",
    "prId" : 736,
    "comments" : [
      {
        "id" : "9fce6160-c963-4241-9de5-c6eef1e7ae12",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "seems counterintuitive - say, you want to shutdown a service and it says \"ok, first I will restart\"",
        "createdAt" : "2019-05-29T14:36:02Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2e011bbc-61fd-4010-9ce3-fee9cbbc6512",
        "parentId" : "9fce6160-c963-4241-9de5-c6eef1e7ae12",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "It's a good point, it was called `restart()` to align with `ScalaPresentationCompiler.restart()` but in reality the implementation only shuts down the current compiler without creating a new one. We create new compilers on-demand for the next request.",
        "createdAt" : "2019-05-31T09:13:48Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dc729b3d-8de5-4121-acb9-15aa9614ddd8",
        "parentId" : "9fce6160-c963-4241-9de5-c6eef1e7ae12",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Renamed `restart()` to `shutdownCurrentCompiler()`",
        "createdAt" : "2019-05-31T09:14:00Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : null,
    "diffHunk" : "@@ -1,90 +1,111 @@\n package scala.meta.internal.pc\n \n-import java.lang\n import java.util.concurrent.ScheduledExecutorService\n import java.util.concurrent.TimeUnit\n import java.util.concurrent.atomic.AtomicBoolean\n-import java.util.function.BiConsumer\n import java.util.logging.Level\n import java.util.logging.Logger\n import scala.tools.nsc.reporters.StoreReporter\n import scala.util.control.NonFatal\n-import scala.concurrent.ExecutionContext\n import scala.meta.pc.CancelToken\n+import java.util.concurrent.CompletableFuture\n+import scala.meta.pc.PresentationCompilerConfig\n+import scala.concurrent.ExecutionContextExecutor\n \n /**\n- * Manages the lifecycle of the compiler.\n+ * Manages the lifecycle and multi-threaded access to the presentation compiler.\n  *\n- * - automatically restarts the compiler on expected crashes caused by macroparadise.\n- * - handles cancellation via `Thread.interrupt()` to stop the compiler during typechecking.\n+ * - automatically restarts the compiler on miscellaneous crashes.\n+ * - handles cancellation via `Thread.interrupt()` to stop the compiler during typechecking,\n+ *   for functions that support cancellation.\n  */\n class CompilerAccess(\n+    config: PresentationCompilerConfig,\n     sh: Option[ScheduledExecutorService],\n     newCompiler: () => MetalsGlobal\n-)(implicit ec: ExecutionContext) {\n+)(implicit ec: ExecutionContextExecutor) {\n   private val logger: Logger = Logger.getLogger(classOf[CompilerAccess].getName)\n+\n+  private val jobs = CompilerJobQueue()\n   private def isEmpty: Boolean = _compiler == null\n   private def isDefined: Boolean = !isEmpty\n   def reporter: StoreReporter =\n     if (isEmpty) new StoreReporter()\n     else _compiler.reporter.asInstanceOf[StoreReporter]\n-  def shutdown(): Unit = lock.synchronized {\n+\n+  def shutdown(): Unit = {\n+    restart()"
  },
  {
    "id" : "768fbfbb-6185-4282-b034-fb6b7685013e",
    "prId" : 736,
    "comments" : [
      {
        "id" : "c7574d5c-8be9-4cd4-8850-74f6707570a8",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "shouldn't those be cleared when handling the interruption?",
        "createdAt" : "2019-05-29T15:04:40Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8fee6bce-aec1-418f-a16f-da7232efa840",
        "parentId" : "c7574d5c-8be9-4cd4-8850-74f6707570a8",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "They should be, but we have no guarantee that's true. This is only a sanity check to preserve the invariant that each new task doesn't start with the interrupt flag set to true.",
        "createdAt" : "2019-05-31T09:15:36Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : null,
    "diffHunk" : "@@ -1,90 +1,111 @@\n package scala.meta.internal.pc\n \n-import java.lang\n import java.util.concurrent.ScheduledExecutorService\n import java.util.concurrent.TimeUnit\n import java.util.concurrent.atomic.AtomicBoolean\n-import java.util.function.BiConsumer\n import java.util.logging.Level\n import java.util.logging.Logger\n import scala.tools.nsc.reporters.StoreReporter\n import scala.util.control.NonFatal\n-import scala.concurrent.ExecutionContext\n import scala.meta.pc.CancelToken\n+import java.util.concurrent.CompletableFuture\n+import scala.meta.pc.PresentationCompilerConfig\n+import scala.concurrent.ExecutionContextExecutor\n \n /**\n- * Manages the lifecycle of the compiler.\n+ * Manages the lifecycle and multi-threaded access to the presentation compiler.\n  *\n- * - automatically restarts the compiler on expected crashes caused by macroparadise.\n- * - handles cancellation via `Thread.interrupt()` to stop the compiler during typechecking.\n+ * - automatically restarts the compiler on miscellaneous crashes.\n+ * - handles cancellation via `Thread.interrupt()` to stop the compiler during typechecking,\n+ *   for functions that support cancellation.\n  */\n class CompilerAccess(\n+    config: PresentationCompilerConfig,\n     sh: Option[ScheduledExecutorService],\n     newCompiler: () => MetalsGlobal\n-)(implicit ec: ExecutionContext) {\n+)(implicit ec: ExecutionContextExecutor) {\n   private val logger: Logger = Logger.getLogger(classOf[CompilerAccess].getName)\n+\n+  private val jobs = CompilerJobQueue()\n   private def isEmpty: Boolean = _compiler == null\n   private def isDefined: Boolean = !isEmpty\n   def reporter: StoreReporter =\n     if (isEmpty) new StoreReporter()\n     else _compiler.reporter.asInstanceOf[StoreReporter]\n-  def shutdown(): Unit = lock.synchronized {\n+\n+  def shutdown(): Unit = {\n+    restart()\n+    jobs.shutdown()\n+  }\n+\n+  def restart(): Unit = {\n     val compiler = _compiler\n     if (compiler != null) {\n       compiler.askShutdown()\n       _compiler = null\n       sh.foreach { scheduler =>\n-        scheduler.schedule(new Runnable {\n-          override def run(): Unit = {\n-            if (compiler.presentationCompilerThread.isAlive) {\n-              compiler.presentationCompilerThread.stop()\n-            }\n+        scheduler.schedule[Unit](() => {\n+          if (compiler.presentationCompilerThread.isAlive) {\n+            compiler.presentationCompilerThread.stop()\n           }\n         }, 2, TimeUnit.SECONDS)\n       }\n     }\n   }\n \n   /**\n-   * Run the given thunk with unique access to the compiler instance.\n-   *\n-   * Will not run other requests in parallel.\n+   * Asynchronously execute a function on the compiler thread with `Thread.interrupt()` cancellation.\n    */\n-  def withCancelableCompiler[T](\n+  def withInterruptableCompiler[T](\n       default: T,\n       token: CancelToken\n-  )(thunk: MetalsGlobal => T): T = lock.synchronized {\n-    val thread = Thread.currentThread()\n-    Thread.interrupted() // clear interrupt flag\n+  )(thunk: MetalsGlobal => T): CompletableFuture[T] = {\n     val isFinished = new AtomicBoolean(false)\n-    token\n-      .onCancel()\n-      .whenComplete(new BiConsumer[java.lang.Boolean, Throwable] {\n-        override def accept(isCancelled: lang.Boolean, u: Throwable): Unit = {\n-          if (isCancelled && isFinished\n-              .compareAndSet(false, true) && isDefined) {\n+    var queueThread = Option.empty[Thread]\n+    val result = onCompilerJobQueue(\n+      () => {\n+        queueThread = Some(Thread.currentThread())\n+        Thread.interrupted() // clear interrupt thread"
  },
  {
    "id" : "3c4c035d-024c-433d-a351-41ae855ddc61",
    "prId" : 736,
    "comments" : [
      {
        "id" : "fe4743d0-1707-4a13-998a-698da1b89220",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "I feel that this should be somehow abstracted away - but I have no idea how :)",
        "createdAt" : "2019-05-29T15:10:09Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "212cad9f-ab92-4fc5-a655-e5b2f0dc0926",
        "parentId" : "fe4743d0-1707-4a13-998a-698da1b89220",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I removed the `Thread.interrupted()` from `withInterruptableCompiler` since it was redundant. Otherwise, I don't think there's a need to abstract over anything here.",
        "createdAt" : "2019-05-31T09:17:15Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : 181,
    "diffHunk" : "@@ -149,15 +170,45 @@ class CompilerAccess(\n   private def handleError(e: Throwable): Unit = {\n     CompilerThrowable.trimStackTrace(e)\n     logger.log(Level.SEVERE, e.getMessage, e)\n-    shutdown()\n+    restart()\n   }\n   private var _compiler: MetalsGlobal = _\n-  private val lock = new Object\n   private def loadCompiler(): MetalsGlobal = {\n     if (_compiler == null) {\n       _compiler = newCompiler()\n     }\n     _compiler.reporter.reset()\n     _compiler\n   }\n+\n+  private def onCompilerJobQueue[T](\n+      thunk: () => T,\n+      token: CancelToken\n+  ): CompletableFuture[T] = {\n+    val result = new CompletableFuture[T]()\n+    jobs.submit(result, { () =>"
  }
]