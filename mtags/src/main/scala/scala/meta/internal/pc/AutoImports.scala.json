[
  {
    "id" : "f14c41bf-5832-4a47-9643-a1ffe5b9bafd",
    "prId" : 785,
    "comments" : [
      {
        "id" : "31ef4fdb-b312-4eef-8b06-0abdcb8474a6",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This changes the behavior in the following case\r\n```\r\npackage a\r\n\r\nimport b.c\r\n\r\nclass A { import Foo@@ }\r\n\r\nimport d.e\r\n```\r\n\r\nWe want to use `takeWhile` so that we stop at `import b.c` instead of `import d.e`",
        "createdAt" : "2019-06-19T15:38:59Z",
        "updatedAt" : "2019-06-19T16:36:15Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2f34193bc5169ba144c9e2667edc058478cb8669",
    "line" : null,
    "diffHunk" : "@@ -48,13 +59,14 @@ trait AutoImports { this: MetalsGlobal =>\n           case Some(pkg)\n               if pkg.symbol != rootMirror.EmptyPackage ||\n                 pkg.stats.headOption.exists(_.isInstanceOf[Import]) =>\n-            val lastImport = pkg.stats\n-              .takeWhile(_.isInstanceOf[Import])\n+            val lastImportLine = pkg.stats\n+              .collect { case imp: Import => imp }"
  },
  {
    "id" : "d012d44c-b4b7-4422-978d-92a9411528a3",
    "prId" : 1051,
    "comments" : [
      {
        "id" : "abe19085-4ea8-4920-ad91-557dce3055d9",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "is the explicit type annotation here necessary?",
        "createdAt" : "2019-11-08T15:25:18Z",
        "updatedAt" : "2019-11-10T09:37:09Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "74e26d97-cdcf-436a-94cc-43090626f69f",
        "parentId" : "abe19085-4ea8-4920-ad91-557dce3055d9",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Without it I get a type mismatch where it wants a RefTree on the right where it's just a Tree.",
        "createdAt" : "2019-11-08T15:51:52Z",
        "updatedAt" : "2019-11-10T09:37:09Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8834173f-7ac8-46ab-9ed6-6834a07a3578",
        "parentId" : "abe19085-4ea8-4920-ad91-557dce3055d9",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "ah, I would've assumed it were unnecessary since the entire expression is annotated anyway. Too bad",
        "createdAt" : "2019-11-08T15:52:41Z",
        "updatedAt" : "2019-11-10T09:37:09Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "70e35a9fa37f30e61227235a9be45125e2294352",
    "line" : null,
    "diffHunk" : "@@ -48,18 +54,20 @@ trait AutoImports { this: MetalsGlobal =>\n           case Some(pkg)\n               if pkg.symbol != rootMirror.EmptyPackage ||\n                 pkg.stats.headOption.exists(_.isInstanceOf[Import]) =>\n-            val lastImport = pkg.stats\n+            val lastImport: (Tree, Boolean) = pkg.stats\n               .takeWhile(_.isInstanceOf[Import])\n-              .lastOption\n-              .getOrElse(pkg.pid)\n+              .lastOption // if there are no imports, return true to pad top of import\n+              .fold[(Tree, Boolean)]((pkg.pid, true))((tree => (tree, false)))"
  },
  {
    "id" : "5267c1b5-b742-4e4b-bbad-ed292751494b",
    "prId" : 1051,
    "comments" : [
      {
        "id" : "12e0bc74-8064-4a1c-a6e0-fe5c6c1c4fc5",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I would use a pattern here so to avoid the tuple accessors below, which are hard to read\r\n\r\n```suggestion\r\n            val (lastImportOrPkg, padTop): (Tree, Boolean) = pkg.stats\r\n```",
        "createdAt" : "2019-11-08T15:26:17Z",
        "updatedAt" : "2019-11-10T09:37:09Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4b991cc1-746d-4abe-b1be-a65e5553bc66",
        "parentId" : "12e0bc74-8064-4a1c-a6e0-fe5c6c1c4fc5",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Ahh that's much nicer. Thanks!",
        "createdAt" : "2019-11-08T15:51:13Z",
        "updatedAt" : "2019-11-10T09:37:09Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "70e35a9fa37f30e61227235a9be45125e2294352",
    "line" : null,
    "diffHunk" : "@@ -48,18 +54,20 @@ trait AutoImports { this: MetalsGlobal =>\n           case Some(pkg)\n               if pkg.symbol != rootMirror.EmptyPackage ||\n                 pkg.stats.headOption.exists(_.isInstanceOf[Import]) =>\n-            val lastImport = pkg.stats\n+            val lastImport: (Tree, Boolean) = pkg.stats"
  },
  {
    "id" : "181c4d8e-294b-4a0a-8960-50f29cd6ca02",
    "prId" : 1051,
    "comments" : [
      {
        "id" : "9abae714-0dbc-46aa-8cc3-eb866fe671c8",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Maybe just use separate values for each?\r\n```scala\r\nval lastImport = pkg.stats\r\n              .takeWhile(_.isInstanceOf[Import])\r\n              .lastOption\r\nval noImport = lastImport.isEmpty\r\nval lastImportOrPkg = lastImport.getOrElse(pkg.pid)\r\n\r\n```",
        "createdAt" : "2019-11-08T15:28:13Z",
        "updatedAt" : "2019-11-10T09:37:09Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3b526c48-b6cf-4832-aa31-53d9a784963d",
        "parentId" : "9abae714-0dbc-46aa-8cc3-eb866fe671c8",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "I suppose that is much easier to read 👍 ",
        "createdAt" : "2019-11-08T15:55:09Z",
        "updatedAt" : "2019-11-10T09:37:09Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "70e35a9fa37f30e61227235a9be45125e2294352",
    "line" : null,
    "diffHunk" : "@@ -48,18 +54,20 @@ trait AutoImports { this: MetalsGlobal =>\n           case Some(pkg)\n               if pkg.symbol != rootMirror.EmptyPackage ||\n                 pkg.stats.headOption.exists(_.isInstanceOf[Import]) =>\n-            val lastImport = pkg.stats\n+            val lastImport: (Tree, Boolean) = pkg.stats\n               .takeWhile(_.isInstanceOf[Import])\n-              .lastOption\n-              .getOrElse(pkg.pid)\n+              .lastOption // if there are no imports, return true to pad top of import\n+              .fold[(Tree, Boolean)]((pkg.pid, true))((tree => (tree, false)))"
  }
]