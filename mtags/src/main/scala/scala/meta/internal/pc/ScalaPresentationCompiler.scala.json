[
  {
    "id" : "116ac379-899e-496d-960c-459f1bbef58c",
    "prId" : 763,
    "comments" : [
      {
        "id" : "de7e81f5-55c3-4fd9-8c94-fd19c4b4d14b",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Let's use `collection.Seq` everywhere in our APIs instead of converting to `immutable.Seq`. ",
        "createdAt" : "2019-06-16T08:57:57Z",
        "updatedAt" : "2019-06-18T18:13:44Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8b8f8c663ffe7481455869fe747514f96e7e658b",
    "line" : null,
    "diffHunk" : "@@ -69,7 +69,7 @@ case class ScalaPresentationCompiler(\n   ): PresentationCompiler = {\n     copy(\n       buildTargetIdentifier = buildTargetIdentifier,\n-      classpath = classpath.asScala,\n+      classpath = classpath.asScala.toSeq,"
  },
  {
    "id" : "8dffc1ad-e4f5-4539-8a5b-8f0e4d9b231d",
    "prId" : 959,
    "comments" : [
      {
        "id" : "b2c9e457-c2b6-4b4d-88a1-df6a23680573",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "getLocation -> typeDefinition",
        "createdAt" : "2019-10-04T14:13:46Z",
        "updatedAt" : "2019-10-04T14:19:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7b0f1eec3bb71a43264c9f32fa70860622c41aaa",
    "line" : 12,
    "diffHunk" : "@@ -110,6 +111,19 @@ case class ScalaPresentationCompiler(\n       new SignatureHelpProvider(global).signatureHelp(params)\n     }\n \n+  def getLocation("
  },
  {
    "id" : "bd8fc991-2628-48d0-b5ce-02fac143623c",
    "prId" : 978,
    "comments" : [
      {
        "id" : "c9666a4f-3004-4545-a796-d41aef42e76c",
        "parentId" : null,
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "most other providers constructors in this file take `params` right away in a constructor. So it appears to me it would be consistent to make the same for this one. On the other hand, (even though providers do not seem to be reused) approach with method parameter seems to make an instance of the class more reusable :thinking: ",
        "createdAt" : "2020-03-30T13:20:53Z",
        "updatedAt" : "2020-04-02T17:08:31Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9271850a-7b65-4190-aa12-0d7a847450a6",
        "parentId" : "c9666a4f-3004-4545-a796-d41aef42e76c",
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "okay, it's hard to tell, but this comment probably could probably support current design: https://github.com/scalameta/metals/pull/978#discussion_r347069434",
        "createdAt" : "2020-04-02T13:44:27Z",
        "updatedAt" : "2020-04-02T17:08:31Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : 19,
    "diffHunk" : "@@ -125,6 +126,17 @@ case class ScalaPresentationCompiler(\n       new SignatureHelpProvider(global).signatureHelp(params)\n     }\n \n+  override def typeDefinition(\n+      params: OffsetParams\n+  ): CompletableFuture[java.util.List[Location]] = {\n+    access.withNonInterruptableCompiler(\n+      List[Location]().asJava,\n+      params.token\n+    ) { global =>\n+      new TypeDefinitionProvider(global).typeDefinition(params).asJava"
  },
  {
    "id" : "37d33c9d-aacf-40b5-b12b-590684805a43",
    "prId" : 1324,
    "comments" : [
      {
        "id" : "6408eeac-5032-424b-9655-88b39d87efff",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "```suggestion\r\nif (unprocessed.nonEmpty) {\r\n  logger.warning(s\"Unknown compiler options: ${unprocessed.mkString(\", \")}\")\r\n}\r\n```",
        "createdAt" : "2020-01-17T18:03:45Z",
        "updatedAt" : "2020-01-17T18:09:39Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "88eddc4f-9daa-4d8f-b842-5b33c9efdc90",
        "parentId" : "6408eeac-5032-424b-9655-88b39d87efff",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "omg! Thanks, I haven't noticed it. :fearful: ",
        "createdAt" : "2020-01-17T18:10:20Z",
        "updatedAt" : "2020-01-17T18:10:20Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "90eb6a351a0f7b7d9d38c89a694d16fe257e78a1",
    "line" : null,
    "diffHunk" : "@@ -179,7 +179,7 @@ case class ScalaPresentationCompiler(\n     val (isSuccess, unprocessed) =\n       settings.processArguments(options, processAll = true)\n     require(isSuccess, unprocessed)\n-    require(unprocessed.isEmpty, unprocessed)\n+    logger.warning(s\"Unknown compiler options: ${unprocessed.mkString(\", \")}\")"
  }
]