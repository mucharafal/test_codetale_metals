[
  {
    "id" : "933a6c43-ac25-42e3-a9ad-ba4ee215eef0",
    "prId" : 712,
    "comments" : [
      {
        "id" : "4ca22dba-82de-4b07-bf2a-dd136f6aa934",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "@markus1189 FYI, I added `sealed class` since it's strictly speaking valid although less common",
        "createdAt" : "2019-05-24T13:11:57Z",
        "updatedAt" : "2019-05-24T13:34:43Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c468269d2e0e47b5eaffc75cab0b2c825678b7fe",
    "line" : 72,
    "diffHunk" : "@@ -0,0 +1,101 @@\n+package scala.meta.internal.pc\n+// scalafmt: { maxColumn = 120 }\n+\n+case class Keyword(\n+    name: String,\n+    // Can this keyword appear in expression position?\n+    isExpression: Boolean = false,\n+    // Can this keyword appear in a block statement position?\n+    isBlock: Boolean = false,\n+    // Can this keyword appear in a template statement position?\n+    isTemplate: Boolean = false,\n+    // Can this keyword appear in a package statement position?\n+    isPackage: Boolean = false,\n+    // Can this keyword appear in a def block statement position?\n+    isMethodBody: Boolean = false,\n+    // Does this keyword define a symbol? For example \"def\" or \"class\"\n+    isDefinition: Boolean = false,\n+    // Optional character to select this completion item, for example \".\"\n+    commitCharacter: Option[String] = None\n+) {\n+\n+  def insertText: String =\n+    if (needsTrailingWhitespace) name + \" \"\n+    else name\n+\n+  private def needsTrailingWhitespace: Boolean =\n+    name match {\n+      case \"this\" | \"super\" | \"true\" | \"false\" | \"null\" => false\n+      case _ => true\n+    }\n+\n+  def matchesPosition(\n+      name: String,\n+      isExpression: Boolean,\n+      isBlock: Boolean,\n+      isDefinition: Boolean,\n+      isMethodBody: Boolean,\n+      isTemplate: Boolean,\n+      isPackage: Boolean\n+  ): Boolean = {\n+    this.name.startsWith(name) && {\n+      (this.isExpression && isExpression) ||\n+      (this.isBlock && isBlock) ||\n+      (this.isDefinition && isDefinition) ||\n+      (this.isTemplate && isTemplate) ||\n+      (this.isPackage && isPackage) ||\n+      (this.isMethodBody && isMethodBody)\n+    }\n+  }\n+}\n+\n+object Keyword {\n+\n+  val all: List[Keyword] = List(\n+    Keyword(\"def\", isBlock = true, isTemplate = true, isDefinition = true),\n+    Keyword(\"val\", isBlock = true, isTemplate = true, isDefinition = true),\n+    Keyword(\"lazy val\", isBlock = true, isTemplate = true, isDefinition = true),\n+    Keyword(\"var\", isBlock = true, isTemplate = true, isDefinition = true),\n+    Keyword(\"type\", isTemplate = true, isDefinition = true),\n+    Keyword(\"class\", isTemplate = true, isPackage = true, isDefinition = true),\n+    Keyword(\"case class\", isTemplate = true, isPackage = true, isDefinition = true),\n+    Keyword(\"trait\", isTemplate = true, isPackage = true, isDefinition = true),\n+    Keyword(\"object\", isTemplate = true, isPackage = true, isDefinition = true),\n+    Keyword(\"package\", isPackage = true),\n+    Keyword(\"import\", isBlock = true, isTemplate = true, isPackage = true),\n+    Keyword(\"final\", isTemplate = true, isPackage = true),\n+    Keyword(\"private\", isTemplate = true, isPackage = true),\n+    Keyword(\"protected\", isTemplate = true, isPackage = true),\n+    Keyword(\"abstract class\", isTemplate = true, isPackage = true),\n+    Keyword(\"sealed trait\", isTemplate = true, isPackage = true),\n+    Keyword(\"sealed abstract class\", isTemplate = true, isPackage = true),\n+    Keyword(\"sealed class\", isTemplate = true, isPackage = true),"
  }
]