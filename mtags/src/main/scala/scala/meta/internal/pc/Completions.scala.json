[
  {
    "id" : "e58f9912-6d57-4850-af02-69a66f9eb380",
    "prId" : 636,
    "comments" : [
      {
        "id" : "e2b03999-e06c-4e50-a1af-0043f5385271",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "This might need maybe a lower score than IsNotLocalByBlock - maybe just a new lowest score?",
        "createdAt" : "2019-04-04T17:47:42Z",
        "updatedAt" : "2019-04-04T19:43:33Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0e2177c790f7ffe54a891581b0d67ac380aacc47",
    "line" : null,
    "diffHunk" : "@@ -138,6 +147,7 @@ trait Completions { this: MetalsGlobal =>\n     if (sym.isSynthetic) relevance |= IsSynthetic\n     if (sym.isDeprecated) relevance |= IsDeprecated\n     if (isEvilMethod(sym.name)) relevance |= IsEvilMethod\n+    if (isNamedArgument) relevance |= IsNotLocalByBlock"
  },
  {
    "id" : "d446c781-9f42-447d-9adb-342f54a8b22c",
    "prId" : 640,
    "comments" : [
      {
        "id" : "f4ef785f-1a35-410f-a0cc-20355f7f3d49",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "nit: instead of `map(..).getOrElse(..)` use `match { case Some(..) => ; case _ => }`",
        "createdAt" : "2019-04-06T09:04:12Z",
        "updatedAt" : "2019-04-10T09:07:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "670be1acc9d60de5dc8598e42c291a0202e4b388",
    "line" : null,
    "diffHunk" : "@@ -922,24 +933,26 @@ trait Completions { this: MetalsGlobal =>\n         t: Template,\n         pos: Position,\n         text: String,\n-        defn: ValOrDefDef\n+        defn: Option[ValOrDefDef]\n     ) extends CompletionPosition {\n       val prefix = name.toString.stripSuffix(CURSOR)\n       val typed = typedTreeAt(t.pos)\n       val isDecl = typed.tpe.decls.toSet\n-      val keyword = defn match {\n+      val OVERRIDE = \" override\"\n+      val keyword = defn.map {\n         case _: DefDef => \"def\"\n         case _ => \"val\"\n       }\n-      val OVERRIDE = \" override\"\n-      val start: Int = {\n-        val fromDef = text.lastIndexOf(s\" $keyword \", pos.point)\n-        if (fromDef > 0 && text.endsWithAt(OVERRIDE, fromDef)) {\n-          fromDef - OVERRIDE.length()\n-        } else {\n-          fromDef\n+      val start: Int = keyword\n+        .map { word =>"
  },
  {
    "id" : "4af28023-63ef-4467-9bd5-3ccdd347c2a6",
    "prId" : 640,
    "comments" : [
      {
        "id" : "5fd4dcdb-20ae-4492-bc3f-8fec29a91088",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "ditto: prefer match over `map(..).getOrElse(..)`",
        "createdAt" : "2019-04-06T09:11:20Z",
        "updatedAt" : "2019-04-10T09:07:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "670be1acc9d60de5dc8598e42c291a0202e4b388",
    "line" : null,
    "diffHunk" : "@@ -1050,14 +1067,25 @@ trait Completions { this: MetalsGlobal =>\n         val lzy =\n           if (sym.isLazy) \"lazy \"\n           else \"\"\n+\n+        val newKeyword = defn\n+          .map {"
  },
  {
    "id" : "8b5ebfb5-c3a5-4d31-bdc1-c8ea50b5ecf2",
    "prId" : 640,
    "comments" : [
      {
        "id" : "157c687c-58c0-400f-9ef3-e1f0386a3f31",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "The filter text controls how the editor filters out completion items client-side as the user types more characters. \r\n\r\n![2019-04-06 11 37 00](https://user-images.githubusercontent.com/1408093/55667710-56549800-5860-11e9-8294-d01b11fac713.gif)\r\n\r\n- on `override` completion, filter text should be `\"override def $name\"`\r\n- on `def` completion, filter text should be `\"def name\"`\r\n- on `val` completion, filter text should be `\"val name\"`\r\n",
        "createdAt" : "2019-04-06T09:38:14Z",
        "updatedAt" : "2019-04-10T09:07:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "670be1acc9d60de5dc8598e42c291a0202e4b388",
    "line" : null,
    "diffHunk" : "@@ -1050,14 +1067,25 @@ trait Completions { this: MetalsGlobal =>\n         val lzy =\n           if (sym.isLazy) \"lazy \"\n           else \"\"\n+\n+        val newKeyword = defn\n+          .map {\n+            case _: DefDef => \"def\"\n+            case _ => \"val\"\n+          }\n+          .getOrElse(\"def\")\n+\n         val edit = new l.TextEdit(\n           range,\n-          s\"${overrideKeyword}${lzy}${keyword} $label = $${0:???}\"\n+          s\"${overrideKeyword}${lzy}${newKeyword} $label = $${0:???}\"\n         )\n+\n+        // if we had no val or def then filter will be empty\n+        val fullFilter = (if (defn.isDefined) filter else prefix) + sym.name.decoded"
  },
  {
    "id" : "b1d25459-f310-4cbf-9231-a59c6b9d0184",
    "prId" : 640,
    "comments" : [
      {
        "id" : "fd1a66ac-f471-4986-8e8a-3df63ff11351",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I'm wondering now if this guard is necessary 🤔 it looks like IntelliJ allows you to type just the name of the method. It's also OK to include any prefix of `override` or `def`\r\n\r\n<img width=\"484\" alt=\"Screenshot 2019-04-06 at 11 39 23\" src=\"https://user-images.githubusercontent.com/1408093/55667743-c3682d80-5860-11e9-9875-52b639fdb188.png\">\r\n<img width=\"473\" alt=\"Screenshot 2019-04-06 at 11 39 29\" src=\"https://user-images.githubusercontent.com/1408093/55667744-c400c400-5860-11e9-83c5-3f46f226dd1b.png\">\r\n<img width=\"534\" alt=\"Screenshot 2019-04-06 at 11 40 01\" src=\"https://user-images.githubusercontent.com/1408093/55667745-c400c400-5860-11e9-8297-81903af723fb.png\">\r\n\r\n\r\nWhat do you think would be the most natural behavior?\r\n",
        "createdAt" : "2019-04-06T09:41:06Z",
        "updatedAt" : "2019-04-10T09:07:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "670be1acc9d60de5dc8598e42c291a0202e4b388",
    "line" : null,
    "diffHunk" : "@@ -493,11 +493,22 @@ trait Completions { this: MetalsGlobal =>\n         CompletionPosition.CaseKeyword(m.selector, editRange, pos, text, parent)\n       case (c: DefTree) :: (p: PackageDef) :: _ if c.namePos.includes(pos) =>\n         CompletionPosition.Filename(c, p, pos, editRange)\n-      case _ =>\n+      case (ident: Ident) :: (t: Template) :: _\n+          if isOverrideOrDefIdent(ident) =>"
  },
  {
    "id" : "921c70ee-0873-40c0-b538-765533f2c431",
    "prId" : 640,
    "comments" : [
      {
        "id" : "0290bdc4-8d9c-4e17-84b1-109ef0d6ec0f",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "We should also handle `val` the same way.",
        "createdAt" : "2019-04-06T09:41:18Z",
        "updatedAt" : "2019-04-10T09:07:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "670be1acc9d60de5dc8598e42c291a0202e4b388",
    "line" : null,
    "diffHunk" : "@@ -493,11 +493,22 @@ trait Completions { this: MetalsGlobal =>\n         CompletionPosition.CaseKeyword(m.selector, editRange, pos, text, parent)\n       case (c: DefTree) :: (p: PackageDef) :: _ if c.namePos.includes(pos) =>\n         CompletionPosition.Filename(c, p, pos, editRange)\n-      case _ =>\n+      case (ident: Ident) :: (t: Template) :: _\n+          if isOverrideOrDefIdent(ident) =>\n+        CompletionPosition.Override(ident.name, t, pos, text, None)\n+      case other =>\n         inferCompletionPosition(pos, lastEnclosing)\n     }\n   }\n \n+  def isOverrideOrDefIdent(ident: Ident): Boolean = {\n+    val name = ident.name\n+    val withoutCursor = name.toString.replace(CURSOR, \"\")\n+    name.endsWith(CURSOR) && Set(\"override\", \"def\").exists("
  },
  {
    "id" : "ae7c1b08-8d46-4e28-b7cb-a375c3249e68",
    "prId" : 640,
    "comments" : [
      {
        "id" : "8b18705d-b811-44e5-a393-327b7a9686bd",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "typo",
        "createdAt" : "2019-04-09T13:43:55Z",
        "updatedAt" : "2019-04-10T09:07:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "670be1acc9d60de5dc8598e42c291a0202e4b388",
    "line" : null,
    "diffHunk" : "@@ -1066,14 +1071,27 @@ trait Completions { this: MetalsGlobal =>\n             inferIndent(lineStart, text)\n           )\n         )\n+\n+        private def label = overrideDef + name + signature\n+\n+        private def signature = printer.defaultMethodSignature()\n+\n+        private def edit = new l.TextEdit(\n+          range,\n+          s\"$filterText$signature = $${0:???}\"\n+        )\n       }\n \n       override def contribute: List[Member] = {\n         if (start < 0) Nil\n         else {\n           typed.tpe.members.iterator\n             .filter(isOverridableMethod)\n-            .map(toOverrideMember)\n+            .map(OverrideCandidate.apply)\n+            .filter { canditate =>"
  },
  {
    "id" : "04816c7d-aaa0-40e2-8708-da3070bfd0ec",
    "prId" : 826,
    "comments" : [
      {
        "id" : "07c9cdac-87fd-488c-8e88-282f22efd817",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "can we use `literalPosition` or at least `literalPos` ? ",
        "createdAt" : "2019-07-12T10:47:40Z",
        "updatedAt" : "2019-07-15T10:21:38Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "98f09b95-e40d-43a7-aa7d-2fc8ea48dee3",
        "parentId" : "07c9cdac-87fd-488c-8e88-282f22efd817",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2019-07-12T13:12:55Z",
        "updatedAt" : "2019-07-15T10:21:38Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "68565c11075528a4b66c02254f31d54fa8f05327",
    "line" : null,
    "diffHunk" : "@@ -742,49 +742,45 @@ trait Completions { this: MetalsGlobal =>\n         interpolator: InterpolationSplice,\n         text: String\n     ) extends CompletionPosition {\n+\n       val offset = if (lit.pos.focusEnd.line == pos.line) CURSOR.length else 0\n-      val litpos = lit.pos.withEnd(lit.pos.end - offset)\n+      val litpos = pos.withStart(pos.start - interpolator.name.size)"
  },
  {
    "id" : "c81024b3-2cce-4a1e-b59d-2a21350cbc7b",
    "prId" : 827,
    "comments" : [
      {
        "id" : "589ba786-4130-43b7-8b81-9ccf129cad09",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "if this is a `val` then is there any gain from `allParams` being `lazy` ?",
        "createdAt" : "2019-07-12T10:44:45Z",
        "updatedAt" : "2019-08-28T16:34:18Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e0a3192c-eb89-46a9-86c3-caca6819d453",
        "parentId" : "589ba786-4130-43b7-8b81-9ccf129cad09",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed it",
        "createdAt" : "2019-07-12T12:36:38Z",
        "updatedAt" : "2019-08-28T16:34:18Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ab71afec148a55c6f3f1f6f237920e8bec11622e",
    "line" : null,
    "diffHunk" : "@@ -889,16 +889,14 @@ trait Completions { this: MetalsGlobal =>\n             param.name\n         }\n         .toSet\n-      lazy val params: List[Symbol] = {\n-        val prefix = ident.name.toString.stripSuffix(CURSOR)\n-        baseParams.iterator\n-          .filterNot { param =>\n-            isNamed(param.name) ||\n-            param.name.containsChar('$') // exclude synthetic parameters\n-          }\n-          .filter(param => param.name.startsWith(prefix))\n-          .toList\n+      val prefix = ident.name.toString.stripSuffix(CURSOR)\n+      lazy val allParams: List[Symbol] = {\n+        baseParams.iterator.filterNot { param =>\n+          isNamed(param.name) ||\n+          param.name.containsChar('$') // exclude synthetic parameters\n+        }.toList\n       }\n+      val params = allParams.filter(param => param.name.startsWith(prefix))"
  },
  {
    "id" : "a9ddeefc-885f-4ef0-b537-31615448ec07",
    "prId" : 932,
    "comments" : [
      {
        "id" : "3f0664c4-4597-4787-9cb2-e0d4dd71dc1b",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "```suggestion\r\n        val isExplicitlyCalled = suffix.startsWith(prefix)\r\n```",
        "createdAt" : "2019-09-17T09:30:48Z",
        "updatedAt" : "2019-09-17T20:21:07Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "baf3290f4f3a2467c6bc1a0874d86757aac2edec",
    "line" : null,
    "diffHunk" : "@@ -956,24 +956,29 @@ trait Completions { this: MetalsGlobal =>\n         if (matchingType.size == 1) {\n           s\":${matchingType.head}\"\n         } else if (matchingType.size > 1) {\n-          s\"|${matchingType.mkString(\",\")}|\"\n+          s\"|???,${matchingType.mkString(\",\")}|\"\n         } else {\n           \":???\"\n         }\n       }\n \n       private def fillAllFields(): List[TextEditMember] = {\n-        if (allParams.size > 1) {\n+        val suffix = \"autofill\"\n+        val shouldShow = allParams.exists(_.toString().startsWith(prefix))\n+        val isExpilicitelyCalled = suffix.startsWith(prefix)"
  },
  {
    "id" : "015f8df8-302f-4215-8a88-35f891d2d090",
    "prId" : 932,
    "comments" : [
      {
        "id" : "1bcdf081-6da2-4250-bcfd-322f27a0c789",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "```suggestion\r\n        if ((shouldShow || isExpilicitelyCalled) && allParams.count(!_.hasDefault) > 1) {\r\n```\r\nFor example, `pprint.log` has only one non-default parameter",
        "createdAt" : "2019-09-17T09:33:30Z",
        "updatedAt" : "2019-09-17T20:21:07Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "baf3290f4f3a2467c6bc1a0874d86757aac2edec",
    "line" : null,
    "diffHunk" : "@@ -956,24 +956,29 @@ trait Completions { this: MetalsGlobal =>\n         if (matchingType.size == 1) {\n           s\":${matchingType.head}\"\n         } else if (matchingType.size > 1) {\n-          s\"|${matchingType.mkString(\",\")}|\"\n+          s\"|???,${matchingType.mkString(\",\")}|\"\n         } else {\n           \":???\"\n         }\n       }\n \n       private def fillAllFields(): List[TextEditMember] = {\n-        if (allParams.size > 1) {\n+        val suffix = \"autofill\"\n+        val shouldShow = allParams.exists(_.toString().startsWith(prefix))\n+        val isExpilicitelyCalled = suffix.startsWith(prefix)\n+\n+        if ((shouldShow || isExpilicitelyCalled) && allParams.size > 1) {"
  },
  {
    "id" : "763fb895-a7d0-441c-bd62-0e9e806b13a3",
    "prId" : 932,
    "comments" : [
      {
        "id" : "d84d283c-9b46-49b5-97f5-bde8acbaf291",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "When is filter not `\"autofill\"`?",
        "createdAt" : "2019-09-17T09:36:57Z",
        "updatedAt" : "2019-09-17T20:21:07Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0e33b34a-160d-4eee-b4a4-fadc406d4aa6",
        "parentId" : "d84d283c-9b46-49b5-97f5-bde8acbaf291",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "It's always `autofill`, at least part of it. This is because I wanted it to be the last option and not show up before any legit completions. The suffix in that case is not that important, it just needs to be something so that it goes later in the list.",
        "createdAt" : "2019-09-17T09:49:30Z",
        "updatedAt" : "2019-09-17T20:21:07Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ddb0d1f5-4e33-4b02-9378-f061dff82839",
        "parentId" : "d84d283c-9b46-49b5-97f5-bde8acbaf291",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "The sort text determines the order while the filter text determines what completion match what the user types. I'm struggling to understand the logic behind `if (isExpilicitelyCalled) suffix else prefix + suffix`, what is the difference between that and `\"autofill\"`?",
        "createdAt" : "2019-09-17T10:17:55Z",
        "updatedAt" : "2019-09-17T20:21:07Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0189ffcb-a292-4641-a41a-b50ddf499471",
        "parentId" : "d84d283c-9b46-49b5-97f5-bde8acbaf291",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Ach right,  I was wrong, this was done to show autofill when parameters are completed.\r\nNothing actually to do with sorting, sorry!",
        "createdAt" : "2019-09-17T11:59:59Z",
        "updatedAt" : "2019-09-17T20:21:07Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "59d4ec66-750f-4983-b0b7-fb809dc6ee10",
        "parentId" : "d84d283c-9b46-49b5-97f5-bde8acbaf291",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I would personally be in favor of not presenting autofill completions unless the user has typed a prefix of `\"autofill\"` or the empty string.",
        "createdAt" : "2019-09-17T15:13:45Z",
        "updatedAt" : "2019-09-17T20:21:07Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4c435346-7547-4806-9de2-831afbde1436",
        "parentId" : "d84d283c-9b46-49b5-97f5-bde8acbaf291",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Will leave it also when writing parameter names for now. I think it can be much more useful this way, otherwise nobody will find it. If that proves to be problematic, I will remove it myself.",
        "createdAt" : "2019-09-17T20:18:32Z",
        "updatedAt" : "2019-09-17T20:21:07Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "baf3290f4f3a2467c6bc1a0874d86757aac2edec",
    "line" : null,
    "diffHunk" : "@@ -956,24 +956,29 @@ trait Completions { this: MetalsGlobal =>\n         if (matchingType.size == 1) {\n           s\":${matchingType.head}\"\n         } else if (matchingType.size > 1) {\n-          s\"|${matchingType.mkString(\",\")}|\"\n+          s\"|???,${matchingType.mkString(\",\")}|\"\n         } else {\n           \":???\"\n         }\n       }\n \n       private def fillAllFields(): List[TextEditMember] = {\n-        if (allParams.size > 1) {\n+        val suffix = \"autofill\"\n+        val shouldShow = allParams.exists(_.toString().startsWith(prefix))\n+        val isExpilicitelyCalled = suffix.startsWith(prefix)\n+\n+        if ((shouldShow || isExpilicitelyCalled) && allParams.size > 1) {\n           val editText = allParams.zipWithIndex\n-            .map {\n-              case (param, index) =>\n+            .collect {\n+              case (param, index) if !param.hasDefault =>\n                 s\"${param.name} = $${${index + 1}${findDefaultValue(param)}}\"\n             }\n             .mkString(\", \")\n           val edit = new l.TextEdit(editRange, editText)\n+          val filter = if (isExpilicitelyCalled) suffix else prefix + suffix"
  },
  {
    "id" : "1d6e9231-cab8-4399-a662-a46ef1469d5e",
    "prId" : 1031,
    "comments" : [
      {
        "id" : "17659e98-fe3a-4378-8086-009a11cf5b14",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "nit: we can extract this list and reuse between \"override member\" and \"implement all\" completions",
        "createdAt" : "2019-10-31T15:29:07Z",
        "updatedAt" : "2019-11-10T21:00:37Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "83f44ac0-6ddf-4eb9-af8c-6462518100d6",
        "parentId" : "17659e98-fe3a-4378-8086-009a11cf5b14",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "So i'm not 100% sure what's happening here. I originally tried to reuse this iterator, but couldn't get it to work. For example, when I change this block to the below\r\n\r\n```scala\r\n          val members = typed.tpe.members.iterator\r\n\r\n          val overrideMembers: List[OverrideDefMember] =\r\n            members\r\n              .filter(isOverridableMethod)\r\n              .map(OverrideCandidate.apply)\r\n              .filter { candidate =>\r\n                CompletionFuzzy.matchesSubCharacters(\r\n                  prefix,\r\n                  candidate.filterText\r\n                )\r\n              }\r\n              .map(_.toMember)\r\n              .toList\r\n\r\n          val allAbstractMembers = members\r\n            .filter(isOverridableMethod)\r\n            .map(OverrideCandidate.apply)\r\n            .map(_.toMember)\r\n            .filter(_.sym.isAbstract)\r\n            .toList\r\n            .map(_.edit.getNewText)\r\n```\r\nthe individual overrides still appear in the completions, but the `allAbstractMembers` won't appear at all in the completion list. I'm not fully sure I understand why. Any insight on the best way to reuse this?",
        "createdAt" : "2019-11-02T11:56:24Z",
        "updatedAt" : "2019-11-10T21:00:37Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "068cb98e-8865-4323-97e6-9f737c28def1",
        "parentId" : "17659e98-fe3a-4378-8086-009a11cf5b14",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Iterators can only be consumed once. You can work around it with\r\n\r\n```diff\r\n-          val members = typed.tpe.members.iterator\r\n+          val members = typed.tpe.members.iterator.toList\r\n```",
        "createdAt" : "2019-11-02T13:42:14Z",
        "updatedAt" : "2019-11-10T21:00:37Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d28d25d2-76d9-4978-b040-4690951066d3",
        "parentId" : "17659e98-fe3a-4378-8086-009a11cf5b14",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Ahh cool. I didn't know that. Thanks!",
        "createdAt" : "2019-11-02T16:11:56Z",
        "updatedAt" : "2019-11-10T21:00:37Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d86f1fab85d5e22c96d5b7f681c79dc78116aaac",
    "line" : null,
    "diffHunk" : "@@ -1183,14 +1191,42 @@ trait Completions { this: MetalsGlobal =>\n       override def contribute: List[Member] = {\n         if (start < 0) Nil\n         else {\n-          typed.tpe.members.iterator\n+\n+          val overrideMembers: List[OverrideDefMember] =\n+            typed.tpe.members.iterator"
  },
  {
    "id" : "b39db755-d330-4c24-b784-eb33ecb8f0df",
    "prId" : 1031,
    "comments" : [
      {
        "id" : "57e1a5e9-9dca-4b1c-aa3c-c09f4267f314",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "nit: try to use braces consistently for all branches of if/else\r\n```suggestion\r\n          } else {\r\n            overrideMembers\r\n          }\r\n```",
        "createdAt" : "2019-10-31T15:31:11Z",
        "updatedAt" : "2019-11-10T21:00:37Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d86f1fab85d5e22c96d5b7f681c79dc78116aaac",
    "line" : null,
    "diffHunk" : "@@ -1183,14 +1191,42 @@ trait Completions { this: MetalsGlobal =>\n       override def contribute: List[Member] = {\n         if (start < 0) Nil\n         else {\n-          typed.tpe.members.iterator\n+\n+          val overrideMembers: List[OverrideDefMember] =\n+            typed.tpe.members.iterator\n+              .filter(isOverridableMethod)\n+              .map(OverrideCandidate.apply)\n+              .filter { candidate =>\n+                CompletionFuzzy.matchesSubCharacters(\n+                  prefix,\n+                  candidate.filterText\n+                )\n+              }\n+              .map(_.toMember)\n+              .toList\n+\n+          val allAbstractMembers = typed.tpe.members.iterator\n             .filter(isOverridableMethod)\n             .map(OverrideCandidate.apply)\n-            .filter { candidate =>\n-              CompletionFuzzy.matchesSubCharacters(prefix, candidate.filterText)\n-            }\n             .map(_.toMember)\n+            .filter(_.sym.isAbstract)\n             .toList\n+            .map(_.edit.getNewText)\n+\n+          if (allAbstractMembers.length > 1 && overrideMembers.length > 1) {\n+            val implementAll: TextEditMember = new TextEditMember(\n+              prefix,\n+              new l.TextEdit(\n+                range,\n+                allAbstractMembers.reverse.mkString(\"\\n\")\n+              ),\n+              completionsSymbol(\"implement\"),\n+              label = Some(\"Implement all members\"),\n+              detail = Some(s\"(${allAbstractMembers.length} members)\")\n+            )\n+\n+            implementAll :: overrideMembers\n+          } else overrideMembers"
  },
  {
    "id" : "043f9a34-c0ca-41c2-ae28-6a3d627a8060",
    "prId" : 1031,
    "comments" : [
      {
        "id" : "c61af8aa-bd95-4d84-9404-513fab5e9ad7",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I wonder if we could somehow reuse the rendering of the signatures? Alternatively, could we introduce some cache to avoid computing the type signatures + imports twice?",
        "createdAt" : "2019-10-31T16:35:18Z",
        "updatedAt" : "2019-11-10T21:00:37Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1fb2b0a0-9afa-4156-85e5-fe6cf23156b3",
        "parentId" : "c61af8aa-bd95-4d84-9404-513fab5e9ad7",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "This was the one point I didn't feel like addressed. I saw there were a couple of other places in the completions were cache was implemented but was sort of lost on how to implement it here.",
        "createdAt" : "2019-11-02T21:43:59Z",
        "updatedAt" : "2019-11-10T21:00:37Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d86f1fab85d5e22c96d5b7f681c79dc78116aaac",
    "line" : null,
    "diffHunk" : "@@ -1183,14 +1191,42 @@ trait Completions { this: MetalsGlobal =>\n       override def contribute: List[Member] = {\n         if (start < 0) Nil\n         else {\n-          typed.tpe.members.iterator\n+\n+          val overrideMembers: List[OverrideDefMember] =\n+            typed.tpe.members.iterator\n+              .filter(isOverridableMethod)\n+              .map(OverrideCandidate.apply)\n+              .filter { candidate =>\n+                CompletionFuzzy.matchesSubCharacters(\n+                  prefix,\n+                  candidate.filterText\n+                )\n+              }\n+              .map(_.toMember)\n+              .toList\n+\n+          val allAbstractMembers = typed.tpe.members.iterator\n             .filter(isOverridableMethod)\n             .map(OverrideCandidate.apply)\n-            .filter { candidate =>\n-              CompletionFuzzy.matchesSubCharacters(prefix, candidate.filterText)\n-            }\n             .map(_.toMember)\n+            .filter(_.sym.isAbstract)\n             .toList\n+            .map(_.edit.getNewText)"
  },
  {
    "id" : "725eb35c-95ec-4e66-8888-382e73e96992",
    "prId" : 1031,
    "comments" : [
      {
        "id" : "fe334f9d-271f-495c-8f3c-e1f219b17d39",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "\"all members (3 members)\" feels a bit redundant\r\n```suggestion\r\n              detail = Some(s\" (${allAbstractMembers.length} total)\")\r\n```",
        "createdAt" : "2019-10-31T16:36:04Z",
        "updatedAt" : "2019-11-10T21:00:37Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d86f1fab85d5e22c96d5b7f681c79dc78116aaac",
    "line" : null,
    "diffHunk" : "@@ -1183,14 +1191,42 @@ trait Completions { this: MetalsGlobal =>\n       override def contribute: List[Member] = {\n         if (start < 0) Nil\n         else {\n-          typed.tpe.members.iterator\n+\n+          val overrideMembers: List[OverrideDefMember] =\n+            typed.tpe.members.iterator\n+              .filter(isOverridableMethod)\n+              .map(OverrideCandidate.apply)\n+              .filter { candidate =>\n+                CompletionFuzzy.matchesSubCharacters(\n+                  prefix,\n+                  candidate.filterText\n+                )\n+              }\n+              .map(_.toMember)\n+              .toList\n+\n+          val allAbstractMembers = typed.tpe.members.iterator\n             .filter(isOverridableMethod)\n             .map(OverrideCandidate.apply)\n-            .filter { candidate =>\n-              CompletionFuzzy.matchesSubCharacters(prefix, candidate.filterText)\n-            }\n             .map(_.toMember)\n+            .filter(_.sym.isAbstract)\n             .toList\n+            .map(_.edit.getNewText)\n+\n+          if (allAbstractMembers.length > 1 && overrideMembers.length > 1) {\n+            val implementAll: TextEditMember = new TextEditMember(\n+              prefix,\n+              new l.TextEdit(\n+                range,\n+                allAbstractMembers.reverse.mkString(\"\\n\")\n+              ),\n+              completionsSymbol(\"implement\"),\n+              label = Some(\"Implement all members\"),\n+              detail = Some(s\"(${allAbstractMembers.length} members)\")"
  },
  {
    "id" : "c863f5b0-c0eb-42a9-b0a7-af2d1f42b15c",
    "prId" : 1051,
    "comments" : [
      {
        "id" : "75bd5bde-aa73-49e2-a6f2-6c618ca9b851",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "`padTop = false` ?",
        "createdAt" : "2019-11-08T15:29:37Z",
        "updatedAt" : "2019-11-10T09:37:09Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f47b5690-dbdc-4a87-b8d4-30e5e8330e08",
        "parentId" : "75bd5bde-aa73-49e2-a6f2-6c618ca9b851",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Shoot, forgot that 😬. Will fix. ",
        "createdAt" : "2019-11-08T16:12:28Z",
        "updatedAt" : "2019-11-10T09:37:09Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4b86c099-b2a4-4fce-86bc-c8e8aeb523ce",
        "parentId" : "75bd5bde-aa73-49e2-a6f2-6c618ca9b851",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Actually, this seems to be what I intended after looking closer. If I understand this correct, during the completion, if there is no `baseAutoImport` from above, then it puts the import inline like it does in the exhaustive match down around line 1230. So it can be assumed since that's happening that no padding should be added.",
        "createdAt" : "2019-11-10T09:36:21Z",
        "updatedAt" : "2019-11-10T09:37:09Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "70e35a9fa37f30e61227235a9be45125e2294352",
    "line" : null,
    "diffHunk" : "@@ -1096,7 +1096,7 @@ trait Completions { this: MetalsGlobal =>\n       val baseAutoImport: Option[AutoImportPosition] =\n         autoImportPosition(pos, text)\n       val autoImport: AutoImportPosition = baseAutoImport.getOrElse(\n-        AutoImportPosition(lineStart, inferIndent(lineStart, text))\n+        AutoImportPosition(lineStart, inferIndent(lineStart, text), false)"
  },
  {
    "id" : "12f72c30-8c75-450a-84b2-cbaa594446ea",
    "prId" : 1056,
    "comments" : [
      {
        "id" : "0382e7ff-f1a3-4a96-ac40-dbfdaaf48924",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "`vars` are not stable symbols, but we can still override them in some cases",
        "createdAt" : "2019-11-10T10:57:54Z",
        "updatedAt" : "2019-11-10T10:59:05Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cfc8b62667af7d1b6a67f9855fbaa83c52772c72",
    "line" : 5,
    "diffHunk" : "@@ -452,7 +452,7 @@ trait Completions { this: MetalsGlobal =>\n           pos,\n           text,\n           valdef.pos.start,\n-          _.isStable\n+          _ => true"
  },
  {
    "id" : "b5d7428f-209f-4f05-b30a-140610bcf8e5",
    "prId" : 1056,
    "comments" : [
      {
        "id" : "177bccc5-6802-45de-970a-e49a135f76eb",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "allow overriding vars, but only if they're abstract",
        "createdAt" : "2019-11-10T11:12:06Z",
        "updatedAt" : "2019-11-10T11:34:28Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cfc8b62667af7d1b6a67f9855fbaa83c52772c72",
    "line" : 28,
    "diffHunk" : "@@ -1087,7 +1094,7 @@ trait Completions { this: MetalsGlobal =>\n         !sym.isEffectivelyFinal &&\n         !sym.name.endsWith(CURSOR) &&\n         !sym.isConstructor &&\n-        !sym.isMutable &&\n+        (!isVarSetter(sym) || (isVarSetter(sym) && sym.isAbstract)) &&"
  },
  {
    "id" : "d2ec97c5-90e3-49ac-8b6e-295bba6790e1",
    "prId" : 1057,
    "comments" : [
      {
        "id" : "fa936e9d-0675-4ac3-b588-71c83802c6e2",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "this disables the `Autofill with default values` completion when the client does not support snippets, as per @tgodzik. Please review that it makes sense and that we can't find a good completion that works without snippets",
        "createdAt" : "2019-11-11T14:28:47Z",
        "updatedAt" : "2019-11-11T14:41:31Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "50d900f1-5cd6-474c-b1ff-1cf643ccf4cd",
        "parentId" : "fa936e9d-0675-4ac3-b588-71c83802c6e2",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Let's disable it for now, I will think it over to see if it makes sense without the snippets.",
        "createdAt" : "2019-11-11T20:34:25Z",
        "updatedAt" : "2019-11-11T20:39:14Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "03c3f686dd1789f90cd4b4dd18b979160753abb7",
    "line" : 37,
    "diffHunk" : "@@ -985,7 +989,7 @@ trait Completions { this: MetalsGlobal =>\n           allParams.exists(param => param.name.startsWith(prefix))\n         val isExplicitlyCalled = suffix.startsWith(prefix)\n         val hasParamsToFill = allParams.count(!_.hasDefault) > 1\n-        if ((shouldShow || isExplicitlyCalled) && hasParamsToFill) {\n+        if ((shouldShow || isExplicitlyCalled) && hasParamsToFill && clientSupportsSnippets) {"
  },
  {
    "id" : "550659b3-88f3-4d8d-9504-b78460067904",
    "prId" : 1057,
    "comments" : [
      {
        "id" : "345a0a58-a68c-41f6-a0e7-464ffb41e727",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "avoid the braces if we have no snippets. Inserting braces will result in a cursor out of place (`{}<CURSOR>`), which seems bad.",
        "createdAt" : "2019-11-11T14:29:45Z",
        "updatedAt" : "2019-11-11T14:41:31Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b073f56a-3978-40fc-84ca-af6119accf66",
        "parentId" : "345a0a58-a68c-41f6-a0e7-464ffb41e727",
        "author" : {
          "login" : "bstaletic",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/7791699?v=4"
        },
        "body" : "From my point of view, it is bad to end up with `foo{}<CURSOR>` after completion. I ran into a similar case with Apple's swift server and it forced me to do [this](https://github.com/bstaletic/ycmd/blob/swift/ycmd/completers/swift/swift_completer.py#L106-L110) - overriding completion algorithm for swift to strip `()` from `foo()`, even if there's something in between `(` and `)`.",
        "createdAt" : "2019-11-11T14:41:50Z",
        "updatedAt" : "2019-11-11T14:41:50Z",
        "lastEditedBy" : {
          "login" : "bstaletic",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/7791699?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7a71c528-7207-4b93-b75d-72ecbcd0bb43",
        "parentId" : "345a0a58-a68c-41f6-a0e7-464ffb41e727",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "thanks for the feedback! I'm actively avoiding that pattern, except in some cases where the completion is still very useful and/or it's opt-in (e.g. it's not the default case)",
        "createdAt" : "2019-11-11T14:44:27Z",
        "updatedAt" : "2019-11-11T14:44:27Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "03c3f686dd1789f90cd4b4dd18b979160753abb7",
    "line" : 62,
    "diffHunk" : "@@ -1259,7 +1267,11 @@ trait Completions { this: MetalsGlobal =>\n           \"match\",\n           new l.TextEdit(\n             editRange,\n-            \"match {\\n\\tcase$0\\n}\"\n+            if (clientSupportsSnippets) {\n+              \"match {\\n\\tcase$0\\n}\"\n+            } else {\n+              \"match\""
  },
  {
    "id" : "fb4aba38-a306-4c35-8809-5cadbadaff5b",
    "prId" : 1057,
    "comments" : [
      {
        "id" : "d5e8ebe4-50c4-4964-95e0-2abe0f450643",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "in this case we're ok with an \"annoying\" cursor position (`match {...}<CURSOR>`) since the exhaustive match feature is quite useful regardless (and it's opt-in anyway)",
        "createdAt" : "2019-11-11T14:32:01Z",
        "updatedAt" : "2019-11-11T14:41:31Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "03c3f686dd1789f90cd4b4dd18b979160753abb7",
    "line" : null,
    "diffHunk" : "@@ -1273,7 +1285,11 @@ trait Completions { this: MetalsGlobal =>\n               tail\n                 .map(_.edit.getNewText())\n                 .mkString(\n-                  s\"match {\\n\\t${head.edit.getNewText} $$0\\n\\t\",\n+                  if (clientSupportsSnippets) {\n+                    \"match {\\n\\t${head.edit.getNewText} $$0\\n\\t\"\n+                  } else {\n+                    \"match {\\n\\t${head.edit.getNewText}\\n\\t\""
  },
  {
    "id" : "4d62a8f2-2e22-4c8a-92b9-249c5307f363",
    "prId" : 1057,
    "comments" : [
      {
        "id" : "28bd06b5-3eac-4ede-9118-ee75f5c34209",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "not brilliant, but again, it's opt-in.",
        "createdAt" : "2019-11-11T14:32:27Z",
        "updatedAt" : "2019-11-11T14:41:31Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "03c3f686dd1789f90cd4b4dd18b979160753abb7",
    "line" : 87,
    "diffHunk" : "@@ -1408,7 +1424,10 @@ trait Completions { this: MetalsGlobal =>\n         if (definitions.isTupleType(parents.selector)) {\n           result += new TextEditMember(\n             \"case () =>\",\n-            new l.TextEdit(editRange, \"case ($0) =>\"),\n+            new l.TextEdit(\n+              editRange,\n+              if (clientSupportsSnippets) \"case ($0) =>\" else \"case () =>\""
  },
  {
    "id" : "19bc2a45-4200-4ad4-b601-40c0dcb1e2a1",
    "prId" : 1174,
    "comments" : [
      {
        "id" : "bcecbd29-e602-461c-ac80-80ce0c6ba35b",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "To insure ourselves against bad performance in pathological cases, we can cache the result of `indexOf` like this\r\n```scala\r\n@ List(\"z\", \"a\", \"b\").iterator.zipWithIndex.toMap\r\nres1: Map[String, Int] = Map(\"z\" -> 0, \"a\" -> 1, \"b\" -> 2)\r\n@ List(\"b\", \"z\").sortBy(res1.get)\r\nres3: List[String] = List(\"z\", \"b\")\r\n```\r\n\r\n`indexOf` is linear and the callback to `sortBy` gets repeatedly called for each element.",
        "createdAt" : "2019-12-15T10:58:44Z",
        "updatedAt" : "2019-12-16T12:57:43Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "659f398c-580e-452a-a736-0dfc4f5bf06c",
        "parentId" : "bcecbd29-e602-461c-ac80-80ce0c6ba35b",
        "author" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Thanks! 👍  https://github.com/scalameta/metals/pull/1174/commits/707a24f40d27f1bb528fa719742b417e89a06b06 ",
        "createdAt" : "2019-12-15T17:53:08Z",
        "updatedAt" : "2019-12-16T12:57:43Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0d5f96fb977b6c73c44b8b5c061480393ecb1c82",
    "line" : null,
    "diffHunk" : "@@ -1297,7 +1297,39 @@ trait Completions { this: MetalsGlobal =>\n         val members = ListBuffer.empty[TextEditMember]\n         val importPos = autoImportPosition(pos, text)\n         val context = doLocateImportContext(pos, importPos)\n+        val subclasses = ListBuffer.empty[Symbol]\n+\n         tpe.typeSymbol.foreachKnownDirectSubClass { sym =>\n+          subclasses += sym\n+        }\n+        val subclassesResult = subclasses.result()\n+\n+        // sort subclasses by declaration order\n+        // see: https://github.com/scalameta/metals-feature-requests/issues/49\n+        val sortedSubclasses =\n+          if (subclassesResult.forall(_.pos.isDefined)) {\n+            // if all the symbols of subclasses' position is defined\n+            // we can sort those symbols by declaration order\n+            // based on their position information quite cheaply\n+            subclassesResult.sortBy(subclass =>\n+              (subclass.pos.line, subclass.pos.column)\n+            )\n+          } else {\n+            // Read all the symbols in the source that contains\n+            // the definition of the symbol in declaration order\n+            val defnSymbols = search\n+              .definitionSourceToplevels(semanticdbSymbol(tpe.typeSymbol))\n+              .asScala\n+            if (defnSymbols.length > 0)\n+              subclassesResult\n+                .sortBy(sym => {\n+                  defnSymbols.indexOf(semanticdbSymbol(sym))"
  },
  {
    "id" : "dd9912b6-049b-4565-8a29-44d88f0ea71e",
    "prId" : 1250,
    "comments" : [
      {
        "id" : "84f60e5f-aafb-4986-9625-c9c67b10ed5f",
        "parentId" : null,
        "author" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "What we construct scaladoc for is just `ClassDef` and `DefDef`, but collecting all the `MemberDef`  to avoid the following pattern.\r\n\r\n```scala\r\n/**@@\r\ntype Foo = Int // If we don't collect TypeDef\r\n\r\ndef foo(x: Int): Int = ???\r\n```\r\n\r\nto\r\n\r\n```scala\r\n/**\r\n  *\r\n  * @param x\r\n  * @return\r\n  */\r\ntype Foo = Int // If we don't collect TypeDef\r\n\r\ndef foo(x: Int): Int = ???\r\n```\r\n\r\ninstead of \r\n\r\n```scala\r\n/**\r\n  *\r\n  */\r\n```",
        "createdAt" : "2020-01-04T12:30:42Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf8e6070092ac693251e01568b009a7f1bfce601",
    "line" : null,
    "diffHunk" : "@@ -669,6 +676,42 @@ trait Completions { this: MetalsGlobal =>\n     }\n   }\n \n+  /**\n+   * Find a method definition right after the given position.\n+   *\n+   * @param pos The position of scaladoc in the original source.\n+   *            This class will find the associated member def based on this pos.\n+   */\n+  class AssociatedMemberDefFinder(pos: Position) extends Traverser {\n+    private var defs: List[MemberDef] = Nil\n+\n+    /**\n+     * Collect all the member definitions whose position is\n+     * below the given `pos`. And then return the closest member definiton.\n+     */\n+    def findAssociatedDef(root: Tree): Option[MemberDef] = {\n+      defs = Nil\n+      traverse(root)\n+      defs.sortBy(_.pos.point).headOption\n+    }\n+    override def traverse(t: Tree): Unit = {\n+      t match {\n+        case typedef @ TypeDef(_, _, _, _) => process(typedef)\n+        case clsdef @ ClassDef(_, _, _, _) => process(clsdef)\n+        case defdef @ DefDef(_, _, _, _, _, _) => process(defdef)\n+        case moduledef @ ModuleDef(_, _, _) => process(moduledef)\n+        case pkgdef @ PackageDef(_, _) => process(pkgdef)\n+        case valdef @ ValDef(_, _, _, _) => process(valdef)\n+        case _ if treePos(t).includes(pos) => super.traverse(t)"
  },
  {
    "id" : "e07a7231-d072-44e3-967f-4466cbf0a695",
    "prId" : 1250,
    "comments" : [
      {
        "id" : "bfaaf24c-85a2-4b18-ac74-0952159b52b6",
        "parentId" : null,
        "author" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Since just traversing the AST of the source to find the associated definition, if the source has long lines, it takes a bit time before returning the completion response...",
        "createdAt" : "2020-01-04T12:38:12Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf8e6070092ac693251e01568b009a7f1bfce601",
    "line" : null,
    "diffHunk" : "@@ -669,6 +676,42 @@ trait Completions { this: MetalsGlobal =>\n     }\n   }\n \n+  /**\n+   * Find a method definition right after the given position.\n+   *\n+   * @param pos The position of scaladoc in the original source.\n+   *            This class will find the associated member def based on this pos.\n+   */\n+  class AssociatedMemberDefFinder(pos: Position) extends Traverser {\n+    private var defs: List[MemberDef] = Nil\n+\n+    /**\n+     * Collect all the member definitions whose position is\n+     * below the given `pos`. And then return the closest member definiton.\n+     */\n+    def findAssociatedDef(root: Tree): Option[MemberDef] = {\n+      defs = Nil\n+      traverse(root)\n+      defs.sortBy(_.pos.point).headOption\n+    }\n+    override def traverse(t: Tree): Unit = {"
  },
  {
    "id" : "fa913686-0c52-4059-b991-47b92a253672",
    "prId" : 1250,
    "comments" : [
      {
        "id" : "28aa0360-eab9-4090-a0c3-a244423bd774",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "As a slight optimization, you could also keep track only of the `MemberDef` with the lowest position (but greater than cursor position), instead of accumulating and then sorting.",
        "createdAt" : "2020-01-04T13:48:39Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f6660cfe-036e-46e3-9117-132af4a40ddc",
        "parentId" : "28aa0360-eab9-4090-a0c3-a244423bd774",
        "author" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Thanks for your input! Done in https://github.com/scalameta/metals/pull/1250/commits/e36da2748d88988c311ad0d9fa03ef217de61995",
        "createdAt" : "2020-01-09T12:30:12Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf8e6070092ac693251e01568b009a7f1bfce601",
    "line" : null,
    "diffHunk" : "@@ -669,6 +676,42 @@ trait Completions { this: MetalsGlobal =>\n     }\n   }\n \n+  /**\n+   * Find a method definition right after the given position.\n+   *\n+   * @param pos The position of scaladoc in the original source.\n+   *            This class will find the associated member def based on this pos.\n+   */\n+  class AssociatedMemberDefFinder(pos: Position) extends Traverser {\n+    private var defs: List[MemberDef] = Nil\n+\n+    /**\n+     * Collect all the member definitions whose position is\n+     * below the given `pos`. And then return the closest member definiton.\n+     */\n+    def findAssociatedDef(root: Tree): Option[MemberDef] = {\n+      defs = Nil\n+      traverse(root)\n+      defs.sortBy(_.pos.point).headOption"
  },
  {
    "id" : "75025791-0671-4953-8b91-bdf5946156fc",
    "prId" : 1250,
    "comments" : [
      {
        "id" : "ae42c815-e762-4ae7-b956-9b3da1b565dd",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "a multiline string is probably easier to read, for example:\r\n\r\n```scala\r\ns\"\"\"|\r\n    |*\r\n    |$lines\r\n    |$returnLine\r\n    |*/\"\"\".stripMargin\r\n```",
        "createdAt" : "2020-01-04T13:51:53Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b740ace2-5bdf-4bc2-9cea-90c8cb5a8de0",
        "parentId" : "ae42c815-e762-4ae7-b956-9b3da1b565dd",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "It's best IMO to use `StringBuilder` in cases like this, it more readable, easier to extend and it has the best performance.",
        "createdAt" : "2020-01-05T09:30:19Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "205e43dd-3353-4699-b280-37a391bdac8b",
        "parentId" : "ae42c815-e762-4ae7-b956-9b3da1b565dd",
        "author" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : ":+1: to `StringBuilder` and done in https://github.com/scalameta/metals/pull/1250/commits/e051eb5f80ea69b6b377c448705491de5a2ac836",
        "createdAt" : "2020-01-09T12:30:49Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf8e6070092ac693251e01568b009a7f1bfce601",
    "line" : null,
    "diffHunk" : "@@ -1632,6 +1675,93 @@ trait Completions { this: MetalsGlobal =>\n         }\n       }\n     }\n+\n+    /**\n+     * A scaladoc completion showing the parameters of the given associated definition.\n+     *\n+     * @param editRange the range in the original source file.\n+     * @param associatedDef the memberDef associated with the scaladoc to complete.\n+     *                      This class will construct scaladoc based on the params of this definition.\n+     */\n+    case class Scaladoc(\n+        editRange: l.Range,\n+        associatedDef: MemberDef\n+    ) extends CompletionPosition {\n+      override def contribute: List[Member] = {\n+        val lines = scaladocLines(associatedDef)\n+        // add `* @return` line only if the definition is a method def.\n+        val returnLine =\n+          if (lines.isEmpty && clientSupportsSnippets) \"* @return $0\"\n+          else \"* @return\"\n+        val newText =\n+          if (associatedDef.isInstanceOf[DefDef])\n+            (Seq(\"\", \"*\") ++ lines ++ Seq(returnLine, \"*/\")).mkString(\"\\n  \")\n+          else (Seq(\"\", \"*\") ++ lines ++ Seq(\"*/\")).mkString(\"\\n  \")"
  },
  {
    "id" : "ad1a3487-b750-41cd-8792-85ac4d06a21a",
    "prId" : 1250,
    "comments" : [
      {
        "id" : "7e279bdd-1219-40e9-bdde-1f57478e9155",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "```suggestion\r\n     * Returns the parameter lines of scaladoc based on the given memberDef\r\n```",
        "createdAt" : "2020-01-04T13:52:38Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf8e6070092ac693251e01568b009a7f1bfce601",
    "line" : null,
    "diffHunk" : "@@ -1632,6 +1675,93 @@ trait Completions { this: MetalsGlobal =>\n         }\n       }\n     }\n+\n+    /**\n+     * A scaladoc completion showing the parameters of the given associated definition.\n+     *\n+     * @param editRange the range in the original source file.\n+     * @param associatedDef the memberDef associated with the scaladoc to complete.\n+     *                      This class will construct scaladoc based on the params of this definition.\n+     */\n+    case class Scaladoc(\n+        editRange: l.Range,\n+        associatedDef: MemberDef\n+    ) extends CompletionPosition {\n+      override def contribute: List[Member] = {\n+        val lines = scaladocLines(associatedDef)\n+        // add `* @return` line only if the definition is a method def.\n+        val returnLine =\n+          if (lines.isEmpty && clientSupportsSnippets) \"* @return $0\"\n+          else \"* @return\"\n+        val newText =\n+          if (associatedDef.isInstanceOf[DefDef])\n+            (Seq(\"\", \"*\") ++ lines ++ Seq(returnLine, \"*/\")).mkString(\"\\n  \")\n+          else (Seq(\"\", \"*\") ++ lines ++ Seq(\"*/\")).mkString(\"\\n  \")\n+        List(\n+          new TextEditMember(\n+            \"Scaladoc Comment\",\n+            new l.TextEdit(\n+              editRange,\n+              newText\n+            ),\n+            completionsSymbol(associatedDef.name.toString()),\n+            label = Some(\"/** */\"),\n+            detail = Some(\"Scaladoc Comment\")\n+          )\n+        )\n+      }\n+    }\n+\n+    /**\n+     * Returns the parameter lines of scaladoc besed on the given memberDef"
  },
  {
    "id" : "bc5ff502-c623-4549-9550-b0f07777ccff",
    "prId" : 1250,
    "comments" : [
      {
        "id" : "a037164a-f32f-4711-8859-42b905b399aa",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "what about `scaladocParams` or `scaladocParamLines`?",
        "createdAt" : "2020-01-04T13:53:14Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf8e6070092ac693251e01568b009a7f1bfce601",
    "line" : null,
    "diffHunk" : "@@ -1632,6 +1675,93 @@ trait Completions { this: MetalsGlobal =>\n         }\n       }\n     }\n+\n+    /**\n+     * A scaladoc completion showing the parameters of the given associated definition.\n+     *\n+     * @param editRange the range in the original source file.\n+     * @param associatedDef the memberDef associated with the scaladoc to complete.\n+     *                      This class will construct scaladoc based on the params of this definition.\n+     */\n+    case class Scaladoc(\n+        editRange: l.Range,\n+        associatedDef: MemberDef\n+    ) extends CompletionPosition {\n+      override def contribute: List[Member] = {\n+        val lines = scaladocLines(associatedDef)\n+        // add `* @return` line only if the definition is a method def.\n+        val returnLine =\n+          if (lines.isEmpty && clientSupportsSnippets) \"* @return $0\"\n+          else \"* @return\"\n+        val newText =\n+          if (associatedDef.isInstanceOf[DefDef])\n+            (Seq(\"\", \"*\") ++ lines ++ Seq(returnLine, \"*/\")).mkString(\"\\n  \")\n+          else (Seq(\"\", \"*\") ++ lines ++ Seq(\"*/\")).mkString(\"\\n  \")\n+        List(\n+          new TextEditMember(\n+            \"Scaladoc Comment\",\n+            new l.TextEdit(\n+              editRange,\n+              newText\n+            ),\n+            completionsSymbol(associatedDef.name.toString()),\n+            label = Some(\"/** */\"),\n+            detail = Some(\"Scaladoc Comment\")\n+          )\n+        )\n+      }\n+    }\n+\n+    /**\n+     * Returns the parameter lines of scaladoc besed on the given memberDef\n+     * like [\"* @param param1 $0\", \"* @param param2\"].\n+     *\n+     * @param memberDef The memberDef to construct scaladoc.\n+     */\n+    private def scaladocLines(memberDef: MemberDef): List[String] = {"
  },
  {
    "id" : "7c8a334c-b4c0-47c7-8b97-b38dc5e337c3",
    "prId" : 1250,
    "comments" : [
      {
        "id" : "34062fe6-d57e-4da7-a68f-f32a109b15e5",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "nit: is `this.` needed?",
        "createdAt" : "2020-01-04T13:55:08Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf8e6070092ac693251e01568b009a7f1bfce601",
    "line" : null,
    "diffHunk" : "@@ -1632,6 +1675,93 @@ trait Completions { this: MetalsGlobal =>\n         }\n       }\n     }\n+\n+    /**\n+     * A scaladoc completion showing the parameters of the given associated definition.\n+     *\n+     * @param editRange the range in the original source file.\n+     * @param associatedDef the memberDef associated with the scaladoc to complete.\n+     *                      This class will construct scaladoc based on the params of this definition.\n+     */\n+    case class Scaladoc(\n+        editRange: l.Range,\n+        associatedDef: MemberDef\n+    ) extends CompletionPosition {\n+      override def contribute: List[Member] = {\n+        val lines = scaladocLines(associatedDef)\n+        // add `* @return` line only if the definition is a method def.\n+        val returnLine =\n+          if (lines.isEmpty && clientSupportsSnippets) \"* @return $0\"\n+          else \"* @return\"\n+        val newText =\n+          if (associatedDef.isInstanceOf[DefDef])\n+            (Seq(\"\", \"*\") ++ lines ++ Seq(returnLine, \"*/\")).mkString(\"\\n  \")\n+          else (Seq(\"\", \"*\") ++ lines ++ Seq(\"*/\")).mkString(\"\\n  \")\n+        List(\n+          new TextEditMember(\n+            \"Scaladoc Comment\",\n+            new l.TextEdit(\n+              editRange,\n+              newText\n+            ),\n+            completionsSymbol(associatedDef.name.toString()),\n+            label = Some(\"/** */\"),\n+            detail = Some(\"Scaladoc Comment\")\n+          )\n+        )\n+      }\n+    }\n+\n+    /**\n+     * Returns the parameter lines of scaladoc besed on the given memberDef\n+     * like [\"* @param param1 $0\", \"* @param param2\"].\n+     *\n+     * @param memberDef The memberDef to construct scaladoc.\n+     */\n+    private def scaladocLines(memberDef: MemberDef): List[String] = {\n+      memberDef match {\n+        case DefDef(_, _, _, vparamss, _, _) =>\n+          vparamss.flatten.zipWithIndex\n+            .map {\n+              case (valdef, idx) => {\n+                // /**\n+                //   * @param param1 | <- move cursor to here.\n+                //   * @param param2\n+                //   */\n+                if (idx == 0 && clientSupportsSnippets)\n+                  s\"* @param ${valdef.name} $$0\"\n+                else s\"* @param ${valdef.name}\"\n+              }\n+            }\n+        case clazz @ ClassDef(_, _, _, _) =>\n+          // If the associated def is a class definition,\n+          // retrieve the constructor from the class, and caluculate the lines\n+          // from the constructor definition instead.\n+          new ConstructorFinder(clazz).getConstructor match {\n+            case Some(defdef) => this.scaladocLines(defdef)"
  },
  {
    "id" : "d55180d9-d28c-469a-bb97-21170ed5c176",
    "prId" : 1250,
    "comments" : [
      {
        "id" : "78fe14cd-f250-4299-aa98-30436fadad5e",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I don't understand the `lines.isEmpty` check. Also you can probably move `returnLine` inside the `if` branch in `newText` below",
        "createdAt" : "2020-01-04T13:56:58Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "36208a00-8a18-48c7-84b7-6cb2d4392c48",
        "parentId" : "78fe14cd-f250-4299-aa98-30436fadad5e",
        "author" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "I meant to move the cursor to `@return | <- here` only if there are no parameters like\r\n\r\n```scala\r\n/**\r\n   *\r\n   * @return | <- here\r\n   */\r\n```\r\n\r\nBut now I'm going to move the cursor to the following position, we don't need this logic anymore.\r\n\r\n```scala\r\n/**\r\n   * | <- here instead of after the @param\r\n   *\r\n   * @param\r\n   * @return\r\n   */\r\n```",
        "createdAt" : "2020-01-05T18:03:17Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf8e6070092ac693251e01568b009a7f1bfce601",
    "line" : null,
    "diffHunk" : "@@ -1632,6 +1675,93 @@ trait Completions { this: MetalsGlobal =>\n         }\n       }\n     }\n+\n+    /**\n+     * A scaladoc completion showing the parameters of the given associated definition.\n+     *\n+     * @param editRange the range in the original source file.\n+     * @param associatedDef the memberDef associated with the scaladoc to complete.\n+     *                      This class will construct scaladoc based on the params of this definition.\n+     */\n+    case class Scaladoc(\n+        editRange: l.Range,\n+        associatedDef: MemberDef\n+    ) extends CompletionPosition {\n+      override def contribute: List[Member] = {\n+        val lines = scaladocLines(associatedDef)\n+        // add `* @return` line only if the definition is a method def.\n+        val returnLine =\n+          if (lines.isEmpty && clientSupportsSnippets) \"* @return $0\""
  },
  {
    "id" : "cdc4e0a8-1840-4693-bdd9-afe463559586",
    "prId" : 1250,
    "comments" : [
      {
        "id" : "92a0994d-19f9-4ceb-83f5-e5d11cbe1a94",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "```suggestion\r\n        case clazz: ClassDef =>\r\n```",
        "createdAt" : "2020-01-04T13:59:02Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf8e6070092ac693251e01568b009a7f1bfce601",
    "line" : null,
    "diffHunk" : "@@ -1632,6 +1675,93 @@ trait Completions { this: MetalsGlobal =>\n         }\n       }\n     }\n+\n+    /**\n+     * A scaladoc completion showing the parameters of the given associated definition.\n+     *\n+     * @param editRange the range in the original source file.\n+     * @param associatedDef the memberDef associated with the scaladoc to complete.\n+     *                      This class will construct scaladoc based on the params of this definition.\n+     */\n+    case class Scaladoc(\n+        editRange: l.Range,\n+        associatedDef: MemberDef\n+    ) extends CompletionPosition {\n+      override def contribute: List[Member] = {\n+        val lines = scaladocLines(associatedDef)\n+        // add `* @return` line only if the definition is a method def.\n+        val returnLine =\n+          if (lines.isEmpty && clientSupportsSnippets) \"* @return $0\"\n+          else \"* @return\"\n+        val newText =\n+          if (associatedDef.isInstanceOf[DefDef])\n+            (Seq(\"\", \"*\") ++ lines ++ Seq(returnLine, \"*/\")).mkString(\"\\n  \")\n+          else (Seq(\"\", \"*\") ++ lines ++ Seq(\"*/\")).mkString(\"\\n  \")\n+        List(\n+          new TextEditMember(\n+            \"Scaladoc Comment\",\n+            new l.TextEdit(\n+              editRange,\n+              newText\n+            ),\n+            completionsSymbol(associatedDef.name.toString()),\n+            label = Some(\"/** */\"),\n+            detail = Some(\"Scaladoc Comment\")\n+          )\n+        )\n+      }\n+    }\n+\n+    /**\n+     * Returns the parameter lines of scaladoc besed on the given memberDef\n+     * like [\"* @param param1 $0\", \"* @param param2\"].\n+     *\n+     * @param memberDef The memberDef to construct scaladoc.\n+     */\n+    private def scaladocLines(memberDef: MemberDef): List[String] = {\n+      memberDef match {\n+        case DefDef(_, _, _, vparamss, _, _) =>\n+          vparamss.flatten.zipWithIndex\n+            .map {\n+              case (valdef, idx) => {\n+                // /**\n+                //   * @param param1 | <- move cursor to here.\n+                //   * @param param2\n+                //   */\n+                if (idx == 0 && clientSupportsSnippets)\n+                  s\"* @param ${valdef.name} $$0\"\n+                else s\"* @param ${valdef.name}\"\n+              }\n+            }\n+        case clazz @ ClassDef(_, _, _, _) =>"
  },
  {
    "id" : "96377d02-e424-4e2c-ae8f-c949916581db",
    "prId" : 1250,
    "comments" : [
      {
        "id" : "20be1e1c-c61d-4b0b-a826-af81fcad8eb7",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "```suggestion\r\n        case d: DefDef =>\r\n```\r\n\r\nand then `d.vparamss`",
        "createdAt" : "2020-01-04T14:00:59Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf8e6070092ac693251e01568b009a7f1bfce601",
    "line" : null,
    "diffHunk" : "@@ -1632,6 +1675,93 @@ trait Completions { this: MetalsGlobal =>\n         }\n       }\n     }\n+\n+    /**\n+     * A scaladoc completion showing the parameters of the given associated definition.\n+     *\n+     * @param editRange the range in the original source file.\n+     * @param associatedDef the memberDef associated with the scaladoc to complete.\n+     *                      This class will construct scaladoc based on the params of this definition.\n+     */\n+    case class Scaladoc(\n+        editRange: l.Range,\n+        associatedDef: MemberDef\n+    ) extends CompletionPosition {\n+      override def contribute: List[Member] = {\n+        val lines = scaladocLines(associatedDef)\n+        // add `* @return` line only if the definition is a method def.\n+        val returnLine =\n+          if (lines.isEmpty && clientSupportsSnippets) \"* @return $0\"\n+          else \"* @return\"\n+        val newText =\n+          if (associatedDef.isInstanceOf[DefDef])\n+            (Seq(\"\", \"*\") ++ lines ++ Seq(returnLine, \"*/\")).mkString(\"\\n  \")\n+          else (Seq(\"\", \"*\") ++ lines ++ Seq(\"*/\")).mkString(\"\\n  \")\n+        List(\n+          new TextEditMember(\n+            \"Scaladoc Comment\",\n+            new l.TextEdit(\n+              editRange,\n+              newText\n+            ),\n+            completionsSymbol(associatedDef.name.toString()),\n+            label = Some(\"/** */\"),\n+            detail = Some(\"Scaladoc Comment\")\n+          )\n+        )\n+      }\n+    }\n+\n+    /**\n+     * Returns the parameter lines of scaladoc besed on the given memberDef\n+     * like [\"* @param param1 $0\", \"* @param param2\"].\n+     *\n+     * @param memberDef The memberDef to construct scaladoc.\n+     */\n+    private def scaladocLines(memberDef: MemberDef): List[String] = {\n+      memberDef match {\n+        case DefDef(_, _, _, vparamss, _, _) =>"
  },
  {
    "id" : "82bded1c-d80a-450e-bd8e-8f6c866564cd",
    "prId" : 1250,
    "comments" : [
      {
        "id" : "c478e6fd-2457-4f3e-8b57-a011e378f53c",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "similar suggestion, it's a bit easier to read by doing:\r\n\r\n```suggestion\r\n          case constructor: DefDef\r\n```\r\n\r\nand then\r\n\r\n```scala\r\nif constructor.name == termNames.CONSTRUCTOR\r\n```",
        "createdAt" : "2020-01-04T14:04:56Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf8e6070092ac693251e01568b009a7f1bfce601",
    "line" : null,
    "diffHunk" : "@@ -1632,6 +1675,93 @@ trait Completions { this: MetalsGlobal =>\n         }\n       }\n     }\n+\n+    /**\n+     * A scaladoc completion showing the parameters of the given associated definition.\n+     *\n+     * @param editRange the range in the original source file.\n+     * @param associatedDef the memberDef associated with the scaladoc to complete.\n+     *                      This class will construct scaladoc based on the params of this definition.\n+     */\n+    case class Scaladoc(\n+        editRange: l.Range,\n+        associatedDef: MemberDef\n+    ) extends CompletionPosition {\n+      override def contribute: List[Member] = {\n+        val lines = scaladocLines(associatedDef)\n+        // add `* @return` line only if the definition is a method def.\n+        val returnLine =\n+          if (lines.isEmpty && clientSupportsSnippets) \"* @return $0\"\n+          else \"* @return\"\n+        val newText =\n+          if (associatedDef.isInstanceOf[DefDef])\n+            (Seq(\"\", \"*\") ++ lines ++ Seq(returnLine, \"*/\")).mkString(\"\\n  \")\n+          else (Seq(\"\", \"*\") ++ lines ++ Seq(\"*/\")).mkString(\"\\n  \")\n+        List(\n+          new TextEditMember(\n+            \"Scaladoc Comment\",\n+            new l.TextEdit(\n+              editRange,\n+              newText\n+            ),\n+            completionsSymbol(associatedDef.name.toString()),\n+            label = Some(\"/** */\"),\n+            detail = Some(\"Scaladoc Comment\")\n+          )\n+        )\n+      }\n+    }\n+\n+    /**\n+     * Returns the parameter lines of scaladoc besed on the given memberDef\n+     * like [\"* @param param1 $0\", \"* @param param2\"].\n+     *\n+     * @param memberDef The memberDef to construct scaladoc.\n+     */\n+    private def scaladocLines(memberDef: MemberDef): List[String] = {\n+      memberDef match {\n+        case DefDef(_, _, _, vparamss, _, _) =>\n+          vparamss.flatten.zipWithIndex\n+            .map {\n+              case (valdef, idx) => {\n+                // /**\n+                //   * @param param1 | <- move cursor to here.\n+                //   * @param param2\n+                //   */\n+                if (idx == 0 && clientSupportsSnippets)\n+                  s\"* @param ${valdef.name} $$0\"\n+                else s\"* @param ${valdef.name}\"\n+              }\n+            }\n+        case clazz @ ClassDef(_, _, _, _) =>\n+          // If the associated def is a class definition,\n+          // retrieve the constructor from the class, and caluculate the lines\n+          // from the constructor definition instead.\n+          new ConstructorFinder(clazz).getConstructor match {\n+            case Some(defdef) => this.scaladocLines(defdef)\n+            case scala.None => Nil\n+          }\n+        case _ => Nil\n+      }\n+    }\n+\n+    class ConstructorFinder(clazz: ClassDef) extends Traverser {\n+      def getConstructor: Option[DefDef] = {\n+        this.constructor = scala.None\n+        clazz.impl.body.foreach(traverse)\n+        constructor\n+      }\n+      private var constructor: Option[DefDef] = scala.None\n+      override def traverse(tree: Tree): Unit = {\n+        tree match {\n+          case constructor @ DefDef(_, name, _, _, _, _)"
  },
  {
    "id" : "6c1be6df-c088-4957-803f-74d1432739ba",
    "prId" : 1250,
    "comments" : [
      {
        "id" : "b7dab73a-37cb-4802-a652-e031e4cae73e",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Do we need to catch `Throwable` here? It's probably fine if we catch `NonFatal` instead \r\n\r\n```suggestion\r\n      } catch { case NonFatal(_) => \"\" }\r\n```\r\n\r\nAlso, what about wrapping the entire method in `try/catch` and directly returning `false` instead?",
        "createdAt" : "2020-01-04T14:07:27Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf8e6070092ac693251e01568b009a7f1bfce601",
    "line" : null,
    "diffHunk" : "@@ -1867,4 +1997,12 @@ trait Completions { this: MetalsGlobal =>\n     }\n   }\n \n+  def isScaladocCompletion(pos: Position, text: String): Boolean = {\n+    val line =\n+      try {\n+        text.split(System.lineSeparator())(pos.line - 1)\n+      } catch { case _: Throwable => \"\" }"
  },
  {
    "id" : "0d075ce1-50cf-43da-b9f7-2b48d30e0259",
    "prId" : 1250,
    "comments" : [
      {
        "id" : "e40bd42e-485e-46be-8e32-3ea5d33c2c8b",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "It's expensive to split the entire file into lines for every single completion just to check if it's possibly a scaladoc completion. Is it possible to walk instead over the characters backwards and check one-by-one that the position is over `/**`?",
        "createdAt" : "2020-01-05T09:28:05Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e18eaefe-01ba-4da0-bbf1-bc503f6108a5",
        "parentId" : "e40bd42e-485e-46be-8e32-3ea5d33c2c8b",
        "author" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Done:+1:  https://github.com/scalameta/metals/pull/1250/commits/82618d1e3529cee4adc76c461ee79a45ad13583f",
        "createdAt" : "2020-01-09T12:36:27Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf8e6070092ac693251e01568b009a7f1bfce601",
    "line" : null,
    "diffHunk" : "@@ -1867,4 +1997,12 @@ trait Completions { this: MetalsGlobal =>\n     }\n   }\n \n+  def isScaladocCompletion(pos: Position, text: String): Boolean = {"
  },
  {
    "id" : "a36cd6a4-f12c-4a66-9236-754e53d9daf4",
    "prId" : 1250,
    "comments" : [
      {
        "id" : "6e464a7b-fbba-4846-87b5-e9cce59101f2",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "What happens for methods with context bounds?\r\n\r\n```scala\r\n/**@@\r\ndef foo[T: Ordering] = ...\r\n```\r\n",
        "createdAt" : "2020-01-05T09:32:02Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4d72583a-e062-43fd-8074-2397b40b250d",
        "parentId" : "6e464a7b-fbba-4846-87b5-e9cce59101f2",
        "author" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Ah, I got something like \r\n\r\n```\r\n/**\r\n  *\r\n  * @param evidence$1\r\n  * @return\r\n  */\r\ndef foo[T: Ordering] = ...\r\n ```\r\n\r\nwhich is added around [here](https://github.com/scala/scala/blob/ba9701059216c629410f4f23a2175d20ad62484b/src/compiler/scala/tools/nsc/ast/parser/TreeBuilder.scala#L135).\r\n\r\nFiltered out those synthetic params here https://github.com/scala/scala/blob/ba9701059216c629410f4f23a2175d20ad62484b/src/compiler/scala/tools/nsc/ast/parser/TreeBuilder.scala#L135 👍 ",
        "createdAt" : "2020-01-09T12:41:04Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf8e6070092ac693251e01568b009a7f1bfce601",
    "line" : null,
    "diffHunk" : "@@ -1632,6 +1675,93 @@ trait Completions { this: MetalsGlobal =>\n         }\n       }\n     }\n+\n+    /**\n+     * A scaladoc completion showing the parameters of the given associated definition.\n+     *\n+     * @param editRange the range in the original source file.\n+     * @param associatedDef the memberDef associated with the scaladoc to complete.\n+     *                      This class will construct scaladoc based on the params of this definition.\n+     */\n+    case class Scaladoc(\n+        editRange: l.Range,\n+        associatedDef: MemberDef\n+    ) extends CompletionPosition {\n+      override def contribute: List[Member] = {\n+        val lines = scaladocLines(associatedDef)\n+        // add `* @return` line only if the definition is a method def.\n+        val returnLine =\n+          if (lines.isEmpty && clientSupportsSnippets) \"* @return $0\"\n+          else \"* @return\"\n+        val newText =\n+          if (associatedDef.isInstanceOf[DefDef])\n+            (Seq(\"\", \"*\") ++ lines ++ Seq(returnLine, \"*/\")).mkString(\"\\n  \")\n+          else (Seq(\"\", \"*\") ++ lines ++ Seq(\"*/\")).mkString(\"\\n  \")\n+        List(\n+          new TextEditMember(\n+            \"Scaladoc Comment\",\n+            new l.TextEdit(\n+              editRange,\n+              newText\n+            ),\n+            completionsSymbol(associatedDef.name.toString()),\n+            label = Some(\"/** */\"),\n+            detail = Some(\"Scaladoc Comment\")\n+          )\n+        )\n+      }\n+    }\n+\n+    /**\n+     * Returns the parameter lines of scaladoc besed on the given memberDef\n+     * like [\"* @param param1 $0\", \"* @param param2\"].\n+     *\n+     * @param memberDef The memberDef to construct scaladoc.\n+     */\n+    private def scaladocLines(memberDef: MemberDef): List[String] = {\n+      memberDef match {\n+        case DefDef(_, _, _, vparamss, _, _) =>\n+          vparamss.flatten.zipWithIndex"
  },
  {
    "id" : "859bedbb-2483-45ee-8e66-f5fd32a94e17",
    "prId" : 1250,
    "comments" : [
      {
        "id" : "6da6877d-5cd5-42b0-b4a1-3f5d45691990",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Can we move all the scaladoc-related logic into a separate file? For example `ScaladocCompletions.scala`. The `Completions.scala` file is already too large.",
        "createdAt" : "2020-01-05T09:33:54Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d5e379cc-5e60-422e-bb0c-16ea07276b72",
        "parentId" : "6da6877d-5cd5-42b0-b4a1-3f5d45691990",
        "author" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Done in https://github.com/scalameta/metals/pull/1250/commits/b6de5d98ad7ea7973b9363b3f72a4dc8c0b705ee 👍 \r\nIs it ok to split those files in this way?\r\n\r\nIf it's ok, I'd like to split other modules into another file in another PR (like MatchKeyword Completion related logics into `MatchKeywordCompletion.scala`)(in this case, maybe we should dig a directory like `completions` and put those files in `pc/completions/ScaladocCompletion.scala`)\r\n\r\nas mentioned in https://github.com/scalameta/metals/issues/672",
        "createdAt" : "2020-01-09T12:35:31Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf8e6070092ac693251e01568b009a7f1bfce601",
    "line" : null,
    "diffHunk" : "@@ -1632,6 +1675,93 @@ trait Completions { this: MetalsGlobal =>\n         }\n       }\n     }\n+\n+    /**\n+     * A scaladoc completion showing the parameters of the given associated definition.\n+     *\n+     * @param editRange the range in the original source file.\n+     * @param associatedDef the memberDef associated with the scaladoc to complete.\n+     *                      This class will construct scaladoc based on the params of this definition.\n+     */\n+    case class Scaladoc(\n+        editRange: l.Range,\n+        associatedDef: MemberDef\n+    ) extends CompletionPosition {\n+      override def contribute: List[Member] = {\n+        val lines = scaladocLines(associatedDef)\n+        // add `* @return` line only if the definition is a method def.\n+        val returnLine =\n+          if (lines.isEmpty && clientSupportsSnippets) \"* @return $0\"\n+          else \"* @return\"\n+        val newText =\n+          if (associatedDef.isInstanceOf[DefDef])\n+            (Seq(\"\", \"*\") ++ lines ++ Seq(returnLine, \"*/\")).mkString(\"\\n  \")\n+          else (Seq(\"\", \"*\") ++ lines ++ Seq(\"*/\")).mkString(\"\\n  \")\n+        List(\n+          new TextEditMember(\n+            \"Scaladoc Comment\",\n+            new l.TextEdit(\n+              editRange,\n+              newText\n+            ),\n+            completionsSymbol(associatedDef.name.toString()),\n+            label = Some(\"/** */\"),\n+            detail = Some(\"Scaladoc Comment\")\n+          )\n+        )\n+      }\n+    }\n+\n+    /**\n+     * Returns the parameter lines of scaladoc besed on the given memberDef\n+     * like [\"* @param param1 $0\", \"* @param param2\"].\n+     *\n+     * @param memberDef The memberDef to construct scaladoc.\n+     */\n+    private def scaladocLines(memberDef: MemberDef): List[String] = {\n+      memberDef match {\n+        case DefDef(_, _, _, vparamss, _, _) =>\n+          vparamss.flatten.zipWithIndex\n+            .map {\n+              case (valdef, idx) => {\n+                // /**\n+                //   * @param param1 | <- move cursor to here.\n+                //   * @param param2\n+                //   */\n+                if (idx == 0 && clientSupportsSnippets)\n+                  s\"* @param ${valdef.name} $$0\"\n+                else s\"* @param ${valdef.name}\"\n+              }\n+            }\n+        case clazz @ ClassDef(_, _, _, _) =>\n+          // If the associated def is a class definition,\n+          // retrieve the constructor from the class, and caluculate the lines\n+          // from the constructor definition instead.\n+          new ConstructorFinder(clazz).getConstructor match {\n+            case Some(defdef) => this.scaladocLines(defdef)\n+            case scala.None => Nil\n+          }\n+        case _ => Nil\n+      }\n+    }\n+\n+    class ConstructorFinder(clazz: ClassDef) extends Traverser {"
  },
  {
    "id" : "d2a46389-b0ef-4d35-af75-7cdedbcdb843",
    "prId" : 1250,
    "comments" : [
      {
        "id" : "c0ad1b00-a7a1-4c89-a3d3-f7cd77ecca11",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Did you try `clazz.symbol.primaryConstructor`? In general, when using compiler APIs you want to operate on types and symbols instead of trees (unlike scalameta where we have mostly just trees)",
        "createdAt" : "2020-01-05T15:55:50Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ff09c71c-5216-46b5-92de-995d68112c14",
        "parentId" : "c0ad1b00-a7a1-4c89-a3d3-f7cd77ecca11",
        "author" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Oh, I haven't tried it yet, I'm gonna give it a try!",
        "createdAt" : "2020-01-05T18:05:29Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b4b8ad4b-e875-4ab8-9357-f202b91b75ce",
        "parentId" : "c0ad1b00-a7a1-4c89-a3d3-f7cd77ecca11",
        "author" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Thanks! I could simplify the logic with `clazz.symbol.primaryConstructor` :) in https://github.com/scalameta/metals/pull/1250/commits/4f936d3f99045a68e038ebcab5774bf599a24f4e",
        "createdAt" : "2020-01-09T12:37:17Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf8e6070092ac693251e01568b009a7f1bfce601",
    "line" : null,
    "diffHunk" : "@@ -1632,6 +1675,93 @@ trait Completions { this: MetalsGlobal =>\n         }\n       }\n     }\n+\n+    /**\n+     * A scaladoc completion showing the parameters of the given associated definition.\n+     *\n+     * @param editRange the range in the original source file.\n+     * @param associatedDef the memberDef associated with the scaladoc to complete.\n+     *                      This class will construct scaladoc based on the params of this definition.\n+     */\n+    case class Scaladoc(\n+        editRange: l.Range,\n+        associatedDef: MemberDef\n+    ) extends CompletionPosition {\n+      override def contribute: List[Member] = {\n+        val lines = scaladocLines(associatedDef)\n+        // add `* @return` line only if the definition is a method def.\n+        val returnLine =\n+          if (lines.isEmpty && clientSupportsSnippets) \"* @return $0\"\n+          else \"* @return\"\n+        val newText =\n+          if (associatedDef.isInstanceOf[DefDef])\n+            (Seq(\"\", \"*\") ++ lines ++ Seq(returnLine, \"*/\")).mkString(\"\\n  \")\n+          else (Seq(\"\", \"*\") ++ lines ++ Seq(\"*/\")).mkString(\"\\n  \")\n+        List(\n+          new TextEditMember(\n+            \"Scaladoc Comment\",\n+            new l.TextEdit(\n+              editRange,\n+              newText\n+            ),\n+            completionsSymbol(associatedDef.name.toString()),\n+            label = Some(\"/** */\"),\n+            detail = Some(\"Scaladoc Comment\")\n+          )\n+        )\n+      }\n+    }\n+\n+    /**\n+     * Returns the parameter lines of scaladoc besed on the given memberDef\n+     * like [\"* @param param1 $0\", \"* @param param2\"].\n+     *\n+     * @param memberDef The memberDef to construct scaladoc.\n+     */\n+    private def scaladocLines(memberDef: MemberDef): List[String] = {\n+      memberDef match {\n+        case DefDef(_, _, _, vparamss, _, _) =>\n+          vparamss.flatten.zipWithIndex\n+            .map {\n+              case (valdef, idx) => {\n+                // /**\n+                //   * @param param1 | <- move cursor to here.\n+                //   * @param param2\n+                //   */\n+                if (idx == 0 && clientSupportsSnippets)\n+                  s\"* @param ${valdef.name} $$0\"\n+                else s\"* @param ${valdef.name}\"\n+              }\n+            }\n+        case clazz @ ClassDef(_, _, _, _) =>\n+          // If the associated def is a class definition,\n+          // retrieve the constructor from the class, and caluculate the lines\n+          // from the constructor definition instead.\n+          new ConstructorFinder(clazz).getConstructor match {"
  },
  {
    "id" : "d53f51b0-0e76-4640-b1cd-e548e3528eaf",
    "prId" : 1250,
    "comments" : [
      {
        "id" : "c188dfa6-5cb7-4630-8c8b-d2a00ce33ef3",
        "parentId" : null,
        "author" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Removed a `sealed` modifier to split `Scaladoc` related logic into another file.\r\nI think we cannot avoid removing this for splitting each CompletionPosition logics into other files, and IMO it's ok with removing this modifier because we don't use exhaustive match for CompletionPosition 🤔 ",
        "createdAt" : "2020-01-09T12:43:52Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cf8e6070092ac693251e01568b009a7f1bfce601",
    "line" : 5,
    "diffHunk" : "@@ -336,7 +336,7 @@ trait Completions { this: MetalsGlobal =>\n   // variable but it avoids repeating traversals from the compiler\n   // implementation of `completionsAt(pos)`.\n   var lastVisistedParentTrees: List[Tree] = Nil\n-  sealed abstract class CompletionPosition {\n+  abstract class CompletionPosition {"
  },
  {
    "id" : "97385ce9-9062-4a61-ac65-5990b0baacf5",
    "prId" : 1379,
    "comments" : [
      {
        "id" : "ee615d37-f41f-4068-bc51-9e3838824c6f",
        "parentId" : null,
        "author" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Just moved to `OverrideCompletions.scala`",
        "createdAt" : "2020-02-03T07:05:46Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e100253dce0a50a1201510f9bec11fbe8f298bbb",
    "line" : 55,
    "diffHunk" : "@@ -1045,252 +1035,6 @@ trait Completions { this: MetalsGlobal =>\n       }\n     }\n \n-    /**"
  },
  {
    "id" : "8f371ba7-d64e-4b7f-a7a7-6d1969d98484",
    "prId" : 1423,
    "comments" : [
      {
        "id" : "42e68e8d-e767-44f2-a9ac-8b2b72040d28",
        "parentId" : null,
        "author" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Leaving `Type`, `New`, and `None` in `object CompletionPosition` because those CompletionPositions are small enough, and I couldn't see the benefit of splitting them into smaller files.\r\nHowever, it might be better to split them into smaller files for consistency. 🤔 ",
        "createdAt" : "2020-02-12T23:51:40Z",
        "updatedAt" : "2020-02-13T23:57:05Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7819d8c7-24ab-4da1-81e4-67034b96940e",
        "parentId" : "42e68e8d-e767-44f2-a9ac-8b2b72040d28",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I think it would be better to be consistent here, but that's just my opinion. I am fine either way :)",
        "createdAt" : "2020-02-13T17:06:57Z",
        "updatedAt" : "2020-02-13T23:57:05Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ce2b52a8d218744475d975f452c87e3167dadd7b",
    "line" : null,
    "diffHunk" : "@@ -690,708 +569,8 @@ trait Completions { this: MetalsGlobal =>\n       override def isNew: Boolean = true"
  },
  {
    "id" : "049b6fbb-2496-42dc-bcca-783d5e52c145",
    "prId" : 1423,
    "comments" : [
      {
        "id" : "2cbe75a0-750b-47ab-9abe-83989fc25c67",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Can we also move Completions class to the new package?",
        "createdAt" : "2020-02-13T17:08:06Z",
        "updatedAt" : "2020-02-13T23:57:05Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ce2b52a8d218744475d975f452c87e3167dadd7b",
    "line" : 3,
    "diffHunk" : "@@ -1,16 +1,11 @@\n package scala.meta.internal.pc\n \n-import java.lang.StringBuilder"
  }
]