[
  {
    "id" : "f219f2b1-a7f5-4d6e-a9ef-606e740f7282",
    "prId" : 959,
    "comments" : [
      {
        "id" : "7c65a459-f79e-48c0-9862-7431eb166391",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Remove?",
        "createdAt" : "2019-10-04T14:13:08Z",
        "updatedAt" : "2019-10-04T14:19:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7b0f1eec3bb71a43264c9f32fa70860622c41aaa",
    "line" : 66,
    "diffHunk" : "@@ -163,6 +211,7 @@ class HoverProvider(val compiler: MetalsGlobal, params: OffsetParams) {\n       pos: Position,\n       range: Position\n   ): Option[Hover] = {\n+    tpe.typeSymbol"
  },
  {
    "id" : "a6964f93-9676-4e60-8f7e-f3b2f26dc7f0",
    "prId" : 959,
    "comments" : [
      {
        "id" : "694243e6-f33f-40d9-9431-e86243e1860b",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "This could be used in the hover function too now.",
        "createdAt" : "2019-10-04T14:16:49Z",
        "updatedAt" : "2019-10-04T14:19:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7b0f1eec3bb71a43264c9f32fa70860622c41aaa",
    "line" : 12,
    "diffHunk" : "@@ -11,6 +12,53 @@ import scala.meta.internal.jdk.CollectionConverters._\n class HoverProvider(val compiler: MetalsGlobal, params: OffsetParams) {\n   import compiler._\n \n+  def getTree: Option[Tree] = {"
  },
  {
    "id" : "6cb03179-e6b4-4371-8f82-fa3436947615",
    "prId" : 978,
    "comments" : [
      {
        "id" : "3b7fd53d-dc1b-4d87-bf2b-f0a699b85b3b",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "is this needed? We import everything else by fully qualifying",
        "createdAt" : "2019-10-14T10:12:36Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "68d8574c-b58c-4a1e-abc2-1b47607e9d36",
        "parentId" : "3b7fd53d-dc1b-4d87-bf2b-f0a699b85b3b",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "org.eclipse.lsp4j.Position and scala.reflect.internal.Position are clashing",
        "createdAt" : "2019-10-14T15:50:26Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -2,6 +2,8 @@ package scala.meta.internal.pc\n \n import org.eclipse.lsp4j.jsonrpc.messages.{Either => JEither}\n import org.eclipse.lsp4j.Hover\n+import org.eclipse.lsp4j.Location\n+import org.eclipse.{lsp4j => l}"
  },
  {
    "id" : "16e64416-4d96-4786-bb47-7df236fdfd16",
    "prId" : 978,
    "comments" : [
      {
        "id" : "8722a592-8f0a-48a0-87a5-c19529a0b939",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "remove",
        "createdAt" : "2019-10-14T10:22:51Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -163,6 +219,7 @@ class HoverProvider(val compiler: MetalsGlobal, params: OffsetParams) {\n       pos: Position,\n       range: Position\n   ): Option[Hover] = {\n+    tpe.typeSymbol"
  },
  {
    "id" : "60c060db-9fc0-486f-ab1e-28e4dfbf8943",
    "prId" : 978,
    "comments" : [
      {
        "id" : "868c75eb-0d90-42c8-9edf-0d5515e0451f",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "`getTree` -> `typedTree` and also use it in the `hover` method. ",
        "createdAt" : "2019-10-14T10:27:49Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -11,6 +13,60 @@ import scala.meta.internal.jdk.CollectionConverters._\n class HoverProvider(val compiler: MetalsGlobal, params: OffsetParams) {\n   import compiler._\n \n+  def getTree: Option[Tree] = {"
  },
  {
    "id" : "de1648fc-0938-4e3b-959d-fe4711cceba7",
    "prId" : 978,
    "comments" : [
      {
        "id" : "472654df-5b0b-4c9f-93c5-2e70d18cff44",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Does it cover all cases from `hover`?",
        "createdAt" : "2019-10-14T10:37:03Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -11,6 +13,60 @@ import scala.meta.internal.jdk.CollectionConverters._\n class HoverProvider(val compiler: MetalsGlobal, params: OffsetParams) {\n   import compiler._\n \n+  def getTree: Option[Tree] = {\n+    if (params.isWhitespace) {\n+      None\n+    } else {\n+      val unit = addCompilationUnit(\n+        code = params.text(),\n+        filename = params.filename(),\n+        cursor = None\n+      )\n+      val pos = unit.position(params.offset())\n+      Some(typedHoverTreeAt(pos))\n+    }\n+  }\n+\n+  def getTypeSymbol: Option[Symbol] = {\n+    getTree match {\n+      case Some(tree)"
  },
  {
    "id" : "72c3702c-2108-4f97-9c4f-c5b48ae365af",
    "prId" : 978,
    "comments" : [
      {
        "id" : "b9115be1-577f-43b5-be6b-85475ce6faf2",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "`getTypeSymbol` -> `typeSymbol`",
        "createdAt" : "2019-10-14T10:38:44Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -11,6 +13,60 @@ import scala.meta.internal.jdk.CollectionConverters._\n class HoverProvider(val compiler: MetalsGlobal, params: OffsetParams) {\n   import compiler._\n \n+  def getTree: Option[Tree] = {\n+    if (params.isWhitespace) {\n+      None\n+    } else {\n+      val unit = addCompilationUnit(\n+        code = params.text(),\n+        filename = params.filename(),\n+        cursor = None\n+      )\n+      val pos = unit.position(params.offset())\n+      Some(typedHoverTreeAt(pos))\n+    }\n+  }\n+\n+  def getTypeSymbol: Option[Symbol] = {"
  },
  {
    "id" : "336041ec-09f0-43e2-b5e3-f6adb9847712",
    "prId" : 978,
    "comments" : [
      {
        "id" : "4914573a-7534-498a-8040-b9905c259431",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Return empty - let's not throw exceptions here.",
        "createdAt" : "2019-10-14T10:39:18Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -11,6 +13,60 @@ import scala.meta.internal.jdk.CollectionConverters._\n class HoverProvider(val compiler: MetalsGlobal, params: OffsetParams) {\n   import compiler._\n \n+  def getTree: Option[Tree] = {\n+    if (params.isWhitespace) {\n+      None\n+    } else {\n+      val unit = addCompilationUnit(\n+        code = params.text(),\n+        filename = params.filename(),\n+        cursor = None\n+      )\n+      val pos = unit.position(params.offset())\n+      Some(typedHoverTreeAt(pos))\n+    }\n+  }\n+\n+  def getTypeSymbol: Option[Symbol] = {\n+    getTree match {\n+      case Some(tree)\n+          if tree.symbol.isTypeSymbol || tree.symbol.isMethod || tree.symbol.isConstructor =>\n+        Some(tree.symbol)\n+      case Some(tree) if tree.tpe.isDefined =>\n+        Some(tree.tpe.typeSymbol)\n+      case Some(tree) if tree.children.nonEmpty =>\n+        Some(tree.children.head.tpe.typeSymbol)\n+      case Some(tree) =>\n+        val expTree = expandRangeToEnclosingApply(tree.pos)\n+        if (expTree.tpe.isDefined) Some(expTree.tpe.typeSymbol)\n+        else None\n+      case _ => None\n+    }\n+  }\n+\n+  def typeDefinition: Option[l.Location] = {\n+    val symOption = getTypeSymbol\n+    symOption match {\n+      case NoSymbol => throw new IllegalArgumentException"
  },
  {
    "id" : "52fd8b8d-0065-4f11-b14c-c9285d4ed5ab",
    "prId" : 978,
    "comments" : [
      {
        "id" : "a070cd4a-db5a-4207-9463-03f7c11a765a",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Not sure I understand? If we are at a method we should most likely go to a type definition of a method. \r\n\r\nFor sure checking if symbol starts with method seems a bad idea.",
        "createdAt" : "2019-10-14T10:43:27Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -11,6 +12,60 @@ import scala.meta.internal.jdk.CollectionConverters._\n class HoverProvider(val compiler: MetalsGlobal, params: OffsetParams) {\n   import compiler._\n \n+  def getTree: Option[Tree] = {\n+    if (params.isWhitespace) {\n+      None\n+    } else {\n+      val unit = addCompilationUnit(\n+        code = params.text(),\n+        filename = params.filename(),\n+        cursor = None\n+      )\n+      val pos = unit.position(params.offset())\n+      Some(typedHoverTreeAt(pos))\n+    }\n+  }\n+\n+  def getTypeSymbol: Option[Symbol] = {\n+    getTree match {\n+      case Some(tree)\n+          if tree.symbol.isTypeSymbol || tree.symbol.isMethod || tree.symbol.isConstructor =>\n+        Some(tree.symbol)\n+      case Some(tree) if tree.tpe.isDefined =>\n+        Some(tree.tpe.typeSymbol)\n+      case Some(tree) if tree.children.nonEmpty =>\n+        Some(tree.children.head.tpe.typeSymbol)\n+      case Some(tree) =>\n+        val expTree = expandRangeToEnclosingApply(tree.pos)\n+        if (expTree.tpe.isDefined) Some(expTree.tpe.typeSymbol)\n+        else None\n+      case _ => None\n+    }\n+  }\n+\n+  def typeDefinition: Option[l.Location] = {\n+    val symOption = getTypeSymbol\n+    symOption match {\n+      case NoSymbol => throw new IllegalArgumentException\n+      case Some(symbol) if symbol.toString.startsWith(\"method\") =>"
  },
  {
    "id" : "1280bdc2-c0ba-4473-93b8-ce9118e14321",
    "prId" : 978,
    "comments" : [
      {
        "id" : "b3ee496e-6af5-4ce9-a38c-0ad595505cd3",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Shouldn't we have a type symbol already in `symOption` ?",
        "createdAt" : "2019-10-14T10:47:48Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -11,6 +12,60 @@ import scala.meta.internal.jdk.CollectionConverters._\n class HoverProvider(val compiler: MetalsGlobal, params: OffsetParams) {\n   import compiler._\n \n+  def getTree: Option[Tree] = {\n+    if (params.isWhitespace) {\n+      None\n+    } else {\n+      val unit = addCompilationUnit(\n+        code = params.text(),\n+        filename = params.filename(),\n+        cursor = None\n+      )\n+      val pos = unit.position(params.offset())\n+      Some(typedHoverTreeAt(pos))\n+    }\n+  }\n+\n+  def getTypeSymbol: Option[Symbol] = {\n+    getTree match {\n+      case Some(tree)\n+          if tree.symbol.isTypeSymbol || tree.symbol.isMethod || tree.symbol.isConstructor =>\n+        Some(tree.symbol)\n+      case Some(tree) if tree.tpe.isDefined =>\n+        Some(tree.tpe.typeSymbol)\n+      case Some(tree) if tree.children.nonEmpty =>\n+        Some(tree.children.head.tpe.typeSymbol)\n+      case Some(tree) =>\n+        val expTree = expandRangeToEnclosingApply(tree.pos)\n+        if (expTree.tpe.isDefined) Some(expTree.tpe.typeSymbol)\n+        else None\n+      case _ => None\n+    }\n+  }\n+\n+  def typeDefinition: Option[l.Location] = {\n+    val symOption = getTypeSymbol\n+    symOption match {\n+      case NoSymbol => throw new IllegalArgumentException\n+      case Some(symbol) if symbol.toString.startsWith(\"method\") =>\n+        val pos = symbol.asMethod.pos\n+\n+        val uri = pos.source.toString\n+        val startPosition = new l.Position(pos.line, pos.column)\n+        Some(new l.Location(uri, new l.Range(startPosition, startPosition)))\n+      case Some(symbol) =>\n+        compiler.search\n+          .definition(compiler.semanticdbSymbol(symbol.tpe.typeSymbol))"
  },
  {
    "id" : "347234f7-a1f9-48c1-b874-758beee7fccb",
    "prId" : 978,
    "comments" : [
      {
        "id" : "27b2dc81-299c-450a-ab3a-bd7ba8bf9bee",
        "parentId" : null,
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "the comment should be moved with the method. Besides that, it now looks like explaining another method (`toHover`), which is wrong.",
        "createdAt" : "2020-04-01T14:41:30Z",
        "updatedAt" : "2020-04-02T17:08:31Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : 28,
    "diffHunk" : "@@ -123,38 +118,6 @@ class HoverProvider(val compiler: MetalsGlobal, params: OffsetParams) {\n    *   expanded = List(1).map(_.toString)\n    * }}}\n    */"
  },
  {
    "id" : "40cebcad-b817-423d-9efc-bc873d3cbf49",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "2d36840e-718d-48ac-9781-900f3da1716c",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "🙈 ",
        "createdAt" : "2019-10-28T18:12:30Z",
        "updatedAt" : "2019-10-28T18:12:40Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9ab9f784-8d41-4c65-a659-5490a180fade",
        "parentId" : "2d36840e-718d-48ac-9781-900f3da1716c",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "That's the only thing we didn't check haha",
        "createdAt" : "2019-10-28T18:25:17Z",
        "updatedAt" : "2019-10-28T18:25:17Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4d8ee2c0f2d03855ca080a7ba9516d00c453a89c",
    "line" : 14,
    "diffHunk" : "@@ -32,7 +33,8 @@ class HoverProvider(val compiler: MetalsGlobal, params: OffsetParams) {\n           val expanded = expandRangeToEnclosingApply(pos)\n           if (expanded != null &&\n             expanded.tpe != null &&\n-            tree.symbol != null) {\n+            tree.symbol != null &&\n+            expanded.symbol != null) {"
  },
  {
    "id" : "2e263d38-2d58-4d56-beb9-a98ddabdc4d5",
    "prId" : 1522,
    "comments" : [
      {
        "id" : "006bfd98-9468-43c1-a312-ae7318627408",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "I have this in here twice. Also in the `DecorationWorksheetPublisher`. Should I just leave as is, or do you think I should combine them and put them somewhere? Mainly I wasn't sure where to stick them.",
        "createdAt" : "2020-03-21T17:58:43Z",
        "updatedAt" : "2020-03-22T12:53:13Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a100c667-f371-4d0b-92b9-7a80e839fe11",
        "parentId" : "006bfd98-9468-43c1-a312-ae7318627408",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "maybe we could have method like `makeScalaMarkupContent(body)` that would handle all boilerplate(making markupContent with kind Markdown and wrapping body in scala tag). We could use that in both places.",
        "createdAt" : "2020-03-21T23:56:42Z",
        "updatedAt" : "2020-03-22T12:53:13Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cafe20a8-f2e4-4075-8757-a464af00a8e9",
        "parentId" : "006bfd98-9468-43c1-a312-ae7318627408",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Sounds good. I realized we had a `HoverMarkup` object that I could reuse, and just added another apply to it.",
        "createdAt" : "2020-03-22T12:44:36Z",
        "updatedAt" : "2020-03-22T12:53:13Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a1f157044a3d540463d614d0851071783f10aed1",
    "line" : null,
    "diffHunk" : "@@ -1,17 +1,19 @@\n package scala.meta.internal.pc\n \n-import org.eclipse.lsp4j.jsonrpc.messages.{Either => JEither}\n import org.eclipse.lsp4j.Hover\n-import org.eclipse.lsp4j.MarkedString\n+import org.eclipse.lsp4j.MarkupContent\n+import org.eclipse.lsp4j.MarkupKind\n import scala.meta.internal.mtags.MtagsEnrichments._\n import scala.meta.pc.OffsetParams\n import scala.reflect.internal.{Flags => gf}\n-import scala.meta.internal.jdk.CollectionConverters._\n import scala.util.control.NonFatal\n \n class HoverProvider(val compiler: MetalsGlobal, params: OffsetParams) {\n   import compiler._\n \n+  private val scalaMarkdownTics = \"```scala\"\n+  private val endTics = \"```\""
  },
  {
    "id" : "9b77abd9-b632-4945-9081-10ce82cb0221",
    "prId" : 1522,
    "comments" : [
      {
        "id" : "4ad54a96-d2d2-4e51-b9ee-af997b0b9d25",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "I misunderstood this at first and put `scala`, but it looks like this should be `plainText` or `markdown` according to the spec. Then , you put ````scala` in the actual value. They give an example in the LSP docs.\r\n\r\nhttps://microsoft.github.io/language-server-protocol/specifications/specification-current/#markupContent",
        "createdAt" : "2020-03-21T18:00:02Z",
        "updatedAt" : "2020-03-22T12:53:13Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a1f157044a3d540463d614d0851071783f10aed1",
    "line" : 26,
    "diffHunk" : "@@ -175,14 +177,13 @@ class HoverProvider(val compiler: MetalsGlobal, params: OffsetParams) {\n     else if (symbol.hasPackageFlag || symbol.hasModuleFlag) {\n       Some(\n         new Hover(\n-          List(\n-            JEither.forRight[String, MarkedString](\n-              new MarkedString(\n-                \"scala\",\n-                s\"${symbol.javaClassSymbol.keyString} ${symbol.fullName}\"\n-              )\n-            )\n-          ).asJava\n+          new MarkupContent(\n+            MarkupKind.MARKDOWN,"
  }
]