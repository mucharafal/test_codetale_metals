[
  {
    "id" : "1b3a0a7d-f68c-49ba-9a26-7bb05d67dd8c",
    "prId" : 712,
    "comments" : [
      {
        "id" : "6c149a31-114a-4458-8d38-1af564bb53da",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "If we have try then maybe `catch` too? And we could consider apply as being useful to include",
        "createdAt" : "2019-05-07T14:46:14Z",
        "updatedAt" : "2019-05-24T13:32:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f0e6b876-198e-40da-9f0c-acbbf4b3a876",
        "parentId" : "6c149a31-114a-4458-8d38-1af564bb53da",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Context-sensitive keywords like `catch`, `finally`, `yield` and `extends` can be left for a separate PR.",
        "createdAt" : "2019-05-07T15:17:11Z",
        "updatedAt" : "2019-05-24T13:32:42Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "150fc46a-9587-4876-9e7f-a74921e01066",
        "parentId" : "6c149a31-114a-4458-8d38-1af564bb53da",
        "author" : {
          "login" : "markus1189",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/591567?u=e016e1307543e29ba87d441e29e8845119dcf3a6&v=4"
        },
        "body" : "apply is not a keyword though, so I would not include it here",
        "createdAt" : "2019-05-08T11:33:02Z",
        "updatedAt" : "2019-05-24T13:32:42Z",
        "lastEditedBy" : {
          "login" : "markus1189",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/591567?u=e016e1307543e29ba87d441e29e8845119dcf3a6&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ccd4b258-306a-439f-8196-144d7dfed870",
        "parentId" : "6c149a31-114a-4458-8d38-1af564bb53da",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Yeah, I just thought it would be useful to have it as an additional completion since it's used very often and plays a role of a keyword really. But perfectly understandable not to include it here.",
        "createdAt" : "2019-05-08T11:36:49Z",
        "updatedAt" : "2019-05-24T13:32:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c468269d2e0e47b5eaffc75cab0b2c825678b7fe",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,139 @@\n+package scala.meta.internal.pc\n+\n+import org.eclipse.{lsp4j => l}\n+\n+import scala.collection.mutable\n+\n+trait Keywords { this: MetalsGlobal =>\n+\n+  private[this] def blockDefinitions: List[String] =\n+    List(\"def\", \"val\", \"var\", \"lazy val\", \"type\")\n+\n+  private[this] def toplevelDefinitions: List[String] =\n+    List(\"case class\", \"class\", \"trait\", \"object\")\n+\n+  private[this] def definitionModifiers =\n+    List(\"final\", \"private\", \"protected\", \"sealed trait\",\n+      \"sealed abstract class\", \"abstract\")\n+\n+  // Categories\n+\n+  private[this] def expressionKeywords: List[String] =\n+    List(\"super\", \"this\", \"if\", \"for\", \"while\", \"do\", \"true\", \"false\", \"new\","
  },
  {
    "id" : "c26faf54-8c07-4bf6-867c-6e7176c502c8",
    "prId" : 712,
    "comments" : [
      {
        "id" : "676af9d2-9036-40bb-affd-9b44467e68c7",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Could we drop the additional newlines?",
        "createdAt" : "2019-05-07T14:47:47Z",
        "updatedAt" : "2019-05-24T13:32:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "29a32a48-bf30-4448-826a-0b470febc42c",
        "parentId" : "676af9d2-9036-40bb-affd-9b44467e68c7",
        "author" : {
          "login" : "markus1189",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/591567?u=e016e1307543e29ba87d441e29e8845119dcf3a6&v=4"
        },
        "body" : "done",
        "createdAt" : "2019-05-08T11:29:33Z",
        "updatedAt" : "2019-05-24T13:32:42Z",
        "lastEditedBy" : {
          "login" : "markus1189",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/591567?u=e016e1307543e29ba87d441e29e8845119dcf3a6&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c468269d2e0e47b5eaffc75cab0b2c825678b7fe",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,139 @@\n+package scala.meta.internal.pc\n+\n+import org.eclipse.{lsp4j => l}\n+\n+import scala.collection.mutable\n+\n+trait Keywords { this: MetalsGlobal =>\n+\n+  private[this] def blockDefinitions: List[String] =\n+    List(\"def\", \"val\", \"var\", \"lazy val\", \"type\")\n+\n+  private[this] def toplevelDefinitions: List[String] =\n+    List(\"case class\", \"class\", \"trait\", \"object\")\n+\n+  private[this] def definitionModifiers =\n+    List(\"final\", \"private\", \"protected\", \"sealed trait\",\n+      \"sealed abstract class\", \"abstract\")\n+\n+  // Categories\n+\n+  private[this] def expressionKeywords: List[String] =\n+    List(\"super\", \"this\", \"if\", \"for\", \"while\", \"do\", \"true\", \"false\", \"new\",\n+      \"null\", \"try\")\n+\n+  private[this] def blockKeywords: List[String] =\n+    List(\"implicit\") ++ expressionKeywords ++ blockDefinitions\n+\n+  private[this] def templateKeywords: List[String] =\n+    List(\"implicit\", \"final\") ++ expressionKeywords ++ blockDefinitions ++ toplevelDefinitions ++ definitionModifiers\n+\n+  private[this] def toplevelKeywords: List[String] =\n+    List(\"package\", \"import\") ++ toplevelDefinitions ++ definitionModifiers\n+\n+  private[this] def defKeywords: List[String] = List(\"return\")\n+\n+  def keywords(\n+      pos: Position,\n+      editRange: l.Range,\n+      latestEnclosing: List[Tree]\n+  ): List[Member] = {\n+    getIdentifierName(latestEnclosing, pos).fold(List[Member]()) { name =>\n+      val keywords = mutable.Set.empty[String]\n+\n+      if (isExpression(latestEnclosing)) keywords ++= expressionKeywords\n+\n+      if (isStatement(latestEnclosing)) keywords ++= templateKeywords\n+\n+      if (isToplevel(latestEnclosing)) keywords ++= toplevelKeywords\n+\n+      if (isBlock(latestEnclosing)) keywords ++= blockKeywords\n+\n+      if (isMethodBody(latestEnclosing)) keywords ++= defKeywords\n+\n+      createMembers(keywords.toList, editRange, name)\n+    }\n+  }\n+\n+  private[this] def createMembers(\n+      keywords: List[String],\n+      editRange: l.Range,\n+      name: Name\n+  ): List[Member] = {\n+    keywords.collect {\n+      case kw if kw.startsWith(name.toString.stripSuffix(CURSOR)) =>\n+        mkTextEditMember(kw, editRange)\n+    }\n+  }\n+\n+  private[this] def getIdentifierName(\n+      enclosing: List[Tree],\n+      pos: Position\n+  ): Option[Name] = {\n+    enclosing match {\n+      case Ident(name) :: _ => Some(name)\n+      case PackageDef(ref, _) :: _ if !ref.pos.includes(pos) =>\n+        var i = pos.point\n+"
  },
  {
    "id" : "17d719c8-b13b-4832-b7d3-8f0d44c91e09",
    "prId" : 712,
    "comments" : [
      {
        "id" : "039b3f55-d7fe-4435-a7d3-45563aec1ad1",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "also, `throw`?",
        "createdAt" : "2019-05-07T15:00:27Z",
        "updatedAt" : "2019-05-24T13:32:42Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e4bee42b-9724-47c9-b29e-f4adc2f7b9e9",
        "parentId" : "039b3f55-d7fe-4435-a7d3-45563aec1ad1",
        "author" : {
          "login" : "markus1189",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/591567?u=e016e1307543e29ba87d441e29e8845119dcf3a6&v=4"
        },
        "body" : "good catch :) added as an expression keyword",
        "createdAt" : "2019-05-08T11:31:03Z",
        "updatedAt" : "2019-05-24T13:32:42Z",
        "lastEditedBy" : {
          "login" : "markus1189",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/591567?u=e016e1307543e29ba87d441e29e8845119dcf3a6&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c468269d2e0e47b5eaffc75cab0b2c825678b7fe",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,139 @@\n+package scala.meta.internal.pc\n+\n+import org.eclipse.{lsp4j => l}\n+\n+import scala.collection.mutable\n+\n+trait Keywords { this: MetalsGlobal =>\n+\n+  private[this] def blockDefinitions: List[String] =\n+    List(\"def\", \"val\", \"var\", \"lazy val\", \"type\")\n+\n+  private[this] def toplevelDefinitions: List[String] =\n+    List(\"case class\", \"class\", \"trait\", \"object\")\n+\n+  private[this] def definitionModifiers =\n+    List(\"final\", \"private\", \"protected\", \"sealed trait\",\n+      \"sealed abstract class\", \"abstract\")\n+\n+  // Categories\n+\n+  private[this] def expressionKeywords: List[String] =\n+    List(\"super\", \"this\", \"if\", \"for\", \"while\", \"do\", \"true\", \"false\", \"new\",\n+      \"null\", \"try\")\n+\n+  private[this] def blockKeywords: List[String] =\n+    List(\"implicit\") ++ expressionKeywords ++ blockDefinitions\n+\n+  private[this] def templateKeywords: List[String] =\n+    List(\"implicit\", \"final\") ++ expressionKeywords ++ blockDefinitions ++ toplevelDefinitions ++ definitionModifiers\n+\n+  private[this] def toplevelKeywords: List[String] =\n+    List(\"package\", \"import\") ++ toplevelDefinitions ++ definitionModifiers\n+\n+  private[this] def defKeywords: List[String] = List(\"return\")"
  },
  {
    "id" : "b70b20e3-ffb9-47cc-9bd4-ba3ecaa47526",
    "prId" : 712,
    "comments" : [
      {
        "id" : "00e19bed-e45e-4fb4-a487-7cce8b355186",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "```suggestion\r\n  private[this] def needsTrailingSpace(keyword: String): Boolean =\r\n```",
        "createdAt" : "2019-05-07T15:02:10Z",
        "updatedAt" : "2019-05-24T13:32:42Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "94286a63-c1e6-4913-881a-22f4b4c7b240",
        "parentId" : "00e19bed-e45e-4fb4-a487-7cce8b355186",
        "author" : {
          "login" : "markus1189",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/591567?u=e016e1307543e29ba87d441e29e8845119dcf3a6&v=4"
        },
        "body" : "I agree that this sounds better ;)",
        "createdAt" : "2019-05-08T11:31:42Z",
        "updatedAt" : "2019-05-24T13:32:42Z",
        "lastEditedBy" : {
          "login" : "markus1189",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/591567?u=e016e1307543e29ba87d441e29e8845119dcf3a6&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c468269d2e0e47b5eaffc75cab0b2c825678b7fe",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,139 @@\n+package scala.meta.internal.pc\n+\n+import org.eclipse.{lsp4j => l}\n+\n+import scala.collection.mutable\n+\n+trait Keywords { this: MetalsGlobal =>\n+\n+  private[this] def blockDefinitions: List[String] =\n+    List(\"def\", \"val\", \"var\", \"lazy val\", \"type\")\n+\n+  private[this] def toplevelDefinitions: List[String] =\n+    List(\"case class\", \"class\", \"trait\", \"object\")\n+\n+  private[this] def definitionModifiers =\n+    List(\"final\", \"private\", \"protected\", \"sealed trait\",\n+      \"sealed abstract class\", \"abstract\")\n+\n+  // Categories\n+\n+  private[this] def expressionKeywords: List[String] =\n+    List(\"super\", \"this\", \"if\", \"for\", \"while\", \"do\", \"true\", \"false\", \"new\",\n+      \"null\", \"try\")\n+\n+  private[this] def blockKeywords: List[String] =\n+    List(\"implicit\") ++ expressionKeywords ++ blockDefinitions\n+\n+  private[this] def templateKeywords: List[String] =\n+    List(\"implicit\", \"final\") ++ expressionKeywords ++ blockDefinitions ++ toplevelDefinitions ++ definitionModifiers\n+\n+  private[this] def toplevelKeywords: List[String] =\n+    List(\"package\", \"import\") ++ toplevelDefinitions ++ definitionModifiers\n+\n+  private[this] def defKeywords: List[String] = List(\"return\")\n+\n+  def keywords(\n+      pos: Position,\n+      editRange: l.Range,\n+      latestEnclosing: List[Tree]\n+  ): List[Member] = {\n+    getIdentifierName(latestEnclosing, pos).fold(List[Member]()) { name =>\n+      val keywords = mutable.Set.empty[String]\n+\n+      if (isExpression(latestEnclosing)) keywords ++= expressionKeywords\n+\n+      if (isStatement(latestEnclosing)) keywords ++= templateKeywords\n+\n+      if (isToplevel(latestEnclosing)) keywords ++= toplevelKeywords\n+\n+      if (isBlock(latestEnclosing)) keywords ++= blockKeywords\n+\n+      if (isMethodBody(latestEnclosing)) keywords ++= defKeywords\n+\n+      createMembers(keywords.toList, editRange, name)\n+    }\n+  }\n+\n+  private[this] def createMembers(\n+      keywords: List[String],\n+      editRange: l.Range,\n+      name: Name\n+  ): List[Member] = {\n+    keywords.collect {\n+      case kw if kw.startsWith(name.toString.stripSuffix(CURSOR)) =>\n+        mkTextEditMember(kw, editRange)\n+    }\n+  }\n+\n+  private[this] def getIdentifierName(\n+      enclosing: List[Tree],\n+      pos: Position\n+  ): Option[Name] = {\n+    enclosing match {\n+      case Ident(name) :: _ => Some(name)\n+      case PackageDef(ref, _) :: _ if !ref.pos.includes(pos) =>\n+        var i = pos.point\n+\n+        val chars = pos.source.content\n+\n+        while (i >= 0 && !chars(i).isWhitespace) {\n+          i -= 1\n+        }\n+\n+        if (i < 0) None\n+        else Some(TermName(new String(chars, i + 1, pos.point - i - 1)))\n+      case _ => None\n+    }\n+  }\n+\n+  private[this] def mkTextEditMember(\n+      keyword: String,\n+      range: l.Range\n+  ): TextEditMember = {\n+    val newText = if (addTrailingSpace(keyword)) keyword + \" \" else keyword\n+\n+    new TextEditMember(\n+      keyword,\n+      new l.TextEdit(range, newText),\n+      NoSymbol.newErrorSymbol(TermName(keyword)).setInfo(NoType),\n+      label = Some(keyword)\n+    )\n+  }\n+\n+  private[this] def isExpression(enclosing: List[Tree]): Boolean =\n+    enclosing match {\n+      case Ident(_) :: Template(_, _, _) :: _ => true\n+      case Ident(_) :: ValOrDefDef(_, _, _, _) :: _ => true\n+      case Ident(_) :: Apply(_, _) :: _ => true\n+      case _ => false\n+    }\n+\n+  private[this] def isStatement(enclosing: List[Tree]): Boolean =\n+    enclosing match {\n+      case Ident(_) :: Template(_, _, _) :: _ => true\n+      case Ident(_) :: ValOrDefDef(_, _, _, _) :: _ => true\n+      case _ => false\n+    }\n+\n+  private[this] def isToplevel(enclosing: List[Tree]): Boolean =\n+    enclosing match {\n+      case PackageDef(_, _) :: _ => true\n+      case _ => false\n+    }\n+\n+  private[this] def isMethodBody(enclosing: List[Tree]): Boolean =\n+    enclosing match {\n+      case Ident(_) :: DefDef(_, _, _, _, _, _) :: _ => true\n+      case _ => false\n+    }\n+\n+  private[this] def isBlock(enclosing: List[Tree]): Boolean =\n+    enclosing match {\n+      case Ident(_) :: Block(_, _) :: _ => true\n+      case _ => false\n+    }\n+\n+  private[this] def addTrailingSpace(keyword: String): Boolean ="
  },
  {
    "id" : "4e738f8b-4efc-4ec2-b01a-d92e54d32de6",
    "prId" : 928,
    "comments" : [
      {
        "id" : "118b6d3a-c51f-4588-be7a-334f397c1ffb",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "why binding `other`?",
        "createdAt" : "2019-09-23T10:54:19Z",
        "updatedAt" : "2019-09-23T10:54:20Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "abe2149e-1fe9-41bc-8533-b5026960e13b",
        "parentId" : "118b6d3a-c51f-4588-be7a-334f397c1ffb",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed, sorry!",
        "createdAt" : "2019-09-23T11:04:19Z",
        "updatedAt" : "2019-09-23T11:04:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e1af782c6b611e6febe1616cb1b8f55a73a24d9c",
    "line" : null,
    "diffHunk" : "@@ -115,7 +116,7 @@ trait Keywords { this: MetalsGlobal =>\n   private def isBlock(enclosing: List[Tree]): Boolean =\n     enclosing match {\n       case Ident(_) :: Block(_, _) :: _ => true\n-      case _ => false\n+      case other => false"
  }
]