[
  {
    "id" : "ba6445aa-6824-4c94-9c0d-9737747f2e88",
    "prId" : 1034,
    "comments" : [
      {
        "id" : "2a00ef7e-d9ea-4406-8e12-224c0d7b5fcf",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Iâ€™m not sure I see the value in cases like this, is there an option to avoid the annotation in trivial cases?",
        "createdAt" : "2019-10-31T22:10:07Z",
        "updatedAt" : "2019-11-01T21:34:31Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5caa84a6-15bf-44ac-a548-58453634a660",
        "parentId" : "2a00ef7e-d9ea-4406-8e12-224c0d7b5fcf",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I agree this particular case is quite noisy, refactored this code to use `new TrieMap[K, V]()`, which the rewrite allows to be unannotated.",
        "createdAt" : "2019-11-01T21:32:25Z",
        "updatedAt" : "2019-11-01T21:36:28Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e53354e4d5f4086a39ad4aeabfa1e94592eb9fd9",
    "line" : null,
    "diffHunk" : "@@ -19,7 +19,8 @@ import scala.meta.internal.mtags.GlobalSymbolIndex\n  * Handles both javadoc and scaladoc.\n  */\n class Docstrings(index: GlobalSymbolIndex) {\n-  val cache = TrieMap.empty[String, SymbolDocumentation]\n+  val cache: TrieMap[String, SymbolDocumentation] ="
  },
  {
    "id" : "4ba7b7ae-d959-4ab2-a557-1cd5b17e3989",
    "prId" : 1473,
    "comments" : [
      {
        "id" : "68f9dabf-79ad-499b-9206-f08f6b5709d4",
        "parentId" : null,
        "author" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Though we won't expire the cache for Javadoc symbols, it might be better to pass `occFn` function to `JavadocIndexer` for consistency?",
        "createdAt" : "2020-03-01T23:40:45Z",
        "updatedAt" : "2020-03-04T14:09:01Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d4883f7d7ca5f330ddb180759e30d64e9622bf84",
    "line" : null,
    "diffHunk" : "@@ -54,14 +66,17 @@ class Docstrings(index: GlobalSymbolIndex) {\n     }\n   }\n \n-  private def indexSymbolDefinition(defn: SymbolDefinition): Unit = {\n+  private def indexSymbolDefinition(\n+      defn: SymbolDefinition,\n+      occFn: Option[SymbolOccurrence => Unit]\n+  ): Unit = {\n     defn.path.toLanguage match {\n       case Language.JAVA =>\n         JavadocIndexer\n           .foreach(defn.path.toInput)(cacheSymbol)"
  },
  {
    "id" : "858c87db-19bc-43c0-8c3e-d36933c8be85",
    "prId" : 1473,
    "comments" : [
      {
        "id" : "bea06b4e-38ac-4395-8efd-8dc62f746200",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Why don't we just do:\r\n`symbols.foreach(cache.remove)` \r\n?",
        "createdAt" : "2020-03-02T13:48:44Z",
        "updatedAt" : "2020-03-04T14:09:01Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d4883f7d7ca5f330ddb180759e30d64e9622bf84",
    "line" : null,
    "diffHunk" : "@@ -37,15 +38,26 @@ class Docstrings(index: GlobalSymbolIndex) {\n     }\n   }\n \n+  def didChange(symbols: Seq[String]): Unit = {\n+    symbols.foreach(sym => indexSymbol(sym, Some(expireCacheSymbol)))"
  },
  {
    "id" : "54ade311-3ee2-4a74-a4e9-6567ab05bdc5",
    "prId" : 1473,
    "comments" : [
      {
        "id" : "8573976b-07ee-4f2f-9cc3-440a4c4b5afd",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Can we have an explicit method to expire and use: \r\n```scala\r\nclass Deindexer(\r\n    input: Input.VirtualFile\r\n) extends ScalaMtags(input) {\r\n  override def visitOccurrence(\r\n      occ: SymbolOccurrence,\r\n      sinfo: SymbolInformation,\r\n      owner: String\r\n  ): Unit = {\r\n    cache.remove(occ.symbol)\r\n  }\r\n}\r\n\r\n  def expireSymbolDefinition(path : AbsolutePath): Unit = {\r\n    path.toLanguage match {\r\n      case Language.SCALA =>\r\n        new Deindexer(path.toInput).indexRoot()\r\n      case _ =>\r\n    }\r\n  }\r\n```\r\n`expireSymbolDefinition` can be explicitely run from `didChange`\r\n\r\nThis is more explicit and less confusing than passing the function.",
        "createdAt" : "2020-03-02T15:34:40Z",
        "updatedAt" : "2020-03-04T14:09:01Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b42f77b4-d0b9-47d9-91b2-91bdcfe03b5f",
        "parentId" : "8573976b-07ee-4f2f-9cc3-440a4c4b5afd",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "This should be actually `ScalaDeindexer` right?\r\nIs it okay to ignore java files in this case?",
        "createdAt" : "2020-03-04T09:07:25Z",
        "updatedAt" : "2020-03-04T14:09:01Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d4883f7d7ca5f330ddb180759e30d64e9622bf84",
    "line" : null,
    "diffHunk" : "@@ -54,14 +66,17 @@ class Docstrings(index: GlobalSymbolIndex) {\n     }\n   }\n \n-  private def indexSymbolDefinition(defn: SymbolDefinition): Unit = {\n+  private def indexSymbolDefinition("
  },
  {
    "id" : "abf531c1-3290-4653-965d-a9978be07896",
    "prId" : 1538,
    "comments" : [
      {
        "id" : "2f172c06-1175-43c6-bd31-91cd1730ed08",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Why do we need a separate `source` to check if this is Scala? Will `toIndexSource` not be a Scala file?",
        "createdAt" : "2020-03-31T17:36:12Z",
        "updatedAt" : "2020-05-21T11:17:43Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f62ef177-ca4f-46b7-83c2-dc50fac25d05",
        "parentId" : "2f172c06-1175-43c6-bd31-91cd1730ed08",
        "author" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "body" : "Good point, should be fixed now.",
        "createdAt" : "2020-04-05T22:17:44Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0681fa0b1417b7ac622101d279667c6900a2506e",
    "line" : null,
    "diffHunk" : "@@ -50,12 +50,15 @@ class Docstrings(index: GlobalSymbolIndex) {\n    * Otherwise, if we update the cache for symbols every time we save a file,\n    * metals will cache all symbols in files we've saved, and it consumes a considerable amount of memory.\n    *\n-   * @param path the absolute path for the source file to update.\n+   * @param source the absolute path for the source file to update.\n    */\n-  def expireSymbolDefinition(path: AbsolutePath): Unit = {\n-    path.toLanguage match {\n+  def expireSymbolDefinition(\n+      source: AbsolutePath,\n+      toIndexSource: AbsolutePath\n+  ): Unit = {\n+    source.toLanguage match {"
  },
  {
    "id" : "94b87fb1-958c-4e07-b800-5df9ecb01dc0",
    "prId" : 1538,
    "comments" : [
      {
        "id" : "e441cc9d-3bc3-4860-bba2-3d0122b9b748",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "These changes are not needed now.",
        "createdAt" : "2020-04-09T11:04:01Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "68fffc1c-4184-445b-8457-d8f37b29e96f",
        "parentId" : "e441cc9d-3bc3-4860-bba2-3d0122b9b748",
        "author" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "body" : "Indeed, should be fixed.",
        "createdAt" : "2020-04-11T15:36:46Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0681fa0b1417b7ac622101d279667c6900a2506e",
    "line" : null,
    "diffHunk" : "@@ -50,12 +50,14 @@ class Docstrings(index: GlobalSymbolIndex) {\n    * Otherwise, if we update the cache for symbols every time we save a file,\n    * metals will cache all symbols in files we've saved, and it consumes a considerable amount of memory.\n    *\n-   * @param path the absolute path for the source file to update.\n+   * @param source the absolute path for the source file to update.\n    */\n-  def expireSymbolDefinition(path: AbsolutePath): Unit = {"
  }
]