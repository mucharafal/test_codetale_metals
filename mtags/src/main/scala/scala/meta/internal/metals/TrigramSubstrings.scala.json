[
  {
    "id" : "79b34efb-8caa-416d-a2e4-fdb6103d2f46",
    "prId" : 763,
    "comments" : [
      {
        "id" : "dd35d344-0fa3-4326-a8ed-de8ed19f918f",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I've literally never in my life implemented an `Iterator`, but this shouldn't be hard I presume.",
        "createdAt" : "2019-06-13T11:18:04Z",
        "updatedAt" : "2019-06-18T18:13:44Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4ca337cf-1286-4518-acc4-a347419c30a4",
        "parentId" : "dd35d344-0fa3-4326-a8ed-de8ed19f918f",
        "author" : {
          "login" : "godenji",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/238557?u=8865824210ffb9c9957c081b01b6de07d95e0c1d&v=4"
        },
        "body" : "@gabro  see this scala 2.13 [write up](https://docs.scala-lang.org/overviews/core/custom-collections.html) by Odersky et al.\r\n```\r\ntrait CustomIterable { self =>\r\n  def iterator: Iterator[Foo] = new AbstractIterator[Foo] {\r\n    private var current = 0\r\n    def hasNext = current < self.length\r\n    def next(): Foo = {\r\n      val elem = self(current)\r\n      current += 1\r\n      elem\r\n    }\r\n  }\r\n\r\n  def children: List[Foo] // implement in extended classes\r\n  def apply(i: Int) = children(i)\r\n  def length = children.size\r\n}\r\n```",
        "createdAt" : "2019-06-16T12:42:54Z",
        "updatedAt" : "2019-06-18T18:13:44Z",
        "lastEditedBy" : {
          "login" : "godenji",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/238557?u=8865824210ffb9c9957c081b01b6de07d95e0c1d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8b8f8c663ffe7481455869fe747514f96e7e658b",
    "line" : null,
    "diffHunk" : "@@ -5,7 +5,10 @@ import java.lang.StringBuilder\n /**\n  * Returns all possible substrings of length 3 for the given string.\n  */\n-class TrigramSubstrings(string: String) extends Traversable[String] {\n+class TrigramSubstrings(string: String) extends Iterable[String] {\n+  // TODO(gabro)\n+  override def iterator: Iterator[String] = ???"
  },
  {
    "id" : "542e776c-2899-4d93-ac28-85c50d6ff3b5",
    "prId" : 763,
    "comments" : [
      {
        "id" : "50f8bede-41f0-4a40-8241-5aa8d2a084dc",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Same here, `collection.Seq` implemented by `ArrayBuffer` is fine",
        "createdAt" : "2019-06-16T09:08:53Z",
        "updatedAt" : "2019-06-18T18:13:44Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8b8f8c663ffe7481455869fe747514f96e7e658b",
    "line" : null,
    "diffHunk" : "@@ -43,7 +46,10 @@ object TrigramSubstrings {\n   def uppercased(\n       query: String,\n       maxCount: Int = 250\n-  ): Traversable[String] = new Traversable[String] {\n+  ): Iterable[String] = new Iterable[String] {"
  },
  {
    "id" : "bd3e86b9-1117-47e0-b722-724f5ac60d26",
    "prId" : 763,
    "comments" : [
      {
        "id" : "4cba8f9d-561c-4fa8-81b6-cca8984e0925",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Hmm, I'm wondering if we should do instead \r\n\r\n```scala\r\nobject TrigramSubstrings {\r\n  def foreach(string: String, fn: String => Unit): Unit = ...\r\n  def seq(string: String): Seq[String] = {\r\n    val buf = ArrayBuffer.empty[String]\r\n    foreach(string, trigram => buf += trigram)\r\n    buf.result()\r\n  }\r\n}\r\n```\r\n\r\nIt looks like we don't need the intermediary buffer in `Fuzzy`. This is a **very** hot path. ",
        "createdAt" : "2019-06-18T09:19:15Z",
        "updatedAt" : "2019-06-18T18:13:44Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8b8f8c663ffe7481455869fe747514f96e7e658b",
    "line" : null,
    "diffHunk" : "@@ -1,34 +1,40 @@\n package scala.meta.internal.metals\n \n import java.lang.StringBuilder\n+import scala.collection.mutable.ArrayBuffer\n \n-/**\n- * Returns all possible substrings of length 3 for the given string.\n- */\n-class TrigramSubstrings(string: String) extends Traversable[String] {\n-  override def foreach[U](f: String => U): Unit = {\n-    val N = string.length\n-    val arr = new Array[Char](3)\n-    var i = 0\n-    while (i < N) {\n-      var j = i + 1\n-      while (j < N) {\n-        var k = j + 1\n-        while (k < N) {\n-          arr(0) = string.charAt(i)\n-          arr(1) = string.charAt(j)\n-          arr(2) = string.charAt(k)\n-          f(new String(arr))\n-          k += 1\n+object TrigramSubstrings {\n+\n+  /**\n+   * Returns all possible substrings of length 3 for the given string.\n+   */\n+  def apply(string: String): ArrayBuffer[String] = {"
  }
]