[
  {
    "id" : "88c910e9-d392-4b6c-b880-19b1f697802e",
    "prId" : 332,
    "comments" : [
      {
        "id" : "4044b25d-83b4-4ef6-a876-a7392f6f12d8",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "double space between `symbol` and `disambiguators`",
        "createdAt" : "2018-10-13T12:36:33Z",
        "updatedAt" : "2018-10-17T09:17:09Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "34724346-1e7e-4bd5-b2db-da2b0ea0716f",
        "parentId" : "4044b25d-83b4-4ef6-a876-a7392f6f12d8",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Removed, only if we had a formatting tool that could reformat our comments ðŸ¤” ",
        "createdAt" : "2018-10-13T13:22:45Z",
        "updatedAt" : "2018-10-17T09:17:09Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "889b282a30a7ddd72b09da4b9328f7779b1cfae9",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,172 @@\n+package scala.meta.internal.mtags\n+\n+import com.thoughtworks.qdox._\n+import com.thoughtworks.qdox.model.JavaClass\n+import com.thoughtworks.qdox.model.JavaField\n+import com.thoughtworks.qdox.model.JavaMember\n+import com.thoughtworks.qdox.model.JavaMethod\n+import com.thoughtworks.qdox.model.JavaModel\n+import com.thoughtworks.qdox.parser.ParseException\n+import java.io.StringReader\n+import java.util.Comparator\n+import scala.collection.mutable\n+import scala.meta.inputs.Input\n+import scala.meta.inputs.Position\n+import scala.meta.internal.semanticdb.Language\n+import scala.meta.internal.semanticdb.SymbolInformation.Kind\n+import scala.meta.internal.semanticdb.SymbolInformation.Property\n+import scala.meta.internal.mtags.Enrichments._\n+\n+/**\n+ * Utility to generate method symbol  disambiguators according to SemanticDB spec."
  },
  {
    "id" : "bb1c6968-3c2a-41fc-bd9f-125c1a90b4df",
    "prId" : 332,
    "comments" : [
      {
        "id" : "7dd5586a-8929-4627-993f-744e384527fb",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Has this been reported? ðŸ˜‡ ",
        "createdAt" : "2018-10-13T12:37:18Z",
        "updatedAt" : "2018-10-17T09:17:09Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4caf9ada-5ff6-4f9e-9dc6-e699cbb7f211",
        "parentId" : "7dd5586a-8929-4627-993f-744e384527fb",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I don't think so, didn't manage to minimize the error.  Replaced the comment with explanation why we ignore parse errors.",
        "createdAt" : "2018-10-13T13:24:21Z",
        "updatedAt" : "2018-10-17T09:17:09Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "889b282a30a7ddd72b09da4b9328f7779b1cfae9",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,172 @@\n+package scala.meta.internal.mtags\n+\n+import com.thoughtworks.qdox._\n+import com.thoughtworks.qdox.model.JavaClass\n+import com.thoughtworks.qdox.model.JavaField\n+import com.thoughtworks.qdox.model.JavaMember\n+import com.thoughtworks.qdox.model.JavaMethod\n+import com.thoughtworks.qdox.model.JavaModel\n+import com.thoughtworks.qdox.parser.ParseException\n+import java.io.StringReader\n+import java.util.Comparator\n+import scala.collection.mutable\n+import scala.meta.inputs.Input\n+import scala.meta.inputs.Position\n+import scala.meta.internal.semanticdb.Language\n+import scala.meta.internal.semanticdb.SymbolInformation.Kind\n+import scala.meta.internal.semanticdb.SymbolInformation.Property\n+import scala.meta.internal.mtags.Enrichments._\n+\n+/**\n+ * Utility to generate method symbol  disambiguators according to SemanticDB spec.\n+ *\n+ * See https://scalameta.org/docs/semanticdb/specification.html#scala-symbol\n+ */\n+final class OverloadDisambiguator(\n+    names: mutable.Map[String, Int] = mutable.Map.empty\n+) {\n+  def disambiguator(name: String): String = {\n+    val n = names.getOrElseUpdate(name, 0)\n+    names(name) = n + 1\n+    if (n == 0) \"()\"\n+    else s\"(+$n)\"\n+  }\n+}\n+\n+object JavaMtags {\n+  private implicit class XtensionJavaModel(val m: JavaModel) extends AnyVal {\n+    def lineNumber: Int = m.getLineNumber - 1\n+  }\n+\n+  def index(input: Input.VirtualFile): MtagsIndexer = {\n+    val builder = new JavaProjectBuilder()\n+    new MtagsIndexer { self =>\n+      override def language: Language = Language.JAVA\n+      override def indexRoot(): Unit = {\n+        try {\n+          val source = builder.addSource(new StringReader(input.value))\n+          if (source.getPackage != null) {\n+            source.getPackageName.split(\"\\\\.\").foreach { p =>\n+              pkg(\n+                p,\n+                toRangePosition(source.getPackage.lineNumber, p)\n+              )\n+            }\n+          }\n+          source.getClasses.forEach(visitClass)\n+        } catch {\n+          case _: ParseException =>\n+          case _: NullPointerException => ()\n+          // Hitting on this fellow here indexing the JDK\n+          // Error indexing file:///Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home/src.zip/java/time/temporal/IsoFields.java\n+          // java.lang.NullPointerException: null\n+          // at com.thoughtworks.qdox.builder.impl.ModelBuilder.createTypeVariable(ModelBuilder.java:503)\n+          // at com.thoughtworks.qdox.builder.impl.ModelBuilder.endMethod(ModelBuilder.java:470)\n+          // TODO(olafur) report bug to qdox."
  }
]