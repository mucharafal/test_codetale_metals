[
  {
    "id" : "f73a4069-7037-454a-b12c-1b450d039876",
    "prId" : 1763,
    "comments" : [
      {
        "id" : "1bfabb4f-9f60-46ab-92f4-3a88ba2e5a00",
        "parentId" : null,
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "I would do logging if error happens. It will help investigate if something will start failing.",
        "createdAt" : "2020-05-19T19:08:07Z",
        "updatedAt" : "2020-05-20T09:01:34Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "85bacca7-c424-471f-b16c-76f4ca288e42",
        "parentId" : "1bfabb4f-9f60-46ab-92f4-3a88ba2e5a00",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "The same as in the other case, this might just create noise for the user.",
        "createdAt" : "2020-05-20T08:31:51Z",
        "updatedAt" : "2020-05-20T09:01:34Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f269e7f3-03cf-4794-a382-98a8f041ec7b",
        "parentId" : "1bfabb4f-9f60-46ab-92f4-3a88ba2e5a00",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Added onError",
        "createdAt" : "2020-05-20T09:02:28Z",
        "updatedAt" : "2020-05-20T09:02:29Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "48c155158d1652e83ee4bf1cf2c98c3b1823b32f",
    "line" : null,
    "diffHunk" : "@@ -231,11 +234,33 @@ final class OnDemandSymbolIndex(\n     val noExtension = toplevel.value.stripSuffix(\".\").stripSuffix(\"#\")\n     List(\n       noExtension + \".scala\",\n-      noExtension + \".java\",\n-      \"java.base/\" + noExtension + \".java\" // For Java 11.\n+      noExtension + \".java\"\n     )\n   }\n \n+  private def modulePaths(toplevel: Symbol): List[String] = {\n+    if (Properties.isJavaAtLeast(\"9\")) {\n+      val noExtension = toplevel.value.stripSuffix(\".\").stripSuffix(\"#\")\n+      val javaSymbol = noExtension.replace(\"/\", \".\")\n+      try {\n+        sourceJars.loadClass(javaSymbol).toList.flatMap { cls =>\n+          // note(@tgodzik) Modules are only available in Java 9+, so we need to ivoke this reflectively\n+          val module = cls.getClass().getMethod(\"getModule\").invoke(cls)\n+          val moduleName = module.getClass().getMethod(\"getName\").invoke(module)\n+\n+          List(\n+            s\"$moduleName/$noExtension.java\",\n+            s\"$moduleName/$noExtension.scala\"\n+          )\n+        }\n+      } catch {\n+        case NonFatal(_) => Nil"
  },
  {
    "id" : "e1495517-3820-4e6c-ac11-b3c8610f007c",
    "prId" : 1763,
    "comments" : [
      {
        "id" : "c57d637b-7538-4baf-b5fd-714314b10562",
        "parentId" : null,
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "typo, 'invoke'",
        "createdAt" : "2020-05-19T19:09:42Z",
        "updatedAt" : "2020-05-20T09:01:34Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a66184b3-5d2d-46ad-bb5c-a23e8587525e",
        "parentId" : "c57d637b-7538-4baf-b5fd-714314b10562",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-05-20T09:02:34Z",
        "updatedAt" : "2020-05-20T09:02:34Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "48c155158d1652e83ee4bf1cf2c98c3b1823b32f",
    "line" : null,
    "diffHunk" : "@@ -231,11 +234,33 @@ final class OnDemandSymbolIndex(\n     val noExtension = toplevel.value.stripSuffix(\".\").stripSuffix(\"#\")\n     List(\n       noExtension + \".scala\",\n-      noExtension + \".java\",\n-      \"java.base/\" + noExtension + \".java\" // For Java 11.\n+      noExtension + \".java\"\n     )\n   }\n \n+  private def modulePaths(toplevel: Symbol): List[String] = {\n+    if (Properties.isJavaAtLeast(\"9\")) {\n+      val noExtension = toplevel.value.stripSuffix(\".\").stripSuffix(\"#\")\n+      val javaSymbol = noExtension.replace(\"/\", \".\")\n+      try {\n+        sourceJars.loadClass(javaSymbol).toList.flatMap { cls =>\n+          // note(@tgodzik) Modules are only available in Java 9+, so we need to ivoke this reflectively"
  },
  {
    "id" : "5d458ec7-c47f-4bbb-885d-92eed643c43d",
    "prId" : 1763,
    "comments" : [
      {
        "id" : "abd647da-2a6a-46cf-b46e-e9662185b9a3",
        "parentId" : null,
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "for unnamed module it will return null",
        "createdAt" : "2020-05-19T20:20:01Z",
        "updatedAt" : "2020-05-20T09:01:34Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "097edcbb-cd9e-4410-938c-d5d730b967c3",
        "parentId" : "abd647da-2a6a-46cf-b46e-e9662185b9a3",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Added options everywhere to be on the safe side.",
        "createdAt" : "2020-05-20T09:03:02Z",
        "updatedAt" : "2020-05-20T09:03:02Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "48c155158d1652e83ee4bf1cf2c98c3b1823b32f",
    "line" : null,
    "diffHunk" : "@@ -231,11 +234,33 @@ final class OnDemandSymbolIndex(\n     val noExtension = toplevel.value.stripSuffix(\".\").stripSuffix(\"#\")\n     List(\n       noExtension + \".scala\",\n-      noExtension + \".java\",\n-      \"java.base/\" + noExtension + \".java\" // For Java 11.\n+      noExtension + \".java\"\n     )\n   }\n \n+  private def modulePaths(toplevel: Symbol): List[String] = {\n+    if (Properties.isJavaAtLeast(\"9\")) {\n+      val noExtension = toplevel.value.stripSuffix(\".\").stripSuffix(\"#\")\n+      val javaSymbol = noExtension.replace(\"/\", \".\")\n+      try {\n+        sourceJars.loadClass(javaSymbol).toList.flatMap { cls =>\n+          // note(@tgodzik) Modules are only available in Java 9+, so we need to ivoke this reflectively\n+          val module = cls.getClass().getMethod(\"getModule\").invoke(cls)"
  }
]