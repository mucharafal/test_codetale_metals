[
  {
    "id" : "974d9057-35b9-4214-895a-971f07b5e179",
    "prId" : 1671,
    "comments" : [
      {
        "id" : "cd29d0ce-ce57-4458-ad0a-34406f5bd54c",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Probably not ideal, but it _could_ depend on what the diagnostic is, but if it is relevant to an entire file for example, we could just detect it, give it a position at the beginning of the file and display it.",
        "createdAt" : "2020-04-30T08:53:37Z",
        "updatedAt" : "2020-04-30T08:54:57Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6071f68f-5f9e-42fe-98fd-0d86c5ca3c73",
        "parentId" : "cd29d0ce-ce57-4458-ad0a-34406f5bd54c",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Good idea, this message comes from Dotty though. Might have copied it with the code :O",
        "createdAt" : "2020-04-30T09:16:05Z",
        "updatedAt" : "2020-04-30T09:16:06Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5f0f6639a389d9c3b8d4989d855f47e04163d7ab",
    "line" : 43,
    "diffHunk" : "@@ -0,0 +1,94 @@\n+package scala.meta.internal.pc\n+\n+import java.net.URI\n+import java.nio.file.Paths\n+import java.io.BufferedWriter\n+import java.io.OutputStreamWriter\n+import java.{util => ju}\n+import scala.collection.JavaConverters._\n+import scala.io.Codec\n+import dotty.tools.dotc.interactive.InteractiveDriver\n+import dotty.tools.dotc.reporting.StoreReporter\n+import dotty.tools.dotc.parsing.Parsers.Parser\n+import dotty.tools.dotc.reporting.diagnostic.Message\n+import dotty.tools.dotc.reporting.StoreReporter\n+import dotty.tools.dotc.reporting.diagnostic.MessageContainer\n+import dotty.tools.dotc.interfaces.Diagnostic\n+import dotty.tools.dotc.util.SourceFile\n+import dotty.tools.dotc.util.SourcePosition\n+import dotty.tools.io.VirtualFile\n+import org.eclipse.{lsp4j => l}\n+\n+// note(@tgodzik) the plan is to be able to move the methods here back to Dotty compiler\n+// so that we can provide easier compatibility with multiple Scala 3 versions\n+object CompilerInterfaces {\n+\n+  def parseErrors(\n+      driver: InteractiveDriver,\n+      uri: URI,\n+      text: String\n+  ): ju.List[l.Diagnostic] = {\n+    val sourceFile = toSource(uri, text)\n+    // we need to have a separate reporter otherwise errors are not cleared\n+    val parsingReporter = new StoreReporter(null)\n+    val freshContext = driver.currentCtx.fresh.setReporter(parsingReporter)\n+    val parser = new Parser(sourceFile)(freshContext)\n+    parser.parse()\n+    val diags = parsingReporter.allErrors\n+    diags.flatMap(diagnostic).asJava\n+  }\n+\n+  private def diagnostic(mc: MessageContainer): Option[l.Diagnostic] =\n+    if (!mc.pos.exists)\n+      None // diagnostics without positions are not supported: https://github.com/Microsoft/language-server-protocol/issues/249"
  }
]