[
  {
    "id" : "e895bbb2-6c7f-4cc5-94f8-a6966f521319",
    "prId" : 230,
    "comments" : [
      {
        "id" : "e6e63f32-5e91-4f85-ae31-bc82321e2058",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Can we move this file to `scala/meta/sbt/MetalsPlugin.scala`? Or else IntelliJ complains about a wrong location. I think it's a good practice to match directory with package.",
        "createdAt" : "2018-04-04T08:14:50Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "14c97051832e98f052ac232c51c2f6fbc1ec342c",
    "line" : null,
    "diffHunk" : "@@ -1,91 +1,91 @@\n+package scala.meta.sbt\n+\n import sbt._\n import sbt.Keys._\n import java.io._\n-import sbt.Def\n \n object MetalsPlugin extends AutoPlugin {"
  },
  {
    "id" : "8f97c7ce-2e91-4ec2-8fae-3d414bb18567",
    "prId" : 230,
    "comments" : [
      {
        "id" : "0e110e38-696e-416a-8390-8d8b10a48a2a",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Will this work in sbt 0.13? We should try to keep 0.13 compatibility in MetalsPlugin.scala",
        "createdAt" : "2018-04-04T08:15:57Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0294a100-625c-46ee-9441-b9b48261e88b",
        "parentId" : "0e110e38-696e-416a-8390-8d8b10a48a2a",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Doesn't the CI check this? `^compile` should catch it, right?",
        "createdAt" : "2018-04-04T08:32:35Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c1693603-d282-4601-a831-82ff77a5cef2",
        "parentId" : "0e110e38-696e-416a-8390-8d8b10a48a2a",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Right, it should be `*/metalsWriteCompilerConfig`. \r\n\r\n@gabro it's just a string, so it compiles 👌 but if you run it on sbt 0.13, it will fail 🌵 We should add scripted tests for the plugin to avoid such mistakes (but in another PR already)",
        "createdAt" : "2018-04-04T14:12:51Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "14c97051832e98f052ac232c51c2f6fbc1ec342c",
    "line" : null,
    "diffHunk" : "@@ -98,16 +98,16 @@ object MetalsPlugin extends AutoPlugin {\n       IO.delete(configDir)\n       configDir.mkdirs()\n       \"semanticdbEnable\" ::\n-        \"*:metalsWriteCompilerConfig\" ::\n+        \"Global / metalsWriteCompilerConfig\" ::"
  },
  {
    "id" : "89099109-bc67-42fa-bec7-fac5d114ca96",
    "prId" : 230,
    "comments" : [
      {
        "id" : "62997620-a738-4021-b9c8-36be3d5242f5",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Yak shaving. How about calling this `metalsBuildInfo`? To match `.metals/buildinfo`",
        "createdAt" : "2018-04-04T08:21:28Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f28e9c7f-ef86-4630-9d05-4b2a307a19f1",
        "parentId" : "62997620-a738-4021-b9c8-36be3d5242f5",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "That's strange, I actually did it in 2c61ebc, except the case: `metalsBuildinfo`. I will rename it to `..Info`. I would also suggest to raneme all related things in the server code.",
        "createdAt" : "2018-04-04T14:16:13Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "14c97051832e98f052ac232c51c2f6fbc1ec342c",
    "line" : null,
    "diffHunk" : "@@ -1,91 +1,91 @@\n+package scala.meta.sbt\n+\n import sbt._\n import sbt.Keys._\n import java.io._\n-import sbt.Def\n \n object MetalsPlugin extends AutoPlugin {\n   override def trigger = allRequirements\n   override def requires = sbt.plugins.JvmPlugin\n   object autoImport {\n \n     val metalsCompilerConfig ="
  },
  {
    "id" : "fe5ae045-e1b5-446f-a66d-8184bb9fd2ef",
    "prId" : 230,
    "comments" : [
      {
        "id" : "83d601b3-0e8a-4d70-b3d5-a17bc5e3adcc",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "> List of key/value pairs for build information such as classpath/sourceDirectories.",
        "createdAt" : "2018-04-04T08:23:05Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a067ae83-d5f0-4f71-96ae-b2103833d423",
        "parentId" : "83d601b3-0e8a-4d70-b3d5-a17bc5e3adcc",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Again, this refers to an outdated diff (sorry for the mess)",
        "createdAt" : "2018-04-04T14:16:59Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "14c97051832e98f052ac232c51c2f6fbc1ec342c",
    "line" : null,
    "diffHunk" : "@@ -1,91 +1,91 @@\n+package scala.meta.sbt\n+\n import sbt._\n import sbt.Keys._\n import java.io._\n-import sbt.Def\n \n object MetalsPlugin extends AutoPlugin {\n   override def trigger = allRequirements\n   override def requires = sbt.plugins.JvmPlugin\n   object autoImport {\n \n     val metalsCompilerConfig =\n-      taskKey[String](\n+      taskKey[Seq[(String, String)]](\n         \"String containing build metadata in properties file format.\""
  },
  {
    "id" : "735a4538-8aa9-42bf-9e5a-a8bffcb96256",
    "prId" : 230,
    "comments" : [
      {
        "id" : "7edc2533-93ff-45e5-a9d5-fc477835eab7",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "How about `Map[String, String]` to better convey the structure?",
        "createdAt" : "2018-04-04T08:23:24Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1e79490b-12cf-4d09-bdbf-01904d78b0f0",
        "parentId" : "7edc2533-93ff-45e5-a9d5-fc477835eab7",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "I did that first, but sbt shows `Seq` nicer if you call `show metalsCompilerConfig`. On the other hand it's still not very readable, since values are huge. So I'll change it to Map again.",
        "createdAt" : "2018-04-04T14:18:16Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "14c97051832e98f052ac232c51c2f6fbc1ec342c",
    "line" : null,
    "diffHunk" : "@@ -1,91 +1,91 @@\n+package scala.meta.sbt\n+\n import sbt._\n import sbt.Keys._\n import java.io._\n-import sbt.Def\n \n object MetalsPlugin extends AutoPlugin {\n   override def trigger = allRequirements\n   override def requires = sbt.plugins.JvmPlugin\n   object autoImport {\n \n     val metalsCompilerConfig =\n-      taskKey[String](\n+      taskKey[Seq[(String, String)]]("
  },
  {
    "id" : "75063295-eccf-4df8-bdba-ba5b7084e0f9",
    "prId" : 230,
    "comments" : [
      {
        "id" : "0f01f025-6cd0-4867-a73b-27cbc776847c",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Nice 👍 ",
        "createdAt" : "2018-04-04T08:23:46Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "14c97051832e98f052ac232c51c2f6fbc1ec342c",
    "line" : null,
    "diffHunk" : "@@ -1,91 +1,91 @@\n+package scala.meta.sbt\n+\n import sbt._\n import sbt.Keys._\n import java.io._\n-import sbt.Def\n \n object MetalsPlugin extends AutoPlugin {\n   override def trigger = allRequirements\n   override def requires = sbt.plugins.JvmPlugin\n   object autoImport {\n \n     val metalsCompilerConfig =\n-      taskKey[String](\n+      taskKey[Seq[(String, String)]](\n         \"String containing build metadata in properties file format.\"\n       )\n     val metalsWriteCompilerConfig =\n       taskKey[Unit](\n         \"Generate build metadata for completions and indexing dependency sources\"\n       )\n \n-    lazy val semanticdbSettings = List(\n+    lazy val semanticdbSettings = Seq(\n       addCompilerPlugin(\n         \"org.scalameta\" % \"semanticdb-scalac\" % SemanticdbEnable.semanticdbVersion cross CrossVersion.full\n       ),\n       scalacOptions += \"-Yrangepos\"\n     )\n \n-    def metalsConfig(c: Configuration) = Seq(\n-      metalsCompilerConfig := {\n-        val props = new java.util.Properties()\n-        props.setProperty(\n-          \"sources\",\n-          sources.value.distinct.mkString(File.pathSeparator)\n-        )\n-        props.setProperty(\n-          \"unmanagedSourceDirectories\",\n-          unmanagedSourceDirectories.value.distinct\n-            .mkString(File.pathSeparator)\n-        )\n-        props.setProperty(\n-          \"managedSourceDirectories\",\n-          managedSourceDirectories.value.distinct\n-            .mkString(File.pathSeparator)\n-        )\n-        props.setProperty(\n-          \"scalacOptions\",\n-          scalacOptions.value.mkString(\" \")\n-        )\n-        props.setProperty(\n-          \"classDirectory\",\n-          classDirectory.value.getAbsolutePath\n-        )\n-        props.setProperty(\n-          \"dependencyClasspath\",\n-          dependencyClasspath.value\n-            .map(_.data.toString)\n-            .mkString(File.pathSeparator)\n-        )\n-        props.setProperty(\n-          \"scalaVersion\",\n-          scalaVersion.value\n+    def metalsSettings(configs: Configuration*): Seq[Def.Setting[_]] = {\n+      configs.flatMap { config =>\n+        inConfig(config)(\n+          Seq(\n+            metalsCompilerConfig := Seq(\n+              \"sources\" -> sources.value.distinct.mkString(File.pathSeparator),\n+              \"unmanagedSourceDirectories\" ->\n+                unmanagedSourceDirectories.value.distinct\n+                  .mkString(File.pathSeparator),\n+              \"managedSourceDirectories\" -> managedSourceDirectories.value.distinct\n+                .mkString(File.pathSeparator),\n+              \"scalacOptions\" -> scalacOptions.value.mkString(\" \"),\n+              \"classDirectory\" -> classDirectory.value.getAbsolutePath,\n+              \"dependencyClasspath\" -> dependencyClasspath.value\n+                .map(_.data.toString)\n+                .mkString(File.pathSeparator),\n+              \"scalaVersion\" -> scalaVersion.value,\n+              \"sourceJars\" -> {\n+                val sourceJars = for {\n+                  configurationReport <- updateClassifiers.value.configurations\n+                  moduleReport <- configurationReport.modules\n+                  (artifact, file) <- moduleReport.artifacts\n+                  if artifact.classifier.exists(_ == \"sources\")\n+                } yield file\n+                sourceJars.mkString(File.pathSeparator)\n+              },\n+            ),\n+            metalsWriteCompilerConfig := {\n+              val props = new java.util.Properties()\n+              metalsCompilerConfig.value.foreach {"
  },
  {
    "id" : "01b39902-e63a-451f-a8b5-da5f1ee16832",
    "prId" : 230,
    "comments" : [
      {
        "id" : "80ff70cb-24dd-45ac-825a-d4ff10ea7a93",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Will this run for `Test` config?",
        "createdAt" : "2018-04-04T08:25:04Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b2742311-5d41-4dad-8dbc-1acbe49bef0a",
        "parentId" : "80ff70cb-24dd-45ac-825a-d4ff10ea7a93",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Yes, because it runs project-defined task which aggregates over all relevant configs.",
        "createdAt" : "2018-04-04T14:20:00Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "14c97051832e98f052ac232c51c2f6fbc1ec342c",
    "line" : null,
    "diffHunk" : "@@ -98,16 +98,16 @@ object MetalsPlugin extends AutoPlugin {\n       IO.delete(configDir)\n       configDir.mkdirs()\n       \"semanticdbEnable\" ::\n-        \"*:metalsWriteCompilerConfig\" ::\n+        \"Global / metalsWriteCompilerConfig\" ::\n         s\n     },\n-    metalsWriteCompilerConfig := Def.taskDyn {\n-      val filter = ScopeFilter(inAnyProject, inConfigurations(Compile, Test))\n-      metalsWriteCompilerConfig.all(filter)\n-    }.value\n+    // without project scope it will aggregate over all projects\n+    metalsWriteCompilerConfig :=\n+      metalsWriteCompilerConfig.all(ScopeFilter(inAnyProject)).value"
  }
]