[
  {
    "id" : "57e0cc78-d0d9-43ff-8ab8-6fd0fadac613",
    "prId" : 230,
    "comments" : [
      {
        "id" : "738919dd-f8f2-485c-9822-694727871813",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "😆 ",
        "createdAt" : "2018-04-04T15:39:43Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e199351c-f942-464e-b73e-32fadc8d27d3",
        "parentId" : "738919dd-f8f2-485c-9822-694727871813",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "We already have some emoji in the log from `semanticdbEnable`, so I thought, why not? I hope it will make some users smile when they first try Metals... 😊 ",
        "createdAt" : "2018-04-04T15:44:59Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e03ce4f7-c9a2-4575-afb1-e8504bcc3524",
        "parentId" : "738919dd-f8f2-485c-9822-694727871813",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I like emojis 👍 \r\n\r\nHow about going all in and making it more consistent? 😄 \r\n\r\n\r\n> 👌 semanticdb-scalac enabled\r\n> 🔨 created .metals/buildinfo/foo/test.properties\r\n> 🤘 Metals is ready, time to rock! \r\n\r\n",
        "createdAt" : "2018-04-04T22:25:13Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "14c97051832e98f052ac232c51c2f6fbc1ec342c",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,189 @@\n+package scala.meta.sbt\n+\n+import sbt._\n+import sbt.Keys._\n+import java.io._\n+\n+object MetalsPlugin extends AutoPlugin {\n+  override def trigger = allRequirements\n+  override def requires = sbt.plugins.JvmPlugin\n+  object autoImport {\n+\n+    val metalsBuildInfo =\n+      taskKey[Map[String, String]](\n+        \"List of key/value pairs for build information such as classpath/sourceDirectories\"\n+      )\n+    val metalsWriteBuildInfo =\n+      taskKey[Unit](\n+        \"Write build information to .metals/buildinfo/\"\n+      )\n+\n+    lazy val semanticdbSettings = Seq(\n+      addCompilerPlugin(\n+        \"org.scalameta\" % \"semanticdb-scalac\" % Metals.semanticdbVersion cross CrossVersion.full\n+      ),\n+      scalacOptions += \"-Yrangepos\"\n+    )\n+\n+    def metalsSettings(cs: Configuration*): Seq[Def.Setting[_]] = {\n+      val configs = if (cs.nonEmpty) cs else Seq(Compile)\n+      configs.flatMap { config =>\n+        inConfig(config)(\n+          Seq(\n+            metalsBuildInfo := Metals.metalsBuildInfoTask.value,\n+            metalsWriteBuildInfo := Metals.metalsWriteBuildInfoTask.value,\n+          )\n+        )\n+      } ++ Seq(\n+        // without config scope it will aggregate over all project dependencies\n+        // and their configurations\n+        metalsWriteBuildInfo := Def.taskDyn {\n+          val depsAndConfigs = ScopeFilter(\n+            inDependencies(ThisProject),\n+            inConfigurations(configs: _*)\n+          )\n+          metalsWriteBuildInfo.all(depsAndConfigs)\n+        }.value\n+      )\n+    }\n+  }\n+  import autoImport._\n+\n+  override def projectSettings =\n+    metalsSettings(Compile, Test)\n+\n+  override def globalSettings = Seq(\n+    commands ++= Seq(\n+      Metals.semanticdbEnable,\n+      Metals.metalsSetup,\n+    ),\n+    // without project scope it will aggregate over all projects\n+    metalsWriteBuildInfo := {\n+      metalsWriteBuildInfo.all(ScopeFilter(inAnyProject)).value\n+      streams.value.log.info(\"Metals rocks! 🤘\")"
  },
  {
    "id" : "da094a4d-0da0-4371-9dc3-975529c26d86",
    "prId" : 230,
    "comments" : [
      {
        "id" : "dfdb8979-ddb4-4180-9449-848b61c229ca",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Can we print out the absolute path to `outFile`? I just tested this locally and realized with relative paths you can't Cmd+click on the path in iTerm to open the file. I think we should make it easy to poke into the files for curious users.",
        "createdAt" : "2018-04-05T08:29:04Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "115a37d1-0be4-4a66-a4bd-1e4e40c29ada",
        "parentId" : "dfdb8979-ddb4-4180-9449-848b61c229ca",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "minor non-blocking comment on this too: Is `Created` always accurate? Don't these get `Updated` sometimes? If that's the case we could get away with `Written` :P ",
        "createdAt" : "2018-04-05T14:06:23Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8ecaf62f-82d6-4d68-94ce-a8f0726ae15b",
        "parentId" : "dfdb8979-ddb4-4180-9449-848b61c229ca",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "> Wrote /path/to/foo",
        "createdAt" : "2018-04-05T14:07:44Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d2e1ebdc-f0ad-469e-a6d9-2db6c30beb8e",
        "parentId" : "dfdb8979-ddb4-4180-9449-848b61c229ca",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "😄👍 I agree. I noticed that sbt itself is very inconsistent in this regard. It says `Writing Ivy file ...xml`, but then `Wrote ...pom` 😬 . \r\n\r\nSo \"Written\" or \"Wrote\" or \"Writing\"?",
        "createdAt" : "2018-04-05T14:10:06Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b1c48044-feba-4531-9a75-aefabb739ee9",
        "parentId" : "dfdb8979-ddb4-4180-9449-848b61c229ca",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Slightly longer suggestion\r\n\r\n> Written build information for lsp4s/compile to /path/to/foo\r\n\r\nor \r\n\r\n> Build information for lsp4/compile written to /path/to/foo\r\n\r\nwhatever sounds better in English.",
        "createdAt" : "2018-04-05T14:12:26Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7cba15c4-00a7-4567-a14f-0892351001f9",
        "parentId" : "dfdb8979-ddb4-4180-9449-848b61c229ca",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "I think this is will be too long with absolute paths and quite repetitive:\r\n\r\n```\r\nWritten build information for integration/compile to /Users/laughedelic/dev/laughedelic/metals/.metals/buildinfo/integration/compile.properties\r\n```",
        "createdAt" : "2018-04-05T14:15:29Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fdb0d204-f018-47e3-9b22-fba3bb09480e",
        "parentId" : "dfdb8979-ddb4-4180-9449-848b61c229ca",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "It's a bit long I agree. My intention was to vertically align the sbt projects/configurations so to easily spot what was included.",
        "createdAt" : "2018-04-05T14:16:37Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "10450e85-1a8d-438d-a648-5d40ce063f08",
        "parentId" : "dfdb8979-ddb4-4180-9449-848b61c229ca",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "The path prefix is the same, so they will be aligned. But you should also take into account that these logs are not ordered (sbt tasks aggregation runs in parallel).",
        "createdAt" : "2018-04-05T14:18:19Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5c0ec246-271f-43ee-8173-a61bf15be10b",
        "parentId" : "dfdb8979-ddb4-4180-9449-848b61c229ca",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Right. I guess I can live with a shorter output 😄 \r\n\r\nI second olaf's proposal then\r\n\r\n> Wrote /path/to/foo\r\n\r\n",
        "createdAt" : "2018-04-05T14:20:26Z",
        "updatedAt" : "2018-04-05T14:22:03Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2afee83e-cd43-4bd9-b5b2-7d2617a7469b",
        "parentId" : "dfdb8979-ddb4-4180-9449-848b61c229ca",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Done: 14c97051832e98f052ac232c51c2f6fbc1ec342c 🚲 ",
        "createdAt" : "2018-04-05T14:23:01Z",
        "updatedAt" : "2018-04-05T14:24:10Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "14c97051832e98f052ac232c51c2f6fbc1ec342c",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,189 @@\n+package scala.meta.sbt\n+\n+import sbt._\n+import sbt.Keys._\n+import java.io._\n+\n+object MetalsPlugin extends AutoPlugin {\n+  override def trigger = allRequirements\n+  override def requires = sbt.plugins.JvmPlugin\n+  object autoImport {\n+\n+    val metalsBuildInfo =\n+      taskKey[Map[String, String]](\n+        \"List of key/value pairs for build information such as classpath/sourceDirectories\"\n+      )\n+    val metalsWriteBuildInfo =\n+      taskKey[Unit](\n+        \"Write build information to .metals/buildinfo/\"\n+      )\n+\n+    lazy val semanticdbSettings = Seq(\n+      addCompilerPlugin(\n+        \"org.scalameta\" % \"semanticdb-scalac\" % Metals.semanticdbVersion cross CrossVersion.full\n+      ),\n+      scalacOptions += \"-Yrangepos\"\n+    )\n+\n+    def metalsSettings(cs: Configuration*): Seq[Def.Setting[_]] = {\n+      val configs = if (cs.nonEmpty) cs else Seq(Compile)\n+      configs.flatMap { config =>\n+        inConfig(config)(\n+          Seq(\n+            metalsBuildInfo := Metals.metalsBuildInfoTask.value,\n+            metalsWriteBuildInfo := Metals.metalsWriteBuildInfoTask.value\n+          )\n+        )\n+      } ++ Seq(\n+        // without config scope it will aggregate over all project dependencies\n+        // and their configurations\n+        metalsWriteBuildInfo := Def.taskDyn {\n+          val depsAndConfigs = ScopeFilter(\n+            inDependencies(ThisProject),\n+            inConfigurations(configs: _*)\n+          )\n+          metalsWriteBuildInfo.all(depsAndConfigs)\n+        }.value\n+      )\n+    }\n+  }\n+  import autoImport._\n+\n+  override def projectSettings =\n+    metalsSettings(Compile, Test)\n+\n+  override def globalSettings = Seq(\n+    commands ++= Seq(\n+      Metals.semanticdbEnable,\n+      Metals.metalsSetup\n+    ),\n+    // without project scope it will aggregate over all projects\n+    metalsWriteBuildInfo := {\n+      metalsWriteBuildInfo.all(ScopeFilter(inAnyProject)).value\n+      streams.value.log.info(\"🤘 Metals is ready, time to rock!\")\n+    }\n+  )\n+}\n+\n+object Metals {\n+\n+  def metalsBuildInfoTask: Def.Initialize[Task[Map[String, String]]] =\n+    Def.task {\n+      Map(\n+        \"sources\" -> sources.value.distinct.mkString(File.pathSeparator),\n+        \"unmanagedSourceDirectories\" ->\n+          unmanagedSourceDirectories.value.distinct\n+            .mkString(File.pathSeparator),\n+        \"managedSourceDirectories\" -> managedSourceDirectories.value.distinct\n+          .mkString(File.pathSeparator),\n+        \"scalacOptions\" -> scalacOptions.value.mkString(\" \"),\n+        \"classDirectory\" -> classDirectory.value.getAbsolutePath,\n+        \"dependencyClasspath\" -> dependencyClasspath.value\n+          .map(_.data.toString)\n+          .mkString(File.pathSeparator),\n+        \"scalaVersion\" -> scalaVersion.value,\n+        \"sourceJars\" -> {\n+          val sourceJars = for {\n+            configurationReport <- updateClassifiers.value.configurations\n+            moduleReport <- configurationReport.modules\n+            (artifact, file) <- moduleReport.artifacts\n+            if artifact.classifier.exists(_ == \"sources\")\n+          } yield file\n+          sourceJars.mkString(File.pathSeparator)\n+        }\n+      )\n+    }\n+\n+  def metalsWriteBuildInfoTask: Def.Initialize[Task[Unit]] = Def.task {\n+    val props = new java.util.Properties()\n+    metalsBuildInfoTask.value.foreach {\n+      case (k, v) => props.setProperty(k, v)\n+    }\n+    val out = new ByteArrayOutputStream()\n+    props.store(out, null)\n+    val baseDir = baseDirectory.in(ThisBuild).value\n+    val buildinfoDir = baseDir / \".metals\" / \"buildinfo\" / thisProject.value.id\n+    IO.delete(buildinfoDir)\n+    buildinfoDir.mkdirs()\n+    val outFile = buildinfoDir / s\"${configuration.value.name}.properties\"\n+    IO.write(outFile, out.toString())\n+    streams.value.log.info(s\"Created ${outFile.relativeTo(baseDir).get}\")"
  },
  {
    "id" : "1ed24596-91ca-4682-b878-069ebf127046",
    "prId" : 269,
    "comments" : [
      {
        "id" : "f69c2001-27e2-44aa-8591-90084bf13395",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Is there a reason we don't remove `.metals/buildinfo` in `metalsSetup`? This will not catch stale/removed projects which means there will be leftover outdated `buildinfo/**.properties` files ",
        "createdAt" : "2018-04-08T17:36:08Z",
        "updatedAt" : "2018-04-08T18:16:54Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b2e24508-3a71-4f23-b528-3bd7ecb67e35",
        "parentId" : "f69c2001-27e2-44aa-8591-90084bf13395",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "See https://github.com/scalameta/metals/pull/269#discussion_r179955398. This is taken care of in the definition of `*/metalsWriteBuildInfo`. So when you change your projects structure and call `*/metalsWriteBuildInfo` (or `metalsSetup`), it will delete the whole `.metals/buildinfo/` and write buildinfo for all projects.\r\n\r\nHere I remove only project-related buildinfo, because it's a definition of a project-scoped `metalsWriteBuildInfo` which shouldn't touch other projects' stuff. ",
        "createdAt" : "2018-04-08T17:48:18Z",
        "updatedAt" : "2018-04-08T18:16:54Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c966442c9c64b9828ffa5abf961fc6cee0fedf5b",
    "line" : null,
    "diffHunk" : "@@ -39,6 +39,7 @@ object MetalsPlugin extends AutoPlugin {\n         // without config scope it will aggregate over all project dependencies\n         // and their configurations\n         metalsWriteBuildInfo := Def.taskDyn {\n+          IO.delete(Metals.buildinfoDir.value / thisProject.value.id)"
  },
  {
    "id" : "bf5a52f6-f874-4709-841f-d626dc71d0b8",
    "prId" : 269,
    "comments" : [
      {
        "id" : "a87d58db-64c6-4b4a-ac01-c088074a5320",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This is the best place to delete `.metals/buildinfo` IMO",
        "createdAt" : "2018-04-08T17:37:07Z",
        "updatedAt" : "2018-04-08T18:16:54Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f1ab0442-4b0e-41d4-8c7f-e985b0fbde9e",
        "parentId" : "a87d58db-64c6-4b4a-ac01-c088074a5320",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "The command should be just a shortcut and do as little as possible. So it just calls `*/melastWriteBuildInfo`, which [does this cleanup](https://github.com/scalameta/metals/pull/269/files#diff-aa395a3cb94cc4303b23c0bfb833febcR68) (across all projects).",
        "createdAt" : "2018-04-08T17:45:43Z",
        "updatedAt" : "2018-04-08T18:16:54Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c966442c9c64b9828ffa5abf961fc6cee0fedf5b",
    "line" : null,
    "diffHunk" : "@@ -117,13 +124,8 @@ object Metals {\n       \"Generates .metals/buildinfo/**.properties files containing build metadata \" +\n         \"such as classpath and source directories.\",\n     detail = \"\"\n-  ) { s =>\n-    val configDir = s.baseDir / \".metals\" / \"buildinfo\"\n-    IO.delete(configDir)"
  },
  {
    "id" : "1d21bae3-07ff-43f4-ba89-b0f93c438147",
    "prId" : 272,
    "comments" : [
      {
        "id" : "9dcdb1c3-c046-4ff8-b086-3eece9cc3a07",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "I suggest moving these values to the `Metals` object",
        "createdAt" : "2018-04-09T11:01:38Z",
        "updatedAt" : "2018-04-09T14:06:28Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d5d4a346-4b54-4230-bf0e-6c15cdf50e0b",
        "parentId" : "9dcdb1c3-c046-4ff8-b086-3eece9cc3a07",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Is `Metals` in scope from build.sbt? I would like to call `Metals.semanticdbScalac`? I kept these here so that users only need to be aware of `MetalsPlugin`, which is already a familiar concept for users",
        "createdAt" : "2018-04-09T11:09:22Z",
        "updatedAt" : "2018-04-09T14:06:28Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3c0dd354-c6b6-4704-ad4a-f8d599d3e7df",
        "parentId" : "9dcdb1c3-c046-4ff8-b086-3eece9cc3a07",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Yes, `scala.meta.sbt.Metals` is in scope in `build.sbt` and it contains some other values that could be useful if someone want to customize or inspect things (like `semanticdbVersion`?), so I'd keep them together. If you move these values to `Metals`, then users don't need to know anything about `MetalsPlugin` (they are not familiar with it, because it's a global autoplugin which they don't need to enable manually).",
        "createdAt" : "2018-04-09T11:34:40Z",
        "updatedAt" : "2018-04-09T14:06:28Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1e1e861c-6e54-447d-9f4b-409b12b24000",
        "parentId" : "9dcdb1c3-c046-4ff8-b086-3eece9cc3a07",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "About global/local: if users refer to `MetalsPlugin.semanticdbScalac` in their `build.sbt` then they will have to install sbt-metals locally, or the build won't compile for a co-worker who's not using metals.",
        "createdAt" : "2018-04-09T12:52:20Z",
        "updatedAt" : "2018-04-09T14:06:28Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f9f2605e-e184-4300-9276-6a905a1a32f1",
        "parentId" : "9dcdb1c3-c046-4ff8-b086-3eece9cc3a07",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "This effectively means we'll be requiring users to install `sbt-metals` per-project, which sucks because it makes updating the \"IDE\" a project-wide operation, rather than a dev operation.\r\n\r\nCan we make this dynamic somehow? I.e. only enable `semanticdbScalac` if the plugin is globally installed or bail otherwise?",
        "createdAt" : "2018-04-09T12:54:58Z",
        "updatedAt" : "2018-04-09T14:06:28Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0e0eed2e-a7ec-40a5-b712-5aa542fb89d7",
        "parentId" : "9dcdb1c3-c046-4ff8-b086-3eece9cc3a07",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "> About global/local\r\n\r\nRight. Anyway, I would put all reusable values in an external object to keep the plugin definition minimal. So if user wants to use anything, they can refer to `scala.meta.sbt.Metals`, or if you don't like the package prefix, add an alias to the `autoImport`: `val Metals = scala.meta.sbt.Metals`.\r\n\r\n> This effectively means we'll be requiring users to install sbt-metals per-project\r\n\r\nI think the only problem here is in case when you need to setup Metals on custom configurations in your project. If you only use `Compile` and `Test`, you can keep sbt-metals global and only call `metalsSetup` on the projects you want. Or am I missing some point about `semanticdbScalac`?",
        "createdAt" : "2018-04-09T12:59:18Z",
        "updatedAt" : "2018-04-09T14:06:28Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e568215d-5e37-44de-988a-215535487b20",
        "parentId" : "9dcdb1c3-c046-4ff8-b086-3eece9cc3a07",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "We can't avoid the problem that any IDE tooling that depends on sbt will need to be defined in the build. A user can `addCompilerPlugin` in some `ignore.sbt` file if they don't want to pollute the build definition. My hope is the benefits from semanticdb-scalac will soon be so many that teams will decide to enable it by default to enjoy\r\n\r\n* Scalafix\r\n* Metals",
        "createdAt" : "2018-04-09T13:04:12Z",
        "updatedAt" : "2018-04-09T14:06:28Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9d240dc9-e092-42e4-85b9-b20ca49cfdb0",
        "parentId" : "9dcdb1c3-c046-4ff8-b086-3eece9cc3a07",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "How about this? https://gitter.im/sbt/sbt?at=5acb65ff92f5d62057ac694d",
        "createdAt" : "2018-04-09T13:10:19Z",
        "updatedAt" : "2018-04-09T14:06:28Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d65a40bd-1fe2-4c9b-a01d-4fe5f228337e",
        "parentId" : "9dcdb1c3-c046-4ff8-b086-3eece9cc3a07",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "We can make a snippet to copy-paste in a separate `metals.sbt` file, which is triggered by the presence of `sbt-metals`",
        "createdAt" : "2018-04-09T13:10:27Z",
        "updatedAt" : "2018-04-09T14:06:28Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8de87d9b-7541-4cd6-89ca-04f8f3a229c6",
        "parentId" : "9dcdb1c3-c046-4ff8-b086-3eece9cc3a07",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "I'm sorry, @gabro, could you explain what problem are you trying to solve?",
        "createdAt" : "2018-04-09T13:12:38Z",
        "updatedAt" : "2018-04-09T14:06:28Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "db166a51-8653-444c-81be-c11a9e47a672",
        "parentId" : "9dcdb1c3-c046-4ff8-b086-3eece9cc3a07",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I don't want users to add `sbt-metals` to their project's build.\r\n\r\nI would love for them to have it as a global plugin only, so that it's easier to update.",
        "createdAt" : "2018-04-09T13:14:36Z",
        "updatedAt" : "2018-04-09T14:06:28Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ce0e4720-9c41-466a-ab48-a4fe6b6a998f",
        "parentId" : "9dcdb1c3-c046-4ff8-b086-3eece9cc3a07",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "OK. This seems to be the initial plan. In what cases users would _need_ to add this plugin per-project? \r\n\r\nI see only the case if they have some custom (sbt-)configuration, for which they want to generate metals buildinfo. Yet, I think it's enough to add a comment to the docs: \r\n\r\n> if you have a custom configuration `Foo` in project `buh`, in addition to `metalsSetup` also run `bug/Foo/metalsWriteBuildInfo` in sbt\r\n\r\ni.e. user can still do this in the sbt shell without the need to add anything to their build. And if they want, they can use `ignore.sbt` workaround.",
        "createdAt" : "2018-04-09T13:18:46Z",
        "updatedAt" : "2018-04-09T14:06:28Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a4025783-44d6-4c3f-acf4-dfa0f5cac91d",
        "parentId" : "9dcdb1c3-c046-4ff8-b086-3eece9cc3a07",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I've moved the settings to the `Metals` object. I personally prefer to keep everything in `MetalsPlugin` since it's consistent with BuildInfoPlugin, ScalafixPlugin, etc.\r\n\r\nCan we move this discussion about sbt-metals and project-specific installation to a dedicated ticket? This PR was primarily about avoiding an import conflict with sbt-scalafix.",
        "createdAt" : "2018-04-09T13:33:10Z",
        "updatedAt" : "2018-04-09T14:06:28Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "92697215-b774-4957-9b71-15b03e723a9e",
        "parentId" : "9dcdb1c3-c046-4ff8-b086-3eece9cc3a07",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : ">  In what cases users would need to add this plugin per-project\r\n\r\nWhenever they use `Metals.semanticdbScala` in `build.sbt`.\r\n\r\nIf you don't include the plugin per-project, then you're potentially breaking your co-worker's (and the CI's) builds",
        "createdAt" : "2018-04-09T13:33:51Z",
        "updatedAt" : "2018-04-09T14:06:28Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2bc0ca4e-5a19-4f05-bc69-105e6b36eae6",
        "parentId" : "9dcdb1c3-c046-4ff8-b086-3eece9cc3a07",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Yes, let's merge this move the discussion somewhere else.",
        "createdAt" : "2018-04-09T13:36:42Z",
        "updatedAt" : "2018-04-09T14:06:28Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1bba50c8-0ea5-4960-afe4-c0db7996f958",
        "parentId" : "9dcdb1c3-c046-4ff8-b086-3eece9cc3a07",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "@laughedelic It doesn't seem like `Metals` is autoimported into scope\r\n\r\n```scala\r\n/Users/ollie/dev/metals/build.sbt:71: error: not found: value Metals\r\n    addCompilerPlugin(Metals.semanticdbScalac),\r\n                      ^\r\n```\r\n\r\nI propose we stick to having everything in `MetalsPlugin` as that's automatically in scope.",
        "createdAt" : "2018-04-09T13:37:04Z",
        "updatedAt" : "2018-04-09T14:06:28Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b32986d1-b618-4d8f-9881-c695f16566ff",
        "parentId" : "9dcdb1c3-c046-4ff8-b086-3eece9cc3a07",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "@olafurpg see above: https://github.com/scalameta/metals/pull/272#discussion_r180085310, you need to refer to it with the package prefix or define an auto-imported alias. But anyway, I don't have a strong opinion, so feel free to change it back if you prefer.",
        "createdAt" : "2018-04-09T13:39:08Z",
        "updatedAt" : "2018-04-09T14:06:28Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "81a5bc98dbe50a21209e0a5e774579e72d8ebad5",
    "line" : null,
    "diffHunk" : "@@ -49,8 +31,19 @@ package scala.meta.sbt {\n         )\n       }\n     }\n+\n     import autoImport._\n \n+    val metalsBuildInfo = taskKey[Map[String, String]](\n+      \"List of key/value pairs for build information such as classpath/sourceDirectories\"\n+    )\n+    val metalsWriteBuildInfo = taskKey[Unit](\n+      \"Write build information to .metals/buildinfo/\"\n+    )\n+\n+    val semanticdbScalac =\n+      \"org.scalameta\" % \"semanticdb-scalac\" % Metals.semanticdbVersion cross CrossVersion.full\n+"
  }
]