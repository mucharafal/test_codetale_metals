[{
  "comments": [{
    "author": {
      "login": "yhuai"
    },
    "body": "do we need to change this line?\n",
    "commit": "3f0f3b8105b358f580b6225f9cf1592b44e17450",
    "createdAt": "2016-02-23T04:45:24Z",
    "diffHunk": "@@ -112,7 +112,7 @@ abstract class DockerJDBCIntegrationSuite\n       // Start the container and wait until the database can accept JDBC connections:\n       docker.startContainer(containerId)\n       jdbcUrl = db.getJdbcUrl(dockerIp, externalPort)\n-      eventually(timeout(60.seconds), interval(1.seconds)) {\n+      eventually(timeout(200.seconds), interval(200.seconds)) {"
  }, {
    "author": {
      "login": "thomastechs"
    },
    "body": "@yhuai  This line of timeout is required for the oracle related test.Because, the time taken by the oracle instance to bring up would not be enough with the old setting. We tested it in our local and  \nconfirmed this. If we do not change this time duration, Oracle would throw an exception, saying that the instance was tried to hit during the initialization stage.\n",
    "commit": "3f0f3b8105b358f580b6225f9cf1592b44e17450",
    "createdAt": "2016-02-23T05:28:30Z",
    "diffHunk": "@@ -112,7 +112,7 @@ abstract class DockerJDBCIntegrationSuite\n       // Start the container and wait until the database can accept JDBC connections:\n       docker.startContainer(containerId)\n       jdbcUrl = db.getJdbcUrl(dockerIp, externalPort)\n-      eventually(timeout(60.seconds), interval(1.seconds)) {\n+      eventually(timeout(200.seconds), interval(200.seconds)) {"
  }, {
    "author": {
      "login": "yhuai"
    },
    "body": "Seems we need to have a smaller number of `interval`. Right now, the number of internal and timeout are the same.\n",
    "commit": "3f0f3b8105b358f580b6225f9cf1592b44e17450",
    "createdAt": "2016-02-24T00:16:01Z",
    "diffHunk": "@@ -112,7 +112,7 @@ abstract class DockerJDBCIntegrationSuite\n       // Start the container and wait until the database can accept JDBC connections:\n       docker.startContainer(containerId)\n       jdbcUrl = db.getJdbcUrl(dockerIp, externalPort)\n-      eventually(timeout(60.seconds), interval(1.seconds)) {\n+      eventually(timeout(200.seconds), interval(200.seconds)) {"
  }, {
    "author": {
      "login": "thomastechs"
    },
    "body": "@yhuai    interval to be set as 200 sec, was a requirement to execute it fine in our local environment of oracle on docker.Less than that it causes exception related to early hit. Since the current test case is ignored, we may revert it back to 60,1; adding a comment here saying to increase this number, when testing with Oracle. Please let me know your thoughts.\n",
    "commit": "3f0f3b8105b358f580b6225f9cf1592b44e17450",
    "createdAt": "2016-02-24T02:08:59Z",
    "diffHunk": "@@ -112,7 +112,7 @@ abstract class DockerJDBCIntegrationSuite\n       // Start the container and wait until the database can accept JDBC connections:\n       docker.startContainer(containerId)\n       jdbcUrl = db.getJdbcUrl(dockerIp, externalPort)\n-      eventually(timeout(60.seconds), interval(1.seconds)) {\n+      eventually(timeout(200.seconds), interval(200.seconds)) {"
  }, {
    "author": {
      "login": "yhuai"
    },
    "body": "Yea, sounds good. Let's revert this change and add a comment to `OracleIntegrationSuite`.\n",
    "commit": "3f0f3b8105b358f580b6225f9cf1592b44e17450",
    "createdAt": "2016-02-24T03:08:03Z",
    "diffHunk": "@@ -112,7 +112,7 @@ abstract class DockerJDBCIntegrationSuite\n       // Start the container and wait until the database can accept JDBC connections:\n       docker.startContainer(containerId)\n       jdbcUrl = db.getJdbcUrl(dockerIp, externalPort)\n-      eventually(timeout(60.seconds), interval(1.seconds)) {\n+      eventually(timeout(200.seconds), interval(200.seconds)) {"
  }, {
    "author": {
      "login": "thomastechs"
    },
    "body": "Sure; A build is already in progress, I guess I can commit after that\n",
    "commit": "3f0f3b8105b358f580b6225f9cf1592b44e17450",
    "createdAt": "2016-02-24T03:15:15Z",
    "diffHunk": "@@ -112,7 +112,7 @@ abstract class DockerJDBCIntegrationSuite\n       // Start the container and wait until the database can accept JDBC connections:\n       docker.startContainer(containerId)\n       jdbcUrl = db.getJdbcUrl(dockerIp, externalPort)\n-      eventually(timeout(60.seconds), interval(1.seconds)) {\n+      eventually(timeout(200.seconds), interval(200.seconds)) {"
  }],
  "prId": 11306
}]