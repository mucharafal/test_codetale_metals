[{
  "comments": [{
    "author": {
      "login": "jerrysxu"
    },
    "body": "After a clean build \"mvn -DskipTests clean package -P kinesis-asl\", I need actually two jars to run this.  `extras/kinesis-asl-assembly/target/scala-2.10/spark-streaming-kinesis-asl-assembly-*.jar and extras/kinesis-asl/target/spark-streaming-kinesis-asl_*.jar.`\n",
    "commit": "e42e471e47a79a06f7a741ecb0aaf72a002096a2",
    "createdAt": "2015-07-29T17:08:27Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"\n+  Consumes messages from a Amazon Kinesis streams and does wordcount.\n+\n+  This example spins up 1 Kinesis Receiver per shard for the given stream.\n+  It then starts pulling from the last checkpointed sequence number of the given stream.\n+\n+  Usage: kinesis_wordcount_asl.py <app-name> <stream-name> <endpoint-url> <region-name>\n+    <app-name> is the name of the consumer app, used to track the read data in DynamoDB\n+    <stream-name> name of the Kinesis stream (ie. mySparkStream)\n+    <endpoint-url> endpoint of the Kinesis service\n+      (e.g. https://kinesis.us-east-1.amazonaws.com)\n+\n+\n+  Example:\n+      # export AWS keys if necessary\n+      $ export AWS_ACCESS_KEY_ID=<your-access-key>\n+      $ export AWS_SECRET_KEY=<your-secret-key>\n+\n+      # run the example\n+      $ bin/spark-submit -jar extras/kinesis-asl/target/scala-*/\\\n+        spark-streaming-kinesis-asl-assembly_*.jar \\\n+        extras/kinesis-asl/src/main/python/examples/streaming/kinesis_wordcount_asl.py \\\n+        myAppName mySparkStream https://kinesis.us-east-1.amazonaws.com\n+",
    "line": 41
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "`extras/kinesis-asl-assembly/target/scala-2.10/spark-streaming-kinesis-asl-assembly-*.jar`  should be sufficient as it includes classes `extras/kinesis-asl/target/spark-streaming-kinesis-asl.jar`\n\nDo you not see that happening?\n",
    "commit": "e42e471e47a79a06f7a741ecb0aaf72a002096a2",
    "createdAt": "2015-07-29T22:18:20Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"\n+  Consumes messages from a Amazon Kinesis streams and does wordcount.\n+\n+  This example spins up 1 Kinesis Receiver per shard for the given stream.\n+  It then starts pulling from the last checkpointed sequence number of the given stream.\n+\n+  Usage: kinesis_wordcount_asl.py <app-name> <stream-name> <endpoint-url> <region-name>\n+    <app-name> is the name of the consumer app, used to track the read data in DynamoDB\n+    <stream-name> name of the Kinesis stream (ie. mySparkStream)\n+    <endpoint-url> endpoint of the Kinesis service\n+      (e.g. https://kinesis.us-east-1.amazonaws.com)\n+\n+\n+  Example:\n+      # export AWS keys if necessary\n+      $ export AWS_ACCESS_KEY_ID=<your-access-key>\n+      $ export AWS_SECRET_KEY=<your-secret-key>\n+\n+      # run the example\n+      $ bin/spark-submit -jar extras/kinesis-asl/target/scala-*/\\\n+        spark-streaming-kinesis-asl-assembly_*.jar \\\n+        extras/kinesis-asl/src/main/python/examples/streaming/kinesis_wordcount_asl.py \\\n+        myAppName mySparkStream https://kinesis.us-east-1.amazonaws.com\n+",
    "line": 41
  }],
  "prId": 6955
}]