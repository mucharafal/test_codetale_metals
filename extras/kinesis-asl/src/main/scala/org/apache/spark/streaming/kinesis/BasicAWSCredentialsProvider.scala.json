[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Why not let the awsAccessKey be printed, and not the secret key?\n",
    "commit": "2853cb0be83e6a22902d1a93985efef167e8eb44",
    "createdAt": "2015-05-06T23:32:56Z",
    "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import org.apache.spark.annotation.DeveloperApi\n+\n+import com.amazonaws.auth.AWSCredentials\n+import com.amazonaws.auth.AWSCredentialsProvider\n+import com.amazonaws.auth.BasicAWSCredentials\n+\n+/**\n+ * :: DeveloperAPI ::\n+ * \n+ * Implementation of AWSCredentialsProvider for BasicAWSCredentials.\n+ * (Surprisingly, this is not part of the AWS Java SDK.)\n+ * \n+ * Note:  This is intentionally not Serializable to match the other AWSCredentials implementations.\n+ *        Making this Serializable could lead to a refactoring that would introduce a \n+ *        NotSerializableExceptions when migrating to different AWSCredentials impls such as \n+ *        DefaultAWSCredentialsProviderChain.\n+ *        In other words, I'm following the existing Non-Serializable hierarchy dictated by AWS.\n+ *\n+ * @param awsAccessKeyId  AWS Access Key Id\n+ * @param awsSecretKey  AWS Secret Key\n+ */\n+@DeveloperApi\n+class BasicAWSCredentialsProvider(awsAccessKeyId: String, awsSecretKey: String)\n+    extends AWSCredentialsProvider {\n+  \n+  override def getCredentials(): AWSCredentials =\n+    new BasicAWSCredentials(awsAccessKeyId, awsSecretKey)\n+  override def refresh() {}\n+  override def toString(): String = getClass().getSimpleName()",
    "line": 47
  }],
  "prId": 5882
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Why is this public API?\n",
    "commit": "2853cb0be83e6a22902d1a93985efef167e8eb44",
    "createdAt": "2015-05-06T23:32:58Z",
    "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import org.apache.spark.annotation.DeveloperApi\n+\n+import com.amazonaws.auth.AWSCredentials\n+import com.amazonaws.auth.AWSCredentialsProvider\n+import com.amazonaws.auth.BasicAWSCredentials\n+\n+/**\n+ * :: DeveloperAPI ::\n+ * \n+ * Implementation of AWSCredentialsProvider for BasicAWSCredentials.\n+ * (Surprisingly, this is not part of the AWS Java SDK.)\n+ * \n+ * Note:  This is intentionally not Serializable to match the other AWSCredentials implementations.\n+ *        Making this Serializable could lead to a refactoring that would introduce a \n+ *        NotSerializableExceptions when migrating to different AWSCredentials impls such as \n+ *        DefaultAWSCredentialsProviderChain.\n+ *        In other words, I'm following the existing Non-Serializable hierarchy dictated by AWS.\n+ *\n+ * @param awsAccessKeyId  AWS Access Key Id\n+ * @param awsSecretKey  AWS Secret Key\n+ */\n+@DeveloperApi",
    "line": 40
  }],
  "prId": 5882
}]