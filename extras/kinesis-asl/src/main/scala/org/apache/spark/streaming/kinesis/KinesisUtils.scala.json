[{
  "comments": [{
    "author": {
      "login": "cfregly"
    },
    "body": "these aws credential @params should go at the end\n",
    "commit": "f23ea7756092a526138729cf11403a8f98918949",
    "createdAt": "2015-05-21T06:12:47Z",
    "diffHunk": "@@ -16,29 +16,75 @@\n  */\n package org.apache.spark.streaming.kinesis\n \n-import org.apache.spark.annotation.Experimental\n+import com.amazonaws.regions.RegionUtils\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n import org.apache.spark.storage.StorageLevel\n-import org.apache.spark.streaming.Duration\n-import org.apache.spark.streaming.StreamingContext\n-import org.apache.spark.streaming.api.java.JavaReceiverInputDStream\n-import org.apache.spark.streaming.api.java.JavaStreamingContext\n+import org.apache.spark.streaming.api.java.{JavaReceiverInputDStream, JavaStreamingContext}\n import org.apache.spark.streaming.dstream.ReceiverInputDStream\n-\n-import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n \n \n-/**\n- * Helper class to create Amazon Kinesis Input Stream\n- * :: Experimental ::\n- */\n-@Experimental\n object KinesisUtils {\n   /**\n-   * Create an InputDStream that pulls messages from a Kinesis stream.\n-   * :: Experimental ::\n-   * @param ssc    StreamingContext object\n+   * Create an input stream that pulls messages from a Kinesis stream.\n+   * This uses the Kinesis Client Library (KCL) to pull messages from Kinesis.\n+   *\n+   * Note: The AWS credentials will be discovered using the DefaultAWSCredentialsProviderChain\n+   * on the workers. See AWS documentation to understand how DefaultAWSCredentialsProviderChain\n+   * gets the AWS credentials.\n+   *\n+   * @param ssc StreamingContext object\n+   * @param kinesisAppName  Kinesis application name used by the Kinesis Client Library\n+   *                        (KCL) to update DynamoDB\n+   * @param streamName   Kinesis stream name\n+   * @param endpointUrl  Url of Kinesis service (e.g., https://kinesis.us-east-1.amazonaws.com)\n+   * @param regionName   Name of region used by the Kinesis Client Library (KCL) to update\n+   *                     DynamoDB (lease coordination and checkpointing) and CloudWatch (metrics)\n+   * @param initialPositionInStream  In the absence of Kinesis checkpoint info, this is the\n+   *                                 worker's initial starting position in the stream.\n+   *                                 The values are either the beginning of the stream\n+   *                                 per Kinesis' limit of 24 hours\n+   *                                 (InitialPositionInStream.TRIM_HORIZON) or\n+   *                                 the tip of the stream (InitialPositionInStream.LATEST).\n+   * @param checkpointInterval  Checkpoint interval for Kinesis checkpointing.\n+   *                            See the Kinesis Spark Streaming documentation for more\n+   *                            details on the different types of checkpoints.\n+   * @param storageLevel Storage level to use for storing the received objects.\n+   *                     StorageLevel.MEMORY_AND_DISK_2 is recommended.\n+   */\n+  def createStream(\n+      ssc: StreamingContext,\n+      kinesisAppName:  String,\n+      streamName: String,\n+      endpointUrl: String,\n+      regionName: String,\n+      initialPositionInStream: InitialPositionInStream,\n+      checkpointInterval: Duration,\n+      storageLevel: StorageLevel\n+    ): ReceiverInputDStream[Array[Byte]] = {\n+    ssc.receiverStream(\n+      new KinesisReceiver(kinesisAppName, streamName, endpointUrl, validateRegion(regionName),\n+        initialPositionInStream, checkpointInterval, storageLevel, None))\n+  }\n+\n+  /**\n+   * Create an input stream that pulls messages from a Kinesis stream.\n+   * This uses the Kinesis Client Library (KCL) to pull messages from Kinesis.\n+   *\n+   * Note:\n+   *  The given AWS credentials will get saved in DStream checkpoints if checkpointing\n+   *  is enabled. Make sure that your checkpoint directory is secure.\n+   *\n+   * @param ssc StreamingContext object\n+   * @param kinesisAppName  Kinesis application name used by the Kinesis Client Library\n+   *                        (KCL) to update DynamoDB\n    * @param streamName   Kinesis stream name\n    * @param endpointUrl  Url of Kinesis service (e.g., https://kinesis.us-east-1.amazonaws.com)\n+   * @param regionName   Name of region used by the Kinesis Client Library (KCL) to update\n+   *                     DynamoDB (lease coordination and checkpointing) and CloudWatch (metrics)\n+   * @param awsAccessKeyId  AWS AccessKeyId (if null, will use DefaultAWSCredentialsProviderChain)",
    "line": 86
  }],
  "prId": 6147
}, {
  "comments": [{
    "author": {
      "login": "cfregly"
    },
    "body": "not sure why i keep thinking this checkpointInterval should go above initialPositionInStream.  not a big deal, but i remember it being different for some reason.\n",
    "commit": "f23ea7756092a526138729cf11403a8f98918949",
    "createdAt": "2015-05-21T06:14:18Z",
    "diffHunk": "@@ -16,29 +16,75 @@\n  */\n package org.apache.spark.streaming.kinesis\n \n-import org.apache.spark.annotation.Experimental\n+import com.amazonaws.regions.RegionUtils\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n import org.apache.spark.storage.StorageLevel\n-import org.apache.spark.streaming.Duration\n-import org.apache.spark.streaming.StreamingContext\n-import org.apache.spark.streaming.api.java.JavaReceiverInputDStream\n-import org.apache.spark.streaming.api.java.JavaStreamingContext\n+import org.apache.spark.streaming.api.java.{JavaReceiverInputDStream, JavaStreamingContext}\n import org.apache.spark.streaming.dstream.ReceiverInputDStream\n-\n-import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n \n \n-/**\n- * Helper class to create Amazon Kinesis Input Stream\n- * :: Experimental ::\n- */\n-@Experimental\n object KinesisUtils {\n   /**\n-   * Create an InputDStream that pulls messages from a Kinesis stream.\n-   * :: Experimental ::\n-   * @param ssc    StreamingContext object\n+   * Create an input stream that pulls messages from a Kinesis stream.\n+   * This uses the Kinesis Client Library (KCL) to pull messages from Kinesis.\n+   *\n+   * Note: The AWS credentials will be discovered using the DefaultAWSCredentialsProviderChain\n+   * on the workers. See AWS documentation to understand how DefaultAWSCredentialsProviderChain\n+   * gets the AWS credentials.\n+   *\n+   * @param ssc StreamingContext object\n+   * @param kinesisAppName  Kinesis application name used by the Kinesis Client Library\n+   *                        (KCL) to update DynamoDB\n+   * @param streamName   Kinesis stream name\n+   * @param endpointUrl  Url of Kinesis service (e.g., https://kinesis.us-east-1.amazonaws.com)\n+   * @param regionName   Name of region used by the Kinesis Client Library (KCL) to update\n+   *                     DynamoDB (lease coordination and checkpointing) and CloudWatch (metrics)\n+   * @param initialPositionInStream  In the absence of Kinesis checkpoint info, this is the\n+   *                                 worker's initial starting position in the stream.\n+   *                                 The values are either the beginning of the stream\n+   *                                 per Kinesis' limit of 24 hours\n+   *                                 (InitialPositionInStream.TRIM_HORIZON) or\n+   *                                 the tip of the stream (InitialPositionInStream.LATEST).\n+   * @param checkpointInterval  Checkpoint interval for Kinesis checkpointing.",
    "line": 50
  }],
  "prId": 6147
}, {
  "comments": [{
    "author": {
      "login": "cfregly"
    },
    "body": "is the @param initialPositionInStream missing here, as well?\n\nneeds to go above checkpointInterval to match the API (or the vice-versa)\n",
    "commit": "f23ea7756092a526138729cf11403a8f98918949",
    "createdAt": "2015-05-21T06:15:27Z",
    "diffHunk": "@@ -48,28 +94,84 @@ object KinesisUtils {\n    *                                 per Kinesis' limit of 24 hours",
    "line": 92
  }],
  "prId": 6147
}, {
  "comments": [{
    "author": {
      "login": "cfregly"
    },
    "body": "missing initialPosition, in wrong place per the others\n",
    "commit": "f23ea7756092a526138729cf11403a8f98918949",
    "createdAt": "2015-05-21T06:16:30Z",
    "diffHunk": "@@ -79,19 +181,116 @@ object KinesisUtils {\n    *                                 per Kinesis' limit of 24 hours",
    "line": 185
  }],
  "prId": 6147
}, {
  "comments": [{
    "author": {
      "login": "cfregly"
    },
    "body": "move these to the end\n",
    "commit": "f23ea7756092a526138729cf11403a8f98918949",
    "createdAt": "2015-05-21T06:17:07Z",
    "diffHunk": "@@ -79,19 +181,116 @@ object KinesisUtils {\n    *                                 per Kinesis' limit of 24 hours\n    *                                 (InitialPositionInStream.TRIM_HORIZON) or\n    *                                 the tip of the stream (InitialPositionInStream.LATEST).\n-   * @param storageLevel Storage level to use for storing the received objects\n+   * @param storageLevel Storage level to use for storing the received objects.\n+   *                     StorageLevel.MEMORY_AND_DISK_2 is recommended.\n+   */\n+  def createStream(\n+      jssc: JavaStreamingContext,\n+      kinesisAppName: String,\n+      streamName: String,\n+      endpointUrl: String,\n+      regionName: String,\n+      initialPositionInStream: InitialPositionInStream,\n+      checkpointInterval: Duration,\n+      storageLevel: StorageLevel\n+    ): JavaReceiverInputDStream[Array[Byte]] = {\n+    createStream(jssc.ssc, kinesisAppName, streamName, endpointUrl, regionName,\n+      initialPositionInStream, checkpointInterval, storageLevel)\n+  }\n+\n+  /**\n+   * Create an input stream that pulls messages from a Kinesis stream.\n+   * This uses the Kinesis Client Library (KCL) to pull messages from Kinesis.\n    *\n-   * @return JavaReceiverInputDStream[Array[Byte]]\n+   * Note:\n+   *  The given AWS credentials will get saved in DStream checkpoints if checkpointing\n+   *  is enabled. Make sure that your checkpoint directory is secure.\n+   *\n+   * @param jssc Java StreamingContext object\n+   * @param kinesisAppName  Kinesis application name used by the Kinesis Client Library\n+   *                        (KCL) to update DynamoDB\n+   * @param streamName   Kinesis stream name\n+   * @param endpointUrl  Url of Kinesis service (e.g., https://kinesis.us-east-1.amazonaws.com)\n+   * @param regionName   Name of region used by the Kinesis Client Library (KCL) to update\n+   *                     DynamoDB (lease coordination and checkpointing) and CloudWatch (metrics)\n+   * @param awsAccessKeyId  AWS AccessKeyId (if null, will use DefaultAWSCredentialsProviderChain)",
    "line": 222
  }],
  "prId": 6147
}, {
  "comments": [{
    "author": {
      "login": "cfregly"
    },
    "body": "ah... checkpointInterval is before initialPositionInStream.  it feels so good.\n\nplease sync these throughout the API\n",
    "commit": "f23ea7756092a526138729cf11403a8f98918949",
    "createdAt": "2015-05-21T06:17:53Z",
    "diffHunk": "@@ -79,19 +181,116 @@ object KinesisUtils {\n    *                                 per Kinesis' limit of 24 hours\n    *                                 (InitialPositionInStream.TRIM_HORIZON) or\n    *                                 the tip of the stream (InitialPositionInStream.LATEST).\n-   * @param storageLevel Storage level to use for storing the received objects\n+   * @param storageLevel Storage level to use for storing the received objects.\n+   *                     StorageLevel.MEMORY_AND_DISK_2 is recommended.\n+   */\n+  def createStream(\n+      jssc: JavaStreamingContext,\n+      kinesisAppName: String,\n+      streamName: String,\n+      endpointUrl: String,\n+      regionName: String,\n+      initialPositionInStream: InitialPositionInStream,\n+      checkpointInterval: Duration,\n+      storageLevel: StorageLevel\n+    ): JavaReceiverInputDStream[Array[Byte]] = {\n+    createStream(jssc.ssc, kinesisAppName, streamName, endpointUrl, regionName,\n+      initialPositionInStream, checkpointInterval, storageLevel)\n+  }\n+\n+  /**\n+   * Create an input stream that pulls messages from a Kinesis stream.\n+   * This uses the Kinesis Client Library (KCL) to pull messages from Kinesis.\n    *\n-   * @return JavaReceiverInputDStream[Array[Byte]]\n+   * Note:\n+   *  The given AWS credentials will get saved in DStream checkpoints if checkpointing\n+   *  is enabled. Make sure that your checkpoint directory is secure.\n+   *\n+   * @param jssc Java StreamingContext object\n+   * @param kinesisAppName  Kinesis application name used by the Kinesis Client Library\n+   *                        (KCL) to update DynamoDB\n+   * @param streamName   Kinesis stream name\n+   * @param endpointUrl  Url of Kinesis service (e.g., https://kinesis.us-east-1.amazonaws.com)\n+   * @param regionName   Name of region used by the Kinesis Client Library (KCL) to update\n+   *                     DynamoDB (lease coordination and checkpointing) and CloudWatch (metrics)\n+   * @param awsAccessKeyId  AWS AccessKeyId (if null, will use DefaultAWSCredentialsProviderChain)\n+   * @param awsSecretKey  AWS SecretKey (if null, will use DefaultAWSCredentialsProviderChain)\n+   * @param checkpointInterval  Checkpoint interval for Kinesis checkpointing.\n+   *                            See the Kinesis Spark Streaming documentation for more\n+   *                            details on the different types of checkpoints.\n+   * @param initialPositionInStream  In the absence of Kinesis checkpoint info, this is the\n+   *                                 worker's initial starting position in the stream.\n+   *                                 The values are either the beginning of the stream\n+   *                                 per Kinesis' limit of 24 hours\n+   *                                 (InitialPositionInStream.TRIM_HORIZON) or\n+   *                                 the tip of the stream (InitialPositionInStream.LATEST).\n+   * @param storageLevel Storage level to use for storing the received objects.\n+   *                     StorageLevel.MEMORY_AND_DISK_2 is recommended.\n    */\n-  @Experimental\n   def createStream(\n-      jssc: JavaStreamingContext, \n-      streamName: String, \n-      endpointUrl: String, \n+      jssc: JavaStreamingContext,\n+      kinesisAppName: String,\n+      streamName: String,\n+      endpointUrl: String,\n+      regionName: String,\n+      initialPositionInStream: InitialPositionInStream,\n+      checkpointInterval: Duration,\n+      storageLevel: StorageLevel,\n+      awsAccessKeyId: String,\n+      awsSecretKey: String\n+    ): JavaReceiverInputDStream[Array[Byte]] = {\n+    createStream(jssc.ssc, kinesisAppName, streamName, endpointUrl, regionName,\n+        initialPositionInStream, checkpointInterval, storageLevel, awsAccessKeyId, awsSecretKey)\n+  }\n+\n+  /**\n+   * Create an input stream that pulls messages from a Kinesis stream.\n+   * This uses the Kinesis Client Library (KCL) to pull messages from Kinesis.\n+   *\n+   * Note:\n+   * - The AWS credentials will be discovered using the DefaultAWSCredentialsProviderChain\n+   *   on the workers. See AWS documentation to understand how DefaultAWSCredentialsProviderChain\n+   *   gets AWS credentials.\n+   * - The region of the `endpointUrl` will be used for DynamoDB and CloudWatch.\n+   * - The Kinesis application name used by the Kinesis Client Library (KCL) will be the app name in\n+   *   [[org.apache.spark.SparkConf]].\n+   *\n+   * @param jssc Java StreamingContext object\n+   * @param streamName   Kinesis stream name\n+   * @param endpointUrl  Endpoint url of Kinesis service\n+   *                     (e.g., https://kinesis.us-east-1.amazonaws.com)\n+   * @param checkpointInterval  Checkpoint interval for Kinesis checkpointing.\n+   *                            See the Kinesis Spark Streaming documentation for more\n+   *                            details on the different types of checkpoints.\n+   * @param initialPositionInStream  In the absence of Kinesis checkpoint info, this is the\n+   *                                 worker's initial starting position in the stream.\n+   *                                 The values are either the beginning of the stream\n+   *                                 per Kinesis' limit of 24 hours\n+   *                                 (InitialPositionInStream.TRIM_HORIZON) or\n+   *                                 the tip of the stream (InitialPositionInStream.LATEST).\n+   * @param storageLevel Storage level to use for storing the received objects\n+   *                     StorageLevel.MEMORY_AND_DISK_2 is recommended.\n+   */\n+  @deprecated(\"use other forms of createStream\", \"1.4.0\")\n+  def createStream(\n+      jssc: JavaStreamingContext,\n+      streamName: String,\n+      endpointUrl: String,\n       checkpointInterval: Duration,",
    "line": 289
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "This is the old API, deprecated. For the other final API I think initial position is before checkpoint interval. \n",
    "commit": "f23ea7756092a526138729cf11403a8f98918949",
    "createdAt": "2015-05-21T07:43:10Z",
    "diffHunk": "@@ -79,19 +181,116 @@ object KinesisUtils {\n    *                                 per Kinesis' limit of 24 hours\n    *                                 (InitialPositionInStream.TRIM_HORIZON) or\n    *                                 the tip of the stream (InitialPositionInStream.LATEST).\n-   * @param storageLevel Storage level to use for storing the received objects\n+   * @param storageLevel Storage level to use for storing the received objects.\n+   *                     StorageLevel.MEMORY_AND_DISK_2 is recommended.\n+   */\n+  def createStream(\n+      jssc: JavaStreamingContext,\n+      kinesisAppName: String,\n+      streamName: String,\n+      endpointUrl: String,\n+      regionName: String,\n+      initialPositionInStream: InitialPositionInStream,\n+      checkpointInterval: Duration,\n+      storageLevel: StorageLevel\n+    ): JavaReceiverInputDStream[Array[Byte]] = {\n+    createStream(jssc.ssc, kinesisAppName, streamName, endpointUrl, regionName,\n+      initialPositionInStream, checkpointInterval, storageLevel)\n+  }\n+\n+  /**\n+   * Create an input stream that pulls messages from a Kinesis stream.\n+   * This uses the Kinesis Client Library (KCL) to pull messages from Kinesis.\n    *\n-   * @return JavaReceiverInputDStream[Array[Byte]]\n+   * Note:\n+   *  The given AWS credentials will get saved in DStream checkpoints if checkpointing\n+   *  is enabled. Make sure that your checkpoint directory is secure.\n+   *\n+   * @param jssc Java StreamingContext object\n+   * @param kinesisAppName  Kinesis application name used by the Kinesis Client Library\n+   *                        (KCL) to update DynamoDB\n+   * @param streamName   Kinesis stream name\n+   * @param endpointUrl  Url of Kinesis service (e.g., https://kinesis.us-east-1.amazonaws.com)\n+   * @param regionName   Name of region used by the Kinesis Client Library (KCL) to update\n+   *                     DynamoDB (lease coordination and checkpointing) and CloudWatch (metrics)\n+   * @param awsAccessKeyId  AWS AccessKeyId (if null, will use DefaultAWSCredentialsProviderChain)\n+   * @param awsSecretKey  AWS SecretKey (if null, will use DefaultAWSCredentialsProviderChain)\n+   * @param checkpointInterval  Checkpoint interval for Kinesis checkpointing.\n+   *                            See the Kinesis Spark Streaming documentation for more\n+   *                            details on the different types of checkpoints.\n+   * @param initialPositionInStream  In the absence of Kinesis checkpoint info, this is the\n+   *                                 worker's initial starting position in the stream.\n+   *                                 The values are either the beginning of the stream\n+   *                                 per Kinesis' limit of 24 hours\n+   *                                 (InitialPositionInStream.TRIM_HORIZON) or\n+   *                                 the tip of the stream (InitialPositionInStream.LATEST).\n+   * @param storageLevel Storage level to use for storing the received objects.\n+   *                     StorageLevel.MEMORY_AND_DISK_2 is recommended.\n    */\n-  @Experimental\n   def createStream(\n-      jssc: JavaStreamingContext, \n-      streamName: String, \n-      endpointUrl: String, \n+      jssc: JavaStreamingContext,\n+      kinesisAppName: String,\n+      streamName: String,\n+      endpointUrl: String,\n+      regionName: String,\n+      initialPositionInStream: InitialPositionInStream,\n+      checkpointInterval: Duration,\n+      storageLevel: StorageLevel,\n+      awsAccessKeyId: String,\n+      awsSecretKey: String\n+    ): JavaReceiverInputDStream[Array[Byte]] = {\n+    createStream(jssc.ssc, kinesisAppName, streamName, endpointUrl, regionName,\n+        initialPositionInStream, checkpointInterval, storageLevel, awsAccessKeyId, awsSecretKey)\n+  }\n+\n+  /**\n+   * Create an input stream that pulls messages from a Kinesis stream.\n+   * This uses the Kinesis Client Library (KCL) to pull messages from Kinesis.\n+   *\n+   * Note:\n+   * - The AWS credentials will be discovered using the DefaultAWSCredentialsProviderChain\n+   *   on the workers. See AWS documentation to understand how DefaultAWSCredentialsProviderChain\n+   *   gets AWS credentials.\n+   * - The region of the `endpointUrl` will be used for DynamoDB and CloudWatch.\n+   * - The Kinesis application name used by the Kinesis Client Library (KCL) will be the app name in\n+   *   [[org.apache.spark.SparkConf]].\n+   *\n+   * @param jssc Java StreamingContext object\n+   * @param streamName   Kinesis stream name\n+   * @param endpointUrl  Endpoint url of Kinesis service\n+   *                     (e.g., https://kinesis.us-east-1.amazonaws.com)\n+   * @param checkpointInterval  Checkpoint interval for Kinesis checkpointing.\n+   *                            See the Kinesis Spark Streaming documentation for more\n+   *                            details on the different types of checkpoints.\n+   * @param initialPositionInStream  In the absence of Kinesis checkpoint info, this is the\n+   *                                 worker's initial starting position in the stream.\n+   *                                 The values are either the beginning of the stream\n+   *                                 per Kinesis' limit of 24 hours\n+   *                                 (InitialPositionInStream.TRIM_HORIZON) or\n+   *                                 the tip of the stream (InitialPositionInStream.LATEST).\n+   * @param storageLevel Storage level to use for storing the received objects\n+   *                     StorageLevel.MEMORY_AND_DISK_2 is recommended.\n+   */\n+  @deprecated(\"use other forms of createStream\", \"1.4.0\")\n+  def createStream(\n+      jssc: JavaStreamingContext,\n+      streamName: String,\n+      endpointUrl: String,\n       checkpointInterval: Duration,",
    "line": 289
  }],
  "prId": 6147
}, {
  "comments": [{
    "author": {
      "login": "cfregly"
    },
    "body": "add scala doc to describe the potential for IllegalArgumentException?\n\n/*\\* */\n",
    "commit": "f23ea7756092a526138729cf11403a8f98918949",
    "createdAt": "2015-05-21T06:18:28Z",
    "diffHunk": "@@ -79,19 +181,116 @@ object KinesisUtils {\n    *                                 per Kinesis' limit of 24 hours\n    *                                 (InitialPositionInStream.TRIM_HORIZON) or\n    *                                 the tip of the stream (InitialPositionInStream.LATEST).\n-   * @param storageLevel Storage level to use for storing the received objects\n+   * @param storageLevel Storage level to use for storing the received objects.\n+   *                     StorageLevel.MEMORY_AND_DISK_2 is recommended.\n+   */\n+  def createStream(\n+      jssc: JavaStreamingContext,\n+      kinesisAppName: String,\n+      streamName: String,\n+      endpointUrl: String,\n+      regionName: String,\n+      initialPositionInStream: InitialPositionInStream,\n+      checkpointInterval: Duration,\n+      storageLevel: StorageLevel\n+    ): JavaReceiverInputDStream[Array[Byte]] = {\n+    createStream(jssc.ssc, kinesisAppName, streamName, endpointUrl, regionName,\n+      initialPositionInStream, checkpointInterval, storageLevel)\n+  }\n+\n+  /**\n+   * Create an input stream that pulls messages from a Kinesis stream.\n+   * This uses the Kinesis Client Library (KCL) to pull messages from Kinesis.\n    *\n-   * @return JavaReceiverInputDStream[Array[Byte]]\n+   * Note:\n+   *  The given AWS credentials will get saved in DStream checkpoints if checkpointing\n+   *  is enabled. Make sure that your checkpoint directory is secure.\n+   *\n+   * @param jssc Java StreamingContext object\n+   * @param kinesisAppName  Kinesis application name used by the Kinesis Client Library\n+   *                        (KCL) to update DynamoDB\n+   * @param streamName   Kinesis stream name\n+   * @param endpointUrl  Url of Kinesis service (e.g., https://kinesis.us-east-1.amazonaws.com)\n+   * @param regionName   Name of region used by the Kinesis Client Library (KCL) to update\n+   *                     DynamoDB (lease coordination and checkpointing) and CloudWatch (metrics)\n+   * @param awsAccessKeyId  AWS AccessKeyId (if null, will use DefaultAWSCredentialsProviderChain)\n+   * @param awsSecretKey  AWS SecretKey (if null, will use DefaultAWSCredentialsProviderChain)\n+   * @param checkpointInterval  Checkpoint interval for Kinesis checkpointing.\n+   *                            See the Kinesis Spark Streaming documentation for more\n+   *                            details on the different types of checkpoints.\n+   * @param initialPositionInStream  In the absence of Kinesis checkpoint info, this is the\n+   *                                 worker's initial starting position in the stream.\n+   *                                 The values are either the beginning of the stream\n+   *                                 per Kinesis' limit of 24 hours\n+   *                                 (InitialPositionInStream.TRIM_HORIZON) or\n+   *                                 the tip of the stream (InitialPositionInStream.LATEST).\n+   * @param storageLevel Storage level to use for storing the received objects.\n+   *                     StorageLevel.MEMORY_AND_DISK_2 is recommended.\n    */\n-  @Experimental\n   def createStream(\n-      jssc: JavaStreamingContext, \n-      streamName: String, \n-      endpointUrl: String, \n+      jssc: JavaStreamingContext,\n+      kinesisAppName: String,\n+      streamName: String,\n+      endpointUrl: String,\n+      regionName: String,\n+      initialPositionInStream: InitialPositionInStream,\n+      checkpointInterval: Duration,\n+      storageLevel: StorageLevel,\n+      awsAccessKeyId: String,\n+      awsSecretKey: String\n+    ): JavaReceiverInputDStream[Array[Byte]] = {\n+    createStream(jssc.ssc, kinesisAppName, streamName, endpointUrl, regionName,\n+        initialPositionInStream, checkpointInterval, storageLevel, awsAccessKeyId, awsSecretKey)\n+  }\n+\n+  /**\n+   * Create an input stream that pulls messages from a Kinesis stream.\n+   * This uses the Kinesis Client Library (KCL) to pull messages from Kinesis.\n+   *\n+   * Note:\n+   * - The AWS credentials will be discovered using the DefaultAWSCredentialsProviderChain\n+   *   on the workers. See AWS documentation to understand how DefaultAWSCredentialsProviderChain\n+   *   gets AWS credentials.\n+   * - The region of the `endpointUrl` will be used for DynamoDB and CloudWatch.\n+   * - The Kinesis application name used by the Kinesis Client Library (KCL) will be the app name in\n+   *   [[org.apache.spark.SparkConf]].\n+   *\n+   * @param jssc Java StreamingContext object\n+   * @param streamName   Kinesis stream name\n+   * @param endpointUrl  Endpoint url of Kinesis service\n+   *                     (e.g., https://kinesis.us-east-1.amazonaws.com)\n+   * @param checkpointInterval  Checkpoint interval for Kinesis checkpointing.\n+   *                            See the Kinesis Spark Streaming documentation for more\n+   *                            details on the different types of checkpoints.\n+   * @param initialPositionInStream  In the absence of Kinesis checkpoint info, this is the\n+   *                                 worker's initial starting position in the stream.\n+   *                                 The values are either the beginning of the stream\n+   *                                 per Kinesis' limit of 24 hours\n+   *                                 (InitialPositionInStream.TRIM_HORIZON) or\n+   *                                 the tip of the stream (InitialPositionInStream.LATEST).\n+   * @param storageLevel Storage level to use for storing the received objects\n+   *                     StorageLevel.MEMORY_AND_DISK_2 is recommended.\n+   */\n+  @deprecated(\"use other forms of createStream\", \"1.4.0\")\n+  def createStream(\n+      jssc: JavaStreamingContext,\n+      streamName: String,\n+      endpointUrl: String,\n       checkpointInterval: Duration,\n       initialPositionInStream: InitialPositionInStream,\n-      storageLevel: StorageLevel): JavaReceiverInputDStream[Array[Byte]] = {\n-    jssc.receiverStream(new KinesisReceiver(jssc.ssc.sc.appName, streamName,\n-        endpointUrl, checkpointInterval, initialPositionInStream, storageLevel))\n+      storageLevel: StorageLevel\n+    ): JavaReceiverInputDStream[Array[Byte]] = {\n+    createStream(\n+      jssc.ssc, streamName, endpointUrl, checkpointInterval, initialPositionInStream, storageLevel)\n+  }\n+\n+  private def getRegionByEndpoint(endpointUrl: String): String = {\n+    RegionUtils.getRegionByEndpoint(endpointUrl).getName()\n+  }\n+\n+  private def validateRegion(regionName: String): String = {",
    "line": 304
  }],
  "prId": 6147
}]