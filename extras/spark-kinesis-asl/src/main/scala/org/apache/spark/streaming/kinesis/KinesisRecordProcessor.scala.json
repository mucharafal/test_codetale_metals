[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Please order the imports as recommended by Spark coding guide.\nhttps://cwiki.apache.org/confluence/display/SPARK/Spark+Code+Style+Guide\n",
    "commit": "47745816b21d7d2255a98283e3055a5a2a397a27",
    "createdAt": "2014-07-30T02:27:04Z",
    "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.List\n+import scala.collection.JavaConversions.asScalaBuffer\n+import scala.collection.mutable.ArrayBuffer\n+import org.apache.spark.Logging\n+import org.apache.spark.streaming.util.ManualClock\n+import org.apache.spark.streaming.util.SystemClock\n+import com.amazonaws.services.kinesis.clientlibrary.interfaces.IRecordProcessor\n+import com.amazonaws.services.kinesis.clientlibrary.interfaces.IRecordProcessorCheckpointer"
  }],
  "prId": 1434
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "extra space.\n",
    "commit": "47745816b21d7d2255a98283e3055a5a2a397a27",
    "createdAt": "2014-07-30T02:27:23Z",
    "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.List\n+import scala.collection.JavaConversions.asScalaBuffer\n+import scala.collection.mutable.ArrayBuffer\n+import org.apache.spark.Logging\n+import org.apache.spark.streaming.util.ManualClock\n+import org.apache.spark.streaming.util.SystemClock\n+import com.amazonaws.services.kinesis.clientlibrary.interfaces.IRecordProcessor\n+import com.amazonaws.services.kinesis.clientlibrary.interfaces.IRecordProcessorCheckpointer\n+import com.amazonaws.services.kinesis.clientlibrary.types.ShutdownReason\n+import com.amazonaws.services.kinesis.model.Record\n+import scala.compat.Platform\n+import org.apache.spark.streaming.util.Clock\n+\n+/**\n+ * Kinesis-specific implementation of the Kinesis Client Library (KCL) IRecordProcessor.\n+ * This implementation operates on the Array[Byte] from the KinesisReceiver.\n+ * The Kinesis Worker creates an instance of this KinesisRecordProcessor upon startup.\n+ *\n+ * @param Kinesis receiver\n+ * @param workerId for logging purposes\n+ * @param checkpoint state\n+ */\n+private[streaming] class KinesisRecordProcessor(\n+  receiver: KinesisReceiver,\n+  workerId: String,\n+  checkpointState: CheckpointState) extends IRecordProcessor with Logging {\n+\n+  /** shardId to be populated during initialize() */\n+  var shardId: String = _\n+\n+  /**\n+   * The Kinesis Client Library calls this method during IRecordProcessor initialization.\n+   *\n+   * @param shardId assigned by the KCL to this particular RecordProcessor.\n+   */\n+  override def initialize(shardId: String) {\n+    logInfo(s\"Initialize:  Initializing workerId $workerId with shardId $shardId\")\n+"
  }],
  "prId": 1434
}]