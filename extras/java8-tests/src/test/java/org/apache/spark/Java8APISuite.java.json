[{
  "comments": [{
    "author": {
      "login": "mateiz"
    },
    "body": "Indents seem messed up here, should both be 2 spaces\n",
    "commit": "b231375c92ecad85ed084e8a5a865c8eb495a4ee",
    "createdAt": "2014-04-05T22:08:31Z",
    "diffHunk": "@@ -246,6 +246,24 @@ public void mapPartitions() {\n   }\n \n   @Test\n+  public void mapPartitionsWithIndex() {\n+    JavaRDD<Integer> rdd = sc.parallelize(Arrays.asList(1, 2, 3, 4), 2);\n+    JavaRDD<Integer> partitionSums = rdd.mapPartitionsWithIndex((start, iter) -> {\n+      List<Integer> list = new ArrayList<Integer>();\n+      int sum = 0;\n+      int pos = start;\n+      while (iter.hasNext()) {\n+\t  sum += (pos* iter.next());\n+\tpos += 1;"
  }, {
    "author": {
      "login": "mateiz"
    },
    "body": "Also space before `*`\n",
    "commit": "b231375c92ecad85ed084e8a5a865c8eb495a4ee",
    "createdAt": "2014-04-05T22:08:40Z",
    "diffHunk": "@@ -246,6 +246,24 @@ public void mapPartitions() {\n   }\n \n   @Test\n+  public void mapPartitionsWithIndex() {\n+    JavaRDD<Integer> rdd = sc.parallelize(Arrays.asList(1, 2, 3, 4), 2);\n+    JavaRDD<Integer> partitionSums = rdd.mapPartitionsWithIndex((start, iter) -> {\n+      List<Integer> list = new ArrayList<Integer>();\n+      int sum = 0;\n+      int pos = start;\n+      while (iter.hasNext()) {\n+\t  sum += (pos* iter.next());\n+\tpos += 1;"
  }],
  "prId": 16
}, {
  "comments": [{
    "author": {
      "login": "mateiz"
    },
    "body": "Actually this test is just broken as is, there's no `rddByIndex` variable. You have to run it on Java 8, otherwise SBT will not build this project.\n",
    "commit": "b231375c92ecad85ed084e8a5a865c8eb495a4ee",
    "createdAt": "2014-04-05T22:11:02Z",
    "diffHunk": "@@ -246,6 +246,24 @@ public void mapPartitions() {\n   }\n \n   @Test\n+  public void mapPartitionsWithIndex() {\n+    JavaRDD<Integer> rdd = sc.parallelize(Arrays.asList(1, 2, 3, 4), 2);\n+    JavaRDD<Integer> partitionSums = rdd.mapPartitionsWithIndex((start, iter) -> {\n+      List<Integer> list = new ArrayList<Integer>();\n+      int sum = 0;\n+      int pos = start;\n+      while (iter.hasNext()) {\n+\t  sum += (pos* iter.next());\n+\tpos += 1;\n+      }\n+      return list.iterator();\n+    });\n+   Assert.assertEquals(0, rddByIndex.first().intValue());\n+   Integer[] values = {0, 2, 6, 12, 20};\n+   Assert.assertEquals(Arrays.asList(values), rddByIndex.collect());",
    "line": 18
  }],
  "prId": 16
}]