[{
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "Can we disable these checks? Those does not make much sense.\n",
    "commit": "2fc7291333e45979ff4eed3511008b752dc6bb69",
    "createdAt": "2015-07-10T21:45:02Z",
    "diffHunk": "@@ -0,0 +1,404 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+[MASTER]\n+\n+# Specify a configuration file.\n+#rcfile=\n+\n+# Python code to execute, usually for sys.path manipulation such as\n+# pygtk.require().\n+#init-hook=\n+\n+# Profiled execution.\n+profile=no\n+\n+# Add files or directories to the blacklist. They should be base names, not\n+# paths.\n+ignore=pyspark.heapq3\n+\n+# Pickle collected data for later comparisons.\n+persistent=yes\n+\n+# List of plugins (as comma separated values of python modules names) to load,\n+# usually to register additional checkers.\n+load-plugins=\n+\n+# Use multiple processes to speed up Pylint.\n+jobs=1\n+\n+# Allow loading of arbitrary C extensions. Extensions are imported into the\n+# active Python interpreter and may run arbitrary code.\n+unsafe-load-any-extension=no\n+\n+# A comma-separated list of package or module names from where C extensions may\n+# be loaded. Extensions are loading into the active Python interpreter and may\n+# run arbitrary code\n+extension-pkg-whitelist=\n+\n+# Allow optimization of some AST trees. This will activate a peephole AST\n+# optimizer, which will apply various small optimizations. For instance, it can\n+# be used to obtain the result of joining multiple strings with the addition\n+# operator. Joining a lot of strings can lead to a maximum recursion error in\n+# Pylint and this flag can prevent that. It has one side effect, the resulting\n+# AST will be different than the one from reality.\n+optimize-ast=no\n+\n+\n+[MESSAGES CONTROL]\n+\n+# Only show warnings with the listed confidence levels. Leave empty to show\n+# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED\n+confidence=\n+\n+# Enable the message, report, category or checker with the given id(s). You can\n+# either give multiple identifier separated by comma (,) or put this option\n+# multiple time. See also the \"--disable\" option for examples.\n+enable=\n+\n+# Disable the message, report, category or checker with the given id(s). You\n+# can either give multiple identifiers separated by comma (,) or put this\n+# option multiple times (only on the command line, not in the configuration\n+# file where it should appear only once).You can also use \"--disable=all\" to\n+# disable everything first and then reenable specific checks. For example, if\n+# you want to run only the similarities checker, you can use \"--disable=all\n+# --enable=similarities\". If you want to run only the classes checker, but have\n+# no Warning level messages displayed, use\"--disable=all --enable=classes\n+# --disable=W\"\n+\n+# These errors are arranged in order of number of warning given in pylint.\n+# If you would like to improve the code quality of pyspark, remove any of these disabled errors\n+# run ./dev/lint-python and see if the errors raised by pylint can be fixed.\n+\n+disable=invalid-name,missing-docstring,protected-access,unused-argument,no-member,unused-wildcard-import,redefined-builtin,too-many-arguments,unused-variable,too-few-public-methods,bad-continuation,duplicate-code,redefined-outer-name,too-many-ancestors,import-error,superfluous-parens,unused-import,line-too-long,no-name-in-module,unnecessary-lambda,import-self,no-self-use,unidiomatic-typecheck,fixme,too-many-locals,cyclic-import,too-many-branches,bare-except,wildcard-import,dangerous-default-value,broad-except,too-many-public-methods,deprecated-lambda,anomalous-backslash-in-string,too-many-lines,reimported,too-many-statements,bad-whitespace,unpacking-non-sequence,too-many-instance-attributes,abstract-method,old-style-class,global-statement,attribute-defined-outside-init,arguments-differ,undefined-all-variable,no-init,useless-else-on-loop,super-init-not-called,notimplemented-raised,too-many-return-statements,pointless-string-statement,global-variable-undefined,bad-classmethod-argument,too-many-format-args,parse-error,no-self-argument,pointless-statement,undefined-variable\n+\n+\n+[REPORTS]\n+\n+# Set the output format. Available formats are text, parseable, colorized, msvs\n+# (visual studio) and html. You can also give a reporter class, eg\n+# mypackage.mymodule.MyReporterClass.\n+output-format=text\n+\n+# Put messages in a separate file for each module / package specified on the\n+# command line instead of printing them on stdout. Reports (if any) will be\n+# written in a file name \"pylint_global.[txt|html]\".\n+files-output=no\n+\n+# Tells whether to display a full report or only the messages\n+reports=no\n+\n+# Python expression which should return a note less than 10 (10 is the highest\n+# note). You have access to the variables errors warning, statement which\n+# respectively contain the number of errors / warnings messages and the total\n+# number of statements analyzed. This is used by the global evaluation report\n+# (RP0004).\n+evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n+\n+# Add a comment according to your evaluation note. This is used by the global\n+# evaluation report (RP0004).\n+comment=no\n+\n+# Template used to display messages. This is a python new-style format string\n+# used to format the message information. See doc for all details\n+#msg-template=\n+\n+\n+[MISCELLANEOUS]\n+\n+# List of note tags to take in consideration, separated by a comma.\n+notes=FIXME,XXX,TODO\n+\n+\n+[BASIC]\n+\n+# Required attributes for module, separated by a comma\n+required-attributes=\n+\n+# List of builtins function names that should not be used, separated by a comma\n+bad-functions=\n+\n+# Good variable names which should always be accepted, separated by a comma\n+good-names=i,j,k,ex,Run,_\n+\n+# Bad variable names which should always be refused, separated by a comma\n+bad-names=baz,toto,tutu,tata\n+\n+# Colon-delimited sets of names that determine each other's naming style when\n+# the name regexes allow several styles.\n+name-group=\n+\n+# Include a hint for the correct naming format with invalid-name\n+include-naming-hint=no\n+\n+# Regular expression matching correct function names\n+function-rgx=[a-z_][a-z0-9_]{2,30}$\n+\n+# Naming hint for function names\n+function-name-hint=[a-z_][a-z0-9_]{2,30}$\n+\n+# Regular expression matching correct variable names\n+variable-rgx=[a-z_][a-z0-9_]{2,30}$\n+\n+# Naming hint for variable names\n+variable-name-hint=[a-z_][a-z0-9_]{2,30}$\n+\n+# Regular expression matching correct constant names\n+const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$\n+\n+# Naming hint for constant names\n+const-name-hint=(([A-Z_][A-Z0-9_]*)|(__.*__))$\n+\n+# Regular expression matching correct attribute names\n+attr-rgx=[a-z_][a-z0-9_]{2,30}$\n+\n+# Naming hint for attribute names\n+attr-name-hint=[a-z_][a-z0-9_]{2,30}$\n+\n+# Regular expression matching correct argument names\n+argument-rgx=[a-z_][a-z0-9_]{2,30}$\n+\n+# Naming hint for argument names\n+argument-name-hint=[a-z_][a-z0-9_]{2,30}$\n+\n+# Regular expression matching correct class attribute names\n+class-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$\n+\n+# Naming hint for class attribute names\n+class-attribute-name-hint=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$\n+\n+# Regular expression matching correct inline iteration names\n+inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$\n+\n+# Naming hint for inline iteration names\n+inlinevar-name-hint=[A-Za-z_][A-Za-z0-9_]*$\n+\n+# Regular expression matching correct class names\n+class-rgx=[A-Z_][a-zA-Z0-9]+$\n+\n+# Naming hint for class names\n+class-name-hint=[A-Z_][a-zA-Z0-9]+$\n+\n+# Regular expression matching correct module names\n+module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n+\n+# Naming hint for module names\n+module-name-hint=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n+\n+# Regular expression matching correct method names\n+method-rgx=[a-z_][a-z0-9_]{2,30}$\n+\n+# Naming hint for method names\n+method-name-hint=[a-z_][a-z0-9_]{2,30}$\n+\n+# Regular expression which should only match function or class names that do\n+# not require a docstring.\n+no-docstring-rgx=__.*__\n+\n+# Minimum line length for functions/classes that require docstrings, shorter\n+# ones are exempt.\n+docstring-min-length=-1\n+\n+\n+[FORMAT]\n+\n+# Maximum number of characters on a single line.\n+max-line-length=100\n+\n+# Regexp for a line that is allowed to be longer than the limit.\n+ignore-long-lines=^\\s*(# )?<?https?://\\S+>?$\n+\n+# Allow the body of an if to be on the same line as the test if there is no\n+# else.\n+single-line-if-stmt=no\n+\n+# List of optional constructs for which whitespace checking is disabled\n+no-space-check=trailing-comma,dict-separator\n+\n+# Maximum number of lines in a module\n+max-module-lines=1000\n+\n+# String used as indentation unit. This is usually \" \" (4 spaces) or \"\\t\" (1\n+# tab).\n+indent-string='    '\n+\n+# Number of spaces of indent required inside a hanging or continued line.\n+indent-after-paren=4\n+\n+# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\n+expected-line-ending-format=\n+\n+\n+[SIMILARITIES]\n+\n+# Minimum lines number of a similarity.\n+min-similarity-lines=4\n+\n+# Ignore comments when computing similarities.\n+ignore-comments=yes\n+\n+# Ignore docstrings when computing similarities.\n+ignore-docstrings=yes\n+\n+# Ignore imports when computing similarities.\n+ignore-imports=no\n+\n+\n+[VARIABLES]\n+\n+# Tells whether we should check for unused import in __init__ files.\n+init-import=no\n+\n+# A regular expression matching the name of dummy variables (i.e. expectedly\n+# not used).\n+dummy-variables-rgx=_$|dummy\n+\n+# List of additional names supposed to be defined in builtins. Remember that\n+# you should avoid to define new builtins when possible.\n+additional-builtins=\n+\n+# List of strings which can identify a callback function by name. A callback\n+# name must start or end with one of those strings.\n+callbacks=cb_,_cb\n+\n+\n+[SPELLING]\n+\n+# Spelling dictionary name. Available dictionaries: none. To make it working\n+# install python-enchant package.\n+spelling-dict=\n+\n+# List of comma separated words that should not be checked.\n+spelling-ignore-words=\n+\n+# A path to a file that contains private dictionary; one word per line.\n+spelling-private-dict-file=\n+\n+# Tells whether to store unknown words to indicated private dictionary in\n+# --spelling-private-dict-file option instead of raising a message.\n+spelling-store-unknown-words=no\n+\n+\n+[LOGGING]\n+\n+# Logging modules to check that the string format arguments are in logging\n+# function parameter format\n+logging-modules=logging\n+\n+\n+[TYPECHECK]\n+\n+# Tells whether missing members accessed in mixin class should be ignored. A\n+# mixin class is detected if its name ends with \"mixin\" (case insensitive).\n+ignore-mixin-members=yes\n+\n+# List of module names for which member attributes should not be checked\n+# (useful for modules/projects where namespaces are manipulated during runtime\n+# and thus existing member attributes cannot be deduced by static analysis\n+ignored-modules=\n+\n+# List of classes names for which member attributes should not be checked\n+# (useful for classes with attributes dynamically set).\n+ignored-classes=SQLObject\n+\n+# When zope mode is activated, add a predefined set of Zope acquired attributes\n+# to generated-members.\n+zope=no\n+\n+# List of members which are set dynamically and missed by pylint inference\n+# system, and so shouldn't trigger E0201 when accessed. Python regular\n+# expressions are accepted.\n+generated-members=REQUEST,acl_users,aq_parent\n+\n+\n+[CLASSES]\n+\n+# List of interface methods to ignore, separated by a comma. This is used for\n+# instance to not check methods defines in Zope's Interface base class.\n+ignore-iface-methods=isImplementedBy,deferred,extends,names,namesAndDescriptions,queryDescriptionFor,getBases,getDescriptionFor,getDoc,getName,getTaggedValue,getTaggedValueTags,isEqualOrExtendedBy,setTaggedValue,isImplementedByInstancesOf,adaptWith,is_implemented_by\n+\n+# List of method names used to declare (i.e. assign) instance attributes.\n+defining-attr-methods=__init__,__new__,setUp\n+\n+# List of valid names for the first argument in a class method.\n+valid-classmethod-first-arg=cls\n+\n+# List of valid names for the first argument in a metaclass class method.\n+valid-metaclass-classmethod-first-arg=mcs\n+\n+# List of member names, which should be excluded from the protected access\n+# warning.\n+exclude-protected=_asdict,_fields,_replace,_source,_make\n+\n+\n+[IMPORTS]\n+\n+# Deprecated modules which should not be used, separated by a comma\n+deprecated-modules=regsub,TERMIOS,Bastion,rexec\n+\n+# Create a graph of every (i.e. internal and external) dependencies in the\n+# given file (report RP0402 must not be disabled)\n+import-graph=\n+\n+# Create a graph of external dependencies in the given file (report RP0402 must\n+# not be disabled)\n+ext-import-graph=\n+\n+# Create a graph of internal dependencies in the given file (report RP0402 must\n+# not be disabled)\n+int-import-graph=\n+\n+\n+[DESIGN]",
    "line": 366
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "Yeah, I think we should disable all \"max number of FOO\" checks since they're going to lead to lots of spurious style failures down the line.\n",
    "commit": "2fc7291333e45979ff4eed3511008b752dc6bb69",
    "createdAt": "2015-07-10T23:03:29Z",
    "diffHunk": "@@ -0,0 +1,404 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+[MASTER]\n+\n+# Specify a configuration file.\n+#rcfile=\n+\n+# Python code to execute, usually for sys.path manipulation such as\n+# pygtk.require().\n+#init-hook=\n+\n+# Profiled execution.\n+profile=no\n+\n+# Add files or directories to the blacklist. They should be base names, not\n+# paths.\n+ignore=pyspark.heapq3\n+\n+# Pickle collected data for later comparisons.\n+persistent=yes\n+\n+# List of plugins (as comma separated values of python modules names) to load,\n+# usually to register additional checkers.\n+load-plugins=\n+\n+# Use multiple processes to speed up Pylint.\n+jobs=1\n+\n+# Allow loading of arbitrary C extensions. Extensions are imported into the\n+# active Python interpreter and may run arbitrary code.\n+unsafe-load-any-extension=no\n+\n+# A comma-separated list of package or module names from where C extensions may\n+# be loaded. Extensions are loading into the active Python interpreter and may\n+# run arbitrary code\n+extension-pkg-whitelist=\n+\n+# Allow optimization of some AST trees. This will activate a peephole AST\n+# optimizer, which will apply various small optimizations. For instance, it can\n+# be used to obtain the result of joining multiple strings with the addition\n+# operator. Joining a lot of strings can lead to a maximum recursion error in\n+# Pylint and this flag can prevent that. It has one side effect, the resulting\n+# AST will be different than the one from reality.\n+optimize-ast=no\n+\n+\n+[MESSAGES CONTROL]\n+\n+# Only show warnings with the listed confidence levels. Leave empty to show\n+# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED\n+confidence=\n+\n+# Enable the message, report, category or checker with the given id(s). You can\n+# either give multiple identifier separated by comma (,) or put this option\n+# multiple time. See also the \"--disable\" option for examples.\n+enable=\n+\n+# Disable the message, report, category or checker with the given id(s). You\n+# can either give multiple identifiers separated by comma (,) or put this\n+# option multiple times (only on the command line, not in the configuration\n+# file where it should appear only once).You can also use \"--disable=all\" to\n+# disable everything first and then reenable specific checks. For example, if\n+# you want to run only the similarities checker, you can use \"--disable=all\n+# --enable=similarities\". If you want to run only the classes checker, but have\n+# no Warning level messages displayed, use\"--disable=all --enable=classes\n+# --disable=W\"\n+\n+# These errors are arranged in order of number of warning given in pylint.\n+# If you would like to improve the code quality of pyspark, remove any of these disabled errors\n+# run ./dev/lint-python and see if the errors raised by pylint can be fixed.\n+\n+disable=invalid-name,missing-docstring,protected-access,unused-argument,no-member,unused-wildcard-import,redefined-builtin,too-many-arguments,unused-variable,too-few-public-methods,bad-continuation,duplicate-code,redefined-outer-name,too-many-ancestors,import-error,superfluous-parens,unused-import,line-too-long,no-name-in-module,unnecessary-lambda,import-self,no-self-use,unidiomatic-typecheck,fixme,too-many-locals,cyclic-import,too-many-branches,bare-except,wildcard-import,dangerous-default-value,broad-except,too-many-public-methods,deprecated-lambda,anomalous-backslash-in-string,too-many-lines,reimported,too-many-statements,bad-whitespace,unpacking-non-sequence,too-many-instance-attributes,abstract-method,old-style-class,global-statement,attribute-defined-outside-init,arguments-differ,undefined-all-variable,no-init,useless-else-on-loop,super-init-not-called,notimplemented-raised,too-many-return-statements,pointless-string-statement,global-variable-undefined,bad-classmethod-argument,too-many-format-args,parse-error,no-self-argument,pointless-statement,undefined-variable\n+\n+\n+[REPORTS]\n+\n+# Set the output format. Available formats are text, parseable, colorized, msvs\n+# (visual studio) and html. You can also give a reporter class, eg\n+# mypackage.mymodule.MyReporterClass.\n+output-format=text\n+\n+# Put messages in a separate file for each module / package specified on the\n+# command line instead of printing them on stdout. Reports (if any) will be\n+# written in a file name \"pylint_global.[txt|html]\".\n+files-output=no\n+\n+# Tells whether to display a full report or only the messages\n+reports=no\n+\n+# Python expression which should return a note less than 10 (10 is the highest\n+# note). You have access to the variables errors warning, statement which\n+# respectively contain the number of errors / warnings messages and the total\n+# number of statements analyzed. This is used by the global evaluation report\n+# (RP0004).\n+evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n+\n+# Add a comment according to your evaluation note. This is used by the global\n+# evaluation report (RP0004).\n+comment=no\n+\n+# Template used to display messages. This is a python new-style format string\n+# used to format the message information. See doc for all details\n+#msg-template=\n+\n+\n+[MISCELLANEOUS]\n+\n+# List of note tags to take in consideration, separated by a comma.\n+notes=FIXME,XXX,TODO\n+\n+\n+[BASIC]\n+\n+# Required attributes for module, separated by a comma\n+required-attributes=\n+\n+# List of builtins function names that should not be used, separated by a comma\n+bad-functions=\n+\n+# Good variable names which should always be accepted, separated by a comma\n+good-names=i,j,k,ex,Run,_\n+\n+# Bad variable names which should always be refused, separated by a comma\n+bad-names=baz,toto,tutu,tata\n+\n+# Colon-delimited sets of names that determine each other's naming style when\n+# the name regexes allow several styles.\n+name-group=\n+\n+# Include a hint for the correct naming format with invalid-name\n+include-naming-hint=no\n+\n+# Regular expression matching correct function names\n+function-rgx=[a-z_][a-z0-9_]{2,30}$\n+\n+# Naming hint for function names\n+function-name-hint=[a-z_][a-z0-9_]{2,30}$\n+\n+# Regular expression matching correct variable names\n+variable-rgx=[a-z_][a-z0-9_]{2,30}$\n+\n+# Naming hint for variable names\n+variable-name-hint=[a-z_][a-z0-9_]{2,30}$\n+\n+# Regular expression matching correct constant names\n+const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$\n+\n+# Naming hint for constant names\n+const-name-hint=(([A-Z_][A-Z0-9_]*)|(__.*__))$\n+\n+# Regular expression matching correct attribute names\n+attr-rgx=[a-z_][a-z0-9_]{2,30}$\n+\n+# Naming hint for attribute names\n+attr-name-hint=[a-z_][a-z0-9_]{2,30}$\n+\n+# Regular expression matching correct argument names\n+argument-rgx=[a-z_][a-z0-9_]{2,30}$\n+\n+# Naming hint for argument names\n+argument-name-hint=[a-z_][a-z0-9_]{2,30}$\n+\n+# Regular expression matching correct class attribute names\n+class-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$\n+\n+# Naming hint for class attribute names\n+class-attribute-name-hint=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$\n+\n+# Regular expression matching correct inline iteration names\n+inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$\n+\n+# Naming hint for inline iteration names\n+inlinevar-name-hint=[A-Za-z_][A-Za-z0-9_]*$\n+\n+# Regular expression matching correct class names\n+class-rgx=[A-Z_][a-zA-Z0-9]+$\n+\n+# Naming hint for class names\n+class-name-hint=[A-Z_][a-zA-Z0-9]+$\n+\n+# Regular expression matching correct module names\n+module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n+\n+# Naming hint for module names\n+module-name-hint=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n+\n+# Regular expression matching correct method names\n+method-rgx=[a-z_][a-z0-9_]{2,30}$\n+\n+# Naming hint for method names\n+method-name-hint=[a-z_][a-z0-9_]{2,30}$\n+\n+# Regular expression which should only match function or class names that do\n+# not require a docstring.\n+no-docstring-rgx=__.*__\n+\n+# Minimum line length for functions/classes that require docstrings, shorter\n+# ones are exempt.\n+docstring-min-length=-1\n+\n+\n+[FORMAT]\n+\n+# Maximum number of characters on a single line.\n+max-line-length=100\n+\n+# Regexp for a line that is allowed to be longer than the limit.\n+ignore-long-lines=^\\s*(# )?<?https?://\\S+>?$\n+\n+# Allow the body of an if to be on the same line as the test if there is no\n+# else.\n+single-line-if-stmt=no\n+\n+# List of optional constructs for which whitespace checking is disabled\n+no-space-check=trailing-comma,dict-separator\n+\n+# Maximum number of lines in a module\n+max-module-lines=1000\n+\n+# String used as indentation unit. This is usually \" \" (4 spaces) or \"\\t\" (1\n+# tab).\n+indent-string='    '\n+\n+# Number of spaces of indent required inside a hanging or continued line.\n+indent-after-paren=4\n+\n+# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\n+expected-line-ending-format=\n+\n+\n+[SIMILARITIES]\n+\n+# Minimum lines number of a similarity.\n+min-similarity-lines=4\n+\n+# Ignore comments when computing similarities.\n+ignore-comments=yes\n+\n+# Ignore docstrings when computing similarities.\n+ignore-docstrings=yes\n+\n+# Ignore imports when computing similarities.\n+ignore-imports=no\n+\n+\n+[VARIABLES]\n+\n+# Tells whether we should check for unused import in __init__ files.\n+init-import=no\n+\n+# A regular expression matching the name of dummy variables (i.e. expectedly\n+# not used).\n+dummy-variables-rgx=_$|dummy\n+\n+# List of additional names supposed to be defined in builtins. Remember that\n+# you should avoid to define new builtins when possible.\n+additional-builtins=\n+\n+# List of strings which can identify a callback function by name. A callback\n+# name must start or end with one of those strings.\n+callbacks=cb_,_cb\n+\n+\n+[SPELLING]\n+\n+# Spelling dictionary name. Available dictionaries: none. To make it working\n+# install python-enchant package.\n+spelling-dict=\n+\n+# List of comma separated words that should not be checked.\n+spelling-ignore-words=\n+\n+# A path to a file that contains private dictionary; one word per line.\n+spelling-private-dict-file=\n+\n+# Tells whether to store unknown words to indicated private dictionary in\n+# --spelling-private-dict-file option instead of raising a message.\n+spelling-store-unknown-words=no\n+\n+\n+[LOGGING]\n+\n+# Logging modules to check that the string format arguments are in logging\n+# function parameter format\n+logging-modules=logging\n+\n+\n+[TYPECHECK]\n+\n+# Tells whether missing members accessed in mixin class should be ignored. A\n+# mixin class is detected if its name ends with \"mixin\" (case insensitive).\n+ignore-mixin-members=yes\n+\n+# List of module names for which member attributes should not be checked\n+# (useful for modules/projects where namespaces are manipulated during runtime\n+# and thus existing member attributes cannot be deduced by static analysis\n+ignored-modules=\n+\n+# List of classes names for which member attributes should not be checked\n+# (useful for classes with attributes dynamically set).\n+ignored-classes=SQLObject\n+\n+# When zope mode is activated, add a predefined set of Zope acquired attributes\n+# to generated-members.\n+zope=no\n+\n+# List of members which are set dynamically and missed by pylint inference\n+# system, and so shouldn't trigger E0201 when accessed. Python regular\n+# expressions are accepted.\n+generated-members=REQUEST,acl_users,aq_parent\n+\n+\n+[CLASSES]\n+\n+# List of interface methods to ignore, separated by a comma. This is used for\n+# instance to not check methods defines in Zope's Interface base class.\n+ignore-iface-methods=isImplementedBy,deferred,extends,names,namesAndDescriptions,queryDescriptionFor,getBases,getDescriptionFor,getDoc,getName,getTaggedValue,getTaggedValueTags,isEqualOrExtendedBy,setTaggedValue,isImplementedByInstancesOf,adaptWith,is_implemented_by\n+\n+# List of method names used to declare (i.e. assign) instance attributes.\n+defining-attr-methods=__init__,__new__,setUp\n+\n+# List of valid names for the first argument in a class method.\n+valid-classmethod-first-arg=cls\n+\n+# List of valid names for the first argument in a metaclass class method.\n+valid-metaclass-classmethod-first-arg=mcs\n+\n+# List of member names, which should be excluded from the protected access\n+# warning.\n+exclude-protected=_asdict,_fields,_replace,_source,_make\n+\n+\n+[IMPORTS]\n+\n+# Deprecated modules which should not be used, separated by a comma\n+deprecated-modules=regsub,TERMIOS,Bastion,rexec\n+\n+# Create a graph of every (i.e. internal and external) dependencies in the\n+# given file (report RP0402 must not be disabled)\n+import-graph=\n+\n+# Create a graph of external dependencies in the given file (report RP0402 must\n+# not be disabled)\n+ext-import-graph=\n+\n+# Create a graph of internal dependencies in the given file (report RP0402 must\n+# not be disabled)\n+int-import-graph=\n+\n+\n+[DESIGN]",
    "line": 366
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "Basically, everything under this `[DESIGN]` header should be commented out.\n",
    "commit": "2fc7291333e45979ff4eed3511008b752dc6bb69",
    "createdAt": "2015-07-10T23:03:51Z",
    "diffHunk": "@@ -0,0 +1,404 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+[MASTER]\n+\n+# Specify a configuration file.\n+#rcfile=\n+\n+# Python code to execute, usually for sys.path manipulation such as\n+# pygtk.require().\n+#init-hook=\n+\n+# Profiled execution.\n+profile=no\n+\n+# Add files or directories to the blacklist. They should be base names, not\n+# paths.\n+ignore=pyspark.heapq3\n+\n+# Pickle collected data for later comparisons.\n+persistent=yes\n+\n+# List of plugins (as comma separated values of python modules names) to load,\n+# usually to register additional checkers.\n+load-plugins=\n+\n+# Use multiple processes to speed up Pylint.\n+jobs=1\n+\n+# Allow loading of arbitrary C extensions. Extensions are imported into the\n+# active Python interpreter and may run arbitrary code.\n+unsafe-load-any-extension=no\n+\n+# A comma-separated list of package or module names from where C extensions may\n+# be loaded. Extensions are loading into the active Python interpreter and may\n+# run arbitrary code\n+extension-pkg-whitelist=\n+\n+# Allow optimization of some AST trees. This will activate a peephole AST\n+# optimizer, which will apply various small optimizations. For instance, it can\n+# be used to obtain the result of joining multiple strings with the addition\n+# operator. Joining a lot of strings can lead to a maximum recursion error in\n+# Pylint and this flag can prevent that. It has one side effect, the resulting\n+# AST will be different than the one from reality.\n+optimize-ast=no\n+\n+\n+[MESSAGES CONTROL]\n+\n+# Only show warnings with the listed confidence levels. Leave empty to show\n+# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED\n+confidence=\n+\n+# Enable the message, report, category or checker with the given id(s). You can\n+# either give multiple identifier separated by comma (,) or put this option\n+# multiple time. See also the \"--disable\" option for examples.\n+enable=\n+\n+# Disable the message, report, category or checker with the given id(s). You\n+# can either give multiple identifiers separated by comma (,) or put this\n+# option multiple times (only on the command line, not in the configuration\n+# file where it should appear only once).You can also use \"--disable=all\" to\n+# disable everything first and then reenable specific checks. For example, if\n+# you want to run only the similarities checker, you can use \"--disable=all\n+# --enable=similarities\". If you want to run only the classes checker, but have\n+# no Warning level messages displayed, use\"--disable=all --enable=classes\n+# --disable=W\"\n+\n+# These errors are arranged in order of number of warning given in pylint.\n+# If you would like to improve the code quality of pyspark, remove any of these disabled errors\n+# run ./dev/lint-python and see if the errors raised by pylint can be fixed.\n+\n+disable=invalid-name,missing-docstring,protected-access,unused-argument,no-member,unused-wildcard-import,redefined-builtin,too-many-arguments,unused-variable,too-few-public-methods,bad-continuation,duplicate-code,redefined-outer-name,too-many-ancestors,import-error,superfluous-parens,unused-import,line-too-long,no-name-in-module,unnecessary-lambda,import-self,no-self-use,unidiomatic-typecheck,fixme,too-many-locals,cyclic-import,too-many-branches,bare-except,wildcard-import,dangerous-default-value,broad-except,too-many-public-methods,deprecated-lambda,anomalous-backslash-in-string,too-many-lines,reimported,too-many-statements,bad-whitespace,unpacking-non-sequence,too-many-instance-attributes,abstract-method,old-style-class,global-statement,attribute-defined-outside-init,arguments-differ,undefined-all-variable,no-init,useless-else-on-loop,super-init-not-called,notimplemented-raised,too-many-return-statements,pointless-string-statement,global-variable-undefined,bad-classmethod-argument,too-many-format-args,parse-error,no-self-argument,pointless-statement,undefined-variable\n+\n+\n+[REPORTS]\n+\n+# Set the output format. Available formats are text, parseable, colorized, msvs\n+# (visual studio) and html. You can also give a reporter class, eg\n+# mypackage.mymodule.MyReporterClass.\n+output-format=text\n+\n+# Put messages in a separate file for each module / package specified on the\n+# command line instead of printing them on stdout. Reports (if any) will be\n+# written in a file name \"pylint_global.[txt|html]\".\n+files-output=no\n+\n+# Tells whether to display a full report or only the messages\n+reports=no\n+\n+# Python expression which should return a note less than 10 (10 is the highest\n+# note). You have access to the variables errors warning, statement which\n+# respectively contain the number of errors / warnings messages and the total\n+# number of statements analyzed. This is used by the global evaluation report\n+# (RP0004).\n+evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n+\n+# Add a comment according to your evaluation note. This is used by the global\n+# evaluation report (RP0004).\n+comment=no\n+\n+# Template used to display messages. This is a python new-style format string\n+# used to format the message information. See doc for all details\n+#msg-template=\n+\n+\n+[MISCELLANEOUS]\n+\n+# List of note tags to take in consideration, separated by a comma.\n+notes=FIXME,XXX,TODO\n+\n+\n+[BASIC]\n+\n+# Required attributes for module, separated by a comma\n+required-attributes=\n+\n+# List of builtins function names that should not be used, separated by a comma\n+bad-functions=\n+\n+# Good variable names which should always be accepted, separated by a comma\n+good-names=i,j,k,ex,Run,_\n+\n+# Bad variable names which should always be refused, separated by a comma\n+bad-names=baz,toto,tutu,tata\n+\n+# Colon-delimited sets of names that determine each other's naming style when\n+# the name regexes allow several styles.\n+name-group=\n+\n+# Include a hint for the correct naming format with invalid-name\n+include-naming-hint=no\n+\n+# Regular expression matching correct function names\n+function-rgx=[a-z_][a-z0-9_]{2,30}$\n+\n+# Naming hint for function names\n+function-name-hint=[a-z_][a-z0-9_]{2,30}$\n+\n+# Regular expression matching correct variable names\n+variable-rgx=[a-z_][a-z0-9_]{2,30}$\n+\n+# Naming hint for variable names\n+variable-name-hint=[a-z_][a-z0-9_]{2,30}$\n+\n+# Regular expression matching correct constant names\n+const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$\n+\n+# Naming hint for constant names\n+const-name-hint=(([A-Z_][A-Z0-9_]*)|(__.*__))$\n+\n+# Regular expression matching correct attribute names\n+attr-rgx=[a-z_][a-z0-9_]{2,30}$\n+\n+# Naming hint for attribute names\n+attr-name-hint=[a-z_][a-z0-9_]{2,30}$\n+\n+# Regular expression matching correct argument names\n+argument-rgx=[a-z_][a-z0-9_]{2,30}$\n+\n+# Naming hint for argument names\n+argument-name-hint=[a-z_][a-z0-9_]{2,30}$\n+\n+# Regular expression matching correct class attribute names\n+class-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$\n+\n+# Naming hint for class attribute names\n+class-attribute-name-hint=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$\n+\n+# Regular expression matching correct inline iteration names\n+inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$\n+\n+# Naming hint for inline iteration names\n+inlinevar-name-hint=[A-Za-z_][A-Za-z0-9_]*$\n+\n+# Regular expression matching correct class names\n+class-rgx=[A-Z_][a-zA-Z0-9]+$\n+\n+# Naming hint for class names\n+class-name-hint=[A-Z_][a-zA-Z0-9]+$\n+\n+# Regular expression matching correct module names\n+module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n+\n+# Naming hint for module names\n+module-name-hint=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n+\n+# Regular expression matching correct method names\n+method-rgx=[a-z_][a-z0-9_]{2,30}$\n+\n+# Naming hint for method names\n+method-name-hint=[a-z_][a-z0-9_]{2,30}$\n+\n+# Regular expression which should only match function or class names that do\n+# not require a docstring.\n+no-docstring-rgx=__.*__\n+\n+# Minimum line length for functions/classes that require docstrings, shorter\n+# ones are exempt.\n+docstring-min-length=-1\n+\n+\n+[FORMAT]\n+\n+# Maximum number of characters on a single line.\n+max-line-length=100\n+\n+# Regexp for a line that is allowed to be longer than the limit.\n+ignore-long-lines=^\\s*(# )?<?https?://\\S+>?$\n+\n+# Allow the body of an if to be on the same line as the test if there is no\n+# else.\n+single-line-if-stmt=no\n+\n+# List of optional constructs for which whitespace checking is disabled\n+no-space-check=trailing-comma,dict-separator\n+\n+# Maximum number of lines in a module\n+max-module-lines=1000\n+\n+# String used as indentation unit. This is usually \" \" (4 spaces) or \"\\t\" (1\n+# tab).\n+indent-string='    '\n+\n+# Number of spaces of indent required inside a hanging or continued line.\n+indent-after-paren=4\n+\n+# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\n+expected-line-ending-format=\n+\n+\n+[SIMILARITIES]\n+\n+# Minimum lines number of a similarity.\n+min-similarity-lines=4\n+\n+# Ignore comments when computing similarities.\n+ignore-comments=yes\n+\n+# Ignore docstrings when computing similarities.\n+ignore-docstrings=yes\n+\n+# Ignore imports when computing similarities.\n+ignore-imports=no\n+\n+\n+[VARIABLES]\n+\n+# Tells whether we should check for unused import in __init__ files.\n+init-import=no\n+\n+# A regular expression matching the name of dummy variables (i.e. expectedly\n+# not used).\n+dummy-variables-rgx=_$|dummy\n+\n+# List of additional names supposed to be defined in builtins. Remember that\n+# you should avoid to define new builtins when possible.\n+additional-builtins=\n+\n+# List of strings which can identify a callback function by name. A callback\n+# name must start or end with one of those strings.\n+callbacks=cb_,_cb\n+\n+\n+[SPELLING]\n+\n+# Spelling dictionary name. Available dictionaries: none. To make it working\n+# install python-enchant package.\n+spelling-dict=\n+\n+# List of comma separated words that should not be checked.\n+spelling-ignore-words=\n+\n+# A path to a file that contains private dictionary; one word per line.\n+spelling-private-dict-file=\n+\n+# Tells whether to store unknown words to indicated private dictionary in\n+# --spelling-private-dict-file option instead of raising a message.\n+spelling-store-unknown-words=no\n+\n+\n+[LOGGING]\n+\n+# Logging modules to check that the string format arguments are in logging\n+# function parameter format\n+logging-modules=logging\n+\n+\n+[TYPECHECK]\n+\n+# Tells whether missing members accessed in mixin class should be ignored. A\n+# mixin class is detected if its name ends with \"mixin\" (case insensitive).\n+ignore-mixin-members=yes\n+\n+# List of module names for which member attributes should not be checked\n+# (useful for modules/projects where namespaces are manipulated during runtime\n+# and thus existing member attributes cannot be deduced by static analysis\n+ignored-modules=\n+\n+# List of classes names for which member attributes should not be checked\n+# (useful for classes with attributes dynamically set).\n+ignored-classes=SQLObject\n+\n+# When zope mode is activated, add a predefined set of Zope acquired attributes\n+# to generated-members.\n+zope=no\n+\n+# List of members which are set dynamically and missed by pylint inference\n+# system, and so shouldn't trigger E0201 when accessed. Python regular\n+# expressions are accepted.\n+generated-members=REQUEST,acl_users,aq_parent\n+\n+\n+[CLASSES]\n+\n+# List of interface methods to ignore, separated by a comma. This is used for\n+# instance to not check methods defines in Zope's Interface base class.\n+ignore-iface-methods=isImplementedBy,deferred,extends,names,namesAndDescriptions,queryDescriptionFor,getBases,getDescriptionFor,getDoc,getName,getTaggedValue,getTaggedValueTags,isEqualOrExtendedBy,setTaggedValue,isImplementedByInstancesOf,adaptWith,is_implemented_by\n+\n+# List of method names used to declare (i.e. assign) instance attributes.\n+defining-attr-methods=__init__,__new__,setUp\n+\n+# List of valid names for the first argument in a class method.\n+valid-classmethod-first-arg=cls\n+\n+# List of valid names for the first argument in a metaclass class method.\n+valid-metaclass-classmethod-first-arg=mcs\n+\n+# List of member names, which should be excluded from the protected access\n+# warning.\n+exclude-protected=_asdict,_fields,_replace,_source,_make\n+\n+\n+[IMPORTS]\n+\n+# Deprecated modules which should not be used, separated by a comma\n+deprecated-modules=regsub,TERMIOS,Bastion,rexec\n+\n+# Create a graph of every (i.e. internal and external) dependencies in the\n+# given file (report RP0402 must not be disabled)\n+import-graph=\n+\n+# Create a graph of external dependencies in the given file (report RP0402 must\n+# not be disabled)\n+ext-import-graph=\n+\n+# Create a graph of internal dependencies in the given file (report RP0402 must\n+# not be disabled)\n+int-import-graph=\n+\n+\n+[DESIGN]",
    "line": 366
  }, {
    "author": {
      "login": "MechCoder"
    },
    "body": "Commenting these out or removing it will make these fall back to the default values and fail.\nI have already disabled all of these, see `disable` (https://github.com/apache/spark/pull/7241/files#diff-7960115f72225be4a82e33b5a7857f5aR87) above.\n\nOr we could set a high threshold which is unlikely to be passed, for example 1000 arguments.\n",
    "commit": "2fc7291333e45979ff4eed3511008b752dc6bb69",
    "createdAt": "2015-07-11T05:17:50Z",
    "diffHunk": "@@ -0,0 +1,404 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+[MASTER]\n+\n+# Specify a configuration file.\n+#rcfile=\n+\n+# Python code to execute, usually for sys.path manipulation such as\n+# pygtk.require().\n+#init-hook=\n+\n+# Profiled execution.\n+profile=no\n+\n+# Add files or directories to the blacklist. They should be base names, not\n+# paths.\n+ignore=pyspark.heapq3\n+\n+# Pickle collected data for later comparisons.\n+persistent=yes\n+\n+# List of plugins (as comma separated values of python modules names) to load,\n+# usually to register additional checkers.\n+load-plugins=\n+\n+# Use multiple processes to speed up Pylint.\n+jobs=1\n+\n+# Allow loading of arbitrary C extensions. Extensions are imported into the\n+# active Python interpreter and may run arbitrary code.\n+unsafe-load-any-extension=no\n+\n+# A comma-separated list of package or module names from where C extensions may\n+# be loaded. Extensions are loading into the active Python interpreter and may\n+# run arbitrary code\n+extension-pkg-whitelist=\n+\n+# Allow optimization of some AST trees. This will activate a peephole AST\n+# optimizer, which will apply various small optimizations. For instance, it can\n+# be used to obtain the result of joining multiple strings with the addition\n+# operator. Joining a lot of strings can lead to a maximum recursion error in\n+# Pylint and this flag can prevent that. It has one side effect, the resulting\n+# AST will be different than the one from reality.\n+optimize-ast=no\n+\n+\n+[MESSAGES CONTROL]\n+\n+# Only show warnings with the listed confidence levels. Leave empty to show\n+# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED\n+confidence=\n+\n+# Enable the message, report, category or checker with the given id(s). You can\n+# either give multiple identifier separated by comma (,) or put this option\n+# multiple time. See also the \"--disable\" option for examples.\n+enable=\n+\n+# Disable the message, report, category or checker with the given id(s). You\n+# can either give multiple identifiers separated by comma (,) or put this\n+# option multiple times (only on the command line, not in the configuration\n+# file where it should appear only once).You can also use \"--disable=all\" to\n+# disable everything first and then reenable specific checks. For example, if\n+# you want to run only the similarities checker, you can use \"--disable=all\n+# --enable=similarities\". If you want to run only the classes checker, but have\n+# no Warning level messages displayed, use\"--disable=all --enable=classes\n+# --disable=W\"\n+\n+# These errors are arranged in order of number of warning given in pylint.\n+# If you would like to improve the code quality of pyspark, remove any of these disabled errors\n+# run ./dev/lint-python and see if the errors raised by pylint can be fixed.\n+\n+disable=invalid-name,missing-docstring,protected-access,unused-argument,no-member,unused-wildcard-import,redefined-builtin,too-many-arguments,unused-variable,too-few-public-methods,bad-continuation,duplicate-code,redefined-outer-name,too-many-ancestors,import-error,superfluous-parens,unused-import,line-too-long,no-name-in-module,unnecessary-lambda,import-self,no-self-use,unidiomatic-typecheck,fixme,too-many-locals,cyclic-import,too-many-branches,bare-except,wildcard-import,dangerous-default-value,broad-except,too-many-public-methods,deprecated-lambda,anomalous-backslash-in-string,too-many-lines,reimported,too-many-statements,bad-whitespace,unpacking-non-sequence,too-many-instance-attributes,abstract-method,old-style-class,global-statement,attribute-defined-outside-init,arguments-differ,undefined-all-variable,no-init,useless-else-on-loop,super-init-not-called,notimplemented-raised,too-many-return-statements,pointless-string-statement,global-variable-undefined,bad-classmethod-argument,too-many-format-args,parse-error,no-self-argument,pointless-statement,undefined-variable\n+\n+\n+[REPORTS]\n+\n+# Set the output format. Available formats are text, parseable, colorized, msvs\n+# (visual studio) and html. You can also give a reporter class, eg\n+# mypackage.mymodule.MyReporterClass.\n+output-format=text\n+\n+# Put messages in a separate file for each module / package specified on the\n+# command line instead of printing them on stdout. Reports (if any) will be\n+# written in a file name \"pylint_global.[txt|html]\".\n+files-output=no\n+\n+# Tells whether to display a full report or only the messages\n+reports=no\n+\n+# Python expression which should return a note less than 10 (10 is the highest\n+# note). You have access to the variables errors warning, statement which\n+# respectively contain the number of errors / warnings messages and the total\n+# number of statements analyzed. This is used by the global evaluation report\n+# (RP0004).\n+evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n+\n+# Add a comment according to your evaluation note. This is used by the global\n+# evaluation report (RP0004).\n+comment=no\n+\n+# Template used to display messages. This is a python new-style format string\n+# used to format the message information. See doc for all details\n+#msg-template=\n+\n+\n+[MISCELLANEOUS]\n+\n+# List of note tags to take in consideration, separated by a comma.\n+notes=FIXME,XXX,TODO\n+\n+\n+[BASIC]\n+\n+# Required attributes for module, separated by a comma\n+required-attributes=\n+\n+# List of builtins function names that should not be used, separated by a comma\n+bad-functions=\n+\n+# Good variable names which should always be accepted, separated by a comma\n+good-names=i,j,k,ex,Run,_\n+\n+# Bad variable names which should always be refused, separated by a comma\n+bad-names=baz,toto,tutu,tata\n+\n+# Colon-delimited sets of names that determine each other's naming style when\n+# the name regexes allow several styles.\n+name-group=\n+\n+# Include a hint for the correct naming format with invalid-name\n+include-naming-hint=no\n+\n+# Regular expression matching correct function names\n+function-rgx=[a-z_][a-z0-9_]{2,30}$\n+\n+# Naming hint for function names\n+function-name-hint=[a-z_][a-z0-9_]{2,30}$\n+\n+# Regular expression matching correct variable names\n+variable-rgx=[a-z_][a-z0-9_]{2,30}$\n+\n+# Naming hint for variable names\n+variable-name-hint=[a-z_][a-z0-9_]{2,30}$\n+\n+# Regular expression matching correct constant names\n+const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$\n+\n+# Naming hint for constant names\n+const-name-hint=(([A-Z_][A-Z0-9_]*)|(__.*__))$\n+\n+# Regular expression matching correct attribute names\n+attr-rgx=[a-z_][a-z0-9_]{2,30}$\n+\n+# Naming hint for attribute names\n+attr-name-hint=[a-z_][a-z0-9_]{2,30}$\n+\n+# Regular expression matching correct argument names\n+argument-rgx=[a-z_][a-z0-9_]{2,30}$\n+\n+# Naming hint for argument names\n+argument-name-hint=[a-z_][a-z0-9_]{2,30}$\n+\n+# Regular expression matching correct class attribute names\n+class-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$\n+\n+# Naming hint for class attribute names\n+class-attribute-name-hint=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$\n+\n+# Regular expression matching correct inline iteration names\n+inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$\n+\n+# Naming hint for inline iteration names\n+inlinevar-name-hint=[A-Za-z_][A-Za-z0-9_]*$\n+\n+# Regular expression matching correct class names\n+class-rgx=[A-Z_][a-zA-Z0-9]+$\n+\n+# Naming hint for class names\n+class-name-hint=[A-Z_][a-zA-Z0-9]+$\n+\n+# Regular expression matching correct module names\n+module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n+\n+# Naming hint for module names\n+module-name-hint=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n+\n+# Regular expression matching correct method names\n+method-rgx=[a-z_][a-z0-9_]{2,30}$\n+\n+# Naming hint for method names\n+method-name-hint=[a-z_][a-z0-9_]{2,30}$\n+\n+# Regular expression which should only match function or class names that do\n+# not require a docstring.\n+no-docstring-rgx=__.*__\n+\n+# Minimum line length for functions/classes that require docstrings, shorter\n+# ones are exempt.\n+docstring-min-length=-1\n+\n+\n+[FORMAT]\n+\n+# Maximum number of characters on a single line.\n+max-line-length=100\n+\n+# Regexp for a line that is allowed to be longer than the limit.\n+ignore-long-lines=^\\s*(# )?<?https?://\\S+>?$\n+\n+# Allow the body of an if to be on the same line as the test if there is no\n+# else.\n+single-line-if-stmt=no\n+\n+# List of optional constructs for which whitespace checking is disabled\n+no-space-check=trailing-comma,dict-separator\n+\n+# Maximum number of lines in a module\n+max-module-lines=1000\n+\n+# String used as indentation unit. This is usually \" \" (4 spaces) or \"\\t\" (1\n+# tab).\n+indent-string='    '\n+\n+# Number of spaces of indent required inside a hanging or continued line.\n+indent-after-paren=4\n+\n+# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\n+expected-line-ending-format=\n+\n+\n+[SIMILARITIES]\n+\n+# Minimum lines number of a similarity.\n+min-similarity-lines=4\n+\n+# Ignore comments when computing similarities.\n+ignore-comments=yes\n+\n+# Ignore docstrings when computing similarities.\n+ignore-docstrings=yes\n+\n+# Ignore imports when computing similarities.\n+ignore-imports=no\n+\n+\n+[VARIABLES]\n+\n+# Tells whether we should check for unused import in __init__ files.\n+init-import=no\n+\n+# A regular expression matching the name of dummy variables (i.e. expectedly\n+# not used).\n+dummy-variables-rgx=_$|dummy\n+\n+# List of additional names supposed to be defined in builtins. Remember that\n+# you should avoid to define new builtins when possible.\n+additional-builtins=\n+\n+# List of strings which can identify a callback function by name. A callback\n+# name must start or end with one of those strings.\n+callbacks=cb_,_cb\n+\n+\n+[SPELLING]\n+\n+# Spelling dictionary name. Available dictionaries: none. To make it working\n+# install python-enchant package.\n+spelling-dict=\n+\n+# List of comma separated words that should not be checked.\n+spelling-ignore-words=\n+\n+# A path to a file that contains private dictionary; one word per line.\n+spelling-private-dict-file=\n+\n+# Tells whether to store unknown words to indicated private dictionary in\n+# --spelling-private-dict-file option instead of raising a message.\n+spelling-store-unknown-words=no\n+\n+\n+[LOGGING]\n+\n+# Logging modules to check that the string format arguments are in logging\n+# function parameter format\n+logging-modules=logging\n+\n+\n+[TYPECHECK]\n+\n+# Tells whether missing members accessed in mixin class should be ignored. A\n+# mixin class is detected if its name ends with \"mixin\" (case insensitive).\n+ignore-mixin-members=yes\n+\n+# List of module names for which member attributes should not be checked\n+# (useful for modules/projects where namespaces are manipulated during runtime\n+# and thus existing member attributes cannot be deduced by static analysis\n+ignored-modules=\n+\n+# List of classes names for which member attributes should not be checked\n+# (useful for classes with attributes dynamically set).\n+ignored-classes=SQLObject\n+\n+# When zope mode is activated, add a predefined set of Zope acquired attributes\n+# to generated-members.\n+zope=no\n+\n+# List of members which are set dynamically and missed by pylint inference\n+# system, and so shouldn't trigger E0201 when accessed. Python regular\n+# expressions are accepted.\n+generated-members=REQUEST,acl_users,aq_parent\n+\n+\n+[CLASSES]\n+\n+# List of interface methods to ignore, separated by a comma. This is used for\n+# instance to not check methods defines in Zope's Interface base class.\n+ignore-iface-methods=isImplementedBy,deferred,extends,names,namesAndDescriptions,queryDescriptionFor,getBases,getDescriptionFor,getDoc,getName,getTaggedValue,getTaggedValueTags,isEqualOrExtendedBy,setTaggedValue,isImplementedByInstancesOf,adaptWith,is_implemented_by\n+\n+# List of method names used to declare (i.e. assign) instance attributes.\n+defining-attr-methods=__init__,__new__,setUp\n+\n+# List of valid names for the first argument in a class method.\n+valid-classmethod-first-arg=cls\n+\n+# List of valid names for the first argument in a metaclass class method.\n+valid-metaclass-classmethod-first-arg=mcs\n+\n+# List of member names, which should be excluded from the protected access\n+# warning.\n+exclude-protected=_asdict,_fields,_replace,_source,_make\n+\n+\n+[IMPORTS]\n+\n+# Deprecated modules which should not be used, separated by a comma\n+deprecated-modules=regsub,TERMIOS,Bastion,rexec\n+\n+# Create a graph of every (i.e. internal and external) dependencies in the\n+# given file (report RP0402 must not be disabled)\n+import-graph=\n+\n+# Create a graph of external dependencies in the given file (report RP0402 must\n+# not be disabled)\n+ext-import-graph=\n+\n+# Create a graph of internal dependencies in the given file (report RP0402 must\n+# not be disabled)\n+int-import-graph=\n+\n+\n+[DESIGN]",
    "line": 366
  }],
  "prId": 7241
}, {
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "Should we enable some of them? For example, parse-error ?\n",
    "commit": "2fc7291333e45979ff4eed3511008b752dc6bb69",
    "createdAt": "2015-07-13T06:37:59Z",
    "diffHunk": "@@ -0,0 +1,404 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+[MASTER]\n+\n+# Specify a configuration file.\n+#rcfile=\n+\n+# Python code to execute, usually for sys.path manipulation such as\n+# pygtk.require().\n+#init-hook=\n+\n+# Profiled execution.\n+profile=no\n+\n+# Add files or directories to the blacklist. They should be base names, not\n+# paths.\n+ignore=pyspark.heapq3\n+\n+# Pickle collected data for later comparisons.\n+persistent=yes\n+\n+# List of plugins (as comma separated values of python modules names) to load,\n+# usually to register additional checkers.\n+load-plugins=\n+\n+# Use multiple processes to speed up Pylint.\n+jobs=1\n+\n+# Allow loading of arbitrary C extensions. Extensions are imported into the\n+# active Python interpreter and may run arbitrary code.\n+unsafe-load-any-extension=no\n+\n+# A comma-separated list of package or module names from where C extensions may\n+# be loaded. Extensions are loading into the active Python interpreter and may\n+# run arbitrary code\n+extension-pkg-whitelist=\n+\n+# Allow optimization of some AST trees. This will activate a peephole AST\n+# optimizer, which will apply various small optimizations. For instance, it can\n+# be used to obtain the result of joining multiple strings with the addition\n+# operator. Joining a lot of strings can lead to a maximum recursion error in\n+# Pylint and this flag can prevent that. It has one side effect, the resulting\n+# AST will be different than the one from reality.\n+optimize-ast=no\n+\n+\n+[MESSAGES CONTROL]\n+\n+# Only show warnings with the listed confidence levels. Leave empty to show\n+# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED\n+confidence=\n+\n+# Enable the message, report, category or checker with the given id(s). You can\n+# either give multiple identifier separated by comma (,) or put this option\n+# multiple time. See also the \"--disable\" option for examples.\n+enable=\n+\n+# Disable the message, report, category or checker with the given id(s). You\n+# can either give multiple identifiers separated by comma (,) or put this\n+# option multiple times (only on the command line, not in the configuration\n+# file where it should appear only once).You can also use \"--disable=all\" to\n+# disable everything first and then reenable specific checks. For example, if\n+# you want to run only the similarities checker, you can use \"--disable=all\n+# --enable=similarities\". If you want to run only the classes checker, but have\n+# no Warning level messages displayed, use\"--disable=all --enable=classes\n+# --disable=W\"\n+\n+# These errors are arranged in order of number of warning given in pylint.\n+# If you would like to improve the code quality of pyspark, remove any of these disabled errors\n+# run ./dev/lint-python and see if the errors raised by pylint can be fixed.\n+\n+disable=invalid-name,missing-docstring,protected-access,unused-argument,no-member,unused-wildcard-import,redefined-builtin,too-many-arguments,unused-variable,too-few-public-methods,bad-continuation,duplicate-code,redefined-outer-name,too-many-ancestors,import-error,superfluous-parens,unused-import,line-too-long,no-name-in-module,unnecessary-lambda,import-self,no-self-use,unidiomatic-typecheck,fixme,too-many-locals,cyclic-import,too-many-branches,bare-except,wildcard-import,dangerous-default-value,broad-except,too-many-public-methods,deprecated-lambda,anomalous-backslash-in-string,too-many-lines,reimported,too-many-statements,bad-whitespace,unpacking-non-sequence,too-many-instance-attributes,abstract-method,old-style-class,global-statement,attribute-defined-outside-init,arguments-differ,undefined-all-variable,no-init,useless-else-on-loop,super-init-not-called,notimplemented-raised,too-many-return-statements,pointless-string-statement,global-variable-undefined,bad-classmethod-argument,too-many-format-args,parse-error,no-self-argument,pointless-statement,undefined-variable",
    "line": 87
  }, {
    "author": {
      "login": "MechCoder"
    },
    "body": "We had decided to merge this infrastructure as a first step and start enabling errors in future pull requests.\n",
    "commit": "2fc7291333e45979ff4eed3511008b752dc6bb69",
    "createdAt": "2015-07-13T06:40:59Z",
    "diffHunk": "@@ -0,0 +1,404 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+[MASTER]\n+\n+# Specify a configuration file.\n+#rcfile=\n+\n+# Python code to execute, usually for sys.path manipulation such as\n+# pygtk.require().\n+#init-hook=\n+\n+# Profiled execution.\n+profile=no\n+\n+# Add files or directories to the blacklist. They should be base names, not\n+# paths.\n+ignore=pyspark.heapq3\n+\n+# Pickle collected data for later comparisons.\n+persistent=yes\n+\n+# List of plugins (as comma separated values of python modules names) to load,\n+# usually to register additional checkers.\n+load-plugins=\n+\n+# Use multiple processes to speed up Pylint.\n+jobs=1\n+\n+# Allow loading of arbitrary C extensions. Extensions are imported into the\n+# active Python interpreter and may run arbitrary code.\n+unsafe-load-any-extension=no\n+\n+# A comma-separated list of package or module names from where C extensions may\n+# be loaded. Extensions are loading into the active Python interpreter and may\n+# run arbitrary code\n+extension-pkg-whitelist=\n+\n+# Allow optimization of some AST trees. This will activate a peephole AST\n+# optimizer, which will apply various small optimizations. For instance, it can\n+# be used to obtain the result of joining multiple strings with the addition\n+# operator. Joining a lot of strings can lead to a maximum recursion error in\n+# Pylint and this flag can prevent that. It has one side effect, the resulting\n+# AST will be different than the one from reality.\n+optimize-ast=no\n+\n+\n+[MESSAGES CONTROL]\n+\n+# Only show warnings with the listed confidence levels. Leave empty to show\n+# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED\n+confidence=\n+\n+# Enable the message, report, category or checker with the given id(s). You can\n+# either give multiple identifier separated by comma (,) or put this option\n+# multiple time. See also the \"--disable\" option for examples.\n+enable=\n+\n+# Disable the message, report, category or checker with the given id(s). You\n+# can either give multiple identifiers separated by comma (,) or put this\n+# option multiple times (only on the command line, not in the configuration\n+# file where it should appear only once).You can also use \"--disable=all\" to\n+# disable everything first and then reenable specific checks. For example, if\n+# you want to run only the similarities checker, you can use \"--disable=all\n+# --enable=similarities\". If you want to run only the classes checker, but have\n+# no Warning level messages displayed, use\"--disable=all --enable=classes\n+# --disable=W\"\n+\n+# These errors are arranged in order of number of warning given in pylint.\n+# If you would like to improve the code quality of pyspark, remove any of these disabled errors\n+# run ./dev/lint-python and see if the errors raised by pylint can be fixed.\n+\n+disable=invalid-name,missing-docstring,protected-access,unused-argument,no-member,unused-wildcard-import,redefined-builtin,too-many-arguments,unused-variable,too-few-public-methods,bad-continuation,duplicate-code,redefined-outer-name,too-many-ancestors,import-error,superfluous-parens,unused-import,line-too-long,no-name-in-module,unnecessary-lambda,import-self,no-self-use,unidiomatic-typecheck,fixme,too-many-locals,cyclic-import,too-many-branches,bare-except,wildcard-import,dangerous-default-value,broad-except,too-many-public-methods,deprecated-lambda,anomalous-backslash-in-string,too-many-lines,reimported,too-many-statements,bad-whitespace,unpacking-non-sequence,too-many-instance-attributes,abstract-method,old-style-class,global-statement,attribute-defined-outside-init,arguments-differ,undefined-all-variable,no-init,useless-else-on-loop,super-init-not-called,notimplemented-raised,too-many-return-statements,pointless-string-statement,global-variable-undefined,bad-classmethod-argument,too-many-format-args,parse-error,no-self-argument,pointless-statement,undefined-variable",
    "line": 87
  }, {
    "author": {
      "login": "davies"
    },
    "body": "Sounds good to me.\n",
    "commit": "2fc7291333e45979ff4eed3511008b752dc6bb69",
    "createdAt": "2015-07-13T06:45:06Z",
    "diffHunk": "@@ -0,0 +1,404 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+[MASTER]\n+\n+# Specify a configuration file.\n+#rcfile=\n+\n+# Python code to execute, usually for sys.path manipulation such as\n+# pygtk.require().\n+#init-hook=\n+\n+# Profiled execution.\n+profile=no\n+\n+# Add files or directories to the blacklist. They should be base names, not\n+# paths.\n+ignore=pyspark.heapq3\n+\n+# Pickle collected data for later comparisons.\n+persistent=yes\n+\n+# List of plugins (as comma separated values of python modules names) to load,\n+# usually to register additional checkers.\n+load-plugins=\n+\n+# Use multiple processes to speed up Pylint.\n+jobs=1\n+\n+# Allow loading of arbitrary C extensions. Extensions are imported into the\n+# active Python interpreter and may run arbitrary code.\n+unsafe-load-any-extension=no\n+\n+# A comma-separated list of package or module names from where C extensions may\n+# be loaded. Extensions are loading into the active Python interpreter and may\n+# run arbitrary code\n+extension-pkg-whitelist=\n+\n+# Allow optimization of some AST trees. This will activate a peephole AST\n+# optimizer, which will apply various small optimizations. For instance, it can\n+# be used to obtain the result of joining multiple strings with the addition\n+# operator. Joining a lot of strings can lead to a maximum recursion error in\n+# Pylint and this flag can prevent that. It has one side effect, the resulting\n+# AST will be different than the one from reality.\n+optimize-ast=no\n+\n+\n+[MESSAGES CONTROL]\n+\n+# Only show warnings with the listed confidence levels. Leave empty to show\n+# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED\n+confidence=\n+\n+# Enable the message, report, category or checker with the given id(s). You can\n+# either give multiple identifier separated by comma (,) or put this option\n+# multiple time. See also the \"--disable\" option for examples.\n+enable=\n+\n+# Disable the message, report, category or checker with the given id(s). You\n+# can either give multiple identifiers separated by comma (,) or put this\n+# option multiple times (only on the command line, not in the configuration\n+# file where it should appear only once).You can also use \"--disable=all\" to\n+# disable everything first and then reenable specific checks. For example, if\n+# you want to run only the similarities checker, you can use \"--disable=all\n+# --enable=similarities\". If you want to run only the classes checker, but have\n+# no Warning level messages displayed, use\"--disable=all --enable=classes\n+# --disable=W\"\n+\n+# These errors are arranged in order of number of warning given in pylint.\n+# If you would like to improve the code quality of pyspark, remove any of these disabled errors\n+# run ./dev/lint-python and see if the errors raised by pylint can be fixed.\n+\n+disable=invalid-name,missing-docstring,protected-access,unused-argument,no-member,unused-wildcard-import,redefined-builtin,too-many-arguments,unused-variable,too-few-public-methods,bad-continuation,duplicate-code,redefined-outer-name,too-many-ancestors,import-error,superfluous-parens,unused-import,line-too-long,no-name-in-module,unnecessary-lambda,import-self,no-self-use,unidiomatic-typecheck,fixme,too-many-locals,cyclic-import,too-many-branches,bare-except,wildcard-import,dangerous-default-value,broad-except,too-many-public-methods,deprecated-lambda,anomalous-backslash-in-string,too-many-lines,reimported,too-many-statements,bad-whitespace,unpacking-non-sequence,too-many-instance-attributes,abstract-method,old-style-class,global-statement,attribute-defined-outside-init,arguments-differ,undefined-all-variable,no-init,useless-else-on-loop,super-init-not-called,notimplemented-raised,too-many-return-statements,pointless-string-statement,global-variable-undefined,bad-classmethod-argument,too-many-format-args,parse-error,no-self-argument,pointless-statement,undefined-variable",
    "line": 87
  }],
  "prId": 7241
}]