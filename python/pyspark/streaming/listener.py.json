[{
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "Is this method necessary?\n",
    "commit": "c941c3e5e457c8fe3fbf546c5e09aa954075be19",
    "createdAt": "2015-10-22T06:50:07Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+__all__ = [\"StreamingListener\"]\n+\n+\n+class StreamingListener(object):\n+\n+    def __init__(self):\n+        pass\n+\n+    # Called when a receiver has been started.\n+    def onReceiverStarted(self, receiverStarted):\n+        pass\n+\n+    # Called when a receiver has reported an error.\n+    def onReceiverError(self, receiverError):\n+        pass\n+\n+    # Called when a receiver has been stopped.\n+    def onReceiverStopped(self, receiverStopped):\n+        pass\n+\n+    # Called when a batch of jobs has been submitted for processing.\n+    def onBatchSubmitted(self, batchSubmitted):\n+        pass\n+\n+    # Called when processing of a batch of jobs has started.\n+    def onBatchStarted(self, batchStarted):\n+        pass\n+\n+    # Called when processing of a batch of jobs has completed.\n+    def onBatchCompleted(self, batchCompleted):\n+        pass\n+\n+    # Called when processing of a job of a batch has started.\n+    def onOutputOperationStarted(self, outputOperationStarted):\n+        pass\n+\n+    # Called when processing of a job of a batch has completed\n+    def onOutputOperationCompleted(self, outputOperationCompleted):\n+        pass\n+\n+    def getEventInfo(self, event):"
  }, {
    "author": {
      "login": "djalova"
    },
    "body": "I thought it would make it easier to see which Info is associated with each StreamingListenerEvent but I can remove it.\n",
    "commit": "c941c3e5e457c8fe3fbf546c5e09aa954075be19",
    "createdAt": "2015-10-22T17:21:58Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+__all__ = [\"StreamingListener\"]\n+\n+\n+class StreamingListener(object):\n+\n+    def __init__(self):\n+        pass\n+\n+    # Called when a receiver has been started.\n+    def onReceiverStarted(self, receiverStarted):\n+        pass\n+\n+    # Called when a receiver has reported an error.\n+    def onReceiverError(self, receiverError):\n+        pass\n+\n+    # Called when a receiver has been stopped.\n+    def onReceiverStopped(self, receiverStopped):\n+        pass\n+\n+    # Called when a batch of jobs has been submitted for processing.\n+    def onBatchSubmitted(self, batchSubmitted):\n+        pass\n+\n+    # Called when processing of a batch of jobs has started.\n+    def onBatchStarted(self, batchStarted):\n+        pass\n+\n+    # Called when processing of a batch of jobs has completed.\n+    def onBatchCompleted(self, batchCompleted):\n+        pass\n+\n+    # Called when processing of a job of a batch has started.\n+    def onOutputOperationStarted(self, outputOperationStarted):\n+        pass\n+\n+    # Called when processing of a job of a batch has completed\n+    def onOutputOperationCompleted(self, outputOperationCompleted):\n+        pass\n+\n+    def getEventInfo(self, event):"
  }, {
    "author": {
      "login": "djalova"
    },
    "body": "Would it be better to use this method to return instances of the Python friendly classes for these Scala objects?\n",
    "commit": "c941c3e5e457c8fe3fbf546c5e09aa954075be19",
    "createdAt": "2015-10-22T17:56:39Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+__all__ = [\"StreamingListener\"]\n+\n+\n+class StreamingListener(object):\n+\n+    def __init__(self):\n+        pass\n+\n+    # Called when a receiver has been started.\n+    def onReceiverStarted(self, receiverStarted):\n+        pass\n+\n+    # Called when a receiver has reported an error.\n+    def onReceiverError(self, receiverError):\n+        pass\n+\n+    # Called when a receiver has been stopped.\n+    def onReceiverStopped(self, receiverStopped):\n+        pass\n+\n+    # Called when a batch of jobs has been submitted for processing.\n+    def onBatchSubmitted(self, batchSubmitted):\n+        pass\n+\n+    # Called when processing of a batch of jobs has started.\n+    def onBatchStarted(self, batchStarted):\n+        pass\n+\n+    # Called when processing of a batch of jobs has completed.\n+    def onBatchCompleted(self, batchCompleted):\n+        pass\n+\n+    # Called when processing of a job of a batch has started.\n+    def onOutputOperationStarted(self, outputOperationStarted):\n+        pass\n+\n+    # Called when processing of a job of a batch has completed\n+    def onOutputOperationCompleted(self, outputOperationCompleted):\n+        pass\n+\n+    def getEventInfo(self, event):"
  }],
  "prId": 9186
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: redundant space \n",
    "commit": "c941c3e5e457c8fe3fbf546c5e09aa954075be19",
    "createdAt": "2015-10-27T02:22:50Z",
    "diffHunk": "@@ -0,0 +1,285 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+__all__ = [\"StreamingListener\"]\n+\n+\n+class StreamingListenerEvent(object):\n+\n+    def __init__(self):\n+        pass\n+\n+\n+class StreamingListenerBatchSubmitted(StreamingListenerEvent):\n+\n+    def __init__(self, batchInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.batchInfo = batchInfo\n+\n+\n+class StreamingListenerBatchCompleted(StreamingListenerEvent):\n+\n+    def __init__(self, batchInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.batchInfo = batchInfo\n+\n+\n+class StreamingListenerBatchStarted(StreamingListenerEvent):\n+\n+    def __init__(self, batchInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.batchInfo = batchInfo\n+\n+\n+class StreamingListenerOutputOperationStarted(StreamingListenerEvent):\n+\n+    def __init__(self, outputOperationInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.outputOperationInfo = outputOperationInfo\n+\n+\n+class StreamingListenerOutputOperationCompleted(StreamingListenerEvent):\n+\n+    def __init__(self, outputOperationInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.outputOperationInfo = outputOperationInfo\n+\n+\n+class StreamingListenerReceieverStarted(StreamingListenerEvent):\n+\n+    def __init__(self, receiverInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.receiverInfo = receiverInfo\n+\n+\n+class StreamingListenerReceiverError(StreamingListenerEvent):\n+\n+    def __init__(self, receiverInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.receiverInfo = receiverInfo\n+\n+\n+class StreamingListenerReceiverStopped(StreamingListenerEvent):\n+\n+    def __init__(self, receiverInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.receiverInfo = receiverInfo\n+\n+\n+class StreamingListener(object):\n+\n+    def __init__(self):\n+        pass\n+\n+    def onReceiverStarted(self, receiverStarted):\n+        \"\"\"\n+        Called when a receiver has been started\n+        \"\"\"\n+        pass\n+\n+    def onReceiverError(self, receiverError):\n+        \"\"\"\n+        Called when a receiver has reported an error\n+        \"\"\"\n+        pass\n+\n+    def onReceiverStopped(self, receiverStopped):\n+        \"\"\"\n+        Called when a receiver has been stopped\n+        \"\"\"\n+        pass\n+\n+    def onBatchSubmitted(self, batchSubmitted):\n+        \"\"\"\n+        Called when a batch of jobs has been submitted for processing.\n+        \"\"\"\n+        pass\n+\n+    def onBatchStarted(self, batchStarted):\n+        \"\"\"\n+        Called when processing of a batch of jobs has started.\n+        \"\"\"\n+        pass\n+\n+    def onBatchCompleted(self, batchCompleted):\n+        \"\"\"\n+        Called when processing of a batch of jobs has completed.\n+        \"\"\"\n+        pass\n+\n+    def onOutputOperationStarted(self, outputOperationStarted):\n+        \"\"\"\n+        Called when processing of a job of a batch has started.\n+        \"\"\"\n+        pass\n+\n+    def onOutputOperationCompleted(self, outputOperationCompleted):\n+        \"\"\"\n+        Called when processing of a job of a batch has completed\n+        \"\"\"\n+        pass\n+\n+    class Java:\n+        implements = [\"org.apache.spark.streaming.scheduler.StreamingListener\"]\n+\n+\n+class StreamingListenerAdapter(StreamingListener):\n+\n+    def __init__(self, streamingListener):\n+        super(StreamingListener, self).__init__()\n+        self.userStreamingListener = streamingListener\n+\n+    def onReceiverStarted(self, receiverStarted):\n+        receiver_info = ReceiverInfo(receiverStarted.receiverInfo())\n+        receiver_started = StreamingListenerReceieverStarted(receiver_info)\n+        self.userStreamingListener.onReceiverStarted(receiver_started)\n+\n+    def onReceiverError(self, receiverError):\n+        receiver_info = ReceiverInfo(receiverError.receiverInfo())\n+        receiver_error = StreamingListenerReceiverError(receiver_info)\n+        self.userStreamingListener.onReceiverError(receiver_error)\n+\n+    def onReceiverStopped(self, receiverStopped):\n+        receiver_info = ReceiverInfo(receiverStopped.receiverInfo())\n+        receiver_stopped = StreamingListenerReceiverStopped(receiver_info)\n+        self.userStreamingListener.onReceiverStopped(receiver_stopped)\n+\n+    def onBatchSubmitted(self, batchSubmitted):\n+        batch_info = BatchInfo(batchSubmitted.batchInfo())\n+        batch_submitted = StreamingListenerBatchSubmitted(batch_info)\n+        self.userStreamingListener.onBatchSubmitted(batch_submitted)\n+\n+    def onBatchStarted(self, batchStarted):\n+        batch_info = BatchInfo(batchStarted.batchInfo())\n+        batch_started = StreamingListenerBatchStarted(batch_info)\n+        self.userStreamingListener .onBatchStarted(batch_started)"
  }],
  "prId": 9186
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "`StreamInputInfo` has a Scala `Map` field.\n",
    "commit": "c941c3e5e457c8fe3fbf546c5e09aa954075be19",
    "createdAt": "2015-10-27T02:30:29Z",
    "diffHunk": "@@ -0,0 +1,285 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+__all__ = [\"StreamingListener\"]\n+\n+\n+class StreamingListenerEvent(object):\n+\n+    def __init__(self):\n+        pass\n+\n+\n+class StreamingListenerBatchSubmitted(StreamingListenerEvent):\n+\n+    def __init__(self, batchInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.batchInfo = batchInfo\n+\n+\n+class StreamingListenerBatchCompleted(StreamingListenerEvent):\n+\n+    def __init__(self, batchInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.batchInfo = batchInfo\n+\n+\n+class StreamingListenerBatchStarted(StreamingListenerEvent):\n+\n+    def __init__(self, batchInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.batchInfo = batchInfo\n+\n+\n+class StreamingListenerOutputOperationStarted(StreamingListenerEvent):\n+\n+    def __init__(self, outputOperationInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.outputOperationInfo = outputOperationInfo\n+\n+\n+class StreamingListenerOutputOperationCompleted(StreamingListenerEvent):\n+\n+    def __init__(self, outputOperationInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.outputOperationInfo = outputOperationInfo\n+\n+\n+class StreamingListenerReceieverStarted(StreamingListenerEvent):\n+\n+    def __init__(self, receiverInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.receiverInfo = receiverInfo\n+\n+\n+class StreamingListenerReceiverError(StreamingListenerEvent):\n+\n+    def __init__(self, receiverInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.receiverInfo = receiverInfo\n+\n+\n+class StreamingListenerReceiverStopped(StreamingListenerEvent):\n+\n+    def __init__(self, receiverInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.receiverInfo = receiverInfo\n+\n+\n+class StreamingListener(object):\n+\n+    def __init__(self):\n+        pass\n+\n+    def onReceiverStarted(self, receiverStarted):\n+        \"\"\"\n+        Called when a receiver has been started\n+        \"\"\"\n+        pass\n+\n+    def onReceiverError(self, receiverError):\n+        \"\"\"\n+        Called when a receiver has reported an error\n+        \"\"\"\n+        pass\n+\n+    def onReceiverStopped(self, receiverStopped):\n+        \"\"\"\n+        Called when a receiver has been stopped\n+        \"\"\"\n+        pass\n+\n+    def onBatchSubmitted(self, batchSubmitted):\n+        \"\"\"\n+        Called when a batch of jobs has been submitted for processing.\n+        \"\"\"\n+        pass\n+\n+    def onBatchStarted(self, batchStarted):\n+        \"\"\"\n+        Called when processing of a batch of jobs has started.\n+        \"\"\"\n+        pass\n+\n+    def onBatchCompleted(self, batchCompleted):\n+        \"\"\"\n+        Called when processing of a batch of jobs has completed.\n+        \"\"\"\n+        pass\n+\n+    def onOutputOperationStarted(self, outputOperationStarted):\n+        \"\"\"\n+        Called when processing of a job of a batch has started.\n+        \"\"\"\n+        pass\n+\n+    def onOutputOperationCompleted(self, outputOperationCompleted):\n+        \"\"\"\n+        Called when processing of a job of a batch has completed\n+        \"\"\"\n+        pass\n+\n+    class Java:\n+        implements = [\"org.apache.spark.streaming.scheduler.StreamingListener\"]\n+\n+\n+class StreamingListenerAdapter(StreamingListener):\n+\n+    def __init__(self, streamingListener):\n+        super(StreamingListener, self).__init__()\n+        self.userStreamingListener = streamingListener\n+\n+    def onReceiverStarted(self, receiverStarted):\n+        receiver_info = ReceiverInfo(receiverStarted.receiverInfo())\n+        receiver_started = StreamingListenerReceieverStarted(receiver_info)\n+        self.userStreamingListener.onReceiverStarted(receiver_started)\n+\n+    def onReceiverError(self, receiverError):\n+        receiver_info = ReceiverInfo(receiverError.receiverInfo())\n+        receiver_error = StreamingListenerReceiverError(receiver_info)\n+        self.userStreamingListener.onReceiverError(receiver_error)\n+\n+    def onReceiverStopped(self, receiverStopped):\n+        receiver_info = ReceiverInfo(receiverStopped.receiverInfo())\n+        receiver_stopped = StreamingListenerReceiverStopped(receiver_info)\n+        self.userStreamingListener.onReceiverStopped(receiver_stopped)\n+\n+    def onBatchSubmitted(self, batchSubmitted):\n+        batch_info = BatchInfo(batchSubmitted.batchInfo())\n+        batch_submitted = StreamingListenerBatchSubmitted(batch_info)\n+        self.userStreamingListener.onBatchSubmitted(batch_submitted)\n+\n+    def onBatchStarted(self, batchStarted):\n+        batch_info = BatchInfo(batchStarted.batchInfo())\n+        batch_started = StreamingListenerBatchStarted(batch_info)\n+        self.userStreamingListener .onBatchStarted(batch_started)\n+\n+    def onBatchCompleted(self, batchCompleted):\n+        batch_info = BatchInfo(batchCompleted.batchInfo())\n+        batch_completed = StreamingListenerBatchCompleted(batch_info)\n+        self.userStreamingListener.onBatchCompleted(batch_completed)\n+\n+    def onOutputOperationStarted(self, outputOperationStarted):\n+        output_op_info = OutputOperationInfo(outputOperationStarted.outputOperationInfo())\n+        output_operation_started = StreamingListenerOutputOperationStarted(output_op_info)\n+        self.userStreamingListener.onOutputOperationStarted(output_operation_started)\n+\n+    def onOutputOperationCompleted(self, outputOperationCompleted):\n+        output_op_info = OutputOperationInfo(outputOperationCompleted.outputOperationInfo())\n+        output_operation_completed = StreamingListenerOutputOperationCompleted(output_op_info)\n+        self.userStreamingListener.onOutputOperationCompleted(output_operation_completed)\n+\n+\n+class BatchInfo(object):\n+\n+    def __init__(self, javaBatchInfo):\n+\n+        self.processingStartTime = None\n+        self.processingEndTime = None\n+\n+        self.batchTime = javaBatchInfo.batchTime()\n+        self.streamIdToInputInfo = self._map2dict(javaBatchInfo.streamIdToInputInfo())"
  }],
  "prId": 9186
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "`OutputOperationInfo` has Scala `Option` fields.\n",
    "commit": "c941c3e5e457c8fe3fbf546c5e09aa954075be19",
    "createdAt": "2015-10-27T02:32:34Z",
    "diffHunk": "@@ -0,0 +1,285 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+__all__ = [\"StreamingListener\"]\n+\n+\n+class StreamingListenerEvent(object):\n+\n+    def __init__(self):\n+        pass\n+\n+\n+class StreamingListenerBatchSubmitted(StreamingListenerEvent):\n+\n+    def __init__(self, batchInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.batchInfo = batchInfo\n+\n+\n+class StreamingListenerBatchCompleted(StreamingListenerEvent):\n+\n+    def __init__(self, batchInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.batchInfo = batchInfo\n+\n+\n+class StreamingListenerBatchStarted(StreamingListenerEvent):\n+\n+    def __init__(self, batchInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.batchInfo = batchInfo\n+\n+\n+class StreamingListenerOutputOperationStarted(StreamingListenerEvent):\n+\n+    def __init__(self, outputOperationInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.outputOperationInfo = outputOperationInfo\n+\n+\n+class StreamingListenerOutputOperationCompleted(StreamingListenerEvent):\n+\n+    def __init__(self, outputOperationInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.outputOperationInfo = outputOperationInfo\n+\n+\n+class StreamingListenerReceieverStarted(StreamingListenerEvent):\n+\n+    def __init__(self, receiverInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.receiverInfo = receiverInfo\n+\n+\n+class StreamingListenerReceiverError(StreamingListenerEvent):\n+\n+    def __init__(self, receiverInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.receiverInfo = receiverInfo\n+\n+\n+class StreamingListenerReceiverStopped(StreamingListenerEvent):\n+\n+    def __init__(self, receiverInfo):\n+        super(StreamingListenerEvent, self).__init__()\n+        self.receiverInfo = receiverInfo\n+\n+\n+class StreamingListener(object):\n+\n+    def __init__(self):\n+        pass\n+\n+    def onReceiverStarted(self, receiverStarted):\n+        \"\"\"\n+        Called when a receiver has been started\n+        \"\"\"\n+        pass\n+\n+    def onReceiverError(self, receiverError):\n+        \"\"\"\n+        Called when a receiver has reported an error\n+        \"\"\"\n+        pass\n+\n+    def onReceiverStopped(self, receiverStopped):\n+        \"\"\"\n+        Called when a receiver has been stopped\n+        \"\"\"\n+        pass\n+\n+    def onBatchSubmitted(self, batchSubmitted):\n+        \"\"\"\n+        Called when a batch of jobs has been submitted for processing.\n+        \"\"\"\n+        pass\n+\n+    def onBatchStarted(self, batchStarted):\n+        \"\"\"\n+        Called when processing of a batch of jobs has started.\n+        \"\"\"\n+        pass\n+\n+    def onBatchCompleted(self, batchCompleted):\n+        \"\"\"\n+        Called when processing of a batch of jobs has completed.\n+        \"\"\"\n+        pass\n+\n+    def onOutputOperationStarted(self, outputOperationStarted):\n+        \"\"\"\n+        Called when processing of a job of a batch has started.\n+        \"\"\"\n+        pass\n+\n+    def onOutputOperationCompleted(self, outputOperationCompleted):\n+        \"\"\"\n+        Called when processing of a job of a batch has completed\n+        \"\"\"\n+        pass\n+\n+    class Java:\n+        implements = [\"org.apache.spark.streaming.scheduler.StreamingListener\"]\n+\n+\n+class StreamingListenerAdapter(StreamingListener):\n+\n+    def __init__(self, streamingListener):\n+        super(StreamingListener, self).__init__()\n+        self.userStreamingListener = streamingListener\n+\n+    def onReceiverStarted(self, receiverStarted):\n+        receiver_info = ReceiverInfo(receiverStarted.receiverInfo())\n+        receiver_started = StreamingListenerReceieverStarted(receiver_info)\n+        self.userStreamingListener.onReceiverStarted(receiver_started)\n+\n+    def onReceiverError(self, receiverError):\n+        receiver_info = ReceiverInfo(receiverError.receiverInfo())\n+        receiver_error = StreamingListenerReceiverError(receiver_info)\n+        self.userStreamingListener.onReceiverError(receiver_error)\n+\n+    def onReceiverStopped(self, receiverStopped):\n+        receiver_info = ReceiverInfo(receiverStopped.receiverInfo())\n+        receiver_stopped = StreamingListenerReceiverStopped(receiver_info)\n+        self.userStreamingListener.onReceiverStopped(receiver_stopped)\n+\n+    def onBatchSubmitted(self, batchSubmitted):\n+        batch_info = BatchInfo(batchSubmitted.batchInfo())\n+        batch_submitted = StreamingListenerBatchSubmitted(batch_info)\n+        self.userStreamingListener.onBatchSubmitted(batch_submitted)\n+\n+    def onBatchStarted(self, batchStarted):\n+        batch_info = BatchInfo(batchStarted.batchInfo())\n+        batch_started = StreamingListenerBatchStarted(batch_info)\n+        self.userStreamingListener .onBatchStarted(batch_started)\n+\n+    def onBatchCompleted(self, batchCompleted):\n+        batch_info = BatchInfo(batchCompleted.batchInfo())\n+        batch_completed = StreamingListenerBatchCompleted(batch_info)\n+        self.userStreamingListener.onBatchCompleted(batch_completed)\n+\n+    def onOutputOperationStarted(self, outputOperationStarted):\n+        output_op_info = OutputOperationInfo(outputOperationStarted.outputOperationInfo())\n+        output_operation_started = StreamingListenerOutputOperationStarted(output_op_info)\n+        self.userStreamingListener.onOutputOperationStarted(output_operation_started)\n+\n+    def onOutputOperationCompleted(self, outputOperationCompleted):\n+        output_op_info = OutputOperationInfo(outputOperationCompleted.outputOperationInfo())\n+        output_operation_completed = StreamingListenerOutputOperationCompleted(output_op_info)\n+        self.userStreamingListener.onOutputOperationCompleted(output_operation_completed)\n+\n+\n+class BatchInfo(object):\n+\n+    def __init__(self, javaBatchInfo):\n+\n+        self.processingStartTime = None\n+        self.processingEndTime = None\n+\n+        self.batchTime = javaBatchInfo.batchTime()\n+        self.streamIdToInputInfo = self._map2dict(javaBatchInfo.streamIdToInputInfo())\n+\n+        self.submissionTime = javaBatchInfo.submissionTime()\n+        if javaBatchInfo.processingStartTime().isEmpty() is False:\n+            self.processingStartTime = javaBatchInfo.processingStartTime().get()\n+        if javaBatchInfo.processingEndTime().isEmpty() is False:\n+            self.processingEndTime = javaBatchInfo.processingEndTime().get()\n+\n+        self.outputOperationInfos = self._map2dict(javaBatchInfo.outputOperationInfos())"
  }],
  "prId": 9186
}]