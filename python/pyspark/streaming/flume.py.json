[{
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "Let's still keep this check. For other errors (e.g., the py4j java server is down), we should not call `_printErrorMsg` as it's confusing.\n",
    "commit": "650d589160031785ae595a0dff0fb636e78e3714",
    "createdAt": "2016-03-14T04:52:28Z",
    "diffHunk": "@@ -111,13 +111,9 @@ def func(event):\n     @staticmethod\n     def _get_helper(sc):\n         try:\n-            helperClass = sc._jvm.java.lang.Thread.currentThread().getContextClassLoader() \\\n-                .loadClass(\"org.apache.spark.streaming.flume.FlumeUtilsPythonHelper\")\n-            return helperClass.newInstance()\n-        except Py4JJavaError as e:\n-            # TODO: use --jar once it also work on driver\n-            if 'ClassNotFoundException' in str(e.java_exception):",
    "line": 9
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "I made this change because the call now fails with a different set of exceptions (such as \"attempting to call a package\") and wanted to err on the side of over-displaying the warning message. Let me try to figure out a narrower exception pattern match.\n",
    "commit": "650d589160031785ae595a0dff0fb636e78e3714",
    "createdAt": "2016-03-14T05:31:49Z",
    "diffHunk": "@@ -111,13 +111,9 @@ def func(event):\n     @staticmethod\n     def _get_helper(sc):\n         try:\n-            helperClass = sc._jvm.java.lang.Thread.currentThread().getContextClassLoader() \\\n-                .loadClass(\"org.apache.spark.streaming.flume.FlumeUtilsPythonHelper\")\n-            return helperClass.newInstance()\n-        except Py4JJavaError as e:\n-            # TODO: use --jar once it also work on driver\n-            if 'ClassNotFoundException' in str(e.java_exception):",
    "line": 9
  }],
  "prId": 11687
}]