[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Is it because the database wasn't cleaned? In that case, you can just add `class SparkSessionTests3(unittest.TestCase, SQLTestUtils):`.",
    "commit": "d9fcaecf87348816f6369fa7c0fcd20810c41650",
    "createdAt": "2019-03-08T09:34:39Z",
    "diffHunk": "@@ -103,18 +103,18 @@ def test_SparkSession(self):\n             .master(\"local\") \\\n             .config(\"some-config\", \"v2\") \\\n             .getOrCreate()\n-        try:\n-            self.assertEqual(spark.conf.get(\"some-config\"), \"v2\")\n-            self.assertEqual(spark.sparkContext._conf.get(\"some-config\"), \"v2\")\n-            self.assertEqual(spark.version, spark.sparkContext.version)\n-            spark.sql(\"CREATE DATABASE test_db\")\n-            spark.catalog.setCurrentDatabase(\"test_db\")\n-            self.assertEqual(spark.catalog.currentDatabase(), \"test_db\")\n-            spark.sql(\"CREATE TABLE table1 (name STRING, age INT) USING parquet\")\n-            self.assertEqual(spark.table(\"table1\").columns, ['name', 'age'])\n-            self.assertEqual(spark.range(3).count(), 3)\n-        finally:\n-            spark.stop()\n+        with self.database(\"test_db\"):"
  }, {
    "author": {
      "login": "sandeep-katta"
    },
    "body": "SQLTestUtils excepts spark session to be present [Code here](https://github.com/apache/spark/blob/master/python/pyspark/testing/sqlutils.py#L196). So have ReusedSQLTestCase which will create spark session and inherits `unittest.TestCase, SQLTestUtils`",
    "commit": "d9fcaecf87348816f6369fa7c0fcd20810c41650",
    "createdAt": "2019-03-08T10:27:37Z",
    "diffHunk": "@@ -103,18 +103,18 @@ def test_SparkSession(self):\n             .master(\"local\") \\\n             .config(\"some-config\", \"v2\") \\\n             .getOrCreate()\n-        try:\n-            self.assertEqual(spark.conf.get(\"some-config\"), \"v2\")\n-            self.assertEqual(spark.sparkContext._conf.get(\"some-config\"), \"v2\")\n-            self.assertEqual(spark.version, spark.sparkContext.version)\n-            spark.sql(\"CREATE DATABASE test_db\")\n-            spark.catalog.setCurrentDatabase(\"test_db\")\n-            self.assertEqual(spark.catalog.currentDatabase(), \"test_db\")\n-            spark.sql(\"CREATE TABLE table1 (name STRING, age INT) USING parquet\")\n-            self.assertEqual(spark.table(\"table1\").columns, ['name', 'age'])\n-            self.assertEqual(spark.range(3).count(), 3)\n-        finally:\n-            spark.stop()\n+        with self.database(\"test_db\"):"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "This set of tests are specific to Spark sessions. Let's don't make another Spark session before the tests. You can just manually drop the database explicitly in finally",
    "commit": "d9fcaecf87348816f6369fa7c0fcd20810c41650",
    "createdAt": "2019-03-08T10:51:50Z",
    "diffHunk": "@@ -103,18 +103,18 @@ def test_SparkSession(self):\n             .master(\"local\") \\\n             .config(\"some-config\", \"v2\") \\\n             .getOrCreate()\n-        try:\n-            self.assertEqual(spark.conf.get(\"some-config\"), \"v2\")\n-            self.assertEqual(spark.sparkContext._conf.get(\"some-config\"), \"v2\")\n-            self.assertEqual(spark.version, spark.sparkContext.version)\n-            spark.sql(\"CREATE DATABASE test_db\")\n-            spark.catalog.setCurrentDatabase(\"test_db\")\n-            self.assertEqual(spark.catalog.currentDatabase(), \"test_db\")\n-            spark.sql(\"CREATE TABLE table1 (name STRING, age INT) USING parquet\")\n-            self.assertEqual(spark.table(\"table1\").columns, ['name', 'age'])\n-            self.assertEqual(spark.range(3).count(), 3)\n-        finally:\n-            spark.stop()\n+        with self.database(\"test_db\"):"
  }, {
    "author": {
      "login": "sandeep-katta"
    },
    "body": "Handled",
    "commit": "d9fcaecf87348816f6369fa7c0fcd20810c41650",
    "createdAt": "2019-03-08T11:07:03Z",
    "diffHunk": "@@ -103,18 +103,18 @@ def test_SparkSession(self):\n             .master(\"local\") \\\n             .config(\"some-config\", \"v2\") \\\n             .getOrCreate()\n-        try:\n-            self.assertEqual(spark.conf.get(\"some-config\"), \"v2\")\n-            self.assertEqual(spark.sparkContext._conf.get(\"some-config\"), \"v2\")\n-            self.assertEqual(spark.version, spark.sparkContext.version)\n-            spark.sql(\"CREATE DATABASE test_db\")\n-            spark.catalog.setCurrentDatabase(\"test_db\")\n-            self.assertEqual(spark.catalog.currentDatabase(), \"test_db\")\n-            spark.sql(\"CREATE TABLE table1 (name STRING, age INT) USING parquet\")\n-            self.assertEqual(spark.table(\"table1\").columns, ['name', 'age'])\n-            self.assertEqual(spark.range(3).count(), 3)\n-        finally:\n-            spark.stop()\n+        with self.database(\"test_db\"):"
  }],
  "prId": 24021
}]