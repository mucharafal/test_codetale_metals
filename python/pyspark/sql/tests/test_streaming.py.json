[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "`not contains`",
    "commit": "2daaae32e74ffb587e1bb07c6f8e48819715dc33",
    "createdAt": "2019-04-26T18:29:21Z",
    "diffHunk": "@@ -225,11 +225,19 @@ def test_stream_exception(self):\n             self.fail(\"bad udf should fail the query\")\n         except StreamingQueryException as e:\n             # This is expected\n-            self.assertTrue(\"ZeroDivisionError\" in e.desc)\n+            self._assert_exception_tree_contains_msg(e, \"ZeroDivisionError\")\n         finally:\n             sq.stop()\n         self.assertTrue(type(sq.exception()) is StreamingQueryException)\n-        self.assertTrue(\"ZeroDivisionError\" in sq.exception().desc)\n+        self._assert_exception_tree_contains_msg(sq.exception(), \"ZeroDivisionError\")\n+\n+    def _assert_exception_tree_contains_msg(self, exception, msg):\n+        e = exception\n+        contains = msg in e.desc\n+        while e.cause is not None and contains is False:"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Fixed.",
    "commit": "2daaae32e74ffb587e1bb07c6f8e48819715dc33",
    "createdAt": "2019-04-29T13:30:02Z",
    "diffHunk": "@@ -225,11 +225,19 @@ def test_stream_exception(self):\n             self.fail(\"bad udf should fail the query\")\n         except StreamingQueryException as e:\n             # This is expected\n-            self.assertTrue(\"ZeroDivisionError\" in e.desc)\n+            self._assert_exception_tree_contains_msg(e, \"ZeroDivisionError\")\n         finally:\n             sq.stop()\n         self.assertTrue(type(sq.exception()) is StreamingQueryException)\n-        self.assertTrue(\"ZeroDivisionError\" in sq.exception().desc)\n+        self._assert_exception_tree_contains_msg(sq.exception(), \"ZeroDivisionError\")\n+\n+    def _assert_exception_tree_contains_msg(self, exception, msg):\n+        e = exception\n+        contains = msg in e.desc\n+        while e.cause is not None and contains is False:"
  }],
  "prId": 24403
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Add a message to the assert?",
    "commit": "2daaae32e74ffb587e1bb07c6f8e48819715dc33",
    "createdAt": "2019-04-26T18:30:15Z",
    "diffHunk": "@@ -225,11 +225,19 @@ def test_stream_exception(self):\n             self.fail(\"bad udf should fail the query\")\n         except StreamingQueryException as e:\n             # This is expected\n-            self.assertTrue(\"ZeroDivisionError\" in e.desc)\n+            self._assert_exception_tree_contains_msg(e, \"ZeroDivisionError\")\n         finally:\n             sq.stop()\n         self.assertTrue(type(sq.exception()) is StreamingQueryException)\n-        self.assertTrue(\"ZeroDivisionError\" in sq.exception().desc)\n+        self._assert_exception_tree_contains_msg(sq.exception(), \"ZeroDivisionError\")\n+\n+    def _assert_exception_tree_contains_msg(self, exception, msg):\n+        e = exception\n+        contains = msg in e.desc\n+        while e.cause is not None and contains is False:\n+            e = e.cause\n+            contains = msg in e.desc\n+        self.assertTrue(contains)"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Message added.",
    "commit": "2daaae32e74ffb587e1bb07c6f8e48819715dc33",
    "createdAt": "2019-04-29T13:35:04Z",
    "diffHunk": "@@ -225,11 +225,19 @@ def test_stream_exception(self):\n             self.fail(\"bad udf should fail the query\")\n         except StreamingQueryException as e:\n             # This is expected\n-            self.assertTrue(\"ZeroDivisionError\" in e.desc)\n+            self._assert_exception_tree_contains_msg(e, \"ZeroDivisionError\")\n         finally:\n             sq.stop()\n         self.assertTrue(type(sq.exception()) is StreamingQueryException)\n-        self.assertTrue(\"ZeroDivisionError\" in sq.exception().desc)\n+        self._assert_exception_tree_contains_msg(sq.exception(), \"ZeroDivisionError\")\n+\n+    def _assert_exception_tree_contains_msg(self, exception, msg):\n+        e = exception\n+        contains = msg in e.desc\n+        while e.cause is not None and contains is False:\n+            e = e.cause\n+            contains = msg in e.desc\n+        self.assertTrue(contains)"
  }],
  "prId": 24403
}]