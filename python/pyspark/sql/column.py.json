[{
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "Do we want to have versions for these API?\n\nI think it's more clear to do this way:\n\n```\n@since(1.3)\ndef astype(self, dataType):\n     \"\"\" Convert the column into type ``dataType``.\n\n     :func:`astype` is an alias for :func:`cast`.\n     \"\"\"\n     return self.cast(dataType)\n```\n",
    "commit": "93df90fe0156e12a25ac8e2a93207032712606ee",
    "createdAt": "2016-03-14T21:34:12Z",
    "diffHunk": "@@ -337,7 +337,8 @@ def cast(self, dataType):\n             raise TypeError(\"unexpected type: %s\" % type(dataType))\n         return Column(jc)\n \n-    astype = cast\n+    astype = copy_func(cast)\n+    astype.__doc__ = \":func:`astype` is an alias for :func:`cast`.\""
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "So my worry is that if we change cast in the future, the two would diverge.\n",
    "commit": "93df90fe0156e12a25ac8e2a93207032712606ee",
    "createdAt": "2016-03-14T21:48:53Z",
    "diffHunk": "@@ -337,7 +337,8 @@ def cast(self, dataType):\n             raise TypeError(\"unexpected type: %s\" % type(dataType))\n         return Column(jc)\n \n-    astype = cast\n+    astype = copy_func(cast)\n+    astype.__doc__ = \":func:`astype` is an alias for :func:`cast`.\""
  }, {
    "author": {
      "login": "davies"
    },
    "body": "This is public API, we should not break it randomly (even the doc).\n",
    "commit": "93df90fe0156e12a25ac8e2a93207032712606ee",
    "createdAt": "2016-03-14T21:57:08Z",
    "diffHunk": "@@ -337,7 +337,8 @@ def cast(self, dataType):\n             raise TypeError(\"unexpected type: %s\" % type(dataType))\n         return Column(jc)\n \n-    astype = cast\n+    astype = copy_func(cast)\n+    astype.__doc__ = \":func:`astype` is an alias for :func:`cast`.\""
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "they can still change, can't they? e.g. we might add new parameters.\n",
    "commit": "93df90fe0156e12a25ac8e2a93207032712606ee",
    "createdAt": "2016-03-14T22:13:42Z",
    "diffHunk": "@@ -337,7 +337,8 @@ def cast(self, dataType):\n             raise TypeError(\"unexpected type: %s\" % type(dataType))\n         return Column(jc)\n \n-    astype = cast\n+    astype = copy_func(cast)\n+    astype.__doc__ = \":func:`astype` is an alias for :func:`cast`.\""
  }, {
    "author": {
      "login": "davies"
    },
    "body": "ok, sgtm\n",
    "commit": "93df90fe0156e12a25ac8e2a93207032712606ee",
    "createdAt": "2016-03-14T22:17:06Z",
    "diffHunk": "@@ -337,7 +337,8 @@ def cast(self, dataType):\n             raise TypeError(\"unexpected type: %s\" % type(dataType))\n         return Column(jc)\n \n-    astype = cast\n+    astype = copy_func(cast)\n+    astype.__doc__ = \":func:`astype` is an alias for :func:`cast`.\""
  }, {
    "author": {
      "login": "davies"
    },
    "body": "should we also keep the versions?\n",
    "commit": "93df90fe0156e12a25ac8e2a93207032712606ee",
    "createdAt": "2016-03-14T22:17:45Z",
    "diffHunk": "@@ -337,7 +337,8 @@ def cast(self, dataType):\n             raise TypeError(\"unexpected type: %s\" % type(dataType))\n         return Column(jc)\n \n-    astype = cast\n+    astype = copy_func(cast)\n+    astype.__doc__ = \":func:`astype` is an alias for :func:`cast`.\""
  }],
  "prId": 11698
}]