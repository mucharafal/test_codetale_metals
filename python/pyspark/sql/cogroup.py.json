[{
  "comments": [{
    "author": {
      "login": "BryanCutler"
    },
    "body": "should this import be at the top?",
    "commit": "1b966fda46c5334cf7963bae0bece159c9568622",
    "createdAt": "2019-07-10T21:52:35Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from pyspark.sql.dataframe import DataFrame\n+from pyspark.rdd import PythonEvalType",
    "line": 19
  }, {
    "author": {
      "login": "d80tb7"
    },
    "body": "yes it should!",
    "commit": "1b966fda46c5334cf7963bae0bece159c9568622",
    "createdAt": "2019-07-11T20:50:40Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from pyspark.sql.dataframe import DataFrame\n+from pyspark.rdd import PythonEvalType",
    "line": 19
  }],
  "prId": 24981
}, {
  "comments": [{
    "author": {
      "login": "BryanCutler"
    },
    "body": "please add pydocs",
    "commit": "1b966fda46c5334cf7963bae0bece159c9568622",
    "createdAt": "2019-07-10T21:56:24Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from pyspark.sql.dataframe import DataFrame\n+from pyspark.rdd import PythonEvalType\n+from pyspark.sql.column import Column\n+\n+\n+class CoGroupedData(object):",
    "line": 24
  }, {
    "author": {
      "login": "d80tb7"
    },
    "body": "done",
    "commit": "1b966fda46c5334cf7963bae0bece159c9568622",
    "createdAt": "2019-07-11T20:50:49Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from pyspark.sql.dataframe import DataFrame\n+from pyspark.rdd import PythonEvalType\n+from pyspark.sql.column import Column\n+\n+\n+class CoGroupedData(object):",
    "line": 24
  }],
  "prId": 24981
}, {
  "comments": [{
    "author": {
      "login": "itamarst"
    },
    "body": "Probably want \\`\\`pandas.DataFrame\\`\\` (two backticks) for correct reStructuredText rendering).",
    "commit": "1b966fda46c5334cf7963bae0bece159c9568622",
    "createdAt": "2019-07-30T18:59:16Z",
    "diffHunk": "@@ -0,0 +1,99 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from pyspark import since\n+from pyspark.rdd import PythonEvalType\n+from pyspark.sql.column import Column\n+from pyspark.sql.dataframe import DataFrame\n+\n+\n+class CoGroupedData(object):\n+    \"\"\"\n+       A logical grouping of two :class:`GroupedData`,\n+       created by :func:`GroupedData.cogroup`.\n+\n+       .. note:: Experimental\n+\n+       .. versionadded:: 3.0\n+\n+       \"\"\"\n+\n+    def __init__(self, gd1, gd2):\n+        self._gd1 = gd1\n+        self._gd2 = gd2\n+        self.sql_ctx = gd1.sql_ctx\n+\n+    @since(3.0)\n+    def apply(self, udf):\n+        \"\"\"\n+        Applies a function to each cogroup using a pandas udf and returns the result\n+        as a `DataFrame`.\n+\n+        The user-defined function should take two `pandas.DataFrame` and return another\n+        `pandas.DataFrame`. For each side of the cogroup, all columns are passed together",
    "line": 46
  }],
  "prId": 24981
}, {
  "comments": [{
    "author": {
      "login": "ueshin"
    },
    "body": "nit: the doc format looks wrong.",
    "commit": "1b966fda46c5334cf7963bae0bece159c9568622",
    "createdAt": "2019-08-27T19:59:14Z",
    "diffHunk": "@@ -0,0 +1,99 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from pyspark import since\n+from pyspark.rdd import PythonEvalType\n+from pyspark.sql.column import Column\n+from pyspark.sql.dataframe import DataFrame\n+\n+\n+class CoGroupedData(object):\n+    \"\"\"\n+       A logical grouping of two :class:`GroupedData`,\n+       created by :func:`GroupedData.cogroup`.\n+\n+       .. note:: Experimental\n+\n+       .. versionadded:: 3.0\n+\n+       \"\"\""
  }],
  "prId": 24981
}, {
  "comments": [{
    "author": {
      "login": "ueshin"
    },
    "body": "nit: `goroups` -> `groups`",
    "commit": "1b966fda46c5334cf7963bae0bece159c9568622",
    "createdAt": "2019-08-27T20:00:41Z",
    "diffHunk": "@@ -0,0 +1,99 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from pyspark import since\n+from pyspark.rdd import PythonEvalType\n+from pyspark.sql.column import Column\n+from pyspark.sql.dataframe import DataFrame\n+\n+\n+class CoGroupedData(object):\n+    \"\"\"\n+       A logical grouping of two :class:`GroupedData`,\n+       created by :func:`GroupedData.cogroup`.\n+\n+       .. note:: Experimental\n+\n+       .. versionadded:: 3.0\n+\n+       \"\"\"\n+\n+    def __init__(self, gd1, gd2):\n+        self._gd1 = gd1\n+        self._gd2 = gd2\n+        self.sql_ctx = gd1.sql_ctx\n+\n+    @since(3.0)\n+    def apply(self, udf):\n+        \"\"\"\n+        Applies a function to each cogroup using a pandas udf and returns the result\n+        as a `DataFrame`.\n+\n+        The user-defined function should take two `pandas.DataFrame` and return another\n+        ``pandas.DataFrame``. For each side of the cogroup, all columns are passed together\n+        as a `pandas.DataFrame` to the user-function and the returned `pandas.DataFrame`\n+        are combined as a :class:`DataFrame`.\n+\n+        The returned `pandas.DataFrame` can be of arbitrary length and its schema must match the\n+        returnType of the pandas udf.\n+\n+        .. note:: This function requires a full shuffle. All the data of a cogroup will be loaded\n+            into memory, so the user should be aware of the potential OOM risk if data is skewed\n+            and certain goroups are too large to fit in memory."
  }],
  "prId": 24981
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "single or double backquote? I saw most are single backquote?",
    "commit": "1b966fda46c5334cf7963bae0bece159c9568622",
    "createdAt": "2019-09-11T22:51:00Z",
    "diffHunk": "@@ -0,0 +1,98 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from pyspark import since\n+from pyspark.rdd import PythonEvalType\n+from pyspark.sql.column import Column\n+from pyspark.sql.dataframe import DataFrame\n+\n+\n+class CoGroupedData(object):\n+    \"\"\"\n+    A logical grouping of two :class:`GroupedData`,\n+    created by :func:`GroupedData.cogroup`.\n+\n+    .. note:: Experimental\n+\n+    .. versionadded:: 3.0\n+    \"\"\"\n+\n+    def __init__(self, gd1, gd2):\n+        self._gd1 = gd1\n+        self._gd2 = gd2\n+        self.sql_ctx = gd1.sql_ctx\n+\n+    @since(3.0)\n+    def apply(self, udf):\n+        \"\"\"\n+        Applies a function to each cogroup using a pandas udf and returns the result\n+        as a `DataFrame`.\n+\n+        The user-defined function should take two `pandas.DataFrame` and return another\n+        ``pandas.DataFrame``. For each side of the cogroup, all columns are passed together"
  }, {
    "author": {
      "login": "d80tb7"
    },
    "body": "yes sorry should be single",
    "commit": "1b966fda46c5334cf7963bae0bece159c9568622",
    "createdAt": "2019-09-15T08:34:06Z",
    "diffHunk": "@@ -0,0 +1,98 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from pyspark import since\n+from pyspark.rdd import PythonEvalType\n+from pyspark.sql.column import Column\n+from pyspark.sql.dataframe import DataFrame\n+\n+\n+class CoGroupedData(object):\n+    \"\"\"\n+    A logical grouping of two :class:`GroupedData`,\n+    created by :func:`GroupedData.cogroup`.\n+\n+    .. note:: Experimental\n+\n+    .. versionadded:: 3.0\n+    \"\"\"\n+\n+    def __init__(self, gd1, gd2):\n+        self._gd1 = gd1\n+        self._gd2 = gd2\n+        self.sql_ctx = gd1.sql_ctx\n+\n+    @since(3.0)\n+    def apply(self, udf):\n+        \"\"\"\n+        Applies a function to each cogroup using a pandas udf and returns the result\n+        as a `DataFrame`.\n+\n+        The user-defined function should take two `pandas.DataFrame` and return another\n+        ``pandas.DataFrame``. For each side of the cogroup, all columns are passed together"
  }],
  "prId": 24981
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "We should skip this test and run the doctests\r\n\r\n1. add this to `dev/sparktestsupport/modules.py` at `pyspark_sql`\r\n2. add:\r\n\r\n    ```python\r\n    def main():\r\n        doctest.testmod(...)\r\n        ...\r\n    ```",
    "commit": "1b966fda46c5334cf7963bae0bece159c9568622",
    "createdAt": "2019-09-22T08:49:02Z",
    "diffHunk": "@@ -0,0 +1,98 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from pyspark import since\n+from pyspark.rdd import PythonEvalType\n+from pyspark.sql.column import Column\n+from pyspark.sql.dataframe import DataFrame\n+\n+\n+class CoGroupedData(object):\n+    \"\"\"\n+    A logical grouping of two :class:`GroupedData`,\n+    created by :func:`GroupedData.cogroup`.\n+\n+    .. note:: Experimental\n+\n+    .. versionadded:: 3.0\n+    \"\"\"\n+\n+    def __init__(self, gd1, gd2):\n+        self._gd1 = gd1\n+        self._gd2 = gd2\n+        self.sql_ctx = gd1.sql_ctx\n+\n+    @since(3.0)\n+    def apply(self, udf):\n+        \"\"\"\n+        Applies a function to each cogroup using a pandas udf and returns the result\n+        as a `DataFrame`.\n+\n+        The user-defined function should take two `pandas.DataFrame` and return another\n+        `pandas.DataFrame`. For each side of the cogroup, all columns are passed together\n+        as a `pandas.DataFrame` to the user-function and the returned `pandas.DataFrame`\n+        are combined as a :class:`DataFrame`.\n+\n+        The returned `pandas.DataFrame` can be of arbitrary length and its schema must match the\n+        returnType of the pandas udf.\n+\n+        .. note:: This function requires a full shuffle. All the data of a cogroup will be loaded\n+            into memory, so the user should be aware of the potential OOM risk if data is skewed\n+            and certain groups are too large to fit in memory.\n+\n+        .. note:: Experimental\n+\n+        :param udf: a cogrouped map user-defined function returned by\n+            :func:`pyspark.sql.functions.pandas_udf`.\n+\n+        >>> from pyspark.sql.functions import pandas_udf, PandasUDFType\n+        >>> df1 = spark.createDataFrame(\n+        ...    [(20000101, 1, 1.0), (20000101, 2, 2.0), (20000102, 1, 3.0), (20000102, 2, 4.0)],\n+        ...    (\"time\", \"id\", \"v1\"))\n+        >>> df2 = spark.createDataFrame(\n+        ... [(20000101, 1, \"x\"), (20000101, 2, \"y\")],\n+        ... (\"time\", \"id\", \"v2\"))\n+        >>> @pandas_udf(\"time int, id int, v1 double, v2 string\", PandasUDFType.COGROUPED_MAP)",
    "line": 69
  }, {
    "author": {
      "login": "BryanCutler"
    },
    "body": "We are currently skipping all doctests for Pandas UDFs right? We could add the module but then need to skip each test individually, which might be more consistent with the rest of PySpark.",
    "commit": "1b966fda46c5334cf7963bae0bece159c9568622",
    "createdAt": "2019-09-22T18:48:18Z",
    "diffHunk": "@@ -0,0 +1,98 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from pyspark import since\n+from pyspark.rdd import PythonEvalType\n+from pyspark.sql.column import Column\n+from pyspark.sql.dataframe import DataFrame\n+\n+\n+class CoGroupedData(object):\n+    \"\"\"\n+    A logical grouping of two :class:`GroupedData`,\n+    created by :func:`GroupedData.cogroup`.\n+\n+    .. note:: Experimental\n+\n+    .. versionadded:: 3.0\n+    \"\"\"\n+\n+    def __init__(self, gd1, gd2):\n+        self._gd1 = gd1\n+        self._gd2 = gd2\n+        self.sql_ctx = gd1.sql_ctx\n+\n+    @since(3.0)\n+    def apply(self, udf):\n+        \"\"\"\n+        Applies a function to each cogroup using a pandas udf and returns the result\n+        as a `DataFrame`.\n+\n+        The user-defined function should take two `pandas.DataFrame` and return another\n+        `pandas.DataFrame`. For each side of the cogroup, all columns are passed together\n+        as a `pandas.DataFrame` to the user-function and the returned `pandas.DataFrame`\n+        are combined as a :class:`DataFrame`.\n+\n+        The returned `pandas.DataFrame` can be of arbitrary length and its schema must match the\n+        returnType of the pandas udf.\n+\n+        .. note:: This function requires a full shuffle. All the data of a cogroup will be loaded\n+            into memory, so the user should be aware of the potential OOM risk if data is skewed\n+            and certain groups are too large to fit in memory.\n+\n+        .. note:: Experimental\n+\n+        :param udf: a cogrouped map user-defined function returned by\n+            :func:`pyspark.sql.functions.pandas_udf`.\n+\n+        >>> from pyspark.sql.functions import pandas_udf, PandasUDFType\n+        >>> df1 = spark.createDataFrame(\n+        ...    [(20000101, 1, 1.0), (20000101, 2, 2.0), (20000102, 1, 3.0), (20000102, 2, 4.0)],\n+        ...    (\"time\", \"id\", \"v1\"))\n+        >>> df2 = spark.createDataFrame(\n+        ... [(20000101, 1, \"x\"), (20000101, 2, \"y\")],\n+        ... (\"time\", \"id\", \"v2\"))\n+        >>> @pandas_udf(\"time int, id int, v1 double, v2 string\", PandasUDFType.COGROUPED_MAP)",
    "line": 69
  }],
  "prId": 24981
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "indentation nit",
    "commit": "1b966fda46c5334cf7963bae0bece159c9568622",
    "createdAt": "2019-09-22T08:49:08Z",
    "diffHunk": "@@ -0,0 +1,98 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from pyspark import since\n+from pyspark.rdd import PythonEvalType\n+from pyspark.sql.column import Column\n+from pyspark.sql.dataframe import DataFrame\n+\n+\n+class CoGroupedData(object):\n+    \"\"\"\n+    A logical grouping of two :class:`GroupedData`,\n+    created by :func:`GroupedData.cogroup`.\n+\n+    .. note:: Experimental\n+\n+    .. versionadded:: 3.0\n+    \"\"\"\n+\n+    def __init__(self, gd1, gd2):\n+        self._gd1 = gd1\n+        self._gd2 = gd2\n+        self.sql_ctx = gd1.sql_ctx\n+\n+    @since(3.0)\n+    def apply(self, udf):\n+        \"\"\"\n+        Applies a function to each cogroup using a pandas udf and returns the result\n+        as a `DataFrame`.\n+\n+        The user-defined function should take two `pandas.DataFrame` and return another\n+        `pandas.DataFrame`. For each side of the cogroup, all columns are passed together\n+        as a `pandas.DataFrame` to the user-function and the returned `pandas.DataFrame`\n+        are combined as a :class:`DataFrame`.\n+\n+        The returned `pandas.DataFrame` can be of arbitrary length and its schema must match the\n+        returnType of the pandas udf.\n+\n+        .. note:: This function requires a full shuffle. All the data of a cogroup will be loaded\n+            into memory, so the user should be aware of the potential OOM risk if data is skewed\n+            and certain groups are too large to fit in memory.\n+\n+        .. note:: Experimental\n+\n+        :param udf: a cogrouped map user-defined function returned by\n+            :func:`pyspark.sql.functions.pandas_udf`.\n+\n+        >>> from pyspark.sql.functions import pandas_udf, PandasUDFType\n+        >>> df1 = spark.createDataFrame(\n+        ...    [(20000101, 1, 1.0), (20000101, 2, 2.0), (20000102, 1, 3.0), (20000102, 2, 4.0)],\n+        ...    (\"time\", \"id\", \"v1\"))\n+        >>> df2 = spark.createDataFrame(\n+        ... [(20000101, 1, \"x\"), (20000101, 2, \"y\")],\n+        ... (\"time\", \"id\", \"v2\"))",
    "line": 68
  }],
  "prId": 24981
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Can we document when arguments are three? (when it includes the grouping key)",
    "commit": "1b966fda46c5334cf7963bae0bece159c9568622",
    "createdAt": "2019-09-22T08:56:02Z",
    "diffHunk": "@@ -0,0 +1,98 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from pyspark import since\n+from pyspark.rdd import PythonEvalType\n+from pyspark.sql.column import Column\n+from pyspark.sql.dataframe import DataFrame\n+\n+\n+class CoGroupedData(object):\n+    \"\"\"\n+    A logical grouping of two :class:`GroupedData`,\n+    created by :func:`GroupedData.cogroup`.\n+\n+    .. note:: Experimental\n+\n+    .. versionadded:: 3.0\n+    \"\"\"\n+\n+    def __init__(self, gd1, gd2):\n+        self._gd1 = gd1\n+        self._gd2 = gd2\n+        self.sql_ctx = gd1.sql_ctx\n+\n+    @since(3.0)\n+    def apply(self, udf):\n+        \"\"\"\n+        Applies a function to each cogroup using a pandas udf and returns the result\n+        as a `DataFrame`.\n+\n+        The user-defined function should take two `pandas.DataFrame` and return another\n+        `pandas.DataFrame`. For each side of the cogroup, all columns are passed together\n+        as a `pandas.DataFrame` to the user-function and the returned `pandas.DataFrame`\n+        are combined as a :class:`DataFrame`.\n+\n+        The returned `pandas.DataFrame` can be of arbitrary length and its schema must match the\n+        returnType of the pandas udf.\n+\n+        .. note:: This function requires a full shuffle. All the data of a cogroup will be loaded\n+            into memory, so the user should be aware of the potential OOM risk if data is skewed\n+            and certain groups are too large to fit in memory.\n+\n+        .. note:: Experimental\n+\n+        :param udf: a cogrouped map user-defined function returned by\n+            :func:`pyspark.sql.functions.pandas_udf`.\n+\n+        >>> from pyspark.sql.functions import pandas_udf, PandasUDFType\n+        >>> df1 = spark.createDataFrame(\n+        ...    [(20000101, 1, 1.0), (20000101, 2, 2.0), (20000102, 1, 3.0), (20000102, 2, 4.0)],\n+        ...    (\"time\", \"id\", \"v1\"))\n+        >>> df2 = spark.createDataFrame(\n+        ... [(20000101, 1, \"x\"), (20000101, 2, \"y\")],\n+        ... (\"time\", \"id\", \"v2\"))\n+        >>> @pandas_udf(\"time int, id int, v1 double, v2 string\", PandasUDFType.COGROUPED_MAP)",
    "line": 69
  }],
  "prId": 24981
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Seems like we don't generate documentation for this:\r\n\r\n![Screen Shot 2019-09-22 at 9 41 48 PM](https://user-images.githubusercontent.com/6477701/65387377-d96f9900-dd81-11e9-928f-de9929571355.png)\r\n\r\ncannot click.\r\n\r\nIt should be either documented at `python/docs/pyspark.sql.rst` or imported at `pyspark/sql/__init__.py` with including it at `__all__`.",
    "commit": "1b966fda46c5334cf7963bae0bece159c9568622",
    "createdAt": "2019-09-22T12:43:49Z",
    "diffHunk": "@@ -0,0 +1,98 @@\n+#",
    "line": 1
  }, {
    "author": {
      "login": "BryanCutler"
    },
    "body": "+1 adding it to `pyspark/sql/__init__.py` with including it at `__all__` since this is what `group.py` does",
    "commit": "1b966fda46c5334cf7963bae0bece159c9568622",
    "createdAt": "2019-09-22T19:05:00Z",
    "diffHunk": "@@ -0,0 +1,98 @@\n+#",
    "line": 1
  }],
  "prId": 24981
}]