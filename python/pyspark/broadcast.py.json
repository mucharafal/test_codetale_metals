[{
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Maybe add a comment explaining why you call `gc.disable` here?\n",
    "commit": "50a58e02843f04165f4da51771b93b61acb084ad",
    "createdAt": "2014-11-23T01:10:22Z",
    "diffHunk": "@@ -49,44 +38,86 @@ def _from_id(bid):\n class Broadcast(object):\n \n     \"\"\"\n-    A broadcast variable created with\n-    L{SparkContext.broadcast()<pyspark.context.SparkContext.broadcast>}.\n+    A broadcast variable created with L{SparkContext.broadcast()}.\n     Access its value through C{.value}.\n+\n+    Examples:\n+\n+    >>> from pyspark.context import SparkContext\n+    >>> sc = SparkContext('local', 'test')\n+    >>> b = sc.broadcast([1, 2, 3, 4, 5])\n+    >>> b.value\n+    [1, 2, 3, 4, 5]\n+    >>> sc.parallelize([0, 0]).flatMap(lambda x: b.value).collect()\n+    [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n+    >>> b.unpersist()\n+\n+    >>> large_broadcast = sc.broadcast(range(10000))\n     \"\"\"\n \n-    def __init__(self, bid, value, java_broadcast=None,\n-                 pickle_registry=None, path=None):\n+    def __init__(self, sc=None, value=None, pickle_registry=None, path=None):\n         \"\"\"\n-        Should not be called directly by users -- use\n-        L{SparkContext.broadcast()<pyspark.context.SparkContext.broadcast>}\n+        Should not be called directly by users -- use L{SparkContext.broadcast()}\n         instead.\n         \"\"\"\n-        self.bid = bid\n-        if path is None:\n-            self._value = value\n-        self._jbroadcast = java_broadcast\n-        self._pickle_registry = pickle_registry\n-        self.path = path\n+        if sc is not None:\n+            f = NamedTemporaryFile(delete=False, dir=sc._temp_dir)\n+            self._path = self.dump(value, f)\n+            self._jbroadcast = sc._jvm.PythonRDD.readBroadcastFromFile(sc._jsc, self._path)\n+            self._pickle_registry = pickle_registry\n+        else:\n+            self._jbroadcast = None\n+            self._path = path\n+\n+    def dump(self, value, f):\n+        if isinstance(value, basestring):\n+            if isinstance(value, unicode):\n+                f.write('U')\n+                value = value.encode('utf8')\n+            else:\n+                f.write('S')\n+            f.write(value)\n+        else:\n+            f.write('P')\n+            cPickle.dump(value, f, 2)\n+        f.close()\n+        return f.name\n+\n+    def load(self, path):\n+        with open(path, 'rb', 1 << 20) as f:\n+            flag = f.read(1)\n+            data = f.read()\n+            if flag == 'P':\n+                gc.disable()"
  }],
  "prId": 3417
}]