[{
  "comments": [{
    "author": {
      "login": "feynmanliang"
    },
    "body": "nit: alphabetize\n",
    "commit": "615fbbb4aaddd4c5a45f9fff4c58c395f1873340",
    "createdAt": "2016-10-29T20:17:44Z",
    "diffHunk": "@@ -15,10 +15,15 @@\n # limitations under the License.\n #\n \n+from collections import namedtuple\n+\n+from pyspark import SparkContext, since\n from pyspark.mllib.common import inherit_doc, JavaModelWrapper\n+from pyspark.streaming.dstream import DStream\n \n \n-__all__ = [\"ChiSqTestResult\", \"KolmogorovSmirnovTestResult\"]\n+__all__ = [\"ChiSqTestResult\", \"KolmogorovSmirnovTestResult\", \"BinarySample\", \"StreamingTest\",",
    "line": 12
  }],
  "prId": 11374
}, {
  "comments": [{
    "author": {
      "login": "feynmanliang"
    },
    "body": "nit: data -> dstream\n",
    "commit": "615fbbb4aaddd4c5a45f9fff4c58c395f1873340",
    "createdAt": "2016-10-29T20:18:55Z",
    "diffHunk": "@@ -80,3 +85,118 @@ class KolmogorovSmirnovTestResult(TestResult):\n     \"\"\"\n     Contains test results for the Kolmogorov-Smirnov test.\n     \"\"\"\n+\n+\n+class BinarySample(namedtuple(\"BinarySample\", [\"isExperiment\", \"value\"])):\n+    \"\"\"\n+    Represents a (isExperiment, value) tuple.\n+\n+    .. versionadded:: 2.0.0\n+    \"\"\"\n+\n+    def __reduce__(self):\n+        return BinarySample, (bool(self.isExperiment), float(self.value))\n+\n+\n+class StreamingTestResult(namedtuple(\"StreamingTestResult\",\n+                                     [\"pValue\", \"degreesOfFreedom\", \"statistic\", \"method\",\n+                                      \"nullHypothesis\"])):\n+    \"\"\"\n+    Contains test results for StreamingTest.\n+\n+    .. versionadded:: 2.0.0\n+    \"\"\"\n+\n+    def __reduce__(self):\n+        return StreamingTestResult, (float(self.pValue),\n+                                     float(self.degreesOfFreedom), float(self.statistic),\n+                                     str(self.method), str(self.nullHypothesis))\n+\n+\n+class StreamingTest(object):\n+    \"\"\"\n+    .. note:: Experimental\n+\n+    Online 2-sample significance testing for a stream of (Boolean, Double) pairs. The Boolean\n+    identifies which sample each observation comes from, and the Double is the numeric value of the\n+    observation.\n+\n+    To address novelty affects, the `peacePeriod` specifies a set number of initial RDD batches of\n+    the DStream to be dropped from significance testing.\n+\n+    The `windowSize` sets the number of batches each significance test is to be performed over. The\n+    window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+    cumulative processing, using all batches seen so far.\n+\n+    Different tests may be used for assessing statistical significance depending on assumptions\n+    satisfied by data. For more details, see StreamingTestMethod. The `testMethod` specifies\n+    which test will be used.\n+\n+    .. versionadded:: 2.0.0\n+    \"\"\"\n+\n+    def __init__(self):\n+        self._peacePeriod = 0\n+        self._windowSize = 0\n+        self._testMethod = \"welch\"\n+\n+    @since('2.0.0')\n+    def setPeacePeriod(self, peacePeriod):\n+        \"\"\"\n+        Update peacePeriod\n+        :param peacePeriod:\n+          Set number of initial RDD batches of the DStream to be dropped from significance testing.\n+        \"\"\"\n+        self._peacePeriod = peacePeriod\n+\n+    @since('2.0.0')\n+    def setWindowSize(self, windowSize):\n+        \"\"\"\n+        Update windowSize\n+        :param windowSize:\n+          Set the number of batches each significance test is to be performed over.\n+        \"\"\"\n+        self._windowSize = windowSize\n+\n+    @since('2.0.0')\n+    def setTestMethod(self, testMethod):\n+        \"\"\"\n+        Update test method\n+        :param testMethod:\n+          Currently supported tests: `welch`, `student`.\n+        \"\"\"\n+        assert(testMethod in (\"welch\", \"student\"),\n+               \"Currently supported tests: \\\"welch\\\", \\\"student\\\"\")\n+        self._testMethod = testMethod\n+\n+    @since('2.0.0')\n+    def registerStream(self, data):",
    "line": 106
  }],
  "prId": 11374
}, {
  "comments": [{
    "author": {
      "login": "feynmanliang"
    },
    "body": "Why did we not define a `StreamingTestModel` and assign an instance to `_model` (like in streaming K means)?\n",
    "commit": "615fbbb4aaddd4c5a45f9fff4c58c395f1873340",
    "createdAt": "2016-10-29T20:20:49Z",
    "diffHunk": "@@ -80,3 +85,118 @@ class KolmogorovSmirnovTestResult(TestResult):\n     \"\"\"\n     Contains test results for the Kolmogorov-Smirnov test.\n     \"\"\"\n+\n+\n+class BinarySample(namedtuple(\"BinarySample\", [\"isExperiment\", \"value\"])):\n+    \"\"\"\n+    Represents a (isExperiment, value) tuple.\n+\n+    .. versionadded:: 2.0.0\n+    \"\"\"\n+\n+    def __reduce__(self):\n+        return BinarySample, (bool(self.isExperiment), float(self.value))\n+\n+\n+class StreamingTestResult(namedtuple(\"StreamingTestResult\",\n+                                     [\"pValue\", \"degreesOfFreedom\", \"statistic\", \"method\",\n+                                      \"nullHypothesis\"])):\n+    \"\"\"\n+    Contains test results for StreamingTest.\n+\n+    .. versionadded:: 2.0.0\n+    \"\"\"\n+\n+    def __reduce__(self):\n+        return StreamingTestResult, (float(self.pValue),\n+                                     float(self.degreesOfFreedom), float(self.statistic),\n+                                     str(self.method), str(self.nullHypothesis))\n+\n+\n+class StreamingTest(object):\n+    \"\"\"\n+    .. note:: Experimental\n+\n+    Online 2-sample significance testing for a stream of (Boolean, Double) pairs. The Boolean\n+    identifies which sample each observation comes from, and the Double is the numeric value of the\n+    observation.\n+\n+    To address novelty affects, the `peacePeriod` specifies a set number of initial RDD batches of\n+    the DStream to be dropped from significance testing.\n+\n+    The `windowSize` sets the number of batches each significance test is to be performed over. The\n+    window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+    cumulative processing, using all batches seen so far.\n+\n+    Different tests may be used for assessing statistical significance depending on assumptions\n+    satisfied by data. For more details, see StreamingTestMethod. The `testMethod` specifies\n+    which test will be used.\n+\n+    .. versionadded:: 2.0.0\n+    \"\"\"\n+\n+    def __init__(self):\n+        self._peacePeriod = 0\n+        self._windowSize = 0\n+        self._testMethod = \"welch\"\n+\n+    @since('2.0.0')\n+    def setPeacePeriod(self, peacePeriod):\n+        \"\"\"\n+        Update peacePeriod\n+        :param peacePeriod:\n+          Set number of initial RDD batches of the DStream to be dropped from significance testing.\n+        \"\"\"\n+        self._peacePeriod = peacePeriod\n+\n+    @since('2.0.0')\n+    def setWindowSize(self, windowSize):\n+        \"\"\"\n+        Update windowSize\n+        :param windowSize:\n+          Set the number of batches each significance test is to be performed over.\n+        \"\"\"\n+        self._windowSize = windowSize\n+\n+    @since('2.0.0')\n+    def setTestMethod(self, testMethod):\n+        \"\"\"\n+        Update test method\n+        :param testMethod:\n+          Currently supported tests: `welch`, `student`.\n+        \"\"\"\n+        assert(testMethod in (\"welch\", \"student\"),\n+               \"Currently supported tests: \\\"welch\\\", \\\"student\\\"\")\n+        self._testMethod = testMethod\n+\n+    @since('2.0.0')\n+    def registerStream(self, data):\n+        \"\"\"\n+        Register a data stream to get its test result.\n+\n+        :param data:\n+          The input data stream, each element is a BinarySample instance.\n+        \"\"\"\n+        self._validate(data)\n+        sc = SparkContext._active_spark_context\n+\n+        streamingTest = sc._jvm.org.apache.spark.mllib.stat.test.StreamingTest()",
    "line": 116
  }],
  "prId": 11374
}, {
  "comments": [{
    "author": {
      "login": "feynmanliang"
    },
    "body": "Why do we need `pythonToJava` and `javaToPython`; its not used for streaming K means https://github.com/apache/spark/blob/39e2bad6a866d27c3ca594d15e574a1da3ee84cc/python/pyspark/mllib/clustering.py#L773\n",
    "commit": "615fbbb4aaddd4c5a45f9fff4c58c395f1873340",
    "createdAt": "2016-10-29T20:37:16Z",
    "diffHunk": "@@ -80,3 +85,118 @@ class KolmogorovSmirnovTestResult(TestResult):\n     \"\"\"\n     Contains test results for the Kolmogorov-Smirnov test.\n     \"\"\"\n+\n+\n+class BinarySample(namedtuple(\"BinarySample\", [\"isExperiment\", \"value\"])):\n+    \"\"\"\n+    Represents a (isExperiment, value) tuple.\n+\n+    .. versionadded:: 2.0.0\n+    \"\"\"\n+\n+    def __reduce__(self):\n+        return BinarySample, (bool(self.isExperiment), float(self.value))\n+\n+\n+class StreamingTestResult(namedtuple(\"StreamingTestResult\",\n+                                     [\"pValue\", \"degreesOfFreedom\", \"statistic\", \"method\",\n+                                      \"nullHypothesis\"])):\n+    \"\"\"\n+    Contains test results for StreamingTest.\n+\n+    .. versionadded:: 2.0.0\n+    \"\"\"\n+\n+    def __reduce__(self):\n+        return StreamingTestResult, (float(self.pValue),\n+                                     float(self.degreesOfFreedom), float(self.statistic),\n+                                     str(self.method), str(self.nullHypothesis))\n+\n+\n+class StreamingTest(object):\n+    \"\"\"\n+    .. note:: Experimental\n+\n+    Online 2-sample significance testing for a stream of (Boolean, Double) pairs. The Boolean\n+    identifies which sample each observation comes from, and the Double is the numeric value of the\n+    observation.\n+\n+    To address novelty affects, the `peacePeriod` specifies a set number of initial RDD batches of\n+    the DStream to be dropped from significance testing.\n+\n+    The `windowSize` sets the number of batches each significance test is to be performed over. The\n+    window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+    cumulative processing, using all batches seen so far.\n+\n+    Different tests may be used for assessing statistical significance depending on assumptions\n+    satisfied by data. For more details, see StreamingTestMethod. The `testMethod` specifies\n+    which test will be used.\n+\n+    .. versionadded:: 2.0.0\n+    \"\"\"\n+\n+    def __init__(self):\n+        self._peacePeriod = 0\n+        self._windowSize = 0\n+        self._testMethod = \"welch\"\n+\n+    @since('2.0.0')\n+    def setPeacePeriod(self, peacePeriod):\n+        \"\"\"\n+        Update peacePeriod\n+        :param peacePeriod:\n+          Set number of initial RDD batches of the DStream to be dropped from significance testing.\n+        \"\"\"\n+        self._peacePeriod = peacePeriod\n+\n+    @since('2.0.0')\n+    def setWindowSize(self, windowSize):\n+        \"\"\"\n+        Update windowSize\n+        :param windowSize:\n+          Set the number of batches each significance test is to be performed over.\n+        \"\"\"\n+        self._windowSize = windowSize\n+\n+    @since('2.0.0')\n+    def setTestMethod(self, testMethod):\n+        \"\"\"\n+        Update test method\n+        :param testMethod:\n+          Currently supported tests: `welch`, `student`.\n+        \"\"\"\n+        assert(testMethod in (\"welch\", \"student\"),\n+               \"Currently supported tests: \\\"welch\\\", \\\"student\\\"\")\n+        self._testMethod = testMethod\n+\n+    @since('2.0.0')\n+    def registerStream(self, data):\n+        \"\"\"\n+        Register a data stream to get its test result.\n+\n+        :param data:\n+          The input data stream, each element is a BinarySample instance.\n+        \"\"\"\n+        self._validate(data)\n+        sc = SparkContext._active_spark_context\n+\n+        streamingTest = sc._jvm.org.apache.spark.mllib.stat.test.StreamingTest()\n+        streamingTest.setPeacePeriod(self._peacePeriod)\n+        streamingTest.setWindowSize(self._windowSize)\n+        streamingTest.setTestMethod(self._testMethod)\n+\n+        javaDStream = sc._jvm.SerDe.pythonToJava(data._jdstream, True)\n+        testResult = streamingTest.registerStream(javaDStream)",
    "line": 122
  }],
  "prId": 11374
}]