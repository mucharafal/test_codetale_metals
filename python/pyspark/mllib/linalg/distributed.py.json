[{
  "comments": [{
    "author": {
      "login": "holdenk"
    },
    "body": "Is this blank line intentional?\n",
    "commit": "c0c9565706c148cb7dd64250630931ab41838d3b",
    "createdAt": "2015-11-04T00:49:44Z",
    "diffHunk": "@@ -500,6 +661,25 @@ def numCols(self):\n         \"\"\"\n         return self._java_matrix_wrapper.call(\"numCols\")\n \n+    def transpose(self):\n+        \"\"\"\n+        Transpose this CoordinateMatrix.\n+\n+        >>> entries = sc.parallelize([MatrixEntry(0, 0, 1.2),\n+        ...                           MatrixEntry(1, 0, 2),\n+        ...                           MatrixEntry(2, 1, 3.7)])\n+        >>> mat = CoordinateMatrix(entries)\n+        >>> mat_transposed = mat.transpose()\n+",
    "line": 207
  }, {
    "author": {
      "login": "dusenberrymw"
    },
    "body": "Yeah, I like the visual clarity when viewing these tests on the Python docs, as it helps indicate that the following two tests rely on the data structures formed above.  This is generally the pattern I've followed with these classes for cases with >1 test.\n",
    "commit": "c0c9565706c148cb7dd64250630931ab41838d3b",
    "createdAt": "2015-11-04T01:15:05Z",
    "diffHunk": "@@ -500,6 +661,25 @@ def numCols(self):\n         \"\"\"\n         return self._java_matrix_wrapper.call(\"numCols\")\n \n+    def transpose(self):\n+        \"\"\"\n+        Transpose this CoordinateMatrix.\n+\n+        >>> entries = sc.parallelize([MatrixEntry(0, 0, 1.2),\n+        ...                           MatrixEntry(1, 0, 2),\n+        ...                           MatrixEntry(2, 1, 3.7)])\n+        >>> mat = CoordinateMatrix(entries)\n+        >>> mat_transposed = mat.transpose()\n+",
    "line": 207
  }],
  "prId": 9441
}, {
  "comments": [{
    "author": {
      "login": "holdenk"
    },
    "body": "We should maybe also add this note about max columns to the IndexedRowMatrix.scala for consistency.\n",
    "commit": "c0c9565706c148cb7dd64250630931ab41838d3b",
    "createdAt": "2015-11-04T00:52:24Z",
    "diffHunk": "@@ -297,6 +444,20 @@ def numCols(self):\n         \"\"\"\n         return self._java_matrix_wrapper.call(\"numCols\")\n \n+    def computeGramianMatrix(self):\n+        \"\"\"\n+        Computes the Gramian matrix `A^T A`. Note that this cannot be\n+        computed on matrices with more than 65535 columns."
  }, {
    "author": {
      "login": "dusenberrymw"
    },
    "body": "Agreed.  Would it be reasonable to include that in this PR?\n",
    "commit": "c0c9565706c148cb7dd64250630931ab41838d3b",
    "createdAt": "2015-11-04T01:11:25Z",
    "diffHunk": "@@ -297,6 +444,20 @@ def numCols(self):\n         \"\"\"\n         return self._java_matrix_wrapper.call(\"numCols\")\n \n+    def computeGramianMatrix(self):\n+        \"\"\"\n+        Computes the Gramian matrix `A^T A`. Note that this cannot be\n+        computed on matrices with more than 65535 columns."
  }, {
    "author": {
      "login": "holdenk"
    },
    "body": "Thats a good question, totally reasonable to do this in a follow up PR I think since its pretty unrelated just while we are at it good to unify things while we are working on it. Just create a follow up JIRA to do this :)\n",
    "commit": "c0c9565706c148cb7dd64250630931ab41838d3b",
    "createdAt": "2015-11-04T01:20:39Z",
    "diffHunk": "@@ -297,6 +444,20 @@ def numCols(self):\n         \"\"\"\n         return self._java_matrix_wrapper.call(\"numCols\")\n \n+    def computeGramianMatrix(self):\n+        \"\"\"\n+        Computes the Gramian matrix `A^T A`. Note that this cannot be\n+        computed on matrices with more than 65535 columns."
  }, {
    "author": {
      "login": "MLnick"
    },
    "body": "I think since it's a small doc consistency thing, add it to this PR.\n",
    "commit": "c0c9565706c148cb7dd64250630931ab41838d3b",
    "createdAt": "2016-04-21T15:02:21Z",
    "diffHunk": "@@ -297,6 +444,20 @@ def numCols(self):\n         \"\"\"\n         return self._java_matrix_wrapper.call(\"numCols\")\n \n+    def computeGramianMatrix(self):\n+        \"\"\"\n+        Computes the Gramian matrix `A^T A`. Note that this cannot be\n+        computed on matrices with more than 65535 columns."
  }, {
    "author": {
      "login": "dusenberrymw"
    },
    "body": "Great, added.\n",
    "commit": "c0c9565706c148cb7dd64250630931ab41838d3b",
    "createdAt": "2016-04-21T17:24:43Z",
    "diffHunk": "@@ -297,6 +444,20 @@ def numCols(self):\n         \"\"\"\n         return self._java_matrix_wrapper.call(\"numCols\")\n \n+    def computeGramianMatrix(self):\n+        \"\"\"\n+        Computes the Gramian matrix `A^T A`. Note that this cannot be\n+        computed on matrices with more than 65535 columns."
  }],
  "prId": 9441
}, {
  "comments": [{
    "author": {
      "login": "holdenk"
    },
    "body": "Maybe mention it shares the same underlying data as mentioned in the scaladoc.\n",
    "commit": "c0c9565706c148cb7dd64250630931ab41838d3b",
    "createdAt": "2015-11-04T00:54:41Z",
    "diffHunk": "@@ -500,6 +661,25 @@ def numCols(self):\n         \"\"\"\n         return self._java_matrix_wrapper.call(\"numCols\")\n \n+    def transpose(self):\n+        \"\"\"\n+        Transpose this CoordinateMatrix."
  }, {
    "author": {
      "login": "dusenberrymw"
    },
    "body": "I think that is just the case for the `BlockMatrix` type.\n",
    "commit": "c0c9565706c148cb7dd64250630931ab41838d3b",
    "createdAt": "2015-11-04T01:12:38Z",
    "diffHunk": "@@ -500,6 +661,25 @@ def numCols(self):\n         \"\"\"\n         return self._java_matrix_wrapper.call(\"numCols\")\n \n+    def transpose(self):\n+        \"\"\"\n+        Transpose this CoordinateMatrix."
  }, {
    "author": {
      "login": "holdenk"
    },
    "body": "Ah ok, looking at Matrices.scala (the root class) it indicates it shares the same data type but I forgot to look at the Coordinate matrix underneath. Sorry about that.\n",
    "commit": "c0c9565706c148cb7dd64250630931ab41838d3b",
    "createdAt": "2015-11-04T01:23:03Z",
    "diffHunk": "@@ -500,6 +661,25 @@ def numCols(self):\n         \"\"\"\n         return self._java_matrix_wrapper.call(\"numCols\")\n \n+    def transpose(self):\n+        \"\"\"\n+        Transpose this CoordinateMatrix."
  }],
  "prId": 9441
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "Do these need `@since` annotations?\n",
    "commit": "c0c9565706c148cb7dd64250630931ab41838d3b",
    "createdAt": "2016-04-21T14:56:30Z",
    "diffHunk": "@@ -151,6 +153,151 @@ def numCols(self):\n         \"\"\"\n         return self._java_matrix_wrapper.call(\"numCols\")\n \n+    def computeColumnSummaryStatistics(self):"
  }, {
    "author": {
      "login": "dusenberrymw"
    },
    "body": "Yeah probably, although they would have been a little outdated if I had originally added them. :D\n",
    "commit": "c0c9565706c148cb7dd64250630931ab41838d3b",
    "createdAt": "2016-04-21T17:33:17Z",
    "diffHunk": "@@ -151,6 +153,151 @@ def numCols(self):\n         \"\"\"\n         return self._java_matrix_wrapper.call(\"numCols\")\n \n+    def computeColumnSummaryStatistics(self):"
  }],
  "prId": 9441
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "`subtract` now exists on the Scale side, it can be added here.\n",
    "commit": "c0c9565706c148cb7dd64250630931ab41838d3b",
    "createdAt": "2016-04-21T15:10:49Z",
    "diffHunk": "@@ -789,6 +969,30 @@ def numCols(self):\n         \"\"\"\n         return self._java_matrix_wrapper.call(\"numCols\")\n \n+    def cache(self):\n+        \"\"\"\n+        Caches the underlying RDD.\n+        \"\"\"\n+        self._java_matrix_wrapper.call(\"cache\")\n+        return self\n+\n+    def persist(self, storageLevel):\n+        \"\"\"\n+        Persists the underlying RDD with the specified storage level.\n+        \"\"\"\n+        if not isinstance(storageLevel, StorageLevel):\n+            raise TypeError(\"`storageLevel` should be a StorageLevel, got %s\" % type(storageLevel))\n+        javaStorageLevel = self._java_matrix_wrapper._sc._getJavaStorageLevel(storageLevel)\n+        self._java_matrix_wrapper.call(\"persist\", javaStorageLevel)\n+        return self\n+\n+    def validate(self):\n+        \"\"\"\n+        Validates the block matrix info against the matrix data (`blocks`)\n+        and throws an exception if any error is found.\n+        \"\"\"\n+        self._java_matrix_wrapper.call(\"validate\")\n+",
    "line": 250
  }],
  "prId": 9441
}]