[{
  "comments": [{
    "author": {
      "login": "holdenk"
    },
    "body": "This doesn't look like the correct behaviour. Can you test this on a system without scipy installed? (Probably easist with a simple virtualenv).\n",
    "commit": "5a919b606c0c09d65224d0cec4fd76ea9a4f73e0",
    "createdAt": "2016-10-19T22:20:09Z",
    "diffHunk": "@@ -794,6 +794,13 @@ def __eq__(self, other):\n             return Vectors._equals(self.indices, self.values, list(xrange(len(other))), other.array)\n         return False\n \n+    def __getattr__(self, item):        \n+        if _have_scipy:\n+            csr = scipy.sparse.csr_matrix((self.values, self.indices, [0, 2]))\n+            return getattr(csr, item)\n+        else:\n+            return self"
  }, {
    "author": {
      "login": "itg-abby"
    },
    "body": "Systems without Scipy return the following: \n\n```\nfrom pyspark.mllib.linalg import SparseVector\na = SparseVector(4, {1: 1.0, 3: 5.5})\na.sum()\n\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: 'SparseVector' object is not callable\n```\n\nThis has been corrected in the latest commit.\n `__getattr__` essentially is the catch for \"any attribute that does not have a name\" so standard behavior should be an AttributeError not just returning the object (thank you for catching this!). The new code gives the following error when SciPy is not available:\n\n```\na.sum()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/Users/sobh/spark/python/pyspark/mllib/linalg/__init__.py\", line 802, in __getattr__\n    raise AttributeError(\"'{0}' object has no attribute '{1}'.\".format(self.__class__, item))\nAttributeError: '<class 'pyspark.mllib.linalg.SparseVector'>' object has no attribute 'sum'.\n\n\n```\n\n---\n\nSystems with Scipy will give the result as expected:\n\n```\nfrom pyspark.mllib.linalg import SparseVector\na = SparseVector(4, {1: 1.0, 3: 5.5})\na.sum()\n\n6.5\n```\n",
    "commit": "5a919b606c0c09d65224d0cec4fd76ea9a4f73e0",
    "createdAt": "2016-10-20T18:43:13Z",
    "diffHunk": "@@ -794,6 +794,13 @@ def __eq__(self, other):\n             return Vectors._equals(self.indices, self.values, list(xrange(len(other))), other.array)\n         return False\n \n+    def __getattr__(self, item):        \n+        if _have_scipy:\n+            csr = scipy.sparse.csr_matrix((self.values, self.indices, [0, 2]))\n+            return getattr(csr, item)\n+        else:\n+            return self"
  }],
  "prId": 15496
}]