[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "The output is deterministic. So we should do the following:\n\n``` python\n>>> model.recommendProductsForUsers(1).collect()\n# put expected output here\n```\n",
    "commit": "56d33214d324fc158b29ff3b08f7c409f19433a1",
    "createdAt": "2015-09-11T17:02:56Z",
    "diffHunk": "@@ -85,6 +85,12 @@ class MatrixFactorizationModel(JavaModelWrapper, JavaSaveable, JavaLoader):\n     >>> len(latents) == 4\n     True\n \n+    >>> products_for_users = model.recommendProductsForUsers(1).collect()\n+    ..."
  }],
  "prId": 8700
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "It won't work because it will return `scala.Tuple2`. We need to add a helper on the Scala side to make it work. Using `DataFrame` should work.\n",
    "commit": "56d33214d324fc158b29ff3b08f7c409f19433a1",
    "createdAt": "2015-09-11T17:02:58Z",
    "diffHunk": "@@ -156,6 +162,18 @@ def recommendProducts(self, user, num):\n         \"\"\"\n         return list(self.call(\"recommendProducts\", user, num))\n \n+    def recommendProductsForUsers(self, num):\n+        \"\"\"\n+        Recommends topK products for all users.\n+        \"\"\"\n+        return self.call(\"recommendProductsForUsers\", num)"
  }],
  "prId": 8700
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Should be\n\n``` python\n>>> len(products_for_users)\n2\n```\n",
    "commit": "56d33214d324fc158b29ff3b08f7c409f19433a1",
    "createdAt": "2015-09-15T19:21:34Z",
    "diffHunk": "@@ -85,6 +85,16 @@ class MatrixFactorizationModel(JavaModelWrapper, JavaSaveable, JavaLoader):\n     >>> len(latents) == 4\n     True\n \n+    >>> products_for_users = model.recommendProductsForUsers(1).collect()\n+    >>> len(products_for_users) == 2"
  }],
  "prId": 8700
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "document `num`\n",
    "commit": "56d33214d324fc158b29ff3b08f7c409f19433a1",
    "createdAt": "2015-09-15T19:22:22Z",
    "diffHunk": "@@ -156,6 +166,18 @@ def recommendProducts(self, user, num):\n         \"\"\"\n         return list(self.call(\"recommendProducts\", user, num))\n \n+    def recommendProductsForUsers(self, num):\n+        \"\"\"\n+        Recommends topK products for all users."
  }],
  "prId": 8700
}]