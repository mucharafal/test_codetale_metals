[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "What happens if `r` is `JavaArray` or `JavaList` but not pickleable? Are we expecting that downstream can handle it?\n",
    "commit": "145d16c534dd84904fe27a368518220b9c504560",
    "createdAt": "2014-11-05T03:02:05Z",
    "diffHunk": "@@ -98,8 +98,13 @@ def _java2py(sc, r):\n             jrdd = sc._jvm.SerDe.javaToPython(r)\n             return RDD(jrdd, sc, AutoBatchedSerializer(PickleSerializer()))\n \n-        elif isinstance(r, (JavaArray, JavaList)) or clsName in _picklable_classes:\n+        if clsName in _picklable_classes:\n             r = sc._jvm.SerDe.dumps(r)\n+        elif isinstance(r, (JavaArray, JavaList)):\n+            try:\n+                r = sc._jvm.SerDe.dumps(r)\n+            except Py4JJavaError:\n+                pass  # not pickable",
    "line": 11
  }, {
    "author": {
      "login": "davies"
    },
    "body": "The caller will handle it. The JavaArray/JavaList is iterable in Python, caller can access the internal objects in this array/list.\n",
    "commit": "145d16c534dd84904fe27a368518220b9c504560",
    "createdAt": "2014-11-05T03:19:15Z",
    "diffHunk": "@@ -98,8 +98,13 @@ def _java2py(sc, r):\n             jrdd = sc._jvm.SerDe.javaToPython(r)\n             return RDD(jrdd, sc, AutoBatchedSerializer(PickleSerializer()))\n \n-        elif isinstance(r, (JavaArray, JavaList)) or clsName in _picklable_classes:\n+        if clsName in _picklable_classes:\n             r = sc._jvm.SerDe.dumps(r)\n+        elif isinstance(r, (JavaArray, JavaList)):\n+            try:\n+                r = sc._jvm.SerDe.dumps(r)\n+            except Py4JJavaError:\n+                pass  # not pickable",
    "line": 11
  }],
  "prId": 3091
}]