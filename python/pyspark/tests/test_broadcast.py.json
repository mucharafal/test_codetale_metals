[{
  "comments": [{
    "author": {
      "login": "jiangxb1987"
    },
    "body": "Why call `gc()` twice here ?",
    "commit": "5cdbab3659edd219bff462ce4d004724cff68e10",
    "createdAt": "2019-07-30T23:26:24Z",
    "diffHunk": "@@ -82,6 +83,21 @@ def test_broadcast_value_driver_no_encryption(self):\n     def test_broadcast_value_driver_encryption(self):\n         self._test_broadcast_on_driver((\"spark.io.encryption.enabled\", \"true\"))\n \n+    def test_broadcast_value_against_gc(self):\n+        \"\"\"Test broadcast value against gc.\"\"\"\n+        conf = SparkConf()\n+        conf.setMaster(\"local[1,1]\")\n+        conf.set(\"spark.memory.fraction\", \"0.0001\")\n+        self.sc = SparkContext(conf=conf)\n+        b = self.sc.broadcast([100])\n+        self.sc.parallelize([0], 1).map(lambda x: 0 if x == 0 else b.value[0]).collect()\n+        self.sc._jvm.java.lang.System.gc()\n+        time.sleep(5)\n+        self.sc._jvm.java.lang.System.gc()"
  }],
  "prId": 25262
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I would just add this as comments. Not as a docstring.",
    "commit": "5cdbab3659edd219bff462ce4d004724cff68e10",
    "createdAt": "2019-07-31T01:16:56Z",
    "diffHunk": "@@ -82,6 +83,21 @@ def test_broadcast_value_driver_no_encryption(self):\n     def test_broadcast_value_driver_encryption(self):\n         self._test_broadcast_on_driver((\"spark.io.encryption.enabled\", \"true\"))\n \n+    def test_broadcast_value_against_gc(self):\n+        \"\"\"Test broadcast value against gc.\"\"\""
  }],
  "prId": 25262
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "assert?",
    "commit": "5cdbab3659edd219bff462ce4d004724cff68e10",
    "createdAt": "2019-07-31T01:17:50Z",
    "diffHunk": "@@ -82,6 +83,21 @@ def test_broadcast_value_driver_no_encryption(self):\n     def test_broadcast_value_driver_encryption(self):\n         self._test_broadcast_on_driver((\"spark.io.encryption.enabled\", \"true\"))\n \n+    def test_broadcast_value_against_gc(self):\n+        \"\"\"Test broadcast value against gc.\"\"\"\n+        conf = SparkConf()\n+        conf.setMaster(\"local[1,1]\")\n+        conf.set(\"spark.memory.fraction\", \"0.0001\")\n+        self.sc = SparkContext(conf=conf)\n+        b = self.sc.broadcast([100])\n+        self.sc.parallelize([0], 1).map(lambda x: 0 if x == 0 else b.value[0]).collect()\n+        self.sc._jvm.java.lang.System.gc()\n+        time.sleep(5)\n+        self.sc._jvm.java.lang.System.gc()\n+        time.sleep(5)\n+        self.sc.parallelize([1], 1).map(lambda x: 0 if x == 0 else b.value[0]).collect()"
  }],
  "prId": 25262
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I would put this in `finally`.",
    "commit": "5cdbab3659edd219bff462ce4d004724cff68e10",
    "createdAt": "2019-07-31T01:19:09Z",
    "diffHunk": "@@ -82,6 +83,21 @@ def test_broadcast_value_driver_no_encryption(self):\n     def test_broadcast_value_driver_encryption(self):\n         self._test_broadcast_on_driver((\"spark.io.encryption.enabled\", \"true\"))\n \n+    def test_broadcast_value_against_gc(self):\n+        \"\"\"Test broadcast value against gc.\"\"\"\n+        conf = SparkConf()\n+        conf.setMaster(\"local[1,1]\")\n+        conf.set(\"spark.memory.fraction\", \"0.0001\")\n+        self.sc = SparkContext(conf=conf)\n+        b = self.sc.broadcast([100])\n+        self.sc.parallelize([0], 1).map(lambda x: 0 if x == 0 else b.value[0]).collect()\n+        self.sc._jvm.java.lang.System.gc()\n+        time.sleep(5)\n+        self.sc._jvm.java.lang.System.gc()\n+        time.sleep(5)\n+        self.sc.parallelize([1], 1).map(lambda x: 0 if x == 0 else b.value[0]).collect()\n+        b.destroy()"
  }],
  "prId": 25262
}]