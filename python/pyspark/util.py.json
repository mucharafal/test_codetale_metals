[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Shall we match the message with Scala side?\r\n\r\n```\r\n        throw new IllegalArgumentException(s\"Spark tried to parse '$sparkVersion' as a Spark\" +\r\n          s\" version string, but it could not find the major and minor version numbers.\")\r\n```",
    "commit": "d2bcfe2a892d627002a4cac678712693986778c2",
    "createdAt": "2018-05-02T05:39:05Z",
    "diffHunk": "@@ -62,24 +62,28 @@ def _get_argspec(f):\n     return argspec\n \n \n-def majorMinorVersion(version):\n+class VersionUtils(object):\n     \"\"\"\n-    Get major and minor version numbers for given Spark version string.\n-\n-    >>> version = \"2.4.0\"\n-    >>> majorMinorVersion(version)\n-    (2, 4)\n+    Provides utility method to determine Spark versions with given input string.\n+    \"\"\"\n+    @staticmethod\n+    def majorMinorVersion(version):\n+        \"\"\"\n+        Get major and minor version numbers for given Spark version string.\n \n-    >>> version = \"abc\"\n-    >>> majorMinorVersion(version) is None\n-    True\n+        >>> version = \"2.4.0\"\n+        >>> majorMinorVersion(version)\n+        (2, 4)\n+        >>> version = \"2.3.0-SNAPSHOT\"\n+        >>> majorMinorVersion(version)\n+        (2, 3)\n \n-    \"\"\"\n-    m = re.search('^(\\d+)\\.(\\d+)(\\..*)?$', version)\n-    if m is None:\n-        return None\n-    else:\n-        return (int(m.group(1)), int(m.group(2)))\n+        \"\"\"\n+        m = re.search('^(\\d+)\\.(\\d+)(\\..*)?$', version)\n+        if m is None:\n+            raise ValueError(\"invalid version string: \" + version)"
  }],
  "prId": 21211
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "`version` -> `sparkVersion`.",
    "commit": "d2bcfe2a892d627002a4cac678712693986778c2",
    "createdAt": "2018-05-02T05:39:19Z",
    "diffHunk": "@@ -62,24 +62,28 @@ def _get_argspec(f):\n     return argspec\n \n \n-def majorMinorVersion(version):\n+class VersionUtils(object):\n     \"\"\"\n-    Get major and minor version numbers for given Spark version string.\n-\n-    >>> version = \"2.4.0\"\n-    >>> majorMinorVersion(version)\n-    (2, 4)\n+    Provides utility method to determine Spark versions with given input string.\n+    \"\"\"\n+    @staticmethod\n+    def majorMinorVersion(version):"
  }],
  "prId": 21211
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I'd do `if m is not None` to match the order with Scala side.",
    "commit": "d2bcfe2a892d627002a4cac678712693986778c2",
    "createdAt": "2018-05-02T05:40:20Z",
    "diffHunk": "@@ -62,24 +62,28 @@ def _get_argspec(f):\n     return argspec\n \n \n-def majorMinorVersion(version):\n+class VersionUtils(object):\n     \"\"\"\n-    Get major and minor version numbers for given Spark version string.\n-\n-    >>> version = \"2.4.0\"\n-    >>> majorMinorVersion(version)\n-    (2, 4)\n+    Provides utility method to determine Spark versions with given input string.\n+    \"\"\"\n+    @staticmethod\n+    def majorMinorVersion(version):\n+        \"\"\"\n+        Get major and minor version numbers for given Spark version string.\n \n-    >>> version = \"abc\"\n-    >>> majorMinorVersion(version) is None\n-    True\n+        >>> version = \"2.4.0\"\n+        >>> majorMinorVersion(version)\n+        (2, 4)\n+        >>> version = \"2.3.0-SNAPSHOT\"\n+        >>> majorMinorVersion(version)\n+        (2, 3)\n \n-    \"\"\"\n-    m = re.search('^(\\d+)\\.(\\d+)(\\..*)?$', version)\n-    if m is None:\n-        return None\n-    else:\n-        return (int(m.group(1)), int(m.group(2)))\n+        \"\"\"\n+        m = re.search('^(\\d+)\\.(\\d+)(\\..*)?$', version)\n+        if m is None:"
  }],
  "prId": 21211
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "```\r\n   * Given a Spark version string, return the (major version number, minor version number).\r\n   * E.g., for 2.0.1-SNAPSHOT, return (2, 0).\r\n```",
    "commit": "d2bcfe2a892d627002a4cac678712693986778c2",
    "createdAt": "2018-05-02T05:41:01Z",
    "diffHunk": "@@ -62,24 +62,28 @@ def _get_argspec(f):\n     return argspec\n \n \n-def majorMinorVersion(version):\n+class VersionUtils(object):\n     \"\"\"\n-    Get major and minor version numbers for given Spark version string.\n-\n-    >>> version = \"2.4.0\"\n-    >>> majorMinorVersion(version)\n-    (2, 4)\n+    Provides utility method to determine Spark versions with given input string.\n+    \"\"\"\n+    @staticmethod\n+    def majorMinorVersion(version):\n+        \"\"\"\n+        Get major and minor version numbers for given Spark version string."
  }],
  "prId": 21211
}]