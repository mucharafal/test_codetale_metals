[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Should we make `CustomThread` as an API? I am not sure yet. Ideally we should find a way to fix it internally. This is a temp workaround for now.",
    "commit": "5a4c142a6673eaf2aa79a925d58cb74e0fbd9e51",
    "createdAt": "2019-11-19T02:29:03Z",
    "diffHunk": "@@ -1008,60 +1009,61 @@ def setJobGroup(self, groupId, description, interruptOnCancel=False):\n         ensure that the tasks are actually stopped in a timely manner, but is off by default due\n         to HDFS-1208, where HDFS may respond to Thread.interrupt() by marking nodes as dead.\n \n-        .. note:: Currently, setting a group ID (set to local properties) with a thread does\n-            not properly work. Internally threads on PVM and JVM are not synced, and JVM thread\n-            can be reused for multiple threads on PVM, which fails to isolate local properties\n-            for each thread on PVM. To work around this, you can set `PYSPARK_PIN_THREAD` to\n+        .. note:: Currently, setting a group ID (set to local properties) with multiple threads\n+            does not properly work. Internally threads on PVM and JVM are not synced, and JVM\n+            thread can be reused for multiple threads on PVM, which fails to isolate local\n+            properties for each thread on PVM.\n+\n+            To work around this, you can set `PYSPARK_PIN_THREAD` to\n             `'true'` (see SPARK-22340). However, note that it cannot inherit the local properties\n             from the parent thread although it isolates each thread on PVM and JVM with its own\n-            local properties. To work around this, you should manually copy and set the local\n+            local properties.\n+\n+            To work around this, you should manually copy and set the local\n             properties from the parent thread to the child thread when you create another thread.\n-        \"\"\"\n-        warnings.warn(\n-            \"Currently, setting a group ID (set to local properties) with a thread does \"\n-            \"not properly work. \"\n-            \"\\n\"\n-            \"Internally threads on PVM and JVM are not synced, and JVM thread can be reused \"\n-            \"for multiple threads on PVM, which fails to isolate local properties for each \"\n-            \"thread on PVM. \"\n-            \"\\n\"\n-            \"To work around this, you can set PYSPARK_PIN_THREAD to true (see SPARK-22340). \"\n-            \"However, note that it cannot inherit the local properties from the parent thread \"\n-            \"although it isolates each thread on PVM and JVM with its own local properties. \"\n-            \"\\n\"\n-            \"To work around this, you should manually copy and set the local properties from \"\n-            \"the parent thread to the child thread when you create another thread.\",\n-            UserWarning)\n+            Workaround class can be written as below (unofficial way):\n+\n+            >>> class CustomThread(threading.Thread):"
  }, {
    "author": {
      "login": "WeichenXu123"
    },
    "body": "If there's an official api for this, then if user use this api to create thread, then we can prevent show the warning.",
    "commit": "5a4c142a6673eaf2aa79a925d58cb74e0fbd9e51",
    "createdAt": "2019-11-19T05:01:15Z",
    "diffHunk": "@@ -1008,60 +1009,61 @@ def setJobGroup(self, groupId, description, interruptOnCancel=False):\n         ensure that the tasks are actually stopped in a timely manner, but is off by default due\n         to HDFS-1208, where HDFS may respond to Thread.interrupt() by marking nodes as dead.\n \n-        .. note:: Currently, setting a group ID (set to local properties) with a thread does\n-            not properly work. Internally threads on PVM and JVM are not synced, and JVM thread\n-            can be reused for multiple threads on PVM, which fails to isolate local properties\n-            for each thread on PVM. To work around this, you can set `PYSPARK_PIN_THREAD` to\n+        .. note:: Currently, setting a group ID (set to local properties) with multiple threads\n+            does not properly work. Internally threads on PVM and JVM are not synced, and JVM\n+            thread can be reused for multiple threads on PVM, which fails to isolate local\n+            properties for each thread on PVM.\n+\n+            To work around this, you can set `PYSPARK_PIN_THREAD` to\n             `'true'` (see SPARK-22340). However, note that it cannot inherit the local properties\n             from the parent thread although it isolates each thread on PVM and JVM with its own\n-            local properties. To work around this, you should manually copy and set the local\n+            local properties.\n+\n+            To work around this, you should manually copy and set the local\n             properties from the parent thread to the child thread when you create another thread.\n-        \"\"\"\n-        warnings.warn(\n-            \"Currently, setting a group ID (set to local properties) with a thread does \"\n-            \"not properly work. \"\n-            \"\\n\"\n-            \"Internally threads on PVM and JVM are not synced, and JVM thread can be reused \"\n-            \"for multiple threads on PVM, which fails to isolate local properties for each \"\n-            \"thread on PVM. \"\n-            \"\\n\"\n-            \"To work around this, you can set PYSPARK_PIN_THREAD to true (see SPARK-22340). \"\n-            \"However, note that it cannot inherit the local properties from the parent thread \"\n-            \"although it isolates each thread on PVM and JVM with its own local properties. \"\n-            \"\\n\"\n-            \"To work around this, you should manually copy and set the local properties from \"\n-            \"the parent thread to the child thread when you create another thread.\",\n-            UserWarning)\n+            Workaround class can be written as below (unofficial way):\n+\n+            >>> class CustomThread(threading.Thread):"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I am not yet sure ... we should still show the warning and let users use `CustomThread` ...",
    "commit": "5a4c142a6673eaf2aa79a925d58cb74e0fbd9e51",
    "createdAt": "2019-11-19T05:07:15Z",
    "diffHunk": "@@ -1008,60 +1009,61 @@ def setJobGroup(self, groupId, description, interruptOnCancel=False):\n         ensure that the tasks are actually stopped in a timely manner, but is off by default due\n         to HDFS-1208, where HDFS may respond to Thread.interrupt() by marking nodes as dead.\n \n-        .. note:: Currently, setting a group ID (set to local properties) with a thread does\n-            not properly work. Internally threads on PVM and JVM are not synced, and JVM thread\n-            can be reused for multiple threads on PVM, which fails to isolate local properties\n-            for each thread on PVM. To work around this, you can set `PYSPARK_PIN_THREAD` to\n+        .. note:: Currently, setting a group ID (set to local properties) with multiple threads\n+            does not properly work. Internally threads on PVM and JVM are not synced, and JVM\n+            thread can be reused for multiple threads on PVM, which fails to isolate local\n+            properties for each thread on PVM.\n+\n+            To work around this, you can set `PYSPARK_PIN_THREAD` to\n             `'true'` (see SPARK-22340). However, note that it cannot inherit the local properties\n             from the parent thread although it isolates each thread on PVM and JVM with its own\n-            local properties. To work around this, you should manually copy and set the local\n+            local properties.\n+\n+            To work around this, you should manually copy and set the local\n             properties from the parent thread to the child thread when you create another thread.\n-        \"\"\"\n-        warnings.warn(\n-            \"Currently, setting a group ID (set to local properties) with a thread does \"\n-            \"not properly work. \"\n-            \"\\n\"\n-            \"Internally threads on PVM and JVM are not synced, and JVM thread can be reused \"\n-            \"for multiple threads on PVM, which fails to isolate local properties for each \"\n-            \"thread on PVM. \"\n-            \"\\n\"\n-            \"To work around this, you can set PYSPARK_PIN_THREAD to true (see SPARK-22340). \"\n-            \"However, note that it cannot inherit the local properties from the parent thread \"\n-            \"although it isolates each thread on PVM and JVM with its own local properties. \"\n-            \"\\n\"\n-            \"To work around this, you should manually copy and set the local properties from \"\n-            \"the parent thread to the child thread when you create another thread.\",\n-            UserWarning)\n+            Workaround class can be written as below (unofficial way):\n+\n+            >>> class CustomThread(threading.Thread):"
  }, {
    "author": {
      "login": "WeichenXu123"
    },
    "body": "Maybe we could add a simple api like:\r\n```\r\nsc.createThread(thread_func, thread_func_arg_list, override_threak_property_list)\r\n```\r\nand return a thread object.\r\n",
    "commit": "5a4c142a6673eaf2aa79a925d58cb74e0fbd9e51",
    "createdAt": "2019-11-19T11:07:21Z",
    "diffHunk": "@@ -1008,60 +1009,61 @@ def setJobGroup(self, groupId, description, interruptOnCancel=False):\n         ensure that the tasks are actually stopped in a timely manner, but is off by default due\n         to HDFS-1208, where HDFS may respond to Thread.interrupt() by marking nodes as dead.\n \n-        .. note:: Currently, setting a group ID (set to local properties) with a thread does\n-            not properly work. Internally threads on PVM and JVM are not synced, and JVM thread\n-            can be reused for multiple threads on PVM, which fails to isolate local properties\n-            for each thread on PVM. To work around this, you can set `PYSPARK_PIN_THREAD` to\n+        .. note:: Currently, setting a group ID (set to local properties) with multiple threads\n+            does not properly work. Internally threads on PVM and JVM are not synced, and JVM\n+            thread can be reused for multiple threads on PVM, which fails to isolate local\n+            properties for each thread on PVM.\n+\n+            To work around this, you can set `PYSPARK_PIN_THREAD` to\n             `'true'` (see SPARK-22340). However, note that it cannot inherit the local properties\n             from the parent thread although it isolates each thread on PVM and JVM with its own\n-            local properties. To work around this, you should manually copy and set the local\n+            local properties.\n+\n+            To work around this, you should manually copy and set the local\n             properties from the parent thread to the child thread when you create another thread.\n-        \"\"\"\n-        warnings.warn(\n-            \"Currently, setting a group ID (set to local properties) with a thread does \"\n-            \"not properly work. \"\n-            \"\\n\"\n-            \"Internally threads on PVM and JVM are not synced, and JVM thread can be reused \"\n-            \"for multiple threads on PVM, which fails to isolate local properties for each \"\n-            \"thread on PVM. \"\n-            \"\\n\"\n-            \"To work around this, you can set PYSPARK_PIN_THREAD to true (see SPARK-22340). \"\n-            \"However, note that it cannot inherit the local properties from the parent thread \"\n-            \"although it isolates each thread on PVM and JVM with its own local properties. \"\n-            \"\\n\"\n-            \"To work around this, you should manually copy and set the local properties from \"\n-            \"the parent thread to the child thread when you create another thread.\",\n-            UserWarning)\n+            Workaround class can be written as below (unofficial way):\n+\n+            >>> class CustomThread(threading.Thread):"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "It's rather a workaround currently and we should ideally fix this rather than exposing another API for that workaround. Also to match it, we should make another API in Scala side if we go for `createThread` way.",
    "commit": "5a4c142a6673eaf2aa79a925d58cb74e0fbd9e51",
    "createdAt": "2019-11-19T14:33:47Z",
    "diffHunk": "@@ -1008,60 +1009,61 @@ def setJobGroup(self, groupId, description, interruptOnCancel=False):\n         ensure that the tasks are actually stopped in a timely manner, but is off by default due\n         to HDFS-1208, where HDFS may respond to Thread.interrupt() by marking nodes as dead.\n \n-        .. note:: Currently, setting a group ID (set to local properties) with a thread does\n-            not properly work. Internally threads on PVM and JVM are not synced, and JVM thread\n-            can be reused for multiple threads on PVM, which fails to isolate local properties\n-            for each thread on PVM. To work around this, you can set `PYSPARK_PIN_THREAD` to\n+        .. note:: Currently, setting a group ID (set to local properties) with multiple threads\n+            does not properly work. Internally threads on PVM and JVM are not synced, and JVM\n+            thread can be reused for multiple threads on PVM, which fails to isolate local\n+            properties for each thread on PVM.\n+\n+            To work around this, you can set `PYSPARK_PIN_THREAD` to\n             `'true'` (see SPARK-22340). However, note that it cannot inherit the local properties\n             from the parent thread although it isolates each thread on PVM and JVM with its own\n-            local properties. To work around this, you should manually copy and set the local\n+            local properties.\n+\n+            To work around this, you should manually copy and set the local\n             properties from the parent thread to the child thread when you create another thread.\n-        \"\"\"\n-        warnings.warn(\n-            \"Currently, setting a group ID (set to local properties) with a thread does \"\n-            \"not properly work. \"\n-            \"\\n\"\n-            \"Internally threads on PVM and JVM are not synced, and JVM thread can be reused \"\n-            \"for multiple threads on PVM, which fails to isolate local properties for each \"\n-            \"thread on PVM. \"\n-            \"\\n\"\n-            \"To work around this, you can set PYSPARK_PIN_THREAD to true (see SPARK-22340). \"\n-            \"However, note that it cannot inherit the local properties from the parent thread \"\n-            \"although it isolates each thread on PVM and JVM with its own local properties. \"\n-            \"\\n\"\n-            \"To work around this, you should manually copy and set the local properties from \"\n-            \"the parent thread to the child thread when you create another thread.\",\n-            UserWarning)\n+            Workaround class can be written as below (unofficial way):\n+\n+            >>> class CustomThread(threading.Thread):"
  }],
  "prId": 26588
}, {
  "comments": [{
    "author": {
      "login": "WeichenXu123"
    },
    "body": "Maybe we'd better use `sc.getLocalProperty` and `sc.setLocalProperty` here ?\r\n`sc._jsc` looks like internal attribute we should not expose it to user.",
    "commit": "5a4c142a6673eaf2aa79a925d58cb74e0fbd9e51",
    "createdAt": "2019-11-20T03:53:37Z",
    "diffHunk": "@@ -1008,60 +1009,61 @@ def setJobGroup(self, groupId, description, interruptOnCancel=False):\n         ensure that the tasks are actually stopped in a timely manner, but is off by default due\n         to HDFS-1208, where HDFS may respond to Thread.interrupt() by marking nodes as dead.\n \n-        .. note:: Currently, setting a group ID (set to local properties) with a thread does\n-            not properly work. Internally threads on PVM and JVM are not synced, and JVM thread\n-            can be reused for multiple threads on PVM, which fails to isolate local properties\n-            for each thread on PVM. To work around this, you can set `PYSPARK_PIN_THREAD` to\n+        .. note:: Currently, setting a group ID (set to local properties) with multiple threads\n+            does not properly work. Internally threads on PVM and JVM are not synced, and JVM\n+            thread can be reused for multiple threads on PVM, which fails to isolate local\n+            properties for each thread on PVM.\n+\n+            To work around this, you can set `PYSPARK_PIN_THREAD` to\n             `'true'` (see SPARK-22340). However, note that it cannot inherit the local properties\n             from the parent thread although it isolates each thread on PVM and JVM with its own\n-            local properties. To work around this, you should manually copy and set the local\n+            local properties.\n+\n+            To work around this, you should manually copy and set the local\n             properties from the parent thread to the child thread when you create another thread.\n-        \"\"\"\n-        warnings.warn(\n-            \"Currently, setting a group ID (set to local properties) with a thread does \"\n-            \"not properly work. \"\n-            \"\\n\"\n-            \"Internally threads on PVM and JVM are not synced, and JVM thread can be reused \"\n-            \"for multiple threads on PVM, which fails to isolate local properties for each \"\n-            \"thread on PVM. \"\n-            \"\\n\"\n-            \"To work around this, you can set PYSPARK_PIN_THREAD to true (see SPARK-22340). \"\n-            \"However, note that it cannot inherit the local properties from the parent thread \"\n-            \"although it isolates each thread on PVM and JVM with its own local properties. \"\n-            \"\\n\"\n-            \"To work around this, you should manually copy and set the local properties from \"\n-            \"the parent thread to the child thread when you create another thread.\",\n-            UserWarning)\n+            Workaround class can be written as below (unofficial way):\n+\n+            >>> class CustomThread(threading.Thread):\n+            >>>     def __init__(self, sc, target, *args, **kwargs):\n+            >>>         properties = sc._jsc.sc().getLocalProperties()\n+            >>>         def copy_local_properties(*a, **k):\n+            >>>             sc._jsc.sc().setLocalProperties(properties)"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Yeah, but not sure how we can get the all keys...",
    "commit": "5a4c142a6673eaf2aa79a925d58cb74e0fbd9e51",
    "createdAt": "2019-11-20T04:09:03Z",
    "diffHunk": "@@ -1008,60 +1009,61 @@ def setJobGroup(self, groupId, description, interruptOnCancel=False):\n         ensure that the tasks are actually stopped in a timely manner, but is off by default due\n         to HDFS-1208, where HDFS may respond to Thread.interrupt() by marking nodes as dead.\n \n-        .. note:: Currently, setting a group ID (set to local properties) with a thread does\n-            not properly work. Internally threads on PVM and JVM are not synced, and JVM thread\n-            can be reused for multiple threads on PVM, which fails to isolate local properties\n-            for each thread on PVM. To work around this, you can set `PYSPARK_PIN_THREAD` to\n+        .. note:: Currently, setting a group ID (set to local properties) with multiple threads\n+            does not properly work. Internally threads on PVM and JVM are not synced, and JVM\n+            thread can be reused for multiple threads on PVM, which fails to isolate local\n+            properties for each thread on PVM.\n+\n+            To work around this, you can set `PYSPARK_PIN_THREAD` to\n             `'true'` (see SPARK-22340). However, note that it cannot inherit the local properties\n             from the parent thread although it isolates each thread on PVM and JVM with its own\n-            local properties. To work around this, you should manually copy and set the local\n+            local properties.\n+\n+            To work around this, you should manually copy and set the local\n             properties from the parent thread to the child thread when you create another thread.\n-        \"\"\"\n-        warnings.warn(\n-            \"Currently, setting a group ID (set to local properties) with a thread does \"\n-            \"not properly work. \"\n-            \"\\n\"\n-            \"Internally threads on PVM and JVM are not synced, and JVM thread can be reused \"\n-            \"for multiple threads on PVM, which fails to isolate local properties for each \"\n-            \"thread on PVM. \"\n-            \"\\n\"\n-            \"To work around this, you can set PYSPARK_PIN_THREAD to true (see SPARK-22340). \"\n-            \"However, note that it cannot inherit the local properties from the parent thread \"\n-            \"although it isolates each thread on PVM and JVM with its own local properties. \"\n-            \"\\n\"\n-            \"To work around this, you should manually copy and set the local properties from \"\n-            \"the parent thread to the child thread when you create another thread.\",\n-            UserWarning)\n+            Workaround class can be written as below (unofficial way):\n+\n+            >>> class CustomThread(threading.Thread):\n+            >>>     def __init__(self, sc, target, *args, **kwargs):\n+            >>>         properties = sc._jsc.sc().getLocalProperties()\n+            >>>         def copy_local_properties(*a, **k):\n+            >>>             sc._jsc.sc().setLocalProperties(properties)"
  }],
  "prId": 26588
}]