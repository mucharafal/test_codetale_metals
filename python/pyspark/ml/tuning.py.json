[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Return `self` so this could be chained.\n",
    "commit": "c9e248152a307b091d282ffe135a4f6d680a4abc",
    "createdAt": "2015-04-21T04:58:26Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+__all__ = ['ParamGridBuilder']\n+\n+\n+class ParamGridBuilder(object):\n+    \"\"\"\n+    Builder for a param grid used in grid search-based model selection.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self._param_grid = {}\n+\n+    def addGrid(self, param, values):\n+        \"\"\"\n+        Sets the given parameters in this grid to fixed values.\n+        \"\"\"\n+        self._param_grid[param] = values",
    "line": 57
  }],
  "prId": 5601
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "return self.\n",
    "commit": "c9e248152a307b091d282ffe135a4f6d680a4abc",
    "createdAt": "2015-04-21T04:58:27Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+__all__ = ['ParamGridBuilder']\n+\n+\n+class ParamGridBuilder(object):\n+    \"\"\"\n+    Builder for a param grid used in grid search-based model selection.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self._param_grid = {}\n+\n+    def addGrid(self, param, values):\n+        \"\"\"\n+        Sets the given parameters in this grid to fixed values.\n+        \"\"\"\n+        self._param_grid[param] = values\n+\n+    def baseOn(self, *args):\n+        \"\"\"\n+        Sets the given parameters in this grid to fixed values.\n+        Accepts either a parameter dictionary or a list of (parameter, value) pairs.\n+        \"\"\"\n+        if isinstance(args[0], dict):\n+            self.baseOn(*args[0].items())\n+        else:\n+            for (param, value) in args:\n+                self.addGrid(param, [value])",
    "line": 70
  }],
  "prId": 5601
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Test code should be either in docstring (doctest) or in `tests.py`. doctest is a good choice for this one.\n",
    "commit": "c9e248152a307b091d282ffe135a4f6d680a4abc",
    "createdAt": "2015-04-21T04:58:29Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+__all__ = ['ParamGridBuilder']\n+\n+\n+class ParamGridBuilder(object):\n+    \"\"\"\n+    Builder for a param grid used in grid search-based model selection.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self._param_grid = {}\n+\n+    def addGrid(self, param, values):\n+        \"\"\"\n+        Sets the given parameters in this grid to fixed values.\n+        \"\"\"\n+        self._param_grid[param] = values\n+\n+    def baseOn(self, *args):\n+        \"\"\"\n+        Sets the given parameters in this grid to fixed values.\n+        Accepts either a parameter dictionary or a list of (parameter, value) pairs.\n+        \"\"\"\n+        if isinstance(args[0], dict):\n+            self.baseOn(*args[0].items())\n+        else:\n+            for (param, value) in args:\n+                self.addGrid(param, [value])\n+\n+    def build(self):\n+        \"\"\"\n+        Builds and returns all combinations of parameters specified\n+        by the param grid.\n+        \"\"\"\n+        param_maps = [{}]\n+        for (param, values) in self._param_grid.items():\n+            new_param_maps = []\n+            for value in values:\n+                for old_map in param_maps:\n+                    copied_map = old_map.copy()\n+                    copied_map[param] = value\n+                    new_param_maps.append(copied_map)\n+            param_maps = new_param_maps\n+\n+        return param_maps\n+\n+\n+if __name__ == \"__main__\":\n+    grid_test = ParamGridBuilder()"
  }],
  "prId": 5601
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Use builder pattern.\n",
    "commit": "c9e248152a307b091d282ffe135a4f6d680a4abc",
    "createdAt": "2015-04-21T04:58:48Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+__all__ = ['ParamGridBuilder']\n+\n+\n+class ParamGridBuilder(object):\n+    \"\"\"\n+    Builder for a param grid used in grid search-based model selection.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self._param_grid = {}\n+\n+    def addGrid(self, param, values):\n+        \"\"\"\n+        Sets the given parameters in this grid to fixed values.\n+        \"\"\"\n+        self._param_grid[param] = values\n+\n+    def baseOn(self, *args):\n+        \"\"\"\n+        Sets the given parameters in this grid to fixed values.\n+        Accepts either a parameter dictionary or a list of (parameter, value) pairs.\n+        \"\"\"\n+        if isinstance(args[0], dict):\n+            self.baseOn(*args[0].items())\n+        else:\n+            for (param, value) in args:\n+                self.addGrid(param, [value])\n+\n+    def build(self):\n+        \"\"\"\n+        Builds and returns all combinations of parameters specified\n+        by the param grid.\n+        \"\"\"\n+        param_maps = [{}]\n+        for (param, values) in self._param_grid.items():\n+            new_param_maps = []\n+            for value in values:\n+                for old_map in param_maps:\n+                    copied_map = old_map.copy()\n+                    copied_map[param] = value\n+                    new_param_maps.append(copied_map)\n+            param_maps = new_param_maps\n+\n+        return param_maps\n+\n+\n+if __name__ == \"__main__\":\n+    grid_test = ParamGridBuilder()\n+    from classification import LogisticRegression\n+    lr = LogisticRegression()\n+    grid_test.addGrid(lr.regParam, [1.0, 2.0, 3.0])\n+    grid_test.addGrid(lr.maxIter, [1, 5])"
  }],
  "prId": 5601
}, {
  "comments": [{
    "author": {
      "login": "justinuang"
    },
    "body": "Consider doing this\n\n```\n[dict(zip(self._param_grid.keys(), prod)) for prod in itertools.product(*self._param_grid.values())]\n```\n\nTo avoid the overhead of lots of dictionary copies.\n",
    "commit": "c9e248152a307b091d282ffe135a4f6d680a4abc",
    "createdAt": "2015-05-01T00:26:50Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+__all__ = ['ParamGridBuilder']\n+\n+\n+class ParamGridBuilder(object):\n+    \"\"\"\n+    Builder for a param grid used in grid search-based model selection.\n+\n+    >>> from classification import LogisticRegression\n+    >>> lr = LogisticRegression()\n+    >>> output = ParamGridBuilder().baseOn({lr.labelCol: 'l'}) \\\n+            .baseOn([lr.predictionCol, 'p']) \\\n+            .addGrid(lr.regParam, [1.0, 2.0, 3.0]) \\\n+            .addGrid(lr.maxIter, [1, 5]) \\\n+            .addGrid(lr.featuresCol, ['f']) \\\n+            .build()\n+    >>> expected = [ \\\n+{lr.regParam: 1.0, lr.featuresCol: 'f', lr.maxIter: 1, lr.labelCol: 'l', lr.predictionCol: 'p'}, \\\n+{lr.regParam: 2.0, lr.featuresCol: 'f', lr.maxIter: 1, lr.labelCol: 'l', lr.predictionCol: 'p'}, \\\n+{lr.regParam: 3.0, lr.featuresCol: 'f', lr.maxIter: 1, lr.labelCol: 'l', lr.predictionCol: 'p'}, \\\n+{lr.regParam: 1.0, lr.featuresCol: 'f', lr.maxIter: 5, lr.labelCol: 'l', lr.predictionCol: 'p'}, \\\n+{lr.regParam: 2.0, lr.featuresCol: 'f', lr.maxIter: 5, lr.labelCol: 'l', lr.predictionCol: 'p'}, \\\n+{lr.regParam: 3.0, lr.featuresCol: 'f', lr.maxIter: 5, lr.labelCol: 'l', lr.predictionCol: 'p'}]\n+    >>> fail_count = 0\n+    >>> for e in expected:\n+    ...     if e not in output:\n+    ...         fail_count += 1\n+    >>> if len(expected) != len(output):\n+    ...     fail_count += 1\n+    >>> fail_count\n+    0\n+    \"\"\"\n+\n+    def __init__(self):\n+        self._param_grid = {}\n+\n+    def addGrid(self, param, values):\n+        \"\"\"\n+        Sets the given parameters in this grid to fixed values.\n+        \"\"\"\n+        self._param_grid[param] = values\n+\n+        return self\n+\n+    def baseOn(self, *args):\n+        \"\"\"\n+        Sets the given parameters in this grid to fixed values.\n+        Accepts either a parameter dictionary or a list of (parameter, value) pairs.\n+        \"\"\"\n+        if isinstance(args[0], dict):\n+            self.baseOn(*args[0].items())\n+        else:\n+            for (param, value) in args:\n+                self.addGrid(param, [value])\n+\n+        return self\n+\n+    def build(self):\n+        \"\"\"\n+        Builds and returns all combinations of parameters specified\n+        by the param grid.\n+        \"\"\"\n+        param_maps = [{}]\n+        for (param, values) in self._param_grid.items():",
    "line": 80
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "+1 on this. Should we move `self._param_grid.keys()/values()` out for readability?\n\n``` python\nkeys = self._param_grid.keys()\ngrid_values = self._param_grid.values()\nreturn [dict(zip(keys, prod)) for prod in itertools.product(*grid_values)]\n```\n",
    "commit": "c9e248152a307b091d282ffe135a4f6d680a4abc",
    "createdAt": "2015-05-03T16:05:09Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+__all__ = ['ParamGridBuilder']\n+\n+\n+class ParamGridBuilder(object):\n+    \"\"\"\n+    Builder for a param grid used in grid search-based model selection.\n+\n+    >>> from classification import LogisticRegression\n+    >>> lr = LogisticRegression()\n+    >>> output = ParamGridBuilder().baseOn({lr.labelCol: 'l'}) \\\n+            .baseOn([lr.predictionCol, 'p']) \\\n+            .addGrid(lr.regParam, [1.0, 2.0, 3.0]) \\\n+            .addGrid(lr.maxIter, [1, 5]) \\\n+            .addGrid(lr.featuresCol, ['f']) \\\n+            .build()\n+    >>> expected = [ \\\n+{lr.regParam: 1.0, lr.featuresCol: 'f', lr.maxIter: 1, lr.labelCol: 'l', lr.predictionCol: 'p'}, \\\n+{lr.regParam: 2.0, lr.featuresCol: 'f', lr.maxIter: 1, lr.labelCol: 'l', lr.predictionCol: 'p'}, \\\n+{lr.regParam: 3.0, lr.featuresCol: 'f', lr.maxIter: 1, lr.labelCol: 'l', lr.predictionCol: 'p'}, \\\n+{lr.regParam: 1.0, lr.featuresCol: 'f', lr.maxIter: 5, lr.labelCol: 'l', lr.predictionCol: 'p'}, \\\n+{lr.regParam: 2.0, lr.featuresCol: 'f', lr.maxIter: 5, lr.labelCol: 'l', lr.predictionCol: 'p'}, \\\n+{lr.regParam: 3.0, lr.featuresCol: 'f', lr.maxIter: 5, lr.labelCol: 'l', lr.predictionCol: 'p'}]\n+    >>> fail_count = 0\n+    >>> for e in expected:\n+    ...     if e not in output:\n+    ...         fail_count += 1\n+    >>> if len(expected) != len(output):\n+    ...     fail_count += 1\n+    >>> fail_count\n+    0\n+    \"\"\"\n+\n+    def __init__(self):\n+        self._param_grid = {}\n+\n+    def addGrid(self, param, values):\n+        \"\"\"\n+        Sets the given parameters in this grid to fixed values.\n+        \"\"\"\n+        self._param_grid[param] = values\n+\n+        return self\n+\n+    def baseOn(self, *args):\n+        \"\"\"\n+        Sets the given parameters in this grid to fixed values.\n+        Accepts either a parameter dictionary or a list of (parameter, value) pairs.\n+        \"\"\"\n+        if isinstance(args[0], dict):\n+            self.baseOn(*args[0].items())\n+        else:\n+            for (param, value) in args:\n+                self.addGrid(param, [value])\n+\n+        return self\n+\n+    def build(self):\n+        \"\"\"\n+        Builds and returns all combinations of parameters specified\n+        by the param grid.\n+        \"\"\"\n+        param_maps = [{}]\n+        for (param, values) in self._param_grid.items():",
    "line": 80
  }],
  "prId": 5601
}]