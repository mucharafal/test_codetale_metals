[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Mark as Experimental  (Search for other example of this)",
    "commit": "e79f96866bd333e046a758f8615a364fb99b0e24",
    "createdAt": "2017-03-25T00:51:03Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+from pyspark import since, SparkContext\n+from pyspark.ml.common import _java2py, _py2java\n+from pyspark.ml.wrapper import _jvm\n+\n+\n+class ChiSquareTest(object):",
    "line": 23
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "Also, we put the triple-quotes on their own line elsewhere in pyspark",
    "commit": "e79f96866bd333e046a758f8615a364fb99b0e24",
    "createdAt": "2017-03-25T02:41:08Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+from pyspark import since, SparkContext\n+from pyspark.ml.common import _java2py, _py2java\n+from pyspark.ml.wrapper import _jvm\n+\n+\n+class ChiSquareTest(object):",
    "line": 23
  }],
  "prId": 17421
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "I just saw you changed this from the Scala doc b/c I left \"RDD\" there.  Would you mind correcting the Scala doc too?",
    "commit": "e79f96866bd333e046a758f8615a364fb99b0e24",
    "createdAt": "2017-03-25T02:44:49Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from pyspark import since, SparkContext\n+from pyspark.ml.common import _java2py, _py2java\n+from pyspark.ml.wrapper import _jvm\n+\n+\n+class ChiSquareTest(object):\n+    \"\"\" Conduct Pearson's independence test for every feature against the label. For each feature,"
  }],
  "prId": 17421
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Copy param text from the Scala doc, unless there's a need to customize it for Python",
    "commit": "e79f96866bd333e046a758f8615a364fb99b0e24",
    "createdAt": "2017-03-25T03:08:45Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from pyspark import since, SparkContext\n+from pyspark.ml.common import _java2py, _py2java\n+from pyspark.ml.wrapper import _jvm\n+\n+\n+class ChiSquareTest(object):\n+    \"\"\" Conduct Pearson's independence test for every feature against the label. For each feature,\n+    the (feature, label) pairs are converted into a contingency matrix for which the Chi-squared\n+    statistic is computed. All label and feature values must be categorical.\n+\n+    The null hypothesis is that the occurrence of the outcomes is statistically independent.\n+\n+    :param dataset:",
    "line": 33
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "Same for the return value text",
    "commit": "e79f96866bd333e046a758f8615a364fb99b0e24",
    "createdAt": "2017-03-25T03:09:03Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from pyspark import since, SparkContext\n+from pyspark.ml.common import _java2py, _py2java\n+from pyspark.ml.wrapper import _jvm\n+\n+\n+class ChiSquareTest(object):\n+    \"\"\" Conduct Pearson's independence test for every feature against the label. For each feature,\n+    the (feature, label) pairs are converted into a contingency matrix for which the Chi-squared\n+    statistic is computed. All label and feature values must be categorical.\n+\n+    The null hypothesis is that the occurrence of the outcomes is statistically independent.\n+\n+    :param dataset:",
    "line": 33
  }],
  "prId": 17421
}, {
  "comments": [{
    "author": {
      "login": "holdenk"
    },
    "body": "I don't think this test is using the temp path?",
    "commit": "e79f96866bd333e046a758f8615a364fb99b0e24",
    "createdAt": "2017-03-27T21:41:02Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from pyspark import since, SparkContext\n+from pyspark.ml.common import _java2py, _py2java\n+from pyspark.ml.wrapper import _jvm\n+\n+\n+class ChiSquareTest(object):\n+    \"\"\"\n+    .. note:: Experimental\n+\n+    Conduct Pearson's independence test for every feature against the label. For each feature,\n+    the (feature, label) pairs are converted into a contingency matrix for which the Chi-squared\n+    statistic is computed. All label and feature values must be categorical.\n+\n+    The null hypothesis is that the occurrence of the outcomes is statistically independent.\n+\n+    :param dataset:\n+      DataFrame of categorical labels and categorical features.\n+      Real-valued features will be treated as categorical for each distinct value.\n+    :param featuresCol:\n+      Name of features column in dataset, of type `Vector` (`VectorUDT`).\n+    :param labelCol:\n+      Name of label column in dataset, of any numerical type.\n+    :return:\n+      DataFrame containing the test result for every feature against the label.\n+      This DataFrame will contain a single Row with the following fields:\n+      - `pValues: Vector`\n+      - `degreesOfFreedom: Array[Int]`\n+      - `statistics: Vector`\n+      Each of these fields has one value per feature.\n+\n+    >>> from pyspark.ml.linalg import Vectors\n+    >>> from pyspark.ml.stat import ChiSquareTest\n+    >>> dataset = [[0, Vectors.dense([0, 0, 1])],\n+    ...            [0, Vectors.dense([1, 0, 1])],\n+    ...            [1, Vectors.dense([2, 1, 1])],\n+    ...            [1, Vectors.dense([3, 1, 1])]]\n+    >>> dataset = spark.createDataFrame(dataset, [\"label\", \"features\"])\n+    >>> chiSqResult = ChiSquareTest.test(dataset, 'features', 'label')\n+    >>> chiSqResult.select(\"degreesOfFreedom\").collect()[0]\n+    Row(degreesOfFreedom=[3, 1, 0])\n+\n+    .. versionadded:: 2.2.0\n+\n+    \"\"\"\n+    @staticmethod\n+    @since(\"2.2.0\")\n+    def test(dataset, featuresCol, labelCol):\n+        \"\"\"\n+        Perform a Pearson's independence test using dataset.\n+        \"\"\"\n+        sc = SparkContext._active_spark_context\n+        javaTestObj = _jvm().org.apache.spark.ml.stat.ChiSquareTest\n+        args = [_py2java(sc, arg) for arg in (dataset, featuresCol, labelCol)]\n+        return _java2py(sc, javaTestObj.test(*args))\n+\n+\n+if __name__ == \"__main__\":\n+    import doctest\n+    import pyspark.ml.stat\n+    from pyspark.sql import SparkSession\n+\n+    globs = pyspark.ml.stat.__dict__.copy()\n+    # The small batch size here ensures that we see multiple batches,\n+    # even in these small test examples:\n+    spark = SparkSession.builder \\\n+        .master(\"local[2]\") \\\n+        .appName(\"ml.stat tests\") \\\n+        .getOrCreate()\n+    sc = spark.sparkContext\n+    globs['sc'] = sc\n+    globs['spark'] = spark\n+    import tempfile\n+\n+    temp_path = tempfile.mkdtemp()"
  }],
  "prId": 17421
}]