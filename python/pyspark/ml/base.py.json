[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Shouldn't we just use `isinstance` instead?\n",
    "commit": "905ab8b61c99bda44f3a9fd5e44d1f7824dde15b",
    "createdAt": "2016-11-14T03:30:11Z",
    "diffHunk": "@@ -59,6 +59,12 @@ def fit(self, dataset, params=None):\n             return [self.fit(dataset, paramMap) for paramMap in params]\n         elif isinstance(params, dict):\n             if params:\n+                if type(params.keys()[0]) is str:"
  }, {
    "author": {
      "login": "aditya1702"
    },
    "body": "@HyukjinKwon I tried using isinstance(type(params.keys()[0],str) but it returned False. And why cant we directly check if it is a str or not?\n",
    "commit": "905ab8b61c99bda44f3a9fd5e44d1f7824dde15b",
    "createdAt": "2016-11-14T08:52:25Z",
    "diffHunk": "@@ -59,6 +59,12 @@ def fit(self, dataset, params=None):\n             return [self.fit(dataset, paramMap) for paramMap in params]\n         elif isinstance(params, dict):\n             if params:\n+                if type(params.keys()[0]) is str:"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Ah, I meant, `isinstance(params.keys()[0], str)`. Direct type comparison does not take care of subclasses. I believe it is a common pattern to check the types. For example,\n\n``` python\n>>> class A(str):\n...     pass\n...\n>>> isinstance(A(), str)\nTrue\n>>> type(A()) is str\nFalse\n```\n\nThis might be a major problem in a way, for example, when you give an argument as `OrderedDict` which extends `dict`.\n\nAnother reason is consistency across codebase. I believe `isinstance` is more widely used in the codes.\n",
    "commit": "905ab8b61c99bda44f3a9fd5e44d1f7824dde15b",
    "createdAt": "2016-11-14T09:03:46Z",
    "diffHunk": "@@ -59,6 +59,12 @@ def fit(self, dataset, params=None):\n             return [self.fit(dataset, paramMap) for paramMap in params]\n         elif isinstance(params, dict):\n             if params:\n+                if type(params.keys()[0]) is str:"
  }, {
    "author": {
      "login": "aditya1702"
    },
    "body": "@HyukjinKwon Ah I get you. I will make the changes\n",
    "commit": "905ab8b61c99bda44f3a9fd5e44d1f7824dde15b",
    "createdAt": "2016-11-14T09:50:54Z",
    "diffHunk": "@@ -59,6 +59,12 @@ def fit(self, dataset, params=None):\n             return [self.fit(dataset, paramMap) for paramMap in params]\n         elif isinstance(params, dict):\n             if params:\n+                if type(params.keys()[0]) is str:"
  }],
  "prId": 15871
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Could we just make it just like the one as below?\n\n``` python\nparams = dict([(getattr(self, p), v) for p, v in params.items()])\n```\n\nBTW, I am not supposed to decide what should be added into Spark. We can wait for committer's review :)\n",
    "commit": "905ab8b61c99bda44f3a9fd5e44d1f7824dde15b",
    "createdAt": "2016-11-14T14:14:05Z",
    "diffHunk": "@@ -59,6 +59,12 @@ def fit(self, dataset, params=None):\n             return [self.fit(dataset, paramMap) for paramMap in params]\n         elif isinstance(params, dict):\n             if params:\n+                if isinstance(params.keys()[0],str):\n+                    param_new = dict()\n+                    for param, value in params.items():\n+                        p = getattr(self, param)\n+                        param_new.update({p: value})\n+                    params=param_new",
    "line": 9
  }, {
    "author": {
      "login": "aditya1702"
    },
    "body": "@HyukjinKwon Ok sure.\n",
    "commit": "905ab8b61c99bda44f3a9fd5e44d1f7824dde15b",
    "createdAt": "2016-11-15T04:37:43Z",
    "diffHunk": "@@ -59,6 +59,12 @@ def fit(self, dataset, params=None):\n             return [self.fit(dataset, paramMap) for paramMap in params]\n         elif isinstance(params, dict):\n             if params:\n+                if isinstance(params.keys()[0],str):\n+                    param_new = dict()\n+                    for param, value in params.items():\n+                        p = getattr(self, param)\n+                        param_new.update({p: value})\n+                    params=param_new",
    "line": 9
  }],
  "prId": 15871
}]