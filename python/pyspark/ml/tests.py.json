[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Don't sort the metrics.  The metrics are guaranteed to be returned in the same order as the estimatorParamMaps, so they should match up already.",
    "commit": "8b3ef976849cdca4628d0652427c14179de0d39c",
    "createdAt": "2017-09-21T22:33:53Z",
    "diffHunk": "@@ -836,6 +836,27 @@ def test_save_load_simple_estimator(self):\n         loadedModel = CrossValidatorModel.load(cvModelPath)\n         self.assertEqual(loadedModel.bestModel.uid, cvModel.bestModel.uid)\n \n+    def test_parallel_evaluation(self):\n+        dataset = self.spark.createDataFrame(\n+            [(Vectors.dense([0.0]), 0.0),\n+             (Vectors.dense([0.4]), 1.0),\n+             (Vectors.dense([0.5]), 0.0),\n+             (Vectors.dense([0.6]), 1.0),\n+             (Vectors.dense([1.0]), 1.0)] * 10,\n+            [\"features\", \"label\"])\n+\n+        lr = LogisticRegression()\n+        grid = ParamGridBuilder().addGrid(lr.maxIter, [0, 1]).build()\n+        evaluator = BinaryClassificationEvaluator()\n+\n+        # test save/load of CrossValidator\n+        cv = CrossValidator(estimator=lr, estimatorParamMaps=grid, evaluator=evaluator)\n+        cv.setParallelism(1)\n+        cvSerialModel = cv.fit(dataset)\n+        cv.setParallelism(2)\n+        cvParallelModel = cv.fit(dataset)\n+        self.assertEqual(sorted(cvSerialModel.avgMetrics), sorted(cvParallelModel.avgMetrics))"
  }],
  "prId": 19122
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "ditto: don't sort the metrics",
    "commit": "8b3ef976849cdca4628d0652427c14179de0d39c",
    "createdAt": "2017-09-21T22:34:25Z",
    "diffHunk": "@@ -986,6 +1007,25 @@ def test_save_load_simple_estimator(self):\n         loadedModel = TrainValidationSplitModel.load(tvsModelPath)\n         self.assertEqual(loadedModel.bestModel.uid, tvsModel.bestModel.uid)\n \n+    def test_parallel_evaluation(self):\n+        dataset = self.spark.createDataFrame(\n+            [(Vectors.dense([0.0]), 0.0),\n+             (Vectors.dense([0.4]), 1.0),\n+             (Vectors.dense([0.5]), 0.0),\n+             (Vectors.dense([0.6]), 1.0),\n+             (Vectors.dense([1.0]), 1.0)] * 10,\n+            [\"features\", \"label\"])\n+        lr = LogisticRegression()\n+        grid = ParamGridBuilder().addGrid(lr.maxIter, [0, 1]).build()\n+        evaluator = BinaryClassificationEvaluator()\n+        tvs = TrainValidationSplit(estimator=lr, estimatorParamMaps=grid, evaluator=evaluator)\n+        tvs.setParallelism(1)\n+        tvsSerialModel = tvs.fit(dataset)\n+        tvs.setParallelism(2)\n+        tvsParallelModel = tvs.fit(dataset)\n+        self.assertEqual(sorted(tvsSerialModel.validationMetrics),"
  }],
  "prId": 19122
}, {
  "comments": [{
    "author": {
      "login": "BryanCutler"
    },
    "body": "I think it would be a little better to check if the `bestModel` chosen was the same in both cases, same with the TrainValidationSplit test.",
    "commit": "8b3ef976849cdca4628d0652427c14179de0d39c",
    "createdAt": "2017-09-21T22:35:07Z",
    "diffHunk": "@@ -836,6 +836,27 @@ def test_save_load_simple_estimator(self):\n         loadedModel = CrossValidatorModel.load(cvModelPath)\n         self.assertEqual(loadedModel.bestModel.uid, cvModel.bestModel.uid)\n \n+    def test_parallel_evaluation(self):\n+        dataset = self.spark.createDataFrame(\n+            [(Vectors.dense([0.0]), 0.0),\n+             (Vectors.dense([0.4]), 1.0),\n+             (Vectors.dense([0.5]), 0.0),\n+             (Vectors.dense([0.6]), 1.0),\n+             (Vectors.dense([1.0]), 1.0)] * 10,\n+            [\"features\", \"label\"])\n+\n+        lr = LogisticRegression()\n+        grid = ParamGridBuilder().addGrid(lr.maxIter, [0, 1]).build()\n+        evaluator = BinaryClassificationEvaluator()\n+\n+        # test save/load of CrossValidator\n+        cv = CrossValidator(estimator=lr, estimatorParamMaps=grid, evaluator=evaluator)\n+        cv.setParallelism(1)\n+        cvSerialModel = cv.fit(dataset)\n+        cv.setParallelism(2)\n+        cvParallelModel = cv.fit(dataset)\n+        self.assertEqual(sorted(cvSerialModel.avgMetrics), sorted(cvParallelModel.avgMetrics))"
  }, {
    "author": {
      "login": "WeichenXu123"
    },
    "body": "hmm... I tried. But how to get model parents ?",
    "commit": "8b3ef976849cdca4628d0652427c14179de0d39c",
    "createdAt": "2017-09-22T02:48:08Z",
    "diffHunk": "@@ -836,6 +836,27 @@ def test_save_load_simple_estimator(self):\n         loadedModel = CrossValidatorModel.load(cvModelPath)\n         self.assertEqual(loadedModel.bestModel.uid, cvModel.bestModel.uid)\n \n+    def test_parallel_evaluation(self):\n+        dataset = self.spark.createDataFrame(\n+            [(Vectors.dense([0.0]), 0.0),\n+             (Vectors.dense([0.4]), 1.0),\n+             (Vectors.dense([0.5]), 0.0),\n+             (Vectors.dense([0.6]), 1.0),\n+             (Vectors.dense([1.0]), 1.0)] * 10,\n+            [\"features\", \"label\"])\n+\n+        lr = LogisticRegression()\n+        grid = ParamGridBuilder().addGrid(lr.maxIter, [0, 1]).build()\n+        evaluator = BinaryClassificationEvaluator()\n+\n+        # test save/load of CrossValidator\n+        cv = CrossValidator(estimator=lr, estimatorParamMaps=grid, evaluator=evaluator)\n+        cv.setParallelism(1)\n+        cvSerialModel = cv.fit(dataset)\n+        cv.setParallelism(2)\n+        cvParallelModel = cv.fit(dataset)\n+        self.assertEqual(sorted(cvSerialModel.avgMetrics), sorted(cvParallelModel.avgMetrics))"
  }, {
    "author": {
      "login": "BryanCutler"
    },
    "body": "oh right, I guess you'd have to check `cvSerialModel.bestModel.weights` which isn't too ideal either.  It's fine how it is.",
    "commit": "8b3ef976849cdca4628d0652427c14179de0d39c",
    "createdAt": "2017-09-22T21:25:21Z",
    "diffHunk": "@@ -836,6 +836,27 @@ def test_save_load_simple_estimator(self):\n         loadedModel = CrossValidatorModel.load(cvModelPath)\n         self.assertEqual(loadedModel.bestModel.uid, cvModel.bestModel.uid)\n \n+    def test_parallel_evaluation(self):\n+        dataset = self.spark.createDataFrame(\n+            [(Vectors.dense([0.0]), 0.0),\n+             (Vectors.dense([0.4]), 1.0),\n+             (Vectors.dense([0.5]), 0.0),\n+             (Vectors.dense([0.6]), 1.0),\n+             (Vectors.dense([1.0]), 1.0)] * 10,\n+            [\"features\", \"label\"])\n+\n+        lr = LogisticRegression()\n+        grid = ParamGridBuilder().addGrid(lr.maxIter, [0, 1]).build()\n+        evaluator = BinaryClassificationEvaluator()\n+\n+        # test save/load of CrossValidator\n+        cv = CrossValidator(estimator=lr, estimatorParamMaps=grid, evaluator=evaluator)\n+        cv.setParallelism(1)\n+        cvSerialModel = cv.fit(dataset)\n+        cv.setParallelism(2)\n+        cvParallelModel = cv.fit(dataset)\n+        self.assertEqual(sorted(cvSerialModel.avgMetrics), sorted(cvParallelModel.avgMetrics))"
  }],
  "prId": 19122
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "With only 0 or 1 iteration, I don't think we could expect to see big differences between parallelism 1 or 2, even if there were bugs in our implementation.  How about trying more, saying 5 and 6 iterations?",
    "commit": "8b3ef976849cdca4628d0652427c14179de0d39c",
    "createdAt": "2017-10-25T18:10:47Z",
    "diffHunk": "@@ -836,6 +836,27 @@ def test_save_load_simple_estimator(self):\n         loadedModel = CrossValidatorModel.load(cvModelPath)\n         self.assertEqual(loadedModel.bestModel.uid, cvModel.bestModel.uid)\n \n+    def test_parallel_evaluation(self):\n+        dataset = self.spark.createDataFrame(\n+            [(Vectors.dense([0.0]), 0.0),\n+             (Vectors.dense([0.4]), 1.0),\n+             (Vectors.dense([0.5]), 0.0),\n+             (Vectors.dense([0.6]), 1.0),\n+             (Vectors.dense([1.0]), 1.0)] * 10,\n+            [\"features\", \"label\"])\n+\n+        lr = LogisticRegression()\n+        grid = ParamGridBuilder().addGrid(lr.maxIter, [0, 1]).build()"
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "Same for TrainValidationSplit",
    "commit": "8b3ef976849cdca4628d0652427c14179de0d39c",
    "createdAt": "2017-10-25T18:11:39Z",
    "diffHunk": "@@ -836,6 +836,27 @@ def test_save_load_simple_estimator(self):\n         loadedModel = CrossValidatorModel.load(cvModelPath)\n         self.assertEqual(loadedModel.bestModel.uid, cvModel.bestModel.uid)\n \n+    def test_parallel_evaluation(self):\n+        dataset = self.spark.createDataFrame(\n+            [(Vectors.dense([0.0]), 0.0),\n+             (Vectors.dense([0.4]), 1.0),\n+             (Vectors.dense([0.5]), 0.0),\n+             (Vectors.dense([0.6]), 1.0),\n+             (Vectors.dense([1.0]), 1.0)] * 10,\n+            [\"features\", \"label\"])\n+\n+        lr = LogisticRegression()\n+        grid = ParamGridBuilder().addGrid(lr.maxIter, [0, 1]).build()"
  }],
  "prId": 19122
}]