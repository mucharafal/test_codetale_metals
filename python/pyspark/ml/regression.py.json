[{
  "comments": [{
    "author": {
      "login": "holdenk"
    },
    "body": "So I think the default here & elsewhere in this file should probably be None to match `DecisionTreeRegressor.scala`.\n",
    "commit": "b838fc6176f8a4daea489fd1b0b92e0885263d36",
    "createdAt": "2016-04-05T06:44:31Z",
    "diffHunk": "@@ -433,12 +433,12 @@ class DecisionTreeRegressor(JavaEstimator, HasFeaturesCol, HasLabelCol, HasPredi\n     def __init__(self, featuresCol=\"features\", labelCol=\"label\", predictionCol=\"prediction\",\n                  maxDepth=5, maxBins=32, minInstancesPerNode=1, minInfoGain=0.0,\n                  maxMemoryInMB=256, cacheNodeIds=False, checkpointInterval=10, impurity=\"variance\",\n-                 seed=None):\n+                 seed=None, variance=\"varianceCol\"):"
  }],
  "prId": 12116
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "This is really just testing set/get of params. I think what @jkbradley was intending is something like L414 above where `model.transform(test1).head().prediction` checks extracting the value for prediction col for one row. You should be able to do something similar here.\n",
    "commit": "b838fc6176f8a4daea489fd1b0b92e0885263d36",
    "createdAt": "2016-04-07T07:18:13Z",
    "diffHunk": "@@ -425,6 +425,10 @@ class DecisionTreeRegressor(JavaEstimator, HasFeaturesCol, HasLabelCol, HasPredi\n     True\n     >>> model.depth == model2.depth\n     True\n+    >>> isinstance(dt.setVarianceCol(\"varianceColTest\"), DecisionTreeRegressor)\n+    True\n+    >>> dt.getVarianceCol() == \"varianceColTest\"\n+    True"
  }, {
    "author": {
      "login": "wangmiao1981"
    },
    "body": "Got it! Thanks! I will revise it.\n",
    "commit": "b838fc6176f8a4daea489fd1b0b92e0885263d36",
    "createdAt": "2016-04-07T17:16:04Z",
    "diffHunk": "@@ -425,6 +425,10 @@ class DecisionTreeRegressor(JavaEstimator, HasFeaturesCol, HasLabelCol, HasPredi\n     True\n     >>> model.depth == model2.depth\n     True\n+    >>> isinstance(dt.setVarianceCol(\"varianceColTest\"), DecisionTreeRegressor)\n+    True\n+    >>> dt.getVarianceCol() == \"varianceColTest\"\n+    True"
  }],
  "prId": 12116
}, {
  "comments": [{
    "author": {
      "login": "yanboliang"
    },
    "body": "Should be `varianceCol`.\n",
    "commit": "b838fc6176f8a4daea489fd1b0b92e0885263d36",
    "createdAt": "2016-04-08T02:55:09Z",
    "diffHunk": "@@ -433,12 +440,12 @@ class DecisionTreeRegressor(JavaEstimator, HasFeaturesCol, HasLabelCol, HasPredi\n     def __init__(self, featuresCol=\"features\", labelCol=\"label\", predictionCol=\"prediction\",\n                  maxDepth=5, maxBins=32, minInstancesPerNode=1, minInfoGain=0.0,\n                  maxMemoryInMB=256, cacheNodeIds=False, checkpointInterval=10, impurity=\"variance\",\n-                 seed=None):\n+                 seed=None, variance=None):"
  }],
  "prId": 12116
}, {
  "comments": [{
    "author": {
      "login": "yanboliang"
    },
    "body": "ditto\n",
    "commit": "b838fc6176f8a4daea489fd1b0b92e0885263d36",
    "createdAt": "2016-04-08T02:55:26Z",
    "diffHunk": "@@ -433,12 +440,12 @@ class DecisionTreeRegressor(JavaEstimator, HasFeaturesCol, HasLabelCol, HasPredi\n     def __init__(self, featuresCol=\"features\", labelCol=\"label\", predictionCol=\"prediction\",\n                  maxDepth=5, maxBins=32, minInstancesPerNode=1, minInfoGain=0.0,\n                  maxMemoryInMB=256, cacheNodeIds=False, checkpointInterval=10, impurity=\"variance\",\n-                 seed=None):\n+                 seed=None, variance=None):\n         \"\"\"\n         __init__(self, featuresCol=\"features\", labelCol=\"label\", predictionCol=\"prediction\", \\\n                  maxDepth=5, maxBins=32, minInstancesPerNode=1, minInfoGain=0.0, \\\n                  maxMemoryInMB=256, cacheNodeIds=False, checkpointInterval=10, \\\n-                 impurity=\"variance\", seed=None)\n+                 impurity=\"variance\", seed=None, variance=None)\n         \"\"\""
  }],
  "prId": 12116
}, {
  "comments": [{
    "author": {
      "login": "yanboliang"
    },
    "body": "ditto\n",
    "commit": "b838fc6176f8a4daea489fd1b0b92e0885263d36",
    "createdAt": "2016-04-08T02:56:53Z",
    "diffHunk": "@@ -454,12 +461,12 @@ def __init__(self, featuresCol=\"features\", labelCol=\"label\", predictionCol=\"pred\n     def setParams(self, featuresCol=\"features\", labelCol=\"label\", predictionCol=\"prediction\",\n                   maxDepth=5, maxBins=32, minInstancesPerNode=1, minInfoGain=0.0,\n                   maxMemoryInMB=256, cacheNodeIds=False, checkpointInterval=10,\n-                  impurity=\"variance\", seed=None):\n+                  impurity=\"variance\", seed=None, variance=None):"
  }],
  "prId": 12116
}, {
  "comments": [{
    "author": {
      "login": "yanboliang"
    },
    "body": "ditto\n",
    "commit": "b838fc6176f8a4daea489fd1b0b92e0885263d36",
    "createdAt": "2016-04-08T02:57:20Z",
    "diffHunk": "@@ -454,12 +461,12 @@ def __init__(self, featuresCol=\"features\", labelCol=\"label\", predictionCol=\"pred\n     def setParams(self, featuresCol=\"features\", labelCol=\"label\", predictionCol=\"prediction\",\n                   maxDepth=5, maxBins=32, minInstancesPerNode=1, minInfoGain=0.0,\n                   maxMemoryInMB=256, cacheNodeIds=False, checkpointInterval=10,\n-                  impurity=\"variance\", seed=None):\n+                  impurity=\"variance\", seed=None, variance=None):\n         \"\"\"\n         setParams(self, featuresCol=\"features\", labelCol=\"label\", predictionCol=\"prediction\", \\\n                   maxDepth=5, maxBins=32, minInstancesPerNode=1, minInfoGain=0.0, \\\n                   maxMemoryInMB=256, cacheNodeIds=False, checkpointInterval=10, \\\n-                  impurity=\"variance\", seed=None)\n+                  impurity=\"variance\", seed=None, variance=None)"
  }],
  "prId": 12116
}, {
  "comments": [{
    "author": {
      "login": "yanboliang"
    },
    "body": "We can test the correctness of variance output by:\n\n```\n>>> model.setVarianceCol(\"variance\")\n>>> model.transform(test1).head().variance\n```\n",
    "commit": "b838fc6176f8a4daea489fd1b0b92e0885263d36",
    "createdAt": "2016-04-08T03:04:00Z",
    "diffHunk": "@@ -425,6 +429,9 @@ class DecisionTreeRegressor(JavaEstimator, HasFeaturesCol, HasLabelCol, HasPredi\n     True\n     >>> model.depth == model2.depth\n     True\n+    >>> test2 = sqlContext.createDataFrame([(Vectors.sparse(1, [1.0], [1.0]),)], [\"features\"])\n+    >>> model.transform(test2).head().varianceColTest\n+    0.0"
  }],
  "prId": 12116
}]