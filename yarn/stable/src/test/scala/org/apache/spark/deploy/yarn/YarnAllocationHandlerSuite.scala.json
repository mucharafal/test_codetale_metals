[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "drop this code? or comment?\n",
    "commit": "a598564bb8857d87d11da194c3e637ccdbc10d96",
    "createdAt": "2014-05-06T01:22:22Z",
    "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import org.scalatest.FunSuite\n+import org.scalatest.BeforeAndAfterEach\n+import org.scalatest.matchers.ShouldMatchers\n+\n+import org.apache.hadoop.yarn.client.api.AMRMClient\n+import org.apache.hadoop.yarn.client.api.AMRMClient.ContainerRequest\n+import org.apache.hadoop.conf.Configuration\n+\n+import org.apache.spark.SparkConf\n+import org.apache.hadoop.net.DNSToSwitchMapping\n+\n+import java.util.{List => JList}\n+import java.util.Arrays\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic\n+import org.apache.hadoop.yarn.api.records._\n+\n+class MyResolver extends DNSToSwitchMapping {\n+\n+  override def resolve(names: JList[String]): JList[String] = {\n+    if (names.size > 0 && names.get(0) == \"host3\") Arrays.asList(\"/rack2\")\n+    else Arrays.asList(\"/rack1\")\n+  }\n+\n+  override def reloadCachedMappings() {}\n+\n+  def reloadCachedMappings(names: JList[String]) {}\n+}\n+\n+class YarnAllocationHandlerSuite extends FunSuite with ShouldMatchers with BeforeAndAfterEach {\n+  val conf = new Configuration()\n+  conf.setClass(\n+    CommonConfigurationKeysPublic.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY,\n+    classOf[MyResolver], classOf[DNSToSwitchMapping])\n+\n+  val sparkConf = new SparkConf()\n+  sparkConf.set(\"spark.driver.host\", \"localhost\")\n+  sparkConf.set(\"spark.driver.port\", \"4040\")\n+\n+  var rmClient: AMRMClient[ContainerRequest] = _\n+\n+  var containerNum = 0\n+\n+  val CONTAINER_RESOURCE = Resource.newInstance(2048 + YarnAllocationHandler.MEMORY_OVERHEAD, 6)\n+\n+  override def beforeEach() {\n+    rmClient = AMRMClient.createAMRMClient()\n+    rmClient.init(conf)\n+    rmClient.start()\n+\n+    // rmClient.registerApplicationMaster(\"Host\", 10000, \"\")"
  }],
  "prId": 655
}]