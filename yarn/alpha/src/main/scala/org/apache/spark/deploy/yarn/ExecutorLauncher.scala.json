[{
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "need to add         finishReq.setDiagnostics(appMessage)\nto properly propogate the message\n",
    "commit": "3d5241135d94d704cdbde546bc4218e95f10f18d",
    "createdAt": "2014-07-24T15:03:13Z",
    "diffHunk": "@@ -282,15 +298,22 @@ class ExecutorLauncher(args: ApplicationMasterArguments, conf: Configuration, sp\n     yarnAllocator.allocateContainers(0)\n   }\n \n-  def finishApplicationMaster(status: FinalApplicationStatus) {\n-\n-    logInfo(\"finish ApplicationMaster with \" + status)\n-    val finishReq = Records.newRecord(classOf[FinishApplicationMasterRequest])\n-      .asInstanceOf[FinishApplicationMasterRequest]\n-    finishReq.setAppAttemptId(appAttemptId)\n-    finishReq.setFinishApplicationStatus(status)\n-    finishReq.setTrackingUrl(sparkConf.get(\"spark.yarn.historyServer.address\", \"\"))\n-    resourceManager.finishApplicationMaster(finishReq)\n+  def finishApplicationMaster(status: FinalApplicationStatus, appMessage: String = \"\") {\n+    synchronized {\n+      if (isFinished) {\n+        return\n+      }\n+      logInfo(\"Unregistering ApplicationMaster with \" + status)\n+      if (registered) {\n+        val finishReq = Records.newRecord(classOf[FinishApplicationMasterRequest])\n+          .asInstanceOf[FinishApplicationMasterRequest]\n+        finishReq.setAppAttemptId(appAttemptId)\n+        finishReq.setFinishApplicationStatus(status)",
    "line": 120
  }, {
    "author": {
      "login": "witgo"
    },
    "body": "Done.\n",
    "commit": "3d5241135d94d704cdbde546bc4218e95f10f18d",
    "createdAt": "2014-07-24T15:23:40Z",
    "diffHunk": "@@ -282,15 +298,22 @@ class ExecutorLauncher(args: ApplicationMasterArguments, conf: Configuration, sp\n     yarnAllocator.allocateContainers(0)\n   }\n \n-  def finishApplicationMaster(status: FinalApplicationStatus) {\n-\n-    logInfo(\"finish ApplicationMaster with \" + status)\n-    val finishReq = Records.newRecord(classOf[FinishApplicationMasterRequest])\n-      .asInstanceOf[FinishApplicationMasterRequest]\n-    finishReq.setAppAttemptId(appAttemptId)\n-    finishReq.setFinishApplicationStatus(status)\n-    finishReq.setTrackingUrl(sparkConf.get(\"spark.yarn.historyServer.address\", \"\"))\n-    resourceManager.finishApplicationMaster(finishReq)\n+  def finishApplicationMaster(status: FinalApplicationStatus, appMessage: String = \"\") {\n+    synchronized {\n+      if (isFinished) {\n+        return\n+      }\n+      logInfo(\"Unregistering ApplicationMaster with \" + status)\n+      if (registered) {\n+        val finishReq = Records.newRecord(classOf[FinishApplicationMasterRequest])\n+          .asInstanceOf[FinishApplicationMasterRequest]\n+        finishReq.setAppAttemptId(appAttemptId)\n+        finishReq.setFinishApplicationStatus(status)",
    "line": 120
  }],
  "prId": 1180
}]