[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "what was the verdict on not using `Utils.splitCommandString` again? Why can't we do that here? I think we should because we should keep the format of what `spark.*.extraJavaOptions` accepts consistent\n",
    "commit": "daec3d01c937d80961b0f9eec4e0ad96539bd421",
    "createdAt": "2014-12-11T20:34:51Z",
    "diffHunk": "@@ -358,6 +358,21 @@ private[spark] trait ClientBase extends Logging {\n       if (libraryPaths.nonEmpty) {\n         prefixEnv = Some(Utils.libraryPathEnvPrefix(libraryPaths))\n       }\n+    } else {\n+      // Validate and include yarn am specific java options in yarn-client mode.\n+      val amOptsKey = \"spark.yarn.am.extraJavaOptions\"\n+      val amOpts = sparkConf.getOption(amOptsKey)\n+      amOpts.foreach { opts =>\n+        if (opts.contains(\"-Dspark\")) {\n+          val msg = s\"$amOptsKey is not allowed to set Spark options (was '$opts'). \"\n+          throw new SparkException(msg)\n+        }\n+        if (opts.contains(\"-Xmx\") || opts.contains(\"-Xms\")) {\n+          val msg = s\"$amOptsKey is not allowed to alter memory settings (was '$opts').\"\n+          throw new SparkException(msg)\n+        }\n+        javaOpts += opts"
  }, {
    "author": {
      "login": "tgravescs"
    },
    "body": "@andrewor14  \nperhaps we should file a jira to fix up the other places extraJavaOptions are used but don't do it this way.\n",
    "commit": "daec3d01c937d80961b0f9eec4e0ad96539bd421",
    "createdAt": "2014-12-12T15:32:18Z",
    "diffHunk": "@@ -358,6 +358,21 @@ private[spark] trait ClientBase extends Logging {\n       if (libraryPaths.nonEmpty) {\n         prefixEnv = Some(Utils.libraryPathEnvPrefix(libraryPaths))\n       }\n+    } else {\n+      // Validate and include yarn am specific java options in yarn-client mode.\n+      val amOptsKey = \"spark.yarn.am.extraJavaOptions\"\n+      val amOpts = sparkConf.getOption(amOptsKey)\n+      amOpts.foreach { opts =>\n+        if (opts.contains(\"-Dspark\")) {\n+          val msg = s\"$amOptsKey is not allowed to set Spark options (was '$opts'). \"\n+          throw new SparkException(msg)\n+        }\n+        if (opts.contains(\"-Xmx\") || opts.contains(\"-Xms\")) {\n+          val msg = s\"$amOptsKey is not allowed to alter memory settings (was '$opts').\"\n+          throw new SparkException(msg)\n+        }\n+        javaOpts += opts"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "actually I think everywhere else `extraJavaOptions` is already treated properly with `splitCommandString`. What I'm saying is that here we introduce a similar option, and we should handle the same way.\n",
    "commit": "daec3d01c937d80961b0f9eec4e0ad96539bd421",
    "createdAt": "2014-12-12T18:31:24Z",
    "diffHunk": "@@ -358,6 +358,21 @@ private[spark] trait ClientBase extends Logging {\n       if (libraryPaths.nonEmpty) {\n         prefixEnv = Some(Utils.libraryPathEnvPrefix(libraryPaths))\n       }\n+    } else {\n+      // Validate and include yarn am specific java options in yarn-client mode.\n+      val amOptsKey = \"spark.yarn.am.extraJavaOptions\"\n+      val amOpts = sparkConf.getOption(amOptsKey)\n+      amOpts.foreach { opts =>\n+        if (opts.contains(\"-Dspark\")) {\n+          val msg = s\"$amOptsKey is not allowed to set Spark options (was '$opts'). \"\n+          throw new SparkException(msg)\n+        }\n+        if (opts.contains(\"-Xmx\") || opts.contains(\"-Xms\")) {\n+          val msg = s\"$amOptsKey is not allowed to alter memory settings (was '$opts').\"\n+          throw new SparkException(msg)\n+        }\n+        javaOpts += opts"
  }],
  "prId": 3409
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "by the way we should log a warning or something if the we're in this case and we detect `spark.yarn.am.extraJavaOptions`, since that won't actually take effect.\n",
    "commit": "daec3d01c937d80961b0f9eec4e0ad96539bd421",
    "createdAt": "2014-12-12T18:37:48Z",
    "diffHunk": "@@ -352,12 +352,28 @@ private[spark] trait ClientBase extends Logging {\n     if (isLaunchingDriver) {\n       sparkConf.getOption(\"spark.driver.extraJavaOptions\")\n         .orElse(sys.env.get(\"SPARK_JAVA_OPTS\"))\n+        .map(Utils.splitCommandString).getOrElse(Seq.empty)\n         .foreach(opts => javaOpts += opts)\n       val libraryPaths = Seq(sys.props.get(\"spark.driver.extraLibraryPath\"),\n         sys.props.get(\"spark.driver.libraryPath\")).flatten\n       if (libraryPaths.nonEmpty) {\n         prefixEnv = Some(Utils.libraryPathEnvPrefix(libraryPaths))",
    "line": 9
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "I'm not strictly against the warning, but that would print a log for every app whenever someone tries to configure things by default for all use cases by setting both options in spark-defaults.conf...\n",
    "commit": "daec3d01c937d80961b0f9eec4e0ad96539bd421",
    "createdAt": "2014-12-12T18:40:11Z",
    "diffHunk": "@@ -352,12 +352,28 @@ private[spark] trait ClientBase extends Logging {\n     if (isLaunchingDriver) {\n       sparkConf.getOption(\"spark.driver.extraJavaOptions\")\n         .orElse(sys.env.get(\"SPARK_JAVA_OPTS\"))\n+        .map(Utils.splitCommandString).getOrElse(Seq.empty)\n         .foreach(opts => javaOpts += opts)\n       val libraryPaths = Seq(sys.props.get(\"spark.driver.extraLibraryPath\"),\n         sys.props.get(\"spark.driver.libraryPath\")).flatten\n       if (libraryPaths.nonEmpty) {\n         prefixEnv = Some(Utils.libraryPathEnvPrefix(libraryPaths))",
    "line": 9
  }],
  "prId": 3409
}]