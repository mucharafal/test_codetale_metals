[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Should some of the code before this condition be in `isCredentialRequired`?\n",
    "commit": "bce8cd6a5796fc95a432c169c8c40bea552382f0",
    "createdAt": "2016-07-27T18:12:52Z",
    "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.lang.reflect.UndeclaredThrowableException\n+import java.security.PrivilegedExceptionAction\n+\n+import scala.reflect.runtime.universe\n+import scala.util.control.NonFatal\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.hdfs.security.token.delegation.DelegationTokenIdentifier\n+import org.apache.hadoop.io.Text\n+import org.apache.hadoop.security.{Credentials, UserGroupInformation}\n+import org.apache.hadoop.security.token.Token\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+private[security] class HiveCredentialProvider extends ServiceCredentialProvider with Logging {\n+\n+  override def serviceName: String = \"hive\"\n+\n+  override def obtainCredentials(hadoopConf: Configuration, creds: Credentials): Option[Long] = {\n+    val mirror = universe.runtimeMirror(Utils.getContextOrSparkClassLoader)\n+\n+    // the hive configuration class is a subclass of Hadoop Configuration, so can be cast down\n+    // to a Configuration and used without reflection\n+    val hiveConfClass = mirror.classLoader.loadClass(\"org.apache.hadoop.hive.conf.HiveConf\")\n+    // using the (Configuration, Class) constructor allows the current configuration to be included\n+    // in the hive config.\n+    val ctor = hiveConfClass.getDeclaredConstructor(classOf[Configuration],\n+      classOf[Object].getClass)\n+    val hiveConf = ctor.newInstance(hadoopConf, hiveConfClass).asInstanceOf[Configuration]\n+    val metastoreUri = hiveConf.getTrimmed(\"hive.metastore.uris\", \"\")\n+\n+    // Check for local metastore\n+    if (metastoreUri.nonEmpty) {"
  }],
  "prId": 14065
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "`UserGroupInformation.isSecurityEnabled && hiveConf...`\n",
    "commit": "bce8cd6a5796fc95a432c169c8c40bea552382f0",
    "createdAt": "2016-08-03T21:27:11Z",
    "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import java.lang.reflect.UndeclaredThrowableException\n+import java.security.PrivilegedExceptionAction\n+\n+import scala.reflect.runtime.universe\n+import scala.util.control.NonFatal\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.hdfs.security.token.delegation.DelegationTokenIdentifier\n+import org.apache.hadoop.io.Text\n+import org.apache.hadoop.security.{Credentials, UserGroupInformation}\n+import org.apache.hadoop.security.token.Token\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+private[security] class HiveCredentialProvider extends ServiceCredentialProvider with Logging {\n+\n+  override def serviceName: String = \"hive\"\n+\n+  private def hiveConf(hadoopConf: Configuration): Configuration = {\n+    try {\n+      val mirror = universe.runtimeMirror(Utils.getContextOrSparkClassLoader)\n+      // the hive configuration class is a subclass of Hadoop Configuration, so can be cast down\n+      // to a Configuration and used without reflection\n+      val hiveConfClass = mirror.classLoader.loadClass(\"org.apache.hadoop.hive.conf.HiveConf\")\n+      // using the (Configuration, Class) constructor allows the current configuration to be\n+      // included in the hive config.\n+      val ctor = hiveConfClass.getDeclaredConstructor(classOf[Configuration],\n+        classOf[Object].getClass)\n+      ctor.newInstance(hadoopConf, hiveConfClass).asInstanceOf[Configuration]\n+    } catch {\n+      case NonFatal(e) =>\n+        logDebug(\"Fail to create Hive Configuration\", e)\n+        hadoopConf\n+    }\n+  }\n+\n+  override def credentialsRequired(hadoopConf: Configuration): Boolean = {\n+    if (!UserGroupInformation.isSecurityEnabled) {"
  }],
  "prId": 14065
}]