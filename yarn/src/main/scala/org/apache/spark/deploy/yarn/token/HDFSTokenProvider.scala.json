[{
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "update comment to be more specific then \"above\" since this has moved\n",
    "commit": "bce8cd6a5796fc95a432c169c8c40bea552382f0",
    "createdAt": "2016-07-07T14:35:11Z",
    "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.token\n+\n+import java.io.{ByteArrayInputStream, DataInputStream}\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.Path\n+import org.apache.hadoop.hdfs.security.token.delegation.DelegationTokenIdentifier\n+import org.apache.hadoop.mapred.Master\n+import org.apache.hadoop.security.Credentials\n+import org.apache.hadoop.security.token.Token\n+\n+import org.apache.spark.{SparkConf, SparkException}\n+import org.apache.spark.deploy.yarn.config._\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config._\n+\n+private[yarn] class HDFSTokenProvider\n+  extends ServiceTokenProvider with ServiceTokenRenewable with Logging {\n+\n+  private var nnsToAccess: Set[Path] = Set.empty\n+  private var tokenRenewer: Option[String] = None\n+\n+  override val  serviceName: String = \"hdfs\"\n+\n+  override def obtainTokensFromService(\n+      sparkConf: SparkConf,\n+      serviceConf: Configuration,\n+      creds: Credentials)\n+    : Array[Token[_]] = {\n+    val tokens = ArrayBuffer[Token[_]]()\n+    val renewer = tokenRenewer.getOrElse(getTokenRenewer(serviceConf))\n+    nnsToAccess.foreach { dst =>\n+      val dstFs = dst.getFileSystem(serviceConf)\n+      logInfo(\"getting token for namenode: \" + dst)\n+      tokens  ++= dstFs.addDelegationTokens(renewer, creds)\n+    }\n+\n+    tokens.toArray\n+  }\n+\n+  override def getTokenRenewalInterval(sparkConf: SparkConf, serviceConf: Configuration): Long = {\n+    // We cannot use the tokens generated above since those have renewer yarn. Trying to renew"
  }],
  "prId": 14065
}]