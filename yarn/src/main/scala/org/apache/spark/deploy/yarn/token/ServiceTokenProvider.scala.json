[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Note the name here is misleading. It won't be the service's conf, but really a `YarnConfiguration`. Note how both Hive and HBase providers have to load their own configuration to be able to see service-specific settings.\n",
    "commit": "bce8cd6a5796fc95a432c169c8c40bea552382f0",
    "createdAt": "2016-07-07T21:28:34Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.token\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.security.{Credentials, UserGroupInformation}\n+import org.apache.hadoop.security.token.Token\n+\n+import org.apache.spark.SparkConf\n+\n+/**\n+ * An interface to provide tokens for service, any service wants to communicate with Spark\n+ * through token way needs to implement this interface and register into\n+ * [[ConfigurableTokenManager]] through configurations.\n+ */\n+trait ServiceTokenProvider {\n+\n+  /**\n+   * Name of the ServiceTokenProvider, should be unique. Using this to distinguish different\n+   * service.\n+   */\n+  def serviceName: String\n+\n+  /**\n+   * Used to indicate whether a token is required.\n+   */\n+  def isTokenRequired(conf: Configuration): Boolean = {\n+    UserGroupInformation.isSecurityEnabled\n+  }\n+\n+  /**\n+   *  Obtain tokens from this service, tokens will be added into Credentials and return as array.\n+   */\n+  def obtainTokensFromService(\n+      sparkConf: SparkConf,\n+      serviceConf: Configuration,"
  }],
  "prId": 14065
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "You only really need this method in the interface, right? The token provider should know what info it needs to calculate this value. It might not event need `getTokenRenewalInterval` for that (HDFS does, but then that logic should live inside the HDFS provider).\n\nAt that point, you could just merge both interfaces and have this method return an `Option` (None = no renewal necessary), or some magic value (e.g. `-1`) to indicate no renewal.\n",
    "commit": "bce8cd6a5796fc95a432c169c8c40bea552382f0",
    "createdAt": "2016-07-07T21:32:38Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.token\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.security.{Credentials, UserGroupInformation}\n+import org.apache.hadoop.security.token.Token\n+\n+import org.apache.spark.SparkConf\n+\n+/**\n+ * An interface to provide tokens for service, any service wants to communicate with Spark\n+ * through token way needs to implement this interface and register into\n+ * [[ConfigurableTokenManager]] through configurations.\n+ */\n+trait ServiceTokenProvider {\n+\n+  /**\n+   * Name of the ServiceTokenProvider, should be unique. Using this to distinguish different\n+   * service.\n+   */\n+  def serviceName: String\n+\n+  /**\n+   * Used to indicate whether a token is required.\n+   */\n+  def isTokenRequired(conf: Configuration): Boolean = {\n+    UserGroupInformation.isSecurityEnabled\n+  }\n+\n+  /**\n+   *  Obtain tokens from this service, tokens will be added into Credentials and return as array.\n+   */\n+  def obtainTokensFromService(\n+      sparkConf: SparkConf,\n+      serviceConf: Configuration,\n+      creds: Credentials): Array[Token[_]]\n+}\n+\n+/**\n+ * An interface for service in which token can be renewable, any [[ServiceTokenProvider]] in which\n+ * token can be renewable should also implement this interface, Spark's internal time-based\n+ * token renewal mechanism will invoke the methods to update the tokens periodically.\n+ */\n+trait ServiceTokenRenewable {\n+\n+  /**\n+   * Get the token renewal interval from this service. This renewal interval will be used in\n+   * periodical token renewal mechanism.\n+   */\n+  def getTokenRenewalInterval(sparkConf: SparkConf, serviceConf: Configuration): Long\n+\n+  /**\n+   * Get the time length from now to next renewal.\n+   */\n+  def getTimeFromNowToRenewal("
  }],
  "prId": 14065
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "If you follow Tom's suggestion and turn this into a generic \"obtainCredentials\" method, then you could potentially merge it with `getTimeFromNowToRenewal` too.\n\ne.g. the provider is responsible for adding the tokens to the `Credentials` object, and it returns when it should be called again to renew those tokens (or obtain new credentials). One less method in the interface!\n",
    "commit": "bce8cd6a5796fc95a432c169c8c40bea552382f0",
    "createdAt": "2016-07-07T21:40:46Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.token\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.security.{Credentials, UserGroupInformation}\n+import org.apache.hadoop.security.token.Token\n+\n+import org.apache.spark.SparkConf\n+\n+/**\n+ * An interface to provide tokens for service, any service wants to communicate with Spark\n+ * through token way needs to implement this interface and register into\n+ * [[ConfigurableTokenManager]] through configurations.\n+ */\n+trait ServiceTokenProvider {\n+\n+  /**\n+   * Name of the ServiceTokenProvider, should be unique. Using this to distinguish different\n+   * service.\n+   */\n+  def serviceName: String\n+\n+  /**\n+   * Used to indicate whether a token is required.\n+   */\n+  def isTokenRequired(conf: Configuration): Boolean = {\n+    UserGroupInformation.isSecurityEnabled\n+  }\n+\n+  /**\n+   *  Obtain tokens from this service, tokens will be added into Credentials and return as array.\n+   */\n+  def obtainTokensFromService("
  }, {
    "author": {
      "login": "jerryshao"
    },
    "body": "This looks much more consolidate, I will change to this, thanks.\n",
    "commit": "bce8cd6a5796fc95a432c169c8c40bea552382f0",
    "createdAt": "2016-07-08T13:39:12Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.token\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.security.{Credentials, UserGroupInformation}\n+import org.apache.hadoop.security.token.Token\n+\n+import org.apache.spark.SparkConf\n+\n+/**\n+ * An interface to provide tokens for service, any service wants to communicate with Spark\n+ * through token way needs to implement this interface and register into\n+ * [[ConfigurableTokenManager]] through configurations.\n+ */\n+trait ServiceTokenProvider {\n+\n+  /**\n+   * Name of the ServiceTokenProvider, should be unique. Using this to distinguish different\n+   * service.\n+   */\n+  def serviceName: String\n+\n+  /**\n+   * Used to indicate whether a token is required.\n+   */\n+  def isTokenRequired(conf: Configuration): Boolean = {\n+    UserGroupInformation.isSecurityEnabled\n+  }\n+\n+  /**\n+   *  Obtain tokens from this service, tokens will be added into Credentials and return as array.\n+   */\n+  def obtainTokensFromService("
  }],
  "prId": 14065
}]