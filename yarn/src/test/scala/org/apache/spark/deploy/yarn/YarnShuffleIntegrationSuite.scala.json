[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Minor, but since the class is there, you could use `classOf[...]` to avoid typos.\n",
    "commit": "f8cc1075ce48645c2a21df7393bf66a7fd482b6d",
    "createdAt": "2015-08-03T17:06:21Z",
    "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.deploy.yarn\n+\n+import java.io.File\n+\n+import com.google.common.base.Charsets.UTF_8\n+import com.google.common.io.Files\n+import org.apache.hadoop.yarn.conf.YarnConfiguration\n+import org.scalatest.Matchers\n+\n+import org.apache.spark._\n+import org.apache.spark.network.yarn.YarnTestAccessor\n+\n+/**\n+ * Integration test for the external shuffle service with a yarn mini-cluster\n+ */\n+class YarnShuffleIntegrationSuite extends BaseYarnClusterSuite {\n+\n+  override def yarnConfig: YarnConfiguration = {\n+    val yarnConfig = new YarnConfiguration()\n+    yarnConfig.set(YarnConfiguration.NM_AUX_SERVICES, \"spark_shuffle\")\n+    yarnConfig.set(YarnConfiguration.NM_AUX_SERVICE_FMT.format(\"spark_shuffle\"),\n+      \"org.apache.spark.network.yarn.YarnShuffleService\")"
  }],
  "prId": 7839
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Aside from this, is there any way to verify that the shuffle service was actually used? e.g. can you check that the executor registration file was created (and maybe check its contents)?\n",
    "commit": "f8cc1075ce48645c2a21df7393bf66a7fd482b6d",
    "createdAt": "2015-08-03T17:08:30Z",
    "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.deploy.yarn\n+\n+import java.io.File\n+\n+import com.google.common.base.Charsets.UTF_8\n+import com.google.common.io.Files\n+import org.apache.hadoop.yarn.conf.YarnConfiguration\n+import org.scalatest.Matchers\n+\n+import org.apache.spark._\n+import org.apache.spark.network.yarn.YarnTestAccessor\n+\n+/**\n+ * Integration test for the external shuffle service with a yarn mini-cluster\n+ */\n+class YarnShuffleIntegrationSuite extends BaseYarnClusterSuite {\n+\n+  override def yarnConfig: YarnConfiguration = {\n+    val yarnConfig = new YarnConfiguration()\n+    yarnConfig.set(YarnConfiguration.NM_AUX_SERVICES, \"spark_shuffle\")\n+    yarnConfig.set(YarnConfiguration.NM_AUX_SERVICE_FMT.format(\"spark_shuffle\"),\n+      \"org.apache.spark.network.yarn.YarnShuffleService\")\n+    yarnConfig.set(\"spark.shuffle.service.port\", \"0\")\n+    yarnConfig\n+  }\n+\n+  test(\"external shuffle service\") {\n+    val shuffleServicePort = YarnTestAccessor.getShuffleServicePort\n+    logInfo(\"Shuffle service port = \" + shuffleServicePort)\n+    val result = File.createTempFile(\"result\", null, tempDir)\n+    runSpark(\n+      false,\n+      mainClassName(YarnExternalShuffleDriver.getClass),\n+      appArgs = Seq(result.getAbsolutePath()),\n+      extraConf = Map(\n+        \"spark.shuffle.service.enabled\" -> \"true\",\n+        \"spark.shuffle.service.port\" -> shuffleServicePort.toString\n+      )\n+    )\n+    checkResult(result)",
    "line": 62
  }],
  "prId": 7839
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Hmmm, wait. Shouldn't the file be empty at this point, since there is no application running?\n",
    "commit": "f8cc1075ce48645c2a21df7393bf66a7fd482b6d",
    "createdAt": "2015-08-04T23:11:59Z",
    "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.deploy.yarn\n+\n+import java.io.File\n+\n+import com.google.common.base.Charsets.UTF_8\n+import com.google.common.io.Files\n+import org.apache.hadoop.yarn.conf.YarnConfiguration\n+import org.scalatest.Matchers\n+\n+import org.apache.spark._\n+import org.apache.spark.network.yarn.{YarnShuffleService, YarnTestAccessor}\n+\n+/**\n+ * Integration test for the external shuffle service with a yarn mini-cluster\n+ */\n+class YarnShuffleIntegrationSuite extends BaseYarnClusterSuite {\n+\n+  override def yarnConfig: YarnConfiguration = {\n+    val yarnConfig = new YarnConfiguration()\n+    yarnConfig.set(YarnConfiguration.NM_AUX_SERVICES, \"spark_shuffle\")\n+    yarnConfig.set(YarnConfiguration.NM_AUX_SERVICE_FMT.format(\"spark_shuffle\"),\n+      classOf[YarnShuffleService].getCanonicalName)\n+    yarnConfig.set(\"spark.shuffle.service.port\", \"0\")\n+    yarnConfig\n+  }\n+\n+  test(\"external shuffle service\") {\n+    val shuffleServicePort = YarnTestAccessor.getShuffleServicePort\n+    val shuffleService = YarnTestAccessor.getShuffleServiceInstance\n+\n+    assert(!YarnTestAccessor.getRegisteredExecutorFile(shuffleService).exists())\n+\n+    logInfo(\"Shuffle service port = \" + shuffleServicePort)\n+    val result = File.createTempFile(\"result\", null, tempDir)\n+    runSpark(\n+      false,\n+      mainClassName(YarnExternalShuffleDriver.getClass),\n+      appArgs = Seq(result.getAbsolutePath()),\n+      extraConf = Map(\n+        \"spark.shuffle.service.enabled\" -> \"true\",\n+        \"spark.shuffle.service.port\" -> shuffleServicePort.toString\n+      )\n+    )\n+    checkResult(result)\n+    assert(YarnTestAccessor.getRegisteredExecutorFile(shuffleService).exists())\n+    assert(!YarnTestAccessor.loadSavedExecutors(shuffleService).isEmpty)"
  }, {
    "author": {
      "login": "squito"
    },
    "body": "oh yeah, good point ... I was only saving the file when a new application was added, not when applications were removed.  I've fixed that and added a test here https://github.com/squito/spark/commit/b772d659b245c5deb34c6350e44eaeb2bd46ca90\n",
    "commit": "f8cc1075ce48645c2a21df7393bf66a7fd482b6d",
    "createdAt": "2015-08-05T15:14:58Z",
    "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.deploy.yarn\n+\n+import java.io.File\n+\n+import com.google.common.base.Charsets.UTF_8\n+import com.google.common.io.Files\n+import org.apache.hadoop.yarn.conf.YarnConfiguration\n+import org.scalatest.Matchers\n+\n+import org.apache.spark._\n+import org.apache.spark.network.yarn.{YarnShuffleService, YarnTestAccessor}\n+\n+/**\n+ * Integration test for the external shuffle service with a yarn mini-cluster\n+ */\n+class YarnShuffleIntegrationSuite extends BaseYarnClusterSuite {\n+\n+  override def yarnConfig: YarnConfiguration = {\n+    val yarnConfig = new YarnConfiguration()\n+    yarnConfig.set(YarnConfiguration.NM_AUX_SERVICES, \"spark_shuffle\")\n+    yarnConfig.set(YarnConfiguration.NM_AUX_SERVICE_FMT.format(\"spark_shuffle\"),\n+      classOf[YarnShuffleService].getCanonicalName)\n+    yarnConfig.set(\"spark.shuffle.service.port\", \"0\")\n+    yarnConfig\n+  }\n+\n+  test(\"external shuffle service\") {\n+    val shuffleServicePort = YarnTestAccessor.getShuffleServicePort\n+    val shuffleService = YarnTestAccessor.getShuffleServiceInstance\n+\n+    assert(!YarnTestAccessor.getRegisteredExecutorFile(shuffleService).exists())\n+\n+    logInfo(\"Shuffle service port = \" + shuffleServicePort)\n+    val result = File.createTempFile(\"result\", null, tempDir)\n+    runSpark(\n+      false,\n+      mainClassName(YarnExternalShuffleDriver.getClass),\n+      appArgs = Seq(result.getAbsolutePath()),\n+      extraConf = Map(\n+        \"spark.shuffle.service.enabled\" -> \"true\",\n+        \"spark.shuffle.service.port\" -> shuffleServicePort.toString\n+      )\n+    )\n+    checkResult(result)\n+    assert(YarnTestAccessor.getRegisteredExecutorFile(shuffleService).exists())\n+    assert(!YarnTestAccessor.loadSavedExecutors(shuffleService).isEmpty)"
  }],
  "prId": 7839
}]