[{
  "comments": [{
    "author": {
      "login": "sryza"
    },
    "body": "Can all go on one line\n",
    "commit": "d45fecb50aecff0c0bfeb627ec1ac8a4fc9e9644",
    "createdAt": "2015-06-25T23:45:53Z",
    "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import org.scalatest.{BeforeAndAfterEach, Matchers}\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class ContainerPlacementStrategySuite extends SparkFunSuite with Matchers with BeforeAndAfterEach {\n+\n+  private val yarnAllocatorSuite = new YarnAllocatorSuite\n+  import yarnAllocatorSuite._\n+\n+  override def beforeEach() {\n+    yarnAllocatorSuite.beforeEach()\n+  }\n+\n+  override def afterEach() {\n+    yarnAllocatorSuite.afterEach()\n+  }\n+\n+  test(\"allocate locality preferred containers with enough resource and no matched existed \" +\n+    \"containers\") {\n+    // 1. All the locations of current containers cannot satisfy the new requirements\n+    // 2. Current requested container number can fully satisfy the pending tasks.\n+\n+    val handler = createAllocator(2)\n+    handler.updateResourceRequests()\n+    handler.handleAllocatedContainers(Array(\n+      createContainer(\"host1\"),\n+      createContainer(\"host2\")))\n+\n+    val nodeLocalities =\n+      handler.containerPlacementStrategy.localityOfRequestedContainers(3, 15,\n+        Map(\"host3\" -> 15, \"host4\" -> 15, \"host5\" -> 10))\n+          .map(_.nodes)\n+\n+    assert(nodeLocalities === Array(\n+      Array(\"host3\", \"host4\", \"host5\"),\n+      Array(\"host3\", \"host4\", \"host5\"),\n+      Array(\"host3\", \"host4\")))\n+  }\n+\n+  test(\"allocate locality preferred containers with enough resource and partially matched \" +\n+    \"containers\") {\n+    // 1. Parts of current containers' locations can satisfy the new requirements\n+    // 2. Current requested container number can fully satisfy the pending tasks.\n+\n+    val handler = createAllocator(3)\n+    handler.updateResourceRequests()\n+    handler.handleAllocatedContainers(Array(\n+      createContainer(\"host1\"),\n+      createContainer(\"host1\"),\n+      createContainer(\"host2\")\n+    ))\n+\n+    val nodeLocalities =\n+      handler.containerPlacementStrategy.localityOfRequestedContainers(3, 15,\n+        Map(\"host1\" -> 15, \"host2\" -> 15, \"host3\" -> 10))\n+          .map(_.nodes)\n+\n+    assert(nodeLocalities === Array(\n+      null, // requested requested container with no locality preference\n+      Array(\"host2\", \"host3\"),\n+      Array(\"host2\", \"host3\")))\n+  }\n+\n+  test(\"allocate locality preferred containers with limited resource and partially matched \" +\n+    \"containers\") {\n+    // 1. Parts of current containers' locations can satisfy the new requirements\n+    // 2. Current requested container number cannot fully satisfy the pending tasks.\n+\n+    val handler = createAllocator(3)\n+    handler.updateResourceRequests()\n+    handler.handleAllocatedContainers(Array(\n+      createContainer(\"host1\"),\n+      createContainer(\"host1\"),\n+      createContainer(\"host2\")\n+    ))\n+\n+    val nodeLocalities =\n+      handler.containerPlacementStrategy.localityOfRequestedContainers(1, 15,\n+        Map(\"host1\" -> 15, \"host2\" -> 15, \"host3\" -> 10))\n+          .map(_.nodes)\n+\n+    assert(nodeLocalities === Array(\n+      /** newly requested locality preferred containers */\n+      Array(\"host2\", \"host3\")))\n+  }\n+\n+  test(\"allocate locality preferred containers with fully matched containers\") {\n+    // Current containers' locations can fully satisfy the new requirements\n+\n+    val handler = createAllocator(5)\n+    handler.updateResourceRequests()\n+    handler.handleAllocatedContainers(Array(\n+      createContainer(\"host1\"),\n+      createContainer(\"host1\"),\n+      createContainer(\"host2\"),\n+      createContainer(\"host2\"),\n+      createContainer(\"host3\")\n+    ))\n+\n+    val nodeLocalities =\n+      handler.containerPlacementStrategy.localityOfRequestedContainers(3, 15,\n+        Map(\"host1\" -> 15, \"host2\" -> 15, \"host3\" -> 10))\n+          .map(_.nodes)\n+\n+    assert(nodeLocalities === Array("
  }],
  "prId": 6394
}, {
  "comments": [{
    "author": {
      "login": "sryza"
    },
    "body": "can go on one line\n",
    "commit": "d45fecb50aecff0c0bfeb627ec1ac8a4fc9e9644",
    "createdAt": "2015-06-25T23:46:35Z",
    "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import org.scalatest.{BeforeAndAfterEach, Matchers}\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class ContainerPlacementStrategySuite extends SparkFunSuite with Matchers with BeforeAndAfterEach {\n+\n+  private val yarnAllocatorSuite = new YarnAllocatorSuite\n+  import yarnAllocatorSuite._\n+\n+  override def beforeEach() {\n+    yarnAllocatorSuite.beforeEach()\n+  }\n+\n+  override def afterEach() {\n+    yarnAllocatorSuite.afterEach()\n+  }\n+\n+  test(\"allocate locality preferred containers with enough resource and no matched existed \" +\n+    \"containers\") {\n+    // 1. All the locations of current containers cannot satisfy the new requirements\n+    // 2. Current requested container number can fully satisfy the pending tasks.\n+\n+    val handler = createAllocator(2)\n+    handler.updateResourceRequests()\n+    handler.handleAllocatedContainers(Array(\n+      createContainer(\"host1\"),\n+      createContainer(\"host2\")))\n+\n+    val nodeLocalities =\n+      handler.containerPlacementStrategy.localityOfRequestedContainers(3, 15,\n+        Map(\"host3\" -> 15, \"host4\" -> 15, \"host5\" -> 10))\n+          .map(_.nodes)\n+\n+    assert(nodeLocalities === Array(\n+      Array(\"host3\", \"host4\", \"host5\"),\n+      Array(\"host3\", \"host4\", \"host5\"),\n+      Array(\"host3\", \"host4\")))\n+  }\n+\n+  test(\"allocate locality preferred containers with enough resource and partially matched \" +\n+    \"containers\") {\n+    // 1. Parts of current containers' locations can satisfy the new requirements\n+    // 2. Current requested container number can fully satisfy the pending tasks.\n+\n+    val handler = createAllocator(3)\n+    handler.updateResourceRequests()\n+    handler.handleAllocatedContainers(Array(\n+      createContainer(\"host1\"),\n+      createContainer(\"host1\"),\n+      createContainer(\"host2\")\n+    ))\n+\n+    val nodeLocalities =\n+      handler.containerPlacementStrategy.localityOfRequestedContainers(3, 15,\n+        Map(\"host1\" -> 15, \"host2\" -> 15, \"host3\" -> 10))\n+          .map(_.nodes)\n+\n+    assert(nodeLocalities === Array(\n+      null, // requested requested container with no locality preference\n+      Array(\"host2\", \"host3\"),\n+      Array(\"host2\", \"host3\")))\n+  }\n+\n+  test(\"allocate locality preferred containers with limited resource and partially matched \" +\n+    \"containers\") {\n+    // 1. Parts of current containers' locations can satisfy the new requirements\n+    // 2. Current requested container number cannot fully satisfy the pending tasks.\n+\n+    val handler = createAllocator(3)\n+    handler.updateResourceRequests()\n+    handler.handleAllocatedContainers(Array(\n+      createContainer(\"host1\"),\n+      createContainer(\"host1\"),\n+      createContainer(\"host2\")\n+    ))\n+\n+    val nodeLocalities =\n+      handler.containerPlacementStrategy.localityOfRequestedContainers(1, 15,\n+        Map(\"host1\" -> 15, \"host2\" -> 15, \"host3\" -> 10))\n+          .map(_.nodes)\n+\n+    assert(nodeLocalities === Array(\n+      /** newly requested locality preferred containers */\n+      Array(\"host2\", \"host3\")))\n+  }\n+\n+  test(\"allocate locality preferred containers with fully matched containers\") {\n+    // Current containers' locations can fully satisfy the new requirements\n+\n+    val handler = createAllocator(5)\n+    handler.updateResourceRequests()\n+    handler.handleAllocatedContainers(Array(\n+      createContainer(\"host1\"),\n+      createContainer(\"host1\"),\n+      createContainer(\"host2\"),\n+      createContainer(\"host2\"),\n+      createContainer(\"host3\")\n+    ))\n+\n+    val nodeLocalities =\n+      handler.containerPlacementStrategy.localityOfRequestedContainers(3, 15,\n+        Map(\"host1\" -> 15, \"host2\" -> 15, \"host3\" -> 10))\n+          .map(_.nodes)\n+\n+    assert(nodeLocalities === Array(\n+      /** newly requested locality preferred containers */\n+      null,\n+      null,\n+      null))\n+  }\n+\n+  test(\"allocate containers with no locality preference\") {\n+    // Request new container without locality preference\n+\n+    val handler = createAllocator(2)\n+    handler.updateResourceRequests()\n+    handler.handleAllocatedContainers(Array("
  }],
  "prId": 6394
}, {
  "comments": [{
    "author": {
      "login": "sryza"
    },
    "body": "Can fit on a single line?\n",
    "commit": "d45fecb50aecff0c0bfeb627ec1ac8a4fc9e9644",
    "createdAt": "2015-06-25T23:48:32Z",
    "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import org.scalatest.{BeforeAndAfterEach, Matchers}\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class ContainerPlacementStrategySuite extends SparkFunSuite with Matchers with BeforeAndAfterEach {\n+\n+  private val yarnAllocatorSuite = new YarnAllocatorSuite\n+  import yarnAllocatorSuite._\n+\n+  override def beforeEach() {\n+    yarnAllocatorSuite.beforeEach()\n+  }\n+\n+  override def afterEach() {\n+    yarnAllocatorSuite.afterEach()\n+  }\n+\n+  test(\"allocate locality preferred containers with enough resource and no matched existed \" +\n+    \"containers\") {\n+    // 1. All the locations of current containers cannot satisfy the new requirements\n+    // 2. Current requested container number can fully satisfy the pending tasks.\n+\n+    val handler = createAllocator(2)\n+    handler.updateResourceRequests()\n+    handler.handleAllocatedContainers(Array("
  }],
  "prId": 6394
}, {
  "comments": [{
    "author": {
      "login": "sryza"
    },
    "body": "Is this used for anything?\n",
    "commit": "d45fecb50aecff0c0bfeb627ec1ac8a4fc9e9644",
    "createdAt": "2015-07-09T01:03:43Z",
    "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import org.scalatest.{BeforeAndAfterEach, Matchers}\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class ContainerPlacementStrategySuite extends SparkFunSuite with Matchers with BeforeAndAfterEach {\n+\n+  private val yarnAllocatorSuite = new YarnAllocatorSuite",
    "line": 26
  }, {
    "author": {
      "login": "jerryshao"
    },
    "body": "Some codes like `createAllocator()` is actually use the method of `YarnAllocatorSuite`.\n",
    "commit": "d45fecb50aecff0c0bfeb627ec1ac8a4fc9e9644",
    "createdAt": "2015-07-09T03:02:34Z",
    "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import org.scalatest.{BeforeAndAfterEach, Matchers}\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class ContainerPlacementStrategySuite extends SparkFunSuite with Matchers with BeforeAndAfterEach {\n+\n+  private val yarnAllocatorSuite = new YarnAllocatorSuite",
    "line": 26
  }, {
    "author": {
      "login": "sryza"
    },
    "body": "Ah ok my bad\n",
    "commit": "d45fecb50aecff0c0bfeb627ec1ac8a4fc9e9644",
    "createdAt": "2015-07-21T20:37:00Z",
    "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn\n+\n+import org.scalatest.{BeforeAndAfterEach, Matchers}\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class ContainerPlacementStrategySuite extends SparkFunSuite with Matchers with BeforeAndAfterEach {\n+\n+  private val yarnAllocatorSuite = new YarnAllocatorSuite",
    "line": 26
  }],
  "prId": 6394
}]