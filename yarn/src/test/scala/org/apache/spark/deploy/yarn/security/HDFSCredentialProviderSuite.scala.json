[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "I don't see a whole lot of value in these tests; you're basically testing the config parsing code, which is already tested thoroughly in other places. There's no custom parsing going on the HDFS provider code, aside from the transformation from String to Path.\n\nIf you could instead test that the HDFS provider were actually getting tokens for all NNs that would be great, but I'm not sure you can do that easily with the current test infrastructure (e.g. you'd have to somehow be able to mock the `FileSystem` instance to see if the interesting methods were called).\n",
    "commit": "bce8cd6a5796fc95a432c169c8c40bea552382f0",
    "createdAt": "2016-07-27T18:21:46Z",
    "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.Path\n+import org.scalatest.{Matchers, PrivateMethodTester}\n+\n+import org.apache.spark.{SparkConf, SparkException, SparkFunSuite}\n+\n+class HDFSCredentialProviderSuite\n+    extends SparkFunSuite\n+    with PrivateMethodTester\n+    with Matchers {\n+  private val _nnsToAccess = PrivateMethod[Set[Path]]('nnsToAccess)\n+  private val _getTokenRenewer = PrivateMethod[String]('getTokenRenewer)\n+\n+  private def nnsToAccess(\n+      hdfsCredentialProvider: HDFSCredentialProvider, sparkConf: SparkConf): Set[Path] = {\n+    hdfsCredentialProvider invokePrivate _nnsToAccess(sparkConf)\n+  }\n+\n+  private def getTokenRenewer(\n+      hdfsCredentialProvider: HDFSCredentialProvider, conf: Configuration): String = {\n+    hdfsCredentialProvider invokePrivate _getTokenRenewer(conf)\n+  }\n+\n+  private var hdfsCredentialProvider: HDFSCredentialProvider = null\n+\n+  override def beforeAll() {\n+    super.beforeAll()\n+\n+    if (hdfsCredentialProvider == null) {\n+      hdfsCredentialProvider = new HDFSCredentialProvider()\n+    }\n+  }\n+\n+  override def afterAll() {\n+    if (hdfsCredentialProvider != null) {\n+      hdfsCredentialProvider = null\n+    }\n+\n+    super.afterAll()\n+  }\n+\n+  test(\"check access nns empty\") {\n+    val sparkConf = new SparkConf()\n+      .set(\"spark.yarn.access.namenodes\", \"\")"
  }, {
    "author": {
      "login": "jerryshao"
    },
    "body": "these bunch of tests existed in the original code, I just moved it to `HDFSCredentialProviderSuite`. I can delete them if you think it is not so necessary.\n",
    "commit": "bce8cd6a5796fc95a432c169c8c40bea552382f0",
    "createdAt": "2016-07-29T07:16:21Z",
    "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.yarn.security\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.Path\n+import org.scalatest.{Matchers, PrivateMethodTester}\n+\n+import org.apache.spark.{SparkConf, SparkException, SparkFunSuite}\n+\n+class HDFSCredentialProviderSuite\n+    extends SparkFunSuite\n+    with PrivateMethodTester\n+    with Matchers {\n+  private val _nnsToAccess = PrivateMethod[Set[Path]]('nnsToAccess)\n+  private val _getTokenRenewer = PrivateMethod[String]('getTokenRenewer)\n+\n+  private def nnsToAccess(\n+      hdfsCredentialProvider: HDFSCredentialProvider, sparkConf: SparkConf): Set[Path] = {\n+    hdfsCredentialProvider invokePrivate _nnsToAccess(sparkConf)\n+  }\n+\n+  private def getTokenRenewer(\n+      hdfsCredentialProvider: HDFSCredentialProvider, conf: Configuration): String = {\n+    hdfsCredentialProvider invokePrivate _getTokenRenewer(conf)\n+  }\n+\n+  private var hdfsCredentialProvider: HDFSCredentialProvider = null\n+\n+  override def beforeAll() {\n+    super.beforeAll()\n+\n+    if (hdfsCredentialProvider == null) {\n+      hdfsCredentialProvider = new HDFSCredentialProvider()\n+    }\n+  }\n+\n+  override def afterAll() {\n+    if (hdfsCredentialProvider != null) {\n+      hdfsCredentialProvider = null\n+    }\n+\n+    super.afterAll()\n+  }\n+\n+  test(\"check access nns empty\") {\n+    val sparkConf = new SparkConf()\n+      .set(\"spark.yarn.access.namenodes\", \"\")"
  }],
  "prId": 14065
}]