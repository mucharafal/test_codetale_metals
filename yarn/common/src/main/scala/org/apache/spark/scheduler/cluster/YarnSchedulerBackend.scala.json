[{
  "comments": [{
    "author": {
      "login": "kayousterhout"
    },
    "body": "Realized I should fix this to only print the log message once -- will fix this if we decide to use this PR\n",
    "commit": "7ef3d7179f4ea8a684a2bf07c0348f047369e676",
    "createdAt": "2014-08-04T07:08:19Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster\n+\n+import akka.actor.ActorSystem\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.scheduler.TaskSchedulerImpl\n+\n+/**\n+ * Subclass of CoarseGrainedSchedulerBackend that handles waiting until sufficient resources\n+ * are registered before beginning to schedule tasks (needed by both Yarn scheduler backends).\n+  */\n+private[spark] class YarnSchedulerBackend(\n+    scheduler: TaskSchedulerImpl,\n+    actorSystem: ActorSystem)\n+  extends CoarseGrainedSchedulerBackend(scheduler, actorSystem) {\n+\n+  // Submit tasks only after (registered executors / total expected executors)\n+  // is equal to at least this value (expected to be a double between 0 and 1, inclusive).\n+  var minRegisteredRatio = conf.getDouble(\"spark.scheduler.minRegisteredExecutorsRatio\", 0.8)\n+  if (minRegisteredRatio > 1) minRegisteredRatio = 1\n+  // Regardless of whether the required number of executors have registered, return true from\n+  // isReady() after this amount of time has elapsed.\n+  val maxRegisteredWaitingTime =\n+    conf.getInt(\"spark.scheduler.maxRegisteredExecutorsWaitingTime\", 30000)\n+  private val createTime = System.currentTimeMillis()\n+\n+  var totalExpectedExecutors: Int = _\n+\n+  override def isReady(): Boolean = {",
    "line": 46
  }],
  "prId": 1762
}]