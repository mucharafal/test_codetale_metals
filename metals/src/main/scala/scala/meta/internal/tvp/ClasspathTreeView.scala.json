[
  {
    "id" : "be0597bd-e1e2-4b55-8761-c7d946f17595",
    "prId" : 797,
    "comments" : [
      {
        "id" : "d39e5c9c-b03c-4bff-81a8-2d837bb97dca",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "> [A, B]\r\n\r\nthe comments are quite detailed, what do you think about some more detailed names, so the developer doesn't have to scroll up here?",
        "createdAt" : "2019-06-27T07:26:59Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e2f682b7-2bc2-4110-9e0c-a7973a2074e8",
        "parentId" : "d39e5c9c-b03c-4bff-81a8-2d837bb97dca",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Renamed `A` to `Value` and `B` to `Key`",
        "createdAt" : "2019-06-27T14:23:56Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,146 @@\n+package scala.meta.internal.tvp\n+\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.mtags.Symbol\n+import scala.meta.internal.semanticdb.Scala._\n+import scala.meta.internal.semanticdb.SymbolInformation.{Kind => k}\n+import scala.meta.internal.mtags.GlobalSymbolIndex\n+\n+/**\n+ * A tree view that exposes a package explorer to browse symbols such as classes, traits and methods.\n+ *\n+ * @param A The metadata used to render the toplevel nodes such as jar files or\n+ *          a Scala build target (with scala version, classpath, ...).\n+ * @param B The identifier key that is persisted into the URI of tree view nodes,\n+ *          such as a jar file URI or a build target URI.\n+ */\n+class ClasspathTreeView[A, B]("
  },
  {
    "id" : "c51a2fe3-632f-4b75-9eb4-7d2e51e7db95",
    "prId" : 797,
    "comments" : [
      {
        "id" : "d2714859-8893-42df-a3b8-adea52a9fb4e",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "some new lines would increase the readability of this method",
        "createdAt" : "2019-06-27T07:28:16Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f194207d-ba53-4cc3-ac32-cf7de8d96082",
        "parentId" : "d2714859-8893-42df-a3b8-adea52a9fb4e",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Done, also added more comments to explain what's going on. This implementation is probably the most involved part of the PR.",
        "createdAt" : "2019-06-27T14:32:20Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : 44,
    "diffHunk" : "@@ -0,0 +1,146 @@\n+package scala.meta.internal.tvp\n+\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.mtags.Symbol\n+import scala.meta.internal.semanticdb.Scala._\n+import scala.meta.internal.semanticdb.SymbolInformation.{Kind => k}\n+import scala.meta.internal.mtags.GlobalSymbolIndex\n+\n+/**\n+ * A tree view that exposes a package explorer to browse symbols such as classes, traits and methods.\n+ *\n+ * @param A The metadata used to render the toplevel nodes such as jar files or\n+ *          a Scala build target (with scala version, classpath, ...).\n+ * @param B The identifier key that is persisted into the URI of tree view nodes,\n+ *          such as a jar file URI or a build target URI.\n+ */\n+class ClasspathTreeView[A, B](\n+    definitionIndex: GlobalSymbolIndex,\n+    viewId: String,\n+    scheme: String,\n+    title: String,\n+    id: A => B,\n+    encode: B => String,\n+    decode: String => B,\n+    valueTitle: A => String,\n+    valueTooltip: A => String,\n+    toplevels: () => Iterator[A],\n+    loadSymbols: (B, String) => Iterator[TreeViewSymbolInformation]\n+) {\n+  val rootUri = scheme + \":\"\n+  def root = TreeViewNode(\n+    viewId,\n+    rootUri,\n+    title + s\" (${toplevels().size})\",\n+    collapseState = MetalsTreeItemCollapseState.collapsed\n+  )\n+\n+  def matches(uri: String): Boolean = uri.startsWith(rootUri)\n+\n+  def parent(uri: String): Option[String] =\n+    if (uri == rootUri) None\n+    else fromUri(uri).parent.map(_.toUri)\n+\n+  def children(uri: String): Array[TreeViewNode] = {"
  },
  {
    "id" : "93ffbf75-7246-4de2-b65e-76e997fdd325",
    "prId" : 797,
    "comments" : [
      {
        "id" : "7edb821b-bace-4ead-9c31-0ead455bb88b",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "or just call the variable `allDescendents` or `transitiveChildren`",
        "createdAt" : "2019-06-28T07:06:18Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "841f65d8-3b5d-402d-a3e5-42fd25c0efd6",
        "parentId" : "7edb821b-bace-4ead-9c31-0ead455bb88b",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Much better, removed the comments.",
        "createdAt" : "2019-06-28T10:23:29Z",
        "updatedAt" : "2019-06-28T13:42:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -46,10 +46,14 @@ class ClasspathTreeView[A, B](\n       TreeViewNode.sortAlphabetically(toplevels().map(toViewNode).toArray)\n     } else {\n       val node = fromUri(uri)\n-      val descendents = loadSymbols(node.value, node.symbol)\n+\n+      // Get all transitive children nodes"
  },
  {
    "id" : "6e086cd3-645c-4559-b2b8-00ffa46302e4",
    "prId" : 797,
    "comments" : [
      {
        "id" : "8faebcf3-1b51-4fa2-8bf6-c8dbe3e89207",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "`val directChildren` ?",
        "createdAt" : "2019-06-28T07:06:56Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -46,10 +46,14 @@ class ClasspathTreeView[A, B](\n       TreeViewNode.sortAlphabetically(toplevels().map(toViewNode).toArray)\n     } else {\n       val node = fromUri(uri)\n-      val descendents = loadSymbols(node.value, node.symbol)\n+\n+      // Get all transitive children nodes\n+      val descendents = loadSymbols(node.key, node.symbol)\n         .filter(i => node.isDescendent(i.symbol))\n         .flatMap(i => i :: i.parents)\n         .distinctBy(_.symbol)\n+\n+      // Get direct children nodes"
  }
]