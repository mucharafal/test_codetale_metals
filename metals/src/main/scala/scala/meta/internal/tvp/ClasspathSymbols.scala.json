[
  {
    "id" : "c8387a9d-d161-4ebc-af67-a1c3f75913da",
    "prId" : 797,
    "comments" : [
      {
        "id" : "fb8c2fcd-84b2-40b0-ba7d-dde0511d1320",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "```suggestion\r\n * Extracts SemanticDB symbols from `*.class` files in jars.\r\n```",
        "createdAt" : "2019-06-27T07:16:19Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d69e8fe7-f2dd-420f-bf97-47884a624c4d",
        "parentId" : "fb8c2fcd-84b2-40b0-ba7d-dde0511d1320",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Much clearer, thanks",
        "createdAt" : "2019-06-27T14:20:09Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,215 @@\n+package scala.meta.internal.tvp\n+\n+import scala.collection.mutable\n+import scala.meta.io.Classpath\n+import scala.meta.internal.metacp._\n+import scala.meta.internal.io._\n+import scala.meta.internal.classpath.ClasspathIndex\n+import scala.meta.io.AbsolutePath\n+import java.nio.file.Path\n+import java.nio.file.Files\n+import scala.meta.internal.semanticdb.Scala._\n+import scala.meta.internal.semanticdb.Scala.{Descriptor => d}\n+import scala.meta.internal.mtags.Symbol\n+import scala.meta.internal.semanticdb.SymbolInformation\n+import scala.meta.internal.semanticdb.SymbolInformation.{Kind => k}\n+import scala.meta.internal.semanticdb._\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.tools.asm.tree.ClassNode\n+import scala.tools.scalap.scalax.rules.scalasig.SymbolInfoSymbol\n+import scala.meta.internal.scalacp.SymlinkChildren\n+import scala.meta.internal.scalacp.Synthetics\n+import scala.util.control.NonFatal\n+import java.util.stream.Collectors\n+import scala.meta.internal.javacp.Javacp\n+import scala.meta.internal.metals.Time\n+import scala.meta.internal.metals.Timer\n+import java.nio.file.SimpleFileVisitor\n+import java.nio.file.FileVisitResult\n+import java.nio.file.attribute.BasicFileAttributes\n+\n+/**\n+ * Helper to extract SemanticDB symbols from `*.class` files in jars."
  },
  {
    "id" : "a4d6e125-6092-4b37-90e9-a9568ddc99c3",
    "prId" : 797,
    "comments" : [
      {
        "id" : "ff65fc89-14d8-4532-9883-5c13f1ffd911",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "duplicates the comment. Also - which tree view?\r\n```suggestion\r\n```",
        "createdAt" : "2019-06-27T07:18:22Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ddc9b015-0e98-4f44-90f7-4caf6f8d2e4e",
        "parentId" : "ff65fc89-14d8-4532-9883-5c13f1ffd911",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Done.",
        "createdAt" : "2019-06-27T14:20:33Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,215 @@\n+package scala.meta.internal.tvp\n+\n+import scala.collection.mutable\n+import scala.meta.io.Classpath\n+import scala.meta.internal.metacp._\n+import scala.meta.internal.io._\n+import scala.meta.internal.classpath.ClasspathIndex\n+import scala.meta.io.AbsolutePath\n+import java.nio.file.Path\n+import java.nio.file.Files\n+import scala.meta.internal.semanticdb.Scala._\n+import scala.meta.internal.semanticdb.Scala.{Descriptor => d}\n+import scala.meta.internal.mtags.Symbol\n+import scala.meta.internal.semanticdb.SymbolInformation\n+import scala.meta.internal.semanticdb.SymbolInformation.{Kind => k}\n+import scala.meta.internal.semanticdb._\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.tools.asm.tree.ClassNode\n+import scala.tools.scalap.scalax.rules.scalasig.SymbolInfoSymbol\n+import scala.meta.internal.scalacp.SymlinkChildren\n+import scala.meta.internal.scalacp.Synthetics\n+import scala.util.control.NonFatal\n+import java.util.stream.Collectors\n+import scala.meta.internal.javacp.Javacp\n+import scala.meta.internal.metals.Time\n+import scala.meta.internal.metals.Timer\n+import java.nio.file.SimpleFileVisitor\n+import java.nio.file.FileVisitResult\n+import java.nio.file.attribute.BasicFileAttributes\n+\n+/**\n+ * Helper to extract SemanticDB symbols from `*.class` files in jars.\n+ */\n+class ClasspathSymbols(isStatisticsEnabled: Boolean = false) {\n+\n+  def symbols(\n+      in: AbsolutePath,\n+      symbol: String\n+  ): Iterator[TreeViewSymbolInformation] = {\n+    val timer = new Timer(Time.system)\n+    val result = loadSymbols(in, symbol).iterator\n+    if (isStatisticsEnabled) {\n+      scribe.info(s\"$timer - $in/!$symbol\")\n+    }\n+    result\n+  }\n+\n+  // Names of methods that are autogenerated by the Scala compiler.\n+  private val isSyntheticMethodName = Set(\n+    \"productElement\", \"productElementName\", \"equals\", \"canEqual\", \"hashCode\",\n+    \"productIterator\", \"toString\", \"productPrefix\", \"unapply\", \"apply\", \"copy\",\n+    \"productArity\", \"readResolve\"\n+  )\n+\n+  // Returns true if this symbol is relevant for the tree view."
  },
  {
    "id" : "df086c60-4bd0-4b4b-a4b6-7cb26e5ba8fa",
    "prId" : 797,
    "comments" : [
      {
        "id" : "3c45abe5-3434-4997-b5f7-1e8506ec3be4",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2019-06-27T07:20:04Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e3dcf833-9069-4828-bc72-ccb98de321f6",
        "parentId" : "3c45abe5-3434-4997-b5f7-1e8506ec3be4",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This comment was outdated, we already only process symbols for each unique directory and we have customized the metacp code to avoid a few hot paths.",
        "createdAt" : "2019-06-27T14:21:21Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0e788519-8b40-4edf-ab25-49062bc4d18e",
        "parentId" : "3c45abe5-3434-4997-b5f7-1e8506ec3be4",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Removed entire comment.",
        "createdAt" : "2019-06-27T14:21:29Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,215 @@\n+package scala.meta.internal.tvp\n+\n+import scala.collection.mutable\n+import scala.meta.io.Classpath\n+import scala.meta.internal.metacp._\n+import scala.meta.internal.io._\n+import scala.meta.internal.classpath.ClasspathIndex\n+import scala.meta.io.AbsolutePath\n+import java.nio.file.Path\n+import java.nio.file.Files\n+import scala.meta.internal.semanticdb.Scala._\n+import scala.meta.internal.semanticdb.Scala.{Descriptor => d}\n+import scala.meta.internal.mtags.Symbol\n+import scala.meta.internal.semanticdb.SymbolInformation\n+import scala.meta.internal.semanticdb.SymbolInformation.{Kind => k}\n+import scala.meta.internal.semanticdb._\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.tools.asm.tree.ClassNode\n+import scala.tools.scalap.scalax.rules.scalasig.SymbolInfoSymbol\n+import scala.meta.internal.scalacp.SymlinkChildren\n+import scala.meta.internal.scalacp.Synthetics\n+import scala.util.control.NonFatal\n+import java.util.stream.Collectors\n+import scala.meta.internal.javacp.Javacp\n+import scala.meta.internal.metals.Time\n+import scala.meta.internal.metals.Timer\n+import java.nio.file.SimpleFileVisitor\n+import java.nio.file.FileVisitResult\n+import java.nio.file.attribute.BasicFileAttributes\n+\n+/**\n+ * Helper to extract SemanticDB symbols from `*.class` files in jars.\n+ */\n+class ClasspathSymbols(isStatisticsEnabled: Boolean = false) {\n+\n+  def symbols(\n+      in: AbsolutePath,\n+      symbol: String\n+  ): Iterator[TreeViewSymbolInformation] = {\n+    val timer = new Timer(Time.system)\n+    val result = loadSymbols(in, symbol).iterator\n+    if (isStatisticsEnabled) {\n+      scribe.info(s\"$timer - $in/!$symbol\")\n+    }\n+    result\n+  }\n+\n+  // Names of methods that are autogenerated by the Scala compiler.\n+  private val isSyntheticMethodName = Set(\n+    \"productElement\", \"productElementName\", \"equals\", \"canEqual\", \"hashCode\",\n+    \"productIterator\", \"toString\", \"productPrefix\", \"unapply\", \"apply\", \"copy\",\n+    \"productArity\", \"readResolve\"\n+  )\n+\n+  // Returns true if this symbol is relevant for the tree view.\n+  private def isRelevant(info: SymbolInformation): Boolean =\n+    !info.isPrivate &&\n+      !info.isPrivateThis && {\n+      info.kind match {\n+        case k.METHOD =>\n+          val isVarSetter = info.isVar && info.displayName.endsWith(\"_=\")\n+          !isVarSetter &&\n+          !isSyntheticMethodName(info.displayName) &&\n+          !info.displayName.contains(\"$default$\")\n+        case k.CLASS | k.INTERFACE | k.OBJECT | k.PACKAGE_OBJECT | k.TRAIT |\n+            k.MACRO | k.FIELD =>\n+          true\n+        case _ => false\n+      }\n+    }\n+\n+  // NOTE(olafur) this method can take a few seconds to process larger jars like\n+  // org.typelevel:cats-core. Some optimization opportunies for future work:\n+  // - speed up metacp implementation, it's quite inefficient\n+  // - only process symbols for the requested directory\n+  // - only process symbols for the requested directory"
  },
  {
    "id" : "ee901e6e-5a80-47ea-8d41-640284945797",
    "prId" : 797,
    "comments" : [
      {
        "id" : "2587015f-c655-4918-82b9-ce64460f2a34",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : ">  Recursively underlying for classfiles (...)\r\n\r\nI cannot infer the meaning :(",
        "createdAt" : "2019-06-27T07:24:21Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "52638092-b171-4f26-9e81-73f05bd3f5ca",
        "parentId" : "2587015f-c655-4918-82b9-ce64460f2a34",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Reformulated\r\n\r\n> Recursively look for classfiles in this directory to determine if this\r\n> path maps to a non-empty package symbol.",
        "createdAt" : "2019-06-27T14:22:43Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,215 @@\n+package scala.meta.internal.tvp\n+\n+import scala.collection.mutable\n+import scala.meta.io.Classpath\n+import scala.meta.internal.metacp._\n+import scala.meta.internal.io._\n+import scala.meta.internal.classpath.ClasspathIndex\n+import scala.meta.io.AbsolutePath\n+import java.nio.file.Path\n+import java.nio.file.Files\n+import scala.meta.internal.semanticdb.Scala._\n+import scala.meta.internal.semanticdb.Scala.{Descriptor => d}\n+import scala.meta.internal.mtags.Symbol\n+import scala.meta.internal.semanticdb.SymbolInformation\n+import scala.meta.internal.semanticdb.SymbolInformation.{Kind => k}\n+import scala.meta.internal.semanticdb._\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.tools.asm.tree.ClassNode\n+import scala.tools.scalap.scalax.rules.scalasig.SymbolInfoSymbol\n+import scala.meta.internal.scalacp.SymlinkChildren\n+import scala.meta.internal.scalacp.Synthetics\n+import scala.util.control.NonFatal\n+import java.util.stream.Collectors\n+import scala.meta.internal.javacp.Javacp\n+import scala.meta.internal.metals.Time\n+import scala.meta.internal.metals.Timer\n+import java.nio.file.SimpleFileVisitor\n+import java.nio.file.FileVisitResult\n+import java.nio.file.attribute.BasicFileAttributes\n+\n+/**\n+ * Helper to extract SemanticDB symbols from `*.class` files in jars.\n+ */\n+class ClasspathSymbols(isStatisticsEnabled: Boolean = false) {\n+\n+  def symbols(\n+      in: AbsolutePath,\n+      symbol: String\n+  ): Iterator[TreeViewSymbolInformation] = {\n+    val timer = new Timer(Time.system)\n+    val result = loadSymbols(in, symbol).iterator\n+    if (isStatisticsEnabled) {\n+      scribe.info(s\"$timer - $in/!$symbol\")\n+    }\n+    result\n+  }\n+\n+  // Names of methods that are autogenerated by the Scala compiler.\n+  private val isSyntheticMethodName = Set(\n+    \"productElement\", \"productElementName\", \"equals\", \"canEqual\", \"hashCode\",\n+    \"productIterator\", \"toString\", \"productPrefix\", \"unapply\", \"apply\", \"copy\",\n+    \"productArity\", \"readResolve\"\n+  )\n+\n+  // Returns true if this symbol is relevant for the tree view.\n+  private def isRelevant(info: SymbolInformation): Boolean =\n+    !info.isPrivate &&\n+      !info.isPrivateThis && {\n+      info.kind match {\n+        case k.METHOD =>\n+          val isVarSetter = info.isVar && info.displayName.endsWith(\"_=\")\n+          !isVarSetter &&\n+          !isSyntheticMethodName(info.displayName) &&\n+          !info.displayName.contains(\"$default$\")\n+        case k.CLASS | k.INTERFACE | k.OBJECT | k.PACKAGE_OBJECT | k.TRAIT |\n+            k.MACRO | k.FIELD =>\n+          true\n+        case _ => false\n+      }\n+    }\n+\n+  // NOTE(olafur) this method can take a few seconds to process larger jars like\n+  // org.typelevel:cats-core. Some optimization opportunies for future work:\n+  // - speed up metacp implementation, it's quite inefficient\n+  // - only process symbols for the requested directory\n+  // - only process symbols for the requested directory\n+  private def loadSymbols(\n+      in: AbsolutePath,\n+      symbol: String\n+  ): Array[TreeViewSymbolInformation] = {\n+    val index = ClasspathIndex(Classpath(in), false)\n+    val buf = Array.newBuilder[TreeViewSymbolInformation]\n+    def list(root: AbsolutePath): Unit = {\n+      val dir =\n+        if (symbol == Scala.Symbols.RootPackage) root\n+        else {\n+          root.resolve(Symbol(symbol).enclosingPackage.value)\n+        }\n+      listPath(dir.toNIO).foreach { path =>\n+        if (Files.isDirectory(path)) {\n+          buf ++= dummyClassfiles(root.toNIO, path)\n+        } else if (isClassfile(path)) {\n+          try {\n+            val abspath = AbsolutePath(path)\n+            val node = abspath.toClassNode\n+            classfileSymbols(path, node, index, { i =>\n+              if (isRelevant(i)) {\n+                buf += TreeViewSymbolInformation(i.symbol, i.kind, i.properties)\n+              }\n+            })\n+          } catch {\n+            case NonFatal(ex) =>\n+              scribe.warn(s\"error: can't convert $path in $in\", ex)\n+          }\n+        }\n+      }\n+\n+    }\n+    if (in.extension == \"jar\") {\n+      FileIO.withJarFileSystem(in, create = false, close = true)(list)\n+    } else {\n+      list(in)\n+    }\n+    buf.result()\n+  }\n+\n+  /** Recursively underlying for classfiles to determine if this path is a relevant directory */"
  }
]