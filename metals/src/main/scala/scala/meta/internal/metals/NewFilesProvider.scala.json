[
  {
    "id" : "78be622e-d76a-4ebe-a826-a5e48f96d9e7",
    "prId" : 1339,
    "comments" : [
      {
        "id" : "eba100f3-6b32-436f-af1e-16f8058c310b",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "```suggestion\r\n    case invalid => Future.failed(new IllegalArgumentException(invalid))\r\n```",
        "createdAt" : "2020-02-06T14:01:04Z",
        "updatedAt" : "2020-02-06T14:07:14Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1e1175d6c0f716c374b1bc575ac9a28a3290743",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,96 @@\n+package scala.meta.internal.metals\n+\n+import scala.meta.io.AbsolutePath\n+import java.net.URI\n+import scala.concurrent.Future\n+import MetalsEnrichments._\n+import java.nio.file.Files\n+import scala.concurrent.ExecutionContext\n+import scala.util.control.NonFatal\n+\n+class NewFilesProvider(\n+    workspace: AbsolutePath,\n+    packageProvider: PackageProvider\n+) {\n+\n+  def createNewFile(directory: Option[URI], name: String, kind: String)(\n+      implicit ec: ExecutionContext\n+  ): Future[URI] = kind match {\n+    case \"class\" | \"object\" | \"trait\" =>\n+      createClass(directory, name, kind)\n+    case \"package-object\" =>\n+      createPackageObject(directory)\n+    case \"worksheet\" =>\n+      createWorksheet(directory, name)\n+    case _ => Future.failed(new IllegalArgumentException)"
  },
  {
    "id" : "b12d7de8-ca1b-4b95-b00b-0b35aa71d3da",
    "prId" : 1447,
    "comments" : [
      {
        "id" : "7d70f327-3a84-42e0-be48-058603d6add9",
        "parentId" : null,
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "I've made some kind of DSL here, to cover `Future[Option[_]]` handling (making this method more or readable). `Future` is for about remote requests, and `Option` reflect that the request can be cancelled (thus, nothing should be returned eventually).\r\nNot sure, if it's good here.",
        "createdAt" : "2020-02-17T19:04:26Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "948961c16a2b407e9b6be832f69458537ee4bc93",
    "line" : 48,
    "diffHunk" : "@@ -7,51 +7,120 @@ import MetalsEnrichments._\n import java.nio.file.Files\n import scala.concurrent.ExecutionContext\n import scala.util.control.NonFatal\n+import org.eclipse.lsp4j.MessageType\n+import org.eclipse.lsp4j.ExecuteCommandParams\n+import org.eclipse.lsp4j.Location\n+import DialogEnrichments._\n+import scala.meta.internal.metals.Messages.NewScalaFile\n \n class NewFilesProvider(\n     workspace: AbsolutePath,\n-    packageProvider: PackageProvider\n+    client: MetalsLanguageClient,\n+    packageProvider: PackageProvider,\n+    serverConfig: MetalsServerConfig,\n+    focusedDocument: => Option[AbsolutePath]\n ) {\n \n-  def createNewFile(directory: Option[URI], name: String, kind: String)(\n+  private val classPick = MetalsPickItem(id = \"class\", label = \"Class\")\n+  private val objectPick = MetalsPickItem(id = \"object\", label = \"Object\")\n+  private val traitPick = MetalsPickItem(id = \"trait\", label = \"Trait\")\n+  private val packageObjectPick =\n+    MetalsPickItem(id = \"package-object\", label = \"Package Object\")\n+  private val worksheetPick =\n+    MetalsPickItem(id = \"worksheet\", label = \"Worksheet\")\n+\n+  def createNewFileDialog(directoryUri: Option[URI])(\n       implicit ec: ExecutionContext\n-  ): Future[URI] = kind match {\n-    case \"class\" | \"object\" | \"trait\" =>\n-      createClass(directory, name, kind)\n-    case \"package-object\" =>\n-      createPackageObject(directory)\n-    case \"worksheet\" =>\n-      createWorksheet(directory, name)\n-    case invalid => Future.failed(new IllegalArgumentException(invalid))\n+  ): Future[Unit] = {\n+    val directory = directoryUri\n+      .map(_.toString.toAbsolutePath)\n+      .orElse(focusedDocument.map(_.parent))\n+\n+    val newlyCreatedFile =\n+      askForKind"
  },
  {
    "id" : "54e8dd4c-0c23-406c-b2b3-98ab94520f92",
    "prId" : 1447,
    "comments" : [
      {
        "id" : "b4ab9aa0-ca5c-437c-acce-df22bf162f91",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Do we need to fully qualify `Range` here?\r\n\r\nMaybe `path.toURI.toString` to be on the save side and you should be able to remove `: Object`",
        "createdAt" : "2020-02-19T17:41:27Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1a6806e4-1c71-4c9d-a8ea-a9df8089e49d",
        "parentId" : "b4ab9aa0-ca5c-437c-acce-df22bf162f91",
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "`Range` fixed.\r\nGood catch with `toURI`, thanks!\r\n`:Object` can not be ommitted, since it's Java List eventually, and it's not covariant. It's the same with already existing cases of calling `ClientCommands.GotoLocation`",
        "createdAt" : "2020-02-20T15:36:13Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "948961c16a2b407e9b6be832f69458537ee4bc93",
    "line" : null,
    "diffHunk" : "@@ -66,31 +135,80 @@ class NewFilesProvider(\n       )\n   }\n \n+  private def createWorksheet(directory: Option[AbsolutePath], name: String)(\n+      implicit ec: ExecutionContext\n+  ): Future[AbsolutePath] = {\n+    val path = directory.getOrElse(workspace).resolve(name + \".worksheet.sc\")\n+    createFile(path)\n+  }\n+\n   private def createFile(\n       path: AbsolutePath\n-  )(implicit ec: ExecutionContext): Future[URI] = {\n+  )(implicit ec: ExecutionContext): Future[AbsolutePath] = {\n     val result = Future {\n-      Files.createFile(path.toNIO).toUri()\n+      AbsolutePath(\n+        Files.createFile(path.toNIO)\n+      )\n     }\n     result.onFailure {\n-      case NonFatal(e) => scribe.error(\"Cannot create file\", e)\n+      case NonFatal(e) =>\n+        scribe.error(\"Cannot create file\", e)\n+        client.showMessage(\n+          MessageType.Error,\n+          s\"Cannot create file:\\n ${e.toString()}\"\n+        )\n     }\n     result\n   }\n \n   private def createFileAndWriteText(path: AbsolutePath, text: String)(\n       implicit ec: ExecutionContext\n-  ): Future[URI] = {\n-    createFile(path).map { newFileUri =>\n+  ): Future[AbsolutePath] = {\n+    createFile(path).map { _ =>\n       path.writeText(text)\n-      newFileUri\n+      path\n     }\n   }\n \n+  private def openFile(path: AbsolutePath): Unit = {\n+    client.metalsExecuteClientCommand(\n+      new ExecuteCommandParams(\n+        ClientCommands.GotoLocation.id,\n+        List(\n+          new Location(path.toString(), new org.eclipse.lsp4j.Range()): Object"
  },
  {
    "id" : "bae5430f-a8d2-49d6-af6f-82c87a84ac71",
    "prId" : 1447,
    "comments" : [
      {
        "id" : "43959809-40bf-413b-9755-f15955e4d1c2",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I think you can add the execution context to the class constructor - it will be the same anyway",
        "createdAt" : "2020-02-19T17:55:36Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3172458c-dbdb-4a05-a441-41dba05a58b1",
        "parentId" : "43959809-40bf-413b-9755-f15955e4d1c2",
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "done",
        "createdAt" : "2020-02-20T15:37:30Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "948961c16a2b407e9b6be832f69458537ee4bc93",
    "line" : null,
    "diffHunk" : "@@ -7,51 +7,120 @@ import MetalsEnrichments._\n import java.nio.file.Files\n import scala.concurrent.ExecutionContext\n import scala.util.control.NonFatal\n+import org.eclipse.lsp4j.MessageType\n+import org.eclipse.lsp4j.ExecuteCommandParams\n+import org.eclipse.lsp4j.Location\n+import DialogEnrichments._\n+import scala.meta.internal.metals.Messages.NewScalaFile\n \n class NewFilesProvider(\n     workspace: AbsolutePath,\n-    packageProvider: PackageProvider\n+    client: MetalsLanguageClient,\n+    packageProvider: PackageProvider,\n+    serverConfig: MetalsServerConfig,\n+    focusedDocument: => Option[AbsolutePath]\n ) {\n \n-  def createNewFile(directory: Option[URI], name: String, kind: String)(\n+  private val classPick = MetalsPickItem(id = \"class\", label = \"Class\")\n+  private val objectPick = MetalsPickItem(id = \"object\", label = \"Object\")\n+  private val traitPick = MetalsPickItem(id = \"trait\", label = \"Trait\")\n+  private val packageObjectPick =\n+    MetalsPickItem(id = \"package-object\", label = \"Package Object\")\n+  private val worksheetPick =\n+    MetalsPickItem(id = \"worksheet\", label = \"Worksheet\")\n+\n+  def createNewFileDialog(directoryUri: Option[URI])(\n       implicit ec: ExecutionContext\n-  ): Future[URI] = kind match {\n-    case \"class\" | \"object\" | \"trait\" =>\n-      createClass(directory, name, kind)\n-    case \"package-object\" =>\n-      createPackageObject(directory)\n-    case \"worksheet\" =>\n-      createWorksheet(directory, name)\n-    case invalid => Future.failed(new IllegalArgumentException(invalid))\n+  ): Future[Unit] = {\n+    val directory = directoryUri\n+      .map(_.toString.toAbsolutePath)\n+      .orElse(focusedDocument.map(_.parent))\n+\n+    val newlyCreatedFile =\n+      askForKind\n+        .continueWith {\n+          case kind @ (classPick.id | objectPick.id | traitPick.id) =>\n+            askForName(kind)\n+              .endWith(\n+                createClass(directory, _, kind)\n+              )\n+          case worksheetPick.id =>\n+            askForName(worksheetPick.id)\n+              .endWith(\n+                createWorksheet(directory, _)\n+              )\n+          case packageObjectPick.id =>\n+            endWith(\n+              createPackageObject(directory)\n+            )\n+          case invalid =>\n+            Future.failed(new IllegalArgumentException(invalid))\n+        }\n+\n+    newlyCreatedFile.map {\n+      case Some(path) =>\n+        openFile(path)\n+      case None => ()\n+    }\n   }\n \n-  def createWorksheet(directory: Option[URI], name: String)(\n+  private def askForKind(\n       implicit ec: ExecutionContext\n-  ): Future[URI] = {\n-    val path = directory\n-      .fold(workspace)(_.toString.toAbsolutePath)\n-      .resolve(name + \".worksheet.sc\")\n-    createFile(path)\n+  ): Future[Option[String]] = {\n+    client\n+      .metalsPickInput(\n+        MetalsPickInputParams(\n+          List(\n+            classPick,\n+            objectPick,\n+            traitPick,\n+            packageObjectPick,\n+            worksheetPick\n+          ).asJava,\n+          placeHolder = NewScalaFile.selectTheKindOfFileMessage\n+        )\n+      )\n+      .asScala\n+      .map {\n+        case kind if !kind.cancelled => Some(kind.itemId)\n+        case _ => None\n+      }\n   }\n \n-  def createClass(directory: Option[URI], name: String, kind: String)(\n+  private def askForName(kind: String)(\n       implicit ec: ExecutionContext\n-  ): Future[URI] = {\n-    val path = directory\n-      .fold(workspace)(_.toString.toAbsolutePath)\n-      .resolve(name + \".scala\")\n+  ): Future[Option[String]] = {\n+    client\n+      .metalsInputBox(\n+        MetalsInputBoxParams(prompt = NewScalaFile.enterNameMessage(kind))\n+      )\n+      .asScala\n+      .map {\n+        case name if !name.cancelled => Some(name.value)\n+        case _ => None\n+      }\n+  }\n+\n+  private def createClass(\n+      directory: Option[AbsolutePath],\n+      name: String,\n+      kind: String\n+  )(\n+      implicit ec: ExecutionContext"
  },
  {
    "id" : "98888768-c284-4fbd-b30e-08b1874861a5",
    "prId" : 1447,
    "comments" : [
      {
        "id" : "1b209611-369a-4d3d-ab1f-4e6ea2165061",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Looks good, this is almost a MonadTransformer haha.\r\n\r\nMaybe `flatMapOption` and `mapOption` ? This will be a bit more natural.\r\n\r\nAnd these methods might be actually useful to add to `MetalsEnrichments`, I remember situations when we were combining Futures and Options.",
        "createdAt" : "2020-02-19T18:28:05Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "741a432b-5049-43a9-b1aa-f2a2bf9b2ea0",
        "parentId" : "1b209611-369a-4d3d-ab1f-4e6ea2165061",
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "Yeah, I also thought about `OptionT` :D . Done",
        "createdAt" : "2020-02-20T15:38:35Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "948961c16a2b407e9b6be832f69458537ee4bc93",
    "line" : null,
    "diffHunk" : "@@ -66,31 +135,80 @@ class NewFilesProvider(\n       )\n   }\n \n+  private def createWorksheet(directory: Option[AbsolutePath], name: String)(\n+      implicit ec: ExecutionContext\n+  ): Future[AbsolutePath] = {\n+    val path = directory.getOrElse(workspace).resolve(name + \".worksheet.sc\")\n+    createFile(path)\n+  }\n+\n   private def createFile(\n       path: AbsolutePath\n-  )(implicit ec: ExecutionContext): Future[URI] = {\n+  )(implicit ec: ExecutionContext): Future[AbsolutePath] = {\n     val result = Future {\n-      Files.createFile(path.toNIO).toUri()\n+      AbsolutePath(\n+        Files.createFile(path.toNIO)\n+      )\n     }\n     result.onFailure {\n-      case NonFatal(e) => scribe.error(\"Cannot create file\", e)\n+      case NonFatal(e) =>\n+        scribe.error(\"Cannot create file\", e)\n+        client.showMessage(\n+          MessageType.Error,\n+          s\"Cannot create file:\\n ${e.toString()}\"\n+        )\n     }\n     result\n   }\n \n   private def createFileAndWriteText(path: AbsolutePath, text: String)(\n       implicit ec: ExecutionContext\n-  ): Future[URI] = {\n-    createFile(path).map { newFileUri =>\n+  ): Future[AbsolutePath] = {\n+    createFile(path).map { _ =>\n       path.writeText(text)\n-      newFileUri\n+      path\n     }\n   }\n \n+  private def openFile(path: AbsolutePath): Unit = {\n+    client.metalsExecuteClientCommand(\n+      new ExecuteCommandParams(\n+        ClientCommands.GotoLocation.id,\n+        List(\n+          new Location(path.toString(), new org.eclipse.lsp4j.Range()): Object\n+        ).asJava\n+      )\n+    )\n+  }\n+\n   private def classTemplate(kind: String, name: String): String =\n     s\"\"\"|$kind $name {\n         |  \n         |}\n         |\"\"\".stripMargin\n \n }\n+\n+object DialogEnrichments {\n+\n+  implicit class DialogContinuation[A](state: Future[Option[A]]) {\n+\n+    def continueWith[B]("
  },
  {
    "id" : "c66fd4d1-0d50-4b26-8a44-bd0cb5f98c4d",
    "prId" : 1447,
    "comments" : [
      {
        "id" : "522c7beb-0cd6-4195-b7c0-e8378724721d",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "You can use `touch` from `XtensionAbsolutePathBuffers`",
        "createdAt" : "2020-02-19T18:32:53Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6819c622-b9f0-46b0-aebe-87fcdce887c5",
        "parentId" : "522c7beb-0cd6-4195-b7c0-e8378724721d",
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "`touch` does not return the path, and although I already have the path, I like to reuse output of the function.",
        "createdAt" : "2020-02-20T15:39:38Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c0099a50-ef0e-48ba-acdb-f0d43efb1e9f",
        "parentId" : "522c7beb-0cd6-4195-b7c0-e8378724721d",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Can we change touch to return the path? ",
        "createdAt" : "2020-02-21T13:10:31Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "948961c16a2b407e9b6be832f69458537ee4bc93",
    "line" : null,
    "diffHunk" : "@@ -66,31 +135,80 @@ class NewFilesProvider(\n       )\n   }\n \n+  private def createWorksheet(directory: Option[AbsolutePath], name: String)(\n+      implicit ec: ExecutionContext\n+  ): Future[AbsolutePath] = {\n+    val path = directory.getOrElse(workspace).resolve(name + \".worksheet.sc\")\n+    createFile(path)\n+  }\n+\n   private def createFile(\n       path: AbsolutePath\n-  )(implicit ec: ExecutionContext): Future[URI] = {\n+  )(implicit ec: ExecutionContext): Future[AbsolutePath] = {\n     val result = Future {\n-      Files.createFile(path.toNIO).toUri()\n+      AbsolutePath(\n+        Files.createFile(path.toNIO)"
  },
  {
    "id" : "b162e2de-eaf0-48b9-8c7f-d5a08e42c509",
    "prId" : 1447,
    "comments" : [
      {
        "id" : "a78389f3-ebe4-43dd-b184-78862dd09655",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "What happens if the name is `a/b/c/A` - I think we should create the directories there. Most likely `createFile` should also create directories? Package will then be added automatically which is neat.",
        "createdAt" : "2020-02-19T18:36:55Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c1d70ee4-165a-4738-9af4-a65c5301ed64",
        "parentId" : "a78389f3-ebe4-43dd-b184-78862dd09655",
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "it fails. Not really sure, it looks neat to ask for the name for the new class `foo/Bar` to create `class Bar`at `foo/Bar.scala`",
        "createdAt" : "2020-02-20T15:41:14Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "070c2d74-069a-4c94-88e0-6b03267be1a5",
        "parentId" : "a78389f3-ebe4-43dd-b184-78862dd09655",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Could we implement it here? I think we just need to do `getParent.mkdirs`",
        "createdAt" : "2020-02-21T13:09:48Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "948961c16a2b407e9b6be832f69458537ee4bc93",
    "line" : 124,
    "diffHunk" : "@@ -7,51 +7,120 @@ import MetalsEnrichments._\n import java.nio.file.Files\n import scala.concurrent.ExecutionContext\n import scala.util.control.NonFatal\n+import org.eclipse.lsp4j.MessageType\n+import org.eclipse.lsp4j.ExecuteCommandParams\n+import org.eclipse.lsp4j.Location\n+import DialogEnrichments._\n+import scala.meta.internal.metals.Messages.NewScalaFile\n \n class NewFilesProvider(\n     workspace: AbsolutePath,\n-    packageProvider: PackageProvider\n+    client: MetalsLanguageClient,\n+    packageProvider: PackageProvider,\n+    serverConfig: MetalsServerConfig,\n+    focusedDocument: => Option[AbsolutePath]\n ) {\n \n-  def createNewFile(directory: Option[URI], name: String, kind: String)(\n+  private val classPick = MetalsPickItem(id = \"class\", label = \"Class\")\n+  private val objectPick = MetalsPickItem(id = \"object\", label = \"Object\")\n+  private val traitPick = MetalsPickItem(id = \"trait\", label = \"Trait\")\n+  private val packageObjectPick =\n+    MetalsPickItem(id = \"package-object\", label = \"Package Object\")\n+  private val worksheetPick =\n+    MetalsPickItem(id = \"worksheet\", label = \"Worksheet\")\n+\n+  def createNewFileDialog(directoryUri: Option[URI])(\n       implicit ec: ExecutionContext\n-  ): Future[URI] = kind match {\n-    case \"class\" | \"object\" | \"trait\" =>\n-      createClass(directory, name, kind)\n-    case \"package-object\" =>\n-      createPackageObject(directory)\n-    case \"worksheet\" =>\n-      createWorksheet(directory, name)\n-    case invalid => Future.failed(new IllegalArgumentException(invalid))\n+  ): Future[Unit] = {\n+    val directory = directoryUri\n+      .map(_.toString.toAbsolutePath)\n+      .orElse(focusedDocument.map(_.parent))\n+\n+    val newlyCreatedFile =\n+      askForKind\n+        .continueWith {\n+          case kind @ (classPick.id | objectPick.id | traitPick.id) =>\n+            askForName(kind)\n+              .endWith(\n+                createClass(directory, _, kind)\n+              )\n+          case worksheetPick.id =>\n+            askForName(worksheetPick.id)\n+              .endWith(\n+                createWorksheet(directory, _)\n+              )\n+          case packageObjectPick.id =>\n+            endWith(\n+              createPackageObject(directory)\n+            )\n+          case invalid =>\n+            Future.failed(new IllegalArgumentException(invalid))\n+        }\n+\n+    newlyCreatedFile.map {\n+      case Some(path) =>\n+        openFile(path)\n+      case None => ()\n+    }\n   }\n \n-  def createWorksheet(directory: Option[URI], name: String)(\n+  private def askForKind(\n       implicit ec: ExecutionContext\n-  ): Future[URI] = {\n-    val path = directory\n-      .fold(workspace)(_.toString.toAbsolutePath)\n-      .resolve(name + \".worksheet.sc\")\n-    createFile(path)\n+  ): Future[Option[String]] = {\n+    client\n+      .metalsPickInput(\n+        MetalsPickInputParams(\n+          List(\n+            classPick,\n+            objectPick,\n+            traitPick,\n+            packageObjectPick,\n+            worksheetPick\n+          ).asJava,\n+          placeHolder = NewScalaFile.selectTheKindOfFileMessage\n+        )\n+      )\n+      .asScala\n+      .map {\n+        case kind if !kind.cancelled => Some(kind.itemId)\n+        case _ => None\n+      }\n   }\n \n-  def createClass(directory: Option[URI], name: String, kind: String)(\n+  private def askForName(kind: String)(\n       implicit ec: ExecutionContext\n-  ): Future[URI] = {\n-    val path = directory\n-      .fold(workspace)(_.toString.toAbsolutePath)\n-      .resolve(name + \".scala\")\n+  ): Future[Option[String]] = {\n+    client\n+      .metalsInputBox(\n+        MetalsInputBoxParams(prompt = NewScalaFile.enterNameMessage(kind))\n+      )\n+      .asScala\n+      .map {\n+        case name if !name.cancelled => Some(name.value)\n+        case _ => None\n+      }\n+  }\n+\n+  private def createClass(\n+      directory: Option[AbsolutePath],\n+      name: String,\n+      kind: String\n+  )(\n+      implicit ec: ExecutionContext\n+  ): Future[AbsolutePath] = {\n+    val path = directory.getOrElse(workspace).resolve(name + \".scala\")"
  },
  {
    "id" : "f05eb1a6-ad4d-454b-ade4-55fbcc145e2a",
    "prId" : 1525,
    "comments" : [
      {
        "id" : "c4d50f57-7d41-436a-88a3-2bc911ef1b75",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "You should use `className` here and below.",
        "createdAt" : "2020-03-22T17:29:36Z",
        "updatedAt" : "2020-03-23T06:39:31Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bce34c63-52b2-4ad2-9b10-7bcacc3f7296",
        "parentId" : "c4d50f57-7d41-436a-88a3-2bc911ef1b75",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Or course, thanks for spotting the bug! I’ll fix it soon",
        "createdAt" : "2020-03-22T18:18:32Z",
        "updatedAt" : "2020-03-23T06:39:31Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "87ce82f018a38c67e62136bbdee9bf07ccc35204",
    "line" : null,
    "diffHunk" : "@@ -102,9 +106,12 @@ class NewFilesProvider(\n     val path = directory.getOrElse(workspace).resolve(name + \".scala\")\n     //name can be actually be \"foo/Name\", where \"foo\" is a folder to create\n     val className = directory.getOrElse(workspace).resolve(name).filename\n+    val template = kind match {\n+      case caseClassPick.id => caseClassTemplate(name)"
  },
  {
    "id" : "6fd9bd83-8e89-4bb1-9cd0-87e0d105b52c",
    "prId" : 1525,
    "comments" : [
      {
        "id" : "6f2cec37-c419-4cf8-9bfa-62140dc6d717",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Add final?",
        "createdAt" : "2020-03-22T20:41:43Z",
        "updatedAt" : "2020-03-23T06:39:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "38acc3d1-e410-4b18-80ce-288ccb76cfb5",
        "parentId" : "6f2cec37-c419-4cf8-9bfa-62140dc6d717",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I thought about it, but it seemed a bit too opinionated? On the other hand, I never use final on case classes because I’m too lazy to type it so this may be what makes me start using it 😅",
        "createdAt" : "2020-03-22T20:58:16Z",
        "updatedAt" : "2020-03-23T06:39:31Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ce919a1f-3c90-4b2c-b743-4ba598f6a6cd",
        "parentId" : "6f2cec37-c419-4cf8-9bfa-62140dc6d717",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I feel like the custom wizard is more merited if it’s more than just adding “case”",
        "createdAt" : "2020-03-22T22:24:38Z",
        "updatedAt" : "2020-03-23T06:39:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "014ea8d9-f064-4ccb-a2a0-6f4c78497039",
        "parentId" : "6f2cec37-c419-4cf8-9bfa-62140dc6d717",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Hey, it also adds different parenthesis! :D \r\n\r\nAnyway, added `final`, I think it makes sense",
        "createdAt" : "2020-03-23T06:40:26Z",
        "updatedAt" : "2020-03-23T06:40:26Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "87ce82f018a38c67e62136bbdee9bf07ccc35204",
    "line" : null,
    "diffHunk" : "@@ -181,4 +188,7 @@ class NewFilesProvider(\n         |}\n         |\"\"\".stripMargin\n \n+  private def caseClassTemplate(name: String): String =\n+    s\"case class $name()\""
  },
  {
    "id" : "f0839b41-7f45-469b-beee-19c23074e943",
    "prId" : 1528,
    "comments" : [
      {
        "id" : "3b5ad66b-5f9d-4d18-90d1-af9e53206490",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I've changed this to also accept a `name`, so that we can skip the name-picking dialog and just ask for a file kind.\r\n\r\nThis allows the code action to fully re-use the existing provider's flow, which I think is really nice",
        "createdAt" : "2020-03-23T10:23:00Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "29e8820c0560d7d7e678b124344d3884ba5c2bda",
    "line" : 7,
    "diffHunk" : "@@ -23,28 +23,34 @@ class NewFilesProvider(\n ) {\n \n   private val classPick = MetalsQuickPickItem(id = \"class\", label = \"Class\")\n+  private val caseClassPick =\n+    MetalsQuickPickItem(id = \"case-class\", label = \"Case class\")\n   private val objectPick = MetalsQuickPickItem(id = \"object\", label = \"Object\")\n   private val traitPick = MetalsQuickPickItem(id = \"trait\", label = \"Trait\")\n   private val packageObjectPick =\n     MetalsQuickPickItem(id = \"package-object\", label = \"Package Object\")\n   private val worksheetPick =\n     MetalsQuickPickItem(id = \"worksheet\", label = \"Worksheet\")\n \n-  def createNewFileDialog(directoryUri: Option[URI]): Future[Unit] = {\n+  def createNewFileDialog(\n+      directoryUri: Option[URI],\n+      name: Option[String]"
  },
  {
    "id" : "03221da1-e52e-4e91-a87b-a723cac7e513",
    "prId" : 1528,
    "comments" : [
      {
        "id" : "65bf7733-1ee1-42d2-8a57-f343778b14b0",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Let's also maybe ask if the name is empty? I think that breaks in the current behaviour.",
        "createdAt" : "2020-03-23T11:34:55Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "25f16bd4-468b-4e89-8b30-7cb2263d5bcf",
        "parentId" : "65bf7733-1ee1-42d2-8a57-f343778b14b0",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "what you mean? Empty string? I can add a test but can you explain why do you think it breaks the current functionality?",
        "createdAt" : "2020-03-23T11:37:43Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "16b58ee6-a651-4e2e-a36e-9ecc3afa1488",
        "parentId" : "65bf7733-1ee1-42d2-8a57-f343778b14b0",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Anyway, I've added handling blank values",
        "createdAt" : "2020-03-23T11:58:27Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "29e8820c0560d7d7e678b124344d3884ba5c2bda",
    "line" : null,
    "diffHunk" : "@@ -98,6 +101,16 @@ class NewFilesProvider(\n       }\n   }\n \n+  private def getName(\n+      kind: String,\n+      name: Option[String]\n+  ): Future[Option[String]] = {\n+    name match {\n+      case Some(_) => Future.successful(name)\n+      case None => askForName(kind)"
  },
  {
    "id" : "de0e77d0-6638-4cc5-8a72-43281fae089d",
    "prId" : 1528,
    "comments" : [
      {
        "id" : "a1579961-8768-45e2-ad6a-c45f10a1176b",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "My editor is set to strip out whitespaces on save, so I've been struggling with this.\r\n\r\nI think it's much clearer this way, anyway.",
        "createdAt" : "2020-03-23T11:41:18Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "eca1541c-bfd2-47fd-a658-f7b75dd86058",
        "parentId" : "a1579961-8768-45e2-ad6a-c45f10a1176b",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I agree this is clearer. I also have my editor remove trailing whitespace on save, intellij has this enabled by default, so we should not rely on it in our tests",
        "createdAt" : "2020-03-23T12:23:16Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5f083bb0-8de6-41ac-a69e-fae0fd5b13a9",
        "parentId" : "a1579961-8768-45e2-ad6a-c45f10a1176b",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "I also like this as I get a warning in vim about trailing whitespaces all the time ha.",
        "createdAt" : "2020-03-23T12:30:24Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "29e8820c0560d7d7e678b124344d3884ba5c2bda",
    "line" : 53,
    "diffHunk" : "@@ -182,11 +195,13 @@ class NewFilesProvider(\n     )\n   }\n \n-  private def classTemplate(kind: String, name: String): String =\n+  private def classTemplate(kind: String, name: String): String = {\n+    val indent = \"  \"\n     s\"\"\"|$kind $name {\n-        |  \n+        |$indent"
  },
  {
    "id" : "82e8f451-996c-4640-81f9-167493273d7d",
    "prId" : 1624,
    "comments" : [
      {
        "id" : "908b69c8-0b57-482b-a9f5-e4b874d0ad63",
        "parentId" : null,
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "maybe `FileAlreadyExistsException`?",
        "createdAt" : "2020-04-16T16:37:15Z",
        "updatedAt" : "2020-04-16T17:50:50Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "96981ae0-b438-4d3b-b8fd-50a56c739baf",
        "parentId" : "908b69c8-0b57-482b-a9f5-e4b874d0ad63",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Good idea! Changed",
        "createdAt" : "2020-04-16T17:52:09Z",
        "updatedAt" : "2020-04-16T17:52:10Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2f5c5c4a8d2e63df9475195ca1d0c4346071ba7e",
    "line" : null,
    "diffHunk" : "@@ -164,15 +164,22 @@ class NewFilesProvider(\n       name: String\n   ): Future[(AbsolutePath, Range)] = {\n     val path = directory.getOrElse(workspace).resolve(name + \".worksheet.sc\")\n-    createFile(path).map((_, new Range))\n+    createFileAndWriteText(path, NewFileTemplate.empty)\n   }\n \n-  private def createFile(\n-      path: AbsolutePath\n-  ): Future[AbsolutePath] = {\n-    val result = Future {\n-      path.touch()\n-      path\n+  private def createFileAndWriteText(\n+      path: AbsolutePath,\n+      template: NewFileTemplate\n+  ): Future[(AbsolutePath, Range)] = {\n+    val result = if (path.exists) {\n+      Future.failed(\n+        new IllegalArgumentException(s\"The file $path already exists.\")"
  },
  {
    "id" : "ccc8051b-b675-495e-bcfa-ce57394b7b44",
    "prId" : 1846,
    "comments" : [
      {
        "id" : "410a1b03-3656-45c3-a055-f46a92255a68",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Ah, good call adding this in 👍 ",
        "createdAt" : "2020-06-19T19:58:10Z",
        "updatedAt" : "2020-06-21T18:57:33Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "10223975ce00488d39a58765d57e434b217aeb21",
    "line" : 4,
    "diffHunk" : "@@ -34,6 +34,8 @@ class NewFilesProvider(\n     MetalsQuickPickItem(id = \"package-object\", label = \"Package Object\")\n   private val worksheetPick =\n     MetalsQuickPickItem(id = \"worksheet\", label = \"Worksheet\")\n+  private val ammonitePick ="
  }
]