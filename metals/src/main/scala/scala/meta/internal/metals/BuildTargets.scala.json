[
  {
    "id" : "7f342a8e-6fd0-4239-bf36-1b6a53979898",
    "prId" : 797,
    "comments" : [
      {
        "id" : "a3345c97-225d-4d81-928d-d738fa0c04b9",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "`Set::add` returns boolean - true if the element was not present, so it could be simplified to:\r\n`isVisited.add(classpathEntry)`\r\nit would also probably merit a name change - but I don't have a suggestion now :(",
        "createdAt" : "2019-06-27T06:58:26Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "31c15b3a-32e2-486d-a15d-5d417c52bcd7",
        "parentId" : "a3345c97-225d-4d81-928d-d738fa0c04b9",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Nice, TIL! I kept the `isVisited` name.",
        "createdAt" : "2019-06-27T09:05:28Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -55,6 +55,25 @@ final class BuildTargets() {\n       scalac <- scalacTargetInfo.get(id)\n     } yield ScalaTarget(target, scalac)\n \n+  def scalaTarget(id: BuildTargetIdentifier): Option[ScalaTarget] =\n+    for {\n+      info <- buildTargetInfo.get(id)\n+      scalac <- scalacTargetInfo.get(id)\n+    } yield ScalaTarget(info, scalac)\n+\n+  def allWorkspaceJars: Iterator[AbsolutePath] = {\n+    val isVisited = mutable.Set.empty[AbsolutePath]\n+    for {\n+      target <- all\n+      classpathEntry <- target.scalac.classpath\n+      if classpathEntry.extension == \"jar\"\n+      if !isVisited(classpathEntry)"
  },
  {
    "id" : "7a4ea554-e05a-4756-b997-c1b5c3e39e44",
    "prId" : 857,
    "comments" : [
      {
        "id" : "b10f15c6-b4d7-47ef-b361-b3a22a47df5e",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "I was thinking about renaming the `sourceItems` to just `sources` whenever we find it ;)",
        "createdAt" : "2019-08-08T06:15:50Z",
        "updatedAt" : "2019-08-08T16:25:02Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0dd3eede29c603619dd79001b736615bb5743729",
    "line" : 5,
    "diffHunk" : "@@ -31,7 +31,7 @@ final class BuildTargets() {\n     workspace = newWorkspace\n   }\n   private var tables: Option[Tables] = None\n-  private val sourceDirectoriesToBuildTarget =\n+  private val sourceItemsToBuildTarget ="
  },
  {
    "id" : "a21954be-90bf-43e6-839d-a2f555bb3b47",
    "prId" : 948,
    "comments" : [
      {
        "id" : "0e624d73-8e33-4749-896b-28978384faa0",
        "parentId" : null,
        "author" : {
          "login" : "jvican",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/2462974?u=247f9a0cfd142440687595dce462fabed087e912&v=4"
        },
        "body" : "NiceðŸ‘Œ",
        "createdAt" : "2019-09-27T10:31:57Z",
        "updatedAt" : "2019-09-27T10:32:40Z",
        "lastEditedBy" : {
          "login" : "jvican",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/2462974?u=247f9a0cfd142440687595dce462fabed087e912&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "468f3ce838bfa1ab613b941981f8aefa06619232",
    "line" : 39,
    "diffHunk" : "@@ -188,11 +193,25 @@ final class BuildTargets() {\n       source: AbsolutePath\n   ): Option[BuildTargetIdentifier] = {\n     val buildTargets = sourceBuildTargets(source)\n-    buildTargets // prioritize JVM targets over JS/Native\n-      .find(x => scalacOptions(x).exists(_.isJVM))\n-      .orElse(buildTargets.headOption)\n-      .orElse(tables.flatMap(_.dependencySources.getBuildTarget(source)))\n-      .orElse(inferBuildTarget(source))\n+    if (buildTargets.isEmpty) {\n+      tables\n+        .flatMap(_.dependencySources.getBuildTarget(source))\n+        .orElse(inferBuildTarget(source))\n+    } else {\n+      Some(buildTargets.maxBy { t =>\n+        var score = 1\n+\n+        val isSupportedScalaVersion = scalaInfo(t).exists(\n+          t => ScalaVersions.isSupportedScalaVersion(t.getScalaVersion())\n+        )\n+        if (isSupportedScalaVersion) score <<= 2"
  },
  {
    "id" : "a8b87c62-f728-4a70-84e9-627a633a0a97",
    "prId" : 1145,
    "comments" : [
      {
        "id" : "675c8d43-c39c-4d4d-9173-d6cb5ff587ea",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "`.toOption`?",
        "createdAt" : "2019-12-04T17:28:38Z",
        "updatedAt" : "2019-12-05T11:14:30Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3ab56263-7a25-4637-b662-79e89269f502",
        "parentId" : "675c8d43-c39c-4d4d-9173-d6cb5ff587ea",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This code is unchanged from before, it just moved. I think `toOption.flatten` is a valid refactoring but it's unrelated to this PR.",
        "createdAt" : "2019-12-05T10:26:24Z",
        "updatedAt" : "2019-12-05T11:14:30Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c032fa899f1747d53cf2025b6e1cf03227b19980",
    "line" : 54,
    "diffHunk" : "@@ -239,9 +250,23 @@ final class BuildTargets() {\n    */\n   def inferBuildTarget(\n       source: AbsolutePath\n-  ): Option[BuildTargetIdentifier] =\n-    if (!source.isDependencySource(workspace)) None\n-    else Try(unsafeInferBuildTarget(source)).getOrElse(None)\n+  ): Option[BuildTargetIdentifier] = {\n+    if (source.isDependencySource(workspace)) {\n+      Try(unsafeInferBuildTarget(source)).getOrElse(None)"
  },
  {
    "id" : "b1405c90-f12a-46fe-b2b3-4798a9582cc4",
    "prId" : 1145,
    "comments" : [
      {
        "id" : "c8318493-95e3-49a8-9621-d0f6c1210f16",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Same for buildTargetReference?",
        "createdAt" : "2019-12-04T18:27:21Z",
        "updatedAt" : "2019-12-05T11:14:30Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "923c8488-9b00-4836-aab4-8c5189e22dfe",
        "parentId" : "c8318493-95e3-49a8-9621-d0f6c1210f16",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Nice catch! Fixed.",
        "createdAt" : "2019-12-05T11:14:08Z",
        "updatedAt" : "2019-12-05T11:14:30Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c032fa899f1747d53cf2025b6e1cf03227b19980",
    "line" : 15,
    "diffHunk" : "@@ -57,6 +61,7 @@ final class BuildTargets() {\n     inverseDependencies.clear()\n     buildTargetSources.clear()\n     inverseDependencySources.clear()\n+    isSourceRoot.clear()"
  },
  {
    "id" : "f4972e86-5332-4e62-99e6-ead7677eb83b",
    "prId" : 1781,
    "comments" : [
      {
        "id" : "54e6b00a-5c64-43e8-8d7a-8cffedb1e122",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "So I _think_ I understand what is going on here, but why when used up above do we so a `sortBy` and below we use `max`?. Also, what's the benefit of using binary shift operators here? I've actually never came across these in the wild before ðŸ˜¬ ",
        "createdAt" : "2020-05-27T12:05:48Z",
        "updatedAt" : "2020-05-27T12:07:41Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cffd1f5e-ae12-488a-b67d-fa874ff9fd28",
        "parentId" : "54e6b00a-5c64-43e8-8d7a-8cffedb1e122",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We are using maxBy in a scenario that we know the list is not empty and it produces a single element. `sortBy` still produces a list, which is useful in the other scenario.\r\n\r\nBinary shift is I think just an easy way to introduce priority.",
        "createdAt" : "2020-05-27T12:16:58Z",
        "updatedAt" : "2020-05-27T12:16:58Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d3f3e07b-a701-467a-a0de-5704e2da61d7",
        "parentId" : "54e6b00a-5c64-43e8-8d7a-8cffedb1e122",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Sounds good. Thanks for explaining.",
        "createdAt" : "2020-05-27T12:29:11Z",
        "updatedAt" : "2020-05-27T12:29:11Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "376535f14d761d5513fd67b015e9ab10588f0ac7",
    "line" : 23,
    "diffHunk" : "@@ -52,6 +52,27 @@ final class BuildTargets() {\n   private val buildTargetInference =\n     new ConcurrentLinkedQueue[AbsolutePath => Seq[BuildTargetIdentifier]]()\n \n+  val buildTargetsOrder: BuildTargetIdentifier => Int = {\n+    (t: BuildTargetIdentifier) =>\n+      var score = 1\n+\n+      val isSupportedScalaVersion = scalaInfo(t).exists(t =>\n+        ScalaVersions.isSupportedScalaVersion(t.getScalaVersion())\n+      )\n+      if (isSupportedScalaVersion) score <<= 2\n+\n+      val isJVM = scalacOptions(t).exists(_.isJVM)\n+      if (isJVM) score <<= 1\n+\n+      // note(@tgodzik) once the support for Scala 3 is on par with Scala 2 this can be removed\n+      val isScala2 = scalaInfo(t).exists(info =>\n+        !ScalaVersions.isScala3Version(info.getScalaVersion())\n+      )\n+      if (isScala2) score <<= 1\n+\n+      score\n+  }"
  },
  {
    "id" : "a7428ade-9922-4839-9986-1b1327632c38",
    "prId" : 1865,
    "comments" : [
      {
        "id" : "bc8fc341-e258-40d3-bce8-1d9c9e8630ef",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "```suggestion\r\n    for{\r\n      (_, target) <- buildTargetInfo.iterator\r\n      scalaTarget <- toScalaTarget(target) \r\n    } yield scalaTarget\r\n```\r\n\r\nI think this looks a bit nicer and that's the currently preffered style.",
        "createdAt" : "2020-07-22T10:21:38Z",
        "updatedAt" : "2020-07-31T11:55:17Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "297fae80-c1b0-4e38-bc6b-6a27fc0425d9",
        "parentId" : "bc8fc341-e258-40d3-bce8-1d9c9e8630ef",
        "author" : {
          "login" : "dos65",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/5816952?u=801a9faa2796a46c371c28cc181e0fa6abbb7132&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2020-07-24T16:09:28Z",
        "updatedAt" : "2020-07-31T11:55:17Z",
        "lastEditedBy" : {
          "login" : "dos65",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/5816952?u=801a9faa2796a46c371c28cc181e0fa6abbb7132&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "581858e1-dd5a-4da4-a2af-ae7db3fe57a6",
        "parentId" : "bc8fc341-e258-40d3-bce8-1d9c9e8630ef",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Did you push the change? Or is it still showing me old code? Having weird issues with Github recenly.",
        "createdAt" : "2020-07-27T12:52:30Z",
        "updatedAt" : "2020-07-31T11:55:17Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b33064fc-8a10-4ff1-886d-f09beb1ff7b8",
        "parentId" : "bc8fc341-e258-40d3-bce8-1d9c9e8630ef",
        "author" : {
          "login" : "dos65",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/5816952?u=801a9faa2796a46c371c28cc181e0fa6abbb7132&v=4"
        },
        "body" : "Now it's changed.\r\n\r\nActually, it was me who forgot to push that, Github is innocent )",
        "createdAt" : "2020-07-27T17:29:08Z",
        "updatedAt" : "2020-07-31T11:55:17Z",
        "lastEditedBy" : {
          "login" : "dos65",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/5816952?u=801a9faa2796a46c371c28cc181e0fa6abbb7132&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1ecc085ce9f65d042e2055d19fd627c5d49e7918",
    "line" : null,
    "diffHunk" : "@@ -101,18 +107,20 @@ final class BuildTargets() {\n   def allBuildTargetIds: Seq[BuildTargetIdentifier] =\n     all.toSeq.map(_.info.getId())\n   def all: Iterator[ScalaTarget] =\n-    for {\n-      (id, target) <- buildTargetInfo.iterator\n-      scalac <- scalacTargetInfo.get(id)\n-      scalaTarget <- target.asScalaBuildTarget\n-    } yield ScalaTarget(target, scalaTarget, scalac)\n+    buildTargetInfo.iterator.flatMap({ case (_, bt) => toScalaTarget(bt) })"
  },
  {
    "id" : "a1be6f13-70d6-41cf-b666-dacf04bcd2bc",
    "prId" : 1865,
    "comments" : [
      {
        "id" : "7d40f88d-9151-48d5-80ed-78c136932b72",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Do we return the right sbt target for the Scala files located in `project` directories? I think if Bloop doesn't provide use with proper source roots we could add a custom logic for resolving target by source file in `inverseSources`. If no build target is found we can look if this file should belong to an sbt build target. What do you think?",
        "createdAt" : "2020-07-27T13:01:46Z",
        "updatedAt" : "2020-07-31T11:55:17Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6cf3f67c-0675-4bb6-a2db-07343d61143d",
        "parentId" : "7d40f88d-9151-48d5-80ed-78c136932b72",
        "author" : {
          "login" : "dos65",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/5816952?u=801a9faa2796a46c371c28cc181e0fa6abbb7132&v=4"
        },
        "body" : "This method is only for `.*sbt` files.\r\nFor `*.scala` files from meta build `inverseSources` is used as usual.\r\n\r\nI think when we start implementing compilation for `.*sbt` files it would be better to move this logic into `inverseSources` method. But for now, I'm not sure if there is a need for that.\r\n",
        "createdAt" : "2020-07-27T17:24:04Z",
        "updatedAt" : "2020-07-31T11:55:17Z",
        "lastEditedBy" : {
          "login" : "dos65",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/5816952?u=801a9faa2796a46c371c28cc181e0fa6abbb7132&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1ecc085ce9f65d042e2055d19fd627c5d49e7918",
    "line" : 72,
    "diffHunk" : "@@ -226,6 +237,28 @@ final class BuildTargets() {\n   ): Option[ScalacOptionsItem] =\n     scalacTargetInfo.get(buildTarget)\n \n+  /**\n+   * Returns meta build target for `*.sbt`  files.\n+   * It selects build target by directory of its connection\n+   *   because `*.sbt` aren't included in `sourceFiles` set\n+   */\n+  def sbtBuildScalaTarget(file: AbsolutePath): Option[ScalaTarget] = {"
  },
  {
    "id" : "8d5575b9-3e43-4da3-9c4c-eaacdc2468ee",
    "prId" : 1989,
    "comments" : [
      {
        "id" : "883f5ae8-260f-46d9-b552-0992a255ff46",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "This was not actually used anywhere. `sourceItemsToBuildTarget` is used for the same exact purpose.",
        "createdAt" : "2020-08-12T16:47:35Z",
        "updatedAt" : "2020-08-12T16:47:36Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6f07f0ec0ac3ad34663a0090bdbf6feb85a07326",
    "line" : 12,
    "diffHunk" : "@@ -52,8 +53,6 @@ final class BuildTargets(\n     TrieMap.empty[AbsolutePath, BuildTargetIdentifier]\n   private val isSourceRoot =\n     ConcurrentHashSet.empty[AbsolutePath]\n-  private val buildTargetInference ="
  }
]