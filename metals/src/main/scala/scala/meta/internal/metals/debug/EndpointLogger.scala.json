[
  {
    "id" : "15d15066-716c-490f-9f6c-23816c214c74",
    "prId" : 1023,
    "comments" : [
      {
        "id" : "56979f34-9aa9-471b-b082-4867e62472c0",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Does it work with the inspector tool? It would be nice to keep it compatible.",
        "createdAt" : "2019-10-28T10:23:48Z",
        "updatedAt" : "2019-10-28T10:23:48Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2f516e7d-a417-4c5c-97eb-0f9915a1d822",
        "parentId" : "56979f34-9aa9-471b-b082-4867e62472c0",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Sadly, no - the format is too much of a hassle to implement it manually. Reusing the implementation present in the `lsp4j.jsonrpc` library is also not viable because it is tightly coupled with their launcher implementation.\r\n\r\nAt one point we might want to change the format to accomodate the inspector but let's delay it for now as it is better to have some logs than none at all.",
        "createdAt" : "2019-10-30T09:29:02Z",
        "updatedAt" : "2019-10-30T09:29:03Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "bea61421ff9c77d2973dbb3c90e1997b6fba3a14",
    "line" : 40,
    "diffHunk" : "@@ -0,0 +1,72 @@\n+package scala.meta.internal.metals.debug\n+\n+import java.io.PrintWriter\n+import java.time.Clock\n+import java.time.format.DateTimeFormatter\n+import java.util.Collections\n+import java.util.function.Consumer\n+import com.google.gson.GsonBuilder\n+import org.eclipse.lsp4j.jsonrpc.MessageConsumer\n+import org.eclipse.lsp4j.jsonrpc.debug.json.DebugMessageJsonHandler\n+import org.eclipse.lsp4j.jsonrpc.json.MessageJsonHandler\n+import org.eclipse.lsp4j.jsonrpc.messages.Message\n+import org.eclipse.lsp4j.jsonrpc.messages.NotificationMessage\n+import org.eclipse.lsp4j.jsonrpc.messages.RequestMessage\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseMessage\n+import scala.meta.internal.metals.debug.EndpointLogger.Direction\n+import scala.meta.internal.metals.debug.EndpointLogger.Received\n+import scala.meta.internal.metals.debug.EndpointLogger.Sent\n+import scala.meta.internal.metals.debug.EndpointLogger.time\n+\n+final class EndpointLogger(endpoint: RemoteEndpoint, logger: PrintWriter)\n+    extends RemoteEndpoint {\n+  private val writer: MessageJsonHandler = EndpointLogger.serializer\n+\n+  override def consume(message: Message): Unit = {\n+    try log(Sent, message)\n+    finally endpoint.consume(message)\n+  }\n+\n+  override def listen(messageConsumer: MessageConsumer): Unit = {\n+    endpoint.listen { message =>\n+      try log(Received, message)\n+      finally messageConsumer.consume(message)\n+    }\n+  }\n+\n+  override def cancel(): Unit = endpoint.cancel()\n+\n+  private def log(direction: Direction, message: Message): Unit = {\n+    logger.println(s\"[Trace][$time] $direction ${typeOf(message)}:\")"
  }
]