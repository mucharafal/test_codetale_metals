[
  {
    "id" : "a0184f8c-cf59-470f-8aae-c4166c72b52f",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "7f32af64-f4b6-45a1-a2df-ad5c44d5ebda",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "nit: for consistency with logging statements in the codebase\r\n```suggestion\r\n      scribe.warn(s\"no definition for symbol: $symbolBase)\r\n```",
        "createdAt" : "2019-12-16T11:08:02Z",
        "updatedAt" : "2019-12-18T11:36:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "04ef30f47759c2620cd886265e4c50169245a539",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,53 @@\n+package scala.meta.internal.metals.debug\n+\n+import ch.epfl.scala.bsp4j.BuildTargetIdentifier\n+import org.eclipse.lsp4j.debug.Source\n+import scala.meta.internal.metals.BuildTargets\n+import scala.meta.internal.metals.DefinitionProvider\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.io.AbsolutePath\n+\n+final class SourcePathProvider(\n+    definitionProvider: DefinitionProvider,\n+    buildTargets: BuildTargets,\n+    targets: List[BuildTargetIdentifier]\n+) {\n+  def findPathFor(source: Source): Option[AbsolutePath] = {\n+    if (source == null) None\n+    else {\n+      searchAsClassPathSymbol(source).orElse(searchAsSourceFile(source))\n+    }\n+  }\n+\n+  private def searchAsClassPathSymbol(source: Source): Option[AbsolutePath] = {\n+    val symbolBase = source.getPath\n+      .stripSuffix(\".scala\")\n+      .stripSuffix(\".java\")\n+      .replace(\"\\\\\", \"/\") // adapt windows paths to the expected format\n+\n+    val symbols = for {\n+      symbol <- Set(symbolBase + \".\", symbolBase + \"#\")\n+      definition <- definitionProvider.fromSymbol(symbol).asScala\n+    } yield definition.getUri.toAbsolutePath\n+\n+    if (symbols.isEmpty) {\n+      scribe.warn(s\"No matching symbol on the classpath for [$symbolBase]\")"
  },
  {
    "id" : "6e85e0c9-5bb0-49b8-a840-31c3af64bf42",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "c09da46c-0a7d-4b60-94a5-1e967be2f394",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "```suggestion\r\n      scribe.warn(s\"no matching source file: $source\")\r\n```",
        "createdAt" : "2019-12-16T11:08:13Z",
        "updatedAt" : "2019-12-18T11:36:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "04ef30f47759c2620cd886265e4c50169245a539",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,53 @@\n+package scala.meta.internal.metals.debug\n+\n+import ch.epfl.scala.bsp4j.BuildTargetIdentifier\n+import org.eclipse.lsp4j.debug.Source\n+import scala.meta.internal.metals.BuildTargets\n+import scala.meta.internal.metals.DefinitionProvider\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.io.AbsolutePath\n+\n+final class SourcePathProvider(\n+    definitionProvider: DefinitionProvider,\n+    buildTargets: BuildTargets,\n+    targets: List[BuildTargetIdentifier]\n+) {\n+  def findPathFor(source: Source): Option[AbsolutePath] = {\n+    if (source == null) None\n+    else {\n+      searchAsClassPathSymbol(source).orElse(searchAsSourceFile(source))\n+    }\n+  }\n+\n+  private def searchAsClassPathSymbol(source: Source): Option[AbsolutePath] = {\n+    val symbolBase = source.getPath\n+      .stripSuffix(\".scala\")\n+      .stripSuffix(\".java\")\n+      .replace(\"\\\\\", \"/\") // adapt windows paths to the expected format\n+\n+    val symbols = for {\n+      symbol <- Set(symbolBase + \".\", symbolBase + \"#\")\n+      definition <- definitionProvider.fromSymbol(symbol).asScala\n+    } yield definition.getUri.toAbsolutePath\n+\n+    if (symbols.isEmpty) {\n+      scribe.warn(s\"No matching symbol on the classpath for [$symbolBase]\")\n+    }\n+\n+    symbols.headOption\n+  }\n+\n+  private def searchAsSourceFile(source: Source): Option[AbsolutePath] = {\n+    val files = for {\n+      target <- targets.view\n+      sourceFile <- buildTargets.buildTargetSources(target)\n+      if sourceFile.filename == source.getName\n+    } yield sourceFile\n+\n+    if (files.isEmpty) {\n+      scribe.warn(s\"No matching source file for $source\")"
  },
  {
    "id" : "fbbb4c6d-9336-456e-a9a2-61105c69355a",
    "prId" : 1208,
    "comments" : [
      {
        "id" : "b2884451-9101-4e30-ab08-071585a3c72c",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Should we use this instead?\r\nhttps://github.com/scalameta/metals/blob/59ca771c9d1c1f3ca3d34df0be84215bc86e4a40/metals/src/main/scala/scala/meta/internal/metals/MetalsEnrichments.scala#L257",
        "createdAt" : "2019-12-19T13:18:08Z",
        "updatedAt" : "2019-12-19T13:18:23Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "668cbfd7b9229828fe2d247981cfd38999f65c6e",
    "line" : 4,
    "diffHunk" : "@@ -12,6 +12,10 @@ final class SourcePathProvider(\n     buildTargets: BuildTargets,\n     targets: List[BuildTargetIdentifier]\n ) {\n+  def isWorkspacePath(path: AbsolutePath): Boolean = {"
  }
]