[
  {
    "id" : "b81764f4-b6b2-489c-a523-ce7b03460992",
    "prId" : 534,
    "comments" : [
      {
        "id" : "cd64d1b4-249b-4602-b78d-03b7394d6e9b",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Is it possible to do this in a single query by using joins?",
        "createdAt" : "2019-02-22T10:39:32Z",
        "updatedAt" : "2019-02-24T16:00:43Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4c991c6f-b820-4f24-ac7d-34356a38a106",
        "parentId" : "cd64d1b4-249b-4602-b78d-03b7394d6e9b",
        "author" : {
          "login" : "mudsam",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/10428653?v=4"
        },
        "body" : "Will do, my nosql-damaged brain didn't even consider a join",
        "createdAt" : "2019-02-22T13:01:24Z",
        "updatedAt" : "2019-02-24T16:00:43Z",
        "lastEditedBy" : {
          "login" : "mudsam",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/10428653?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ab6a7a27-85f8-4be3-b65f-1b0e804e445f",
        "parentId" : "cd64d1b4-249b-4602-b78d-03b7394d6e9b",
        "author" : {
          "login" : "mudsam",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/10428653?v=4"
        },
        "body" : "Left outer join added, only one query now.",
        "createdAt" : "2019-02-23T20:11:26Z",
        "updatedAt" : "2019-02-24T16:00:43Z",
        "lastEditedBy" : {
          "login" : "mudsam",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/10428653?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "68a865709d6bc7d432ff4ffaa2fe1eac07d7409a",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,111 @@\n+package scala.meta.internal.metals\n+\n+import java.nio.file.Files\n+import java.nio.file.attribute.BasicFileAttributeView\n+import java.sql.{Connection, PreparedStatement, Statement}\n+\n+import scala.collection.concurrent.TrieMap\n+import scala.meta.internal.io.PlatformFileIO\n+import scala.meta.internal.metals.JdbcEnrichments._\n+import scala.meta.io.AbsolutePath\n+\n+/**\n+ * Handles caching of Jar Top Level Symbols in H2\n+ *\n+ * Wrapper around the indexed_jar and toplevel_symbol sql tables.\n+ */\n+final class JarTopLevels(conn: () => Connection) {\n+\n+  /**\n+   * Retrieves top level Scala symbols of a jar from H2\n+   *\n+   * @param path absolute path of the jar\n+   * @param digest MD5 digest of the jar\n+   * @return the top level Scala symbols in the jar\n+   */\n+  def getTopLevels(\n+      path: AbsolutePath\n+  ): Option[TrieMap[String, AbsolutePath]] = {\n+    val fs = PlatformFileIO.newJarFileSystem(path, create = false)\n+    conn()\n+      .query(\n+        \"select id from indexed_jar where path=? and last_modified=? and size=?\"\n+      ) { q =>\n+        val attributes = getAttributes(path)\n+        q.setString(1, path.toString)\n+        q.setLong(2, attributes.lastModifiedTime().toMillis)\n+        q.setLong(3, attributes.size())\n+      } { _.getInt(1) }\n+      .map { jar =>\n+        val toplevels = TrieMap[String, AbsolutePath]()\n+        conn().query(\n+          \"select symbol, path from toplevel_symbol where jar=?\""
  },
  {
    "id" : "9a3ea507-70d6-44d3-871d-1eef5a0bf409",
    "prId" : 534,
    "comments" : [
      {
        "id" : "34580fa7-5f5a-49cc-aaa6-1804e77af9f5",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Nice 👍 ",
        "createdAt" : "2019-02-22T10:40:05Z",
        "updatedAt" : "2019-02-24T16:00:43Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "68a865709d6bc7d432ff4ffaa2fe1eac07d7409a",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,111 @@\n+package scala.meta.internal.metals\n+\n+import java.nio.file.Files\n+import java.nio.file.attribute.BasicFileAttributeView\n+import java.sql.{Connection, PreparedStatement, Statement}\n+\n+import scala.collection.concurrent.TrieMap\n+import scala.meta.internal.io.PlatformFileIO\n+import scala.meta.internal.metals.JdbcEnrichments._\n+import scala.meta.io.AbsolutePath\n+\n+/**\n+ * Handles caching of Jar Top Level Symbols in H2\n+ *\n+ * Wrapper around the indexed_jar and toplevel_symbol sql tables.\n+ */\n+final class JarTopLevels(conn: () => Connection) {\n+\n+  /**\n+   * Retrieves top level Scala symbols of a jar from H2\n+   *\n+   * @param path absolute path of the jar\n+   * @param digest MD5 digest of the jar\n+   * @return the top level Scala symbols in the jar\n+   */\n+  def getTopLevels(\n+      path: AbsolutePath\n+  ): Option[TrieMap[String, AbsolutePath]] = {\n+    val fs = PlatformFileIO.newJarFileSystem(path, create = false)\n+    conn()\n+      .query(\n+        \"select id from indexed_jar where path=? and last_modified=? and size=?\"\n+      ) { q =>\n+        val attributes = getAttributes(path)\n+        q.setString(1, path.toString)\n+        q.setLong(2, attributes.lastModifiedTime().toMillis)\n+        q.setLong(3, attributes.size())\n+      } { _.getInt(1) }\n+      .map { jar =>\n+        val toplevels = TrieMap[String, AbsolutePath]()\n+        conn().query(\n+          \"select symbol, path from toplevel_symbol where jar=?\"\n+        )(q => q.setInt(1, jar)) { rs =>\n+          toplevels(rs.getString(1)) = AbsolutePath(fs.getPath(rs.getString(2)))\n+        }\n+        toplevels\n+      }\n+      .headOption\n+  }\n+\n+  /**\n+   * Stores the top level symbols for the Jar in H2\n+   *\n+   * @param path absolute path of the jar\n+   * @param digest MD5 digest of the jar\n+   * @param toplevels toplevel symbols in the jar\n+   * @return the number of toplevel symbols inserted\n+   */\n+  def putTopLevels(\n+      path: AbsolutePath,\n+      toplevels: TrieMap[String, AbsolutePath]\n+  ): Int = {\n+    // Add jar to H2\n+    var jarStmt: PreparedStatement = null\n+    val jar = try {\n+      jarStmt = conn().prepareStatement(\n+        s\"insert into indexed_jar (path, last_modified, size) values (?, ?, ?)\",\n+        Statement.RETURN_GENERATED_KEYS\n+      )\n+      val attributes = getAttributes(path)\n+      jarStmt.setString(1, path.toString)\n+      jarStmt.setLong(2, attributes.lastModifiedTime().toMillis)\n+      jarStmt.setLong(3, attributes.size())\n+      jarStmt.executeUpdate()\n+      val rs = jarStmt.getGeneratedKeys\n+      rs.next()\n+      rs.getInt(\"id\")\n+    } finally {\n+      if (jarStmt != null) jarStmt.close()\n+    }\n+\n+    // Add symbols for jar to H2\n+    // Turn off auto commit to speed up batch execution"
  },
  {
    "id" : "cc01620f-8711-45d6-8069-42acad8b1da2",
    "prId" : 534,
    "comments" : [
      {
        "id" : "8cb52c62-1a8c-4d1e-bc0c-f8a6b669ef76",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Do we clean up unused entries? It would be good if we garbage collect dead indexes. It might be simpler to implement that if we store a single id for each jar entry (instead of `path, last_modified, size`), then we could cascade drop entries that are not in the last build import.",
        "createdAt" : "2019-02-22T15:37:29Z",
        "updatedAt" : "2019-02-24T16:00:43Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e8408741-c309-4da9-9b25-b036050d8b66",
        "parentId" : "8cb52c62-1a8c-4d1e-bc0c-f8a6b669ef76",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "the single ID can be a concatenation or checksum of the three values",
        "createdAt" : "2019-02-22T15:37:54Z",
        "updatedAt" : "2019-02-24T16:00:43Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "76cf4509-eeb7-40f7-9a16-5d92c8303616",
        "parentId" : "8cb52c62-1a8c-4d1e-bc0c-f8a6b669ef76",
        "author" : {
          "login" : "mudsam",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/10428653?v=4"
        },
        "body" : "So you want me collect all Jars that are part of the build during indexing and then at the end of indexing drop the ones that aren't.",
        "createdAt" : "2019-02-22T19:12:53Z",
        "updatedAt" : "2019-02-24T16:00:43Z",
        "lastEditedBy" : {
          "login" : "mudsam",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/10428653?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "97627bed-fc12-434d-8de0-f093377bb5bc",
        "parentId" : "8cb52c62-1a8c-4d1e-bc0c-f8a6b669ef76",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I think that would be good if we can implement it. ",
        "createdAt" : "2019-02-22T19:40:25Z",
        "updatedAt" : "2019-02-24T16:00:43Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c611484d-e13c-4a4f-aadb-802dc7c9bc4d",
        "parentId" : "8cb52c62-1a8c-4d1e-bc0c-f8a6b669ef76",
        "author" : {
          "login" : "mudsam",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/10428653?v=4"
        },
        "body" : "Unused Jars/Toplevels are removed from cache after indexing now.",
        "createdAt" : "2019-02-23T20:12:13Z",
        "updatedAt" : "2019-02-24T16:00:43Z",
        "lastEditedBy" : {
          "login" : "mudsam",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/10428653?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "68a865709d6bc7d432ff4ffaa2fe1eac07d7409a",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,111 @@\n+package scala.meta.internal.metals\n+\n+import java.nio.file.Files\n+import java.nio.file.attribute.BasicFileAttributeView\n+import java.sql.{Connection, PreparedStatement, Statement}\n+\n+import scala.collection.concurrent.TrieMap\n+import scala.meta.internal.io.PlatformFileIO\n+import scala.meta.internal.metals.JdbcEnrichments._\n+import scala.meta.io.AbsolutePath\n+\n+/**\n+ * Handles caching of Jar Top Level Symbols in H2\n+ *\n+ * Wrapper around the indexed_jar and toplevel_symbol sql tables.\n+ */\n+final class JarTopLevels(conn: () => Connection) {\n+\n+  /**\n+   * Retrieves top level Scala symbols of a jar from H2\n+   *\n+   * @param path absolute path of the jar\n+   * @param digest MD5 digest of the jar\n+   * @return the top level Scala symbols in the jar\n+   */\n+  def getTopLevels(\n+      path: AbsolutePath\n+  ): Option[TrieMap[String, AbsolutePath]] = {\n+    val fs = PlatformFileIO.newJarFileSystem(path, create = false)\n+    conn()\n+      .query(\n+        \"select id from indexed_jar where path=? and last_modified=? and size=?\"\n+      ) { q =>\n+        val attributes = getAttributes(path)\n+        q.setString(1, path.toString)\n+        q.setLong(2, attributes.lastModifiedTime().toMillis)\n+        q.setLong(3, attributes.size())\n+      } { _.getInt(1) }\n+      .map { jar =>\n+        val toplevels = TrieMap[String, AbsolutePath]()\n+        conn().query(\n+          \"select symbol, path from toplevel_symbol where jar=?\"\n+        )(q => q.setInt(1, jar)) { rs =>\n+          toplevels(rs.getString(1)) = AbsolutePath(fs.getPath(rs.getString(2)))\n+        }\n+        toplevels\n+      }\n+      .headOption\n+  }\n+\n+  /**\n+   * Stores the top level symbols for the Jar in H2\n+   *\n+   * @param path absolute path of the jar\n+   * @param digest MD5 digest of the jar\n+   * @param toplevels toplevel symbols in the jar\n+   * @return the number of toplevel symbols inserted\n+   */\n+  def putTopLevels(\n+      path: AbsolutePath,\n+      toplevels: TrieMap[String, AbsolutePath]\n+  ): Int = {\n+    // Add jar to H2\n+    var jarStmt: PreparedStatement = null\n+    val jar = try {\n+      jarStmt = conn().prepareStatement(\n+        s\"insert into indexed_jar (path, last_modified, size) values (?, ?, ?)\","
  },
  {
    "id" : "29b7071b-f40d-45a2-a0f7-f92e5b01673e",
    "prId" : 534,
    "comments" : [
      {
        "id" : "8e75143b-276c-475b-8619-fbadd1ad403c",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "What happens for foreign key references in `toplevel_symbol`? Does h2 support cascade deletes?",
        "createdAt" : "2019-02-24T13:11:20Z",
        "updatedAt" : "2019-02-24T16:00:43Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9fab1811-86ae-44d2-aa14-28e25ec32291",
        "parentId" : "8e75143b-276c-475b-8619-fbadd1ad403c",
        "author" : {
          "login" : "mudsam",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/10428653?v=4"
        },
        "body" : "H2 support cascade deletes, when the jar entry in indexex_jar is deleted, the entries in toplevel_symbol entries referencing that jar will go as well.",
        "createdAt" : "2019-02-24T15:10:39Z",
        "updatedAt" : "2019-02-24T16:00:43Z",
        "lastEditedBy" : {
          "login" : "mudsam",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/10428653?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "422426fe-ce6a-4208-b18c-651b471f3614",
        "parentId" : "8e75143b-276c-475b-8619-fbadd1ad403c",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "@olafurpg see for reference https://github.com/scalameta/metals/pull/534/files#diff-d0c092f838650407c2e87cb728cd09baR11",
        "createdAt" : "2019-02-24T16:38:31Z",
        "updatedAt" : "2019-02-24T16:38:31Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "68a865709d6bc7d432ff4ffaa2fe1eac07d7409a",
    "line" : 102,
    "diffHunk" : "@@ -0,0 +1,118 @@\n+package scala.meta.internal.metals\n+\n+import java.nio.file.Files\n+import java.nio.file.attribute.BasicFileAttributeView\n+import java.sql.{Connection, PreparedStatement, Statement}\n+\n+import scala.collection.concurrent.TrieMap\n+import scala.meta.internal.io.PlatformFileIO\n+import scala.meta.internal.metals.JdbcEnrichments._\n+import scala.meta.io.AbsolutePath\n+import scala.meta.internal.mtags.MD5\n+\n+/**\n+ * Handles caching of Jar Top Level Symbols in H2\n+ *\n+ * Wrapper around the indexed_jar and toplevel_symbol sql tables.\n+ */\n+final class JarTopLevels(conn: () => Connection) {\n+\n+  /**\n+   * Retrieves top level Scala symbols of a jar from H2\n+   *\n+   * @param path absolute path of the jar\n+   * @return the top level Scala symbols in the jar\n+   */\n+  def getTopLevels(\n+      path: AbsolutePath\n+  ): Option[TrieMap[String, AbsolutePath]] = {\n+    val fs = PlatformFileIO.newJarFileSystem(path, create = false)\n+    val toplevels = TrieMap[String, AbsolutePath]()\n+    conn()\n+      .query(\n+        \"\"\"select ts.symbol, ts.path\n+          |from indexed_jar ij\n+          |left join toplevel_symbol ts\n+          |on ij.id=ts.jar\n+          |where ij.md5=?\"\"\".stripMargin\n+      ) { _.setString(1, getMD5Digest(path)) } { rs =>\n+        if (rs.getString(1) != null && rs.getString(2) != null)\n+          toplevels(rs.getString(1)) = AbsolutePath(fs.getPath(rs.getString(2)))\n+      }\n+      .headOption\n+      .map(_ => toplevels)\n+  }\n+\n+  /**\n+   * Stores the top level symbols for the Jar\n+   *\n+   * @param path absolute path of the jar\n+   * @param toplevels toplevel symbols in the jar\n+   * @return the number of toplevel symbols inserted\n+   */\n+  def putTopLevels(\n+      path: AbsolutePath,\n+      toplevels: TrieMap[String, AbsolutePath]\n+  ): Int = {\n+    // Add jar to H2\n+    var jarStmt: PreparedStatement = null\n+    val jar = try {\n+      jarStmt = conn().prepareStatement(\n+        s\"insert into indexed_jar (md5) values (?)\",\n+        Statement.RETURN_GENERATED_KEYS\n+      )\n+      jarStmt.setString(1, getMD5Digest(path))\n+      jarStmt.executeUpdate()\n+      val rs = jarStmt.getGeneratedKeys\n+      rs.next()\n+      rs.getInt(\"id\")\n+    } finally {\n+      if (jarStmt != null) jarStmt.close()\n+    }\n+\n+    // Add symbols for jar to H2\n+    var symbolStmt: PreparedStatement = null\n+    try {\n+      symbolStmt = conn().prepareStatement(\n+        s\"insert into toplevel_symbol (symbol, path, jar) values (?, ?, ?)\"\n+      )\n+      toplevels.foreach {\n+        case (symbol, source) =>\n+          symbolStmt.setString(1, symbol)\n+          symbolStmt.setString(2, source.toString)\n+          symbolStmt.setInt(3, jar)\n+          symbolStmt.addBatch()\n+      }\n+      // Return number of rows inserted\n+      symbolStmt.executeBatch().sum\n+    } finally {\n+      if (symbolStmt != null) symbolStmt.close()\n+    }\n+  }\n+\n+  /**\n+   * Delete the jars that are not used and their top level symbols\n+   *\n+   * @param usedPaths paths of the used Jars\n+   * @return number of jars deleted\n+   */\n+  def deleteNotUsedTopLevels(usedPaths: Array[AbsolutePath]): Int = {\n+    val md5s = usedPaths.map(getMD5Digest).map(\"'\" + _ + \"'\").mkString(\",\")\n+    conn().update {\n+      s\"delete from indexed_jar where md5 not in ($md5s)\""
  }
]