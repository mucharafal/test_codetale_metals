[
  {
    "id" : "862ae3a7-a48a-47ce-97ad-afc7d4259f6a",
    "prId" : 1487,
    "comments" : [
      {
        "id" : "501551ce-e592-4d02-b20b-f27e3717a022",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "This should be lazy if possible",
        "createdAt" : "2020-03-17T19:01:10Z",
        "updatedAt" : "2020-03-24T16:45:28Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1b829286-985c-457a-b027-a7ce3ff6a2b1",
        "parentId" : "501551ce-e592-4d02-b20b-f27e3717a022",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "changed as discussed",
        "createdAt" : "2020-03-19T14:42:47Z",
        "updatedAt" : "2020-03-24T16:45:28Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "55838e6c9f4127bc8d06a8d31a6df496a0b729a8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,126 @@\n+package scala.meta.internal.metals.codelenses\n+\n+import java.util.Collections.singletonList\n+import org.eclipse.{lsp4j => l}\n+import scala.collection.{mutable => m}\n+import scala.meta.internal.implementation.GlobalClassTable\n+import scala.meta.internal.implementation.ImplementationProvider\n+import scala.meta.internal.implementation.SuperMethodProvider\n+import scala.meta.internal.implementation.SymbolWithAsSeenFrom\n+import scala.meta.internal.implementation.TextDocumentWithPath\n+import scala.meta.internal.metals.Buffers\n+import scala.meta.internal.metals.BuildTargets\n+import scala.meta.internal.metals.MetalsServerConfig\n+import scala.meta.internal.metals.ServerCommands\n+import scala.meta.internal.metals.TokenEditDistance\n+import scala.meta.internal.metals.UserConfiguration\n+import scala.meta.internal.semanticdb.SymbolInformation\n+import scala.meta.internal.semanticdb.SymbolOccurrence\n+import scala.meta.internal.semanticdb.TextDocument\n+import scala.meta.internal.symtab.GlobalSymbolTable\n+import scala.meta.io.AbsolutePath\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.metals.codelenses.SuperMethodLensesProvider.LensGoSuperCache\n+import scala.meta.internal.metals.codelenses.SuperMethodLensesProvider.emptyLensGoSuperCache\n+\n+final class SuperMethodLensesProvider(\n+    implementationProvider: ImplementationProvider,\n+    buffers: Buffers,\n+    buildTargets: BuildTargets,\n+    userConfig: () => UserConfiguration,\n+    config: MetalsServerConfig\n+) extends CodeLenses {\n+\n+  override def isEnabled: Boolean = userConfig().superMethodLensesEnabled\n+\n+  override def codeLenses(\n+      textDocumentWithPath: TextDocumentWithPath\n+  ): Seq[l.CodeLens] = {\n+    val textDocument = textDocumentWithPath.textDocument\n+    val path = textDocumentWithPath.filePath\n+\n+    val search =\n+      makeSymbolSearchMethod(\n+        makeGlobalClassTable(textDocumentWithPath.filePath),"
  },
  {
    "id" : "c86092d0-66cb-4409-9271-206f366dda61",
    "prId" : 1487,
    "comments" : [
      {
        "id" : "25d60e8c-e8a0-4449-b5ad-5bf829a7e48c",
        "parentId" : null,
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "removed this as `enabled` is checked in other place, this is old check which I forgot to remove",
        "createdAt" : "2020-03-18T08:37:15Z",
        "updatedAt" : "2020-03-24T16:45:28Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "55838e6c9f4127bc8d06a8d31a6df496a0b729a8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,126 @@\n+package scala.meta.internal.metals.codelenses\n+\n+import java.util.Collections.singletonList\n+import org.eclipse.{lsp4j => l}\n+import scala.collection.{mutable => m}\n+import scala.meta.internal.implementation.GlobalClassTable\n+import scala.meta.internal.implementation.ImplementationProvider\n+import scala.meta.internal.implementation.SuperMethodProvider\n+import scala.meta.internal.implementation.SymbolWithAsSeenFrom\n+import scala.meta.internal.implementation.TextDocumentWithPath\n+import scala.meta.internal.metals.Buffers\n+import scala.meta.internal.metals.BuildTargets\n+import scala.meta.internal.metals.MetalsServerConfig\n+import scala.meta.internal.metals.ServerCommands\n+import scala.meta.internal.metals.TokenEditDistance\n+import scala.meta.internal.metals.UserConfiguration\n+import scala.meta.internal.semanticdb.SymbolInformation\n+import scala.meta.internal.semanticdb.SymbolOccurrence\n+import scala.meta.internal.semanticdb.TextDocument\n+import scala.meta.internal.symtab.GlobalSymbolTable\n+import scala.meta.io.AbsolutePath\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.metals.codelenses.SuperMethodLensesProvider.LensGoSuperCache\n+import scala.meta.internal.metals.codelenses.SuperMethodLensesProvider.emptyLensGoSuperCache\n+\n+final class SuperMethodLensesProvider(\n+    implementationProvider: ImplementationProvider,\n+    buffers: Buffers,\n+    buildTargets: BuildTargets,\n+    userConfig: () => UserConfiguration,\n+    config: MetalsServerConfig\n+) extends CodeLenses {\n+\n+  override def isEnabled: Boolean = userConfig().superMethodLensesEnabled\n+\n+  override def codeLenses(\n+      textDocumentWithPath: TextDocumentWithPath\n+  ): Seq[l.CodeLens] = {\n+    val textDocument = textDocumentWithPath.textDocument\n+    val path = textDocumentWithPath.filePath\n+\n+    val search =\n+      makeSymbolSearchMethod(\n+        makeGlobalClassTable(textDocumentWithPath.filePath),\n+        textDocumentWithPath.textDocument\n+      )\n+    val distance =\n+      TokenEditDistance.fromBuffer(path, textDocument.text, buffers)\n+\n+    for {\n+      occurrence <- textDocument.occurrences\n+      if occurrence.role.isDefinition\n+      symbol = occurrence.symbol\n+      gotoSuperMethod <- createSuperMethodCommand(\n+        textDocumentWithPath,\n+        symbol,\n+        occurrence.role,\n+        emptyLensGoSuperCache(),\n+        search\n+      ).toIterable\n+      range <- occurrence.range\n+        .flatMap(r => distance.toRevised(r.toLSP))\n+        .toList\n+    } yield new l.CodeLens(range, gotoSuperMethod, null)\n+  }\n+\n+  private def createSuperMethodCommand(\n+      docWithPath: TextDocumentWithPath,\n+      symbol: String,\n+      role: SymbolOccurrence.Role,\n+      cache: LensGoSuperCache,\n+      findSymbol: String => Option[SymbolInformation]\n+  ): Option[l.Command] = {\n+    if (userConfig().superMethodLensesEnabled) {"
  }
]