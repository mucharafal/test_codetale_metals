[
  {
    "id" : "822cfcad-41ff-4807-90a2-805607eed73a",
    "prId" : 424,
    "comments" : [
      {
        "id" : "83cc648f-cfa9-4acd-800f-1aecc794cac7",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I'm abusing a `LinkedBlockingQueue` to implement a LRU cache.\r\n\r\nI didn't want to bring in additional dependencies, but I'm thinking to implement one myself.\r\nWdyt @olafurpg?\r\n\r\n(the other obvious solution is to limit ourselves to 1 snapshot at the time, but it kinda sucks if you switch between two open non-parsing buffers)",
        "createdAt" : "2018-12-18T10:37:14Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d30775e8-5eca-402b-8d03-62ab23d93f49",
        "parentId" : "83cc648f-cfa9-4acd-800f-1aecc794cac7",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "> the other obvious solution is to limit ourselves to 1 snapshot at the time, but it kinda sucks if you switch between two open non-parsing buffers\r\n\r\nThat's true, I was gonna suggest to limit it to one file. Instead we can keep `Map[Path, DocumentSymbol]` and remove entries on `didClose`",
        "createdAt" : "2018-12-18T11:03:18Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "82a6e20c-ef40-4b6a-a440-c3e306f67b3b",
        "parentId" : "83cc648f-cfa9-4acd-800f-1aecc794cac7",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I've just pushed a commit that uses `removeEldestEntry` from `LinkedHashMap` to implement a LRU cache.",
        "createdAt" : "2018-12-18T11:07:01Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b57dd6f7-7192-4970-adcc-981d39e6897b",
        "parentId" : "83cc648f-cfa9-4acd-800f-1aecc794cac7",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I think it's better to remove entries based on `textDocument/didClose` notifications so we don't have to pick a magic number.",
        "createdAt" : "2018-12-18T11:11:30Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "21ce9cef-48d1-49e5-abce-e0d4169cfb5b",
        "parentId" : "83cc648f-cfa9-4acd-800f-1aecc794cac7",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "👍 I'll implement it that way (I wanted to limit the moving parts of `DocumentSymbolProvider`, but I'm uneasy with the magic number too)",
        "createdAt" : "2018-12-18T11:12:30Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c46a7934-4b02-4d55-9ffc-5dc99ea24afc",
        "parentId" : "83cc648f-cfa9-4acd-800f-1aecc794cac7",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Done, just pushed",
        "createdAt" : "2018-12-18T11:26:36Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4ee6a30b-b370-4199-9cdf-42d66a91697b",
        "parentId" : "83cc648f-cfa9-4acd-800f-1aecc794cac7",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "> That's true, I was gonna suggest to limit it to one file. Instead we can keep `Map[Path, DocumentSymbol]` and remove entries on `didClose`\r\n\r\n👍 this was also the way it worked before, IIRC",
        "createdAt" : "2018-12-19T00:46:59Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "eade48fd8ffbc5572cad7092e373fee0027e4f0f",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,157 @@\n+package scala.meta.internal.metals\n+\n+import scala.meta._\n+import org.eclipse.lsp4j.SymbolKind\n+import org.eclipse.lsp4j.DocumentSymbol\n+import MetalsEnrichments._\n+import java.util.concurrent.LinkedBlockingQueue\n+\n+/**\n+ *  Retrieves all the symbols defined in a document\n+ *\n+ *  If the document doesn't parse, we fall back to the latest\n+ *  known snapshot of the document, if present\n+ *\n+ *  To avoid the snapshots to grow undefinitely, we only store\n+ *  the ones for the most recently requested documents\n+ */\n+class DocumentSymbolProvider(buffers: Buffers) {\n+\n+  def empty: List[DocumentSymbol] = Nil\n+\n+  def documentSymbols(\n+      path: AbsolutePath\n+  ): List[DocumentSymbol] = {\n+    path\n+      .toInputFromBuffers(buffers)\n+      .parse[Source]\n+      .toOption\n+      .map { source =>\n+        val result = new SymbolTraverser(path.toString).apply(source)\n+        lastDocumentSymbolResult.put((path, result))\n+        result\n+      }\n+      .orElse(\n+        lastDocumentSymbolResult.iterator.asScala\n+          .collect {\n+            case (p, symbols) if p == path => symbols\n+          }\n+          .toList\n+          .headOption\n+      )\n+      .getOrElse(empty)\n+  }\n+\n+  // FIXME(gabro): use a more sensible data structure\n+  private var lastDocumentSymbolResult\n+    : LinkedBlockingQueue[(AbsolutePath, List[DocumentSymbol])] =\n+    new LinkedBlockingQueue(10)"
  },
  {
    "id" : "f6bd6015-6504-459f-9ad9-ab1ee99a7840",
    "prId" : 424,
    "comments" : [
      {
        "id" : "f1961d66-9d53-4258-acd2-df50a5ab46c7",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "see comment below that explains this madness",
        "createdAt" : "2018-12-18T10:37:33Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "eade48fd8ffbc5572cad7092e373fee0027e4f0f",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,157 @@\n+package scala.meta.internal.metals\n+\n+import scala.meta._\n+import org.eclipse.lsp4j.SymbolKind\n+import org.eclipse.lsp4j.DocumentSymbol\n+import MetalsEnrichments._\n+import java.util.concurrent.LinkedBlockingQueue\n+\n+/**\n+ *  Retrieves all the symbols defined in a document\n+ *\n+ *  If the document doesn't parse, we fall back to the latest\n+ *  known snapshot of the document, if present\n+ *\n+ *  To avoid the snapshots to grow undefinitely, we only store\n+ *  the ones for the most recently requested documents\n+ */\n+class DocumentSymbolProvider(buffers: Buffers) {\n+\n+  def empty: List[DocumentSymbol] = Nil\n+\n+  def documentSymbols(\n+      path: AbsolutePath\n+  ): List[DocumentSymbol] = {\n+    path\n+      .toInputFromBuffers(buffers)\n+      .parse[Source]\n+      .toOption\n+      .map { source =>\n+        val result = new SymbolTraverser(path.toString).apply(source)\n+        lastDocumentSymbolResult.put((path, result))\n+        result\n+      }\n+      .orElse(\n+        lastDocumentSymbolResult.iterator.asScala\n+          .collect {\n+            case (p, symbols) if p == path => symbols\n+          }\n+          .toList\n+          .headOption"
  },
  {
    "id" : "e5e5a740-34d2-425e-b1d8-939b438d4714",
    "prId" : 424,
    "comments" : [
      {
        "id" : "76a4ac8f-b2ea-4ab8-97db-4b1935a4233b",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "`uri` is unused",
        "createdAt" : "2018-12-18T11:43:14Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e29d475d-2703-4a78-aeb7-1e97a7c3b44f",
        "parentId" : "76a4ac8f-b2ea-4ab8-97db-4b1935a4233b",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Right, it was used in a previous iteration, that I've reverted. Thanks for catching.",
        "createdAt" : "2018-12-18T12:10:45Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "eade48fd8ffbc5572cad7092e373fee0027e4f0f",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,150 @@\n+package scala.meta.internal.metals\n+\n+import scala.meta._\n+import org.eclipse.lsp4j.SymbolKind\n+import org.eclipse.lsp4j.DocumentSymbol\n+import MetalsEnrichments._\n+import scala.collection.concurrent.TrieMap\n+\n+/**\n+ *  Retrieves all the symbols defined in a document\n+ *\n+ *  If the document doesn't parse, we fall back to the latest\n+ *  known snapshot of the document, if present\n+ *\n+ *  To avoid the snapshots to grow undefinitely, we only store\n+ *  the ones for the most recently requested documents\n+ */\n+class DocumentSymbolProvider(buffers: Buffers) {\n+\n+  def empty: List[DocumentSymbol] = Nil\n+\n+  def documentSymbols(\n+      path: AbsolutePath\n+  ): List[DocumentSymbol] = {\n+    path\n+      .toInputFromBuffers(buffers)\n+      .parse[Source]\n+      .toOption\n+      .map { source =>\n+        val result = new SymbolTraverser(path.toString).apply(source)\n+        snapshots.put(path, result)\n+        result\n+      }\n+      .orElse(snapshots.get(path))\n+      .getOrElse(empty)\n+  }\n+\n+  def discardSnapshot(path: AbsolutePath): Unit =\n+    snapshots.remove(path)\n+\n+  private val snapshots = new TrieMap[AbsolutePath, List[DocumentSymbol]]()\n+\n+  private class SymbolTraverser(uri: String) {"
  },
  {
    "id" : "01c7de84-0ef9-40cc-a919-2fcab7d06b32",
    "prId" : 424,
    "comments" : [
      {
        "id" : "acd21913-a15e-4590-9f5a-ba9aeb185e71",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "nit, `TrieMap.empty` for consistency with rest of the codebase",
        "createdAt" : "2018-12-18T11:43:45Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "30157aba-2b96-45d4-876c-24471e63ccec",
        "parentId" : "acd21913-a15e-4590-9f5a-ba9aeb185e71",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "nit 2, I generally try to declare private mutable state  at the top of the class.",
        "createdAt" : "2018-12-18T11:44:25Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "eade48fd8ffbc5572cad7092e373fee0027e4f0f",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,150 @@\n+package scala.meta.internal.metals\n+\n+import scala.meta._\n+import org.eclipse.lsp4j.SymbolKind\n+import org.eclipse.lsp4j.DocumentSymbol\n+import MetalsEnrichments._\n+import scala.collection.concurrent.TrieMap\n+\n+/**\n+ *  Retrieves all the symbols defined in a document\n+ *\n+ *  If the document doesn't parse, we fall back to the latest\n+ *  known snapshot of the document, if present\n+ *\n+ *  To avoid the snapshots to grow undefinitely, we only store\n+ *  the ones for the most recently requested documents\n+ */\n+class DocumentSymbolProvider(buffers: Buffers) {\n+\n+  def empty: List[DocumentSymbol] = Nil\n+\n+  def documentSymbols(\n+      path: AbsolutePath\n+  ): List[DocumentSymbol] = {\n+    path\n+      .toInputFromBuffers(buffers)\n+      .parse[Source]\n+      .toOption\n+      .map { source =>\n+        val result = new SymbolTraverser(path.toString).apply(source)\n+        snapshots.put(path, result)\n+        result\n+      }\n+      .orElse(snapshots.get(path))\n+      .getOrElse(empty)\n+  }\n+\n+  def discardSnapshot(path: AbsolutePath): Unit =\n+    snapshots.remove(path)\n+\n+  private val snapshots = new TrieMap[AbsolutePath, List[DocumentSymbol]]()"
  },
  {
    "id" : "cd98c020-2eda-4f0d-86b8-dea1a774f92f",
    "prId" : 424,
    "comments" : [
      {
        "id" : "01f75744-4466-4567-ae61-dd498ec75db4",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Is `currentNode.pos` the range of the whole definition (with the RHS)? I guess the 4th parameter is the `selectionRange`, which should correspond to the (more narrow) range of the identifier. This is not important, just saying that this can be improved later.\r\n\r\nAlso notice that there are more optional fields in this new `DocumentSymbol` type: `detail: String`, `deprecated: Boolean` and (the most interesting) `children: DocumentSymbol[]`. The old LSP's `SymbolInformation` declared that the range nesting and the `containerName` shouldn't be relied on for re-inferring the hierarchy, but editors used ranges anyway. Now there is this `children` field which makes this hierarchy explicit.",
        "createdAt" : "2018-12-19T01:05:27Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6ebfec6d-d238-463a-a647-4aea5026afc7",
        "parentId" : "01f75744-4466-4567-ae61-dd498ec75db4",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Yes, I've taken some shortcuts in order to get this merged, but these are the things I would like to address next (in this order of priority):\r\n\r\n- fallback to `SymbolInformation` for editors which don't support `DocumentSymbol` yet (e.g. vim-lsc)\r\n- `children`\r\n- `selectionRange`\r\n\r\nI've agreed with @olafurpg to address those in future PR(s)",
        "createdAt" : "2018-12-19T09:43:27Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2ed6f773-7e7b-460d-979d-1e5d8f56d624",
        "parentId" : "01f75744-4466-4567-ae61-dd498ec75db4",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "It seems `children` is necessary to get hierarchical names in vscode\r\n\r\n![screenshot 2018-12-19 at 10 18 42](https://user-images.githubusercontent.com/1408093/50213031-c6f0ab00-037c-11e9-92a7-5f8f0ce419d0.png)\r\n\r\n",
        "createdAt" : "2018-12-19T09:56:58Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8d30585f-af90-42be-8552-90c74727bbdc",
        "parentId" : "01f75744-4466-4567-ae61-dd498ec75db4",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I updated the PR so that\r\n\r\n- `range` encloses the full range of the definition\r\n- `selectionRange` encloses the definition name only.\r\n- `detail` now includes the type ascription of the method (syntax written in source). It doesn't seem like vscode uses `detail` on the other hand.\r\n\r\n\r\nWe can add `deprecated` in a followup PR.",
        "createdAt" : "2018-12-19T11:50:26Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "81ced217-325d-4fc8-8962-c8cd95363a1d",
        "parentId" : "01f75744-4466-4567-ae61-dd498ec75db4",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Cool! \r\nI think that nested ranges would still work for `SymbolInformation` in those editors that don't support `DocumentSymbol` yet.",
        "createdAt" : "2018-12-19T12:08:01Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1af4f52e-e24f-47fc-8a19-89255dbfc56c",
        "parentId" : "01f75744-4466-4567-ae61-dd498ec75db4",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Yeah, that's very much up to the editors.\r\n\r\nFor instance, the Code Outline extension for VSCode (which predates the native Outline View) used to use ranges for this. (VSCode's native view doesn't)",
        "createdAt" : "2018-12-19T12:09:25Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "eade48fd8ffbc5572cad7092e373fee0027e4f0f",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,151 @@\n+package scala.meta.internal.metals\n+\n+import scala.meta._\n+import org.eclipse.lsp4j.SymbolKind\n+import org.eclipse.lsp4j.DocumentSymbol\n+import MetalsEnrichments._\n+import scala.collection.concurrent.TrieMap\n+\n+/**\n+ *  Retrieves all the symbols defined in a document\n+ *\n+ *  If the document doesn't parse, we fall back to the latest\n+ *  known snapshot of the document, if present\n+ *\n+ *  To avoid the snapshots to grow undefinitely, we only store\n+ *  the ones for the most recently requested documents\n+ */\n+class DocumentSymbolProvider(buffers: Buffers) {\n+\n+  private val snapshots: TrieMap[AbsolutePath, List[DocumentSymbol]] =\n+    TrieMap.empty\n+\n+  def empty: List[DocumentSymbol] = Nil\n+\n+  def documentSymbols(\n+      path: AbsolutePath\n+  ): List[DocumentSymbol] = {\n+    path\n+      .toInputFromBuffers(buffers)\n+      .parse[Source]\n+      .toOption\n+      .map { source =>\n+        val result = new SymbolTraverser().apply(source)\n+        snapshots.put(path, result)\n+        result\n+      }\n+      .orElse(snapshots.get(path))\n+      .getOrElse(empty)\n+  }\n+\n+  def discardSnapshot(path: AbsolutePath): Unit =\n+    snapshots.remove(path)\n+\n+  private class SymbolTraverser() {\n+\n+    def apply(tree: Tree): List[DocumentSymbol] = {\n+      traverser.apply(tree)\n+      builder.result()\n+    }\n+\n+    private val builder = List.newBuilder[DocumentSymbol]\n+\n+    val traverser = new Traverser {\n+      var currentRoot: Option[Tree] = None\n+      override def apply(currentNode: Tree): Unit = {\n+        def continue(withNewRoot: Boolean = false): Unit = {\n+          val oldRoot = currentRoot\n+          if (withNewRoot) currentRoot = Some(currentNode)\n+          super.apply(currentNode)\n+          currentRoot = oldRoot\n+        }\n+\n+        def addName(name: String): Unit = {\n+          builder += new DocumentSymbol(\n+            name,\n+            symbolKind(currentNode),\n+            currentNode.pos.toLSP,\n+            currentNode.pos.toLSP\n+          )"
  },
  {
    "id" : "15efa871-f878-4e2d-ae27-ee13344ed1ce",
    "prId" : 424,
    "comments" : [
      {
        "id" : "56a74de5-a598-4d00-9e8c-0284a0597f5b",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I took the liberty to (hopefully) simplify the implementation. A bit of boilerplate can sometimes make it easier to and extend the code.",
        "createdAt" : "2018-12-19T11:53:21Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "eade48fd8ffbc5572cad7092e373fee0027e4f0f",
    "line" : 109,
    "diffHunk" : "@@ -0,0 +1,215 @@\n+package scala.meta.internal.metals\n+\n+import scala.meta._\n+import org.eclipse.{lsp4j => l}\n+import org.eclipse.lsp4j.SymbolKind\n+import org.eclipse.lsp4j.DocumentSymbol\n+import MetalsEnrichments._\n+import java.util\n+import scala.collection.concurrent.TrieMap\n+import scala.meta.transversers.SimpleTraverser\n+\n+/**\n+ *  Retrieves all the symbols defined in a document\n+ *\n+ *  If the document doesn't parse, we fall back to the latest\n+ *  known snapshot of the document, if present\n+ *\n+ *  To avoid the snapshots to grow undefinitely, we only store\n+ *  the ones for the most recently requested documents\n+ */\n+class DocumentSymbolProvider(buffers: Buffers) {\n+\n+  private val snapshots: TrieMap[AbsolutePath, util.List[DocumentSymbol]] =\n+    TrieMap.empty\n+\n+  def empty: util.List[DocumentSymbol] = Nil.asJava\n+\n+  def documentSymbols(\n+      path: AbsolutePath\n+  ): util.List[DocumentSymbol] = {\n+    path\n+      .toInputFromBuffers(buffers)\n+      .parse[Source]\n+      .toOption\n+      .map { source =>\n+        val result = new SymbolTraverser().symbols(source)\n+        snapshots.put(path, result)\n+        result\n+      }\n+      .orElse(snapshots.get(path))\n+      .getOrElse(empty)\n+  }\n+\n+  def discardSnapshot(path: AbsolutePath): Unit =\n+    snapshots.remove(path)\n+\n+  private class SymbolTraverser() extends SimpleTraverser {\n+    var owner: DocumentSymbol = new DocumentSymbol(\n+      \"root\",\n+      SymbolKind.Namespace,\n+      new l.Range(new l.Position(0, 0), new l.Position(0, 0)),\n+      new l.Range(new l.Position(0, 0), new l.Position(0, 0)),\n+      \"\",\n+      new util.ArrayList[DocumentSymbol]()\n+    )\n+    def symbols(tree: Tree): util.List[DocumentSymbol] = {\n+      apply(tree)\n+      owner.getChildren\n+    }\n+\n+    def addChild(\n+        name: String,\n+        kind: SymbolKind,\n+        range: Position,\n+        selection: Position,\n+        detail: String\n+    ): Unit = {\n+      owner.getChildren.add(\n+        new DocumentSymbol(\n+          name,\n+          kind,\n+          range.toLSP,\n+          selection.toLSP,\n+          detail,\n+          new util.ArrayList[DocumentSymbol]()\n+        )\n+      )\n+    }\n+    def addPats(\n+        pats: List[Pat],\n+        kind: SymbolKind,\n+        range: Position,\n+        detail: String\n+    ): Unit = {\n+      pats.foreach { pat =>\n+        pat.collect {\n+          case Pat.Var(name) =>\n+            addChild(\n+              name.value,\n+              kind,\n+              range,\n+              name.pos,\n+              detail\n+            )\n+        }\n+      }\n+    }\n+\n+    override def apply(tree: Tree): Unit = {\n+      def continue(withNewOwner: Boolean = false): Unit = {\n+        val oldRoot = owner\n+        if (withNewOwner) owner = owner.getChildren.asScala.last\n+        super.apply(tree)\n+        owner = oldRoot\n+      }\n+      def newOwner(): Unit = {\n+        continue(withNewOwner = true)\n+      }\n+      tree match {"
  },
  {
    "id" : "7d45dbed-8043-4745-a9af-cb7292d5dcd9",
    "prId" : 686,
    "comments" : [
      {
        "id" : "2e37c3d3-4148-418c-bd09-53d34f23517d",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I'm definitely not sure about that `inits.head.pos`",
        "createdAt" : "2019-04-20T10:09:35Z",
        "updatedAt" : "2019-04-20T10:18:55Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fa662351-6ed1-4104-b7e5-53bc4d0c4a2e",
        "parentId" : "2e37c3d3-4148-418c-bd09-53d34f23517d",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "You can do `inits.headOption.fold(t.pos)(_.pos)` to sleep good at night. Feel free to merge!",
        "createdAt" : "2019-04-22T06:53:10Z",
        "updatedAt" : "2019-04-22T06:53:10Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b46cae52-d705-48ed-9db7-58d8d10f9611",
        "parentId" : "2e37c3d3-4148-418c-bd09-53d34f23517d",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "yeah, the doubt is mostly about the position rather than the code itself.\r\n\r\nI'll merge anyway, we can always fix it later.",
        "createdAt" : "2019-04-22T11:10:33Z",
        "updatedAt" : "2019-04-22T11:10:34Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b4f225ded274f72303d018e1d49de40f6df8947e",
    "line" : 9,
    "diffHunk" : "@@ -93,7 +93,17 @@ class DocumentSymbolProvider(trees: Trees) {\n         case t: Pkg =>\n           addChild(t.ref.syntax, SymbolKind.Package, t.pos, t.ref.pos, \"\")\n           newOwner()\n-        case _: Source | _: Template =>\n+        case t: Term.NewAnonymous =>\n+          val (name, selection) = t.templ.inits match {\n+            case Nil => (\"(anonymous)\", t.pos)\n+            case inits =>\n+              (inits.map(_.tpe.syntax).mkString(\" with \"), inits.head.pos)"
  },
  {
    "id" : "e2b16d53-fda1-48b1-a651-f58b1aad38e0",
    "prId" : 686,
    "comments" : [
      {
        "id" : "75c7ded0-4a1a-4e69-9be1-1011835d52ae",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "`Term.Block` is needed in order to find `b` in the following example\r\n\r\n```scala\r\ndef a = {\r\n  def b = ()\r\n  ()\r\n}\r\n```",
        "createdAt" : "2019-04-20T11:17:31Z",
        "updatedAt" : "2019-04-20T11:17:31Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b4f225ded274f72303d018e1d49de40f6df8947e",
    "line" : 15,
    "diffHunk" : "@@ -93,7 +93,17 @@ class DocumentSymbolProvider(trees: Trees) {\n         case t: Pkg =>\n           addChild(t.ref.syntax, SymbolKind.Package, t.pos, t.ref.pos, \"\")\n           newOwner()\n-        case _: Source | _: Template =>\n+        case t: Term.NewAnonymous =>\n+          val (name, selection) = t.templ.inits match {\n+            case Nil => (\"(anonymous)\", t.pos)\n+            case inits =>\n+              (inits.map(_.tpe.syntax).mkString(\" with \"), inits.head.pos)\n+          }\n+          if (t.templ.stats.nonEmpty) {\n+            addChild(s\"new $name\", SymbolKind.Interface, t.pos, selection, \"\")\n+            newOwner()\n+          } else continue()\n+        case _: Source | _: Template | _: Term.Block =>"
  },
  {
    "id" : "19015182-ff22-4edc-a08a-01e789c20ce5",
    "prId" : 776,
    "comments" : [
      {
        "id" : "f4119a7f-1846-4e21-86e4-57ee891bab75",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Remove",
        "createdAt" : "2019-06-18T12:43:11Z",
        "updatedAt" : "2019-06-18T13:36:13Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "aa73ce32842112c93f18dfd1c1309c44d8e0ce39",
    "line" : null,
    "diffHunk" : "@@ -160,6 +162,7 @@ class DocumentSymbolProvider(trees: Trees) {\n           )\n           newOwner()\n         case t: Defn.Val =>\n+          scribe.warn(t.pats.toString())"
  },
  {
    "id" : "31577688-fe6e-4931-9525-d96412d295e2",
    "prId" : 930,
    "comments" : [
      {
        "id" : "ebfd66a3-c4a9-444b-912c-4372bca43dee",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I gave this some thought and I was wondering on whether we should introduce a new owner, similarly to how we do for `new Foo {}`, since it introduces a different scope.\r\n\r\nOr maybe this is fine, I don't know.\r\n\r\nI implemented this myself the other day and I got stuck on this point 😂",
        "createdAt" : "2019-09-16T16:43:30Z",
        "updatedAt" : "2019-09-17T20:55:02Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "14f4f8df-cae6-4128-a52c-7244d2042149",
        "parentId" : "ebfd66a3-c4a9-444b-912c-4372bca43dee",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I was also thinking about it and I think now we should try with new owner.",
        "createdAt" : "2019-09-16T17:17:43Z",
        "updatedAt" : "2019-09-17T20:55:02Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b5a175ca-ab5b-4281-8276-d550afe42de7",
        "parentId" : "ebfd66a3-c4a9-444b-912c-4372bca43dee",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Ok, I changed it around and also added finally and catch. @gabro what do you think?",
        "createdAt" : "2019-09-17T13:56:26Z",
        "updatedAt" : "2019-09-17T20:55:02Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2e8d980d1041d43612feba27820e5407d4583219",
    "line" : null,
    "diffHunk" : "@@ -105,7 +105,7 @@ class DocumentSymbolProvider(trees: Trees) {\n             addChild(s\"new $name\", SymbolKind.Interface, t.pos, selection, \"\")\n             newOwner()\n           } else continue()\n-        case _: Source | _: Template | _: Term.Block =>\n+        case _: Source | _: Template | _: Term.Block | _: Term.Try =>"
  }
]