[
  {
    "id" : "fe6b2afb-b584-4c6b-9b37-a8d53700d4db",
    "prId" : 1065,
    "comments" : [
      {
        "id" : "78024be7-56a0-4507-98df-470cdb86b765",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "the idea here is that we would have some other refactors joining in. For example:\r\n\r\n```scala\r\nfor {\r\n  quickFixes <- QuickFix.fromDiagnostics(...)\r\n  classRefactors <- ClassRefactor.fromParams(...)\r\n  ...\r\n} yield quickFixes ++ classRefactors ++ ...\r\n```",
        "createdAt" : "2019-11-14T17:02:46Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1e046b2b878d476d389f19bdcaa73ae4b7c121c9",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,28 @@\n+package scala.meta.internal.metals\n+\n+import org.eclipse.{lsp4j => l}\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.concurrent.Future\n+import scala.meta.pc.CancelToken\n+import scala.concurrent.ExecutionContext\n+\n+final class CodeActionProvider(\n+    compilers: Compilers\n+) extends QuickFixes {\n+\n+  def codeActions(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+    for {\n+      quickFixes <- QuickFix.fromDiagnostics(\n+        params.getContext().getDiagnostics().asScala.toSeq,\n+        params,\n+        compilers,\n+        token\n+      )\n+    } yield quickFixes"
  },
  {
    "id" : "7e9a3d27-65e6-4f87-aab6-9b6a16eeaae2",
    "prId" : 1065,
    "comments" : [
      {
        "id" : "7853643f-e2b9-4c52-a99e-e94f65b098af",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "this will grow into a list of all quickfixes, e.g.\r\n\r\n```scala\r\nList(QuickFix.ImportMissingSymbol, QuickFix.ImplementAbstractMembers, QuickFix.RemoveUnusedImport)\r\n```",
        "createdAt" : "2019-11-15T18:21:45Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1e046b2b878d476d389f19bdcaa73ae4b7c121c9",
    "line" : 20,
    "diffHunk" : "@@ -0,0 +1,28 @@\n+package scala.meta.internal.metals\n+\n+import org.eclipse.{lsp4j => l}\n+import scala.meta.pc.CancelToken\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.Future\n+\n+final class CodeActionProvider(\n+    compilers: Compilers\n+) {\n+\n+  def codeActions(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+\n+    for {\n+      quickFixes <- Future\n+        .sequence(\n+          List(QuickFix.ImportMissingSymbol)"
  },
  {
    "id" : "403f4f07-ddc4-4f54-ac45-da9002b95c4c",
    "prId" : 1079,
    "comments" : [
      {
        "id" : "ef5ec02c-8eeb-4a0d-9b9b-326320f3b491",
        "parentId" : null,
        "author" : {
          "login" : "PeterPerhac",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1763911?u=535e9767bdabee0809d32818a0210044d410e6f6&v=4"
        },
        "body" : "you don't need the for-comprehension here",
        "createdAt" : "2019-11-21T20:50:30Z",
        "updatedAt" : "2019-12-31T17:11:21Z",
        "lastEditedBy" : {
          "login" : "PeterPerhac",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1763911?u=535e9767bdabee0809d32818a0210044d410e6f6&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "89aca41816462ba01562e42601693aeb33124189",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,44 @@\n+package scala.meta.internal.metals\n+\n+import org.eclipse.{lsp4j => l}\n+import scala.meta.pc.CancelToken\n+import scala.meta.internal.mtags.Semanticdbs\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.Future\n+\n+final class CodeActionProvider(\n+    compilers: Compilers,\n+    trees: Trees,\n+    buffers: Buffers,\n+    semanticdbs: Semanticdbs,\n+    symbolSearch: MetalsSymbolSearch\n+) {\n+\n+  def codeActions(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+\n+    for {\n+      quickFixes <- Future"
  },
  {
    "id" : "645008f0-84df-4baf-9d8d-b76a0349e88f",
    "prId" : 1079,
    "comments" : [
      {
        "id" : "956f3443-9a48-4b09-b54f-f1e43a27441a",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "```suggestion\r\n    val actions = requestedKinds.flatMap {\r\n```\r\n\r\nfor consistency (we don't use infix style unless it's a symbolic operator)",
        "createdAt" : "2019-12-17T15:36:50Z",
        "updatedAt" : "2019-12-31T17:11:21Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "89aca41816462ba01562e42601693aeb33124189",
    "line" : null,
    "diffHunk" : "@@ -2,27 +2,58 @@ package scala.meta.internal.metals\n \n import org.eclipse.{lsp4j => l}\n import scala.meta.pc.CancelToken\n+import scala.meta.internal.mtags.Semanticdbs\n import scala.concurrent.ExecutionContext\n import scala.concurrent.Future\n+import scala.collection.JavaConverters._\n \n final class CodeActionProvider(\n-    compilers: Compilers\n+    compilers: Compilers,\n+    trees: Trees,\n+    buffers: Buffers,\n+    semanticdbs: Semanticdbs,\n+    symbolSearch: MetalsSymbolSearch\n ) {\n \n   def codeActions(\n       params: l.CodeActionParams,\n       token: CancelToken\n   )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n \n-    for {\n-      quickFixes <- Future\n-        .sequence(\n-          List(QuickFix.ImportMissingSymbol)\n-            .map(_.contribute(params, compilers, token))\n+    def quickfixes =\n+      List(QuickFix.ImportMissingSymbol)\n+        .map(_.contribute(params, compilers, token))\n+\n+    def refactorings =\n+      List(Refactoring.UseNamedArguments)\n+        .map(\n+          _.contribute(\n+            params,\n+            trees,\n+            buffers,\n+            semanticdbs,\n+            symbolSearch,\n+            token\n+          )\n         )\n-        .map(_.flatten)\n-    } yield quickFixes\n \n+    // when we have more refactorings, we should separate them according to the LSP \"code action kind\",\n+    // e.g. refactoring inline, refactoring extraction, refactoring rewrite\n+\n+    val requestedKinds = Option(params.getContext.getOnly) match {\n+      case Some(only) => only.asScala.toList\n+      case None =>\n+        // if client did not specify, return all actions by default\n+        List(l.CodeActionKind.QuickFix, l.CodeActionKind.Refactor)\n+    }\n+\n+    val actions = requestedKinds flatMap {"
  },
  {
    "id" : "20ae72bd-d80a-4f6e-b169-3b4db61ada57",
    "prId" : 1079,
    "comments" : [
      {
        "id" : "bb20ba70-a706-4e99-aefb-91f342f242dd",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "if we go with my proposal below, we can unify these `contribute` calls can go together",
        "createdAt" : "2019-12-23T10:06:21Z",
        "updatedAt" : "2019-12-31T17:11:21Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9e5367ba-7f8a-4213-9d80-428ba542ba78",
        "parentId" : "bb20ba70-a706-4e99-aefb-91f342f242dd",
        "author" : {
          "login" : "cb372",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/106760?v=4"
        },
        "body" : "I agree it's probably a good idea to get rid of the `QuickFix` and `Refactoring` traits and just have a single `CodeAction` trait to cover both.\r\n\r\nBut we should still avoid doing unnecessary work when the client sets the `only` param. e.g. if the client requests only quick fixes, we shouldn't waste cycles on calculating all possible refactorings. So we could either keep separate manually-curated lists, like I did here, or the `CodeAction` trait could have a `def kind: CodeActionKind` and we could filter based on that before we call `contribute`. I think the latter is probably cleaner.\r\n\r\n/cc @tgodzik ",
        "createdAt" : "2019-12-23T12:42:32Z",
        "updatedAt" : "2019-12-31T17:11:21Z",
        "lastEditedBy" : {
          "login" : "cb372",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/106760?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c9942ddb-de40-4ddc-87b0-9825d88df546",
        "parentId" : "bb20ba70-a706-4e99-aefb-91f342f242dd",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Ah, absolutely. I didn't think of `only` so I guess you can ignore my comment and we should invoke `contribute` only after we check that parameter.",
        "createdAt" : "2019-12-23T14:05:14Z",
        "updatedAt" : "2019-12-31T17:11:21Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "89aca41816462ba01562e42601693aeb33124189",
    "line" : null,
    "diffHunk" : "@@ -2,27 +2,60 @@ package scala.meta.internal.metals\n \n import org.eclipse.{lsp4j => l}\n import scala.meta.pc.CancelToken\n+import scala.meta.internal.mtags.Semanticdbs\n import scala.concurrent.ExecutionContext\n import scala.concurrent.Future\n+import scala.collection.JavaConverters._\n \n final class CodeActionProvider(\n-    compilers: Compilers\n+    compilers: Compilers,\n+    trees: Trees,\n+    buffers: Buffers,\n+    semanticdbs: Semanticdbs,\n+    symbolSearch: MetalsSymbolSearch,\n+    definitionProvider: DefinitionProvider\n ) {\n \n   def codeActions(\n       params: l.CodeActionParams,\n       token: CancelToken\n   )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n \n-    for {\n-      quickFixes <- Future\n-        .sequence(\n-          List(QuickFix.ImportMissingSymbol)\n-            .map(_.contribute(params, compilers, token))\n+    def quickfixes =\n+      List(QuickFix.ImportMissingSymbol)\n+        .map(_.contribute(params, compilers, token))\n+\n+    def refactorings ="
  },
  {
    "id" : "85d02ec4-57c9-4049-bc40-319efb274917",
    "prId" : 1079,
    "comments" : [
      {
        "id" : "413bac3c-0d7a-40bc-8dd6-227ea93a27c2",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "nit: can we refactor this into `def isRequestedKind(..): Boolean` method? ",
        "createdAt" : "2019-12-27T19:47:22Z",
        "updatedAt" : "2019-12-31T17:11:21Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cac79457-3b36-42bf-a7ae-6a85679d4e20",
        "parentId" : "413bac3c-0d7a-40bc-8dd6-227ea93a27c2",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "alternatively, inline this into `filter(..)`",
        "createdAt" : "2019-12-27T19:47:44Z",
        "updatedAt" : "2019-12-31T17:11:21Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ed4df7e1-a813-4005-b3f7-a6f4193fd141",
        "parentId" : "413bac3c-0d7a-40bc-8dd6-227ea93a27c2",
        "author" : {
          "login" : "cb372",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/106760?v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-12-28T20:43:12Z",
        "updatedAt" : "2019-12-31T17:11:21Z",
        "lastEditedBy" : {
          "login" : "cb372",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/106760?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "89aca41816462ba01562e42601693aeb33124189",
    "line" : null,
    "diffHunk" : "@@ -2,27 +2,56 @@ package scala.meta.internal.metals\n \n import org.eclipse.{lsp4j => l}\n import scala.meta.pc.CancelToken\n+import scala.meta.internal.mtags.Semanticdbs\n import scala.concurrent.ExecutionContext\n import scala.concurrent.Future\n+import scala.collection.JavaConverters._\n \n final class CodeActionProvider(\n-    compilers: Compilers\n+    compilers: Compilers,\n+    trees: Trees,\n+    buffers: Buffers,\n+    semanticdbs: Semanticdbs,\n+    symbolSearch: MetalsSymbolSearch,\n+    definitionProvider: DefinitionProvider\n ) {\n \n   def codeActions(\n       params: l.CodeActionParams,\n       token: CancelToken\n   )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n \n-    for {\n-      quickFixes <- Future\n-        .sequence(\n-          List(QuickFix.ImportMissingSymbol)\n-            .map(_.contribute(params, compilers, token))\n-        )\n-        .map(_.flatten)\n-    } yield quickFixes\n+    val allActions = List(\n+      QuickFixes.ImportMissingSymbol,\n+      Refactorings.UseNamedArguments\n+    )\n+\n+    val isRequestedKind: CodeAction => Boolean ="
  },
  {
    "id" : "c5dcb83f-06b3-45d8-aef9-4436064d32ae",
    "prId" : 1079,
    "comments" : [
      {
        "id" : "113b0459-fb43-4c42-807c-e6b4787657f1",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I like this much better, at least the dependencies for each action are clear now.",
        "createdAt" : "2019-12-31T13:57:13Z",
        "updatedAt" : "2019-12-31T17:11:21Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89aca41816462ba01562e42601693aeb33124189",
    "line" : 23,
    "diffHunk" : "@@ -2,27 +2,49 @@ package scala.meta.internal.metals\n \n import org.eclipse.{lsp4j => l}\n import scala.meta.pc.CancelToken\n+import scala.meta.internal.metals.codeactions._\n+import scala.meta.internal.mtags.Semanticdbs\n import scala.concurrent.ExecutionContext\n import scala.concurrent.Future\n+import scala.collection.JavaConverters._\n \n final class CodeActionProvider(\n-    compilers: Compilers\n+    compilers: Compilers,\n+    trees: Trees,\n+    semanticdbs: Semanticdbs,\n+    symbolSearch: MetalsSymbolSearch,\n+    definitionProvider: DefinitionProvider\n ) {\n \n+  val allActions: List[CodeAction] = List(\n+    new ImportMissingSymbol(compilers),\n+    new UseNamedArguments(\n+      trees,\n+      semanticdbs,\n+      symbolSearch,\n+      definitionProvider\n+    )\n+  )"
  },
  {
    "id" : "f6c3f7bd-5304-419a-b7bf-ead860e39c13",
    "prId" : 1379,
    "comments" : [
      {
        "id" : "71cce2f0-c97d-445a-9783-090907d0b784",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Members instead of Methods?",
        "createdAt" : "2020-02-09T21:32:08Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e100253dce0a50a1201510f9bec11fbe8f298bbb",
    "line" : null,
    "diffHunk" : "@@ -10,16 +10,15 @@ import scala.collection.JavaConverters._\n final class CodeActionProvider(\n     compilers: Compilers\n ) {\n-\n   val allActions: List[CodeAction] = List(\n+    new ImplementAbstractMethods(compilers),"
  }
]