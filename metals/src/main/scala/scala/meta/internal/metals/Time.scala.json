[
  {
    "id" : "38d0ab06-33d9-43e3-8aa4-0526d4795202",
    "prId" : 822,
    "comments" : [
      {
        "id" : "5cb9e621-aff8-44c1-afb7-98d31a325ac4",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Beware: this is not related to the nanos method anymore, which I think it was the intention",
        "createdAt" : "2019-07-10T06:01:56Z",
        "updatedAt" : "2019-07-10T10:15:06Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b8ff097d-4f72-4ff2-bdf1-2242bb3fb8c9",
        "parentId" : "5cb9e621-aff8-44c1-afb7-98d31a325ac4",
        "author" : {
          "login" : "ivanopagano",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1067461?v=4"
        },
        "body" : "You should check how the `Time` trait is used for testing, since that seems to be the original intent.\r\nAs @gabro points out, the idea might be that `millis()` is coupled to `nanos()` for testing purposes, and the `Time` is just a commodity util over nanotimes...\r\n\r\nIf that's the case, I'd suggest renaming `millis()` to something more explicit like `asMillis()` and document that.\r\nOr even better, create an additional `millisTimestamp()` that doesn't relates to `nanos()` in any way but explicitly states it's getting some form of system timestamp...\r\nOn top of that you could rename `nanos` -> `monotonicNanos`, `millis` -> `monotonicMillis`?\r\n\r\nJust wild ideas",
        "createdAt" : "2019-07-10T07:27:59Z",
        "updatedAt" : "2019-07-10T10:15:06Z",
        "lastEditedBy" : {
          "login" : "ivanopagano",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1067461?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6817c7ba-b4a6-4ff9-adf4-652e3b9c1bfd",
        "parentId" : "5cb9e621-aff8-44c1-afb7-98d31a325ac4",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Millis were always used as a timestamp and nanos for timing, which is correct. The only thing is that there is no actual relation between nanoTime and current time.\r\n\r\nFixed it in the tests.",
        "createdAt" : "2019-07-10T09:31:36Z",
        "updatedAt" : "2019-07-10T10:15:06Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8483853d-8b15-4294-9706-6438cee61268",
        "parentId" : "5cb9e621-aff8-44c1-afb7-98d31a325ac4",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "To be honest, I don't see the benefit of using nanos here.\r\nThere is one place where nanos are used directly: to calculate the [StatusBar priority](https://github.com/scalameta/metals/blob/master/metals/src/main/scala/scala/meta/internal/metals/StatusBar.scala#L174) needed for sorting the statuses. I would argue that using milliseconds here should not be a noticeable change.\r\n\r\nTherefore I would like to propose dropping the support for nanoseconds and using milliseconds",
        "createdAt" : "2019-07-10T09:56:41Z",
        "updatedAt" : "2019-07-10T10:15:06Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "53cd93e8-dc67-455f-9b7f-e49b57348be6",
        "parentId" : "5cb9e621-aff8-44c1-afb7-98d31a325ac4",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Of course there is another solution - never ever using this method for creating timestamps, but then that is an additional complexity",
        "createdAt" : "2019-07-10T10:03:22Z",
        "updatedAt" : "2019-07-10T10:15:06Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "34694570-820f-4948-8a31-183c81b2d2c2",
        "parentId" : "5cb9e621-aff8-44c1-afb7-98d31a325ac4",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I think we can leave nanos for StatusBar priority. I will rename `millis` to `currentMillis` to indicate the difference.",
        "createdAt" : "2019-07-10T10:15:23Z",
        "updatedAt" : "2019-07-10T10:15:23Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f20994dcbfc66fdb3c816ac8176102f2adfdf56d",
    "line" : null,
    "diffHunk" : "@@ -1,13 +1,11 @@\n package scala.meta.internal.metals\n \n-import java.util.concurrent.TimeUnit\n-\n /**\n  * Wrapper around `System.nanoTime` to allow easier testing.\n  */\n trait Time {\n   def nanos(): Long\n-  final def millis(): Long = TimeUnit.NANOSECONDS.toMillis(nanos())\n+  final def millis(): Long = System.currentTimeMillis()"
  },
  {
    "id" : "8bd0aa3c-a8f1-4e18-a763-d1482f55d2b3",
    "prId" : 822,
    "comments" : [
      {
        "id" : "83a749f0-7a26-4044-aa91-e01bf9f1cda2",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "We can also include the \"absolute time base\" for proper calculation of the elapsed nanoseconds:\r\n```suggestion\r\n    private val absoluteTimeBaseNanos: Long = {\r\n      val now = Instant.now()\r\n      val seconds = TimeUnit.SECONDS.toNanos(now.getEpochSecond)\r\n      val nanos = now.getNano\r\n      seconds + nanos\r\n    }\r\n\r\n    private val relativeTimeBaseNanos = System.nanoTime()\r\n\r\n    def nanos(): Long = {\r\n      absoluteTimeBaseNanos + elapsed\r\n    }\r\n\r\n    private def elapsed: Long = System.nanoTime() - relativeTimeBaseNanos\r\n```\r\n\r\n\r\nNote, that this does not handle the time zones at all. Probably it is safe to assume the time of the server as the valid one. At least for now",
        "createdAt" : "2019-07-10T10:14:22Z",
        "updatedAt" : "2019-07-10T10:15:06Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "97d39d8c-d04e-410a-92e6-70a0107f0a73",
        "parentId" : "83a749f0-7a26-4044-aa91-e01bf9f1cda2",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I think it might be too much complexity for now.",
        "createdAt" : "2019-07-10T10:17:58Z",
        "updatedAt" : "2019-07-10T10:17:58Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f20994dcbfc66fdb3c816ac8176102f2adfdf56d",
    "line" : 18,
    "diffHunk" : "@@ -1,17 +1,17 @@\n package scala.meta.internal.metals\n \n-import java.util.concurrent.TimeUnit\n-\n /**\n- * Wrapper around `System.nanoTime` to allow easier testing.\n+ * Wrapper around `System.nanoTime` and `System.currentTimeMillis`\n+ * to allow easier testing.\n  */\n trait Time {\n   def nanos(): Long\n-  final def millis(): Long = TimeUnit.NANOSECONDS.toMillis(nanos())\n+  def millis(): Long\n }\n \n object Time {\n   object system extends Time {\n     def nanos(): Long = System.nanoTime()"
  }
]