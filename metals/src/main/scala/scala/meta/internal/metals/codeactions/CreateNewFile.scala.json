[
  {
    "id" : "8f514a12-45a5-4127-b359-4f250e2c42ce",
    "prId" : 1528,
    "comments" : [
      {
        "id" : "d5f2cb68-c244-4b8d-8a07-a0ecb71074b1",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "this is `encloses` and not `overlapsWith`, because I don't think it makes sense to show the \"Create new...\" action when the user has selected a range which contains multiple `SymbolNotFound` diagnostics.",
        "createdAt" : "2020-03-23T10:24:37Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "29e8820c0560d7d7e678b124344d3884ba5c2bda",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,46 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.meta.internal.metals._\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import org.eclipse.{lsp4j => l}\n+import scala.meta.pc.CancelToken\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.Future\n+import java.net.URI\n+import java.nio.file.Paths\n+\n+class CreateNewFile() extends CodeAction {\n+  override def kind: String = l.CodeActionKind.QuickFix\n+\n+  override def contribute(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+\n+    def createNewFile(diagnostic: l.Diagnostic, name: String): l.CodeAction = {\n+      val codeAction = new l.CodeAction()\n+      codeAction.setTitle(CreateNewFile.title)\n+      codeAction.setKind(l.CodeActionKind.QuickFix)\n+      codeAction.setDiagnostics(List(diagnostic).asJava)\n+      val directory = Paths\n+        .get(URI.create(params.getTextDocument().getUri()))\n+        .getParent()\n+        .toString()\n+      codeAction.setCommand(ServerCommands.NewScalaFile.toLSP(List(null, name)))\n+      codeAction\n+    }\n+\n+    val codeActions = params.getContext().getDiagnostics().asScala.collect {\n+      case d @ ScalacDiagnostic.SymbolNotFound(name)\n+          if d.getRange().encloses(params.getRange()) =>"
  },
  {
    "id" : "7024476c-afd2-45ff-bb59-99dd4e6022c2",
    "prId" : 1528,
    "comments" : [
      {
        "id" : "04a86675-bf0f-4da1-8f5d-e5a35277fb7f",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "`create new symbol 'NAME'`?",
        "createdAt" : "2020-03-23T11:10:52Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a01d6ddc-f250-4bc4-a350-28b5957d6765",
        "parentId" : "04a86675-bf0f-4da1-8f5d-e5a35277fb7f",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I thought about adding something like that, but I feel like \"symbol\" is not very user-friendly (it's very much compiler lingo).\r\n\r\nAnything else would require listing out the options (\"Create new trait 'NAME'\", \"Create new class 'NAME'\"), but think it would become too heavy.\r\n\r\nI feel like \"Create new...\" is clear when presented in context and it avoids the problem of listing out all the options.\r\n",
        "createdAt" : "2020-03-23T11:40:14Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7f4094bd-17a5-4316-88a6-de840dbfbe84",
        "parentId" : "04a86675-bf0f-4da1-8f5d-e5a35277fb7f",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I agree \"symbol\" is not ideal but it's used in \"rename symbol\" and \"go to symbol in file\" in VS Code so I think it's OK to use it here.",
        "createdAt" : "2020-03-23T11:56:47Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cbe835a4-d2f2-49b0-94cc-18b20d7c42dc",
        "parentId" : "04a86675-bf0f-4da1-8f5d-e5a35277fb7f",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "You're right, it's used around, at least in VSCode. I'll make the change",
        "createdAt" : "2020-03-23T11:58:12Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "83e00d06-724c-420a-aeb9-2ca58a0b8419",
        "parentId" : "04a86675-bf0f-4da1-8f5d-e5a35277fb7f",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Done!\r\n\r\n![image](https://user-images.githubusercontent.com/691940/77314864-c7f25400-6d06-11ea-84a3-c2e24afa23b2.png)\r\n",
        "createdAt" : "2020-03-23T12:04:22Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f030e830-5cbc-47d6-8887-c88c212e32f6",
        "parentId" : "04a86675-bf0f-4da1-8f5d-e5a35277fb7f",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Nice! I think it's a bit more self documenting what this option does with the name. Should we drop the `...` suffix?",
        "createdAt" : "2020-03-23T12:22:28Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b7e169e8-0cf1-46c4-aedc-74762fe549e6",
        "parentId" : "04a86675-bf0f-4da1-8f5d-e5a35277fb7f",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "The `...` is used to convey the fact that the action starts a flow and it doesn't take effect immediately. \r\n\r\nI've seen this pattern used quite often, including in VSCode. See for instance\r\n\r\n![image](https://user-images.githubusercontent.com/691940/77316651-17864f00-6d0a-11ea-99d6-2e0aa499ee4b.png)\r\n\r\nThe commands ending with `...` start a flow that requires further interaction to complete.",
        "createdAt" : "2020-03-23T12:29:00Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "29e8820c0560d7d7e678b124344d3884ba5c2bda",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,46 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.meta.internal.metals._\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import org.eclipse.{lsp4j => l}\n+import scala.meta.pc.CancelToken\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.Future\n+import java.net.URI\n+import java.nio.file.Paths\n+\n+class CreateNewFile() extends CodeAction {\n+  override def kind: String = l.CodeActionKind.QuickFix\n+\n+  override def contribute(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+\n+    def createNewFile(diagnostic: l.Diagnostic, name: String): l.CodeAction = {\n+      val codeAction = new l.CodeAction()\n+      codeAction.setTitle(CreateNewFile.title)\n+      codeAction.setKind(l.CodeActionKind.QuickFix)\n+      codeAction.setDiagnostics(List(diagnostic).asJava)\n+      val directory = Paths\n+        .get(URI.create(params.getTextDocument().getUri()))\n+        .getParent()\n+        .toString()\n+      codeAction.setCommand(ServerCommands.NewScalaFile.toLSP(List(null, name)))\n+      codeAction\n+    }\n+\n+    val codeActions = params.getContext().getDiagnostics().asScala.collect {\n+      case d @ ScalacDiagnostic.SymbolNotFound(name)\n+          if d.getRange().encloses(params.getRange()) =>\n+        createNewFile(d, name)\n+    }\n+\n+    Future.successful(codeActions)\n+\n+  }\n+}\n+\n+object CreateNewFile {\n+  val title = \"Create new...\""
  },
  {
    "id" : "e87e5ba9-4a13-4694-a36a-82a81b1b4acb",
    "prId" : 1528,
    "comments" : [
      {
        "id" : "7c32d00a-1e43-49c3-ad61-a0a28f8655d1",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\n  def title(name: String): String = s\"Create new symbol: '$name'...\"\r\n```\r\n\r\nI'm not 100% how this is displayed, but this may make sense depending on how/where the title is displayed?",
        "createdAt" : "2020-03-23T12:33:41Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "766034b6-fc57-4ede-95fa-97ee214610fd",
        "parentId" : "7c32d00a-1e43-49c3-ad61-a0a28f8655d1",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Ignore this, I see that the value is surrounded by ' ' now, so it makes sense.",
        "createdAt" : "2020-03-23T12:37:51Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "29e8820c0560d7d7e678b124344d3884ba5c2bda",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,46 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.meta.internal.metals._\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import org.eclipse.{lsp4j => l}\n+import scala.meta.pc.CancelToken\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.Future\n+import java.net.URI\n+import java.nio.file.Paths\n+\n+class CreateNewFile() extends CodeAction {\n+  override def kind: String = l.CodeActionKind.QuickFix\n+\n+  override def contribute(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+\n+    def createNewFile(diagnostic: l.Diagnostic, name: String): l.CodeAction = {\n+      val codeAction = new l.CodeAction()\n+      codeAction.setTitle(CreateNewFile.title(name))\n+      codeAction.setKind(l.CodeActionKind.QuickFix)\n+      codeAction.setDiagnostics(List(diagnostic).asJava)\n+      val directory = Paths\n+        .get(URI.create(params.getTextDocument().getUri()))\n+        .getParent()\n+        .toString()\n+      codeAction.setCommand(ServerCommands.NewScalaFile.toLSP(List(null, name)))\n+      codeAction\n+    }\n+\n+    val codeActions = params.getContext().getDiagnostics().asScala.collect {\n+      case d @ ScalacDiagnostic.SymbolNotFound(name)\n+          if d.getRange().encloses(params.getRange()) =>\n+        createNewFile(d, name)\n+    }\n+\n+    Future.successful(codeActions)\n+\n+  }\n+}\n+\n+object CreateNewFile {\n+  def title(name: String): String = s\"Create new symbol '$name'...\""
  }
]