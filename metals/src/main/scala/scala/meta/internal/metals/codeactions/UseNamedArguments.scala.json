[
  {
    "id" : "cd887e77-df27-4c10-9639-115dcc8ca272",
    "prId" : 1079,
    "comments" : [
      {
        "id" : "42ac0645-5486-495a-b25a-bd338e6cb008",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "nit:\r\n\r\n```suggestion\r\n          case t: Term.Apply if t.pos.toLSP.encloses(cursorPos) => t\r\n```",
        "createdAt" : "2019-12-31T14:07:27Z",
        "updatedAt" : "2019-12-31T17:11:21Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "89aca41816462ba01562e42601693aeb33124189",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,164 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.concurrent.{Future, ExecutionContext}\n+import scala.meta._\n+import scala.meta.pc.CancelToken\n+import scala.meta.internal.metals._\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.mtags._\n+import scala.meta.internal.semanticdb.TextDocument\n+import org.eclipse.{lsp4j => l}\n+\n+class UseNamedArguments(\n+    trees: Trees,\n+    semanticdbs: Semanticdbs,\n+    symbolSearch: MetalsSymbolSearch,\n+    definitionProvider: DefinitionProvider\n+) extends CodeAction {\n+\n+  override def kind: String = l.CodeActionKind.Refactor\n+\n+  override def contribute(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+\n+    def findMethodApplyOrCtorTreeUnderCursor(\n+        root: Tree,\n+        cursorPos: l.Range\n+    ): Option[Tree] =\n+      root\n+        .collect {\n+          case t @ Term.Apply(_, _) if t.pos.toLSP.encloses(cursorPos) => t"
  },
  {
    "id" : "0912fe2d-2488-4169-8399-f0bb6de2858c",
    "prId" : 1079,
    "comments" : [
      {
        "id" : "216f20e8-058e-4a4a-b148-9cd4643c4152",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "nit:\r\n\r\n```suggestion\r\n          case t: Init if t.pos.toLSP.encloses(cursorPos) => t\r\n```",
        "createdAt" : "2019-12-31T14:07:47Z",
        "updatedAt" : "2019-12-31T17:11:21Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "89aca41816462ba01562e42601693aeb33124189",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,164 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.concurrent.{Future, ExecutionContext}\n+import scala.meta._\n+import scala.meta.pc.CancelToken\n+import scala.meta.internal.metals._\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.mtags._\n+import scala.meta.internal.semanticdb.TextDocument\n+import org.eclipse.{lsp4j => l}\n+\n+class UseNamedArguments(\n+    trees: Trees,\n+    semanticdbs: Semanticdbs,\n+    symbolSearch: MetalsSymbolSearch,\n+    definitionProvider: DefinitionProvider\n+) extends CodeAction {\n+\n+  override def kind: String = l.CodeActionKind.Refactor\n+\n+  override def contribute(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+\n+    def findMethodApplyOrCtorTreeUnderCursor(\n+        root: Tree,\n+        cursorPos: l.Range\n+    ): Option[Tree] =\n+      root\n+        .collect {\n+          case t @ Term.Apply(_, _) if t.pos.toLSP.encloses(cursorPos) => t\n+          case t @ Init(_, _, _) if t.pos.toLSP.encloses(cursorPos) => t"
  },
  {
    "id" : "43f11b2f-20b6-4632-ac57-28adf3b67894",
    "prId" : 1079,
    "comments" : [
      {
        "id" : "8c6084b7-6eaf-4514-9f4d-35e7db1c8a09",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "This part here is using `symbolSearch` and `symbolDocumentation` to lookup the signature information of the method under the cursor.\r\n\r\nThis is very similar to the job `SignatureHelpProvider` does, but the main difference is that `SignatureHelpProvider` uses the presentation compiler, so it should work even with code you just typed or when the buffer doesn't parse or compile.\r\n\r\nI also think `SignatureHelpProvider` does a very similar job at finding the enclosing `apply` (see `EnclosingApply`).\r\n\r\nBottom line, I see a chance of building the core of this action on top of the presentation compiler, possibly re-using some of the infrastructure provided by `SignatureHelpProvider`, or even just using that provider directly.\r\n\r\nAs a quick POC, you can maybe try invoking `compilers.signatureHelp` and see whether that's enough information to build this action.",
        "createdAt" : "2019-12-31T14:23:18Z",
        "updatedAt" : "2019-12-31T17:11:21Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fe9323b3-7ec9-4e1e-a230-d23aa44f635d",
        "parentId" : "8c6084b7-6eaf-4514-9f4d-35e7db1c8a09",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Paging @olafurpg, as soon as you have time",
        "createdAt" : "2019-12-31T14:29:18Z",
        "updatedAt" : "2019-12-31T17:11:21Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1db5fe6e-61bf-4667-8360-d76510f9769d",
        "parentId" : "8c6084b7-6eaf-4514-9f4d-35e7db1c8a09",
        "author" : {
          "login" : "cb372",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/106760?v=4"
        },
        "body" : "Thanks, I'll give it a try",
        "createdAt" : "2019-12-31T15:22:47Z",
        "updatedAt" : "2019-12-31T17:11:21Z",
        "lastEditedBy" : {
          "login" : "cb372",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/106760?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5774a876-1d9a-48b0-9c81-f902123ed135",
        "parentId" : "8c6084b7-6eaf-4514-9f4d-35e7db1c8a09",
        "author" : {
          "login" : "cb372",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/106760?v=4"
        },
        "body" : "@gabro Wow, that certainly simplified things!",
        "createdAt" : "2019-12-31T16:35:12Z",
        "updatedAt" : "2019-12-31T17:11:21Z",
        "lastEditedBy" : {
          "login" : "cb372",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/106760?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "89aca41816462ba01562e42601693aeb33124189",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,164 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.concurrent.{Future, ExecutionContext}\n+import scala.meta._\n+import scala.meta.pc.CancelToken\n+import scala.meta.internal.metals._\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.mtags._\n+import scala.meta.internal.semanticdb.TextDocument\n+import org.eclipse.{lsp4j => l}\n+\n+class UseNamedArguments(\n+    trees: Trees,\n+    semanticdbs: Semanticdbs,\n+    symbolSearch: MetalsSymbolSearch,\n+    definitionProvider: DefinitionProvider\n+) extends CodeAction {\n+\n+  override def kind: String = l.CodeActionKind.Refactor\n+\n+  override def contribute(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+\n+    def findMethodApplyOrCtorTreeUnderCursor(\n+        root: Tree,\n+        cursorPos: l.Range\n+    ): Option[Tree] =\n+      root\n+        .collect {\n+          case t @ Term.Apply(_, _) if t.pos.toLSP.encloses(cursorPos) => t\n+          case t @ Init(_, _, _) if t.pos.toLSP.encloses(cursorPos) => t\n+        }\n+        .sortBy(_.pos.start)\n+        .lastOption\n+\n+    def findSymbolTree(tree: Tree): Option[Name] = tree match {\n+      case x @ Term.Name(_) => Some(x)\n+      case x @ Type.Name(_) => Some(x)\n+      case Term.Select(_, x) => Some(x)\n+      case Term.Apply(x, _) => findSymbolTree(x)\n+      case Term.ApplyType(x, _) => findSymbolTree(x)\n+      case Type.Apply(x, _) => findSymbolTree(x)\n+      case Init(x, _, _) => findSymbolTree(x)\n+      case _ => None\n+    }\n+\n+    def resolveSymbol(\n+        textDocumentId: l.TextDocumentIdentifier,\n+        path: AbsolutePath,\n+        textDocument: TextDocument,\n+        symbolTreePos: Position\n+    ): ResolvedSymbolOccurrence = {\n+      val tdpp = new l.TextDocumentPositionParams(\n+        textDocumentId,\n+        symbolTreePos.toLSP.getStart\n+      )\n+      definitionProvider.positionOccurrence(path, tdpp, textDocument)\n+    }\n+\n+    val methodSymbolPattern = \"\"\".*\\((\\+\\d+)?\\)\\.$\"\"\"\n+\n+    def tweakSymbol(symbol: String): String = {\n+      if (symbol.endsWith(\".\") && !symbol.matches(methodSymbolPattern)) {\n+        /*\n+         * We've probably been given a companion object symbol\n+         * e.g. in the case (@@ = cursor)\n+         *\n+         * case class Foo(a: Int, b: Int)\n+         * val x = Fo@@o(1, 2)\n+         *\n+         * the definition provider gives us the symbol of the companion\n+         * object. This is no good to us, so we try to replace it with\n+         * the case class's symbol.\n+         * In other words we turn \"example/Foo.\" into \"example/Foo#\"\n+         */\n+        symbol.stripSuffix(\".\") ++ \"#\"\n+      } else {\n+        symbol\n+      }\n+    }\n+\n+    def buildEdits(\n+        tree: Tree,\n+        paramNames: List[String]\n+    ): List[l.TextEdit] = {\n+      val args = tree match {\n+        case Term.Apply(_, xs) => xs\n+        case Init(_, _, xss) => xss.flatten\n+        case _ => Nil\n+      }\n+      args.zip(paramNames).flatMap {\n+        case (Term.Assign(_, _), _) =>\n+          // already a named argument, no edit needed\n+          None\n+        case (term, paramName) =>\n+          val position = term.pos.toLSP.getStart\n+          val text = s\"$paramName = \"\n+          val edit = new l.TextEdit(new l.Range(position, position), text)\n+          Some(edit)\n+      }\n+    }\n+\n+    val path = params.getTextDocument().getUri().toAbsolutePath\n+\n+    Future {\n+      (for {\n+        rootTree <- trees.get(path)\n+        methodApplyTree <- findMethodApplyOrCtorTreeUnderCursor(\n+          rootTree,\n+          params.getRange\n+        )\n+        textDocument <- semanticdbs.textDocument(path).documentIncludingStale\n+        symbolTree <- findSymbolTree(methodApplyTree)\n+        resolvedSymbol = resolveSymbol(\n+          params.getTextDocument,\n+          path,\n+          textDocument,\n+          symbolTree.pos\n+        )\n+        symbolOccurrence <- resolvedSymbol.occurrence\n+        symbol = tweakSymbol(symbolOccurrence.symbol)\n+        symbolDocumentation <- symbolSearch\n+          .documentation(symbol)\n+          .asScala\n+        parameterNames = symbolDocumentation\n+          .parameters()\n+          .asScala\n+          .map(_.displayName())\n+          .toList"
  },
  {
    "id" : "3b335304-2aee-4077-a4ea-6a28734d5cef",
    "prId" : 1079,
    "comments" : [
      {
        "id" : "052feee4-d9db-4d09-b6c2-5e199fbdee64",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "```suggestion\r\n  val label = \"Use named arguments\"\r\n```",
        "createdAt" : "2019-12-31T14:23:53Z",
        "updatedAt" : "2019-12-31T17:11:21Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "24dbb9c0-5e52-4bc0-aaa4-363dbc54c599",
        "parentId" : "052feee4-d9db-4d09-b6c2-5e199fbdee64",
        "author" : {
          "login" : "cb372",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/106760?v=4"
        },
        "body" : "I don't really mind either way, but FYI lsp4j (and the LSP spec) calls it a title.",
        "createdAt" : "2019-12-31T15:21:18Z",
        "updatedAt" : "2019-12-31T17:11:21Z",
        "lastEditedBy" : {
          "login" : "cb372",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/106760?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ea45e2cf-47fc-4c98-af57-d243c66339da",
        "parentId" : "052feee4-d9db-4d09-b6c2-5e199fbdee64",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "ah, nevermind then, can we rename the `ImpostMissingSymbol` one for consistency?",
        "createdAt" : "2019-12-31T16:53:13Z",
        "updatedAt" : "2019-12-31T17:11:21Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89aca41816462ba01562e42601693aeb33124189",
    "line" : 125,
    "diffHunk" : "@@ -0,0 +1,164 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.concurrent.{Future, ExecutionContext}\n+import scala.meta._\n+import scala.meta.pc.CancelToken\n+import scala.meta.internal.metals._\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.mtags._\n+import scala.meta.internal.semanticdb.TextDocument\n+import org.eclipse.{lsp4j => l}\n+\n+class UseNamedArguments(\n+    trees: Trees,\n+    semanticdbs: Semanticdbs,\n+    symbolSearch: MetalsSymbolSearch,\n+    definitionProvider: DefinitionProvider\n+) extends CodeAction {\n+\n+  override def kind: String = l.CodeActionKind.Refactor\n+\n+  override def contribute(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+\n+    def findMethodApplyOrCtorTreeUnderCursor(\n+        root: Tree,\n+        cursorPos: l.Range\n+    ): Option[Tree] =\n+      root\n+        .collect {\n+          case t @ Term.Apply(_, _) if t.pos.toLSP.encloses(cursorPos) => t\n+          case t @ Init(_, _, _) if t.pos.toLSP.encloses(cursorPos) => t\n+        }\n+        .sortBy(_.pos.start)\n+        .lastOption\n+\n+    def findSymbolTree(tree: Tree): Option[Name] = tree match {\n+      case x @ Term.Name(_) => Some(x)\n+      case x @ Type.Name(_) => Some(x)\n+      case Term.Select(_, x) => Some(x)\n+      case Term.Apply(x, _) => findSymbolTree(x)\n+      case Term.ApplyType(x, _) => findSymbolTree(x)\n+      case Type.Apply(x, _) => findSymbolTree(x)\n+      case Init(x, _, _) => findSymbolTree(x)\n+      case _ => None\n+    }\n+\n+    def resolveSymbol(\n+        textDocumentId: l.TextDocumentIdentifier,\n+        path: AbsolutePath,\n+        textDocument: TextDocument,\n+        symbolTreePos: Position\n+    ): ResolvedSymbolOccurrence = {\n+      val tdpp = new l.TextDocumentPositionParams(\n+        textDocumentId,\n+        symbolTreePos.toLSP.getStart\n+      )\n+      definitionProvider.positionOccurrence(path, tdpp, textDocument)\n+    }\n+\n+    val methodSymbolPattern = \"\"\".*\\((\\+\\d+)?\\)\\.$\"\"\"\n+\n+    def tweakSymbol(symbol: String): String = {\n+      if (symbol.endsWith(\".\") && !symbol.matches(methodSymbolPattern)) {\n+        /*\n+         * We've probably been given a companion object symbol\n+         * e.g. in the case (@@ = cursor)\n+         *\n+         * case class Foo(a: Int, b: Int)\n+         * val x = Fo@@o(1, 2)\n+         *\n+         * the definition provider gives us the symbol of the companion\n+         * object. This is no good to us, so we try to replace it with\n+         * the case class's symbol.\n+         * In other words we turn \"example/Foo.\" into \"example/Foo#\"\n+         */\n+        symbol.stripSuffix(\".\") ++ \"#\"\n+      } else {\n+        symbol\n+      }\n+    }\n+\n+    def buildEdits(\n+        tree: Tree,\n+        paramNames: List[String]\n+    ): List[l.TextEdit] = {\n+      val args = tree match {\n+        case Term.Apply(_, xs) => xs\n+        case Init(_, _, xss) => xss.flatten\n+        case _ => Nil\n+      }\n+      args.zip(paramNames).flatMap {\n+        case (Term.Assign(_, _), _) =>\n+          // already a named argument, no edit needed\n+          None\n+        case (term, paramName) =>\n+          val position = term.pos.toLSP.getStart\n+          val text = s\"$paramName = \"\n+          val edit = new l.TextEdit(new l.Range(position, position), text)\n+          Some(edit)\n+      }\n+    }\n+\n+    val path = params.getTextDocument().getUri().toAbsolutePath\n+\n+    Future {\n+      (for {\n+        rootTree <- trees.get(path)\n+        methodApplyTree <- findMethodApplyOrCtorTreeUnderCursor(\n+          rootTree,\n+          params.getRange\n+        )\n+        textDocument <- semanticdbs.textDocument(path).documentIncludingStale\n+        symbolTree <- findSymbolTree(methodApplyTree)\n+        resolvedSymbol = resolveSymbol(\n+          params.getTextDocument,\n+          path,\n+          textDocument,\n+          symbolTree.pos\n+        )\n+        symbolOccurrence <- resolvedSymbol.occurrence\n+        symbol = tweakSymbol(symbolOccurrence.symbol)\n+        symbolDocumentation <- symbolSearch\n+          .documentation(symbol)\n+          .asScala\n+        parameterNames = symbolDocumentation\n+          .parameters()\n+          .asScala\n+          .map(_.displayName())\n+          .toList\n+      } yield {\n+        val codeEdits = buildEdits(\n+          methodApplyTree,\n+          parameterNames\n+        )\n+\n+        codeEdits match {\n+          case Nil => None // refactoring results in no changes to the code\n+          case edits =>\n+            val edit = new l.WorkspaceEdit()\n+            val uri = params.getTextDocument().getUri()\n+            val changes = Map(uri -> edits.asJava)\n+\n+            val codeAction = new l.CodeAction()\n+            codeAction.setTitle(UseNamedArguments.title)\n+            codeAction.setKind(l.CodeActionKind.Refactor)\n+\n+            edit.setChanges(changes.asJava)\n+            codeAction.setEdit(edit)\n+            Some(codeAction)\n+        }\n+      }).flatten.toSeq\n+    }\n+\n+  }\n+\n+}\n+\n+object UseNamedArguments {\n+\n+  val title = \"Use named arguments\""
  },
  {
    "id" : "8f08dd91-6602-4acf-8acf-93d94639433f",
    "prId" : 1079,
    "comments" : [
      {
        "id" : "fca05622-db21-4fa6-ba3d-d091c4d201a2",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Is there a way to distinguish between code actions that are explicitly requested by the users and code action requests that are automatically triggered by the editor?\r\n\r\nI am concerned about triggering this method on every `codeAction` request since VS Code requests for code actions on every cursor move. The signature help method triggers typechecking on the same compiler thread as other completion/signatureHelp/hover requests from the user. I'm not sure how well this approach will scale as we introduce more code actions 🤔\r\n\r\nThe \"import missing symbol\" code action doesn't suffer from the same problems because it only does expensive analysis when the cursor is over a \"no such symbol\" diagnostic.\r\n\r\n",
        "createdAt" : "2020-01-01T17:03:37Z",
        "updatedAt" : "2020-01-01T17:03:42Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "df1c97aa-d9ec-48c1-9ed2-84f5c9a930eb",
        "parentId" : "fca05622-db21-4fa6-ba3d-d091c4d201a2",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "to clarify my intention when bringing up `signatureHelp`: I wouldn't merge it as is. I would rather extract the relevant bits off the `SignatureHelpProvider` and provide a more general API to get the active signature info (`signatureHelp` does a lot more, which we don't need for this code action and it also returns data in an inconvenient format).",
        "createdAt" : "2020-01-01T17:47:18Z",
        "updatedAt" : "2020-01-01T17:47:18Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "788ab375-8a12-45e0-98bd-bf2e8415e8c6",
        "parentId" : "fca05622-db21-4fa6-ba3d-d091c4d201a2",
        "author" : {
          "login" : "cb372",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/106760?v=4"
        },
        "body" : ">Is there a way to distinguish between code actions that are explicitly requested by the users and code action requests that are automatically triggered by the editor?\r\n\r\nUnfortunately not. On cursor move VS Code sends a code actions request with `only = null`, i.e. it requests all possible actions. Then if the user explicitly requests \"Refactor...\" or \"Quick Fix...\", it reuses the info it has already retrieved. I don't think it ever sends a code actions request in which it specifies a value for `only`.\r\n\r\nI'm not sure how much work it would be, but as a long term solution would it make sense for `Compilers` (or some layer on top of that) to cache the typechecking results? It could be computed once per `didChange` and then reused by various code actions, or whoever else might need it.\r\n\r\n@olafurpg What if we reverted to the previous implementation, using `definitionProvider` and `symbolSearch` instead of the presentation compiler? The code was more cumbersome, but would that alleviate your performance concerns? It was traversing a pre-built scalameta tree, then looking up the symbol in semanticdb, and finally looking up the symbol's definition in the mtags index, all of which should be faster than typechecking?\r\n\r\n@gabro That sounds reasonable but IIUC, even if we made the API nicer, any implementation that uses the presentation compiler hits the problem of triggering an expensive typecheck every time we generate the code action.\r\n\r\nNot quite sure how to proceed from here...",
        "createdAt" : "2020-01-01T22:00:35Z",
        "updatedAt" : "2020-01-01T22:00:35Z",
        "lastEditedBy" : {
          "login" : "cb372",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/106760?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e80a82df-40f3-4d95-8605-f828da25d819",
        "parentId" : "fca05622-db21-4fa6-ba3d-d091c4d201a2",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "@gabro suggested a nice solution in an offline conversation that the code action only needs to analyze whether the refactoring can be applied at the given position. If the refactoring is eligible, we return an ID for a command that performs the expensive analysis only if user explicitly chooses to apply the code action.\r\n\r\nI have a feeling it will be best add one method to the `PresentationCompiler` API that returns what code actions are available at a given position. This method will need to be aware of all available code actions. For \"add named argument\", this analysis involves checking only if the cursor is above an argument to a method call.\r\n\r\nWhat do you think?",
        "createdAt" : "2020-01-02T13:03:51Z",
        "updatedAt" : "2020-01-02T13:03:51Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5c5c765f-5385-4fc0-a7d0-d23f9a50f411",
        "parentId" : "fca05622-db21-4fa6-ba3d-d091c4d201a2",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "By the way, I've discovered that code actions that return a `codeEdit` directly are not necessarily supported by all clients, since they were added in a later revision of LSP. We should honor the `codeActionLiteralSupport` sent by the client.\r\n\r\nAt a first glance, all major LSP clients seem to support this (I've checked VS Code, coc.nvim, sublime's LSP, emacs-lsp), but we should honor the setting anyway.\r\n\r\nI can take care of it in a separate PR.\r\n\r\n---\r\n\r\nFor this specific PR, I have a proposal: can we split it into a PR that contains the refactoring to the codebase and a PR that implements the specific code action?\r\nI think the refactoring is pretty uncontroversial and we could merge it as is, whereas the code action requires a bit more work to nail the PC integration.\r\n\r\nWhat do you think @cb372?\r\n\r\nAlso, thank you for your patience: we're figuring this out as we go 😅",
        "createdAt" : "2020-01-02T13:40:45Z",
        "updatedAt" : "2020-01-02T13:40:45Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89aca41816462ba01562e42601693aeb33124189",
    "line" : 72,
    "diffHunk" : "@@ -0,0 +1,127 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.concurrent.{Future, ExecutionContext}\n+import scala.meta._\n+import scala.meta.pc.CancelToken\n+import scala.meta.internal.metals._\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import org.eclipse.{lsp4j => l}\n+\n+class UseNamedArguments(\n+    compilers: Compilers,\n+    interactiveSemanticdbs: InteractiveSemanticdbs,\n+    trees: Trees\n+) extends CodeAction {\n+\n+  override def kind: String = l.CodeActionKind.Refactor\n+\n+  override def contribute(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+\n+    def findMethodApplyOrCtorTreeUnderCursor(\n+        root: Tree,\n+        cursorPos: l.Range\n+    ): Option[Tree] =\n+      root\n+        .collect {\n+          case t: Term.Apply\n+              if t.pos.toLSP.encloses(cursorPos) && !t.fun.pos.toLSP.encloses(\n+                cursorPos\n+              ) =>\n+            t\n+          case t: Init\n+              if t.pos.toLSP.encloses(cursorPos) && !t.tpe.pos.toLSP.encloses(\n+                cursorPos\n+              ) =>\n+            t\n+        }\n+        .sortBy(_.pos.start)\n+        .lastOption\n+\n+    def buildEdits(\n+        tree: Tree,\n+        paramNames: List[String]\n+    ): List[l.TextEdit] = {\n+      val args = tree match {\n+        case Term.Apply(_, xs) => xs\n+        case Init(_, _, xss) => xss.flatten\n+        case _ => Nil\n+      }\n+      args.zip(paramNames).flatMap {\n+        case (Term.Assign(_, _), _) =>\n+          // already a named argument, no edit needed\n+          None\n+        case (term, paramName) =>\n+          val position = term.pos.toLSP.getStart\n+          val text = s\"$paramName = \"\n+          val edit = new l.TextEdit(new l.Range(position, position), text)\n+          Some(edit)\n+      }\n+    }\n+\n+    val path = params.getTextDocument().getUri().toAbsolutePath\n+\n+    val textDocPosParams = new l.TextDocumentPositionParams(\n+      params.getTextDocument,\n+      params.getRange.getStart\n+    )\n+\n+    val parameterNames: Future[List[String]] = compilers\n+      .signatureHelp(textDocPosParams, token, interactiveSemanticdbs)"
  }
]