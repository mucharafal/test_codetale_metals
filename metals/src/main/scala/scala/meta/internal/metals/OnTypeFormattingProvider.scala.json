[
  {
    "id" : "5c8d7155-d938-42a0-ad6d-44ba81187dac",
    "prId" : 865,
    "comments" : [
      {
        "id" : "9439ad97-2d4f-49ca-9c21-953074e9cf09",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "please, rename to `tripleQuote`",
        "createdAt" : "2019-08-13T10:57:16Z",
        "updatedAt" : "2019-08-21T09:26:02Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7f4fb9d8a2ce58d558a9425c21448607b38f510a",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,71 @@\n+package scala.meta.internal.metals\n+\n+import org.eclipse.lsp4j.{DocumentOnTypeFormattingParams, Range, TextEdit}\n+\n+import scala.meta.internal.mtags.Semanticdbs\n+\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.Future\n+import scala.meta.inputs.Input\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.tokens.Token\n+import scala.meta.tokens.Token.Constant\n+\n+final class OnTypeFormattingProvider(\n+    semanticdbs: Semanticdbs\n+)(implicit ec: ExecutionContext) {\n+\n+  val quot = \"\"\"\\u0022\\u0022\\u0022\"\"\""
  },
  {
    "id" : "faa9e883-84dd-4920-9fc3-5bce85fea26b",
    "prId" : 865,
    "comments" : [
      {
        "id" : "56f61a8c-544a-4d93-a7c8-8b61bfe86f1b",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "what is \"bit\"?",
        "createdAt" : "2019-08-13T10:58:31Z",
        "updatedAt" : "2019-08-21T09:26:02Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7f4fb9d8a2ce58d558a9425c21448607b38f510a",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,71 @@\n+package scala.meta.internal.metals\n+\n+import org.eclipse.lsp4j.{DocumentOnTypeFormattingParams, Range, TextEdit}\n+\n+import scala.meta.internal.mtags.Semanticdbs\n+\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.Future\n+import scala.meta.inputs.Input\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.tokens.Token\n+import scala.meta.tokens.Token.Constant\n+\n+final class OnTypeFormattingProvider(\n+    semanticdbs: Semanticdbs\n+)(implicit ec: ExecutionContext) {\n+\n+  val quot = \"\"\"\\u0022\\u0022\\u0022\"\"\"\n+  val space = \" \"\n+\n+  private def indent(toInput: Input.VirtualFile, pos: meta.Position): String = {\n+    val bit = toInput.text.substring(0, pos.start)"
  },
  {
    "id" : "a8a53fa5-1ac1-4d2b-a8bb-ac20434a9263",
    "prId" : 865,
    "comments" : [
      {
        "id" : "cf9f4491-e0db-4702-bdff-7433ae126660",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "those private defs should be below the one method uses them (or even defined within this method)",
        "createdAt" : "2019-08-13T11:01:38Z",
        "updatedAt" : "2019-08-21T09:26:02Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7f4fb9d8a2ce58d558a9425c21448607b38f510a",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,71 @@\n+package scala.meta.internal.metals\n+\n+import org.eclipse.lsp4j.{DocumentOnTypeFormattingParams, Range, TextEdit}\n+\n+import scala.meta.internal.mtags.Semanticdbs\n+\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.Future\n+import scala.meta.inputs.Input\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.tokens.Token\n+import scala.meta.tokens.Token.Constant\n+\n+final class OnTypeFormattingProvider(\n+    semanticdbs: Semanticdbs\n+)(implicit ec: ExecutionContext) {\n+\n+  val quot = \"\"\"\\u0022\\u0022\\u0022\"\"\"\n+  val space = \" \"\n+\n+  private def indent(toInput: Input.VirtualFile, pos: meta.Position): String = {\n+    val bit = toInput.text.substring(0, pos.start)\n+    val lastNewline = bit.lastIndexOf(\"\\n\")\n+    val lastPipe = bit.lastIndexOf(\"|\")\n+    val length = toInput.text\n+      .substring(lastNewline, lastPipe)\n+      .length - 1\n+    space * length\n+  }\n+\n+  private def longString(text: String, token: Token): Boolean = {"
  },
  {
    "id" : "67663c32-b11b-4692-b708-ea76d2922fc2",
    "prId" : 865,
    "comments" : [
      {
        "id" : "0554ee58-0227-4e9e-b8c4-9b8c21a0f63e",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "`isLongString` sound a bit nicer nicer when read inside an if: \r\n`if((...) and isLongString(foo)`",
        "createdAt" : "2019-08-13T11:02:54Z",
        "updatedAt" : "2019-08-21T09:26:02Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7f4fb9d8a2ce58d558a9425c21448607b38f510a",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,71 @@\n+package scala.meta.internal.metals\n+\n+import org.eclipse.lsp4j.{DocumentOnTypeFormattingParams, Range, TextEdit}\n+\n+import scala.meta.internal.mtags.Semanticdbs\n+\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.Future\n+import scala.meta.inputs.Input\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.tokens.Token\n+import scala.meta.tokens.Token.Constant\n+\n+final class OnTypeFormattingProvider(\n+    semanticdbs: Semanticdbs\n+)(implicit ec: ExecutionContext) {\n+\n+  val quot = \"\"\"\\u0022\\u0022\\u0022\"\"\"\n+  val space = \" \"\n+\n+  private def indent(toInput: Input.VirtualFile, pos: meta.Position): String = {\n+    val bit = toInput.text.substring(0, pos.start)\n+    val lastNewline = bit.lastIndexOf(\"\\n\")\n+    val lastPipe = bit.lastIndexOf(\"|\")\n+    val length = toInput.text\n+      .substring(lastNewline, lastPipe)\n+      .length - 1\n+    space * length\n+  }\n+\n+  private def longString(text: String, token: Token): Boolean = {"
  },
  {
    "id" : "e252c02d-6162-4c27-8d92-88e99a0b8ecf",
    "prId" : 865,
    "comments" : [
      {
        "id" : "77c1365b-7ae2-47fb-bd59-40d73e07b357",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "maybe `isMultilineString` ? one-line string can also be very long ;)",
        "createdAt" : "2019-08-13T11:03:26Z",
        "updatedAt" : "2019-08-21T09:26:02Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7f4fb9d8a2ce58d558a9425c21448607b38f510a",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,71 @@\n+package scala.meta.internal.metals\n+\n+import org.eclipse.lsp4j.{DocumentOnTypeFormattingParams, Range, TextEdit}\n+\n+import scala.meta.internal.mtags.Semanticdbs\n+\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.Future\n+import scala.meta.inputs.Input\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.tokens.Token\n+import scala.meta.tokens.Token.Constant\n+\n+final class OnTypeFormattingProvider(\n+    semanticdbs: Semanticdbs\n+)(implicit ec: ExecutionContext) {\n+\n+  val quot = \"\"\"\\u0022\\u0022\\u0022\"\"\"\n+  val space = \" \"\n+\n+  private def indent(toInput: Input.VirtualFile, pos: meta.Position): String = {\n+    val bit = toInput.text.substring(0, pos.start)\n+    val lastNewline = bit.lastIndexOf(\"\\n\")\n+    val lastPipe = bit.lastIndexOf(\"|\")\n+    val length = toInput.text\n+      .substring(lastNewline, lastPipe)\n+      .length - 1\n+    space * length\n+  }\n+\n+  private def longString(text: String, token: Token): Boolean = {"
  },
  {
    "id" : "9516fdde-e63d-47d3-96c3-de1c238ba56b",
    "prId" : 865,
    "comments" : [
      {
        "id" : "cec4ca3b-cba5-4093-8e90-8c0e2817befb",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "how about `lastNewline` ?",
        "createdAt" : "2019-08-13T11:05:10Z",
        "updatedAt" : "2019-08-21T09:26:02Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7f4fb9d8a2ce58d558a9425c21448607b38f510a",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,71 @@\n+package scala.meta.internal.metals\n+\n+import org.eclipse.lsp4j.{DocumentOnTypeFormattingParams, Range, TextEdit}\n+\n+import scala.meta.internal.mtags.Semanticdbs\n+\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.Future\n+import scala.meta.inputs.Input\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.tokens.Token\n+import scala.meta.tokens.Token.Constant\n+\n+final class OnTypeFormattingProvider(\n+    semanticdbs: Semanticdbs\n+)(implicit ec: ExecutionContext) {\n+\n+  val quot = \"\"\"\\u0022\\u0022\\u0022\"\"\"\n+  val space = \" \"\n+\n+  private def indent(toInput: Input.VirtualFile, pos: meta.Position): String = {\n+    val bit = toInput.text.substring(0, pos.start)\n+    val lastNewline = bit.lastIndexOf(\"\\n\")\n+    val lastPipe = bit.lastIndexOf(\"|\")\n+    val length = toInput.text\n+      .substring(lastNewline, lastPipe)\n+      .length - 1\n+    space * length\n+  }\n+\n+  private def longString(text: String, token: Token): Boolean = {\n+    text.substring(token.start, token.start + 3).equals(quot)\n+  }\n+\n+  private def inToken(pos: meta.Position, token: Token): Boolean = {\n+    pos.start >= token.start && pos.end <= token.end\n+  }\n+\n+  private def pipeInScope(pos: meta.Position, text: String): Boolean = {\n+    val lastNew ="
  },
  {
    "id" : "bd0b3cbd-21b2-48ea-815c-5a355df53c4d",
    "prId" : 865,
    "comments" : [
      {
        "id" : "58939cee-1826-4bae-a81f-cac046c12bd1",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "why `get` ? what if there are no tokens? maybe `getOrElse(Nil)` would be better?\r\nor something like this?\r\n```scala\r\nif(pipeInScope(pos, sourceText){\r\n  val tokenized = source.toInput.tokenize.toOption\r\n  tokenized.flatMap{ tokens => \r\n    tokens.collectFirst{ \r\n      case token: Constant.String if inToken(pos, token) && longString(sourceText, token) => \r\n        new TextEdit(range, indent(source.toInput, pos) + \"|\")\r\n      }\r\n  }\r\n} else {\r\n  None\r\n}\r\n```",
        "createdAt" : "2019-08-13T11:07:57Z",
        "updatedAt" : "2019-08-21T09:26:02Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7f4fb9d8a2ce58d558a9425c21448607b38f510a",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,71 @@\n+package scala.meta.internal.metals\n+\n+import org.eclipse.lsp4j.{DocumentOnTypeFormattingParams, Range, TextEdit}\n+\n+import scala.meta.internal.mtags.Semanticdbs\n+\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.Future\n+import scala.meta.inputs.Input\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.tokens.Token\n+import scala.meta.tokens.Token.Constant\n+\n+final class OnTypeFormattingProvider(\n+    semanticdbs: Semanticdbs\n+)(implicit ec: ExecutionContext) {\n+\n+  val quot = \"\"\"\\u0022\\u0022\\u0022\"\"\"\n+  val space = \" \"\n+\n+  private def indent(toInput: Input.VirtualFile, pos: meta.Position): String = {\n+    val bit = toInput.text.substring(0, pos.start)\n+    val lastNewline = bit.lastIndexOf(\"\\n\")\n+    val lastPipe = bit.lastIndexOf(\"|\")\n+    val length = toInput.text\n+      .substring(lastNewline, lastPipe)\n+      .length - 1\n+    space * length\n+  }\n+\n+  private def longString(text: String, token: Token): Boolean = {\n+    text.substring(token.start, token.start + 3).equals(quot)\n+  }\n+\n+  private def inToken(pos: meta.Position, token: Token): Boolean = {\n+    pos.start >= token.start && pos.end <= token.end\n+  }\n+\n+  private def pipeInScope(pos: meta.Position, text: String): Boolean = {\n+    val lastNew =\n+      text.substring(0, pos.start).lastIndexOf(\"\\n\")\n+    text\n+      .substring(lastNew, pos.start)\n+      .contains(\"|\")\n+  }\n+\n+  def format(\n+      params: DocumentOnTypeFormattingParams\n+  ): Future[Option[TextEdit]] = {\n+    val source = params.getTextDocument.getUri.toAbsolutePath\n+    if (source.exists) {\n+      val range = new Range(params.getPosition, params.getPosition)\n+      val pos = params.getPosition.toMeta(source.toInput)\n+      val sourceText = source.toInput.text\n+      val tokens = source.toInput.tokenize.toOption\n+      var edit: Option[TextEdit] = None\n+      tokens.get.foreach {"
  },
  {
    "id" : "636b88e7-57e3-4dfc-ae16-7e7519d2f8e0",
    "prId" : 865,
    "comments" : [
      {
        "id" : "3c9308ca-117c-4da8-881e-1590f85fb094",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Why failure instead of a `None` ?",
        "createdAt" : "2019-08-13T11:24:08Z",
        "updatedAt" : "2019-08-21T09:26:02Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7f4fb9d8a2ce58d558a9425c21448607b38f510a",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,71 @@\n+package scala.meta.internal.metals\n+\n+import org.eclipse.lsp4j.{DocumentOnTypeFormattingParams, Range, TextEdit}\n+\n+import scala.meta.internal.mtags.Semanticdbs\n+\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.Future\n+import scala.meta.inputs.Input\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.tokens.Token\n+import scala.meta.tokens.Token.Constant\n+\n+final class OnTypeFormattingProvider(\n+    semanticdbs: Semanticdbs\n+)(implicit ec: ExecutionContext) {\n+\n+  val quot = \"\"\"\\u0022\\u0022\\u0022\"\"\"\n+  val space = \" \"\n+\n+  private def indent(toInput: Input.VirtualFile, pos: meta.Position): String = {\n+    val bit = toInput.text.substring(0, pos.start)\n+    val lastNewline = bit.lastIndexOf(\"\\n\")\n+    val lastPipe = bit.lastIndexOf(\"|\")\n+    val length = toInput.text\n+      .substring(lastNewline, lastPipe)\n+      .length - 1\n+    space * length\n+  }\n+\n+  private def longString(text: String, token: Token): Boolean = {\n+    text.substring(token.start, token.start + 3).equals(quot)\n+  }\n+\n+  private def inToken(pos: meta.Position, token: Token): Boolean = {\n+    pos.start >= token.start && pos.end <= token.end\n+  }\n+\n+  private def pipeInScope(pos: meta.Position, text: String): Boolean = {\n+    val lastNew =\n+      text.substring(0, pos.start).lastIndexOf(\"\\n\")\n+    text\n+      .substring(lastNew, pos.start)\n+      .contains(\"|\")\n+  }\n+\n+  def format(\n+      params: DocumentOnTypeFormattingParams\n+  ): Future[Option[TextEdit]] = {\n+    val source = params.getTextDocument.getUri.toAbsolutePath\n+    if (source.exists) {\n+      val range = new Range(params.getPosition, params.getPosition)\n+      val pos = params.getPosition.toMeta(source.toInput)\n+      val sourceText = source.toInput.text\n+      val tokens = source.toInput.tokenize.toOption\n+      var edit: Option[TextEdit] = None\n+      tokens.get.foreach {\n+        case token @ Constant.String(_) =>\n+          if (inToken(pos, token) && longString(sourceText, token) && pipeInScope(\n+              pos,\n+              sourceText\n+            ))\n+            edit = Some(new TextEdit(range, indent(source.toInput, pos) + \"|\"))\n+        case _ => None\n+      }\n+      Future.successful(edit)\n+    } else {\n+      Future.failed(new Exception(\"There is no source\"))"
  },
  {
    "id" : "7ff1edb8-30b6-4c9d-a51e-8f2b0e550c84",
    "prId" : 865,
    "comments" : [
      {
        "id" : "f793c10c-fd3c-426f-9d7b-217725da6bcf",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "we can remove this `var` if we add some else blocks:\r\n```scala\r\nelse Future.successful(None)\r\n```",
        "createdAt" : "2019-08-19T08:05:46Z",
        "updatedAt" : "2019-08-21T09:26:02Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7f4fb9d8a2ce58d558a9425c21448607b38f510a",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,73 @@\n+package scala.meta.internal.metals\n+\n+import org.eclipse.lsp4j.{DocumentOnTypeFormattingParams, Range, TextEdit}\n+\n+import scala.meta.internal.mtags.Semanticdbs\n+\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.Future\n+import scala.meta.inputs.Input\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.tokens.Token\n+import scala.meta.tokens.Token.Constant\n+\n+final class OnTypeFormattingProvider(\n+    semanticdbs: Semanticdbs,\n+    buffer: Buffers\n+)(implicit ec: ExecutionContext) {\n+\n+  val tripleQuote = \"\"\"\\u0022\\u0022\\u0022\"\"\"\n+  val space = \" \"\n+\n+  private def indent(toInput: String, pos: meta.Position): String = {\n+    val beforePos = toInput.substring(0, pos.start)\n+    val lastPipe = beforePos.lastIndexOf(\"|\")\n+    val lastNewline = beforePos.lastIndexOf(\"\\n\", lastPipe)\n+    val indent = beforePos.substring(beforePos.lastIndexOf(\"\\n\")).length\n+    val length = toInput.substring(lastNewline, lastPipe).length\n+    space * (length - indent)\n+  }\n+\n+  private def isLongString(text: String, token: Token): Boolean = {\n+    text.substring(token.start, token.start + 3).equals(tripleQuote)\n+  }\n+\n+  private def inToken(pos: meta.Position, token: Token): Boolean = {\n+    pos.start >= token.start && pos.end <= token.end\n+  }\n+\n+  private def pipeInScope(pos: meta.Position, text: String): Boolean = {\n+    val firstNewline = text.substring(0, pos.start).lastIndexOf(\"\\n\")\n+    val lastNewline =\n+      text.substring(0, firstNewline).lastIndexOf(\"\\n\")\n+    text\n+      .substring(lastNewline + 1, pos.start)\n+      .contains(\"|\")\n+  }\n+\n+  def format(\n+      params: DocumentOnTypeFormattingParams\n+  ): Future[Option[TextEdit]] = {\n+    val source = params.getTextDocument.getUri.toAbsolutePath\n+    var edit: Option[TextEdit] = None"
  },
  {
    "id" : "39776305-46fd-42ac-813b-6c5f188ca076",
    "prId" : 865,
    "comments" : [
      {
        "id" : "b296ee16-08ec-43b6-8086-3af9f124b285",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Let's just return the `new TextEdit(...)` here. as a result, the `tokens.flatMap` on line 62 will be returning this edit.\r\n```scala\r\nif (pipeInScope(pos, sourceText)) {\r\n  val tokens = Input.VirtualFile(...)\r\n  tokens.flatMap { tokens => tokens.collectFirst{ case (...) if (...) => new TextEdit(...) } }\r\n} else Future.successfull(None)\r\n```\r\nor we could do:\r\n```scala\r\ntokens match {\r\n  case None => \r\n    Future.successful(None)\r\n  case tokens => \r\n    tokens.collectFirst{ case (...) if (...) => new TextEdit(...) }\r\n}\r\n```\r\n\r\nwhatever you find more readable",
        "createdAt" : "2019-08-19T08:11:35Z",
        "updatedAt" : "2019-08-21T09:26:02Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b0f92b48-1c95-488a-ac5e-8f91ede6ee6b",
        "parentId" : "b296ee16-08ec-43b6-8086-3af9f124b285",
        "author" : {
          "login" : "Karolina-Bogacka",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/23015369?u=b3677e6a6a4594e396a59e1386936bfbc1b27829&v=4"
        },
        "body" : "? how can we return Future.succesful(None) when we want to return Future[TextEdit]? wouldn't a None be more fitting for Option[TextEdit]?",
        "createdAt" : "2019-08-19T13:33:38Z",
        "updatedAt" : "2019-08-21T09:26:02Z",
        "lastEditedBy" : {
          "login" : "Karolina-Bogacka",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/23015369?u=b3677e6a6a4594e396a59e1386936bfbc1b27829&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7f4fb9d8a2ce58d558a9425c21448607b38f510a",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,73 @@\n+package scala.meta.internal.metals\n+\n+import org.eclipse.lsp4j.{DocumentOnTypeFormattingParams, Range, TextEdit}\n+\n+import scala.meta.internal.mtags.Semanticdbs\n+\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.Future\n+import scala.meta.inputs.Input\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.tokens.Token\n+import scala.meta.tokens.Token.Constant\n+\n+final class OnTypeFormattingProvider(\n+    semanticdbs: Semanticdbs,\n+    buffer: Buffers\n+)(implicit ec: ExecutionContext) {\n+\n+  val tripleQuote = \"\"\"\\u0022\\u0022\\u0022\"\"\"\n+  val space = \" \"\n+\n+  private def indent(toInput: String, pos: meta.Position): String = {\n+    val beforePos = toInput.substring(0, pos.start)\n+    val lastPipe = beforePos.lastIndexOf(\"|\")\n+    val lastNewline = beforePos.lastIndexOf(\"\\n\", lastPipe)\n+    val indent = beforePos.substring(beforePos.lastIndexOf(\"\\n\")).length\n+    val length = toInput.substring(lastNewline, lastPipe).length\n+    space * (length - indent)\n+  }\n+\n+  private def isLongString(text: String, token: Token): Boolean = {\n+    text.substring(token.start, token.start + 3).equals(tripleQuote)\n+  }\n+\n+  private def inToken(pos: meta.Position, token: Token): Boolean = {\n+    pos.start >= token.start && pos.end <= token.end\n+  }\n+\n+  private def pipeInScope(pos: meta.Position, text: String): Boolean = {\n+    val firstNewline = text.substring(0, pos.start).lastIndexOf(\"\\n\")\n+    val lastNewline =\n+      text.substring(0, firstNewline).lastIndexOf(\"\\n\")\n+    text\n+      .substring(lastNewline + 1, pos.start)\n+      .contains(\"|\")\n+  }\n+\n+  def format(\n+      params: DocumentOnTypeFormattingParams\n+  ): Future[Option[TextEdit]] = {\n+    val source = params.getTextDocument.getUri.toAbsolutePath\n+    var edit: Option[TextEdit] = None\n+    if (source.exists) {\n+      val range = new Range(params.getPosition, params.getPosition)\n+      val sourceText = buffer.get(source).getOrElse(\"\")\n+      val pos = params.getPosition.toMeta(\n+        Input.VirtualFile(source.toString(), sourceText)\n+      )\n+      if (pipeInScope(pos, sourceText)) {\n+        val tokens =\n+          Input.VirtualFile(source.toString(), sourceText).tokenize.toOption\n+        tokens.flatMap { tokens =>\n+          tokens.collectFirst {\n+            case token: Constant.String\n+                if inToken(pos, token) && isLongString(sourceText, token) =>\n+              edit = Some(new TextEdit(range, indent(sourceText, pos) + \"|\"))"
  },
  {
    "id" : "684084ec-10a6-4f13-810b-820157d82bac",
    "prId" : 904,
    "comments" : [
      {
        "id" : "a0abaa01-652a-4fa1-bd69-f5b1243bb1f4",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Does this handle interpolated strings?\r\n\r\n```\r\ns\"\"\"\r\n  |Hello $world\r\n\"\"\".stripMargin\r\n```",
        "createdAt" : "2019-09-06T19:43:55Z",
        "updatedAt" : "2019-09-09T11:00:39Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "eee69259-f864-4641-b22c-4644dc3ae574",
        "parentId" : "a0abaa01-652a-4fa1-bd69-f5b1243bb1f4",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Yes, however I don't think there is a test case for it. I will add that.",
        "createdAt" : "2019-09-07T12:42:16Z",
        "updatedAt" : "2019-09-09T11:00:39Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "42e3cf73-dece-4f03-b1ce-79c379b4b0af",
        "parentId" : "a0abaa01-652a-4fa1-bd69-f5b1243bb1f4",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I just tried the latest snapshot and the `|` addition didn't work for me when using an interpolator. Does this PR fix it?",
        "createdAt" : "2019-09-07T17:39:41Z",
        "updatedAt" : "2019-09-09T11:00:39Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2ada3c18-ceaf-42fe-baa3-58bba1e2292c",
        "parentId" : "a0abaa01-652a-4fa1-bd69-f5b1243bb1f4",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Och, I think there might be an issue actually coming to think of that 🙁 Will add test cases and fix it here. ",
        "createdAt" : "2019-09-07T17:59:32Z",
        "updatedAt" : "2019-09-09T11:00:39Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "55f9b61c-220f-4b3e-a5f1-7c3dfefb1169",
        "parentId" : "a0abaa01-652a-4fa1-bd69-f5b1243bb1f4",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Ok, now I fixed it. I just assumed we tested it.",
        "createdAt" : "2019-09-09T11:01:44Z",
        "updatedAt" : "2019-09-09T11:01:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "82b8c0b0536dacc3bb76c002911a4239f9be8013",
    "line" : 26,
    "diffHunk" : "@@ -8,17 +8,35 @@ import scala.meta.internal.metals.MetalsEnrichments._\n import scala.meta.internal.mtags.Semanticdbs\n import scala.meta.tokens.Token\n import scala.meta.tokens.Token.Constant\n+import scala.meta.tokens.Tokens\n \n /*in order to use onTypeFormatting in vscode,\n you'll have to set editor.formatOnType = true in settings*/\n-\n final class OnTypeFormattingProvider(\n     semanticdbs: Semanticdbs,\n     buffer: Buffers\n )(implicit ec: ExecutionContext) {\n \n-  val tripleQuote = \"\"\"\\u0022\\u0022\\u0022\"\"\"\n-  val space = \" \"\n+  private val tripleQuote = \"\"\"\\u0022\\u0022\\u0022\"\"\"\n+  private val space = \" \"\n+  private val stripMargin = \"stripMargin\"\n+\n+  private def isFinishedByStripMargin(\n+      stringTokenIndex: Int,\n+      tokens: Tokens\n+  ): Boolean = {\n+    var methodIndex = stringTokenIndex + 1\n+\n+    while (tokens(methodIndex).isWhiteSpaceOrComment ||"
  },
  {
    "id" : "7f570c1d-cb93-476b-b951-00d0e73d8ae5",
    "prId" : 904,
    "comments" : [
      {
        "id" : "6d91c0de-1da0-49f8-b642-5337c6b914c3",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "`hasStripMarginSuffix` ? `finished` sound a bit... final? ;)",
        "createdAt" : "2019-09-09T09:23:14Z",
        "updatedAt" : "2019-09-09T11:00:39Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "aa76b195-e463-4b60-b57d-123e05219b5b",
        "parentId" : "6d91c0de-1da0-49f8-b642-5337c6b914c3",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-09-09T11:01:20Z",
        "updatedAt" : "2019-09-09T11:01:20Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "82b8c0b0536dacc3bb76c002911a4239f9be8013",
    "line" : null,
    "diffHunk" : "@@ -8,17 +8,35 @@ import scala.meta.internal.metals.MetalsEnrichments._\n import scala.meta.internal.mtags.Semanticdbs\n import scala.meta.tokens.Token\n import scala.meta.tokens.Token.Constant\n+import scala.meta.tokens.Tokens\n \n /*in order to use onTypeFormatting in vscode,\n you'll have to set editor.formatOnType = true in settings*/\n-\n final class OnTypeFormattingProvider(\n     semanticdbs: Semanticdbs,\n     buffer: Buffers\n )(implicit ec: ExecutionContext) {\n \n-  val tripleQuote = \"\"\"\\u0022\\u0022\\u0022\"\"\"\n-  val space = \" \"\n+  private val tripleQuote = \"\"\"\\u0022\\u0022\\u0022\"\"\"\n+  private val space = \" \"\n+  private val stripMargin = \"stripMargin\"\n+\n+  private def isFinishedByStripMargin("
  },
  {
    "id" : "959a37f2-d1c0-483b-aac3-11a93085e155",
    "prId" : 904,
    "comments" : [
      {
        "id" : "4f78eb5e-41c0-4883-ad1e-6a3e3e1a5b19",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Just a though, no need to act on it.\r\n\r\nit would be nice to have the tokens as something akin to the iterator:\r\n```scala\r\ntokens.skipUntil{\r\n case token: Constant.String => (...)\r\n case _ =>  false\r\n}\r\n```\r\n\r\nthe `isFinishedByStripMargin` implementation would be much nicer",
        "createdAt" : "2019-09-09T09:28:19Z",
        "updatedAt" : "2019-09-09T11:00:39Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "03cd2619-4b9f-4a9f-b899-524d2d21c9cc",
        "parentId" : "4f78eb5e-41c0-4883-ad1e-6a3e3e1a5b19",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "This would imply that Tokens are mutable underneath or I would need to create a mutable structure over it :/ I prefer to keep any mutable state local and explicit.",
        "createdAt" : "2019-09-09T09:40:11Z",
        "updatedAt" : "2019-09-09T11:00:39Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "606dfdd9-bba0-4cb3-8a64-16577a9ab0eb",
        "parentId" : "4f78eb5e-41c0-4883-ad1e-6a3e3e1a5b19",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "And I needed to change it even more to make it work with interpolated strings\r\n",
        "createdAt" : "2019-09-09T11:02:21Z",
        "updatedAt" : "2019-09-09T11:02:21Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "82b8c0b0536dacc3bb76c002911a4239f9be8013",
    "line" : null,
    "diffHunk" : "@@ -60,16 +78,23 @@ final class OnTypeFormattingProvider(\n       if (pipeInScope(pos, sourceText)) {\n         val tokens =\n           Input.VirtualFile(source.toString(), sourceText).tokenize.toOption\n-        tokens.flatMap { tokens =>\n-          tokens.collectFirst {\n-            case token: Constant.String\n-                if inToken(pos, token) &&\n-                  isMultilineString(sourceText, token) =>\n-              new TextEdit(range, indent(sourceText, pos) + \"|\")\n+        tokens.flatMap { tokens: Tokens =>\n+          val tokenIndex = tokens.indexWhere {"
  }
]