[
  {
    "id" : "545c5efa-7695-4f3c-b4e6-3f11703cc6c9",
    "prId" : 721,
    "comments" : [
      {
        "id" : "cf4fca94-1cef-46c0-887f-44fd2c8ed6ca",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "`@JsonRequest(\"launch\")`, same for `initialize`.",
        "createdAt" : "2019-05-20T10:29:15Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bb4385b6-7a1b-4088-9fa8-17e2e44c5f4e",
        "parentId" : "cf4fca94-1cef-46c0-887f-44fd2c8ed6ca",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I don't feel strongly about this, I just realized this doesn't seem to be necessary for DAP since all the requests are simple identifiers. For LSP the endpoints are named `textDocument/definition` so that's why we pass in the string name in `MetalsLanguageServer`. Feel free to do it only if you think it helps with consistency for our usage of `@JsonRequest`",
        "createdAt" : "2019-05-20T15:16:58Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e3c999e9b79f7d0d6a4c95756d12ec54f6abbc90",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,54 @@\n+package scala.meta.internal.metals.debug\n+\n+import java.util.concurrent.CompletableFuture\n+import org.eclipse.lsp4j.debug.Capabilities\n+import org.eclipse.lsp4j.debug.InitializeRequestArguments\n+import org.eclipse.lsp4j.debug.services.IDebugProtocolClient\n+import org.eclipse.lsp4j.jsonrpc.services.JsonRequest\n+import scala.concurrent.ExecutionContext\n+import scala.meta.internal.debug.DebugAdapter\n+import scala.meta.internal.debug.JvmDebugAdapter\n+import scala.meta.internal.metals.BuildTargets\n+import scala.meta.internal.metals.CompilationScheduler\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.metals.debug.{protocol => metals}\n+\n+/**\n+ * Metals receive requests without the full knowledge - e.g. without classpath.\n+ * Here, we provide such information\n+ */\n+class MetalsDebugAdapter(\n+    underlying: JvmDebugAdapter,\n+    parametersAdapter: DebugParametersAdapter\n+)(implicit ec: ExecutionContext)\n+    extends DebugAdapter {\n+\n+  @JsonRequest"
  },
  {
    "id" : "76fac7d6-1dbc-4db3-a5e3-f7638bdc8cc2",
    "prId" : 721,
    "comments" : [
      {
        "id" : "d2b7bb9d-a764-43db-b5af-548b1a4e5534",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "To support cancellation, we need to implement the `disconnect` request. Currently, when the user clicks the \"Stop\" button the following appears in the trace logs\r\n\r\n\r\n```json\r\n{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"id\": 3,\r\n  \"method\": \"disconnect\",\r\n  \"params\": {\r\n    \"restart\": false\r\n  }\r\n}\r\n{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"id\": 3,\r\n  \"error\": {\r\n    \"code\": -32601,\r\n    \"message\": \"Unsupported request method: disconnect\"\r\n  }\r\n}\r\n```\r\n\r\n<img width=\"832\" alt=\"Screenshot 2019-05-20 at 12 30 35\" src=\"https://user-images.githubusercontent.com/1408093/58015316-310fa680-7afb-11e9-8407-5fc04396b50f.png\">\r\n\r\nWhen disconnecting, we should kill the process so that even infinite loops are stopped. Currently, Metals leaves a zombie process\r\n```scala\r\n$ stack 6710 | grep scala\r\n\tat example.Main$.main(User.scala:8)\r\n\tat example.Main.main(User.scala)\r\n```\r\n",
        "createdAt" : "2019-05-20T10:32:48Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e3c999e9b79f7d0d6a4c95756d12ec54f6abbc90",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,54 @@\n+package scala.meta.internal.metals.debug\n+\n+import java.util.concurrent.CompletableFuture\n+import org.eclipse.lsp4j.debug.Capabilities\n+import org.eclipse.lsp4j.debug.InitializeRequestArguments\n+import org.eclipse.lsp4j.debug.services.IDebugProtocolClient\n+import org.eclipse.lsp4j.jsonrpc.services.JsonRequest\n+import scala.concurrent.ExecutionContext\n+import scala.meta.internal.debug.DebugAdapter\n+import scala.meta.internal.debug.JvmDebugAdapter\n+import scala.meta.internal.metals.BuildTargets\n+import scala.meta.internal.metals.CompilationScheduler\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.metals.debug.{protocol => metals}\n+\n+/**\n+ * Metals receive requests without the full knowledge - e.g. without classpath.\n+ * Here, we provide such information\n+ */\n+class MetalsDebugAdapter(\n+    underlying: JvmDebugAdapter,\n+    parametersAdapter: DebugParametersAdapter\n+)(implicit ec: ExecutionContext)\n+    extends DebugAdapter {\n+\n+  @JsonRequest\n+  def launch(params: metals.LaunchParameters): CompletableFuture[Unit] = {\n+    parametersAdapter\n+      .adapt(params)\n+      .flatMap(underlying.launch(_).asScala)\n+      .asJava\n+  }\n+\n+  @JsonRequest\n+  def initialize("
  },
  {
    "id" : "5a78f915-298a-4b42-b5b1-9abbbbb172b3",
    "prId" : 721,
    "comments" : [
      {
        "id" : "5a958a1a-bcba-4da4-9bfe-9b681d51ec73",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "ditto",
        "createdAt" : "2019-05-20T14:19:41Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e3c999e9b79f7d0d6a4c95756d12ec54f6abbc90",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,54 @@\n+package scala.meta.internal.metals.debug\n+\n+import java.util.concurrent.CompletableFuture\n+import org.eclipse.lsp4j.debug.Capabilities\n+import org.eclipse.lsp4j.debug.InitializeRequestArguments\n+import org.eclipse.lsp4j.debug.services.IDebugProtocolClient\n+import org.eclipse.lsp4j.jsonrpc.services.JsonRequest\n+import scala.concurrent.ExecutionContext\n+import scala.meta.internal.debug.DebugAdapter\n+import scala.meta.internal.debug.JvmDebugAdapter\n+import scala.meta.internal.metals.BuildTargets\n+import scala.meta.internal.metals.CompilationScheduler\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.metals.debug.{protocol => metals}"
  },
  {
    "id" : "4ad855df-db83-447b-80d7-be5061dc40b8",
    "prId" : 721,
    "comments" : [
      {
        "id" : "7d18078f-b3ec-4396-a6a5-291e221a7932",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "When writing docstrings for classes like this, try to explain the motivation for the existence of this class instead of implementation specifics.\r\n\r\n> MetalsDebugAdapter is similar to MetalsLanguageServer except it implements the Debug Adapter Protocol instead of Language Server Protocol.",
        "createdAt" : "2019-05-20T15:02:21Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e3c999e9b79f7d0d6a4c95756d12ec54f6abbc90",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,54 @@\n+package scala.meta.internal.metals.debug\n+\n+import java.util.concurrent.CompletableFuture\n+import org.eclipse.lsp4j.debug.Capabilities\n+import org.eclipse.lsp4j.debug.InitializeRequestArguments\n+import org.eclipse.lsp4j.debug.services.IDebugProtocolClient\n+import org.eclipse.lsp4j.jsonrpc.services.JsonRequest\n+import scala.concurrent.ExecutionContext\n+import scala.meta.internal.debug.DebugAdapter\n+import scala.meta.internal.debug.JvmDebugAdapter\n+import scala.meta.internal.metals.BuildTargets\n+import scala.meta.internal.metals.CompilationScheduler\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.metals.debug.{protocol => metals}\n+\n+/**\n+ * Metals receive requests without the full knowledge - e.g. without classpath."
  }
]