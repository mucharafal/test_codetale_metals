[
  {
    "id" : "f0d08fe2-4d2f-4775-acc7-d865ff032316",
    "prId" : 1077,
    "comments" : [
      {
        "id" : "4e379413-bfa1-4a23-a696-63d80d7414e4",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Let's do the function as suggested by @olafurpg :\r\n\r\n`Synthetic => Boolean `",
        "createdAt" : "2019-11-22T10:43:40Z",
        "updatedAt" : "2019-12-03T20:06:16Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e01f9dc5-28f1-4e96-91b2-fc55c5402d6d",
        "parentId" : "4e379413-bfa1-4a23-a696-63d80d7414e4",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "@olafurpg I took the liberty to change it myself - is this what you meant?",
        "createdAt" : "2019-11-29T22:40:18Z",
        "updatedAt" : "2019-12-03T20:06:16Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "86a99b04d6c567b76fc8a7915453ac24ce3156a9",
    "line" : null,
    "diffHunk" : "@@ -64,7 +64,10 @@ final class ReferenceProvider(\n     resizeReferencedPackages()\n   }\n \n-  def references(params: ReferenceParams): ReferencesResult = {\n+  def references(\n+      params: ReferenceParams,\n+      includeSynthetics: SymbolOccurrence => Boolean = _ => true"
  },
  {
    "id" : "6800fde0-bd06-4c0f-9019-cb40f35c68b5",
    "prId" : 1169,
    "comments" : [
      {
        "id" : "3a39ae52-2c40-4ec9-a9f8-5fcd3e4bf803",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "@olafurpg I removed it since it didn't seem intuitive to find apply/copy for case class symbols. I can change that to be behind a flag - I am not sure what was the motivations for adding them to references in the first place :thinking: ",
        "createdAt" : "2019-12-08T19:28:47Z",
        "updatedAt" : "2019-12-10T12:48:18Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d985f98c-c791-4808-b24a-3947f58843b9",
        "parentId" : "3a39ae52-2c40-4ec9-a9f8-5fcd3e4bf803",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "The motivation was mostly for testing purposes, to preserve a bijection between definition/references.\r\n\r\nIâ€™m fine with removing this behavior but it may require adjustments in ReferenceLspSuite",
        "createdAt" : "2019-12-08T20:01:31Z",
        "updatedAt" : "2019-12-10T12:48:18Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6a3ec246-0bbe-47bd-8cbb-4546cbdb01a8",
        "parentId" : "3a39ae52-2c40-4ec9-a9f8-5fcd3e4bf803",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed the tests in ReferenceLspSuite, should be alright.",
        "createdAt" : "2019-12-08T21:45:54Z",
        "updatedAt" : "2019-12-10T12:48:18Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3e4987dc077ad0e540df671a6cea45e4b14135b9",
    "line" : 5,
    "diffHunk" : "@@ -113,24 +113,6 @@ final class ReferenceProvider(\n           info.symbol.owner,\n           Descriptor.Type(info.displayName)\n         )\n-    // Returns true if `info` is a synthetic `copy` or `apply` of the occurrence class symbol.\n-    def isCopyOrApplyMethod(info: SymbolInformation): Boolean ="
  },
  {
    "id" : "8579ffdf-cd4f-43ea-8d76-88feaa9599e8",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "05d982b2-02d9-424e-a1a7-8aeede462c67",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "No need for newlines in the imports I think.",
        "createdAt" : "2020-02-10T10:48:30Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -1,32 +1,37 @@\n package scala.meta.internal.metals\n \n-import com.google.common.hash.BloomFilter\n-import com.google.common.hash.Funnels\n import java.nio.charset.StandardCharsets\n import java.nio.file.Path\n-import org.eclipse.lsp4j.Location\n-import org.eclipse.lsp4j.ReferenceParams\n+"
  },
  {
    "id" : "6049315a-a055-49c6-90c9-8bafe013e9dd",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "a1aaf149-49d9-4ec5-ab21-a3972469a128",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Could this be private now? And maybe renamed to `currentSymbolReferences`",
        "createdAt" : "2020-02-10T10:49:46Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -98,13 +99,142 @@ final class ReferenceProvider(\n     }\n   }\n \n+  private def toReferenceParams(\n+      params: TextDocumentPositionParams,\n+      includeDeclaration: Boolean\n+  ): ReferenceParams = {\n+    toReferenceParams(\n+      params.getTextDocument,\n+      params.getPosition,\n+      includeDeclaration\n+    )\n+  }\n+\n+  private def toReferenceParams(\n+      textDoc: TextDocumentIdentifier,\n+      pos: Position,\n+      includeDeclaration: Boolean\n+  ): ReferenceParams = {\n+    val referenceParams = new ReferenceParams()\n+    referenceParams.setPosition(pos)\n+    referenceParams.setTextDocument(textDoc)\n+    val context = new ReferenceContext()\n+    context.setIncludeDeclaration(includeDeclaration)\n+    referenceParams.setContext(context)\n+    referenceParams\n+  }\n+\n+  def toReferenceParams(\n+      location: Location,\n+      includeDeclaration: Boolean\n+  ): ReferenceParams = {\n+    val textDoc = new TextDocumentIdentifier()\n+    textDoc.setUri(location.getUri)\n+    toReferenceParams(\n+      textDoc,\n+      location.getRange.getStart,\n+      includeDeclaration\n+    )\n+  }\n+\n+  private def implementations(\n+      textParams: TextDocumentPositionParams,\n+      shouldCheckImplementation: Boolean\n+  ): Seq[Location] = {\n+    if (shouldCheckImplementation) {\n+      for {\n+        implLoc <- implementation.implementations(textParams)\n+        locParams = toReferenceParams(implLoc, includeDeclaration = true)\n+        loc <- references(locParams).locations\n+      } yield loc\n+    } else {\n+      Nil\n+    }\n+  }\n+\n+  def allRefs(\n+      symbolOccurrence: SymbolOccurrence,\n+      doc: TextDocument,\n+      fnIncludeSynthetics: Synthetic => Boolean,\n+      textParams: TextDocumentPositionParams\n+  ): Seq[Location] = {\n+    def toTextParams(location: Location): TextDocumentPositionParams = {\n+      new TextDocumentPositionParams(\n+        new TextDocumentIdentifier(location.getUri()),\n+        location.getRange().getStart()\n+      )\n+    }\n+\n+    val parentSymbols = implementation\n+      .topMethodParents(doc, symbolOccurrence.symbol)\n+    val txtParams = {\n+      if (parentSymbols.isEmpty) List(textParams)\n+      else parentSymbols.map(toTextParams)\n+    }\n+    val isLocal = symbolOccurrence.symbol.isLocal\n+    val currentReferences = txtParams\n+      .map(toReferenceParams(_, includeDeclaration = isLocal))\n+      .flatMap(\n+        references(\n+          _,\n+          checkMatchesText = !isLocal,\n+          includeSynthetics = fnIncludeSynthetics\n+        ).locations\n+      )\n+    val definitionLocation = {\n+      if (parentSymbols.isEmpty)\n+        definition\n+          .fromSymbol(symbolOccurrence.symbol)\n+          .asScala\n+          .filter(_.getUri.isScalaFilename)\n+      else parentSymbols\n+    }\n+    val implReferences = txtParams.flatMap(\n+      implementations(_, !symbolOccurrence.symbol.desc.isType)\n+    )\n+\n+    (currentReferences ++ implReferences ++ definitionLocation)\n+      .sortBy(loc =>\n+        (\n+          loc.getUri,\n+          loc.getRange.getStart.getLine,\n+          loc.getRange.getStart.getCharacter\n+        )\n+      )\n+  }\n+\n+  def references("
  },
  {
    "id" : "acb080b8-5847-4538-8261-8b3c805cb126",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "9bf1fdea-b9ea-402e-a814-8ac54bf7d397",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We don't need to disable searching for references of those forbidden methods. They are really only forbidden to rename. This should only mean that we will not look for implementations of those methods.\r\n\r\nReferences result should not be empty.",
        "createdAt" : "2020-02-10T10:51:10Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b5f2ef8e-0324-49ae-bc4b-16dfc63d4ab6",
        "parentId" : "9bf1fdea-b9ea-402e-a814-8ac54bf7d397",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "It was based on: https://github.com/scalameta/metals/issues/1063#issuecomment-553131812\r\nTo double check, should I remove this check here?",
        "createdAt" : "2020-02-11T07:59:57Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -65,31 +70,27 @@ final class ReferenceProvider(\n     resizeReferencedPackages()\n   }\n \n-  def references(\n-      params: ReferenceParams,\n-      checkMatchesText: Boolean = false,\n-      includeSynthetics: Synthetic => Boolean = _ => true\n-  ): ReferencesResult = {\n+  def referencesWithBaseMethods(params: ReferenceParams): ReferencesResult = {\n     val source = params.getTextDocument.getUri.toAbsolutePath\n     semanticdbs.textDocument(source).documentIncludingStale match {\n       case Some(doc) =>\n         val ResolvedSymbolOccurrence(distance, maybeOccurrence) =\n-          definition.positionOccurrence(source, params, doc)\n+          definition.positionOccurrence(source, params.getPosition, doc)\n         maybeOccurrence match {\n           case Some(occurrence) =>\n-            val alternatives = referenceAlternatives(doc, occurrence)\n-            val locations = references(\n-              source,\n-              params,\n-              doc,\n-              distance,\n-              occurrence,\n-              alternatives,\n-              params.getContext.isIncludeDeclaration,\n-              checkMatchesText,\n-              includeSynthetics\n-            )\n-            ReferencesResult(occurrence.symbol, locations)\n+            val symbolName = occurrence.symbol.desc.name.value\n+            if (RenameProvider.forbiddenModifyMethods.contains(symbolName)) {"
  },
  {
    "id" : "dd40dc5c-bffb-4c18-8115-d4bb72dd1b8d",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "7e14e6fa-1c58-4c98-9637-1dfcbff50f4d",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Can we move the private methods to the bottom - this way the more important public ones are visible first.",
        "createdAt" : "2020-02-10T10:53:04Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -98,13 +99,142 @@ final class ReferenceProvider(\n     }\n   }\n \n+  private def toReferenceParams("
  },
  {
    "id" : "efa9d59a-f5b1-43ed-bcd6-41818d6bef91",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "e5e2aa24-1162-4583-9f3a-0c003ca34e08",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Can this be private too?",
        "createdAt" : "2020-02-10T10:53:18Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f045cdc0-b24a-44ba-845c-7ab031d4a973",
        "parentId" : "e5e2aa24-1162-4583-9f3a-0c003ca34e08",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "not in current state, it is used in RenameProvider too",
        "createdAt" : "2020-02-11T08:02:25Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -98,13 +99,142 @@ final class ReferenceProvider(\n     }\n   }\n \n+  private def toReferenceParams(\n+      params: TextDocumentPositionParams,\n+      includeDeclaration: Boolean\n+  ): ReferenceParams = {\n+    toReferenceParams(\n+      params.getTextDocument,\n+      params.getPosition,\n+      includeDeclaration\n+    )\n+  }\n+\n+  private def toReferenceParams(\n+      textDoc: TextDocumentIdentifier,\n+      pos: Position,\n+      includeDeclaration: Boolean\n+  ): ReferenceParams = {\n+    val referenceParams = new ReferenceParams()\n+    referenceParams.setPosition(pos)\n+    referenceParams.setTextDocument(textDoc)\n+    val context = new ReferenceContext()\n+    context.setIncludeDeclaration(includeDeclaration)\n+    referenceParams.setContext(context)\n+    referenceParams\n+  }\n+\n+  def toReferenceParams("
  },
  {
    "id" : "53e090b7-a25a-479c-975f-9dc6f3c8ad33",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "fef78b83-8143-4660-a0cb-e1b067880134",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Maybe this can be just `references`?  It's not really only methods.\r\n\r\nThe other ones could be `currentSymbolReferences` and `allInheritanceReferences`",
        "createdAt" : "2020-02-10T10:56:04Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -65,31 +70,27 @@ final class ReferenceProvider(\n     resizeReferencedPackages()\n   }\n \n-  def references(\n-      params: ReferenceParams,\n-      checkMatchesText: Boolean = false,\n-      includeSynthetics: Synthetic => Boolean = _ => true\n-  ): ReferencesResult = {\n+  def referencesWithBaseMethods(params: ReferenceParams): ReferencesResult = {"
  },
  {
    "id" : "46a4826c-5c49-4dee-a14e-31a32290b77d",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "092b20d4-5443-47aa-8deb-be62f4df474b",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "This can be private and maybe `allInheritanceReferences` ?",
        "createdAt" : "2020-02-10T10:57:38Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "de1d0cb2-739c-4e86-a39a-854b50761a56",
        "parentId" : "092b20d4-5443-47aa-8deb-be62f4df474b",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "no, it is used by MetalsLanguageServer too, and second one by RenameProvider",
        "createdAt" : "2020-02-11T08:03:38Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -98,13 +99,142 @@ final class ReferenceProvider(\n     }\n   }\n \n+  private def toReferenceParams(\n+      params: TextDocumentPositionParams,\n+      includeDeclaration: Boolean\n+  ): ReferenceParams = {\n+    toReferenceParams(\n+      params.getTextDocument,\n+      params.getPosition,\n+      includeDeclaration\n+    )\n+  }\n+\n+  private def toReferenceParams(\n+      textDoc: TextDocumentIdentifier,\n+      pos: Position,\n+      includeDeclaration: Boolean\n+  ): ReferenceParams = {\n+    val referenceParams = new ReferenceParams()\n+    referenceParams.setPosition(pos)\n+    referenceParams.setTextDocument(textDoc)\n+    val context = new ReferenceContext()\n+    context.setIncludeDeclaration(includeDeclaration)\n+    referenceParams.setContext(context)\n+    referenceParams\n+  }\n+\n+  def toReferenceParams(\n+      location: Location,\n+      includeDeclaration: Boolean\n+  ): ReferenceParams = {\n+    val textDoc = new TextDocumentIdentifier()\n+    textDoc.setUri(location.getUri)\n+    toReferenceParams(\n+      textDoc,\n+      location.getRange.getStart,\n+      includeDeclaration\n+    )\n+  }\n+\n+  private def implementations(\n+      textParams: TextDocumentPositionParams,\n+      shouldCheckImplementation: Boolean\n+  ): Seq[Location] = {\n+    if (shouldCheckImplementation) {\n+      for {\n+        implLoc <- implementation.implementations(textParams)\n+        locParams = toReferenceParams(implLoc, includeDeclaration = true)\n+        loc <- references(locParams).locations\n+      } yield loc\n+    } else {\n+      Nil\n+    }\n+  }\n+\n+  def allRefs("
  },
  {
    "id" : "9aac9f25-e3cb-4e48-aef0-763d52a3b363",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "99a81758-ae7d-49da-9523-4cde23f90600",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Maybe this can be a private method next to the other utility methods? All of those `toRefParams` etc. methods have a similar purpose.",
        "createdAt" : "2020-02-10T11:00:17Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7c4a1a8b-4edb-4e8c-a5fa-cbc8d7cff151",
        "parentId" : "99a81758-ae7d-49da-9523-4cde23f90600",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "I think yes, I just moved this part of code from RenameProvider as it was.\r\nIf I move it to outside of this method then `parentSymbols.map(toTextParams)` below will have to change because `toTextParams` will need to get additional params. Move it anyway?",
        "createdAt" : "2020-02-11T08:06:26Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -98,13 +99,142 @@ final class ReferenceProvider(\n     }\n   }\n \n+  private def toReferenceParams(\n+      params: TextDocumentPositionParams,\n+      includeDeclaration: Boolean\n+  ): ReferenceParams = {\n+    toReferenceParams(\n+      params.getTextDocument,\n+      params.getPosition,\n+      includeDeclaration\n+    )\n+  }\n+\n+  private def toReferenceParams(\n+      textDoc: TextDocumentIdentifier,\n+      pos: Position,\n+      includeDeclaration: Boolean\n+  ): ReferenceParams = {\n+    val referenceParams = new ReferenceParams()\n+    referenceParams.setPosition(pos)\n+    referenceParams.setTextDocument(textDoc)\n+    val context = new ReferenceContext()\n+    context.setIncludeDeclaration(includeDeclaration)\n+    referenceParams.setContext(context)\n+    referenceParams\n+  }\n+\n+  def toReferenceParams(\n+      location: Location,\n+      includeDeclaration: Boolean\n+  ): ReferenceParams = {\n+    val textDoc = new TextDocumentIdentifier()\n+    textDoc.setUri(location.getUri)\n+    toReferenceParams(\n+      textDoc,\n+      location.getRange.getStart,\n+      includeDeclaration\n+    )\n+  }\n+\n+  private def implementations(\n+      textParams: TextDocumentPositionParams,\n+      shouldCheckImplementation: Boolean\n+  ): Seq[Location] = {\n+    if (shouldCheckImplementation) {\n+      for {\n+        implLoc <- implementation.implementations(textParams)\n+        locParams = toReferenceParams(implLoc, includeDeclaration = true)\n+        loc <- references(locParams).locations\n+      } yield loc\n+    } else {\n+      Nil\n+    }\n+  }\n+\n+  def allRefs(\n+      symbolOccurrence: SymbolOccurrence,\n+      doc: TextDocument,\n+      fnIncludeSynthetics: Synthetic => Boolean,\n+      textParams: TextDocumentPositionParams\n+  ): Seq[Location] = {\n+    def toTextParams(location: Location): TextDocumentPositionParams = {"
  },
  {
    "id" : "18f466a1-eaec-4f05-bf79-d15c45839fc7",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "85ddda25-551d-4a8a-a8ed-6d58a755815f",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "It it's a large number of results sorting will slow them down and this is not really useful for us since each client handles it on its own.. ",
        "createdAt" : "2020-02-10T11:04:17Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -98,13 +99,142 @@ final class ReferenceProvider(\n     }\n   }\n \n+  private def toReferenceParams(\n+      params: TextDocumentPositionParams,\n+      includeDeclaration: Boolean\n+  ): ReferenceParams = {\n+    toReferenceParams(\n+      params.getTextDocument,\n+      params.getPosition,\n+      includeDeclaration\n+    )\n+  }\n+\n+  private def toReferenceParams(\n+      textDoc: TextDocumentIdentifier,\n+      pos: Position,\n+      includeDeclaration: Boolean\n+  ): ReferenceParams = {\n+    val referenceParams = new ReferenceParams()\n+    referenceParams.setPosition(pos)\n+    referenceParams.setTextDocument(textDoc)\n+    val context = new ReferenceContext()\n+    context.setIncludeDeclaration(includeDeclaration)\n+    referenceParams.setContext(context)\n+    referenceParams\n+  }\n+\n+  def toReferenceParams(\n+      location: Location,\n+      includeDeclaration: Boolean\n+  ): ReferenceParams = {\n+    val textDoc = new TextDocumentIdentifier()\n+    textDoc.setUri(location.getUri)\n+    toReferenceParams(\n+      textDoc,\n+      location.getRange.getStart,\n+      includeDeclaration\n+    )\n+  }\n+\n+  private def implementations(\n+      textParams: TextDocumentPositionParams,\n+      shouldCheckImplementation: Boolean\n+  ): Seq[Location] = {\n+    if (shouldCheckImplementation) {\n+      for {\n+        implLoc <- implementation.implementations(textParams)\n+        locParams = toReferenceParams(implLoc, includeDeclaration = true)\n+        loc <- references(locParams).locations\n+      } yield loc\n+    } else {\n+      Nil\n+    }\n+  }\n+\n+  def allRefs(\n+      symbolOccurrence: SymbolOccurrence,\n+      doc: TextDocument,\n+      fnIncludeSynthetics: Synthetic => Boolean,\n+      textParams: TextDocumentPositionParams\n+  ): Seq[Location] = {\n+    def toTextParams(location: Location): TextDocumentPositionParams = {\n+      new TextDocumentPositionParams(\n+        new TextDocumentIdentifier(location.getUri()),\n+        location.getRange().getStart()\n+      )\n+    }\n+\n+    val parentSymbols = implementation\n+      .topMethodParents(doc, symbolOccurrence.symbol)\n+    val txtParams = {\n+      if (parentSymbols.isEmpty) List(textParams)\n+      else parentSymbols.map(toTextParams)\n+    }\n+    val isLocal = symbolOccurrence.symbol.isLocal\n+    val currentReferences = txtParams\n+      .map(toReferenceParams(_, includeDeclaration = isLocal))\n+      .flatMap(\n+        references(\n+          _,\n+          checkMatchesText = !isLocal,\n+          includeSynthetics = fnIncludeSynthetics\n+        ).locations\n+      )\n+    val definitionLocation = {\n+      if (parentSymbols.isEmpty)\n+        definition\n+          .fromSymbol(symbolOccurrence.symbol)\n+          .asScala\n+          .filter(_.getUri.isScalaFilename)\n+      else parentSymbols\n+    }\n+    val implReferences = txtParams.flatMap(\n+      implementations(_, !symbolOccurrence.symbol.desc.isType)\n+    )\n+\n+    (currentReferences ++ implReferences ++ definitionLocation)\n+      .sortBy(loc =>"
  },
  {
    "id" : "d146afb7-c64e-49cd-86a0-7c0b73bdc8b4",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "00639964-09c5-4b93-8ef0-9bdfe9f6b7f5",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I think we don't need to use ReferenceParams here, since it's no longer used for MetalsLanguageServer. It would simplify usage.",
        "createdAt" : "2020-02-10T11:22:31Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d21d546e-5cf3-4a06-a835-601dbe6212aa",
        "parentId" : "00639964-09c5-4b93-8ef0-9bdfe9f6b7f5",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "This is an object used in lsp API, what do you mean here?",
        "createdAt" : "2020-02-11T08:37:50Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -98,13 +99,142 @@ final class ReferenceProvider(\n     }\n   }\n \n+  private def toReferenceParams(\n+      params: TextDocumentPositionParams,\n+      includeDeclaration: Boolean\n+  ): ReferenceParams = {\n+    toReferenceParams(\n+      params.getTextDocument,\n+      params.getPosition,\n+      includeDeclaration\n+    )\n+  }\n+\n+  private def toReferenceParams(\n+      textDoc: TextDocumentIdentifier,\n+      pos: Position,\n+      includeDeclaration: Boolean\n+  ): ReferenceParams = {\n+    val referenceParams = new ReferenceParams()\n+    referenceParams.setPosition(pos)\n+    referenceParams.setTextDocument(textDoc)\n+    val context = new ReferenceContext()\n+    context.setIncludeDeclaration(includeDeclaration)\n+    referenceParams.setContext(context)\n+    referenceParams\n+  }\n+\n+  def toReferenceParams(\n+      location: Location,\n+      includeDeclaration: Boolean\n+  ): ReferenceParams = {\n+    val textDoc = new TextDocumentIdentifier()\n+    textDoc.setUri(location.getUri)\n+    toReferenceParams(\n+      textDoc,\n+      location.getRange.getStart,\n+      includeDeclaration\n+    )\n+  }\n+\n+  private def implementations(\n+      textParams: TextDocumentPositionParams,\n+      shouldCheckImplementation: Boolean\n+  ): Seq[Location] = {\n+    if (shouldCheckImplementation) {\n+      for {\n+        implLoc <- implementation.implementations(textParams)\n+        locParams = toReferenceParams(implLoc, includeDeclaration = true)\n+        loc <- references(locParams).locations\n+      } yield loc\n+    } else {\n+      Nil\n+    }\n+  }\n+\n+  def allRefs(\n+      symbolOccurrence: SymbolOccurrence,\n+      doc: TextDocument,\n+      fnIncludeSynthetics: Synthetic => Boolean,\n+      textParams: TextDocumentPositionParams\n+  ): Seq[Location] = {\n+    def toTextParams(location: Location): TextDocumentPositionParams = {\n+      new TextDocumentPositionParams(\n+        new TextDocumentIdentifier(location.getUri()),\n+        location.getRange().getStart()\n+      )\n+    }\n+\n+    val parentSymbols = implementation\n+      .topMethodParents(doc, symbolOccurrence.symbol)\n+    val txtParams = {\n+      if (parentSymbols.isEmpty) List(textParams)\n+      else parentSymbols.map(toTextParams)\n+    }\n+    val isLocal = symbolOccurrence.symbol.isLocal\n+    val currentReferences = txtParams\n+      .map(toReferenceParams(_, includeDeclaration = isLocal))\n+      .flatMap(\n+        references(\n+          _,\n+          checkMatchesText = !isLocal,\n+          includeSynthetics = fnIncludeSynthetics\n+        ).locations\n+      )\n+    val definitionLocation = {\n+      if (parentSymbols.isEmpty)\n+        definition\n+          .fromSymbol(symbolOccurrence.symbol)\n+          .asScala\n+          .filter(_.getUri.isScalaFilename)\n+      else parentSymbols\n+    }\n+    val implReferences = txtParams.flatMap(\n+      implementations(_, !symbolOccurrence.symbol.desc.isType)\n+    )\n+\n+    (currentReferences ++ implReferences ++ definitionLocation)\n+      .sortBy(loc =>\n+        (\n+          loc.getUri,\n+          loc.getRange.getStart.getLine,\n+          loc.getRange.getStart.getCharacter\n+        )\n+      )\n+  }\n+\n+  def references(\n+      params: ReferenceParams,"
  },
  {
    "id" : "84528ef4-cb18-43ff-9eb1-05e6cc88d686",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "15fb51f8-56cc-4c94-9725-c460945dae47",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Let's avoid importing everything from the package since a lot of the names repeat in Scalameta",
        "createdAt" : "2020-02-17T12:58:39Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -1,12 +1,12 @@\n package scala.meta.internal.metals\n \n-import com.google.common.hash.BloomFilter\n-import com.google.common.hash.Funnels\n import java.nio.charset.StandardCharsets\n import java.nio.file.Path\n-import org.eclipse.lsp4j.Location\n-import org.eclipse.lsp4j.ReferenceParams\n+import com.google.common.hash.BloomFilter\n+import com.google.common.hash.Funnels\n+import org.eclipse.lsp4j._"
  },
  {
    "id" : "be9f6037-da16-4089-b552-23a4208f1b93",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "4dce05e0-b2e8-4f08-b77f-c93b46a92f3f",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Let's move the private methods to the bottom.",
        "createdAt" : "2020-02-17T13:00:52Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -98,13 +109,97 @@ final class ReferenceProvider(\n     }\n   }\n \n+  private def implementations("
  },
  {
    "id" : "ea614334-8768-4254-9674-84140751e750",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "ef578507-2890-44d5-bef6-f9292c9cf809",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Isn't this needed only in the RenameProvider?",
        "createdAt" : "2020-02-17T13:04:27Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -233,6 +327,39 @@ final class ReferenceProvider(\n     }\n   }\n \n+  def companionReferences(sym: String): Seq[Location] = {"
  },
  {
    "id" : "63d4e2c1-0ac2-4d2b-aebd-3b30c5289c71",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "f7d7a875-a8a0-49c7-bda4-fbe9c62704b1",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Maybe extract to variable:\r\n```\r\nval shouldIncludeInheritance = \r\n  ReferenceProvider.methodsSearchedWithoutInheritance.contains(symbolName)\r\n```",
        "createdAt" : "2020-02-18T15:11:33Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1685665a-6e2d-430c-b263-d0a566db4efc",
        "parentId" : "f7d7a875-a8a0-49c7-bda4-fbe9c62704b1",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "okay",
        "createdAt" : "2020-02-18T20:21:53Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -65,31 +68,50 @@ final class ReferenceProvider(\n     resizeReferencedPackages()\n   }\n \n+  def references(params: ReferenceParams): ReferencesResult = {\n+    references(\n+      FilePosition(\n+        params.getTextDocument.getUri.toAbsolutePath,\n+        params.getPosition\n+      ),\n+      params.getContext.isIncludeDeclaration\n+    )\n+  }\n+\n   def references(\n-      params: ReferenceParams,\n-      checkMatchesText: Boolean = false,\n-      includeSynthetics: Synthetic => Boolean = _ => true\n+      filePosition: FilePosition,\n+      includeDeclaration: Boolean\n   ): ReferencesResult = {\n-    val source = params.getTextDocument.getUri.toAbsolutePath\n-    semanticdbs.textDocument(source).documentIncludingStale match {\n+    semanticdbs\n+      .textDocument(filePosition.filePath)\n+      .documentIncludingStale match {\n       case Some(doc) =>\n         val ResolvedSymbolOccurrence(distance, maybeOccurrence) =\n-          definition.positionOccurrence(source, params, doc)\n+          definition.positionOccurrence(\n+            filePosition,\n+            doc\n+          )\n         maybeOccurrence match {\n           case Some(occurrence) =>\n-            val alternatives = referenceAlternatives(doc, occurrence)\n-            val locations = references(\n-              source,\n-              params,\n-              doc,\n-              distance,\n-              occurrence,\n-              alternatives,\n-              params.getContext.isIncludeDeclaration,\n-              checkMatchesText,\n-              includeSynthetics\n-            )\n-            ReferencesResult(occurrence.symbol, locations)\n+            val symbolName = occurrence.symbol.desc.name.value\n+            if (ReferenceProvider.methodsSearchedWithoutInheritance.contains("
  },
  {
    "id" : "b8728afc-cd41-4dfd-98e4-4fa94817d02a",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "2744bbf8-e454-4f0f-8a59-3d4717aa2f8b",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "`txtParams` -> `parentPositions` ?",
        "createdAt" : "2020-02-18T15:12:40Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1aa4079c-6923-425b-8dcc-a6182014b474",
        "parentId" : "2744bbf8-e454-4f0f-8a59-3d4717aa2f8b",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "ahh good catch!",
        "createdAt" : "2020-02-18T20:22:27Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -98,13 +120,97 @@ final class ReferenceProvider(\n     }\n   }\n \n+  def allInheritanceReferences(\n+      symbolOccurrence: SymbolOccurrence,\n+      doc: TextDocument,\n+      filePosition: FilePosition,\n+      fnIncludeSynthetics: Synthetic => Boolean\n+  ): Seq[Location] = {\n+    val parentSymbols = implementation\n+      .topMethodParents(doc, symbolOccurrence.symbol)\n+    val txtParams: Seq[FilePosition] = {"
  },
  {
    "id" : "17645d9b-fe42-4503-8cf7-84e2b22915ba",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "e44bb5c0-8fd2-4982-b279-be77c702d964",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Name might actually be missleading, maybe `mainDefinitions` ?",
        "createdAt" : "2020-02-24T12:25:34Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "60d64038-44b1-415d-ac3d-37bbc4ee7da7",
        "parentId" : "e44bb5c0-8fd2-4982-b279-be77c702d964",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "ok",
        "createdAt" : "2020-02-24T12:53:16Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -98,13 +124,118 @@ final class ReferenceProvider(\n     }\n   }\n \n+  def allInheritanceReferences(\n+      symbolOccurrence: SymbolOccurrence,\n+      doc: TextDocument,\n+      filePosition: FilePosition,\n+      fnIncludeSynthetics: Synthetic => Boolean,\n+      failWhenReachingDependencySymbol: Boolean,\n+      canSkipExactMatchCheck: Boolean = true\n+  ): Seq[Location] = {\n+    val parentSymbols = implementation\n+      .topMethodParents(doc, symbolOccurrence.symbol)\n+\n+    if (failWhenReachingDependencySymbol && parentSymbols.exists(_.isRight)) {\n+      Seq.empty\n+    } else {\n+\n+      val topParentSymbols: Seq[Either[FilePosition, SymbolInformation]] = {"
  },
  {
    "id" : "5779c3e6-4262-4b19-ad3f-ef1f4ddda0bf",
    "prId" : 1430,
    "comments" : [
      {
        "id" : "8fe40d13-2c64-4b27-af77-9fa4306faea1",
        "parentId" : null,
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "you could extract `removeBackticks` function that would do the check and substring if needed.\r\nit would be:\r\n`val realName = removeBackticks(name)`\r\nIt could also be used in RenameProvider as removing backticks is the same there",
        "createdAt" : "2020-02-18T12:39:28Z",
        "updatedAt" : "2020-02-18T12:39:55Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b7b36e58-84eb-4279-a099-e1e47c35112a",
        "parentId" : "8fe40d13-2c64-4b27-af77-9fa4306faea1",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I tried it, but I still need to check for backticks and change the range, so I would check it double. This is on the critical path, so I'd rather leave it as is.",
        "createdAt" : "2020-02-18T18:48:33Z",
        "updatedAt" : "2020-02-18T18:48:33Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7ca3126a-6c44-410c-8341-31fcbe19c2ab",
        "parentId" : "8fe40d13-2c64-4b27-af77-9fa4306faea1",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "ahh right isBackticked is needed later for another check, good as it is then :+1:",
        "createdAt" : "2020-02-18T19:54:59Z",
        "updatedAt" : "2020-02-18T19:54:59Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "449f77053dddb24263c8a82a150393da6812f615",
    "line" : 90,
    "diffHunk" : "@@ -275,15 +284,40 @@ final class ReferenceProvider(\n     buf.result()\n   }\n \n+  private def findRealRange(\n+      range: s.Range,\n+      text: String,\n+      symbol: String\n+  ): Option[s.Range] = {\n+    val name = findName(range, text)\n+    val isBackticked = name.charAt(0) == '`'"
  },
  {
    "id" : "300a1b76-ecf4-49d5-a750-f8434ec676fd",
    "prId" : 1435,
    "comments" : [
      {
        "id" : "d3d3aec9-3e95-430e-8d7c-69c0e00c8504",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "If we removed some files, we would still be looking for references inside them, since the semanticDB files will not be deleted.",
        "createdAt" : "2020-02-15T21:19:43Z",
        "updatedAt" : "2020-02-17T16:18:06Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "97217432-58cb-413b-9de6-27f211d47707",
        "parentId" : "d3d3aec9-3e95-430e-8d7c-69c0e00c8504",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "Can we simply delete this file?",
        "createdAt" : "2020-02-17T13:03:36Z",
        "updatedAt" : "2020-02-17T16:18:06Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "dcb28048-c08d-4233-bbc7-0cd8529dc546",
        "parentId" : "d3d3aec9-3e95-430e-8d7c-69c0e00c8504",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "That file is managed by Bloop and we shouldn't remove it ourselves.",
        "createdAt" : "2020-02-17T14:24:24Z",
        "updatedAt" : "2020-02-17T16:18:06Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fb025d5358f8296b853bbb7ede33b89e75356b35",
    "line" : 4,
    "diffHunk" : "@@ -202,6 +202,7 @@ final class ReferenceProvider(\n         scalaPath <- SemanticdbClasspath\n           .toScala(workspace, AbsolutePath(path))\n           .iterator\n+        if scalaPath.exists"
  },
  {
    "id" : "e06edfc3-c055-491d-a8e2-915203d8cb6e",
    "prId" : 1547,
    "comments" : [
      {
        "id" : "14c6c68d-e6a5-46e1-b622-74bb2ed58e11",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Shouldn't we have the timeout configured in MetalsServerConfig? Or at least keep it somewhere in a value like  `RemoteLanguageServer.defaultTimeout`",
        "createdAt" : "2020-03-27T15:25:41Z",
        "updatedAt" : "2020-03-27T19:26:28Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "922329228964c110122b6e35a403b21a3c4d3f3e",
    "line" : null,
    "diffHunk" : "@@ -94,7 +99,14 @@ final class ReferenceProvider(\n             ReferencesResult.empty\n         }\n       case None =>\n-        ReferencesResult.empty\n+        // NOTE(olafur): we block here instead of returning a Future because it\n+        // requires a significant refactoring to make the reference provider and\n+        // its dependencies (including rename provider) asynchronous. The remote\n+        // language server returns `Future.successful(None)` when it's disabled\n+        // so this isn't even blocking for normal usage of Metals.\n+        Await\n+          .result(remote.references(params), Duration(1, TimeUnit.MINUTES))"
  },
  {
    "id" : "598a1b96-1558-41da-aa20-fda0972f0deb",
    "prId" : 1976,
    "comments" : [
      {
        "id" : "ee0b7574-94be-4624-bd4a-3339306c0f53",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "This is because I figured contains is not good enough here. And this is only used in case of rename, which doesn't make references slower and we are fine with some flaky results there, but we do not want to break the code when renaming.",
        "createdAt" : "2020-08-06T11:59:13Z",
        "updatedAt" : "2020-08-06T11:59:14Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "efa61fdab4c9b2e83dbf8d9aaa9322adf48ec193",
    "line" : 5,
    "diffHunk" : "@@ -314,7 +314,7 @@ final class ReferenceProvider(\n     val realName =\n       if (isBackticked) name.substring(1, name.length() - 1)\n       else name\n-    if (symbol.isLocal || symbol.contains(realName)) {\n+    if (symbol.isLocal || symbol.desc.name.toString == realName) {"
  }
]