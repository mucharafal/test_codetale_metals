[
  {
    "id" : "ed43216e-4e2f-4e86-b3f9-81ab98e466e7",
    "prId" : 1865,
    "comments" : [
      {
        "id" : "b2afb1f2-ef37-4865-9076-faded9f1d8c1",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "info.getBaseDirectory().toAbsolutePath should work",
        "createdAt" : "2020-07-07T12:34:10Z",
        "updatedAt" : "2020-07-31T11:55:17Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1ecc085ce9f65d042e2055d19fd627c5d49e7918",
    "line" : null,
    "diffHunk" : "@@ -10,33 +10,44 @@ import scala.meta.internal.mtags.Semanticdbs.FoundSemanticDbPath\n import scala.meta.internal.mtags.TextDocumentLookup\n import scala.meta.io.AbsolutePath\n import scala.meta.io.RelativePath\n+import java.net.URI\n \n /**\n  * Reads SemanticDBs from disk that are produces by the semanticdb-scalac compiler plugin.\n  */\n final class FileSystemSemanticdbs(\n     buildTargets: BuildTargets,\n     charset: Charset,\n-    workspace: AbsolutePath,\n+    mainWorkspace: AbsolutePath,\n     fingerprints: Md5Fingerprints\n ) extends Semanticdbs {\n \n   override def textDocument(file: AbsolutePath): TextDocumentLookup = {\n     if (\n       !file.toLanguage.isScala ||\n-      file.toNIO.getFileSystem != workspace.toNIO.getFileSystem\n+      file.toNIO.getFileSystem != mainWorkspace.toNIO.getFileSystem\n     ) {\n       TextDocumentLookup.NotFound(file)\n     } else {\n-      semanticdbTargetroot(file) match {\n-        case Some(targetroot) =>\n+\n+      val paths = for {\n+        buildTarget <- buildTargets.inverseSources(file)\n+        info <- buildTargets.info(buildTarget)\n+        scalacOptions <- buildTargets.scalacOptions(buildTarget)\n+      } yield {\n+        val baseDir = URI.create(info.getBaseDirectory()).getPath()"
  }
]