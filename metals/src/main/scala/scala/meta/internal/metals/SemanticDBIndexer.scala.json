[
  {
    "id" : "ade42e56-a13d-4f88-9005-a1a058012757",
    "prId" : 934,
    "comments" : [
      {
        "id" : "50d77bfc-9857-4884-88d3-e7fcede8f691",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "`doc` instead of `td`?",
        "createdAt" : "2019-09-19T15:16:46Z",
        "updatedAt" : "2019-10-03T13:51:34Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d837625e03b77aa42a76d4f700137294452174fa",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,64 @@\n+package scala.meta.internal.metals\n+\n+import java.nio.file.Path\n+import MetalsEnrichments._\n+import java.nio.file.Files\n+import ch.epfl.scala.bsp4j.ScalacOptionsResult\n+import scala.meta.internal.semanticdb.TextDocuments\n+\n+class SemanticDBIndexer(\n+    referenceProvider: ReferenceProvider,\n+    implementationProvider: ImplementationProvider\n+) {\n+\n+  def onScalacOptions(scalacOptions: ScalacOptionsResult): Unit = {\n+    for {\n+      item <- scalacOptions.getItems.asScala\n+    } {\n+      val targetroot = item.targetroot\n+      onChangeDirectory(targetroot.resolve(Directories.semanticdb).toNIO)\n+    }\n+  }\n+  def reset(): Unit = {\n+    referenceProvider.reset()\n+    implementationProvider.reset()\n+  }\n+  def onDelete(file: Path): Unit = {\n+    referenceProvider.onDelete(file)\n+  }\n+\n+  /**\n+   * Handle EventType.OVERFLOW, meaning we lost file events for a given path.\n+   *\n+   * We walk up the file tree to the parent `META-INF/semanticdb` parent directory\n+   * and re-index all of its `*.semanticdb` children.\n+   */\n+  def onOverflow(path: Path): Unit = {\n+    path.semanticdbRoot match {\n+      case Some(root) =>\n+        onChangeDirectory(root)\n+      case None =>\n+    }\n+  }\n+\n+  def onChangeDirectory(dir: Path): Unit = {\n+    if (Files.isDirectory(dir)) {\n+      val stream = Files.walk(dir)\n+      try {\n+        stream.forEach(file => if (file.toFile().isFile()) onChange(file))\n+      } finally {\n+        stream.close()\n+      }\n+    }\n+  }\n+\n+  def onChange(file: Path): Unit = {\n+    if (file.isSemanticdb) {\n+      val td = TextDocuments.parseFrom(Files.readAllBytes(file))"
  },
  {
    "id" : "35331177-4015-4a9d-820a-c56b954e744b",
    "prId" : 934,
    "comments" : [
      {
        "id" : "79a4f58e-bfb8-4cbb-b8a2-731e8745b3b7",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "nit:\r\n```suggestion\r\nclass SemanticdbIndexer(\r\n```\r\n\r\nIn written documentation the correct capitalization is `SemanticDB` but for better or worse, we use `SemanticdbFoo` in code since I didn't like how `SemanticDBFoo` reads",
        "createdAt" : "2019-09-20T09:36:22Z",
        "updatedAt" : "2019-10-03T13:51:34Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "387b8a3f-a936-4f6d-8ed7-bbadbc6c0eee",
        "parentId" : "79a4f58e-bfb8-4cbb-b8a2-731e8745b3b7",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Changed",
        "createdAt" : "2019-09-20T15:09:00Z",
        "updatedAt" : "2019-10-03T13:51:34Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d837625e03b77aa42a76d4f700137294452174fa",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,66 @@\n+package scala.meta.internal.metals\n+\n+import java.nio.file.Path\n+import MetalsEnrichments._\n+import java.nio.file.Files\n+import ch.epfl.scala.bsp4j.ScalacOptionsResult\n+import scala.meta.internal.semanticdb.TextDocuments\n+\n+class SemanticDBIndexer("
  },
  {
    "id" : "21accfac-bf85-45da-b9a9-ba150919321c",
    "prId" : 934,
    "comments" : [
      {
        "id" : "3837ca49-4d30-4fcf-be57-bf48759568c8",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "we could hide the `isFile` check inside `onChange`:\r\n```scala\r\ndef onChange(path: Path) = {\r\n  if(!Files.isFile(path)) ()\r\n  else (...)\r\n}\r\n```\r\n\r\nor at least we could use `Files.isFile(path: Path)` instead of `path.toFile.isFile()`",
        "createdAt" : "2019-09-20T16:43:59Z",
        "updatedAt" : "2019-10-03T13:51:34Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "52a08f62-af11-41c6-98b7-d571bd20f5e4",
        "parentId" : "3837ca49-4d30-4fcf-be57-bf48759568c8",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Changed to `!Files.isDirectory(path)` since it shows better the intent, and moved to `onChange`",
        "createdAt" : "2019-09-20T17:22:50Z",
        "updatedAt" : "2019-10-03T13:51:34Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d837625e03b77aa42a76d4f700137294452174fa",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,67 @@\n+package scala.meta.internal.metals\n+\n+import java.nio.file.Path\n+import MetalsEnrichments._\n+import java.nio.file.Files\n+import ch.epfl.scala.bsp4j.ScalacOptionsResult\n+import scala.meta.internal.semanticdb.TextDocuments\n+\n+class SemanticdbIndexer(\n+    referenceProvider: ReferenceProvider,\n+    implementationProvider: ImplementationProvider\n+) {\n+\n+  def onScalacOptions(scalacOptions: ScalacOptionsResult): Unit = {\n+    for {\n+      item <- scalacOptions.getItems.asScala\n+    } {\n+      val targetroot = item.targetroot\n+      onChangeDirectory(targetroot.resolve(Directories.semanticdb).toNIO)\n+    }\n+  }\n+\n+  def reset(): Unit = {\n+    referenceProvider.reset()\n+    implementationProvider.clear()\n+  }\n+\n+  def onDelete(file: Path): Unit = {\n+    referenceProvider.onDelete(file)\n+    implementationProvider.onDelete(file)\n+  }\n+\n+  /**\n+   * Handle EventType.OVERFLOW, meaning we lost file events for a given path.\n+   *\n+   * We walk up the file tree to the parent `META-INF/semanticdb` parent directory\n+   * and re-index all of its `*.semanticdb` children.\n+   */\n+  def onOverflow(path: Path): Unit = {\n+    path.semanticdbRoot match {\n+      case Some(root) =>\n+        onChangeDirectory(root)\n+      case None =>\n+    }\n+  }\n+\n+  def onChangeDirectory(dir: Path): Unit = {\n+    if (Files.isDirectory(dir)) {\n+      val stream = Files.walk(dir)\n+      try {\n+        stream.forEach(path => if (path.toFile().isFile()) onChange(path))"
  },
  {
    "id" : "a922473a-b167-49c6-8968-b36993a1669d",
    "prId" : 934,
    "comments" : [
      {
        "id" : "da00ea88-d3a7-4d29-b488-a1895dd6ef37",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "```suggestion\r\n      scribe.warn(s\"not a semanticdb file: $file\")\r\n```",
        "createdAt" : "2019-09-20T16:44:38Z",
        "updatedAt" : "2019-10-03T13:51:34Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5d802df2-bc37-4af6-9bd8-87cb62c96753",
        "parentId" : "da00ea88-d3a7-4d29-b488-a1895dd6ef37",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "done",
        "createdAt" : "2019-09-20T17:22:58Z",
        "updatedAt" : "2019-10-03T13:51:34Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d837625e03b77aa42a76d4f700137294452174fa",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,67 @@\n+package scala.meta.internal.metals\n+\n+import java.nio.file.Path\n+import MetalsEnrichments._\n+import java.nio.file.Files\n+import ch.epfl.scala.bsp4j.ScalacOptionsResult\n+import scala.meta.internal.semanticdb.TextDocuments\n+\n+class SemanticdbIndexer(\n+    referenceProvider: ReferenceProvider,\n+    implementationProvider: ImplementationProvider\n+) {\n+\n+  def onScalacOptions(scalacOptions: ScalacOptionsResult): Unit = {\n+    for {\n+      item <- scalacOptions.getItems.asScala\n+    } {\n+      val targetroot = item.targetroot\n+      onChangeDirectory(targetroot.resolve(Directories.semanticdb).toNIO)\n+    }\n+  }\n+\n+  def reset(): Unit = {\n+    referenceProvider.reset()\n+    implementationProvider.clear()\n+  }\n+\n+  def onDelete(file: Path): Unit = {\n+    referenceProvider.onDelete(file)\n+    implementationProvider.onDelete(file)\n+  }\n+\n+  /**\n+   * Handle EventType.OVERFLOW, meaning we lost file events for a given path.\n+   *\n+   * We walk up the file tree to the parent `META-INF/semanticdb` parent directory\n+   * and re-index all of its `*.semanticdb` children.\n+   */\n+  def onOverflow(path: Path): Unit = {\n+    path.semanticdbRoot match {\n+      case Some(root) =>\n+        onChangeDirectory(root)\n+      case None =>\n+    }\n+  }\n+\n+  def onChangeDirectory(dir: Path): Unit = {\n+    if (Files.isDirectory(dir)) {\n+      val stream = Files.walk(dir)\n+      try {\n+        stream.forEach(path => if (path.toFile().isFile()) onChange(path))\n+      } finally {\n+        stream.close()\n+      }\n+    }\n+  }\n+\n+  def onChange(file: Path): Unit = {\n+    if (file.isSemanticdb) {\n+      val doc = TextDocuments.parseFrom(Files.readAllBytes(file))\n+      referenceProvider.onChange(doc, file)\n+      implementationProvider.onChange(doc, file)\n+    } else {\n+      scribe.warn(s\"not semanticdb file: $file\")"
  },
  {
    "id" : "9b4a92ab-9da4-472d-a028-0739c954ec62",
    "prId" : 934,
    "comments" : [
      {
        "id" : "45dc728a-d8e8-42cb-b775-68c4692b10c0",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "```scala  \r\npath.semanticdbRoot.foreach(onChangeDirectory(_))\r\n```",
        "createdAt" : "2019-09-20T16:45:57Z",
        "updatedAt" : "2019-10-03T13:51:34Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "baa65c88-b9d4-46e1-af3b-bcf7cc397f96",
        "parentId" : "45dc728a-d8e8-42cb-b775-68c4692b10c0",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "changed",
        "createdAt" : "2019-09-20T17:23:18Z",
        "updatedAt" : "2019-10-03T13:51:34Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d837625e03b77aa42a76d4f700137294452174fa",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,67 @@\n+package scala.meta.internal.metals\n+\n+import java.nio.file.Path\n+import MetalsEnrichments._\n+import java.nio.file.Files\n+import ch.epfl.scala.bsp4j.ScalacOptionsResult\n+import scala.meta.internal.semanticdb.TextDocuments\n+\n+class SemanticdbIndexer(\n+    referenceProvider: ReferenceProvider,\n+    implementationProvider: ImplementationProvider\n+) {\n+\n+  def onScalacOptions(scalacOptions: ScalacOptionsResult): Unit = {\n+    for {\n+      item <- scalacOptions.getItems.asScala\n+    } {\n+      val targetroot = item.targetroot\n+      onChangeDirectory(targetroot.resolve(Directories.semanticdb).toNIO)\n+    }\n+  }\n+\n+  def reset(): Unit = {\n+    referenceProvider.reset()\n+    implementationProvider.clear()\n+  }\n+\n+  def onDelete(file: Path): Unit = {\n+    referenceProvider.onDelete(file)\n+    implementationProvider.onDelete(file)\n+  }\n+\n+  /**\n+   * Handle EventType.OVERFLOW, meaning we lost file events for a given path.\n+   *\n+   * We walk up the file tree to the parent `META-INF/semanticdb` parent directory\n+   * and re-index all of its `*.semanticdb` children.\n+   */\n+  def onOverflow(path: Path): Unit = {\n+    path.semanticdbRoot match {"
  },
  {
    "id" : "61618c1c-3c66-482b-bc2f-b0687a4a5f74",
    "prId" : 934,
    "comments" : [
      {
        "id" : "d9e9564d-b6dd-49ba-998d-81fc2de13c81",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "```scala\r\nscalacOptions.getItems.foreach { item =>\r\n  val targetroot = item.targetroot\r\n  onChangeDirectory(targetroot.resolve(Directories.semanticdb).toNIO)\r\n}",
        "createdAt" : "2019-09-20T16:46:36Z",
        "updatedAt" : "2019-10-03T13:51:34Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "da6a52ab-07d1-4678-bfb8-751e9d99320a",
        "parentId" : "d9e9564d-b6dd-49ba-998d-81fc2de13c81",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "It's basically the same thing, I will leave it but switch {} to ()",
        "createdAt" : "2019-09-20T17:09:46Z",
        "updatedAt" : "2019-10-03T13:51:34Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d837625e03b77aa42a76d4f700137294452174fa",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,67 @@\n+package scala.meta.internal.metals\n+\n+import java.nio.file.Path\n+import MetalsEnrichments._\n+import java.nio.file.Files\n+import ch.epfl.scala.bsp4j.ScalacOptionsResult\n+import scala.meta.internal.semanticdb.TextDocuments\n+\n+class SemanticdbIndexer(\n+    referenceProvider: ReferenceProvider,\n+    implementationProvider: ImplementationProvider\n+) {\n+\n+  def onScalacOptions(scalacOptions: ScalacOptionsResult): Unit = {\n+    for {\n+      item <- scalacOptions.getItems.asScala"
  },
  {
    "id" : "5cab4a79-0d06-4beb-8034-27180be9bff7",
    "prId" : 1435,
    "comments" : [
      {
        "id" : "544b295f-f4ac-4173-ba07-e3802d220f70",
        "parentId" : null,
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "Something to take into consideration, we use FixedThreadPool(1) to handle events, because reindexing is sync, we will stop processing events till reindexing is done.",
        "createdAt" : "2020-02-17T13:06:50Z",
        "updatedAt" : "2020-02-17T16:18:06Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c7490abb-7bc5-4846-90bb-26558e585578",
        "parentId" : "544b295f-f4ac-4173-ba07-e3802d220f70",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "changed to using future there",
        "createdAt" : "2020-02-17T14:48:42Z",
        "updatedAt" : "2020-02-17T16:18:06Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fb025d5358f8296b853bbb7ede33b89e75356b35",
    "line" : 23,
    "diffHunk" : "@@ -39,6 +40,20 @@ class SemanticdbIndexer(\n     path.semanticdbRoot.foreach(onChangeDirectory(_))\n   }\n \n+  /**\n+   * Handle EventType.OVERFLOW, meaning we lost file events, when we don't know the path.\n+   * We walk up the file tree for all targets `META-INF/semanticdb` directory\n+   * and re-index all of its `*.semanticdb` children.\n+   */\n+  def onOverflow(): Unit = {\n+    buildTargets.scalacOptions.foreach { item =>\n+      val targetroot = item.targetroot\n+      if (!targetroot.isJar) {\n+        onChangeDirectory(targetroot.resolve(Directories.semanticdb).toNIO)"
  }
]