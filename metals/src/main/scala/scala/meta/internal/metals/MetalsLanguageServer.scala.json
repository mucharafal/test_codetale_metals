[
  {
    "id" : "8dedb126-bf37-4a24-9e12-a4818d7e521e",
    "prId" : 337,
    "comments" : [
      {
        "id" : "46c83d96-8d54-4a83-b8f4-f4f499a6c33a",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "if you want you can use a SAM:\r\n\r\n```scala\r\nsh.schedule(() => initialized(new InitializedParams), 1, TimeUnit.SECONDS)\r\n```",
        "createdAt" : "2018-11-24T13:14:14Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8d22cc30-3a81-41b7-946f-1de4e32e51b5",
        "parentId" : "46c83d96-8d54-4a83-b8f4-f4f499a6c33a",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Updated. SAM sure is prettier, and for dealing with Java collections they're almost a necessity (I can never get the covariant/contravarian bounds right for `java.util.function.Function`). ",
        "createdAt" : "2018-11-25T11:32:26Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "80c934a8-d706-42a6-a53b-aca0f6b3540c",
        "parentId" : "46c83d96-8d54-4a83-b8f4-f4f499a6c33a",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Sure would be nice to have  a Scalafix rewrite to fix these automatically.\r\n\r\nAs for 2.11 support, I would rather explore classloading 2.11 presentation compiler from a 2.12 server instead of compiling the serverÂ to 2.11.",
        "createdAt" : "2018-11-25T11:33:38Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8ab78d5883e2e77a843cca1ea641084e6e4a2875",
    "line" : 178,
    "diffHunk" : "@@ -168,16 +161,18 @@ class MetalsLanguageServer(\n       initializeParams = Option(params)\n       updateWorkspaceDirectory(params)\n       val capabilities = new ServerCapabilities()\n-      capabilities.setCompletionProvider(\n-        new CompletionOptions(false, Collections.emptyList())\n-      )\n-      capabilities.setCompletionProvider(\n-        new CompletionOptions(false, Collections.emptyList())\n-      )\n       capabilities.setDefinitionProvider(true)\n       capabilities.setTextDocumentSync(TextDocumentSyncKind.Full)\n       if (config.isNoInitialized) {\n-        initialized(new InitializedParams).asScala\n+        sh.schedule("
  },
  {
    "id" : "228d1128-6ba9-44ae-972f-452177fcf3d7",
    "prId" : 337,
    "comments" : [
      {
        "id" : "144c2cd8-3d80-4b57-9091-bc569d6078f9",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "is everything internal?",
        "createdAt" : "2018-11-24T13:28:47Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1b64a636-8b09-4a69-8cfe-9ff83ac231a2",
        "parentId" : "144c2cd8-3d80-4b57-9091-bc569d6078f9",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Yes, only `scala.meta.metals.Main` is public.",
        "createdAt" : "2018-11-25T11:29:03Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8ab78d5883e2e77a843cca1ea641084e6e4a2875",
    "line" : 1,
    "diffHunk" : "@@ -0,0 +1,746 @@\n+package scala.meta.internal.metals"
  },
  {
    "id" : "0ac55998-e5ca-4d97-b155-8654f3ad4e46",
    "prId" : 337,
    "comments" : [
      {
        "id" : "e83f3bb7-77c2-4d37-81c6-2b5ef0d98777",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "val instead of def?",
        "createdAt" : "2018-11-24T13:29:57Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9cbcdbef-2a4d-401e-a490-3b9844448aad",
        "parentId" : "e83f3bb7-77c2-4d37-81c6-2b5ef0d98777",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "It doesn't matter so much, `val` creates a field + method anyways. I removed this forwarder and use `config.icons` instead",
        "createdAt" : "2018-11-25T11:30:51Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8ab78d5883e2e77a843cca1ea641084e6e4a2875",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,746 @@\n+package scala.meta.internal.metals\n+\n+import ch.epfl.scala.bsp4j.BuildTargetIdentifier\n+import ch.epfl.scala.bsp4j.CompileParams\n+import ch.epfl.scala.bsp4j.DependencySourcesParams\n+import ch.epfl.scala.bsp4j.ScalacOptionsParams\n+import ch.epfl.scala.bsp4j.SourcesParams\n+import ch.epfl.scala.bsp4j.StatusCode\n+import io.undertow.server.HttpServerExchange\n+import java.net.URI\n+import java.nio.charset.Charset\n+import java.nio.charset.StandardCharsets\n+import java.nio.file._\n+import java.nio.file.attribute.BasicFileAttributes\n+import java.util\n+import java.util.concurrent.CompletableFuture\n+import java.util.concurrent.Executors\n+import java.util.concurrent.TimeUnit\n+import java.util.concurrent.atomic.AtomicReference\n+import org.eclipse.lsp4j._\n+import org.eclipse.lsp4j.jsonrpc.CompletableFutures\n+import org.eclipse.lsp4j.jsonrpc.services.JsonNotification\n+import org.eclipse.lsp4j.jsonrpc.services.JsonRequest\n+import scala.concurrent.ExecutionContextExecutorService\n+import scala.concurrent.Future\n+import scala.meta.internal.io.FileIO\n+import scala.meta.internal.metals.BuildTool.Sbt\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.mtags.Mtags\n+import scala.meta.internal.mtags.MtagsEnrichments._\n+import scala.meta.internal.mtags.OnDemandSymbolIndex\n+import scala.meta.internal.mtags.Semanticdbs\n+import scala.meta.internal.semanticdb.Language\n+import scala.meta.io.AbsolutePath\n+import scala.meta.parsers.ParseException\n+import scala.util.control.NonFatal\n+\n+class MetalsLanguageServer(\n+    ec: ExecutionContextExecutorService,\n+    buffers: Buffers = Buffers(),\n+    redirectSystemOut: Boolean = true,\n+    charset: Charset = StandardCharsets.UTF_8,\n+    time: Time = Time.system,\n+    config: MetalsServerConfig = MetalsServerConfig.default,\n+    progressTicks: ProgressTicks = ProgressTicks.braille\n+) extends Cancelable {\n+\n+  private def icons: Icons = config.icons"
  },
  {
    "id" : "4495e5e8-8f43-49e8-a3e6-35b473b79045",
    "prId" : 337,
    "comments" : [
      {
        "id" : "7ccc8ba1-8047-4350-9016-40e851b7dc67",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Have you thought about skipping gitignored stuff?",
        "createdAt" : "2018-11-24T13:44:14Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "82fad985-9bf4-4862-9485-98c2106a7f92",
        "parentId" : "7ccc8ba1-8047-4350-9016-40e851b7dc67",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This is actually no longer relevant because this method is only used for source directories now (which have no `.metals` or `.bloop`. Removed `preVisitDirectory`. Previously we ran this method at the workspace root, but that turned out to be a bad idea for many reasons.",
        "createdAt" : "2018-11-25T11:36:06Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8ab78d5883e2e77a843cca1ea641084e6e4a2875",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,746 @@\n+package scala.meta.internal.metals\n+\n+import ch.epfl.scala.bsp4j.BuildTargetIdentifier\n+import ch.epfl.scala.bsp4j.CompileParams\n+import ch.epfl.scala.bsp4j.DependencySourcesParams\n+import ch.epfl.scala.bsp4j.ScalacOptionsParams\n+import ch.epfl.scala.bsp4j.SourcesParams\n+import ch.epfl.scala.bsp4j.StatusCode\n+import io.undertow.server.HttpServerExchange\n+import java.net.URI\n+import java.nio.charset.Charset\n+import java.nio.charset.StandardCharsets\n+import java.nio.file._\n+import java.nio.file.attribute.BasicFileAttributes\n+import java.util\n+import java.util.concurrent.CompletableFuture\n+import java.util.concurrent.Executors\n+import java.util.concurrent.TimeUnit\n+import java.util.concurrent.atomic.AtomicReference\n+import org.eclipse.lsp4j._\n+import org.eclipse.lsp4j.jsonrpc.CompletableFutures\n+import org.eclipse.lsp4j.jsonrpc.services.JsonNotification\n+import org.eclipse.lsp4j.jsonrpc.services.JsonRequest\n+import scala.concurrent.ExecutionContextExecutorService\n+import scala.concurrent.Future\n+import scala.meta.internal.io.FileIO\n+import scala.meta.internal.metals.BuildTool.Sbt\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.mtags.Mtags\n+import scala.meta.internal.mtags.MtagsEnrichments._\n+import scala.meta.internal.mtags.OnDemandSymbolIndex\n+import scala.meta.internal.mtags.Semanticdbs\n+import scala.meta.internal.semanticdb.Language\n+import scala.meta.io.AbsolutePath\n+import scala.meta.parsers.ParseException\n+import scala.util.control.NonFatal\n+\n+class MetalsLanguageServer(\n+    ec: ExecutionContextExecutorService,\n+    buffers: Buffers = Buffers(),\n+    redirectSystemOut: Boolean = true,\n+    charset: Charset = StandardCharsets.UTF_8,\n+    time: Time = Time.system,\n+    config: MetalsServerConfig = MetalsServerConfig.default,\n+    progressTicks: ProgressTicks = ProgressTicks.braille\n+) extends Cancelable {\n+\n+  private def icons: Icons = config.icons\n+  private implicit val executionContext: ExecutionContextExecutorService = ec\n+  private val sh = Executors.newSingleThreadScheduledExecutor()\n+  private val fingerprints = new MutableMd5Fingerprints\n+  private val mtags = new Mtags\n+  var workspace: AbsolutePath = _\n+  private val index = newSymbolIndex()\n+  var buildServer = Option.empty[BuildServerConnection]\n+  private val openTextDocument = new AtomicReference[AbsolutePath]()\n+  private val savedFiles = new ActiveFiles(time)\n+  private val openedFiles = new ActiveFiles(time)\n+  private val messages = new Messages(icons)\n+\n+  private val cancelables = new MutableCancelable()\n+  override def cancel(): Unit = cancelables.cancel()\n+\n+  // These can't be instantiated until we know the workspace root directory.\n+  private var languageClient: MetalsLanguageClient = _\n+  private var bloopInstall: BloopInstall = _\n+  private var diagnostics: Diagnostics = _\n+  private var buildTargets: BuildTargets = _\n+  private var fileSystemSemanticdbs: FileSystemSemanticdbs = _\n+  private var interactiveSemanticdbs: InteractiveSemanticdbs = _\n+  private var buildTools: BuildTools = _\n+  private var semanticdbs: Semanticdbs = _\n+  private var buildClient: MetalsBuildClient = _\n+  private var bloopServers: BloopServers = _\n+  private var definitionProvider: DefinitionProvider = _\n+  private var initializeParams: Option[InitializeParams] = None\n+  var tables: Tables = _\n+  private var statusBar: StatusBar = _\n+  private var embedded: Embedded = _\n+  private var fileEvents: Option[FileEvents] = None\n+\n+  def connectToLanguageClient(client: MetalsLanguageClient): Unit = {\n+    languageClient = client\n+    statusBar = new StatusBar(() => languageClient, time, progressTicks)\n+    embedded = register(new Embedded(icons, statusBar))\n+    LanguageClientLogger.languageClient = Some(client)\n+  }\n+\n+  def register[T <: Cancelable](cancelable: T): T = {\n+    cancelables.add(cancelable)\n+    cancelable\n+  }\n+\n+  private def updateWorkspaceDirectory(params: InitializeParams): Unit = {\n+    workspace = AbsolutePath(Paths.get(URI.create(params.getRootUri)))\n+    MetalsLogger.setupLspLogger(workspace, redirectSystemOut)\n+    startHttpServer()\n+    tables = register(Tables.forWorkspace(workspace, time))\n+    buildTools = new BuildTools(workspace)\n+    buildTargets = new BuildTargets()\n+    fileSystemSemanticdbs =\n+      new FileSystemSemanticdbs(buildTargets, charset, workspace, fingerprints)\n+    interactiveSemanticdbs = register(\n+      new InteractiveSemanticdbs(\n+        workspace,\n+        buildTargets,\n+        charset,\n+        languageClient,\n+        tables,\n+        messages,\n+        statusBar\n+      )\n+    )\n+    diagnostics = new Diagnostics(buildTargets, languageClient)\n+    buildClient = new ForwardingMetalsBuildClient(languageClient, diagnostics)\n+    bloopInstall = register(\n+      new BloopInstall(\n+        workspace,\n+        languageClient,\n+        sh,\n+        buildTools,\n+        time,\n+        tables,\n+        messages,\n+        config,\n+        embedded,\n+        statusBar\n+      )\n+    )\n+    bloopServers = new BloopServers(\n+      sh,\n+      workspace,\n+      buildClient,\n+      config,\n+      icons,\n+      embedded,\n+      statusBar\n+    )\n+    semanticdbs = AggregateSemanticdbs(\n+      List(\n+        fileSystemSemanticdbs,\n+        interactiveSemanticdbs\n+      )\n+    )\n+    definitionProvider = new DefinitionProvider(\n+      workspace,\n+      mtags,\n+      buffers,\n+      index,\n+      semanticdbs,\n+      icons,\n+      statusBar\n+    )\n+  }\n+\n+  @JsonRequest(\"initialize\")\n+  def initialize(\n+      params: InitializeParams\n+  ): CompletableFuture[InitializeResult] = {\n+    Future {\n+      initializeParams = Option(params)\n+      updateWorkspaceDirectory(params)\n+      val capabilities = new ServerCapabilities()\n+      capabilities.setDefinitionProvider(true)\n+      capabilities.setTextDocumentSync(TextDocumentSyncKind.Full)\n+      if (config.isNoInitialized) {\n+        sh.schedule(\n+          new Runnable {\n+            override def run(): Unit = {\n+              initialized(new InitializedParams)\n+            }\n+          },\n+          1,\n+          TimeUnit.SECONDS\n+        )\n+      }\n+      new InitializeResult(capabilities)\n+    }.logError(\"initialize\")\n+      .transform(identity, e => {\n+        cancel()\n+        e\n+      })\n+      .asJava\n+  }\n+\n+  def fileWatcherGlobs: DidChangeWatchedFilesRegistrationOptions =\n+    new DidChangeWatchedFilesRegistrationOptions(\n+      List(\n+        new FileSystemWatcher(\"**/*.{scala,sbt,java}\"),\n+        new FileSystemWatcher(\"**/project/build.properties\")\n+      ).asJava\n+    )\n+\n+  private def registerFileWatchers(): Unit = {\n+    val registration = for {\n+      params <- initializeParams\n+      capabilities <- Option(params.getCapabilities)\n+      workspace <- Option(capabilities.getWorkspace)\n+      didChangeWatchedFiles <- Option(workspace.getDidChangeWatchedFiles)\n+      if didChangeWatchedFiles.getDynamicRegistration\n+    } yield {\n+      languageClient.registerCapability(\n+        new RegistrationParams(\n+          List(\n+            new Registration(\n+              \"1\",\n+              \"workspace/didChangeWatchedFiles\",\n+              fileWatcherGlobs\n+            )\n+          ).asJava\n+        )\n+      )\n+    }\n+    if (registration.isEmpty) {\n+      if (config.fileWatcher.isCustom) {\n+        () // Do nothing, client has custom file watcher.\n+      } else if (config.fileWatcher.isAuto) {\n+        scribe.info(\"Starting Metals file watcher...\")\n+        val watcher = new FileEvents(\n+          workspace,\n+          fileWatcherGlobs,\n+          buildTargets,\n+          params => didChangeWatchedFiles(params)\n+        )\n+        fileEvents = Some(register(watcher))\n+      } else {\n+        scribe.warn(\n+          s\"File watching is disabled, expect partial functionality. To fix this warning, either pass the \" +\n+            s\"system property -Dmetals.file-watcher=auto during startup or use an editor with file watching support.\"\n+        )\n+      }\n+    }\n+  }\n+\n+  private def startHttpServer(): Unit = {\n+    if (config.isHttpEnabled) {\n+      val host = \"localhost\"\n+      val port = 5031\n+      val url = s\"http://$host:$port\"\n+      var render: () => String = () => \"\"\n+      var complete: HttpServerExchange => Unit = e => ()\n+      val server = MetalsHttpServer(\n+        host,\n+        port,\n+        this,\n+        () => render(),\n+        e => complete(e)\n+      )\n+      val newClient = new MetalsHttpClient(\n+        workspace,\n+        url,\n+        languageClient,\n+        () => server.reload(),\n+        charset,\n+        icons,\n+        time,\n+        sh\n+      )\n+      render = () => newClient.renderHtml\n+      complete = e => newClient.complete(e)\n+      languageClient = newClient\n+      LanguageClientLogger.languageClient = Some(newClient)\n+      server.start()\n+      cancelables.add(Cancelable(() => server.stop()))\n+    }\n+  }\n+\n+  @JsonNotification(\"initialized\")\n+  def initialized(params: InitializedParams): CompletableFuture[Unit] = {\n+    statusBar.start(sh, 0, 1, TimeUnit.SECONDS)\n+    registerFileWatchers()\n+    Future\n+      .sequence(\n+        List[Future[Unit]](\n+          quickConnectToBuildServer().ignoreValue,\n+          slowConnectToBuildServer(forceImport = false).ignoreValue\n+        )\n+      )\n+      .asJavaUnit\n+  }\n+\n+  @JsonRequest(\"shutdown\")\n+  def shutdown(): CompletableFuture[Unit] = {\n+    LanguageClientLogger.languageClient = None\n+    scribe.info(\"Shutting down...\")\n+    try {\n+      cancelables.cancel()\n+    } catch {\n+      case NonFatal(e) =>\n+        scribe.error(\"cancellation error\", e)\n+    }\n+    sh.shutdownNow()\n+    buildServer match {\n+      case Some(value) =>\n+        value\n+          .shutdown()\n+          .logErrorAndContinue(\"shutting down build server\")\n+          .asJava\n+      case None => Future.successful(()).asJava\n+    }\n+  }\n+\n+  @JsonNotification(\"exit\")\n+  def exit(): Unit = {\n+    System.exit(0)\n+  }\n+\n+  @JsonNotification(\"textDocument/didOpen\")\n+  def didOpen(params: DidOpenTextDocumentParams): CompletableFuture[Unit] = {\n+    val path = params.getTextDocument.getUri.toAbsolutePath\n+    openedFiles.add(path)\n+    openTextDocument.set(path)\n+    // Update md5 fingerprint from file contents on disk\n+    fingerprints.add(path, FileIO.slurp(path, charset))\n+    // Update in-memory buffer contents from LSP client\n+    buffers.put(path, params.getTextDocument.getText)\n+    if (path.isDependencySource(workspace)) {\n+      CompletableFutures.computeAsync { _ =>\n+        // trigger compilation in preparation for definition requests\n+        interactiveSemanticdbs.textDocument(path)\n+        // publish diagnostics\n+        interactiveSemanticdbs.didFocus(path)\n+        ()\n+      }\n+    } else {\n+      compileSourceFiles(List(path)).asJava\n+    }\n+  }\n+\n+  @JsonNotification(\"metals/didFocusTextDocument\")\n+  def didFocus(uri: String): CompletableFuture[Unit] = {\n+    val path = uri.toAbsolutePath\n+    // unpublish diagnostic for dependencies\n+    interactiveSemanticdbs.didFocus(path)\n+    if (openedFiles.isRecentlyActive(path)) {\n+      CompletableFuture.completedFuture(())\n+    } else {\n+      compileSourceFiles(List(path)).asJava\n+    }\n+  }\n+\n+  @JsonNotification(\"textDocument/didChange\")\n+  def didChange(\n+      params: DidChangeTextDocumentParams\n+  ): CompletableFuture[Unit] = {\n+    CompletableFuture.completedFuture {\n+      params.getContentChanges.asScala.headOption.foreach { change =>\n+        buffers.put(\n+          params.getTextDocument.getUri.toAbsolutePath,\n+          change.getText\n+        )\n+      }\n+    }\n+  }\n+\n+  @JsonNotification(\"textDocument/didClose\")\n+  def didClose(params: DidCloseTextDocumentParams): Unit = {\n+    val path = params.getTextDocument.getUri.toAbsolutePath\n+    buffers.remove(path)\n+  }\n+\n+  @JsonNotification(\"textDocument/didSave\")\n+  def didSave(params: DidSaveTextDocumentParams): CompletableFuture[Unit] = {\n+    val path = params.getTextDocument.getUri.toAbsolutePath\n+    savedFiles.add(path)\n+    buffers.put(path, path.toInput.text)\n+    onChange(List(path))\n+  }\n+\n+  @JsonNotification(\"workspace/didChangeConfiguration\")\n+  def didChangeConfiguration(params: DidChangeConfigurationParams): Unit = {\n+    // TODO(olafur): Handle notification changes.\n+  }\n+\n+  @JsonNotification(\"workspace/didChangeWatchedFiles\")\n+  def didChangeWatchedFiles(\n+      params: DidChangeWatchedFilesParams\n+  ): CompletableFuture[Unit] = {\n+    val paths = params.getChanges.asScala.iterator\n+      .map(_.getUri.toAbsolutePath)\n+      .filterNot(savedFiles.isRecentlyActive) // de-duplicate didSave events.\n+      .toSeq\n+    onChange(paths)\n+  }\n+\n+  private def onChange(paths: Seq[AbsolutePath]): CompletableFuture[Unit] = {\n+    paths.foreach { path =>\n+      fingerprints.add(path, FileIO.slurp(path, charset))\n+    }\n+    Future\n+      .sequence(\n+        List(\n+          reindexSources(paths),\n+          compileSourceFiles(paths).ignoreValue,\n+          onSbtBuildChanged(paths).ignoreValue\n+        )\n+      )\n+      .ignoreValue\n+      .asJava\n+  }\n+\n+  @JsonRequest(\"textDocument/definition\")\n+  def definition(\n+      position: TextDocumentPositionParams\n+  ): CompletableFuture[util.List[Location]] =\n+    CompletableFutures.computeAsync { _ =>\n+      definitionResult(position).locations\n+    }\n+\n+  @JsonRequest(\"workspace/executeCommand\")\n+  def executeCommand(params: ExecuteCommandParams): CompletableFuture[Unit] =\n+    params.getCommand match {\n+      case ServerCommands.ScanWorkspaceSources =>\n+        Future {\n+          buildTargets.sourceDirectories.foreach(indexSourceDirectory)\n+        }.asJavaUnit\n+      case ServerCommands.ImportBuild =>\n+        slowConnectToBuildServer(forceImport = true).asJavaUnit\n+      case ServerCommands.ConnectBuildServer =>\n+        quickConnectToBuildServer().asJavaUnit\n+      case ServerCommands.OpenBrowser(url) =>\n+        CompletableFuture.completedFuture(Urls.openBrowser(url))\n+      case els =>\n+        scribe.error(s\"Unknown command '$els'\")\n+        CompletableFuture.completedFuture(())\n+    }\n+\n+  private def slowConnectToBuildServer(\n+      forceImport: Boolean\n+  ): Future[BuildChange] = {\n+    buildTools.asSbt match {\n+      case None =>\n+        scribe.warn(\n+          s\"Skipping build import for unsupport build tool $buildTools\"\n+        )\n+        Future.successful(BuildChange.None)\n+      case Some(sbt) =>\n+        SbtDigest.current(workspace) match {\n+          case None =>\n+            scribe.warn(s\"Skipping build import, no checksum.\")\n+            Future.successful(BuildChange.None)\n+          case Some(digest) =>\n+            slowConnectToBuildServer(forceImport, sbt, digest)\n+        }\n+    }\n+  }\n+\n+  private def slowConnectToBuildServer(\n+      forceImport: Boolean,\n+      sbt: Sbt,\n+      checksum: String\n+  ): Future[BuildChange] =\n+    for {\n+      result <- {\n+        if (forceImport) bloopInstall.runUnconditionally(sbt)\n+        else bloopInstall.runIfApproved(sbt, checksum)\n+      }\n+      change <- {\n+        if (result.isInstalled) quickConnectToBuildServer()\n+        else if (result.isFailed) {\n+          if (buildTools.isBloop) {\n+            // TODO(olafur) try to connect but gracefully error\n+            languageClient.showMessage(\n+              messages.ImportProjectPartiallyFailed\n+            )\n+            // Connect nevertheless, many build import failures are caused\n+            // by resolution errors in one weird module while other modules\n+            // exported successfully.\n+            quickConnectToBuildServer()\n+          } else {\n+            languageClient.showMessage(messages.ImportProjectFailed)\n+            Future.successful(BuildChange.Failed)\n+          }\n+        } else {\n+          Future.successful(BuildChange.None)\n+        }\n+      }\n+    } yield change\n+\n+  private def quickConnectToBuildServer(): Future[BuildChange] = {\n+    if (!buildTools.isBloop) {\n+      Future.successful(BuildChange.None)\n+    } else {\n+      val importingBuild = for {\n+        _ <- buildServer match {\n+          case Some(old) => old.shutdown()\n+          case None => Future.successful(())\n+        }\n+        build <- timed(\"connected to build server\")(bloopServers.newServer())\n+        _ = {\n+          cancelables.add(build)\n+          buildServer = Some(build)\n+        }\n+        _ <- build.initialize()\n+        _ <- installWorkspaceBuildTargets(build)\n+      } yield ()\n+\n+      for {\n+        _ <- statusBar.trackFuture(\"Importing build\", importingBuild)\n+        _ = statusBar.addMessage(s\"${icons.rocket}Imported build!\")\n+        _ <- compileSourceFiles(buffers.open.toSeq)\n+      } yield BuildChange.Reconnected\n+    }\n+  }.recover {\n+    case NonFatal(e) =>\n+      val message =\n+        \"Failed to connect with build server, no functionality will work.\"\n+      val details = \" See logs for more details.\"\n+      buildServer.foreach(_.shutdown())\n+      buildServer = None\n+      scribe.error(message, e)\n+      languageClient.showMessage(\n+        new MessageParams(MessageType.Error, message + details)\n+      )\n+      BuildChange.Failed\n+  }\n+\n+  /**\n+   * Visit every file and directory in the workspace and register\n+   * toplevel definitions for scala source files.\n+   */\n+  private def indexSourceDirectory(\n+      sourceDirectory: AbsolutePath\n+  ): Future[Unit] = Future {\n+    Files.walkFileTree(\n+      sourceDirectory.toNIO,\n+      new SimpleFileVisitor[Path] {\n+        override def visitFile(\n+            file: Path,\n+            attrs: BasicFileAttributes\n+        ): FileVisitResult = {\n+          val path = AbsolutePath(file)\n+          path.toLanguage match {\n+            case Language.SCALA | Language.JAVA =>\n+              index.addSourceFile(path, Some(sourceDirectory))\n+            case _ =>\n+          }\n+          super.visitFile(file, attrs)\n+        }\n+        override def preVisitDirectory(\n+            dir: Path,\n+            attrs: BasicFileAttributes\n+        ): FileVisitResult = {\n+          val path = AbsolutePath(dir)\n+          if (path.resolve(\"META-INF\").isDirectory) {\n+            FileVisitResult.SKIP_SUBTREE\n+          } else if (dir.endsWith(\".bloop\") || dir.endsWith(\".metals\")) {"
  },
  {
    "id" : "6c5da456-28ea-4fa7-bd36-3d550983d4f7",
    "prId" : 337,
    "comments" : [
      {
        "id" : "3ee91689-ddfe-490e-8d5a-71bfadb12151",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "you can avoid binding to `result`",
        "createdAt" : "2018-11-24T13:48:32Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0f79bd20-1916-4d65-a203-e55b73dd80b3",
        "parentId" : "3ee91689-ddfe-490e-8d5a-71bfadb12151",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Done, I believe this was helpful at some point when this method was much much larger. Now it's clearer without `result` ð ",
        "createdAt" : "2018-11-25T11:36:51Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8ab78d5883e2e77a843cca1ea641084e6e4a2875",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,746 @@\n+package scala.meta.internal.metals\n+\n+import ch.epfl.scala.bsp4j.BuildTargetIdentifier\n+import ch.epfl.scala.bsp4j.CompileParams\n+import ch.epfl.scala.bsp4j.DependencySourcesParams\n+import ch.epfl.scala.bsp4j.ScalacOptionsParams\n+import ch.epfl.scala.bsp4j.SourcesParams\n+import ch.epfl.scala.bsp4j.StatusCode\n+import io.undertow.server.HttpServerExchange\n+import java.net.URI\n+import java.nio.charset.Charset\n+import java.nio.charset.StandardCharsets\n+import java.nio.file._\n+import java.nio.file.attribute.BasicFileAttributes\n+import java.util\n+import java.util.concurrent.CompletableFuture\n+import java.util.concurrent.Executors\n+import java.util.concurrent.TimeUnit\n+import java.util.concurrent.atomic.AtomicReference\n+import org.eclipse.lsp4j._\n+import org.eclipse.lsp4j.jsonrpc.CompletableFutures\n+import org.eclipse.lsp4j.jsonrpc.services.JsonNotification\n+import org.eclipse.lsp4j.jsonrpc.services.JsonRequest\n+import scala.concurrent.ExecutionContextExecutorService\n+import scala.concurrent.Future\n+import scala.meta.internal.io.FileIO\n+import scala.meta.internal.metals.BuildTool.Sbt\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.mtags.Mtags\n+import scala.meta.internal.mtags.MtagsEnrichments._\n+import scala.meta.internal.mtags.OnDemandSymbolIndex\n+import scala.meta.internal.mtags.Semanticdbs\n+import scala.meta.internal.semanticdb.Language\n+import scala.meta.io.AbsolutePath\n+import scala.meta.parsers.ParseException\n+import scala.util.control.NonFatal\n+\n+class MetalsLanguageServer(\n+    ec: ExecutionContextExecutorService,\n+    buffers: Buffers = Buffers(),\n+    redirectSystemOut: Boolean = true,\n+    charset: Charset = StandardCharsets.UTF_8,\n+    time: Time = Time.system,\n+    config: MetalsServerConfig = MetalsServerConfig.default,\n+    progressTicks: ProgressTicks = ProgressTicks.braille\n+) extends Cancelable {\n+\n+  private def icons: Icons = config.icons\n+  private implicit val executionContext: ExecutionContextExecutorService = ec\n+  private val sh = Executors.newSingleThreadScheduledExecutor()\n+  private val fingerprints = new MutableMd5Fingerprints\n+  private val mtags = new Mtags\n+  var workspace: AbsolutePath = _\n+  private val index = newSymbolIndex()\n+  var buildServer = Option.empty[BuildServerConnection]\n+  private val openTextDocument = new AtomicReference[AbsolutePath]()\n+  private val savedFiles = new ActiveFiles(time)\n+  private val openedFiles = new ActiveFiles(time)\n+  private val messages = new Messages(icons)\n+\n+  private val cancelables = new MutableCancelable()\n+  override def cancel(): Unit = cancelables.cancel()\n+\n+  // These can't be instantiated until we know the workspace root directory.\n+  private var languageClient: MetalsLanguageClient = _\n+  private var bloopInstall: BloopInstall = _\n+  private var diagnostics: Diagnostics = _\n+  private var buildTargets: BuildTargets = _\n+  private var fileSystemSemanticdbs: FileSystemSemanticdbs = _\n+  private var interactiveSemanticdbs: InteractiveSemanticdbs = _\n+  private var buildTools: BuildTools = _\n+  private var semanticdbs: Semanticdbs = _\n+  private var buildClient: MetalsBuildClient = _\n+  private var bloopServers: BloopServers = _\n+  private var definitionProvider: DefinitionProvider = _\n+  private var initializeParams: Option[InitializeParams] = None\n+  var tables: Tables = _\n+  private var statusBar: StatusBar = _\n+  private var embedded: Embedded = _\n+  private var fileEvents: Option[FileEvents] = None\n+\n+  def connectToLanguageClient(client: MetalsLanguageClient): Unit = {\n+    languageClient = client\n+    statusBar = new StatusBar(() => languageClient, time, progressTicks)\n+    embedded = register(new Embedded(icons, statusBar))\n+    LanguageClientLogger.languageClient = Some(client)\n+  }\n+\n+  def register[T <: Cancelable](cancelable: T): T = {\n+    cancelables.add(cancelable)\n+    cancelable\n+  }\n+\n+  private def updateWorkspaceDirectory(params: InitializeParams): Unit = {\n+    workspace = AbsolutePath(Paths.get(URI.create(params.getRootUri)))\n+    MetalsLogger.setupLspLogger(workspace, redirectSystemOut)\n+    startHttpServer()\n+    tables = register(Tables.forWorkspace(workspace, time))\n+    buildTools = new BuildTools(workspace)\n+    buildTargets = new BuildTargets()\n+    fileSystemSemanticdbs =\n+      new FileSystemSemanticdbs(buildTargets, charset, workspace, fingerprints)\n+    interactiveSemanticdbs = register(\n+      new InteractiveSemanticdbs(\n+        workspace,\n+        buildTargets,\n+        charset,\n+        languageClient,\n+        tables,\n+        messages,\n+        statusBar\n+      )\n+    )\n+    diagnostics = new Diagnostics(buildTargets, languageClient)\n+    buildClient = new ForwardingMetalsBuildClient(languageClient, diagnostics)\n+    bloopInstall = register(\n+      new BloopInstall(\n+        workspace,\n+        languageClient,\n+        sh,\n+        buildTools,\n+        time,\n+        tables,\n+        messages,\n+        config,\n+        embedded,\n+        statusBar\n+      )\n+    )\n+    bloopServers = new BloopServers(\n+      sh,\n+      workspace,\n+      buildClient,\n+      config,\n+      icons,\n+      embedded,\n+      statusBar\n+    )\n+    semanticdbs = AggregateSemanticdbs(\n+      List(\n+        fileSystemSemanticdbs,\n+        interactiveSemanticdbs\n+      )\n+    )\n+    definitionProvider = new DefinitionProvider(\n+      workspace,\n+      mtags,\n+      buffers,\n+      index,\n+      semanticdbs,\n+      icons,\n+      statusBar\n+    )\n+  }\n+\n+  @JsonRequest(\"initialize\")\n+  def initialize(\n+      params: InitializeParams\n+  ): CompletableFuture[InitializeResult] = {\n+    Future {\n+      initializeParams = Option(params)\n+      updateWorkspaceDirectory(params)\n+      val capabilities = new ServerCapabilities()\n+      capabilities.setDefinitionProvider(true)\n+      capabilities.setTextDocumentSync(TextDocumentSyncKind.Full)\n+      if (config.isNoInitialized) {\n+        sh.schedule(\n+          new Runnable {\n+            override def run(): Unit = {\n+              initialized(new InitializedParams)\n+            }\n+          },\n+          1,\n+          TimeUnit.SECONDS\n+        )\n+      }\n+      new InitializeResult(capabilities)\n+    }.logError(\"initialize\")\n+      .transform(identity, e => {\n+        cancel()\n+        e\n+      })\n+      .asJava\n+  }\n+\n+  def fileWatcherGlobs: DidChangeWatchedFilesRegistrationOptions =\n+    new DidChangeWatchedFilesRegistrationOptions(\n+      List(\n+        new FileSystemWatcher(\"**/*.{scala,sbt,java}\"),\n+        new FileSystemWatcher(\"**/project/build.properties\")\n+      ).asJava\n+    )\n+\n+  private def registerFileWatchers(): Unit = {\n+    val registration = for {\n+      params <- initializeParams\n+      capabilities <- Option(params.getCapabilities)\n+      workspace <- Option(capabilities.getWorkspace)\n+      didChangeWatchedFiles <- Option(workspace.getDidChangeWatchedFiles)\n+      if didChangeWatchedFiles.getDynamicRegistration\n+    } yield {\n+      languageClient.registerCapability(\n+        new RegistrationParams(\n+          List(\n+            new Registration(\n+              \"1\",\n+              \"workspace/didChangeWatchedFiles\",\n+              fileWatcherGlobs\n+            )\n+          ).asJava\n+        )\n+      )\n+    }\n+    if (registration.isEmpty) {\n+      if (config.fileWatcher.isCustom) {\n+        () // Do nothing, client has custom file watcher.\n+      } else if (config.fileWatcher.isAuto) {\n+        scribe.info(\"Starting Metals file watcher...\")\n+        val watcher = new FileEvents(\n+          workspace,\n+          fileWatcherGlobs,\n+          buildTargets,\n+          params => didChangeWatchedFiles(params)\n+        )\n+        fileEvents = Some(register(watcher))\n+      } else {\n+        scribe.warn(\n+          s\"File watching is disabled, expect partial functionality. To fix this warning, either pass the \" +\n+            s\"system property -Dmetals.file-watcher=auto during startup or use an editor with file watching support.\"\n+        )\n+      }\n+    }\n+  }\n+\n+  private def startHttpServer(): Unit = {\n+    if (config.isHttpEnabled) {\n+      val host = \"localhost\"\n+      val port = 5031\n+      val url = s\"http://$host:$port\"\n+      var render: () => String = () => \"\"\n+      var complete: HttpServerExchange => Unit = e => ()\n+      val server = MetalsHttpServer(\n+        host,\n+        port,\n+        this,\n+        () => render(),\n+        e => complete(e)\n+      )\n+      val newClient = new MetalsHttpClient(\n+        workspace,\n+        url,\n+        languageClient,\n+        () => server.reload(),\n+        charset,\n+        icons,\n+        time,\n+        sh\n+      )\n+      render = () => newClient.renderHtml\n+      complete = e => newClient.complete(e)\n+      languageClient = newClient\n+      LanguageClientLogger.languageClient = Some(newClient)\n+      server.start()\n+      cancelables.add(Cancelable(() => server.stop()))\n+    }\n+  }\n+\n+  @JsonNotification(\"initialized\")\n+  def initialized(params: InitializedParams): CompletableFuture[Unit] = {\n+    statusBar.start(sh, 0, 1, TimeUnit.SECONDS)\n+    registerFileWatchers()\n+    Future\n+      .sequence(\n+        List[Future[Unit]](\n+          quickConnectToBuildServer().ignoreValue,\n+          slowConnectToBuildServer(forceImport = false).ignoreValue\n+        )\n+      )\n+      .asJavaUnit\n+  }\n+\n+  @JsonRequest(\"shutdown\")\n+  def shutdown(): CompletableFuture[Unit] = {\n+    LanguageClientLogger.languageClient = None\n+    scribe.info(\"Shutting down...\")\n+    try {\n+      cancelables.cancel()\n+    } catch {\n+      case NonFatal(e) =>\n+        scribe.error(\"cancellation error\", e)\n+    }\n+    sh.shutdownNow()\n+    buildServer match {\n+      case Some(value) =>\n+        value\n+          .shutdown()\n+          .logErrorAndContinue(\"shutting down build server\")\n+          .asJava\n+      case None => Future.successful(()).asJava\n+    }\n+  }\n+\n+  @JsonNotification(\"exit\")\n+  def exit(): Unit = {\n+    System.exit(0)\n+  }\n+\n+  @JsonNotification(\"textDocument/didOpen\")\n+  def didOpen(params: DidOpenTextDocumentParams): CompletableFuture[Unit] = {\n+    val path = params.getTextDocument.getUri.toAbsolutePath\n+    openedFiles.add(path)\n+    openTextDocument.set(path)\n+    // Update md5 fingerprint from file contents on disk\n+    fingerprints.add(path, FileIO.slurp(path, charset))\n+    // Update in-memory buffer contents from LSP client\n+    buffers.put(path, params.getTextDocument.getText)\n+    if (path.isDependencySource(workspace)) {\n+      CompletableFutures.computeAsync { _ =>\n+        // trigger compilation in preparation for definition requests\n+        interactiveSemanticdbs.textDocument(path)\n+        // publish diagnostics\n+        interactiveSemanticdbs.didFocus(path)\n+        ()\n+      }\n+    } else {\n+      compileSourceFiles(List(path)).asJava\n+    }\n+  }\n+\n+  @JsonNotification(\"metals/didFocusTextDocument\")\n+  def didFocus(uri: String): CompletableFuture[Unit] = {\n+    val path = uri.toAbsolutePath\n+    // unpublish diagnostic for dependencies\n+    interactiveSemanticdbs.didFocus(path)\n+    if (openedFiles.isRecentlyActive(path)) {\n+      CompletableFuture.completedFuture(())\n+    } else {\n+      compileSourceFiles(List(path)).asJava\n+    }\n+  }\n+\n+  @JsonNotification(\"textDocument/didChange\")\n+  def didChange(\n+      params: DidChangeTextDocumentParams\n+  ): CompletableFuture[Unit] = {\n+    CompletableFuture.completedFuture {\n+      params.getContentChanges.asScala.headOption.foreach { change =>\n+        buffers.put(\n+          params.getTextDocument.getUri.toAbsolutePath,\n+          change.getText\n+        )\n+      }\n+    }\n+  }\n+\n+  @JsonNotification(\"textDocument/didClose\")\n+  def didClose(params: DidCloseTextDocumentParams): Unit = {\n+    val path = params.getTextDocument.getUri.toAbsolutePath\n+    buffers.remove(path)\n+  }\n+\n+  @JsonNotification(\"textDocument/didSave\")\n+  def didSave(params: DidSaveTextDocumentParams): CompletableFuture[Unit] = {\n+    val path = params.getTextDocument.getUri.toAbsolutePath\n+    savedFiles.add(path)\n+    buffers.put(path, path.toInput.text)\n+    onChange(List(path))\n+  }\n+\n+  @JsonNotification(\"workspace/didChangeConfiguration\")\n+  def didChangeConfiguration(params: DidChangeConfigurationParams): Unit = {\n+    // TODO(olafur): Handle notification changes.\n+  }\n+\n+  @JsonNotification(\"workspace/didChangeWatchedFiles\")\n+  def didChangeWatchedFiles(\n+      params: DidChangeWatchedFilesParams\n+  ): CompletableFuture[Unit] = {\n+    val paths = params.getChanges.asScala.iterator\n+      .map(_.getUri.toAbsolutePath)\n+      .filterNot(savedFiles.isRecentlyActive) // de-duplicate didSave events.\n+      .toSeq\n+    onChange(paths)\n+  }\n+\n+  private def onChange(paths: Seq[AbsolutePath]): CompletableFuture[Unit] = {\n+    paths.foreach { path =>\n+      fingerprints.add(path, FileIO.slurp(path, charset))\n+    }\n+    Future\n+      .sequence(\n+        List(\n+          reindexSources(paths),\n+          compileSourceFiles(paths).ignoreValue,\n+          onSbtBuildChanged(paths).ignoreValue\n+        )\n+      )\n+      .ignoreValue\n+      .asJava\n+  }\n+\n+  @JsonRequest(\"textDocument/definition\")\n+  def definition(\n+      position: TextDocumentPositionParams\n+  ): CompletableFuture[util.List[Location]] =\n+    CompletableFutures.computeAsync { _ =>\n+      definitionResult(position).locations\n+    }\n+\n+  @JsonRequest(\"workspace/executeCommand\")\n+  def executeCommand(params: ExecuteCommandParams): CompletableFuture[Unit] =\n+    params.getCommand match {\n+      case ServerCommands.ScanWorkspaceSources =>\n+        Future {\n+          buildTargets.sourceDirectories.foreach(indexSourceDirectory)\n+        }.asJavaUnit\n+      case ServerCommands.ImportBuild =>\n+        slowConnectToBuildServer(forceImport = true).asJavaUnit\n+      case ServerCommands.ConnectBuildServer =>\n+        quickConnectToBuildServer().asJavaUnit\n+      case ServerCommands.OpenBrowser(url) =>\n+        CompletableFuture.completedFuture(Urls.openBrowser(url))\n+      case els =>\n+        scribe.error(s\"Unknown command '$els'\")\n+        CompletableFuture.completedFuture(())\n+    }\n+\n+  private def slowConnectToBuildServer(\n+      forceImport: Boolean\n+  ): Future[BuildChange] = {\n+    buildTools.asSbt match {\n+      case None =>\n+        scribe.warn(\n+          s\"Skipping build import for unsupport build tool $buildTools\"\n+        )\n+        Future.successful(BuildChange.None)\n+      case Some(sbt) =>\n+        SbtDigest.current(workspace) match {\n+          case None =>\n+            scribe.warn(s\"Skipping build import, no checksum.\")\n+            Future.successful(BuildChange.None)\n+          case Some(digest) =>\n+            slowConnectToBuildServer(forceImport, sbt, digest)\n+        }\n+    }\n+  }\n+\n+  private def slowConnectToBuildServer(\n+      forceImport: Boolean,\n+      sbt: Sbt,\n+      checksum: String\n+  ): Future[BuildChange] =\n+    for {\n+      result <- {\n+        if (forceImport) bloopInstall.runUnconditionally(sbt)\n+        else bloopInstall.runIfApproved(sbt, checksum)\n+      }\n+      change <- {\n+        if (result.isInstalled) quickConnectToBuildServer()\n+        else if (result.isFailed) {\n+          if (buildTools.isBloop) {\n+            // TODO(olafur) try to connect but gracefully error\n+            languageClient.showMessage(\n+              messages.ImportProjectPartiallyFailed\n+            )\n+            // Connect nevertheless, many build import failures are caused\n+            // by resolution errors in one weird module while other modules\n+            // exported successfully.\n+            quickConnectToBuildServer()\n+          } else {\n+            languageClient.showMessage(messages.ImportProjectFailed)\n+            Future.successful(BuildChange.Failed)\n+          }\n+        } else {\n+          Future.successful(BuildChange.None)\n+        }\n+      }\n+    } yield change\n+\n+  private def quickConnectToBuildServer(): Future[BuildChange] = {\n+    if (!buildTools.isBloop) {\n+      Future.successful(BuildChange.None)\n+    } else {\n+      val importingBuild = for {\n+        _ <- buildServer match {\n+          case Some(old) => old.shutdown()\n+          case None => Future.successful(())\n+        }\n+        build <- timed(\"connected to build server\")(bloopServers.newServer())\n+        _ = {\n+          cancelables.add(build)\n+          buildServer = Some(build)\n+        }\n+        _ <- build.initialize()\n+        _ <- installWorkspaceBuildTargets(build)\n+      } yield ()\n+\n+      for {\n+        _ <- statusBar.trackFuture(\"Importing build\", importingBuild)\n+        _ = statusBar.addMessage(s\"${icons.rocket}Imported build!\")\n+        _ <- compileSourceFiles(buffers.open.toSeq)\n+      } yield BuildChange.Reconnected\n+    }\n+  }.recover {\n+    case NonFatal(e) =>\n+      val message =\n+        \"Failed to connect with build server, no functionality will work.\"\n+      val details = \" See logs for more details.\"\n+      buildServer.foreach(_.shutdown())\n+      buildServer = None\n+      scribe.error(message, e)\n+      languageClient.showMessage(\n+        new MessageParams(MessageType.Error, message + details)\n+      )\n+      BuildChange.Failed\n+  }\n+\n+  /**\n+   * Visit every file and directory in the workspace and register\n+   * toplevel definitions for scala source files.\n+   */\n+  private def indexSourceDirectory(\n+      sourceDirectory: AbsolutePath\n+  ): Future[Unit] = Future {\n+    Files.walkFileTree(\n+      sourceDirectory.toNIO,\n+      new SimpleFileVisitor[Path] {\n+        override def visitFile(\n+            file: Path,\n+            attrs: BasicFileAttributes\n+        ): FileVisitResult = {\n+          val path = AbsolutePath(file)\n+          path.toLanguage match {\n+            case Language.SCALA | Language.JAVA =>\n+              index.addSourceFile(path, Some(sourceDirectory))\n+            case _ =>\n+          }\n+          super.visitFile(file, attrs)\n+        }\n+        override def preVisitDirectory(\n+            dir: Path,\n+            attrs: BasicFileAttributes\n+        ): FileVisitResult = {\n+          val path = AbsolutePath(dir)\n+          if (path.resolve(\"META-INF\").isDirectory) {\n+            FileVisitResult.SKIP_SUBTREE\n+          } else if (dir.endsWith(\".bloop\") || dir.endsWith(\".metals\")) {\n+            FileVisitResult.SKIP_SUBTREE\n+          } else {\n+            super.preVisitDirectory(dir, attrs)\n+          }\n+        }\n+      }\n+    )\n+  }\n+  private def timed[T](didWhat: String, reportStatus: Boolean = false)(\n+      thunk: => Future[T]\n+  ): Future[T] = {\n+    withTimer(didWhat, reportStatus)(thunk).map {\n+      case (_, value) => value\n+    }\n+  }\n+\n+  private def withTimer[T](didWhat: String, reportStatus: Boolean = false)(\n+      thunk: => Future[T]\n+  ): Future[(Timer, T)] = {\n+    val elapsed = new Timer(time)\n+    val result = thunk\n+    result.map { value =>\n+      if (elapsed.isLogWorthy) {\n+        scribe.info(s\"time: $didWhat in $elapsed \")\n+      }\n+      (elapsed, value)\n+    }\n+  }\n+\n+  /**\n+   * Index all build targets in the workspace.\n+   */\n+  private def installWorkspaceBuildTargets(\n+      build: BuildServerConnection\n+  ): Future[Unit] = timed(\"imported workspace\") {\n+    for {\n+      workspaceBuildTargets <- build.server.workspaceBuildTargets().asScala\n+      _ = {\n+        buildTargets.reset()\n+        interactiveSemanticdbs.reset()\n+        buildTargets.addWorkspaceBuildTargets(workspaceBuildTargets)\n+      }\n+      ids = workspaceBuildTargets.getTargets.map(_.getId)\n+      scalacOptions <- build.server\n+        .buildTargetScalacOptions(new ScalacOptionsParams(ids))\n+        .asScala\n+      _ = {\n+        buildTargets.addScalacOptions(scalacOptions)\n+        JdkSources().foreach(zip => index.addSourceJar(zip))\n+      }\n+      _ <- registerSourceDirectories(build, ids)\n+      dependencySources <- build.server\n+        .buildTargetDependencySources(new DependencySourcesParams(ids))\n+        .asScala\n+    } yield {\n+      for {\n+        item <- dependencySources.getItems.asScala\n+        sourceUri <- Option(item.getSources).toList.flatMap(_.asScala)\n+      } {\n+        try {\n+          val path = sourceUri.toAbsolutePath\n+          if (path.isJar) {\n+            // NOTE(olafur): here we rely on an implementation detail of the bloop BSP server,\n+            // once we upgrade to BSP v2 we can use buildTarget/sources instead of\n+            // buildTarget/dependencySources.\n+            index.addSourceJar(path)\n+          } else {\n+            scribe.warn(s\"unexpected dependency directory: $path\")\n+          }\n+        } catch {\n+          case NonFatal(e) =>\n+            scribe.error(s\"error processing $sourceUri\", e)\n+        }\n+      }\n+      fileEvents.foreach(_.start())\n+    }\n+  }\n+\n+  private def registerSourceDirectories(\n+      build: BuildServerConnection,\n+      ids: util.List[BuildTargetIdentifier]\n+  ): Future[Unit] =\n+    for {\n+      sources <- build.server.buildTargetSources(new SourcesParams(ids)).asScala\n+    } yield {\n+      for {\n+        item <- sources.getItems.asScala\n+        source <- item.getSources.asScala\n+        if source.getUri.endsWith(\"/\")\n+      } {\n+        val directory = source.getUri.toAbsolutePath\n+        buildTargets.addSourceDirectory(directory, item.getTarget)\n+        indexSourceDirectory(directory)\n+      }\n+    }\n+\n+  private def reindexSources(\n+      paths: Seq[AbsolutePath]\n+  ): Future[Unit] = Future {\n+    for {\n+      path <- paths\n+      if path.isScalaOrJava\n+      dir <- buildTargets.sourceDirectories\n+      if path.toNIO.startsWith(dir.toNIO)\n+    } {\n+      index.addSourceFile(path, Some(dir))\n+    }\n+  }\n+  private val compileSourceFiles =\n+    new BatchedFunction[AbsolutePath, Unit](compileSourceFilesUnbatched)\n+  private def compileSourceFilesUnbatched(\n+      paths: Seq[AbsolutePath]\n+  ): Future[Unit] = {\n+    val scalaPaths = paths.filter(_.isScalaOrJava)\n+    buildServer match {\n+      case Some(build) if scalaPaths.nonEmpty =>\n+        val targets = scalaPaths.flatMap(buildTargets.inverseSources).distinct\n+        if (targets.isEmpty) {\n+          scribe.warn(s\"no build target: ${scalaPaths.mkString(\"\\n  \")}\")\n+          Future.successful(())\n+        } else {\n+          val params = new CompileParams(targets.asJava)\n+          val name =\n+            targets.headOption\n+              .flatMap(buildTargets.info)\n+              .map(info => \" \" + info.getDisplayName)\n+              .getOrElse(\"\")\n+          for {\n+            (elapsed, status) <- withTimer(\n+              s\"compiled$name\",\n+              reportStatus = true\n+            ) {\n+              statusBar.trackFuture(\n+                s\"${icons.sync}Compiling$name\",\n+                build.compile(params).asScala,\n+                showTimer = true\n+              )\n+            }\n+          } yield {\n+            status.getStatusCode match {\n+              case StatusCode.OK =>\n+                statusBar.addMessage(s\"${icons.check}Compiled$name in $elapsed\")\n+              case StatusCode.ERROR =>\n+              case StatusCode.CANCELLED =>\n+            }\n+          }\n+        }\n+      case _ =>\n+        Future.successful(())\n+    }\n+  }\n+\n+  /**\n+   * Re-imports the sbt build if build files have changed.\n+   */\n+  private val onSbtBuildChanged =\n+    new BatchedFunction[AbsolutePath, BuildChange](onSbtBuildChangedUnbatched)\n+  private def onSbtBuildChangedUnbatched(\n+      paths: Seq[AbsolutePath]\n+  ): Future[BuildChange] = {\n+    val isBuildChange = paths.exists(_.isSbtRelated(workspace))\n+    val result: Future[BuildChange] ="
  },
  {
    "id" : "ec2bae8c-9303-46dd-bebc-5c7918ef0f98",
    "prId" : 337,
    "comments" : [
      {
        "id" : "7e95dd57-bfad-46b7-884d-bb3451f23172",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "what's this call for?",
        "createdAt" : "2018-11-24T13:49:38Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bf0bfeef-ad19-4930-ad16-d3e4656c5dda",
        "parentId" : "7e95dd57-bfad-46b7-884d-bb3451f23172",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Added comment\r\n```scala\r\n      // Record what build target this dependency source (if any) was jumped from,\r\n      // needed to know what classpath to compile the dependency source with.\r\n```",
        "createdAt" : "2018-11-25T11:38:55Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8ab78d5883e2e77a843cca1ea641084e6e4a2875",
    "line" : 737,
    "diffHunk" : "@@ -0,0 +1,746 @@\n+package scala.meta.internal.metals\n+\n+import ch.epfl.scala.bsp4j.BuildTargetIdentifier\n+import ch.epfl.scala.bsp4j.CompileParams\n+import ch.epfl.scala.bsp4j.DependencySourcesParams\n+import ch.epfl.scala.bsp4j.ScalacOptionsParams\n+import ch.epfl.scala.bsp4j.SourcesParams\n+import ch.epfl.scala.bsp4j.StatusCode\n+import io.undertow.server.HttpServerExchange\n+import java.net.URI\n+import java.nio.charset.Charset\n+import java.nio.charset.StandardCharsets\n+import java.nio.file._\n+import java.nio.file.attribute.BasicFileAttributes\n+import java.util\n+import java.util.concurrent.CompletableFuture\n+import java.util.concurrent.Executors\n+import java.util.concurrent.TimeUnit\n+import java.util.concurrent.atomic.AtomicReference\n+import org.eclipse.lsp4j._\n+import org.eclipse.lsp4j.jsonrpc.CompletableFutures\n+import org.eclipse.lsp4j.jsonrpc.services.JsonNotification\n+import org.eclipse.lsp4j.jsonrpc.services.JsonRequest\n+import scala.concurrent.ExecutionContextExecutorService\n+import scala.concurrent.Future\n+import scala.meta.internal.io.FileIO\n+import scala.meta.internal.metals.BuildTool.Sbt\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.mtags.Mtags\n+import scala.meta.internal.mtags.MtagsEnrichments._\n+import scala.meta.internal.mtags.OnDemandSymbolIndex\n+import scala.meta.internal.mtags.Semanticdbs\n+import scala.meta.internal.semanticdb.Language\n+import scala.meta.io.AbsolutePath\n+import scala.meta.parsers.ParseException\n+import scala.util.control.NonFatal\n+\n+class MetalsLanguageServer(\n+    ec: ExecutionContextExecutorService,\n+    buffers: Buffers = Buffers(),\n+    redirectSystemOut: Boolean = true,\n+    charset: Charset = StandardCharsets.UTF_8,\n+    time: Time = Time.system,\n+    config: MetalsServerConfig = MetalsServerConfig.default,\n+    progressTicks: ProgressTicks = ProgressTicks.braille\n+) extends Cancelable {\n+\n+  private def icons: Icons = config.icons\n+  private implicit val executionContext: ExecutionContextExecutorService = ec\n+  private val sh = Executors.newSingleThreadScheduledExecutor()\n+  private val fingerprints = new MutableMd5Fingerprints\n+  private val mtags = new Mtags\n+  var workspace: AbsolutePath = _\n+  private val index = newSymbolIndex()\n+  var buildServer = Option.empty[BuildServerConnection]\n+  private val openTextDocument = new AtomicReference[AbsolutePath]()\n+  private val savedFiles = new ActiveFiles(time)\n+  private val openedFiles = new ActiveFiles(time)\n+  private val messages = new Messages(icons)\n+\n+  private val cancelables = new MutableCancelable()\n+  override def cancel(): Unit = cancelables.cancel()\n+\n+  // These can't be instantiated until we know the workspace root directory.\n+  private var languageClient: MetalsLanguageClient = _\n+  private var bloopInstall: BloopInstall = _\n+  private var diagnostics: Diagnostics = _\n+  private var buildTargets: BuildTargets = _\n+  private var fileSystemSemanticdbs: FileSystemSemanticdbs = _\n+  private var interactiveSemanticdbs: InteractiveSemanticdbs = _\n+  private var buildTools: BuildTools = _\n+  private var semanticdbs: Semanticdbs = _\n+  private var buildClient: MetalsBuildClient = _\n+  private var bloopServers: BloopServers = _\n+  private var definitionProvider: DefinitionProvider = _\n+  private var initializeParams: Option[InitializeParams] = None\n+  var tables: Tables = _\n+  private var statusBar: StatusBar = _\n+  private var embedded: Embedded = _\n+  private var fileEvents: Option[FileEvents] = None\n+\n+  def connectToLanguageClient(client: MetalsLanguageClient): Unit = {\n+    languageClient = client\n+    statusBar = new StatusBar(() => languageClient, time, progressTicks)\n+    embedded = register(new Embedded(icons, statusBar))\n+    LanguageClientLogger.languageClient = Some(client)\n+  }\n+\n+  def register[T <: Cancelable](cancelable: T): T = {\n+    cancelables.add(cancelable)\n+    cancelable\n+  }\n+\n+  private def updateWorkspaceDirectory(params: InitializeParams): Unit = {\n+    workspace = AbsolutePath(Paths.get(URI.create(params.getRootUri)))\n+    MetalsLogger.setupLspLogger(workspace, redirectSystemOut)\n+    startHttpServer()\n+    tables = register(Tables.forWorkspace(workspace, time))\n+    buildTools = new BuildTools(workspace)\n+    buildTargets = new BuildTargets()\n+    fileSystemSemanticdbs =\n+      new FileSystemSemanticdbs(buildTargets, charset, workspace, fingerprints)\n+    interactiveSemanticdbs = register(\n+      new InteractiveSemanticdbs(\n+        workspace,\n+        buildTargets,\n+        charset,\n+        languageClient,\n+        tables,\n+        messages,\n+        statusBar\n+      )\n+    )\n+    diagnostics = new Diagnostics(buildTargets, languageClient)\n+    buildClient = new ForwardingMetalsBuildClient(languageClient, diagnostics)\n+    bloopInstall = register(\n+      new BloopInstall(\n+        workspace,\n+        languageClient,\n+        sh,\n+        buildTools,\n+        time,\n+        tables,\n+        messages,\n+        config,\n+        embedded,\n+        statusBar\n+      )\n+    )\n+    bloopServers = new BloopServers(\n+      sh,\n+      workspace,\n+      buildClient,\n+      config,\n+      icons,\n+      embedded,\n+      statusBar\n+    )\n+    semanticdbs = AggregateSemanticdbs(\n+      List(\n+        fileSystemSemanticdbs,\n+        interactiveSemanticdbs\n+      )\n+    )\n+    definitionProvider = new DefinitionProvider(\n+      workspace,\n+      mtags,\n+      buffers,\n+      index,\n+      semanticdbs,\n+      icons,\n+      statusBar\n+    )\n+  }\n+\n+  @JsonRequest(\"initialize\")\n+  def initialize(\n+      params: InitializeParams\n+  ): CompletableFuture[InitializeResult] = {\n+    Future {\n+      initializeParams = Option(params)\n+      updateWorkspaceDirectory(params)\n+      val capabilities = new ServerCapabilities()\n+      capabilities.setDefinitionProvider(true)\n+      capabilities.setTextDocumentSync(TextDocumentSyncKind.Full)\n+      if (config.isNoInitialized) {\n+        sh.schedule(\n+          new Runnable {\n+            override def run(): Unit = {\n+              initialized(new InitializedParams)\n+            }\n+          },\n+          1,\n+          TimeUnit.SECONDS\n+        )\n+      }\n+      new InitializeResult(capabilities)\n+    }.logError(\"initialize\")\n+      .transform(identity, e => {\n+        cancel()\n+        e\n+      })\n+      .asJava\n+  }\n+\n+  def fileWatcherGlobs: DidChangeWatchedFilesRegistrationOptions =\n+    new DidChangeWatchedFilesRegistrationOptions(\n+      List(\n+        new FileSystemWatcher(\"**/*.{scala,sbt,java}\"),\n+        new FileSystemWatcher(\"**/project/build.properties\")\n+      ).asJava\n+    )\n+\n+  private def registerFileWatchers(): Unit = {\n+    val registration = for {\n+      params <- initializeParams\n+      capabilities <- Option(params.getCapabilities)\n+      workspace <- Option(capabilities.getWorkspace)\n+      didChangeWatchedFiles <- Option(workspace.getDidChangeWatchedFiles)\n+      if didChangeWatchedFiles.getDynamicRegistration\n+    } yield {\n+      languageClient.registerCapability(\n+        new RegistrationParams(\n+          List(\n+            new Registration(\n+              \"1\",\n+              \"workspace/didChangeWatchedFiles\",\n+              fileWatcherGlobs\n+            )\n+          ).asJava\n+        )\n+      )\n+    }\n+    if (registration.isEmpty) {\n+      if (config.fileWatcher.isCustom) {\n+        () // Do nothing, client has custom file watcher.\n+      } else if (config.fileWatcher.isAuto) {\n+        scribe.info(\"Starting Metals file watcher...\")\n+        val watcher = new FileEvents(\n+          workspace,\n+          fileWatcherGlobs,\n+          buildTargets,\n+          params => didChangeWatchedFiles(params)\n+        )\n+        fileEvents = Some(register(watcher))\n+      } else {\n+        scribe.warn(\n+          s\"File watching is disabled, expect partial functionality. To fix this warning, either pass the \" +\n+            s\"system property -Dmetals.file-watcher=auto during startup or use an editor with file watching support.\"\n+        )\n+      }\n+    }\n+  }\n+\n+  private def startHttpServer(): Unit = {\n+    if (config.isHttpEnabled) {\n+      val host = \"localhost\"\n+      val port = 5031\n+      val url = s\"http://$host:$port\"\n+      var render: () => String = () => \"\"\n+      var complete: HttpServerExchange => Unit = e => ()\n+      val server = MetalsHttpServer(\n+        host,\n+        port,\n+        this,\n+        () => render(),\n+        e => complete(e)\n+      )\n+      val newClient = new MetalsHttpClient(\n+        workspace,\n+        url,\n+        languageClient,\n+        () => server.reload(),\n+        charset,\n+        icons,\n+        time,\n+        sh\n+      )\n+      render = () => newClient.renderHtml\n+      complete = e => newClient.complete(e)\n+      languageClient = newClient\n+      LanguageClientLogger.languageClient = Some(newClient)\n+      server.start()\n+      cancelables.add(Cancelable(() => server.stop()))\n+    }\n+  }\n+\n+  @JsonNotification(\"initialized\")\n+  def initialized(params: InitializedParams): CompletableFuture[Unit] = {\n+    statusBar.start(sh, 0, 1, TimeUnit.SECONDS)\n+    registerFileWatchers()\n+    Future\n+      .sequence(\n+        List[Future[Unit]](\n+          quickConnectToBuildServer().ignoreValue,\n+          slowConnectToBuildServer(forceImport = false).ignoreValue\n+        )\n+      )\n+      .asJavaUnit\n+  }\n+\n+  @JsonRequest(\"shutdown\")\n+  def shutdown(): CompletableFuture[Unit] = {\n+    LanguageClientLogger.languageClient = None\n+    scribe.info(\"Shutting down...\")\n+    try {\n+      cancelables.cancel()\n+    } catch {\n+      case NonFatal(e) =>\n+        scribe.error(\"cancellation error\", e)\n+    }\n+    sh.shutdownNow()\n+    buildServer match {\n+      case Some(value) =>\n+        value\n+          .shutdown()\n+          .logErrorAndContinue(\"shutting down build server\")\n+          .asJava\n+      case None => Future.successful(()).asJava\n+    }\n+  }\n+\n+  @JsonNotification(\"exit\")\n+  def exit(): Unit = {\n+    System.exit(0)\n+  }\n+\n+  @JsonNotification(\"textDocument/didOpen\")\n+  def didOpen(params: DidOpenTextDocumentParams): CompletableFuture[Unit] = {\n+    val path = params.getTextDocument.getUri.toAbsolutePath\n+    openedFiles.add(path)\n+    openTextDocument.set(path)\n+    // Update md5 fingerprint from file contents on disk\n+    fingerprints.add(path, FileIO.slurp(path, charset))\n+    // Update in-memory buffer contents from LSP client\n+    buffers.put(path, params.getTextDocument.getText)\n+    if (path.isDependencySource(workspace)) {\n+      CompletableFutures.computeAsync { _ =>\n+        // trigger compilation in preparation for definition requests\n+        interactiveSemanticdbs.textDocument(path)\n+        // publish diagnostics\n+        interactiveSemanticdbs.didFocus(path)\n+        ()\n+      }\n+    } else {\n+      compileSourceFiles(List(path)).asJava\n+    }\n+  }\n+\n+  @JsonNotification(\"metals/didFocusTextDocument\")\n+  def didFocus(uri: String): CompletableFuture[Unit] = {\n+    val path = uri.toAbsolutePath\n+    // unpublish diagnostic for dependencies\n+    interactiveSemanticdbs.didFocus(path)\n+    if (openedFiles.isRecentlyActive(path)) {\n+      CompletableFuture.completedFuture(())\n+    } else {\n+      compileSourceFiles(List(path)).asJava\n+    }\n+  }\n+\n+  @JsonNotification(\"textDocument/didChange\")\n+  def didChange(\n+      params: DidChangeTextDocumentParams\n+  ): CompletableFuture[Unit] = {\n+    CompletableFuture.completedFuture {\n+      params.getContentChanges.asScala.headOption.foreach { change =>\n+        buffers.put(\n+          params.getTextDocument.getUri.toAbsolutePath,\n+          change.getText\n+        )\n+      }\n+    }\n+  }\n+\n+  @JsonNotification(\"textDocument/didClose\")\n+  def didClose(params: DidCloseTextDocumentParams): Unit = {\n+    val path = params.getTextDocument.getUri.toAbsolutePath\n+    buffers.remove(path)\n+  }\n+\n+  @JsonNotification(\"textDocument/didSave\")\n+  def didSave(params: DidSaveTextDocumentParams): CompletableFuture[Unit] = {\n+    val path = params.getTextDocument.getUri.toAbsolutePath\n+    savedFiles.add(path)\n+    buffers.put(path, path.toInput.text)\n+    onChange(List(path))\n+  }\n+\n+  @JsonNotification(\"workspace/didChangeConfiguration\")\n+  def didChangeConfiguration(params: DidChangeConfigurationParams): Unit = {\n+    // TODO(olafur): Handle notification changes.\n+  }\n+\n+  @JsonNotification(\"workspace/didChangeWatchedFiles\")\n+  def didChangeWatchedFiles(\n+      params: DidChangeWatchedFilesParams\n+  ): CompletableFuture[Unit] = {\n+    val paths = params.getChanges.asScala.iterator\n+      .map(_.getUri.toAbsolutePath)\n+      .filterNot(savedFiles.isRecentlyActive) // de-duplicate didSave events.\n+      .toSeq\n+    onChange(paths)\n+  }\n+\n+  private def onChange(paths: Seq[AbsolutePath]): CompletableFuture[Unit] = {\n+    paths.foreach { path =>\n+      fingerprints.add(path, FileIO.slurp(path, charset))\n+    }\n+    Future\n+      .sequence(\n+        List(\n+          reindexSources(paths),\n+          compileSourceFiles(paths).ignoreValue,\n+          onSbtBuildChanged(paths).ignoreValue\n+        )\n+      )\n+      .ignoreValue\n+      .asJava\n+  }\n+\n+  @JsonRequest(\"textDocument/definition\")\n+  def definition(\n+      position: TextDocumentPositionParams\n+  ): CompletableFuture[util.List[Location]] =\n+    CompletableFutures.computeAsync { _ =>\n+      definitionResult(position).locations\n+    }\n+\n+  @JsonRequest(\"workspace/executeCommand\")\n+  def executeCommand(params: ExecuteCommandParams): CompletableFuture[Unit] =\n+    params.getCommand match {\n+      case ServerCommands.ScanWorkspaceSources =>\n+        Future {\n+          buildTargets.sourceDirectories.foreach(indexSourceDirectory)\n+        }.asJavaUnit\n+      case ServerCommands.ImportBuild =>\n+        slowConnectToBuildServer(forceImport = true).asJavaUnit\n+      case ServerCommands.ConnectBuildServer =>\n+        quickConnectToBuildServer().asJavaUnit\n+      case ServerCommands.OpenBrowser(url) =>\n+        CompletableFuture.completedFuture(Urls.openBrowser(url))\n+      case els =>\n+        scribe.error(s\"Unknown command '$els'\")\n+        CompletableFuture.completedFuture(())\n+    }\n+\n+  private def slowConnectToBuildServer(\n+      forceImport: Boolean\n+  ): Future[BuildChange] = {\n+    buildTools.asSbt match {\n+      case None =>\n+        scribe.warn(\n+          s\"Skipping build import for unsupport build tool $buildTools\"\n+        )\n+        Future.successful(BuildChange.None)\n+      case Some(sbt) =>\n+        SbtDigest.current(workspace) match {\n+          case None =>\n+            scribe.warn(s\"Skipping build import, no checksum.\")\n+            Future.successful(BuildChange.None)\n+          case Some(digest) =>\n+            slowConnectToBuildServer(forceImport, sbt, digest)\n+        }\n+    }\n+  }\n+\n+  private def slowConnectToBuildServer(\n+      forceImport: Boolean,\n+      sbt: Sbt,\n+      checksum: String\n+  ): Future[BuildChange] =\n+    for {\n+      result <- {\n+        if (forceImport) bloopInstall.runUnconditionally(sbt)\n+        else bloopInstall.runIfApproved(sbt, checksum)\n+      }\n+      change <- {\n+        if (result.isInstalled) quickConnectToBuildServer()\n+        else if (result.isFailed) {\n+          if (buildTools.isBloop) {\n+            // TODO(olafur) try to connect but gracefully error\n+            languageClient.showMessage(\n+              messages.ImportProjectPartiallyFailed\n+            )\n+            // Connect nevertheless, many build import failures are caused\n+            // by resolution errors in one weird module while other modules\n+            // exported successfully.\n+            quickConnectToBuildServer()\n+          } else {\n+            languageClient.showMessage(messages.ImportProjectFailed)\n+            Future.successful(BuildChange.Failed)\n+          }\n+        } else {\n+          Future.successful(BuildChange.None)\n+        }\n+      }\n+    } yield change\n+\n+  private def quickConnectToBuildServer(): Future[BuildChange] = {\n+    if (!buildTools.isBloop) {\n+      Future.successful(BuildChange.None)\n+    } else {\n+      val importingBuild = for {\n+        _ <- buildServer match {\n+          case Some(old) => old.shutdown()\n+          case None => Future.successful(())\n+        }\n+        build <- timed(\"connected to build server\")(bloopServers.newServer())\n+        _ = {\n+          cancelables.add(build)\n+          buildServer = Some(build)\n+        }\n+        _ <- build.initialize()\n+        _ <- installWorkspaceBuildTargets(build)\n+      } yield ()\n+\n+      for {\n+        _ <- statusBar.trackFuture(\"Importing build\", importingBuild)\n+        _ = statusBar.addMessage(s\"${icons.rocket}Imported build!\")\n+        _ <- compileSourceFiles(buffers.open.toSeq)\n+      } yield BuildChange.Reconnected\n+    }\n+  }.recover {\n+    case NonFatal(e) =>\n+      val message =\n+        \"Failed to connect with build server, no functionality will work.\"\n+      val details = \" See logs for more details.\"\n+      buildServer.foreach(_.shutdown())\n+      buildServer = None\n+      scribe.error(message, e)\n+      languageClient.showMessage(\n+        new MessageParams(MessageType.Error, message + details)\n+      )\n+      BuildChange.Failed\n+  }\n+\n+  /**\n+   * Visit every file and directory in the workspace and register\n+   * toplevel definitions for scala source files.\n+   */\n+  private def indexSourceDirectory(\n+      sourceDirectory: AbsolutePath\n+  ): Future[Unit] = Future {\n+    Files.walkFileTree(\n+      sourceDirectory.toNIO,\n+      new SimpleFileVisitor[Path] {\n+        override def visitFile(\n+            file: Path,\n+            attrs: BasicFileAttributes\n+        ): FileVisitResult = {\n+          val path = AbsolutePath(file)\n+          path.toLanguage match {\n+            case Language.SCALA | Language.JAVA =>\n+              index.addSourceFile(path, Some(sourceDirectory))\n+            case _ =>\n+          }\n+          super.visitFile(file, attrs)\n+        }\n+        override def preVisitDirectory(\n+            dir: Path,\n+            attrs: BasicFileAttributes\n+        ): FileVisitResult = {\n+          val path = AbsolutePath(dir)\n+          if (path.resolve(\"META-INF\").isDirectory) {\n+            FileVisitResult.SKIP_SUBTREE\n+          } else if (dir.endsWith(\".bloop\") || dir.endsWith(\".metals\")) {\n+            FileVisitResult.SKIP_SUBTREE\n+          } else {\n+            super.preVisitDirectory(dir, attrs)\n+          }\n+        }\n+      }\n+    )\n+  }\n+  private def timed[T](didWhat: String, reportStatus: Boolean = false)(\n+      thunk: => Future[T]\n+  ): Future[T] = {\n+    withTimer(didWhat, reportStatus)(thunk).map {\n+      case (_, value) => value\n+    }\n+  }\n+\n+  private def withTimer[T](didWhat: String, reportStatus: Boolean = false)(\n+      thunk: => Future[T]\n+  ): Future[(Timer, T)] = {\n+    val elapsed = new Timer(time)\n+    val result = thunk\n+    result.map { value =>\n+      if (elapsed.isLogWorthy) {\n+        scribe.info(s\"time: $didWhat in $elapsed \")\n+      }\n+      (elapsed, value)\n+    }\n+  }\n+\n+  /**\n+   * Index all build targets in the workspace.\n+   */\n+  private def installWorkspaceBuildTargets(\n+      build: BuildServerConnection\n+  ): Future[Unit] = timed(\"imported workspace\") {\n+    for {\n+      workspaceBuildTargets <- build.server.workspaceBuildTargets().asScala\n+      _ = {\n+        buildTargets.reset()\n+        interactiveSemanticdbs.reset()\n+        buildTargets.addWorkspaceBuildTargets(workspaceBuildTargets)\n+      }\n+      ids = workspaceBuildTargets.getTargets.map(_.getId)\n+      scalacOptions <- build.server\n+        .buildTargetScalacOptions(new ScalacOptionsParams(ids))\n+        .asScala\n+      _ = {\n+        buildTargets.addScalacOptions(scalacOptions)\n+        JdkSources().foreach(zip => index.addSourceJar(zip))\n+      }\n+      _ <- registerSourceDirectories(build, ids)\n+      dependencySources <- build.server\n+        .buildTargetDependencySources(new DependencySourcesParams(ids))\n+        .asScala\n+    } yield {\n+      for {\n+        item <- dependencySources.getItems.asScala\n+        sourceUri <- Option(item.getSources).toList.flatMap(_.asScala)\n+      } {\n+        try {\n+          val path = sourceUri.toAbsolutePath\n+          if (path.isJar) {\n+            // NOTE(olafur): here we rely on an implementation detail of the bloop BSP server,\n+            // once we upgrade to BSP v2 we can use buildTarget/sources instead of\n+            // buildTarget/dependencySources.\n+            index.addSourceJar(path)\n+          } else {\n+            scribe.warn(s\"unexpected dependency directory: $path\")\n+          }\n+        } catch {\n+          case NonFatal(e) =>\n+            scribe.error(s\"error processing $sourceUri\", e)\n+        }\n+      }\n+      fileEvents.foreach(_.start())\n+    }\n+  }\n+\n+  private def registerSourceDirectories(\n+      build: BuildServerConnection,\n+      ids: util.List[BuildTargetIdentifier]\n+  ): Future[Unit] =\n+    for {\n+      sources <- build.server.buildTargetSources(new SourcesParams(ids)).asScala\n+    } yield {\n+      for {\n+        item <- sources.getItems.asScala\n+        source <- item.getSources.asScala\n+        if source.getUri.endsWith(\"/\")\n+      } {\n+        val directory = source.getUri.toAbsolutePath\n+        buildTargets.addSourceDirectory(directory, item.getTarget)\n+        indexSourceDirectory(directory)\n+      }\n+    }\n+\n+  private def reindexSources(\n+      paths: Seq[AbsolutePath]\n+  ): Future[Unit] = Future {\n+    for {\n+      path <- paths\n+      if path.isScalaOrJava\n+      dir <- buildTargets.sourceDirectories\n+      if path.toNIO.startsWith(dir.toNIO)\n+    } {\n+      index.addSourceFile(path, Some(dir))\n+    }\n+  }\n+  private val compileSourceFiles =\n+    new BatchedFunction[AbsolutePath, Unit](compileSourceFilesUnbatched)\n+  private def compileSourceFilesUnbatched(\n+      paths: Seq[AbsolutePath]\n+  ): Future[Unit] = {\n+    val scalaPaths = paths.filter(_.isScalaOrJava)\n+    buildServer match {\n+      case Some(build) if scalaPaths.nonEmpty =>\n+        val targets = scalaPaths.flatMap(buildTargets.inverseSources).distinct\n+        if (targets.isEmpty) {\n+          scribe.warn(s\"no build target: ${scalaPaths.mkString(\"\\n  \")}\")\n+          Future.successful(())\n+        } else {\n+          val params = new CompileParams(targets.asJava)\n+          val name =\n+            targets.headOption\n+              .flatMap(buildTargets.info)\n+              .map(info => \" \" + info.getDisplayName)\n+              .getOrElse(\"\")\n+          for {\n+            (elapsed, status) <- withTimer(\n+              s\"compiled$name\",\n+              reportStatus = true\n+            ) {\n+              statusBar.trackFuture(\n+                s\"${icons.sync}Compiling$name\",\n+                build.compile(params).asScala,\n+                showTimer = true\n+              )\n+            }\n+          } yield {\n+            status.getStatusCode match {\n+              case StatusCode.OK =>\n+                statusBar.addMessage(s\"${icons.check}Compiled$name in $elapsed\")\n+              case StatusCode.ERROR =>\n+              case StatusCode.CANCELLED =>\n+            }\n+          }\n+        }\n+      case _ =>\n+        Future.successful(())\n+    }\n+  }\n+\n+  /**\n+   * Re-imports the sbt build if build files have changed.\n+   */\n+  private val onSbtBuildChanged =\n+    new BatchedFunction[AbsolutePath, BuildChange](onSbtBuildChangedUnbatched)\n+  private def onSbtBuildChangedUnbatched(\n+      paths: Seq[AbsolutePath]\n+  ): Future[BuildChange] = {\n+    val isBuildChange = paths.exists(_.isSbtRelated(workspace))\n+    val result: Future[BuildChange] =\n+      if (isBuildChange) {\n+        slowConnectToBuildServer(forceImport = false)\n+      } else {\n+        Future.successful(BuildChange.None)\n+      }\n+    result\n+  }\n+\n+  /**\n+   * Returns textDocument/definition in addition to the resolved symbol.\n+   *\n+   * The resolved symbol is used for testing purposes only.\n+   */\n+  def definitionResult(\n+      position: TextDocumentPositionParams\n+  ): DefinitionResult = {\n+    val source = position.getTextDocument.getUri.toAbsolutePath\n+    if (source.toLanguage.isScala) {\n+      val result = definitionProvider.definition(source, position)\n+      interactiveSemanticdbs.didDefinition(source, result)"
  },
  {
    "id" : "1ab2c2f9-750a-4d27-b2dc-365f605cdc2a",
    "prId" : 346,
    "comments" : [
      {
        "id" : "d8f547b3-51c5-4b5e-b15e-be40f463be8a",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Super minor but I'd use the request identifier in the warning message \"textDocument/references is not implemented\"",
        "createdAt" : "2018-11-29T07:45:45Z",
        "updatedAt" : "2018-11-29T08:18:14Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e10c975c-5a14-4da4-8498-41141a52c1e1",
        "parentId" : "d8f547b3-51c5-4b5e-b15e-be40f463be8a",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "I support this. \"textDocument/references is not implemented **yet**\" ð",
        "createdAt" : "2018-11-29T07:51:43Z",
        "updatedAt" : "2018-11-29T08:18:14Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7fa9d1dd-9f53-4b63-a31a-9e884c99b34c",
        "parentId" : "d8f547b3-51c5-4b5e-b15e-be40f463be8a",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I agree with including the method name, I'm on the fence to promise what will get implemented.",
        "createdAt" : "2018-11-29T07:54:08Z",
        "updatedAt" : "2018-11-29T08:18:14Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3f9391c1-74b5-4340-bfd4-aa4afd0706e4",
        "parentId" : "d8f547b3-51c5-4b5e-b15e-be40f463be8a",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "I'm just joking ð",
        "createdAt" : "2018-11-29T07:55:27Z",
        "updatedAt" : "2018-11-29T08:18:14Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fc8efbfc1ff87462edeb03433ec3c3bd8418f61b",
    "line" : null,
    "diffHunk" : "@@ -451,6 +451,110 @@ class MetalsLanguageServer(\n       definitionResult(position).locations\n     }\n \n+  @JsonRequest(\"textDocument/typeDefinition\")\n+  def typeDefinition(\n+      position: TextDocumentPositionParams\n+  ): CompletableFuture[util.List[Location]] =\n+    CompletableFutures.computeAsync { _ =>\n+      scribe.warn(\"Goto type definition is not supported.\")\n+      null\n+    }\n+\n+  @JsonRequest(\"textDocument/implementation\")\n+  def implementation(\n+      position: TextDocumentPositionParams\n+  ): CompletableFuture[util.List[Location]] =\n+    CompletableFutures.computeAsync { _ =>\n+      scribe.warn(\"Goto implementation is not supported.\")\n+      null\n+    }\n+\n+  @JsonRequest(\"textDocument/hover\")\n+  def hover(params: TextDocumentPositionParams): CompletableFuture[Hover] =\n+    CompletableFutures.computeAsync { _ =>\n+      scribe.warn(\"Hover is not supported.\")\n+      null\n+    }\n+\n+  @JsonRequest(\"textDocument/documentHighlight\")\n+  def documentHighlights(\n+      params: TextDocumentPositionParams\n+  ): CompletableFuture[Hover] =\n+    CompletableFutures.computeAsync { _ =>\n+      scribe.warn(\"Document highlights is not supported.\")\n+      null\n+    }\n+\n+  @JsonRequest(\"textDocument/documentSymbol\")\n+  def documentSymbol(\n+      params: DocumentSymbolParams\n+  ): CompletableFuture[util.List[DocumentSymbol]] =\n+    CompletableFutures.computeAsync { _ =>\n+      scribe.warn(\"Document symbols is not supported.\")\n+      null\n+    }\n+\n+  @JsonRequest(\"textDocument/formatting\")\n+  def documentSymbol(\n+      params: DocumentFormattingParams\n+  ): CompletableFuture[util.List[TextEdit]] =\n+    CompletableFutures.computeAsync { _ =>\n+      scribe.warn(\"Code formatting is not supported.\")\n+      null\n+    }\n+\n+  @JsonRequest(\"textDocument/rename\")\n+  def documentSymbol(\n+      params: RenameParams\n+  ): CompletableFuture[WorkspaceEdit] =\n+    CompletableFutures.computeAsync { _ =>\n+      scribe.warn(\"Rename symbol is not supported.\")\n+      null\n+    }\n+\n+  @JsonRequest(\"textDocument/references\")\n+  def references(\n+      position: ReferenceParams\n+  ): CompletableFuture[util.List[Location]] =\n+    CompletableFutures.computeAsync { _ =>\n+      scribe.warn(\"Find references is not supported.\")"
  },
  {
    "id" : "71fb6aa4-04f3-4186-8df6-0406cf8555b8",
    "prId" : 360,
    "comments" : [
      {
        "id" : "fa6301bb-b5ad-4dda-8328-44c08779688f",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Is this call idepmpotent? Calling shutdown then exit will go through shutdown twice.",
        "createdAt" : "2018-11-30T09:38:26Z",
        "updatedAt" : "2018-11-30T09:46:56Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3ec723b5-c056-41b7-b559-4ce45c1136d9",
        "parentId" : "fa6301bb-b5ad-4dda-8328-44c08779688f",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Yes it is, added a comment to explain why.",
        "createdAt" : "2018-11-30T09:51:22Z",
        "updatedAt" : "2018-11-30T09:51:22Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c441cb0027d2d58f8b05e52df0b3d74440bfd5b2",
    "line" : 119,
    "diffHunk" : "@@ -355,6 +347,9 @@ class MetalsLanguageServer(\n   @JsonNotification(\"exit\")\n   def exit(): Unit = {\n     shutdown()"
  },
  {
    "id" : "934be102-ddc0-41ca-a900-039a9f648efe",
    "prId" : 362,
    "comments" : [
      {
        "id" : "cf2dd4da-0b05-4188-9a47-3ce40018c7f5",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Nitpick: \"Compile error in x\" sounds a lot like a countdown. Maybe some parenthesis could help?",
        "createdAt" : "2018-11-30T09:35:05Z",
        "updatedAt" : "2018-11-30T10:03:13Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1995cee3-94fd-47a6-b473-c695c74e71a7",
        "parentId" : "cf2dd4da-0b05-4188-9a47-3ce40018c7f5",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "It's a good point, what about?\r\n\r\n```\r\nCompiled foo (1.2s)\r\nError in foo (1.2s)\r\n```\r\n\r\nThe twoÂ should be consistent",
        "createdAt" : "2018-11-30T09:41:44Z",
        "updatedAt" : "2018-11-30T10:03:13Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e9e8f83a-15d5-4bb6-be1a-7b1de443547f",
        "parentId" : "cf2dd4da-0b05-4188-9a47-3ce40018c7f5",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "If those two come with optional icons, I'm sold ð",
        "createdAt" : "2018-11-30T09:42:39Z",
        "updatedAt" : "2018-11-30T10:03:13Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "510ddc80-d815-4d3b-bab9-add8c2bdfe86",
        "parentId" : "cf2dd4da-0b05-4188-9a47-3ce40018c7f5",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Realized `Error in foo` might be misleading since the compile error can be in a dependency project.\r\n\r\n```\r\nâ Compiled foo (1.2s)\r\nâ ï¸ Compile error (1.2s)\r\n```\r\n\r\nThe icons will be there :+1:",
        "createdAt" : "2018-11-30T09:49:41Z",
        "updatedAt" : "2018-11-30T10:03:13Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7d3d587b5f10b2781d72b3259394de9b5c871260",
    "line" : null,
    "diffHunk" : "@@ -852,6 +852,12 @@ class MetalsLanguageServer(\n                   s\"${config.icons.check}Compiled$name in $elapsed\"\n                 )\n               case StatusCode.ERROR =>\n+                statusBar.addMessage(\n+                  MetalsStatusParams(\n+                    s\"${config.icons.alert}Compile error in $elapsed\","
  },
  {
    "id" : "fe95a3f5-f758-4a8d-b684-940e2cdebb68",
    "prId" : 397,
    "comments" : [
      {
        "id" : "0c81d9f5-d9f9-4758-b254-f4115d223216",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Emacs is blocked during the `initialize` request so I delayed all the slow steps to run after the `initialized` notification, this greatly helped speed up startup time on Emacs (I haven't hit the same problem in other editors). We will log from now on how long the `initialize` request takes in order to prevent further regressions, it should only take a few milliseconds to wire together a few components.",
        "createdAt" : "2018-12-10T15:42:50Z",
        "updatedAt" : "2018-12-11T10:26:59Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc4a390c004e0da54976f66fea7feb0469ca9621",
    "line" : null,
    "diffHunk" : "@@ -206,7 +205,8 @@ class MetalsLanguageServer(\n         )\n       }\n       new InitializeResult(capabilities)\n-    }.logError(\"initialize\").asJava\n+    }.logError(\"initialize\")\n+    timed(\"initialize\")(result).asJava"
  },
  {
    "id" : "4b9bad4f-1679-49bc-997b-6ad0f44b645a",
    "prId" : 424,
    "comments" : [
      {
        "id" : "0026c4a4-770c-4991-a7b4-3377280974e3",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Looks like this can be a `val` at the top of the class, `buffers` does not depend on `workspace`",
        "createdAt" : "2018-12-18T11:45:22Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f124e59d-d2cf-4df1-8721-dea277e72e6a",
        "parentId" : "0026c4a4-770c-4991-a7b4-3377280974e3",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Yes, I've kept it like this for consistency, but I can use a `val`",
        "createdAt" : "2018-12-18T12:11:10Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "eade48fd8ffbc5572cad7092e373fee0027e4f0f",
    "line" : null,
    "diffHunk" : "@@ -169,6 +170,7 @@ class MetalsLanguageServer(\n       config.icons,\n       statusBar\n     )\n+    documentSymbolProvider = new DocumentSymbolProvider(buffers)"
  },
  {
    "id" : "20c7fc56-cbe6-460e-ae73-9a76c3f78416",
    "prId" : 434,
    "comments" : [
      {
        "id" : "44074092-b7b9-4f47-b34a-84b999cb505e",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "nit: I avoid pattern matching guards without a `_` fallback case. Here we can move the `if/else` into the case body.",
        "createdAt" : "2018-12-22T10:36:44Z",
        "updatedAt" : "2018-12-22T11:34:23Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0c129626-c8e6-4877-9e2d-5d65f12199ca",
        "parentId" : "44074092-b7b9-4f47-b34a-84b999cb505e",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "This was without a `_` fallback even before and it's still exhaustive, but I see your point.\r\n\r\nI've moved the logic inside the `Some(sbt)` case",
        "createdAt" : "2018-12-22T11:35:31Z",
        "updatedAt" : "2018-12-22T11:35:31Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "32c966a7c848779318c8febb601dd161f23470c5",
    "line" : null,
    "diffHunk" : "@@ -634,10 +635,16 @@ class MetalsLanguageServer(\n       case None =>\n         if (!buildTools.isAutoConnectable) {\n           scribe.warn(\n-            s\"Skipping build import for unsupport build tool $buildTools\"\n+            s\"Skipping build import for unsupported build tool $buildTools\"\n           )\n         }\n         Future.successful(BuildChange.None)\n+      case Some(sbt) if !isCompatibleSbtVersion(sbt.version) =>"
  },
  {
    "id" : "30ddf54e-5bee-469a-98cb-c7f186558162",
    "prId" : 469,
    "comments" : [
      {
        "id" : "ea01eb8b-1582-497f-ac45-a30075e50f50",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "This case can be collapsed with the previous one",
        "createdAt" : "2019-01-13T22:06:15Z",
        "updatedAt" : "2019-01-14T10:14:10Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b1158bde-bd9b-4a51-8474-73a5151ce705",
        "parentId" : "ea01eb8b-1582-497f-ac45-a30075e50f50",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Huh, on my computer the code is different ð¤ \r\n```scala\r\n          case EventType.OVERFLOW =>\r\n            referencesProvider.onOverflow(event.path())\r\n```\r\n\r\nStill no diff, gonna push again.",
        "createdAt" : "2019-01-14T10:21:52Z",
        "updatedAt" : "2019-01-14T10:21:52Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2ecaee3a-fa4a-43f5-b712-58d9c5cf7d53",
        "parentId" : "ea01eb8b-1582-497f-ac45-a30075e50f50",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "GitHub updated the diff now, it's a different case that we handle specially.",
        "createdAt" : "2019-01-14T10:22:40Z",
        "updatedAt" : "2019-01-14T10:22:40Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2f3b70a1cd802829c6ddea08ce8fb12a2d374db9",
    "line" : 85,
    "diffHunk" : "@@ -500,6 +509,17 @@ class MetalsLanguageServer(\n     val path = AbsolutePath(event.path())\n     if (!savedFiles.isRecentlyActive(path) && path.isScalaOrJava) {\n       onChange(List(path))\n+    } else if (path.isSemanticdb) {\n+      CompletableFuture.completedFuture {\n+        event.eventType() match {\n+          case EventType.DELETE =>\n+            referencesProvider.onDelete(event.path())\n+          case EventType.CREATE | EventType.MODIFY =>\n+            referencesProvider.onChange(event.path())\n+          case EventType.OVERFLOW =>"
  },
  {
    "id" : "c3bdce2d-c4b0-4f68-852d-71f722c8ebfa",
    "prId" : 534,
    "comments" : [
      {
        "id" : "641aa89f-fed7-475b-bf62-e8d7f01b6fea",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Can we schedule this asynchronously with 2 second delay? Indexing is on a critical path blocking the first compilation request so we should try to delay non-critical computation. It's also fine if this operation fails, the next startup can retry.",
        "createdAt" : "2019-02-24T13:09:20Z",
        "updatedAt" : "2019-02-24T16:00:43Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fe482adc-1195-444d-a220-2171d3e6cb8a",
        "parentId" : "641aa89f-fed7-475b-bf62-e8d7f01b6fea",
        "author" : {
          "login" : "mudsam",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/10428653?v=4"
        },
        "body" : "Change it do delete asynchronously with 2 second delay.",
        "createdAt" : "2019-02-24T16:01:43Z",
        "updatedAt" : "2019-02-24T16:01:43Z",
        "lastEditedBy" : {
          "login" : "mudsam",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/10428653?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "68a865709d6bc7d432ff4ffaa2fe1eac07d7409a",
    "line" : null,
    "diffHunk" : "@@ -1205,6 +1211,31 @@ class MetalsLanguageServer(\n           scribe.error(s\"error processing $sourceUri\", e)\n       }\n     }\n+    // Remove unused toplevel symbols from cache\n+    tables.jarSymbols.deleteNotUsedTopLevels(usedJars.toArray)"
  },
  {
    "id" : "68b68c26-5334-449b-9842-fbeffcdc662b",
    "prId" : 534,
    "comments" : [
      {
        "id" : "d4d66278-8658-4b6a-bb85-b4704204e956",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "minor, but you could use a SAM and this becomes:\r\n\r\n```scala\r\nsh.schedule(\r\n  () => tables.jarSymbols.deleteNotUsedTopLevels(usedJars.toArray),\r\n  2,\r\n  TimeUnit.SECONDS\r\n)\r\n```",
        "createdAt" : "2019-02-24T16:35:57Z",
        "updatedAt" : "2019-02-24T16:35:58Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c8fd2524-4107-4bcb-b67b-c6a051f3b0f8",
        "parentId" : "d4d66278-8658-4b6a-bb85-b4704204e956",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Some overloads on `ExecutorService` don't work with SAM, I can't remember which exact one. I don't mind `new Runnable { ... }`",
        "createdAt" : "2019-02-24T16:38:36Z",
        "updatedAt" : "2019-02-24T16:38:37Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "68a865709d6bc7d432ff4ffaa2fe1eac07d7409a",
    "line" : 76,
    "diffHunk" : "@@ -1211,8 +1211,16 @@ class MetalsLanguageServer(\n           scribe.error(s\"error processing $sourceUri\", e)\n       }\n     }\n-    // Remove unused toplevel symbols from cache\n-    tables.jarSymbols.deleteNotUsedTopLevels(usedJars.toArray)\n+    // Schedule removal of unused toplevel symbols from cache\n+    sh.schedule(\n+      new Runnable {\n+        override def run(): Unit = {\n+          tables.jarSymbols.deleteNotUsedTopLevels(usedJars.toArray)\n+        }\n+      },\n+      2,\n+      TimeUnit.SECONDS"
  },
  {
    "id" : "14c9b238-4645-4897-89cb-4034d6b2bbba",
    "prId" : 632,
    "comments" : [
      {
        "id" : "0178bf96-b536-4ca8-9320-71f41459c340",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "What happens if the capabilities or text document are null?",
        "createdAt" : "2019-04-08T14:51:35Z",
        "updatedAt" : "2019-04-10T09:48:55Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "79793f51fa23f5e83e6e9dc8e633ae708eeb17a1",
    "line" : null,
    "diffHunk" : "@@ -292,6 +293,10 @@ class MetalsLanguageServer(\n       },\n       interactiveSemanticdbs.toFileOnDisk\n     )\n+    foldingRangeProvider = FoldingRangeProvider(\n+      trees,\n+      params.getCapabilities.getTextDocument.getFoldingRange"
  },
  {
    "id" : "e416d32f-6659-4894-9b74-0507e246e174",
    "prId" : 694,
    "comments" : [
      {
        "id" : "c7a268cc-a838-4afb-9524-b5a9b2492982",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "I find it easier to reason about an `if` when the condition is not negated",
        "createdAt" : "2019-04-25T14:47:10Z",
        "updatedAt" : "2019-05-07T08:42:52Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "95e8d18af9437cb5a757194bc83a227e9c0b8d79",
    "line" : null,
    "diffHunk" : "@@ -960,52 +959,46 @@ class MetalsLanguageServer(\n   private def slowConnectToBuildServer(\n       forceImport: Boolean\n   ): Future[BuildChange] = {\n-    buildTools.asSbt match {\n-      case None =>\n-        if (!buildTools.isAutoConnectable) {\n-          warnings.noBuildTool()\n-        }\n-        Future.successful(BuildChange.None)\n-      case Some(sbt) =>\n-        if (!isCompatibleSbtVersion(sbt.version)) {\n+\n+    buildTools.loadSupported match {\n+      case Some(buildTool) =>\n+        if (!BuildTool.isCompatibleVersion("
  },
  {
    "id" : "dd60887f-6735-4333-a789-cb436f1a217b",
    "prId" : 709,
    "comments" : [
      {
        "id" : "9c578c24-ee1e-4dff-89f4-bb352fb32e57",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "We should also unpause/pause the cascade compile queue.",
        "createdAt" : "2019-05-06T10:32:06Z",
        "updatedAt" : "2019-05-31T13:37:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bb997918-07ea-4918-a054-5cecfc4c9c4b",
        "parentId" : "9c578c24-ee1e-4dff-89f4-bb352fb32e57",
        "author" : {
          "login" : "agajek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/12413667?u=65dfb6ffae1005eb93db585e8ebfa5d70cf07b21&v=4"
        },
        "body" : "And I've also added pausing on changed sbt build files. ",
        "createdAt" : "2019-05-16T06:34:41Z",
        "updatedAt" : "2019-05-31T13:37:41Z",
        "lastEditedBy" : {
          "login" : "agajek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/12413667?u=65dfb6ffae1005eb93db585e8ebfa5d70cf07b21&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e996d0d719a59efbb86d5727fb306a454ea1623b",
    "line" : null,
    "diffHunk" : "@@ -573,6 +573,17 @@ class MetalsLanguageServer(\n     }\n   }\n \n+  @JsonNotification(\"metals/windowStateDidChange\")\n+  def windowStateDidChane(params: WindowStateDidChangeParams): Unit = {\n+    CompletableFuture.completedFuture {\n+      if(params.focused) {\n+        compileSourceFiles.unpause"
  },
  {
    "id" : "a8e998e7-4b6e-4e2c-bb86-80959f72d4e6",
    "prId" : 709,
    "comments" : [
      {
        "id" : "f6e6cfc3-b06e-4277-9e13-46f1cf9c4585",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Remove this line",
        "createdAt" : "2019-05-06T10:35:26Z",
        "updatedAt" : "2019-05-31T13:37:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bb558725-114e-47dd-8bed-66c2c8bb646a",
        "parentId" : "f6e6cfc3-b06e-4277-9e13-46f1cf9c4585",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "by the way, do we have `-Ywarn-value-discard` on? This would generate a warning",
        "createdAt" : "2019-05-06T10:48:23Z",
        "updatedAt" : "2019-05-31T13:37:41Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a90fa936-ab7b-4a42-95f4-2975d0aa32d7",
        "parentId" : "f6e6cfc3-b06e-4277-9e13-46f1cf9c4585",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "we don't, that setting generates a lot of noise in my experience (especially in imperative code which is all over the place in metals).",
        "createdAt" : "2019-05-06T10:57:05Z",
        "updatedAt" : "2019-05-31T13:37:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ada432cd-4843-447e-ab18-0082003564d7",
        "parentId" : "f6e6cfc3-b06e-4277-9e13-46f1cf9c4585",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "ah right, probably not the best idea on Metals (although Scala 2.13 will make the warning a bit nicer to deal with, allowing ascriptions to Unit to remove it)",
        "createdAt" : "2019-05-06T11:08:08Z",
        "updatedAt" : "2019-05-31T13:37:41Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1b9b63b9-3e91-4b15-b0fe-4fa04d47e4f7",
        "parentId" : "f6e6cfc3-b06e-4277-9e13-46f1cf9c4585",
        "author" : {
          "login" : "agajek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/12413667?u=65dfb6ffae1005eb93db585e8ebfa5d70cf07b21&v=4"
        },
        "body" : "Done. Sorry. ",
        "createdAt" : "2019-05-16T06:34:52Z",
        "updatedAt" : "2019-05-31T13:37:41Z",
        "lastEditedBy" : {
          "login" : "agajek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/12413667?u=65dfb6ffae1005eb93db585e8ebfa5d70cf07b21&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e996d0d719a59efbb86d5727fb306a454ea1623b",
    "line" : null,
    "diffHunk" : "@@ -573,6 +573,17 @@ class MetalsLanguageServer(\n     }\n   }\n \n+  @JsonNotification(\"metals/windowStateDidChange\")\n+  def windowStateDidChane(params: WindowStateDidChangeParams): Unit = {\n+    CompletableFuture.completedFuture {"
  },
  {
    "id" : "db7437e1-889d-416a-bc3a-40826aab7e64",
    "prId" : 709,
    "comments" : [
      {
        "id" : "e3dd7502-48f6-4797-a400-5c91d8f9b134",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Can we keep these queues in a list so that it's easier to add new ones?\r\n\r\n```scala\r\nval batchedFunctions = List[BatchedFunction[_, _]](...)\r\n```",
        "createdAt" : "2019-05-16T11:47:04Z",
        "updatedAt" : "2019-05-31T13:37:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3cf9cacf-ac31-4ccf-9aba-34be027d628c",
        "parentId" : "e3dd7502-48f6-4797-a400-5c91d8f9b134",
        "author" : {
          "login" : "agajek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/12413667?u=65dfb6ffae1005eb93db585e8ebfa5d70cf07b21&v=4"
        },
        "body" : "Yep, I was also thinking about that as contents of this if have grown.",
        "createdAt" : "2019-05-16T15:48:47Z",
        "updatedAt" : "2019-05-31T13:37:41Z",
        "lastEditedBy" : {
          "login" : "agajek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/12413667?u=65dfb6ffae1005eb93db585e8ebfa5d70cf07b21&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e996d0d719a59efbb86d5727fb306a454ea1623b",
    "line" : null,
    "diffHunk" : "@@ -573,6 +573,21 @@ class MetalsLanguageServer(\n     }\n   }\n \n+  @JsonNotification(\"metals/windowStateDidChange\")\n+  def windowStateDidChane(params: WindowStateDidChangeParams): Unit = {\n+    if (params.focused) {\n+      compileSourceFiles.restart"
  },
  {
    "id" : "9ac69db6-360e-49cd-b152-4f5fe60e1615",
    "prId" : 709,
    "comments" : [
      {
        "id" : "c887f865-b844-4aef-8bbc-d1650f648c35",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "> windowStateDidChange",
        "createdAt" : "2019-05-16T11:48:32Z",
        "updatedAt" : "2019-05-31T13:37:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e996d0d719a59efbb86d5727fb306a454ea1623b",
    "line" : null,
    "diffHunk" : "@@ -573,6 +573,21 @@ class MetalsLanguageServer(\n     }\n   }\n \n+  @JsonNotification(\"metals/windowStateDidChange\")\n+  def windowStateDidChane(params: WindowStateDidChangeParams): Unit = {"
  },
  {
    "id" : "9e9e2f94-99b9-4002-8a1c-26b8150b29bc",
    "prId" : 709,
    "comments" : [
      {
        "id" : "5ed3a599-2017-432d-b9ae-4998845f590b",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Could you move this field up, so it won't get lost among all those methods?\r\n\r\n",
        "createdAt" : "2019-05-29T19:20:21Z",
        "updatedAt" : "2019-05-31T13:37:41Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "757af6e9-c283-4460-9229-cf5fa89846f9",
        "parentId" : "5ed3a599-2017-432d-b9ae-4998845f590b",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Or even better, why not do:\r\n```scala\r\ndef pauseComputations(): Unit = {\r\n  onBuildChanged.pause()\r\n  parseTrees.pause()\r\n  compilations.pause() // this one you will have to do after rebasing. \r\n}\r\n```",
        "createdAt" : "2019-05-29T19:21:32Z",
        "updatedAt" : "2019-05-31T13:37:41Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e996d0d719a59efbb86d5727fb306a454ea1623b",
    "line" : null,
    "diffHunk" : "@@ -1452,6 +1446,8 @@ class MetalsLanguageServer(\n     }\n   }\n \n+  private val batchedFunctions = List(onBuildChanged, cascadeCompileSourceFiles, compileSourceFiles, parseTrees)"
  },
  {
    "id" : "8e3fe819-a4ad-4ea0-a5a9-bf6d618585ac",
    "prId" : 709,
    "comments" : [
      {
        "id" : "2bdca29c-154e-465a-bb02-597560950059",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "`SyntaxErrorSlowSuite` had become flaky until we merged the `parseTrees` and `onChange` futures here",
        "createdAt" : "2019-05-31T13:41:04Z",
        "updatedAt" : "2019-05-31T13:43:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e996d0d719a59efbb86d5727fb306a454ea1623b",
    "line" : 74,
    "diffHunk" : "@@ -630,8 +650,10 @@ class MetalsLanguageServer(\n     savedFiles.add(path)\n     // read file from disk, we only remove files from buffers on didClose.\n     buffers.put(path, path.toInput.text)\n-    trees.didChange(path)\n-    onChange(List(path))\n+    Future\n+      .sequence(List(parseTrees(path), onChange(List(path))))"
  },
  {
    "id" : "e302cb0f-db56-4bc5-81ee-40ff7abe4d51",
    "prId" : 729,
    "comments" : [
      {
        "id" : "76ba24da-455a-48b7-b5b6-77ab1a7f814f",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "We already have tests to see that diagnostics are cleared for deleted files after a `didSave` notification. I manually verified that this works as soon as the file is deleted without a `didSave` notification. However, I don't think we can write a non-flaky test case to stress this situation since file watchers are quite unreliable between operating systems.",
        "createdAt" : "2019-05-24T13:08:22Z",
        "updatedAt" : "2019-05-24T13:08:22Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9d1850b39031efae957be62d433b6c3d1aea8e09",
    "line" : 7,
    "diffHunk" : "@@ -669,7 +669,11 @@ class MetalsLanguageServer(\n       event: DirectoryChangeEvent\n   ): CompletableFuture[Unit] = {\n     val path = AbsolutePath(event.path())\n-    if (!savedFiles.isRecentlyActive(path) && path.isScalaOrJava) {\n+    val isScalaOrJava = path.isScalaOrJava\n+    if (isScalaOrJava && event.eventType() == EventType.DELETE) {\n+      diagnostics.didDelete(path)"
  },
  {
    "id" : "88a1beed-1cf7-4415-8204-c561768770fa",
    "prId" : 775,
    "comments" : [
      {
        "id" : "b58c4bed-27ff-4db4-b74a-e7ebbf8726e8",
        "parentId" : null,
        "author" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Just moved the implementation into `referencesResult` that returns `ReferencesResult` instead of `CompletableFuture[util.List[Location]]`.",
        "createdAt" : "2019-06-18T10:21:59Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "00f27c62-6f3a-47d1-8fe7-eca37c760016",
        "parentId" : "b58c4bed-27ff-4db4-b74a-e7ebbf8726e8",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Good idea",
        "createdAt" : "2019-06-18T12:52:02Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4cfc3a51daeb457a8f1e26bea4196104de517380",
    "line" : 28,
    "diffHunk" : "@@ -820,21 +820,7 @@ class MetalsLanguageServer(\n       params: ReferenceParams\n   ): CompletableFuture[util.List[Location]] =\n     CancelTokens { _ =>\n-      val timer = new Timer(time)\n-      val result = referencesResult(params)\n-      if (config.statistics.isReferences) {\n-        if (result.symbol.isEmpty) {\n-          scribe.info(s\"time: found 0 references in $timer\")\n-        } else {\n-          scribe.info(\n-            s\"time: found ${result.locations.length} references to symbol '${result.symbol}' in $timer\"\n-          )\n-        }\n-      }\n-      if (result.symbol.nonEmpty) {\n-        compileAndLookForNewReferences(params, result)\n-      }\n-      result.locations.asJava\n+      referencesResult(params).locations.asJava"
  },
  {
    "id" : "d95ae766-1121-44af-b342-61dd33f1dfd8",
    "prId" : 775,
    "comments" : [
      {
        "id" : "79fbea67-c2de-4cae-b8ee-07f000562e9a",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "typo\r\n```suggestion\r\n            val referenceContext = new ReferenceContext(false)\r\n```",
        "createdAt" : "2019-06-18T10:25:14Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4cfc3a51daeb457a8f1e26bea4196104de517380",
    "line" : 95,
    "diffHunk" : "@@ -1420,6 +1421,58 @@ class MetalsLanguageServer(\n     }\n   }\n \n+  /**\n+   * Returns the the definition location or reference locations of a symbol\n+   * at a given text document position.\n+   * If the symbol represents the definition itself, this method returns\n+   * the reference locations, otherwise this returns definition location.\n+   * https://github.com/scalameta/metals/issues/755\n+   */\n+  def definitionOrReferences(\n+      position: TextDocumentPositionParams,\n+      token: CancelToken = EmptyCancelToken\n+  ): Future[DefinitionResult] = {\n+    val source = position.getTextDocument.getUri.toAbsolutePath\n+    if (source.toLanguage.isScala) {\n+      (for {\n+        doc <- semanticdbs.textDocument(source).documentIncludingStale\n+        positionOccurrence = definitionProvider.positionOccurrence(\n+          source,\n+          position,\n+          doc\n+        )\n+        occ <- positionOccurrence.occurrence\n+      } yield occ) match {\n+        case Some(occ) =>\n+          if (occ.role.isDefinition) {\n+            val referecneContext = new ReferenceContext(false)"
  },
  {
    "id" : "f6565374-ef4f-4987-84e5-c5d175894dfc",
    "prId" : 775,
    "comments" : [
      {
        "id" : "0fcbb3ab-50a4-4a07-8c7f-30a3db21bcfb",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "```suggestion\r\n            val refParams = new ReferenceParams(referenceContext)\r\n```",
        "createdAt" : "2019-06-18T10:25:29Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4cfc3a51daeb457a8f1e26bea4196104de517380",
    "line" : 96,
    "diffHunk" : "@@ -1420,6 +1421,58 @@ class MetalsLanguageServer(\n     }\n   }\n \n+  /**\n+   * Returns the the definition location or reference locations of a symbol\n+   * at a given text document position.\n+   * If the symbol represents the definition itself, this method returns\n+   * the reference locations, otherwise this returns definition location.\n+   * https://github.com/scalameta/metals/issues/755\n+   */\n+  def definitionOrReferences(\n+      position: TextDocumentPositionParams,\n+      token: CancelToken = EmptyCancelToken\n+  ): Future[DefinitionResult] = {\n+    val source = position.getTextDocument.getUri.toAbsolutePath\n+    if (source.toLanguage.isScala) {\n+      (for {\n+        doc <- semanticdbs.textDocument(source).documentIncludingStale\n+        positionOccurrence = definitionProvider.positionOccurrence(\n+          source,\n+          position,\n+          doc\n+        )\n+        occ <- positionOccurrence.occurrence\n+      } yield occ) match {\n+        case Some(occ) =>\n+          if (occ.role.isDefinition) {\n+            val referecneContext = new ReferenceContext(false)\n+            val refParams = new ReferenceParams(referecneContext)"
  },
  {
    "id" : "482b42d1-52f7-430c-b4c1-afc464ba0bb3",
    "prId" : 775,
    "comments" : [
      {
        "id" : "4cb508a2-2d02-41e3-a6a8-bbbe452caf94",
        "parentId" : null,
        "author" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Returns `symbol` in addition to the `locations` because `TestingServer` requires symbol information.\r\nWrapping those by `DefinitionResult` for structuring the return value, but what I actually want is something like [`Definitionresult | ReferencesResult`](https://dotty.epfl.ch/docs/reference/new-types/union-types.html) haha.",
        "createdAt" : "2019-06-18T10:30:19Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bfa9c83d-66ee-46bc-b21c-771cc3c6dc70",
        "parentId" : "4cb508a2-2d02-41e3-a6a8-bbbe452caf94",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "`Either[A, B]` should work OK for unions with two types",
        "createdAt" : "2019-06-18T12:55:26Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e18cbe8f-85af-4990-bf46-9b50810c658e",
        "parentId" : "4cb508a2-2d02-41e3-a6a8-bbbe452caf94",
        "author" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "That's right! But this time, let me leave the return value's type `Future[DefinitionResult]` because nesting `Either` inside `Future` makes things complicated and feels like to use something like `EitherT` ...",
        "createdAt" : "2019-06-18T16:19:23Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4cfc3a51daeb457a8f1e26bea4196104de517380",
    "line" : 113,
    "diffHunk" : "@@ -1420,6 +1421,58 @@ class MetalsLanguageServer(\n     }\n   }\n \n+  /**\n+   * Returns the the definition location or reference locations of a symbol\n+   * at a given text document position.\n+   * If the symbol represents the definition itself, this method returns\n+   * the reference locations, otherwise this returns definition location.\n+   * https://github.com/scalameta/metals/issues/755\n+   */\n+  def definitionOrReferences(\n+      position: TextDocumentPositionParams,\n+      token: CancelToken = EmptyCancelToken\n+  ): Future[DefinitionResult] = {\n+    val source = position.getTextDocument.getUri.toAbsolutePath\n+    if (source.toLanguage.isScala) {\n+      (for {\n+        doc <- semanticdbs.textDocument(source).documentIncludingStale\n+        positionOccurrence = definitionProvider.positionOccurrence(\n+          source,\n+          position,\n+          doc\n+        )\n+        occ <- positionOccurrence.occurrence\n+      } yield occ) match {\n+        case Some(occ) =>\n+          if (occ.role.isDefinition) {\n+            val referecneContext = new ReferenceContext(false)\n+            val refParams = new ReferenceParams(referecneContext)\n+            refParams.setTextDocument(position.getTextDocument())\n+            refParams.setPosition(position.getPosition())\n+            val result = referencesResult(refParams)\n+            Future.successful(\n+              DefinitionResult(\n+                locations = result.locations.asJava,\n+                symbol = result.symbol,\n+                definition = None,\n+                semanticdb = None\n+              )"
  },
  {
    "id" : "5e3edd95-ee68-4516-9ba3-9a7a5edc5cc3",
    "prId" : 775,
    "comments" : [
      {
        "id" : "96cf7ad6-76c0-4c01-b7a5-a00dbd17655b",
        "parentId" : null,
        "author" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Call `definitionResult` even if it failed to retrieve the symbol information from semanticdb because `DefinitionProvider#definition` [fallback to finding definitions from a presentation compiler](https://github.com/scalameta/metals/blob/50912543e057d958e4a336a6028f74ebca71271e/metals/src/main/scala/scala/meta/internal/metals/DefinitionProvider.scala#L62) if no definition locations found from semanticdb.",
        "createdAt" : "2019-06-18T10:32:53Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "22ed15eb-7690-4524-bd80-a9444f190887",
        "parentId" : "96cf7ad6-76c0-4c01-b7a5-a00dbd17655b",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Sounds reasonable :+1:",
        "createdAt" : "2019-06-18T12:55:45Z",
        "updatedAt" : "2019-06-18T17:58:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4cfc3a51daeb457a8f1e26bea4196104de517380",
    "line" : 122,
    "diffHunk" : "@@ -1420,6 +1421,58 @@ class MetalsLanguageServer(\n     }\n   }\n \n+  /**\n+   * Returns the the definition location or reference locations of a symbol\n+   * at a given text document position.\n+   * If the symbol represents the definition itself, this method returns\n+   * the reference locations, otherwise this returns definition location.\n+   * https://github.com/scalameta/metals/issues/755\n+   */\n+  def definitionOrReferences(\n+      position: TextDocumentPositionParams,\n+      token: CancelToken = EmptyCancelToken\n+  ): Future[DefinitionResult] = {\n+    val source = position.getTextDocument.getUri.toAbsolutePath\n+    if (source.toLanguage.isScala) {\n+      (for {\n+        doc <- semanticdbs.textDocument(source).documentIncludingStale\n+        positionOccurrence = definitionProvider.positionOccurrence(\n+          source,\n+          position,\n+          doc\n+        )\n+        occ <- positionOccurrence.occurrence\n+      } yield occ) match {\n+        case Some(occ) =>\n+          if (occ.role.isDefinition) {\n+            val referecneContext = new ReferenceContext(false)\n+            val refParams = new ReferenceParams(referecneContext)\n+            refParams.setTextDocument(position.getTextDocument())\n+            refParams.setPosition(position.getPosition())\n+            val result = referencesResult(refParams)\n+            Future.successful(\n+              DefinitionResult(\n+                locations = result.locations.asJava,\n+                symbol = result.symbol,\n+                definition = None,\n+                semanticdb = None\n+              )\n+            )\n+          } else {\n+            definitionResult(position, token)\n+          }\n+        case None =>\n+          warnings.noSemanticdb(source)\n+          // Even if it failed to retrieve the symbol occurrence from semanticdb,\n+          // try to find its definitions from presentation compiler.\n+          definitionResult(position, token)"
  },
  {
    "id" : "3dc6854a-2b9a-434c-bf2c-1a91d034fcf1",
    "prId" : 853,
    "comments" : [
      {
        "id" : "be4b367c-2b42-4240-992b-4c2c8e351620",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "or we could do:\r\n```scala\r\nval semanticDBDoc = semanticdbs.textDocument(source).documentIncludingStale\r\nif(semanticDBDoc.isEmpty){\r\n  warnings.noSemanticdb(source)\r\n} else {\r\n  val occurrence = for { ...} yield occ\r\n  occurrence match {\r\n    case None =>\r\n      // ignore\r\n    case Some(occ) =>\r\n      (...)\r\n  }\r\n}\r\n```\r\nwould probably make the logic simpler (no need to remember about semanticDBDoc being emoty or not when working on occurrences).\r\n\r\nor even something like that:\r\n\r\n```scala\r\n\r\nval semanticDBDoc = semanticdbs.textDocument(source).documentIncludingStale \r\nsemanticDBDoc match {\r\n  case None => warnings.noSemanticdb(source)\r\n  case Some(doc) =>\r\n    val occurrence = definitionProvider.positionOccurrence(source, position, doc).occurrence \r\n    occurrence.foreach { occ =>\r\n        (...)\r\n    }\r\n```",
        "createdAt" : "2019-08-06T06:02:20Z",
        "updatedAt" : "2019-08-06T06:03:27Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "33b4b349-c1bd-4798-9d40-7e0c3ff8a85e",
        "parentId" : "be4b367c-2b42-4240-992b-4c2c8e351620",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I'd rather not change too much now.",
        "createdAt" : "2019-08-06T08:40:43Z",
        "updatedAt" : "2019-08-06T08:40:44Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5f941ddc821a1d4f1f99221abb996858261aa0e5",
    "line" : 17,
    "diffHunk" : "@@ -1583,7 +1585,9 @@ class MetalsLanguageServer(\n             definitionResult(position, token)\n           }\n         case None =>\n-          warnings.noSemanticdb(source)\n+          if (semanticDBDoc.isEmpty) {"
  },
  {
    "id" : "4ddb3928-b33e-49fa-a4f4-720e4e272dd5",
    "prId" : 855,
    "comments" : [
      {
        "id" : "60002ba7-fce6-4d00-ac2e-205d5e1716b1",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "why not `List(sourceItem)` ? would also be treated as an iterable and would be much simpler. I was kind of expecting this sources to be modified down the road\r\n\r\n```scala\r\n  source <- if(sourceItem.isDirectory) ListFiles(sourceIterm) else List(sourceItem)\r\n```",
        "createdAt" : "2019-08-07T06:31:20Z",
        "updatedAt" : "2019-08-07T07:33:22Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cfc7c2736fc5bb933eebff3ee83d32552074e005",
    "line" : 9,
    "diffHunk" : "@@ -1277,15 +1277,18 @@ class MetalsLanguageServer(\n \n   private def indexWorkspaceSources(): Unit = {\n     for {\n-      (sourceDirectory, targets) <- buildTargets.sourceDirectoriesToBuildTargets\n-      if sourceDirectory.isDirectory\n-      source <- ListFiles(sourceDirectory)\n+      (sourceItem, targets) <- buildTargets.sourceItemsToBuildTargets\n+      sources = if (sourceItem.isDirectory) ListFiles(sourceItem)\n+      else ArrayBuffer(sourceItem)"
  },
  {
    "id" : "859ac6b8-ac42-4237-8bea-f2f01eceef66",
    "prId" : 857,
    "comments" : [
      {
        "id" : "31bed832-cf59-46b2-99b2-78496dfe0e3a",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "can we make `ListFiles(source)` return a one element list if the source is a file?",
        "createdAt" : "2019-08-08T06:17:53Z",
        "updatedAt" : "2019-08-08T16:25:02Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4bf235b5-87c3-4ca4-9e72-b8903a65732b",
        "parentId" : "31bed832-cf59-46b2-99b2-78496dfe0e3a",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-08-08T12:31:10Z",
        "updatedAt" : "2019-08-08T16:25:02Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0dd3eede29c603619dd79001b736615bb5743729",
    "line" : null,
    "diffHunk" : "@@ -1277,15 +1277,20 @@ class MetalsLanguageServer(\n \n   private def indexWorkspaceSources(): Unit = {\n     for {\n-      (sourceDirectory, targets) <- buildTargets.sourceDirectoriesToBuildTargets\n-      if sourceDirectory.isDirectory\n-      source <- ListFiles(sourceDirectory)\n+      (sourceItem, targets) <- buildTargets.sourceItemsToBuildTargets\n+      sources = if (sourceItem.isDirectory) ListFiles(sourceItem)"
  },
  {
    "id" : "ceb3f2b9-b754-4a7d-867d-2ac8d5d64dec",
    "prId" : 857,
    "comments" : [
      {
        "id" : "fe801fad-42a8-4604-a1cb-93dc1174e755",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "What do you think about:\r\n\r\n```scala\r\nif(sourceItem.isDirectory) {\r\n  indexSourceFile(source, Some(sourceItem))\r\n} else if (source.exists) { //here should be a comment what does it mean when a source exists but a sourceItem is not a directory\r\n  indexSourceFile(source, None)\r\n}\r\n```\r\n\r\nsame amount of lines but at the same time more expressive",
        "createdAt" : "2019-08-08T06:22:55Z",
        "updatedAt" : "2019-08-08T16:25:02Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0dd3eede29c603619dd79001b736615bb5743729",
    "line" : null,
    "diffHunk" : "@@ -1277,15 +1277,20 @@ class MetalsLanguageServer(\n \n   private def indexWorkspaceSources(): Unit = {\n     for {\n-      (sourceDirectory, targets) <- buildTargets.sourceDirectoriesToBuildTargets\n-      if sourceDirectory.isDirectory\n-      source <- ListFiles(sourceDirectory)\n+      (sourceItem, targets) <- buildTargets.sourceItemsToBuildTargets\n+      sources = if (sourceItem.isDirectory) ListFiles(sourceItem)\n+      else List(sourceItem)\n+      source <- sources\n       if source.isScalaOrJava\n     } {\n       targets.asScala.foreach { target =>\n         buildTargets.linkSourceFile(target, source)\n       }\n-      indexSourceFile(source, Some(sourceDirectory))\n+      val sourceDirectory ="
  },
  {
    "id" : "8643c72c-d16a-4572-b8b0-10df135f5840",
    "prId" : 862,
    "comments" : [
      {
        "id" : "10c43641-172b-4d6d-89f6-f93b428dde1a",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We could move this to a PackageProvider class, it could be used in more places and provide us with result being the needed Edit.\r\n\r\nIt would be very useful for Completions too.\r\n\r\n",
        "createdAt" : "2019-08-09T14:18:21Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "909e79755bb7dc96fad63232599fe13092152914",
    "line" : null,
    "diffHunk" : "@@ -716,6 +722,47 @@ class MetalsLanguageServer(\n     onChange(paths).asJava\n   }\n \n+  private def insertPackage(path: AbsolutePath): Unit = {"
  },
  {
    "id" : "e99e7020-548e-479c-86e1-2c2c0cb1d43f",
    "prId" : 862,
    "comments" : [
      {
        "id" : "7c0d1c1b-d14d-486b-8b62-3f1d9bc1c7cf",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "packageName -> packageEditInput ? package name is actually `package` + the name",
        "createdAt" : "2019-08-09T14:20:37Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "58055a94-9507-4703-974b-74cb60ecce51",
        "parentId" : "7c0d1c1b-d14d-486b-8b62-3f1d9bc1c7cf",
        "author" : {
          "login" : "tdudzik",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/6402694?v=4"
        },
        "body" : "Maybe I can move adding `package` keyword to `createWorkspaceEdit` function?\r\n\r\n```Scala\r\nval textEdit = new TextEdit(\r\n    new Range(new Position(0, 0), new Position(0, 0)),\r\n    s\"package $packageName\\n\\n\"\r\n)\r\n```\r\nIt would make more sense imo.",
        "createdAt" : "2019-08-12T09:15:39Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "tdudzik",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/6402694?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "909e79755bb7dc96fad63232599fe13092152914",
    "line" : null,
    "diffHunk" : "@@ -716,6 +722,47 @@ class MetalsLanguageServer(\n     onChange(paths).asJava\n   }\n \n+  private def insertPackage(path: AbsolutePath): Unit = {\n+    def createPackageName(path: AbsolutePath): Option[String] = {\n+      if (path.toFile.length() == 0) {\n+        val sourceDirectory = buildTargets.inverseSourceDirectory(path)\n+        val relativeDirectory = sourceDirectory\n+          .map(path.toRelative)\n+          .flatMap(relativePath => Option(relativePath.toFile.getParentFile))\n+          .map(_.getPath)\n+        val packageName = relativeDirectory.map(_.replace(\"/\", \".\"))\n+\n+        packageName.map(\"package \" + _)\n+      } else {\n+        None\n+      }\n+    }\n+\n+    def createPackageWorkspaceEdit(packageName: String): WorkspaceEdit = {"
  },
  {
    "id" : "8a78034f-9961-4767-b0c3-08560209b6d0",
    "prId" : 862,
    "comments" : [
      {
        "id" : "069b9770-b145-4501-8ca2-55fb512fb275",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I would loose the newlines - they don't add much to readability",
        "createdAt" : "2019-08-09T14:21:16Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cd2e82b7-fabd-4d93-aebf-bb9bdbf9c40d",
        "parentId" : "069b9770-b145-4501-8ca2-55fb512fb275",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Are these the newlines after the package name? My expectation for this would be to have the cursor in this position after the package insertion:\r\n\r\n```scala\r\npackage com.foo.bar\r\n\r\n<CURSOR>\r\n```",
        "createdAt" : "2019-08-09T15:39:53Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "591cb969-d3d4-497d-82c0-2ad0d07204f7",
        "parentId" : "069b9770-b145-4501-8ca2-55fb512fb275",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "what about:\r\n```scala\r\nval textEdits = Collections.singletonList(textEdit)\r\nval changes = Collections.singletonMap(path.toString, textEdits)\r\nnew WorkspaceEdit(changes)\r\n```\r\n\r\nor going through Scala collections:\r\n```scala\r\nval textEdits = List(textEdit).asJava\r\nval changes = Map(path.toString, textEdits).asJava\r\nnew WorkspaceEdit(changes)\r\n```",
        "createdAt" : "2019-08-09T19:22:26Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "909e79755bb7dc96fad63232599fe13092152914",
    "line" : null,
    "diffHunk" : "@@ -716,6 +722,47 @@ class MetalsLanguageServer(\n     onChange(paths).asJava\n   }\n \n+  private def insertPackage(path: AbsolutePath): Unit = {\n+    def createPackageName(path: AbsolutePath): Option[String] = {\n+      if (path.toFile.length() == 0) {\n+        val sourceDirectory = buildTargets.inverseSourceDirectory(path)\n+        val relativeDirectory = sourceDirectory\n+          .map(path.toRelative)\n+          .flatMap(relativePath => Option(relativePath.toFile.getParentFile))\n+          .map(_.getPath)\n+        val packageName = relativeDirectory.map(_.replace(\"/\", \".\"))\n+\n+        packageName.map(\"package \" + _)\n+      } else {\n+        None\n+      }\n+    }\n+\n+    def createPackageWorkspaceEdit(packageName: String): WorkspaceEdit = {\n+      val textEdit = new TextEdit(\n+        new Range(new Position(0, 0), new Position(0, 0)),\n+        s\"$packageName\\n\"\n+      )\n+"
  },
  {
    "id" : "7b245eed-8ca4-45c6-bdd0-9e2b6a53da3f",
    "prId" : 862,
    "comments" : [
      {
        "id" : "566a74f7-edeb-4460-9470-58c3bcca4727",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I would rather add something like:\r\n```\r\nWe cannot apply the workspace edit before the file is open, so we need to wait until we receive a proper request from the client.\r\n```\r\nRace condition is too general.",
        "createdAt" : "2019-08-09T14:23:24Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "909e79755bb7dc96fad63232599fe13092152914",
    "line" : null,
    "diffHunk" : "@@ -728,6 +775,10 @@ class MetalsLanguageServer(\n       event.eventType() match {\n         case EventType.CREATE =>\n           buildTargets.onCreate(path)\n+\n+          // Modifying the file in this place using applyEdit request can cause race condition"
  },
  {
    "id" : "0b5975b5-03f0-4079-ade9-e0c1ce00cbd6",
    "prId" : 862,
    "comments" : [
      {
        "id" : "fa1bc855-378c-4842-ad05-d3049d1639a2",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I don't find this particularly readable, I think it would be clearer to split this into two statements.",
        "createdAt" : "2019-08-09T15:37:36Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "69a257af-9bf6-4ac8-a115-0c9ad32a3ecf",
        "parentId" : "fa1bc855-378c-4842-ad05-d3049d1639a2",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "That's an atomic method on the ConcurrentSet, so I think we would be safer this way. Might be overdoing it though.",
        "createdAt" : "2019-08-09T15:47:37Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2fc09cdd-f5f0-4fb6-bbcc-fe35664dfeda",
        "parentId" : "fa1bc855-378c-4842-ad05-d3049d1639a2",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "but we can easily extract a variable to make it more readable like:\r\n```scala\r\nval wasCreated = createdFiles.remove(path)\r\nif(wasCreated){\r\n  insertPackage(path)\r\n}\r\n```",
        "createdAt" : "2019-08-09T18:50:39Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ff3beadd-54e4-430b-bb06-b9cb9443ce3c",
        "parentId" : "fa1bc855-378c-4842-ad05-d3049d1639a2",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Yep, I meant exactly what @marek1840 said",
        "createdAt" : "2019-08-10T10:06:19Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "909e79755bb7dc96fad63232599fe13092152914",
    "line" : null,
    "diffHunk" : "@@ -588,6 +589,11 @@ class MetalsLanguageServer(\n     // Update in-memory buffer contents from LSP client\n     buffers.put(path, params.getTextDocument.getText)\n     trees.didChange(path)\n+\n+    if (createdFiles.remove(path)) {"
  },
  {
    "id" : "3df7b0c4-1a05-42a8-9fef-7042d6327616",
    "prId" : 862,
    "comments" : [
      {
        "id" : "fae8e87f-1d7e-4372-93be-d2f84c86f90c",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We should check if the file is a Scala file - I think it's working now, since we are not applying it on Java files, but I think it's being added unnecessarily to the set.\r\n```scala\r\nif(path.toAbsolutePath().toLanguage == Language.SCALA ){\r\n  createdFiles.add(path)\r\n}\r\n```\r\n\r\nyou can also create an additional method in XtensionAbsolutePathMetals `isScala` which will do the same thing. Then it would be:\r\n\r\n```scala\r\nif(path.toAbsolutePath().isScala){\r\n  createdFiles.add(path)\r\n}\r\n```\r\n",
        "createdAt" : "2019-08-09T15:54:52Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d5a18587-98ab-4376-b30a-f7afbf8d6979",
        "parentId" : "fae8e87f-1d7e-4372-93be-d2f84c86f90c",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "+1 to the `isScala` variant. This would nicely fit with the already present `isScalaOrJava`",
        "createdAt" : "2019-08-09T19:27:52Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "909e79755bb7dc96fad63232599fe13092152914",
    "line" : null,
    "diffHunk" : "@@ -728,6 +775,10 @@ class MetalsLanguageServer(\n       event.eventType() match {\n         case EventType.CREATE =>\n           buildTargets.onCreate(path)\n+\n+          // Modifying the file in this place using applyEdit request can cause race condition\n+          // File can be modified after receiving didOpen notification\n+          createdFiles.add(path)"
  },
  {
    "id" : "eb109dde-f77d-475b-97af-a59fd45ce370",
    "prId" : 862,
    "comments" : [
      {
        "id" : "8a6e01d5-d49d-4692-b69b-0ab676188edc",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "lets fold it into an `isEmpty` method in `XtensionAbsolutePathBuffers`. There is already a bunch of methods related to reading and writing to the file there so it should fit.",
        "createdAt" : "2019-08-09T18:56:21Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "909e79755bb7dc96fad63232599fe13092152914",
    "line" : null,
    "diffHunk" : "@@ -716,6 +722,47 @@ class MetalsLanguageServer(\n     onChange(paths).asJava\n   }\n \n+  private def insertPackage(path: AbsolutePath): Unit = {\n+    def createPackageName(path: AbsolutePath): Option[String] = {\n+      if (path.toFile.length() == 0) {"
  },
  {
    "id" : "b1ca1f5a-187f-4ebf-a7cc-e8bce1763a04",
    "prId" : 862,
    "comments" : [
      {
        "id" : "e44e766e-5190-4e37-be54-f96bd6744088",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "https://github.com/scalameta/metals/pull/857 makes it a `sourceItem` so please rename the variable after rebasing",
        "createdAt" : "2019-08-09T18:58:31Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "909e79755bb7dc96fad63232599fe13092152914",
    "line" : null,
    "diffHunk" : "@@ -716,6 +722,47 @@ class MetalsLanguageServer(\n     onChange(paths).asJava\n   }\n \n+  private def insertPackage(path: AbsolutePath): Unit = {\n+    def createPackageName(path: AbsolutePath): Option[String] = {\n+      if (path.toFile.length() == 0) {\n+        val sourceDirectory = buildTargets.inverseSourceDirectory(path)"
  },
  {
    "id" : "3911ef3d-3e6c-4cb4-aa4a-3cbd10623614",
    "prId" : 862,
    "comments" : [
      {
        "id" : "bffd6a22-cd9d-41cf-99f6-2c5c710cf83d",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "let's use `Path` whenever possible instead of the old `File`.\r\n```scala\r\nval relativeDirectory = sourceDirectory\r\n          .map(path.toRelative)\r\n          .flatMap(relativePath => Option(relativePath.toNIO.getParent))\r\n```",
        "createdAt" : "2019-08-09T19:03:35Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "909e79755bb7dc96fad63232599fe13092152914",
    "line" : null,
    "diffHunk" : "@@ -716,6 +722,47 @@ class MetalsLanguageServer(\n     onChange(paths).asJava\n   }\n \n+  private def insertPackage(path: AbsolutePath): Unit = {\n+    def createPackageName(path: AbsolutePath): Option[String] = {\n+      if (path.toFile.length() == 0) {\n+        val sourceDirectory = buildTargets.inverseSourceDirectory(path)\n+        val relativeDirectory = sourceDirectory\n+          .map(path.toRelative)\n+          .flatMap(relativePath => Option(relativePath.toFile.getParentFile))"
  },
  {
    "id" : "0a9a07ff-5a75-49c9-888a-84b1b26132fb",
    "prId" : 862,
    "comments" : [
      {
        "id" : "b7633fd7-ceec-4cea-a7dc-a7568918b694",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "What are your thoughts about this:\r\n```scala\r\nrelativeDirectory.map { path =>\r\n  val packageName = path.toString.replace(\"/\", \".\")\r\n  s\"package $packageName\"\r\n}\r\n```",
        "createdAt" : "2019-08-09T19:14:39Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "909e79755bb7dc96fad63232599fe13092152914",
    "line" : null,
    "diffHunk" : "@@ -716,6 +722,47 @@ class MetalsLanguageServer(\n     onChange(paths).asJava\n   }\n \n+  private def insertPackage(path: AbsolutePath): Unit = {\n+    def createPackageName(path: AbsolutePath): Option[String] = {\n+      if (path.toFile.length() == 0) {\n+        val sourceDirectory = buildTargets.inverseSourceDirectory(path)\n+        val relativeDirectory = sourceDirectory\n+          .map(path.toRelative)\n+          .flatMap(relativePath => Option(relativePath.toFile.getParentFile))\n+          .map(_.getPath)\n+        val packageName = relativeDirectory.map(_.replace(\"/\", \".\"))"
  },
  {
    "id" : "172569e2-f50e-4c6d-9f01-f987db4e04d3",
    "prId" : 862,
    "comments" : [
      {
        "id" : "156b645c-c800-47c9-ad11-eaa869405a4b",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "please, add `{` and `}` to make it more readable",
        "createdAt" : "2019-08-09T19:23:23Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "909e79755bb7dc96fad63232599fe13092152914",
    "line" : null,
    "diffHunk" : "@@ -716,6 +722,47 @@ class MetalsLanguageServer(\n     onChange(paths).asJava\n   }\n \n+  private def insertPackage(path: AbsolutePath): Unit = {\n+    def createPackageName(path: AbsolutePath): Option[String] = {\n+      if (path.toFile.length() == 0) {\n+        val sourceDirectory = buildTargets.inverseSourceDirectory(path)\n+        val relativeDirectory = sourceDirectory\n+          .map(path.toRelative)\n+          .flatMap(relativePath => Option(relativePath.toFile.getParentFile))\n+          .map(_.getPath)\n+        val packageName = relativeDirectory.map(_.replace(\"/\", \".\"))\n+\n+        packageName.map(\"package \" + _)\n+      } else {\n+        None\n+      }\n+    }\n+\n+    def createPackageWorkspaceEdit(packageName: String): WorkspaceEdit = {\n+      val textEdit = new TextEdit(\n+        new Range(new Position(0, 0), new Position(0, 0)),\n+        s\"$packageName\\n\"\n+      )\n+\n+      val changes = new util.ArrayList[TextEdit]()\n+      changes.add(textEdit)\n+\n+      val workspaceEdit = new WorkspaceEdit()\n+      workspaceEdit.getChanges.put(path.toString, changes)\n+\n+      workspaceEdit\n+    }\n+\n+    def applyPackageWorkspaceEdit(\n+        workspaceEdit: WorkspaceEdit\n+    ): CompletableFuture[ApplyWorkspaceEditResponse] =\n+      languageClient.applyEdit(new ApplyWorkspaceEditParams(workspaceEdit))"
  },
  {
    "id" : "b8e8514b-dfb4-494c-b54b-8cf4dc6fe842",
    "prId" : 862,
    "comments" : [
      {
        "id" : "143ecbb7-c218-47a3-b54f-bf422f3a6ada",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "could we drop the word `package` ?  We are already in the context of creating a package-related edit so I think there is no need to repeat it here\r\n```suggestion\r\n    def createWorkspaceEdit(packageName: String): WorkspaceEdit = {\r\n```",
        "createdAt" : "2019-08-09T19:24:53Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "909e79755bb7dc96fad63232599fe13092152914",
    "line" : null,
    "diffHunk" : "@@ -716,6 +722,47 @@ class MetalsLanguageServer(\n     onChange(paths).asJava\n   }\n \n+  private def insertPackage(path: AbsolutePath): Unit = {\n+    def createPackageName(path: AbsolutePath): Option[String] = {\n+      if (path.toFile.length() == 0) {\n+        val sourceDirectory = buildTargets.inverseSourceDirectory(path)\n+        val relativeDirectory = sourceDirectory\n+          .map(path.toRelative)\n+          .flatMap(relativePath => Option(relativePath.toFile.getParentFile))\n+          .map(_.getPath)\n+        val packageName = relativeDirectory.map(_.replace(\"/\", \".\"))\n+\n+        packageName.map(\"package \" + _)\n+      } else {\n+        None\n+      }\n+    }\n+\n+    def createPackageWorkspaceEdit(packageName: String): WorkspaceEdit = {"
  },
  {
    "id" : "89ffd7ab-3337-4ca9-857e-b5180bad0b12",
    "prId" : 862,
    "comments" : [
      {
        "id" : "790ddf16-f2a8-4bca-9955-473859cd1d37",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "doing the following, we can get rid of the `applyPackageWorkspaceEdit` function\r\n```suggestion\r\n      .map(new ApplyWorkspaceEditParams(_))\r\n      .foreach(languageClient.applyEdit)\r\n```",
        "createdAt" : "2019-08-09T19:26:13Z",
        "updatedAt" : "2019-08-13T18:51:32Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "909e79755bb7dc96fad63232599fe13092152914",
    "line" : null,
    "diffHunk" : "@@ -716,6 +722,47 @@ class MetalsLanguageServer(\n     onChange(paths).asJava\n   }\n \n+  private def insertPackage(path: AbsolutePath): Unit = {\n+    def createPackageName(path: AbsolutePath): Option[String] = {\n+      if (path.toFile.length() == 0) {\n+        val sourceDirectory = buildTargets.inverseSourceDirectory(path)\n+        val relativeDirectory = sourceDirectory\n+          .map(path.toRelative)\n+          .flatMap(relativePath => Option(relativePath.toFile.getParentFile))\n+          .map(_.getPath)\n+        val packageName = relativeDirectory.map(_.replace(\"/\", \".\"))\n+\n+        packageName.map(\"package \" + _)\n+      } else {\n+        None\n+      }\n+    }\n+\n+    def createPackageWorkspaceEdit(packageName: String): WorkspaceEdit = {\n+      val textEdit = new TextEdit(\n+        new Range(new Position(0, 0), new Position(0, 0)),\n+        s\"$packageName\\n\"\n+      )\n+\n+      val changes = new util.ArrayList[TextEdit]()\n+      changes.add(textEdit)\n+\n+      val workspaceEdit = new WorkspaceEdit()\n+      workspaceEdit.getChanges.put(path.toString, changes)\n+\n+      workspaceEdit\n+    }\n+\n+    def applyPackageWorkspaceEdit(\n+        workspaceEdit: WorkspaceEdit\n+    ): CompletableFuture[ApplyWorkspaceEditResponse] =\n+      languageClient.applyEdit(new ApplyWorkspaceEditParams(workspaceEdit))\n+\n+    createPackageName(path)\n+      .map(createPackageWorkspaceEdit)\n+      .foreach(applyPackageWorkspaceEdit)"
  },
  {
    "id" : "cef974e0-e60c-475f-9d4a-adcc92774485",
    "prId" : 865,
    "comments" : [
      {
        "id" : "03bc462d-3190-46ea-8384-a885e8d93608",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "does it work in vscode?  The [specification](https://microsoft.github.io/language-server-protocol/specification#textDocument_onTypeFormatting) expects a `List`, not an `Option[TextEdit]`.",
        "createdAt" : "2019-08-19T08:01:07Z",
        "updatedAt" : "2019-08-21T09:26:02Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e095056e-b204-4126-8ac8-204c15292d84",
        "parentId" : "03bc462d-3190-46ea-8384-a885e8d93608",
        "author" : {
          "login" : "Karolina-Bogacka",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/23015369?u=b3677e6a6a4594e396a59e1386936bfbc1b27829&v=4"
        },
        "body" : "it doesn't, and you're right, I haven't noticed. But I've changed my ontypeformatting product to a list and the server still doesn't seem to be responding properly, so it's probably something deeper, too.",
        "createdAt" : "2019-08-19T13:33:32Z",
        "updatedAt" : "2019-08-21T09:26:02Z",
        "lastEditedBy" : {
          "login" : "Karolina-Bogacka",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/23015369?u=b3677e6a6a4594e396a59e1386936bfbc1b27829&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7f4fb9d8a2ce58d558a9425c21448607b38f510a",
    "line" : 34,
    "diffHunk" : "@@ -841,6 +849,16 @@ class MetalsLanguageServer(\n       )\n     }\n \n+  @JsonRequest(\"textDocument/onTypeFormatting\")"
  },
  {
    "id" : "8caa0ba2-1721-452e-9d2f-6c8ecbcf7b1d",
    "prId" : 908,
    "comments" : [
      {
        "id" : "776b512c-d833-464a-bef6-f4d6200eeade",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "These  methods can return null. ",
        "createdAt" : "2019-09-10T06:41:38Z",
        "updatedAt" : "2019-09-10T06:44:01Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1009376dd731539d1b2666d3591dd66a946439a",
    "line" : 8,
    "diffHunk" : "@@ -345,10 +345,21 @@ class MetalsLanguageServer(\n       interactiveSemanticdbs.toFileOnDisk\n     )\n     foldingRangeProvider = FoldingRangeProvider(trees, buffers, params)\n+\n+    val snippetsSupported = params\n+      .getCapabilities()\n+      .getTextDocument()\n+      .getCompletion()"
  },
  {
    "id" : "413e9951-4fa3-4302-a468-e4ee01403f5d",
    "prId" : 919,
    "comments" : [
      {
        "id" : "0b3fcd36-d92e-4bd3-bd45-420d8f2520f5",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "```scala\r\n.format(params)\r\n.map(_.asJava)\r\n```",
        "createdAt" : "2019-09-13T09:12:00Z",
        "updatedAt" : "2019-09-13T11:02:47Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "992b86233b09b98f9a6c34c8da57c19d9562d623",
    "line" : null,
    "diffHunk" : "@@ -848,15 +850,29 @@ class MetalsLanguageServer(\n         token\n       )\n     }\n-  /*in order to use onTypeFormatting in vscode, you'll have to set editor.formatOnType = true in settings*/\n+\n   @JsonRequest(\"textDocument/onTypeFormatting\")\n   def onTypeFormatting(\n       params: DocumentOnTypeFormattingParams\n   ): CompletableFuture[util.List[TextEdit]] =\n     CancelTokens.future { _ =>\n-      onTypeFormattingProvider.format(\n-        params\n-      )\n+      multilineStringFormattingProvider\n+        .format("
  },
  {
    "id" : "732e3c60-c30f-406c-9b91-5dd70e0252c3",
    "prId" : 919,
    "comments" : [
      {
        "id" : "0947d798-1b48-4be3-b013-be3c7711e8c2",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "```scala\r\n.format(params)\r\n.map(_.asJava)\r\n```",
        "createdAt" : "2019-09-13T09:12:29Z",
        "updatedAt" : "2019-09-13T11:02:47Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "992b86233b09b98f9a6c34c8da57c19d9562d623",
    "line" : null,
    "diffHunk" : "@@ -848,15 +850,29 @@ class MetalsLanguageServer(\n         token\n       )\n     }\n-  /*in order to use onTypeFormatting in vscode, you'll have to set editor.formatOnType = true in settings*/\n+\n   @JsonRequest(\"textDocument/onTypeFormatting\")\n   def onTypeFormatting(\n       params: DocumentOnTypeFormattingParams\n   ): CompletableFuture[util.List[TextEdit]] =\n     CancelTokens.future { _ =>\n-      onTypeFormattingProvider.format(\n-        params\n-      )\n+      multilineStringFormattingProvider\n+        .format(\n+          params\n+        )\n+        .map(_.asJava)\n+    }\n+\n+  @JsonRequest(\"textDocument/rangeFormatting\")\n+  def rangeFormatting(\n+      params: DocumentRangeFormattingParams\n+  ): CompletableFuture[util.List[TextEdit]] =\n+    CancelTokens.future { _ =>\n+      multilineStringFormattingProvider\n+        .format("
  },
  {
    "id" : "dd4c4b64-9280-4505-899a-1cd378157ab6",
    "prId" : 923,
    "comments" : [
      {
        "id" : "4157c21c-c912-4b73-a1d8-5cc1c8f8ec64",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We can match `Seq(params: JsonElement)` and then as[b.DebugSessionParams] will work without having to use implicit class on Any",
        "createdAt" : "2019-09-18T10:30:10Z",
        "updatedAt" : "2019-09-24T10:49:11Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "34b736c65504efc71e34421317b1346d8671e0ea",
    "line" : null,
    "diffHunk" : "@@ -1087,10 +1106,60 @@ class MetalsLanguageServer(\n             )\n           )\n         }.asJavaObject\n+      case ServerCommands.StartDebugAdapter() =>\n+        val args = params.getArguments.asScala\n+        args match {\n+          case Seq(param) =>"
  },
  {
    "id" : "86455250-bb10-4105-95bf-679b532d8e97",
    "prId" : 923,
    "comments" : [
      {
        "id" : "1c5b2834-0f4f-43d0-a110-19b6d635f015",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Any chance to move it to an outside provider? There is already a lot of code inside the server, let's try not to add more.",
        "createdAt" : "2019-09-18T10:37:39Z",
        "updatedAt" : "2019-09-24T10:49:11Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "34b736c65504efc71e34421317b1346d8671e0ea",
    "line" : 128,
    "diffHunk" : "@@ -1087,10 +1106,60 @@ class MetalsLanguageServer(\n             )\n           )\n         }.asJavaObject\n+      case ServerCommands.StartDebugAdapter() =>"
  },
  {
    "id" : "5b42e665-6fa9-414b-b6d9-5175e235729c",
    "prId" : 923,
    "comments" : [
      {
        "id" : "6638d380-6e05-46b4-8278-863ab71c6624",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "From what I see both `awaitClient` and `connectToServer` both timeout - could we just merge the futures and await for them in DebugServer? There is a lot of different timeouts - standard way is just to map/flatMap/sequence over futures and then await in one central location.",
        "createdAt" : "2019-09-18T10:46:40Z",
        "updatedAt" : "2019-09-24T10:49:11Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "34b736c65504efc71e34421317b1346d8671e0ea",
    "line" : 164,
    "diffHunk" : "@@ -1087,10 +1106,60 @@ class MetalsLanguageServer(\n             )\n           )\n         }.asJavaObject\n+      case ServerCommands.StartDebugAdapter() =>\n+        val args = params.getArguments.asScala\n+        args match {\n+          case Seq(param) =>\n+            param.as[b.DebugSessionParams] match {\n+              case Failure(exception) =>\n+                Future.failed(exception).asJavaObject\n+              case Success(parameters) =>\n+                val proxyServer = new ServerSocket(0)\n+\n+                val awaitClient = () => {\n+                  Future(proxyServer.accept()).withTimeout(10, TimeUnit.SECONDS)\n+                }\n+\n+                val connectToServer = () => {\n+                  val debugSession = buildServer\n+                    .map(_.startDebugSession(parameters).asScala)\n+                    .getOrElse(\n+                      Future\n+                        .failed(new IllegalStateException(\"No build server\"))\n+                    )\n+\n+                  debugSession\n+                    .withTimeout(10, TimeUnit.SECONDS)\n+                    .map(uri => {\n+                      val socket = new Socket()\n+\n+                      val address =\n+                        new InetSocketAddress(uri.getHost, uri.getPort)\n+                      val timeout = TimeUnit.SECONDS.toMillis(10).toInt\n+                      socket.connect(address, timeout)\n+\n+                      socket\n+                    })\n+                }\n+\n+                val server = DebugServer.create(awaitClient, connectToServer)"
  },
  {
    "id" : "549dda33-1ef1-4f6c-91aa-222646a12ec2",
    "prId" : 923,
    "comments" : [
      {
        "id" : "3373f01c-c931-45ff-930d-6649d8dd8622",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Where is DebugServer coming from? Can't find it in the current PR",
        "createdAt" : "2019-09-18T11:15:01Z",
        "updatedAt" : "2019-09-24T10:49:11Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "34b736c65504efc71e34421317b1346d8671e0ea",
    "line" : 35,
    "diffHunk" : "@@ -37,6 +40,7 @@ import scala.meta.internal.builds.BuildTool\n import scala.meta.internal.builds.BuildTools\n import scala.meta.internal.io.FileIO\n import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.metals.debug.DebugServer"
  },
  {
    "id" : "0e3cb06f-fbe1-4a56-a4fb-2d26177f6fc9",
    "prId" : 935,
    "comments" : [
      {
        "id" : "d2ad3973-a520-4404-80f1-3e2205a31b9e",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Would it be possible to get this as part of the digest so that `import build` pops up?",
        "createdAt" : "2019-09-24T11:18:33Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1e7f9a43-bc9a-4bec-96c8-8b3385e1b31e",
        "parentId" : "d2ad3973-a520-4404-80f1-3e2205a31b9e",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Can you elaborate? Here we prompt the user to \"import build\" when the `pants-targets` setting changes. I have added a logging statement there for now. Down the road, it would be nice to prompt the user with a text box to provide what targets to run and then automatically update the setting for the user. We don't have the infrastructure to implement that yet, however.",
        "createdAt" : "2019-09-26T15:44:49Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ba11473b-f3af-488e-8ee6-6f177a577989",
        "parentId" : "d2ad3973-a520-4404-80f1-3e2205a31b9e",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "In PantsDigest we have the UserConfiguration now so we could also digest targets in the settings and we would not need to do anything else. The user would get informed that their pants build changed and that they need to reimport.\r\n\r\nWe wouldn't need to have some special logic in MetalsLanguageServer",
        "createdAt" : "2019-09-27T15:14:13Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fa322071-6d00-4a3d-aa22-d15bd791f00f",
        "parentId" : "d2ad3973-a520-4404-80f1-3e2205a31b9e",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "The reason we need this logic in `MetalsLanguageServer` is to trigger a new digest when the `pants-targets` setting changes. Even if we include the targets in the digest, we don't get a notification to trigger the digest until a BUILD file changes.",
        "createdAt" : "2019-12-03T16:19:35Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a95ae87fd9621161d156685f32480fcb7bb451a4",
    "line" : 11,
    "diffHunk" : "@@ -714,14 +719,20 @@ class MetalsLanguageServer(\n           errors.foreach { error =>\n             scribe.error(s\"config error: $error\")\n           }\n+          Future.successful(())\n         case Right(value) =>\n           val old = userConfig\n           userConfig = value\n           if (userConfig.symbolPrefixes != old.symbolPrefixes) {\n             compilers.restartAll()\n           }\n+          if (userConfig.pantsTargets != old.pantsTargets) {"
  },
  {
    "id" : "5b45d05a-0808-44e9-aaf6-a6c08d2d8bc0",
    "prId" : 942,
    "comments" : [
      {
        "id" : "76797882-0b14-4450-a492-bf3693f4ab6b",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Can we use map and match only on end result",
        "createdAt" : "2019-09-25T11:08:57Z",
        "updatedAt" : "2019-10-04T07:32:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "47ea581fbaa603a2dc171e3e913392f05fc4ba11",
    "line" : null,
    "diffHunk" : "@@ -1099,10 +1113,32 @@ class MetalsLanguageServer(\n             )\n           )\n         }.asJavaObject\n+      case ServerCommands.StartDebugAdapter() =>\n+        val args = params.getArguments.asScala\n+        args match {\n+          case Seq(param: JsonElement) =>\n+            param.as[b.DebugSessionParams] match {\n+              case Failure(exception) =>"
  },
  {
    "id" : "f213b61a-f7c4-4ef3-9d77-f842b885fd16",
    "prId" : 954,
    "comments" : [
      {
        "id" : "04f1ec0a-917a-4091-9246-d55f1b8dc0d2",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "```suggestion\r\n              case NonFatal(e) =>\r\n```",
        "createdAt" : "2019-10-03T11:04:10Z",
        "updatedAt" : "2019-10-03T11:05:56Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b613d4d00d446042c5af74801473c4c8388a1acf",
    "line" : null,
    "diffHunk" : "@@ -1551,7 +1551,10 @@ class MetalsLanguageServer(\n           case Some(toplevels) => toplevels\n           case None =>\n             // Nothing in cache, read top level symbols and store them in cache\n-            val tempIndex = OnDemandSymbolIndex()\n+            val tempIndex = OnDemandSymbolIndex(onError = {\n+              case e: Throwable =>"
  },
  {
    "id" : "2d4eb53d-7328-413c-9f34-2d254b92d970",
    "prId" : 959,
    "comments" : [
      {
        "id" : "117e2d5f-a66d-4029-a583-d873b801d654",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We can remove the None branch now since we do everything in the presentation compile.",
        "createdAt" : "2019-10-04T14:17:54Z",
        "updatedAt" : "2019-10-04T14:19:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7f83376b-86f2-4b1b-8bf7-cccd4be06cc3",
        "parentId" : "117e2d5f-a66d-4029-a583-d873b801d654",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "Sometimes presentation compiler failed to correctly resolve type so I use definitionOrReferences as fallback method.",
        "createdAt" : "2019-10-04T15:11:21Z",
        "updatedAt" : "2019-10-04T15:11:22Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ca372c2e-afd2-49a9-b2f2-d4127fe85323",
        "parentId" : "117e2d5f-a66d-4029-a583-d873b801d654",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We can't use `definitionOrReferences` since that can give us references when we are at definition. So at value definition it will find all references to it and we will be searching for a type of a first reference. \r\n\r\nIf we cannot resolve type and we are not at the definition that can also be done in the presentation compiler.",
        "createdAt" : "2019-10-04T15:27:01Z",
        "updatedAt" : "2019-10-04T15:27:34Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7b0f1eec3bb71a43264c9f32fa70860622c41aaa",
    "line" : 36,
    "diffHunk" : "@@ -901,6 +901,36 @@ class MetalsLanguageServer(\n       referencesResult(params).locations.asJava\n     }\n \n+  def typeDefinition(\n+      params: TextDocumentPositionParams,\n+      token: CancelToken\n+  ): Future[java.util.List[Location]] = {\n+    compilers\n+      .getLocation(params, token, interactiveSemanticdbs)\n+      .flatMap {\n+        case Some(loc) =>\n+          Future(List(loc).asJava)\n+        case None =>"
  },
  {
    "id" : "b6f6c85d-440d-4bcd-a015-741742d2254e",
    "prId" : 978,
    "comments" : [
      {
        "id" : "1d26e270-5152-448f-9de7-2fd86abe4cda",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Let's just return an empty list from `typeDefinition`",
        "createdAt" : "2019-10-14T10:11:28Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -910,6 +910,21 @@ class MetalsLanguageServer(\n       referencesResult(params).locations.asJava\n     }\n \n+  def typeDefinition(\n+      params: TextDocumentPositionParams,\n+      token: CancelToken\n+  ): Future[java.util.List[Location]] = {\n+    compilers\n+      .typeDefinition(params, token, interactiveSemanticdbs)"
  },
  {
    "id" : "72295e5a-836e-4fbc-ba9a-5debc5b075d8",
    "prId" : 1019,
    "comments" : [
      {
        "id" : "7176ab40-6e60-4550-bde9-cf3ca7e731d7",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Would it make sense to add this method to `MetalsLanguageClient` with a default implementation that ignores the argument?",
        "createdAt" : "2019-10-25T13:09:57Z",
        "updatedAt" : "2019-10-30T11:44:17Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "35345e713c35479f38e4211db46b8e758640e70b",
    "line" : null,
    "diffHunk" : "@@ -200,6 +199,14 @@ class MetalsLanguageServer(\n     MetalsLogger.setupLspLogger(workspace, redirectSystemOut)\n     val clientExperimentalCapabilities =\n       ClientExperimentalCapabilities.from(params.getCapabilities)\n+\n+    languageClient.underlying match {\n+      case client: ConfiguredLanguageClient =>\n+        client.configure(clientExperimentalCapabilities)"
  },
  {
    "id" : "1970e414-966c-4843-a387-5aa3106a0853",
    "prId" : 1041,
    "comments" : [
      {
        "id" : "97362ae3-ce7a-4f0c-8483-10ece8a2a6be",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Would it be possible to just use Option instead?",
        "createdAt" : "2019-11-04T16:11:07Z",
        "updatedAt" : "2019-11-09T20:01:12Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "43aa1d69-131f-4e12-8056-cad58ada8d1e",
        "parentId" : "97362ae3-ce7a-4f0c-8483-10ece8a2a6be",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "That's a great question! I refactored to use `Option[WorksheetProvider]` and it came out much nicer",
        "createdAt" : "2019-11-06T06:24:58Z",
        "updatedAt" : "2019-11-09T20:01:12Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a2902a65a77773398f8ac710483906215a06bcf8",
    "line" : null,
    "diffHunk" : "@@ -169,6 +180,7 @@ class MetalsLanguageServer(\n   private var doctor: Doctor = _\n   var httpServer: Option[MetalsHttpServer] = None\n   var treeView: TreeViewProvider = NoopTreeViewProvider\n+  var worksheetProvider: WorksheetProvider = NoopWorksheetProvider"
  },
  {
    "id" : "a85d36c9-43b7-4622-b69c-f4a6131a5e5d",
    "prId" : 1041,
    "comments" : [
      {
        "id" : "ff1bc1a1-f349-450f-8ea6-2fb9cac671c1",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Can we move this inside the WorksheetProvider ?",
        "createdAt" : "2019-11-04T16:12:14Z",
        "updatedAt" : "2019-11-09T20:01:12Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a8caf1be-733b-46af-8fa7-aa2601212cb3",
        "parentId" : "ff1bc1a1-f349-450f-8ea6-2fb9cac671c1",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I simplified this implementation a bit. For consistency with `onBuildChanged` I'd like to keep it in this file for now",
        "createdAt" : "2019-11-06T06:26:33Z",
        "updatedAt" : "2019-11-09T20:01:12Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a2902a65a77773398f8ac710483906215a06bcf8",
    "line" : null,
    "diffHunk" : "@@ -1610,6 +1640,31 @@ class MetalsLanguageServer(\n     )\n   }\n \n+  private def onWorksheetChangedUnbatched("
  },
  {
    "id" : "6db5012c-03d8-4189-95e3-1dc013769287",
    "prId" : 1089,
    "comments" : [
      {
        "id" : "b488e21c-1757-4497-a4bc-1ceb5f60dbf2",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Let's go back to Option[WorksheetProvider]",
        "createdAt" : "2019-11-28T15:12:17Z",
        "updatedAt" : "2019-12-06T16:11:03Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3d13224d-c022-4669-89a1-48d1daf95fa7",
        "parentId" : "b488e21c-1757-4497-a4bc-1ceb5f60dbf2",
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "why? Previously `Option` made sense, since there would not be a Provider always, and now we have fallback.",
        "createdAt" : "2019-11-29T10:43:52Z",
        "updatedAt" : "2019-12-06T16:11:03Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4a3e87a1-c991-4152-ba73-91064b0f4b9f",
        "parentId" : "b488e21c-1757-4497-a4bc-1ceb5f60dbf2",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Ok, right. Haven't thought about it!",
        "createdAt" : "2019-11-29T11:09:06Z",
        "updatedAt" : "2019-12-06T16:11:03Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c2b310420ce80e33b8c8e4977b94f75be9e4f986",
    "line" : 15,
    "diffHunk" : "@@ -177,7 +177,7 @@ class MetalsLanguageServer(\n   private var doctor: Doctor = _\n   var httpServer: Option[MetalsHttpServer] = None\n   var treeView: TreeViewProvider = NoopTreeViewProvider\n-  var worksheetProvider: Option[WorksheetProvider] = None\n+  var worksheetProvider: WorksheetProvider = _"
  },
  {
    "id" : "eb0d3035-4c20-48b3-905d-74410e1321da",
    "prId" : 1145,
    "comments" : [
      {
        "id" : "78e4132a-d18e-4730-9597-7ceacfef7e9d",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Why do we allow creating incompatible a BuildTool with incompatible version?",
        "createdAt" : "2019-12-05T08:10:37Z",
        "updatedAt" : "2019-12-05T11:14:30Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "64f9c481-e143-4330-9589-09f1c9f74e82",
        "parentId" : "78e4132a-d18e-4730-9597-7ceacfef7e9d",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This code is unchanged in this PR, it just moved causing a diff. Please open an issue if you want to follow up on this.",
        "createdAt" : "2019-12-05T10:29:23Z",
        "updatedAt" : "2019-12-05T11:14:30Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c032fa899f1747d53cf2025b6e1cf03227b19980",
    "line" : 56,
    "diffHunk" : "@@ -1263,35 +1270,42 @@ class MetalsLanguageServer(\n         .orNull\n     }.asJava\n \n-  private def slowConnectToBuildServer(\n-      forceImport: Boolean\n-  ): Future[BuildChange] = {\n+  private def supportedBuildTool(): Option[BuildTool] =\n     buildTools.loadSupported match {\n       case Some(buildTool) =>\n-        if (BuildTool.isCompatibleVersion(\n-            buildTool.minimumVersion,\n-            buildTool.version\n-          )) {\n-          buildTool.digest(workspace) match {\n-            case None =>\n-              scribe.warn(s\"Skipping build import, no checksum.\")\n-              Future.successful(BuildChange.None)\n-            case Some(digest) =>\n-              slowConnectToBuildServer(forceImport, buildTool, digest)\n-          }\n+        val isCompatibleVersion = BuildTool.isCompatibleVersion("
  },
  {
    "id" : "57af66b2-1d91-4591-bfdd-abc9dad64076",
    "prId" : 1145,
    "comments" : [
      {
        "id" : "5b3eb06f-cfcd-49ad-b69c-9cc36e4a749e",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Could you also include the minimal version which is required so the user knows how far it must be upgraded? Also, the recommended version, since it is already known, could be useful to the user.",
        "createdAt" : "2019-12-05T08:11:59Z",
        "updatedAt" : "2019-12-05T11:14:30Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3d787a73-776b-4e35-b21c-d1625e7ce499",
        "parentId" : "5b3eb06f-cfcd-49ad-b69c-9cc36e4a749e",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This code is unchanged in this PR, it just moved causing a diff. Please open an issue if you want to follow up on this.",
        "createdAt" : "2019-12-05T10:29:32Z",
        "updatedAt" : "2019-12-05T11:14:30Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c032fa899f1747d53cf2025b6e1cf03227b19980",
    "line" : 66,
    "diffHunk" : "@@ -1263,35 +1270,42 @@ class MetalsLanguageServer(\n         .orNull\n     }.asJava\n \n-  private def slowConnectToBuildServer(\n-      forceImport: Boolean\n-  ): Future[BuildChange] = {\n+  private def supportedBuildTool(): Option[BuildTool] =\n     buildTools.loadSupported match {\n       case Some(buildTool) =>\n-        if (BuildTool.isCompatibleVersion(\n-            buildTool.minimumVersion,\n-            buildTool.version\n-          )) {\n-          buildTool.digest(workspace) match {\n-            case None =>\n-              scribe.warn(s\"Skipping build import, no checksum.\")\n-              Future.successful(BuildChange.None)\n-            case Some(digest) =>\n-              slowConnectToBuildServer(forceImport, buildTool, digest)\n-          }\n+        val isCompatibleVersion = BuildTool.isCompatibleVersion(\n+          buildTool.minimumVersion,\n+          buildTool.version\n+        )\n+        if (isCompatibleVersion) {\n+          Some(buildTool)\n         } else {\n-          scribe.warn(\n-            s\"Skipping build import for unsupported $buildTool version ${buildTool.version}\"\n-          )\n+          scribe.warn(s\"Unsupported $buildTool version ${buildTool.version}\")"
  },
  {
    "id" : "6c085f03-fd6f-457b-bec3-bdc6616f23e4",
    "prId" : 1174,
    "comments" : [
      {
        "id" : "e7927d89-4fec-4853-b934-10be1adb9ed9",
        "parentId" : null,
        "author" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Clear symbolSearch cache (for dependency sources) on indexing workspace",
        "createdAt" : "2019-12-15T17:54:47Z",
        "updatedAt" : "2019-12-16T12:57:43Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0d5f96fb977b6c73c44b8b5c061480393ecb1c82",
    "line" : 37,
    "diffHunk" : "@@ -1597,6 +1599,7 @@ class MetalsLanguageServer(\n       semanticDBIndexer.reset()\n       treeView.reset()\n       worksheetProvider.reset()\n+      symbolSearch.reset()"
  },
  {
    "id" : "638f1352-871e-4ea5-86fb-b0e9e990834a",
    "prId" : 1250,
    "comments" : [
      {
        "id" : "d1f9e204-2b9d-435b-9dc6-594058ebbd70",
        "parentId" : null,
        "author" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "Enable to fire `textDocument/completion` on type `*`",
        "createdAt" : "2020-01-04T12:23:15Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cf8e6070092ac693251e01568b009a7f1bfce601",
    "line" : 5,
    "diffHunk" : "@@ -494,7 +494,7 @@ class MetalsLanguageServer(\n       capabilities.setCompletionProvider(\n         new CompletionOptions(\n           config.compilers.isCompletionItemResolve,\n-          List(\".\").asJava\n+          List(\".\", \"*\").asJava"
  },
  {
    "id" : "33a0e673-310b-41d2-a5e6-bcab24567801",
    "prId" : 1256,
    "comments" : [
      {
        "id" : "d8d036e0-46cc-4474-8774-69cd94d1bdd2",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "nit: should we move this into a separate file? ",
        "createdAt" : "2020-01-06T16:35:07Z",
        "updatedAt" : "2020-01-06T16:35:39Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bcbd63a1-a46c-4402-8503-1e97a46e954f",
        "parentId" : "d8d036e0-46cc-4474-8774-69cd94d1bdd2",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I think we should do it as a larger refactor of the file. I can see a number of similar methods that might be put there. ",
        "createdAt" : "2020-01-06T17:11:17Z",
        "updatedAt" : "2020-01-06T17:11:18Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5221982e1605895d70c5abd22174e1406e1e0efb",
    "line" : 30,
    "diffHunk" : "@@ -1653,6 +1658,26 @@ class MetalsLanguageServer(\n       .foreach(_ => languageClient.refreshModel())\n   }\n \n+  private def checkRunningBloopVersion(bspServerVersion: String) = {"
  },
  {
    "id" : "f5569e07-7382-430c-89d4-e10c1184274f",
    "prId" : 1266,
    "comments" : [
      {
        "id" : "f9e05513-bfd7-4146-81b2-5c12e5218376",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "could you also adapt the remaining methods on the `build` to return the scala `Future` as well?",
        "createdAt" : "2020-01-09T11:22:45Z",
        "updatedAt" : "2020-01-09T19:41:06Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9fabb8f1-f636-4a23-8051-c193eb6d6392",
        "parentId" : "f9e05513-bfd7-4146-81b2-5c12e5218376",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Adapted most except `compile`, since the CompletableFuture.cancel is being used and don't want to rework cancellation right now.",
        "createdAt" : "2020-01-09T19:25:50Z",
        "updatedAt" : "2020-01-09T19:41:06Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0f92bf439ec2e556ef2dd37eb204d08963b7f24b",
    "line" : 16,
    "diffHunk" : "@@ -1429,17 +1430,14 @@ class MetalsLanguageServer(\n     buildServer = Some(build)\n     val importedBuild = timed(\"imported build\") {\n       for {\n-        workspaceBuildTargets <- build.server.workspaceBuildTargets().asScala\n+        workspaceBuildTargets <- build.workspaceBuildTargets()"
  },
  {
    "id" : "250725bc-c784-4ede-9cb0-d929f2399ddc",
    "prId" : 1286,
    "comments" : [
      {
        "id" : "9ea831b3-786b-46c5-963e-d2a07f9d1a90",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I got this wrong in #1251. When the client supports code action literals we can send the `CodeActionOptions` version, otherwise we just send `true`",
        "createdAt" : "2020-01-11T17:13:21Z",
        "updatedAt" : "2020-01-11T17:13:21Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7e6135a896a913f6ec9a1ae82ca098806ffdfea3",
    "line" : 13,
    "diffHunk" : "@@ -507,13 +507,13 @@ class MetalsLanguageServer(\n       capabilities.setDocumentSymbolProvider(true)\n       capabilities.setDocumentFormattingProvider(true)\n       if (initializeParams.supportsCodeActionLiterals) {\n-        capabilities.setCodeActionProvider(true)\n-      } else {\n         capabilities.setCodeActionProvider(\n           new CodeActionOptions(\n             List(CodeActionKind.QuickFix, CodeActionKind.Refactor).asJava\n           )\n         )\n+      } else {\n+        capabilities.setCodeActionProvider(true)\n       }"
  },
  {
    "id" : "542431fa-efd9-436d-be84-e6c6b796bf86",
    "prId" : 1310,
    "comments" : [
      {
        "id" : "a4442663-7af8-426a-9310-1bee5cd67984",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This will crash with `MatchError` when the user doesn't want to reconnect.",
        "createdAt" : "2020-01-17T19:49:28Z",
        "updatedAt" : "2020-01-19T10:49:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8f8e9b4e-2bc8-4594-8c79-0f54aeabf227",
        "parentId" : "a4442663-7af8-426a-9310-1bee5cd67984",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Thanks, fixed!",
        "createdAt" : "2020-01-18T18:58:40Z",
        "updatedAt" : "2020-01-19T10:49:31Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e5a0168268324dcfda820d80b1b28f7833499098",
    "line" : 12,
    "diffHunk" : "@@ -819,7 +819,18 @@ class MetalsLanguageServer(\n           if (userConfig.symbolPrefixes != old.symbolPrefixes) {\n             compilers.restartAll()\n           }\n-          if (userConfig.pantsTargets != old.pantsTargets) {\n+          if (userConfig.bloopVersion != old.bloopVersion) {\n+            languageClient\n+              .showMessageRequest(\n+                Messages.BloopVersionChange.params(userConfig.bloopVersion)\n+              )\n+              .asScala\n+              .flatMap {\n+                case item if item == Messages.BloopVersionChange.reconnect =>"
  },
  {
    "id" : "40dddd21-a295-48fb-b18f-765da5bb4d99",
    "prId" : 1339,
    "comments" : [
      {
        "id" : "a8b4714f-f86c-4d07-99a6-e2141d91f2e9",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Maybe we can just use `client.showMessage`?",
        "createdAt" : "2020-01-23T12:56:36Z",
        "updatedAt" : "2020-02-06T14:07:14Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3ebdb9ea-c98b-451b-8679-d184a6843d32",
        "parentId" : "a8b4714f-f86c-4d07-99a6-e2141d91f2e9",
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "Done + `scribe.error` added",
        "createdAt" : "2020-01-24T16:13:19Z",
        "updatedAt" : "2020-02-06T14:07:14Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1c1d293c-1532-411a-bfcb-ce36f9baa99b",
        "parentId" : "a8b4714f-f86c-4d07-99a6-e2141d91f2e9",
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "![Screenshot from 2020-01-24 17-10-31](https://user-images.githubusercontent.com/10850363/73084220-dcfc6380-3ecc-11ea-8437-bd2b2d020c90.png)\r\n",
        "createdAt" : "2020-01-24T16:13:54Z",
        "updatedAt" : "2020-02-06T14:07:14Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1e1175d6c0f716c374b1bc575ac9a28a3290743",
    "line" : null,
    "diffHunk" : "@@ -1249,6 +1250,24 @@ class MetalsLanguageServer(\n             val msg = s\"Invalid arguments: $args. Expecting: $argExample\"\n             Future.failed(new IllegalArgumentException(msg)).asJavaObject\n         }\n+      case ServerCommands.NewScalaWorksheet() =>\n+        val args = params.getArguments.asScala\n+        def f(dir: URI, name: String) = Future {\n+          val path = dir.toString.toAbsolutePath.resolve(name + \".worksheet.sc\")\n+          //TODO: report failure, like file already exists?"
  },
  {
    "id" : "2a573eec-c869-499a-9c19-d0ebd167aabe",
    "prId" : 1339,
    "comments" : [
      {
        "id" : "11b6ec43-da43-4428-b6bd-89a9ecf98024",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Would it make sense to move it to a CommandProvider? ",
        "createdAt" : "2020-01-23T12:57:12Z",
        "updatedAt" : "2020-02-06T14:07:14Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "af5e3738-a2d4-4f92-b16d-fdd2669cfca1",
        "parentId" : "11b6ec43-da43-4428-b6bd-89a9ecf98024",
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "While body of this method deserves (imho) being refactored to another file/class, it probably worth to be done in another PR",
        "createdAt" : "2020-01-24T16:15:10Z",
        "updatedAt" : "2020-02-06T14:07:14Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1e1175d6c0f716c374b1bc575ac9a28a3290743",
    "line" : null,
    "diffHunk" : "@@ -1249,6 +1250,24 @@ class MetalsLanguageServer(\n             val msg = s\"Invalid arguments: $args. Expecting: $argExample\"\n             Future.failed(new IllegalArgumentException(msg)).asJavaObject\n         }\n+      case ServerCommands.NewScalaWorksheet() =>"
  },
  {
    "id" : "2c0a194b-cad5-4281-919c-9447ab4fa209",
    "prId" : 1339,
    "comments" : [
      {
        "id" : "e1750dad-4e00-4fb4-a644-8f6118d6bb32",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We should use a better name than just `f`",
        "createdAt" : "2020-01-23T12:57:38Z",
        "updatedAt" : "2020-02-06T14:07:14Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6a7e607d-1ca3-42f1-952a-d88f6f717e8e",
        "parentId" : "e1750dad-4e00-4fb4-a644-8f6118d6bb32",
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "`createWorksheet` now",
        "createdAt" : "2020-01-24T16:15:23Z",
        "updatedAt" : "2020-02-06T14:07:14Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1e1175d6c0f716c374b1bc575ac9a28a3290743",
    "line" : null,
    "diffHunk" : "@@ -1249,6 +1250,24 @@ class MetalsLanguageServer(\n             val msg = s\"Invalid arguments: $args. Expecting: $argExample\"\n             Future.failed(new IllegalArgumentException(msg)).asJavaObject\n         }\n+      case ServerCommands.NewScalaWorksheet() =>\n+        val args = params.getArguments.asScala\n+        def f(dir: URI, name: String) = Future {"
  },
  {
    "id" : "39775e9f-64a8-4d8c-b0a3-d1e9802c9a5d",
    "prId" : 1339,
    "comments" : [
      {
        "id" : "76323f1b-752b-4d90-bca9-3a519cd61cb3",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Also, I think we can start with new worksheet, but even create in the future a `WizardProvider` and `NewCommands` that would generalize over creating templates.",
        "createdAt" : "2020-01-27T09:57:22Z",
        "updatedAt" : "2020-02-06T14:07:14Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1e1175d6c0f716c374b1bc575ac9a28a3290743",
    "line" : null,
    "diffHunk" : "@@ -1249,6 +1250,31 @@ class MetalsLanguageServer(\n             val msg = s\"Invalid arguments: $args. Expecting: $argExample\"\n             Future.failed(new IllegalArgumentException(msg)).asJavaObject\n         }\n+      case ServerCommands.NewScalaWorksheet() =>"
  },
  {
    "id" : "0ff10adb-de2e-49aa-9d39-da142c6051f8",
    "prId" : 1339,
    "comments" : [
      {
        "id" : "6ff10e30-4d76-4249-a552-1a7a4c57bebc",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Is it possible to moÅ¼e most of the logic to the new provider you created?",
        "createdAt" : "2020-01-30T10:40:41Z",
        "updatedAt" : "2020-02-06T14:07:14Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3663e2c0-b6a0-41bd-bbf9-5a4a14024337",
        "parentId" : "6ff10e30-4d76-4249-a552-1a7a4c57bebc",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Te code grew a bit and we need to reduce the amount of code in MetalsLanguageServer I think.",
        "createdAt" : "2020-01-30T10:53:57Z",
        "updatedAt" : "2020-02-06T14:07:14Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1e1175d6c0f716c374b1bc575ac9a28a3290743",
    "line" : null,
    "diffHunk" : "@@ -1262,6 +1260,55 @@ class MetalsLanguageServer(\n             val msg = s\"Invalid arguments: $args. Expecting: $argExample\"\n             Future.failed(new IllegalArgumentException(msg)).asJavaObject\n         }\n+      case ServerCommands.NewScalaWorksheet() =>\n+        val args = params.getArguments.asScala\n+        (args match {\n+          case Seq(JsonString.Option(directory), JsonString(name)) =>\n+            val result =\n+              newFilesProvider.createWorksheet(directory.map(new URI(_)), name)\n+            result.onFailure {\n+              case NonFatal(e) =>\n+                languageClient\n+                  .showMessage(\n+                    MessageType.Error,\n+                    s\"Cannot create worksheet:\\n ${e.toString()}\"\n+                  )\n+            }\n+            result\n+          case _ =>\n+            val msg = s\"Invalid arguments: $args.\"\n+            Future.failed(new IllegalArgumentException(msg))\n+        }).asJavaObject\n+      case ServerCommands.NewScalaClass() =>"
  },
  {
    "id" : "805e2d55-4738-4448-9eb7-e01979ec03ed",
    "prId" : 1339,
    "comments" : [
      {
        "id" : "58a9ab16-6657-4d80-9266-816ef680080e",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Can the parameters just contain a single object that we would translate to a class using `JsonParser`? We wouldn't need to do the crazy unapplies.\r\n\r\nAnd we could use the kind parameter for everything. There wouldn't need to be separate logic for creating worksheets and classes.",
        "createdAt" : "2020-01-30T11:10:07Z",
        "updatedAt" : "2020-02-06T14:07:14Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cac8ac12-c88b-4d70-a5cb-5d3c2434c93b",
        "parentId" : "58a9ab16-6657-4d80-9266-816ef680080e",
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "@tgodzik \r\nMaybe it's worth to create full `metals/newScalaFile` endpoint method? I'm not really sure which one is more appropriate in what situations.",
        "createdAt" : "2020-01-30T15:24:41Z",
        "updatedAt" : "2020-02-06T14:07:14Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "62095a4a-1ee5-4faf-a39d-e43ba3ef8536",
        "parentId" : "58a9ab16-6657-4d80-9266-816ef680080e",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I think a command is better since it can also work for other clients. Although not 100 % sure",
        "createdAt" : "2020-01-30T15:32:35Z",
        "updatedAt" : "2020-02-06T14:07:14Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a4917286-33c1-4b8c-acd9-93572cdaa979",
        "parentId" : "58a9ab16-6657-4d80-9266-816ef680080e",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "I'd be in favor of a `newScalaFile` endpoint since looking at it, there is a lot that is shared. They can also both share the same params and just have kind be either trait, object, class, or worksheet.",
        "createdAt" : "2020-01-30T18:49:09Z",
        "updatedAt" : "2020-02-06T14:07:14Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2d6d3425-627f-49fc-b617-0d518c881011",
        "parentId" : "58a9ab16-6657-4d80-9266-816ef680080e",
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "Made one new command `new-scala-file` instead of previous two, and `MetalsNewScalaFileParams` case class with all it's needed arguments.",
        "createdAt" : "2020-01-31T18:18:06Z",
        "updatedAt" : "2020-02-06T14:07:14Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1e1175d6c0f716c374b1bc575ac9a28a3290743",
    "line" : null,
    "diffHunk" : "@@ -1262,6 +1260,55 @@ class MetalsLanguageServer(\n             val msg = s\"Invalid arguments: $args. Expecting: $argExample\"\n             Future.failed(new IllegalArgumentException(msg)).asJavaObject\n         }\n+      case ServerCommands.NewScalaWorksheet() =>\n+        val args = params.getArguments.asScala\n+        (args match {\n+          case Seq(JsonString.Option(directory), JsonString(name)) =>"
  },
  {
    "id" : "950a3180-3b8f-4970-8678-d5a1b7f0819c",
    "prId" : 1339,
    "comments" : [
      {
        "id" : "e6f804cf-d1a1-4a56-b7a3-7e6e10d1eaed",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Overall, I am not sure we need the unapplies here. You can just as easily match on JsonString.",
        "createdAt" : "2020-01-30T11:13:22Z",
        "updatedAt" : "2020-02-06T14:07:14Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1e1175d6c0f716c374b1bc575ac9a28a3290743",
    "line" : null,
    "diffHunk" : "@@ -1917,4 +1964,19 @@ class MetalsLanguageServer(\n     })\n   }\n \n+  private object JsonString {"
  },
  {
    "id" : "7db21d64-ad19-4ad3-b0a3-d3ba6a69090c",
    "prId" : 1339,
    "comments" : [
      {
        "id" : "4a7d48f3-316f-4d48-aeca-02b7ed019d33",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Why you have: `p: JsonPrimitive if p.isString()` and below you can match on JsonString? ",
        "createdAt" : "2020-01-30T11:13:58Z",
        "updatedAt" : "2020-02-06T14:07:14Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "77e49046-cfef-420f-a05a-13653659912e",
        "parentId" : "4a7d48f3-316f-4d48-aeca-02b7ed019d33",
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "when I match on JsonString below, I use this exactly method `unapply`.",
        "createdAt" : "2020-01-30T15:03:14Z",
        "updatedAt" : "2020-02-06T14:07:14Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1e1175d6c0f716c374b1bc575ac9a28a3290743",
    "line" : null,
    "diffHunk" : "@@ -1917,4 +1964,19 @@ class MetalsLanguageServer(\n     })\n   }\n \n+  private object JsonString {\n+    def unapply(json: Any): Option[String] = json match {\n+      case p: JsonPrimitive if p.isString() => Some(p.getAsString())"
  },
  {
    "id" : "92f73dc0-7416-4d8c-9cc9-231917d72b6e",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "b54ea65a-22e6-4db2-ade3-23159e914c77",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We can inline `referencesSync` - it's only used once",
        "createdAt" : "2020-02-09T16:26:34Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4a8355f9-0808-4ad8-8ad9-4087c4b6adda",
        "parentId" : "b54ea65a-22e6-4db2-ade3-23159e914c77",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "it is used twice",
        "createdAt" : "2020-02-11T07:48:37Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -1018,9 +1018,12 @@ class MetalsLanguageServer(\n       params: ReferenceParams\n   ): CompletableFuture[util.List[Location]] =\n     CancelTokens { _ =>\n-      referencesResult(params).locations.asJava\n+      referencesSync(params)"
  },
  {
    "id" : "2a8718a0-9311-4605-940b-8fc60aabb9de",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "8d51933d-960c-4d2b-8048-687610544c9b",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Can we move this logic to inside the provider class? We can just have overloaded method signatures if needed.\r\n\r\nThe same for the implementationProvider and other cases.",
        "createdAt" : "2020-02-17T11:42:30Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c47b9415-9d7a-420b-8215-a45827867684",
        "parentId" : "8d51933d-960c-4d2b-8048-687610544c9b",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "ok",
        "createdAt" : "2020-02-18T11:10:58Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -945,7 +948,11 @@ class MetalsLanguageServer(\n       params: TextDocumentPositionParams\n   ): CompletableFuture[util.List[DocumentHighlight]] =\n     CancelTokens { _ =>\n-      documentHighlightProvider.documentHighlight(params)\n+      val positionInFile = PositionInFile("
  },
  {
    "id" : "70e45f1e-ff74-4ef0-b657-2b4bef91fea3",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "54166798-56bc-4eaf-ab82-88f3645a9a13",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Let's just use `referencesResult` everywhere, it's already used in some places in tests, so it's better that we have a single such method.",
        "createdAt" : "2020-02-17T12:16:52Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -1018,9 +1025,12 @@ class MetalsLanguageServer(\n       params: ReferenceParams\n   ): CompletableFuture[util.List[Location]] =\n     CancelTokens { _ =>\n-      referencesResult(params).locations.asJava\n+      referencesSync(params)\n     }\n \n+  def referencesSync(params: ReferenceParams): util.List[Location] ="
  },
  {
    "id" : "4b8a7b95-b26a-42da-abce-5374be82b008",
    "prId" : 1407,
    "comments" : [
      {
        "id" : "2725cd17-35e7-4398-b9bd-6cd1f37b9554",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I just realized, can we use âfocusedDocument.isDefinedâ instead?",
        "createdAt" : "2020-02-08T10:57:05Z",
        "updatedAt" : "2020-02-08T11:27:15Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "25d85804-28a0-4648-87c3-a135c423855a",
        "parentId" : "2725cd17-35e7-4398-b9bd-6cd1f37b9554",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "ahhhh, good call. Yea, that is way simpler and also does the trick. Just pushed this up.",
        "createdAt" : "2020-02-08T11:27:32Z",
        "updatedAt" : "2020-02-08T11:27:32Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7d53556d44d3e8b652dfd614d3c25e2fcb27f4dc",
    "line" : null,
    "diffHunk" : "@@ -116,6 +116,7 @@ class MetalsLanguageServer(\n   private val openedFiles = new ActiveFiles(time)\n   private val messages = new Messages(config.icons)\n   private val languageClient = new DelegatingLanguageClient(NoopLanguageClient)\n+  private var clientSupportsDidFocus = false"
  },
  {
    "id" : "9eeba5d8-7486-4cc4-ab71-ba9a56a08bb8",
    "prId" : 1435,
    "comments" : [
      {
        "id" : "b7ac06ed-8aaf-4578-9681-ed22217ef220",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "OVERFLOW event usually had null as path, so it was never addressed. I tested it by creating 1k files automatically.",
        "createdAt" : "2020-02-15T21:20:35Z",
        "updatedAt" : "2020-02-17T16:18:06Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fb025d5358f8296b853bbb7ede33b89e75356b35",
    "line" : null,
    "diffHunk" : "@@ -857,33 +860,40 @@ class MetalsLanguageServer(\n   def didChangeWatchedFiles(\n       event: DirectoryChangeEvent\n   ): CompletableFuture[Unit] = {\n-    val path = AbsolutePath(event.path())\n-    val isScalaOrJava = path.isScalaOrJava\n-    if (isScalaOrJava && event.eventType() == EventType.DELETE) {\n-      diagnostics.didDelete(path)\n-      CompletableFuture.completedFuture(())\n-    } else if (isScalaOrJava && !savedFiles.isRecentlyActive(path)) {\n-      event.eventType() match {\n-        case EventType.CREATE =>\n-          buildTargets.onCreate(path)\n-        case _ =>\n-      }\n-      onChange(List(path)).asJava\n-    } else if (path.isSemanticdb) {\n+    if (event.eventType() == EventType.OVERFLOW && event.path() == null) {\n       CompletableFuture.completedFuture {"
  },
  {
    "id" : "7b276caf-a184-497e-bfe9-630edecc025c",
    "prId" : 1435,
    "comments" : [
      {
        "id" : "91431bcb-527c-49c3-94fa-9fefa66a6391",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Since it's for the test, it's better that we wait.",
        "createdAt" : "2020-02-17T14:53:50Z",
        "updatedAt" : "2020-02-17T16:18:06Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fb025d5358f8296b853bbb7ede33b89e75356b35",
    "line" : 19,
    "diffHunk" : "@@ -799,7 +802,7 @@ class MetalsLanguageServer(\n       } {\n         val event =\n           new DirectoryChangeEvent(EventType.MODIFY, generatedFile.toNIO, 1)\n-        didChangeWatchedFiles(event)\n+        didChangeWatchedFiles(event).get()"
  },
  {
    "id" : "f7d2c2cc-267c-41b6-9992-bc0a8895fe66",
    "prId" : 1435,
    "comments" : [
      {
        "id" : "abc5b18c-090f-4cc6-9836-67924474399c",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "It's now run in a Future in order not to block the event watcher",
        "createdAt" : "2020-02-17T15:47:31Z",
        "updatedAt" : "2020-02-17T16:18:06Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fb025d5358f8296b853bbb7ede33b89e75356b35",
    "line" : 70,
    "diffHunk" : "@@ -857,33 +860,39 @@ class MetalsLanguageServer(\n   def didChangeWatchedFiles(\n       event: DirectoryChangeEvent\n   ): CompletableFuture[Unit] = {\n-    val path = AbsolutePath(event.path())\n-    val isScalaOrJava = path.isScalaOrJava\n-    if (isScalaOrJava && event.eventType() == EventType.DELETE) {\n-      diagnostics.didDelete(path)\n-      CompletableFuture.completedFuture(())\n-    } else if (isScalaOrJava && !savedFiles.isRecentlyActive(path)) {\n-      event.eventType() match {\n-        case EventType.CREATE =>\n-          buildTargets.onCreate(path)\n-        case _ =>\n-      }\n-      onChange(List(path)).asJava\n-    } else if (path.isSemanticdb) {\n-      CompletableFuture.completedFuture {\n+    if (event.eventType() == EventType.OVERFLOW && event.path() == null) {\n+      Future {\n+        semanticDBIndexer.onOverflow()\n+      }.asJava\n+    } else {\n+      val path = AbsolutePath(event.path())\n+      val isScalaOrJava = path.isScalaOrJava\n+      if (isScalaOrJava && event.eventType() == EventType.DELETE) {\n+        diagnostics.didDelete(path)\n+        CompletableFuture.completedFuture(())\n+      } else if (isScalaOrJava && !savedFiles.isRecentlyActive(path)) {\n         event.eventType() match {\n-          case EventType.DELETE =>\n-            semanticDBIndexer.onDelete(event.path())\n-          case EventType.CREATE | EventType.MODIFY =>\n-            semanticDBIndexer.onChange(event.path())\n-          case EventType.OVERFLOW =>\n-            semanticDBIndexer.onOverflow(event.path())\n+          case EventType.CREATE =>\n+            buildTargets.onCreate(path)\n+          case _ =>\n         }\n+        onChange(List(path)).asJava\n+      } else if (path.isSemanticdb) {\n+        Future {"
  },
  {
    "id" : "3b6a3c77-c813-4a8f-a372-32c24124b7a0",
    "prId" : 1447,
    "comments" : [
      {
        "id" : "5a053f74-354f-4597-ad13-e9ac5420ab4d",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Maybe use a named parameter for `None` ",
        "createdAt" : "2020-02-19T16:10:52Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9d531d59-df0c-4625-bf69-5c32e3ab48cc",
        "parentId" : "5a053f74-354f-4597-ad13-e9ac5420ab4d",
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "done",
        "createdAt" : "2020-02-20T15:33:55Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "948961c16a2b407e9b6be832f69458537ee4bc93",
    "line" : null,
    "diffHunk" : "@@ -1266,27 +1273,18 @@ class MetalsLanguageServer(\n             Future.failed(new IllegalArgumentException(msg)).asJavaObject\n         }\n       case ServerCommands.NewScalaFile() =>\n-        val parser = new JsonParser.Of[MetalsNewScalaFileParams]\n         val args = params.getArguments.asScala\n         (args match {\n-          case Seq(parser.Jsonized(newScalaFileParams)) =>\n-            import newScalaFileParams._\n-            val result =\n-              newFilesProvider\n-                .createNewFile(Option(directory).map(new URI(_)), name, kind)\n-            result.onFailure {\n-              case NonFatal(e) =>\n-                languageClient\n-                  .showMessage(\n-                    MessageType.Error,\n-                    s\"Cannot create file:\\n ${e.toString()}\"\n-                  )\n-            }\n-            result\n+          case Seq(directory: JsonPrimitive) if directory.isString =>\n+            newFilesProvider.createNewFileDialog(\n+              Some(directory.getAsString()).map(new URI(_))\n+            )\n+          case Seq(_: JsonNull) =>\n+            newFilesProvider.createNewFileDialog(None)"
  },
  {
    "id" : "a613b680-4876-4d01-9b2a-0bb8824b7e02",
    "prId" : 1466,
    "comments" : [
      {
        "id" : "dad0d272-957d-4d72-8924-d87d7439f1d7",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Should we have any default here?",
        "createdAt" : "2020-02-26T17:47:53Z",
        "updatedAt" : "2020-04-03T11:50:57Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cee46912-f227-4152-96e8-01b81366ead3",
        "parentId" : "dad0d272-957d-4d72-8924-d87d7439f1d7",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Or maybe we can search through all build targets if project is not defined. In case there are two identical ones we can show a warning. `Running a.Main from 'A' project, but there is another main class with that name`",
        "createdAt" : "2020-02-26T17:53:05Z",
        "updatedAt" : "2020-04-03T11:50:57Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d72fc182a42fd127dd0593dfbb3028ac615338b9",
    "line" : null,
    "diffHunk" : "@@ -1302,6 +1302,28 @@ class MetalsLanguageServer(\n               new IllegalArgumentException(s\"Invalid arguments: $args.\")\n             )\n         }).asJavaObject\n+      case ServerCommands.ResolveDebugClass() =>\n+        //TODO: polish this\n+        val args = params.getArguments().asScala\n+        val je = args.head.asInstanceOf[JsonElement]\n+        val p = je.as[DebugClassParams].get\n+        val (target, clazz) = (for {\n+          //TODO: would be good to have error messages, maybe with use of Either\n+          info <- buildTargets.findByDisplayName(\n+            Option(p.project).getOrElse(\"root\")"
  },
  {
    "id" : "e13d4574-007d-4b82-96e1-dd1987eb3291",
    "prId" : 1466,
    "comments" : [
      {
        "id" : "2b3d0c9d-be8f-4605-b8a6-324286e7e411",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Is it possible to just run debug here instead of returning params?",
        "createdAt" : "2020-02-26T17:49:30Z",
        "updatedAt" : "2020-04-03T11:50:57Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d7d85950-b5be-472e-aa8f-be449874a839",
        "parentId" : "2b3d0c9d-be8f-4605-b8a6-324286e7e411",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "We may want to wrap the entire expression in a future to unblock future requests. ",
        "createdAt" : "2020-02-26T18:42:09Z",
        "updatedAt" : "2020-04-03T11:50:57Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ddc68cc9-2ebe-4086-bf3f-6137feffb79d",
        "parentId" : "2b3d0c9d-be8f-4605-b8a6-324286e7e411",
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "@tgodzik ,\r\nyeah, I'm actually thinking about maybe removing this new command and just adding another possible `Params` class(es) for `StartDebugAdapter`.\r\nSo beside `DebugSessionParams`, it could take something like\r\n```\r\nDebugSessionUnresolvedMainClassParams {\r\n\tmainClass: string,\r\n\tbuildTarget?: string,\r\n\targs?: string[],\r\n\tjvmOptions?: string[]\r\n}\r\n\r\nDebugSessionUnresolvedTestClassParams {\r\n\ttestClass: string,\r\n\tbuildTarget?: string\r\n}\r\n```\r\n\r\nalso, in future for https://github.com/scalameta/metals-feature-requests/issues/81 it could process `TextDocumentPositionParams` as well.\r\nWhat do you think?",
        "createdAt" : "2020-02-27T10:11:58Z",
        "updatedAt" : "2020-04-03T11:50:57Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d72fc182a42fd127dd0593dfbb3028ac615338b9",
    "line" : null,
    "diffHunk" : "@@ -1302,6 +1302,28 @@ class MetalsLanguageServer(\n               new IllegalArgumentException(s\"Invalid arguments: $args.\")\n             )\n         }).asJavaObject\n+      case ServerCommands.ResolveDebugClass() =>\n+        //TODO: polish this\n+        val args = params.getArguments().asScala\n+        val je = args.head.asInstanceOf[JsonElement]\n+        val p = je.as[DebugClassParams].get\n+        val (target, clazz) = (for {\n+          //TODO: would be good to have error messages, maybe with use of Either\n+          info <- buildTargets.findByDisplayName(\n+            Option(p.project).getOrElse(\"root\")\n+          )\n+          classes = buildTargetClasses.classesOf(info.getId())\n+          clazz <- classes.mainClasses.values.find(\n+            _.getClassName == p.mainClass\n+          )\n+        } yield (info.getId(), clazz)).get\n+\n+        val result = {\n+          val dataKind = b.DebugSessionParamsDataKind.SCALA_MAIN_CLASS\n+          val data = clazz.toJson\n+          new b.DebugSessionParams(List(target).asJava, dataKind, data)\n+        }\n+        Future { result }.asJavaObject"
  },
  {
    "id" : "1d650883-bcfe-485c-83ef-c6e0efb8a810",
    "prId" : 1466,
    "comments" : [
      {
        "id" : "2e2ec94b-0a28-4e48-9340-4dfaea2bad9f",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Let's maybe move those parsers to an object, no need to recreate them each time.",
        "createdAt" : "2020-03-31T15:45:41Z",
        "updatedAt" : "2020-04-03T11:50:57Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0acc1d2d-45f3-4b3d-97ed-5ab62fdd83bd",
        "parentId" : "2e2ec94b-0a28-4e48-9340-4dfaea2bad9f",
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "created `DebugParametersJsonParsers` with these parsers",
        "createdAt" : "2020-03-31T18:52:03Z",
        "updatedAt" : "2020-04-03T11:50:57Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d72fc182a42fd127dd0593dfbb3028ac615338b9",
    "line" : null,
    "diffHunk" : "@@ -1295,27 +1296,53 @@ class MetalsLanguageServer(\n         }.asJavaObject\n       case ServerCommands.StartDebugAdapter() =>\n         val args = params.getArguments.asScala\n-        args match {\n-          case Seq(param: JsonElement) =>\n-            val session = for {\n-              params <- Future.fromTry(param.as[b.DebugSessionParams])\n-              server <- DebugServer.start(\n-                params,\n-                definitionProvider,\n-                buildTargets,\n-                buildServer\n-              )\n-            } yield {\n-              cancelables.add(server)\n-              DebugSession(server.sessionName, server.uri.toString)\n-            }\n-\n-            session.asJavaObject\n+        val debugSessionParamsParser = new JsonParser.Of[b.DebugSessionParams]"
  },
  {
    "id" : "764f1722-7822-431c-a2b0-18753165b0f8",
    "prId" : 1466,
    "comments" : [
      {
        "id" : "56e6472a-ea3b-42c9-9d85-0c1fe3ae5ccb",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "This is unused now.",
        "createdAt" : "2020-04-01T08:45:10Z",
        "updatedAt" : "2020-04-03T11:50:57Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f92f82cc-3588-4498-9e15-4603a7595cbe",
        "parentId" : "56e6472a-ea3b-42c9-9d85-0c1fe3ae5ccb",
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "thank you! fixed",
        "createdAt" : "2020-04-02T14:20:11Z",
        "updatedAt" : "2020-04-03T11:50:57Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d72fc182a42fd127dd0593dfbb3028ac615338b9",
    "line" : null,
    "diffHunk" : "@@ -122,6 +123,8 @@ class MetalsLanguageServer(\n   private val languageClient = new DelegatingLanguageClient(NoopLanguageClient)\n   var userConfig: UserConfiguration = UserConfiguration()\n   val buildTargets: BuildTargets = new BuildTargets()\n+  private val buildTargetClassesFinder ="
  },
  {
    "id" : "ebbc3f8b-d31f-4d54-b7cd-2d3ffdcdac82",
    "prId" : 1473,
    "comments" : [
      {
        "id" : "56673cd7-2031-4111-8eed-715ee0705644",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Could we invoke `indexSymbolDefinition` inside the foreach above? I think we have all the needed information and skip the additional steps.\r\n",
        "createdAt" : "2020-03-02T13:04:34Z",
        "updatedAt" : "2020-03-04T14:09:01Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b53d594c-7a58-4cc1-b2d4-59e3533991ce",
        "parentId" : "56673cd7-2031-4111-8eed-715ee0705644",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Ok, I think did change is fine here, but added a comment in Docstrings",
        "createdAt" : "2020-03-02T13:49:36Z",
        "updatedAt" : "2020-03-04T14:09:01Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d4883f7d7ca5f330ddb180759e30d64e9622bf84",
    "line" : null,
    "diffHunk" : "@@ -1579,6 +1579,7 @@ class MetalsLanguageServer(\n           }\n       }\n       workspaceSymbols.didChange(source, symbols)\n+      symbolDocs.didChange(symbols.map(_.symbol))"
  },
  {
    "id" : "6cc75742-7066-4f8c-9fc8-46add1fbf176",
    "prId" : 1487,
    "comments" : [
      {
        "id" : "855d1031-9dc7-49f7-83a9-3d056e03c664",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Should be private",
        "createdAt" : "2020-03-12T11:00:32Z",
        "updatedAt" : "2020-03-24T16:45:28Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "55838e6c9f4127bc8d06a8d31a6df496a0b729a8",
    "line" : null,
    "diffHunk" : "@@ -162,6 +164,8 @@ class MetalsLanguageServer(\n   private var bloopServers: BloopServers = _\n   private var bspServers: BspServers = _\n   private var codeLensProvider: CodeLensProvider = _\n+  private var superMethodProvider: SuperMethodProvider = _\n+  var goToSuperMethod: GoToSuperMethod = _"
  },
  {
    "id" : "1283a7ad-cfe1-4189-a9d3-410e8d8ae78e",
    "prId" : 1487,
    "comments" : [
      {
        "id" : "b2bd12d8-1f18-4c32-8a2a-2b8434199970",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Can't this just be an object? No need to define it here.",
        "createdAt" : "2020-03-12T11:01:42Z",
        "updatedAt" : "2020-03-24T16:45:28Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "55838e6c9f4127bc8d06a8d31a6df496a0b729a8",
    "line" : null,
    "diffHunk" : "@@ -383,6 +378,27 @@ class MetalsLanguageServer(\n       buffers,\n       definitionProvider\n     )\n+    superMethodProvider = new SuperMethodProvider()"
  },
  {
    "id" : "b208462f-3e36-4487-bb73-23a1400f5852",
    "prId" : 1491,
    "comments" : [
      {
        "id" : "1e012b76-f665-4345-93e8-6e19e8ad2c92",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Will this trigger a warning if I'm running a custom version of Bloop locally? Ideally, it would be good to only trigger this when the user has explicitly configured a bloop version through the settings before (I personally don't change this setting).",
        "createdAt" : "2020-03-12T08:46:51Z",
        "updatedAt" : "2020-03-12T10:12:33Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bc5d99c0-9f94-4d3e-ad03-0a8d86fe7dd5",
        "parentId" : "1e012b76-f665-4345-93e8-6e19e8ad2c92",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed!",
        "createdAt" : "2020-03-12T10:22:06Z",
        "updatedAt" : "2020-03-12T10:22:06Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cbbdead8d9342cae1e125b6d8574ec11521afe81",
    "line" : 7,
    "diffHunk" : "@@ -838,12 +838,13 @@ class MetalsLanguageServer(\n           if (userConfig.symbolPrefixes != old.symbolPrefixes) {\n             compilers.restartAll()\n           }\n-          if (userConfig.bloopVersion != old.bloopVersion) {\n+          val expectedBloopVersion = userConfig.currentBloopVersion\n+          val correctVersionRunning =\n+            buildServer.map(_.version).contains(expectedBloopVersion)"
  },
  {
    "id" : "94e435aa-3d86-4e43-84f7-637b9649be75",
    "prId" : 1523,
    "comments" : [
      {
        "id" : "ac5bba04-ccba-473d-a8c9-44cc10b9d46f",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Needed for folding option only.",
        "createdAt" : "2020-03-25T15:46:22Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f82065c5-8aa5-4900-adeb-3d664ca2bf2c",
        "parentId" : "ac5bba04-ccba-473d-a8c9-44cc10b9d46f",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "Question: what do you mean?",
        "createdAt" : "2020-03-31T14:49:32Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "da19a990-74dc-46d4-8be9-ca485ab09dab",
        "parentId" : "ac5bba04-ccba-473d-a8c9-44cc10b9d46f",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Folding was moved into the presentation compiler, so we need to update the presentation compiler config.",
        "createdAt" : "2020-04-03T17:00:43Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1142490703f832961ac0df1debd14b4f3b12ce7d",
    "line" : null,
    "diffHunk" : "@@ -238,6 +240,7 @@ class MetalsLanguageServer(\n       () => userConfig,\n       config\n     )\n+    metalsServerConfig.getAndUpdate(config => config.fromInitParams(params))"
  },
  {
    "id" : "da156b6b-cff2-49e7-afe9-969400898a9b",
    "prId" : 1523,
    "comments" : [
      {
        "id" : "31ee111b-637f-48e6-b3d1-c64ca3b89ce9",
        "parentId" : null,
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "no longer used",
        "createdAt" : "2020-03-31T14:45:36Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1142490703f832961ac0df1debd14b4f3b12ce7d",
    "line" : null,
    "diffHunk" : "@@ -163,7 +169,6 @@ class MetalsLanguageServer(\n   private var diagnostics: Diagnostics = _\n   private var warnings: Warnings = _\n   private var trees: Trees = _"
  },
  {
    "id" : "eea1b8ef-c5f7-42d8-b0be-0a41c70e4803",
    "prId" : 1538,
    "comments" : [
      {
        "id" : "0ec5e233-bc4c-45c9-840a-ca3a9476ae65",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Shouldn't this just be a var and initialized the same way as others when we have the `workspace` parameter?\r\n\r\nGranted, it's not perfect, but until a solid refactor I think it's better that we create all the same way.  Also, some of the used parameters are vals, so they will really never change.",
        "createdAt" : "2020-03-31T16:33:35Z",
        "updatedAt" : "2020-05-21T11:17:43Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "49668e24-0eb2-42f0-993f-c06c6be2c95c",
        "parentId" : "0ec5e233-bc4c-45c9-840a-ca3a9476ae65",
        "author" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "body" : "Yes, good point.",
        "createdAt" : "2020-04-02T17:24:08Z",
        "updatedAt" : "2020-05-21T11:17:43Z",
        "lastEditedBy" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "920bd8a5-2c38-4ba7-9a26-df9aabcff439",
        "parentId" : "0ec5e233-bc4c-45c9-840a-ca3a9476ae65",
        "author" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "body" : "Fixed.",
        "createdAt" : "2020-04-05T22:12:36Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0681fa0b1417b7ac622101d279667c6900a2506e",
    "line" : null,
    "diffHunk" : "@@ -157,6 +161,22 @@ class MetalsLanguageServer(\n       parseTrees ::\n       compilations.pauseables\n   )\n+  private val ammonite = new Ammonite("
  },
  {
    "id" : "cf80faa7-ad43-44dd-a0f2-05cf4318b798",
    "prId" : 1538,
    "comments" : [
      {
        "id" : "db5620f3-4731-456b-8a5e-19c513e0af43",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Maybe we could have this:\r\n```scala\r\n    val toIndexSource = targetOpt\r\n      .flatMap(ammonite.generatedScalaPath(_, source))\r\n      .getOrElse(source)\r\n```\r\nin a separate function and just use here to get the real source item?",
        "createdAt" : "2020-03-31T17:41:32Z",
        "updatedAt" : "2020-05-21T11:17:43Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "56ef854b-9d3f-4129-8a11-40709a34efb7",
        "parentId" : "db5620f3-4731-456b-8a5e-19c513e0af43",
        "author" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-04-05T22:17:53Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0681fa0b1417b7ac622101d279667c6900a2506e",
    "line" : 204,
    "diffHunk" : "@@ -1572,7 +1583,7 @@ class MetalsLanguageServer(\n       targets.asScala.foreach { target =>\n         buildTargets.linkSourceFile(target, source)\n       }\n-      indexSourceFile(source, Some(sourceItem))\n+      indexSourceFile(source, Some(sourceItem), targets.asScala.headOption)"
  },
  {
    "id" : "02f9952f-1d37-4488-8508-52b4fd84c3dc",
    "prId" : 1538,
    "comments" : [
      {
        "id" : "a05abe10-04cf-4c6a-b852-5c3bb29d3da5",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Maybe just `sourceToIndex` ? And it can be moved to indexWorkspaceSources to have:\r\n```\r\n  private def indexSourceFile(\r\n      source: AbsolutePath,\r\n      sourceItem: Option[AbsolutePath]\r\n      sourceToIndex: Option[AbsolutePath]\r\n  ): Unit = {\r\n```",
        "createdAt" : "2020-04-09T10:46:25Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a153178f-503e-47e8-8736-fc829376a04c",
        "parentId" : "a05abe10-04cf-4c6a-b852-5c3bb29d3da5",
        "author" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "body" : "I'm not sure it can be moved to `indexWorkspaceSources`, as `indexSourceFile` is called by both `indexWorkspaceSources` and `reindexWorkspaceSources`.",
        "createdAt" : "2020-04-11T14:03:20Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d6395e5e-4778-408c-9da0-e7b1caa7ece6",
        "parentId" : "a05abe10-04cf-4c6a-b852-5c3bb29d3da5",
        "author" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "body" : "I changed `toIndexSource` to `sourceToIndex`, it's clearer this way, yes.",
        "createdAt" : "2020-04-11T15:35:39Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0681fa0b1417b7ac622101d279667c6900a2506e",
    "line" : null,
    "diffHunk" : "@@ -1589,17 +1602,28 @@ class MetalsLanguageServer(\n       path <- paths.iterator\n       if path.isScalaOrJava\n     } {\n-      indexSourceFile(path, buildTargets.inverseSourceItem(path))\n+      indexSourceFile(path, buildTargets.inverseSourceItem(path), None)\n     }\n   }\n \n+  private def toIndexSource(\n+      source: AbsolutePath,\n+      targetOpt: Option[b.BuildTargetIdentifier]\n+  ): AbsolutePath =\n+    targetOpt\n+      .flatMap(ammonite.generatedScalaPath(_, source))\n+      .getOrElse(source)\n+\n   private def indexSourceFile(\n       source: AbsolutePath,\n-      sourceItem: Option[AbsolutePath]\n+      sourceItem: Option[AbsolutePath],\n+      targetOpt: Option[b.BuildTargetIdentifier]\n   ): Unit = {\n+\n     try {\n+      val toIndexSource0 = toIndexSource(source, targetOpt)"
  },
  {
    "id" : "12199acd-b34d-4815-aff2-2638f43ec90d",
    "prId" : 1538,
    "comments" : [
      {
        "id" : "4b79c662-5da0-447f-80d5-ab9dd5914de4",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Could we reindex only the Ammonite targets when needed? ",
        "createdAt" : "2020-04-09T11:00:44Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7baca17e-aa68-4640-a462-90c8fb8f0d1d",
        "parentId" : "4b79c662-5da0-447f-80d5-ab9dd5914de4",
        "author" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "body" : "I don't knowâ¦ It seems that would require being able to remove particular build targets from the indices (only the Ammonite ones that changed when (re)importing Ammonite scripts, or only the main build ones when (re)importing the main build), before adding them back with updated parameters. I don't know if that's do-able.",
        "createdAt" : "2020-04-11T14:06:47Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0681fa0b1417b7ac622101d279667c6900a2506e",
    "line" : 284,
    "diffHunk" : "@@ -1708,7 +1729,10 @@ class MetalsLanguageServer(\n     scribe.info(s\"memory: $footprint\")\n   }\n \n-  private def indexWorkspace(i: ImportedBuild): Unit = {\n+  private var lastImportedBuild = ImportedBuild.empty"
  },
  {
    "id" : "eeeb4139-1031-4215-9dfc-e24a2709dc1f",
    "prId" : 1538,
    "comments" : [
      {
        "id" : "79275d31-a2ef-4cd4-8aa0-203f3ce4dd2b",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "The compilation has been moved after indexing, you should remove it here.",
        "createdAt" : "2020-05-19T14:55:28Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "78c7cd21-8125-4471-9d6e-b3a3d6a7a987",
        "parentId" : "79275d31-a2ef-4cd4-8aa0-203f3ce4dd2b",
        "author" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "body" : "Fixed.",
        "createdAt" : "2020-05-20T11:35:48Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0681fa0b1417b7ac622101d279667c6900a2506e",
    "line" : null,
    "diffHunk" : "@@ -1551,41 +1584,30 @@ class MetalsLanguageServer(\n         value.shutdown()\n     }\n   }\n+\n   private def connectToNewBuildServer(\n       build: BuildServerConnection\n   ): Future[BuildChange] = {\n     scribe.info(s\"Connected to Build server v${build.version}\")\n     cancelables.add(build)\n     compilers.cancel()\n     buildServer = Some(build)\n-    val importedBuild = timed(\"imported build\") {\n-      for {\n-        workspaceBuildTargets <- build.workspaceBuildTargets()\n-        ids = workspaceBuildTargets.getTargets.map(_.getId)\n-        scalacOptions <- build\n-          .buildTargetScalacOptions(new b.ScalacOptionsParams(ids))\n-        sources <- build\n-          .buildTargetSources(new b.SourcesParams(ids))\n-        dependencySources <- build\n-          .buildTargetDependencySources(new b.DependencySourcesParams(ids))\n-      } yield {\n-        ImportedBuild(\n-          workspaceBuildTargets,\n-          scalacOptions,\n-          sources,\n-          dependencySources,\n-          build.version,\n-          build.name\n-        )\n-      }\n+    val importedBuild0 = timed(\"imported build\") {\n+      MetalsLanguageServer.importedBuild(build)\n     }\n     for {\n-      i <- statusBar.trackFuture(\"Importing build\", importedBuild)\n-      _ <- profiledIndexWorkspace(\n-        () => indexWorkspace(i),\n-        () => indexingPromise.trySuccess(())\n+      i <- statusBar.trackFuture(\"Importing build\", importedBuild0)\n+      _ = {\n+        lastImportedBuild = i\n+      }\n+      _ <- profiledIndexWorkspace(() => doctor.check(build.name, build.version))\n+      _ = checkRunningBloopVersion(build.version)\n+      _ <- Future.sequence[Unit, List]("
  },
  {
    "id" : "33776431-145f-472d-b5a0-c7a3770bb712",
    "prId" : 1538,
    "comments" : [
      {
        "id" : "33e06a8d-1e40-4d5e-b749-2ac243448a76",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Could we check if it's an ammonite script first? so that we don't need to search if it's not needed.",
        "createdAt" : "2020-05-19T15:08:49Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8f739041-078a-423e-b709-8546d4f6f341",
        "parentId" : "33e06a8d-1e40-4d5e-b749-2ac243448a76",
        "author" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "body" : "Fixed.",
        "createdAt" : "2020-05-20T11:41:10Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0681fa0b1417b7ac622101d279667c6900a2506e",
    "line" : null,
    "diffHunk" : "@@ -2039,12 +2072,44 @@ class MetalsLanguageServer(\n   }\n \n   private def newSymbolIndex(): OnDemandSymbolIndex = {\n-    OnDemandSymbolIndex(onError = {\n-      case e @ (_: ParseException | _: TokenizeException) =>\n-        scribe.error(e.toString)\n-      case NonFatal(e) =>\n-        scribe.error(\"unexpected error during source scanning\", e)\n-    })\n+    OnDemandSymbolIndex(\n+      onError = {\n+        case e @ (_: ParseException | _: TokenizeException) =>\n+          scribe.error(e.toString)\n+        case NonFatal(e) =>\n+          scribe.error(\"unexpected error during source scanning\", e)\n+      },\n+      toIndexSource = path => {\n+        for {\n+          target <- buildTargets.sourceBuildTargets(path).headOption"
  },
  {
    "id" : "061be6ec-62dc-4a7b-afcb-b7777c408413",
    "prId" : 1611,
    "comments" : [
      {
        "id" : "0649b875-d676-46a1-ab20-e9e02abf62f4",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "This was actually moved inside the ScalaPresentationCompiler, so you will need to remove it from here.",
        "createdAt" : "2020-04-20T12:14:23Z",
        "updatedAt" : "2020-05-01T10:10:22Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b46663d2adf7dc3aaeb94c3d98b5ce7234add6b6",
    "line" : null,
    "diffHunk" : "@@ -180,8 +180,9 @@ class MetalsLanguageServer(\n   private var renameProvider: RenameProvider = _\n   private var documentHighlightProvider: DocumentHighlightProvider = _\n   private var formattingProvider: FormattingProvider = _\n-  private var multilineStringFormattingProvider\n-      : MultilineStringFormattingProvider = _\n+  private val multilineStringFormattingProvider"
  },
  {
    "id" : "4e09c093-33ec-4f43-9ebe-19d4ea504bc2",
    "prId" : 1674,
    "comments" : [
      {
        "id" : "0aae5bd5-a961-4296-9242-d6f96945bdf0",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Maybe we can just do:\r\n```\r\n clientConfig.clientExperimentalCapabilities= ClientExperimentalCapabilities.from(params.getCapabilities)\r\n clientConfig.initializationOptions = InitializationOptions.from(params)\r\n```\r\n\r\nwe will not need the additional configure methods.",
        "createdAt" : "2020-05-01T15:34:45Z",
        "updatedAt" : "2020-05-01T16:10:33Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b43e59be-dd39-4ff4-8e71-03a382a20000",
        "parentId" : "0aae5bd5-a961-4296-9242-d6f96945bdf0",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Ahhh, that's true.",
        "createdAt" : "2020-05-01T16:07:10Z",
        "updatedAt" : "2020-05-01T16:10:33Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2d61baa4f3f23f311fc6754cf97d955a84d0ac9b",
    "line" : null,
    "diffHunk" : "@@ -238,21 +238,19 @@ class MetalsLanguageServer(\n     scribe.info(\n       s\"started: Metals version ${BuildInfo.metalsVersion} in workspace '$workspace'\"\n     )\n-    clientExperimentalCapabilities =\n-      ClientExperimentalCapabilities.from(params.getCapabilities)\n-    initializationOptions = InitializationOptions.from(params)\n \n-    languageClient.configure(clientExperimentalCapabilities)\n-    languageClient.configure(initializationOptions)\n+    languageClient.configure("
  },
  {
    "id" : "149b4273-bc76-4952-bc9c-6a2046c7a03c",
    "prId" : 1677,
    "comments" : [
      {
        "id" : "1a40817c-477f-4676-adbc-3219c744cdc6",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Moved compiling after recover, since this caused to disconnect the build server if anything happened during the compilation.",
        "createdAt" : "2020-04-29T17:23:13Z",
        "updatedAt" : "2020-05-04T13:57:13Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "38751291a84f683f8d8eb60ed8a73ce8657936c9",
    "line" : null,
    "diffHunk" : "@@ -1483,33 +1487,56 @@ class MetalsLanguageServer(\n   }\n \n   private def autoConnectToBuildServer(): Future[BuildChange] = {\n-    for {\n-      _ <- disconnectOldBuildServer()\n-      maybeBuild <- timed(\"connected to build server\") {\n-        if (buildTools.isBloop) bloopServers.newServer(userConfig)\n-        else bspServers.newServer()\n-      }\n-      result <- maybeBuild match {\n-        case Some(build) =>\n-          connectToNewBuildServer(build)\n-        case None =>\n-          Future.successful(BuildChange.None)\n-      }\n-      _ = {\n-        treeView.init()\n+    def compileAllOpen: BuildChange => Future[BuildChange] = {\n+      case change if !change.isFailed =>\n+        Future\n+          .sequence[Unit, List](\n+            compilations\n+              .cascadeCompileFiles(buffers.open.toSeq)\n+              .ignoreValue ::\n+              compilers.load(buffers.open.toSeq) ::\n+              Nil\n+          )\n+          .map(_ => change)\n+      case other => Future.successful(other)\n+    }\n+\n+    {\n+      for {\n+        _ <- disconnectOldBuildServer()\n+        maybeBuild <- timed(\"connected to build server\") {\n+          if (buildTools.isBloop) bloopServers.newServer(userConfig)\n+          else bspServers.newServer()\n+        }\n+        result <- maybeBuild match {\n+          case Some(build) =>\n+            val result = connectToNewBuildServer(build)\n+            build.onReconnection { reconnected =>\n+              connectToNewBuildServer(reconnected)\n+                .flatMap(compileAllOpen)\n+                .ignoreValue\n+            }\n+            result\n+          case None =>\n+            Future.successful(BuildChange.None)\n+        }\n+        _ = {\n+          treeView.init()\n+        }\n+      } yield result\n+    }.recover {\n+        case NonFatal(e) =>\n+          disconnectOldBuildServer()\n+          val message =\n+            \"Failed to connect with build server, no functionality will work.\"\n+          val details = \" See logs for more details.\"\n+          languageClient.showMessage(\n+            new MessageParams(MessageType.Error, message + details)\n+          )\n+          scribe.error(message, e)\n+          BuildChange.Failed\n       }\n-    } yield result\n-  }.recover {\n-    case NonFatal(e) =>\n-      disconnectOldBuildServer()\n-      val message =\n-        \"Failed to connect with build server, no functionality will work.\"\n-      val details = \" See logs for more details.\"\n-      languageClient.showMessage(\n-        new MessageParams(MessageType.Error, message + details)\n-      )\n-      scribe.error(message, e)\n-      BuildChange.Failed\n+      .flatMap(compileAllOpen)"
  },
  {
    "id" : "35569739-35ea-4256-a9d0-1e78b52a063f",
    "prId" : 1677,
    "comments" : [
      {
        "id" : "97879056-3113-4c54-b473-bc4f156791cd",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We also compile, which will effectively just move all the old artifacts to the new BSP directory.",
        "createdAt" : "2020-04-29T17:23:39Z",
        "updatedAt" : "2020-05-04T13:57:13Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "38751291a84f683f8d8eb60ed8a73ce8657936c9",
    "line" : null,
    "diffHunk" : "@@ -1483,33 +1487,56 @@ class MetalsLanguageServer(\n   }\n \n   private def autoConnectToBuildServer(): Future[BuildChange] = {\n-    for {\n-      _ <- disconnectOldBuildServer()\n-      maybeBuild <- timed(\"connected to build server\") {\n-        if (buildTools.isBloop) bloopServers.newServer(userConfig)\n-        else bspServers.newServer()\n-      }\n-      result <- maybeBuild match {\n-        case Some(build) =>\n-          connectToNewBuildServer(build)\n-        case None =>\n-          Future.successful(BuildChange.None)\n-      }\n-      _ = {\n-        treeView.init()\n+    def compileAllOpen: BuildChange => Future[BuildChange] = {\n+      case change if !change.isFailed =>\n+        Future\n+          .sequence[Unit, List](\n+            compilations\n+              .cascadeCompileFiles(buffers.open.toSeq)\n+              .ignoreValue ::\n+              compilers.load(buffers.open.toSeq) ::\n+              Nil\n+          )\n+          .map(_ => change)\n+      case other => Future.successful(other)\n+    }\n+\n+    {\n+      for {\n+        _ <- disconnectOldBuildServer()\n+        maybeBuild <- timed(\"connected to build server\") {\n+          if (buildTools.isBloop) bloopServers.newServer(userConfig)\n+          else bspServers.newServer()\n+        }\n+        result <- maybeBuild match {\n+          case Some(build) =>\n+            val result = connectToNewBuildServer(build)\n+            build.onReconnection { reconnected =>\n+              connectToNewBuildServer(reconnected)\n+                .flatMap(compileAllOpen)"
  },
  {
    "id" : "6c7ded45-4314-458a-aeea-212d41c97c43",
    "prId" : 1677,
    "comments" : [
      {
        "id" : "529ae120-7c22-4156-9806-775adb777820",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "could be `compileOpenFiles` at first I was not 100% if it meant open files.",
        "createdAt" : "2020-05-04T09:12:41Z",
        "updatedAt" : "2020-05-04T13:57:13Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cd99377c-8e91-4927-8581-fbbed8002ee4",
        "parentId" : "529ae120-7c22-4156-9806-775adb777820",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "changed to `compileAllOpenFiles`",
        "createdAt" : "2020-05-04T10:21:53Z",
        "updatedAt" : "2020-05-04T13:57:13Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "38751291a84f683f8d8eb60ed8a73ce8657936c9",
    "line" : null,
    "diffHunk" : "@@ -1483,33 +1488,56 @@ class MetalsLanguageServer(\n   }\n \n   private def autoConnectToBuildServer(): Future[BuildChange] = {\n-    for {\n-      _ <- disconnectOldBuildServer()\n-      maybeBuild <- timed(\"connected to build server\") {\n-        if (buildTools.isBloop) bloopServers.newServer(userConfig)\n-        else bspServers.newServer()\n-      }\n-      result <- maybeBuild match {\n-        case Some(build) =>\n-          connectToNewBuildServer(build)\n-        case None =>\n-          Future.successful(BuildChange.None)\n-      }\n-      _ = {\n-        treeView.init()\n+    def compileAllOpen: BuildChange => Future[BuildChange] = {"
  },
  {
    "id" : "4497048b-b833-457e-a192-6a77f9244115",
    "prId" : 1717,
    "comments" : [
      {
        "id" : "b3a683fd-5bbf-4eb7-86ae-dbcd8a812055",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "So probably the best that we can do currently is add an option to MetalsServerConfig like:\r\n```scala\r\n  allowMultilineStringFormatting = MetalsServerConfig.binaryOption(\r\n      \"metals.allow-multiline-string-formatting\",\r\n      default = true\r\n    ),\r\n```\r\nAnd then:\r\n```scala      \r\n\r\ncapabilities.setDocumentRangeFormattingProvider(initialConfig.allowMultilineStringFormatting)\r\n```",
        "createdAt" : "2020-05-08T17:32:59Z",
        "updatedAt" : "2020-05-12T14:12:17Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b2e25e3cd0a9f38ceefc59fbff6f94d7e31be601",
    "line" : 5,
    "diffHunk" : "@@ -541,7 +541,9 @@ class MetalsLanguageServer(\n       capabilities.setDocumentOnTypeFormattingProvider(\n         new DocumentOnTypeFormattingOptions(\"\\n\")\n       )\n-      capabilities.setDocumentRangeFormattingProvider(true)\n+      capabilities.setDocumentRangeFormattingProvider("
  },
  {
    "id" : "d764495d-a65f-4ad5-9960-3fb010e9e156",
    "prId" : 1758,
    "comments" : [
      {
        "id" : "6da10ded-4856-4624-bff9-a1e921fcefcb",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "`head :: tail` probably not needed.",
        "createdAt" : "2020-05-18T10:38:08Z",
        "updatedAt" : "2020-05-21T13:59:54Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f3735201-75ad-454c-aac0-e3f6515a2946",
        "parentId" : "6da10ded-4856-4624-bff9-a1e921fcefcb",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "True, good point.",
        "createdAt" : "2020-05-18T11:58:13Z",
        "updatedAt" : "2020-05-21T13:59:54Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "82833ad1c0108993cd84f5b3b8aba65d1107aace",
    "line" : null,
    "diffHunk" : "@@ -1406,44 +1406,51 @@ class MetalsLanguageServer(\n         .orNull\n     }.asJava\n \n-  private def supportedBuildTool(): Option[BuildTool] =\n+  private def supportedBuildTool(): Future[Option[BuildTool]] =\n     buildTools.loadSupported match {\n-      case Some(buildTool) =>\n+      case Nil => {\n+        if (!buildTools.isAutoConnectable) {\n+          warnings.noBuildTool()\n+        }\n+        Future(None)\n+      }\n+      case buildTool :: Nil => {\n         val isCompatibleVersion = SemVer.isCompatibleVersion(\n           buildTool.minimumVersion,\n           buildTool.version\n         )\n         if (isCompatibleVersion) {\n-          Some(buildTool)\n+          Future(Some(buildTool))\n         } else {\n           scribe.warn(s\"Unsupported $buildTool version ${buildTool.version}\")\n           languageClient.showMessage(\n             Messages.IncompatibleBuildToolVersion.params(buildTool)\n           )\n-          None\n-        }\n-      case None =>\n-        if (!buildTools.isAutoConnectable) {\n-          warnings.noBuildTool()\n+          Future(None)\n         }\n-        None\n+      }\n+      case buildTools @ head :: tail =>"
  },
  {
    "id" : "dba20217-6385-48f6-8949-ec9994c00e4d",
    "prId" : 1758,
    "comments" : [
      {
        "id" : "a5987ee9-ba49-4d2d-859c-3811ae5e0004",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Maybe we should filter the ones with incompatible versions and show a warning for those?",
        "createdAt" : "2020-05-18T10:40:39Z",
        "updatedAt" : "2020-05-21T13:59:54Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c64c9aed-ef3f-42a3-a853-713adde68b33",
        "parentId" : "a5987ee9-ba49-4d2d-859c-3811ae5e0004",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "So one thing I thought about while doing this is in a situation where a user has an sbt and a mill file for example, I think it's important for the choice to take priority. Because let's say they are on an unsupported sbt version, but they want sbt, then it's probably better for them to choose sbt and then get a warning and \"no build tool\" message rather than have sbt filtered out, and mill chosen even if that's not what they want.\r\n\r\nWhat do you think?",
        "createdAt" : "2020-05-18T11:57:29Z",
        "updatedAt" : "2020-05-21T13:59:54Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3734a75d-049b-4ed0-b3ea-ca9e63f18c9f",
        "parentId" : "a5987ee9-ba49-4d2d-859c-3811ae5e0004",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Sure, that's probably better.",
        "createdAt" : "2020-05-18T13:35:51Z",
        "updatedAt" : "2020-05-21T13:59:54Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "82833ad1c0108993cd84f5b3b8aba65d1107aace",
    "line" : 37,
    "diffHunk" : "@@ -1406,44 +1406,51 @@ class MetalsLanguageServer(\n         .orNull\n     }.asJava\n \n-  private def supportedBuildTool(): Option[BuildTool] =\n+  private def supportedBuildTool(): Future[Option[BuildTool]] =\n     buildTools.loadSupported match {"
  },
  {
    "id" : "a21f294e-2b76-4e45-96ff-e07fab0c03c3",
    "prId" : 1758,
    "comments" : [
      {
        "id" : "cbc9b8f6-290f-44ea-9d54-e0e7314bfdb3",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Can we extract `isCompatibleVersion` to a function (maybe just inner function) and use it both for 2. and 3. case ? This way we will not need to do it in `checkForChosenBuildTool`",
        "createdAt" : "2020-05-19T17:13:28Z",
        "updatedAt" : "2020-05-21T13:59:54Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1b882e48-8657-49d1-a28c-425d5e63db84",
        "parentId" : "cbc9b8f6-290f-44ea-9d54-e0e7314bfdb3",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Yup, done.",
        "createdAt" : "2020-05-19T17:53:54Z",
        "updatedAt" : "2020-05-21T13:59:54Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "82833ad1c0108993cd84f5b3b8aba65d1107aace",
    "line" : null,
    "diffHunk" : "@@ -1406,44 +1406,51 @@ class MetalsLanguageServer(\n         .orNull\n     }.asJava\n \n-  private def supportedBuildTool(): Option[BuildTool] =\n+  private def supportedBuildTool(): Future[Option[BuildTool]] =\n     buildTools.loadSupported match {\n-      case Some(buildTool) =>\n+      case Nil => {\n+        if (!buildTools.isAutoConnectable) {\n+          warnings.noBuildTool()\n+        }\n+        Future(None)\n+      }\n+      case buildTool :: Nil => {\n         val isCompatibleVersion = SemVer.isCompatibleVersion(\n           buildTool.minimumVersion,\n           buildTool.version\n         )\n         if (isCompatibleVersion) {\n-          Some(buildTool)\n+          Future(Some(buildTool))\n         } else {\n           scribe.warn(s\"Unsupported $buildTool version ${buildTool.version}\")\n           languageClient.showMessage(\n             Messages.IncompatibleBuildToolVersion.params(buildTool)\n           )\n-          None\n-        }\n-      case None =>\n-        if (!buildTools.isAutoConnectable) {\n-          warnings.noBuildTool()\n+          Future(None)\n         }\n-        None\n+      }\n+      case buildTools =>\n+        bloopInstall.checkForChosenBuildTool(buildTools)"
  },
  {
    "id" : "1c313f75-2eba-40f0-8217-0f17b479ac91",
    "prId" : 1784,
    "comments" : [
      {
        "id" : "564a27bd-2864-48e0-969a-3782f1e58c83",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "This is needed so that we are able to be able to figure out what the original source roots were and and find their path relative to workspace root",
        "createdAt" : "2020-05-29T16:32:09Z",
        "updatedAt" : "2020-05-29T17:13:56Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "96739e67fcaac88a3d90e0225eec023b4b4e8293",
    "line" : 5,
    "diffHunk" : "@@ -1801,7 +1801,7 @@ class MetalsLanguageServer(\n         item <- i.sources.getItems.asScala\n         source <- item.getSources.asScala\n       } {\n-        val sourceItemPath = source.getUri.toAbsolutePath\n+        val sourceItemPath = source.getUri.toAbsolutePath(followSymlink = false)"
  },
  {
    "id" : "0fe4ea57-914b-44c3-bf61-7af1a4b32f07",
    "prId" : 1803,
    "comments" : [
      {
        "id" : "9326bc06-ff3f-4e20-ac64-2a25171682ed",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "This might also be useful to log anyway just in case. There will be a fix in ammonite to not remove those directories, which will help in the long run.",
        "createdAt" : "2020-06-04T12:22:32Z",
        "updatedAt" : "2020-06-04T12:22:32Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a821715e949ca87e48cc5b41fe70815789eae405",
    "line" : 11,
    "diffHunk" : "@@ -1814,7 +1814,14 @@ class MetalsLanguageServer(\n       \"started file watcher\",\n       clientConfig.initialConfig.statistics.isIndex\n     ) {\n-      fileWatcher.restart()\n+      try {\n+        fileWatcher.restart()\n+      } catch {\n+        // note(@tgodzik) This is needed in case of ammonite\n+        // where it can rarely deletes directories while we are trying to watch them\n+        case NonFatal(e) =>\n+          scribe.warn(\"File watching failed, indexes will not be updated.\", e)"
  },
  {
    "id" : "7a2fc185-1304-46f9-945a-22331812f819",
    "prId" : 1846,
    "comments" : [
      {
        "id" : "6231b99c-bb93-4e5b-a586-bd91021d7c89",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Was this an issue before? Would this only be an issue if for example the source was removed and then we were looking at stale information, or when would this actually happen?",
        "createdAt" : "2020-06-19T19:57:13Z",
        "updatedAt" : "2020-06-21T18:57:33Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0490c772-15bd-444f-bca9-b2bc7240fb54",
        "parentId" : "6231b99c-bb93-4e5b-a586-bd91021d7c89",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "This is actually only an issue if ammonite failed to generate the scala files, which also means we should watch the `.ammonite` directory, since they can be created after indexing :thinking: ",
        "createdAt" : "2020-06-19T22:24:34Z",
        "updatedAt" : "2020-06-21T18:57:33Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7534f09c-5501-4189-8fc0-70b6a56a4d5a",
        "parentId" : "6231b99c-bb93-4e5b-a586-bd91021d7c89",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Actually, it didn't fail to generate, ammonite just differently generates path if `^` is used, which should not normally be an issue, but we should leave the guard just in case: I will change the tests a bit so that it's more natural path and not `^.backToTheSameDirectory`",
        "createdAt" : "2020-06-20T20:06:42Z",
        "updatedAt" : "2020-06-21T18:57:33Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "10223975ce00488d39a58765d57e434b217aeb21",
    "line" : 16,
    "diffHunk" : "@@ -1687,33 +1687,35 @@ class MetalsLanguageServer(\n \n     try {\n       val sourceToIndex0 = sourceToIndex(source, targetOpt)\n-      val reluri = source.toIdeallyRelativeURI(sourceItem)\n-      val input = sourceToIndex0.toInput\n-      val symbols = ArrayBuffer.empty[WorkspaceSymbolInformation]\n-      SemanticdbDefinition.foreach(input) {\n-        case SemanticdbDefinition(info, occ, owner) =>\n-          if (WorkspaceSymbolProvider.isRelevantKind(info.kind)) {\n-            occ.range.foreach { range =>\n-              symbols += WorkspaceSymbolInformation(\n-                info.symbol,\n-                info.kind,\n-                range.toLSP\n-              )\n+      if (sourceToIndex0.exists) {"
  },
  {
    "id" : "54bbc837-b5c5-452d-b84c-cbaa6f97f052",
    "prId" : 1853,
    "comments" : [
      {
        "id" : "053b6974-597d-4e11-b65e-0c3b8d40fd53",
        "parentId" : null,
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "Not needed, `ammonite.start()` already returns `Future[Unit]`",
        "createdAt" : "2020-06-25T17:10:26Z",
        "updatedAt" : "2020-06-25T18:58:20Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fb791f8e-2890-4d9f-9329-83ee6378657c",
        "parentId" : "053b6974-597d-4e11-b65e-0c3b8d40fd53",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Removed!",
        "createdAt" : "2020-06-25T18:59:23Z",
        "updatedAt" : "2020-06-25T18:59:23Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "260dcc28a1d6bb9ca8ef07702ee8d2697b212ea8",
    "line" : null,
    "diffHunk" : "@@ -955,6 +956,25 @@ class MetalsLanguageServer(\n                 case _ =>\n                   Future.successful(())\n               }\n+          } else if (\n+            userConfig.ammoniteJvmProperties != old.ammoniteJvmProperties && buildTargets.allBuildTargetIds\n+              .exists(Ammonite.isAmmBuildTarget)\n+          ) {\n+            languageClient\n+              .showMessageRequest(AmmoniteJvmParametersChange.params())\n+              .asScala\n+              .flatMap {\n+                case item if item == AmmoniteJvmParametersChange.restart =>\n+                  ammonite\n+                    .stop()\n+                    .asScala\n+                    .flatMap { _ =>\n+                      ammonite.start()\n+                    }\n+                    .ignoreValue"
  },
  {
    "id" : "92e350d8-d1bf-46b0-8cf0-aa72367ba544",
    "prId" : 1865,
    "comments" : [
      {
        "id" : "cd362798-b935-445e-9eac-4a45d18c5f91",
        "parentId" : null,
        "author" : {
          "login" : "dos65",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/5816952?u=801a9faa2796a46c371c28cc181e0fa6abbb7132&v=4"
        },
        "body" : "I'm not sure how to implement this thing correctly for multiply connections.\r\n\r\nWhen reconnect happens?\r\nI've tried to kill `bloop.Server` but this part of code wasn't executed",
        "createdAt" : "2020-06-28T18:54:25Z",
        "updatedAt" : "2020-07-31T11:55:17Z",
        "lastEditedBy" : {
          "login" : "dos65",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/5816952?u=801a9faa2796a46c371c28cc181e0fa6abbb7132&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c5771b4a-bbad-47dd-8973-fe241a52038f",
        "parentId" : "cd362798-b935-445e-9eac-4a45d18c5f91",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "This should work without any changes really as long as we connect correctly to the server.",
        "createdAt" : "2020-07-06T17:38:11Z",
        "updatedAt" : "2020-07-31T11:55:17Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "eafb1c19-bccc-4961-8c19-ce815f98476a",
        "parentId" : "cd362798-b935-445e-9eac-4a45d18c5f91",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We can uncomment this, `onReconnection` will only be needed for the main connection.",
        "createdAt" : "2020-07-22T10:34:35Z",
        "updatedAt" : "2020-07-31T11:55:17Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "182ccfe5-cf9e-4c83-b6af-189a953b39f1",
        "parentId" : "cd362798-b935-445e-9eac-4a45d18c5f91",
        "author" : {
          "login" : "dos65",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/5816952?u=801a9faa2796a46c371c28cc181e0fa6abbb7132&v=4"
        },
        "body" : "I'm not quite sure about this change.\r\n\r\nhttps://github.com/scalameta/metals/blob/95e8daf51964c373b769f07788e2edd1570889ee/metals/src/main/scala/scala/meta/internal/metals/MetalsLanguageServer.scala#L1630-L1636\r\n\r\nWould it be ok to leave it in this way?",
        "createdAt" : "2020-07-24T16:23:17Z",
        "updatedAt" : "2020-07-31T11:55:17Z",
        "lastEditedBy" : {
          "login" : "dos65",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/5816952?u=801a9faa2796a46c371c28cc181e0fa6abbb7132&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1ecc085ce9f65d042e2055d19fd627c5d49e7918",
    "line" : null,
    "diffHunk" : "@@ -1597,17 +1604,17 @@ class MetalsLanguageServer(\n       for {\n         _ <- disconnectOldBuildServer()\n         maybeBuild <- timed(\"connected to build server\") {\n-          if (buildTools.isBloop) bloopServers.newServer(userConfig)\n-          else bspServers.newServer()\n+          bspConnector.connect(workspace, userConfig, buildTools)\n         }\n         result <- maybeBuild match {\n           case Some(build) =>\n             val result = connectToNewBuildServer(build)\n-            build.onReconnection { reconnected =>\n-              connectToNewBuildServer(reconnected)\n-                .flatMap(compileAllOpenFiles)\n-                .ignoreValue\n-            }\n+            // TODO how to implement reconnection correctly ?"
  },
  {
    "id" : "a95786c8-9f2f-4d7c-8244-0e9bf6f8b06c",
    "prId" : 1865,
    "comments" : [
      {
        "id" : "cc2a258e-c01d-4aad-9c7e-d26bcca1f701",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Should be enough to run it for main.",
        "createdAt" : "2020-07-06T17:39:59Z",
        "updatedAt" : "2020-07-31T11:55:17Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1ecc085ce9f65d042e2055d19fd627c5d49e7918",
    "line" : null,
    "diffHunk" : "@@ -1631,35 +1638,47 @@ class MetalsLanguageServer(\n   }\n \n   private def disconnectOldBuildServer(): Future[Unit] = {\n-    if (buildServer.isDefined) {\n+    if (bspSession.isDefined) {\n       scribe.info(\"disconnected: build server\")\n     }\n-    buildServer match {\n+    bspSession match {\n       case None => Future.successful(())\n       case Some(value) =>\n-        buildServer = None\n+        bspSession = None\n         diagnostics.reset()\n         value.shutdown()\n     }\n   }\n \n   private def connectToNewBuildServer(\n-      build: BuildServerConnection\n+      session: BspSession\n   ): Future[BuildChange] = {\n-    scribe.info(s\"Connected to Build server v${build.version}\")\n-    cancelables.add(build)\n+    scribe.info(s\"Connected to Build server v${session.version}\")\n+    cancelables.add(session)\n     compilers.cancel()\n-    buildServer = Some(build)\n-    val importedBuild0 = timed(\"imported build\") {\n-      MetalsLanguageServer.importedBuild(build)\n+    bspSession = Some(session)\n+    val importedBuilds0 = timed(\"imported build\") {\n+      session.importBuilds()\n     }\n     for {\n-      i <- statusBar.trackFuture(\"Importing build\", importedBuild0)\n+      i <- statusBar.trackFuture(\"Importing build\", importedBuilds0)\n       _ = {\n-        lastImportedBuild = i\n+        targetToConnection.clear()\n+        i.foreach(bspBuild => {\n+          val targets =\n+            bspBuild.build.workspaceBuildTargets.getTargets().asScala\n+          targets.foreach(t =>\n+            targetToConnection.put(t.getId(), bspBuild.connection)\n+          )\n+        })\n+        lastImportedBuilds = i.map(_.build)\n       }\n-      _ <- profiledIndexWorkspace(() => doctor.check(build.name, build.version))\n-      _ = checkRunningBloopVersion(build.version)\n+      _ <- profiledIndexWorkspace(() => {\n+        // TODO do we need to run doctor for meta builds?"
  },
  {
    "id" : "8a6f5ed1-d376-4cb8-9d57-234bb41fc35d",
    "prId" : 1865,
    "comments" : [
      {
        "id" : "70d0ae80-8dbc-496b-8ac8-36caefdf8b63",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I wonder if this is something that we could keep in BuildTargets :thinking: ",
        "createdAt" : "2020-07-07T12:36:58Z",
        "updatedAt" : "2020-07-31T11:55:17Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "93e06ab5-431b-4b9b-85e9-f5779351c7fc",
        "parentId" : "70d0ae80-8dbc-496b-8ac8-36caefdf8b63",
        "author" : {
          "login" : "dos65",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/5816952?u=801a9faa2796a46c371c28cc181e0fa6abbb7132&v=4"
        },
        "body" : "I agree, it seems that `BuildTargets` is a better place for this thing.\r\nShould I move it there?",
        "createdAt" : "2020-07-21T11:21:17Z",
        "updatedAt" : "2020-07-31T11:55:17Z",
        "lastEditedBy" : {
          "login" : "dos65",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/5816952?u=801a9faa2796a46c371c28cc181e0fa6abbb7132&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2ca0af74-0290-44c8-945b-c4761c9ba417",
        "parentId" : "70d0ae80-8dbc-496b-8ac8-36caefdf8b63",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "That would be best. I would try to not add new things to MetalsLanguageServer as it is already quite big.",
        "createdAt" : "2020-07-21T13:45:02Z",
        "updatedAt" : "2020-07-31T11:55:17Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fd8d103c-1918-442e-8c05-b002e1c5dc2f",
        "parentId" : "70d0ae80-8dbc-496b-8ac8-36caefdf8b63",
        "author" : {
          "login" : "dos65",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/5816952?u=801a9faa2796a46c371c28cc181e0fa6abbb7132&v=4"
        },
        "body" : "Done",
        "createdAt" : "2020-07-21T16:53:48Z",
        "updatedAt" : "2020-07-31T11:55:17Z",
        "lastEditedBy" : {
          "login" : "dos65",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/5816952?u=801a9faa2796a46c371c28cc181e0fa6abbb7132&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1ecc085ce9f65d042e2055d19fd627c5d49e7918",
    "line" : null,
    "diffHunk" : "@@ -123,13 +123,15 @@ class MetalsLanguageServer(\n     new AtomicReference[b.BuildTargetIdentifier]()\n   private val definitionIndex = newSymbolIndex()\n   private val symbolDocs = new Docstrings(definitionIndex)\n-  var buildServer: Option[BuildServerConnection] =\n-    Option.empty[BuildServerConnection]\n+  var bspSession: Option[BspSession] =\n+    Option.empty[BspSession]\n+  var targetToConnection =\n+    new mutable.HashMap[b.BuildTargetIdentifier, BuildServerConnection]"
  },
  {
    "id" : "662f77b8-c921-44bd-8808-931a813b236f",
    "prId" : 1893,
    "comments" : [
      {
        "id" : "2b481c33-66bd-422e-9f80-77cbb8dd7e53",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "So not really a blocker per se, but related to what we've been talking about, this doesn't need to be set, and it won't be in all cases. For example when I'm using `nivm-metals` I don't set this at all, so I my `metalsClientType` won't be set so it'll just show `for client default`. I'm not opposed to it, just unsure how useful that is or if that will be confusing for a user to see. What do you think?",
        "createdAt" : "2020-07-06T15:27:04Z",
        "updatedAt" : "2020-07-06T21:07:31Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "41a78992-4f5d-4c04-8b39-c3082bdbc54a",
        "parentId" : "2b481c33-66bd-422e-9f80-77cbb8dd7e53",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "changed clientType to `Option` and `for client ...` is only added if value was set.\r\nThat should make more sense.",
        "createdAt" : "2020-07-06T21:09:42Z",
        "updatedAt" : "2020-07-06T21:09:42Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0db0abe3f73ee35cdd22360ba184e287745e1f7c",
    "line" : null,
    "diffHunk" : "@@ -253,8 +253,9 @@ class MetalsLanguageServer(\n   private def updateWorkspaceDirectory(params: InitializeParams): Unit = {\n     workspace = AbsolutePath(Paths.get(URI.create(params.getRootUri))).dealias\n     MetalsLogger.setupLspLogger(workspace, redirectSystemOut)\n+    val clientType = MetalsServerConfig.metalsClientType\n     scribe.info(\n-      s\"started: Metals version ${BuildInfo.metalsVersion} in workspace '$workspace'\"\n+      s\"started: Metals version ${BuildInfo.metalsVersion} in workspace '$workspace' for client $clientType\""
  },
  {
    "id" : "e9eb067c-dfb3-47fc-9852-1d785524d19c",
    "prId" : 1897,
    "comments" : [
      {
        "id" : "b0d450c1-66ae-4433-9d53-10af0b3367cc",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "```suggestion\r\n                scribe.debug(\r\n```",
        "createdAt" : "2020-07-08T14:32:32Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f0a36110-fa55-4f1d-abf8-c795ebfcad0e",
        "parentId" : "b0d450c1-66ae-4433-9d53-10af0b3367cc",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : ":+1:",
        "createdAt" : "2020-07-09T07:24:49Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b4ee63466d31865c307be3d378bd799c95063e2f",
    "line" : null,
    "diffHunk" : "@@ -1416,6 +1424,29 @@ class MetalsLanguageServer(\n         scribe.debug(s\"Executing SuperMethodHierarchy ${command}\")\n         supermethods.jumpToSelectedSuperMethod(params).asJavaObject\n \n+      case ServerCommands.ResetChoicePopup() =>\n+        val argsMaybe = Option(params.getArguments())\n+        (argsMaybe\n+          .map { args =>\n+            args.asScala.headOption match {\n+              case Some(argObject: JsonPrimitive) =>\n+                val arg = argObject.asInstanceOf[JsonPrimitive]\n+                val value = arg.getAsString()\n+                scribe.info(\n+                  s\"Executing ResetChoicePopup ${command} for choice ${value}\"\n+                )\n+                popupChoiceReset.reset(value)\n+\n+              case _ =>\n+                scribe.info("
  },
  {
    "id" : "6b98a9f2-643c-4bb8-891d-4719ce81d8a1",
    "prId" : 1897,
    "comments" : [
      {
        "id" : "923a7f62-5987-4ce8-8316-b06680275c00",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "```suggestion\r\n                scribe.debug(\r\n```\r\nno need to always write it.",
        "createdAt" : "2020-07-08T14:32:59Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4c80eb94-811e-466c-9d22-ad561467b375",
        "parentId" : "923a7f62-5987-4ce8-8316-b06680275c00",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : ":+1:",
        "createdAt" : "2020-07-09T07:25:05Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b4ee63466d31865c307be3d378bd799c95063e2f",
    "line" : null,
    "diffHunk" : "@@ -1416,6 +1424,29 @@ class MetalsLanguageServer(\n         scribe.debug(s\"Executing SuperMethodHierarchy ${command}\")\n         supermethods.jumpToSelectedSuperMethod(params).asJavaObject\n \n+      case ServerCommands.ResetChoicePopup() =>\n+        val argsMaybe = Option(params.getArguments())\n+        (argsMaybe\n+          .map { args =>\n+            args.asScala.headOption match {\n+              case Some(argObject: JsonPrimitive) =>\n+                val arg = argObject.asInstanceOf[JsonPrimitive]\n+                val value = arg.getAsString()\n+                scribe.info("
  },
  {
    "id" : "0034c4a3-4c0d-4337-bfa0-c2a61559bfe9",
    "prId" : 1897,
    "comments" : [
      {
        "id" : "b2fd301b-82e8-485f-84d5-30113d63b7c9",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Maybe include it in the Doctor?  I feel like it's part of the Doctor's functionality. ",
        "createdAt" : "2020-07-08T14:42:36Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6098c47e-0f54-426e-ab85-ac9756b4cb3d",
        "parentId" : "b2fd301b-82e8-485f-84d5-30113d63b7c9",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "I always prefer smaller, single responsibility classes but I have no strong preference here, if you want I can move this logic to Doctor :+1:",
        "createdAt" : "2020-07-09T07:42:53Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "431b600a-c8e3-4ea9-8343-1d69e05d5970",
        "parentId" : "b2fd301b-82e8-485f-84d5-30113d63b7c9",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "It's fine, but at some point we need a proper solution for setting up all the classes better.",
        "createdAt" : "2020-07-09T11:58:31Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b4ee63466d31865c307be3d378bd799c95063e2f",
    "line" : 12,
    "diffHunk" : "@@ -502,6 +503,13 @@ class MetalsLanguageServer(\n       tables,\n       clientConfig\n     )\n+    popupChoiceReset = new PopupChoiceReset("
  },
  {
    "id" : "2190cd70-81ca-40b0-8568-7c4fd1cc5db6",
    "prId" : 1897,
    "comments" : [
      {
        "id" : "34950e46-8b6f-488e-9016-ae7c5e924862",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "So not a big deal, but what do you think about instead of just returning a `Future.successful()` here if there are no arguments, to instead do the `interactiveReset()`. Main reason being right now for clients that won't ever send in params, they have to register the command separately because it _has_ to be registerd with the arguments field of an empty array. So for `coc-metals` for example, that means I can't just add a one-liner here:\r\nhttps://github.com/scalameta/coc-metals/blob/630450a7cd1e777ddf1392e672838de2e2965b7c/src/index.ts#L248-L260\r\n\r\nand instead I'd need to do this:\r\n\r\n```javascript\r\n    registerCommand(\"metals.reset-choice-interactive\", () => {\r\n      client.sendRequest(ExecuteCommandRequest.type, {\r\n        command: \"reset-choice\",\r\n        arguments: [],\r\n      });\r\n    });\r\n```\r\nAgain, it's a nitpick, but for me having to set arguments to an empty array all the time doesn't make sense. So it might be nice that if the server gets the `reset-choice` request with no params, it still works. What do you think?",
        "createdAt" : "2020-07-09T14:08:17Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2bbe2827-cbca-4924-9068-e225207dd4e9",
        "parentId" : "34950e46-8b6f-488e-9016-ae7c5e924862",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "Definitely worth changing it as you suggested :+1:",
        "createdAt" : "2020-07-10T08:42:13Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7cca7979-1d66-42db-a44d-c09babb8c0aa",
        "parentId" : "34950e46-8b6f-488e-9016-ae7c5e924862",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "changed",
        "createdAt" : "2020-07-10T08:51:24Z",
        "updatedAt" : "2020-07-10T08:51:24Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b4ee63466d31865c307be3d378bd799c95063e2f",
    "line" : null,
    "diffHunk" : "@@ -1416,6 +1424,29 @@ class MetalsLanguageServer(\n         scribe.debug(s\"Executing SuperMethodHierarchy ${command}\")\n         supermethods.jumpToSelectedSuperMethod(params).asJavaObject\n \n+      case ServerCommands.ResetChoicePopup() =>\n+        val argsMaybe = Option(params.getArguments())\n+        (argsMaybe\n+          .map { args =>\n+            args.asScala.headOption match {\n+              case Some(argObject: JsonPrimitive) =>\n+                val arg = argObject.asInstanceOf[JsonPrimitive]\n+                val value = arg.getAsString().replace(\"+\", \" \")\n+                scribe.debug(\n+                  s\"Executing ResetChoicePopup ${command} for choice ${value}\"\n+                )\n+                popupChoiceReset.reset(value)\n+\n+              case _ =>\n+                scribe.debug(\n+                  s\"Executing ResetChoicePopup ${command} in interactive mode.\"\n+                )\n+                popupChoiceReset.interactiveReset()\n+            }\n+          })\n+          .getOrElse(Future.successful(()))"
  },
  {
    "id" : "cc791ad8-7086-4e1d-a327-d5df766ee782",
    "prId" : 1911,
    "comments" : [
      {
        "id" : "ae40e109-30d2-46b0-9585-41b40aca405b",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "I'm confused by this, what was the `onBuildTargets` method here supposed to be doing?",
        "createdAt" : "2020-07-14T14:49:07Z",
        "updatedAt" : "2020-07-14T16:55:06Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "340b1f95-b816-4add-b056-af39766e63c9",
        "parentId" : "ae40e109-30d2-46b0-9585-41b40aca405b",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "It's another leftover from Pants, came up when I added the explicits flag.",
        "createdAt" : "2020-07-14T15:01:26Z",
        "updatedAt" : "2020-07-14T16:55:06Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3cddbb0f161f90f3fa8877a263f2cac238b065b7",
    "line" : 50,
    "diffHunk" : "@@ -1851,7 +1849,6 @@ class MetalsLanguageServer(\n       check()\n       buildTools\n         .loadSupported()\n-        .foreach(_.onBuildTargets(workspace, buildTargets))"
  },
  {
    "id" : "5a4fa477-99a7-436a-8ddb-7c63d1b7a596",
    "prId" : 1966,
    "comments" : [
      {
        "id" : "3fe44293-9f2d-4870-b63e-37c31e007407",
        "parentId" : null,
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "will convert it to proper if/else without return if this stays here",
        "createdAt" : "2020-08-03T19:19:21Z",
        "updatedAt" : "2020-08-20T09:03:33Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6f7e1db4a0dcdfe6522e0116b20085a2f3f04584",
    "line" : null,
    "diffHunk" : "@@ -780,6 +789,8 @@ class MetalsLanguageServer(\n   @JsonNotification(\"textDocument/didOpen\")\n   def didOpen(params: DidOpenTextDocumentParams): CompletableFuture[Unit] = {\n     val path = params.getTextDocument.getUri.toAbsolutePath\n+    if (stacktraceAnalyzer.matches(path))\n+      return CompletableFuture.completedFuture(())"
  },
  {
    "id" : "e18139ff-05bc-43b6-8099-7c1831ad274d",
    "prId" : 1966,
    "comments" : [
      {
        "id" : "815c10eb-1edc-43a6-b95d-a67be199babc",
        "parentId" : null,
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "this ideally should be a check for VSCode (or client that can execute commands inside html)",
        "createdAt" : "2020-08-04T14:56:42Z",
        "updatedAt" : "2020-08-20T09:03:33Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "30aaa8ce-4770-414e-9f27-89503894d9eb",
        "parentId" : "815c10eb-1edc-43a6-b95d-a67be199babc",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "ð¤ I wonder if we are broadening the `doctorFormat` too much? Or maybe the name no longer fully captures what it is being used for. In the scenario, if a user has `http` enabled and they also have the doctor format being Html, will it open in the browser?",
        "createdAt" : "2020-08-06T05:46:12Z",
        "updatedAt" : "2020-08-20T09:03:33Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3116f8bf-6877-4e1c-a29b-221dc8389592",
        "parentId" : "815c10eb-1edc-43a6-b95d-a67be199babc",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "replaced it with dedicated setting :+1:",
        "createdAt" : "2020-08-06T08:14:34Z",
        "updatedAt" : "2020-08-20T09:03:33Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6f7e1db4a0dcdfe6522e0116b20085a2f3f04584",
    "line" : null,
    "diffHunk" : "@@ -431,9 +433,18 @@ class MetalsLanguageServer(\n       () => userConfig,\n       clientConfig\n     )\n+\n+    stacktraceAnalyzer = new StacktraceAnalyzer(\n+      workspace,\n+      definitionProvider,\n+      clientConfig.icons.findsuper,\n+      clientConfig.doctorFormat() == DoctorFormat.Html"
  },
  {
    "id" : "663f144b-6066-46db-90a7-deb21cbcaeca",
    "prId" : 1971,
    "comments" : [
      {
        "id" : "e92946cc-8e3f-4e08-a710-eac82771ea86",
        "parentId" : null,
        "author" : {
          "login" : "mlachkar",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/7843237?u=d2941da73011b9a49767ac863ce5bc20b7b10ed7&v=4"
        },
        "body" : "How to get the scala version here? \r\nOr should I have many scalafix instances downloaded (lazily) and cached (for each scalaVersion) in ScalafixProvider. \r\nRight now the only way I found the get the scalaVersion, is when I am formatting a file => \r\n```\r\n      identifier <- buildTargets.inverseSources(file)\r\n      scalaBuildTarget <- buildTargets.scalaInfo(identifier)\r\n      scalaVersion = scalaBuildTarget.getScalaVersion\r\n``` \r\nAnother question: `ScalafixProvider.from(` is a method that can fail, if it's not able to fetch the artifact. Should it fail ? should the fetch be done here? We can also not fail, and in this case, we disable the organize import until the next restart? \r\n",
        "createdAt" : "2020-08-06T09:25:11Z",
        "updatedAt" : "2020-09-11T13:32:54Z",
        "lastEditedBy" : {
          "login" : "mlachkar",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/7843237?u=d2941da73011b9a49767ac863ce5bc20b7b10ed7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bd19875d-31c6-4409-b6fc-44bc68db48be",
        "parentId" : "e92946cc-8e3f-4e08-a710-eac82771ea86",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "> How to get the scala version here?\r\n\r\nThat's exactly how you can get the version right now. We need the information from the build target. It also has `scalaBinaryVersion`, which will be useful here.\r\nHowever, I think you should also have scalafix instances populated lazily for each scala version. Usually it will really be one per workspace.\r\n\r\nAs for `ScalafixProvider.from( ` we should handle the case it failed to download and show a message to the user in that case via `client.showMessage()`. We can retry downloading in case the user tries to organize imports again, no need to disable it as long as we send a clear message what is wrong.\r\n",
        "createdAt" : "2020-08-06T10:11:55Z",
        "updatedAt" : "2020-09-11T13:32:54Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ec9e036a-9996-474a-9a3d-b632879e467c",
        "parentId" : "e92946cc-8e3f-4e08-a710-eac82771ea86",
        "author" : {
          "login" : "mlachkar",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/7843237?u=d2941da73011b9a49767ac863ce5bc20b7b10ed7&v=4"
        },
        "body" : "ok! ",
        "createdAt" : "2020-08-06T11:09:26Z",
        "updatedAt" : "2020-09-11T13:32:54Z",
        "lastEditedBy" : {
          "login" : "mlachkar",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/7843237?u=d2941da73011b9a49767ac863ce5bc20b7b10ed7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ebd2632e5db66829b27658c5dd9e9289d1b5ba6d",
    "line" : null,
    "diffHunk" : "@@ -492,9 +493,13 @@ class MetalsLanguageServer(\n       statusBar,\n       compilers\n     )\n+    scalafixProvider = ScalafixProvider\n+      .from(\"2.12\", buildTargets, buffers, workspace)\n+      .get // TODO fail + scalafixBinary should be get from BuildTargets"
  },
  {
    "id" : "6c98df20-115a-4245-92aa-351d32cd9526",
    "prId" : 1971,
    "comments" : [
      {
        "id" : "6ab14de7-68e6-4047-aa5d-290f925d6bb5",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "minor, but what happened here? This diff seems unrelated",
        "createdAt" : "2020-09-06T16:59:10Z",
        "updatedAt" : "2020-09-13T08:26:39Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ebd2632e5db66829b27658c5dd9e9289d1b5ba6d",
    "line" : 50,
    "diffHunk" : "@@ -1157,10 +1165,12 @@ class MetalsLanguageServer(\n       params: DocumentFormattingParams\n   ): CompletableFuture[util.List[TextEdit]] =\n     CancelTokens.future { token =>\n-      formattingProvider.format(\n-        params.getTextDocument.getUri.toAbsolutePath,\n-        token\n-      )\n+      {"
  },
  {
    "id" : "e9524a3b-e6a2-4e45-a03e-29c89146daae",
    "prId" : 2012,
    "comments" : [
      {
        "id" : "017a525c-b049-45f5-aaad-67ef30313772",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "So I'm not 100% sure what the best thing to do here is. This works as it just reconnects and re-indexes. Then the workspace symbol search, completions, etc reflect he newly indexed result. However, I'm not sure if there is a better way to re-index everything? Also, since there isn't a build tool recognized for the tests, this fails anyways. Any thoughts on whether this is the best thing to do here or if there is a better alternative?",
        "createdAt" : "2020-08-24T14:20:08Z",
        "updatedAt" : "2020-09-01T08:04:55Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "07a9eea6-2972-427c-8f95-3eef4677bb9e",
        "parentId" : "017a525c-b049-45f5-aaad-67ef30313772",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We already do something similar when reconnecting automatically in the `MetalsLAnguageServer.scala` - not sure if helpful:\r\n```scala\r\n  session.mainConnection.onReconnection { newMainConn =>\r\n              val updSession = session.copy(main = newMainConn)\r\n              connectToNewBuildServer(updSession)\r\n                .flatMap(compileAllOpenFiles)\r\n                .ignoreValue\r\n            }\r\n```",
        "createdAt" : "2020-08-25T10:36:59Z",
        "updatedAt" : "2020-09-01T08:04:55Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "742d615938b7ae27e2a94fdcb0daa3d765c5a4ba",
    "line" : null,
    "diffHunk" : "@@ -946,6 +950,9 @@ class MetalsLanguageServer(\n         case Right(value) =>\n           val old = userConfig\n           userConfig = value\n+          if (userConfig.excludedPackages != old.excludedPackages) {\n+            slowConnectToBuildServer(forceImport = true).asJavaObject"
  },
  {
    "id" : "6c1c8d68-5961-44b3-b996-6aa89a6400ff",
    "prId" : 2012,
    "comments" : [
      {
        "id" : "59d11222-c39a-42eb-8f4a-5bcc5074e4ce",
        "parentId" : null,
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "so logic is inconsistent here now\r\nif (new=None   !=   old=Some(a, b, c)) {\r\n  don't update exclusions as we do that only for Some (foreach)\r\n  but reindex classpath\r\n}\r\n\r\nQuestion what should happen on `None`? \r\n- treat it as 'reset' flag?\r\n- treat it as 'keep previous' flag?",
        "createdAt" : "2020-09-01T07:16:51Z",
        "updatedAt" : "2020-09-01T08:04:55Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d4c6ce28-4302-4105-95b5-0e505048b685",
        "parentId" : "59d11222-c39a-42eb-8f4a-5bcc5074e4ce",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Ah, yea good catch. My mistake. I changed this a bit to now no matter what call update when the value has changed. If there are new packages (`Some`), then we call `prepareCache` again with the new pkgs. If the value is now a `None`, we just assign the default exclusions to the cache.",
        "createdAt" : "2020-09-01T07:59:57Z",
        "updatedAt" : "2020-09-01T08:04:55Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "742d615938b7ae27e2a94fdcb0daa3d765c5a4ba",
    "line" : null,
    "diffHunk" : "@@ -958,6 +962,10 @@ class MetalsLanguageServer(\n         case Right(value) =>\n           val old = userConfig\n           userConfig = value\n+          if (userConfig.excludedPackages != old.excludedPackages) {\n+            userConfig.excludedPackages.foreach(excludedPackageHandler.update)"
  }
]