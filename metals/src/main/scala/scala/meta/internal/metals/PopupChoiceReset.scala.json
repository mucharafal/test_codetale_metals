[
  {
    "id" : "976cbcdf-93ab-4de6-b5bb-61f6915219ea",
    "prId" : 1897,
    "comments" : [
      {
        "id" : "18a78e6a-4563-448b-b40b-61e331f5cd82",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "```suggestion\r\n  final val BuildImport = \"build import\"\r\n```",
        "createdAt" : "2020-07-08T14:29:54Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "410dc485-37db-4a07-be79-dddc3c551906",
        "parentId" : "18a78e6a-4563-448b-b40b-61e331f5cd82",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : ":+1:",
        "createdAt" : "2020-07-09T07:23:42Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b4ee63466d31865c307be3d378bd799c95063e2f",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,66 @@\n+package scala.meta.internal.metals\n+\n+import scala.concurrent.Future\n+import org.eclipse.lsp4j.ShowMessageRequestParams\n+import org.eclipse.lsp4j.MessageType\n+import org.eclipse.lsp4j.MessageActionItem\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.concurrent.ExecutionContext\n+\n+class PopupChoiceReset(\n+    tables: Tables,\n+    languageClient: MetalsLanguageClient,\n+    doctor: Doctor,\n+    reconnectToBuildServer: () => Future[Unit]\n+) {\n+  import PopupChoiceReset._\n+\n+  def reset(value: String)(implicit ec: ExecutionContext): Future[Unit] = {\n+    val result = if (value == BuildTool) {\n+      tables.buildTool.reset()\n+      reconnectToBuildServer()\n+    } else if (value == BuildImport) {\n+      tables.dismissedNotifications.ImportChanges.reset()\n+      Future.successful(())\n+    } else {\n+      Future.successful(())\n+    }\n+    result.foreach(_ => doctor.executeRefreshDoctor())\n+    result\n+  }\n+\n+  def interactiveReset()(implicit ec: ExecutionContext): Future[Unit] = {\n+    def choicesParams(): ShowMessageRequestParams = {\n+      val params = new ShowMessageRequestParams()\n+      params.setMessage(\n+        \"What choice would you like to reset?\"\n+      )\n+      params.setType(MessageType.Info)\n+      params.setActions(\n+        List(\n+          new MessageActionItem(PopupChoiceReset.BuildTool),\n+          new MessageActionItem(PopupChoiceReset.BuildImport)\n+        ).asJava\n+      )\n+      params\n+    }\n+\n+    languageClient\n+      .showMessageRequest(choicesParams())\n+      .asScala\n+      .flatMap { item =>\n+        if (item.getTitle() == PopupChoiceReset.BuildTool) {\n+          reset(PopupChoiceReset.BuildTool)\n+        } else if (item.getTitle() == PopupChoiceReset.BuildImport) {\n+          reset(PopupChoiceReset.BuildImport)\n+        } else {\n+          Future.successful(())\n+        }\n+      }\n+  }\n+}\n+\n+object PopupChoiceReset {\n+  final val BuildTool = \"buildtool\"\n+  final val BuildImport = \"buildimport\""
  },
  {
    "id" : "23ba656a-4d3e-4150-82e3-0bff4b5985bc",
    "prId" : 1897,
    "comments" : [
      {
        "id" : "e48f1d4a-f6f6-484d-bd4b-49bfc16d11d6",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "```suggestion\r\n  final val BuildTool = \"build tool selection\"\r\n```",
        "createdAt" : "2020-07-08T14:30:07Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0d762157-ba75-48c1-a0c9-8852676deea6",
        "parentId" : "e48f1d4a-f6f6-484d-bd4b-49bfc16d11d6",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : ":+1:",
        "createdAt" : "2020-07-09T07:23:57Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e47af746-6a2f-4b56-bd0d-e61655b2cace",
        "parentId" : "e48f1d4a-f6f6-484d-bd4b-49bfc16d11d6",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "Because it goes into html \"build tool selection\" is placed in a link as \"build+tool+selection\".\r\nThat's why I also added: `val value = arg.getAsString().replace(\"+\", \" \")`\r\nThis way we handle both inputs: `build+tool+selection` and `build tool selection` correctly. (same applies to import build)",
        "createdAt" : "2020-07-09T08:13:59Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b4ee63466d31865c307be3d378bd799c95063e2f",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,66 @@\n+package scala.meta.internal.metals\n+\n+import scala.concurrent.Future\n+import org.eclipse.lsp4j.ShowMessageRequestParams\n+import org.eclipse.lsp4j.MessageType\n+import org.eclipse.lsp4j.MessageActionItem\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.concurrent.ExecutionContext\n+\n+class PopupChoiceReset(\n+    tables: Tables,\n+    languageClient: MetalsLanguageClient,\n+    doctor: Doctor,\n+    reconnectToBuildServer: () => Future[Unit]\n+) {\n+  import PopupChoiceReset._\n+\n+  def reset(value: String)(implicit ec: ExecutionContext): Future[Unit] = {\n+    val result = if (value == BuildTool) {\n+      tables.buildTool.reset()\n+      reconnectToBuildServer()\n+    } else if (value == BuildImport) {\n+      tables.dismissedNotifications.ImportChanges.reset()\n+      Future.successful(())\n+    } else {\n+      Future.successful(())\n+    }\n+    result.foreach(_ => doctor.executeRefreshDoctor())\n+    result\n+  }\n+\n+  def interactiveReset()(implicit ec: ExecutionContext): Future[Unit] = {\n+    def choicesParams(): ShowMessageRequestParams = {\n+      val params = new ShowMessageRequestParams()\n+      params.setMessage(\n+        \"What choice would you like to reset?\"\n+      )\n+      params.setType(MessageType.Info)\n+      params.setActions(\n+        List(\n+          new MessageActionItem(PopupChoiceReset.BuildTool),\n+          new MessageActionItem(PopupChoiceReset.BuildImport)\n+        ).asJava\n+      )\n+      params\n+    }\n+\n+    languageClient\n+      .showMessageRequest(choicesParams())\n+      .asScala\n+      .flatMap { item =>\n+        if (item.getTitle() == PopupChoiceReset.BuildTool) {\n+          reset(PopupChoiceReset.BuildTool)\n+        } else if (item.getTitle() == PopupChoiceReset.BuildImport) {\n+          reset(PopupChoiceReset.BuildImport)\n+        } else {\n+          Future.successful(())\n+        }\n+      }\n+  }\n+}\n+\n+object PopupChoiceReset {\n+  final val BuildTool = \"buildtool\""
  }
]