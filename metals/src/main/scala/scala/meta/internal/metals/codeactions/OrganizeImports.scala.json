[
  {
    "id" : "2b476ab3-ba79-4bee-85e9-4bacdb12e7e2",
    "prId" : 1971,
    "comments" : [
      {
        "id" : "f54735c8-c696-42ec-a2c2-7062281ca1da",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I think it should be a command here, otherwise organize imports is invoked every time we move a cursor :O",
        "createdAt" : "2020-08-06T10:54:19Z",
        "updatedAt" : "2020-09-11T13:32:54Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8dd66f68-ecb2-4e15-8994-8f70e4ba2d18",
        "parentId" : "f54735c8-c696-42ec-a2c2-7062281ca1da",
        "author" : {
          "login" : "mlachkar",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/7843237?u=d2941da73011b9a49767ac863ce5bc20b7b10ed7&v=4"
        },
        "body" : "ok! I didn't know what's the difference between command and edit ",
        "createdAt" : "2020-08-06T11:07:02Z",
        "updatedAt" : "2020-09-11T13:32:54Z",
        "lastEditedBy" : {
          "login" : "mlachkar",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/7843237?u=d2941da73011b9a49767ac863ce5bc20b7b10ed7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4a66c5d8-66b1-4a10-9911-1593eb1994fd",
        "parentId" : "f54735c8-c696-42ec-a2c2-7062281ca1da",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Command just specifies what should be run if the action is selected, while edit already defines what should be done. \r\n\r\nThe problem with recalculating code actions on cursor move is something that is really hidden. We should use command if possible.",
        "createdAt" : "2020-08-06T11:14:44Z",
        "updatedAt" : "2020-09-11T13:32:54Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ebd2632e5db66829b27658c5dd9e9289d1b5ba6d",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,37 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import org.eclipse.lsp4j.{CodeActionParams, TextEdit}\n+import org.eclipse.{lsp4j => l}\n+\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.metals.MetalsEnrichments.XtensionString\n+import scala.meta.internal.metals.{CodeAction, ScalafixProvider}\n+import scala.meta.pc.CancelToken\n+\n+class OrganizeImports(scalafixProvider: ScalafixProvider) extends CodeAction {\n+  override def kind: String = l.CodeActionKind.SourceOrganizeImports\n+\n+  override def contribute(params: CodeActionParams, token: CancelToken)(implicit\n+      ec: ExecutionContext\n+  ): Future[Seq[l.CodeAction]] = {\n+    val uri = params.getTextDocument.getUri\n+    val path = uri.toAbsolutePath\n+    val edits: List[TextEdit] = scalafixProvider.organizeImports(path)\n+\n+    val codeAction = new l.CodeAction()\n+    codeAction.setTitle(OrganizeImports.title)\n+    codeAction.setKind(l.CodeActionKind.SourceOrganizeImports)\n+    codeAction.setEdit("
  },
  {
    "id" : "45361b7d-37af-4b12-8a65-f656f00d4913",
    "prId" : 1971,
    "comments" : [
      {
        "id" : "d37621a2-e518-4230-bae3-5bccdaa03497",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Good idea to have this 👍 ",
        "createdAt" : "2020-09-04T14:04:00Z",
        "updatedAt" : "2020-09-11T13:32:54Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ebd2632e5db66829b27658c5dd9e9289d1b5ba6d",
    "line" : 41,
    "diffHunk" : "@@ -0,0 +1,50 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.Future\n+\n+import scala.meta.internal.metals.CodeAction\n+import scala.meta.internal.metals.MetalsEnrichments.XtensionString\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.metals.ScalafixProvider\n+import scala.meta.pc.CancelToken\n+\n+import org.eclipse.lsp4j.CodeActionParams\n+import org.eclipse.{lsp4j => l}\n+\n+final class OrganizeImports(scalafixProvider: ScalafixProvider)\n+    extends CodeAction {\n+  override def kind: String = OrganizeImports.kind\n+\n+  override def contribute(params: CodeActionParams, token: CancelToken)(implicit\n+      ec: ExecutionContext\n+  ): Future[Seq[l.CodeAction]] = {\n+    if (isSourceOrganizeImportCalled(params)) {\n+      val uri = params.getTextDocument.getUri\n+      val path = uri.toAbsolutePath\n+      val edits = scalafixProvider.organizeImports(path)\n+\n+      val codeAction = new l.CodeAction()\n+      codeAction.setTitle(OrganizeImports.title)\n+      codeAction.setKind(l.CodeActionKind.SourceOrganizeImports)\n+      codeAction.setEdit(\n+        new l.WorkspaceEdit(\n+          Map(uri -> edits.asJava).asJava\n+        )\n+      )\n+      Future.successful {\n+        Seq(codeAction)\n+      }\n+    } else Future.successful(Seq())\n+  }\n+\n+  private def isSourceOrganizeImportCalled(params: CodeActionParams): Boolean ="
  }
]