[
  {
    "id" : "9434a35a-6e87-4453-951d-263b0d79b9c5",
    "prId" : 1379,
    "comments" : [
      {
        "id" : "a4b6ae21-70a7-43d7-9fe4-98fae1f9f650",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "```suggestion\r\n    \"Implement all members\"\r\n```\r\n\r\nto align with the corresponding completion.\r\n\r\n(also no need to break this into two lines)",
        "createdAt" : "2020-02-10T15:47:54Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cf5730dd-f390-4109-9f82-f6bdfa3076df",
        "parentId" : "a4b6ae21-70a7-43d7-9fe4-98fae1f9f650",
        "author" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "body" : "https://github.com/scalameta/metals/pull/1379/commits/15d8e1feba9aed6cce18d9f6b74382f464b8be1e 👍 ",
        "createdAt" : "2020-02-11T07:17:18Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : {
          "login" : "tanishiking",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/9353584?u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e100253dce0a50a1201510f9bec11fbe8f298bbb",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,64 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.concurrent.Future\n+import scala.meta.pc.CancelToken\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.ExecutionContext\n+import scala.meta.internal.metals._\n+import scala.meta.internal.metals.MetalsEnrichments._\n+\n+class ImplementAbstractMembers(compilers: Compilers) extends CodeAction {\n+\n+  override def kind: String = l.CodeActionKind.QuickFix\n+\n+  override def contribute(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+    Future.sequence(\n+      params\n+        .getContext()\n+        .getDiagnostics()\n+        .asScala\n+        .collect {\n+          case d @ ScalacDiagnostic.ObjectCreationImpossible(_)\n+              if params.getRange().overlapsWith(d.getRange()) =>\n+            implementAbstractMembers(d, params, token)\n+          case d @ ScalacDiagnostic.MissingImplementation(_)\n+              if params.getRange().overlapsWith(d.getRange()) =>\n+            implementAbstractMembers(d, params, token)\n+        }\n+    )\n+  }\n+\n+  private def implementAbstractMembers(\n+      diagnostic: l.Diagnostic,\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[l.CodeAction] = {\n+    val textDocumentPositionParams = new l.TextDocumentPositionParams(\n+      params.getTextDocument(),\n+      diagnostic.getRange.getStart()\n+    )\n+    compilers\n+      .implementAbstractMembers(textDocumentPositionParams, token)\n+      .map { edits =>\n+        val uri = params.getTextDocument().getUri()\n+        val edit = new l.WorkspaceEdit(Map(uri -> edits).asJava)\n+\n+        val codeAction = new l.CodeAction()\n+\n+        codeAction.setTitle(ImplementAbstractMembers.title)\n+        codeAction.setKind(l.CodeActionKind.QuickFix)\n+        codeAction.setDiagnostics(List(diagnostic).asJava)\n+        codeAction.setEdit(edit)\n+\n+        codeAction\n+      }\n+  }\n+}\n+\n+object ImplementAbstractMembers {\n+  def title: String =\n+    s\"Implement methods\""
  }
]