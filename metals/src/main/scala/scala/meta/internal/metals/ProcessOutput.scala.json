[
  {
    "id" : "c7ad9371-9c99-44ec-b0c2-0946532e4141",
    "prId" : 727,
    "comments" : [
      {
        "id" : "ac5162a5-599e-4413-9401-b8c61e2c30c2",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "val and then `buffer.clear()`?",
        "createdAt" : "2019-05-23T13:13:03Z",
        "updatedAt" : "2019-05-24T09:56:49Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4dfaba22-1928-48b8-bc2d-785c014901d2",
        "parentId" : "ac5162a5-599e-4413-9401-b8c61e2c30c2",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I tried finding a `clear()` method on `java.lang.StringBuilder` but couldn't find any.",
        "createdAt" : "2019-05-23T14:00:10Z",
        "updatedAt" : "2019-05-24T09:56:49Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3579b936-cbd2-4d21-a9ca-583875e012d2",
        "parentId" : "ac5162a5-599e-4413-9401-b8c61e2c30c2",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "It's in scala.collection.mutable.StringBuilder",
        "createdAt" : "2019-05-23T14:27:58Z",
        "updatedAt" : "2019-05-24T09:56:49Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ec9c0395fa83c2e41f0331e8f4bddea0b2709085",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,74 @@\n+package scala.meta.internal.metals\n+\n+import java.lang.StringBuilder\n+import java.nio.ByteBuffer\n+import java.nio.charset.StandardCharsets\n+import fansi.ErrorMode\n+\n+/**\n+ * Handles streaming console output from a system process with potential ANSI codes.\n+ *\n+ * @param onLine The callback handler when the process has printed a single line.\n+ *               Guaranteed to have no newline \\n characters.\n+ */\n+class ProcessOutput(onLine: String => Unit) {\n+  private var buffer = new StringBuilder()"
  },
  {
    "id" : "b572e943-15b1-40c2-8bde-5eb0035d563d",
    "prId" : 727,
    "comments" : [
      {
        "id" : "898f180e-423b-4326-a287-cb580f086b6b",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "De facto a `LineListener`. Let's keep this abstraction simple - it does not know anything about the source of those lines, nor should it. Therefore we can drop the `Process` from the name.\r\nAlso, this name would play nicely with the name `onLine` callback.",
        "createdAt" : "2019-05-23T13:15:59Z",
        "updatedAt" : "2019-05-24T09:56:49Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a56752d6-afa0-42d9-a3de-52723e8954dc",
        "parentId" : "898f180e-423b-4326-a287-cb580f086b6b",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Sounds good 👍 \r\n",
        "createdAt" : "2019-05-23T13:59:52Z",
        "updatedAt" : "2019-05-24T09:56:49Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ec9c0395fa83c2e41f0331e8f4bddea0b2709085",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,74 @@\n+package scala.meta.internal.metals\n+\n+import java.lang.StringBuilder\n+import java.nio.ByteBuffer\n+import java.nio.charset.StandardCharsets\n+import fansi.ErrorMode\n+\n+/**\n+ * Handles streaming console output from a system process with potential ANSI codes.\n+ *\n+ * @param onLine The callback handler when the process has printed a single line.\n+ *               Guaranteed to have no newline \\n characters.\n+ */\n+class ProcessOutput(onLine: String => Unit) {"
  },
  {
    "id" : "66b38328-10ea-436b-8318-37f0221499b4",
    "prId" : 727,
    "comments" : [
      {
        "id" : "6ea4b959-fa1d-47f0-9ff9-ab4ada03293b",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "flush",
        "createdAt" : "2019-05-23T13:16:28Z",
        "updatedAt" : "2019-05-24T09:56:49Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ec9c0395fa83c2e41f0331e8f4bddea0b2709085",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,74 @@\n+package scala.meta.internal.metals\n+\n+import java.lang.StringBuilder\n+import java.nio.ByteBuffer\n+import java.nio.charset.StandardCharsets\n+import fansi.ErrorMode\n+\n+/**\n+ * Handles streaming console output from a system process with potential ANSI codes.\n+ *\n+ * @param onLine The callback handler when the process has printed a single line.\n+ *               Guaranteed to have no newline \\n characters.\n+ */\n+class ProcessOutput(onLine: String => Unit) {\n+  private var buffer = new StringBuilder()\n+\n+  /** The process has exited, clears out buffered output. */\n+  def onProcessExit(): Unit = {"
  },
  {
    "id" : "e3ca6fb5-6d03-428c-9a4a-7d723540598d",
    "prId" : 727,
    "comments" : [
      {
        "id" : "379b6608-2f73-4aeb-9626-4fe4507c9b7b",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "`appendBytes`",
        "createdAt" : "2019-05-23T13:19:04Z",
        "updatedAt" : "2019-05-24T09:56:49Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ec9c0395fa83c2e41f0331e8f4bddea0b2709085",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,74 @@\n+package scala.meta.internal.metals\n+\n+import java.lang.StringBuilder\n+import java.nio.ByteBuffer\n+import java.nio.charset.StandardCharsets\n+import fansi.ErrorMode\n+\n+/**\n+ * Handles streaming console output from a system process with potential ANSI codes.\n+ *\n+ * @param onLine The callback handler when the process has printed a single line.\n+ *               Guaranteed to have no newline \\n characters.\n+ */\n+class ProcessOutput(onLine: String => Unit) {\n+  private var buffer = new StringBuilder()\n+\n+  /** The process has exited, clears out buffered output. */\n+  def onProcessExit(): Unit = {\n+    if (buffer.length() > 0) {\n+      onLine(buffer.toString())\n+      reset()\n+    }\n+  }\n+\n+  def onByteOutput(bytes: ByteBuffer): this.type = {"
  },
  {
    "id" : "d67df96c-35e5-4517-adc0-60653a5ddeeb",
    "prId" : 727,
    "comments" : [
      {
        "id" : "f8ba0743-1d1e-4b18-991b-439ad150b7d9",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "`appendString`",
        "createdAt" : "2019-05-23T13:19:14Z",
        "updatedAt" : "2019-05-24T09:56:49Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ec9c0395fa83c2e41f0331e8f4bddea0b2709085",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,74 @@\n+package scala.meta.internal.metals\n+\n+import java.lang.StringBuilder\n+import java.nio.ByteBuffer\n+import java.nio.charset.StandardCharsets\n+import fansi.ErrorMode\n+\n+/**\n+ * Handles streaming console output from a system process with potential ANSI codes.\n+ *\n+ * @param onLine The callback handler when the process has printed a single line.\n+ *               Guaranteed to have no newline \\n characters.\n+ */\n+class ProcessOutput(onLine: String => Unit) {\n+  private var buffer = new StringBuilder()\n+\n+  /** The process has exited, clears out buffered output. */\n+  def onProcessExit(): Unit = {\n+    if (buffer.length() > 0) {\n+      onLine(buffer.toString())\n+      reset()\n+    }\n+  }\n+\n+  def onByteOutput(bytes: ByteBuffer): this.type = {\n+    onPlainOutput(toPlainString(bytes))\n+  }\n+\n+  def onStringOutput(text: String): this.type = {"
  },
  {
    "id" : "e15b9df2-de74-4a62-afc7-035e318a1a36",
    "prId" : 727,
    "comments" : [
      {
        "id" : "1294ddb0-a07a-4be5-bf90-c621c49a5094",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Not sure if it doesn't become much more complicated with changing the line breaks instead of lineIterator.\r\n\r\nWhat was wrong with that idea? It seems pretty straightforward:\r\n\r\n```\r\n        output.append(text)\r\n        val lines = output.linesIterator.toList\r\n        if (output.endsWith(\"\\n\")) {\r\n          lines.foreach(fn)\r\n          output.clear()\r\n        } else {\r\n          lines.take(lines.size - 1).foreach(fn)\r\n          val last = lines.last\r\n          output.clear()\r\n          output.append(last)\r\n        }\r\n```\r\n\r\n",
        "createdAt" : "2019-05-23T14:00:23Z",
        "updatedAt" : "2019-05-24T09:56:49Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0c85c958-c2f5-4d14-baab-95e952b2729a",
        "parentId" : "1294ddb0-a07a-4be5-bf90-c621c49a5094",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Instead we get  two methods and a recursion which is a bit more complex to reason about.",
        "createdAt" : "2019-05-23T14:02:08Z",
        "updatedAt" : "2019-05-24T09:56:49Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4f0b78b3-8662-4374-a29a-bd6c57d77d32",
        "parentId" : "1294ddb0-a07a-4be5-bf90-c621c49a5094",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "The recursive implementation may not be as readable but it achieves several performance improvements\r\n\r\n- less copying, we perform the minimal number of `substring` operations (one per line)\r\n- fewer redundant operations, the recursive loop iterates over each character at most once\r\n\r\nThis is fairly performance sensitive code since we're feeding the standard output of a build process (downloading dependencies, ...) to the LSP client.",
        "createdAt" : "2019-05-23T14:14:25Z",
        "updatedAt" : "2019-05-24T09:56:49Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ec9c0395fa83c2e41f0331e8f4bddea0b2709085",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,74 @@\n+package scala.meta.internal.metals\n+\n+import java.lang.StringBuilder\n+import java.nio.ByteBuffer\n+import java.nio.charset.StandardCharsets\n+import fansi.ErrorMode\n+\n+/**\n+ * Handles streaming console output from a system process with potential ANSI codes.\n+ *\n+ * @param onLine The callback handler when the process has printed a single line.\n+ *               Guaranteed to have no newline \\n characters.\n+ */\n+class ProcessOutput(onLine: String => Unit) {\n+  private var buffer = new StringBuilder()\n+\n+  /** The process has exited, clears out buffered output. */\n+  def onProcessExit(): Unit = {\n+    if (buffer.length() > 0) {\n+      onLine(buffer.toString())\n+      reset()\n+    }\n+  }\n+\n+  def onByteOutput(bytes: ByteBuffer): this.type = {\n+    onPlainOutput(toPlainString(bytes))\n+  }\n+\n+  def onStringOutput(text: String): this.type = {\n+    onPlainOutput(toPlainString(text))\n+  }\n+\n+  private def onPlainOutput(text: String): this.type = {\n+    def loop(start: Int): Unit = {\n+      val newline = text.indexOf('\\n', start)\n+      if (newline < 0) {\n+        buffer.append(text, start, text.length())\n+      } else {\n+        onLine(lineSubstring(text, start, newline))\n+        loop(newline + 1)\n+      }\n+    }\n+    loop(0)\n+    this\n+  }\n+\n+  private def lineSubstring(text: String, from: Int, to: Int): String = {"
  }
]