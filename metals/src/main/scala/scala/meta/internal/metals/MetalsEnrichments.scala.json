[
  {
    "id" : "d279e5b0-7f47-4d8e-81a2-cb6a747ede38",
    "prId" : 417,
    "comments" : [
      {
        "id" : "53ed3d16-a47d-40e4-ab53-c0c9a80f3cb1",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "If `path` is a symlink to a regular file, this will silently fail and do nothing.\r\n\r\nI would use\r\n\r\n```scala\r\nif (!Files.isDirectory(path.toNIO)) {\r\n  Files.createDirectories(path.toNIO)\r\n}\r\n```\r\n\r\ninstead",
        "createdAt" : "2018-12-17T11:13:47Z",
        "updatedAt" : "2018-12-17T11:33:22Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d8bc14e0-9745-4149-b1a5-76ad3e8cdfc4",
        "parentId" : "53ed3d16-a47d-40e4-ab53-c0c9a80f3cb1",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "To elaborate, using `isDirectory` in that scenario will allow `createDirectories` to fail with a meaningful error, instead of silently ignoring the issue.",
        "createdAt" : "2018-12-17T11:15:38Z",
        "updatedAt" : "2018-12-17T11:33:22Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b0660cde-62b1-4219-a7f0-718d99195ff5",
        "parentId" : "53ed3d16-a47d-40e4-ab53-c0c9a80f3cb1",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Good catch! I updated the logic to run `createDirectories` on the dealiased path. If the symlink points to a file it should fail with the correct message in that case.",
        "createdAt" : "2018-12-17T11:34:05Z",
        "updatedAt" : "2018-12-17T11:34:07Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "33fc2a0b28c3ea880850d439c9d45777519fc70d",
    "line" : null,
    "diffHunk" : "@@ -224,40 +224,12 @@ object MetalsEnrichments extends DecorateAsJava with DecorateAsScala {\n       }\n     }\n \n-    /**\n-     * Symlink-aware version of Files.createDirectories()\n-     */\n-    def createDirectories(): AbsolutePath = {\n-      val nioPath = path.toNIO\n-      findExistingParent(nioPath) match {\n-        case Some(parent) =>\n-          parent.relativize(nioPath).iterator.asScala.foldLeft(parent) {\n-            (parent, dirName) =>\n-              val dirPath = parent.resolve(dirName)\n-              // This check guards against symlinks\n-              // isDirectory follows symlinks but the check inside `createDirectory` doesn't\n-              if (!Files.isDirectory(dirPath)) {\n-                Files.createDirectory(dirPath)\n-              }\n-              dirPath\n-          }\n-        // we couldn't find a parent\n-        case None => throw new FileSystemException(path.toString)\n+    def createDirectories(): Unit = {\n+      if (!Files.isSymbolicLink(path.toNIO)) {"
  },
  {
    "id" : "030d2c6f-3cec-4bb9-9778-d3e19ab41658",
    "prId" : 417,
    "comments" : [
      {
        "id" : "c9df36f4-83d6-4902-a429-65efa213a8f7",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I would return the `AbsolutePath` for consistency with the Java API.",
        "createdAt" : "2018-12-17T11:14:16Z",
        "updatedAt" : "2018-12-17T11:33:22Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "264cdae4-3b68-42bf-ac48-61ca58b52540",
        "parentId" : "c9df36f4-83d6-4902-a429-65efa213a8f7",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Done",
        "createdAt" : "2018-12-17T11:33:23Z",
        "updatedAt" : "2018-12-17T11:34:07Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "33fc2a0b28c3ea880850d439c9d45777519fc70d",
    "line" : null,
    "diffHunk" : "@@ -224,40 +224,12 @@ object MetalsEnrichments extends DecorateAsJava with DecorateAsScala {\n       }\n     }\n \n-    /**\n-     * Symlink-aware version of Files.createDirectories()\n-     */\n-    def createDirectories(): AbsolutePath = {\n-      val nioPath = path.toNIO\n-      findExistingParent(nioPath) match {\n-        case Some(parent) =>\n-          parent.relativize(nioPath).iterator.asScala.foldLeft(parent) {\n-            (parent, dirName) =>\n-              val dirPath = parent.resolve(dirName)\n-              // This check guards against symlinks\n-              // isDirectory follows symlinks but the check inside `createDirectory` doesn't\n-              if (!Files.isDirectory(dirPath)) {\n-                Files.createDirectory(dirPath)\n-              }\n-              dirPath\n-          }\n-        // we couldn't find a parent\n-        case None => throw new FileSystemException(path.toString)\n+    def createDirectories(): Unit = {"
  },
  {
    "id" : "e4fcac5b-e8fc-41f1-ad03-7a5bc78976b8",
    "prId" : 424,
    "comments" : [
      {
        "id" : "faca1fd5-9b25-476f-aac7-50823dc084d8",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Include `range.getEnd.getLine`",
        "createdAt" : "2018-12-18T11:40:39Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9aea250b-9deb-4f55-8ea5-197add193394",
        "parentId" : "faca1fd5-9b25-476f-aac7-50823dc084d8",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "this way we test the end line by printing the number in the output expect file, while discarding the end offset for the symbol occurrence range.",
        "createdAt" : "2018-12-18T11:47:09Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "eade48fd8ffbc5572cad7092e373fee0027e4f0f",
    "line" : null,
    "diffHunk" : "@@ -361,4 +361,19 @@ object MetalsEnrichments extends DecorateAsJava with DecorateAsScala {\n \n   }\n \n+  implicit class XtensionDocumentSymbol(documentSymbol: l.DocumentSymbol) {\n+    def toSymbolOccurrence: s.SymbolOccurrence = s.SymbolOccurrence(\n+      range = Some(\n+        new s.Range(\n+          documentSymbol.getRange.getStart.getLine,\n+          documentSymbol.getRange.getStart.getCharacter,\n+          documentSymbol.getRange.getStart.getLine,\n+          documentSymbol.getRange.getStart.getCharacter\n+        )\n+      ),\n+      symbol = documentSymbol.getName,"
  },
  {
    "id" : "03e22c56-57f9-46cc-a039-4b27339f32db",
    "prId" : 424,
    "comments" : [
      {
        "id" : "c0973d48-c6fd-4258-9790-c351916d1e5e",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Thinking out loud. This seems only used in tests. I suspect the same applies for other methods in this file so it's not a big deal. Maybe we should have a similar utility file in tests?",
        "createdAt" : "2018-12-18T11:41:06Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "547c988d-cd9e-4173-9fb4-fea98b055069",
        "parentId" : "c0973d48-c6fd-4258-9790-c351916d1e5e",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Done (only for `XtensionDocumentSymbol` right now). We can use to dump other test-only extensions.",
        "createdAt" : "2018-12-18T14:12:49Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "eade48fd8ffbc5572cad7092e373fee0027e4f0f",
    "line" : null,
    "diffHunk" : "@@ -361,4 +361,19 @@ object MetalsEnrichments extends DecorateAsJava with DecorateAsScala {\n \n   }\n \n+  implicit class XtensionDocumentSymbol(documentSymbol: l.DocumentSymbol) {\n+    def toSymbolOccurrence: s.SymbolOccurrence = s.SymbolOccurrence("
  },
  {
    "id" : "db318b5f-f5fa-4570-8cf8-7cf25db8534c",
    "prId" : 424,
    "comments" : [
      {
        "id" : "08188828-2de8-4a87-9bd3-9ac3174bbdb0",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I don't love the implicit detail <~> containerName correspondence, but since the LSP spec doesn't say much about it, I guess it's fine.\r\n\r\nLet's keep in mind not to add fancier stuff to details, or this conversion will break.",
        "createdAt" : "2018-12-19T11:57:28Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a9456f21-6adc-43df-bc4c-18f6fba518be",
        "parentId" : "08188828-2de8-4a87-9bd3-9ac3174bbdb0",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "`containerName` now contains the enclosing fully qualified symbol which makes the output more readable in at least vim\r\n\r\n<img width=\"724\" alt=\"vim-document-symbol\" src=\"https://user-images.githubusercontent.com/1408093/50220925-ed6e1080-0393-11e9-8db9-66015f3646e0.png\">\r\n",
        "createdAt" : "2018-12-19T12:43:03Z",
        "updatedAt" : "2018-12-19T13:35:23Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "eade48fd8ffbc5572cad7092e373fee0027e4f0f",
    "line" : null,
    "diffHunk" : "@@ -144,6 +144,24 @@ object MetalsEnrichments extends DecorateAsJava with DecorateAsScala {\n     }\n   }\n \n+  implicit class XtensionDocumentSymbol(symbol: Seq[l.DocumentSymbol]) {\n+\n+    def toSymbolInformation(uri: String): List[l.SymbolInformation] = {\n+      val buf = List.newBuilder[l.SymbolInformation]\n+      def loop(s: l.DocumentSymbol): Unit = {\n+        buf += new l.SymbolInformation(\n+          s.getName,\n+          s.getKind,\n+          new l.Location(uri, s.getRange),\n+          s.getDetail"
  },
  {
    "id" : "909fb6da-2c60-43e3-a845-a005f89a0286",
    "prId" : 632,
    "comments" : [
      {
        "id" : "244ff4a8-aa0b-4c9e-82f9-1183fe011781",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "\\o/",
        "createdAt" : "2019-04-10T08:53:10Z",
        "updatedAt" : "2019-04-10T09:48:55Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "79793f51fa23f5e83e6e9dc8e633ae708eeb17a1",
    "line" : 21,
    "diffHunk" : "@@ -498,4 +501,26 @@ object MetalsEnrichments\n       }\n   }\n \n+  implicit class XtensionTreeTokenStream(tree: Tree) {"
  },
  {
    "id" : "f6fdcaa9-6569-4dc2-9c5d-c6b0a45990b6",
    "prId" : 720,
    "comments" : [
      {
        "id" : "49b1f188-9df5-44c6-b8e3-43c898677b55",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This method can be defined on `Command` directly, we mostly use extension methods for 3rd party types",
        "createdAt" : "2019-05-15T13:49:46Z",
        "updatedAt" : "2019-05-16T11:54:05Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "caedf602-3d06-41db-9a77-4cfa96639b17",
        "parentId" : "49b1f188-9df5-44c6-b8e3-43c898677b55",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "It could be that we have a few `toLSP` extension methods on mtags types from the time mtags didn't depend on lsp4j.",
        "createdAt" : "2019-05-15T13:50:17Z",
        "updatedAt" : "2019-05-16T11:54:05Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b142f5cd4b8e8230bbc6afa68fbe49c21214b35d",
    "line" : null,
    "diffHunk" : "@@ -508,4 +508,8 @@ object MetalsEnrichments\n       trailingTokens.find(predicate)\n   }\n \n+  implicit class XtensionMetalsCommand(command: Command) {"
  },
  {
    "id" : "1ad0ba9e-a1f9-4e41-a598-6a5479d26b02",
    "prId" : 721,
    "comments" : [
      {
        "id" : "6314bb08-a410-40ba-ae93-d055286abc48",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "IS that used anywhere?",
        "createdAt" : "2019-05-16T14:39:22Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e3c999e9b79f7d0d6a4c95756d12ec54f6abbc90",
    "line" : null,
    "diffHunk" : "@@ -508,4 +513,12 @@ object MetalsEnrichments\n       trailingTokens.find(predicate)\n   }\n \n+  final implicit class XtensionScalaOption[A](option: Option[A]) {\n+    def getOrThrow(e: => Exception): A = {"
  },
  {
    "id" : "15c6cc8e-2b93-4497-a798-61d0913a772b",
    "prId" : 721,
    "comments" : [
      {
        "id" : "73cf58fe-1bd2-46f5-8906-04f0fb7993cb",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "`isOK`",
        "createdAt" : "2019-05-20T10:14:56Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e3c999e9b79f7d0d6a4c95756d12ec54f6abbc90",
    "line" : null,
    "diffHunk" : "@@ -76,6 +76,11 @@ object MetalsEnrichments\n     }\n   }\n \n+  implicit class XtensionCompileResult(result: b.CompileResult) {\n+    def succeeded: Boolean = result.getStatusCode == b.StatusCode.OK"
  },
  {
    "id" : "b5ead1bb-c90f-4ee3-9fd8-3131951527e3",
    "prId" : 721,
    "comments" : [
      {
        "id" : "6d05b956-2437-421e-af76-e6536afefff5",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "`isError`",
        "createdAt" : "2019-05-20T10:15:01Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e3c999e9b79f7d0d6a4c95756d12ec54f6abbc90",
    "line" : null,
    "diffHunk" : "@@ -76,6 +76,11 @@ object MetalsEnrichments\n     }\n   }\n \n+  implicit class XtensionCompileResult(result: b.CompileResult) {\n+    def succeeded: Boolean = result.getStatusCode == b.StatusCode.OK\n+    def failed: Boolean = result.getStatusCode == b.StatusCode.ERROR"
  },
  {
    "id" : "4dd4a19e-110b-4c6c-bdf2-c96c53d448f9",
    "prId" : 919,
    "comments" : [
      {
        "id" : "b75def79-018d-4216-80bf-01f23548fca2",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "`position` or `index`?\r\nsince this variable is changing, it doesn't remain a \"start\" very long",
        "createdAt" : "2019-09-13T10:57:57Z",
        "updatedAt" : "2019-09-13T11:02:47Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "992b86233b09b98f9a6c34c8da57c19d9562d623",
    "line" : null,
    "diffHunk" : "@@ -342,6 +342,18 @@ object MetalsEnrichments\n       value.startsWith(\"-P:scalajs:\")\n     }\n \n+    def lastIndexBetween(\n+        char: Char,\n+        lowerBound: Int = 0,\n+        upperBound: Int = value.size\n+    ) = {\n+      var start = upperBound"
  },
  {
    "id" : "38bafabe-87fd-400f-a031-432877a701ed",
    "prId" : 923,
    "comments" : [
      {
        "id" : "97095426-5a52-496a-8433-30c5eb1e487a",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "`Try`? Future seems here like a way to pack an error.",
        "createdAt" : "2019-09-18T10:32:38Z",
        "updatedAt" : "2019-09-24T10:49:11Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "34b736c65504efc71e34421317b1346d8671e0ea",
    "line" : 26,
    "diffHunk" : "@@ -147,6 +151,23 @@ object MetalsEnrichments\n           throw e\n       }\n     }\n+\n+    def withTimeout(length: Int, unit: TimeUnit)(\n+        implicit ec: ExecutionContext\n+    ): Future[A] = {\n+      Future(Await.result(future, FiniteDuration(length, unit)))"
  },
  {
    "id" : "b41e9f7f-90a8-44bc-9413-589104455ce6",
    "prId" : 935,
    "comments" : [
      {
        "id" : "9601550c-0c14-4a49-82cb-e9c82ecb2939",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "```scala\r\nprivate val zipMagicNumbers = Set(0x504B0304, 0x504B0506, 0x504B0708)\r\ndef hasZipMagicNumbers(): Boolean = {\r\n  val in = new DataInputStream(Files.newInputStream(path))\r\n  try {\r\n    val number = in.readInt()\r\n    zipMagicNumbers.contains(number)\r\n  } catch {\r\n    case NonFatal(e) => false\r\n  } finally {\r\n    in.close()\r\n  }\r\n}\r\n```",
        "createdAt" : "2019-10-14T11:18:01Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a21ffe04-3176-4c65-be58-ef616c29eec5",
        "parentId" : "9601550c-0c14-4a49-82cb-e9c82ecb2939",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This method would crash if `path` doesn't exist\r\n```\r\n@ java.nio.file.Files.newInputStream(java.nio.file.Paths.get(\"doesnotexist\"))\r\njava.nio.file.NoSuchFileException: doesnotexist\r\n```\r\nI tried to avoid the double try/catch but wasn't able to make it look clean. In the end, this method is self-contained enough I don't think minor improvements in readability will make a big difference in maintainability.",
        "createdAt" : "2019-10-20T09:43:42Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a95ae87fd9621161d156685f32480fcb7bb451a4",
    "line" : null,
    "diffHunk" : "@@ -270,6 +272,39 @@ object MetalsEnrichments\n       FileIO.slurp(path, StandardCharsets.UTF_8)\n     }\n \n+    def isValidClasspathEntry(): Boolean =\n+      path.isDirectory || hasZipMagicNumbers()\n+\n+    /**\n+     * Returns true if this file can be read as a ZIP/Jar file.\n+     *\n+     * It's not sufficient to check the filename extension because `*.jar`\n+     * files can contain non-ZIP contents causing `java.util.zip.ZipError`\n+     * which is difficult to recover from.\n+     */\n+    def hasZipMagicNumbers(): Boolean = {"
  },
  {
    "id" : "6d58483f-1751-4494-8426-4fadf6d01641",
    "prId" : 1048,
    "comments" : [
      {
        "id" : "b60c7963-326f-4862-8b44-355f22b7f588",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "`path.startsWith(workspace)` should strictly speaking be a condition as well",
        "createdAt" : "2019-11-11T13:50:07Z",
        "updatedAt" : "2019-11-11T16:33:17Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "47b38906-7141-4fc8-bc7b-cde8caa32ed2",
        "parentId" : "b60c7963-326f-4862-8b44-355f22b7f588",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Added! ",
        "createdAt" : "2019-11-11T16:33:44Z",
        "updatedAt" : "2019-11-11T16:33:44Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "32617da1c138d4dd74af7289c14ff3aeb1bc9654",
    "line" : 11,
    "diffHunk" : "@@ -250,10 +250,20 @@ object MetalsEnrichments\n       }\n     }\n     def isDependencySource(workspace: AbsolutePath): Boolean =\n-      workspace.toNIO.getFileSystem == path.toNIO.getFileSystem &&\n-        path.toNIO.startsWith(\n-          workspace.resolve(Directories.readonly).toNIO\n-        )\n+      isLocalFileSystem(workspace) &&\n+        isInReadonlyDirectory(workspace)\n+\n+    def isWorkspaceSource(workspace: AbsolutePath): Boolean ="
  },
  {
    "id" : "49b07359-23a1-47be-ba1b-f78df78dfc12",
    "prId" : 1057,
    "comments" : [
      {
        "id" : "296d15f2-9215-4df0-a56e-186c0e213419",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "🙈 ",
        "createdAt" : "2019-11-11T04:03:20Z",
        "updatedAt" : "2019-11-11T14:41:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "38b428d5-9e7e-46f2-8e00-237f3b585f04",
        "parentId" : "296d15f2-9215-4df0-a56e-186c0e213419",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Wish this was easier to write...",
        "createdAt" : "2019-11-11T04:03:29Z",
        "updatedAt" : "2019-11-11T14:41:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3de43fb7-d3a0-4cd8-8509-7d062f914f22",
        "parentId" : "296d15f2-9215-4df0-a56e-186c0e213419",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "```scala\r\ntry initializeParams.getCapabilities.getTextDocument.getCompletion.getCompletionItem.getSnippetSupport.booleanValue\r\ncatch { case _: NPE => false }\r\n```\r\n 😅 ",
        "createdAt" : "2019-11-11T04:04:34Z",
        "updatedAt" : "2019-11-11T14:41:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "017a6427-b144-4444-95fc-38d14b5684e7",
        "parentId" : "296d15f2-9215-4df0-a56e-186c0e213419",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "poor man's monad :P ",
        "createdAt" : "2019-11-11T14:20:14Z",
        "updatedAt" : "2019-11-11T14:41:31Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "03c3f686dd1789f90cd4b4dd18b979160753abb7",
    "line" : 4,
    "diffHunk" : "@@ -509,6 +509,16 @@ object MetalsEnrichments\n         )\n       } yield hierarchicalDocumentSymbolSupport.booleanValue).getOrElse(false)\n \n+    def supportsCompletionSnippets: Boolean ="
  },
  {
    "id" : "e78f5f14-e5fa-4f41-81e7-27677537e76b",
    "prId" : 1145,
    "comments" : [
      {
        "id" : "c5ae89e0-cf40-4c43-a60e-a5a6f0db3715",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "lol",
        "createdAt" : "2019-12-04T16:57:27Z",
        "updatedAt" : "2019-12-05T11:14:30Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c032fa899f1747d53cf2025b6e1cf03227b19980",
    "line" : 4,
    "diffHunk" : "@@ -241,7 +241,7 @@ object MetalsEnrichments\n     def sourcerootOption: String = s\"\"\"\"-P:semanticdb:sourceroot:$path\"\"\"\"\n \n     /**\n-     * Resolve each path segment individually to prevent jjkjjk"
  },
  {
    "id" : "9ec6f4b5-435b-4f81-ad90-b37a1ad91ea2",
    "prId" : 1155,
    "comments" : [
      {
        "id" : "3b3647b0-21dc-47bb-aea7-d1d6eef45f7d",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "So there is still a risk we will have a non-atomic operation? Shouldn't we retry the atomic move again or resign altogether.",
        "createdAt" : "2019-12-05T20:41:02Z",
        "updatedAt" : "2019-12-05T20:41:11Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "dfa09b85-3780-4eb7-8f96-09380d9abcfb",
        "parentId" : "3b3647b0-21dc-47bb-aea7-d1d6eef45f7d",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Some file systems don’t support atomic moves so the best we can do is fall back to a normal move. ",
        "createdAt" : "2019-12-05T20:59:11Z",
        "updatedAt" : "2019-12-05T20:59:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e0a5d5ab-144b-4430-a4bf-84de8ef64407",
        "parentId" : "3b3647b0-21dc-47bb-aea7-d1d6eef45f7d",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Could there be a more specific exception to catch here?",
        "createdAt" : "2019-12-05T21:00:23Z",
        "updatedAt" : "2019-12-05T21:00:23Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5adb5873-8e11-4be5-b26f-4021bb557175",
        "parentId" : "3b3647b0-21dc-47bb-aea7-d1d6eef45f7d",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "The docs don't specify what exception will be thrown so I didn't want to be too specific. ",
        "createdAt" : "2019-12-06T13:36:25Z",
        "updatedAt" : "2019-12-06T13:36:26Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b68fb8c5f762e67fc61452fc9363fd1cebf0ac19",
    "line" : 32,
    "diffHunk" : "@@ -344,7 +345,27 @@ object MetalsEnrichments\n \n     def writeText(text: String): Unit = {\n       path.parent.createDirectories()\n-      Files.write(path.toNIO, text.getBytes(StandardCharsets.UTF_8))\n+      val tmp = Files.createTempFile(\"metals\", path.filename)\n+      // Write contents first to a temporary file and then try to\n+      // atomically move the file to the destination. The atomic move\n+      // reduces the risk that another tool will concurrently read the\n+      // file contents during a half-complete file write.\n+      Files.write(\n+        tmp,\n+        text.getBytes(StandardCharsets.UTF_8),\n+        StandardOpenOption.TRUNCATE_EXISTING\n+      )\n+      try {\n+        Files.move(\n+          tmp,\n+          path.toNIO,\n+          StandardCopyOption.REPLACE_EXISTING,\n+          StandardCopyOption.ATOMIC_MOVE\n+        )\n+      } catch {\n+        case NonFatal(_) =>\n+          Files.move(tmp, path.toNIO, StandardCopyOption.REPLACE_EXISTING)"
  },
  {
    "id" : "d716bfb4-3f46-482c-8a11-d51e4a8ca84c",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "b11efb50-a932-4ca3-a87e-71d9012ed13f",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Did you try using `findAllMatchIn`?\r\n\r\n<img width=\"557\" alt=\"Screenshot 2019-12-15 at 11 33 17\" src=\"https://user-images.githubusercontent.com/1408093/70862042-c4dd1000-1f2e-11ea-8b32-23041ae290be.png\">\r\n",
        "createdAt" : "2019-12-15T11:33:56Z",
        "updatedAt" : "2019-12-18T11:36:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "04ef30f47759c2620cd886265e4c50169245a539",
    "line" : null,
    "diffHunk" : "@@ -411,6 +411,13 @@ object MetalsEnrichments\n \n     def toAbsolutePath: AbsolutePath =\n       AbsolutePath(Paths.get(URI.create(value.stripPrefix(\"metals:\")))).dealias\n+\n+    def findAll(pattern: String): Iterator[Int] = {"
  },
  {
    "id" : "6d501b7c-2caf-4ba9-b6cc-4ec884534caf",
    "prId" : 1447,
    "comments" : [
      {
        "id" : "9a7feefc-db35-49a0-8465-d8a70a39a4d0",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "There should already be `XtensionScalaFuture`",
        "createdAt" : "2020-02-21T13:07:26Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ec24951f-a23b-4e92-880a-2ce17d2901f7",
        "parentId" : "9a7feefc-db35-49a0-8465-d8a70a39a4d0",
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "moved",
        "createdAt" : "2020-02-21T16:41:33Z",
        "updatedAt" : "2020-02-21T16:41:42Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "948961c16a2b407e9b6be832f69458537ee4bc93",
    "line" : null,
    "diffHunk" : "@@ -602,4 +602,25 @@ object MetalsEnrichments\n     def findFirstTrailing(predicate: Token => Boolean): Option[Token] =\n       trailingTokens.find(predicate)\n   }\n+\n+  implicit class OptionFutureTransformer[A](state: Future[Option[A]]) {\n+    def flatMapOption[B](\n+        f: A => Future[Option[B]]\n+    )(implicit ec: ExecutionContext): Future[Option[B]] =\n+      state.flatMap(_.fold(Future.successful(Option.empty[B]))(f))\n+\n+    def mapOption[B](\n+        f: A => Future[B]\n+    )(implicit ec: ExecutionContext): Future[Option[B]] =\n+      state.flatMap(\n+        _.fold(Future.successful(Option.empty[B]))(f(_).liftOption)\n+      )\n+  }\n+\n+  implicit class OptionFutureLift[A](state: Future[A]) {"
  },
  {
    "id" : "1769967e-a546-4832-b35c-0cd79c80c28c",
    "prId" : 1523,
    "comments" : [
      {
        "id" : "ad4ee7c7-0f13-4dee-89c2-2fef4738c17e",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "I think this may have gotten chopped off. `to prevent... ?`",
        "createdAt" : "2020-04-04T08:46:58Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2e6d2e89-1ed1-4157-92bb-841ea4def704",
        "parentId" : "ad4ee7c7-0f13-4dee-89c2-2fef4738c17e",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Thanks for noticing, not sure how that disappeared. Fixed!",
        "createdAt" : "2020-04-06T18:03:59Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1142490703f832961ac0df1debd14b4f3b12ce7d",
    "line" : null,
    "diffHunk" : "@@ -245,7 +229,17 @@ object MetalsEnrichments\n     def sourcerootOption: String = s\"\"\"\"-P:semanticdb:sourceroot:$path\"\"\"\"\n \n     /**\n-     * Resolve each path segment individually to prevent FileSystem mismatch errors.\n+     * Reads file contents from editor buffer with fallback to disk.\n+     */\n+    def toInputFromBuffers(buffers: Buffers): m.Input.VirtualFile = {\n+      buffers.get(path) match {\n+        case Some(text) => Input.VirtualFile(path.toString(), text)\n+        case None => path.toInput\n+      }\n+    }\n+\n+    /**\n+     * Resolve each path segment individually to prevent"
  },
  {
    "id" : "049a925c-82c3-4874-ba5e-888a03fd8c4e",
    "prId" : 1523,
    "comments" : [
      {
        "id" : "0cf6c8d2-7e84-4532-9300-94f5b3268056",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Ignorant question. This is just because Scala3 produces semanticdb, and therefore are checking for this rather than the plugin right?",
        "createdAt" : "2020-04-04T08:48:59Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "61bb53b5-9f86-457c-a05e-48199fb14062",
        "parentId" : "0cf6c8d2-7e84-4532-9300-94f5b3268056",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Yes, we don't need to check for the plugin, since we don't need one.",
        "createdAt" : "2020-04-04T09:55:10Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1142490703f832961ac0df1debd14b4f3b12ce7d",
    "line" : 112,
    "diffHunk" : "@@ -508,14 +478,26 @@ object MetalsEnrichments\n         .map(AbsolutePath(_))\n         .getOrElse(item.getClassDirectory.toAbsolutePath)\n     }\n-    def isSemanticdbEnabled: Boolean =\n-      item.getOptions.asScala.exists { opt =>\n-        opt.startsWith(\"-Xplugin:\") && opt\n-          .contains(\"semanticdb-scalac\")\n+\n+    def isSemanticdbEnabled(scalaVersion: String): Boolean = {\n+      if (ScalaVersions.isScala3Version(scalaVersion)) {\n+        item.getOptions.asScala.exists { opt => opt == \"-Ysemanticdb\" }"
  },
  {
    "id" : "31026117-df13-4c6c-bc22-eae5a77ee90e",
    "prId" : 1538,
    "comments" : [
      {
        "id" : "5baeea67-c7e5-40fd-b656-b23944427c2d",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Could we make it not throw an exception? We should handle the situation in the code using this method.\r\n\r\nMaybe:\r\n`Some(-1)` - found, but not only index \r\n`Some(1)` - found, and only index\r\n`None` - not found",
        "createdAt" : "2020-04-09T10:08:41Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3aaf1fb4-6af7-49bb-8fc1-8fbe348ef49a",
        "parentId" : "5baeea67-c7e5-40fd-b656-b23944427c2d",
        "author" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "body" : "It's better this way, yes. Should be fixed.",
        "createdAt" : "2020-04-11T15:34:24Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0681fa0b1417b7ac622101d279667c6900a2506e",
    "line" : null,
    "diffHunk" : "@@ -413,12 +414,83 @@ object MetalsEnrichments\n       if (index < safeLowerBound) -1 else index\n     }\n \n+    private def indicesOf(str: String): List[Int] = {\n+      val b = new mutable.ListBuffer[Int]\n+      var idx = 0\n+      while (idx < value.length && idx >= 0) {\n+        idx = value.indexOf(str, idx)\n+        if (idx >= 0) {\n+          b += idx\n+          idx = idx + 1\n+        }\n+      }\n+      b.result()\n+    }\n+\n+    def onlyIndexOf(str: String): Int =\n+      indicesOf(str) match {\n+        case Nil => -1\n+        case List(idx) => idx\n+        case indices =>\n+          throw new Exception("
  },
  {
    "id" : "cedc5a33-2257-47a7-9934-7ce437b9368a",
    "prId" : 1538,
    "comments" : [
      {
        "id" : "61c14592-ff0f-49aa-a6b4-fdc9ef355ec6",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Maybe it makes sense to return lsp's Position?\r\n`indexToLspPosition` could be the name.",
        "createdAt" : "2020-04-09T10:28:26Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3d075f6d-6696-41f6-8706-7f4197696e42",
        "parentId" : "61c14592-ff0f-49aa-a6b4-fdc9ef355ec6",
        "author" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "body" : "Indeed, done.",
        "createdAt" : "2020-04-11T15:34:52Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0681fa0b1417b7ac622101d279667c6900a2506e",
    "line" : null,
    "diffHunk" : "@@ -413,12 +414,83 @@ object MetalsEnrichments\n       if (index < safeLowerBound) -1 else index\n     }\n \n+    private def indicesOf(str: String): List[Int] = {\n+      val b = new mutable.ListBuffer[Int]\n+      var idx = 0\n+      while (idx < value.length && idx >= 0) {\n+        idx = value.indexOf(str, idx)\n+        if (idx >= 0) {\n+          b += idx\n+          idx = idx + 1\n+        }\n+      }\n+      b.result()\n+    }\n+\n+    def onlyIndexOf(str: String): Int =\n+      indicesOf(str) match {\n+        case Nil => -1\n+        case List(idx) => idx\n+        case indices =>\n+          throw new Exception(\n+            s\"Found multiple occurrences of '$str' (${indices.mkString(\", \")})\"\n+          )\n+      }\n+\n     def toAbsolutePathSafe: Option[AbsolutePath] = Try(toAbsolutePath).toOption\n \n     def toAbsolutePath: AbsolutePath =\n       AbsolutePath(\n         Paths.get(URI.create(value.stripPrefix(\"metals:\")))\n       ).dealias\n+\n+    def indexToLineChar(index: Int): (Int, Int) = {"
  },
  {
    "id" : "9db57d47-bf2c-413d-84a3-331f1a4a1a1c",
    "prId" : 1538,
    "comments" : [
      {
        "id" : "d72abd67-7ba2-4e7f-a9c7-6b74a9e55241",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Could we reuse `indexToLineChar` ? It's the same logic.",
        "createdAt" : "2020-04-09T10:32:34Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "57e93381-2cd1-4ce9-be6f-6e1619dc9a15",
        "parentId" : "d72abd67-7ba2-4e7f-a9c7-6b74a9e55241",
        "author" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-04-11T15:34:36Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0681fa0b1417b7ac622101d279667c6900a2506e",
    "line" : null,
    "diffHunk" : "@@ -413,12 +414,83 @@ object MetalsEnrichments\n       if (index < safeLowerBound) -1 else index\n     }\n \n+    private def indicesOf(str: String): List[Int] = {\n+      val b = new mutable.ListBuffer[Int]\n+      var idx = 0\n+      while (idx < value.length && idx >= 0) {\n+        idx = value.indexOf(str, idx)\n+        if (idx >= 0) {\n+          b += idx\n+          idx = idx + 1\n+        }\n+      }\n+      b.result()\n+    }\n+\n+    def onlyIndexOf(str: String): Int =\n+      indicesOf(str) match {\n+        case Nil => -1\n+        case List(idx) => idx\n+        case indices =>\n+          throw new Exception(\n+            s\"Found multiple occurrences of '$str' (${indices.mkString(\", \")})\"\n+          )\n+      }\n+\n     def toAbsolutePathSafe: Option[AbsolutePath] = Try(toAbsolutePath).toOption\n \n     def toAbsolutePath: AbsolutePath =\n       AbsolutePath(\n         Paths.get(URI.create(value.stripPrefix(\"metals:\")))\n       ).dealias\n+\n+    def indexToLineChar(index: Int): (Int, Int) = {\n+      var i = 0\n+      var lineCount = 0\n+      var lineStartIdx = 0\n+      while (i < index && i < value.length) {\n+        if (value.charAt(i) == '\\n') {\n+          lineStartIdx = i + 1\n+          lineCount += 1\n+        }\n+        i += 1\n+      }\n+      (lineCount, index - lineStartIdx)\n+    }\n+\n+    def replaceAllBetween(start: String, end: String)(\n+        replacement: String\n+    ): String =\n+      if (start.isEmpty || end.isEmpty)\n+        value\n+      else {\n+        val startIdx = value.indexOf(start)\n+        if (startIdx < 0)\n+          value\n+        else {\n+          val endIdx = value.indexOf(end, startIdx + start.length)\n+          if (endIdx < 0)\n+            value\n+          else {\n+            val b = new java.lang.StringBuilder\n+            b.append(value, 0, startIdx)\n+            b.append(replacement)\n+            b.append(value, endIdx, value.length)\n+            b.toString\n+          }\n+        }\n+      }\n+\n+    def lineAtIndex(index: Int): Int = {"
  },
  {
    "id" : "7084c48e-f42a-4550-9ded-faae2d7d0ccd",
    "prId" : 1585,
    "comments" : [
      {
        "id" : "bc4de801-d454-486d-ad4b-de022355086f",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Could we keep using `while` etc. It should be more optimized, although most likely not as nice looking.",
        "createdAt" : "2020-04-07T08:57:01Z",
        "updatedAt" : "2020-04-08T14:25:34Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "44a4099e52ba67ba04b29fc92781f01debbc921f",
    "line" : null,
    "diffHunk" : "@@ -400,16 +400,14 @@ object MetalsEnrichments\n       value.startsWith(\"-P:scalajs:\")\n     }\n \n-    def lastIndexBetween(\n+    def getLastIndexOfChar(\n         char: Char,\n-        lowerBound: Int = 0,\n-        upperBound: Int = value.size\n-    ): Int = {\n-      var index = upperBound\n-      while (index >= lowerBound && value(index) != char) {\n-        index -= 1\n-      }\n-      index\n+        lowerBound: Int,\n+        upperBound: Int\n+    ): Option[Int] = {\n+      val indexOfChar =\n+        value.slice(lowerBound, upperBound).reverse.indexOf(char)"
  },
  {
    "id" : "bdf35d7c-321d-4343-ad25-8b3638c4f043",
    "prId" : 2004,
    "comments" : [
      {
        "id" : "9eae48c1-db56-415f-a53f-b3fa2c550e07",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We could do it the same as the method below `isSemanticdbEnabled`\r\n```\r\ndef targetroot(scalaVersion: String):\r\n```\r\n\r\nand check one or the other flag based on the Scala version.",
        "createdAt" : "2020-08-17T13:40:53Z",
        "updatedAt" : "2020-08-17T14:27:23Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bd04f4e3-cc5e-457a-9f24-36d9ef402876",
        "parentId" : "9eae48c1-db56-415f-a53f-b3fa2c550e07",
        "author" : {
          "login" : "adpi2",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/13123162?u=bace53eac21a5f76d367e015799e8a9424751aa6&v=4"
        },
        "body" : "I pushed the revised version. As you can see I had to pass the `scalaVersion` from call site. Tell me what you think.",
        "createdAt" : "2020-08-17T14:28:29Z",
        "updatedAt" : "2020-08-17T14:28:29Z",
        "lastEditedBy" : {
          "login" : "adpi2",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/13123162?u=bace53eac21a5f76d367e015799e8a9424751aa6&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8703ad941ddb44c03c3341f915f860dc3311d70f",
    "line" : null,
    "diffHunk" : "@@ -573,9 +573,17 @@ object MetalsEnrichments\n         .filter(p => Files.exists(p.toNIO))\n     }\n     def targetroot: AbsolutePath = {"
  }
]