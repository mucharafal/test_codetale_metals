[
  {
    "id" : "05a77847-59c7-42e7-a7c2-d907da4a4ad6",
    "prId" : 1379,
    "comments" : [
      {
        "id" : "8f0ae257-7e34-467f-befb-635d785c70ee",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "copy/paste? Should be implementAbstractMembers or something like it",
        "createdAt" : "2020-02-09T21:33:36Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e100253dce0a50a1201510f9bec11fbe8f298bbb",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,64 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.concurrent.Future\n+import scala.meta.pc.CancelToken\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.ExecutionContext\n+import scala.meta.internal.metals._\n+import scala.meta.internal.metals.MetalsEnrichments._\n+\n+class ImplementAbstractMethods(compilers: Compilers) extends CodeAction {\n+\n+  override def kind: String = l.CodeActionKind.QuickFix\n+\n+  override def contribute(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+    Future.sequence(\n+      params\n+        .getContext()\n+        .getDiagnostics()\n+        .asScala\n+        .collect {\n+          case d @ ScalacDiagnostic.ObjectCreationImpossible(_)\n+              if params.getRange().overlapsWith(d.getRange()) =>\n+            autoImport(d, params, token)\n+          case d @ ScalacDiagnostic.MissingImplementation(_)\n+              if params.getRange().overlapsWith(d.getRange()) =>\n+            autoImport(d, params, token)\n+        }\n+    )\n+  }\n+\n+  private def autoImport("
  }
]