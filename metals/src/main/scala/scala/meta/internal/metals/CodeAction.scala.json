[
  {
    "id" : "2f8ba5d3-5bcc-40ab-a58e-adb9b29f26c2",
    "prId" : 1079,
    "comments" : [
      {
        "id" : "f123320a-d017-4382-8c10-68b83ee78aa1",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Can we reduce the number of parameters in this method? It would be nice to bundle these below into a single class so that we can add more components in the future without updating a ton of signatures\r\n\r\n* compilers\r\n* trees\r\n* buffers\r\n* semanticdbs\r\n* symbol search\r\n* definition provider\r\n\r\nWe should try to design these APIs as if they're public and try to keep them as stable as possible.",
        "createdAt" : "2019-12-27T19:45:40Z",
        "updatedAt" : "2019-12-31T17:11:21Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "72826cb0-b4a9-4340-aae2-0ac0d402ff83",
        "parentId" : "f123320a-d017-4382-8c10-68b83ee78aa1",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I thought about this as well, and one alternative way of doing this is to have each CodeAction as a class, which take the necessary “global” parameters upon initialization and the “per request” parameters in the contribute method.\n\nSomething like\n\n```\nclass ImportMissingSymbol(\n  compilers: Compilers,\n  // ...\n) extends CodeAction {\n  override def contribute(params: CodeActionParams): Future[List[l.CodeAction]] = // ...\n}\n```",
        "createdAt" : "2019-12-27T19:57:27Z",
        "updatedAt" : "2019-12-31T17:11:21Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "67a7e858-f901-48f9-956b-a8e3a561bf99",
        "parentId" : "f123320a-d017-4382-8c10-68b83ee78aa1",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "This would allow each code action to manage their required dependencies independently. I think I was too eager in trying to generalize a common interface.",
        "createdAt" : "2019-12-27T19:58:44Z",
        "updatedAt" : "2019-12-31T17:11:21Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "181ccec5-b222-4967-a9b6-7067f3036ab5",
        "parentId" : "f123320a-d017-4382-8c10-68b83ee78aa1",
        "author" : {
          "login" : "cb372",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/106760?v=4"
        },
        "body" : "I've done as @gabro suggested. The `CodeAction` trait's `contribute` method now takes only two arguments, the `params: CodeActionParams` and the cancel token. Each code action is now a class that takes its dependencies as constructor parameters.\r\n\r\nI agree we could maybe try to group the dependencies into a small number of approachable APIs that abstract over them, but I feel it's too soon to do that. So far we only have 2 code actions, and they each depend on completely different functionality, so it's not yet clear how to define sensible abstractions. Maybe revisit this once we've built a couple more code actions and commonalities start to emerge? @olafurpg ",
        "createdAt" : "2019-12-28T20:50:17Z",
        "updatedAt" : "2019-12-31T17:11:21Z",
        "lastEditedBy" : {
          "login" : "cb372",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/106760?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89aca41816462ba01562e42601693aeb33124189",
    "line" : 15,
    "diffHunk" : "@@ -0,0 +1,27 @@\n+package scala.meta.internal.metals\n+\n+import scala.concurrent.{Future, ExecutionContext}\n+import org.eclipse.{lsp4j => l}\n+import scala.meta.internal.mtags.Semanticdbs\n+import scala.meta.pc.CancelToken\n+\n+trait CodeAction {\n+\n+  /**\n+   * This should be one of the String constants\n+   * listed in [[org.eclipse.lsp4j.CodeActionKind]]\n+   */\n+  def kind: String\n+\n+  def contribute("
  },
  {
    "id" : "abe77253-7229-439c-90c7-125bb41eaa32",
    "prId" : 1947,
    "comments" : [
      {
        "id" : "871ab5da-0ccb-48c1-a2b7-72206b26c124",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Officially starting to call all diagnostics now `diagy` and `diagies`. 😆 ",
        "createdAt" : "2020-07-27T09:28:24Z",
        "updatedAt" : "2020-07-27T11:50:05Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "26a86a94e740c4ae59b4910184fd805b363c9302",
    "line" : null,
    "diffHunk" : "@@ -20,4 +20,30 @@ trait CodeAction {\n       token: CancelToken\n   )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]]\n \n+  implicit val actionDiagnosticOrdering = new Ordering[l.CodeAction] {\n+\n+    override def compare(\n+        x: l.CodeAction,\n+        y: l.CodeAction\n+    ): Int = {\n+\n+      (\n+        x.getDiagnostics().asScala.headOption,\n+        y.getDiagnostics().asScala.headOption\n+      ) match {\n+        case (Some(diagx), Some(diagy)) =>"
  }
]