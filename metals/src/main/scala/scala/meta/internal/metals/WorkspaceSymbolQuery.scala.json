[
  {
    "id" : "b7f346c8-71e6-40ee-9a48-7d0eb66e4e1a",
    "prId" : 498,
    "comments" : [
      {
        "id" : "45cfbfd2-44f4-471d-a301-70156919a62a",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "isn't this equivalent to just\r\n\r\n```scala\r\nval actualQuery = query.stripSuffix(\".\")\r\n```\r\n\r\n?",
        "createdAt" : "2019-01-25T10:30:21Z",
        "updatedAt" : "2019-01-25T10:30:57Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "34e7224f-2d6f-4fd0-94b5-1935e34aadcf",
        "parentId" : "45cfbfd2-44f4-471d-a301-70156919a62a",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "It is indeed, but I like it like this to stress the query changes only when there is a trailing `.`",
        "createdAt" : "2019-01-25T10:33:05Z",
        "updatedAt" : "2019-01-25T10:33:05Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4bd614a412b00eb78ec7c8d6030d85b9dd3e7c5a",
    "line" : 20,
    "diffHunk" : "@@ -14,19 +14,25 @@ import scala.meta.internal.metals.WorkspaceSymbolQuery.AlternativeQuery\n  */\n case class WorkspaceSymbolQuery(\n     query: String,\n-    alternatives: Array[AlternativeQuery]\n+    alternatives: Array[AlternativeQuery],\n+    isTrailingDot: Boolean\n ) {\n   def matches(bloom: BloomFilter[CharSequence]): Boolean =\n     alternatives.exists(_.matches(bloom))\n   def matches(symbol: CharSequence): Boolean =\n-    alternatives.exists(_.matches(symbol))\n+    alternatives.exists(_.matches(symbol, isTrailingDot))\n }\n \n object WorkspaceSymbolQuery {\n   def fromTextQuery(query: String): WorkspaceSymbolQuery = {\n+    val isTrailingDot = query.endsWith(\".\")\n+    val actualQuery =\n+      if (isTrailingDot) query.stripSuffix(\".\")\n+      else query"
  }
]