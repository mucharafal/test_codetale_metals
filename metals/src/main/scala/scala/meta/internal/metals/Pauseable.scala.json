[
  {
    "id" : "68e3b809-c04f-405b-a4b6-073d011f4893",
    "prId" : 709,
    "comments" : [
      {
        "id" : "97643955-684f-4a0a-b4e9-adc96f305824",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "`Pauseable` or `Pausable`? (I honestly don't know) ;)",
        "createdAt" : "2019-05-31T14:05:07Z",
        "updatedAt" : "2019-05-31T14:07:10Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fee780a6-dcb8-473d-9603-625b8dd59bed",
        "parentId" : "97643955-684f-4a0a-b4e9-adc96f305824",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I googled myself, seems pauseable is OK, similar to `Cancelable`.",
        "createdAt" : "2019-05-31T14:49:53Z",
        "updatedAt" : "2019-05-31T14:49:54Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e996d0d719a59efbb86d5727fb306a454ea1623b",
    "line" : 8,
    "diffHunk" : "@@ -0,0 +1,32 @@\n+package scala.meta.internal.metals\n+\n+import java.util.concurrent.atomic.AtomicBoolean\n+\n+/**\n+ * Interface for something that can be paused and unpaused, for example a stream of compile requests.\n+ */\n+trait Pauseable {"
  },
  {
    "id" : "c00e5945-ccbd-4757-9268-bad5a0510d4d",
    "prId" : 709,
    "comments" : [
      {
        "id" : "590b1a0c-b4f0-4855-92a7-765cf4b06453",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "or maybe `resume`?",
        "createdAt" : "2019-05-31T14:05:41Z",
        "updatedAt" : "2019-05-31T14:07:10Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ebecf584-f61c-4e8f-b09f-a76b6fcd4bc2",
        "parentId" : "590b1a0c-b4f0-4855-92a7-765cf4b06453",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I prefer `unpause` for consistency with `pause`",
        "createdAt" : "2019-05-31T14:50:11Z",
        "updatedAt" : "2019-05-31T14:50:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e996d0d719a59efbb86d5727fb306a454ea1623b",
    "line" : 15,
    "diffHunk" : "@@ -0,0 +1,32 @@\n+package scala.meta.internal.metals\n+\n+import java.util.concurrent.atomic.AtomicBoolean\n+\n+/**\n+ * Interface for something that can be paused and unpaused, for example a stream of compile requests.\n+ */\n+trait Pauseable {\n+  final val isPaused = new AtomicBoolean(false)\n+\n+  final def pause(): Unit = {\n+    isPaused.set(true)\n+    doPause()\n+  }\n+  final def unpause(): Unit = {"
  },
  {
    "id" : "2730137f-78b8-42a3-a717-ef4b96ce845e",
    "prId" : 709,
    "comments" : [
      {
        "id" : "a1f4c877-90af-4e24-9048-22f265c6d0ec",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "why not `from` - the fact that it is from `Pauseables` is already expressed in the type. Unless it is to circumvent the generics?",
        "createdAt" : "2019-05-31T14:06:41Z",
        "updatedAt" : "2019-05-31T14:07:10Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4f4e0fb9-a40b-4bb5-abff-9d36e44579fe",
        "parentId" : "a1f4c877-90af-4e24-9048-22f265c6d0ec",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "No issue with generics, just `fromX` feels consistent with similar APIs like `Json.fromString`. `Pauseable.fromPauseables` can be read as \"create a single pauseable from this list of pauseables\"",
        "createdAt" : "2019-05-31T14:51:40Z",
        "updatedAt" : "2019-05-31T14:51:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e996d0d719a59efbb86d5727fb306a454ea1623b",
    "line" : 27,
    "diffHunk" : "@@ -0,0 +1,32 @@\n+package scala.meta.internal.metals\n+\n+import java.util.concurrent.atomic.AtomicBoolean\n+\n+/**\n+ * Interface for something that can be paused and unpaused, for example a stream of compile requests.\n+ */\n+trait Pauseable {\n+  final val isPaused = new AtomicBoolean(false)\n+\n+  final def pause(): Unit = {\n+    isPaused.set(true)\n+    doPause()\n+  }\n+  final def unpause(): Unit = {\n+    isPaused.set(false)\n+    doUnpause()\n+  }\n+\n+  def doPause(): Unit = {}\n+  def doUnpause(): Unit = {}\n+}\n+\n+object Pauseable {\n+\n+  /** Merges a list of Pausables into a single Pauseable. */\n+  def fromPausables(all: Iterable[Pauseable]): Pauseable = new Pauseable {"
  }
]