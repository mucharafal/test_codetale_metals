[
  {
    "id" : "fac44603-7247-4d0a-b16e-3b1666655d9c",
    "prId" : 1685,
    "comments" : [
      {
        "id" : "e55eb3a3-3783-4607-89e2-8ed669eb7a18",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We should most likely use `position.encloses` here so that we exclude tokens on the same line.",
        "createdAt" : "2020-05-07T11:48:00Z",
        "updatedAt" : "2020-05-12T13:29:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7f5ec374d50f73ff7a549073d2da0e635cd14ded",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.meta.internal.metals.CodeAction\n+import scala.meta.internal.metals.Buffers\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.meta.pc.CancelToken\n+import scala.meta.tokens.Token\n+\n+class StringActions(buffers: Buffers) extends CodeAction {\n+\n+  override def kind: String = l.CodeActionKind.Refactor\n+\n+  override def contribute(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+\n+    val uri = params.getTextDocument.getUri\n+    val path = uri.toAbsolutePath\n+    val position = params.getRange.getStart\n+\n+    Future\n+      .successful {\n+        path.toInputFromBuffers(buffers).tokenize.toOption match {\n+          case Some(tokens) =>\n+            val lineStringTokens = tokens\n+              .filter(_.pos.startLine == position.getLine)\n+              .collect {\n+                case t: Token.Constant.String => t"
  },
  {
    "id" : "98ab28f2-d910-401d-a7fb-da61d17c595f",
    "prId" : 1685,
    "comments" : [
      {
        "id" : "72c8dcc1-4533-48ec-99ab-e58579e961e3",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Let's maybe check if end is after position and start before, so that we exclude a situation like:\r\n`s\"Hello  \" + \" the cursor is actually here \"`\r\n\r\nIn both cases we should also check if it's actually not a multiline string yet. We don't want to suggest the action when we already have a multiline string.",
        "createdAt" : "2020-05-07T11:49:09Z",
        "updatedAt" : "2020-05-12T13:29:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7f5ec374d50f73ff7a549073d2da0e635cd14ded",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.meta.internal.metals.CodeAction\n+import scala.meta.internal.metals.Buffers\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.meta.pc.CancelToken\n+import scala.meta.tokens.Token\n+\n+class StringActions(buffers: Buffers) extends CodeAction {\n+\n+  override def kind: String = l.CodeActionKind.Refactor\n+\n+  override def contribute(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+\n+    val uri = params.getTextDocument.getUri\n+    val path = uri.toAbsolutePath\n+    val position = params.getRange.getStart\n+\n+    Future\n+      .successful {\n+        path.toInputFromBuffers(buffers).tokenize.toOption match {\n+          case Some(tokens) =>\n+            val lineStringTokens = tokens\n+              .filter(_.pos.startLine == position.getLine)\n+              .collect {\n+                case t: Token.Constant.String => t\n+                case s: Token.Interpolation.Start => s\n+                case e: Token.Interpolation.End => e"
  },
  {
    "id" : "77819ee0-8bac-4126-a885-9e228ab92fa6",
    "prId" : 1685,
    "comments" : [
      {
        "id" : "d83a63a6-01e2-4815-ad5b-82acd19c3341",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "This filter can be removed if we check the tokens exactly in `collect` below",
        "createdAt" : "2020-05-07T11:51:02Z",
        "updatedAt" : "2020-05-12T13:29:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7f5ec374d50f73ff7a549073d2da0e635cd14ded",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.meta.internal.metals.CodeAction\n+import scala.meta.internal.metals.Buffers\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.meta.pc.CancelToken\n+import scala.meta.tokens.Token\n+\n+class StringActions(buffers: Buffers) extends CodeAction {\n+\n+  override def kind: String = l.CodeActionKind.Refactor\n+\n+  override def contribute(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+\n+    val uri = params.getTextDocument.getUri\n+    val path = uri.toAbsolutePath\n+    val position = params.getRange.getStart\n+\n+    Future\n+      .successful {\n+        path.toInputFromBuffers(buffers).tokenize.toOption match {\n+          case Some(tokens) =>\n+            val lineStringTokens = tokens\n+              .filter(_.pos.startLine == position.getLine)"
  },
  {
    "id" : "b3c9b749-d052-4cf8-ae8f-9aa8e7e288d2",
    "prId" : 1685,
    "comments" : [
      {
        "id" : "bc5cd615-a3a3-40ff-a5f6-9452160f1716",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Might be safer to do:\r\n```scala\r\n    tokens.tokens.toList match {\r\n      case (start: Token.Interpolation.Start) :: (end: Token.Interpolation.End) :: _ => ...\r\n      case (str: Token.Constant.String) :: _ => ...\r\n      case _ => None // and change the method return type to Option[l.CodeAction]\r\n    }\r\n```",
        "createdAt" : "2020-05-07T11:55:03Z",
        "updatedAt" : "2020-05-12T13:29:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7f5ec374d50f73ff7a549073d2da0e635cd14ded",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.meta.internal.metals.CodeAction\n+import scala.meta.internal.metals.Buffers\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.meta.pc.CancelToken\n+import scala.meta.tokens.Token\n+\n+class StringActions(buffers: Buffers) extends CodeAction {\n+\n+  override def kind: String = l.CodeActionKind.Refactor\n+\n+  override def contribute(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+\n+    val uri = params.getTextDocument.getUri\n+    val path = uri.toAbsolutePath\n+    val position = params.getRange.getStart\n+\n+    Future\n+      .successful {\n+        path.toInputFromBuffers(buffers).tokenize.toOption match {\n+          case Some(tokens) =>\n+            val lineStringTokens = tokens\n+              .filter(_.pos.startLine == position.getLine)\n+              .collect {\n+                case t: Token.Constant.String => t\n+                case s: Token.Interpolation.Start => s\n+                case e: Token.Interpolation.End => e\n+              }\n+              .toList\n+            if (lineStringTokens.isEmpty) Nil\n+            else List(stripMarginAction(uri, lineStringTokens))\n+          case None => Nil\n+        }\n+      }\n+  }\n+\n+  def stripMarginAction(\n+      uri: String,\n+      tokens: List[Token]\n+  ): l.CodeAction = {\n+    val head = tokens.head\n+\n+    val edits: List[l.TextEdit] =\n+      if (head.name == \"interpolation start\") {"
  },
  {
    "id" : "8c86ea10-6bda-4295-b6bb-56f71ce7976e",
    "prId" : 1685,
    "comments" : [
      {
        "id" : "3b243aa2-cc89-4f40-b5af-6c9488b4b990",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "```suggestion\r\n      str.replaceFirst(\"\\\"\", \"'''|\").replace(\"\\\"\", \"'''.stripMargin\")\r\n```",
        "createdAt" : "2020-05-07T11:56:18Z",
        "updatedAt" : "2020-05-12T13:29:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7f5ec374d50f73ff7a549073d2da0e635cd14ded",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.meta.internal.metals.CodeAction\n+import scala.meta.internal.metals.Buffers\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.meta.pc.CancelToken\n+import scala.meta.tokens.Token\n+\n+class StringActions(buffers: Buffers) extends CodeAction {\n+\n+  override def kind: String = l.CodeActionKind.Refactor\n+\n+  override def contribute(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+\n+    val uri = params.getTextDocument.getUri\n+    val path = uri.toAbsolutePath\n+    val position = params.getRange.getStart\n+\n+    Future\n+      .successful {\n+        path.toInputFromBuffers(buffers).tokenize.toOption match {\n+          case Some(tokens) =>\n+            val lineStringTokens = tokens\n+              .filter(_.pos.startLine == position.getLine)\n+              .collect {\n+                case t: Token.Constant.String => t\n+                case s: Token.Interpolation.Start => s\n+                case e: Token.Interpolation.End => e\n+              }\n+              .toList\n+            if (lineStringTokens.isEmpty) Nil\n+            else List(stripMarginAction(uri, lineStringTokens))\n+          case None => Nil\n+        }\n+      }\n+  }\n+\n+  def stripMarginAction(\n+      uri: String,\n+      tokens: List[Token]\n+  ): l.CodeAction = {\n+    val head = tokens.head\n+\n+    val edits: List[l.TextEdit] =\n+      if (head.name == \"interpolation start\") {\n+        val next = tokens(1)\n+        val editStart =\n+          new l.TextEdit(head.pos.toLSP, toStripMarginStart(head.text))\n+        val editEnd =\n+          new l.TextEdit(next.pos.toLSP, toStripMarginEnd(next.text))\n+        editStart :: List(editEnd)\n+      } else {\n+        List(new l.TextEdit(head.pos.toLSP, toStripMargin(head.text)))\n+      }\n+\n+    val codeAction = new l.CodeAction()\n+\n+    codeAction.setTitle(StringActions.title)\n+    codeAction.setKind(l.CodeActionKind.Refactor)\n+    codeAction.setEdit(\n+      new l.WorkspaceEdit(Map(uri -> edits.asJava).asJava)\n+    )\n+\n+    codeAction\n+  }\n+\n+  def quotify(str: String): String = str.replace(\"'\", \"\"\"\"\"\"\")\n+\n+  def toStripMargin(str: String): String = {\n+    quotify(\n+      str.replaceFirst(\"\"\"\"\"\"\", \"'''|\").replace(\"\"\"\"\"\"\", \"'''.stripMargin\")"
  },
  {
    "id" : "9e43c61c-96b4-46ec-9fc0-76edfa28c807",
    "prId" : 1685,
    "comments" : [
      {
        "id" : "6dfa9fa5-892e-4a48-9ab3-531b3c2f7be1",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "```suggestion\r\n  def quotify(str: String): String = str.replace(\"'\", \"\\\"\")\r\n```",
        "createdAt" : "2020-05-07T11:59:04Z",
        "updatedAt" : "2020-05-12T13:29:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7f5ec374d50f73ff7a549073d2da0e635cd14ded",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.meta.internal.metals.CodeAction\n+import scala.meta.internal.metals.Buffers\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.meta.pc.CancelToken\n+import scala.meta.tokens.Token\n+\n+class StringActions(buffers: Buffers) extends CodeAction {\n+\n+  override def kind: String = l.CodeActionKind.Refactor\n+\n+  override def contribute(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+\n+    val uri = params.getTextDocument.getUri\n+    val path = uri.toAbsolutePath\n+    val position = params.getRange.getStart\n+\n+    Future\n+      .successful {\n+        path.toInputFromBuffers(buffers).tokenize.toOption match {\n+          case Some(tokens) =>\n+            val lineStringTokens = tokens\n+              .filter(_.pos.startLine == position.getLine)\n+              .collect {\n+                case t: Token.Constant.String => t\n+                case s: Token.Interpolation.Start => s\n+                case e: Token.Interpolation.End => e\n+              }\n+              .toList\n+            if (lineStringTokens.isEmpty) Nil\n+            else List(stripMarginAction(uri, lineStringTokens))\n+          case None => Nil\n+        }\n+      }\n+  }\n+\n+  def stripMarginAction(\n+      uri: String,\n+      tokens: List[Token]\n+  ): l.CodeAction = {\n+    val head = tokens.head\n+\n+    val edits: List[l.TextEdit] =\n+      if (head.name == \"interpolation start\") {\n+        val next = tokens(1)\n+        val editStart =\n+          new l.TextEdit(head.pos.toLSP, toStripMarginStart(head.text))\n+        val editEnd =\n+          new l.TextEdit(next.pos.toLSP, toStripMarginEnd(next.text))\n+        editStart :: List(editEnd)\n+      } else {\n+        List(new l.TextEdit(head.pos.toLSP, toStripMargin(head.text)))\n+      }\n+\n+    val codeAction = new l.CodeAction()\n+\n+    codeAction.setTitle(StringActions.title)\n+    codeAction.setKind(l.CodeActionKind.Refactor)\n+    codeAction.setEdit(\n+      new l.WorkspaceEdit(Map(uri -> edits.asJava).asJava)\n+    )\n+\n+    codeAction\n+  }\n+\n+  def quotify(str: String): String = str.replace(\"'\", \"\"\"\"\"\"\")"
  },
  {
    "id" : "6f5f7efc-c8de-47bf-ada5-250d9eec6b0a",
    "prId" : 1685,
    "comments" : [
      {
        "id" : "13e8de3d-fd7a-4528-aa53-09af9542ecaf",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "```suggestion\r\n    quotify(str.replace(\"\\\"\", \"'''|\"))\r\n```",
        "createdAt" : "2020-05-07T11:59:24Z",
        "updatedAt" : "2020-05-12T13:29:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7f5ec374d50f73ff7a549073d2da0e635cd14ded",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.meta.internal.metals.CodeAction\n+import scala.meta.internal.metals.Buffers\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.meta.pc.CancelToken\n+import scala.meta.tokens.Token\n+\n+class StringActions(buffers: Buffers) extends CodeAction {\n+\n+  override def kind: String = l.CodeActionKind.Refactor\n+\n+  override def contribute(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+\n+    val uri = params.getTextDocument.getUri\n+    val path = uri.toAbsolutePath\n+    val position = params.getRange.getStart\n+\n+    Future\n+      .successful {\n+        path.toInputFromBuffers(buffers).tokenize.toOption match {\n+          case Some(tokens) =>\n+            val lineStringTokens = tokens\n+              .filter(_.pos.startLine == position.getLine)\n+              .collect {\n+                case t: Token.Constant.String => t\n+                case s: Token.Interpolation.Start => s\n+                case e: Token.Interpolation.End => e\n+              }\n+              .toList\n+            if (lineStringTokens.isEmpty) Nil\n+            else List(stripMarginAction(uri, lineStringTokens))\n+          case None => Nil\n+        }\n+      }\n+  }\n+\n+  def stripMarginAction(\n+      uri: String,\n+      tokens: List[Token]\n+  ): l.CodeAction = {\n+    val head = tokens.head\n+\n+    val edits: List[l.TextEdit] =\n+      if (head.name == \"interpolation start\") {\n+        val next = tokens(1)\n+        val editStart =\n+          new l.TextEdit(head.pos.toLSP, toStripMarginStart(head.text))\n+        val editEnd =\n+          new l.TextEdit(next.pos.toLSP, toStripMarginEnd(next.text))\n+        editStart :: List(editEnd)\n+      } else {\n+        List(new l.TextEdit(head.pos.toLSP, toStripMargin(head.text)))\n+      }\n+\n+    val codeAction = new l.CodeAction()\n+\n+    codeAction.setTitle(StringActions.title)\n+    codeAction.setKind(l.CodeActionKind.Refactor)\n+    codeAction.setEdit(\n+      new l.WorkspaceEdit(Map(uri -> edits.asJava).asJava)\n+    )\n+\n+    codeAction\n+  }\n+\n+  def quotify(str: String): String = str.replace(\"'\", \"\"\"\"\"\"\")\n+\n+  def toStripMargin(str: String): String = {\n+    quotify(\n+      str.replaceFirst(\"\"\"\"\"\"\", \"'''|\").replace(\"\"\"\"\"\"\", \"'''.stripMargin\")\n+    )\n+  }\n+\n+  def toStripMarginStart(str: String): String = {\n+    quotify(str.replace(\"\"\"\"\"\"\", \"'''|\"))"
  },
  {
    "id" : "a7323489-ad47-4cf6-8ce0-65324b48db18",
    "prId" : 1685,
    "comments" : [
      {
        "id" : "d3503f3e-772d-44f0-93b6-b8588a122ed6",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "```suggestion\r\n    quotify(str.replace(\"\\\"\", \"'''.stripMargin\"))\r\n```",
        "createdAt" : "2020-05-07T11:59:36Z",
        "updatedAt" : "2020-05-12T13:29:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7f5ec374d50f73ff7a549073d2da0e635cd14ded",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.meta.internal.metals.CodeAction\n+import scala.meta.internal.metals.Buffers\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.meta.pc.CancelToken\n+import scala.meta.tokens.Token\n+\n+class StringActions(buffers: Buffers) extends CodeAction {\n+\n+  override def kind: String = l.CodeActionKind.Refactor\n+\n+  override def contribute(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+\n+    val uri = params.getTextDocument.getUri\n+    val path = uri.toAbsolutePath\n+    val position = params.getRange.getStart\n+\n+    Future\n+      .successful {\n+        path.toInputFromBuffers(buffers).tokenize.toOption match {\n+          case Some(tokens) =>\n+            val lineStringTokens = tokens\n+              .filter(_.pos.startLine == position.getLine)\n+              .collect {\n+                case t: Token.Constant.String => t\n+                case s: Token.Interpolation.Start => s\n+                case e: Token.Interpolation.End => e\n+              }\n+              .toList\n+            if (lineStringTokens.isEmpty) Nil\n+            else List(stripMarginAction(uri, lineStringTokens))\n+          case None => Nil\n+        }\n+      }\n+  }\n+\n+  def stripMarginAction(\n+      uri: String,\n+      tokens: List[Token]\n+  ): l.CodeAction = {\n+    val head = tokens.head\n+\n+    val edits: List[l.TextEdit] =\n+      if (head.name == \"interpolation start\") {\n+        val next = tokens(1)\n+        val editStart =\n+          new l.TextEdit(head.pos.toLSP, toStripMarginStart(head.text))\n+        val editEnd =\n+          new l.TextEdit(next.pos.toLSP, toStripMarginEnd(next.text))\n+        editStart :: List(editEnd)\n+      } else {\n+        List(new l.TextEdit(head.pos.toLSP, toStripMargin(head.text)))\n+      }\n+\n+    val codeAction = new l.CodeAction()\n+\n+    codeAction.setTitle(StringActions.title)\n+    codeAction.setKind(l.CodeActionKind.Refactor)\n+    codeAction.setEdit(\n+      new l.WorkspaceEdit(Map(uri -> edits.asJava).asJava)\n+    )\n+\n+    codeAction\n+  }\n+\n+  def quotify(str: String): String = str.replace(\"'\", \"\"\"\"\"\"\")\n+\n+  def toStripMargin(str: String): String = {\n+    quotify(\n+      str.replaceFirst(\"\"\"\"\"\"\", \"'''|\").replace(\"\"\"\"\"\"\", \"'''.stripMargin\")\n+    )\n+  }\n+\n+  def toStripMarginStart(str: String): String = {\n+    quotify(str.replace(\"\"\"\"\"\"\", \"'''|\"))\n+  }\n+\n+  def toStripMarginEnd(str: String): String = {\n+    quotify(str.replace(\"\"\"\"\"\"\", \"'''.stripMargin\"))"
  },
  {
    "id" : "ea8211b3-75c6-4eeb-aa53-5241e0fafa68",
    "prId" : 1685,
    "comments" : [
      {
        "id" : "38300723-9070-4327-a225-9457aae56664",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "```suggestion\r\n  def title: String = \"Convert to multiline string\"\r\n```\r\n?",
        "createdAt" : "2020-05-07T12:04:52Z",
        "updatedAt" : "2020-05-12T13:29:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7f5ec374d50f73ff7a549073d2da0e635cd14ded",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.meta.internal.metals.CodeAction\n+import scala.meta.internal.metals.Buffers\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.meta.pc.CancelToken\n+import scala.meta.tokens.Token\n+\n+class StringActions(buffers: Buffers) extends CodeAction {\n+\n+  override def kind: String = l.CodeActionKind.Refactor\n+\n+  override def contribute(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+\n+    val uri = params.getTextDocument.getUri\n+    val path = uri.toAbsolutePath\n+    val position = params.getRange.getStart\n+\n+    Future\n+      .successful {\n+        path.toInputFromBuffers(buffers).tokenize.toOption match {\n+          case Some(tokens) =>\n+            val lineStringTokens = tokens\n+              .filter(_.pos.startLine == position.getLine)\n+              .collect {\n+                case t: Token.Constant.String => t\n+                case s: Token.Interpolation.Start => s\n+                case e: Token.Interpolation.End => e\n+              }\n+              .toList\n+            if (lineStringTokens.isEmpty) Nil\n+            else List(stripMarginAction(uri, lineStringTokens))\n+          case None => Nil\n+        }\n+      }\n+  }\n+\n+  def stripMarginAction(\n+      uri: String,\n+      tokens: List[Token]\n+  ): l.CodeAction = {\n+    val head = tokens.head\n+\n+    val edits: List[l.TextEdit] =\n+      if (head.name == \"interpolation start\") {\n+        val next = tokens(1)\n+        val editStart =\n+          new l.TextEdit(head.pos.toLSP, toStripMarginStart(head.text))\n+        val editEnd =\n+          new l.TextEdit(next.pos.toLSP, toStripMarginEnd(next.text))\n+        editStart :: List(editEnd)\n+      } else {\n+        List(new l.TextEdit(head.pos.toLSP, toStripMargin(head.text)))\n+      }\n+\n+    val codeAction = new l.CodeAction()\n+\n+    codeAction.setTitle(StringActions.title)\n+    codeAction.setKind(l.CodeActionKind.Refactor)\n+    codeAction.setEdit(\n+      new l.WorkspaceEdit(Map(uri -> edits.asJava).asJava)\n+    )\n+\n+    codeAction\n+  }\n+\n+  def quotify(str: String): String = str.replace(\"'\", \"\"\"\"\"\"\")\n+\n+  def toStripMargin(str: String): String = {\n+    quotify(\n+      str.replaceFirst(\"\"\"\"\"\"\", \"'''|\").replace(\"\"\"\"\"\"\", \"'''.stripMargin\")\n+    )\n+  }\n+\n+  def toStripMarginStart(str: String): String = {\n+    quotify(str.replace(\"\"\"\"\"\"\", \"'''|\"))\n+  }\n+\n+  def toStripMarginEnd(str: String): String = {\n+    quotify(str.replace(\"\"\"\"\"\"\", \"'''.stripMargin\"))\n+  }\n+\n+}\n+\n+object StringActions {\n+  def title: String = \"Convert to stripMargin\""
  },
  {
    "id" : "90afbe19-d957-49b6-875d-776882561f64",
    "prId" : 1685,
    "comments" : [
      {
        "id" : "d5bbabb7-6cbf-4634-9aa2-22f9f04af936",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We will find an earlier token here even from a different line. We should make sure there are no other string tokens between start and end. \r\n\r\nWe can should first check the line beside the character and then find both the start and end that match the position. \r\n\r\n",
        "createdAt" : "2020-05-08T15:06:08Z",
        "updatedAt" : "2020-05-12T13:29:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7f5ec374d50f73ff7a549073d2da0e635cd14ded",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,97 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.meta.internal.metals.CodeAction\n+import scala.meta.internal.metals.Buffers\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.meta.pc.CancelToken\n+import scala.meta.tokens.Token\n+\n+class StringActions(buffers: Buffers) extends CodeAction {\n+\n+  override def kind: String = l.CodeActionKind.Refactor\n+\n+  override def contribute(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+\n+    val uri = params.getTextDocument.getUri\n+    val path = uri.toAbsolutePath\n+    val range = params.getRange\n+\n+    Future\n+      .successful {\n+        path.toInputFromBuffers(buffers).tokenize.toOption match {\n+          case Some(tokens) =>\n+            val stringActions = tokens.collect {\n+              case token: Token.Constant.String\n+                  if (token.pos.toLSP.overlapsWith(range) && isNotTripleQuote(\n+                    token\n+                  )) =>\n+                stripMarginAction(uri, token.pos.toLSP)\n+            }.toList\n+\n+            val interpolatedStringTokens = tokens.collect {\n+              case start: Token.Interpolation.Start"
  },
  {
    "id" : "9e300de4-8609-446f-bc56-dec856e3ba8e",
    "prId" : 1685,
    "comments" : [
      {
        "id" : "274529aa-46e2-4e5d-b0f1-04bad614caba",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "```suggestion\r\n                token\r\n```\r\nand then we can handle it together with interpolated strings, so no need to iterate over the tokens twice.",
        "createdAt" : "2020-05-08T15:07:53Z",
        "updatedAt" : "2020-05-12T13:29:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7f5ec374d50f73ff7a549073d2da0e635cd14ded",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,97 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.meta.internal.metals.CodeAction\n+import scala.meta.internal.metals.Buffers\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.meta.pc.CancelToken\n+import scala.meta.tokens.Token\n+\n+class StringActions(buffers: Buffers) extends CodeAction {\n+\n+  override def kind: String = l.CodeActionKind.Refactor\n+\n+  override def contribute(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+\n+    val uri = params.getTextDocument.getUri\n+    val path = uri.toAbsolutePath\n+    val range = params.getRange\n+\n+    Future\n+      .successful {\n+        path.toInputFromBuffers(buffers).tokenize.toOption match {\n+          case Some(tokens) =>\n+            val stringActions = tokens.collect {\n+              case token: Token.Constant.String\n+                  if (token.pos.toLSP.overlapsWith(range) && isNotTripleQuote(\n+                    token\n+                  )) =>\n+                stripMarginAction(uri, token.pos.toLSP)"
  },
  {
    "id" : "86dded59-c021-4cf0-aeac-dcb14ae792a6",
    "prId" : 1685,
    "comments" : [
      {
        "id" : "f87fc8d5-3935-4848-b002-022933b20307",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We could do something like:\r\n```scala\r\ndef loop(coll : List[Token]): Seq[l.CodeAction] = {\r\n  coll match {\r\n    case token: Token.Constant.String :: _ =>  stripMarginAction(uri, token.pos.toLSP)\r\n    case (s: Token.Interpolation.Start) :: (e: Token.Interpolation.End) :: other =>\r\n      if ( s <= pos <= e)\r\n         stripMarginAction(uri,  ....)\r\n      else\r\n        loop(other)\r\n    case _ => Nil\r\n  }\r\n}\r\nloop(stringTokens) // interpolatedStringTokens + stringTokens\r\n```\r\n\r\n",
        "createdAt" : "2020-05-08T15:18:16Z",
        "updatedAt" : "2020-05-12T13:29:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7f5ec374d50f73ff7a549073d2da0e635cd14ded",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,97 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.meta.internal.metals.CodeAction\n+import scala.meta.internal.metals.Buffers\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.meta.pc.CancelToken\n+import scala.meta.tokens.Token\n+\n+class StringActions(buffers: Buffers) extends CodeAction {\n+\n+  override def kind: String = l.CodeActionKind.Refactor\n+\n+  override def contribute(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+\n+    val uri = params.getTextDocument.getUri\n+    val path = uri.toAbsolutePath\n+    val range = params.getRange\n+\n+    Future\n+      .successful {\n+        path.toInputFromBuffers(buffers).tokenize.toOption match {\n+          case Some(tokens) =>\n+            val stringActions = tokens.collect {\n+              case token: Token.Constant.String\n+                  if (token.pos.toLSP.overlapsWith(range) && isNotTripleQuote(\n+                    token\n+                  )) =>\n+                stripMarginAction(uri, token.pos.toLSP)\n+            }.toList\n+\n+            val interpolatedStringTokens = tokens.collect {\n+              case start: Token.Interpolation.Start\n+                  if (start.pos.toLSP.getStart.getCharacter <= range.getStart.getCharacter\n+                    && isNotTripleQuote(start)) =>\n+                start\n+              case end: Token.Interpolation.End\n+                  if (end.pos.toLSP.getEnd.getCharacter >= range.getEnd.getCharacter\n+                    && isNotTripleQuote(end)) =>\n+                end\n+            }.toList\n+\n+            interpolatedStringTokens match {"
  },
  {
    "id" : "08c83708-1e25-4c61-b973-908f823cc0c0",
    "prId" : 1685,
    "comments" : [
      {
        "id" : "0bceaac5-aa4b-4b40-b566-83b398085042",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We want to use the 2.13 dialect, otherwise the feature will not work in a file with Scala 2.13 specific syntax",
        "createdAt" : "2020-05-12T13:30:54Z",
        "updatedAt" : "2020-05-12T13:30:54Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e936321d-573b-4984-a894-fe13395b13ed",
        "parentId" : "0bceaac5-aa4b-4b40-b566-83b398085042",
        "author" : {
          "login" : "colineto",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/11595083?u=8ca622acabbe83799b21d524022c59e0b15cbb44&v=4"
        },
        "body" : "okay perfect :)",
        "createdAt" : "2020-05-12T13:43:46Z",
        "updatedAt" : "2020-05-12T13:43:46Z",
        "lastEditedBy" : {
          "login" : "colineto",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/11595083?u=8ca622acabbe83799b21d524022c59e0b15cbb44&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7f5ec374d50f73ff7a549073d2da0e635cd14ded",
    "line" : 28,
    "diffHunk" : "@@ -0,0 +1,103 @@\n+package scala.meta.internal.metals.codeactions\n+\n+import scala.meta.internal.metals.CodeAction\n+import scala.meta.internal.metals.Buffers\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.meta.pc.CancelToken\n+import scala.meta.tokens.Token\n+import scala.meta.internal.metals.Trees\n+\n+class StringActions(buffers: Buffers) extends CodeAction {\n+\n+  override def kind: String = l.CodeActionKind.Refactor\n+\n+  override def contribute(\n+      params: l.CodeActionParams,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n+\n+    val uri = params.getTextDocument.getUri\n+    val path = uri.toAbsolutePath\n+    val range = params.getRange\n+\n+    Future\n+      .successful {\n+        val input = path.toInputFromBuffers(buffers)\n+        Trees.defaultDialect(input).tokenize.toOption match {"
  }
]