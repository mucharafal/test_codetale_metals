[
  {
    "id" : "93ea37c7-c067-4d33-a5d9-f6f67edd8516",
    "prId" : 527,
    "comments" : [
      {
        "id" : "635f5955-ae46-4a59-9fe3-785102f3d8d6",
        "parentId" : null,
        "author" : {
          "login" : "nremond",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/600102?v=4"
        },
        "body" : "But why a synchronized version vs `java.util.concurrent.ConcurrentHashMap`?",
        "createdAt" : "2019-02-20T23:19:24Z",
        "updatedAt" : "2019-03-10T09:44:08Z",
        "lastEditedBy" : {
          "login" : "nremond",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/600102?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "35c52db3-4120-4afb-a220-539c77a64048",
        "parentId" : "635f5955-ae46-4a59-9fe3-785102f3d8d6",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "`j.u.c.ConcurrentHashMap` can deadlock in `computeIfAbsent` when the compute function is expensive",
        "createdAt" : "2019-02-21T08:53:30Z",
        "updatedAt" : "2019-03-10T09:44:08Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c7621ebcf6232d37856b167824069496131bae13",
    "line" : 47,
    "diffHunk" : "@@ -0,0 +1,145 @@\n+package scala.meta.internal.metals\n+\n+import ch.epfl.scala.bsp4j.BuildTargetIdentifier\n+import ch.epfl.scala.bsp4j.ScalaBuildTarget\n+import ch.epfl.scala.bsp4j.ScalacOptionsItem\n+import java.util.Collections\n+import org.eclipse.lsp4j.CompletionItem\n+import org.eclipse.lsp4j.CompletionList\n+import org.eclipse.lsp4j.CompletionParams\n+import org.eclipse.lsp4j.Hover\n+import org.eclipse.lsp4j.SignatureHelp\n+import org.eclipse.lsp4j.TextDocumentPositionParams\n+import org.eclipse.lsp4j.jsonrpc.CancelChecker\n+import scala.concurrent.ExecutionContext\n+import scala.meta.inputs.Position\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.pc.ScalaPresentationCompiler\n+import scala.meta.io.AbsolutePath\n+import scala.meta.pc.PresentationCompiler\n+import scala.meta.pc.SymbolSearch\n+import scala.tools.nsc.Properties\n+\n+/**\n+ * Manages lifecycle for presentation compilers in all build targets.\n+ *\n+ * We need a custom presentation compiler for each build target since\n+ * build targets can have different classpaths and compiler settings.\n+ */\n+class Compilers(\n+    buildTargets: BuildTargets,\n+    buffers: Buffers,\n+    search: SymbolSearch,\n+    embedded: Embedded,\n+    statusBar: StatusBar\n+)(implicit ec: ExecutionContext)\n+    extends Cancelable {\n+\n+  // Not a TrieMap because we want to avoid loading duplicate compilers for the same build target.\n+  val jcache = Collections.synchronizedMap("
  },
  {
    "id" : "8a949c9b-5500-4858-ba44-2409edab0dc2",
    "prId" : 736,
    "comments" : [
      {
        "id" : "944ada91-df9c-4783-9b43-823dca111f5b",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Can we not mix the future/options? Other methods here have option/future. Is there a reason for breaking this consistency?",
        "createdAt" : "2019-05-29T13:24:31Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0a7ec485-d9a3-4a33-abfe-3d645758d983",
        "parentId" : "944ada91-df9c-4783-9b43-823dca111f5b",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Or as @tgodzik suggested - the other way around :)",
        "createdAt" : "2019-05-29T15:17:19Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "40de619a-98c7-49a2-9b19-51b58d65d711",
        "parentId" : "944ada91-df9c-4783-9b43-823dca111f5b",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I have changed all the signatures to return `Future[T]` for consistency, I agree this makes the code easier to reason about.",
        "createdAt" : "2019-05-31T09:05:43Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : 62,
    "diffHunk" : "@@ -138,40 +137,68 @@ class Compilers(\n   def completions(\n       params: CompletionParams,\n       token: CancelToken\n-  ): Option[CompletionList] =\n+  ): Option[Future[CompletionList]] =\n     withPC(params, None) { (pc, pos) =>\n       pc.complete(\n-        CompilerOffsetParams(pos.input.syntax, pos.input.text, pos.start, token)\n-      )\n+          CompilerOffsetParams(\n+            pos.input.syntax,\n+            pos.input.text,\n+            pos.start,\n+            token\n+          )\n+        )\n+        .asScala\n     }\n+\n   def hover(\n       params: TextDocumentPositionParams,\n       token: CancelToken,\n       interactiveSemanticdbs: InteractiveSemanticdbs\n-  ): Option[Optional[Hover]] =\n+  ): Future[Option[Hover]] ="
  },
  {
    "id" : "0c83304d-0196-42ec-9da9-91653a151d63",
    "prId" : 736,
    "comments" : [
      {
        "id" : "8aafc220-19ed-4b31-bf6f-030aa7fc0919",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Is there any way we can make make it `Future[Option[_]]` ? It seems a more natural way of working with futures and will avoid Future.successful(null) later on. \r\n\r\nWhat we would really need is cats here haha.",
        "createdAt" : "2019-05-29T14:23:54Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "91a2293e-3562-4e7b-bd5d-bbe05f4dd40d",
        "parentId" : "8aafc220-19ed-4b31-bf6f-030aa7fc0919",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I agree it's generally desirable to keep the `Future` at the outermost layer. This particular API is only used by `MetalsLanguageServer` where the results go straight to lsp4j so I was lazy and returned whatever shape came out of the implementation.",
        "createdAt" : "2019-05-29T15:00:20Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "58a9376e-0fb2-4832-b507-be27a8203a4d",
        "parentId" : "8aafc220-19ed-4b31-bf6f-030aa7fc0919",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I am fine with that., since it's better we don't add more not needed dependencies.\r\n\r\nWhat I meant with cats was this : https://typelevel.org/cats/datatypes/optiont.html",
        "createdAt" : "2019-05-30T14:34:44Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : null,
    "diffHunk" : "@@ -117,11 +116,11 @@ class Compilers(\n   def completionItemResolve(\n       item: CompletionItem,\n       token: CancelToken\n-  ): Option[CompletionItem] = {\n+  ): Option[Future[CompletionItem]] = {"
  },
  {
    "id" : "6ac07e31-86c7-49d0-bbd4-18d2af4dfb9f",
    "prId" : 959,
    "comments" : [
      {
        "id" : "e36a77c1-51c3-4ce4-8e4d-af46026df41c",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Let's maybe keep to the current naming convention: `getLocation` -> `typeDefinition`",
        "createdAt" : "2019-10-04T14:03:59Z",
        "updatedAt" : "2019-10-04T14:19:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7b0f1eec3bb71a43264c9f32fa70860622c41aaa",
    "line" : 12,
    "diffHunk" : "@@ -154,6 +155,26 @@ class Compilers(\n         .asScala\n     }.getOrElse(Future.successful(new CompletionList()))\n \n+  def getLocation("
  },
  {
    "id" : "f1c63947-c01c-408e-b9cd-0831f122d81e",
    "prId" : 978,
    "comments" : [
      {
        "id" : "e28c3337-0927-4c2c-a136-2e0e9a823ea8",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "`getLocation` -> `typeDefinition`",
        "createdAt" : "2019-10-14T10:07:54Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -154,6 +155,26 @@ class Compilers(\n         .asScala\n     }.getOrElse(Future.successful(new CompletionList()))\n \n+  def typeDefinition(\n+      params: TextDocumentPositionParams,\n+      token: CancelToken,\n+      interactiveSemanticdbs: InteractiveSemanticdbs\n+  ): Future[Option[Location]] =\n+    withPC(params, Some(interactiveSemanticdbs)) { (pc, pos) =>\n+      pc.getLocation("
  },
  {
    "id" : "a6af1cd6-e91f-4817-9d4a-085679c37f8c",
    "prId" : 978,
    "comments" : [
      {
        "id" : "b883b59a-1112-4e1b-8373-b6aaad8e5fa7",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "revert",
        "createdAt" : "2019-10-14T10:10:13Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -169,7 +190,9 @@ class Compilers(\n           )\n         )\n         .asScala\n-        .map(_.asScala)\n+        .map(h => {"
  },
  {
    "id" : "be04d2a9-127e-4b5d-8e1d-d4bff5bc4c36",
    "prId" : 978,
    "comments" : [
      {
        "id" : "b413ab3e-e10f-4d4b-bd17-abec9487c5e6",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "bind the result to a variable, which would make the code more readable:\r\n```scala\r\nval locations = withPC (...)\r\nlocations.getOrElse(Future.successful(Nil))\r\n```",
        "createdAt" : "2019-11-13T07:48:49Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c980aaf6-05a3-4d07-87ed-e607d457e93d",
        "parentId" : "b413ab3e-e10f-4d4b-bd17-abec9487c5e6",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "Fixed.",
        "createdAt" : "2019-11-13T16:11:58Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -156,6 +157,27 @@ class Compilers(\n         .asScala\n     }.getOrElse(Future.successful(new CompletionList()))\n \n+  def typeDefinition(\n+      params: TextDocumentPositionParams,\n+      token: CancelToken,\n+      interactiveSemanticdbs: InteractiveSemanticdbs\n+  ): Future[List[Location]] =\n+    withPC(params, Some(interactiveSemanticdbs)) { (pc, pos) =>"
  },
  {
    "id" : "c3819c42-f425-4431-ad9c-1130f69e5182",
    "prId" : 978,
    "comments" : [
      {
        "id" : "b17d2474-4725-4a0c-bb58-963478385456",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "is the `toList` necessary?",
        "createdAt" : "2019-11-13T07:51:28Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c91a8b06-4275-44f8-95e8-825535a5cdb3",
        "parentId" : "b17d2474-4725-4a0c-bb58-963478385456",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "Fixed.",
        "createdAt" : "2019-11-13T16:12:06Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -156,6 +157,27 @@ class Compilers(\n         .asScala\n     }.getOrElse(Future.successful(new CompletionList()))\n \n+  def typeDefinition(\n+      params: TextDocumentPositionParams,\n+      token: CancelToken,\n+      interactiveSemanticdbs: InteractiveSemanticdbs\n+  ): Future[List[Location]] =\n+    withPC(params, Some(interactiveSemanticdbs)) { (pc, pos) =>\n+      pc.typeDefinition(\n+          CompilerOffsetParams(\n+            pos.input.syntax,\n+            pos.input.text,\n+            pos.start,\n+            token\n+          )\n+        )\n+        .asScala\n+        .map(_.asScala)\n+    }.getOrElse {\n+        Future.successful(List())\n+      }\n+      .map(_.toList)"
  },
  {
    "id" : "d8874968-5dd0-4d80-90e7-cf673fa9cd88",
    "prId" : 978,
    "comments" : [
      {
        "id" : "685f7612-e4c5-4528-a220-9a6a7bed00c0",
        "parentId" : null,
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "`CompilerOffsetParams.fromPos`",
        "createdAt" : "2020-03-30T13:23:15Z",
        "updatedAt" : "2020-04-02T17:08:31Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : 19,
    "diffHunk" : "@@ -151,6 +152,29 @@ class Compilers(\n       pc.complete(CompilerOffsetParams.fromPos(pos, token)).asScala\n     }.getOrElse(Future.successful(new CompletionList()))\n \n+  def typeDefinition(\n+      params: TextDocumentPositionParams,\n+      token: CancelToken,\n+      interactiveSemanticdbs: InteractiveSemanticdbs\n+  ): Future[List[Location]] = {\n+    val locations = withPC(params, Some(interactiveSemanticdbs)) { (pc, pos) =>\n+      pc.typeDefinition(\n+          CompilerOffsetParams("
  },
  {
    "id" : "6602aaa3-d413-4322-a502-6b6f6169925a",
    "prId" : 978,
    "comments" : [
      {
        "id" : "3b941348-c363-494e-9343-e1168b2b8203",
        "parentId" : null,
        "author" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "body" : "it's seems to be consistent with other methods in this file to return `...ju.util.List...`",
        "createdAt" : "2020-03-30T13:24:59Z",
        "updatedAt" : "2020-04-02T17:08:31Z",
        "lastEditedBy" : {
          "login" : "alekseiAlefirov",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/10850363?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : 16,
    "diffHunk" : "@@ -151,6 +152,29 @@ class Compilers(\n       pc.complete(CompilerOffsetParams.fromPos(pos, token)).asScala\n     }.getOrElse(Future.successful(new CompletionList()))\n \n+  def typeDefinition(\n+      params: TextDocumentPositionParams,\n+      token: CancelToken,\n+      interactiveSemanticdbs: InteractiveSemanticdbs\n+  ): Future[List[Location]] = {"
  },
  {
    "id" : "0fa2b391-aa33-459a-a7b9-423af3dc3052",
    "prId" : 1041,
    "comments" : [
      {
        "id" : "7b0a7991-017f-454e-ab10-93edec112122",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "ScalaScript sounds like a horrible language 😨 ",
        "createdAt" : "2019-11-04T11:47:27Z",
        "updatedAt" : "2019-11-09T20:01:12Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f9ce0f16-8370-473f-9fba-19337fec3306",
        "parentId" : "7b0a7991-017f-454e-ab10-93edec112122",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Renamed to `isScalaFilename`",
        "createdAt" : "2019-11-06T06:24:35Z",
        "updatedAt" : "2019-11-09T20:01:12Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a2902a65a77773398f8ac710483906215a06bcf8",
    "line" : null,
    "diffHunk" : "@@ -224,7 +194,7 @@ class Compilers(\n       .orElse(interactiveSemanticdbs.flatMap(_.getBuildTarget(path)))\n     target match {\n       case None =>\n-        if (path.toLanguage.isScala) Some(ramboCompiler)\n+        if (path.isScalaOrScalaScript) Some(ramboCompiler)"
  },
  {
    "id" : "70288ae6-81cf-45ca-af33-f787324d94a5",
    "prId" : 1065,
    "comments" : [
      {
        "id" : "fa7f4307-8ec7-4056-b813-d3c9a8d1a559",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "code actions are triggered on a range, but the presentation compiler needs a position, so I'm arbitrarily picking the end of the range.",
        "createdAt" : "2019-12-06T18:07:20Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1e046b2b878d476d389f19bdcaa73ae4b7c121c9",
    "line" : null,
    "diffHunk" : "@@ -150,6 +152,20 @@ class Compilers(\n       pc.complete(CompilerOffsetParams.fromPos(pos, token)).asScala\n     }.getOrElse(Future.successful(new CompletionList()))\n \n+  def autoImports(\n+      params: CodeActionParams,\n+      name: String,\n+      token: CancelToken\n+  ): Future[ju.List[AutoImportsResult]] = {\n+    val textDocumentPositionParams = new TextDocumentPositionParams(\n+      params.getTextDocument(),\n+      params.getRange().getEnd()"
  },
  {
    "id" : "0dcf17eb-b74d-401a-9d5d-36e80054fb4e",
    "prId" : 1507,
    "comments" : [
      {
        "id" : "20a84150-fbb6-467a-9584-5c77530d3f2c",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This constructor can fail now, which is not great since the rambo compiler is a lazy val. We should fallback to an empty symbol search on exception.\t",
        "createdAt" : "2020-03-18T11:49:46Z",
        "updatedAt" : "2020-03-18T17:05:15Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "bc5ad5a4d7f4d65dd1e932b52c1df0195974cc29",
    "line" : null,
    "diffHunk" : "@@ -63,11 +63,13 @@ class Compilers(\n     scribe.info(\n       \"no build target: using presentation compiler with only scala-library\"\n     )\n-    val compiler = configure(new ScalaPresentationCompiler()).newInstance(\n-      s\"metals-default-${mtags.BuildInfo.scalaCompilerVersion}\",\n-      PackageIndex.scalaLibrary.asJava,\n-      Nil.asJava\n-    )\n+    val ramboSearch = new RamboSymbolSearch(workspace)"
  },
  {
    "id" : "5d9d4c10-19b0-4ac6-bae9-fdf03d7e9b69",
    "prId" : 1523,
    "comments" : [
      {
        "id" : "9a5dabed-74e3-4a58-9ef7-ad51df0143d5",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "InverseDependencies doesn't contain the current target,",
        "createdAt" : "2020-03-25T15:37:22Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "be61e417-5941-4434-afcd-4614a05a15e6",
        "parentId" : "9a5dabed-74e3-4a58-9ef7-ad51df0143d5",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Hmm, I wonder if this change fixes weird issues I've hit on where \"connect to build server\" have fixed it 🤔 \r\n\r\nnit: please try to manually break on infix operators\r\n```suggestion\r\n        target <- buildTargets.inverseDependencies(report.getTarget) +\r\n          report.getTarget()\r\n```",
        "createdAt" : "2020-04-04T08:00:03Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e33e1f81-920e-4324-ae21-c07af307f5c4",
        "parentId" : "9a5dabed-74e3-4a58-9ef7-ad51df0143d5",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed!",
        "createdAt" : "2020-04-06T17:59:31Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1142490703f832961ac0df1debd14b4f3b12ce7d",
    "line" : null,
    "diffHunk" : "@@ -113,14 +122,80 @@ class Compilers(\n       }\n     }\n \n+  def foldingRange(\n+      params: FoldingRangeRequestParams,\n+      token: CancelToken\n+  ): Future[ju.List[FoldingRange]] = {\n+    val path = params.getTextDocument.getUri.toAbsolutePath\n+    val pc = loadCompiler(path, None).getOrElse(ramboCompiler)\n+    val input = path.toInputFromBuffers(buffers)\n+    pc.foldingRange(\n+        CompilerVirtualFileParams(path.toNIO.toUri, input.value)\n+      )\n+      .asScala\n+  }\n+\n+  def onTypeFormatting(\n+      params: DocumentOnTypeFormattingParams\n+  ): Future[ju.List[TextEdit]] = {\n+    val path = params.getTextDocument.getUri.toAbsolutePath\n+    val pc = loadCompiler(path, None).getOrElse(ramboCompiler)\n+    val input = path.toInputFromBuffers(buffers)\n+    pc.onTypeFormatting(params, input.value).asScala\n+  }\n+\n+  def rangeFormatting(\n+      params: DocumentRangeFormattingParams\n+  ): Future[ju.List[TextEdit]] = {\n+    val path = params.getTextDocument.getUri.toAbsolutePath\n+    val pc = loadCompiler(path, None).getOrElse(ramboCompiler)\n+    val input = path.toInputFromBuffers(buffers)\n+    pc.rangeFormatting(params, input.value).asScala\n+  }\n+\n+  def documentSymbol(\n+      params: DocumentSymbolParams\n+  ): Future[ju.List[DocumentSymbol]] = {\n+    val path = params.getTextDocument.getUri.toAbsolutePath\n+    val pc = loadCompiler(path, None).getOrElse(ramboCompiler)\n+    val input = path.toInputFromBuffers(buffers)\n+    pc.documentSymbols(\n+        CompilerVirtualFileParams(path.toNIO.toUri, input.value)\n+      )\n+      .asScala\n+  }\n+\n+  def didClose(path: AbsolutePath): Unit = {\n+    val pc = loadCompiler(path, None).getOrElse(ramboCompiler)\n+    pc.didClose(path.toNIO.toUri())\n+  }\n+\n+  def didChange(path: AbsolutePath): Future[Unit] = {\n+    val pc = loadCompiler(path, None).getOrElse(ramboCompiler)\n+    val input = path.toInputFromBuffers(buffers)\n+    for {\n+      ds <- pc\n+        .didChange(CompilerVirtualFileParams(path.toNIO.toUri(), input.value))\n+        .asScala\n+    } yield {\n+      ds.asScala.headOption match {\n+        case None =>\n+          diagnostics.onNoSyntaxError(path)\n+        case Some(diagnostic) =>\n+          diagnostics.onSyntaxError(path, diagnostic)\n+      }\n+    }\n+  }\n+\n   def didCompile(report: CompileReport): Unit = {\n     if (report.getErrors > 0) {\n       cache.get(report.getTarget).foreach(_.restart())\n     } else {\n       // Restart PC for all build targets that depend on this target since the classfiles\n       // may have changed.\n       for {\n-        target <- buildTargets.inverseDependencies(report.getTarget)\n+        target <- buildTargets.inverseDependencies(report.getTarget) + report"
  },
  {
    "id" : "b0c62a74-f726-4582-921d-d1a29d361ff8",
    "prId" : 1523,
    "comments" : [
      {
        "id" : "83b6cd4a-9e64-467d-b5d6-3dc1bd0b146b",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Moved the configuration for `foldOnlyLines` here",
        "createdAt" : "2020-04-15T13:41:36Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1142490703f832961ac0df1debd14b4f3b12ce7d",
    "line" : 117,
    "diffHunk" : "@@ -286,7 +360,8 @@ class Compilers(\n         config.compilers.copy(\n           _symbolPrefixes = userConfig().symbolPrefixes,\n           isCompletionSnippetsEnabled =\n-            initializeParams.supportsCompletionSnippets\n+            initializeParams.supportsCompletionSnippets,\n+          isFoldOnlyLines = initializeParams.foldOnlyLines"
  },
  {
    "id" : "9d25f602-6ceb-44af-9ade-5995e2abf08c",
    "prId" : 1538,
    "comments" : [
      {
        "id" : "03879e37-d0be-435e-a548-d542f9111171",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Move to a separate function and make both private? ",
        "createdAt" : "2020-03-31T17:09:15Z",
        "updatedAt" : "2020-05-21T11:17:43Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0c4fc291-2099-4299-bd9c-3c028c3058ce",
        "parentId" : "03879e37-d0be-435e-a548-d542f9111171",
        "author" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-04-05T22:13:51Z",
        "updatedAt" : "2020-05-21T11:17:44Z",
        "lastEditedBy" : {
          "login" : "alexarchambault",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/7063723?u=d5befca0ebfec0042dad7ef93973490eef750ff4&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0681fa0b1417b7ac622101d279667c6900a2506e",
    "line" : null,
    "diffHunk" : "@@ -264,12 +275,33 @@ class Compilers(\n   )(fn: (PresentationCompiler, Position) => T): Option[T] = {\n     val path = params.getTextDocument.getUri.toAbsolutePath\n     loadCompiler(path, interactiveSemanticdbs).map { compiler =>\n-      val input = path\n-        .toInputFromBuffers(buffers)\n-        .copy(path = params.getTextDocument.getUri())\n-      val pos = params.getPosition.toMeta(input)\n-      val result = fn(compiler, pos)\n-      result\n+      def defaultInputPos = {\n+        val input = path\n+          .toInputFromBuffers(buffers)\n+          .copy(path = params.getTextDocument.getUri())\n+        val pos = params.getPosition\n+        (input, pos)\n+      }\n+\n+      val ammoniteInputPosOpt ="
  },
  {
    "id" : "4eeaba6a-a432-4e46-b85b-dc183ea10ad7",
    "prId" : 1626,
    "comments" : [
      {
        "id" : "fe5f68d0-8377-4395-9b28-bd76a6de09fb",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\n          .map(params => {\r\n```",
        "createdAt" : "2020-04-20T17:43:10Z",
        "updatedAt" : "2020-04-23T07:46:25Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4753c6c3616bf7eaa6f8d8a9f82b1cce35d9a82a",
    "line" : null,
    "diffHunk" : "@@ -357,12 +357,18 @@ class Compilers(\n       .withExecutorService(ec)\n       .withScheduledExecutorService(sh)\n       .withConfiguration(\n-        config.compilers.copy(\n-          _symbolPrefixes = userConfig().symbolPrefixes,\n-          isCompletionSnippetsEnabled =\n-            initializeParams.supportsCompletionSnippets,\n-          isFoldOnlyLines = initializeParams.foldOnlyLines\n-        )\n+        initializeParams\n+          .map(p => {"
  },
  {
    "id" : "40750e90-6dd7-4a85-9833-25ff22e4329d",
    "prId" : 1783,
    "comments" : [
      {
        "id" : "35f1e969-1fb1-4c9c-8a6c-46612f2e228c",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Not sure about the name, maybe `enclosingClass` would be better.",
        "createdAt" : "2020-05-28T15:25:23Z",
        "updatedAt" : "2020-06-02T20:02:03Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a8248d49-648c-403b-9b7c-be7e9d74fb74",
        "parentId" : "35f1e969-1fb1-4c9c-8a6c-46612f2e228c",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "`enclosingClass` definitely sounds better",
        "createdAt" : "2020-06-01T16:25:18Z",
        "updatedAt" : "2020-06-02T20:02:03Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7cd7c2cf-efc8-4da1-a636-05779580ade1",
        "parentId" : "35f1e969-1fb1-4c9c-8a6c-46612f2e228c",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "changed!",
        "createdAt" : "2020-06-01T17:41:07Z",
        "updatedAt" : "2020-06-02T20:02:03Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "354a7590e2040752863a8b6566562324bc6d9483",
    "line" : null,
    "diffHunk" : "@@ -311,6 +311,20 @@ class Compilers(\n       pc.signatureHelp(CompilerOffsetParams.fromPos(pos, token)).asScala\n     }.getOrElse(Future.successful(new SignatureHelp()))\n \n+  def classForPosition("
  },
  {
    "id" : "1bd80bc0-280a-469f-ae3b-9cab93d19f94",
    "prId" : 1856,
    "comments" : [
      {
        "id" : "b7801ad1-8a9d-4ed8-baf6-b25aaf6b8906",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This code path didn't exist before, why is that? Would it be possible to somehow move the management of compilers to `Compilers.scala`? There seems to be some overlap, maybe we can generate `BuildTargetIdentifier` for worksheets?",
        "createdAt" : "2020-06-25T17:17:02Z",
        "updatedAt" : "2020-06-26T14:08:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9686ebdd-cf87-4569-88a0-5dd8e5e5e462",
        "parentId" : "b7801ad1-8a9d-4ed8-baf6-b25aaf6b8906",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Not sure what you mean? It's invoked after evaluating the worksheet in case of changed dependencies, which in essence is a build target change. I am not sure how otherwise to trigger on that particular event. \r\n\r\nAlternatively, we could have worksheets as a different target and update the build target if dependencies change, which will be effectively the same with more indirection. We do need to somehow restart the presentation compiler.\r\n\r\n> There seems to be some overlap, maybe we can generate BuildTargetIdentifier for worksheets?\r\n\r\nI was thinking about having a separate build target for each worksheet, but since the worksheets can be a part of another build target I decided against. It also seemed like it might cause more work really and I planned to have this for the release tomorrow.\r\n",
        "createdAt" : "2020-06-25T18:47:36Z",
        "updatedAt" : "2020-06-26T14:08:31Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b55f23ec-7bb2-4e1d-a62d-7fef2699e522",
        "parentId" : "b7801ad1-8a9d-4ed8-baf6-b25aaf6b8906",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Sounds good. I agree with your conclusion to keep this as is ",
        "createdAt" : "2020-06-26T09:02:33Z",
        "updatedAt" : "2020-06-26T14:08:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1f17edfb786b6f5af2def3bdb1d0b49714512fb2",
    "line" : 95,
    "diffHunk" : "@@ -329,14 +345,60 @@ class Compilers(\n       path: AbsolutePath,\n       interactiveSemanticdbs: Option[InteractiveSemanticdbs]\n   ): Option[PresentationCompiler] = {\n-    val target = buildTargets\n-      .inverseSources(path)\n-      .orElse(interactiveSemanticdbs.flatMap(_.getBuildTarget(path)))\n-    target match {\n-      case None =>\n-        if (path.isScalaFilename) Some(ramboCompiler)\n-        else None\n-      case Some(value) => loadCompiler(value)\n+\n+    def fromBuildTarget: Option[PresentationCompiler] = {\n+      val target = buildTargets\n+        .inverseSources(path)\n+        .orElse(interactiveSemanticdbs.flatMap(_.getBuildTarget(path)))\n+      target match {\n+        case None =>\n+          if (path.isScalaFilename) Some(ramboCompiler)\n+          else None\n+        case Some(value) => loadCompiler(value)\n+      }\n+    }\n+\n+    if (path.isWorksheet) loadWorksheetCompiler(path).orElse(fromBuildTarget)\n+    else fromBuildTarget\n+  }\n+\n+  def loadWorksheetCompiler(\n+      path: AbsolutePath\n+  ): Option[PresentationCompiler] = {\n+    worksheetsCache.get(path)\n+  }\n+\n+  def restartWorksheetPresentationCompiler(\n+      path: AbsolutePath,\n+      classpath: List[Path]\n+  ): Unit = {\n+    val created = for {\n+      targetId <- buildTargets.inverseSources(path)\n+      info <- buildTargets.scalaTarget(targetId)\n+      isSupported = ScalaVersions.isSupportedScalaVersion(info.scalaVersion)\n+      _ = {\n+        if (!isSupported) {\n+          scribe.warn(s\"unsupported Scala ${info.scalaVersion}\")"
  },
  {
    "id" : "507d872b-ca54-4223-baf3-46ab8c005e6f",
    "prId" : 1856,
    "comments" : [
      {
        "id" : "bc4e6ec0-7dd0-4a4a-bb0a-173cd6da5dcf",
        "parentId" : null,
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "why are you updating `jworksheetsCache` twice?",
        "createdAt" : "2020-06-25T21:48:54Z",
        "updatedAt" : "2020-06-26T14:08:31Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a55330fd-37ff-4b3e-b7fc-2a2d905eb133",
        "parentId" : "bc4e6ec0-7dd0-4a4a-bb0a-173cd6da5dcf",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "okay this is actually foreach if not present :D scala should add method like forempty {} :P",
        "createdAt" : "2020-06-25T22:01:34Z",
        "updatedAt" : "2020-06-26T14:08:31Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9b08c477-1dc8-4106-975b-5fc0d6f4d162",
        "parentId" : "bc4e6ec0-7dd0-4a4a-bb0a-173cd6da5dcf",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "< resolved >",
        "createdAt" : "2020-06-25T22:01:44Z",
        "updatedAt" : "2020-06-26T14:08:31Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1f17edfb786b6f5af2def3bdb1d0b49714512fb2",
    "line" : 119,
    "diffHunk" : "@@ -329,14 +345,68 @@ class Compilers(\n       path: AbsolutePath,\n       interactiveSemanticdbs: Option[InteractiveSemanticdbs]\n   ): Option[PresentationCompiler] = {\n-    val target = buildTargets\n-      .inverseSources(path)\n-      .orElse(interactiveSemanticdbs.flatMap(_.getBuildTarget(path)))\n-    target match {\n-      case None =>\n-        if (path.isScalaFilename) Some(ramboCompiler)\n-        else None\n-      case Some(value) => loadCompiler(value)\n+\n+    def fromBuildTarget: Option[PresentationCompiler] = {\n+      val target = buildTargets\n+        .inverseSources(path)\n+        .orElse(interactiveSemanticdbs.flatMap(_.getBuildTarget(path)))\n+      target match {\n+        case None =>\n+          if (path.isScalaFilename) Some(ramboCompiler)\n+          else None\n+        case Some(value) => loadCompiler(value)\n+      }\n+    }\n+\n+    if (path.isWorksheet) loadWorksheetCompiler(path).orElse(fromBuildTarget)\n+    else fromBuildTarget\n+  }\n+\n+  def loadWorksheetCompiler(\n+      path: AbsolutePath\n+  ): Option[PresentationCompiler] = {\n+    worksheetsCache.get(path)\n+  }\n+\n+  def restartWorksheetPresentationCompiler(\n+      path: AbsolutePath,\n+      classpath: List[Path],\n+      sources: List[Path]\n+  ): Unit = {\n+    val created = for {\n+      targetId <- buildTargets.inverseSources(path)\n+      info <- buildTargets.scalaTarget(targetId)\n+      isSupported = ScalaVersions.isSupportedScalaVersion(info.scalaVersion)\n+      _ = {\n+        if (!isSupported) {\n+          scribe.warn(s\"unsupported Scala ${info.scalaVersion}\")\n+        }\n+      }\n+      if isSupported\n+      scalac <- buildTargets.scalacOptions(targetId)\n+    } yield {\n+      jworksheetsCache.put(\n+        path,\n+        statusBar.trackBlockingTask(\n+          s\"${config.icons.sync}Loading worksheet presentation compiler\"\n+        ) {\n+          val worksheetSearch = new StandaloneSymbolSearch(\n+            workspace,\n+            classpath.map(AbsolutePath(_)),\n+            sources.map(AbsolutePath(_)),\n+            buffers,\n+            fallback = Some(search)\n+          )\n+          newCompiler(scalac, info.scalaInfo, classpath, worksheetSearch)\n+        }\n+      )\n+    }\n+\n+    created.getOrElse {\n+      jworksheetsCache.put("
  },
  {
    "id" : "8a09beb0-9a61-4c51-9154-410083af18c0",
    "prId" : 1856,
    "comments" : [
      {
        "id" : "81b3fb39-6e40-46f4-be6c-e5e77c3fe943",
        "parentId" : null,
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "put returns previous value, `created` ends up being:\r\n```\r\nscala> val created = for {\r\n     |   x <- Option(3)\r\n     | } yield {\r\n     |   null\r\n     | }\r\nval created: Option[Null] = Some(null)\r\n```",
        "createdAt" : "2020-06-25T21:55:23Z",
        "updatedAt" : "2020-06-26T14:08:31Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "63b490fb-d4a0-401c-959e-db14a5ac2f01",
        "parentId" : "81b3fb39-6e40-46f4-be6c-e5e77c3fe943",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Added `()`, but this should not be an issue anyway, since that value is never used.",
        "createdAt" : "2020-06-26T12:59:28Z",
        "updatedAt" : "2020-06-26T14:08:31Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c73bc1fe-0fe0-4a0f-a4a1-00f693b9e83f",
        "parentId" : "81b3fb39-6e40-46f4-be6c-e5e77c3fe943",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Changed to explicit: Option[Unit], which looks better. ",
        "createdAt" : "2020-06-26T14:32:42Z",
        "updatedAt" : "2020-06-26T14:32:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1f17edfb786b6f5af2def3bdb1d0b49714512fb2",
    "line" : 101,
    "diffHunk" : "@@ -329,14 +345,68 @@ class Compilers(\n       path: AbsolutePath,\n       interactiveSemanticdbs: Option[InteractiveSemanticdbs]\n   ): Option[PresentationCompiler] = {\n-    val target = buildTargets\n-      .inverseSources(path)\n-      .orElse(interactiveSemanticdbs.flatMap(_.getBuildTarget(path)))\n-    target match {\n-      case None =>\n-        if (path.isScalaFilename) Some(ramboCompiler)\n-        else None\n-      case Some(value) => loadCompiler(value)\n+\n+    def fromBuildTarget: Option[PresentationCompiler] = {\n+      val target = buildTargets\n+        .inverseSources(path)\n+        .orElse(interactiveSemanticdbs.flatMap(_.getBuildTarget(path)))\n+      target match {\n+        case None =>\n+          if (path.isScalaFilename) Some(ramboCompiler)\n+          else None\n+        case Some(value) => loadCompiler(value)\n+      }\n+    }\n+\n+    if (path.isWorksheet) loadWorksheetCompiler(path).orElse(fromBuildTarget)\n+    else fromBuildTarget\n+  }\n+\n+  def loadWorksheetCompiler(\n+      path: AbsolutePath\n+  ): Option[PresentationCompiler] = {\n+    worksheetsCache.get(path)\n+  }\n+\n+  def restartWorksheetPresentationCompiler(\n+      path: AbsolutePath,\n+      classpath: List[Path],\n+      sources: List[Path]\n+  ): Unit = {\n+    val created = for {\n+      targetId <- buildTargets.inverseSources(path)\n+      info <- buildTargets.scalaTarget(targetId)\n+      isSupported = ScalaVersions.isSupportedScalaVersion(info.scalaVersion)\n+      _ = {\n+        if (!isSupported) {\n+          scribe.warn(s\"unsupported Scala ${info.scalaVersion}\")\n+        }\n+      }\n+      if isSupported\n+      scalac <- buildTargets.scalacOptions(targetId)\n+    } yield {\n+      jworksheetsCache.put("
  },
  {
    "id" : "92b78fa2-2700-40f1-a4fa-693be2147cf9",
    "prId" : 1865,
    "comments" : [
      {
        "id" : "e80cccf9-a4f3-4fd1-8ebe-de0871f948b3",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We could just inline this I think:\r\n```suggestion\r\n    withPCAndAdjustLsp(params, interactiveSemanticdbs)((c: PresentationCompiler, p: Position, adj: AdjustLspData) => fn(c, p))\r\n```",
        "createdAt" : "2020-07-22T10:38:41Z",
        "updatedAt" : "2020-07-31T11:55:17Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d0e667ab-054f-489d-964e-8de1f1d07833",
        "parentId" : "e80cccf9-a4f3-4fd1-8ebe-de0871f948b3",
        "author" : {
          "login" : "dos65",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/5816952?u=801a9faa2796a46c371c28cc181e0fa6abbb7132&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2020-07-24T16:08:55Z",
        "updatedAt" : "2020-07-31T11:55:17Z",
        "lastEditedBy" : {
          "login" : "dos65",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/5816952?u=801a9faa2796a46c371c28cc181e0fa6abbb7132&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1ecc085ce9f65d042e2055d19fd627c5d49e7918",
    "line" : null,
    "diffHunk" : "@@ -462,27 +460,79 @@ class Compilers(\n     else\n       None\n \n+  private def sbtInputPosAdjustmentOpt(\n+      path: AbsolutePath,\n+      position: LspPosition\n+  ): Option[(Input.VirtualFile, LspPosition, AdjustLspData)] = {\n+\n+    buildTargets.sbtBuildScalaTarget\n+      .flatMap(_.autoImports)\n+      .map { imports =>\n+        val appendStr = imports.mkString(\"\", \"\\n\", \"\\n\")\n+        val appendLineSize = imports.size\n+\n+        val originInput = path.toInputFromBuffers(buffers)\n+\n+        val modifiedInput =\n+          originInput.copy(value = appendStr + originInput.value)\n+        val pos = new LspPosition(\n+          appendLineSize + position.getLine(),\n+          position.getCharacter()\n+        )\n+        val adjustLspData = AdjustLspData.create(pos => {\n+          new LspPosition(pos.getLine() - appendLineSize, pos.getCharacter())\n+        })\n+        (modifiedInput, pos, adjustLspData)\n+      }\n+  }\n+\n   private def withPC[T](\n       params: TextDocumentPositionParams,\n       interactiveSemanticdbs: Option[InteractiveSemanticdbs]\n   )(fn: (PresentationCompiler, Position) => T): Option[T] = {\n+    val f =\n+      (c: PresentationCompiler, p: Position, adj: AdjustLspData) => fn(c, p)\n+    withPCAndAdjustLsp(params, interactiveSemanticdbs)(f)"
  },
  {
    "id" : "3e648087-888e-4395-a77d-109be172cf23",
    "prId" : 1984,
    "comments" : [
      {
        "id" : "003fecc7-0004-4609-b308-4d3df035ff9f",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "we shouldn't adjust positions outside of the worksheets.",
        "createdAt" : "2020-08-10T11:49:33Z",
        "updatedAt" : "2020-08-11T08:12:46Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0455ce36-d4a8-4933-a870-20aa3abd4561",
        "parentId" : "003fecc7-0004-4609-b308-4d3df035ff9f",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "🤔 not work for now, but I'm wondering for clarity in the future if we should try to unify where we have adjustments done. For example we check here for worksheets and sbt and adjust accordingly. However, Ammonite also has some adjustments that we do, but those live in \t`Ammonite.scala`. I can see how that could be confusing from someone on the outside. Or, is it a good distinction to have that adjustments related to the PC are in `AdjustLspData` and other things live in their corresponding places? What do you think?",
        "createdAt" : "2020-08-10T12:26:47Z",
        "updatedAt" : "2020-08-11T08:12:46Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f48e2396-2399-4feb-928c-2f0ef8a8d60e",
        "parentId" : "003fecc7-0004-4609-b308-4d3df035ff9f",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Yeah, I will move the adjustments to separate locations",
        "createdAt" : "2020-08-10T14:32:24Z",
        "updatedAt" : "2020-08-11T08:12:46Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b646d4a3ed24d186525d984156c41bf9eadc083b",
    "line" : null,
    "diffHunk" : "@@ -488,9 +488,12 @@ class Compilers(\n                         |}\"\"\".stripMargin\n     val modifiedInput =\n       originInput.copy(value = withOuter)\n-    val adjustLspData = AdjustLspData.create(pos => {\n-      new LspPosition(pos.getLine() - 1, pos.getCharacter() - ident.size)\n-    })\n+    val adjustLspData = AdjustLspData.create(\n+      pos => {\n+        new LspPosition(pos.getLine() - 1, pos.getCharacter() - ident.size)\n+      },\n+      filterOutLocations = { loc => loc.getUri().isWorksheet }"
  }
]