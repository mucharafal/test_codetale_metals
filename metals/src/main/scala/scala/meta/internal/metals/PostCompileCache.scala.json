[
  {
    "id" : "df4d5f0e-8c87-4495-9263-44ef96c1a7e2",
    "prId" : 720,
    "comments" : [
      {
        "id" : "6d90b568-c27e-4a31-bd65-194537b5b177",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Would `MainClasses` be an appropriate name for this index?",
        "createdAt" : "2019-05-15T13:41:39Z",
        "updatedAt" : "2019-05-16T11:54:05Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "898caf97-a3af-46b1-aeea-cf1b5c54251e",
        "parentId" : "6d90b568-c27e-4a31-bd65-194537b5b177",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "the test classes will be collected here as well, so it would have to be renamed to something more general anyway.\r\nCould also be something like `JvmEntryPoints` or something like that - what do you think?",
        "createdAt" : "2019-05-15T14:16:32Z",
        "updatedAt" : "2019-05-16T11:54:05Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4b90dc97-2c08-454d-927d-7e8068c6bf96",
        "parentId" : "6d90b568-c27e-4a31-bd65-194537b5b177",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "`BuildTargetClasses`? It would represent the main/test classes given a build target",
        "createdAt" : "2019-05-15T14:45:00Z",
        "updatedAt" : "2019-05-16T11:54:05Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "36b00732-d688-4027-ba9f-5484af49c095",
        "parentId" : "6d90b568-c27e-4a31-bd65-194537b5b177",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "given that name I would expect it to contain any kind of class from a build target. Maybe `BuildTargetEntryPoints` ?\r\n\r\n@tgodzik what do you think? This class will store every runnable main/test class per build target.",
        "createdAt" : "2019-05-15T14:56:51Z",
        "updatedAt" : "2019-05-16T11:54:05Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fa24e090-0e21-4d28-a6c4-7caf7ce1255b",
        "parentId" : "6d90b568-c27e-4a31-bd65-194537b5b177",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "There would be methods `BuildTargetClasses.{mainClasses,testClasses}` to clarify what kinds of classes the index contains.",
        "createdAt" : "2019-05-15T15:00:58Z",
        "updatedAt" : "2019-05-16T11:54:05Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4a07accc-ea04-4ce2-80e7-2c9074567706",
        "parentId" : "6d90b568-c27e-4a31-bd65-194537b5b177",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "consider me convinced ;)",
        "createdAt" : "2019-05-15T15:05:16Z",
        "updatedAt" : "2019-05-16T11:54:05Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b142f5cd4b8e8230bbc6afa68fbe49c21214b35d",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,60 @@\n+package scala.meta.internal.metals\n+\n+import java.util.Collections.singletonList\n+import java.util.concurrent.CompletableFuture\n+import java.util.concurrent.ConcurrentHashMap\n+import java.util.concurrent.atomic.AtomicBoolean\n+import ch.epfl.scala.{bsp4j => b}\n+import scala.meta.internal.metals.MetalsEnrichments._\n+\n+final class PostCompileCache(buildServer: () => Option[BuildServerConnection]) {"
  },
  {
    "id" : "8d93fee7-43bb-4b4a-95fc-bfb67a0bd0f0",
    "prId" : 720,
    "comments" : [
      {
        "id" : "8f4acb7d-f15a-4d43-81cd-bdda5119b3da",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "We normally use `scala.concurrent.Future[Unit]` for our internal APIs and convert `.asJava` at the end before returning to lsp4j",
        "createdAt" : "2019-05-15T13:42:50Z",
        "updatedAt" : "2019-05-16T11:54:05Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b142f5cd4b8e8230bbc6afa68fbe49c21214b35d",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,60 @@\n+package scala.meta.internal.metals\n+\n+import java.util.Collections.singletonList\n+import java.util.concurrent.CompletableFuture\n+import java.util.concurrent.ConcurrentHashMap\n+import java.util.concurrent.atomic.AtomicBoolean\n+import ch.epfl.scala.{bsp4j => b}\n+import scala.meta.internal.metals.MetalsEnrichments._\n+\n+final class PostCompileCache(buildServer: () => Option[BuildServerConnection]) {\n+  private val initialized = new AtomicBoolean(false)\n+  val mainClasses = new ConcurrentHashMap[String, b.ScalaMainClass]()\n+\n+  def isInitialized: Boolean = initialized.get()\n+\n+  def initialize(target: b.BuildTargetIdentifier): CompletableFuture[Void] =\n+    initialize(singletonList(target))\n+\n+  def initialize(\n+      targets: java.util.List[b.BuildTargetIdentifier]\n+  ): CompletableFuture[Void] = {"
  },
  {
    "id" : "0e583aa7-963b-4fc1-b3cc-f5e72231c784",
    "prId" : 720,
    "comments" : [
      {
        "id" : "4d26bb5a-e449-4b89-8f6d-9baf0b833848",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "make it per buildTarget\r\ne.g. \r\n```scala\r\nclass EntryPoints{\r\n  val mainClasses = new ConcurrentHashMap[String, b.ScalaMainClass]()\r\n}\r\n\r\nval entryPoints = new ConcurrentHashMap[BuildTargetIdentifier, EntryPoints]()\r\n```",
        "createdAt" : "2019-05-15T15:00:01Z",
        "updatedAt" : "2019-05-16T11:54:05Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1f3ae123-5c4a-48d2-b79d-e23ded016827",
        "parentId" : "4d26bb5a-e449-4b89-8f6d-9baf0b833848",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "What are the keys in this map? We BTW normally use `TrieMap` by default for indexes and only `ConcurrentHashMap` if there's a specific need for it.",
        "createdAt" : "2019-05-15T15:03:58Z",
        "updatedAt" : "2019-05-16T11:54:05Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a5a33226-3830-475e-81c9-704da359e994",
        "parentId" : "4d26bb5a-e449-4b89-8f6d-9baf0b833848",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "there are three threads using those structures:\r\n1. one actually fetching main classes\r\n2. one listening for bsp messages\r\n3. one asking for main classes to create code lenses",
        "createdAt" : "2019-05-16T08:24:46Z",
        "updatedAt" : "2019-05-16T11:54:05Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b142f5cd4b8e8230bbc6afa68fbe49c21214b35d",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,60 @@\n+package scala.meta.internal.metals\n+\n+import java.util.Collections.singletonList\n+import java.util.concurrent.CompletableFuture\n+import java.util.concurrent.ConcurrentHashMap\n+import java.util.concurrent.atomic.AtomicBoolean\n+import ch.epfl.scala.{bsp4j => b}\n+import scala.meta.internal.metals.MetalsEnrichments._\n+\n+final class PostCompileCache(buildServer: () => Option[BuildServerConnection]) {\n+  private val initialized = new AtomicBoolean(false)\n+  val mainClasses = new ConcurrentHashMap[String, b.ScalaMainClass]()"
  },
  {
    "id" : "5352dfea-6913-4dc7-89e5-16a46f979047",
    "prId" : 720,
    "comments" : [
      {
        "id" : "0d2311bb-e48d-4ce4-887a-26ecca51832c",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Can't we just do `CompletableFuture.completedFuture(())` instead of null?",
        "createdAt" : "2019-05-16T09:39:45Z",
        "updatedAt" : "2019-05-16T11:54:05Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6918cae3-036f-4cd4-8075-00590929812c",
        "parentId" : "0d2311bb-e48d-4ce4-887a-26ecca51832c",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "it was `Void`, so nope :(\r\nbut anyway, it is fixed now - changed to `Unit` ;)",
        "createdAt" : "2019-05-16T10:08:57Z",
        "updatedAt" : "2019-05-16T11:54:05Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b142f5cd4b8e8230bbc6afa68fbe49c21214b35d",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,60 @@\n+package scala.meta.internal.metals\n+\n+import java.util.Collections.singletonList\n+import java.util.concurrent.CompletableFuture\n+import java.util.concurrent.ConcurrentHashMap\n+import java.util.concurrent.atomic.AtomicBoolean\n+import ch.epfl.scala.{bsp4j => b}\n+import scala.meta.internal.metals.MetalsEnrichments._\n+\n+final class PostCompileCache(buildServer: () => Option[BuildServerConnection]) {\n+  private val initialized = new AtomicBoolean(false)\n+  val mainClasses = new ConcurrentHashMap[String, b.ScalaMainClass]()\n+\n+  def isInitialized: Boolean = initialized.get()\n+\n+  def initialize(target: b.BuildTargetIdentifier): CompletableFuture[Void] =\n+    initialize(singletonList(target))\n+\n+  def initialize(\n+      targets: java.util.List[b.BuildTargetIdentifier]\n+  ): CompletableFuture[Void] = {\n+    clear()\n+\n+    buildServer() match {\n+      case Some(connection) =>\n+        val parameters = new b.ScalaMainClassesParams(targets)\n+        val task = connection\n+          .mainClasses(parameters)\n+          .thenAccept(initializeMainClasses)\n+\n+        initialized.set(true)\n+        task\n+      case None =>\n+        CompletableFuture.completedFuture(null)"
  }
]