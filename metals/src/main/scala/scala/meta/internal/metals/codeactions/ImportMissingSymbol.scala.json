[
  {
    "id" : "65d70576-f53f-408e-9d34-17e1d845f833",
    "prId" : 1286,
    "comments" : [
      {
        "id" : "d4685d96-a5bb-4456-979c-b63a149b8d50",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "we cannot use `encloses` because sometimes the code action range is smaller than the diagnostic range, for example:\r\n\r\n```scala\r\nval x = Future.successful(2)\r\n//      ^^^^^^  diagnostic range\r\n//       <-->   code action range\r\n```\r\n\r\nor even partially overlapping\r\n\r\n```scala\r\nval x = Future.successful(2)\r\n//      ^^^^^^  diagnostic range\r\n//         <------->   code action range\r\n```",
        "createdAt" : "2020-01-11T16:13:19Z",
        "updatedAt" : "2020-01-11T17:12:09Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7e6135a896a913f6ec9a1ae82ca098806ffdfea3",
    "line" : 5,
    "diffHunk" : "@@ -46,7 +46,7 @@ class ImportMissingSymbol(compilers: Compilers) extends CodeAction {\n     Future\n       .sequence(params.getContext().getDiagnostics().asScala.collect {\n         case d @ ScalacDiagnostic.SymbolNotFound(name)\n-            if d.getRange().encloses(params.getRange().getEnd()) =>\n+            if params.getRange().overlapsWith(d.getRange()) =>"
  },
  {
    "id" : "ba01903a-8b36-48f0-a3ed-7f53510fbffc",
    "prId" : 1652,
    "comments" : [
      {
        "id" : "f1145b97-2f65-494a-b065-04830c2706bd",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\n    def importMissingSymbols(\r\n```\r\nMaybe this to better align with the other `importMissingSymbol` in the file.",
        "createdAt" : "2020-04-22T07:20:25Z",
        "updatedAt" : "2020-04-23T06:23:45Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6210392e5ab0214ee811acda5622269e560acfec",
    "line" : null,
    "diffHunk" : "@@ -43,14 +44,42 @@ class ImportMissingSymbol(compilers: Compilers) extends CodeAction {\n         }\n     }\n \n+    def addImportAllMissingSymbol("
  },
  {
    "id" : "52ddcf92-2e72-4b0e-b883-94ee6f563bcd",
    "prId" : 1652,
    "comments" : [
      {
        "id" : "b427c72f-5e46-4f2a-9397-ae3940261bde",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "What would be a scenario where we'd want `< 1`? Aren't we always targeting when there is `1` exactly?",
        "createdAt" : "2020-04-22T07:21:51Z",
        "updatedAt" : "2020-04-23T06:23:45Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "23da8ea6-2af2-4387-96a2-afb61299ce17",
        "parentId" : "b427c72f-5e46-4f2a-9397-ae3940261bde",
        "author" : {
          "login" : "coline-lunatech",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/61458304?u=d07ef5e896f36297ec345c775cc18f9a35806659&v=4"
        },
        "body" : "yep that's true",
        "createdAt" : "2020-04-22T08:09:09Z",
        "updatedAt" : "2020-04-23T06:23:45Z",
        "lastEditedBy" : {
          "login" : "coline-lunatech",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/61458304?u=d07ef5e896f36297ec345c775cc18f9a35806659&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6210392e5ab0214ee811acda5622269e560acfec",
    "line" : null,
    "diffHunk" : "@@ -43,14 +44,42 @@ class ImportMissingSymbol(compilers: Compilers) extends CodeAction {\n         }\n     }\n \n+    def addImportAllMissingSymbol(\n+        codeActions: Buffer[l.CodeAction]\n+    ): Seq[l.CodeAction] = {\n+      val uniqueCodeActions = codeActions\n+        .groupBy(_.getDiagnostics())\n+        .values\n+        .filter(_.length <= 1)"
  },
  {
    "id" : "2ed64c41-40de-45f5-80fc-791bb5ca4607",
    "prId" : 1652,
    "comments" : [
      {
        "id" : "d808b951-011b-48d2-83e0-92dd2aaec873",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "You can probably just leave this as a `Seq` instead of a buffer. Down below at the end of the file where this is `flattened` and passed it, it can just stay a `Seq`. Then in this method, you could change the logic a bit that instead of the `if` statement adding something to the buffer, you could do something like\r\n\r\n\r\n```scala\r\nval codeActionsToReturn = If(uniqueCodeActions.length > 1) {\r\n  ... // create new code action\r\n  codeActions :+ newCodeAction\r\n} else {\r\n  codeActions\r\n}\r\ncodeActionsToReturn\r\n```",
        "createdAt" : "2020-04-22T07:33:43Z",
        "updatedAt" : "2020-04-23T06:23:45Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6210392e5ab0214ee811acda5622269e560acfec",
    "line" : null,
    "diffHunk" : "@@ -43,14 +44,42 @@ class ImportMissingSymbol(compilers: Compilers) extends CodeAction {\n         }\n     }\n \n+    def addImportAllMissingSymbol(\n+        codeActions: Buffer[l.CodeAction]"
  },
  {
    "id" : "952d59db-5938-4271-9e12-53f2b8ae2123",
    "prId" : 1652,
    "comments" : [
      {
        "id" : "421b63e4-0e24-4a91-93f8-15a6bcd1fd16",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "I'm curious if showing the `unambiguous` is a bit verbose to the user.\r\n```suggestion\r\n    s\"Import all possible missing symbols\"\r\n```\r\nWhat do you think?",
        "createdAt" : "2020-04-22T07:35:08Z",
        "updatedAt" : "2020-04-23T06:23:45Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6210392e5ab0214ee811acda5622269e560acfec",
    "line" : 58,
    "diffHunk" : "@@ -60,4 +89,6 @@ object ImportMissingSymbol {\n   def title(name: String, packageName: String): String =\n     s\"Import '$name' from package '$packageName'\"\n \n+  def allSymbolsTitle: String =\n+    s\"Import all missing symbols that are unambiguous\""
  },
  {
    "id" : "5112ce14-7bcd-40c8-b308-5e251fe007ac",
    "prId" : 1652,
    "comments" : [
      {
        "id" : "7526f9c8-8532-4f09-a537-54a634bf72c7",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "This could be dropped. Just have the if-else as the last expression.",
        "createdAt" : "2020-04-22T14:24:02Z",
        "updatedAt" : "2020-04-23T06:23:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6210392e5ab0214ee811acda5622269e560acfec",
    "line" : null,
    "diffHunk" : "@@ -43,14 +43,42 @@ class ImportMissingSymbol(compilers: Compilers) extends CodeAction {\n         }\n     }\n \n+    def importMissingSymbols(\n+        codeActions: Seq[l.CodeAction]\n+    ): Seq[l.CodeAction] = {\n+      val uniqueCodeActions = codeActions\n+        .groupBy(_.getDiagnostics())\n+        .values\n+        .filter(_.length == 1)\n+        .flatten\n+        .toSeq\n+\n+      val allCodeActions = if (uniqueCodeActions.length > 1) {\n+        val allSymbols: l.CodeAction = new l.CodeAction()\n+\n+        val uri = params.getTextDocument().getUri()\n+        val diags = uniqueCodeActions.flatMap(_.getDiagnostics().asScala)\n+        val edits = uniqueCodeActions\n+          .flatMap(_.getEdit().getChanges().get(uri).asScala)\n+          .distinct\n+\n+        allSymbols.setTitle(ImportMissingSymbol.allSymbolsTitle)\n+        allSymbols.setKind(l.CodeActionKind.QuickFix)\n+        allSymbols.setDiagnostics(diags.asJava)\n+        allSymbols.setEdit(new l.WorkspaceEdit(Map(uri -> edits.asJava).asJava))\n+\n+        allSymbols +: codeActions\n+      } else { codeActions }\n+      allCodeActions"
  },
  {
    "id" : "54ee2b6e-886a-43a2-9fc7-22d91bf59079",
    "prId" : 1652,
    "comments" : [
      {
        "id" : "0e159b77-af6d-41b5-91f4-47c96ea98ceb",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I think we could just join all the textEdits into a single text edit, which might help with the tests and the additional newline. ",
        "createdAt" : "2020-04-22T14:27:30Z",
        "updatedAt" : "2020-04-23T06:23:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ea6e8d9f-7141-41fc-a498-8053fc0d264b",
        "parentId" : "0e159b77-af6d-41b5-91f4-47c96ea98ceb",
        "author" : {
          "login" : "coline-lunatech",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/61458304?u=d07ef5e896f36297ec345c775cc18f9a35806659&v=4"
        },
        "body" : "I managed to fix everything that way without changing anything to the TextEdits.scala file. I don't know if this is the right way but it seems that imports are always coming in different order so maybe it is.",
        "createdAt" : "2020-04-23T07:04:40Z",
        "updatedAt" : "2020-04-23T07:04:40Z",
        "lastEditedBy" : {
          "login" : "coline-lunatech",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/61458304?u=d07ef5e896f36297ec345c775cc18f9a35806659&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6210392e5ab0214ee811acda5622269e560acfec",
    "line" : 33,
    "diffHunk" : "@@ -43,14 +43,42 @@ class ImportMissingSymbol(compilers: Compilers) extends CodeAction {\n         }\n     }\n \n+    def importMissingSymbols(\n+        codeActions: Seq[l.CodeAction]\n+    ): Seq[l.CodeAction] = {\n+      val uniqueCodeActions = codeActions\n+        .groupBy(_.getDiagnostics())\n+        .values\n+        .filter(_.length == 1)\n+        .flatten\n+        .toSeq\n+\n+      val allCodeActions = if (uniqueCodeActions.length > 1) {\n+        val allSymbols: l.CodeAction = new l.CodeAction()\n+\n+        val uri = params.getTextDocument().getUri()\n+        val diags = uniqueCodeActions.flatMap(_.getDiagnostics().asScala)\n+        val edits = uniqueCodeActions\n+          .flatMap(_.getEdit().getChanges().get(uri).asScala)\n+          .distinct\n+\n+        allSymbols.setTitle(ImportMissingSymbol.allSymbolsTitle)\n+        allSymbols.setKind(l.CodeActionKind.QuickFix)\n+        allSymbols.setDiagnostics(diags.asJava)\n+        allSymbols.setEdit(new l.WorkspaceEdit(Map(uri -> edits.asJava).asJava))"
  },
  {
    "id" : "7799b699-ff87-47ae-85bf-0c003eb48de5",
    "prId" : 1947,
    "comments" : [
      {
        "id" : "ffc6bae7-3b51-4d57-a30d-ab28edbeba75",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Super nitpicky, but just for consistency, can we avoid infix notation here? I know it was just copied from below.\r\n```suggestion\r\n          l.setNewText(l.getNewText() + r.getNewText().replace(\"\\n\\n\", \"\\n\"))\r\n```",
        "createdAt" : "2020-07-27T08:39:16Z",
        "updatedAt" : "2020-07-27T11:50:05Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "36c68680-cafd-443e-8169-779c29c81e6b",
        "parentId" : "ffc6bae7-3b51-4d57-a30d-ab28edbeba75",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "fixed!",
        "createdAt" : "2020-07-27T09:23:19Z",
        "updatedAt" : "2020-07-27T11:50:05Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "878d05fa-d159-4ffb-9f8d-61d71c8d83ba",
        "parentId" : "ffc6bae7-3b51-4d57-a30d-ab28edbeba75",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Although funnily enough adding a `.` make the replace be applied only on `r`. Without the dot it was applied on the sum of the two strings.",
        "createdAt" : "2020-07-27T09:24:15Z",
        "updatedAt" : "2020-07-27T11:50:05Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f2d6482b-4c64-42af-ac45-5adec1abbadd",
        "parentId" : "ffc6bae7-3b51-4d57-a30d-ab28edbeba75",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Ah, yea I guess that makes sense though. Good catch.",
        "createdAt" : "2020-07-27T11:54:01Z",
        "updatedAt" : "2020-07-27T11:54:02Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "26a86a94e740c4ae59b4910184fd805b363c9302",
    "line" : null,
    "diffHunk" : "@@ -18,6 +18,21 @@ class ImportMissingSymbol(compilers: Compilers) extends CodeAction {\n       token: CancelToken\n   )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] = {\n \n+    val uri = params.getTextDocument().getUri()\n+\n+    def joinActionEdits(actions: Seq[l.CodeAction]) = {\n+      actions\n+        .flatMap(_.getEdit().getChanges().get(uri).asScala)\n+        .distinct\n+        .groupBy(_.getRange())\n+        .values\n+        .map(_.sortBy(_.getNewText()).reduceLeft { (l, r) =>\n+          l.setNewText(l.getNewText() + r.getNewText() replace (\"\\n\\n\", \"\\n\"))"
  }
]