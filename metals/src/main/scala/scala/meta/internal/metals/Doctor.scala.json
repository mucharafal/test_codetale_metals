[
  {
    "id" : "58c4a65a-1eed-4e8d-8532-a56b4d5be734",
    "prId" : 374,
    "comments" : [
      {
        "id" : "f348689b-3457-4515-9836-2148e1cbbf6c",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "is this useful?",
        "createdAt" : "2018-12-06T13:32:53Z",
        "updatedAt" : "2018-12-06T13:34:33Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "235b30a4-b9c1-4537-ae25-355708dad543",
        "parentId" : "f348689b-3457-4515-9836-2148e1cbbf6c",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Just to avoid double analysis that runs through all workspace build targets (which could be large), but I admit this is probably not a bottle-neck",
        "createdAt" : "2018-12-06T13:35:40Z",
        "updatedAt" : "2018-12-06T13:35:40Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b6122194-0930-4826-a6dc-7fb3baac95dc",
        "parentId" : "f348689b-3457-4515-9836-2148e1cbbf6c",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Ah! I didn't realize `problemSummary` was a method",
        "createdAt" : "2018-12-06T13:36:58Z",
        "updatedAt" : "2018-12-06T13:36:58Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "df7f8d5a1264977806c0962631a996acb5646f64",
    "line" : 70,
    "diffHunk" : "@@ -51,13 +75,16 @@ final class Doctor(\n \n   /** Checks if there are any potential problems and if any, notifies the user. */\n   def check(): Unit = {\n-    problemSummary match {\n+    val summary = problemSummary"
  },
  {
    "id" : "15258767-1d0a-4c11-9955-62fce0e84a11",
    "prId" : 744,
    "comments" : [
      {
        "id" : "598d429e-58dd-485c-884d-53f2d58b36b0",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "```suggestion\r\n          \"<a href=https://scalameta.org/docs/semanticdb/guide.html#producing-semanticdb>Scalameta website</a>\"\r\n```",
        "createdAt" : "2019-06-06T14:37:32Z",
        "updatedAt" : "2019-06-07T14:18:14Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1fdf729b-a7ae-4d73-a546-51617ac52d34",
        "parentId" : "598d429e-58dd-485c-884d-53f2d58b36b0",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I was thinking of making Maven specific instructions for this. There is nothing on the scalameta website about maven.",
        "createdAt" : "2019-06-06T14:46:25Z",
        "updatedAt" : "2019-06-07T14:18:14Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3b3bf1a0-e6c2-475c-a494-1d8a241d06ab",
        "parentId" : "598d429e-58dd-485c-884d-53f2d58b36b0",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Should we create a Maven-specific page in that case? Similar to the sbt page https://scalameta.org/metals/docs/build-tools/sbt.html",
        "createdAt" : "2019-06-06T14:49:25Z",
        "updatedAt" : "2019-06-07T14:18:14Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "24fd9729-02d3-49d1-b352-e1cb38ce7109",
        "parentId" : "598d429e-58dd-485c-884d-53f2d58b36b0",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "That's my thinking yes. I can actually do it in this PR, no?",
        "createdAt" : "2019-06-06T14:58:08Z",
        "updatedAt" : "2019-06-07T14:18:14Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7eab01d0f08e38cd6625f0f616ebfa564ddd981f",
    "line" : null,
    "diffHunk" : "@@ -108,12 +108,19 @@ final class Doctor(\n       isSemanticdbEnabled: Boolean,\n       scala: ScalaTarget\n   ): String = {\n+\n+    def isMaven: Boolean = workspace.resolve(\"pom.xml\").isFile\n+    def hint() =\n+      if (isMaven)\n+        \"check how to enable semanticDB on the \" +\n+          \"<a href=https://scalameta.org/metals/docs/build-tools/overview.html>metals website</a>\""
  },
  {
    "id" : "23461f22-8db6-40cf-abfd-a4f5034898ef",
    "prId" : 744,
    "comments" : [
      {
        "id" : "6fef399e-3a1a-4601-9ffc-8b836e220dfb",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "```suggestion\r\n        \"Enable SemanticDB following instructions on the \" +\r\n```",
        "createdAt" : "2019-06-06T14:38:32Z",
        "updatedAt" : "2019-06-07T14:18:14Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ccc49799-78cc-408d-833f-8f28e11921fc",
        "parentId" : "6fef399e-3a1a-4601-9ffc-8b836e220dfb",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "fixed, but `enable` not `Enable` since I capitalize below if this is the only sentence.",
        "createdAt" : "2019-06-06T14:48:39Z",
        "updatedAt" : "2019-06-07T14:18:14Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7eab01d0f08e38cd6625f0f616ebfa564ddd981f",
    "line" : null,
    "diffHunk" : "@@ -108,12 +108,19 @@ final class Doctor(\n       isSemanticdbEnabled: Boolean,\n       scala: ScalaTarget\n   ): String = {\n+\n+    def isMaven: Boolean = workspace.resolve(\"pom.xml\").isFile\n+    def hint() =\n+      if (isMaven)\n+        \"check how to enable semanticDB on the \" +"
  },
  {
    "id" : "9a794f02-3067-4966-8e25-333e81aafb03",
    "prId" : 850,
    "comments" : [
      {
        "id" : "f9dd4aeb-0bc8-47c5-8d9e-1f470ea1533f",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Why is it called **fix**Recommendation? ",
        "createdAt" : "2019-07-31T13:31:55Z",
        "updatedAt" : "2019-07-31T14:22:03Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1fe51e6d-f72c-4a1a-ad9b-eb252309e5f9",
        "parentId" : "f9dd4aeb-0bc8-47c5-8d9e-1f470ea1533f",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Recommendation about the fix",
        "createdAt" : "2019-07-31T14:13:07Z",
        "updatedAt" : "2019-07-31T14:22:03Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "89aad4eb-671e-4a2b-afc7-97469c0bcb41",
        "parentId" : "f9dd4aeb-0bc8-47c5-8d9e-1f470ea1533f",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Changed to recommenedFix, ok?",
        "createdAt" : "2019-07-31T14:22:22Z",
        "updatedAt" : "2019-07-31T14:22:22Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "46ccb8e038b26efe27430b571959eaa4ddc38d39",
    "line" : null,
    "diffHunk" : "@@ -254,13 +253,18 @@ final class Doctor(\n       // the future we may want to update the definition column to take the\n       // existence of library sources into account.\n       val completions: String = definition\n+      val isSemanticdbNeeded = !target.isSemanticdbEnabled && target.isScalaTarget\n       val references: String =\n-        if (isSemanticdbEnabled) {\n-          Icons.unicode.check\n-        } else {\n+        if (isSemanticdbNeeded) {\n           Icons.unicode.alert\n+        } else {\n+          Icons.unicode.check\n         }\n       val center = \"style='text-align: center'\"\n+      val fixRecommendation ="
  },
  {
    "id" : "8ed188f8-2e62-40f2-ba1d-9d825875296c",
    "prId" : 850,
    "comments" : [
      {
        "id" : "9affedbc-48da-47f0-943d-3b8beefb2a35",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Can it be put in a single line? ",
        "createdAt" : "2019-07-31T13:33:10Z",
        "updatedAt" : "2019-07-31T14:22:03Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "46ccb8e038b26efe27430b571959eaa4ddc38d39",
    "line" : null,
    "diffHunk" : "@@ -269,7 +273,9 @@ final class Doctor(\n           .element(\"td\", center)(_.text(completions))\n           .element(\"td\", center)(_.text(references))\n           .element(\"td\")(\n-            _.raw(recommendation(scalaVersion, isSemanticdbEnabled, target))\n+            _.raw("
  },
  {
    "id" : "db0c5e76-f893-4cbd-92fe-c38cb482a80e",
    "prId" : 1235,
    "comments" : [
      {
        "id" : "067b4015-1c12-40d5-9c07-58a6ad1c3bdf",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "nit: can we use if/else instead of pattern matching here?",
        "createdAt" : "2019-12-31T09:27:48Z",
        "updatedAt" : "2019-12-31T14:09:08Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "76f5ef55-d470-48a4-8943-af0a2caac174",
        "parentId" : "067b4015-1c12-40d5-9c07-58a6ad1c3bdf",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Sure. I originally was also going to do Markdown, which led me down the match route, but then decided against it. I'll switch this.",
        "createdAt" : "2019-12-31T09:33:19Z",
        "updatedAt" : "2019-12-31T14:09:08Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2c8c78247edf1c5829edf6eb83fcd0d93f2ea1f2",
    "line" : null,
    "diffHunk" : "@@ -63,10 +64,14 @@ final class Doctor(\n       onServer: MetalsHttpServer => Unit\n   ): Unit = {\n     if (config.executeClientCommand.isOn) {\n-      val html = buildTargetsHtml()\n+      val output = config.doctorFormat match {"
  },
  {
    "id" : "c37f85d2-0761-4d3a-9627-f2a891613010",
    "prId" : 1235,
    "comments" : [
      {
        "id" : "88704627-a783-47b7-8966-486a52553b94",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "?\r\n```suggestion\r\n          if (config.doctorFormat.isHtml)\r\n```",
        "createdAt" : "2019-12-31T09:28:37Z",
        "updatedAt" : "2019-12-31T14:09:08Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "41636d05-a964-4a09-91d9-647878704b6e",
        "parentId" : "88704627-a783-47b7-8966-486a52553b94",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "_Makes `isHtml` method... and then doesn't use it._ \r\n\r\nYes, ha, I'll use this.",
        "createdAt" : "2019-12-31T09:32:27Z",
        "updatedAt" : "2019-12-31T14:09:08Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2c8c78247edf1c5829edf6eb83fcd0d93f2ea1f2",
    "line" : null,
    "diffHunk" : "@@ -125,10 +130,14 @@ final class Doctor(\n \n     def isMaven: Boolean = workspace.resolve(\"pom.xml\").isFile\n     def hint() =\n-      if (isMaven)\n-        \"enable SemanticDB following instructions on the \" +\n-          \"<a href=https://scalameta.org/metals/docs/build-tools/maven.html>Metals website</a>\"\n-      else s\"run 'Build import' to enable code navigation.\"\n+      if (isMaven) {\n+        val website =\n+          if (config.doctorFormat.value == \"html\")"
  },
  {
    "id" : "e49879e3-1ec4-484b-ac93-b4a09dc74c4d",
    "prId" : 1235,
    "comments" : [
      {
        "id" : "d4fa3f89-5880-4b68-a6fb-a0820fa7979f",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Can we introduce a case class that wraps all the columns here? It would be great to avoid passing around a `Tuple7`",
        "createdAt" : "2019-12-31T09:29:46Z",
        "updatedAt" : "2019-12-31T14:09:08Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2c8c78247edf1c5829edf6eb83fcd0d93f2ea1f2",
    "line" : 164,
    "diffHunk" : "@@ -297,4 +327,49 @@ final class Doctor(\n       )\n     }\n   }\n+\n+  private def extractTargetInfo(target: ScalaTarget) = {"
  },
  {
    "id" : "3b7808b7-b68d-4425-9412-c7c15e0af17e",
    "prId" : 1235,
    "comments" : [
      {
        "id" : "688dbfd3-8ed6-4c40-99e6-7a93f33e2956",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Minor, but in order to make these json properties more appealing for a JS client, can we use `camelCase` keys?",
        "createdAt" : "2019-12-31T10:15:58Z",
        "updatedAt" : "2019-12-31T14:09:08Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3623d558-f558-4001-8390-db6cafb9ee88",
        "parentId" : "688dbfd3-8ed6-4c40-99e6-7a93f33e2956",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Actually, what do you think about defining a case class for the entire result and define ujson codecs for them?",
        "createdAt" : "2019-12-31T10:21:47Z",
        "updatedAt" : "2019-12-31T14:09:08Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6a4241ec-1177-4de7-9f04-407e9c702389",
        "parentId" : "688dbfd3-8ed6-4c40-99e6-7a93f33e2956",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Regarding the `camelCase`, totally.\r\n\r\nRegarding the codecs approach. I guess the result we want to return the `targets` array is just the return value of `extractTargetInfo`, so we already have the case class. (Unless you mean case class for the entire return value).\r\n\r\nI would normally be all for doing the codecs, but do you think in this situation it's useful? There's really only a few different things that the api can return right now, and it's pretty contained and straight-forward in here. I think with the html approach we tried to keep is super simple, and I tried to do the same with JSON. Again, I'm not opposed to it, but what does it really gain us here by making the codes vs just being explicit with it here?",
        "createdAt" : "2019-12-31T10:36:01Z",
        "updatedAt" : "2019-12-31T14:09:08Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "da6bed4a-d4f0-4612-b86f-c4d403dc289c",
        "parentId" : "688dbfd3-8ed6-4c40-99e6-7a93f33e2956",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "> Unless you mean case class for the entire return value\r\n\r\nYep, I also meant that.\r\n\r\n> making the codes vs just being explicit \r\n\r\nTo be clear: the codec can be explicit (I don't meant to auto-derive it or anything) and live in the companion object of the respective case classes. My main concern is that now that we have different formats, keeping the encoding logic together with the data logic will make the doctor implementation a bit hard to read.\r\n",
        "createdAt" : "2019-12-31T10:40:31Z",
        "updatedAt" : "2019-12-31T14:09:08Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2c8c78247edf1c5829edf6eb83fcd0d93f2ea1f2",
    "line" : null,
    "diffHunk" : "@@ -204,37 +211,65 @@ final class Doctor(\n \n   private def buildTargetsHtml(): String = {\n     new HtmlBuilder()\n-      .element(\"h1\")(_.text(\"Metals Doctor\"))\n+      .element(\"h1\")(_.text(doctorTitle))\n       .call(buildTargetsTable)\n       .render\n   }\n \n+  private def buildTargetsJson(): String = {\n+    val json = ujson\n+      .Obj(\n+        \"name\" -> doctorTitle,\n+        \"headerText\" -> doctorHeading\n+      )\n+\n+    val targets = buildTargets.all.toList\n+\n+    if (targets.isEmpty) {\n+      json(\"messages\") = Arr(\n+        ujson.Obj(\n+          \"title\" -> noBuildTargetsTitle,\n+          \"recommendations\" -> Arr(noBuildTargetRecOne, noBuildTargetRecTwo)\n+        )\n+      )\n+      ujson.write(json)\n+    } else {\n+      val targetResults = targets.sortBy(_.info.getBaseDirectory).map {\n+        target =>\n+          val targetInfo = extractTargetInfo(target)\n+          ujson.Obj(\n+            \"Build Target\" -> targetInfo.name,"
  },
  {
    "id" : "7b838d35-d114-4411-8078-70046668005c",
    "prId" : 1256,
    "comments" : [
      {
        "id" : "ffee0f9a-ffbc-4d7a-bd46-ee41c881c001",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "I know this was in here before, but is there a way we can just pull this from the version that we're using rather than having it hardcoded? 🤔 ",
        "createdAt" : "2020-01-06T09:38:44Z",
        "updatedAt" : "2020-01-06T12:44:39Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1e588620-0160-4f2d-a121-818979faa298",
        "parentId" : "ffee0f9a-ffbc-4d7a-bd46-ee41c881c001",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I moved it to build.sbt. It might actually make sense to tell users to use the same one that we have in the project, since we upgrade the version when we need it. Good idea!",
        "createdAt" : "2020-01-06T09:48:57Z",
        "updatedAt" : "2020-01-06T12:44:39Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0c2bea75-a609-44a2-b709-701dcc7d6064",
        "parentId" : "ffee0f9a-ffbc-4d7a-bd46-ee41c881c001",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Switched to current Bloop version.",
        "createdAt" : "2020-01-06T12:45:06Z",
        "updatedAt" : "2020-01-06T12:45:06Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5221982e1605895d70c5abd22174e1406e1e0efb",
    "line" : null,
    "diffHunk" : "@@ -28,6 +28,14 @@ final class Doctor(\n   private val hasProblems = new AtomicBoolean(false)\n   private var bspServerName: Option[String] = None\n   private var bspServerVersion: Option[String] = None\n+  val minimumBloopVersion = \"1.3.5\""
  },
  {
    "id" : "a673b7ca-4bb4-4a13-b103-276e40fa4cd3",
    "prId" : 1414,
    "comments" : [
      {
        "id" : "2b61bb06-e1c0-42ca-ab56-ad33fe3a535f",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "I flipped the order of these since both default to html. So, I assume that if either is set to Json, it was intentionally set, and we then go with that.",
        "createdAt" : "2020-02-19T10:08:29Z",
        "updatedAt" : "2020-02-19T14:01:31Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2b45c0ea6b216649b70b0a2e98445d20fe09d872",
    "line" : 19,
    "diffHunk" : "@@ -69,10 +70,11 @@ final class Doctor(\n       clientCommand: Command,\n       onServer: MetalsHttpServer => Unit\n   ): Unit = {\n-    if (config.executeClientCommand.isOn) {\n+    if (config.executeClientCommand.isOn || clientExperimentalCapabilities.executeClientCommandProvider) {\n       val output =\n-        if (config.doctorFormat.isHtml) buildTargetsHtml()\n-        else buildTargetsJson()\n+        if (config.doctorFormat.isJson || clientExperimentalCapabilities.doctorFormatIsJson)"
  },
  {
    "id" : "ce6ae00b-2b4e-4f64-ae4a-1874e8b8c25f",
    "prId" : 1523,
    "comments" : [
      {
        "id" : "7c53b8a0-29e2-4be0-9398-b57467c29298",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Changed to just print unsupported versions if there is an issue, since semanticDB is added automatically by Bloop, so if there is a problem then it means user is using an unsupported version.",
        "createdAt" : "2020-03-25T17:04:00Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5a1e1ab4-bc48-4269-b1ee-c84f43927206",
        "parentId" : "7c53b8a0-29e2-4be0-9398-b57467c29298",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Actually, it still make sense to print warning about lacking semanticDB in case of using other BSP servers. Did a fallback, since I think reporting unsupported Scala versions is more important.",
        "createdAt" : "2020-03-25T18:33:15Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1142490703f832961ac0df1debd14b4f3b12ce7d",
    "line" : null,
    "diffHunk" : "@@ -191,23 +216,6 @@ final class Doctor(\n \n   def allTargets(): List[ScalaTarget] = buildTargets.all.toList\n \n-  private def problemSummary: Option[String] = {"
  },
  {
    "id" : "e9645e29-5a8b-4f8b-8e40-9951e031fbaa",
    "prId" : 1523,
    "comments" : [
      {
        "id" : "9b78746c-2c59-468f-beca-fa14b888e1bf",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "?\r\n```suggestion\r\n            s\"Scala ${BuildInfo.scala3}\"\r\n```",
        "createdAt" : "2020-04-04T08:00:52Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1142490703f832961ac0df1debd14b4f3b12ce7d",
    "line" : null,
    "diffHunk" : "@@ -152,10 +153,15 @@ final class Doctor(\n         } else {\n           s\"Scala $scalaVersion is not yet supported\"\n         }\n+\n       } else {\n-        s\"Code navigation is not supported for this compiler version, change to \" +\n-          s\"Scala ${BuildInfo.scala213} or ${BuildInfo.scala212} and \" +\n-          s\"run 'Build import' to enable code navigation.\"\n+        val versionToUpgradeTo =\n+          if (ScalaVersions.isScala3Version(scalaVersion)) {\n+            s\"Scala3 ${BuildInfo.scala3}\""
  },
  {
    "id" : "aad868fb-eb78-41e6-813e-75cba51a034f",
    "prId" : 1834,
    "comments" : [
      {
        "id" : "33e2137a-48be-4001-bb68-7f53a75f4c86",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "In this scenario I think that `isHttpEnabled` should win. Mainly due to the fact that while all clients _should_ support all the commands that the server can send, they may not. For example in nvim-metals, we are setting the client as `isExecuteClientCommandProvider` to true because we handle some stuff (for the new scala file command, toggle logs, goto location), but we still want the doctor to be in the browser without having to handle that functionality client side. Without this change, doing that is impossible. What are your thoughts on this? I feel like this is a unique scenario where we'd want this.",
        "createdAt" : "2020-06-16T16:12:29Z",
        "updatedAt" : "2020-06-16T17:14:59Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3086e42a12b5aab98de0d5e2e7b81434babbe611",
    "line" : 5,
    "diffHunk" : "@@ -72,7 +72,7 @@ final class Doctor(\n       clientCommand: Command,\n       onServer: MetalsHttpServer => Unit\n   ): Unit = {\n-    if (clientConfig.isExecuteClientCommandProvider) {\n+    if (clientConfig.isExecuteClientCommandProvider && !clientConfig.isHttpEnabled) {"
  },
  {
    "id" : "97568035-edcd-4def-969d-e966b7382da0",
    "prId" : 1897,
    "comments" : [
      {
        "id" : "32e48623-f849-4639-83bb-bef758525e15",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "```suggestion\r\n      s\"Build definition is coming from ${value}\"\r\n```",
        "createdAt" : "2020-07-08T13:20:46Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8361f260-2850-477f-9e49-6671873d6eb7",
        "parentId" : "32e48623-f849-4639-83bb-bef758525e15",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "changed :+1:",
        "createdAt" : "2020-07-09T07:22:48Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b4ee63466d31865c307be3d378bd799c95063e2f",
    "line" : null,
    "diffHunk" : "@@ -257,6 +262,22 @@ final class Doctor(\n \n   def allTargets(): List[ScalaTarget] = buildTargets.all.toList\n \n+  private def selectedBuildToolMessage(): Option[String] = {\n+    tables.buildTool.selectedBuildTool().map { value =>\n+      s\"Your ${value} build definition has been imported \""
  },
  {
    "id" : "e1d08119-8706-42f9-a661-59d02f32dba2",
    "prId" : 1897,
    "comments" : [
      {
        "id" : "d4976cae-c9de-4550-85ca-9390867e7bef",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "```suggestion\r\n        else \"temporarily\"\r\n```",
        "createdAt" : "2020-07-08T13:21:49Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5fb3a966-5b08-4591-9a1b-0cabc864f39e",
        "parentId" : "d4976cae-c9de-4550-85ca-9390867e7bef",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : ":sweat_smile: ",
        "createdAt" : "2020-07-09T07:23:09Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b4ee63466d31865c307be3d378bd799c95063e2f",
    "line" : null,
    "diffHunk" : "@@ -257,6 +262,22 @@ final class Doctor(\n \n   def allTargets(): List[ScalaTarget] = buildTargets.all.toList\n \n+  private def selectedBuildToolMessage(): Option[String] = {\n+    tables.buildTool.selectedBuildTool().map { value =>\n+      s\"Your ${value} build definition has been imported \"\n+    }\n+  }\n+\n+  private def selectedImportBuildMessage(): Option[String] = {\n+    import scala.concurrent.duration._\n+    tables.dismissedNotifications.ImportChanges.whenExpires().map { expire =>\n+      val toWhen =\n+        if (expire > 1000.days.toMillis) \"forever\"\n+        else \"temporairly\""
  },
  {
    "id" : "96c3f327-d1b1-4bac-a948-29f9524a9ef1",
    "prId" : 1897,
    "comments" : [
      {
        "id" : "c21f2a13-11f0-4bef-a287-f795c35bac11",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "```suggestion\r\n      s\"Build import on configuration changes popup has been dismissed $whenString\"\r\n```\r\n\r\n```\r\n  val whenString = if (expire > 1000.days.toMillis) \"\"\r\n        else \"for ${expire.millis.toMinutes} minutes\"\r\n```\r\nNot sure about the expire...",
        "createdAt" : "2020-07-08T13:22:47Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "201b56e5-881e-4d12-b918-7e9066909765",
        "parentId" : "c21f2a13-11f0-4bef-a287-f795c35bac11",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "It generates 2 situations:\r\n- 1 minutes (I can add check `if expiration.minutes == 1 then '1 minute' else 'x minutes'`)\r\n- 0 minutes (unsure what to do here?)",
        "createdAt" : "2020-07-09T08:09:20Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fb31c35f-798a-4b25-b801-4339044d1a1d",
        "parentId" : "c21f2a13-11f0-4bef-a287-f795c35bac11",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We can leave as is.",
        "createdAt" : "2020-07-09T12:00:07Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b4ee63466d31865c307be3d378bd799c95063e2f",
    "line" : null,
    "diffHunk" : "@@ -257,6 +262,22 @@ final class Doctor(\n \n   def allTargets(): List[ScalaTarget] = buildTargets.all.toList\n \n+  private def selectedBuildToolMessage(): Option[String] = {\n+    tables.buildTool.selectedBuildTool().map { value =>\n+      s\"Your ${value} build definition has been imported \"\n+    }\n+  }\n+\n+  private def selectedImportBuildMessage(): Option[String] = {\n+    import scala.concurrent.duration._\n+    tables.dismissedNotifications.ImportChanges.whenExpires().map { expire =>\n+      val toWhen =\n+        if (expire > 1000.days.toMillis) \"forever\"\n+        else \"temporairly\"\n+      s\"You dismissed ${toWhen} to re-import your build on configuration changes popup \""
  },
  {
    "id" : "bbcb5ce1-5bfe-4fbf-b6e2-ec9d0d01ce66",
    "prId" : 1897,
    "comments" : [
      {
        "id" : "37abbffe-9983-4947-9a08-d557974a3332",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\n    tables.dismissedNotifications.ImportChanges.whenExpires().map { expiration =>\r\n```\r\nNit on wording",
        "createdAt" : "2020-07-08T19:23:18Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7c443cb9-0cf1-4fa5-8a18-2000172d64c8",
        "parentId" : "37abbffe-9983-4947-9a08-d557974a3332",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "Thanks for testing it and catching this problem!\r\nI will not display this reset link in case `isHttpEnabled=true` as it will be simplest for now.\r\n\r\nMaybe in that case add additional line like `To reset those choices execute command: metals.choice-reset` but would users understand that? As probably commands in LSP are mapped differently in different editors. ",
        "createdAt" : "2020-07-09T07:47:14Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9c7e8495-6651-493e-bb3f-d631dfa5f69c",
        "parentId" : "37abbffe-9983-4947-9a08-d557974a3332",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Yea it's either have to be a very vague message about sending the command, or just don't mention it. Then we'll just have to make sure it's documented well in the docs.",
        "createdAt" : "2020-07-09T08:04:59Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "10f020cc-15d2-4e6a-9885-19a04bfebfb6",
        "parentId" : "37abbffe-9983-4947-9a08-d557974a3332",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "Or maybe say something more general like: `You can reset your choices with command 'Reset Choice'` and assume users of different editors will be able to map it to their editor command?",
        "createdAt" : "2020-07-09T08:11:15Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "16056ede-4e7a-4b21-9007-cb1fb6e420cb",
        "parentId" : "37abbffe-9983-4947-9a08-d557974a3332",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "Ok I am not adding any additional message, we can add it into docs :+1:",
        "createdAt" : "2020-07-09T08:33:26Z",
        "updatedAt" : "2020-07-10T08:47:16Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b4ee63466d31865c307be3d378bd799c95063e2f",
    "line" : null,
    "diffHunk" : "@@ -257,6 +262,22 @@ final class Doctor(\n \n   def allTargets(): List[ScalaTarget] = buildTargets.all.toList\n \n+  private def selectedBuildToolMessage(): Option[String] = {\n+    tables.buildTool.selectedBuildTool().map { value =>\n+      s\"Your ${value} build definition has been imported \"\n+    }\n+  }\n+\n+  private def selectedImportBuildMessage(): Option[String] = {\n+    import scala.concurrent.duration._\n+    tables.dismissedNotifications.ImportChanges.whenExpires().map { expire =>"
  }
]