[
  {
    "id" : "e3f907a0-0d4a-4806-b71a-16753a691899",
    "prId" : 1065,
    "comments" : [
      {
        "id" : "06fb87a8-985a-43fd-94a8-bb4e90e21d4d",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I wonder if we should have `contribute` returning an `Option[CodeAction]`, we could have a list of quickfixes and just flatMap over them to get the code actions.\r\n\r\n`contribute` would also take other parameters from below that we could need in any quickFix code action.",
        "createdAt" : "2019-11-14T20:19:44Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5b1a0f42-a6d1-4685-a7d2-c08556e2f8ab",
        "parentId" : "06fb87a8-985a-43fd-94a8-bb4e90e21d4d",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "The issue is that some computations are asynchronous (hence `Future`) and there may be different imports available for an unknown symbol (hence `Seq`).\n\nOr did I not understand your proposal?",
        "createdAt" : "2019-11-14T20:22:13Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d8be8f0e-fab5-454d-aeaf-016927d58a76",
        "parentId" : "06fb87a8-985a-43fd-94a8-bb4e90e21d4d",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Or just the Seq would actually also work:\r\n```scala\r\ntrait QuickFix {\r\n    def contribute( \r\n        diagnostics: Seq[l.Diagnostic],\r\n        params: l.CodeActionParams,\r\n        compilers: Compilers,\r\n        token: CancelToken)\r\n   (implicit ec: ExecutionContext): Future[Seq[l.CodeAction]]\r\n}\r\n```\r\n\r\nand then we could do:\r\n\r\n```scala\r\nval quickFixes = List(ImportMissingSymbol, Other)\r\nFuture.sequence(quickFixes.map(_.contribute)).map(.flatten)\r\n```\r\nIt would be easier to keep the actions separate in their own files.\r\n\r\n",
        "createdAt" : "2019-11-14T20:23:34Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bd55f305-89a8-4143-af75-a6160b960a9b",
        "parentId" : "06fb87a8-985a-43fd-94a8-bb4e90e21d4d",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "@gabro Sure it should be with futures with Seq. Let me fix the examples a bit.",
        "createdAt" : "2019-11-14T20:32:41Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "181f28f3-d757-4dc8-aa1d-d37e843da09f",
        "parentId" : "06fb87a8-985a-43fd-94a8-bb4e90e21d4d",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I just meant it would be useful to have an interface describing what you can use in the quickfix and just add it to the list. ",
        "createdAt" : "2019-11-14T20:35:30Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f5a06785-cb52-4116-ac57-26be8fe46b93",
        "parentId" : "06fb87a8-985a-43fd-94a8-bb4e90e21d4d",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "ahh, I see. That might work, I'll have a try! :) ",
        "createdAt" : "2019-11-15T18:08:29Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0a726f2f-36cf-4b5e-b316-252d95988b8d",
        "parentId" : "06fb87a8-985a-43fd-94a8-bb4e90e21d4d",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Take a look now, I think it's close to what you mean @tgodzik ",
        "createdAt" : "2019-11-15T18:20:28Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1e046b2b878d476d389f19bdcaa73ae4b7c121c9",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,82 @@\n+package scala.meta.internal.metals\n+\n+import scala.concurrent.Future\n+import scala.meta.pc.CancelToken\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.ExecutionContext\n+import scala.meta.internal.metals.MetalsEnrichments._\n+\n+trait QuickFixes {\n+  trait QuickFix {\n+    def contribute(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]]"
  },
  {
    "id" : "a00129e4-d938-4c45-b557-8de517fc3855",
    "prId" : 1065,
    "comments" : [
      {
        "id" : "201d2520-e1c2-41fa-9176-7dd6bd7f0af0",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "To replace this hack we would need most likely to add an additional method to the java interfaces. ",
        "createdAt" : "2019-11-14T20:31:24Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7d0b71fd-3887-4454-b72e-f6d0e28998b8",
        "parentId" : "201d2520-e1c2-41fa-9176-7dd6bd7f0af0",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Yep, Iâ€™ve actually started on that, but then decided to get some early feedback first!",
        "createdAt" : "2019-11-14T20:38:09Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1e046b2b878d476d389f19bdcaa73ae4b7c121c9",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,82 @@\n+package scala.meta.internal.metals\n+\n+import scala.concurrent.Future\n+import scala.meta.pc.CancelToken\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.ExecutionContext\n+import scala.meta.internal.metals.MetalsEnrichments._\n+\n+trait QuickFixes {\n+  trait QuickFix {\n+    def contribute(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]]\n+  }\n+\n+  object QuickFix {\n+\n+    def fromDiagnostics(\n+        diagnostics: Seq[l.Diagnostic],\n+        params: l.CodeActionParams,\n+        compilers: Compilers,\n+        token: CancelToken\n+    )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]] =\n+      Future\n+        .sequence(\n+          diagnostics\n+            .collect {\n+              case d @ ScalacDiagnostic.SymbolNotFound(name) =>\n+                ImportMissingSymbol(\n+                  name,\n+                  d,\n+                  params,\n+                  compilers,\n+                  token\n+                )\n+            }\n+            .map(_.contribute)\n+        )\n+        .map(_.flatten)\n+  }\n+\n+  final case class ImportMissingSymbol(\n+      name: String,\n+      diagnostic: l.Diagnostic,\n+      params: l.CodeActionParams,\n+      compilers: Compilers,\n+      token: CancelToken\n+  ) extends QuickFix {\n+\n+    override def contribute(\n+        implicit ec: ExecutionContext\n+    ): Future[Seq[l.CodeAction]] = {\n+\n+      // TODO(gabro): this is hack. Instead of computing the auto-imports for a name at a range,"
  },
  {
    "id" : "078e07f0-53c9-46eb-a0c5-bdb156bbae4e",
    "prId" : 1065,
    "comments" : [
      {
        "id" : "0f0e7066-9afc-4d15-8e0f-75f02769caf7",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "as suggested by @tgodzik, `contribute` will \"document\" which dependencies are needed by  any `QuickFix`",
        "createdAt" : "2019-11-15T18:22:21Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1e046b2b878d476d389f19bdcaa73ae4b7c121c9",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,72 @@\n+package scala.meta.internal.metals\n+\n+import scala.concurrent.Future\n+import scala.meta.pc.CancelToken\n+import org.eclipse.{lsp4j => l}\n+import scala.concurrent.ExecutionContext\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import org.eclipse.lsp4j.{CodeAction, CodeActionParams}\n+\n+trait QuickFix {\n+  def contribute(\n+      params: l.CodeActionParams,\n+      compilers: Compilers,\n+      token: CancelToken\n+  )(implicit ec: ExecutionContext): Future[Seq[l.CodeAction]]\n+}\n+\n+object QuickFix {\n+\n+  object ImportMissingSymbol extends QuickFix {\n+\n+    override def contribute(\n+        params: CodeActionParams,\n+        compilers: Compilers,\n+        token: CancelToken"
  }
]