[
  {
    "id" : "e5d41485-5a53-43eb-a72d-e8dfe2911ed2",
    "prId" : 621,
    "comments" : [
      {
        "id" : "e3c141df-bc5c-4f78-aee8-4255c46dbdde",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "For consistency with the style in the rest of the project, can we use for comprehensions instead?\r\n```scala\r\n    val highlights = for {\r\n      doc <- result.documentIncludingStale.toList\r\n      positionOccurrence = definitionProvider.positionOccurrence(\r\n        source,\r\n        params,\r\n        doc,\r\n        includeLastCharacter = true\r\n      )\r\n      occ <- positionOccurrence.occurrence.toList\r\n      curr <- doc.occurrences\r\n      if curr.symbol == occ.symbol\r\n      range <- curr.range\r\n      revised <- positionOccurrence.distance.toRevised(range.toLSP)\r\n    } yield new DocumentHighlight(revised)\r\n    highlights.asJava\r\n```\r\n\r\nIt's fine to use `.toList` so we can mix options with lists.\r\n",
        "createdAt" : "2019-04-02T15:01:09Z",
        "updatedAt" : "2019-04-05T09:13:03Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cd14af4b-7d7b-49c1-befd-62f7ed7a2089",
        "parentId" : "e3c141df-bc5c-4f78-aee8-4255c46dbdde",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Changed",
        "createdAt" : "2019-04-04T14:04:38Z",
        "updatedAt" : "2019-04-05T09:13:03Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6f03d2264f9c4e8e28d2e258ca99d24915c82e17",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,41 @@\n+package scala.meta.internal.metals\n+\n+import org.eclipse.lsp4j.{DocumentHighlight, TextDocumentPositionParams}\n+\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.mtags.Semanticdbs\n+\n+class DocumentHighlightProvider(\n+    definitionProvider: DefinitionProvider,\n+    semanticdbs: Semanticdbs\n+) {\n+\n+  def symbolOccurrences(\n+      params: TextDocumentPositionParams\n+  ): java.util.List[DocumentHighlight] = {\n+    val source = params.getTextDocument.getUri.toAbsolutePath\n+    val result = semanticdbs.textDocument(source)\n+    result.documentIncludingStale\n+      .flatMap { doc =>\n+        val ResolvedSymbolOccurrence(editDistance, symbolOccurrence) =\n+          definitionProvider.positionOccurrence(\n+            source,\n+            params,\n+            doc,\n+            includeLastCharacter = true\n+          )\n+        symbolOccurrence.map { occ =>\n+          val allOccurrences = doc.occurrences"
  },
  {
    "id" : "1e5a2f03-1b5e-45cd-8e10-ebeaf100fbac",
    "prId" : 621,
    "comments" : [
      {
        "id" : "238df6ac-d89c-4089-bd25-d40f90bb8405",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "rename: `documentHighlight` (matching `textDocument/documentHighlight`)",
        "createdAt" : "2019-04-02T15:02:11Z",
        "updatedAt" : "2019-04-05T09:13:03Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "eadcb489-a9ac-4ccf-82e5-018cb2904fac",
        "parentId" : "238df6ac-d89c-4089-bd25-d40f90bb8405",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Renamed",
        "createdAt" : "2019-04-04T14:04:53Z",
        "updatedAt" : "2019-04-05T09:13:03Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6f03d2264f9c4e8e28d2e258ca99d24915c82e17",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,41 @@\n+package scala.meta.internal.metals\n+\n+import org.eclipse.lsp4j.{DocumentHighlight, TextDocumentPositionParams}\n+\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.mtags.Semanticdbs\n+\n+class DocumentHighlightProvider(\n+    definitionProvider: DefinitionProvider,\n+    semanticdbs: Semanticdbs\n+) {\n+\n+  def symbolOccurrences("
  },
  {
    "id" : "68f8b46d-8237-4dd0-b978-73b824265aab",
    "prId" : 621,
    "comments" : [
      {
        "id" : "3d33e2b4-3ccf-4f6d-aeb3-33aa52e625aa",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Thanks for updating the import settings üôè ",
        "createdAt" : "2019-04-05T07:29:58Z",
        "updatedAt" : "2019-04-05T09:13:03Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6f03d2264f9c4e8e28d2e258ca99d24915c82e17",
    "line" : 7,
    "diffHunk" : "@@ -0,0 +1,162 @@\n+package scala.meta.internal.metals\n+\n+import org.eclipse.lsp4j.DocumentHighlight\n+import org.eclipse.lsp4j.DocumentHighlightKind\n+import org.eclipse.lsp4j.TextDocumentPositionParams\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.mtags.DefinitionAlternatives.GlobalSymbol"
  },
  {
    "id" : "44bafca4-881a-42c9-8384-f1eb13439a34",
    "prId" : 621,
    "comments" : [
      {
        "id" : "d5ce90eb-d89b-447b-aaa6-9de767b10758",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Can we get `MatchError` here?",
        "createdAt" : "2019-04-05T07:40:05Z",
        "updatedAt" : "2019-04-05T09:13:03Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "34521a5e-e923-4771-901d-6d291d6835ff",
        "parentId" : "d5ce90eb-d89b-447b-aaa6-9de767b10758",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Added a default with an empty set",
        "createdAt" : "2019-04-05T09:10:45Z",
        "updatedAt" : "2019-04-05T09:13:03Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6f03d2264f9c4e8e28d2e258ca99d24915c82e17",
    "line" : 102,
    "diffHunk" : "@@ -0,0 +1,162 @@\n+package scala.meta.internal.metals\n+\n+import org.eclipse.lsp4j.DocumentHighlight\n+import org.eclipse.lsp4j.DocumentHighlightKind\n+import org.eclipse.lsp4j.TextDocumentPositionParams\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.mtags.DefinitionAlternatives.GlobalSymbol\n+import scala.meta.internal.mtags.Semanticdbs\n+import scala.meta.internal.mtags.Symbol\n+import scala.meta.internal.semanticdb.Scala.Descriptor\n+import scala.meta.internal.semanticdb.Scala.Symbols\n+import scala.meta.internal.semanticdb.SymbolInformation\n+import scala.meta.internal.semanticdb.SymbolOccurrence\n+import scala.meta.internal.semanticdb.TextDocument\n+\n+final class DocumentHighlightProvider(\n+    definitionProvider: DefinitionProvider,\n+    semanticdbs: Semanticdbs\n+) {\n+\n+  def documentHighlight(\n+      params: TextDocumentPositionParams\n+  ): java.util.List[DocumentHighlight] = {\n+    val source = params.getTextDocument.getUri.toAbsolutePath\n+    val result = semanticdbs.textDocument(source)\n+\n+    val highlights = for {\n+      doc <- result.documentIncludingStale.toList\n+      positionOccurrence = definitionProvider.positionOccurrence(\n+        source,\n+        params,\n+        doc,\n+        includeLastCharacter = true\n+      )\n+      occ <- positionOccurrence.occurrence.toList\n+      alternatives = findAllAlternatives(doc, occ)\n+      curr <- doc.occurrences\n+      if curr.symbol == occ.symbol || alternatives(curr.symbol)\n+      range <- curr.range\n+      revised <- positionOccurrence.distance.toRevised(range.toLSP)\n+      kind = if (curr.role.isDefinition) DocumentHighlightKind.Write\n+      else DocumentHighlightKind.Read\n+    } yield new DocumentHighlight(revised, kind)\n+    highlights.asJava\n+  }\n+\n+  private def findAllAlternatives(\n+      doc: TextDocument,\n+      occ: SymbolOccurrence\n+  ): Set[String] = {\n+\n+    val symbolInfo = doc.symbols.find(_.symbol == occ.symbol)\n+    symbolInfo match {\n+      case Some(inf) =>\n+        if (inf.isClass) Set(inf.symbol.dropRight(1) + \".\")\n+        else if (inf.isObject) Set(inf.symbol.dropRight(1) + \"#\")\n+        else if (inf.isParameter && (inf.symbol.contains(\"apply\") || inf.symbol\n+            .contains(\"copy\"))) {\n+          parameterAlternatives(inf)\n+        } else if (inf.isMethod) {\n+          methodAlternatives(inf)\n+        } else {\n+          Set.empty\n+        }\n+      case None => Set.empty\n+    }\n+  }\n+\n+  private def methodAlternatives(info: SymbolInformation): Set[String] = {\n+\n+    def isInObject(desc: Descriptor) = desc match {\n+      case Descriptor.Term(value) => true\n+      case _ => false\n+    }\n+\n+    val setterSuffix = \"_=\"\n+    Symbol(info.symbol) match {\n+      case GlobalSymbol(\n+          GlobalSymbol(owner, descriptor),\n+          Descriptor.Method(setter, disambiguator)\n+          ) =>\n+        generateAlternativeSymbols(\n+          setter.stripSuffix(setterSuffix),\n+          descriptor.value,\n+          owner.value,\n+          isInObject(descriptor)\n+        )\n+      case GlobalSymbol(\n+          GlobalSymbol(owner, descriptor),\n+          Descriptor.Term(name)\n+          ) =>\n+        generateAlternativeSymbols(\n+          name,\n+          descriptor.value,\n+          owner.value,\n+          isInObject(descriptor)\n+        )\n+    }"
  },
  {
    "id" : "3f53a58c-37ac-4e52-aaf1-0ea869d97fdb",
    "prId" : 621,
    "comments" : [
      {
        "id" : "afbf2b9b-3231-4121-92e1-b04bb9f4653b",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Can we get `MatchError` here?",
        "createdAt" : "2019-04-05T07:40:23Z",
        "updatedAt" : "2019-04-05T09:13:03Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9bf846f4-5183-4c63-bc90-22daa9e74f03",
        "parentId" : "afbf2b9b-3231-4121-92e1-b04bb9f4653b",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "this method is just used to generate all possible alternatives - no matches here.",
        "createdAt" : "2019-04-05T08:59:54Z",
        "updatedAt" : "2019-04-05T09:13:03Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0460d4da-1a1f-401c-ba0c-a902a1603cda",
        "parentId" : "afbf2b9b-3231-4121-92e1-b04bb9f4653b",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Whoops, look good!",
        "createdAt" : "2019-04-05T09:30:24Z",
        "updatedAt" : "2019-04-05T09:31:08Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6f03d2264f9c4e8e28d2e258ca99d24915c82e17",
    "line" : 165,
    "diffHunk" : "@@ -0,0 +1,162 @@\n+package scala.meta.internal.metals\n+\n+import org.eclipse.lsp4j.DocumentHighlight\n+import org.eclipse.lsp4j.DocumentHighlightKind\n+import org.eclipse.lsp4j.TextDocumentPositionParams\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.mtags.DefinitionAlternatives.GlobalSymbol\n+import scala.meta.internal.mtags.Semanticdbs\n+import scala.meta.internal.mtags.Symbol\n+import scala.meta.internal.semanticdb.Scala.Descriptor\n+import scala.meta.internal.semanticdb.Scala.Symbols\n+import scala.meta.internal.semanticdb.SymbolInformation\n+import scala.meta.internal.semanticdb.SymbolOccurrence\n+import scala.meta.internal.semanticdb.TextDocument\n+\n+final class DocumentHighlightProvider(\n+    definitionProvider: DefinitionProvider,\n+    semanticdbs: Semanticdbs\n+) {\n+\n+  def documentHighlight(\n+      params: TextDocumentPositionParams\n+  ): java.util.List[DocumentHighlight] = {\n+    val source = params.getTextDocument.getUri.toAbsolutePath\n+    val result = semanticdbs.textDocument(source)\n+\n+    val highlights = for {\n+      doc <- result.documentIncludingStale.toList\n+      positionOccurrence = definitionProvider.positionOccurrence(\n+        source,\n+        params,\n+        doc,\n+        includeLastCharacter = true\n+      )\n+      occ <- positionOccurrence.occurrence.toList\n+      alternatives = findAllAlternatives(doc, occ)\n+      curr <- doc.occurrences\n+      if curr.symbol == occ.symbol || alternatives(curr.symbol)\n+      range <- curr.range\n+      revised <- positionOccurrence.distance.toRevised(range.toLSP)\n+      kind = if (curr.role.isDefinition) DocumentHighlightKind.Write\n+      else DocumentHighlightKind.Read\n+    } yield new DocumentHighlight(revised, kind)\n+    highlights.asJava\n+  }\n+\n+  private def findAllAlternatives(\n+      doc: TextDocument,\n+      occ: SymbolOccurrence\n+  ): Set[String] = {\n+\n+    val symbolInfo = doc.symbols.find(_.symbol == occ.symbol)\n+    symbolInfo match {\n+      case Some(inf) =>\n+        if (inf.isClass) Set(inf.symbol.dropRight(1) + \".\")\n+        else if (inf.isObject) Set(inf.symbol.dropRight(1) + \"#\")\n+        else if (inf.isParameter && (inf.symbol.contains(\"apply\") || inf.symbol\n+            .contains(\"copy\"))) {\n+          parameterAlternatives(inf)\n+        } else if (inf.isMethod) {\n+          methodAlternatives(inf)\n+        } else {\n+          Set.empty\n+        }\n+      case None => Set.empty\n+    }\n+  }\n+\n+  private def methodAlternatives(info: SymbolInformation): Set[String] = {\n+\n+    def isInObject(desc: Descriptor) = desc match {\n+      case Descriptor.Term(value) => true\n+      case _ => false\n+    }\n+\n+    val setterSuffix = \"_=\"\n+    Symbol(info.symbol) match {\n+      case GlobalSymbol(\n+          GlobalSymbol(owner, descriptor),\n+          Descriptor.Method(setter, disambiguator)\n+          ) =>\n+        generateAlternativeSymbols(\n+          setter.stripSuffix(setterSuffix),\n+          descriptor.value,\n+          owner.value,\n+          isInObject(descriptor)\n+        )\n+      case GlobalSymbol(\n+          GlobalSymbol(owner, descriptor),\n+          Descriptor.Term(name)\n+          ) =>\n+        generateAlternativeSymbols(\n+          name,\n+          descriptor.value,\n+          owner.value,\n+          isInObject(descriptor)\n+        )\n+    }\n+  }\n+\n+  private def parameterAlternatives(info: SymbolInformation): Set[String] = {\n+    val copyOrApply = Set(\"apply\", \"copy\")\n+    Symbol(info.symbol) match {\n+      case GlobalSymbol(\n+          GlobalSymbol(\n+            GlobalSymbol(owner, descriptor),\n+            Descriptor.Method(name, disambiguator)\n+          ),\n+          desc\n+          ) if copyOrApply(name) =>\n+        generateAlternativeSymbols(\n+          desc.value,\n+          descriptor.value,\n+          owner.value,\n+          areParamsInObject = false\n+        )\n+\n+      case _ =>\n+        Set.empty\n+    }\n+  }\n+\n+  private def generateAlternativeSymbols(\n+      paramName: String,\n+      className: String,\n+      packageName: String,\n+      areParamsInObject: Boolean\n+  ): Set[String] = {\n+    val setterSuffix = \"_=\"\n+    val paramsDecriptor =\n+      if (areParamsInObject) Descriptor.Term(className)\n+      else Descriptor.Type(className)\n+    Set(\n+      Symbols.Global(\n+        Symbols.Global(packageName, Descriptor.Type(className)),\n+        Descriptor.Term(paramName)\n+      ),\n+      Symbols.Global(\n+        Symbols.Global(\n+          Symbols.Global(packageName, Descriptor.Type(className)),\n+          Descriptor.Method(\"copy\", \"()\")\n+        ),\n+        Descriptor.Parameter(paramName)\n+      ),\n+      Symbols.Global(\n+        Symbols.Global(\n+          Symbols.Global(packageName, Descriptor.Term(className)),\n+          Descriptor.Method(\"apply\", \"()\")\n+        ),\n+        Descriptor.Parameter(paramName)\n+      ),\n+      Symbols.Global(\n+        Symbols.Global(packageName, paramsDecriptor),\n+        Descriptor.Method(paramName, \"()\")\n+      ),\n+      Symbols.Global(\n+        Symbols.Global(packageName, paramsDecriptor),\n+        Descriptor.Method(paramName + setterSuffix, \"()\")\n+      )\n+    )\n+  }"
  },
  {
    "id" : "feddee25-5398-4c2c-b474-32471a3f848b",
    "prId" : 621,
    "comments" : [
      {
        "id" : "eaa226a6-63c6-47fa-9ff4-a1ad7c65e91c",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Looks good, I agree it came out nicely to not build on top of reference provider üëç ",
        "createdAt" : "2019-04-05T07:41:16Z",
        "updatedAt" : "2019-04-05T09:13:03Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6f03d2264f9c4e8e28d2e258ca99d24915c82e17",
    "line" : 72,
    "diffHunk" : "@@ -0,0 +1,162 @@\n+package scala.meta.internal.metals\n+\n+import org.eclipse.lsp4j.DocumentHighlight\n+import org.eclipse.lsp4j.DocumentHighlightKind\n+import org.eclipse.lsp4j.TextDocumentPositionParams\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.mtags.DefinitionAlternatives.GlobalSymbol\n+import scala.meta.internal.mtags.Semanticdbs\n+import scala.meta.internal.mtags.Symbol\n+import scala.meta.internal.semanticdb.Scala.Descriptor\n+import scala.meta.internal.semanticdb.Scala.Symbols\n+import scala.meta.internal.semanticdb.SymbolInformation\n+import scala.meta.internal.semanticdb.SymbolOccurrence\n+import scala.meta.internal.semanticdb.TextDocument\n+\n+final class DocumentHighlightProvider(\n+    definitionProvider: DefinitionProvider,\n+    semanticdbs: Semanticdbs\n+) {\n+\n+  def documentHighlight(\n+      params: TextDocumentPositionParams\n+  ): java.util.List[DocumentHighlight] = {\n+    val source = params.getTextDocument.getUri.toAbsolutePath\n+    val result = semanticdbs.textDocument(source)\n+\n+    val highlights = for {\n+      doc <- result.documentIncludingStale.toList\n+      positionOccurrence = definitionProvider.positionOccurrence(\n+        source,\n+        params,\n+        doc,\n+        includeLastCharacter = true\n+      )\n+      occ <- positionOccurrence.occurrence.toList\n+      alternatives = findAllAlternatives(doc, occ)\n+      curr <- doc.occurrences\n+      if curr.symbol == occ.symbol || alternatives(curr.symbol)\n+      range <- curr.range\n+      revised <- positionOccurrence.distance.toRevised(range.toLSP)\n+      kind = if (curr.role.isDefinition) DocumentHighlightKind.Write\n+      else DocumentHighlightKind.Read\n+    } yield new DocumentHighlight(revised, kind)\n+    highlights.asJava\n+  }\n+\n+  private def findAllAlternatives(\n+      doc: TextDocument,\n+      occ: SymbolOccurrence\n+  ): Set[String] = {\n+\n+    val symbolInfo = doc.symbols.find(_.symbol == occ.symbol)\n+    symbolInfo match {\n+      case Some(inf) =>\n+        if (inf.isClass) Set(inf.symbol.dropRight(1) + \".\")\n+        else if (inf.isObject) Set(inf.symbol.dropRight(1) + \"#\")\n+        else if (inf.isParameter && (inf.symbol.contains(\"apply\") || inf.symbol\n+            .contains(\"copy\"))) {\n+          parameterAlternatives(inf)\n+        } else if (inf.isMethod) {\n+          methodAlternatives(inf)\n+        } else {\n+          Set.empty\n+        }\n+      case None => Set.empty\n+    }\n+  }\n+\n+  private def methodAlternatives(info: SymbolInformation): Set[String] = {"
  },
  {
    "id" : "99a39780-2bb2-4d26-a933-112eac138a67",
    "prId" : 621,
    "comments" : [
      {
        "id" : "a9897478-0ba6-4b33-ad8d-092a82c70f2f",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "nit: wrap this if/else in braces to workaround the weird indentation, I never got around to fix this in scalafmt",
        "createdAt" : "2019-04-05T07:42:36Z",
        "updatedAt" : "2019-04-05T09:13:03Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "76fd250e-dd01-48c9-9ba0-69cb7dadd780",
        "parentId" : "a9897478-0ba6-4b33-ad8d-092a82c70f2f",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "added the braces",
        "createdAt" : "2019-04-05T09:10:21Z",
        "updatedAt" : "2019-04-05T09:13:03Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6f03d2264f9c4e8e28d2e258ca99d24915c82e17",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,162 @@\n+package scala.meta.internal.metals\n+\n+import org.eclipse.lsp4j.DocumentHighlight\n+import org.eclipse.lsp4j.DocumentHighlightKind\n+import org.eclipse.lsp4j.TextDocumentPositionParams\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.mtags.DefinitionAlternatives.GlobalSymbol\n+import scala.meta.internal.mtags.Semanticdbs\n+import scala.meta.internal.mtags.Symbol\n+import scala.meta.internal.semanticdb.Scala.Descriptor\n+import scala.meta.internal.semanticdb.Scala.Symbols\n+import scala.meta.internal.semanticdb.SymbolInformation\n+import scala.meta.internal.semanticdb.SymbolOccurrence\n+import scala.meta.internal.semanticdb.TextDocument\n+\n+final class DocumentHighlightProvider(\n+    definitionProvider: DefinitionProvider,\n+    semanticdbs: Semanticdbs\n+) {\n+\n+  def documentHighlight(\n+      params: TextDocumentPositionParams\n+  ): java.util.List[DocumentHighlight] = {\n+    val source = params.getTextDocument.getUri.toAbsolutePath\n+    val result = semanticdbs.textDocument(source)\n+\n+    val highlights = for {\n+      doc <- result.documentIncludingStale.toList\n+      positionOccurrence = definitionProvider.positionOccurrence(\n+        source,\n+        params,\n+        doc,\n+        includeLastCharacter = true\n+      )\n+      occ <- positionOccurrence.occurrence.toList\n+      alternatives = findAllAlternatives(doc, occ)\n+      curr <- doc.occurrences\n+      if curr.symbol == occ.symbol || alternatives(curr.symbol)\n+      range <- curr.range\n+      revised <- positionOccurrence.distance.toRevised(range.toLSP)\n+      kind = if (curr.role.isDefinition) DocumentHighlightKind.Write"
  },
  {
    "id" : "3fb21896-ddd3-44f5-b876-bd110ee90ea9",
    "prId" : 621,
    "comments" : [
      {
        "id" : "551e2ca5-b028-4ef7-b021-54d5a2226f96",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Nit: manually insert line break after `&&` so avoid the awkward line break in `symbol.contains`",
        "createdAt" : "2019-04-05T07:43:19Z",
        "updatedAt" : "2019-04-05T09:13:03Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "455b9261-73c1-4817-8263-c33b0cad1f1f",
        "parentId" : "551e2ca5-b028-4ef7-b021-54d5a2226f96",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-04-05T09:10:07Z",
        "updatedAt" : "2019-04-05T09:13:03Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6f03d2264f9c4e8e28d2e258ca99d24915c82e17",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,162 @@\n+package scala.meta.internal.metals\n+\n+import org.eclipse.lsp4j.DocumentHighlight\n+import org.eclipse.lsp4j.DocumentHighlightKind\n+import org.eclipse.lsp4j.TextDocumentPositionParams\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.mtags.DefinitionAlternatives.GlobalSymbol\n+import scala.meta.internal.mtags.Semanticdbs\n+import scala.meta.internal.mtags.Symbol\n+import scala.meta.internal.semanticdb.Scala.Descriptor\n+import scala.meta.internal.semanticdb.Scala.Symbols\n+import scala.meta.internal.semanticdb.SymbolInformation\n+import scala.meta.internal.semanticdb.SymbolOccurrence\n+import scala.meta.internal.semanticdb.TextDocument\n+\n+final class DocumentHighlightProvider(\n+    definitionProvider: DefinitionProvider,\n+    semanticdbs: Semanticdbs\n+) {\n+\n+  def documentHighlight(\n+      params: TextDocumentPositionParams\n+  ): java.util.List[DocumentHighlight] = {\n+    val source = params.getTextDocument.getUri.toAbsolutePath\n+    val result = semanticdbs.textDocument(source)\n+\n+    val highlights = for {\n+      doc <- result.documentIncludingStale.toList\n+      positionOccurrence = definitionProvider.positionOccurrence(\n+        source,\n+        params,\n+        doc,\n+        includeLastCharacter = true\n+      )\n+      occ <- positionOccurrence.occurrence.toList\n+      alternatives = findAllAlternatives(doc, occ)\n+      curr <- doc.occurrences\n+      if curr.symbol == occ.symbol || alternatives(curr.symbol)\n+      range <- curr.range\n+      revised <- positionOccurrence.distance.toRevised(range.toLSP)\n+      kind = if (curr.role.isDefinition) DocumentHighlightKind.Write\n+      else DocumentHighlightKind.Read\n+    } yield new DocumentHighlight(revised, kind)\n+    highlights.asJava\n+  }\n+\n+  private def findAllAlternatives(\n+      doc: TextDocument,\n+      occ: SymbolOccurrence\n+  ): Set[String] = {\n+\n+    val symbolInfo = doc.symbols.find(_.symbol == occ.symbol)\n+    symbolInfo match {\n+      case Some(inf) =>\n+        if (inf.isClass) Set(inf.symbol.dropRight(1) + \".\")\n+        else if (inf.isObject) Set(inf.symbol.dropRight(1) + \"#\")\n+        else if (inf.isParameter && (inf.symbol.contains(\"apply\") || inf.symbol"
  },
  {
    "id" : "c685372d-4689-4726-9b7d-8799214f5b24",
    "prId" : 621,
    "comments" : [
      {
        "id" : "a6960853-35e9-4399-8167-0ef5dc2f60a5",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "nit: by convention we use `info` as a variable name for `SymbolInformation`",
        "createdAt" : "2019-04-05T07:43:44Z",
        "updatedAt" : "2019-04-05T09:13:03Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d8368758-74f4-4ba3-8cc8-f2fe3de8cc53",
        "parentId" : "a6960853-35e9-4399-8167-0ef5dc2f60a5",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-04-05T09:09:54Z",
        "updatedAt" : "2019-04-05T09:13:03Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6f03d2264f9c4e8e28d2e258ca99d24915c82e17",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,162 @@\n+package scala.meta.internal.metals\n+\n+import org.eclipse.lsp4j.DocumentHighlight\n+import org.eclipse.lsp4j.DocumentHighlightKind\n+import org.eclipse.lsp4j.TextDocumentPositionParams\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.mtags.DefinitionAlternatives.GlobalSymbol\n+import scala.meta.internal.mtags.Semanticdbs\n+import scala.meta.internal.mtags.Symbol\n+import scala.meta.internal.semanticdb.Scala.Descriptor\n+import scala.meta.internal.semanticdb.Scala.Symbols\n+import scala.meta.internal.semanticdb.SymbolInformation\n+import scala.meta.internal.semanticdb.SymbolOccurrence\n+import scala.meta.internal.semanticdb.TextDocument\n+\n+final class DocumentHighlightProvider(\n+    definitionProvider: DefinitionProvider,\n+    semanticdbs: Semanticdbs\n+) {\n+\n+  def documentHighlight(\n+      params: TextDocumentPositionParams\n+  ): java.util.List[DocumentHighlight] = {\n+    val source = params.getTextDocument.getUri.toAbsolutePath\n+    val result = semanticdbs.textDocument(source)\n+\n+    val highlights = for {\n+      doc <- result.documentIncludingStale.toList\n+      positionOccurrence = definitionProvider.positionOccurrence(\n+        source,\n+        params,\n+        doc,\n+        includeLastCharacter = true\n+      )\n+      occ <- positionOccurrence.occurrence.toList\n+      alternatives = findAllAlternatives(doc, occ)\n+      curr <- doc.occurrences\n+      if curr.symbol == occ.symbol || alternatives(curr.symbol)\n+      range <- curr.range\n+      revised <- positionOccurrence.distance.toRevised(range.toLSP)\n+      kind = if (curr.role.isDefinition) DocumentHighlightKind.Write\n+      else DocumentHighlightKind.Read\n+    } yield new DocumentHighlight(revised, kind)\n+    highlights.asJava\n+  }\n+\n+  private def findAllAlternatives(\n+      doc: TextDocument,\n+      occ: SymbolOccurrence\n+  ): Set[String] = {\n+\n+    val symbolInfo = doc.symbols.find(_.symbol == occ.symbol)\n+    symbolInfo match {\n+      case Some(inf) =>"
  },
  {
    "id" : "a482ae9a-2ed9-48ea-a941-6b05784dd0ec",
    "prId" : 1388,
    "comments" : [
      {
        "id" : "958381ef-7f18-4b0a-8083-2b006e88349b",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "No need for the newline",
        "createdAt" : "2020-02-09T16:25:23Z",
        "updatedAt" : "2020-02-24T14:38:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc21706d9256807977910c1e5c5cb2280a9755ef",
    "line" : null,
    "diffHunk" : "@@ -3,6 +3,7 @@ package scala.meta.internal.metals\n import org.eclipse.lsp4j.DocumentHighlight\n import org.eclipse.lsp4j.DocumentHighlightKind\n import org.eclipse.lsp4j.TextDocumentPositionParams\n+"
  }
]