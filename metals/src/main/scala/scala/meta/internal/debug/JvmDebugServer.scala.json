[
  {
    "id" : "c6f054ce-9dc8-477a-852b-ab9796a1c1c1",
    "prId" : 721,
    "comments" : [
      {
        "id" : "b95a942f-afac-4c5a-ac5b-2b6059ba6070",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "`java.lang.Integer` -> `Int` ?",
        "createdAt" : "2019-05-16T14:35:44Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e3c999e9b79f7d0d6a4c95756d12ec54f6abbc90",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,56 @@\n+package scala.meta.internal.debug\n+import java.net.ServerSocket\n+import java.net.Socket\n+import java.util.concurrent.ExecutorService\n+import org.eclipse.lsp4j.debug.services.IDebugProtocolClient\n+import org.eclipse.lsp4j.jsonrpc.Launcher\n+import org.eclipse.lsp4j.jsonrpc.debug.DebugLauncher\n+import scala.concurrent.ExecutionContextExecutorService\n+import scala.concurrent.Future\n+\n+object JvmDebugServer {\n+  def launch(\n+      adapter: DebugAdapter\n+  )(implicit ec: ExecutionContextExecutorService): java.lang.Integer = {"
  },
  {
    "id" : "44e346fe-d94d-4f76-b099-69ba56872a6b",
    "prId" : 721,
    "comments" : [
      {
        "id" : "42d23f8d-7b53-4ad7-8e0a-d58586169b20",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "To make it possible to see incoming/outgoing JSON in the same way we already do with BSP and LSP\r\n```\r\n      .traceMessages(GlobalTrace.setupTracePrinter(\"dap\"))\r\n```",
        "createdAt" : "2019-05-20T10:23:42Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e3c999e9b79f7d0d6a4c95756d12ec54f6abbc90",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,56 @@\n+package scala.meta.internal.debug\n+import java.net.ServerSocket\n+import java.net.Socket\n+import java.util.concurrent.ExecutorService\n+import org.eclipse.lsp4j.debug.services.IDebugProtocolClient\n+import org.eclipse.lsp4j.jsonrpc.Launcher\n+import org.eclipse.lsp4j.jsonrpc.debug.DebugLauncher\n+import scala.concurrent.ExecutionContextExecutorService\n+import scala.concurrent.Future\n+\n+object JvmDebugServer {\n+  def launch(\n+      adapter: DebugAdapter\n+  )(implicit ec: ExecutionContextExecutorService): Int = {\n+    val server = createSocket()\n+    startListening(server, adapter)\n+    server.getLocalPort\n+  }\n+\n+  private def createSocket(): ServerSocket = {\n+    val serverSocket = new ServerSocket(0)\n+    Runtime.getRuntime.addShutdownHook(new Thread(() => {\n+      serverSocket.close()\n+    }))\n+    serverSocket\n+  }\n+\n+  private def startListening(server: ServerSocket, adapter: DebugAdapter)(\n+      implicit ec: ExecutionContextExecutorService\n+  ): Unit = {\n+    for {\n+      client <- Future { server.accept() }\n+    } launch(client, adapter)\n+  }\n+\n+  private def launch(clientSocket: Socket, adapter: DebugAdapter)(\n+      implicit ec: ExecutionContextExecutorService\n+  ): Future[Unit] = {\n+    val launcher = createLauncher(adapter, clientSocket)\n+    adapter.setClient(launcher.getRemoteProxy)\n+\n+    Future { launcher.startListening().get() }.map(_ => ())\n+  }\n+\n+  private def createLauncher(\n+      adapter: AnyRef,\n+      clientSocket: Socket\n+  )(implicit executorService: ExecutorService): Launcher[IDebugProtocolClient] =\n+    new DebugLauncher.Builder[IDebugProtocolClient]()\n+      .setLocalService(adapter)"
  }
]