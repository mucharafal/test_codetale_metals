[
  {
    "id" : "dd804d5a-cebd-4caa-a52b-3d4356c9b731",
    "prId" : 721,
    "comments" : [
      {
        "id" : "c4ce9ad4-7891-4413-a3b1-0b53bbf28c65",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Does this need to be public? Maybe let's do it consistent like `createWorkingDir`",
        "createdAt" : "2019-05-16T14:30:49Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e3c999e9b79f7d0d6a4c95756d12ec54f6abbc90",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,63 @@\n+package scala.meta.internal.debug\n+\n+import java.io.File\n+import java.net.URI\n+import java.nio.file.Files\n+import java.nio.file.Paths\n+import org.eclipse.lsp4j.debug.services.IDebugProtocolClient\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.Future\n+import scala.meta.internal.debug.protocol.LaunchParameters\n+import scala.meta.internal.debug.protocol.OutputEventArguments._\n+import scala.sys.process.Process\n+import scala.sys.process.ProcessLogger\n+\n+final class DebugSession(\n+    process: Process,\n+    val exitCode: Future[Int]\n+) {\n+  def whenTerminated[A](f: Int => A)(implicit ec: ExecutionContext): Future[A] =\n+    exitCode.map(f)\n+}\n+\n+final class DebugSessionFactory(client: IDebugProtocolClient) {\n+  def createCommand(params: LaunchParameters): Array[String] = {"
  },
  {
    "id" : "6c644673-6539-4010-b55f-fcfea961f8cb",
    "prId" : 721,
    "comments" : [
      {
        "id" : "556bad31-f618-4e3a-9102-7db9f05c8051",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Could we avoid all the `null`? - do option and then `orNull` if really needed\r\n\r\nWhat happens if the directory is null anyway?",
        "createdAt" : "2019-05-16T14:33:06Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9ca0b1aa-e963-41ff-baa7-6e52f3569bd9",
        "parentId" : "556bad31-f618-4e3a-9102-7db9f05c8051",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "good catch! I think we should create a temporary directory if one is not present. otherwise it would create junk in metals working directory anytime someone does not specify `cwd`",
        "createdAt" : "2019-05-17T07:15:18Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e3c999e9b79f7d0d6a4c95756d12ec54f6abbc90",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,63 @@\n+package scala.meta.internal.debug\n+\n+import java.io.File\n+import java.net.URI\n+import java.nio.file.Files\n+import java.nio.file.Paths\n+import org.eclipse.lsp4j.debug.services.IDebugProtocolClient\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.Future\n+import scala.meta.internal.debug.protocol.LaunchParameters\n+import scala.meta.internal.debug.protocol.OutputEventArguments._\n+import scala.sys.process.Process\n+import scala.sys.process.ProcessLogger\n+\n+final class DebugSession(\n+    process: Process,\n+    val exitCode: Future[Int]\n+) {\n+  def whenTerminated[A](f: Int => A)(implicit ec: ExecutionContext): Future[A] =\n+    exitCode.map(f)\n+}\n+\n+final class DebugSessionFactory(client: IDebugProtocolClient) {\n+  def createCommand(params: LaunchParameters): Array[String] = {\n+    val java = Paths\n+      .get(System.getProperty(\"java.home\"))\n+      .resolve(\"bin\")\n+      .resolve(\"java\")\n+      .toString\n+\n+    val classpath = params.classpath.mkString(File.pathSeparator)\n+    Array(java, \"-cp\", classpath, params.mainClass)\n+  }\n+\n+  def create(\n+      params: LaunchParameters\n+  )(implicit ec: ExecutionContext): DebugSession = {\n+    val command = createCommand(params)\n+    val workingDir = createWorkingDir(params)\n+    val listener = new Listener()\n+\n+    val process = Process(command, workingDir).run(listener)\n+\n+    val exitCode = Future(process.exitValue())\n+    new DebugSession(process, exitCode)\n+  }\n+\n+  private def createWorkingDir(params: LaunchParameters): File = {"
  },
  {
    "id" : "a10968ed-e420-4531-8b85-7d16f6ee65b5",
    "prId" : 721,
    "comments" : [
      {
        "id" : "28ec9b42-7a34-4259-8ad0-6ba72aa0ed7e",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "nit: for consistency with the rest of the codebase, try to use pattern matching on `Option` over long chains of `map` and `filter`\r\n\r\n```scala\r\nOption(params.cwd).map(_.toAbsolutePath) match {\r\n  case Some(cwd) if cwd.isDirectory => ...\r\n  case _ => ...\r\n}\r\n```",
        "createdAt" : "2019-05-20T11:06:22Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e3c999e9b79f7d0d6a4c95756d12ec54f6abbc90",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,68 @@\n+package scala.meta.internal.debug\n+\n+import java.io.File\n+import java.net.URI\n+import java.nio.file.Files\n+import java.nio.file.Files.createTempDirectory\n+import java.nio.file.Paths\n+import org.eclipse.lsp4j.debug.services.IDebugProtocolClient\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.Future\n+import scala.meta.internal.debug.protocol.LaunchParameters\n+import scala.meta.internal.debug.protocol.OutputEventArguments._\n+import scala.sys.process.Process\n+import scala.sys.process.ProcessLogger\n+\n+final class DebugSession(\n+    process: Process,\n+    val exitCode: Future[Int]\n+) {\n+  def whenTerminated[A](f: Int => A)(implicit ec: ExecutionContext): Future[A] =\n+    exitCode.map(f)\n+}\n+\n+final class DebugSessionFactory(client: IDebugProtocolClient) {\n+  def create(\n+      params: LaunchParameters\n+  )(implicit ec: ExecutionContext): DebugSession = {\n+    val command = createCommand(params)\n+    val workingDir = createWorkingDir(params)\n+    val listener = new Listener()\n+\n+    val process = Process(command, workingDir).run(listener)\n+\n+    val exitCode = Future(process.exitValue())\n+    new DebugSession(process, exitCode)\n+  }\n+\n+  private def createCommand(params: LaunchParameters): Array[String] = {\n+    val java = Paths\n+      .get(System.getProperty(\"java.home\"))\n+      .resolve(\"bin\")\n+      .resolve(\"java\")\n+      .toString\n+\n+    val classpath = params.classpath.mkString(File.pathSeparator)\n+    Array(java, \"-cp\", classpath, params.mainClass)\n+  }\n+\n+  private def createWorkingDir(params: LaunchParameters): File = {\n+    Option(params.cwd)\n+      .map(URI.create)"
  },
  {
    "id" : "4d14f209-e8c4-4b21-90ab-8a6af85326ac",
    "prId" : 721,
    "comments" : [
      {
        "id" : "c57705ae-0e12-4af0-9f47-f9f4096a3c3d",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "What do you think about using `NuProcess` here? I've found `java.lang.ProcessBuilder` and `scala.sys.Process` to be inadequate for a many reasons.",
        "createdAt" : "2019-05-20T13:59:00Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ba050fda-21a6-4a9c-9e2b-930953cfbc8e",
        "parentId" : "c57705ae-0e12-4af0-9f47-f9f4096a3c3d",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Oh, I did not notice it was in scope. But for now let's leave it as it is (even though `NuProcess` is much better to use) - I will revisit this idea if my approach of using a build server to run processes fails, because if it succeeds then there will be no need for using processes directly anyway",
        "createdAt" : "2019-05-21T06:43:10Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "513b439a-db17-4c0e-9637-4fdc05a7ef86",
        "parentId" : "c57705ae-0e12-4af0-9f47-f9f4096a3c3d",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I think it would be good to try to reach the final design (BSP run vs. NuProcess) in this PR before it's merged. ",
        "createdAt" : "2019-05-21T07:00:33Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ae528b98-c045-435a-828c-46f46dfbb3de",
        "parentId" : "c57705ae-0e12-4af0-9f47-f9f4096a3c3d",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Did you consider using the `runInTerminal` request in DAP? https://microsoft.github.io/debug-adapter-protocol/specification#Reverse_Requests_RunInTerminal",
        "createdAt" : "2019-05-21T07:01:49Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b417366e-ff55-4cc0-a096-b55c35cb5f9d",
        "parentId" : "c57705ae-0e12-4af0-9f47-f9f4096a3c3d",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "> I think it would be good to try to reach the final design (BSP run vs. NuProcess) in this PR before it's merged.\r\n\r\nWe would depend on at least `BSP` v. 2.0.0-M4. `bloop` is using 2.0.0-M1, therefore either we postpone this feature or use `NuProcess`",
        "createdAt" : "2019-05-21T12:04:39Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "76a99dbd-f0e8-4849-8d41-331089cc7c98",
        "parentId" : "c57705ae-0e12-4af0-9f47-f9f4096a3c3d",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Changed implementation to use a `NuProcess`",
        "createdAt" : "2019-05-22T07:26:18Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e3c999e9b79f7d0d6a4c95756d12ec54f6abbc90",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,68 @@\n+package scala.meta.internal.debug\n+\n+import java.io.File\n+import java.net.URI\n+import java.nio.file.Files\n+import java.nio.file.Files.createTempDirectory\n+import java.nio.file.Paths\n+import org.eclipse.lsp4j.debug.services.IDebugProtocolClient\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.Future\n+import scala.meta.internal.debug.protocol.LaunchParameters\n+import scala.meta.internal.debug.protocol.OutputEventArguments._\n+import scala.sys.process.Process\n+import scala.sys.process.ProcessLogger\n+\n+final class DebugSession(\n+    process: Process,\n+    val exitCode: Future[Int]\n+) {\n+  def whenTerminated[A](f: Int => A)(implicit ec: ExecutionContext): Future[A] =\n+    exitCode.map(f)\n+}\n+\n+final class DebugSessionFactory(client: IDebugProtocolClient) {\n+  def create(\n+      params: LaunchParameters\n+  )(implicit ec: ExecutionContext): DebugSession = {\n+    val command = createCommand(params)\n+    val workingDir = createWorkingDir(params)\n+    val listener = new Listener()\n+\n+    val process = Process(command, workingDir).run(listener)"
  },
  {
    "id" : "f4d3fa12-825d-4922-8b85-10e61cc493f9",
    "prId" : 721,
    "comments" : [
      {
        "id" : "c324f185-454f-43cd-a9c5-815fbf57b398",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Can we replace this class with `Future[Int]`?",
        "createdAt" : "2019-05-20T14:05:05Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e3c999e9b79f7d0d6a4c95756d12ec54f6abbc90",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,68 @@\n+package scala.meta.internal.debug\n+\n+import java.io.File\n+import java.net.URI\n+import java.nio.file.Files\n+import java.nio.file.Files.createTempDirectory\n+import java.nio.file.Paths\n+import org.eclipse.lsp4j.debug.services.IDebugProtocolClient\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.Future\n+import scala.meta.internal.debug.protocol.LaunchParameters\n+import scala.meta.internal.debug.protocol.OutputEventArguments._\n+import scala.sys.process.Process\n+import scala.sys.process.ProcessLogger\n+\n+final class DebugSession("
  },
  {
    "id" : "a6189907-4130-4630-a90b-aa3d156622b8",
    "prId" : 721,
    "comments" : [
      {
        "id" : "c55803aa-dba4-46b3-b157-c81fe42f7bad",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Let's reuse `scala.meta.internal.metals.JavaBinary(None)` and optionally pass around `javaHome: Option[AbsolutePath]` from `MetalsLanguageServer` to remove `None`.",
        "createdAt" : "2019-05-20T14:07:20Z",
        "updatedAt" : "2019-05-22T07:33:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e3c999e9b79f7d0d6a4c95756d12ec54f6abbc90",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,68 @@\n+package scala.meta.internal.debug\n+\n+import java.io.File\n+import java.net.URI\n+import java.nio.file.Files\n+import java.nio.file.Files.createTempDirectory\n+import java.nio.file.Paths\n+import org.eclipse.lsp4j.debug.services.IDebugProtocolClient\n+import scala.concurrent.ExecutionContext\n+import scala.concurrent.Future\n+import scala.meta.internal.debug.protocol.LaunchParameters\n+import scala.meta.internal.debug.protocol.OutputEventArguments._\n+import scala.sys.process.Process\n+import scala.sys.process.ProcessLogger\n+\n+final class DebugSession(\n+    process: Process,\n+    val exitCode: Future[Int]\n+) {\n+  def whenTerminated[A](f: Int => A)(implicit ec: ExecutionContext): Future[A] =\n+    exitCode.map(f)\n+}\n+\n+final class DebugSessionFactory(client: IDebugProtocolClient) {\n+  def create(\n+      params: LaunchParameters\n+  )(implicit ec: ExecutionContext): DebugSession = {\n+    val command = createCommand(params)\n+    val workingDir = createWorkingDir(params)\n+    val listener = new Listener()\n+\n+    val process = Process(command, workingDir).run(listener)\n+\n+    val exitCode = Future(process.exitValue())\n+    new DebugSession(process, exitCode)\n+  }\n+\n+  private def createCommand(params: LaunchParameters): Array[String] = {\n+    val java = Paths"
  }
]