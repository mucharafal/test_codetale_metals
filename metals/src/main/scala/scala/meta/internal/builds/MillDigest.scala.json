[
  {
    "id" : "3cf5752c-aad3-4499-a965-4ae79a1b35d1",
    "prId" : 737,
    "comments" : [
      {
        "id" : "25ce2eb9-7ef1-45c1-90ed-d80d7272ea43",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "So this doesn't cover all corner cases yet, I think I might need to rethink how to make it simpler.\r\n\r\nIf anyone got any ideas let me know, but I think I might need to filter out whitespaces and then try matching.",
        "createdAt" : "2019-05-31T16:19:51Z",
        "updatedAt" : "2019-06-05T15:06:18Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9bf6e751-df38-4cc4-9468-2da895eeb61d",
        "parentId" : "25ce2eb9-7ef1-45c1-90ed-d80d7272ea43",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Should be better now.",
        "createdAt" : "2019-06-04T18:25:18Z",
        "updatedAt" : "2019-06-05T15:06:18Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3b0b2cfc5be483b031004060e57b22729000de09",
    "line" : 10,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+package scala.meta.internal.builds\n+import scala.util.control.NonFatal\n+import scala.meta.tokens.Token\n+import java.nio.file.Paths\n+import scala.meta.io.AbsolutePath\n+import scala.collection.mutable\n+import java.security.MessageDigest\n+import scala.meta.internal.mtags.MtagsEnrichments._\n+\n+object MillDigest extends Digestable {"
  },
  {
    "id" : "aadee215-9067-4a17-8c7e-0552653d55c4",
    "prId" : 737,
    "comments" : [
      {
        "id" : "130d18de-b7eb-4cb6-a49e-275aeae18052",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "remove",
        "createdAt" : "2019-06-05T09:26:33Z",
        "updatedAt" : "2019-06-05T15:06:18Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3b0b2cfc5be483b031004060e57b22729000de09",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,98 @@\n+package scala.meta.internal.builds\n+import scala.util.control.NonFatal\n+import scala.meta.tokens.Token\n+import java.nio.file.Paths\n+import scala.meta.io.AbsolutePath\n+import scala.collection.mutable\n+import java.security.MessageDigest\n+import scala.meta.internal.mtags.MtagsEnrichments._\n+\n+object MillDigest extends Digestable {\n+  override protected def digestWorkspace(\n+      workspace: AbsolutePath,\n+      digest: MessageDigest\n+  ): Boolean = {\n+    def analyzeBuildScript(file: AbsolutePath): Boolean = {\n+      val imported = findImportedScripts(file)\n+      imported.forall(script => analyzeBuildScript(script)) && Digest\n+        .digestFile(file, digest)\n+    }\n+    val buildFile = workspace.resolve(\"build.sc\")\n+    analyzeBuildScript(buildFile)\n+  }\n+\n+  private case class ImportLinesAcc(\n+      var hadImport: Boolean = false,\n+      var hadFile: Boolean = false,\n+      var insideBraces: Boolean = false,\n+      var skip: Boolean = false,\n+      var allPaths: mutable.ListBuffer[AbsolutePath] = new mutable.ListBuffer,\n+      var current: String = \"\",\n+      var prefix: String = \"\"\n+  ) {\n+    def processingFileImport = hadFile && hadImport\n+  }\n+\n+  // find all `import $file.path`\n+  private def findImportedScripts(\n+      file: AbsolutePath\n+  ): List[AbsolutePath] = {\n+    try {\n+      val input = file.toInput\n+      val tokens = input.tokenize.get.tokens\n+      val acc = ImportLinesAcc()\n+      tokens.toList.foreach {\n+        case token =>\n+          token match {\n+            // recognize line with import statement\n+            case _: Token.KwImport =>\n+              acc.hadImport = true\n+              acc"
  },
  {
    "id" : "1ed39ba6-f743-41dc-b657-12b9f9448939",
    "prId" : 737,
    "comments" : [
      {
        "id" : "a3e30319-38ee-49bb-8906-47b591dc380f",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "is the `.toList` needed?",
        "createdAt" : "2019-06-05T13:06:57Z",
        "updatedAt" : "2019-06-05T15:06:18Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b837444a-b84e-47de-bfca-93c68297e0e8",
        "parentId" : "a3e30319-38ee-49bb-8906-47b591dc380f",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Not needed - will remove",
        "createdAt" : "2019-06-05T14:52:33Z",
        "updatedAt" : "2019-06-05T15:06:18Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3b0b2cfc5be483b031004060e57b22729000de09",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,98 @@\n+package scala.meta.internal.builds\n+import scala.util.control.NonFatal\n+import scala.meta.tokens.Token\n+import java.nio.file.Paths\n+import scala.meta.io.AbsolutePath\n+import scala.collection.mutable\n+import java.security.MessageDigest\n+import scala.meta.internal.mtags.MtagsEnrichments._\n+\n+object MillDigest extends Digestable {\n+  override protected def digestWorkspace(\n+      workspace: AbsolutePath,\n+      digest: MessageDigest\n+  ): Boolean = {\n+    def analyzeBuildScript(file: AbsolutePath): Boolean = {\n+      val imported = findImportedScripts(file)\n+      imported.forall(script => analyzeBuildScript(script)) && Digest\n+        .digestFile(file, digest)\n+    }\n+    val buildFile = workspace.resolve(\"build.sc\")\n+    analyzeBuildScript(buildFile)\n+  }\n+\n+  private case class ImportLinesAcc(\n+      var hadImport: Boolean = false,\n+      var hadFile: Boolean = false,\n+      var insideBraces: Boolean = false,\n+      var skip: Boolean = false,\n+      var allPaths: mutable.ListBuffer[AbsolutePath] = new mutable.ListBuffer,\n+      var current: String = \"\",\n+      var prefix: String = \"\"\n+  ) {\n+    def processingFileImport = hadFile && hadImport\n+  }\n+\n+  // find all `import $file.path`\n+  private def findImportedScripts(\n+      file: AbsolutePath\n+  ): List[AbsolutePath] = {\n+    try {\n+      val input = file.toInput\n+      val tokens = input.tokenize.get.tokens\n+      val acc = ImportLinesAcc()\n+      tokens.toList.foreach {"
  },
  {
    "id" : "79c9d0ed-afb7-4392-8691-2481c8c6de0d",
    "prId" : 737,
    "comments" : [
      {
        "id" : "4b94697f-19b8-4353-b61f-29fb55ce4a62",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "nit; please try to manually break after `||` and `&&`.",
        "createdAt" : "2019-06-05T13:34:23Z",
        "updatedAt" : "2019-06-05T15:06:18Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0c901933-4bc6-4aa5-949c-3f5e98e9eaf6",
        "parentId" : "4b94697f-19b8-4353-b61f-29fb55ce4a62",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "scalafmt doesn't do it for you.",
        "createdAt" : "2019-06-05T13:34:32Z",
        "updatedAt" : "2019-06-05T15:06:18Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3b0b2cfc5be483b031004060e57b22729000de09",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,98 @@\n+package scala.meta.internal.builds\n+import scala.util.control.NonFatal\n+import scala.meta.tokens.Token\n+import java.nio.file.Paths\n+import scala.meta.io.AbsolutePath\n+import scala.collection.mutable\n+import java.security.MessageDigest\n+import scala.meta.internal.mtags.MtagsEnrichments._\n+\n+object MillDigest extends Digestable {\n+  override protected def digestWorkspace(\n+      workspace: AbsolutePath,\n+      digest: MessageDigest\n+  ): Boolean = {\n+    def analyzeBuildScript(file: AbsolutePath): Boolean = {\n+      val imported = findImportedScripts(file)\n+      imported.forall(script => analyzeBuildScript(script)) && Digest\n+        .digestFile(file, digest)\n+    }\n+    val buildFile = workspace.resolve(\"build.sc\")\n+    analyzeBuildScript(buildFile)\n+  }\n+\n+  private case class ImportLinesAcc(\n+      var hadImport: Boolean = false,\n+      var hadFile: Boolean = false,\n+      var insideBraces: Boolean = false,\n+      var skip: Boolean = false,\n+      var allPaths: mutable.ListBuffer[AbsolutePath] = new mutable.ListBuffer,\n+      var current: String = \"\",\n+      var prefix: String = \"\"\n+  ) {\n+    def processingFileImport = hadFile && hadImport\n+  }\n+\n+  // find all `import $file.path`\n+  private def findImportedScripts(\n+      file: AbsolutePath\n+  ): List[AbsolutePath] = {\n+    try {\n+      val input = file.toInput\n+      val tokens = input.tokenize.get.tokens\n+      val acc = ImportLinesAcc()\n+      tokens.toList.foreach {\n+        case token =>\n+          token match {\n+            // recognize line with import statement\n+            case _: Token.KwImport =>\n+              acc.hadImport = true\n+              acc\n+            // end import either with newline or `,` or `}`\n+            case _: Token.LF | _: Token.LFLF | _: Token.Comma |\n+                _: Token.RightBrace if acc.processingFileImport =>\n+              val newPath = Paths.get(acc.prefix).resolve(acc.current + \".sc\")\n+              val relative = file.toNIO.resolveSibling(newPath)\n+              acc.allPaths.append(AbsolutePath(relative))\n+              acc.current = \"\"\n+              acc.skip = false\n+              if (token.isInstanceOf[Token.RightBrace]) {\n+                acc.insideBraces = false\n+                acc.prefix = \"\"\n+              }\n+              if (!acc.insideBraces) {\n+                acc.hadFile = false\n+              }\n+              if (token.isInstanceOf[Token.LF] || token"
  },
  {
    "id" : "8edd38c0-be3e-4655-8658-8b1fb18ac5bc",
    "prId" : 737,
    "comments" : [
      {
        "id" : "a2c45c02-21da-495d-909d-1111c4650fd5",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "nit: no need for `case`",
        "createdAt" : "2019-06-05T13:35:57Z",
        "updatedAt" : "2019-06-05T15:06:18Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3b0b2cfc5be483b031004060e57b22729000de09",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,98 @@\n+package scala.meta.internal.builds\n+import scala.util.control.NonFatal\n+import scala.meta.tokens.Token\n+import java.nio.file.Paths\n+import scala.meta.io.AbsolutePath\n+import scala.collection.mutable\n+import java.security.MessageDigest\n+import scala.meta.internal.mtags.MtagsEnrichments._\n+\n+object MillDigest extends Digestable {\n+  override protected def digestWorkspace(\n+      workspace: AbsolutePath,\n+      digest: MessageDigest\n+  ): Boolean = {\n+    def analyzeBuildScript(file: AbsolutePath): Boolean = {\n+      val imported = findImportedScripts(file)\n+      imported.forall(script => analyzeBuildScript(script)) && Digest\n+        .digestFile(file, digest)\n+    }\n+    val buildFile = workspace.resolve(\"build.sc\")\n+    analyzeBuildScript(buildFile)\n+  }\n+\n+  private case class ImportLinesAcc(\n+      var hadImport: Boolean = false,\n+      var hadFile: Boolean = false,\n+      var insideBraces: Boolean = false,\n+      var skip: Boolean = false,\n+      var allPaths: mutable.ListBuffer[AbsolutePath] = new mutable.ListBuffer,\n+      var current: String = \"\",\n+      var prefix: String = \"\"\n+  ) {\n+    def processingFileImport = hadFile && hadImport\n+  }\n+\n+  // find all `import $file.path`\n+  private def findImportedScripts(\n+      file: AbsolutePath\n+  ): List[AbsolutePath] = {\n+    try {\n+      val input = file.toInput\n+      val tokens = input.tokenize.get.tokens\n+      val acc = ImportLinesAcc()\n+      tokens.toList.foreach {\n+        case token =>"
  },
  {
    "id" : "56543931-c4bc-4ddb-8140-59c631b7e37d",
    "prId" : 737,
    "comments" : [
      {
        "id" : "74b39481-7854-413b-ab46-be44a29a5c55",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I'm not a huge fan of the implementation details in this mini-parser. I have a feeling it can be simplified a bit, but if it works as it is then I'm happy 😊 ",
        "createdAt" : "2019-06-05T13:36:43Z",
        "updatedAt" : "2019-06-05T15:06:18Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f2539dde-d810-481f-985a-571435ac2362",
        "parentId" : "74b39481-7854-413b-ab46-be44a29a5c55",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I think I am fine with the implementation now, but if you have any suggestions let me know. @marek1840  wrote something trying to prove that it can be simpler, but turns out it is of a similar complexity.",
        "createdAt" : "2019-06-05T15:02:33Z",
        "updatedAt" : "2019-06-05T15:06:18Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3b0b2cfc5be483b031004060e57b22729000de09",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,98 @@\n+package scala.meta.internal.builds\n+import scala.util.control.NonFatal\n+import scala.meta.tokens.Token\n+import java.nio.file.Paths\n+import scala.meta.io.AbsolutePath\n+import scala.collection.mutable\n+import java.security.MessageDigest\n+import scala.meta.internal.mtags.MtagsEnrichments._\n+\n+object MillDigest extends Digestable {\n+  override protected def digestWorkspace(\n+      workspace: AbsolutePath,\n+      digest: MessageDigest\n+  ): Boolean = {\n+    def analyzeBuildScript(file: AbsolutePath): Boolean = {\n+      val imported = findImportedScripts(file)\n+      imported.forall(script => analyzeBuildScript(script)) && Digest\n+        .digestFile(file, digest)\n+    }\n+    val buildFile = workspace.resolve(\"build.sc\")\n+    analyzeBuildScript(buildFile)\n+  }\n+\n+  private case class ImportLinesAcc(\n+      var hadImport: Boolean = false,\n+      var hadFile: Boolean = false,\n+      var insideBraces: Boolean = false,\n+      var skip: Boolean = false,\n+      var allPaths: mutable.ListBuffer[AbsolutePath] = new mutable.ListBuffer,\n+      var current: String = \"\",\n+      var prefix: String = \"\"\n+  ) {\n+    def processingFileImport = hadFile && hadImport\n+  }\n+\n+  // find all `import $file.path`\n+  private def findImportedScripts(\n+      file: AbsolutePath\n+  ): List[AbsolutePath] = {\n+    try {\n+      val input = file.toInput\n+      val tokens = input.tokenize.get.tokens\n+      val acc = ImportLinesAcc()\n+      tokens.toList.foreach {\n+        case token =>\n+          token match {"
  }
]