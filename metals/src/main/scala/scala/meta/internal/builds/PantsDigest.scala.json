[
  {
    "id" : "b33e38e2-96fd-41f6-a835-310e82bbd45f",
    "prId" : 935,
    "comments" : [
      {
        "id" : "2bcf532c-1469-4873-b9fe-1b60b45a2124",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Could this filter be applied before mapping?",
        "createdAt" : "2019-09-20T06:53:48Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "da53eb89-fe62-4fdd-aadb-c1ee255862af",
        "parentId" : "2bcf532c-1469-4873-b9fe-1b60b45a2124",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Done.",
        "createdAt" : "2019-09-20T11:06:13Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a95ae87fd9621161d156685f32480fcb7bb451a4",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,50 @@\n+package scala.meta.internal.builds\n+\n+import scala.meta.io.AbsolutePath\n+import java.security.MessageDigest\n+import scala.sys.process._\n+\n+import scala.meta.internal.metals.UserConfiguration\n+\n+trait PantsDigestTrait extends Digestable {\n+  override protected def digestWorkspace(\n+      workspace: AbsolutePath,\n+      digest: MessageDigest,\n+      userConfig: UserConfiguration\n+  ): Boolean = {\n+    userConfig.pantsTargets match {\n+      case None => false\n+      case Some(pantsTargets) =>\n+        hasBUILDfilesChanged(workspace, digest, pantsTargets)\n+    }\n+  }\n+\n+  def hasBUILDfilesChanged(\n+      workspace: AbsolutePath,\n+      digest: MessageDigest,\n+      pantsTargets: String\n+  ): Boolean = {\n+    val pantsFileDeps: String =\n+      getPantsFileDependencies(workspace, pantsTargets)\n+    pantsFileDeps.linesIterator\n+      .map { file =>\n+        java.nio.file.Paths.get(file).toAbsolutePath.normalize\n+      }\n+      .filter(_.endsWith(\"BUILD\"))"
  },
  {
    "id" : "f6247f1b-5784-4ee9-b47e-466543742316",
    "prId" : 935,
    "comments" : [
      {
        "id" : "cdf640eb-f2cd-40b2-a9be-1ea6921ccba3",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Can you think of a better name? Being a trait is an implementation detail and as such, should not be reflected in the name.",
        "createdAt" : "2019-09-20T08:25:35Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "faa344be-cff0-4450-a76f-b1c826915a81",
        "parentId" : "cdf640eb-f2cd-40b2-a9be-1ea6921ccba3",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Renamed to `PantsDigest` and converted it into a normal class.",
        "createdAt" : "2019-09-20T11:06:05Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a95ae87fd9621161d156685f32480fcb7bb451a4",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,50 @@\n+package scala.meta.internal.builds\n+\n+import scala.meta.io.AbsolutePath\n+import java.security.MessageDigest\n+import scala.sys.process._\n+\n+import scala.meta.internal.metals.UserConfiguration\n+\n+trait PantsDigestTrait extends Digestable {"
  },
  {
    "id" : "cf561cfd-668d-43c7-87ae-c79cb758b8bf",
    "prId" : 935,
    "comments" : [
      {
        "id" : "b256efd5-7a59-40c5-adb6-092d9c8823bf",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Any chance that we can ignore the whitespaces changes at least? Or are they significant in pants?",
        "createdAt" : "2019-09-24T11:13:48Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ab89ba75-5f0e-4933-bdf2-88ed9ba1ac4b",
        "parentId" : "b256efd5-7a59-40c5-adb6-092d9c8823bf",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Down the road we'd like to delegate this task to pants (which already has all the information needed to produce the digest) so it's not necessary to make any improvements here.",
        "createdAt" : "2019-09-26T15:32:50Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a95ae87fd9621161d156685f32480fcb7bb451a4",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,48 @@\n+package scala.meta.internal.builds\n+\n+import scala.meta.io.AbsolutePath\n+import java.security.MessageDigest\n+import scala.sys.process._\n+\n+import scala.meta.internal.metals.UserConfiguration\n+\n+class PantsDigest(userConfig: () => UserConfiguration) extends Digestable {\n+  override protected def digestWorkspace(\n+      workspace: AbsolutePath,\n+      digest: MessageDigest\n+  ): Boolean = {\n+    userConfig().pantsTargets match {\n+      case None => false\n+      case Some(pantsTargets) =>\n+        hasBUILDfilesChanged(workspace, digest, pantsTargets)\n+    }\n+  }\n+\n+  def hasBUILDfilesChanged(\n+      workspace: AbsolutePath,\n+      digest: MessageDigest,\n+      pantsTargets: String\n+  ): Boolean = {\n+    val pantsFileDeps: String =\n+      getPantsFileDependencies(workspace, pantsTargets)\n+    pantsFileDeps.linesIterator\n+      .filter(_.endsWith(\"BUILD\"))\n+      .map { file =>\n+        java.nio.file.Paths.get(file).toAbsolutePath.normalize\n+      }\n+      .forall(file => Digest.digestFile(AbsolutePath(file), digest))"
  },
  {
    "id" : "3459dbdc-eb29-4797-bce5-a7134b1c717a",
    "prId" : 935,
    "comments" : [
      {
        "id" : "9620e368-2c49-4284-9eb2-5e75693f7fe4",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Would it be possible to extract file deps from pants files? Similar how we do it for Mill?",
        "createdAt" : "2019-09-24T11:23:12Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ab9a14d5-0c46-48cf-b7aa-3f813580008d",
        "parentId" : "9620e368-2c49-4284-9eb2-5e75693f7fe4",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "It's quite tricky to find all the `BUILD` files that affect a given set of targets. Shelling out to `filedeps` is a correct but slow way to implementing this logic. Eventually, we'd like to delegate the entire digest computation to pants.",
        "createdAt" : "2019-09-26T15:35:24Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a95ae87fd9621161d156685f32480fcb7bb451a4",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,48 @@\n+package scala.meta.internal.builds\n+\n+import scala.meta.io.AbsolutePath\n+import java.security.MessageDigest\n+import scala.sys.process._\n+\n+import scala.meta.internal.metals.UserConfiguration\n+\n+class PantsDigest(userConfig: () => UserConfiguration) extends Digestable {\n+  override protected def digestWorkspace(\n+      workspace: AbsolutePath,\n+      digest: MessageDigest\n+  ): Boolean = {\n+    userConfig().pantsTargets match {\n+      case None => false\n+      case Some(pantsTargets) =>\n+        hasBUILDfilesChanged(workspace, digest, pantsTargets)\n+    }\n+  }\n+\n+  def hasBUILDfilesChanged(\n+      workspace: AbsolutePath,\n+      digest: MessageDigest,\n+      pantsTargets: String\n+  ): Boolean = {\n+    val pantsFileDeps: String =\n+      getPantsFileDependencies(workspace, pantsTargets)\n+    pantsFileDeps.linesIterator\n+      .filter(_.endsWith(\"BUILD\"))\n+      .map { file =>\n+        java.nio.file.Paths.get(file).toAbsolutePath.normalize\n+      }\n+      .forall(file => Digest.digestFile(AbsolutePath(file), digest))\n+  }\n+\n+  protected def getPantsFileDependencies(\n+      workspace: AbsolutePath,\n+      pantsTargets: String\n+  ) = {\n+    val args = List(\n+      workspace.resolve(\"pants\").toString(),\n+      \"filedeps\"\n+    ) ++ pantsTargets.split(\" \").map(_.trim).toList\n+    scribe.info(s\"running '${args.mkString(\" \")}'\")\n+    val pantsFileDeps = Process(args, Some(workspace.toFile)).!!.trim"
  },
  {
    "id" : "b1f98b1b-4c6b-47e3-b4af-6f441336d883",
    "prId" : 935,
    "comments" : [
      {
        "id" : "5a0d93fc-ff80-44b2-9b8b-79ee55d96b19",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "let's import the `Paths` properly, so the statement becomes more readable",
        "createdAt" : "2019-09-25T07:46:46Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5e6aa264-1874-49b0-94b8-dc4ff0abdfaf",
        "parentId" : "5a0d93fc-ff80-44b2-9b8b-79ee55d96b19",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Done.",
        "createdAt" : "2019-09-26T15:32:55Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a95ae87fd9621161d156685f32480fcb7bb451a4",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,48 @@\n+package scala.meta.internal.builds\n+\n+import scala.meta.io.AbsolutePath\n+import java.security.MessageDigest\n+import scala.sys.process._\n+\n+import scala.meta.internal.metals.UserConfiguration\n+\n+class PantsDigest(userConfig: () => UserConfiguration) extends Digestable {\n+  override protected def digestWorkspace(\n+      workspace: AbsolutePath,\n+      digest: MessageDigest\n+  ): Boolean = {\n+    userConfig().pantsTargets match {\n+      case None => false\n+      case Some(pantsTargets) =>\n+        hasBUILDfilesChanged(workspace, digest, pantsTargets)\n+    }\n+  }\n+\n+  def hasBUILDfilesChanged(\n+      workspace: AbsolutePath,\n+      digest: MessageDigest,\n+      pantsTargets: String\n+  ): Boolean = {\n+    val pantsFileDeps: String =\n+      getPantsFileDependencies(workspace, pantsTargets)\n+    pantsFileDeps.linesIterator\n+      .filter(_.endsWith(\"BUILD\"))\n+      .map { file =>\n+        java.nio.file.Paths.get(file).toAbsolutePath.normalize"
  },
  {
    "id" : "88abdfcf-ba9a-4b5c-89f4-1bc13c30a1a5",
    "prId" : 935,
    "comments" : [
      {
        "id" : "efd9ac89-ce19-40db-a52c-a6bd2eb887e0",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "We could do this with `forAll` instead of a var. `yield  Digest.digestFile(buildFile, digest)` and then `results.forAll(_)`",
        "createdAt" : "2019-12-05T15:47:16Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a359f3a3-9ba2-4223-a8e6-ac605c19b786",
        "parentId" : "efd9ac89-ce19-40db-a52c-a6bd2eb887e0",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Done.",
        "createdAt" : "2019-12-05T19:27:50Z",
        "updatedAt" : "2019-12-05T19:30:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a95ae87fd9621161d156685f32480fcb7bb451a4",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,41 @@\n+package scala.meta.internal.builds\n+\n+import scala.meta.io.AbsolutePath\n+import java.security.MessageDigest\n+import scala.meta.internal.metals.MetalsEnrichments._\n+import scala.meta.internal.metals.UserConfiguration\n+import scala.meta.internal.pantsbuild.PantsConfiguration\n+\n+class PantsDigest(userConfig: () => UserConfiguration) extends Digestable {\n+  override protected def digestWorkspace(\n+      workspace: AbsolutePath,\n+      digest: MessageDigest\n+  ): Boolean = {\n+    userConfig().pantsTargets match {\n+      case None =>\n+        scribe.info(\n+          \"skipping build import for Pants workspace since the setting 'pants-targets' is not defined. \" +\n+            \"To fix this problem, update the 'pants-targets' setting to list what build targets should be imported in this workspace.\"\n+        )\n+        false\n+      case Some(pantsTargets) =>\n+        digestBuildFiles(workspace, digest, pantsTargets)\n+    }\n+  }\n+\n+  private def digestBuildFiles(\n+      workspace: AbsolutePath,\n+      digest: MessageDigest,\n+      pantsTargets: String\n+  ): Boolean = {\n+    var isOk = true\n+    for {\n+      root <- PantsConfiguration.sourceRoots(workspace, pantsTargets)\n+      buildFile <- root.listRecursive.filter(_.toNIO.endsWith(\"BUILD\"))\n+    } {\n+      isOk &= Digest.digestFile(buildFile, digest)\n+    }\n+    isOk"
  }
]