[
  {
    "id" : "97f02ed3-1a8c-4623-b59f-b2b13c275b56",
    "prId" : 934,
    "comments" : [
      {
        "id" : "7a489099-464c-4cb3-a32e-41cc00d8c135",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "getOrElse(Map.empty)",
        "createdAt" : "2019-10-02T10:22:59Z",
        "updatedAt" : "2019-10-03T13:51:34Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d837625e03b77aa42a76d4f700137294452174fa",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,111 @@\n+package scala.meta.internal.implementation\n+\n+import java.nio.file.Path\n+import scala.meta.internal.semanticdb.SymbolInformation\n+import scala.meta.internal.semanticdb.ClassSignature\n+import scala.util.Try\n+import scala.util.Success\n+import scala.meta.internal.semanticdb.Scala._\n+import scala.meta.internal.semanticdb.TypeRef\n+import scala.meta.internal.semanticdb.Scope\n+\n+private[implementation] case class ClassLocation(\n+    symbol: String,\n+    file: Option[Path],\n+    private val asSeenFrom: Option[Map[String, String]]\n+) {\n+\n+  def asSeenFromMap: Map[String, String] = asSeenFrom match {"
  },
  {
    "id" : "060b1f88-3651-415c-ae9b-07f89e8ce705",
    "prId" : 934,
    "comments" : [
      {
        "id" : "db2f9670-fff6-4944-acfb-e570191d49c9",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "```suggestion\r\n      case None => this.asSeenFrom\r\n```",
        "createdAt" : "2019-10-02T13:48:17Z",
        "updatedAt" : "2019-10-03T13:51:34Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "83bdd36b-e79a-4354-9aed-68c01b264b87",
        "parentId" : "db2f9670-fff6-4944-acfb-e570191d49c9",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Done!",
        "createdAt" : "2019-10-03T13:51:33Z",
        "updatedAt" : "2019-10-03T13:51:34Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d837625e03b77aa42a76d4f700137294452174fa",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,111 @@\n+package scala.meta.internal.implementation\n+\n+import java.nio.file.Path\n+import scala.meta.internal.semanticdb.SymbolInformation\n+import scala.meta.internal.semanticdb.ClassSignature\n+import scala.util.Try\n+import scala.util.Success\n+import scala.meta.internal.semanticdb.Scala._\n+import scala.meta.internal.semanticdb.TypeRef\n+import scala.meta.internal.semanticdb.Scope\n+\n+private[implementation] case class ClassLocation(\n+    symbol: String,\n+    file: Option[Path],\n+    private val asSeenFrom: Option[Map[String, String]]\n+) {\n+\n+  def asSeenFromMap: Map[String, String] = asSeenFrom match {\n+    case Some(v) => v\n+    case None => Map.empty\n+  }\n+\n+  def translateAsSeenFrom(other: ClassLocation): ClassLocation = {\n+    val newASF = other.asSeenFrom match {\n+      case None => other.asSeenFrom"
  }
]