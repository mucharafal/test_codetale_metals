[
  {
    "id" : "3f64b9c4-5573-4e84-9384-ca578a67cf85",
    "prId" : 1181,
    "comments" : [
      {
        "id" : "d34e4b8d-01b7-4aca-8d6f-ecda6b921c59",
        "parentId" : null,
        "author" : {
          "login" : "wiwa",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1862202?u=67d3c93419e4dd2a110dc2135e1b5ebaf98919c2&v=4"
        },
        "body" : "nit: maybe put the hardcoded `\"target\"`, `\"transitive_targets\"`, etc. strings into `val`s?",
        "createdAt" : "2019-12-10T19:54:39Z",
        "updatedAt" : "2019-12-11T10:39:31Z",
        "lastEditedBy" : {
          "login" : "wiwa",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1862202?u=67d3c93419e4dd2a110dc2135e1b5ebaf98919c2&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9df0caf6-4a6b-4d76-8553-4b15f590286c",
        "parentId" : "d34e4b8d-01b7-4aca-8d6f-ecda6b921c59",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Done. Extracted all hardcoded keys into an `object PantsKeys`",
        "createdAt" : "2019-12-11T10:22:38Z",
        "updatedAt" : "2019-12-11T10:39:34Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "da92e30ee6e1e5d61ccb46ecfc290af2da243900",
    "line" : 13,
    "diffHunk" : "@@ -0,0 +1,91 @@\n+package scala.meta.internal.pantsbuild\n+\n+import java.nio.file.Paths\n+import scala.collection.mutable\n+\n+case class PantsExport(\n+    targets: Map[String, PantsTarget],\n+    libraries: Map[String, PantsLibrary],\n+    scalaPlatform: PantsScalaPlatform,\n+    cycles: Cycles\n+)\n+\n+object PantsExport {"
  },
  {
    "id" : "b45b3247-c8ce-4fb0-a145-d70e29e50f8d",
    "prId" : 1181,
    "comments" : [
      {
        "id" : "54cedfd3-0bc6-4abb-a32b-e6b15dc2d805",
        "parentId" : null,
        "author" : {
          "login" : "wiwa",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1862202?u=67d3c93419e4dd2a110dc2135e1b5ebaf98919c2&v=4"
        },
        "body" : "nit: `valueObj.obj.mapValues`?",
        "createdAt" : "2019-12-10T20:04:29Z",
        "updatedAt" : "2019-12-11T10:39:31Z",
        "lastEditedBy" : {
          "login" : "wiwa",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1862202?u=67d3c93419e4dd2a110dc2135e1b5ebaf98919c2&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e0f7dcd4-e834-41af-8e69-31051e8841fa",
        "parentId" : "54cedfd3-0bc6-4abb-a32b-e6b15dc2d805",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "`mapValues` does not work as you expect it to in 2.12, it creates a lazy map and re-evaluates the passed function on every access\r\n```scala\r\n  override def mapValues[C](f: B => C): scala.collection.Map[A, C] = new MappedValues(f)\r\n```\r\n\r\nI think it's eager in 2.13 but Metals is still on 2.12",
        "createdAt" : "2019-12-11T10:24:10Z",
        "updatedAt" : "2019-12-11T10:39:34Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "da92e30ee6e1e5d61ccb46ecfc290af2da243900",
    "line" : 66,
    "diffHunk" : "@@ -0,0 +1,91 @@\n+package scala.meta.internal.pantsbuild\n+\n+import java.nio.file.Paths\n+import scala.collection.mutable\n+\n+case class PantsExport(\n+    targets: Map[String, PantsTarget],\n+    libraries: Map[String, PantsLibrary],\n+    scalaPlatform: PantsScalaPlatform,\n+    cycles: Cycles\n+)\n+\n+object PantsExport {\n+  def fromJson(output: ujson.Value): PantsExport = {\n+\n+    val allTargets = output.obj(\"targets\").obj\n+    val transitiveDependencyCache = mutable.Map.empty[String, List[String]]\n+    def computeTransitiveDependencies(name: String): List[String] = {\n+      transitiveDependencyCache.getOrElseUpdate(\n+        name, {\n+          val isVisited = new mutable.LinkedHashSet[String]()\n+          def visit(n: String): Unit = {\n+            if (!isVisited(n)) {\n+              isVisited += n\n+              val target = allTargets(n).obj\n+              for {\n+                deps <- target.get(\"targets\").iterator\n+                dep <- deps.arr.iterator.map(_.str)\n+              } {\n+                visit(dep)\n+              }\n+            }\n+          }\n+          visit(name)\n+          isVisited.toList\n+        }\n+      )\n+    }\n+    val targets: Map[String, PantsTarget] = allTargets.iterator.map {\n+      case (name, valueObj) =>\n+        val value = valueObj.obj\n+        val dependencies = value(\"targets\").arr.map(_.str)\n+        val transitiveDependencies = value.get(\"transitive_targets\") match {\n+          case None => computeTransitiveDependencies(name)\n+          case Some(transitiveDepencies) => transitiveDepencies.arr.map(_.str)\n+        }\n+        val libraries = value(\"libraries\").arr.map(_.str)\n+        val isTargetRoot = value(\"is_target_root\").bool &&\n+          !name.startsWith(\".pants.d/gen\")\n+        val id = value(\"id\").str\n+        name -> PantsTarget(\n+          name = name,\n+          id = id,\n+          dependencies = dependencies,\n+          transitiveDependencies = transitiveDependencies,\n+          libraries = libraries,\n+          isTargetRoot = isTargetRoot,\n+          targetType = TargetType(value(\"target_type\").str),\n+          pantsTargetType = PantsTargetType(value(\"pants_target_type\").str)\n+        )\n+    }.toMap\n+\n+    val allLibraries = output.obj(\"libraries\").obj\n+    val libraries: Map[String, PantsLibrary] = allLibraries.iterator.map {\n+      case (name, valueObj) =>\n+        name -> PantsLibrary(name, valueObj.obj.map {"
  }
]