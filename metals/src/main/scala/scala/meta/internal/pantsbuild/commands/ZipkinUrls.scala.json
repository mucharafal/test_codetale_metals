[
  {
    "id" : "5dc0f951-571a-4638-8cde-f1ef05e399bf",
    "prId" : 1481,
    "comments" : [
      {
        "id" : "68f9d9a2-cd1e-4c42-8c4d-0d165ef7cfcc",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "nit: let's avoid nested returns since they can be difficult to reason about (for example when inside a `map` lambda).\r\n\r\nWe occasionally use early `return` in the Metals codebase right at the start of a method implementation to avoid nested indentation.",
        "createdAt" : "2020-03-09T12:20:28Z",
        "updatedAt" : "2020-03-09T15:19:44Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "550638359c2782c6ee82bc3d5965900f626df9ff",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,52 @@\n+package scala.meta.internal.pantsbuild.commands\n+\n+import java.nio.charset.StandardCharsets\n+import java.nio.file.{Files, Paths, StandardOpenOption}\n+\n+object ZipkinUrls {\n+\n+  def url: Option[String] =\n+    Option(System.getProperty(\"metals.zipkin.server.url\"))\n+\n+  def updateZipkinServerUrl(): Boolean = {\n+    ZipkinUrls.url match {\n+      case Some(newUrl) =>\n+        val homedir = Paths.get(System.getProperty(\"user.home\"))\n+        val bloopJvmOpts = homedir.resolve(\".bloop\").resolve(\".jvmopts\")\n+        val valueAssignment = s\"-Dzipkin.server.url=$newUrl\"\n+        val linesToWrite = if (Files.exists(bloopJvmOpts)) {\n+          val text =\n+            new String(Files.readAllBytes(bloopJvmOpts), StandardCharsets.UTF_8)\n+          val lines = text.linesIterator.toArray\n+          val idx = lines.indexWhere(_.startsWith(\"-Dzipkin.server.url=\"))\n+          if (idx >= 0) {\n+            val oldUrl = lines(idx).split('=')(1)\n+            // Case 1: Update an existing URL\n+            if (oldUrl != newUrl) {\n+              lines(idx) = valueAssignment\n+              lines\n+            } else {\n+              // Case 2: Old and new URL are the same; break out\n+              return false"
  },
  {
    "id" : "bfd16dc5-3281-4841-bfe8-87192615d3a7",
    "prId" : 1481,
    "comments" : [
      {
        "id" : "8a06e8b0-c925-4ddc-95b3-3ab0115f85ee",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "```suggestion\r\n        import MetalsEnrichments._\r\n        val homedir = AbsolutePath(System.getProperty(\"user.home\"))\r\n        val jvmopts = homedir.resolve(\".bloop\").resolve(\".jvmopts\")\r\n        val oldOptions = \r\n          if (jvmopts.isFile) jvmopts.readText.linesIterator.toList\r\n          else Nil\r\n        val zipkin = \"-Dzipkin.server.url=(.*)\".r\r\n        val oldUrl = oldOptions.collectFirst { case zipkin(url) => url }\r\n        if (oldUrl.contains(newUrl)) {\r\n          false\r\n        } else {\r\n          val otherOptions = oldOptions.filterNot(_.startWith(\"-D.zipkin.server.url\")).toList\r\n          val zipkinOption = s\"-Dzipkin.server.url=$newUrl\"\r\n          val allOptions = zipkinOption :: otherOptions\r\n          Files.write(...)\r\n```",
        "createdAt" : "2020-03-09T12:32:18Z",
        "updatedAt" : "2020-03-09T15:19:44Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "550638359c2782c6ee82bc3d5965900f626df9ff",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,52 @@\n+package scala.meta.internal.pantsbuild.commands\n+\n+import java.nio.charset.StandardCharsets\n+import java.nio.file.{Files, Paths, StandardOpenOption}\n+\n+object ZipkinUrls {\n+\n+  def url: Option[String] =\n+    Option(System.getProperty(\"metals.zipkin.server.url\"))\n+\n+  def updateZipkinServerUrl(): Boolean = {\n+    ZipkinUrls.url match {\n+      case Some(newUrl) =>\n+        val homedir = Paths.get(System.getProperty(\"user.home\"))"
  },
  {
    "id" : "302a77df-6d9a-4877-9e52-97d1fd4fc1ae",
    "prId" : 1481,
    "comments" : [
      {
        "id" : "313f1a9c-ab28-4ef4-9947-ab82b396c1aa",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "We generally try to format logs like this\r\n```suggestion\r\n        scribe.info(s\"zipkin: new server URL '$newUrl'\")\r\n```",
        "createdAt" : "2020-03-09T12:35:18Z",
        "updatedAt" : "2020-03-09T15:19:44Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "550638359c2782c6ee82bc3d5965900f626df9ff",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,52 @@\n+package scala.meta.internal.pantsbuild.commands\n+\n+import java.nio.charset.StandardCharsets\n+import java.nio.file.{Files, Paths, StandardOpenOption}\n+\n+object ZipkinUrls {\n+\n+  def url: Option[String] =\n+    Option(System.getProperty(\"metals.zipkin.server.url\"))\n+\n+  def updateZipkinServerUrl(): Boolean = {\n+    ZipkinUrls.url match {\n+      case Some(newUrl) =>\n+        val homedir = Paths.get(System.getProperty(\"user.home\"))\n+        val bloopJvmOpts = homedir.resolve(\".bloop\").resolve(\".jvmopts\")\n+        val valueAssignment = s\"-Dzipkin.server.url=$newUrl\"\n+        val linesToWrite = if (Files.exists(bloopJvmOpts)) {\n+          val text =\n+            new String(Files.readAllBytes(bloopJvmOpts), StandardCharsets.UTF_8)\n+          val lines = text.linesIterator.toArray\n+          val idx = lines.indexWhere(_.startsWith(\"-Dzipkin.server.url=\"))\n+          if (idx >= 0) {\n+            val oldUrl = lines(idx).split('=')(1)\n+            // Case 1: Update an existing URL\n+            if (oldUrl != newUrl) {\n+              lines(idx) = valueAssignment\n+              lines\n+            } else {\n+              // Case 2: Old and new URL are the same; break out\n+              return false\n+            }\n+          } else {\n+            // Case 3: .jvmopts exists but no old URL\n+            lines :+ valueAssignment\n+          }\n+        } else {\n+          // Case 4: .jvmopts does not exist\n+          Array(valueAssignment)\n+        }\n+        scribe.info(s\"Updating Zipkin server URL to $newUrl\")"
  }
]