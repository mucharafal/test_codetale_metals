[
  {
    "id" : "6646265a-4a53-40d1-9331-587909429f4e",
    "prId" : 1198,
    "comments" : [
      {
        "id" : "8bb5e064-48c1-40b3-a1ee-747f2a7513dc",
        "parentId" : null,
        "author" : {
          "login" : "wiwa",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1862202?u=67d3c93419e4dd2a110dc2135e1b5ebaf98919c2&v=4"
        },
        "body" : "why not `map` for these case matches?",
        "createdAt" : "2019-12-17T17:59:07Z",
        "updatedAt" : "2019-12-17T17:59:07Z",
        "lastEditedBy" : {
          "login" : "wiwa",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1862202?u=67d3c93419e4dd2a110dc2135e1b5ebaf98919c2&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e8be2aae2bc2f9c0d85a0cc1f1fe7bdcddb946a4",
    "line" : 51,
    "diffHunk" : "@@ -0,0 +1,60 @@\n+package scala.meta.internal.pantsbuild\n+\n+import java.nio.file.Path\n+import ujson.Value\n+import ujson.Obj\n+import ujson.Arr\n+import ujson.Str\n+\n+case class PantsGlobs(\n+    include: List[String],\n+    exclude: List[String]\n+) {\n+\n+  /** Returns a source directory if this target uses rglobs(\"*.scala\") */\n+  def sourceDirectory(workspace: Path): Option[Path] = include match {\n+    case head :: Nil if exclude.isEmpty =>\n+      PantsGlobs.rglobsSuffixes.collectFirst {\n+        case suffix if head.endsWith(suffix) =>\n+          workspace.resolve(head.stripSuffix(suffix))\n+      }\n+    case _ =>\n+      None\n+  }\n+}\n+\n+object PantsGlobs {\n+  private val rglobsSuffixes = List(\n+    \"/**/*.java\",\n+    \"/**/*.scala\"\n+  )\n+\n+  def fromJson(target: Value): PantsGlobs = {\n+    target.obj.get(\"globs\") match {\n+      case Some(obj: Obj) =>\n+        val include = globsFromObject(obj)\n+        val exclude = obj.value.get(\"exclude\") match {\n+          case Some(arr: Arr) =>\n+            arr.value.iterator.flatMap(globsFromObject).toList\n+          case _ =>\n+            Nil\n+        }\n+        PantsGlobs(include, exclude)\n+      case _ =>\n+        PantsGlobs(Nil, Nil)\n+    }\n+  }\n+\n+  private def globsFromObject(value: Value): List[String] = value match {\n+    case Obj(obj) =>\n+      obj.get(\"globs\") match {\n+        case Some(arr: Arr) =>"
  }
]