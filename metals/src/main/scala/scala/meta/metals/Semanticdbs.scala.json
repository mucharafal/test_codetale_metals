[
  {
    "id" : "d7765792-deea-4e6b-8f21-6b3cbb96f8b6",
    "prId" : 275,
    "comments" : [
      {
        "id" : "47059913-97f1-465b-b994-389ed25acb6a",
        "parentId" : null,
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "I find it unfortunate that we always call .get on these.  What is the reason that are always sure they are nonEmpty, yet make these optional?  Since they are positional maybe this could be modeled better with the concept of pos.MIN and pos.MAX and never have an unpositioned item?",
        "createdAt" : "2018-04-10T04:18:52Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c1f51095-999b-4500-93dd-0a3f86f94105",
        "parentId" : "47059913-97f1-465b-b994-389ed25acb6a",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I guard against `isEmpty` above.",
        "createdAt" : "2018-04-10T07:08:00Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e8aa936e-19aa-4275-86ee-877975a2d427",
        "parentId" : "47059913-97f1-465b-b994-389ed25acb6a",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "This is what I typically use in these cases:\r\n\r\n```scala\r\n(x.range, y.range) match {\r\n  case (None, _) | (_, None) => 0\r\n  case (Some(xRange), Some(yRange)) => \r\n    //...\r\n}\r\n```\r\n\r\nor\r\n\r\n```scala\r\n(x.range, y.range) match {\r\n  case (Some(xRange), Some(yRange)) => \r\n    //...\r\n  case _ => 0\r\n}\r\n```",
        "createdAt" : "2018-04-10T08:26:28Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "42765d7effb4a73998347fa6fb448b3c5e13c5ab",
    "line" : null,
    "diffHunk" : "@@ -74,30 +75,50 @@ object Semanticdbs extends LazyLogging {\n         }.toList\n       case _ => Nil\n     }\n-    semanticdb.Document(input, \"\", Nil, messages, Nil, Nil)\n+    m.Document(input, \"\", Nil, messages, Nil, Nil)\n   }\n \n+  implicit private val occurrenceOrdering: Ordering[SymbolOccurrence] =\n+    new Ordering[semanticdb3.SymbolOccurrence] {\n+      override def compare(x: SymbolOccurrence, y: SymbolOccurrence): Int = {\n+        if (x.range.isEmpty || x.range.isEmpty) 0\n+        else {\n+          val byLine = Integer.compare(\n+            x.range.get.startLine,\n+            y.range.get.startLine\n+          )\n+          if (byLine != 0) {\n+            byLine\n+          } else {\n+            val byCharacter = Integer.compare(\n+              x.range.get.startCharacter,"
  },
  {
    "id" : "74355964-d13a-49e8-b7e2-567864163841",
    "prId" : 275,
    "comments" : [
      {
        "id" : "80a05852-f044-4995-b7dc-dc82daf79db2",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Double check on `x`, you probably meant `y.range.isEmpty` the second time.",
        "createdAt" : "2018-04-10T07:15:17Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "42765d7effb4a73998347fa6fb448b3c5e13c5ab",
    "line" : null,
    "diffHunk" : "@@ -74,30 +75,50 @@ object Semanticdbs extends LazyLogging {\n         }.toList\n       case _ => Nil\n     }\n-    semanticdb.Document(input, \"\", Nil, messages, Nil, Nil)\n+    m.Document(input, \"\", Nil, messages, Nil, Nil)\n   }\n \n+  implicit private val occurrenceOrdering: Ordering[SymbolOccurrence] =\n+    new Ordering[semanticdb3.SymbolOccurrence] {\n+      override def compare(x: SymbolOccurrence, y: SymbolOccurrence): Int = {\n+        if (x.range.isEmpty || x.range.isEmpty) 0"
  },
  {
    "id" : "98b22aa5-85ed-424b-b652-84b5e8af2016",
    "prId" : 275,
    "comments" : [
      {
        "id" : "da8c7220-17cc-4e57-899a-53d9fe5113b4",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "is there an issue to track this? (I know the comment was already there)",
        "createdAt" : "2018-04-10T08:29:31Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "42765d7effb4a73998347fa6fb448b3c5e13c5ab",
    "line" : null,
    "diffHunk" : "@@ -74,30 +75,50 @@ object Semanticdbs extends LazyLogging {\n         }.toList\n       case _ => Nil\n     }\n-    semanticdb.Document(input, \"\", Nil, messages, Nil, Nil)\n+    m.Document(input, \"\", Nil, messages, Nil, Nil)\n   }\n \n+  implicit private val occurrenceOrdering: Ordering[SymbolOccurrence] =\n+    new Ordering[semanticdb3.SymbolOccurrence] {\n+      override def compare(x: SymbolOccurrence, y: SymbolOccurrence): Int = {\n+        if (x.range.isEmpty || x.range.isEmpty) 0\n+        else {\n+          val byLine = Integer.compare(\n+            x.range.get.startLine,\n+            y.range.get.startLine\n+          )\n+          if (byLine != 0) {\n+            byLine\n+          } else {\n+            val byCharacter = Integer.compare(\n+              x.range.get.startCharacter,\n+              y.range.get.startCharacter\n+            )\n+            byCharacter\n+          }\n+        }\n+      }\n+    }\n+\n   def loadFromFile(\n       semanticdbPath: AbsolutePath,\n       cwd: AbsolutePath\n-  ): Database = {\n+  ): semanticdb3.TextDocuments = {\n     val bytes = Files.readAllBytes(semanticdbPath.toNIO)\n-    val sdb = Database.parseFrom(bytes)\n-    Database(\n-      sdb.documents.map { d =>\n-        val filename = s\"file:${cwd.resolve(d.filename)}\"\n-        logger.info(s\"Loading file $filename\")\n-        d.withFilename(filename)\n-          .withNames {\n-            // This should be done inside semanticdb-scalac.\n-            val names = d.names.toArray\n-            util.Sorting.quickSort(names)(\n-              Ordering.by(_.position.fold(-1)(_.start))\n-            )\n-            names\n-          }\n-      }\n-    )\n+    val sdb = semanticdb3.TextDocuments.parseFrom(bytes)\n+    val docs = sdb.documents.map { d =>\n+      val filename = s\"file:${cwd.resolve(d.uri)}\"\n+      logger.info(s\"Loading file $filename\")\n+      d.withUri(filename)\n+        .withOccurrences {\n+          // This should be done inside semanticdb-scalac."
  },
  {
    "id" : "86671b5b-2a26-468e-aa22-446c1a68d30f",
    "prId" : 275,
    "comments" : [
      {
        "id" : "3667757a-744a-4cab-9f1c-3e11534326b9",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "```scala\r\nif (x.range.isEmpty || y.range.isEmpty) 0\r\n```\r\n?",
        "createdAt" : "2018-04-10T21:12:34Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "53d1203c-5142-4b62-b385-dc9c4ea2f64f",
        "parentId" : "3667757a-744a-4cab-9f1c-3e11534326b9",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I made it this way to make it easier to see diff between `x.range` and `y.range`",
        "createdAt" : "2018-04-10T21:17:14Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f868804c-4459-489d-88ef-e40f7da29e19",
        "parentId" : "3667757a-744a-4cab-9f1c-3e11534326b9",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "For that reason I like to format such conditions this way:\r\n\r\n```scala\r\nif (\r\n  x.range.isEmpty || \r\n  y.range.isEmpty\r\n) ...\r\n```\r\n\r\nBut scalafmt with changes it to this: \r\n\r\n```scala\r\nif (x.range.isEmpty || \r\n  y.range.isEmpty) ...\r\n```\r\n\r\n😒",
        "createdAt" : "2018-04-10T22:25:07Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "49963f8f-2f15-4fb7-a97b-d2097e7db935",
        "parentId" : "3667757a-744a-4cab-9f1c-3e11534326b9",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "There's an undocumented `align.ifWhileOpenParen = true` to override that @laughedelic I agree that's the most annoying part of `align = false`, this is the indentation style used by Scala.js.\r\n\r\nWe should probably support config style in if conditions though 🤔 ",
        "createdAt" : "2018-04-11T06:29:15Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "42765d7effb4a73998347fa6fb448b3c5e13c5ab",
    "line" : 65,
    "diffHunk" : "@@ -74,30 +75,53 @@ object Semanticdbs extends LazyLogging {\n         }.toList\n       case _ => Nil\n     }\n-    semanticdb.Document(input, \"\", Nil, messages, Nil, Nil)\n+    m.Document(input, \"\", Nil, messages, Nil, Nil)\n   }\n \n+  implicit private val occurrenceOrdering: Ordering[SymbolOccurrence] =\n+    new Ordering[semanticdb3.SymbolOccurrence] {\n+      override def compare(x: SymbolOccurrence, y: SymbolOccurrence): Int = {\n+        if (x.range.isEmpty) 0\n+        else if (y.range.isEmpty) 0"
  },
  {
    "id" : "d38baedb-20c0-405b-a20b-5c4ecdb23bf0",
    "prId" : 275,
    "comments" : [
      {
        "id" : "3ef21af2-08d7-47ca-b0da-9ecc72d8a60e",
        "parentId" : null,
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "Does the protobuf have a specific version field we can check?",
        "createdAt" : "2018-04-21T01:40:53Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9abdc3cd-dbeb-44a1-912d-4e79095eafa4",
        "parentId" : "3ef21af2-08d7-47ca-b0da-9ecc72d8a60e",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "After SemanticDB v3 there is TextDocument.schema :) I tried to implement a smarter thing to detect old payloads but saw the logic would have to be in the critical path, so I opted to catch exceptions instead.\r\n",
        "createdAt" : "2018-04-21T13:08:01Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "42765d7effb4a73998347fa6fb448b3c5e13c5ab",
    "line" : 112,
    "diffHunk" : "@@ -109,7 +110,17 @@ object Semanticdbs extends LazyLogging {\n       cwd: AbsolutePath\n   ): semanticdb3.TextDocuments = {\n     val bytes = Files.readAllBytes(semanticdbPath.toNIO)\n-    val sdb = semanticdb3.TextDocuments.parseFrom(bytes)\n+    val sdb =\n+      try {\n+        semanticdb3.TextDocuments.parseFrom(bytes)\n+      } catch {\n+        case _: InvalidProtocolBufferException =>\n+          logger.error(\n+            s\"Have you upgraded to SemanticDB v3? Error parsing $semanticdbPath\""
  },
  {
    "id" : "a3a54983-033a-43af-9bdd-e4fc46cff3d4",
    "prId" : 277,
    "comments" : [
      {
        "id" : "6da4993e-bb34-4949-92cc-86665e2b6f9d",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Let's do `Uri(absolute).value` and then fix the broken implementation of `Uri.apply`\r\n\r\n```\r\n  def apply(uri: URI): Uri =\r\n    new Uri(uri.toString) {}\r\n```\r\n\r\nThis part here \r\n\r\n```\r\n    if (uri.getScheme == \"file\") {\r\n      // nio.Path.toUri.toString produces file:/// while LSP expected file:/\r\n      new Uri(s\"file://${uri.getPath}\") {}\r\n```\r\nis broken since `URI.getPath` looses the URI encoding 🤦‍♂️ ",
        "createdAt" : "2018-04-09T20:13:46Z",
        "updatedAt" : "2018-04-09T20:13:48Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f5cbe009fb9ff58ecd5bb4d8669d8164f0f43422",
    "line" : 8,
    "diffHunk" : "@@ -84,8 +84,9 @@ object Semanticdbs extends LazyLogging {\n     val bytes = Files.readAllBytes(semanticdbPath.toNIO)\n     val sdb = Database.parseFrom(bytes)\n     Database(\n-      sdb.documents.map { d =>\n-        val filename = s\"file:${cwd.resolve(d.filename)}\"\n+      sdb.documents.map { d => //round and round we go\n+        val absolute = cwd.resolve(d.filename)\n+        val filename = absolute.toURI.toString"
  }
]