[
  {
    "id" : "36216553-605d-4976-8002-ba6e88896c5a",
    "prId" : 263,
    "comments" : [
      {
        "id" : "856cceed-620c-4c83-812f-8aa128632ef8",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Outdated comment?",
        "createdAt" : "2018-04-09T15:27:14Z",
        "updatedAt" : "2018-04-09T15:51:26Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4e977a5e-c42b-4533-b5d8-03c5943da487",
        "parentId" : "856cceed-620c-4c83-812f-8aa128632ef8",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "I left it because of this point which is still valid:\r\n\r\n> running top-level \"compile\" is sub-optimal for large builds\r\n> especially cross-built builds with scala.js/native\r\n\r\nBut I guess, we cannot do much here. So I'll remove it.",
        "createdAt" : "2018-04-09T15:48:10Z",
        "updatedAt" : "2018-04-09T15:51:26Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "eb9717ef4d08ec6934f78ba760a875a8bf64e77a",
    "line" : null,
    "diffHunk" : "@@ -423,39 +411,33 @@ class MetalsServices(\n       response\n     case SbtConnect =>\n       Task {\n-        if (!sbtServerEnabled()) {\n-          showMessage.error(\"Set metals.sbt.enabled=true to use sbt server.\")\n-        } else {\n-          connectToSbtServer()\n-        }\n+        connectToSbtServer()\n         Right(Json.Null)\n       }\n   }\n \n-  private def sbtCompile(): Unit = sbtServer match {\n-    case None => ()\n-    case Some(sbt) =>\n-      // TODO(olafur) support running other commands than \"compile\"\n-      // running top-level \"compile\" is sub-optimal for large builds\n-      // especially cross-built builds with scala.js/native\n-      Sbt\n-        .exec(latestConfig().sbt.command)(sbt.client)\n-        .onErrorRecover {\n-          case NonFatal(err) =>\n-            // TODO(olafur) figure out why this \"broken pipe\" is not getting\n-            // caught here.\n-            logger.error(\"Failed to send sbt compile\", err)\n-            showMessage.warn(\n-              \"Lost connection to sbt server. \" +\n-                \"Restart the sbt session and run the 'Re-connect to sbt server' command\"\n-            )\n-        }\n-        .runAsync\n+  private def sbtExec(): Unit = sbtServer.foreach { sbt =>\n+    // TODO(olafur) support running other commands than \"compile\""
  },
  {
    "id" : "6ddeb0a2-7e68-46eb-9b92-817f463aaba7",
    "prId" : 275,
    "comments" : [
      {
        "id" : "9ee48a5e-da9b-46a1-ae80-18c4799d3f4d",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "curiosity: why are `semanticdb3` data types internal?",
        "createdAt" : "2018-04-10T08:20:16Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "dba68cbe-0d28-4ba8-a142-87a068de0076",
        "parentId" : "9ee48a5e-da9b-46a1-ae80-18c4799d3f4d",
        "author" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "body" : "Because otherwise we'd have to provide strong compatibility guarantees for them: https://github.com/scalameta/scalameta/blob/master/COMPATIBILITY.md. I don't think we're fully ready to do this right now.",
        "createdAt" : "2018-04-10T17:54:51Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "42765d7effb4a73998347fa6fb448b3c5e13c5ab",
    "line" : 6,
    "diffHunk" : "@@ -42,12 +42,12 @@ import monix.reactive.Observable\n import monix.reactive.Observer\n import monix.reactive.OverflowStrategy\n import org.langmeta.inputs.Input\n-import org.langmeta.internal.semanticdb.XtensionDatabase\n-import org.langmeta.internal.semanticdb.schema\n+import scala.meta.internal.semanticdb3"
  },
  {
    "id" : "439c3515-08bd-424c-ac0e-69af606be2b7",
    "prId" : 275,
    "comments" : [
      {
        "id" : "45a53b89-604c-4f7f-a237-8ea5f3c62b65",
        "parentId" : null,
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "Do we just bump this every time we change format?",
        "createdAt" : "2018-04-21T01:10:33Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "708ae2ec-0709-4314-a679-9af412cf14ad",
        "parentId" : "45a53b89-604c-4f7f-a237-8ea5f3c62b65",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Correct, I moved this variable to `Mtags`, added a detailed docstring and changed the number to `\"1\"` so upgrades are a simple increment. No need for semantic versioning",
        "createdAt" : "2018-04-21T13:03:50Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "42765d7effb4a73998347fa6fb448b3c5e13c5ab",
    "line" : null,
    "diffHunk" : "@@ -493,10 +503,11 @@ class MetalsServices(\n \n object MetalsServices extends LazyLogging {\n   lazy val cacheDirectory: AbsolutePath = {\n+    val cacheVersion = \"0.1\""
  },
  {
    "id" : "2bd44aa7-1774-4b78-97f2-3c82979bb117",
    "prId" : 278,
    "comments" : [
      {
        "id" : "fe18817d-fa59-427e-a649-fa1d3bc502b0",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Can we move this logic to `SbtServer`? MetalsServices is growing quite large.",
        "createdAt" : "2018-04-10T06:59:13Z",
        "updatedAt" : "2018-04-12T16:12:17Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d7eb53335ae7b0a1e1003d93d1df9d89acb3a2bf",
    "line" : null,
    "diffHunk" : "@@ -411,7 +413,25 @@ class MetalsServices(\n       response\n     case SbtConnect =>\n       Task {\n-        connectToSbtServer()\n+        val path = cwd.resolve(\"project\").resolve(\"build.properties\")\n+        val input = Files.newInputStream(path.toNIO)\n+        val sbtVersion: Option[String] ="
  },
  {
    "id" : "22aa40b9-afc6-474f-a57c-3c8441c8bcae",
    "prId" : 278,
    "comments" : [
      {
        "id" : "240b3a09-f24a-460d-b99d-dff85bf0c0ac",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Can we add `SbtServer.ActiveJson()` unapply for consistency with rest?",
        "createdAt" : "2018-04-10T07:00:44Z",
        "updatedAt" : "2018-04-12T16:12:17Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d7eb53335ae7b0a1e1003d93d1df9d89acb3a2bf",
    "line" : null,
    "diffHunk" : "@@ -480,6 +500,8 @@ class MetalsServices(\n         fileSystemSemanticdbSubscriber.onNext(path)\n       case CompilerConfig.File() =>\n         compilerConfigSubscriber.onNext(path)\n+      case _ if path == SbtServer.activeJson(cwd) =>"
  },
  {
    "id" : "ed3f768d-dc04-41ab-b908-b01964cdc35f",
    "prId" : 278,
    "comments" : [
      {
        "id" : "4dc2e33a-6c8e-46e7-acbb-6e6d02f5e58b",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Will this report an error on failure?",
        "createdAt" : "2018-04-10T07:04:49Z",
        "updatedAt" : "2018-04-12T16:12:17Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b0f1d8f0-36b5-471b-acd5-f54423e367c3",
        "parentId" : "4dc2e33a-6c8e-46e7-acbb-6e6d02f5e58b",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Yes. This fires only if `active.json` was created or changed, so there should be running sbt server. And if we fail to connect to it, this failure will be reported.",
        "createdAt" : "2018-04-10T16:51:41Z",
        "updatedAt" : "2018-04-12T16:12:17Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d7eb53335ae7b0a1e1003d93d1df9d89acb3a2bf",
    "line" : null,
    "diffHunk" : "@@ -480,6 +500,8 @@ class MetalsServices(\n         fileSystemSemanticdbSubscriber.onNext(path)\n       case CompilerConfig.File() =>\n         compilerConfigSubscriber.onNext(path)\n+      case _ if path == SbtServer.activeJson(cwd) =>\n+        connectToSbtServer()"
  },
  {
    "id" : "988ef3bb-cc55-4144-b3aa-a1016b415dc3",
    "prId" : 278,
    "comments" : [
      {
        "id" : "bb6bcc9b-ad74-4b52-b099-0dca5ade44a9",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "is this `Option.apply` necessary inside a `Try.apply`?",
        "createdAt" : "2018-04-10T08:50:39Z",
        "updatedAt" : "2018-04-12T16:12:17Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f029cd5e-862e-4af1-9925-ed85d8009670",
        "parentId" : "bb6bcc9b-ad74-4b52-b099-0dca5ade44a9",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Yes, `Try` is for a possible failure in `props.load` and `Option` is for a possible `null` from `getProperty`, but I just realised that I should rewrite it in a simpler way.",
        "createdAt" : "2018-04-10T16:49:14Z",
        "updatedAt" : "2018-04-12T16:12:17Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d7eb53335ae7b0a1e1003d93d1df9d89acb3a2bf",
    "line" : null,
    "diffHunk" : "@@ -411,7 +413,25 @@ class MetalsServices(\n       response\n     case SbtConnect =>\n       Task {\n-        connectToSbtServer()\n+        val path = cwd.resolve(\"project\").resolve(\"build.properties\")\n+        val input = Files.newInputStream(path.toNIO)\n+        val sbtVersion: Option[String] =\n+          Try {\n+            val props = new Properties()\n+            props.load(input)\n+            Option(props.getProperty(\"sbt.version\"))"
  },
  {
    "id" : "c9895561-47c7-44fa-831e-c6a2934e7036",
    "prId" : 278,
    "comments" : [
      {
        "id" : "33667c14-5280-4d4a-ade2-d022e9ce3c16",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "are we confident enough there are no `0.12` around? I've worked on such a build recently :D \r\n\r\nHow about \r\n\r\n```scala\r\nver.startsWith(\"0.\")\r\n```",
        "createdAt" : "2018-04-10T08:51:49Z",
        "updatedAt" : "2018-04-12T16:12:17Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fa7bb0eb-f843-48d6-a8a0-f8e919bd0039",
        "parentId" : "33667c14-5280-4d4a-ade2-d022e9ce3c16",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Good point. sbt-metals won't work on 0.12 anyway, but it doesn't hurt to cover more cases with this warning.",
        "createdAt" : "2018-04-10T16:50:05Z",
        "updatedAt" : "2018-04-12T16:12:17Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d7eb53335ae7b0a1e1003d93d1df9d89acb3a2bf",
    "line" : null,
    "diffHunk" : "@@ -411,7 +413,25 @@ class MetalsServices(\n       response\n     case SbtConnect =>\n       Task {\n-        connectToSbtServer()\n+        val path = cwd.resolve(\"project\").resolve(\"build.properties\")\n+        val input = Files.newInputStream(path.toNIO)\n+        val sbtVersion: Option[String] =\n+          Try {\n+            val props = new Properties()\n+            props.load(input)\n+            Option(props.getProperty(\"sbt.version\"))\n+          }.toOption.flatten\n+        input.close()\n+\n+        sbtVersion match {\n+          case Some(ver) if ver.startsWith(\"0.13\") || ver.startsWith(\"1.0\") =>"
  },
  {
    "id" : "5d29a39a-4b13-496d-84e4-71959bf32dba",
    "prId" : 278,
    "comments" : [
      {
        "id" : "a45c063c-f4bb-4647-a8bc-aa19a9d73b61",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Out of curiosity, why did you remove the callback argument? I can imagine it could be useful at some point, but we could add it then.",
        "createdAt" : "2018-04-11T10:55:52Z",
        "updatedAt" : "2018-04-12T16:12:17Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e6bb39f7-f9bf-4d82-9bf1-b39e6384d768",
        "parentId" : "a45c063c-f4bb-4647-a8bc-aa19a9d73b61",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Because it was used as `fallback(path)` i.e. with the `path` argument which is in the scope anyway, i.e. when you call `onChangedFile(x) { path => ... }`, that `path` will be exactly the same `x`.",
        "createdAt" : "2018-04-11T13:01:56Z",
        "updatedAt" : "2018-04-12T16:12:17Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d7eb53335ae7b0a1e1003d93d1df9d89acb3a2bf",
    "line" : 78,
    "diffHunk" : "@@ -485,24 +473,19 @@ class MetalsServices(\n     Cursor(Uri(td.uri), contents, offset)\n   }\n \n-  private def loadAllRelevantFilesInThisWorkspace(): Unit = {\n-    Workspace.initialize(cwd) { path =>\n-      onChangedFile(path)(_ => ())\n-    }\n-  }\n-\n   private def onChangedFile(\n       path: AbsolutePath\n-  )(fallback: AbsolutePath => Unit): Unit = {\n+  )(fallback: => Unit): Unit = {"
  },
  {
    "id" : "df92aaa3-8c7c-4dd4-97a9-53d6269c1bd6",
    "prId" : 287,
    "comments" : [
      {
        "id" : "7f26095d-4836-47b6-9dc6-6901911b8a0a",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "You can use coursier programmatically since it's already a dependency ",
        "createdAt" : "2018-04-15T16:43:03Z",
        "updatedAt" : "2018-04-21T01:52:16Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "305ac08c-745f-454b-aba9-5381b49cad59",
        "parentId" : "7f26095d-4836-47b6-9dc6-6901911b8a0a",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Yep, I just didn't know how to do it exactly, so pushed just a POC implementation.",
        "createdAt" : "2018-04-15T20:46:42Z",
        "updatedAt" : "2018-04-21T01:52:16Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "39ffe6f8c879a0972623c0e0dbd7282caf2314c6",
    "line" : null,
    "diffHunk" : "@@ -441,6 +441,28 @@ class MetalsServices(\n   }\n   private def sbtExec(): Unit = sbtExec(latestConfig().sbt.command)\n \n+  // FIXME\n+  private lazy val loadPluginClasspath = {\n+    val loadPluginVersion = \"0.1.0+2-496ac670\"\n+    import scala.sys.process._\n+     Seq(\n+      \"coursier\",\n+      \"fetch\",\n+      \"--classpath\",\n+      s\"ch.epfl.scala:load-plugin_2.12:${loadPluginVersion}\",\n+    ).!!\n+  }"
  },
  {
    "id" : "2c94882f-c09e-4ee2-8318-26dede97980f",
    "prId" : 287,
    "comments" : [
      {
        "id" : "ef00f0d8-384e-4368-9be9-56f4604ab9ce",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "@Duhemm it would be nice to check the exact version of the loaded plugin (and fail if it doesn't match. Would it be possible to do in a similar way `if-absent` works but with something like this to get all loaded plugin module IDs:\r\n\r\n```scala\r\n        val pluginModules = for {\r\n          (_, unit) <- structure.units\r\n          report <- unit.unit.plugins.pluginData.report.toSeq\r\n          module <- report.allModules\r\n        } yield module\r\n```\r\n\r\n(modifying `pluginClasses`) \r\n\r\nI'll try tomorrow, but does it make sense in general?",
        "createdAt" : "2018-04-15T22:15:20Z",
        "updatedAt" : "2018-04-21T01:52:16Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "173f9e30-3e44-4823-bc46-343c57b184b9",
        "parentId" : "ef00f0d8-384e-4368-9be9-56f4604ab9ce",
        "author" : {
          "login" : "Duhemm",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1765926?u=025ccd7d65512bc68d5a0b24bb857dabd6dd381d&v=4"
        },
        "body" : "That would be great, yes! A PR would be very welcome 😄\r\n\r\nI think it'd be better as a separate command, rather than completely replacing `if-absent`.\r\n\r\nWhat would you do if the version is different? Show a message telling the user to upgrade the version?",
        "createdAt" : "2018-04-16T06:32:10Z",
        "updatedAt" : "2018-04-21T01:52:16Z",
        "lastEditedBy" : {
          "login" : "Duhemm",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1765926?u=025ccd7d65512bc68d5a0b24bb857dabd6dd381d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6daa835d-e8f4-46ce-b0c5-0b31b0fbe78d",
        "parentId" : "ef00f0d8-384e-4368-9be9-56f4604ab9ce",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "OK, I tried it and my first guess is wrong. The code above lists some modules, but it's not related to the plugins. I'm not sure what it is, but I think just the sbt dependencies itself.\r\n\r\nI'd like to use it to detect if user has a different version of the plugin loaded (as if they add it globally) and as we can't get any useful result from running a command (on sbt server), I would make it just fail, get this failure and emit a warning message. It could take some other commands to run if the check passes, similarly to `if-absent`, I'm not sure if it's useful.",
        "createdAt" : "2018-04-16T14:20:07Z",
        "updatedAt" : "2018-04-21T01:52:16Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "39ffe6f8c879a0972623c0e0dbd7282caf2314c6",
    "line" : null,
    "diffHunk" : "@@ -441,6 +442,22 @@ class MetalsServices(\n   }\n   private def sbtExec(): Unit = sbtExec(latestConfig().sbt.command)\n \n+  private val loadPluginJars: Coeval[List[AbsolutePath]] = Coeval {\n+    Jars.fetch(\"ch.epfl.scala\", \"load-plugin_2.12\", \"0.1.0+2-496ac670\")\n+  }\n+\n+  private def sbtExecWithMetalsPlugin(commands: String*): Unit = {\n+    val metalsPluginModule =\n+      ModuleID(\"org.scalameta\", \"sbt-metals\", \"0.1.0-M1+84-a3ffb91c\")\n+    val metalsPluginRef = \"scala.meta.sbt.MetalsPlugin\"\n+    val loadPluginClasspath = loadPluginJars.value.mkString(\":\")\n+    val loadCommands = Seq(\n+      s\"apply -cp ${loadPluginClasspath} ch.epfl.scala.loadplugin.LoadPlugin\",\n+      s\"\"\"if-absent ${metalsPluginRef} \"load-plugin ${metalsPluginModule} ${metalsPluginRef}\"\"\"\","
  },
  {
    "id" : "cfaf47c4-5bdc-4e54-a59d-0ee38760c754",
    "prId" : 287,
    "comments" : [
      {
        "id" : "f4b390a1-0cbb-46c2-b29d-e41564894f00",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "`Coeval`, interesting 🤔 Can I ask why not a `lazy val`?",
        "createdAt" : "2018-04-16T07:21:53Z",
        "updatedAt" : "2018-04-21T01:52:16Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bee57eed-efeb-45ee-8a06-c165b0a533f6",
        "parentId" : "f4b390a1-0cbb-46c2-b29d-e41564894f00",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Olaf's recommendation 😅 I guess the only practical difference in this simple usecase is just an explicit type indicating its laziness. ",
        "createdAt" : "2018-04-16T07:30:19Z",
        "updatedAt" : "2018-04-21T01:52:16Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "875d0084-26b8-4c96-8e70-e06af16b3980",
        "parentId" : "f4b390a1-0cbb-46c2-b29d-e41564894f00",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Makes sense, since we already depend on Monix, let's use all the cool types 😎 ",
        "createdAt" : "2018-04-16T07:31:46Z",
        "updatedAt" : "2018-04-21T01:52:16Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "39ffe6f8c879a0972623c0e0dbd7282caf2314c6",
    "line" : null,
    "diffHunk" : "@@ -441,24 +442,18 @@ class MetalsServices(\n   }\n   private def sbtExec(): Unit = sbtExec(latestConfig().sbt.command)\n \n-  // FIXME\n-  private lazy val loadPluginClasspath = {\n-    val loadPluginVersion = \"0.1.0+2-496ac670\"\n-    import scala.sys.process._\n-     Seq(\n-      \"coursier\",\n-      \"fetch\",\n-      \"--classpath\",\n-      s\"ch.epfl.scala:load-plugin_2.12:${loadPluginVersion}\",\n-    ).!!\n+  private val loadPluginJars: Coeval[List[AbsolutePath]] = Coeval.evalOnce {"
  },
  {
    "id" : "47469e1e-6679-4d43-9263-576c07da8dbe",
    "prId" : 287,
    "comments" : [
      {
        "id" : "b402203f-a240-4cd6-93f8-456ce674cd1d",
        "parentId" : null,
        "author" : {
          "login" : "Duhemm",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1765926?u=025ccd7d65512bc68d5a0b24bb857dabd6dd381d&v=4"
        },
        "body" : "`File.pathSeparator`?",
        "createdAt" : "2018-04-16T07:51:25Z",
        "updatedAt" : "2018-04-21T01:52:16Z",
        "lastEditedBy" : {
          "login" : "Duhemm",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1765926?u=025ccd7d65512bc68d5a0b24bb857dabd6dd381d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "39ffe6f8c879a0972623c0e0dbd7282caf2314c6",
    "line" : null,
    "diffHunk" : "@@ -441,6 +442,22 @@ class MetalsServices(\n   }\n   private def sbtExec(): Unit = sbtExec(latestConfig().sbt.command)\n \n+  private val loadPluginJars: Coeval[List[AbsolutePath]] = Coeval.evalOnce {\n+    Jars.fetch(\"ch.epfl.scala\", \"load-plugin_2.12\", \"0.1.0+2-496ac670\")\n+  }\n+\n+  private def sbtExecWithMetalsPlugin(commands: String*): Unit = {\n+    val metalsPluginModule =\n+      ModuleID(\"org.scalameta\", \"sbt-metals\", \"0.1.0-M1+84-a3ffb91c\")\n+    val metalsPluginRef = \"scala.meta.sbt.MetalsPlugin\"\n+    val loadPluginClasspath = loadPluginJars.value.mkString(\":\")"
  },
  {
    "id" : "999fd932-3e53-4183-8092-572777dc991d",
    "prId" : 287,
    "comments" : [
      {
        "id" : "bf1b0e29-ed3a-4926-9ff8-3cd8630e387d",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Maybe use Buildinfo to use the current version here?",
        "createdAt" : "2018-04-19T21:29:09Z",
        "updatedAt" : "2018-04-21T01:52:16Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a06584a7-8fb2-4206-a75b-920bb1e62b21",
        "parentId" : "bf1b0e29-ed3a-4926-9ff8-3cd8630e387d",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Right, I thought about it, but then forgot",
        "createdAt" : "2018-04-19T21:30:54Z",
        "updatedAt" : "2018-04-21T01:52:16Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3560d191-a1d7-44d2-8caa-3f081e01725d",
        "parentId" : "bf1b0e29-ed3a-4926-9ff8-3cd8630e387d",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Done: dde1600",
        "createdAt" : "2018-04-19T21:39:10Z",
        "updatedAt" : "2018-04-21T01:52:16Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "39ffe6f8c879a0972623c0e0dbd7282caf2314c6",
    "line" : null,
    "diffHunk" : "@@ -441,6 +443,22 @@ class MetalsServices(\n   }\n   private def sbtExec(): Unit = sbtExec(latestConfig().sbt.command)\n \n+  private val loadPluginJars: Coeval[List[AbsolutePath]] = Coeval.evalOnce {\n+    Jars.fetch(\"ch.epfl.scala\", \"load-plugin_2.12\", \"0.1.0+2-496ac670\")\n+  }\n+\n+  private def sbtExecWithMetalsPlugin(commands: String*): Unit = {\n+    val metalsPluginModule =\n+      ModuleID(\"org.scalameta\", \"sbt-metals\", \"0.1.0-M1+84-a3ffb91c\")"
  },
  {
    "id" : "902a66f2-bf4c-4ff4-8f67-e3a834d4599c",
    "prId" : 287,
    "comments" : [
      {
        "id" : "df15c53a-480e-45e2-9714-45f02aef235a",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Can we log something here? I tried this on a random project and it was silent for quite a while with no indication in the logs or elsewhere.",
        "createdAt" : "2018-04-19T22:02:47Z",
        "updatedAt" : "2018-04-21T01:52:16Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0f004251-3e2c-4875-9fd2-02456972bc26",
        "parentId" : "df15c53a-480e-45e2-9714-45f02aef235a",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Will do",
        "createdAt" : "2018-04-20T13:53:17Z",
        "updatedAt" : "2018-04-21T01:52:16Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "39ffe6f8c879a0972623c0e0dbd7282caf2314c6",
    "line" : null,
    "diffHunk" : "@@ -460,6 +481,7 @@ class MetalsServices(\n             sbtServer = None\n             showMessage.warn(\"Disconnected from sbt server\")\n         }\n+        sbtExecWithMetalsPlugin(\"semanticdbEnable\")"
  },
  {
    "id" : "ce848155-289a-46e6-9703-47913ce6824e",
    "prId" : 319,
    "comments" : [
      {
        "id" : "97c6da4d-c333-4841-836f-a103ccd2791a",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Hardcoding bloop here. See the comment.",
        "createdAt" : "2018-06-27T13:23:41Z",
        "updatedAt" : "2018-06-27T13:26:49Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "76cc78d524784aaaff455781986d66040a0ca3fc",
    "line" : 38,
    "diffHunk" : "@@ -492,6 +500,31 @@ class MetalsServices(\n     }\n   }\n \n+  private def connectToBspServer(): Unit = {\n+    bspServer.foreach(_.disconnect())\n+    val services = BspServer.forwardingServices(client, latestConfig) //, logger)\n+    // FIXME(gabro): here we are hardcoding the selection of Bloop,\n+    // but this should be configurable\n+    val bspConnection = new BloopBspConnector(services)(s.bsp)"
  }
]