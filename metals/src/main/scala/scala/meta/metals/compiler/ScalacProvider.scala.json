[
  {
    "id" : "42b90441-d84b-4fd4-9937-c1108f9ebc76",
    "prId" : 225,
    "comments" : [
      {
        "id" : "81b507b6-6092-4461-89bf-e677f6e3e6a1",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Nitpick, I would typically flip the condition to be `if (version == 2.12) <happy path> else <error path>`",
        "createdAt" : "2018-04-02T15:11:41Z",
        "updatedAt" : "2018-04-02T15:14:24Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5a001cff-779d-4943-b861-cab1f65e1f7a",
        "parentId" : "81b507b6-6092-4461-89bf-e677f6e3e6a1",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Makes sense: that pleases the CPU branch predictor ^^",
        "createdAt" : "2018-04-02T15:13:02Z",
        "updatedAt" : "2018-04-02T15:14:24Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "299c47884dfa8163da6c7411b3643224ec941881",
    "line" : null,
    "diffHunk" : "@@ -58,12 +60,22 @@ class ScalacProvider() extends LazyLogging {\n   def loadNewCompilerGlobals(\n       config: CompilerConfig\n   ): Effects.InstallPresentationCompiler = {\n-    logger.info(s\"Loading new compiler from config $config\")\n-    val compiler =\n-      ScalacProvider.newCompiler(config.classpath, config.scalacOptions)\n-    compilerByConfigOrigin(config.origin) = config -> compiler\n-    config.sources.foreach { path =>\n-      compilerByPath(Uri(path)) = compiler\n+    if (config.scalaVersion.major != 2 || config.scalaVersion.minor != 12) {"
  },
  {
    "id" : "02c8e5c6-b58a-4385-a2f9-580fce8abe07",
    "prId" : 275,
    "comments" : [
      {
        "id" : "a8256fc0-fec8-4226-b732-3ff9fcac1326",
        "parentId" : null,
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "I saw you and @gabro discussing earlier but don’t remember the result.  Do we have a convention to avoid ._N methods?  I personally don’t like the readability here as it makes it difficult to see that we are falling back to Global.",
        "createdAt" : "2018-04-21T01:16:33Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fe741dd6-cc0d-4ba7-a957-34b6ffc1f687",
        "parentId" : "a8256fc0-fec8-4226-b732-3ff9fcac1326",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Good point, I agree `_N` methods are hard to read. Updated ",
        "createdAt" : "2018-04-21T13:08:43Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8061634e-566e-4429-b13b-39208359580a",
        "parentId" : "a8256fc0-fec8-4226-b732-3ff9fcac1326",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "this might actually be a decent linter rule \"Introduce a case class or use pattern matching instead! Overuse of tuples is a code smell\" ",
        "createdAt" : "2018-04-21T13:09:57Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "42765d7effb4a73998347fa6fb448b3c5e13c5ab",
    "line" : null,
    "diffHunk" : "@@ -35,26 +35,28 @@ class ScalacProvider()(implicit client: JsonRpcClient) extends LazyLogging {\n       // Looking up by sourceDirectory alone is not enough since\n       // in sbt it's possible to `sources += file(\"blah\")`, which would\n       // not be respected if we only went by directories.\n-      .orElse(compilerBySourceDirectory(uri))\n+      .orElse(compilerBySourceDirectory(uri).map(_._2))"
  }
]