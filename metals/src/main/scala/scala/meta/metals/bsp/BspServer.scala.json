[
  {
    "id" : "5f70a337-47dc-4330-afe0-478fb1751599",
    "prId" : 319,
    "comments" : [
      {
        "id" : "3959e8be-c0c4-435a-91be-3a0e69701592",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Open point: I don't know how to do this in a smart way, yet.\r\nCan we decide which target to use based on the file the user is viewing?\r\n",
        "createdAt" : "2018-06-27T13:25:19Z",
        "updatedAt" : "2018-06-27T13:26:49Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "76cc78d524784aaaff455781986d66040a0ca3fc",
    "line" : 43,
    "diffHunk" : "@@ -0,0 +1,126 @@\n+package scala.meta.metals.bsp\n+\n+import scala.meta.metals.Configuration\n+import monix.eval.Task\n+import monix.execution.CancelableFuture\n+import monix.execution.Scheduler\n+import org.langmeta.io.AbsolutePath\n+import scala.meta.jsonrpc.JsonRpcClient\n+import scala.meta.jsonrpc.Services\n+import scala.meta.lsp.TextDocument\n+import scala.meta.lsp.Window\n+import ch.epfl.`scala`.bsp.endpoints\n+import ch.epfl.`scala`.bsp.InitializeBuildParams\n+import ch.epfl.`scala`.bsp.WorkspaceBuildTargetsRequest\n+import ch.epfl.`scala`.bsp.Uri\n+import ch.epfl.`scala`.bsp.BuildClientCapabilities\n+import ch.epfl.`scala`.bsp.CompileParams\n+import scala.util.control.NonFatal\n+import com.typesafe.scalalogging.LazyLogging\n+\n+/**\n+ * A wrapper around a connection to a bsp server.\n+ *\n+ * @param client client that can send requests and notifications\n+ *               to the sbt server.\n+ * @param runningServer The running client listening for requests from the server.\n+ *               Use runningServer.onComplete to attach callbacks on\n+ *               disconnect.\n+ *\n+ */\n+case class BspServer(\n+    client: JsonRpcClient,\n+    runningServer: CancelableFuture[Unit],\n+) extends LazyLogging {\n+  implicit val _client = client\n+  def compile()(implicit scheduler: Scheduler): Unit = {\n+    val compileTask = for {\n+      result <- endpoints.Workspace.buildTargets\n+        .request(WorkspaceBuildTargetsRequest())\n+      // FIXME(gabro): here we're blindly compiling the first returned target\n+      // we need a better strategy to either automatically select a target for\n+      // compilation or making the user select one\n+      target = result.right.get.targets.head"
  },
  {
    "id" : "2c8c4a7c-78be-4bef-aa61-3e62b78c5c2f",
    "prId" : 319,
    "comments" : [
      {
        "id" : "793d6e51-f60f-46bb-8e36-b0566151373b",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "this is where it's not working: the request hangs forever. I'm sure I'm doing something stupid with the bloop initialization.\r\n\r\n/cc @olafurpg @jvican ",
        "createdAt" : "2018-06-27T13:26:27Z",
        "updatedAt" : "2018-06-27T13:26:49Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "76cc78d524784aaaff455781986d66040a0ca3fc",
    "line" : 94,
    "diffHunk" : "@@ -0,0 +1,126 @@\n+package scala.meta.metals.bsp\n+\n+import scala.meta.metals.Configuration\n+import monix.eval.Task\n+import monix.execution.CancelableFuture\n+import monix.execution.Scheduler\n+import org.langmeta.io.AbsolutePath\n+import scala.meta.jsonrpc.JsonRpcClient\n+import scala.meta.jsonrpc.Services\n+import scala.meta.lsp.TextDocument\n+import scala.meta.lsp.Window\n+import ch.epfl.`scala`.bsp.endpoints\n+import ch.epfl.`scala`.bsp.InitializeBuildParams\n+import ch.epfl.`scala`.bsp.WorkspaceBuildTargetsRequest\n+import ch.epfl.`scala`.bsp.Uri\n+import ch.epfl.`scala`.bsp.BuildClientCapabilities\n+import ch.epfl.`scala`.bsp.CompileParams\n+import scala.util.control.NonFatal\n+import com.typesafe.scalalogging.LazyLogging\n+\n+/**\n+ * A wrapper around a connection to a bsp server.\n+ *\n+ * @param client client that can send requests and notifications\n+ *               to the sbt server.\n+ * @param runningServer The running client listening for requests from the server.\n+ *               Use runningServer.onComplete to attach callbacks on\n+ *               disconnect.\n+ *\n+ */\n+case class BspServer(\n+    client: JsonRpcClient,\n+    runningServer: CancelableFuture[Unit],\n+) extends LazyLogging {\n+  implicit val _client = client\n+  def compile()(implicit scheduler: Scheduler): Unit = {\n+    val compileTask = for {\n+      result <- endpoints.Workspace.buildTargets\n+        .request(WorkspaceBuildTargetsRequest())\n+      // FIXME(gabro): here we're blindly compiling the first returned target\n+      // we need a better strategy to either automatically select a target for\n+      // compilation or making the user select one\n+      target = result.right.get.targets.head\n+      _ <- endpoints.BuildTarget.compile.request(\n+        CompileParams(\n+          targets = List(target.id),\n+          requestId = None, // this is originId in recent versions of bsp\n+          arguments = Nil\n+        )\n+      )\n+    } yield ()\n+    compileTask.onErrorRecover {\n+      case NonFatal(err) => logger.error(\"Failed to send compile via bsp\", err)\n+    }.runAsync\n+  }\n+  def disconnect(): Unit = runningServer.cancel()\n+}\n+\n+object BspServer extends LazyLogging {\n+  private def fail(message: String) = Task.now(Left(message))\n+\n+  /**\n+   * Establish connection with bsp server.\n+   *\n+   * @param cwd The workspace directory, baseDirectory.in(ThisBuild).\n+   * @param services the handler for requests/notifications/responses from\n+   *                 the sbt server.\n+   * @param scheduler the scheduler on which to run the services handling\n+   *                  sbt responses and notifications.\n+   * @return A client to communicate with bsp server in case of success or a\n+   *         user-friendly error message if something went wrong in case of\n+   *         failure.\n+   */\n+  def connect(\n+      cwd: AbsolutePath,\n+      bspConnection: BspConnector,\n+  ): Task[Either[String, BspServer]] = {\n+    bspConnection.openServerConnection().flatMap {\n+      case Left(error) => Task(Left(error))\n+      case Right((client, runningServer)) =>\n+        val initialize =\n+          endpoints.Build.initialize\n+            .request(\n+              InitializeBuildParams(\n+                rootUri = Uri(cwd.toURI),\n+                capabilities = BuildClientCapabilities(\n+                  languageIds = List(\"scala\"),\n+                  providesFileWatching = false\n+                )\n+              )\n+            )(client)\n+        initialize\n+        // uncomment the next line to trigger Task timeout\n+        // .timeout(concurrent.duration.Duration(3, \"seconds\"))"
  }
]