[
  {
    "id" : "0ff54359-ab2f-449c-a6a3-eb2cff030c6b",
    "prId" : 275,
    "comments" : [
      {
        "id" : "17add3a5-71c6-4045-b754-b83d3271373b",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I'm glad to see this gone in favor of a scalameta pretty-printer!",
        "createdAt" : "2018-04-10T08:38:17Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fb8d51f4-e2e4-4b0f-a132-b66d2a6ed454",
        "parentId" : "17add3a5-71c6-4045-b754-b83d3271373b",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I agree! The current hover output is not helpful but that needs to be fixed upstream.",
        "createdAt" : "2018-04-10T20:51:06Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "42765d7effb4a73998347fa6fb448b3c5e13c5ab",
    "line" : 163,
    "diffHunk" : "@@ -27,177 +20,15 @@ object HoverProvider extends LazyLogging {\n   ): Hover = {\n     val result = for {\n       (symbol, _) <- index.findSymbol(uri, line, column)\n-      data <- index.data(symbol)\n-      tpe <- getPrettyDefinition(symbol, data)\n-      document <- index.documentIndex.getDocument(uri)\n     } yield {\n-      val scalafixIndex = SemanticdbIndex.load(\n-        schema.Database(document :: Nil).toDb(None),\n-        m.Sourcepath(Nil),\n-        m.Classpath(Nil)\n-      )\n-      val prettyTpe = new TypePrinter()(scalafixIndex).apply(tpe)\n+      // TODO: pretty-print SymbolInformation.tpe, blocked by https://github.com/scalameta/scalameta/issues/1479\n+      val prettyTpe = symbol.syntax\n       Hover(\n-        contents = RawMarkedString(language = \"scala\", value = prettyTpe.syntax) :: Nil,\n+        contents = RawMarkedString(language = \"scala\", value = prettyTpe) :: Nil,\n         range = None\n       )\n     }\n     result.getOrElse(Hover(Nil, None))\n   }\n \n-  /** Returns a definition tree for this symbol signature */\n-  private def getPrettyDefinition("
  },
  {
    "id" : "ff7f83f5-df14-4c88-a499-579501919582",
    "prId" : 275,
    "comments" : [
      {
        "id" : "871a476d-86b0-4328-ba51-6fb50ca369db",
        "parentId" : null,
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "I worry about TODO vs tickets.  Consider creating issues for these and referencing the issue in the TODO comment.",
        "createdAt" : "2018-04-21T01:34:21Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "42765d7effb4a73998347fa6fb448b3c5e13c5ab",
    "line" : null,
    "diffHunk" : "@@ -59,10 +59,14 @@ object HoverProvider extends LazyLogging {\n         info.symbol.stripSuffix(\".\").parse[Term].get.asInstanceOf[Term.Ref]\n       Pkg(ref, Nil)\n     } else if (info.kind.isTrait) {\n+      // TODO: include type parameters\n       Defn.Trait(mods, Type.Name(info.name), Nil, EmptyCtor, EmptyTemplate)\n     } else if (info.kind.isClass) {\n+      // TODO: include type parameters and primary constructor"
  },
  {
    "id" : "29c330f0-d61d-45d1-8ee6-6c42a736c505",
    "prId" : 275,
    "comments" : [
      {
        "id" : "7e3fc53e-c92e-468c-b8ec-e38dd6abe256",
        "parentId" : null,
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "Does this mean if t is tagged as a method type that we know that both get calls will succeed here?  Is this more protobuf influence?  The number of calls we make to get is a continual source of concern for me.",
        "createdAt" : "2018-04-21T01:39:15Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "42765d7effb4a73998347fa6fb448b3c5e13c5ab",
    "line" : null,
    "diffHunk" : "@@ -64,10 +64,22 @@ object HoverProvider extends LazyLogging {\n     } else if (info.kind.isClass) {\n       // TODO: include type parameters and primary constructor\n       Defn.Class(mods, Type.Name(info.name), Nil, EmptyCtor, EmptyTemplate)\n-    } else if (info.kind.isLocal || info.symbol.startsWith(\"local\")) {\n+    } else if (info.symbol == \"scala.Any#asInstanceOf().\") {\n+      // HACK(olafur) to avoid 'java.util.NoSuchElementException: scala.Any.asInstanceOf(A).[A]'\n+      q\"final def asInstanceOf[T]: T\"\n+    } else if (info.kind.isLocal ||\n+      info.kind.isParameter ||\n+      info.symbol.startsWith(\"local\")) {\n       // Workaround for https://github.com/scalameta/scalameta/issues/1503\n       // In the future we should be able to produce `val x: Int` syntax for local symbols.\n-      PrettyType.toType(info.tpe.get, symtab, QualifyStrategy.Readable).tree\n+      val tpe = info.tpe match {\n+        case Some(t) =>\n+          if (t.tag.isMethodType) t.methodType.get.returnType.get"
  }
]