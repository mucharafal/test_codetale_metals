[
  {
    "id" : "3b3e5fe2-da4b-45db-9cf0-5dfbf4a79f23",
    "prId" : 274,
    "comments" : [
      {
        "id" : "67e24f0b-45bf-485e-b378-c1da50fa8231",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "this is a duplication of `Main.scala`. I should pass it down as a parameter",
        "createdAt" : "2018-04-09T16:24:07Z",
        "updatedAt" : "2018-09-27T11:32:08Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "576951c2-5e1f-4516-9fc7-2142513a7733",
        "parentId" : "67e24f0b-45bf-485e-b378-c1da50fa8231",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "It's trivial enough I'm not sure it's not worth it",
        "createdAt" : "2018-04-09T16:26:06Z",
        "updatedAt" : "2018-09-27T11:32:08Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c9b5e294-d72e-4d99-ab16-b10d55c55a49",
        "parentId" : "67e24f0b-45bf-485e-b378-c1da50fa8231",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Maybe just to avoid potential errors during minor refactorings",
        "createdAt" : "2018-04-09T16:28:03Z",
        "updatedAt" : "2018-09-27T11:32:08Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4131c4727560c4849e4a0b6eb1b5270a23a01ddd",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,25 @@\n+package scala.meta.metals.providers\n+\n+import java.util.zip.ZipEntry\n+import java.util.zip.ZipOutputStream\n+import java.io.ByteArrayOutputStream\n+import scala.meta.AbsolutePath\n+import com.typesafe.scalalogging.LazyLogging\n+\n+class DebugPayloadProvider(\n+    cwd: AbsolutePath\n+) extends LazyLogging {\n+  def generatePayload(): Array[Byte] = {\n+    val out = new ByteArrayOutputStream\n+    val zip = new ZipOutputStream(out)\n+\n+    val logFile = cwd.resolve(\".metals\").resolve(\"metals.log\")"
  },
  {
    "id" : "329538d6-6d11-4f28-872b-d1dbeb6a847b",
    "prId" : 274,
    "comments" : [
      {
        "id" : "dfa0f808-ba2d-4f9d-a0e6-88b5d1d1dc01",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "buildinfo will be replicated with the same path, so the layout of the payload is something like\r\n\r\n```\r\nmetals.log\r\nconfiguration.json\r\nbuildinfo\r\n  |___ myProject\r\n      |___ compile.properties\r\n```",
        "createdAt" : "2018-04-10T16:19:54Z",
        "updatedAt" : "2018-09-27T11:32:08Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4131c4727560c4849e4a0b6eb1b5270a23a01ddd",
    "line" : 61,
    "diffHunk" : "@@ -0,0 +1,62 @@\n+package scala.meta.metals.providers\n+\n+import java.util.zip.ZipEntry\n+import java.util.zip.ZipOutputStream\n+import java.io.ByteArrayOutputStream\n+import scala.meta.AbsolutePath\n+import com.typesafe.scalalogging.LazyLogging\n+import io.circe.syntax._\n+import io.circe.Json\n+import cats.syntax.either._\n+import scala.meta.metals.Uri\n+import scala.meta.metals.Configuration\n+import scala.meta.metals.compiler.ScalacProvider\n+import org.langmeta.jsonrpc.Response\n+\n+class DebugPayloadProvider(\n+    cwd: AbsolutePath,\n+    latestConfig: () => Configuration,\n+    scalacProvider: ScalacProvider\n+) extends LazyLogging {\n+  private def zipWithFiles(f: Map[String, Array[Byte]]): Array[Byte] = {\n+    val out = new ByteArrayOutputStream\n+    val zip = new ZipOutputStream(out)\n+    f.foreach {\n+      case (name, bytes) =>\n+        zip.putNextEntry(new ZipEntry(name))\n+        zip.write(bytes)\n+        zip.closeEntry()\n+    }\n+    zip.close()\n+    out.toByteArray\n+  }\n+\n+  private def currentUri(arguments: Option[Seq[Json]]): Option[Uri] =\n+    arguments.flatMap(_.headOption).flatMap(_.asString).map(Uri.apply)\n+\n+  def generatePayload(\n+      arguments: Option[Seq[Json]]\n+  ): Either[Response.Error, Json] =\n+    Either.fromOption(\n+      currentUri(arguments).map { uri =>\n+        val logFile = cwd.resolve(\".metals\").resolve(\"metals.log\").readAllBytes\n+        val config = latestConfig().asJson.spaces2.toCharArray.map(_.toByte)\n+        val buildInfoEntry = scalacProvider\n+          .configBySourceDirectory(uri)\n+          .map { buildInfo =>\n+            buildInfo.origin\n+              .toRelative(cwd.resolve(\".metals\"))\n+              .toString -> buildInfo.origin.readAllBytes"
  },
  {
    "id" : "4fd32515-cccd-49d9-b7ea-394684aeb1a0",
    "prId" : 274,
    "comments" : [
      {
        "id" : "70790540-3606-44b7-8efe-571c8fce8633",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "this is a \"trick\" to optionally concatenate an entry (`buildInfo` can be missing, which is a symptom of a bad setup)",
        "createdAt" : "2018-04-10T16:20:42Z",
        "updatedAt" : "2018-09-27T11:32:08Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4131c4727560c4849e4a0b6eb1b5270a23a01ddd",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,62 @@\n+package scala.meta.metals.providers\n+\n+import java.util.zip.ZipEntry\n+import java.util.zip.ZipOutputStream\n+import java.io.ByteArrayOutputStream\n+import scala.meta.AbsolutePath\n+import com.typesafe.scalalogging.LazyLogging\n+import io.circe.syntax._\n+import io.circe.Json\n+import cats.syntax.either._\n+import scala.meta.metals.Uri\n+import scala.meta.metals.Configuration\n+import scala.meta.metals.compiler.ScalacProvider\n+import org.langmeta.jsonrpc.Response\n+\n+class DebugPayloadProvider(\n+    cwd: AbsolutePath,\n+    latestConfig: () => Configuration,\n+    scalacProvider: ScalacProvider\n+) extends LazyLogging {\n+  private def zipWithFiles(f: Map[String, Array[Byte]]): Array[Byte] = {\n+    val out = new ByteArrayOutputStream\n+    val zip = new ZipOutputStream(out)\n+    f.foreach {\n+      case (name, bytes) =>\n+        zip.putNextEntry(new ZipEntry(name))\n+        zip.write(bytes)\n+        zip.closeEntry()\n+    }\n+    zip.close()\n+    out.toByteArray\n+  }\n+\n+  private def currentUri(arguments: Option[Seq[Json]]): Option[Uri] =\n+    arguments.flatMap(_.headOption).flatMap(_.asString).map(Uri.apply)\n+\n+  def generatePayload(\n+      arguments: Option[Seq[Json]]\n+  ): Either[Response.Error, Json] =\n+    Either.fromOption(\n+      currentUri(arguments).map { uri =>\n+        val logFile = cwd.resolve(\".metals\").resolve(\"metals.log\").readAllBytes\n+        val config = latestConfig().asJson.spaces2.toCharArray.map(_.toByte)\n+        val buildInfoEntry = scalacProvider\n+          .configBySourceDirectory(uri)\n+          .map { buildInfo =>\n+            buildInfo.origin\n+              .toRelative(cwd.resolve(\".metals\"))\n+              .toString -> buildInfo.origin.readAllBytes\n+          }\n+          .toMap\n+\n+        zipWithFiles(\n+          Map(\n+            \"metals.log\" -> logFile,\n+            \"configuration.json\" -> config,\n+          ) ++ buildInfoEntry"
  },
  {
    "id" : "30036ff7-628e-40fd-9baa-8aeae100c3a2",
    "prId" : 274,
    "comments" : [
      {
        "id" : "40b7d67a-98dd-46b3-9ec8-9d6ab038077c",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "@olafurpg is there a way to get a nicer output for `m.Document` other than `.toString`?",
        "createdAt" : "2018-04-20T21:43:46Z",
        "updatedAt" : "2018-09-27T11:32:08Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a1fcc888-c9bf-483c-aaa8-152c7636ea75",
        "parentId" : "40b7d67a-98dd-46b3-9ec8-9d6ab038077c",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "`doc.toByteArray` preserves the protobuf payload.\r\n\r\nWe should be very clear when the user generates the file that the source code for the open buffer is included and it's fine to remove the file leave if sharing code is a problem.",
        "createdAt" : "2018-04-21T08:49:10Z",
        "updatedAt" : "2018-09-27T11:32:08Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4131c4727560c4849e4a0b6eb1b5270a23a01ddd",
    "line" : 69,
    "diffHunk" : "@@ -0,0 +1,94 @@\n+package scala.meta.metals.providers\n+\n+import java.util.zip.ZipEntry\n+import java.util.zip.ZipOutputStream\n+import java.io.ByteArrayOutputStream\n+import java.nio.file.Files\n+import java.time.Instant\n+import scala.meta.AbsolutePath\n+import com.typesafe.scalalogging.LazyLogging\n+import io.circe.syntax._\n+import io.circe.Json\n+import cats.syntax.either._\n+import scala.meta.metals.Uri\n+import scala.meta.metals.Buffers\n+import scala.meta.metals.Configuration\n+import scala.meta.metals.search.DocumentIndex\n+import scala.meta.metals.compiler.ScalacProvider\n+import scala.util.control.NonFatal\n+import org.langmeta.jsonrpc.Response\n+\n+class DebugPayloadProvider(\n+    cwd: AbsolutePath,\n+    latestConfig: () => Configuration,\n+    scalacProvider: ScalacProvider,\n+    buffers: Buffers,\n+    documentIndex: DocumentIndex\n+) extends LazyLogging {\n+\n+  implicit class XtensionByteArray(val s: String) {\n+    def toByteArray: Array[Byte] = s.toCharArray.map(_.toByte)\n+  }\n+\n+  private def zipWithFiles(f: Map[String, Array[Byte]]): Array[Byte] = {\n+    val out = new ByteArrayOutputStream\n+    val zip = new ZipOutputStream(out)\n+    f.foreach {\n+      case (name, bytes) =>\n+        zip.putNextEntry(new ZipEntry(name))\n+        zip.write(bytes)\n+        zip.closeEntry()\n+    }\n+    zip.close()\n+    out.toByteArray\n+  }\n+\n+  private def currentUri(arguments: Option[Seq[Json]]): Option[Uri] =\n+    arguments.flatMap(_.headOption).flatMap(_.asString).map(Uri.apply)\n+\n+  def generatePayload(\n+      arguments: Option[Seq[Json]]\n+  ): Either[Response.Error, Array[Byte]] =\n+    Either.fromOption(\n+      currentUri(arguments).map { uri =>\n+        val logFile = cwd.resolve(\".metals\").resolve(\"metals.log\").readAllBytes\n+        val config = latestConfig().asJson.spaces2.toByteArray\n+        val buildInfoEntry = scalacProvider\n+          .configBySourceDirectory(uri)\n+          .map { buildInfo =>\n+            buildInfo.origin\n+              .toRelative(cwd.resolve(\".metals\"))\n+              .toString -> buildInfo.origin.readAllBytes\n+          }\n+          .toMap\n+\n+        val currentBuffer = buffers.read(uri).toByteArray\n+        val semanticdbDocument = documentIndex\n+          .getDocument(uri)\n+          .map { doc =>\n+            uri.toPath.getFileName.toString + \".semanticdb\" -> doc.toString.toByteArray"
  }
]