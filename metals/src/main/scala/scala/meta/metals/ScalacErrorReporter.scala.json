[
  {
    "id" : "fe0c2321-bfba-4a42-a02b-101c8c41af39",
    "prId" : 215,
    "comments" : [
      {
        "id" : "f58af809-c532-41a9-9395-a715520c57a7",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Conversion methods here duplicated the code from `ScalametaEnrichments`, so the only valuable code here was in the `analyzeIndex` methods",
        "createdAt" : "2018-03-31T15:10:58Z",
        "updatedAt" : "2018-03-31T19:24:47Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5708b7b0e46d970250e38a25ad44371815b04c29",
    "line" : 50,
    "diffHunk" : "@@ -1,52 +0,0 @@\n-package scala.meta.metals\n-\n-import scala.meta.metals.ScalametaEnrichments._\n-import org.langmeta.lsp.Diagnostic\n-import org.langmeta.lsp.PublishDiagnostics\n-import org.langmeta.jsonrpc.JsonRpcClient\n-import scala.{meta => m}\n-import scala.meta.semanticdb\n-import scalafix.internal.util.EagerInMemorySemanticdbIndex\n-import scalafix.util.SemanticdbIndex\n-import org.langmeta.lsp.TextDocument.publishDiagnostics\n-import org.langmeta.{lsp => l}\n-\n-class ScalacErrorReporter()(implicit connection: JsonRpcClient) {\n-\n-  def reportErrors(\n-      mdb: m.Database\n-  ): Effects.PublishDiagnostics = {\n-    val messages = analyzeIndex(mdb)\n-    messages.foreach(publishDiagnostics.notify)\n-    Effects.PublishDiagnostics\n-  }\n-  private def analyzeIndex(mdb: m.Database): Seq[PublishDiagnostics] =\n-    analyzeIndex(\n-      EagerInMemorySemanticdbIndex(mdb, m.Sourcepath(Nil), m.Classpath(Nil))\n-    )\n-  private def analyzeIndex(index: SemanticdbIndex): Seq[PublishDiagnostics] =\n-    index.database.documents.map { d =>\n-      val uri = d.input.syntax\n-      PublishDiagnostics(uri, d.messages.map(toDiagnostic))\n-    }\n-\n-  private def toDiagnostic(msg: semanticdb.Message): Diagnostic = {\n-    l.Diagnostic(\n-      range = msg.position.toRange,\n-      severity = Some(toSeverity(msg.severity)),\n-      code = None,\n-      source = Some(\"scalac\"),\n-      message = msg.text\n-    )\n-  }\n-\n-  private def toSeverity(\n-      s: semanticdb.Severity\n-  ): l.DiagnosticSeverity =\n-    s match {\n-      case semanticdb.Severity.Error => l.DiagnosticSeverity.Error\n-      case semanticdb.Severity.Warning => l.DiagnosticSeverity.Warning\n-      case semanticdb.Severity.Info => l.DiagnosticSeverity.Information\n-    }"
  }
]