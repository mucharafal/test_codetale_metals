[
  {
    "id" : "ba29d415-7d18-42ac-805e-c176d1c19a75",
    "prId" : 275,
    "comments" : [
      {
        "id" : "4b93fb76-3f3f-40a1-bc1f-7776470d372f",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "s/denot/symbolInfo ?",
        "createdAt" : "2018-04-10T08:39:38Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "19b048e0-413d-4bb4-a78d-3c51a06c5c75",
        "parentId" : "4b93fb76-3f3f-40a1-bc1f-7776470d372f",
        "author" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "body" : "Or simply `info`. This is how we name related variables in scalameta/scalameta.",
        "createdAt" : "2018-04-10T17:56:34Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "42765d7effb4a73998347fa6fb448b3c5e13c5ab",
    "line" : null,
    "diffHunk" : "@@ -174,39 +176,45 @@ class InMemorySymbolIndex(\n    *                 - filename must be formatted as a URI\n    *                 - names must be sorted\n    */\n-  def indexDocument(document: s.Document): Effects.IndexSemanticdb = {\n-    val uri = Uri(document.filename)\n-    val input = Input.VirtualFile(document.filename, document.contents)\n+  def indexDocument(document: TextDocument): Effects.IndexSemanticdb = {\n+    val uri = Uri(document.uri)\n+    val input = Input.VirtualFile(document.uri, document.text)\n     documentIndex.putDocument(uri, document)\n-    document.names.foreach {\n+    document.occurrences.foreach {\n       // TODO(olafur) handle local symbols on the fly from a `Document` in go-to-definition\n       // local symbols don't need to be indexed globally, by skipping them we should\n       // def isLocalSymbol(sym: String): Boolean =\n       // !sym.endsWith(\".\") &&\n       //     !sym.endsWith(\"#\") &&\n       //     !sym.endsWith(\")\")\n       // be able to minimize the size of the global index significantly.\n-      //      case s.ResolvedName(_, sym, _) if isLocalSymbol(sym) => // Do nothing, local symbol.\n-      case s.ResolvedName(Some(s.Position(start, end)), sym, true) =>\n+      //      case s.SymbolOccurrence(_, sym, _) if isLocalSymbol(sym) => // Do nothing, local symbol.\n+      case SymbolOccurrence(Some(r), sym, SymbolOccurrence.Role.DEFINITION) =>\n         symbolIndexer.addDefinition(\n           sym,\n-          i.Position(document.filename, Some(input.toIndexRange(start, end)))\n+          i.Position(document.uri, Some(input.toIndexRange(r)))\n         )\n-      case s.ResolvedName(Some(s.Position(start, end)), sym, false) =>\n+      case SymbolOccurrence(Some(r), sym, SymbolOccurrence.Role.REFERENCE) =>\n         symbolIndexer.addReference(\n-          document.filename,\n-          input.toIndexRange(start, end),\n+          document.uri,\n+          input.toIndexRange(r),\n           sym\n         )\n       case _ =>\n     }\n     document.symbols.foreach {\n-      case s.ResolvedSymbol(sym, Some(denot)) =>\n+      case denot: semanticdb3.SymbolInformation =>"
  }
]