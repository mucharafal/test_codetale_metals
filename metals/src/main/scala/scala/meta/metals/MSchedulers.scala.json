[
  {
    "id" : "df2c9ff2-b5ef-468f-bf92-ddee1ff70a66",
    "prId" : 319,
    "comments" : [
      {
        "id" : "3b9d53aa-4a50-4c75-93d6-fe0bd84fa432",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Does 3 make sense? This is copy-pasted from sbt's",
        "createdAt" : "2018-06-27T13:23:20Z",
        "updatedAt" : "2018-06-27T13:26:49Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "76cc78d524784aaaff455781986d66040a0ca3fc",
    "line" : 23,
    "diffHunk" : "@@ -10,14 +10,22 @@ import monix.execution.schedulers.SchedulerService\n  * @param global The default scheduler when you are unsure which one to use.\n  * @param lsp to communicate with LSP editor client.\n  * @param sbt to communicate with sbt server.\n+ * @param bsp to communicate with bsp server.\n  */\n-case class MSchedulers(global: Scheduler, lsp: Scheduler, sbt: Scheduler)\n+case class MSchedulers(\n+    global: Scheduler,\n+    lsp: Scheduler,\n+    sbt: Scheduler,\n+    bsp: Scheduler\n+)\n object MSchedulers {\n-  def apply(): MSchedulers = new MSchedulers(main, lsp, sbt)\n+  def apply(): MSchedulers = new MSchedulers(main, lsp, sbt, bsp)\n   lazy val main: SchedulerService =\n     Scheduler(Executors.newFixedThreadPool(4))\n   lazy val lsp: SchedulerService =\n     Scheduler(Executors.newFixedThreadPool(1))\n   lazy val sbt: SchedulerService =\n     Scheduler(Executors.newFixedThreadPool(3))\n+  lazy val bsp: SchedulerService =\n+    Scheduler(Executors.newFixedThreadPool(3))"
  }
]