[
  {
    "id" : "3a259e17-81dc-4f2c-95ba-23a8b62c5fd8",
    "prId" : 196,
    "comments" : [
      {
        "id" : "e05e6425-9697-4134-8dfe-4adffb1ce127",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "PSA: remove that `metaserver` cache directory y'all 😄 ",
        "createdAt" : "2018-02-12T20:15:55Z",
        "updatedAt" : "2018-02-13T09:34:28Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "71b2c0246d19b6de4f086cbf655f0def15283b13",
    "line" : 91,
    "diffHunk" : "@@ -500,10 +500,10 @@ class ScalametaServices(\n   }\n }\n \n-object ScalametaServices extends LazyLogging {\n+object MetalsServices extends LazyLogging {\n   lazy val cacheDirectory: AbsolutePath = {\n     val path = AbsolutePath(\n-      ProjectDirectories.fromProjectName(\"metaserver\").projectCacheDir"
  },
  {
    "id" : "53df17ed-c431-40cd-b806-e8b1541996d8",
    "prId" : 204,
    "comments" : [
      {
        "id" : "ae96a958-28de-4531-b91c-f30e5192a885",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "We can move this guard here https://github.com/scalameta/metals/blob/7a470362edfce8977c7fdab28b08be37a5b8a345/metals/src/main/scala/scala/meta/metals/ScalametaServices.scala#L93\r\n\r\nIf`scalac.enabled=false` we should not produce `interactiveSemanticdbs` in the first place. ",
        "createdAt" : "2018-03-21T17:45:03Z",
        "updatedAt" : "2018-03-26T21:54:32Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "15398a10a92978b2096e501f8c36977849adc782",
    "line" : null,
    "diffHunk" : "@@ -121,7 +121,13 @@ class MetalsServices(\n       }\n     }\n   val scalacErrors: Observable[Effects.PublishScalacDiagnostics] =\n-    metaSemanticdbs.map(scalacErrorReporter.reportErrors)\n+    metaSemanticdbs.map { db =>"
  },
  {
    "id" : "53b876ee-ea53-4426-90f0-c0d3d2a7e01c",
    "prId" : 204,
    "comments" : [
      {
        "id" : "07801eac-4c07-4346-b0e1-9530759d31e6",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "What do you think about adding a `scalac.completions.enabled = true`?\r\nhttps://github.com/scalameta/metals/blob/7a470362edfce8977c7fdab28b08be37a5b8a345/metals/src/main/scala/scala/meta/metals/Configuration.scala#L31\r\n\r\nI would be tempted to use the PC for completions but not diagnostics. I can live with spurious completions but not spurious squiggles.",
        "createdAt" : "2018-03-21T17:46:26Z",
        "updatedAt" : "2018-03-26T21:54:32Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "15398a10a92978b2096e501f8c36977849adc782",
    "line" : null,
    "diffHunk" : "@@ -218,16 +224,18 @@ class MetalsServices(\n       sys.exit(code)\n     }\n     .requestAsync(td.completion) { params =>\n-      withPC {\n-        scalacProvider.getCompiler(params.textDocument) match {\n-          case Some(g) =>\n-            CompletionProvider.completions(\n-              g,\n-              toCursor(params.textDocument, params.position)\n-            )\n-          case None => CompletionProvider.empty\n+      if (latestConfig().scalac.enabled) {"
  },
  {
    "id" : "ff7a2618-29f8-457b-894d-dd4781264211",
    "prId" : 204,
    "comments" : [
      {
        "id" : "91fb792f-12de-446c-b3a0-ddbdb4959590",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Have you tried to dynamically unregister capabilities? I think it makes sense to keep this guard regardless because I'm not sure if we can rely on it in case a client like vim/sublime to respect dynamic capabilities. Just curious to see if it works.",
        "createdAt" : "2018-03-21T18:07:10Z",
        "updatedAt" : "2018-03-26T21:54:32Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3fe990d8-a7e5-4cdf-829e-2ef9fefcea1e",
        "parentId" : "91fb792f-12de-446c-b3a0-ddbdb4959590",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Sorry, didn't get what you're saying here. Do you really mean dynamically unregister capabilities or you mean just enable/disable this setting in the config?",
        "createdAt" : "2018-03-25T00:01:32Z",
        "updatedAt" : "2018-03-26T21:54:32Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "02e8df7e-14ac-49d5-a485-65cd6251b489",
        "parentId" : "91fb792f-12de-446c-b3a0-ddbdb4959590",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I was thinking of using `client/unregisterCapability` https://microsoft.github.io/language-server-protocol/specification#client_unregisterCapability\r\n\r\nI think it's best to do it like here in the PR because dynamic capabilities may not be supported by all clients, but I was just wondering if you had tried to used `unregisterCapabilities`",
        "createdAt" : "2018-03-26T13:49:10Z",
        "updatedAt" : "2018-03-26T21:54:32Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "dcb65dfb-d2c2-4e38-a343-368dd06e5670",
        "parentId" : "91fb792f-12de-446c-b3a0-ddbdb4959590",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Ah, now I understand: when some feature gets enabled/disabled in the config, we should register/unregister the corresponding capability. \r\n\r\nI agree that it's correct, but we don't register capabilities dynamically yet and you're right that it's not widely supported (Atom doesn't support it, for instance), so I'd suggest we address it later, probably after #163.",
        "createdAt" : "2018-03-26T22:01:04Z",
        "updatedAt" : "2018-03-26T22:01:04Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3081cb46-ddab-4306-97c2-2377db9940a5",
        "parentId" : "91fb792f-12de-446c-b3a0-ddbdb4959590",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I agree this should be explored later, esp. if it's not even supported by atom 👍 ",
        "createdAt" : "2018-03-27T17:27:55Z",
        "updatedAt" : "2018-03-27T17:28:32Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "15398a10a92978b2096e501f8c36977849adc782",
    "line" : 92,
    "diffHunk" : "@@ -305,11 +313,13 @@ class MetalsServices(\n       ()\n     }\n     .request(td.documentHighlight) { params =>\n-      DocumentHighlightProvider.highlight(\n-        symbolIndex,\n-        Uri(params.textDocument.uri),\n-        params.position\n-      )\n+      if (latestConfig().highlight.enabled) {"
  },
  {
    "id" : "422dfff3-efec-4e60-a82b-39efaf4347fa",
    "prId" : 204,
    "comments" : [
      {
        "id" : "a15bc4d2-9bd2-40c1-b1c8-1b9f2ec2ab5c",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I would move this condition into the `flatMap` so that we can respond to dynamic updates on the configuration. I think otherwise `val interactiveSemanticdbs` will always be `Observable.empty`",
        "createdAt" : "2018-03-26T13:46:30Z",
        "updatedAt" : "2018-03-26T21:54:32Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7211be2b-7b99-405f-b081-cb8ad3040ab0",
        "parentId" : "a15bc4d2-9bd2-40c1-b1c8-1b9f2ec2ab5c",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Good point!",
        "createdAt" : "2018-03-26T18:52:43Z",
        "updatedAt" : "2018-03-26T21:54:32Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "22244d32-8f04-4585-975b-4d7a9417a1d4",
        "parentId" : "a15bc4d2-9bd2-40c1-b1c8-1b9f2ec2ab5c",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Done in 15398a1",
        "createdAt" : "2018-03-26T21:54:57Z",
        "updatedAt" : "2018-03-26T21:54:58Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "15398a10a92978b2096e501f8c36977849adc782",
    "line" : null,
    "diffHunk" : "@@ -87,13 +89,16 @@ class MetalsServices(\n     new SquiggliesProvider(configurationPublisher, cwd)\n   val scalacProvider = new ScalacProvider\n   val interactiveSemanticdbs: Observable[semanticdb.Database] =\n-    sourceChangePublisher\n-      .debounce(FiniteDuration(1, \"s\"))\n-      .flatMap { input =>\n-        Observable\n-          .fromIterable(Semanticdbs.toSemanticdb(input, scalacProvider))\n-          .executeOn(presentationCompilerScheduler)\n-      }\n+    if (latestConfig().scalac.completions.enabled ||"
  }
]