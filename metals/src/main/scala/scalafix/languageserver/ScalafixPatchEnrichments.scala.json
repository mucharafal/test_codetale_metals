[
  {
    "id" : "2b26bc8f-34aa-4269-9686-153f21a7fcf2",
    "prId" : 275,
    "comments" : [
      {
        "id" : "f4fdcee4-448e-4250-80a8-c58086244402",
        "parentId" : null,
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "How about a ticket for this instead of a todo?",
        "createdAt" : "2018-04-21T01:31:34Z",
        "updatedAt" : "2018-05-06T12:40:25Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "42765d7effb4a73998347fa6fb448b3c5e13c5ab",
    "line" : null,
    "diffHunk" : "@@ -51,56 +37,9 @@ object ScalafixPatchEnrichments {\n         .toList\n     }\n   }\n-  private def tokenPatches(\n-      patch: Patch\n-  )(implicit ctx: RuleCtx, index: SemanticdbIndex): Iterable[TokenPatch] = {\n-    val base = underlying(patch)\n-    val moveSymbol = underlying(\n-      ReplaceSymbolOps.naiveMoveSymbolPatch(base.collect {\n-        case m: ReplaceSymbol => m\n-      })\n-    )\n-    val patches = base.filterNot(_.isInstanceOf[ReplaceSymbol]) ++ moveSymbol\n-    val tokenPatches = patches.collect { case e: TokenPatch => e }\n-    val importPatches = patches.collect { case e: ImportPatch => e }\n-    val importTokenPatches = {\n-      val result = ImportPatchOps.superNaiveImportPatchToTokenPatchConverter(\n-        ctx,\n-        importPatches\n-      )\n-      underlying(result.asPatch)\n-        .collect {\n-          case x: TokenPatch => x\n-          case els =>\n-            throw Failure.InvariantFailedException(\n-              s\"Expected TokenPatch, got $els\"\n-            )\n-        }\n-    }\n-    importTokenPatches ++ tokenPatches\n-  }\n-  private def underlying(patch: Patch): Seq[Patch] = {\n-    val builder = Seq.newBuilder[Patch]\n-    foreach(patch) {\n-      case _: LintPatch =>\n-      case els =>\n-        builder += els\n-    }\n-    builder.result()\n-  }\n-  private def foreach(patch: Patch)(f: Patch => Unit): Unit = {\n-    def loop(patch: Patch): Unit = patch match {\n-      case Concat(a, b) =>\n-        loop(a)\n-        loop(b)\n-      case EmptyPatch => // do nothing\n-      case els =>\n-        f(els)\n-    }\n-    loop(patch)\n-  }\n \n   import scalafix.patch.TokenPatch._\n+  // TODO(olafur): make this method public in scalafix API"
  }
]