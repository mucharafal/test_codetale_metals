[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`normalizer`\n",
    "commit": "cd47f4b2fb770a8d9a43fc321cec73b72ac886a4",
    "createdAt": "2015-05-22T00:57:15Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature;\n+\n+import java.util.List;\n+\n+import com.google.common.collect.Lists;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.SQLContext;\n+\n+public class JavaNormalizerSuite {\n+  private transient JavaSparkContext jsc;\n+  private transient SQLContext jsql;\n+\n+  @Before\n+  public void setUp() {\n+    jsc = new JavaSparkContext(\"local\", \"JavaNormalizerSuite\");\n+    jsql = new SQLContext(jsc);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    jsc.stop();\n+    jsc = null;\n+  }\n+\n+  @Test\n+  public void regexTokenizer() {"
  }],
  "prId": 6127
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Call `count()` to trigger the job.\n",
    "commit": "cd47f4b2fb770a8d9a43fc321cec73b72ac886a4",
    "createdAt": "2015-05-22T00:57:17Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature;\n+\n+import java.util.List;\n+\n+import com.google.common.collect.Lists;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.SQLContext;\n+\n+public class JavaNormalizerSuite {\n+  private transient JavaSparkContext jsc;\n+  private transient SQLContext jsql;\n+\n+  @Before\n+  public void setUp() {\n+    jsc = new JavaSparkContext(\"local\", \"JavaNormalizerSuite\");\n+    jsql = new SQLContext(jsc);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    jsc.stop();\n+    jsc = null;\n+  }\n+\n+  @Test\n+  public void regexTokenizer() {\n+    // The tests are to check Java compatibility.\n+    List<VectorIndexerSuite.FeatureData> points = Lists.newArrayList(\n+      new VectorIndexerSuite.FeatureData(Vectors.dense(0.0, -2.0)),\n+      new VectorIndexerSuite.FeatureData(Vectors.dense(1.0, 3.0)),\n+      new VectorIndexerSuite.FeatureData(Vectors.dense(1.0, 4.0))\n+    );\n+    DataFrame dataFrame = jsql.createDataFrame(jsc.parallelize(points, 2),\n+      VectorIndexerSuite.FeatureData.class);\n+    Normalizer normalizer = new Normalizer()\n+      .setInputCol(\"features\")\n+      .setOutputCol(\"normFeatures\");\n+\n+    // Normalize each Vector using $L^2$ norm.\n+    DataFrame l2NormData = normalizer.transform(dataFrame, normalizer.p().w(2));",
    "line": 63
  }],
  "prId": 6127
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "ditto\n",
    "commit": "cd47f4b2fb770a8d9a43fc321cec73b72ac886a4",
    "createdAt": "2015-05-22T00:57:18Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature;\n+\n+import java.util.List;\n+\n+import com.google.common.collect.Lists;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.SQLContext;\n+\n+public class JavaNormalizerSuite {\n+  private transient JavaSparkContext jsc;\n+  private transient SQLContext jsql;\n+\n+  @Before\n+  public void setUp() {\n+    jsc = new JavaSparkContext(\"local\", \"JavaNormalizerSuite\");\n+    jsql = new SQLContext(jsc);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    jsc.stop();\n+    jsc = null;\n+  }\n+\n+  @Test\n+  public void regexTokenizer() {\n+    // The tests are to check Java compatibility.\n+    List<VectorIndexerSuite.FeatureData> points = Lists.newArrayList(\n+      new VectorIndexerSuite.FeatureData(Vectors.dense(0.0, -2.0)),\n+      new VectorIndexerSuite.FeatureData(Vectors.dense(1.0, 3.0)),\n+      new VectorIndexerSuite.FeatureData(Vectors.dense(1.0, 4.0))\n+    );\n+    DataFrame dataFrame = jsql.createDataFrame(jsc.parallelize(points, 2),\n+      VectorIndexerSuite.FeatureData.class);\n+    Normalizer normalizer = new Normalizer()\n+      .setInputCol(\"features\")\n+      .setOutputCol(\"normFeatures\");\n+\n+    // Normalize each Vector using $L^2$ norm.\n+    DataFrame l2NormData = normalizer.transform(dataFrame, normalizer.p().w(2));\n+\n+    // Normalize each Vector using $L^\\infty$ norm.\n+    DataFrame lInfNormData =\n+      normalizer.transform(dataFrame, normalizer.p().w(Double.POSITIVE_INFINITY));"
  }],
  "prId": 6127
}]