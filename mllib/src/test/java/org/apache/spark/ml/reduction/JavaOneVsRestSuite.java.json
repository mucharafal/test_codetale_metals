[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Use `Assert.assertEquals` in Java.  (We haven't been consistent about this, but I'm told it's better.)\n",
    "commit": "5f4b495e41324ca423aaea1b4cce3c782e13147c",
    "createdAt": "2015-05-11T23:19:16Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.reduction;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static scala.collection.JavaConversions.seqAsJavaList;\n+\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.ml.classification.LogisticRegression;\n+import static org.apache.spark.mllib.classification.LogisticRegressionSuite.generateMultinomialLogisticInput;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.SQLContext;\n+\n+public class JavaOneVsRestSuite implements Serializable {\n+\n+    private transient JavaSparkContext jsc;\n+    private transient SQLContext jsql;\n+    private transient DataFrame dataset;\n+    private transient JavaRDD<LabeledPoint> datasetRDD;\n+\n+    @Before\n+    public void setUp() {\n+        jsc = new JavaSparkContext(\"local\", \"JavaLOneVsRestSuite\");\n+        jsql = new SQLContext(jsc);\n+        int nPoints = 3;\n+\n+        /**\n+         * The following weights and xMean/xVariance are computed from iris dataset with lambda = 0.2.\n+         * As a result, we are actually drawing samples from probability distribution of built model.\n+         */\n+        double[] weights = {\n+                -0.57997, 0.912083, -0.371077, -0.819866, 2.688191,\n+                -0.16624, -0.84355, -0.048509, -0.301789, 4.170682 };\n+\n+        double[] xMean = {5.843, 3.057, 3.758, 1.199};\n+        double[] xVariance = {0.6856, 0.1899, 3.116, 0.581};\n+        List<LabeledPoint> points = seqAsJavaList(generateMultinomialLogisticInput(\n+                weights, xMean, xVariance, true, nPoints, 42));\n+        datasetRDD = jsc.parallelize(points, 2);\n+        dataset = jsql.createDataFrame(datasetRDD, LabeledPoint.class);\n+        dataset.registerTempTable(\"dataset\");\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        jsc.stop();\n+        jsc = null;\n+    }\n+\n+    @Test\n+    public void oneVsRestDefaultParams() {\n+        OneVsRest ova = new OneVsRest();\n+        ova.setClassifier(new LogisticRegression());\n+        assert(ova.getLabelCol() == \"label\");"
  }],
  "prId": 5830
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Why use a temp table instead of just using the DataFrame API?\n",
    "commit": "5f4b495e41324ca423aaea1b4cce3c782e13147c",
    "createdAt": "2015-05-11T23:19:17Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.reduction;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static scala.collection.JavaConversions.seqAsJavaList;\n+\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.ml.classification.LogisticRegression;\n+import static org.apache.spark.mllib.classification.LogisticRegressionSuite.generateMultinomialLogisticInput;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.SQLContext;\n+\n+public class JavaOneVsRestSuite implements Serializable {\n+\n+    private transient JavaSparkContext jsc;\n+    private transient SQLContext jsql;\n+    private transient DataFrame dataset;\n+    private transient JavaRDD<LabeledPoint> datasetRDD;\n+\n+    @Before\n+    public void setUp() {\n+        jsc = new JavaSparkContext(\"local\", \"JavaLOneVsRestSuite\");\n+        jsql = new SQLContext(jsc);\n+        int nPoints = 3;\n+\n+        /**\n+         * The following weights and xMean/xVariance are computed from iris dataset with lambda = 0.2.\n+         * As a result, we are actually drawing samples from probability distribution of built model.\n+         */\n+        double[] weights = {\n+                -0.57997, 0.912083, -0.371077, -0.819866, 2.688191,\n+                -0.16624, -0.84355, -0.048509, -0.301789, 4.170682 };\n+\n+        double[] xMean = {5.843, 3.057, 3.758, 1.199};\n+        double[] xVariance = {0.6856, 0.1899, 3.116, 0.581};\n+        List<LabeledPoint> points = seqAsJavaList(generateMultinomialLogisticInput(\n+                weights, xMean, xVariance, true, nPoints, 42));\n+        datasetRDD = jsc.parallelize(points, 2);\n+        dataset = jsql.createDataFrame(datasetRDD, LabeledPoint.class);\n+        dataset.registerTempTable(\"dataset\");\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        jsc.stop();\n+        jsc = null;\n+    }\n+\n+    @Test\n+    public void oneVsRestDefaultParams() {\n+        OneVsRest ova = new OneVsRest();\n+        ova.setClassifier(new LogisticRegression());\n+        assert(ova.getLabelCol() == \"label\");\n+        assert(ova.getPredictionCol() == \"prediction\");\n+        OneVsRestModel ovaModel = ova.fit(dataset);\n+        ovaModel.transform(dataset).registerTempTable(\"prediction\");"
  }],
  "prId": 5830
}]