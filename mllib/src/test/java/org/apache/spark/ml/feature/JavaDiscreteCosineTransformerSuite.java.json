[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "newline between this & previous import\n",
    "commit": "433dbc72943ea64fe295c8dfc0a343bbbf815696",
    "createdAt": "2015-06-24T21:29:59Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature;\n+\n+import com.google.common.collect.Lists;\n+import edu.emory.mathcs.jtransforms.dct.DoubleDCT_1D;\n+import org.apache.spark.api.java.JavaRDD;"
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK.\n",
    "commit": "433dbc72943ea64fe295c8dfc0a343bbbf815696",
    "createdAt": "2015-06-24T22:50:12Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature;\n+\n+import com.google.common.collect.Lists;\n+import edu.emory.mathcs.jtransforms.dct.DoubleDCT_1D;\n+import org.apache.spark.api.java.JavaRDD;"
  }],
  "prId": 6894
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "put these imports before Spark ones\n",
    "commit": "433dbc72943ea64fe295c8dfc0a343bbbf815696",
    "createdAt": "2015-06-24T21:30:01Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature;\n+\n+import com.google.common.collect.Lists;\n+import edu.emory.mathcs.jtransforms.dct.DoubleDCT_1D;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.VectorUDT;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.RowFactory;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.types.Metadata;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+import org.junit.After;"
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK.\n",
    "commit": "433dbc72943ea64fe295c8dfc0a343bbbf815696",
    "createdAt": "2015-06-24T22:50:16Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature;\n+\n+import com.google.common.collect.Lists;\n+import edu.emory.mathcs.jtransforms.dct.DoubleDCT_1D;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.VectorUDT;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.RowFactory;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.types.Metadata;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+import org.junit.After;"
  }],
  "prId": 6894
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "space before \"=\"\n",
    "commit": "433dbc72943ea64fe295c8dfc0a343bbbf815696",
    "createdAt": "2015-06-24T21:30:02Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature;\n+\n+import com.google.common.collect.Lists;\n+import edu.emory.mathcs.jtransforms.dct.DoubleDCT_1D;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.VectorUDT;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.RowFactory;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.types.Metadata;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class JavaDiscreteCosineTransformerSuite {\n+  private transient JavaSparkContext jsc;\n+  private transient SQLContext jsql;\n+\n+  @Before\n+  public void setUp() {\n+    jsc = new JavaSparkContext(\"local\", \"JavaDiscreteCosineTransformerSuite\");\n+    jsql = new SQLContext(jsc);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    jsc.stop();\n+    jsc = null;\n+  }\n+\n+  @Test\n+  public void javaCompatibilityTest() {\n+    double[] input = new double[] {1D, 2D, 3D, 4D};\n+    JavaRDD<Row> data = jsc.parallelize(Lists.newArrayList(\n+      RowFactory.create(Vectors.dense(input))\n+    ));\n+    DataFrame dataset = jsql.createDataFrame(data, new StructType(new StructField[]{\n+      new StructField(\"vec\", (new VectorUDT()), false, Metadata.empty())\n+    }));\n+\n+    double[] expectedResult= input.clone();"
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK.\n",
    "commit": "433dbc72943ea64fe295c8dfc0a343bbbf815696",
    "createdAt": "2015-06-24T22:50:21Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature;\n+\n+import com.google.common.collect.Lists;\n+import edu.emory.mathcs.jtransforms.dct.DoubleDCT_1D;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.VectorUDT;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.RowFactory;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.types.Metadata;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class JavaDiscreteCosineTransformerSuite {\n+  private transient JavaSparkContext jsc;\n+  private transient SQLContext jsql;\n+\n+  @Before\n+  public void setUp() {\n+    jsc = new JavaSparkContext(\"local\", \"JavaDiscreteCosineTransformerSuite\");\n+    jsql = new SQLContext(jsc);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    jsc.stop();\n+    jsc = null;\n+  }\n+\n+  @Test\n+  public void javaCompatibilityTest() {\n+    double[] input = new double[] {1D, 2D, 3D, 4D};\n+    JavaRDD<Row> data = jsc.parallelize(Lists.newArrayList(\n+      RowFactory.create(Vectors.dense(input))\n+    ));\n+    DataFrame dataset = jsql.createDataFrame(data, new StructType(new StructField[]{\n+      new StructField(\"vec\", (new VectorUDT()), false, Metadata.empty())\n+    }));\n+\n+    double[] expectedResult= input.clone();"
  }],
  "prId": 6894
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "This is fine for the Java unit test.  In general, it's OK to simply exercise the API for Java unit tests without checking correctness (which can be checked in the Scala unit test).\n",
    "commit": "433dbc72943ea64fe295c8dfc0a343bbbf815696",
    "createdAt": "2015-06-24T21:30:04Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature;\n+\n+import com.google.common.collect.Lists;\n+import edu.emory.mathcs.jtransforms.dct.DoubleDCT_1D;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.VectorUDT;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.RowFactory;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.types.Metadata;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class JavaDiscreteCosineTransformerSuite {\n+  private transient JavaSparkContext jsc;\n+  private transient SQLContext jsql;\n+\n+  @Before\n+  public void setUp() {\n+    jsc = new JavaSparkContext(\"local\", \"JavaDiscreteCosineTransformerSuite\");\n+    jsql = new SQLContext(jsc);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    jsc.stop();\n+    jsc = null;\n+  }\n+\n+  @Test\n+  public void javaCompatibilityTest() {\n+    double[] input = new double[] {1D, 2D, 3D, 4D};\n+    JavaRDD<Row> data = jsc.parallelize(Lists.newArrayList(\n+      RowFactory.create(Vectors.dense(input))\n+    ));\n+    DataFrame dataset = jsql.createDataFrame(data, new StructType(new StructField[]{\n+      new StructField(\"vec\", (new VectorUDT()), false, Metadata.empty())\n+    }));\n+\n+    double[] expectedResult= input.clone();\n+    (new DoubleDCT_1D(input.length)).forward(expectedResult, true);\n+\n+    DiscreteCosineTransformer DCT = new DiscreteCosineTransformer()\n+      .setInputCol(\"vec\")\n+      .setOutputCol(\"resultVec\");\n+\n+    Row[] result = DCT.transform(dataset).select(\"resultVec\").collect();\n+    Vector resultVec = result[0].getAs(\"resultVec\");\n+\n+    Assert.assertArrayEquals(expectedResult, resultVec.toArray(), 1e-6);",
    "line": 76
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "Noted for future. Will leave in unless you want me to remove.\n",
    "commit": "433dbc72943ea64fe295c8dfc0a343bbbf815696",
    "createdAt": "2015-06-24T22:50:33Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature;\n+\n+import com.google.common.collect.Lists;\n+import edu.emory.mathcs.jtransforms.dct.DoubleDCT_1D;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.VectorUDT;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.RowFactory;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.types.Metadata;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class JavaDiscreteCosineTransformerSuite {\n+  private transient JavaSparkContext jsc;\n+  private transient SQLContext jsql;\n+\n+  @Before\n+  public void setUp() {\n+    jsc = new JavaSparkContext(\"local\", \"JavaDiscreteCosineTransformerSuite\");\n+    jsql = new SQLContext(jsc);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    jsc.stop();\n+    jsc = null;\n+  }\n+\n+  @Test\n+  public void javaCompatibilityTest() {\n+    double[] input = new double[] {1D, 2D, 3D, 4D};\n+    JavaRDD<Row> data = jsc.parallelize(Lists.newArrayList(\n+      RowFactory.create(Vectors.dense(input))\n+    ));\n+    DataFrame dataset = jsql.createDataFrame(data, new StructType(new StructField[]{\n+      new StructField(\"vec\", (new VectorUDT()), false, Metadata.empty())\n+    }));\n+\n+    double[] expectedResult= input.clone();\n+    (new DoubleDCT_1D(input.length)).forward(expectedResult, true);\n+\n+    DiscreteCosineTransformer DCT = new DiscreteCosineTransformer()\n+      .setInputCol(\"vec\")\n+      .setOutputCol(\"resultVec\");\n+\n+    Row[] result = DCT.transform(dataset).select(\"resultVec\").collect();\n+    Vector resultVec = result[0].getAs(\"resultVec\");\n+\n+    Assert.assertArrayEquals(expectedResult, resultVec.toArray(), 1e-6);",
    "line": 76
  }],
  "prId": 6894
}]