[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "No need to use this many points.  How about 50?\n",
    "commit": "be752de88b45a43da8609517796b00633f943e79",
    "createdAt": "2015-06-23T20:21:17Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.clustering;\n+\n+import java.io.Serializable;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.SQLContext;\n+\n+public class JavaKMeansSuite implements Serializable {\n+\n+  private transient int k = 5;\n+  private transient JavaSparkContext sc;\n+  private transient DataFrame dataset;\n+  private transient SQLContext sql;\n+\n+  @Before\n+  public void setUp() {\n+    sc = new JavaSparkContext(\"local\", \"JavaKMeansSuite\");\n+    sql = new SQLContext(sc);\n+\n+    dataset = KMeansSuite.generateKMeansData(sql, 1000, 3, k);"
  }],
  "prId": 6756
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Check using `contains` so that you do not depend on the order.  (Also, we might add other output columns in the future.)\n",
    "commit": "be752de88b45a43da8609517796b00633f943e79",
    "createdAt": "2015-07-07T22:01:23Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.clustering;\n+\n+import java.io.Serializable;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.SQLContext;\n+\n+public class JavaKMeansSuite implements Serializable {\n+\n+  private transient int k = 5;\n+  private transient JavaSparkContext sc;\n+  private transient DataFrame dataset;\n+  private transient SQLContext sql;\n+\n+  @Before\n+  public void setUp() {\n+    sc = new JavaSparkContext(\"local\", \"JavaKMeansSuite\");\n+    sql = new SQLContext(sc);\n+\n+    dataset = KMeansSuite.generateKMeansData(sql, 50, 3, k);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    sc.stop();\n+    sc = null;\n+  }\n+\n+  @Test\n+  public void fitAndTransform() {\n+    KMeans kmeans = new KMeans().setK(k).setSeed(1);\n+    KMeansModel model = kmeans.fit(dataset);\n+\n+    Vector[] centers = model.clusterCenters();\n+    assertEquals(k, centers.length);\n+\n+    DataFrame transformed = model.transform(dataset);\n+    assertArrayEquals(new String[]{\"features\", \"prediction\"}, transformed.columns());"
  }],
  "prId": 6756
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "This should be switched: We want to make sure expectedColumns is a subset of transformed.columns, but it is currently doing the opposite (superset).\n",
    "commit": "be752de88b45a43da8609517796b00633f943e79",
    "createdAt": "2015-07-17T05:12:56Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.clustering;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.SQLContext;\n+\n+public class JavaKMeansSuite implements Serializable {\n+\n+  private transient int k = 5;\n+  private transient JavaSparkContext sc;\n+  private transient DataFrame dataset;\n+  private transient SQLContext sql;\n+\n+  @Before\n+  public void setUp() {\n+    sc = new JavaSparkContext(\"local\", \"JavaKMeansSuite\");\n+    sql = new SQLContext(sc);\n+\n+    dataset = KMeansSuite.generateKMeansData(sql, 50, 3, k);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    sc.stop();\n+    sc = null;\n+  }\n+\n+  @Test\n+  public void fitAndTransform() {\n+    KMeans kmeans = new KMeans().setK(k).setSeed(1);\n+    KMeansModel model = kmeans.fit(dataset);\n+\n+    Vector[] centers = model.clusterCenters();\n+    assertEquals(k, centers.length);\n+\n+    DataFrame transformed = model.transform(dataset);\n+    List<String> expectedColumns = Arrays.asList(\"features\", \"prediction\");\n+    for (String clm: transformed.columns()) {"
  }],
  "prId": 6756
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Need to assertTrue\n",
    "commit": "be752de88b45a43da8609517796b00633f943e79",
    "createdAt": "2015-07-17T21:05:38Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.clustering;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.SQLContext;\n+\n+public class JavaKMeansSuite implements Serializable {\n+\n+  private transient int k = 5;\n+  private transient JavaSparkContext sc;\n+  private transient DataFrame dataset;\n+  private transient SQLContext sql;\n+\n+  @Before\n+  public void setUp() {\n+    sc = new JavaSparkContext(\"local\", \"JavaKMeansSuite\");\n+    sql = new SQLContext(sc);\n+\n+    dataset = KMeansSuite.generateKMeansData(sql, 50, 3, k);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    sc.stop();\n+    sc = null;\n+  }\n+\n+  @Test\n+  public void fitAndTransform() {\n+    KMeans kmeans = new KMeans().setK(k).setSeed(1);\n+    KMeansModel model = kmeans.fit(dataset);\n+\n+    Vector[] centers = model.clusterCenters();\n+    assertEquals(k, centers.length);\n+\n+    DataFrame transformed = model.transform(dataset);\n+    List<String> columns = Arrays.asList(transformed.columns());\n+    List<String> expectedColumns = Arrays.asList(\"features\", \"prediction\");\n+    for (String column: expectedColumns) {\n+      columns.contains(column);"
  }],
  "prId": 6756
}]