[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "ditto. organize imports\n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-09-02T20:44:28Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+package org.apache.spark.ml.source;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Files;\n+import org.apache.spark.api.java.JavaSparkContext;"
  }],
  "prId": 8537
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "``` java\npath = Utils.createTempDir(System.getProperty(\"java.io.tmpdir\"), \"datasource\")\n  .getCanonicalFile();\n```\n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-09-02T20:47:27Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+package org.apache.spark.ml.source;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Files;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.util.Utils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+/**\n+ * Test LibSVMRelation in Java.\n+ */\n+public class JavaLibSVMRelationSuite {\n+  private transient JavaSparkContext jsc;\n+  private transient SQLContext jsql;\n+  private transient DataFrame dataset;\n+\n+  private File path;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    jsc = new JavaSparkContext(\"local\", \"JavaLibSVMRelationSuite\");\n+    jsql = new SQLContext(jsc);\n+\n+    path = Utils.createTempDir(System.getProperty(\"java.io.tmpdir\"),\n+      \"datasource\").getCanonicalFile();"
  }],
  "prId": 8537
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "use `assertEquals`\n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-09-02T20:51:53Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+package org.apache.spark.ml.source;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Files;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.util.Utils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+/**\n+ * Test LibSVMRelation in Java.\n+ */\n+public class JavaLibSVMRelationSuite {\n+  private transient JavaSparkContext jsc;\n+  private transient SQLContext jsql;\n+  private transient DataFrame dataset;\n+\n+  private File path;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    jsc = new JavaSparkContext(\"local\", \"JavaLibSVMRelationSuite\");\n+    jsql = new SQLContext(jsc);\n+\n+    path = Utils.createTempDir(System.getProperty(\"java.io.tmpdir\"),\n+      \"datasource\").getCanonicalFile();\n+    if (path.exists()) {\n+      path.delete();\n+    }\n+\n+    String s = \"1 1:1.0 3:2.0 5:3.0\\n0\\n0 2:4.0 4:5.0 6:6.0\";\n+    Files.write(s, path, Charsets.US_ASCII);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    jsc.stop();\n+    jsc = null;\n+  }\n+\n+  @Test\n+  public void verifyLibSvmDF() {\n+    dataset = jsql.read().format(\"libsvm\").load();\n+    Assert.assertEquals(dataset.columns()[0], \"label\");\n+    Assert.assertEquals(dataset.columns()[1], \"features\");\n+    Row r = dataset.first();\n+    Assert.assertTrue(r.getDouble(0) == 1.0);"
  }],
  "prId": 8537
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "In JUnit, `assertEquals` takes the expected value as the first arg. So it should be `\"label\", dataset.columns()[0]` here.\n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-09-02T20:52:49Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+package org.apache.spark.ml.source;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Files;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.util.Utils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+/**\n+ * Test LibSVMRelation in Java.\n+ */\n+public class JavaLibSVMRelationSuite {\n+  private transient JavaSparkContext jsc;\n+  private transient SQLContext jsql;\n+  private transient DataFrame dataset;\n+\n+  private File path;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    jsc = new JavaSparkContext(\"local\", \"JavaLibSVMRelationSuite\");\n+    jsql = new SQLContext(jsc);\n+\n+    path = Utils.createTempDir(System.getProperty(\"java.io.tmpdir\"),\n+      \"datasource\").getCanonicalFile();\n+    if (path.exists()) {\n+      path.delete();\n+    }\n+\n+    String s = \"1 1:1.0 3:2.0 5:3.0\\n0\\n0 2:4.0 4:5.0 6:6.0\";\n+    Files.write(s, path, Charsets.US_ASCII);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    jsc.stop();\n+    jsc = null;\n+  }\n+\n+  @Test\n+  public void verifyLibSvmDF() {\n+    dataset = jsql.read().format(\"libsvm\").load();\n+    Assert.assertEquals(dataset.columns()[0], \"label\");"
  }],
  "prId": 8537
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`LibSVM`  to be consistent.\n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-09-02T20:55:53Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+package org.apache.spark.ml.source;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Files;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.util.Utils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+/**\n+ * Test LibSVMRelation in Java.\n+ */\n+public class JavaLibSVMRelationSuite {\n+  private transient JavaSparkContext jsc;\n+  private transient SQLContext jsql;\n+  private transient DataFrame dataset;\n+\n+  private File path;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    jsc = new JavaSparkContext(\"local\", \"JavaLibSVMRelationSuite\");\n+    jsql = new SQLContext(jsc);\n+\n+    path = Utils.createTempDir(System.getProperty(\"java.io.tmpdir\"),\n+      \"datasource\").getCanonicalFile();\n+    if (path.exists()) {\n+      path.delete();\n+    }\n+\n+    String s = \"1 1:1.0 3:2.0 5:3.0\\n0\\n0 2:4.0 4:5.0 6:6.0\";\n+    Files.write(s, path, Charsets.US_ASCII);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    jsc.stop();\n+    jsc = null;\n+  }\n+\n+  @Test\n+  public void verifyLibSvmDF() {"
  }],
  "prId": 8537
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "organize imports: java, scala, 3rd-party, spark.\n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-09-04T15:56:10Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Files;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.util.Utils;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;"
  }],
  "prId": 8537
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "minor: calling `.getCanonicalFile` and checking `path.exists()` are not necessary\n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-09-04T15:56:12Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Files;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.util.Utils;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+/**\n+ * Test LibSVMRelation in Java.\n+ */\n+public class JavaLibSVMRelationSuite {\n+  private transient JavaSparkContext jsc;\n+  private transient SQLContext jsql;\n+  private transient DataFrame dataset;\n+\n+  private File path;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    jsc = new JavaSparkContext(\"local\", \"JavaLibSVMRelationSuite\");\n+    jsql = new SQLContext(jsc);\n+\n+    path = Utils.createTempDir(System.getProperty(\"java.io.tmpdir\"), \"datasource\")\n+      .getCanonicalFile();"
  }],
  "prId": 8537
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Add `option(\"vectorType\", \"dense\")`?\n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-09-04T15:56:14Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Files;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.util.Utils;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+/**\n+ * Test LibSVMRelation in Java.\n+ */\n+public class JavaLibSVMRelationSuite {\n+  private transient JavaSparkContext jsc;\n+  private transient SQLContext jsql;\n+  private transient DataFrame dataset;\n+\n+  private File path;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    jsc = new JavaSparkContext(\"local\", \"JavaLibSVMRelationSuite\");\n+    jsql = new SQLContext(jsc);\n+\n+    path = Utils.createTempDir(System.getProperty(\"java.io.tmpdir\"), \"datasource\")\n+      .getCanonicalFile();\n+    if (path.exists()) {\n+      path.delete();\n+    }\n+\n+    String s = \"1 1:1.0 3:2.0 5:3.0\\n0\\n0 2:4.0 4:5.0 6:6.0\";\n+    Files.write(s, path, Charsets.US_ASCII);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    jsc.stop();\n+    jsc = null;\n+    path.delete();\n+  }\n+\n+  @Test\n+  public void verifyLibSVMDF() {\n+    dataset = jsql.read().format(\"org.apache.spark.ml.source.libsvm\").load(path.getPath());"
  }],
  "prId": 8537
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "- `Double.valueOf(...)` is not necessary.\n- move `1.0` to the first position\n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-09-04T15:56:21Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Files;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.util.Utils;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+/**\n+ * Test LibSVMRelation in Java.\n+ */\n+public class JavaLibSVMRelationSuite {\n+  private transient JavaSparkContext jsc;\n+  private transient SQLContext jsql;\n+  private transient DataFrame dataset;\n+\n+  private File path;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    jsc = new JavaSparkContext(\"local\", \"JavaLibSVMRelationSuite\");\n+    jsql = new SQLContext(jsc);\n+\n+    path = Utils.createTempDir(System.getProperty(\"java.io.tmpdir\"), \"datasource\")\n+      .getCanonicalFile();\n+    if (path.exists()) {\n+      path.delete();\n+    }\n+\n+    String s = \"1 1:1.0 3:2.0 5:3.0\\n0\\n0 2:4.0 4:5.0 6:6.0\";\n+    Files.write(s, path, Charsets.US_ASCII);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    jsc.stop();\n+    jsc = null;\n+    path.delete();\n+  }\n+\n+  @Test\n+  public void verifyLibSVMDF() {\n+    dataset = jsql.read().format(\"org.apache.spark.ml.source.libsvm\").load(path.getPath());\n+    Assert.assertEquals(\"label\", dataset.columns()[0]);\n+    Assert.assertEquals(\"features\", dataset.columns()[1]);\n+    Row r = dataset.first();\n+    Assert.assertEquals(Double.valueOf(r.getDouble(0)), Double.valueOf(1.0));"
  }, {
    "author": {
      "login": "Lewuathe"
    },
    "body": "@mengxr In Junit, comparison primitive double values is deprecated. We can compare double values by wrapping `Double` class. \n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-09-06T14:30:32Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Files;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.util.Utils;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+/**\n+ * Test LibSVMRelation in Java.\n+ */\n+public class JavaLibSVMRelationSuite {\n+  private transient JavaSparkContext jsc;\n+  private transient SQLContext jsql;\n+  private transient DataFrame dataset;\n+\n+  private File path;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    jsc = new JavaSparkContext(\"local\", \"JavaLibSVMRelationSuite\");\n+    jsql = new SQLContext(jsc);\n+\n+    path = Utils.createTempDir(System.getProperty(\"java.io.tmpdir\"), \"datasource\")\n+      .getCanonicalFile();\n+    if (path.exists()) {\n+      path.delete();\n+    }\n+\n+    String s = \"1 1:1.0 3:2.0 5:3.0\\n0\\n0 2:4.0 4:5.0 6:6.0\";\n+    Files.write(s, path, Charsets.US_ASCII);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    jsc.stop();\n+    jsc = null;\n+    path.delete();\n+  }\n+\n+  @Test\n+  public void verifyLibSVMDF() {\n+    dataset = jsql.read().format(\"org.apache.spark.ml.source.libsvm\").load(path.getPath());\n+    Assert.assertEquals(\"label\", dataset.columns()[0]);\n+    Assert.assertEquals(\"features\", dataset.columns()[1]);\n+    Row r = dataset.first();\n+    Assert.assertEquals(Double.valueOf(r.getDouble(0)), Double.valueOf(1.0));"
  }],
  "prId": 8537
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "We need to check the class name first or cast it to `DenseVector` directly:\n\n``` java\nDenseVector v = r.getAs(1)\nAssert.assertEquals(Vectors.dense(...), v)\n```\n\nIf it is a sparse vector, the first line will throw an error.\n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-09-04T15:56:23Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Files;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.util.Utils;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+/**\n+ * Test LibSVMRelation in Java.\n+ */\n+public class JavaLibSVMRelationSuite {\n+  private transient JavaSparkContext jsc;\n+  private transient SQLContext jsql;\n+  private transient DataFrame dataset;\n+\n+  private File path;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    jsc = new JavaSparkContext(\"local\", \"JavaLibSVMRelationSuite\");\n+    jsql = new SQLContext(jsc);\n+\n+    path = Utils.createTempDir(System.getProperty(\"java.io.tmpdir\"), \"datasource\")\n+      .getCanonicalFile();\n+    if (path.exists()) {\n+      path.delete();\n+    }\n+\n+    String s = \"1 1:1.0 3:2.0 5:3.0\\n0\\n0 2:4.0 4:5.0 6:6.0\";\n+    Files.write(s, path, Charsets.US_ASCII);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    jsc.stop();\n+    jsc = null;\n+    path.delete();\n+  }\n+\n+  @Test\n+  public void verifyLibSVMDF() {\n+    dataset = jsql.read().format(\"org.apache.spark.ml.source.libsvm\").load(path.getPath());\n+    Assert.assertEquals(\"label\", dataset.columns()[0]);\n+    Assert.assertEquals(\"features\", dataset.columns()[1]);\n+    Row r = dataset.first();\n+    Assert.assertEquals(Double.valueOf(r.getDouble(0)), Double.valueOf(1.0));\n+    Assert.assertEquals(r.getAs(1), Vectors.dense(1.0, 0.0, 2.0, 0.0, 3.0, 0.0));"
  }],
  "prId": 8537
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "organize imports (com.google and org.junit should be in the same group). If you use Intellij, you can try this plugin: https://plugins.jetbrains.com/plugin/7350.\n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-09-08T15:34:24Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Files;\n+\n+import org.apache.spark.mllib.linalg.DenseVector;"
  }],
  "prId": 8537
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "The directory is already unique. We don't need another temp filename. `path = new File(tempDir.getPath, \"part-00000\");` should work.\n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-09-08T15:34:26Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Files;\n+\n+import org.apache.spark.mllib.linalg.DenseVector;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.util.Utils;\n+\n+\n+/**\n+ * Test LibSVMRelation in Java.\n+ */\n+public class JavaLibSVMRelationSuite {\n+  private transient JavaSparkContext jsc;\n+  private transient SQLContext jsql;\n+  private transient DataFrame dataset;\n+\n+  private File path;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    jsc = new JavaSparkContext(\"local\", \"JavaLibSVMRelationSuite\");\n+    jsql = new SQLContext(jsc);\n+\n+    File tmpDir = Utils.createTempDir(System.getProperty(\"java.io.tmpdir\"), \"datasource\");\n+    path = File.createTempFile(\"datasource\", \"libsvm-relation\", tmpDir);"
  }],
  "prId": 8537
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Should call `Utils.deleteRecursively` on `tmpDir`.\n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-09-08T15:34:29Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Files;\n+\n+import org.apache.spark.mllib.linalg.DenseVector;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.util.Utils;\n+\n+\n+/**\n+ * Test LibSVMRelation in Java.\n+ */\n+public class JavaLibSVMRelationSuite {\n+  private transient JavaSparkContext jsc;\n+  private transient SQLContext jsql;\n+  private transient DataFrame dataset;\n+\n+  private File path;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    jsc = new JavaSparkContext(\"local\", \"JavaLibSVMRelationSuite\");\n+    jsql = new SQLContext(jsc);\n+\n+    File tmpDir = Utils.createTempDir(System.getProperty(\"java.io.tmpdir\"), \"datasource\");\n+    path = File.createTempFile(\"datasource\", \"libsvm-relation\", tmpDir);\n+\n+    String s = \"1 1:1.0 3:2.0 5:3.0\\n0\\n0 2:4.0 4:5.0 6:6.0\";\n+    Files.write(s, path, Charsets.US_ASCII);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    jsc.stop();\n+    jsc = null;\n+    path.delete();"
  }],
  "prId": 8537
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Did you try `assertEquals(1.0, r.getDouble(0))`?\n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-09-08T15:34:32Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Files;\n+\n+import org.apache.spark.mllib.linalg.DenseVector;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.util.Utils;\n+\n+\n+/**\n+ * Test LibSVMRelation in Java.\n+ */\n+public class JavaLibSVMRelationSuite {\n+  private transient JavaSparkContext jsc;\n+  private transient SQLContext jsql;\n+  private transient DataFrame dataset;\n+\n+  private File path;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    jsc = new JavaSparkContext(\"local\", \"JavaLibSVMRelationSuite\");\n+    jsql = new SQLContext(jsc);\n+\n+    File tmpDir = Utils.createTempDir(System.getProperty(\"java.io.tmpdir\"), \"datasource\");\n+    path = File.createTempFile(\"datasource\", \"libsvm-relation\", tmpDir);\n+\n+    String s = \"1 1:1.0 3:2.0 5:3.0\\n0\\n0 2:4.0 4:5.0 6:6.0\";\n+    Files.write(s, path, Charsets.US_ASCII);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    jsc.stop();\n+    jsc = null;\n+    path.delete();\n+  }\n+\n+  @Test\n+  public void verifyLibSVMDF() {\n+    dataset = jsql.read().format(\"libsvm\").option(\"vectorType\", \"dense\").load(path.getPath());\n+    Assert.assertEquals(\"label\", dataset.columns()[0]);\n+    Assert.assertEquals(\"features\", dataset.columns()[1]);\n+    Row r = dataset.first();\n+    Assert.assertEquals(Double.valueOf(1.0), Double.valueOf(r.getDouble(0)));"
  }, {
    "author": {
      "login": "Lewuathe"
    },
    "body": "Yes, I tried. `assertEquals` does not seem to be able to compare primitive floating-point numbers.\n\n```\njava.lang.AssertionError: Use assertEquals(expected, actual, delta) to compare floating-point numbers\n        at org.junit.Assert.fail(Assert.java:93)\n        at org.junit.Assert.assertEquals(Assert.java:493)\n        at org.junit.Assert.assertEquals(Assert.java:482)\n        at org.apache.spark.ml.source.JavaLibSVMRelationSuite.verifyLibSVMDF(JavaLibSVMRelationSuite.java:75)\n```\n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-09-09T00:35:33Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Files;\n+\n+import org.apache.spark.mllib.linalg.DenseVector;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.util.Utils;\n+\n+\n+/**\n+ * Test LibSVMRelation in Java.\n+ */\n+public class JavaLibSVMRelationSuite {\n+  private transient JavaSparkContext jsc;\n+  private transient SQLContext jsql;\n+  private transient DataFrame dataset;\n+\n+  private File path;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    jsc = new JavaSparkContext(\"local\", \"JavaLibSVMRelationSuite\");\n+    jsql = new SQLContext(jsc);\n+\n+    File tmpDir = Utils.createTempDir(System.getProperty(\"java.io.tmpdir\"), \"datasource\");\n+    path = File.createTempFile(\"datasource\", \"libsvm-relation\", tmpDir);\n+\n+    String s = \"1 1:1.0 3:2.0 5:3.0\\n0\\n0 2:4.0 4:5.0 6:6.0\";\n+    Files.write(s, path, Charsets.US_ASCII);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    jsc.stop();\n+    jsc = null;\n+    path.delete();\n+  }\n+\n+  @Test\n+  public void verifyLibSVMDF() {\n+    dataset = jsql.read().format(\"libsvm\").option(\"vectorType\", \"dense\").load(path.getPath());\n+    Assert.assertEquals(\"label\", dataset.columns()[0]);\n+    Assert.assertEquals(\"features\", dataset.columns()[1]);\n+    Row r = dataset.first();\n+    Assert.assertEquals(Double.valueOf(1.0), Double.valueOf(r.getDouble(0)));"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "You can use a small `delta` here like `1e-15`.\n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-09-09T04:09:20Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Files;\n+\n+import org.apache.spark.mllib.linalg.DenseVector;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.util.Utils;\n+\n+\n+/**\n+ * Test LibSVMRelation in Java.\n+ */\n+public class JavaLibSVMRelationSuite {\n+  private transient JavaSparkContext jsc;\n+  private transient SQLContext jsql;\n+  private transient DataFrame dataset;\n+\n+  private File path;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    jsc = new JavaSparkContext(\"local\", \"JavaLibSVMRelationSuite\");\n+    jsql = new SQLContext(jsc);\n+\n+    File tmpDir = Utils.createTempDir(System.getProperty(\"java.io.tmpdir\"), \"datasource\");\n+    path = File.createTempFile(\"datasource\", \"libsvm-relation\", tmpDir);\n+\n+    String s = \"1 1:1.0 3:2.0 5:3.0\\n0\\n0 2:4.0 4:5.0 6:6.0\";\n+    Files.write(s, path, Charsets.US_ASCII);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    jsc.stop();\n+    jsc = null;\n+    path.delete();\n+  }\n+\n+  @Test\n+  public void verifyLibSVMDF() {\n+    dataset = jsql.read().format(\"libsvm\").option(\"vectorType\", \"dense\").load(path.getPath());\n+    Assert.assertEquals(\"label\", dataset.columns()[0]);\n+    Assert.assertEquals(\"features\", dataset.columns()[1]);\n+    Row r = dataset.first();\n+    Assert.assertEquals(Double.valueOf(1.0), Double.valueOf(r.getDouble(0)));"
  }],
  "prId": 8537
}]