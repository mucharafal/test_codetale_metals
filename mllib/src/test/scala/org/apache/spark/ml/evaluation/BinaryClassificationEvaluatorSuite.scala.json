[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "How about something like this to be more robust to formatting changes?\n\n```\nassert(thrown.getMessage.replace(\"\\n\", \"\") contains ...)\n```\n",
    "commit": "0b625cf02862d4e61d774f9312cf1a879a7cafdb",
    "createdAt": "2016-01-07T00:30:38Z",
    "diffHunk": "@@ -36,4 +37,35 @@ class BinaryClassificationEvaluatorSuite\n       .setMetricName(\"areaUnderPR\")\n     testDefaultReadWrite(evaluator)\n   }\n+\n+  test(\"should accept both vector and double raw prediction col\") {\n+    val evaluator = new BinaryClassificationEvaluator()\n+      .setMetricName(\"areaUnderPR\")\n+\n+    val vectorDF = sqlContext.createDataFrame(Seq(\n+      (0d, Vectors.dense(12, 2.5)),\n+      (1d, Vectors.dense(1, 3)),\n+      (0d, Vectors.dense(10, 2))\n+    )).toDF(\"label\", \"rawPrediction\")\n+    assert(evaluator.evaluate(vectorDF) === 1.0)\n+\n+    val doubleDF = sqlContext.createDataFrame(Seq(\n+      (0d, 0d),\n+      (1d, 1d),\n+      (0d, 0d)\n+    )).toDF(\"label\", \"rawPrediction\")\n+    assert(evaluator.evaluate(doubleDF) === 1.0)\n+\n+    val stringDF = sqlContext.createDataFrame(Seq(\n+      (0d, \"0.0d\"),\n+      (1d, \"1.0d\"),\n+      (0d, \"0.0d\")\n+    )).toDF(\"label\", \"rawPrediction\")\n+    val thrown = intercept[IllegalArgumentException] {\n+      evaluator.evaluate(stringDF)\n+    }\n+    assert(thrown.getMessage contains \"Column rawPrediction must be of type equals to one of the \" +"
  }],
  "prId": 10472
}]