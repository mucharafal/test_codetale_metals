[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Why not check for strict equality with \"duration?\"\n",
    "commit": "40b43476dafcd42a562027740f4efe7089d0efd4",
    "createdAt": "2015-07-15T18:08:56Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+\n+class StopwatchSuite extends SparkFunSuite with MLlibTestSparkContext {\n+\n+  private def testStopwatchOnDriver(sw: Stopwatch): Unit = {\n+    assert(sw.name === \"sw\")\n+    assert(sw.elapsed() === 0L)\n+    assert(!sw.isRunning)\n+    intercept[AssertionError] {\n+      sw.stop()\n+    }\n+    sw.start()\n+    Thread.sleep(50)\n+    val duration = sw.stop()\n+    assert(duration >= 50 && duration < 100) // using a loose upper bound\n+    val elapsed = sw.elapsed()\n+    assert(elapsed >= 50 && elapsed < 100)"
  }],
  "prId": 7415
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "check for equality with duration + duration2\n",
    "commit": "40b43476dafcd42a562027740f4efe7089d0efd4",
    "createdAt": "2015-07-15T18:08:57Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+\n+class StopwatchSuite extends SparkFunSuite with MLlibTestSparkContext {\n+\n+  private def testStopwatchOnDriver(sw: Stopwatch): Unit = {\n+    assert(sw.name === \"sw\")\n+    assert(sw.elapsed() === 0L)\n+    assert(!sw.isRunning)\n+    intercept[AssertionError] {\n+      sw.stop()\n+    }\n+    sw.start()\n+    Thread.sleep(50)\n+    val duration = sw.stop()\n+    assert(duration >= 50 && duration < 100) // using a loose upper bound\n+    val elapsed = sw.elapsed()\n+    assert(elapsed >= 50 && elapsed < 100)\n+    sw.start()\n+    Thread.sleep(50)\n+    val duration2 = sw.stop()\n+    assert(duration2 >= 50 && duration2 < 100)\n+    val elapsed2 = sw.elapsed()\n+    assert(elapsed2 >= 100 && elapsed2 < 200)"
  }],
  "prId": 7415
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "triple equals\n",
    "commit": "40b43476dafcd42a562027740f4efe7089d0efd4",
    "createdAt": "2015-07-15T20:34:38Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+\n+class StopwatchSuite extends SparkFunSuite with MLlibTestSparkContext {\n+\n+  private def testStopwatchOnDriver(sw: Stopwatch): Unit = {\n+    assert(sw.name === \"sw\")\n+    assert(sw.elapsed() === 0L)\n+    assert(!sw.isRunning)\n+    intercept[AssertionError] {\n+      sw.stop()\n+    }\n+    sw.start()\n+    Thread.sleep(50)\n+    val duration = sw.stop()\n+    assert(duration >= 50 && duration < 100) // using a loose upper bound\n+    val elapsed = sw.elapsed()\n+    assert(elapsed === duration)\n+    sw.start()\n+    Thread.sleep(50)\n+    val duration2 = sw.stop()\n+    assert(duration2 >= 50 && duration2 < 100)\n+    val elapsed2 = sw.elapsed()\n+    assert(elapsed2 == duration + duration2)"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Actually @ericl pointed out `==` and `===` are equal in this case (Long). Both provide the same error message. I will update it to be consistent.\n",
    "commit": "40b43476dafcd42a562027740f4efe7089d0efd4",
    "createdAt": "2015-07-16T03:19:42Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+\n+class StopwatchSuite extends SparkFunSuite with MLlibTestSparkContext {\n+\n+  private def testStopwatchOnDriver(sw: Stopwatch): Unit = {\n+    assert(sw.name === \"sw\")\n+    assert(sw.elapsed() === 0L)\n+    assert(!sw.isRunning)\n+    intercept[AssertionError] {\n+      sw.stop()\n+    }\n+    sw.start()\n+    Thread.sleep(50)\n+    val duration = sw.stop()\n+    assert(duration >= 50 && duration < 100) // using a loose upper bound\n+    val elapsed = sw.elapsed()\n+    assert(elapsed === duration)\n+    sw.start()\n+    Thread.sleep(50)\n+    val duration2 = sw.stop()\n+    assert(duration2 >= 50 && duration2 < 100)\n+    val elapsed2 = sw.elapsed()\n+    assert(elapsed2 == duration + duration2)"
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "Should we no longer bother with this?  Or is it just for Longs (in which case enforcing consistency may be easiest)?\n",
    "commit": "40b43476dafcd42a562027740f4efe7089d0efd4",
    "createdAt": "2015-07-16T04:44:20Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+\n+class StopwatchSuite extends SparkFunSuite with MLlibTestSparkContext {\n+\n+  private def testStopwatchOnDriver(sw: Stopwatch): Unit = {\n+    assert(sw.name === \"sw\")\n+    assert(sw.elapsed() === 0L)\n+    assert(!sw.isRunning)\n+    intercept[AssertionError] {\n+      sw.stop()\n+    }\n+    sw.start()\n+    Thread.sleep(50)\n+    val duration = sw.stop()\n+    assert(duration >= 50 && duration < 100) // using a loose upper bound\n+    val elapsed = sw.elapsed()\n+    assert(elapsed === duration)\n+    sw.start()\n+    Thread.sleep(50)\n+    val duration2 = sw.stop()\n+    assert(duration2 >= 50 && duration2 < 100)\n+    val elapsed2 = sw.elapsed()\n+    assert(elapsed2 == duration + duration2)"
  }],
  "prId": 7415
}]