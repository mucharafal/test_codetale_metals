[{
  "comments": [{
    "author": {
      "login": "holdenk"
    },
    "body": "So I'd be more comfortable having this in a separate test, 2 iterations is not a lot.",
    "commit": "4a6bd2d96e6d2483915c96a067fb41303e2f527e",
    "createdAt": "2018-03-09T19:50:25Z",
    "diffHunk": "@@ -97,6 +97,7 @@ class BisectingKMeansSuite\n   test(\"fit, transform and summary\") {\n     val predictionColName = \"bisecting_kmeans_prediction\"\n     val bkm = new BisectingKMeans().setK(k).setPredictionCol(predictionColName).setSeed(1)\n+      .setMaxIter(2)"
  }],
  "prId": 20701
}, {
  "comments": [{
    "author": {
      "login": "holdenk"
    },
    "body": "Would be nice to see a test where its not maxIter value being copied over",
    "commit": "4a6bd2d96e6d2483915c96a067fb41303e2f527e",
    "createdAt": "2018-03-09T19:50:47Z",
    "diffHunk": "@@ -127,6 +128,7 @@ class BisectingKMeansSuite\n     assert(clusterSizes.length === k)\n     assert(clusterSizes.sum === numRows)\n     assert(clusterSizes.forall(_ >= 0))\n+    assert(summary.numIter == 2)"
  }, {
    "author": {
      "login": "mgaido91"
    },
    "body": "In `KMeansSuite` the value is not `maxIter` (it performs only 1 iteration in that case). In `BisectingKMeans` `numIter` is always `maxIter` since we are always performing `maxIter` (see https://github.com/apache/spark/blob/b6f837c9d3cb0f76f0a52df37e34aea8944f6867/mllib/src/main/scala/org/apache/spark/mllib/clustering/BisectingKMeans.scala#L192).\r\n\r\nDoes it answer to your comment?",
    "commit": "4a6bd2d96e6d2483915c96a067fb41303e2f527e",
    "createdAt": "2018-03-10T10:56:26Z",
    "diffHunk": "@@ -127,6 +128,7 @@ class BisectingKMeansSuite\n     assert(clusterSizes.length === k)\n     assert(clusterSizes.sum === numRows)\n     assert(clusterSizes.forall(_ >= 0))\n+    assert(summary.numIter == 2)"
  }],
  "prId": 20701
}]