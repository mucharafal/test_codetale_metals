[{
  "comments": [{
    "author": {
      "login": "sethah"
    },
    "body": "I pasted every R code snippet into an R shell, so we can be reasonably certain of its correctness\n",
    "commit": "54bb1b5cfd3d0b9914f7667e7b6daca020277158",
    "createdAt": "2016-10-14T16:00:45Z",
    "diffHunk": "@@ -519,31 +520,35 @@ class LogisticRegressionSuite\n \n   test(\"binary logistic regression with intercept without regularization\") {\n     val trainer1 = (new LogisticRegression).setFitIntercept(true).setStandardization(true)\n+      .setWeightCol(\"weight\")\n     val trainer2 = (new LogisticRegression).setFitIntercept(true).setStandardization(false)\n+      .setWeightCol(\"weight\")\n \n     val model1 = trainer1.fit(binaryDataset)\n     val model2 = trainer2.fit(binaryDataset)\n \n     /*\n-       Using the following R code to load the data and train the model using glmnet package.\n-\n-       library(\"glmnet\")\n-       data <- read.csv(\"path\", header=FALSE)\n-       label = factor(data$V1)\n-       features = as.matrix(data.frame(data$V2, data$V3, data$V4, data$V5))\n-       coefficients = coef(glmnet(features,label, family=\"binomial\", alpha = 0, lambda = 0))\n-       coefficients\n+      Use the following R code to load the data and train the model using glmnet package.\n+      library(\"glmnet\")",
    "line": 104
  }],
  "prId": 15488
}, {
  "comments": [{
    "author": {
      "login": "sethah"
    },
    "body": "`standardization` is an invalid argument. I changed these to be correct `standardize`\n",
    "commit": "54bb1b5cfd3d0b9914f7667e7b6daca020277158",
    "createdAt": "2016-10-14T16:02:06Z",
    "diffHunk": "@@ -1190,92 +1169,95 @@ class LogisticRegressionSuite\n     // use tighter constraints because OWL-QN solver takes longer to converge\n     val trainer1 = (new LogisticRegression).setFitIntercept(true)\n       .setElasticNetParam(1.0).setRegParam(0.05).setStandardization(true)\n-      .setMaxIter(300).setTol(1e-10)\n+      .setMaxIter(300).setTol(1e-10).setWeightCol(\"weight\")\n     val trainer2 = (new LogisticRegression).setFitIntercept(true)\n       .setElasticNetParam(1.0).setRegParam(0.05).setStandardization(false)\n-      .setMaxIter(300).setTol(1e-10)\n+      .setMaxIter(300).setTol(1e-10).setWeightCol(\"weight\")\n \n     val model1 = trainer1.fit(multinomialDataset)\n     val model2 = trainer2.fit(multinomialDataset)\n \n     /*\n-       Use the following R code to load the data and train the model using glmnet package.\n-       library(\"glmnet\")\n-       data <- read.csv(\"path\", header=FALSE)\n-       label = as.factor(data$V1)\n-       features = as.matrix(data.frame(data$V2, data$V3, data$V4, data$V5))\n-       coefficientsStd = coef(glmnet(features, label, family=\"multinomial\", alpha = 1,\n-        lambda = 0.05, standardization=T))",
    "line": 1081
  }],
  "prId": 15488
}]