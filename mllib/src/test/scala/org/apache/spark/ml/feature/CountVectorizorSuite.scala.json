[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "duplicate id\n",
    "commit": "5f3f655c7bf2feaf9502e13abdf160657cc41fdc",
    "createdAt": "2015-07-05T23:05:52Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.param.ParamsSuite\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+\n+class CountVectorizerSuite extends SparkFunSuite with MLlibTestSparkContext {\n+\n+  test(\"params\") {\n+    ParamsSuite.checkParams(new CountVectorizer(Array(\"empty\")))\n+  }\n+\n+  test(\"CountVectorizer common cases\") {\n+    val df = sqlContext.createDataFrame(Seq(\n+      (0, \"a b c d\".split(\" \").toSeq),\n+      (1, \"a b b c d  a\".split(\" \").toSeq),\n+      (2, \"a\".split(\" \").toSeq),\n+      (3, \"\".split(\" \").toSeq), // empty string\n+      (3, \"a notInDict d\".split(\" \").toSeq)  // with words not in vocabulary"
  }],
  "prId": 7084
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Can this be matched with the doc ID to make sure the order isn't switched around?  An easier way would be to include the expected results in the original DataFrame.\n\nsame for other test\n",
    "commit": "5f3f655c7bf2feaf9502e13abdf160657cc41fdc",
    "createdAt": "2015-07-05T23:05:53Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.param.ParamsSuite\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+\n+class CountVectorizerSuite extends SparkFunSuite with MLlibTestSparkContext {\n+\n+  test(\"params\") {\n+    ParamsSuite.checkParams(new CountVectorizer(Array(\"empty\")))\n+  }\n+\n+  test(\"CountVectorizer common cases\") {\n+    val df = sqlContext.createDataFrame(Seq(\n+      (0, \"a b c d\".split(\" \").toSeq),\n+      (1, \"a b b c d  a\".split(\" \").toSeq),\n+      (2, \"a\".split(\" \").toSeq),\n+      (3, \"\".split(\" \").toSeq), // empty string\n+      (3, \"a notInDict d\".split(\" \").toSeq)  // with words not in vocabulary\n+    )).toDF(\"id\", \"words\")\n+    val cv = new CountVectorizer(Array(\"a\", \"b\", \"c\", \"d\"))\n+      .setInputCol(\"words\")\n+      .setOutputCol(\"features\")\n+    val output = cv.transform(df)\n+    val features = output.select(\"features\").collect()\n+\n+    val expected = Seq("
  }],
  "prId": 7084
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "scala style: use braces `{}` instead of parentheses for multiline closures\n\nsame for other test\n",
    "commit": "5f3f655c7bf2feaf9502e13abdf160657cc41fdc",
    "createdAt": "2015-07-05T23:05:54Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.param.ParamsSuite\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+\n+class CountVectorizerSuite extends SparkFunSuite with MLlibTestSparkContext {\n+\n+  test(\"params\") {\n+    ParamsSuite.checkParams(new CountVectorizer(Array(\"empty\")))\n+  }\n+\n+  test(\"CountVectorizer common cases\") {\n+    val df = sqlContext.createDataFrame(Seq(\n+      (0, \"a b c d\".split(\" \").toSeq),\n+      (1, \"a b b c d  a\".split(\" \").toSeq),\n+      (2, \"a\".split(\" \").toSeq),\n+      (3, \"\".split(\" \").toSeq), // empty string\n+      (3, \"a notInDict d\".split(\" \").toSeq)  // with words not in vocabulary\n+    )).toDF(\"id\", \"words\")\n+    val cv = new CountVectorizer(Array(\"a\", \"b\", \"c\", \"d\"))\n+      .setInputCol(\"words\")\n+      .setOutputCol(\"features\")\n+    val output = cv.transform(df)\n+    val features = output.select(\"features\").collect()\n+\n+    val expected = Seq(\n+      Vectors.sparse(4, Seq((0, 1.0), (1, 1.0), (2, 1.0), (3, 1.0))),\n+      Vectors.sparse(4, Seq((0, 2.0), (1, 2.0), (2, 1.0), (3, 1.0))),\n+      Vectors.sparse(4, Seq((0, 1.0))),\n+      Vectors.sparse(4, Seq()),\n+      Vectors.sparse(4, Seq((0, 1.0), (3, 1.0))))\n+\n+    features.zip(expected).foreach(p =>"
  }],
  "prId": 7084
}]