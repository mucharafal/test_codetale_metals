[{
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "Same comment applies here",
    "commit": "ea03683a4c388eaee70bf66fc41fd89a3a81a6a3",
    "createdAt": "2017-07-04T09:19:48Z",
    "diffHunk": "@@ -166,6 +166,45 @@ class GBTRegressorSuite extends SparkFunSuite with MLlibTestSparkContext\n   }\n \n   /////////////////////////////////////////////////////////////////////////////\n+  // Tests of feature subset strategy\n+  /////////////////////////////////////////////////////////////////////////////\n+  test(\"Tests of feature subset strategy\") {\n+    val numClasses = 2\n+    val gbt = new GBTRegressor()\n+      .setMaxDepth(3)\n+      .setMaxIter(5)\n+      .setSubsamplingRate(1.0)\n+      .setStepSize(0.5)\n+      .setSeed(123)\n+      .setFeatureSubsetStrategy(\"all\")\n+\n+    // In this data, feature 1 is very important.\n+    val data: RDD[LabeledPoint] = TreeTests.featureImportanceData(sc)\n+    val categoricalFeatures = Map.empty[Int, Int]\n+    val df: DataFrame = TreeTests.setMetadata(data, categoricalFeatures, numClasses)\n+\n+    val importances = gbt.fit(df).featureImportances\n+    val mostImportantFeature = importances.argmax\n+    assert(mostImportantFeature === 1)\n+    assert(importances.toArray.sum === 1.0)\n+    assert(importances.toArray.forall(_ >= 0.0))\n+\n+    val gbtWithFeatureSubset = new GBTRegressor()"
  }, {
    "author": {
      "login": "pralabhkumar"
    },
    "body": "done",
    "commit": "ea03683a4c388eaee70bf66fc41fd89a3a81a6a3",
    "createdAt": "2017-07-04T14:21:46Z",
    "diffHunk": "@@ -166,6 +166,45 @@ class GBTRegressorSuite extends SparkFunSuite with MLlibTestSparkContext\n   }\n \n   /////////////////////////////////////////////////////////////////////////////\n+  // Tests of feature subset strategy\n+  /////////////////////////////////////////////////////////////////////////////\n+  test(\"Tests of feature subset strategy\") {\n+    val numClasses = 2\n+    val gbt = new GBTRegressor()\n+      .setMaxDepth(3)\n+      .setMaxIter(5)\n+      .setSubsamplingRate(1.0)\n+      .setStepSize(0.5)\n+      .setSeed(123)\n+      .setFeatureSubsetStrategy(\"all\")\n+\n+    // In this data, feature 1 is very important.\n+    val data: RDD[LabeledPoint] = TreeTests.featureImportanceData(sc)\n+    val categoricalFeatures = Map.empty[Int, Int]\n+    val df: DataFrame = TreeTests.setMetadata(data, categoricalFeatures, numClasses)\n+\n+    val importances = gbt.fit(df).featureImportances\n+    val mostImportantFeature = importances.argmax\n+    assert(mostImportantFeature === 1)\n+    assert(importances.toArray.sum === 1.0)\n+    assert(importances.toArray.forall(_ >= 0.0))\n+\n+    val gbtWithFeatureSubset = new GBTRegressor()"
  }],
  "prId": 18118
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "You've kept the other assertions in this test (that were removed from the classifier test as per https://github.com/apache/spark/pull/18118#discussion_r148095940). If they're not necessary we should also remove them here.",
    "commit": "ea03683a4c388eaee70bf66fc41fd89a3a81a6a3",
    "createdAt": "2017-11-08T18:46:16Z",
    "diffHunk": "@@ -166,6 +166,40 @@ class GBTRegressorSuite extends SparkFunSuite with MLlibTestSparkContext\n   }\n \n   /////////////////////////////////////////////////////////////////////////////\n+  // Tests of feature subset strategy\n+  /////////////////////////////////////////////////////////////////////////////\n+  test(\"Tests of feature subset strategy\") {\n+    val numClasses = 2\n+    val gbt = new GBTRegressor()\n+      .setMaxDepth(3)\n+      .setMaxIter(5)\n+      .setSubsamplingRate(1.0)\n+      .setStepSize(0.5)\n+      .setSeed(123)\n+      .setFeatureSubsetStrategy(\"all\")\n+\n+    // In this data, feature 1 is very important.\n+    val data: RDD[LabeledPoint] = TreeTests.featureImportanceData(sc)\n+    val categoricalFeatures = Map.empty[Int, Int]\n+    val df: DataFrame = TreeTests.setMetadata(data, categoricalFeatures, numClasses)\n+\n+    val importances = gbt.fit(df).featureImportances\n+    val mostImportantFeature = importances.argmax\n+    assert(mostImportantFeature === 1)\n+    assert(importances.toArray.sum === 1.0)"
  }, {
    "author": {
      "login": "pralabhkumar"
    },
    "body": "done",
    "commit": "ea03683a4c388eaee70bf66fc41fd89a3a81a6a3",
    "createdAt": "2017-11-09T07:54:52Z",
    "diffHunk": "@@ -166,6 +166,40 @@ class GBTRegressorSuite extends SparkFunSuite with MLlibTestSparkContext\n   }\n \n   /////////////////////////////////////////////////////////////////////////////\n+  // Tests of feature subset strategy\n+  /////////////////////////////////////////////////////////////////////////////\n+  test(\"Tests of feature subset strategy\") {\n+    val numClasses = 2\n+    val gbt = new GBTRegressor()\n+      .setMaxDepth(3)\n+      .setMaxIter(5)\n+      .setSubsamplingRate(1.0)\n+      .setStepSize(0.5)\n+      .setSeed(123)\n+      .setFeatureSubsetStrategy(\"all\")\n+\n+    // In this data, feature 1 is very important.\n+    val data: RDD[LabeledPoint] = TreeTests.featureImportanceData(sc)\n+    val categoricalFeatures = Map.empty[Int, Int]\n+    val df: DataFrame = TreeTests.setMetadata(data, categoricalFeatures, numClasses)\n+\n+    val importances = gbt.fit(df).featureImportances\n+    val mostImportantFeature = importances.argmax\n+    assert(mostImportantFeature === 1)\n+    assert(importances.toArray.sum === 1.0)"
  }],
  "prId": 18118
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "Same here - we can remove unnecessary assertions as per https://github.com/apache/spark/pull/18118#discussion_r148096176",
    "commit": "ea03683a4c388eaee70bf66fc41fd89a3a81a6a3",
    "createdAt": "2017-11-08T18:46:44Z",
    "diffHunk": "@@ -166,6 +166,40 @@ class GBTRegressorSuite extends SparkFunSuite with MLlibTestSparkContext\n   }\n \n   /////////////////////////////////////////////////////////////////////////////\n+  // Tests of feature subset strategy\n+  /////////////////////////////////////////////////////////////////////////////\n+  test(\"Tests of feature subset strategy\") {\n+    val numClasses = 2\n+    val gbt = new GBTRegressor()\n+      .setMaxDepth(3)\n+      .setMaxIter(5)\n+      .setSubsamplingRate(1.0)\n+      .setStepSize(0.5)\n+      .setSeed(123)\n+      .setFeatureSubsetStrategy(\"all\")\n+\n+    // In this data, feature 1 is very important.\n+    val data: RDD[LabeledPoint] = TreeTests.featureImportanceData(sc)\n+    val categoricalFeatures = Map.empty[Int, Int]\n+    val df: DataFrame = TreeTests.setMetadata(data, categoricalFeatures, numClasses)\n+\n+    val importances = gbt.fit(df).featureImportances\n+    val mostImportantFeature = importances.argmax\n+    assert(mostImportantFeature === 1)\n+    assert(importances.toArray.sum === 1.0)\n+    assert(importances.toArray.forall(_ >= 0.0))\n+\n+    // GBT with different featureSubsetStrategy\n+    val gbtWithFeatureSubset = gbt.setFeatureSubsetStrategy(\"1\")\n+    val importanceFeatures = gbtWithFeatureSubset.fit(df).featureImportances\n+    val mostIF = importanceFeatures.argmax\n+    assert(!(mostImportantFeature === mostIF))\n+    assert(importanceFeatures.toArray.sum === 1.0)\n+    assert(importanceFeatures.toArray.forall(_ >= 0.0))\n+    assert(!(importanceFeatures.toDense.values.deep === importances.toDense.values.deep))"
  }, {
    "author": {
      "login": "pralabhkumar"
    },
    "body": "done",
    "commit": "ea03683a4c388eaee70bf66fc41fd89a3a81a6a3",
    "createdAt": "2017-11-09T07:54:58Z",
    "diffHunk": "@@ -166,6 +166,40 @@ class GBTRegressorSuite extends SparkFunSuite with MLlibTestSparkContext\n   }\n \n   /////////////////////////////////////////////////////////////////////////////\n+  // Tests of feature subset strategy\n+  /////////////////////////////////////////////////////////////////////////////\n+  test(\"Tests of feature subset strategy\") {\n+    val numClasses = 2\n+    val gbt = new GBTRegressor()\n+      .setMaxDepth(3)\n+      .setMaxIter(5)\n+      .setSubsamplingRate(1.0)\n+      .setStepSize(0.5)\n+      .setSeed(123)\n+      .setFeatureSubsetStrategy(\"all\")\n+\n+    // In this data, feature 1 is very important.\n+    val data: RDD[LabeledPoint] = TreeTests.featureImportanceData(sc)\n+    val categoricalFeatures = Map.empty[Int, Int]\n+    val df: DataFrame = TreeTests.setMetadata(data, categoricalFeatures, numClasses)\n+\n+    val importances = gbt.fit(df).featureImportances\n+    val mostImportantFeature = importances.argmax\n+    assert(mostImportantFeature === 1)\n+    assert(importances.toArray.sum === 1.0)\n+    assert(importances.toArray.forall(_ >= 0.0))\n+\n+    // GBT with different featureSubsetStrategy\n+    val gbtWithFeatureSubset = gbt.setFeatureSubsetStrategy(\"1\")\n+    val importanceFeatures = gbtWithFeatureSubset.fit(df).featureImportances\n+    val mostIF = importanceFeatures.argmax\n+    assert(!(mostImportantFeature === mostIF))\n+    assert(importanceFeatures.toArray.sum === 1.0)\n+    assert(importanceFeatures.toArray.forall(_ >= 0.0))\n+    assert(!(importanceFeatures.toDense.values.deep === importances.toDense.values.deep))"
  }],
  "prId": 18118
}]