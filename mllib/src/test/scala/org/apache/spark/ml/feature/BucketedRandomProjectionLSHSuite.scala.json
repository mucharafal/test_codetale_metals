[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "No existing test to use",
    "commit": "448668d73269d2be5ed8e54c33753691767dd90f",
    "createdAt": "2017-12-29T03:42:34Z",
    "diffHunk": "@@ -98,6 +97,21 @@ class BucketedRandomProjectionLSHSuite\n     MLTestingUtils.checkCopyAndUids(brp, brpModel)\n   }\n \n+  test(\"BucketedRandomProjectionLSH: streaming transform\") {",
    "line": 26
  }],
  "prId": 20111
}, {
  "comments": [{
    "author": {
      "login": "WeichenXu123"
    },
    "body": "So here do not need to select \"keys\" column ?",
    "commit": "448668d73269d2be5ed8e54c33753691767dd90f",
    "createdAt": "2017-12-29T10:45:02Z",
    "diffHunk": "@@ -98,6 +97,21 @@ class BucketedRandomProjectionLSHSuite\n     MLTestingUtils.checkCopyAndUids(brp, brpModel)\n   }\n \n+  test(\"BucketedRandomProjectionLSH: streaming transform\") {\n+    val brp = new BucketedRandomProjectionLSH()\n+      .setNumHashTables(2)\n+      .setInputCol(\"keys\")\n+      .setOutputCol(\"values\")\n+      .setBucketLength(1.0)\n+      .setSeed(12345)\n+    val brpModel = brp.fit(dataset)\n+\n+    testTransformer[Tuple1[Vector]](dataset.toDF(), brpModel, \"keys\", \"values\") {\n+      case Row(_: Vector, values: Seq[_]) =>"
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "I don't think we have to.  The main thing here is to make sure that the transform really does happen.  Other tests check validity of the values.",
    "commit": "448668d73269d2be5ed8e54c33753691767dd90f",
    "createdAt": "2017-12-29T21:47:23Z",
    "diffHunk": "@@ -98,6 +97,21 @@ class BucketedRandomProjectionLSHSuite\n     MLTestingUtils.checkCopyAndUids(brp, brpModel)\n   }\n \n+  test(\"BucketedRandomProjectionLSH: streaming transform\") {\n+    val brp = new BucketedRandomProjectionLSH()\n+      .setNumHashTables(2)\n+      .setInputCol(\"keys\")\n+      .setOutputCol(\"values\")\n+      .setBucketLength(1.0)\n+      .setSeed(12345)\n+    val brpModel = brp.fit(dataset)\n+\n+    testTransformer[Tuple1[Vector]](dataset.toDF(), brpModel, \"keys\", \"values\") {\n+      case Row(_: Vector, values: Seq[_]) =>"
  }, {
    "author": {
      "login": "WeichenXu123"
    },
    "body": "OK. so I prefer to use simpler code:\r\n```\r\ntestTransformer[Tuple1[Vector]](dataset.toDF(), brpModel, \"values\") {\r\n    case Row(values: Seq[_]) =>\r\n...\r\n```",
    "commit": "448668d73269d2be5ed8e54c33753691767dd90f",
    "createdAt": "2017-12-30T04:19:37Z",
    "diffHunk": "@@ -98,6 +97,21 @@ class BucketedRandomProjectionLSHSuite\n     MLTestingUtils.checkCopyAndUids(brp, brpModel)\n   }\n \n+  test(\"BucketedRandomProjectionLSH: streaming transform\") {\n+    val brp = new BucketedRandomProjectionLSH()\n+      .setNumHashTables(2)\n+      .setInputCol(\"keys\")\n+      .setOutputCol(\"values\")\n+      .setBucketLength(1.0)\n+      .setSeed(12345)\n+    val brpModel = brp.fit(dataset)\n+\n+    testTransformer[Tuple1[Vector]](dataset.toDF(), brpModel, \"keys\", \"values\") {\n+      case Row(_: Vector, values: Seq[_]) =>"
  }],
  "prId": 20111
}]