[{
  "comments": [{
    "author": {
      "login": "BenFradet"
    },
    "body": "Why not use [MLTestingUtil's checkNumericTypes](https://github.com/apache/spark/blob/master/mllib/src/test/scala/org/apache/spark/ml/util/MLTestingUtils.scala#L41-L88)?",
    "commit": "647ff461ee5ac1e36e6d9a83ca62271403ad01ab",
    "createdAt": "2017-03-27T17:04:38Z",
    "diffHunk": "@@ -189,6 +191,47 @@ class IsotonicRegressionSuite\n         assert(expected.predictions === actual.predictions)\n       }\n   }\n+\n+  test(\"Besides VectorUDT, should support all NumericType features, and not support other types\") {\n+    val df = generateIsotonicInput(Seq(1, 2, 3))\n+    val ir = new IsotonicRegression()\n+\n+    val expected = ir.fit(df)\n+    val expectedPrediction =\n+      expected.transform(df).select(\"prediction\").map(_.getDouble(0)).collect()\n+\n+    val types =\n+      Seq(ShortType, LongType, IntegerType, FloatType, ByteType, DoubleType, DecimalType(10, 0))\n+\n+    types.foreach { t =>\n+      val df2 = df.select(col(\"label\"), col(\"features\").cast(t), col(\"weight\"))\n+\n+      val actual = ir.fit(df2)\n+      assert(expected.boundaries === actual.boundaries)\n+      assert(expected.predictions === actual.predictions)\n+\n+      val actualPrediction =\n+        actual.transform(df2).select(\"prediction\").map(_.getDouble(0)).collect()\n+      assert(expectedPrediction === actualPrediction)\n+    }\n+\n+    val dfWithStringFeatures =\n+      df.select(col(\"label\"), col(\"features\").cast(StringType), col(\"weight\"))\n+\n+    val thrown = intercept[IllegalArgumentException] {\n+      ir.fit(dfWithStringFeatures)\n+    }\n+    assert(thrown.getMessage.contains(\n+      \"Column features must be of type NumericType or VectorUDT,\" +\n+        \" but was actually of type StringType\"))\n+\n+    val thrown2 = intercept[IllegalArgumentException] {\n+      expected.transform(dfWithStringFeatures)\n+    }\n+    assert(thrown2.getMessage.contains(\n+      \"Column features must be of type NumericType or VectorUDT,\" +\n+        \" but was actually of type StringType\"))\n+  }",
    "line": 53
  }, {
    "author": {
      "login": "zhengruifeng"
    },
    "body": "`checkNumericTypes` only test `fit` method on `labelCol` and `weightCol`.\r\n`IsotonicRegressor` is the only algorithm which need to test both `fit` and `transform` on `featureCol`. So I prefer not to use `checkNumericTypes`. Thanks for your review",
    "commit": "647ff461ee5ac1e36e6d9a83ca62271403ad01ab",
    "createdAt": "2017-03-31T01:46:25Z",
    "diffHunk": "@@ -189,6 +191,47 @@ class IsotonicRegressionSuite\n         assert(expected.predictions === actual.predictions)\n       }\n   }\n+\n+  test(\"Besides VectorUDT, should support all NumericType features, and not support other types\") {\n+    val df = generateIsotonicInput(Seq(1, 2, 3))\n+    val ir = new IsotonicRegression()\n+\n+    val expected = ir.fit(df)\n+    val expectedPrediction =\n+      expected.transform(df).select(\"prediction\").map(_.getDouble(0)).collect()\n+\n+    val types =\n+      Seq(ShortType, LongType, IntegerType, FloatType, ByteType, DoubleType, DecimalType(10, 0))\n+\n+    types.foreach { t =>\n+      val df2 = df.select(col(\"label\"), col(\"features\").cast(t), col(\"weight\"))\n+\n+      val actual = ir.fit(df2)\n+      assert(expected.boundaries === actual.boundaries)\n+      assert(expected.predictions === actual.predictions)\n+\n+      val actualPrediction =\n+        actual.transform(df2).select(\"prediction\").map(_.getDouble(0)).collect()\n+      assert(expectedPrediction === actualPrediction)\n+    }\n+\n+    val dfWithStringFeatures =\n+      df.select(col(\"label\"), col(\"features\").cast(StringType), col(\"weight\"))\n+\n+    val thrown = intercept[IllegalArgumentException] {\n+      ir.fit(dfWithStringFeatures)\n+    }\n+    assert(thrown.getMessage.contains(\n+      \"Column features must be of type NumericType or VectorUDT,\" +\n+        \" but was actually of type StringType\"))\n+\n+    val thrown2 = intercept[IllegalArgumentException] {\n+      expected.transform(dfWithStringFeatures)\n+    }\n+    assert(thrown2.getMessage.contains(\n+      \"Column features must be of type NumericType or VectorUDT,\" +\n+        \" but was actually of type StringType\"))\n+  }",
    "line": 53
  }, {
    "author": {
      "login": "BenFradet"
    },
    "body": "My bad, skimmed too quickly over the tests and it looked very similar to what I had done in the past.",
    "commit": "647ff461ee5ac1e36e6d9a83ca62271403ad01ab",
    "createdAt": "2017-03-31T10:41:04Z",
    "diffHunk": "@@ -189,6 +191,47 @@ class IsotonicRegressionSuite\n         assert(expected.predictions === actual.predictions)\n       }\n   }\n+\n+  test(\"Besides VectorUDT, should support all NumericType features, and not support other types\") {\n+    val df = generateIsotonicInput(Seq(1, 2, 3))\n+    val ir = new IsotonicRegression()\n+\n+    val expected = ir.fit(df)\n+    val expectedPrediction =\n+      expected.transform(df).select(\"prediction\").map(_.getDouble(0)).collect()\n+\n+    val types =\n+      Seq(ShortType, LongType, IntegerType, FloatType, ByteType, DoubleType, DecimalType(10, 0))\n+\n+    types.foreach { t =>\n+      val df2 = df.select(col(\"label\"), col(\"features\").cast(t), col(\"weight\"))\n+\n+      val actual = ir.fit(df2)\n+      assert(expected.boundaries === actual.boundaries)\n+      assert(expected.predictions === actual.predictions)\n+\n+      val actualPrediction =\n+        actual.transform(df2).select(\"prediction\").map(_.getDouble(0)).collect()\n+      assert(expectedPrediction === actualPrediction)\n+    }\n+\n+    val dfWithStringFeatures =\n+      df.select(col(\"label\"), col(\"features\").cast(StringType), col(\"weight\"))\n+\n+    val thrown = intercept[IllegalArgumentException] {\n+      ir.fit(dfWithStringFeatures)\n+    }\n+    assert(thrown.getMessage.contains(\n+      \"Column features must be of type NumericType or VectorUDT,\" +\n+        \" but was actually of type StringType\"))\n+\n+    val thrown2 = intercept[IllegalArgumentException] {\n+      expected.transform(dfWithStringFeatures)\n+    }\n+    assert(thrown2.getMessage.contains(\n+      \"Column features must be of type NumericType or VectorUDT,\" +\n+        \" but was actually of type StringType\"))\n+  }",
    "line": 53
  }],
  "prId": 17384
}]