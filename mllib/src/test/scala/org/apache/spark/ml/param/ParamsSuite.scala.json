[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "This could also include a check for the getter method, though that's a bit of a pain\n",
    "commit": "9bd2922691f4303bc28d5150fb43e5aa5e81ac9c",
    "createdAt": "2015-05-21T22:17:59Z",
    "diffHunk": "@@ -201,3 +201,23 @@ class ParamsSuite extends FunSuite {\n     assert(inArray(1) && inArray(2) && !inArray(0))\n   }\n }\n+\n+object ParamsSuite extends FunSuite {\n+\n+  /**\n+   * Checks common requirements for [[Params.params]]: 1) number of params; 2) params are ordered\n+   * by names; 3) param parent has the same UID as the object's UID; 4) param name is the same as\n+   * the param method name.\n+   */\n+  def checkParams(obj: Params, expectedNumParams: Int): Unit = {\n+    val params = obj.params\n+    require(params.length === expectedNumParams,\n+      s\"Expect $expectedNumParams params but got ${params.length}: ${params.map(_.name).toSeq}.\")\n+    val paramNames = params.map(_.name)\n+    require(paramNames === paramNames.sorted)\n+    params.foreach { p =>\n+      assert(p.parent === obj.uid)\n+      assert(obj.getParam(p.name) === p)",
    "line": 20
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Is it valid to assume that param and getParam are always paired? I can do this in a separate PR.\n",
    "commit": "9bd2922691f4303bc28d5150fb43e5aa5e81ac9c",
    "createdAt": "2015-05-21T22:57:49Z",
    "diffHunk": "@@ -201,3 +201,23 @@ class ParamsSuite extends FunSuite {\n     assert(inArray(1) && inArray(2) && !inArray(0))\n   }\n }\n+\n+object ParamsSuite extends FunSuite {\n+\n+  /**\n+   * Checks common requirements for [[Params.params]]: 1) number of params; 2) params are ordered\n+   * by names; 3) param parent has the same UID as the object's UID; 4) param name is the same as\n+   * the param method name.\n+   */\n+  def checkParams(obj: Params, expectedNumParams: Int): Unit = {\n+    val params = obj.params\n+    require(params.length === expectedNumParams,\n+      s\"Expect $expectedNumParams params but got ${params.length}: ${params.map(_.name).toSeq}.\")\n+    val paramNames = params.map(_.name)\n+    require(paramNames === paramNames.sorted)\n+    params.foreach { p =>\n+      assert(p.parent === obj.uid)\n+      assert(obj.getParam(p.name) === p)",
    "line": 20
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "I would think so, but yes, doing it later is fine.\n",
    "commit": "9bd2922691f4303bc28d5150fb43e5aa5e81ac9c",
    "createdAt": "2015-05-22T01:00:01Z",
    "diffHunk": "@@ -201,3 +201,23 @@ class ParamsSuite extends FunSuite {\n     assert(inArray(1) && inArray(2) && !inArray(0))\n   }\n }\n+\n+object ParamsSuite extends FunSuite {\n+\n+  /**\n+   * Checks common requirements for [[Params.params]]: 1) number of params; 2) params are ordered\n+   * by names; 3) param parent has the same UID as the object's UID; 4) param name is the same as\n+   * the param method name.\n+   */\n+  def checkParams(obj: Params, expectedNumParams: Int): Unit = {\n+    val params = obj.params\n+    require(params.length === expectedNumParams,\n+      s\"Expect $expectedNumParams params but got ${params.length}: ${params.map(_.name).toSeq}.\")\n+    val paramNames = params.map(_.name)\n+    require(paramNames === paramNames.sorted)\n+    params.foreach { p =>\n+      assert(p.parent === obj.uid)\n+      assert(obj.getParam(p.name) === p)",
    "line": 20
  }],
  "prId": 6308
}]