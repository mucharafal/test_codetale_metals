[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "We have standardized tooling for numerical tolerance functionality:\n\n```\nimport org.apache.spark.ml.util.TestingUtils._\nval1 ~== val2 absTol 1e-3\nval3 ~== val4 relTol 1e-3\n```\n",
    "commit": "4e20a709e9278e18302835070a148f891e42a3c1",
    "createdAt": "2016-09-15T17:27:27Z",
    "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.scalactic.TolerantNumerics\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.classification.GBTClassifier\n+import org.apache.spark.ml.feature.LabeledPoint\n+import org.apache.spark.ml.linalg._\n+import org.apache.spark.ml.regression.GBTRegressor\n+import org.apache.spark.ml.tree.{InternalNode, LeafNode, Node}\n+import org.apache.spark.mllib.tree.impurity.{ImpurityAggregator, ImpurityCalculator}\n+import org.apache.spark.mllib.tree.loss.Loss\n+import org.apache.spark.sql._\n+import org.apache.spark.sql.functions._\n+\n+object GBTSuiteHelper extends SparkFunSuite {\n+  implicit val approxEquals = TolerantNumerics.tolerantDoubleEquality(1e-3)"
  }, {
    "author": {
      "login": "vlad17"
    },
    "body": "Neat!\n",
    "commit": "4e20a709e9278e18302835070a148f891e42a3c1",
    "createdAt": "2016-10-13T18:11:32Z",
    "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.scalactic.TolerantNumerics\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.classification.GBTClassifier\n+import org.apache.spark.ml.feature.LabeledPoint\n+import org.apache.spark.ml.linalg._\n+import org.apache.spark.ml.regression.GBTRegressor\n+import org.apache.spark.ml.tree.{InternalNode, LeafNode, Node}\n+import org.apache.spark.mllib.tree.impurity.{ImpurityAggregator, ImpurityCalculator}\n+import org.apache.spark.mllib.tree.loss.Loss\n+import org.apache.spark.sql._\n+import org.apache.spark.sql.functions._\n+\n+object GBTSuiteHelper extends SparkFunSuite {\n+  implicit val approxEquals = TolerantNumerics.tolerantDoubleEquality(1e-3)"
  }],
  "prId": 14547
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "style: first argument goes on next line for multi-line method declarations\n(same issue elsewhere)\n",
    "commit": "4e20a709e9278e18302835070a148f891e42a3c1",
    "createdAt": "2016-09-15T17:27:29Z",
    "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.scalactic.TolerantNumerics\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.classification.GBTClassifier\n+import org.apache.spark.ml.feature.LabeledPoint\n+import org.apache.spark.ml.linalg._\n+import org.apache.spark.ml.regression.GBTRegressor\n+import org.apache.spark.ml.tree.{InternalNode, LeafNode, Node}\n+import org.apache.spark.mllib.tree.impurity.{ImpurityAggregator, ImpurityCalculator}\n+import org.apache.spark.mllib.tree.loss.Loss\n+import org.apache.spark.sql._\n+import org.apache.spark.sql.functions._\n+\n+object GBTSuiteHelper extends SparkFunSuite {\n+  implicit val approxEquals = TolerantNumerics.tolerantDoubleEquality(1e-3)\n+\n+  /**\n+   * @param labels set of GBT labels\n+   * @param agg the aggregator to use\n+   * @return the calculator from aggregation on the labels\n+   */\n+  def computeCalculator(labels: Seq[Double],"
  }, {
    "author": {
      "login": "vlad17"
    },
    "body": "done\n",
    "commit": "4e20a709e9278e18302835070a148f891e42a3c1",
    "createdAt": "2016-10-13T18:13:15Z",
    "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.scalactic.TolerantNumerics\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.classification.GBTClassifier\n+import org.apache.spark.ml.feature.LabeledPoint\n+import org.apache.spark.ml.linalg._\n+import org.apache.spark.ml.regression.GBTRegressor\n+import org.apache.spark.ml.tree.{InternalNode, LeafNode, Node}\n+import org.apache.spark.mllib.tree.impurity.{ImpurityAggregator, ImpurityCalculator}\n+import org.apache.spark.mllib.tree.loss.Loss\n+import org.apache.spark.sql._\n+import org.apache.spark.sql.functions._\n+\n+object GBTSuiteHelper extends SparkFunSuite {\n+  implicit val approxEquals = TolerantNumerics.tolerantDoubleEquality(1e-3)\n+\n+  /**\n+   * @param labels set of GBT labels\n+   * @param agg the aggregator to use\n+   * @return the calculator from aggregation on the labels\n+   */\n+  def computeCalculator(labels: Seq[Double],"
  }],
  "prId": 14547
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "not needed\n",
    "commit": "4e20a709e9278e18302835070a148f891e42a3c1",
    "createdAt": "2016-09-15T17:27:30Z",
    "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.scalactic.TolerantNumerics\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.classification.GBTClassifier\n+import org.apache.spark.ml.feature.LabeledPoint\n+import org.apache.spark.ml.linalg._\n+import org.apache.spark.ml.regression.GBTRegressor\n+import org.apache.spark.ml.tree.{InternalNode, LeafNode, Node}\n+import org.apache.spark.mllib.tree.impurity.{ImpurityAggregator, ImpurityCalculator}\n+import org.apache.spark.mllib.tree.loss.Loss\n+import org.apache.spark.sql._\n+import org.apache.spark.sql.functions._\n+\n+object GBTSuiteHelper extends SparkFunSuite {\n+  implicit val approxEquals = TolerantNumerics.tolerantDoubleEquality(1e-3)\n+\n+  /**\n+   * @param labels set of GBT labels\n+   * @param agg the aggregator to use\n+   * @return the calculator from aggregation on the labels\n+   */\n+  def computeCalculator(labels: Seq[Double],\n+                        agg: ImpurityAggregator): ImpurityCalculator = {\n+    implicit val encoder = Encoders.scalaDouble"
  }, {
    "author": {
      "login": "vlad17"
    },
    "body": "done\n",
    "commit": "4e20a709e9278e18302835070a148f891e42a3c1",
    "createdAt": "2016-10-13T18:13:13Z",
    "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.scalactic.TolerantNumerics\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.classification.GBTClassifier\n+import org.apache.spark.ml.feature.LabeledPoint\n+import org.apache.spark.ml.linalg._\n+import org.apache.spark.ml.regression.GBTRegressor\n+import org.apache.spark.ml.tree.{InternalNode, LeafNode, Node}\n+import org.apache.spark.mllib.tree.impurity.{ImpurityAggregator, ImpurityCalculator}\n+import org.apache.spark.mllib.tree.loss.Loss\n+import org.apache.spark.sql._\n+import org.apache.spark.sql.functions._\n+\n+object GBTSuiteHelper extends SparkFunSuite {\n+  implicit val approxEquals = TolerantNumerics.tolerantDoubleEquality(1e-3)\n+\n+  /**\n+   * @param labels set of GBT labels\n+   * @param agg the aggregator to use\n+   * @return the calculator from aggregation on the labels\n+   */\n+  def computeCalculator(labels: Seq[Double],\n+                        agg: ImpurityAggregator): ImpurityCalculator = {\n+    implicit val encoder = Encoders.scalaDouble"
  }],
  "prId": 14547
}]