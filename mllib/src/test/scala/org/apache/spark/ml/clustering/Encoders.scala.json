[{
  "comments": [{
    "author": {
      "login": "smurakozi"
    },
    "body": "Is there a better solution to provide an implicit `Encoder[Vector]` for testTransformer?\r\nIs it ok here, or is there a better place for it?\r\ne.g. `org.apache.spark.mllib.util.MLlibTestSparkContext.testImplicits`\r\n",
    "commit": "b2aa3c98808f734eaeb68014605f9d42089edc3f",
    "createdAt": "2018-01-18T20:30:24Z",
    "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.clustering\n+\n+import org.apache.spark.ml.linalg.Vector\n+import org.apache.spark.sql.catalyst.encoders.ExpressionEncoder\n+\n+private[clustering] object Encoders {\n+  implicit val vectorEncoder = ExpressionEncoder[Vector]()",
    "line": 24
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "Thanks for asking; you shouldn't need to do this.  I'll comment on BisectingKMeansSuite.scala\r\n about using testImplicits instead.  You basically just need to import testImplicits._ and use Tuple1 for the type param for testTransformer.",
    "commit": "b2aa3c98808f734eaeb68014605f9d42089edc3f",
    "createdAt": "2018-04-17T18:23:32Z",
    "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.clustering\n+\n+import org.apache.spark.ml.linalg.Vector\n+import org.apache.spark.sql.catalyst.encoders.ExpressionEncoder\n+\n+private[clustering] object Encoders {\n+  implicit val vectorEncoder = ExpressionEncoder[Vector]()",
    "line": 24
  }],
  "prId": 20319
}]