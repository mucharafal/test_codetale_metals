[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Should it be in a separate test?\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T20:53:09Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.param.ParamsSuite\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+\n+class RFormulaModelSuite extends SparkFunSuite with MLlibTestSparkContext {\n+  test(\"params\") {\n+    ParamsSuite.checkParams(new RModelFormula())\n+  }\n+\n+  test(\"parse simple formulas\") {\n+    def check(formula: String, response: String, terms: Seq[String]) {\n+      new RModelFormula().setFormula(formula)"
  }, {
    "author": {
      "login": "ericl"
    },
    "body": "I put it here since the parser is basically private to RModelFormula but could be convinced otherwise.\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T23:40:36Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.param.ParamsSuite\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+\n+class RFormulaModelSuite extends SparkFunSuite with MLlibTestSparkContext {\n+  test(\"params\") {\n+    ParamsSuite.checkParams(new RModelFormula())\n+  }\n+\n+  test(\"parse simple formulas\") {\n+    def check(formula: String, response: String, terms: Seq[String]) {\n+      new RModelFormula().setFormula(formula)"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Whether to test private class or not might result much longer discussion:) In MLlib, usually we expose few public APIs, while the implementation might consist of several pieces. It is useful to test each piece individually though they are not public. For example, in ALS, https://github.com/apache/spark/blob/master/mllib/src/test/scala/org/apache/spark/ml/recommendation/ALSSuite.scala#L53, it is hard to make useful unit tests only on public API without unit testing individual components.\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-15T03:38:15Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.param.ParamsSuite\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+\n+class RFormulaModelSuite extends SparkFunSuite with MLlibTestSparkContext {\n+  test(\"params\") {\n+    ParamsSuite.checkParams(new RModelFormula())\n+  }\n+\n+  test(\"parse simple formulas\") {\n+    def check(formula: String, response: String, terms: Seq[String]) {\n+      new RModelFormula().setFormula(formula)"
  }],
  "prId": 7381
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`collect` -> `collect()` (because it is an action). `collect` doesn't really guarantee the ordering. So it would be nice to put the expected result along with the input data as extra columns. Then make assertions on each record.\n\nI might be wrong about the statement of `collect` being non-deterministic if there exist multiple partitions. I thought I'd seen this behavior before, but by looking at the code it seems that it does return results in order. Anyway, it would be nice to check equality directly without converting the values to strings.\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T20:53:15Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.param.ParamsSuite\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+\n+class RFormulaModelSuite extends SparkFunSuite with MLlibTestSparkContext {\n+  test(\"params\") {\n+    ParamsSuite.checkParams(new RModelFormula())\n+  }\n+\n+  test(\"parse simple formulas\") {\n+    def check(formula: String, response: String, terms: Seq[String]) {\n+      new RModelFormula().setFormula(formula)\n+      val parsed = RFormulaParser.parse(formula)\n+      assert(parsed.response == response)\n+      assert(parsed.terms == terms)\n+    }\n+    check(\"y ~ x\", \"y\", Seq(\"x\"))\n+    check(\"y ~   ._foo  \", \"y\", Seq(\"._foo\"))\n+    check(\"resp ~ A_VAR + B + c123\", \"resp\", Seq(\"A_VAR\", \"B\", \"c123\"))\n+  }\n+\n+  test(\"transform numeric data\") {\n+    val formula = new RModelFormula().setFormula(\"id ~ v1 + v2\")\n+    val original = sqlContext.createDataFrame(\n+      Seq((0, 1.0, 3.0), (2, 2.0, 5.0))).toDF(\"id\", \"v1\", \"v2\")\n+    val result = formula.transform(original)\n+    val resultSchema = formula.transformSchema(original.schema)\n+    val expected = sqlContext.createDataFrame(\n+      Seq(\n+        (0, 1.0, 3.0, Vectors.dense(Array(1.0, 3.0)), 0.0),\n+        (2, 2.0, 5.0, Vectors.dense(Array(2.0, 5.0)), 2.0))\n+      ).toDF(\"id\", \"v1\", \"v2\", \"features\", \"label\")\n+    assert(result.schema.toString == resultSchema.toString)\n+    assert(resultSchema.toString == expected.schema.toString)\n+    assert(\n+      result.collect.map(_.toString).mkString(\",\") =="
  }, {
    "author": {
      "login": "ericl"
    },
    "body": "Do you know the right way to compare schemas / Rows for equality? It seems equals() is not implemented for either.\n\nAlso added sorted to fix the ordering issue.\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T23:40:40Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.param.ParamsSuite\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+\n+class RFormulaModelSuite extends SparkFunSuite with MLlibTestSparkContext {\n+  test(\"params\") {\n+    ParamsSuite.checkParams(new RModelFormula())\n+  }\n+\n+  test(\"parse simple formulas\") {\n+    def check(formula: String, response: String, terms: Seq[String]) {\n+      new RModelFormula().setFormula(formula)\n+      val parsed = RFormulaParser.parse(formula)\n+      assert(parsed.response == response)\n+      assert(parsed.terms == terms)\n+    }\n+    check(\"y ~ x\", \"y\", Seq(\"x\"))\n+    check(\"y ~   ._foo  \", \"y\", Seq(\"._foo\"))\n+    check(\"resp ~ A_VAR + B + c123\", \"resp\", Seq(\"A_VAR\", \"B\", \"c123\"))\n+  }\n+\n+  test(\"transform numeric data\") {\n+    val formula = new RModelFormula().setFormula(\"id ~ v1 + v2\")\n+    val original = sqlContext.createDataFrame(\n+      Seq((0, 1.0, 3.0), (2, 2.0, 5.0))).toDF(\"id\", \"v1\", \"v2\")\n+    val result = formula.transform(original)\n+    val resultSchema = formula.transformSchema(original.schema)\n+    val expected = sqlContext.createDataFrame(\n+      Seq(\n+        (0, 1.0, 3.0, Vectors.dense(Array(1.0, 3.0)), 0.0),\n+        (2, 2.0, 5.0, Vectors.dense(Array(2.0, 5.0)), 2.0))\n+      ).toDF(\"id\", \"v1\", \"v2\", \"features\", \"label\")\n+    assert(result.schema.toString == resultSchema.toString)\n+    assert(resultSchema.toString == expected.schema.toString)\n+    assert(\n+      result.collect.map(_.toString).mkString(\",\") =="
  }],
  "prId": 7381
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "use `===` instead of `==` (and please update other `==`s)\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-15T01:03:50Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.param.ParamsSuite\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+\n+class RFormulaModelSuite extends SparkFunSuite with MLlibTestSparkContext {\n+  test(\"params\") {\n+    ParamsSuite.checkParams(new RModelFormula())\n+  }\n+\n+  test(\"parse simple formulas\") {\n+    def check(formula: String, response: String, terms: Seq[String]) {\n+      new RModelFormula().setFormula(formula)\n+      val parsed = RFormulaParser.parse(formula)\n+      assert(parsed.response == response)"
  }],
  "prId": 7381
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Maybe it is worth leaving a TODO here for `DataType.equals`.\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-15T01:03:52Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.param.ParamsSuite\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+\n+class RFormulaModelSuite extends SparkFunSuite with MLlibTestSparkContext {\n+  test(\"params\") {\n+    ParamsSuite.checkParams(new RModelFormula())\n+  }\n+\n+  test(\"parse simple formulas\") {\n+    def check(formula: String, response: String, terms: Seq[String]) {\n+      new RModelFormula().setFormula(formula)\n+      val parsed = RFormulaParser.parse(formula)\n+      assert(parsed.response == response)\n+      assert(parsed.terms == terms)\n+    }\n+    check(\"y ~ x\", \"y\", Seq(\"x\"))\n+    check(\"y ~   ._foo  \", \"y\", Seq(\"._foo\"))\n+    check(\"resp ~ A_VAR + B + c123\", \"resp\", Seq(\"A_VAR\", \"B\", \"c123\"))\n+  }\n+\n+  test(\"transform numeric data\") {\n+    val formula = new RModelFormula().setFormula(\"id ~ v1 + v2\")\n+    val original = sqlContext.createDataFrame(\n+      Seq((0, 1.0, 3.0), (2, 2.0, 5.0))).toDF(\"id\", \"v1\", \"v2\")\n+    val result = formula.transform(original)\n+    val resultSchema = formula.transformSchema(original.schema)\n+    val expected = sqlContext.createDataFrame(\n+      Seq(\n+        (0, 1.0, 3.0, Vectors.dense(Array(1.0, 3.0)), 0.0),\n+        (2, 2.0, 5.0, Vectors.dense(Array(2.0, 5.0)), 2.0))\n+      ).toDF(\"id\", \"v1\", \"v2\", \"features\", \"label\")\n+    assert(result.schema.toString == resultSchema.toString)"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Just figured out why. The column output from `VectorAssembler` also contains ML attributes that stores feature names. It is not included in `toString` ... If you compare the JSON value, you see:\n\n``` scala\n\"metadata\":{[\"ml_attr\":{\"attrs\":{\"numeric\":[{\"idx\":0,\"name\":\"v1\"},{\"idx\":1,\"name\":\"v2\"}]},\"num_attrs\":2}]}\n```\n\nfrom the output. So I think the correct TODO message is \"also check metadata\".\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-15T03:32:13Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.param.ParamsSuite\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+\n+class RFormulaModelSuite extends SparkFunSuite with MLlibTestSparkContext {\n+  test(\"params\") {\n+    ParamsSuite.checkParams(new RModelFormula())\n+  }\n+\n+  test(\"parse simple formulas\") {\n+    def check(formula: String, response: String, terms: Seq[String]) {\n+      new RModelFormula().setFormula(formula)\n+      val parsed = RFormulaParser.parse(formula)\n+      assert(parsed.response == response)\n+      assert(parsed.terms == terms)\n+    }\n+    check(\"y ~ x\", \"y\", Seq(\"x\"))\n+    check(\"y ~   ._foo  \", \"y\", Seq(\"._foo\"))\n+    check(\"resp ~ A_VAR + B + c123\", \"resp\", Seq(\"A_VAR\", \"B\", \"c123\"))\n+  }\n+\n+  test(\"transform numeric data\") {\n+    val formula = new RModelFormula().setFormula(\"id ~ v1 + v2\")\n+    val original = sqlContext.createDataFrame(\n+      Seq((0, 1.0, 3.0), (2, 2.0, 5.0))).toDF(\"id\", \"v1\", \"v2\")\n+    val result = formula.transform(original)\n+    val resultSchema = formula.transformSchema(original.schema)\n+    val expected = sqlContext.createDataFrame(\n+      Seq(\n+        (0, 1.0, 3.0, Vectors.dense(Array(1.0, 3.0)), 0.0),\n+        (2, 2.0, 5.0, Vectors.dense(Array(2.0, 5.0)), 2.0))\n+      ).toDF(\"id\", \"v1\", \"v2\", \"features\", \"label\")\n+    assert(result.schema.toString == resultSchema.toString)"
  }, {
    "author": {
      "login": "ericl"
    },
    "body": "I see. Is the metadata important (should we include it in transformSchema)?\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-15T23:43:59Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.param.ParamsSuite\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+\n+class RFormulaModelSuite extends SparkFunSuite with MLlibTestSparkContext {\n+  test(\"params\") {\n+    ParamsSuite.checkParams(new RModelFormula())\n+  }\n+\n+  test(\"parse simple formulas\") {\n+    def check(formula: String, response: String, terms: Seq[String]) {\n+      new RModelFormula().setFormula(formula)\n+      val parsed = RFormulaParser.parse(formula)\n+      assert(parsed.response == response)\n+      assert(parsed.terms == terms)\n+    }\n+    check(\"y ~ x\", \"y\", Seq(\"x\"))\n+    check(\"y ~   ._foo  \", \"y\", Seq(\"._foo\"))\n+    check(\"resp ~ A_VAR + B + c123\", \"resp\", Seq(\"A_VAR\", \"B\", \"c123\"))\n+  }\n+\n+  test(\"transform numeric data\") {\n+    val formula = new RModelFormula().setFormula(\"id ~ v1 + v2\")\n+    val original = sqlContext.createDataFrame(\n+      Seq((0, 1.0, 3.0), (2, 2.0, 5.0))).toDF(\"id\", \"v1\", \"v2\")\n+    val result = formula.transform(original)\n+    val resultSchema = formula.transformSchema(original.schema)\n+    val expected = sqlContext.createDataFrame(\n+      Seq(\n+        (0, 1.0, 3.0, Vectors.dense(Array(1.0, 3.0)), 0.0),\n+        (2, 2.0, 5.0, Vectors.dense(Array(2.0, 5.0)), 2.0))\n+      ).toDF(\"id\", \"v1\", \"v2\", \"features\", \"label\")\n+    assert(result.schema.toString == resultSchema.toString)"
  }],
  "prId": 7381
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "I don't think we need `toString` and `mkString(\",\")`. Maybe `sorted` is not necessary either.\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-15T01:03:54Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.param.ParamsSuite\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+\n+class RFormulaModelSuite extends SparkFunSuite with MLlibTestSparkContext {\n+  test(\"params\") {\n+    ParamsSuite.checkParams(new RModelFormula())\n+  }\n+\n+  test(\"parse simple formulas\") {\n+    def check(formula: String, response: String, terms: Seq[String]) {\n+      new RModelFormula().setFormula(formula)\n+      val parsed = RFormulaParser.parse(formula)\n+      assert(parsed.response == response)\n+      assert(parsed.terms == terms)\n+    }\n+    check(\"y ~ x\", \"y\", Seq(\"x\"))\n+    check(\"y ~   ._foo  \", \"y\", Seq(\"._foo\"))\n+    check(\"resp ~ A_VAR + B + c123\", \"resp\", Seq(\"A_VAR\", \"B\", \"c123\"))\n+  }\n+\n+  test(\"transform numeric data\") {\n+    val formula = new RModelFormula().setFormula(\"id ~ v1 + v2\")\n+    val original = sqlContext.createDataFrame(\n+      Seq((0, 1.0, 3.0), (2, 2.0, 5.0))).toDF(\"id\", \"v1\", \"v2\")\n+    val result = formula.transform(original)\n+    val resultSchema = formula.transformSchema(original.schema)\n+    val expected = sqlContext.createDataFrame(\n+      Seq(\n+        (0, 1.0, 3.0, Vectors.dense(Array(1.0, 3.0)), 0.0),\n+        (2, 2.0, 5.0, Vectors.dense(Array(2.0, 5.0)), 2.0))\n+      ).toDF(\"id\", \"v1\", \"v2\", \"features\", \"label\")\n+    assert(result.schema.toString == resultSchema.toString)\n+    assert(resultSchema.toString == expected.schema.toString)\n+    assert(\n+      result.collect().map(_.toString).sorted.mkString(\",\") =="
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "`assert(result.collect() === expected.collect())` works for me. Note that `===` works but `==` doesn't.\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-15T03:32:18Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.param.ParamsSuite\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+\n+class RFormulaModelSuite extends SparkFunSuite with MLlibTestSparkContext {\n+  test(\"params\") {\n+    ParamsSuite.checkParams(new RModelFormula())\n+  }\n+\n+  test(\"parse simple formulas\") {\n+    def check(formula: String, response: String, terms: Seq[String]) {\n+      new RModelFormula().setFormula(formula)\n+      val parsed = RFormulaParser.parse(formula)\n+      assert(parsed.response == response)\n+      assert(parsed.terms == terms)\n+    }\n+    check(\"y ~ x\", \"y\", Seq(\"x\"))\n+    check(\"y ~   ._foo  \", \"y\", Seq(\"._foo\"))\n+    check(\"resp ~ A_VAR + B + c123\", \"resp\", Seq(\"A_VAR\", \"B\", \"c123\"))\n+  }\n+\n+  test(\"transform numeric data\") {\n+    val formula = new RModelFormula().setFormula(\"id ~ v1 + v2\")\n+    val original = sqlContext.createDataFrame(\n+      Seq((0, 1.0, 3.0), (2, 2.0, 5.0))).toDF(\"id\", \"v1\", \"v2\")\n+    val result = formula.transform(original)\n+    val resultSchema = formula.transformSchema(original.schema)\n+    val expected = sqlContext.createDataFrame(\n+      Seq(\n+        (0, 1.0, 3.0, Vectors.dense(Array(1.0, 3.0)), 0.0),\n+        (2, 2.0, 5.0, Vectors.dense(Array(2.0, 5.0)), 2.0))\n+      ).toDF(\"id\", \"v1\", \"v2\", \"features\", \"label\")\n+    assert(result.schema.toString == resultSchema.toString)\n+    assert(resultSchema.toString == expected.schema.toString)\n+    assert(\n+      result.collect().map(_.toString).sorted.mkString(\",\") =="
  }, {
    "author": {
      "login": "ericl"
    },
    "body": "== works for me, with the expected diffs?\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-15T23:44:30Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.param.ParamsSuite\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+\n+class RFormulaModelSuite extends SparkFunSuite with MLlibTestSparkContext {\n+  test(\"params\") {\n+    ParamsSuite.checkParams(new RModelFormula())\n+  }\n+\n+  test(\"parse simple formulas\") {\n+    def check(formula: String, response: String, terms: Seq[String]) {\n+      new RModelFormula().setFormula(formula)\n+      val parsed = RFormulaParser.parse(formula)\n+      assert(parsed.response == response)\n+      assert(parsed.terms == terms)\n+    }\n+    check(\"y ~ x\", \"y\", Seq(\"x\"))\n+    check(\"y ~   ._foo  \", \"y\", Seq(\"._foo\"))\n+    check(\"resp ~ A_VAR + B + c123\", \"resp\", Seq(\"A_VAR\", \"B\", \"c123\"))\n+  }\n+\n+  test(\"transform numeric data\") {\n+    val formula = new RModelFormula().setFormula(\"id ~ v1 + v2\")\n+    val original = sqlContext.createDataFrame(\n+      Seq((0, 1.0, 3.0), (2, 2.0, 5.0))).toDF(\"id\", \"v1\", \"v2\")\n+    val result = formula.transform(original)\n+    val resultSchema = formula.transformSchema(original.schema)\n+    val expected = sqlContext.createDataFrame(\n+      Seq(\n+        (0, 1.0, 3.0, Vectors.dense(Array(1.0, 3.0)), 0.0),\n+        (2, 2.0, 5.0, Vectors.dense(Array(2.0, 5.0)), 2.0))\n+      ).toDF(\"id\", \"v1\", \"v2\", \"features\", \"label\")\n+    assert(result.schema.toString == resultSchema.toString)\n+    assert(resultSchema.toString == expected.schema.toString)\n+    assert(\n+      result.collect().map(_.toString).sorted.mkString(\",\") =="
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "`===` doesn't require `toSeq` to work. I think it is useful to use `===` everywhere in tests, just to make the code consistent. We can do this in next PR.\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-16T03:30:01Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.param.ParamsSuite\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+\n+class RFormulaModelSuite extends SparkFunSuite with MLlibTestSparkContext {\n+  test(\"params\") {\n+    ParamsSuite.checkParams(new RModelFormula())\n+  }\n+\n+  test(\"parse simple formulas\") {\n+    def check(formula: String, response: String, terms: Seq[String]) {\n+      new RModelFormula().setFormula(formula)\n+      val parsed = RFormulaParser.parse(formula)\n+      assert(parsed.response == response)\n+      assert(parsed.terms == terms)\n+    }\n+    check(\"y ~ x\", \"y\", Seq(\"x\"))\n+    check(\"y ~   ._foo  \", \"y\", Seq(\"._foo\"))\n+    check(\"resp ~ A_VAR + B + c123\", \"resp\", Seq(\"A_VAR\", \"B\", \"c123\"))\n+  }\n+\n+  test(\"transform numeric data\") {\n+    val formula = new RModelFormula().setFormula(\"id ~ v1 + v2\")\n+    val original = sqlContext.createDataFrame(\n+      Seq((0, 1.0, 3.0), (2, 2.0, 5.0))).toDF(\"id\", \"v1\", \"v2\")\n+    val result = formula.transform(original)\n+    val resultSchema = formula.transformSchema(original.schema)\n+    val expected = sqlContext.createDataFrame(\n+      Seq(\n+        (0, 1.0, 3.0, Vectors.dense(Array(1.0, 3.0)), 0.0),\n+        (2, 2.0, 5.0, Vectors.dense(Array(2.0, 5.0)), 2.0))\n+      ).toDF(\"id\", \"v1\", \"v2\", \"features\", \"label\")\n+    assert(result.schema.toString == resultSchema.toString)\n+    assert(resultSchema.toString == expected.schema.toString)\n+    assert(\n+      result.collect().map(_.toString).sorted.mkString(\",\") =="
  }],
  "prId": 7381
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "remove unused imports\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-15T03:32:01Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.param.ParamsSuite\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._"
  }],
  "prId": 7381
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`RFormulaModelSuite` -> `RModelFormulaSuite`\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-15T03:32:02Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.param.ParamsSuite\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+\n+class RFormulaModelSuite extends SparkFunSuite with MLlibTestSparkContext {"
  }],
  "prId": 7381
}]