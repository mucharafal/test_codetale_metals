[{
  "comments": [{
    "author": {
      "login": "WeichenXu123"
    },
    "body": "Why not use a loop to check inner exception ? So it can check any deep level exception msg.\r\nMaybe we cannot make sure the possible root exception max level (even in master version)\r\n@jkbradley What do you think ?",
    "commit": "7544cb427cbbb1a0186ad5e16cf4f09fee0c0dbf",
    "createdAt": "2018-03-19T10:05:22Z",
    "diffHunk": "@@ -119,9 +119,15 @@ trait MLTest extends StreamTest with TempDirectory { self: Suite =>\n     expectedMessagePart : String,\n     firstResultCol: String) {\n \n+    def hasExpectedMessageDirectly(exception: Throwable): Boolean =\n+      exception.getMessage.contains(expectedMessagePart)\n+\n     def hasExpectedMessage(exception: Throwable): Boolean =\n-      exception.getMessage.contains(expectedMessagePart) ||\n-        (exception.getCause != null && exception.getCause.getMessage.contains(expectedMessagePart))\n+      hasExpectedMessageDirectly(exception) || (\n+        exception.getCause != null && (\n+          hasExpectedMessageDirectly(exception.getCause) || (\n+            exception.getCause.getCause != null &&\n+            hasExpectedMessageDirectly(exception.getCause.getCause))))",
    "line": 14
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "I don't think we need to loop further.  If the real message is buried this deep, that could be considered a problem in and of itself.",
    "commit": "7544cb427cbbb1a0186ad5e16cf4f09fee0c0dbf",
    "createdAt": "2018-03-19T17:40:53Z",
    "diffHunk": "@@ -119,9 +119,15 @@ trait MLTest extends StreamTest with TempDirectory { self: Suite =>\n     expectedMessagePart : String,\n     firstResultCol: String) {\n \n+    def hasExpectedMessageDirectly(exception: Throwable): Boolean =\n+      exception.getMessage.contains(expectedMessagePart)\n+\n     def hasExpectedMessage(exception: Throwable): Boolean =\n-      exception.getMessage.contains(expectedMessagePart) ||\n-        (exception.getCause != null && exception.getCause.getMessage.contains(expectedMessagePart))\n+      hasExpectedMessageDirectly(exception) || (\n+        exception.getCause != null && (\n+          hasExpectedMessageDirectly(exception.getCause) || (\n+            exception.getCause.getCause != null &&\n+            hasExpectedMessageDirectly(exception.getCause.getCause))))",
    "line": 14
  }],
  "prId": 20852
}]