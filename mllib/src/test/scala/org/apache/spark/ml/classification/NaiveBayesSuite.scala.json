[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Use 2 vals instead of a var\n",
    "commit": "449f824fa633ea5b742af8cc8a078cd1561178f5",
    "createdAt": "2016-04-28T18:06:26Z",
    "diffHunk": "@@ -193,6 +195,30 @@ class NaiveBayesSuite extends SparkFunSuite with MLlibTestSparkContext with Defa\n         assert(expected.theta === actual.theta)\n       }\n   }\n+\n+  test(\"copy label column metadata to prediction column\") {\n+    val data = sc.parallelize(Seq((Vectors.dense(0.0), \"a\"), (Vectors.dense(1.0), \"b\"),\n+      (Vectors.dense(2.0), \"c\"), (Vectors.dense(3.0), \"a\"), (Vectors.dense(4.0), \"a\")), 2)\n+    var df = sqlContext.createDataFrame(data).toDF(\"features\", \"label\")"
  }],
  "prId": 12066
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Check that the \"name\" field matches predictionCol too\n",
    "commit": "449f824fa633ea5b742af8cc8a078cd1561178f5",
    "createdAt": "2016-04-28T18:06:47Z",
    "diffHunk": "@@ -193,6 +195,30 @@ class NaiveBayesSuite extends SparkFunSuite with MLlibTestSparkContext with Defa\n         assert(expected.theta === actual.theta)\n       }\n   }\n+\n+  test(\"copy label column metadata to prediction column\") {\n+    val data = sc.parallelize(Seq((Vectors.dense(0.0), \"a\"), (Vectors.dense(1.0), \"b\"),\n+      (Vectors.dense(2.0), \"c\"), (Vectors.dense(3.0), \"a\"), (Vectors.dense(4.0), \"a\")), 2)\n+    var df = sqlContext.createDataFrame(data).toDF(\"features\", \"label\")\n+\n+    val indexer = new StringIndexer()\n+      .setInputCol(\"label\")\n+      .setOutputCol(\"labelIndex\")\n+      .fit(df)\n+    df = indexer.transform(df)\n+\n+    val naiveBayes = new NaiveBayes().setLabelCol(\"labelIndex\")\n+    val naiveBayesModel = naiveBayes.fit(df)\n+    df = naiveBayesModel.transform(df)\n+\n+    val schema = df.schema\n+    val labelAttr = Attribute.fromStructField(schema(naiveBayesModel.getLabelCol))\n+      .asInstanceOf[NominalAttribute]\n+    val predictionAttr = Attribute.fromStructField(schema(naiveBayesModel.getPredictionCol))\n+      .asInstanceOf[NominalAttribute]\n+    assert(labelAttr.attrType === predictionAttr.attrType)",
    "line": 34
  }],
  "prId": 12066
}]