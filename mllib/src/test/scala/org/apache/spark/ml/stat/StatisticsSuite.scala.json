[{
  "comments": [{
    "author": {
      "login": "imatiach-msft"
    },
    "body": "these are very nice methods!  would it be possible to move them to a place where every test suite could use them?  Specifically the matrixApproxEqual.",
    "commit": "7c540e5080aa10894d33cfa9924b65bd551375ab",
    "createdAt": "2017-03-01T18:21:12Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.stat\n+\n+import breeze.linalg.{DenseMatrix => BDM, Matrix => BM}\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.ml.linalg.Matrix\n+import org.apache.spark.ml.linalg.Vectors\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.sql.{DataFrame, Row}\n+\n+\n+class StatisticsSuite extends SparkFunSuite with MLlibTestSparkContext with Logging {\n+\n+  import StatisticsSuite._\n+\n+  val xData = Array(1.0, 0.0, -2.0)\n+  val yData = Array(4.0, 5.0, 3.0)\n+  val zeros = new Array[Double](3)\n+  val data = Seq(\n+    Vectors.dense(1.0, 0.0, 0.0, -2.0),\n+    Vectors.dense(4.0, 5.0, 0.0, 3.0),\n+    Vectors.dense(6.0, 7.0, 0.0, 8.0),\n+    Vectors.dense(9.0, 0.0, 0.0, 1.0)\n+  )\n+\n+  private def X = spark.createDataFrame(data.map(Tuple1.apply)).toDF(\"features\")\n+\n+  private def extract(df: DataFrame): BDM[Double] = {\n+    val Array(Row(mat: Matrix)) = df.collect()\n+    mat.asBreeze.toDenseMatrix\n+  }\n+\n+\n+  test(\"corr(X) default, pearson\") {\n+    val defaultMat = Statistics.corr(X, \"features\")\n+    val pearsonMat = Statistics.corr(X, \"features\", \"pearson\")\n+    // scalastyle:off\n+    val expected = BDM(\n+      (1.00000000, 0.05564149, Double.NaN, 0.4004714),\n+      (0.05564149, 1.00000000, Double.NaN, 0.9135959),\n+      (Double.NaN, Double.NaN, 1.00000000, Double.NaN),\n+      (0.40047142, 0.91359586, Double.NaN, 1.0000000))\n+    // scalastyle:on\n+\n+    assert(matrixApproxEqual(extract(defaultMat), expected))\n+    assert(matrixApproxEqual(extract(pearsonMat), expected))\n+  }\n+\n+  test(\"corr(X) spearman\") {\n+    val spearmanMat = Statistics.corr(X, \"features\", \"spearman\")\n+    // scalastyle:off\n+    val expected = BDM(\n+      (1.0000000,  0.1054093,  Double.NaN, 0.4000000),\n+      (0.1054093,  1.0000000,  Double.NaN, 0.9486833),\n+      (Double.NaN, Double.NaN, 1.00000000, Double.NaN),\n+      (0.4000000,  0.9486833,  Double.NaN, 1.0000000))\n+    // scalastyle:on\n+    assert(matrixApproxEqual(extract(spearmanMat), expected))\n+  }\n+\n+}\n+\n+\n+object StatisticsSuite extends Logging {\n+\n+  def approxEqual(v1: Double, v2: Double, threshold: Double = 1e-6): Boolean = {"
  }, {
    "author": {
      "login": "thunterdb"
    },
    "body": "Moved",
    "commit": "7c540e5080aa10894d33cfa9924b65bd551375ab",
    "createdAt": "2017-03-15T23:25:12Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.stat\n+\n+import breeze.linalg.{DenseMatrix => BDM, Matrix => BM}\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.ml.linalg.Matrix\n+import org.apache.spark.ml.linalg.Vectors\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.sql.{DataFrame, Row}\n+\n+\n+class StatisticsSuite extends SparkFunSuite with MLlibTestSparkContext with Logging {\n+\n+  import StatisticsSuite._\n+\n+  val xData = Array(1.0, 0.0, -2.0)\n+  val yData = Array(4.0, 5.0, 3.0)\n+  val zeros = new Array[Double](3)\n+  val data = Seq(\n+    Vectors.dense(1.0, 0.0, 0.0, -2.0),\n+    Vectors.dense(4.0, 5.0, 0.0, 3.0),\n+    Vectors.dense(6.0, 7.0, 0.0, 8.0),\n+    Vectors.dense(9.0, 0.0, 0.0, 1.0)\n+  )\n+\n+  private def X = spark.createDataFrame(data.map(Tuple1.apply)).toDF(\"features\")\n+\n+  private def extract(df: DataFrame): BDM[Double] = {\n+    val Array(Row(mat: Matrix)) = df.collect()\n+    mat.asBreeze.toDenseMatrix\n+  }\n+\n+\n+  test(\"corr(X) default, pearson\") {\n+    val defaultMat = Statistics.corr(X, \"features\")\n+    val pearsonMat = Statistics.corr(X, \"features\", \"pearson\")\n+    // scalastyle:off\n+    val expected = BDM(\n+      (1.00000000, 0.05564149, Double.NaN, 0.4004714),\n+      (0.05564149, 1.00000000, Double.NaN, 0.9135959),\n+      (Double.NaN, Double.NaN, 1.00000000, Double.NaN),\n+      (0.40047142, 0.91359586, Double.NaN, 1.0000000))\n+    // scalastyle:on\n+\n+    assert(matrixApproxEqual(extract(defaultMat), expected))\n+    assert(matrixApproxEqual(extract(pearsonMat), expected))\n+  }\n+\n+  test(\"corr(X) spearman\") {\n+    val spearmanMat = Statistics.corr(X, \"features\", \"spearman\")\n+    // scalastyle:off\n+    val expected = BDM(\n+      (1.0000000,  0.1054093,  Double.NaN, 0.4000000),\n+      (0.1054093,  1.0000000,  Double.NaN, 0.9486833),\n+      (Double.NaN, Double.NaN, 1.00000000, Double.NaN),\n+      (0.4000000,  0.9486833,  Double.NaN, 1.0000000))\n+    // scalastyle:on\n+    assert(matrixApproxEqual(extract(spearmanMat), expected))\n+  }\n+\n+}\n+\n+\n+object StatisticsSuite extends Logging {\n+\n+  def approxEqual(v1: Double, v2: Double, threshold: Double = 1e-6): Boolean = {"
  }],
  "prId": 17108
}, {
  "comments": [{
    "author": {
      "login": "imatiach-msft"
    },
    "body": "what is the error that the scalastyle gives?  I wish there was some way to avoid turning it off.",
    "commit": "7c540e5080aa10894d33cfa9924b65bd551375ab",
    "createdAt": "2017-03-01T18:31:51Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.stat\n+\n+import breeze.linalg.{DenseMatrix => BDM, Matrix => BM}\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.ml.linalg.Matrix\n+import org.apache.spark.ml.linalg.Vectors\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.sql.{DataFrame, Row}\n+\n+\n+class StatisticsSuite extends SparkFunSuite with MLlibTestSparkContext with Logging {\n+\n+  import StatisticsSuite._\n+\n+  val xData = Array(1.0, 0.0, -2.0)\n+  val yData = Array(4.0, 5.0, 3.0)\n+  val zeros = new Array[Double](3)\n+  val data = Seq(\n+    Vectors.dense(1.0, 0.0, 0.0, -2.0),\n+    Vectors.dense(4.0, 5.0, 0.0, 3.0),\n+    Vectors.dense(6.0, 7.0, 0.0, 8.0),\n+    Vectors.dense(9.0, 0.0, 0.0, 1.0)\n+  )\n+\n+  private def X = spark.createDataFrame(data.map(Tuple1.apply)).toDF(\"features\")\n+\n+  private def extract(df: DataFrame): BDM[Double] = {\n+    val Array(Row(mat: Matrix)) = df.collect()\n+    mat.asBreeze.toDenseMatrix\n+  }\n+\n+\n+  test(\"corr(X) default, pearson\") {\n+    val defaultMat = Statistics.corr(X, \"features\")\n+    val pearsonMat = Statistics.corr(X, \"features\", \"pearson\")\n+    // scalastyle:off"
  }, {
    "author": {
      "login": "thunterdb"
    },
    "body": "The problem is the alignment of the values, which we realize by padding with `0`'s.",
    "commit": "7c540e5080aa10894d33cfa9924b65bd551375ab",
    "createdAt": "2017-03-15T23:17:53Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.stat\n+\n+import breeze.linalg.{DenseMatrix => BDM, Matrix => BM}\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.ml.linalg.Matrix\n+import org.apache.spark.ml.linalg.Vectors\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.sql.{DataFrame, Row}\n+\n+\n+class StatisticsSuite extends SparkFunSuite with MLlibTestSparkContext with Logging {\n+\n+  import StatisticsSuite._\n+\n+  val xData = Array(1.0, 0.0, -2.0)\n+  val yData = Array(4.0, 5.0, 3.0)\n+  val zeros = new Array[Double](3)\n+  val data = Seq(\n+    Vectors.dense(1.0, 0.0, 0.0, -2.0),\n+    Vectors.dense(4.0, 5.0, 0.0, 3.0),\n+    Vectors.dense(6.0, 7.0, 0.0, 8.0),\n+    Vectors.dense(9.0, 0.0, 0.0, 1.0)\n+  )\n+\n+  private def X = spark.createDataFrame(data.map(Tuple1.apply)).toDF(\"features\")\n+\n+  private def extract(df: DataFrame): BDM[Double] = {\n+    val Array(Row(mat: Matrix)) = df.collect()\n+    mat.asBreeze.toDenseMatrix\n+  }\n+\n+\n+  test(\"corr(X) default, pearson\") {\n+    val defaultMat = Statistics.corr(X, \"features\")\n+    val pearsonMat = Statistics.corr(X, \"features\", \"pearson\")\n+    // scalastyle:off"
  }],
  "prId": 17108
}]