[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "remove extra empty line\n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-08-31T21:33:27Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source\n+\n+import java.io.File\n+\n+import com.google.common.base.Charsets\n+import com.google.common.io.Files\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.source.libsvm._\n+import org.apache.spark.mllib.linalg.{SparseVector, Vectors, DenseVector}\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.util.Utils\n+\n+class LibSVMRelationSuite extends SparkFunSuite with MLlibTestSparkContext {\n+  var path: String = _\n+\n+  override def beforeAll(): Unit = {\n+    super.beforeAll()\n+    val lines =\n+      \"\"\"\n+        |1 1:1.0 3:2.0 5:3.0\n+        |0\n+        |0 2:4.0 4:5.0 6:6.0\n+      \"\"\".stripMargin\n+    val tempDir = Utils.createTempDir()\n+    val file = new File(tempDir.getPath, \"part-00000\")\n+    Files.write(lines, file, Charsets.US_ASCII)\n+    path = tempDir.toURI.toString\n+  }\n+\n+  test(\"select as sparse vector\") {\n+    val df = sqlContext.read.options(Map(\"numFeatures\" -> \"6\")).libsvm(path)\n+    assert(df.columns(0) == \"label\")\n+    assert(df.columns(1) == \"features\")\n+    val row1 = df.first()\n+    assert(row1.getDouble(0) == 1.0)\n+    assert(row1.getAs[SparseVector](1) == Vectors.sparse(6, Seq((0, 1.0), (2, 2.0), (4, 3.0))))\n+  }\n+\n+  test(\"select as dense vector\") {\n+    val df = sqlContext.read.options(Map(\"numFeatures\" -> \"6\", \"featuresType\" -> \"dense\"))\n+      .libsvm(path)\n+    assert(df.columns(0) == \"label\")\n+    assert(df.columns(1) == \"features\")\n+    assert(df.count() == 3)\n+    val row1 = df.first()\n+    assert(row1.getDouble(0) == 1.0)\n+    assert(row1.getAs[DenseVector](1) == Vectors.dense(1.0, 0.0, 2.0, 0.0, 3.0, 0.0))\n+  }\n+\n+  test(\"select without any option\") {\n+    val df = sqlContext.read.libsvm(path)\n+    val row1 = df.first()\n+    assert(row1.getAs[SparseVector](1) == Vectors.sparse(6, Seq((0, 1.0), (2, 2.0), (4, 3.0))))\n+  }\n+\n+"
  }],
  "prId": 8537
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "We can remove `\"numFeatures\" -> 6` in one test.\n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-09-04T15:56:29Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source\n+\n+import java.io.File\n+\n+import com.google.common.base.Charsets\n+import com.google.common.io.Files\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.source.libsvm._\n+import org.apache.spark.mllib.linalg.{SparseVector, Vectors, DenseVector}\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.util.Utils\n+\n+class LibSVMRelationSuite extends SparkFunSuite with MLlibTestSparkContext {\n+  var path: String = _\n+\n+  override def beforeAll(): Unit = {\n+    super.beforeAll()\n+    val lines =\n+      \"\"\"\n+        |1 1:1.0 3:2.0 5:3.0\n+        |0\n+        |0 2:4.0 4:5.0 6:6.0\n+      \"\"\".stripMargin\n+    val tempDir = Utils.createTempDir()\n+    val file = new File(tempDir.getPath, \"part-00000\")\n+    Files.write(lines, file, Charsets.US_ASCII)\n+    path = tempDir.toURI.toString\n+  }\n+\n+  test(\"select as sparse vector\") {\n+    val df = sqlContext.read.options(Map(\"numFeatures\" -> \"6\")).libsvm(path)"
  }],
  "prId": 8537
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "This doesn't verify the result is a sparse vector because runtime type erasure. We need\n\n``` scala\nval v = row1.getAs[SparseVector](1)\nassert(v == Vectors.sparse(...))\n```\n\nto force check.\n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-09-04T15:56:31Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source\n+\n+import java.io.File\n+\n+import com.google.common.base.Charsets\n+import com.google.common.io.Files\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.source.libsvm._\n+import org.apache.spark.mllib.linalg.{SparseVector, Vectors, DenseVector}\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.util.Utils\n+\n+class LibSVMRelationSuite extends SparkFunSuite with MLlibTestSparkContext {\n+  var path: String = _\n+\n+  override def beforeAll(): Unit = {\n+    super.beforeAll()\n+    val lines =\n+      \"\"\"\n+        |1 1:1.0 3:2.0 5:3.0\n+        |0\n+        |0 2:4.0 4:5.0 6:6.0\n+      \"\"\".stripMargin\n+    val tempDir = Utils.createTempDir()\n+    val file = new File(tempDir.getPath, \"part-00000\")\n+    Files.write(lines, file, Charsets.US_ASCII)\n+    path = tempDir.toURI.toString\n+  }\n+\n+  test(\"select as sparse vector\") {\n+    val df = sqlContext.read.options(Map(\"numFeatures\" -> \"6\")).libsvm(path)\n+    assert(df.columns(0) == \"label\")\n+    assert(df.columns(1) == \"features\")\n+    val row1 = df.first()\n+    assert(row1.getDouble(0) == 1.0)\n+    assert(row1.getAs[SparseVector](1) == Vectors.sparse(6, Seq((0, 1.0), (2, 2.0), (4, 3.0))))"
  }],
  "prId": 8537
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Should add another test that sets `numFeatures` to a larger number and verify it.\n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-09-04T15:56:32Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source\n+\n+import java.io.File\n+\n+import com.google.common.base.Charsets\n+import com.google.common.io.Files\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.source.libsvm._\n+import org.apache.spark.mllib.linalg.{SparseVector, Vectors, DenseVector}\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.util.Utils\n+\n+class LibSVMRelationSuite extends SparkFunSuite with MLlibTestSparkContext {\n+  var path: String = _\n+\n+  override def beforeAll(): Unit = {\n+    super.beforeAll()\n+    val lines =\n+      \"\"\"\n+        |1 1:1.0 3:2.0 5:3.0\n+        |0\n+        |0 2:4.0 4:5.0 6:6.0\n+      \"\"\".stripMargin\n+    val tempDir = Utils.createTempDir()\n+    val file = new File(tempDir.getPath, \"part-00000\")\n+    Files.write(lines, file, Charsets.US_ASCII)\n+    path = tempDir.toURI.toString\n+  }\n+\n+  test(\"select as sparse vector\") {\n+    val df = sqlContext.read.options(Map(\"numFeatures\" -> \"6\")).libsvm(path)\n+    assert(df.columns(0) == \"label\")\n+    assert(df.columns(1) == \"features\")\n+    val row1 = df.first()\n+    assert(row1.getDouble(0) == 1.0)\n+    assert(row1.getAs[SparseVector](1) == Vectors.sparse(6, Seq((0, 1.0), (2, 2.0), (4, 3.0))))\n+  }\n+\n+  test(\"select as dense vector\") {\n+    val df = sqlContext.read.options(Map(\"numFeatures\" -> \"6\", \"featuresType\" -> \"dense\"))\n+      .libsvm(path)\n+    assert(df.columns(0) == \"label\")\n+    assert(df.columns(1) == \"features\")\n+    assert(df.count() == 3)\n+    val row1 = df.first()\n+    assert(row1.getDouble(0) == 1.0)\n+    assert(row1.getAs[DenseVector](1) == Vectors.dense(1.0, 0.0, 2.0, 0.0, 3.0, 0.0))\n+  }\n+\n+  test(\"select without any option\") {"
  }],
  "prId": 8537
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "ditto. organize imports\n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-09-08T15:34:35Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source\n+\n+import java.io.File\n+\n+import com.google.common.base.Charsets\n+import com.google.common.io.Files\n+import org.apache.spark.SparkFunSuite"
  }],
  "prId": 8537
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`100` is the correct number of features. We can use the same data file created in `beforeAll` but set `numFeatures` greater than `6` and verify the output vector size. It is not necessary to create a separate file.\n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-09-08T15:35:11Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source\n+\n+import java.io.File\n+\n+import com.google.common.base.Charsets\n+import com.google.common.io.Files\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.source.libsvm._\n+import org.apache.spark.mllib.linalg.{SparseVector, Vectors, DenseVector}\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.util.Utils\n+\n+class LibSVMRelationSuite extends SparkFunSuite with MLlibTestSparkContext {\n+  var path: String = _\n+\n+  override def beforeAll(): Unit = {\n+    super.beforeAll()\n+    val lines =\n+      \"\"\"\n+        |1 1:1.0 3:2.0 5:3.0\n+        |0\n+        |0 2:4.0 4:5.0 6:6.0\n+      \"\"\".stripMargin\n+    val tempDir = Utils.createTempDir()\n+    val file = new File(tempDir.getPath, \"part-00000\")\n+    Files.write(lines, file, Charsets.US_ASCII)\n+    path = tempDir.toURI.toString\n+  }\n+\n+  test(\"select as sparse vector\") {\n+    val df = sqlContext.read.format(\"libsvm\").load(path)\n+    assert(df.columns(0) == \"label\")\n+    assert(df.columns(1) == \"features\")\n+    val row1 = df.first()\n+    assert(row1.getDouble(0) == 1.0)\n+    val v = row1.getAs[SparseVector](1)\n+    assert(v == Vectors.sparse(6, Seq((0, 1.0), (2, 2.0), (4, 3.0))))\n+  }\n+\n+  test(\"select as dense vector\") {\n+    val df = sqlContext.read.format(\"libsvm\").options(Map(\"vectorType\" -> \"dense\"))\n+      .load(path)\n+    assert(df.columns(0) == \"label\")\n+    assert(df.columns(1) == \"features\")\n+    assert(df.count() == 3)\n+    val row1 = df.first()\n+    assert(row1.getDouble(0) == 1.0)\n+    val v = row1.getAs[DenseVector](1)\n+    assert(v == Vectors.dense(1.0, 0.0, 2.0, 0.0, 3.0, 0.0))\n+  }\n+\n+  test(\"select long vector with specifying the number of features\") {\n+    val lines =\n+      \"\"\"\n+        |1 1:1 10:2 20:3 30:4 40:5 50:6 60:7 70:8 80:9 90:10 100:1\n+        |0 1:1 10:10 20:9 30:8 40:7 50:6 60:5 70:4 80:3 90:2 100:1\n+      \"\"\".stripMargin"
  }, {
    "author": {
      "login": "Lewuathe"
    },
    "body": "So sorry, I misunderstood that. Thank you.\n",
    "commit": "986999d9d878ff2e52e506a10ebc0abe715f6871",
    "createdAt": "2015-09-09T00:37:45Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source\n+\n+import java.io.File\n+\n+import com.google.common.base.Charsets\n+import com.google.common.io.Files\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.source.libsvm._\n+import org.apache.spark.mllib.linalg.{SparseVector, Vectors, DenseVector}\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.util.Utils\n+\n+class LibSVMRelationSuite extends SparkFunSuite with MLlibTestSparkContext {\n+  var path: String = _\n+\n+  override def beforeAll(): Unit = {\n+    super.beforeAll()\n+    val lines =\n+      \"\"\"\n+        |1 1:1.0 3:2.0 5:3.0\n+        |0\n+        |0 2:4.0 4:5.0 6:6.0\n+      \"\"\".stripMargin\n+    val tempDir = Utils.createTempDir()\n+    val file = new File(tempDir.getPath, \"part-00000\")\n+    Files.write(lines, file, Charsets.US_ASCII)\n+    path = tempDir.toURI.toString\n+  }\n+\n+  test(\"select as sparse vector\") {\n+    val df = sqlContext.read.format(\"libsvm\").load(path)\n+    assert(df.columns(0) == \"label\")\n+    assert(df.columns(1) == \"features\")\n+    val row1 = df.first()\n+    assert(row1.getDouble(0) == 1.0)\n+    val v = row1.getAs[SparseVector](1)\n+    assert(v == Vectors.sparse(6, Seq((0, 1.0), (2, 2.0), (4, 3.0))))\n+  }\n+\n+  test(\"select as dense vector\") {\n+    val df = sqlContext.read.format(\"libsvm\").options(Map(\"vectorType\" -> \"dense\"))\n+      .load(path)\n+    assert(df.columns(0) == \"label\")\n+    assert(df.columns(1) == \"features\")\n+    assert(df.count() == 3)\n+    val row1 = df.first()\n+    assert(row1.getDouble(0) == 1.0)\n+    val v = row1.getAs[DenseVector](1)\n+    assert(v == Vectors.dense(1.0, 0.0, 2.0, 0.0, 3.0, 0.0))\n+  }\n+\n+  test(\"select long vector with specifying the number of features\") {\n+    val lines =\n+      \"\"\"\n+        |1 1:1 10:2 20:3 30:4 40:5 50:6 60:7 70:8 80:9 90:10 100:1\n+        |0 1:1 10:10 20:9 30:8 40:7 50:6 60:5 70:4 80:3 90:2 100:1\n+      \"\"\".stripMargin"
  }],
  "prId": 8537
}]