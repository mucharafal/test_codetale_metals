[{
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "Are these not tested in https://github.com/apache/spark/blob/master/mllib/src/test/scala/org/apache/spark/mllib/evaluation/MulticlassMetricsSuite.scala?\n",
    "commit": "00fd2c8064d407eb5b47da583362fbd6c6d441cd",
    "createdAt": "2016-05-30T09:12:17Z",
    "diffHunk": "@@ -40,4 +41,51 @@ class MulticlassClassificationEvaluatorSuite\n   test(\"should support all NumericType labels and not support other types\") {\n     MLTestingUtils.checkNumericTypes(new MulticlassClassificationEvaluator, spark)\n   }\n+\n+  test(\"Multiclass Classification Evaluator\") {\n+    val labelAndScores = spark.createDataFrame(Seq(",
    "line": 14
  }, {
    "author": {
      "login": "zhengruifeng"
    },
    "body": "Yes. But it maybe needed if the implement change in the future (such as dont call `mllib.MuticlassMetrics`)\nIn regard to regression metrics, both `ml.RegressionEvaluatorSuite` and `mllib.RegressionMetricsSuite` test the correctness\n",
    "commit": "00fd2c8064d407eb5b47da583362fbd6c6d441cd",
    "createdAt": "2016-05-30T09:22:47Z",
    "diffHunk": "@@ -40,4 +41,51 @@ class MulticlassClassificationEvaluatorSuite\n   test(\"should support all NumericType labels and not support other types\") {\n     MLTestingUtils.checkNumericTypes(new MulticlassClassificationEvaluator, spark)\n   }\n+\n+  test(\"Multiclass Classification Evaluator\") {\n+    val labelAndScores = spark.createDataFrame(Seq(",
    "line": 14
  }, {
    "author": {
      "login": "MLnick"
    },
    "body": "True - but it is not done for `BinaryClassificationEvaluatorSuite` - I guess we could add tests for binary too. At some point it is likely that the impl will be moved and amended in `ml`. But the tests could also be added if/when that happens.\n\nSo this is a neutral change, not really necessary right now. \n\nPerhaps let's revisit after 2.0?\n",
    "commit": "00fd2c8064d407eb5b47da583362fbd6c6d441cd",
    "createdAt": "2016-05-30T09:40:27Z",
    "diffHunk": "@@ -40,4 +41,51 @@ class MulticlassClassificationEvaluatorSuite\n   test(\"should support all NumericType labels and not support other types\") {\n     MLTestingUtils.checkNumericTypes(new MulticlassClassificationEvaluator, spark)\n   }\n+\n+  test(\"Multiclass Classification Evaluator\") {\n+    val labelAndScores = spark.createDataFrame(Seq(",
    "line": 14
  }, {
    "author": {
      "login": "zhengruifeng"
    },
    "body": "Agreed. I will add test for BinaryClassification. \nLet's revisit it after 2.0\n",
    "commit": "00fd2c8064d407eb5b47da583362fbd6c6d441cd",
    "createdAt": "2016-05-30T09:45:00Z",
    "diffHunk": "@@ -40,4 +41,51 @@ class MulticlassClassificationEvaluatorSuite\n   test(\"should support all NumericType labels and not support other types\") {\n     MLTestingUtils.checkNumericTypes(new MulticlassClassificationEvaluator, spark)\n   }\n+\n+  test(\"Multiclass Classification Evaluator\") {\n+    val labelAndScores = spark.createDataFrame(Seq(",
    "line": 14
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "OK, so close this PR for now? it can be reopened later\n",
    "commit": "00fd2c8064d407eb5b47da583362fbd6c6d441cd",
    "createdAt": "2016-05-30T14:15:03Z",
    "diffHunk": "@@ -40,4 +41,51 @@ class MulticlassClassificationEvaluatorSuite\n   test(\"should support all NumericType labels and not support other types\") {\n     MLTestingUtils.checkNumericTypes(new MulticlassClassificationEvaluator, spark)\n   }\n+\n+  test(\"Multiclass Classification Evaluator\") {\n+    val labelAndScores = spark.createDataFrame(Seq(",
    "line": 14
  }, {
    "author": {
      "login": "zhengruifeng"
    },
    "body": "ok\n",
    "commit": "00fd2c8064d407eb5b47da583362fbd6c6d441cd",
    "createdAt": "2016-05-30T14:18:25Z",
    "diffHunk": "@@ -40,4 +41,51 @@ class MulticlassClassificationEvaluatorSuite\n   test(\"should support all NumericType labels and not support other types\") {\n     MLTestingUtils.checkNumericTypes(new MulticlassClassificationEvaluator, spark)\n   }\n+\n+  test(\"Multiclass Classification Evaluator\") {\n+    val labelAndScores = spark.createDataFrame(Seq(",
    "line": 14
  }],
  "prId": 13398
}]