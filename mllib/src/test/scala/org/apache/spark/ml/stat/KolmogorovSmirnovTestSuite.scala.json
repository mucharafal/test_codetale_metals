[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "In the spark.mllib tests, it looks like they meant to test against the uniform distribution but forgot to.  Would you mind adding that test?",
    "commit": "6187d8893405afc3e488de55fe36d7f736b16cc3",
    "createdAt": "2018-03-16T01:25:55Z",
    "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.stat\n+\n+import org.apache.commons.math3.distribution.{ExponentialDistribution, NormalDistribution}\n+import org.apache.commons.math3.stat.inference.{KolmogorovSmirnovTest => Math3KSTest}\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.util.DefaultReadWriteTest\n+import org.apache.spark.ml.util.TestingUtils._\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.sql.Row\n+\n+class KolmogorovSmirnovTestSuite\n+  extends SparkFunSuite with MLlibTestSparkContext with DefaultReadWriteTest {\n+\n+  import testImplicits._\n+\n+  test(\"1 sample Kolmogorov-Smirnov test: apache commons math3 implementation equivalence\") {\n+    // Create theoretical distributions\n+    val stdNormalDist = new NormalDistribution(0, 1)\n+    val expDist = new ExponentialDistribution(0.6)\n+"
  }],
  "prId": 19108
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Can this and the next set of code lines be combined into a single helper method?  That could help with adding in the test for the uniform distribution as well.",
    "commit": "6187d8893405afc3e488de55fe36d7f736b16cc3",
    "createdAt": "2018-03-16T01:25:57Z",
    "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.stat\n+\n+import org.apache.commons.math3.distribution.{ExponentialDistribution, NormalDistribution}\n+import org.apache.commons.math3.stat.inference.{KolmogorovSmirnovTest => Math3KSTest}\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.util.DefaultReadWriteTest\n+import org.apache.spark.ml.util.TestingUtils._\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.sql.Row\n+\n+class KolmogorovSmirnovTestSuite\n+  extends SparkFunSuite with MLlibTestSparkContext with DefaultReadWriteTest {\n+\n+  import testImplicits._\n+\n+  test(\"1 sample Kolmogorov-Smirnov test: apache commons math3 implementation equivalence\") {\n+    // Create theoretical distributions\n+    val stdNormalDist = new NormalDistribution(0, 1)\n+    val expDist = new ExponentialDistribution(0.6)\n+\n+    // set seeds\n+    val seed = 10L\n+    stdNormalDist.reseedRandomGenerator(seed)\n+    expDist.reseedRandomGenerator(seed)\n+\n+    // Sample data from the distributions and parallelize it\n+    val n = 100000\n+    val sampledNormArray = stdNormalDist.sample(n)\n+    val sampledNormDF = sc.parallelize(sampledNormArray, 10).toDF(\"sample\")\n+    val sampledExpArray = expDist.sample(n)\n+    val sampledExpDF = sc.parallelize(sampledExpArray, 10).toDF(\"sample\")\n+\n+    // Use a apache math commons local KS test to verify calculations\n+    val ksTest = new Math3KSTest()\n+    val pThreshold = 0.05\n+\n+    // Comparing a standard normal sample to a standard normal distribution",
    "line": 57
  }],
  "prId": 19108
}]