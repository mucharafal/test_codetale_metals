[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "minor: The `index` is removed when we create the `AttributeGroup`. So only `.withName` is needed. This could be\n\n``` scala\nval defaultAttr = NumericAttribute.defaultAttr\nval attrs = Array(\"f0\", \"f1\", \"f2\", \"f3\", \"f4\").map(defaultAttr.withName)\n```\n",
    "commit": "b16e86e0f940b60152d57c16369945182449c6f6",
    "createdAt": "2015-08-05T22:40:14Z",
    "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.ml.attribute.{Attribute, AttributeGroup, NumericAttribute}\n+import org.apache.spark.ml.param.ParamsSuite\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+import org.apache.spark.sql.types.StructType\n+import org.apache.spark.sql.{DataFrame, Row, SQLContext}\n+\n+class VectorSlicerSuite extends SparkFunSuite with MLlibTestSparkContext {\n+\n+  test(\"params\") {\n+    val slicer = new VectorSlicer\n+    ParamsSuite.checkParams(slicer)\n+    assert(slicer.getSelectedIndices.length === 0)\n+    assert(slicer.getSelectedNames.length === 0)\n+    withClue(\"VectorSlicer should not have any features selected by default\") {\n+      intercept[IllegalArgumentException] {\n+        slicer.validateParams()\n+      }\n+    }\n+  }\n+\n+  test(\"feature validity checks\") {\n+    import VectorSlicer._\n+    assert(validIndices(Array(0, 1, 8, 2)))\n+    assert(validIndices(Array.empty[Int]))\n+    assert(!validIndices(Array(-1)))\n+    assert(!validIndices(Array(1, 2, 1)))\n+\n+    assert(validNames(Array(\"a\", \"b\")))\n+    assert(validNames(Array.empty[String]))\n+    assert(!validNames(Array(\"\", \"b\")))\n+    assert(!validNames(Array(\"a\", \"b\", \"a\")))\n+  }\n+\n+  test(\"Test vector slicer\") {\n+    val sqlContext = new SQLContext(sc)\n+\n+    val data = Array(\n+      Vectors.sparse(5, Seq((0, -2.0), (1, 2.3))),\n+      Vectors.dense(-2.0, 2.3, 0.0, 0.0, 1.0),\n+      Vectors.dense(0.0, 0.0, 0.0, 0.0, 0.0),\n+      Vectors.dense(0.6, -1.1, -3.0, 4.5, 3.3),\n+      Vectors.sparse(5, Seq())\n+    )\n+\n+    // Expected after selecting indices 1, 4\n+    val expected = Array(\n+      Vectors.sparse(2, Seq((0, 2.3))),\n+      Vectors.dense(2.3, 1.0),\n+      Vectors.dense(0.0, 0.0),\n+      Vectors.dense(-1.1, 3.3),\n+      Vectors.sparse(2, Seq())\n+    )\n+\n+    val attrs = Array(\n+      NumericAttribute.defaultAttr.withIndex(0).withName(\"f0\"),"
  }],
  "prId": 7972
}]