[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Do you know if this library handles padding of vectors which are not powers of 2?  We should document that behavior in the Scala doc.\n",
    "commit": "433dbc72943ea64fe295c8dfc0a343bbbf815696",
    "createdAt": "2015-06-23T18:57:03Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.beans.BeanInfo\n+import scala.collection.mutable.ArrayBuffer\n+\n+import edu.emory.mathcs.jtransforms.dct.DoubleDCT_1D"
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "https://github.com/wendykierp/JTransforms/blob/master/src/main/java/org/jtransforms/dct/DoubleDCT_1D.java#L201 shows that jTransforms DCT defers non 2^N length inputs to FFT, which uses a chirp z-transform or mixed radix transform (https://github.com/wendykierp/JTransforms/blob/master/src/main/java/org/jtransforms/fft/DoubleFFT_1D.java#L119).\n\nTherefore, I think that no padding is done.\n\nWill document in scaladoc.\n",
    "commit": "433dbc72943ea64fe295c8dfc0a343bbbf815696",
    "createdAt": "2015-06-23T22:01:00Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.beans.BeanInfo\n+import scala.collection.mutable.ArrayBuffer\n+\n+import edu.emory.mathcs.jtransforms.dct.DoubleDCT_1D"
  }],
  "prId": 6894
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "If it's easy, can you remove some duplicate code by changing this and the previous test to use a shared helper method?\n",
    "commit": "433dbc72943ea64fe295c8dfc0a343bbbf815696",
    "createdAt": "2015-06-24T21:29:55Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.beans.BeanInfo\n+\n+import edu.emory.mathcs.jtransforms.dct.DoubleDCT_1D\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.sql.{DataFrame, Row}\n+\n+@BeanInfo\n+case class DCTTestData(vec: Vector, wantedVec: Vector)\n+\n+class DiscreteCosineTransformerSuite extends SparkFunSuite with MLlibTestSparkContext {\n+  import org.apache.spark.ml.feature.DiscreteCosineTransformerSuite._\n+\n+  test(\"forward transform of discrete cosine matches jTransforms result\") {\n+    val data = Vectors.dense((0 until 128).map(_ => 2D * math.random - 1D).toArray)\n+\n+    val expectedResultBuffer = data.toArray.clone()\n+    (new DoubleDCT_1D(data.size)).forward(expectedResultBuffer, true)\n+    val expectedResult = Vectors.dense(expectedResultBuffer)\n+\n+    val dataset = sqlContext.createDataFrame(Seq(\n+      DCTTestData(data, expectedResult)\n+    ))\n+\n+    val transformer = new DiscreteCosineTransformer()\n+      .setInputCol(\"vec\")\n+      .setOutputCol(\"resultVec\")\n+      .setInverse(false)\n+\n+    testDCT(transformer, dataset)\n+  }\n+\n+  test(\"inverse transform of discrete cosine matches jTransforms result\") {"
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK.\n",
    "commit": "433dbc72943ea64fe295c8dfc0a343bbbf815696",
    "createdAt": "2015-06-24T23:17:28Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.beans.BeanInfo\n+\n+import edu.emory.mathcs.jtransforms.dct.DoubleDCT_1D\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.sql.{DataFrame, Row}\n+\n+@BeanInfo\n+case class DCTTestData(vec: Vector, wantedVec: Vector)\n+\n+class DiscreteCosineTransformerSuite extends SparkFunSuite with MLlibTestSparkContext {\n+  import org.apache.spark.ml.feature.DiscreteCosineTransformerSuite._\n+\n+  test(\"forward transform of discrete cosine matches jTransforms result\") {\n+    val data = Vectors.dense((0 until 128).map(_ => 2D * math.random - 1D).toArray)\n+\n+    val expectedResultBuffer = data.toArray.clone()\n+    (new DoubleDCT_1D(data.size)).forward(expectedResultBuffer, true)\n+    val expectedResult = Vectors.dense(expectedResultBuffer)\n+\n+    val dataset = sqlContext.createDataFrame(Seq(\n+      DCTTestData(data, expectedResult)\n+    ))\n+\n+    val transformer = new DiscreteCosineTransformer()\n+      .setInputCol(\"vec\")\n+      .setOutputCol(\"resultVec\")\n+      .setInverse(false)\n+\n+    testDCT(transformer, dataset)\n+  }\n+\n+  test(\"inverse transform of discrete cosine matches jTransforms result\") {"
  }],
  "prId": 6894
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Can lines 39 - 49 all be shared by the 2 tests?  That's really what I had in mind.\n",
    "commit": "433dbc72943ea64fe295c8dfc0a343bbbf815696",
    "createdAt": "2015-06-30T02:24:08Z",
    "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.beans.BeanInfo\n+\n+import edu.emory.mathcs.jtransforms.dct.DoubleDCT_1D\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.sql.{DataFrame, Row}\n+\n+@BeanInfo\n+case class DCTTestData(vec: Vector, wantedVec: Vector)\n+\n+class DiscreteCosineTransformerSuite extends SparkFunSuite with MLlibTestSparkContext {\n+  import org.apache.spark.ml.feature.DiscreteCosineTransformerSuite._\n+\n+  test(\"forward transform of discrete cosine matches jTransforms result\") {\n+    val data = Vectors.dense((0 until 128).map(_ => 2D * math.random - 1D).toArray)\n+    val inverse = false\n+\n+    val dataset = sqlContext.createDataFrame(Seq(\n+      DCTTestData(data, makeExpectedResult(data, inverse))\n+    ))\n+\n+    val transformer = new DiscreteCosineTransformer()"
  }, {
    "author": {
      "login": "sujkh85"
    },
    "body": "## NAVER - http://www.naver.com/\n\nsujkh@naver.com 님께 보내신 메일 <Re: [spark] [SPARK-8471][ML] Discrete Cosine Transform Feature Transformer (#6894)> 이 다음과 같은 이유로 전송 실패했습니다.\n\n---\n\n받는 사람이 회원님의 메일을 수신차단 하였습니다. \n\n---\n",
    "commit": "433dbc72943ea64fe295c8dfc0a343bbbf815696",
    "createdAt": "2015-06-30T02:46:19Z",
    "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.beans.BeanInfo\n+\n+import edu.emory.mathcs.jtransforms.dct.DoubleDCT_1D\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.sql.{DataFrame, Row}\n+\n+@BeanInfo\n+case class DCTTestData(vec: Vector, wantedVec: Vector)\n+\n+class DiscreteCosineTransformerSuite extends SparkFunSuite with MLlibTestSparkContext {\n+  import org.apache.spark.ml.feature.DiscreteCosineTransformerSuite._\n+\n+  test(\"forward transform of discrete cosine matches jTransforms result\") {\n+    val data = Vectors.dense((0 until 128).map(_ => 2D * math.random - 1D).toArray)\n+    val inverse = false\n+\n+    val dataset = sqlContext.createDataFrame(Seq(\n+      DCTTestData(data, makeExpectedResult(data, inverse))\n+    ))\n+\n+    val transformer = new DiscreteCosineTransformer()"
  }],
  "prId": 6894
}]