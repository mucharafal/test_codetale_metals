[{
  "comments": [{
    "author": {
      "login": "thunterdb"
    },
    "body": "this test is not deterministic now. @MLnick , do you know if we have some utilities to retry tests a much of times?",
    "commit": "7a8221ba939da026a9818299cf2b897ea81766a5",
    "createdAt": "2017-02-17T19:52:14Z",
    "diffHunk": "@@ -121,6 +121,33 @@ class CrossValidatorSuite\n     }\n   }\n \n+  test(\"cross validation with parallel evaluation\") {\n+    val lr = new LogisticRegression\n+    val lrParamMaps = new ParamGridBuilder()\n+      .addGrid(lr.regParam, Array(0.001, 1000.0))\n+      .addGrid(lr.maxIter, Array(0, 3))\n+      .build()\n+    val eval = new BinaryClassificationEvaluator\n+    val cv = new CrossValidator()\n+      .setEstimator(lr)\n+      .setEstimatorParamMaps(lrParamMaps)\n+      .setEvaluator(eval)\n+      .setNumFolds(2)\n+      .setNumParallelEval(1)\n+    val cvSerialModel = cv.fit(dataset)\n+    cv.setNumParallelEval(2)"
  }, {
    "author": {
      "login": "BryanCutler"
    },
    "body": "Yes, the models could now be evaluated in a different order, but the end result of returning the best model would be deterministic and shouldn't ever change.",
    "commit": "7a8221ba939da026a9818299cf2b897ea81766a5",
    "createdAt": "2017-02-24T22:22:31Z",
    "diffHunk": "@@ -121,6 +121,33 @@ class CrossValidatorSuite\n     }\n   }\n \n+  test(\"cross validation with parallel evaluation\") {\n+    val lr = new LogisticRegression\n+    val lrParamMaps = new ParamGridBuilder()\n+      .addGrid(lr.regParam, Array(0.001, 1000.0))\n+      .addGrid(lr.maxIter, Array(0, 3))\n+      .build()\n+    val eval = new BinaryClassificationEvaluator\n+    val cv = new CrossValidator()\n+      .setEstimator(lr)\n+      .setEstimatorParamMaps(lrParamMaps)\n+      .setEvaluator(eval)\n+      .setNumFolds(2)\n+      .setNumParallelEval(1)\n+    val cvSerialModel = cv.fit(dataset)\n+    cv.setNumParallelEval(2)"
  }, {
    "author": {
      "login": "MLnick"
    },
    "body": "Yes, I'd say we don't care about deterministic execution order here - we care about the result being the same regardless of execution order.",
    "commit": "7a8221ba939da026a9818299cf2b897ea81766a5",
    "createdAt": "2017-04-10T09:25:34Z",
    "diffHunk": "@@ -121,6 +121,33 @@ class CrossValidatorSuite\n     }\n   }\n \n+  test(\"cross validation with parallel evaluation\") {\n+    val lr = new LogisticRegression\n+    val lrParamMaps = new ParamGridBuilder()\n+      .addGrid(lr.regParam, Array(0.001, 1000.0))\n+      .addGrid(lr.maxIter, Array(0, 3))\n+      .build()\n+    val eval = new BinaryClassificationEvaluator\n+    val cv = new CrossValidator()\n+      .setEstimator(lr)\n+      .setEstimatorParamMaps(lrParamMaps)\n+      .setEvaluator(eval)\n+      .setNumFolds(2)\n+      .setNumParallelEval(1)\n+    val cvSerialModel = cv.fit(dataset)\n+    cv.setNumParallelEval(2)"
  }],
  "prId": 16774
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "Does it make sense to also check `uid` equality here?",
    "commit": "7a8221ba939da026a9818299cf2b897ea81766a5",
    "createdAt": "2017-04-10T09:30:54Z",
    "diffHunk": "@@ -121,6 +121,33 @@ class CrossValidatorSuite\n     }\n   }\n \n+  test(\"cross validation with parallel evaluation\") {\n+    val lr = new LogisticRegression\n+    val lrParamMaps = new ParamGridBuilder()\n+      .addGrid(lr.regParam, Array(0.001, 1000.0))\n+      .addGrid(lr.maxIter, Array(0, 3))\n+      .build()\n+    val eval = new BinaryClassificationEvaluator\n+    val cv = new CrossValidator()\n+      .setEstimator(lr)\n+      .setEstimatorParamMaps(lrParamMaps)\n+      .setEvaluator(eval)\n+      .setNumFolds(2)\n+      .setNumParallelEval(1)\n+    val cvSerialModel = cv.fit(dataset)\n+    cv.setNumParallelEval(2)\n+    val cvParallelModel = cv.fit(dataset)\n+\n+    val serialMetrics = cvSerialModel.avgMetrics.sorted\n+    val parallelMetrics = cvParallelModel.avgMetrics.sorted\n+    assert(serialMetrics === parallelMetrics)\n+\n+    val parentSerial = cvSerialModel.bestModel.parent.asInstanceOf[LogisticRegression]\n+    val parentParallel = cvParallelModel.bestModel.parent.asInstanceOf[LogisticRegression]\n+    assert(parentSerial.getRegParam === parentParallel.getRegParam)",
    "line": 27
  }, {
    "author": {
      "login": "BryanCutler"
    },
    "body": "It should probably be done in the test that already runs `checkCopy` on line 62 (at least until we cleanup these basic checks).  I'll take a look at that.",
    "commit": "7a8221ba939da026a9818299cf2b897ea81766a5",
    "createdAt": "2017-04-11T18:44:46Z",
    "diffHunk": "@@ -121,6 +121,33 @@ class CrossValidatorSuite\n     }\n   }\n \n+  test(\"cross validation with parallel evaluation\") {\n+    val lr = new LogisticRegression\n+    val lrParamMaps = new ParamGridBuilder()\n+      .addGrid(lr.regParam, Array(0.001, 1000.0))\n+      .addGrid(lr.maxIter, Array(0, 3))\n+      .build()\n+    val eval = new BinaryClassificationEvaluator\n+    val cv = new CrossValidator()\n+      .setEstimator(lr)\n+      .setEstimatorParamMaps(lrParamMaps)\n+      .setEvaluator(eval)\n+      .setNumFolds(2)\n+      .setNumParallelEval(1)\n+    val cvSerialModel = cv.fit(dataset)\n+    cv.setNumParallelEval(2)\n+    val cvParallelModel = cv.fit(dataset)\n+\n+    val serialMetrics = cvSerialModel.avgMetrics.sorted\n+    val parallelMetrics = cvParallelModel.avgMetrics.sorted\n+    assert(serialMetrics === parallelMetrics)\n+\n+    val parentSerial = cvSerialModel.bestModel.parent.asInstanceOf[LogisticRegression]\n+    val parentParallel = cvParallelModel.bestModel.parent.asInstanceOf[LogisticRegression]\n+    assert(parentSerial.getRegParam === parentParallel.getRegParam)",
    "line": 27
  }],
  "prId": 16774
}, {
  "comments": [{
    "author": {
      "login": "WeichenXu123"
    },
    "body": "add `.setSeed(XXX)`",
    "commit": "7a8221ba939da026a9818299cf2b897ea81766a5",
    "createdAt": "2017-08-31T04:24:23Z",
    "diffHunk": "@@ -120,6 +120,33 @@ class CrossValidatorSuite\n     }\n   }\n \n+  test(\"cross validation with parallel evaluation\") {\n+    val lr = new LogisticRegression\n+    val lrParamMaps = new ParamGridBuilder()\n+      .addGrid(lr.regParam, Array(0.001, 1000.0))\n+      .addGrid(lr.maxIter, Array(0, 3))\n+      .build()\n+    val eval = new BinaryClassificationEvaluator\n+    val cv = new CrossValidator()\n+      .setEstimator(lr)\n+      .setEstimatorParamMaps(lrParamMaps)\n+      .setEvaluator(eval)\n+      .setNumFolds(2)\n+      .setParallelism(1)",
    "line": 16
  }, {
    "author": {
      "login": "BryanCutler"
    },
    "body": "So the seed param here is fixed by default and doesn't need to be set to ensure consistent results.  I think that's why it's not set in the other tests in this suite.  I'm not a fan of this behavior and I think it's better to explicitly set in tests, but then we should probably be consistent and set elsewhere too.  What are your thoughts on this @MLnick ?",
    "commit": "7a8221ba939da026a9818299cf2b897ea81766a5",
    "createdAt": "2017-08-31T21:43:47Z",
    "diffHunk": "@@ -120,6 +120,33 @@ class CrossValidatorSuite\n     }\n   }\n \n+  test(\"cross validation with parallel evaluation\") {\n+    val lr = new LogisticRegression\n+    val lrParamMaps = new ParamGridBuilder()\n+      .addGrid(lr.regParam, Array(0.001, 1000.0))\n+      .addGrid(lr.maxIter, Array(0, 3))\n+      .build()\n+    val eval = new BinaryClassificationEvaluator\n+    val cv = new CrossValidator()\n+      .setEstimator(lr)\n+      .setEstimatorParamMaps(lrParamMaps)\n+      .setEvaluator(eval)\n+      .setNumFolds(2)\n+      .setParallelism(1)",
    "line": 16
  }, {
    "author": {
      "login": "WeichenXu123"
    },
    "body": "OK I agree.",
    "commit": "7a8221ba939da026a9818299cf2b897ea81766a5",
    "createdAt": "2017-09-01T01:21:40Z",
    "diffHunk": "@@ -120,6 +120,33 @@ class CrossValidatorSuite\n     }\n   }\n \n+  test(\"cross validation with parallel evaluation\") {\n+    val lr = new LogisticRegression\n+    val lrParamMaps = new ParamGridBuilder()\n+      .addGrid(lr.regParam, Array(0.001, 1000.0))\n+      .addGrid(lr.maxIter, Array(0, 3))\n+      .build()\n+    val eval = new BinaryClassificationEvaluator\n+    val cv = new CrossValidator()\n+      .setEstimator(lr)\n+      .setEstimatorParamMaps(lrParamMaps)\n+      .setEvaluator(eval)\n+      .setNumFolds(2)\n+      .setParallelism(1)",
    "line": 16
  }, {
    "author": {
      "login": "MLnick"
    },
    "body": "Yeah seed defaults to a hash of the class name. There has been debate over this (see [SPARK-16832](https://issues.apache.org/jira/browse/SPARK-16832)). Personally I also don't like that behavior, but for now that's what it is.",
    "commit": "7a8221ba939da026a9818299cf2b897ea81766a5",
    "createdAt": "2017-09-05T08:49:29Z",
    "diffHunk": "@@ -120,6 +120,33 @@ class CrossValidatorSuite\n     }\n   }\n \n+  test(\"cross validation with parallel evaluation\") {\n+    val lr = new LogisticRegression\n+    val lrParamMaps = new ParamGridBuilder()\n+      .addGrid(lr.regParam, Array(0.001, 1000.0))\n+      .addGrid(lr.maxIter, Array(0, 3))\n+      .build()\n+    val eval = new BinaryClassificationEvaluator\n+    val cv = new CrossValidator()\n+      .setEstimator(lr)\n+      .setEstimatorParamMaps(lrParamMaps)\n+      .setEvaluator(eval)\n+      .setNumFolds(2)\n+      .setParallelism(1)",
    "line": 16
  }],
  "prId": 16774
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "how do we validate setParallelism is parallelizing?\r\nI mean - can we test and validate that it is functionally working?",
    "commit": "7a8221ba939da026a9818299cf2b897ea81766a5",
    "createdAt": "2017-08-31T08:27:42Z",
    "diffHunk": "@@ -120,6 +120,33 @@ class CrossValidatorSuite\n     }\n   }\n \n+  test(\"cross validation with parallel evaluation\") {\n+    val lr = new LogisticRegression\n+    val lrParamMaps = new ParamGridBuilder()\n+      .addGrid(lr.regParam, Array(0.001, 1000.0))\n+      .addGrid(lr.maxIter, Array(0, 3))\n+      .build()\n+    val eval = new BinaryClassificationEvaluator\n+    val cv = new CrossValidator()\n+      .setEstimator(lr)\n+      .setEstimatorParamMaps(lrParamMaps)\n+      .setEvaluator(eval)\n+      .setNumFolds(2)\n+      .setParallelism(1)\n+    val cvSerialModel = cv.fit(dataset)\n+    cv.setParallelism(2)",
    "line": 18
  }, {
    "author": {
      "login": "BryanCutler"
    },
    "body": "It's a little difficult to do this in a unit test without making it flaky.  I have run tests manually and verified it is working by both the expected speedup in timing and that the expected number of tasks are run concurrently.  I can post some results if that would help.",
    "commit": "7a8221ba939da026a9818299cf2b897ea81766a5",
    "createdAt": "2017-08-31T21:49:06Z",
    "diffHunk": "@@ -120,6 +120,33 @@ class CrossValidatorSuite\n     }\n   }\n \n+  test(\"cross validation with parallel evaluation\") {\n+    val lr = new LogisticRegression\n+    val lrParamMaps = new ParamGridBuilder()\n+      .addGrid(lr.regParam, Array(0.001, 1000.0))\n+      .addGrid(lr.maxIter, Array(0, 3))\n+      .build()\n+    val eval = new BinaryClassificationEvaluator\n+    val cv = new CrossValidator()\n+      .setEstimator(lr)\n+      .setEstimatorParamMaps(lrParamMaps)\n+      .setEvaluator(eval)\n+      .setNumFolds(2)\n+      .setParallelism(1)\n+    val cvSerialModel = cv.fit(dataset)\n+    cv.setParallelism(2)",
    "line": 18
  }, {
    "author": {
      "login": "MLnick"
    },
    "body": "@BryanCutler may be worth posting the result to the JIRA for posterity.",
    "commit": "7a8221ba939da026a9818299cf2b897ea81766a5",
    "createdAt": "2017-09-05T08:58:08Z",
    "diffHunk": "@@ -120,6 +120,33 @@ class CrossValidatorSuite\n     }\n   }\n \n+  test(\"cross validation with parallel evaluation\") {\n+    val lr = new LogisticRegression\n+    val lrParamMaps = new ParamGridBuilder()\n+      .addGrid(lr.regParam, Array(0.001, 1000.0))\n+      .addGrid(lr.maxIter, Array(0, 3))\n+      .build()\n+    val eval = new BinaryClassificationEvaluator\n+    val cv = new CrossValidator()\n+      .setEstimator(lr)\n+      .setEstimatorParamMaps(lrParamMaps)\n+      .setEvaluator(eval)\n+      .setNumFolds(2)\n+      .setParallelism(1)\n+    val cvSerialModel = cv.fit(dataset)\n+    cv.setParallelism(2)",
    "line": 18
  }],
  "prId": 16774
}]