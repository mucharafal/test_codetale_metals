[{
  "comments": [{
    "author": {
      "login": "sethah"
    },
    "body": "Not sure why we need to set maxBins here?\n",
    "commit": "856e3e8a81995a0c4a733d9fbebdc2f5d9993180",
    "createdAt": "2016-07-01T13:23:16Z",
    "diffHunk": "@@ -96,6 +108,15 @@ class DecisionTreeRegressorSuite\n       assert(variance === expectedVariance,\n         s\"Expected variance $expectedVariance but got $variance.\")\n     }\n+\n+    val toyDF = TreeTests.setMetadata(toyData, Map.empty[Int, Int], 0)\n+    dt.setMaxDepth(1)\n+      .setMaxBins(6)"
  }, {
    "author": {
      "login": "MechCoder"
    },
    "body": "Because there are 6 datapoints, and I want each datapoint to be a split.\n",
    "commit": "856e3e8a81995a0c4a733d9fbebdc2f5d9993180",
    "createdAt": "2016-07-01T17:33:26Z",
    "diffHunk": "@@ -96,6 +108,15 @@ class DecisionTreeRegressorSuite\n       assert(variance === expectedVariance,\n         s\"Expected variance $expectedVariance but got $variance.\")\n     }\n+\n+    val toyDF = TreeTests.setMetadata(toyData, Map.empty[Int, Int], 0)\n+    dt.setMaxDepth(1)\n+      .setMaxBins(6)"
  }, {
    "author": {
      "login": "MechCoder"
    },
    "body": "I verified and my intuition was correct. I get this warning for the default setting:\n\n WARN DecisionTreeMetadata: DecisionTree reducing maxBins from 32 to 6 (= number of training instances)\n",
    "commit": "856e3e8a81995a0c4a733d9fbebdc2f5d9993180",
    "createdAt": "2016-07-01T17:48:15Z",
    "diffHunk": "@@ -96,6 +108,15 @@ class DecisionTreeRegressorSuite\n       assert(variance === expectedVariance,\n         s\"Expected variance $expectedVariance but got $variance.\")\n     }\n+\n+    val toyDF = TreeTests.setMetadata(toyData, Map.empty[Int, Int], 0)\n+    dt.setMaxDepth(1)\n+      .setMaxBins(6)"
  }, {
    "author": {
      "login": "sethah"
    },
    "body": "Ok, not sure it needs to be set since the test is fine without it. The warning is more just helpful info logging. I'm fine to leave it since it doesn't matter either way.\n",
    "commit": "856e3e8a81995a0c4a733d9fbebdc2f5d9993180",
    "createdAt": "2016-07-01T19:51:48Z",
    "diffHunk": "@@ -96,6 +108,15 @@ class DecisionTreeRegressorSuite\n       assert(variance === expectedVariance,\n         s\"Expected variance $expectedVariance but got $variance.\")\n     }\n+\n+    val toyDF = TreeTests.setMetadata(toyData, Map.empty[Int, Int], 0)\n+    dt.setMaxDepth(1)\n+      .setMaxBins(6)"
  }, {
    "author": {
      "login": "MechCoder"
    },
    "body": "\"Explicit is better than implicit\" ;)\n",
    "commit": "856e3e8a81995a0c4a733d9fbebdc2f5d9993180",
    "createdAt": "2016-07-01T22:37:29Z",
    "diffHunk": "@@ -96,6 +108,15 @@ class DecisionTreeRegressorSuite\n       assert(variance === expectedVariance,\n         s\"Expected variance $expectedVariance but got $variance.\")\n     }\n+\n+    val toyDF = TreeTests.setMetadata(toyData, Map.empty[Int, Int], 0)\n+    dt.setMaxDepth(1)\n+      .setMaxBins(6)"
  }, {
    "author": {
      "login": "yanboliang"
    },
    "body": "I'd like to remove the explicit setting since the default value(32) meets your needs. We want to make Jenkins logging clean and reduce the number of warnings if possible.\n",
    "commit": "856e3e8a81995a0c4a733d9fbebdc2f5d9993180",
    "createdAt": "2016-07-04T05:51:58Z",
    "diffHunk": "@@ -96,6 +108,15 @@ class DecisionTreeRegressorSuite\n       assert(variance === expectedVariance,\n         s\"Expected variance $expectedVariance but got $variance.\")\n     }\n+\n+    val toyDF = TreeTests.setMetadata(toyData, Map.empty[Int, Int], 0)\n+    dt.setMaxDepth(1)\n+      .setMaxBins(6)"
  }, {
    "author": {
      "login": "MechCoder"
    },
    "body": "If you would like to reduce the number of warnings, then this should be kept as is (unless I am misunderstanding something)\n",
    "commit": "856e3e8a81995a0c4a733d9fbebdc2f5d9993180",
    "createdAt": "2016-07-04T07:45:24Z",
    "diffHunk": "@@ -96,6 +108,15 @@ class DecisionTreeRegressorSuite\n       assert(variance === expectedVariance,\n         s\"Expected variance $expectedVariance but got $variance.\")\n     }\n+\n+    val toyDF = TreeTests.setMetadata(toyData, Map.empty[Int, Int], 0)\n+    dt.setMaxDepth(1)\n+      .setMaxBins(6)"
  }, {
    "author": {
      "login": "yanboliang"
    },
    "body": "You are right, please ignore my last comments.\n",
    "commit": "856e3e8a81995a0c4a733d9fbebdc2f5d9993180",
    "createdAt": "2016-07-04T08:18:41Z",
    "diffHunk": "@@ -96,6 +108,15 @@ class DecisionTreeRegressorSuite\n       assert(variance === expectedVariance,\n         s\"Expected variance $expectedVariance but got $variance.\")\n     }\n+\n+    val toyDF = TreeTests.setMetadata(toyData, Map.empty[Int, Int], 0)\n+    dt.setMaxDepth(1)\n+      .setMaxBins(6)"
  }],
  "prId": 13981
}, {
  "comments": [{
    "author": {
      "login": "sethah"
    },
    "body": "`expectedVariances` and `trueVariances` are mixed up here. Expected should be the theoretical value computed below. Also, it would be good to leave a comment explaining where those expected values came from (i.e. that they are the computed variance of (1,2,3) and (10,12,14) and list the formula).\n",
    "commit": "856e3e8a81995a0c4a733d9fbebdc2f5d9993180",
    "createdAt": "2016-07-01T13:25:21Z",
    "diffHunk": "@@ -96,6 +108,15 @@ class DecisionTreeRegressorSuite\n       assert(variance === expectedVariance,\n         s\"Expected variance $expectedVariance but got $variance.\")\n     }\n+\n+    val toyDF = TreeTests.setMetadata(toyData, Map.empty[Int, Int], 0)\n+    dt.setMaxDepth(1)\n+      .setMaxBins(6)\n+      .setSeed(0)\n+    val expectVariances = dt.fit(toyDF).transform(toyDF).select(\"variance\").collect().map {"
  }],
  "prId": 13981
}, {
  "comments": [{
    "author": {
      "login": "sethah"
    },
    "body": "Although this technically works, it is less confusing if use `assert` and unpack the tuple. Like\n\n``` scala\n...foreach { case (actual, expected) =>\n  assert(actual ~== expected absTol 1e-3)\n}\n```\n",
    "commit": "856e3e8a81995a0c4a733d9fbebdc2f5d9993180",
    "createdAt": "2016-07-01T13:27:38Z",
    "diffHunk": "@@ -96,6 +108,15 @@ class DecisionTreeRegressorSuite\n       assert(variance === expectedVariance,\n         s\"Expected variance $expectedVariance but got $variance.\")\n     }\n+\n+    val toyDF = TreeTests.setMetadata(toyData, Map.empty[Int, Int], 0)\n+    dt.setMaxDepth(1)\n+      .setMaxBins(6)\n+      .setSeed(0)\n+    val expectVariances = dt.fit(toyDF).transform(toyDF).select(\"variance\").collect().map {\n+      case Row(variance: Double) => variance }\n+    val trueVariances = Array(0.667, 0.667, 0.667, 2.667, 2.667, 2.667)\n+    trueVariances.zip(expectVariances).foreach(x => x._1 ~== x._2 absTol 1e-3)"
  }],
  "prId": 13981
}, {
  "comments": [{
    "author": {
      "login": "sethah"
    },
    "body": "Can we use `.select(dt.getVarianceCol)` instead? Also, the closing brace should go on the next line, like:\n\n``` scala\n.map {\n  case Row(...)\n}\n```\n",
    "commit": "856e3e8a81995a0c4a733d9fbebdc2f5d9993180",
    "createdAt": "2016-07-01T20:15:00Z",
    "diffHunk": "@@ -96,6 +108,22 @@ class DecisionTreeRegressorSuite\n       assert(variance === expectedVariance,\n         s\"Expected variance $expectedVariance but got $variance.\")\n     }\n+\n+    val toyDF = TreeTests.setMetadata(toyData, Map.empty[Int, Int], 0)\n+    dt.setMaxDepth(1)\n+      .setMaxBins(6)\n+      .setSeed(0)\n+    val calculatedVariances = dt.fit(toyDF).transform(toyDF).select(\"variance\").collect().map {"
  }],
  "prId": 13981
}, {
  "comments": [{
    "author": {
      "login": "yanboliang"
    },
    "body": "Move `toyData` to `TreeTests` and rename to `varianceData`. You can refer [Feature importance with toy data](https://github.com/apache/spark/blob/master/mllib/src/test/scala/org/apache/spark/ml/regression/DecisionTreeRegressorSuite.scala#L108).\n",
    "commit": "856e3e8a81995a0c4a733d9fbebdc2f5d9993180",
    "createdAt": "2016-07-04T05:56:56Z",
    "diffHunk": "@@ -36,10 +37,21 @@ class DecisionTreeRegressorSuite\n \n   private var categoricalDataPointsRDD: RDD[LabeledPoint] = _\n \n+  private var toyData: RDD[LabeledPoint] = _\n+\n   override def beforeAll() {\n     super.beforeAll()\n+\n     categoricalDataPointsRDD =\n       sc.parallelize(OldDecisionTreeSuite.generateCategoricalDataPoints().map(_.asML))\n+    toyData = sc.parallelize(Seq("
  }],
  "prId": 13981
}, {
  "comments": [{
    "author": {
      "login": "jaceklaskowski"
    },
    "body": "I wonder if `toDS` worked here and you'd have `variance` \"simpler\".\n",
    "commit": "856e3e8a81995a0c4a733d9fbebdc2f5d9993180",
    "createdAt": "2016-07-05T20:27:30Z",
    "diffHunk": "@@ -96,6 +97,25 @@ class DecisionTreeRegressorSuite\n       assert(variance === expectedVariance,\n         s\"Expected variance $expectedVariance but got $variance.\")\n     }\n+\n+    val varianceData: RDD[LabeledPoint] = TreeTests.varianceData(sc)\n+    val varianceDF = TreeTests.setMetadata(varianceData, Map.empty[Int, Int], 0)\n+    dt.setMaxDepth(1)\n+      .setMaxBins(6)\n+      .setSeed(0)\n+    val transformVarDF = dt.fit(varianceDF).transform(varianceDF)\n+    val calculatedVariances = transformVarDF.select(dt.getVarianceCol).collect().map {",
    "line": 19
  }, {
    "author": {
      "login": "MechCoder"
    },
    "body": "You mean after the collect?\n\nIt fails with `is not a member of Seq[org.apache.spark.sql.Row]`\n",
    "commit": "856e3e8a81995a0c4a733d9fbebdc2f5d9993180",
    "createdAt": "2016-07-06T00:27:46Z",
    "diffHunk": "@@ -96,6 +97,25 @@ class DecisionTreeRegressorSuite\n       assert(variance === expectedVariance,\n         s\"Expected variance $expectedVariance but got $variance.\")\n     }\n+\n+    val varianceData: RDD[LabeledPoint] = TreeTests.varianceData(sc)\n+    val varianceDF = TreeTests.setMetadata(varianceData, Map.empty[Int, Int], 0)\n+    dt.setMaxDepth(1)\n+      .setMaxBins(6)\n+      .setSeed(0)\n+    val transformVarDF = dt.fit(varianceDF).transform(varianceDF)\n+    val calculatedVariances = transformVarDF.select(dt.getVarianceCol).collect().map {",
    "line": 19
  }, {
    "author": {
      "login": "jaceklaskowski"
    },
    "body": "Before `collect` so you will work with a type-safe `Dataset` (not a `DataFrame` which is `Dataset[Row]`)\n",
    "commit": "856e3e8a81995a0c4a733d9fbebdc2f5d9993180",
    "createdAt": "2016-07-06T09:50:10Z",
    "diffHunk": "@@ -96,6 +97,25 @@ class DecisionTreeRegressorSuite\n       assert(variance === expectedVariance,\n         s\"Expected variance $expectedVariance but got $variance.\")\n     }\n+\n+    val varianceData: RDD[LabeledPoint] = TreeTests.varianceData(sc)\n+    val varianceDF = TreeTests.setMetadata(varianceData, Map.empty[Int, Int], 0)\n+    dt.setMaxDepth(1)\n+      .setMaxBins(6)\n+      .setSeed(0)\n+    val transformVarDF = dt.fit(varianceDF).transform(varianceDF)\n+    val calculatedVariances = transformVarDF.select(dt.getVarianceCol).collect().map {",
    "line": 19
  }, {
    "author": {
      "login": "yanboliang"
    },
    "body": "@jaceklaskowski I think it's better to do such improvement in a separate PR which will involve lots of similar changes for all test suites. Please feel free to send a PR and I will help to review. Thanks!\n",
    "commit": "856e3e8a81995a0c4a733d9fbebdc2f5d9993180",
    "createdAt": "2016-07-06T10:05:58Z",
    "diffHunk": "@@ -96,6 +97,25 @@ class DecisionTreeRegressorSuite\n       assert(variance === expectedVariance,\n         s\"Expected variance $expectedVariance but got $variance.\")\n     }\n+\n+    val varianceData: RDD[LabeledPoint] = TreeTests.varianceData(sc)\n+    val varianceDF = TreeTests.setMetadata(varianceData, Map.empty[Int, Int], 0)\n+    dt.setMaxDepth(1)\n+      .setMaxBins(6)\n+      .setSeed(0)\n+    val transformVarDF = dt.fit(varianceDF).transform(varianceDF)\n+    val calculatedVariances = transformVarDF.select(dt.getVarianceCol).collect().map {",
    "line": 19
  }, {
    "author": {
      "login": "MechCoder"
    },
    "body": "Ah, I see. Thanks for the note. I wasn't familiar with the Dataset API till now.\n",
    "commit": "856e3e8a81995a0c4a733d9fbebdc2f5d9993180",
    "createdAt": "2016-07-06T17:04:01Z",
    "diffHunk": "@@ -96,6 +97,25 @@ class DecisionTreeRegressorSuite\n       assert(variance === expectedVariance,\n         s\"Expected variance $expectedVariance but got $variance.\")\n     }\n+\n+    val varianceData: RDD[LabeledPoint] = TreeTests.varianceData(sc)\n+    val varianceDF = TreeTests.setMetadata(varianceData, Map.empty[Int, Int], 0)\n+    dt.setMaxDepth(1)\n+      .setMaxBins(6)\n+      .setSeed(0)\n+    val transformVarDF = dt.fit(varianceDF).transform(varianceDF)\n+    val calculatedVariances = transformVarDF.select(dt.getVarianceCol).collect().map {",
    "line": 19
  }],
  "prId": 13981
}]