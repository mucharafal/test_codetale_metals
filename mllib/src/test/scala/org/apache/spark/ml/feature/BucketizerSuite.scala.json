[{
  "comments": [{
    "author": {
      "login": "yanboliang"
    },
    "body": "```feature value``` -> ```result```",
    "commit": "d149350d73fcc4f576880730661fd688fed8fc07",
    "createdAt": "2017-05-04T09:51:33Z",
    "diffHunk": "@@ -162,6 +165,28 @@ class BucketizerSuite extends SparkFunSuite with MLlibTestSparkContext with Defa\n       .setSplits(Array(0.1, 0.8, 0.9))\n     testDefaultReadWrite(t)\n   }\n+\n+  test(\"Bucket non-double numeric features\") {\n+    val splits = Array(-3.0, 0.0, 3.0)\n+    val data = Array(-2.0, -1.0, 0.0, 1.0, 2.0)\n+    val expectedBuckets = Array(0.0, 0.0, 1.0, 1.0, 1.0)\n+    val dataFrame: DataFrame = data.zip(expectedBuckets).toSeq.toDF(\"feature\", \"expected\")\n+\n+    val bucketizer: Bucketizer = new Bucketizer()\n+      .setInputCol(\"feature\")\n+      .setOutputCol(\"result\")\n+      .setSplits(splits)\n+\n+    val types = Seq(ShortType, IntegerType, LongType, FloatType)\n+    for (mType <- types) {\n+      val df = dataFrame.withColumn(\"feature\", col(\"feature\").cast(mType))\n+      bucketizer.transform(df).select(\"result\", \"expected\").collect().foreach {\n+        case Row(x: Double, y: Double) =>\n+          assert(x === y, \"The feature value is not correct after bucketing in type \" +"
  }],
  "prId": 17840
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "Other tests for supporting numeric types have included `DecimalType` - often `DecimalType(10, 0)`, as well as `ByteType`. See the various Estimator tests which use `MLTestingUtils.genClassifDFWithNumericLabelCol` and `MLTestingUtils.genRegressionDFWithNumericLabelCol`",
    "commit": "d149350d73fcc4f576880730661fd688fed8fc07",
    "createdAt": "2017-05-04T13:35:01Z",
    "diffHunk": "@@ -162,6 +165,28 @@ class BucketizerSuite extends SparkFunSuite with MLlibTestSparkContext with Defa\n       .setSplits(Array(0.1, 0.8, 0.9))\n     testDefaultReadWrite(t)\n   }\n+\n+  test(\"Bucket non-double numeric features\") {\n+    val splits = Array(-3.0, 0.0, 3.0)\n+    val data = Array(-2.0, -1.0, 0.0, 1.0, 2.0)\n+    val expectedBuckets = Array(0.0, 0.0, 1.0, 1.0, 1.0)\n+    val dataFrame: DataFrame = data.zip(expectedBuckets).toSeq.toDF(\"feature\", \"expected\")\n+\n+    val bucketizer: Bucketizer = new Bucketizer()\n+      .setInputCol(\"feature\")\n+      .setOutputCol(\"result\")\n+      .setSplits(splits)\n+\n+    val types = Seq(ShortType, IntegerType, LongType, FloatType)"
  }],
  "prId": 17840
}]