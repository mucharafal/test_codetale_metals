[{
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "I'm don't understand what this one is testing.  what type is wrong here?  feature2 and feature3 look like ints",
    "commit": "b3c68e0d865386ecd877d3fd0586e634da51fbcd",
    "createdAt": "2019-10-08T18:26:18Z",
    "diffHunk": "@@ -55,14 +55,50 @@ class PredictorSuite extends SparkFunSuite with MLlibTestSparkContext {\n       predictor.fit(df.select(col(\"label\"), col(\"weight\").cast(StringType), col(\"features\")))\n     }\n   }\n+\n+  test(\"multiple columns for features should work well without side effect\") {\n+    // Should fail due to not supporting multiple columns\n+    intercept[IllegalArgumentException] {\n+      new MockPredictor(false).setFeaturesCol(Array(\"feature1\", \"feature2\", \"feature3\"))\n+    }\n+\n+    // Only use multiple columns for features\n+    val df = spark.createDataFrame(Seq(\n+      (0, 1, 0, 2, 3),\n+      (1, 2, 0, 3, 9),\n+      (0, 3, 0, 2, 6)\n+    )).toDF(\"label\", \"weight\", \"feature1\", \"feature2\", \"feature3\")\n+\n+    val predictor = new MockPredictor().setWeightCol(\"weight\")\n+      .setFeaturesCol(Array(\"feature1\", \"feature2\", \"feature3\"))\n+    predictor.fit(df)\n+\n+    // Should fail due to wrong type for column \"feature1\" in schema\n+    intercept[IllegalArgumentException] {\n+      predictor.fit(df.select(col(\"label\"), col(\"weight\"),\n+        col(\"feature1\").cast(StringType), col(\"feature2\"), col(\"feature3\")))\n+    }\n+\n+    val df2 = df.toDF(\"label\", \"weight\", \"features\", \"feature2\", \"feature3\")\n+    // Should fail due to missing \"feature1\" in schema\n+    intercept[IllegalArgumentException] {\n+      predictor.setFeaturesCol(Array(\"feature1\", \"feature2\", \"feature3\")).fit(df2)\n+    }\n+\n+    // Should fail due to wrong type in schema for single column of features"
  }, {
    "author": {
      "login": "firestarman"
    },
    "body": "This is for the case users are specifying both single column and multiple columns for features. `features` (The default value) now is used as the single column name so its type should be Vector, but actually is Int per the schema of DataFrame.",
    "commit": "b3c68e0d865386ecd877d3fd0586e634da51fbcd",
    "createdAt": "2019-10-09T00:52:11Z",
    "diffHunk": "@@ -55,14 +55,50 @@ class PredictorSuite extends SparkFunSuite with MLlibTestSparkContext {\n       predictor.fit(df.select(col(\"label\"), col(\"weight\").cast(StringType), col(\"features\")))\n     }\n   }\n+\n+  test(\"multiple columns for features should work well without side effect\") {\n+    // Should fail due to not supporting multiple columns\n+    intercept[IllegalArgumentException] {\n+      new MockPredictor(false).setFeaturesCol(Array(\"feature1\", \"feature2\", \"feature3\"))\n+    }\n+\n+    // Only use multiple columns for features\n+    val df = spark.createDataFrame(Seq(\n+      (0, 1, 0, 2, 3),\n+      (1, 2, 0, 3, 9),\n+      (0, 3, 0, 2, 6)\n+    )).toDF(\"label\", \"weight\", \"feature1\", \"feature2\", \"feature3\")\n+\n+    val predictor = new MockPredictor().setWeightCol(\"weight\")\n+      .setFeaturesCol(Array(\"feature1\", \"feature2\", \"feature3\"))\n+    predictor.fit(df)\n+\n+    // Should fail due to wrong type for column \"feature1\" in schema\n+    intercept[IllegalArgumentException] {\n+      predictor.fit(df.select(col(\"label\"), col(\"weight\"),\n+        col(\"feature1\").cast(StringType), col(\"feature2\"), col(\"feature3\")))\n+    }\n+\n+    val df2 = df.toDF(\"label\", \"weight\", \"features\", \"feature2\", \"feature3\")\n+    // Should fail due to missing \"feature1\" in schema\n+    intercept[IllegalArgumentException] {\n+      predictor.setFeaturesCol(Array(\"feature1\", \"feature2\", \"feature3\")).fit(df2)\n+    }\n+\n+    // Should fail due to wrong type in schema for single column of features"
  }, {
    "author": {
      "login": "tgravescs"
    },
    "body": "oh, I see, so can you set the original setFeatureCol(String) to \"\" if you wanted to use \"features\" in the setFeaturesCol(Array)?  It looks like it but wanted to double check.\r\n\r\nCan you update the comment to say something like your explanation.",
    "commit": "b3c68e0d865386ecd877d3fd0586e634da51fbcd",
    "createdAt": "2019-10-09T01:05:58Z",
    "diffHunk": "@@ -55,14 +55,50 @@ class PredictorSuite extends SparkFunSuite with MLlibTestSparkContext {\n       predictor.fit(df.select(col(\"label\"), col(\"weight\").cast(StringType), col(\"features\")))\n     }\n   }\n+\n+  test(\"multiple columns for features should work well without side effect\") {\n+    // Should fail due to not supporting multiple columns\n+    intercept[IllegalArgumentException] {\n+      new MockPredictor(false).setFeaturesCol(Array(\"feature1\", \"feature2\", \"feature3\"))\n+    }\n+\n+    // Only use multiple columns for features\n+    val df = spark.createDataFrame(Seq(\n+      (0, 1, 0, 2, 3),\n+      (1, 2, 0, 3, 9),\n+      (0, 3, 0, 2, 6)\n+    )).toDF(\"label\", \"weight\", \"feature1\", \"feature2\", \"feature3\")\n+\n+    val predictor = new MockPredictor().setWeightCol(\"weight\")\n+      .setFeaturesCol(Array(\"feature1\", \"feature2\", \"feature3\"))\n+    predictor.fit(df)\n+\n+    // Should fail due to wrong type for column \"feature1\" in schema\n+    intercept[IllegalArgumentException] {\n+      predictor.fit(df.select(col(\"label\"), col(\"weight\"),\n+        col(\"feature1\").cast(StringType), col(\"feature2\"), col(\"feature3\")))\n+    }\n+\n+    val df2 = df.toDF(\"label\", \"weight\", \"features\", \"feature2\", \"feature3\")\n+    // Should fail due to missing \"feature1\" in schema\n+    intercept[IllegalArgumentException] {\n+      predictor.setFeaturesCol(Array(\"feature1\", \"feature2\", \"feature3\")).fit(df2)\n+    }\n+\n+    // Should fail due to wrong type in schema for single column of features"
  }, {
    "author": {
      "login": "firestarman"
    },
    "body": "Thanks for review.  Updated the comments\r\nActually that's expected. I mean only the names (\"feature2\", \"feature3\") passed into `setFeaturesCol(Array)` are wanted to use as multiple columns. But \"features\" is provided in \"df2\" schema, equal to the default value of the single column name (just like calling `setFeaturesCol(\"features\")`). Then my current design supposes users are trying to use both single column and multiple columns, and does type check for both of them. As said above ,\"features\" now is used as single column, and should be \"Vector\" but actually \"Int\", so the test fails.\r\n",
    "commit": "b3c68e0d865386ecd877d3fd0586e634da51fbcd",
    "createdAt": "2019-10-09T03:42:22Z",
    "diffHunk": "@@ -55,14 +55,50 @@ class PredictorSuite extends SparkFunSuite with MLlibTestSparkContext {\n       predictor.fit(df.select(col(\"label\"), col(\"weight\").cast(StringType), col(\"features\")))\n     }\n   }\n+\n+  test(\"multiple columns for features should work well without side effect\") {\n+    // Should fail due to not supporting multiple columns\n+    intercept[IllegalArgumentException] {\n+      new MockPredictor(false).setFeaturesCol(Array(\"feature1\", \"feature2\", \"feature3\"))\n+    }\n+\n+    // Only use multiple columns for features\n+    val df = spark.createDataFrame(Seq(\n+      (0, 1, 0, 2, 3),\n+      (1, 2, 0, 3, 9),\n+      (0, 3, 0, 2, 6)\n+    )).toDF(\"label\", \"weight\", \"feature1\", \"feature2\", \"feature3\")\n+\n+    val predictor = new MockPredictor().setWeightCol(\"weight\")\n+      .setFeaturesCol(Array(\"feature1\", \"feature2\", \"feature3\"))\n+    predictor.fit(df)\n+\n+    // Should fail due to wrong type for column \"feature1\" in schema\n+    intercept[IllegalArgumentException] {\n+      predictor.fit(df.select(col(\"label\"), col(\"weight\"),\n+        col(\"feature1\").cast(StringType), col(\"feature2\"), col(\"feature3\")))\n+    }\n+\n+    val df2 = df.toDF(\"label\", \"weight\", \"features\", \"feature2\", \"feature3\")\n+    // Should fail due to missing \"feature1\" in schema\n+    intercept[IllegalArgumentException] {\n+      predictor.setFeaturesCol(Array(\"feature1\", \"feature2\", \"feature3\")).fit(df2)\n+    }\n+\n+    // Should fail due to wrong type in schema for single column of features"
  }],
  "prId": 25983
}]