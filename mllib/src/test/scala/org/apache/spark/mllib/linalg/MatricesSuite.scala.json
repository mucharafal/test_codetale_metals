[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`colPtrs`\n",
    "commit": "88814ed215e81bb6b945c8fff60bdb822ac2cb96",
    "createdAt": "2014-09-18T04:53:32Z",
    "diffHunk": "@@ -36,4 +36,79 @@ class MatricesSuite extends FunSuite {\n       Matrices.dense(3, 2, Array(0.0, 1.0, 2.0))\n     }\n   }\n+\n+  test(\"sparse matrix construction\") {\n+    val m = 3\n+    val n = 2\n+    val values = Array(1.0, 2.0, 4.0, 5.0)\n+    val colIndices = Array(0, 2, 4)"
  }],
  "prId": 2294
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "also check `colPtrs` and `rowIndices`\n",
    "commit": "88814ed215e81bb6b945c8fff60bdb822ac2cb96",
    "createdAt": "2014-09-18T04:53:34Z",
    "diffHunk": "@@ -36,4 +36,79 @@ class MatricesSuite extends FunSuite {\n       Matrices.dense(3, 2, Array(0.0, 1.0, 2.0))\n     }\n   }\n+\n+  test(\"sparse matrix construction\") {\n+    val m = 3\n+    val n = 2\n+    val values = Array(1.0, 2.0, 4.0, 5.0)\n+    val colIndices = Array(0, 2, 4)\n+    val rowIndices = Array(1, 2, 1, 2)\n+    val mat = Matrices.sparse(m, n, colIndices, rowIndices, values).asInstanceOf[SparseMatrix]\n+    assert(mat.numRows === m)\n+    assert(mat.numCols === n)\n+    assert(mat.values.eq(values), \"should not copy data\")"
  }],
  "prId": 2294
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "It should be `IllegalArgumentException` (thrown by `require`)\n",
    "commit": "88814ed215e81bb6b945c8fff60bdb822ac2cb96",
    "createdAt": "2014-09-18T04:53:35Z",
    "diffHunk": "@@ -36,4 +36,79 @@ class MatricesSuite extends FunSuite {\n       Matrices.dense(3, 2, Array(0.0, 1.0, 2.0))\n     }\n   }\n+\n+  test(\"sparse matrix construction\") {\n+    val m = 3\n+    val n = 2\n+    val values = Array(1.0, 2.0, 4.0, 5.0)\n+    val colIndices = Array(0, 2, 4)\n+    val rowIndices = Array(1, 2, 1, 2)\n+    val mat = Matrices.sparse(m, n, colIndices, rowIndices, values).asInstanceOf[SparseMatrix]\n+    assert(mat.numRows === m)\n+    assert(mat.numCols === n)\n+    assert(mat.values.eq(values), \"should not copy data\")\n+  }\n+\n+  test(\"sparse matrix construction with wrong number of elements\") {\n+    intercept[RuntimeException] {"
  }],
  "prId": 2294
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`colPtrs`\n",
    "commit": "88814ed215e81bb6b945c8fff60bdb822ac2cb96",
    "createdAt": "2014-09-18T04:53:37Z",
    "diffHunk": "@@ -36,4 +36,79 @@ class MatricesSuite extends FunSuite {\n       Matrices.dense(3, 2, Array(0.0, 1.0, 2.0))\n     }\n   }\n+\n+  test(\"sparse matrix construction\") {\n+    val m = 3\n+    val n = 2\n+    val values = Array(1.0, 2.0, 4.0, 5.0)\n+    val colIndices = Array(0, 2, 4)\n+    val rowIndices = Array(1, 2, 1, 2)\n+    val mat = Matrices.sparse(m, n, colIndices, rowIndices, values).asInstanceOf[SparseMatrix]\n+    assert(mat.numRows === m)\n+    assert(mat.numCols === n)\n+    assert(mat.values.eq(values), \"should not copy data\")\n+  }\n+\n+  test(\"sparse matrix construction with wrong number of elements\") {\n+    intercept[RuntimeException] {\n+      Matrices.sparse(3, 2, Array(0, 1), Array(1, 2, 1), Array(0.0, 1.0, 2.0))\n+    }\n+\n+    intercept[RuntimeException] {\n+      Matrices.sparse(3, 2, Array(0, 1, 2), Array(1, 2), Array(0.0, 1.0, 2.0))\n+    }\n+  }\n+\n+  test(\"matrix copies are deep copies\") {\n+    val m = 3\n+    val n = 2\n+\n+    val denseMat = Matrices.dense(m, n, Array(0.0, 1.0, 2.0, 3.0, 4.0, 5.0))\n+    val denseCopy = denseMat.copy\n+\n+    assert(!denseMat.toArray.eq(denseCopy.toArray))\n+\n+    val values = Array(1.0, 2.0, 4.0, 5.0)\n+    val colIndices = Array(0, 2, 4)"
  }],
  "prId": 2294
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`colPtrs`\n",
    "commit": "88814ed215e81bb6b945c8fff60bdb822ac2cb96",
    "createdAt": "2014-09-18T04:53:39Z",
    "diffHunk": "@@ -36,4 +36,79 @@ class MatricesSuite extends FunSuite {\n       Matrices.dense(3, 2, Array(0.0, 1.0, 2.0))\n     }\n   }\n+\n+  test(\"sparse matrix construction\") {\n+    val m = 3\n+    val n = 2\n+    val values = Array(1.0, 2.0, 4.0, 5.0)\n+    val colIndices = Array(0, 2, 4)\n+    val rowIndices = Array(1, 2, 1, 2)\n+    val mat = Matrices.sparse(m, n, colIndices, rowIndices, values).asInstanceOf[SparseMatrix]\n+    assert(mat.numRows === m)\n+    assert(mat.numCols === n)\n+    assert(mat.values.eq(values), \"should not copy data\")\n+  }\n+\n+  test(\"sparse matrix construction with wrong number of elements\") {\n+    intercept[RuntimeException] {\n+      Matrices.sparse(3, 2, Array(0, 1), Array(1, 2, 1), Array(0.0, 1.0, 2.0))\n+    }\n+\n+    intercept[RuntimeException] {\n+      Matrices.sparse(3, 2, Array(0, 1, 2), Array(1, 2), Array(0.0, 1.0, 2.0))\n+    }\n+  }\n+\n+  test(\"matrix copies are deep copies\") {\n+    val m = 3\n+    val n = 2\n+\n+    val denseMat = Matrices.dense(m, n, Array(0.0, 1.0, 2.0, 3.0, 4.0, 5.0))\n+    val denseCopy = denseMat.copy\n+\n+    assert(!denseMat.toArray.eq(denseCopy.toArray))\n+\n+    val values = Array(1.0, 2.0, 4.0, 5.0)\n+    val colIndices = Array(0, 2, 4)\n+    val rowIndices = Array(1, 2, 1, 2)\n+    val sparseMat = Matrices.sparse(m, n, colIndices, rowIndices, values)\n+    val sparseCopy = sparseMat.copy\n+\n+    assert(!sparseMat.toArray.eq(sparseCopy.toArray))\n+  }\n+\n+  test(\"matrix indexing and updating\") {\n+    val m = 3\n+    val n = 2\n+    val allValues = Array(0.0, 1.0, 2.0, 3.0, 4.0, 0.0)\n+\n+    val denseMat = new DenseMatrix(m, n, allValues)\n+\n+    assert(denseMat(0, 1) == 3.0)\n+    assert(denseMat(0, 1) == denseMat.values(3))\n+    assert(denseMat(0, 1) == denseMat(3))\n+    assert(denseMat(0, 0) == 0.0)\n+\n+    denseMat.update(0, 0, 10.0)\n+    assert(denseMat(0, 0) == 10.0)\n+    assert(denseMat.values(0) == 10.0)\n+\n+    val sparseValues = Array(1.0, 2.0, 3.0, 4.0)\n+    val colIndices = Array(0, 2, 4)"
  }],
  "prId": 2294
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Should throw `NoSuchElementException`.\n",
    "commit": "88814ed215e81bb6b945c8fff60bdb822ac2cb96",
    "createdAt": "2014-09-18T04:53:40Z",
    "diffHunk": "@@ -36,4 +36,79 @@ class MatricesSuite extends FunSuite {\n       Matrices.dense(3, 2, Array(0.0, 1.0, 2.0))\n     }\n   }\n+\n+  test(\"sparse matrix construction\") {\n+    val m = 3\n+    val n = 2\n+    val values = Array(1.0, 2.0, 4.0, 5.0)\n+    val colIndices = Array(0, 2, 4)\n+    val rowIndices = Array(1, 2, 1, 2)\n+    val mat = Matrices.sparse(m, n, colIndices, rowIndices, values).asInstanceOf[SparseMatrix]\n+    assert(mat.numRows === m)\n+    assert(mat.numCols === n)\n+    assert(mat.values.eq(values), \"should not copy data\")\n+  }\n+\n+  test(\"sparse matrix construction with wrong number of elements\") {\n+    intercept[RuntimeException] {\n+      Matrices.sparse(3, 2, Array(0, 1), Array(1, 2, 1), Array(0.0, 1.0, 2.0))\n+    }\n+\n+    intercept[RuntimeException] {\n+      Matrices.sparse(3, 2, Array(0, 1, 2), Array(1, 2), Array(0.0, 1.0, 2.0))\n+    }\n+  }\n+\n+  test(\"matrix copies are deep copies\") {\n+    val m = 3\n+    val n = 2\n+\n+    val denseMat = Matrices.dense(m, n, Array(0.0, 1.0, 2.0, 3.0, 4.0, 5.0))\n+    val denseCopy = denseMat.copy\n+\n+    assert(!denseMat.toArray.eq(denseCopy.toArray))\n+\n+    val values = Array(1.0, 2.0, 4.0, 5.0)\n+    val colIndices = Array(0, 2, 4)\n+    val rowIndices = Array(1, 2, 1, 2)\n+    val sparseMat = Matrices.sparse(m, n, colIndices, rowIndices, values)\n+    val sparseCopy = sparseMat.copy\n+\n+    assert(!sparseMat.toArray.eq(sparseCopy.toArray))\n+  }\n+\n+  test(\"matrix indexing and updating\") {\n+    val m = 3\n+    val n = 2\n+    val allValues = Array(0.0, 1.0, 2.0, 3.0, 4.0, 0.0)\n+\n+    val denseMat = new DenseMatrix(m, n, allValues)\n+\n+    assert(denseMat(0, 1) == 3.0)\n+    assert(denseMat(0, 1) == denseMat.values(3))\n+    assert(denseMat(0, 1) == denseMat(3))\n+    assert(denseMat(0, 0) == 0.0)\n+\n+    denseMat.update(0, 0, 10.0)\n+    assert(denseMat(0, 0) == 10.0)\n+    assert(denseMat.values(0) == 10.0)\n+\n+    val sparseValues = Array(1.0, 2.0, 3.0, 4.0)\n+    val colIndices = Array(0, 2, 4)\n+    val rowIndices = Array(1, 2, 0, 1)\n+    val sparseMat = new SparseMatrix(m, n, colIndices, rowIndices, sparseValues)\n+\n+    assert(sparseMat(0, 1) == 3.0)\n+    assert(sparseMat(0, 1) == sparseMat.values(2))\n+    assert(sparseMat(0, 1) == sparseMat(2))\n+    assert(sparseMat(0, 0) == 0.0)\n+\n+    intercept[IllegalArgumentException] {"
  }],
  "prId": 2294
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`==` -> `===` (please update others as well)\n",
    "commit": "88814ed215e81bb6b945c8fff60bdb822ac2cb96",
    "createdAt": "2014-09-18T04:53:42Z",
    "diffHunk": "@@ -36,4 +36,79 @@ class MatricesSuite extends FunSuite {\n       Matrices.dense(3, 2, Array(0.0, 1.0, 2.0))\n     }\n   }\n+\n+  test(\"sparse matrix construction\") {\n+    val m = 3\n+    val n = 2\n+    val values = Array(1.0, 2.0, 4.0, 5.0)\n+    val colIndices = Array(0, 2, 4)\n+    val rowIndices = Array(1, 2, 1, 2)\n+    val mat = Matrices.sparse(m, n, colIndices, rowIndices, values).asInstanceOf[SparseMatrix]\n+    assert(mat.numRows === m)\n+    assert(mat.numCols === n)\n+    assert(mat.values.eq(values), \"should not copy data\")\n+  }\n+\n+  test(\"sparse matrix construction with wrong number of elements\") {\n+    intercept[RuntimeException] {\n+      Matrices.sparse(3, 2, Array(0, 1), Array(1, 2, 1), Array(0.0, 1.0, 2.0))\n+    }\n+\n+    intercept[RuntimeException] {\n+      Matrices.sparse(3, 2, Array(0, 1, 2), Array(1, 2), Array(0.0, 1.0, 2.0))\n+    }\n+  }\n+\n+  test(\"matrix copies are deep copies\") {\n+    val m = 3\n+    val n = 2\n+\n+    val denseMat = Matrices.dense(m, n, Array(0.0, 1.0, 2.0, 3.0, 4.0, 5.0))\n+    val denseCopy = denseMat.copy\n+\n+    assert(!denseMat.toArray.eq(denseCopy.toArray))\n+\n+    val values = Array(1.0, 2.0, 4.0, 5.0)\n+    val colIndices = Array(0, 2, 4)\n+    val rowIndices = Array(1, 2, 1, 2)\n+    val sparseMat = Matrices.sparse(m, n, colIndices, rowIndices, values)\n+    val sparseCopy = sparseMat.copy\n+\n+    assert(!sparseMat.toArray.eq(sparseCopy.toArray))\n+  }\n+\n+  test(\"matrix indexing and updating\") {\n+    val m = 3\n+    val n = 2\n+    val allValues = Array(0.0, 1.0, 2.0, 3.0, 4.0, 0.0)\n+\n+    val denseMat = new DenseMatrix(m, n, allValues)\n+\n+    assert(denseMat(0, 1) == 3.0)\n+    assert(denseMat(0, 1) == denseMat.values(3))\n+    assert(denseMat(0, 1) == denseMat(3))\n+    assert(denseMat(0, 0) == 0.0)\n+\n+    denseMat.update(0, 0, 10.0)\n+    assert(denseMat(0, 0) == 10.0)\n+    assert(denseMat.values(0) == 10.0)\n+\n+    val sparseValues = Array(1.0, 2.0, 3.0, 4.0)\n+    val colIndices = Array(0, 2, 4)\n+    val rowIndices = Array(1, 2, 0, 1)\n+    val sparseMat = new SparseMatrix(m, n, colIndices, rowIndices, sparseValues)\n+\n+    assert(sparseMat(0, 1) == 3.0)\n+    assert(sparseMat(0, 1) == sparseMat.values(2))\n+    assert(sparseMat(0, 1) == sparseMat(2))\n+    assert(sparseMat(0, 0) == 0.0)\n+\n+    intercept[IllegalArgumentException] {\n+      sparseMat.update(0, 0, 10.0)\n+    }\n+\n+    sparseMat.update(0, 1, 10.0)\n+    assert(sparseMat(0, 1) == 10.0)"
  }],
  "prId": 2294
}]