[{
  "comments": [{
    "author": {
      "login": "feynmanliang"
    },
    "body": "Test for vector equality rather than `toString`\n",
    "commit": "3a34b56392a549708b9655b2f6ec68d49d7ecc9d",
    "createdAt": "2015-07-03T04:50:37Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.scalatest.FunSuite\n+\n+class SignificantSelectorTest extends FunSuite with MLlibTestSparkContext {\n+  val dv = Vectors.dense(1, 2, 3, 4, 5)\n+  val sv1 = Vectors.sparse(5, Seq((0, 1.0), (1, 2.0), (2, 3.0), (3, 4.0), (4, 5.0)))\n+  val sv2 = Vectors.sparse(5, Seq((2, 3.0)))\n+\n+  test(\"same result vector\") {\n+    val vectors = sc.parallelize(List(\n+      Vectors.dense(0.0, 1.0, 2.0, 3.0, 4.0),\n+      Vectors.dense(4.0, 5.0, 6.0, 7.0, 8.0)\n+    ))\n+\n+    val significant = new SignificantSelector().fit(vectors)\n+    assert(significant.transform(dv).toString == dv.toString)"
  }],
  "prId": 6795
}, {
  "comments": [{
    "author": {
      "login": "feynmanliang"
    },
    "body": "Test equality of vectors\n",
    "commit": "3a34b56392a549708b9655b2f6ec68d49d7ecc9d",
    "createdAt": "2015-07-03T06:38:22Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.scalatest.FunSuite\n+\n+class SignificantSelectorTest extends FunSuite with MLlibTestSparkContext {\n+  val dv = Vectors.dense(1, 2, 3, 4, 5)\n+  val sv1 = Vectors.sparse(5, Seq((0, 1.0), (1, 2.0), (2, 3.0), (3, 4.0), (4, 5.0)))\n+  val sv2 = Vectors.sparse(5, Seq((2, 3.0)))\n+\n+  test(\"same result vector\") {\n+    val vectors = sc.parallelize(List(\n+      Vectors.dense(0.0, 1.0, 2.0, 3.0, 4.0),\n+      Vectors.dense(4.0, 5.0, 6.0, 7.0, 8.0)\n+    ))\n+\n+    val significant = new SignificantSelector().fit(vectors)\n+    assert(significant.transform(dv) == dv)\n+    assert(significant.transform(sv1) == sv1)\n+    assert(significant.transform(sv2) == sv2)\n+  }\n+  \n+  \n+  test(\"shortest result vector\") {\n+    val vectors = sc.parallelize(List(\n+      Vectors.dense(0.0, 2.0, 3.0, 4.0),\n+      Vectors.dense(0.0, 2.0, 3.0, 4.0),\n+      Vectors.dense(0.0, 2.0, 3.0, 4.0),\n+      Vectors.sparse(4, Seq((1, 3.0), (2, 4.0))),\n+      Vectors.dense(0.0, 3.0, 5.0, 4.0),\n+      Vectors.dense(0.0, 3.0, 7.0, 4.0)\n+    ))\n+\n+    val significant = new SignificantSelector().fit(vectors)\n+    assert(significant.transform(dv).toString == \"[2.0,3.0,4.0]\")\n+    assert(significant.transform(sv1).toString == \"(3,[0,1,2],[2.0,3.0,4.0])\")\n+    assert(significant.transform(sv2).toString == \"(3,[1],[3.0])\")\n+  }\n+  \n+  test(\"empty result vector\") {\n+    val vectors = sc.parallelize(List(\n+      Vectors.dense(0.0, 2.0, 3.0, 4.0),\n+      Vectors.dense(0.0, 2.0, 3.0, 4.0)\n+    ))\n+\n+    val significant = new SignificantSelector().fit(vectors)\n+    assert(significant.transform(dv).toString == \"[]\")"
  }],
  "prId": 6795
}, {
  "comments": [{
    "author": {
      "login": "feynmanliang"
    },
    "body": "Test equality of vectors\n",
    "commit": "3a34b56392a549708b9655b2f6ec68d49d7ecc9d",
    "createdAt": "2015-07-03T06:38:26Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.scalatest.FunSuite\n+\n+class SignificantSelectorTest extends FunSuite with MLlibTestSparkContext {\n+  val dv = Vectors.dense(1, 2, 3, 4, 5)\n+  val sv1 = Vectors.sparse(5, Seq((0, 1.0), (1, 2.0), (2, 3.0), (3, 4.0), (4, 5.0)))\n+  val sv2 = Vectors.sparse(5, Seq((2, 3.0)))\n+\n+  test(\"same result vector\") {\n+    val vectors = sc.parallelize(List(\n+      Vectors.dense(0.0, 1.0, 2.0, 3.0, 4.0),\n+      Vectors.dense(4.0, 5.0, 6.0, 7.0, 8.0)\n+    ))\n+\n+    val significant = new SignificantSelector().fit(vectors)\n+    assert(significant.transform(dv) == dv)\n+    assert(significant.transform(sv1) == sv1)\n+    assert(significant.transform(sv2) == sv2)\n+  }\n+  \n+  \n+  test(\"shortest result vector\") {\n+    val vectors = sc.parallelize(List(\n+      Vectors.dense(0.0, 2.0, 3.0, 4.0),\n+      Vectors.dense(0.0, 2.0, 3.0, 4.0),\n+      Vectors.dense(0.0, 2.0, 3.0, 4.0),\n+      Vectors.sparse(4, Seq((1, 3.0), (2, 4.0))),\n+      Vectors.dense(0.0, 3.0, 5.0, 4.0),\n+      Vectors.dense(0.0, 3.0, 7.0, 4.0)\n+    ))\n+\n+    val significant = new SignificantSelector().fit(vectors)\n+    assert(significant.transform(dv).toString == \"[2.0,3.0,4.0]\")"
  }],
  "prId": 6795
}]