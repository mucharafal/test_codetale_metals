[{
  "comments": [{
    "author": {
      "login": "feynmanliang"
    },
    "body": "Move helper method outside of test\n",
    "commit": "0a458bda220930b4b98eb51e542be7d83432087a",
    "createdAt": "2015-07-27T19:57:22Z",
    "diffHunk": "@@ -42,13 +42,13 @@ class PrefixSpanSuite extends SparkFunSuite with MLlibTestSparkContext {\n       Array(3, 4, 4, 3),\n       Array(6, 5, 3))\n \n-    val rdd = sc.parallelize(sequences, 2).cache()\n+    val rdd = sc.parallelize(sequences.map(_.map(Array(_))), 2).cache()\n \n     def compareResult(",
    "line": 7
  }],
  "prId": 7594
}, {
  "comments": [{
    "author": {
      "login": "feynmanliang"
    },
    "body": "Please remove `coder` and test only `PrefixSpan`'s implementation in unit tests. We have a `StringIndexer` to do what `coder` is doing here.\n",
    "commit": "0a458bda220930b4b98eb51e542be7d83432087a",
    "createdAt": "2015-07-27T20:07:31Z",
    "diffHunk": "@@ -107,6 +107,75 @@ class PrefixSpanSuite extends SparkFunSuite with MLlibTestSparkContext {\n       (Array(4, 5), 2L),\n       (Array(5), 3L)\n     )\n-    assert(compareResult(expectedValue3, result3.collect()))\n+    assert(compareResult(expectedValue3.map(x => (x._1.map(Array(_)), x._2)), result3.collect()))\n+\n+    val sequences4 = Array(\n+      \"a,abc,ac,d,cf\",\n+      \"ad,c,bc,ae\",\n+      \"ef,ab,df,c,b\",\n+      \"e,g,af,c,b,c\")\n+    val coder = Array('a', 'b', 'c', 'd', 'e', 'f', 'g').zip(Array(1, 2, 3, 4, 5, 6, 7)).toMap\n+    val intSequences = sequences4.map(_.split(\",\").map(_.toArray.map(coder)))",
    "line": 50
  }],
  "prId": 7594
}, {
  "comments": [{
    "author": {
      "login": "feynmanliang"
    },
    "body": "Why do we need the `.map`s?\n",
    "commit": "0a458bda220930b4b98eb51e542be7d83432087a",
    "createdAt": "2015-07-27T20:08:58Z",
    "diffHunk": "@@ -42,13 +42,13 @@ class PrefixSpanSuite extends SparkFunSuite with MLlibTestSparkContext {\n       Array(3, 4, 4, 3),\n       Array(6, 5, 3))\n \n-    val rdd = sc.parallelize(sequences, 2).cache()\n+    val rdd = sc.parallelize(sequences.map(_.map(Array(_))), 2).cache()",
    "line": 5
  }],
  "prId": 7594
}, {
  "comments": [{
    "author": {
      "login": "feynmanliang"
    },
    "body": "Is this a test for non-temporal sequences? If so, please move to a separate `test` block\n",
    "commit": "0a458bda220930b4b98eb51e542be7d83432087a",
    "createdAt": "2015-07-27T20:10:15Z",
    "diffHunk": "@@ -107,6 +107,75 @@ class PrefixSpanSuite extends SparkFunSuite with MLlibTestSparkContext {\n       (Array(4, 5), 2L),\n       (Array(5), 3L)\n     )\n-    assert(compareResult(expectedValue3, result3.collect()))\n+    assert(compareResult(expectedValue3.map(x => (x._1.map(Array(_)), x._2)), result3.collect()))\n+\n+    val sequences4 = Array(",
    "line": 44
  }],
  "prId": 7594
}]