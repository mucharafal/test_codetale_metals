[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "line too wide\n",
    "commit": "c6941748b58f5b77a480cfbc85cdece9ce8dec5a",
    "createdAt": "2014-09-23T22:22:08Z",
    "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.tree\n+\n+import scala.collection.mutable\n+\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.tree.configuration.Algo._\n+import org.apache.spark.mllib.tree.configuration.Strategy\n+import org.apache.spark.mllib.tree.impl.{BaggedPoint, DecisionTreeMetadata}\n+import org.apache.spark.mllib.tree.impurity.Gini\n+import org.apache.spark.mllib.tree.model.{Node, RandomForestModel}\n+import org.apache.spark.mllib.util.LocalSparkContext\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * Test suite for [[RandomForest]].\n+ */\n+class RandomForestSuite extends FunSuite with LocalSparkContext {\n+\n+  test(\"BaggedPoint RDD: without subsampling\") {\n+    val arr = RandomForestSuite.generateOrderedLabeledPoints(numFeatures = 1)\n+    val rdd = sc.parallelize(arr)\n+    val baggedRDD = BaggedPoint.convertToBaggedRDDWithoutSampling(rdd)\n+    baggedRDD.collect().foreach { baggedPoint =>\n+      assert(baggedPoint.subsampleWeights.size == 1 && baggedPoint.subsampleWeights(0) == 1)\n+    }\n+  }\n+\n+  test(\"BaggedPoint RDD: with subsampling\") {\n+    val numSubsamples = 100\n+    val (expectedMean, expectedStddev) = (1.0, 1.0)\n+\n+    val seeds = Array(123, 5354, 230, 349867, 23987)\n+    val arr = RandomForestSuite.generateOrderedLabeledPoints(numFeatures = 1)\n+    val rdd = sc.parallelize(arr)\n+    seeds.foreach { seed =>\n+      val baggedRDD = BaggedPoint.convertToBaggedRDD(rdd, numSubsamples, seed = seed)\n+      val subsampleCounts: Array[Array[Double]] = baggedRDD.map(_.subsampleWeights).collect()\n+      RandomForestSuite.testRandomArrays(subsampleCounts, numSubsamples, expectedMean, expectedStddev,"
  }],
  "prId": 2435
}]