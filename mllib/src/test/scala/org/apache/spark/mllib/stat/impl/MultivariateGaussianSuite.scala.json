[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "typo: space between . and toDenseVector\n",
    "commit": "383b5b3c69189adf3a5d3dfd7e4857056bcd488c",
    "createdAt": "2015-01-03T03:03:19Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.impl\n+\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.mllib.linalg.{Vectors, Matrices}\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+\n+class MultivariateGaussianSuite extends FunSuite with MLlibTestSparkContext {\n+  test(\"univariate\") {\n+    val x = Vectors.dense(0.0).toBreeze.toDenseVector\n+    \n+    val mu = Vectors.dense(0.0).toBreeze.toDenseVector\n+    var sigma = Matrices.dense(1, 1, Array(1.0)).toBreeze.toDenseMatrix\n+    var dist = new MultivariateGaussian(mu, sigma)\n+    assert(dist.pdf(x) ~== 0.39894 absTol 1E-5)\n+    \n+    sigma = Matrices.dense(1, 1, Array(4.0)).toBreeze.toDenseMatrix\n+    dist = new MultivariateGaussian(mu, sigma)\n+    assert(dist.pdf(x) ~== 0.19947 absTol 1E-5)\n+  }\n+  \n+  test(\"multivariate\") {\n+    val x = Vectors.dense(0.0, 0.0).toBreeze.toDenseVector\n+    \n+    val mu = Vectors.dense(0.0, 0.0).toBreeze. toDenseVector"
  }],
  "prId": 3871
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "typo: space between . and toDenseVector\n",
    "commit": "383b5b3c69189adf3a5d3dfd7e4857056bcd488c",
    "createdAt": "2015-01-03T03:03:21Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.impl\n+\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.mllib.linalg.{Vectors, Matrices}\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+\n+class MultivariateGaussianSuite extends FunSuite with MLlibTestSparkContext {\n+  test(\"univariate\") {\n+    val x = Vectors.dense(0.0).toBreeze.toDenseVector\n+    \n+    val mu = Vectors.dense(0.0).toBreeze.toDenseVector\n+    var sigma = Matrices.dense(1, 1, Array(1.0)).toBreeze.toDenseMatrix\n+    var dist = new MultivariateGaussian(mu, sigma)\n+    assert(dist.pdf(x) ~== 0.39894 absTol 1E-5)\n+    \n+    sigma = Matrices.dense(1, 1, Array(4.0)).toBreeze.toDenseMatrix\n+    dist = new MultivariateGaussian(mu, sigma)\n+    assert(dist.pdf(x) ~== 0.19947 absTol 1E-5)\n+  }\n+  \n+  test(\"multivariate\") {\n+    val x = Vectors.dense(0.0, 0.0).toBreeze.toDenseVector\n+    \n+    val mu = Vectors.dense(0.0, 0.0).toBreeze. toDenseVector\n+    var sigma = Matrices.dense(2, 2, Array(1.0, 0.0, 0.0, 1.0)).toBreeze.toDenseMatrix\n+    var dist = new MultivariateGaussian(mu, sigma)\n+    assert(dist.pdf(x) ~== 0.15915 absTol 1E-5)\n+    \n+    sigma = Matrices.dense(2, 2, Array(4.0, -1.0, -1.0, 2.0)).toBreeze.toDenseMatrix\n+    dist = new MultivariateGaussian(mu, sigma)\n+    assert(dist.pdf(x) ~== 0.060155 absTol 1E-5)\n+  }\n+  \n+  test(\"multivariate degenerate\") {\n+    val x = Vectors.dense(0.0, 0.0).toBreeze.toDenseVector\n+    \n+    val mu = Vectors.dense(0.0, 0.0).toBreeze. toDenseVector"
  }],
  "prId": 3871
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Good catch with the other var; could you please fix this and the test above too?  var -> val\n",
    "commit": "383b5b3c69189adf3a5d3dfd7e4857056bcd488c",
    "createdAt": "2015-01-03T19:29:05Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.impl\n+\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.mllib.linalg.{Vectors, Matrices}\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+\n+class MultivariateGaussianSuite extends FunSuite with MLlibTestSparkContext {\n+  test(\"univariate\") {\n+    val x = Vectors.dense(0.0).toBreeze.toDenseVector\n+    \n+    val mu = Vectors.dense(0.0).toBreeze.toDenseVector\n+    var sigma = Matrices.dense(1, 1, Array(1.0)).toBreeze.toDenseMatrix\n+    var dist = new MultivariateGaussian(mu, sigma)\n+    assert(dist.pdf(x) ~== 0.39894 absTol 1E-5)\n+    \n+    sigma = Matrices.dense(1, 1, Array(4.0)).toBreeze.toDenseMatrix\n+    dist = new MultivariateGaussian(mu, sigma)\n+    assert(dist.pdf(x) ~== 0.19947 absTol 1E-5)\n+  }\n+  \n+  test(\"multivariate\") {\n+    val x = Vectors.dense(0.0, 0.0).toBreeze.toDenseVector\n+    \n+    val mu = Vectors.dense(0.0, 0.0).toBreeze.toDenseVector\n+    var sigma = Matrices.dense(2, 2, Array(1.0, 0.0, 0.0, 1.0)).toBreeze.toDenseMatrix"
  }, {
    "author": {
      "login": "tgaloppo"
    },
    "body": "@jkbradley No problem; fixed.\n",
    "commit": "383b5b3c69189adf3a5d3dfd7e4857056bcd488c",
    "createdAt": "2015-01-03T20:12:12Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.impl\n+\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.mllib.linalg.{Vectors, Matrices}\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+\n+class MultivariateGaussianSuite extends FunSuite with MLlibTestSparkContext {\n+  test(\"univariate\") {\n+    val x = Vectors.dense(0.0).toBreeze.toDenseVector\n+    \n+    val mu = Vectors.dense(0.0).toBreeze.toDenseVector\n+    var sigma = Matrices.dense(1, 1, Array(1.0)).toBreeze.toDenseMatrix\n+    var dist = new MultivariateGaussian(mu, sigma)\n+    assert(dist.pdf(x) ~== 0.39894 absTol 1E-5)\n+    \n+    sigma = Matrices.dense(1, 1, Array(4.0)).toBreeze.toDenseMatrix\n+    dist = new MultivariateGaussian(mu, sigma)\n+    assert(dist.pdf(x) ~== 0.19947 absTol 1E-5)\n+  }\n+  \n+  test(\"multivariate\") {\n+    val x = Vectors.dense(0.0, 0.0).toBreeze.toDenseVector\n+    \n+    val mu = Vectors.dense(0.0, 0.0).toBreeze.toDenseVector\n+    var sigma = Matrices.dense(2, 2, Array(1.0, 0.0, 0.0, 1.0)).toBreeze.toDenseMatrix"
  }],
  "prId": 3871
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "It might be good to test at 2 points, rather than just 1.  (This tests the distribution constant but not inv(Sigma).)\n",
    "commit": "383b5b3c69189adf3a5d3dfd7e4857056bcd488c",
    "createdAt": "2015-01-04T20:46:17Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.impl\n+\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.mllib.linalg.{Vectors, Matrices}\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+\n+class MultivariateGaussianSuite extends FunSuite with MLlibTestSparkContext {\n+  test(\"univariate\") {\n+    val x = Vectors.dense(0.0).toBreeze.toDenseVector"
  }],
  "prId": 3871
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "We can construct `BDV` and `BDM` directly.\n",
    "commit": "383b5b3c69189adf3a5d3dfd7e4857056bcd488c",
    "createdAt": "2015-01-05T19:57:37Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.impl\n+\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.mllib.linalg.{Vectors, Matrices}\n+import org.apache.spark.mllib.util.MLlibTestSparkContext\n+import org.apache.spark.mllib.util.TestingUtils._\n+\n+class MultivariateGaussianSuite extends FunSuite with MLlibTestSparkContext {\n+  test(\"univariate\") {\n+    val x1 = Vectors.dense(0.0).toBreeze.toDenseVector"
  }],
  "prId": 3871
}]