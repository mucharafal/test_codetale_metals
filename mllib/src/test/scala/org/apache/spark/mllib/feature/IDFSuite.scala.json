[{
  "comments": [{
    "author": {
      "login": "Ishiihara"
    },
    "body": "toDouble is not needed. \n",
    "commit": "0aa3c63b699f60d3c08ba8bf739a29e8a35d999a",
    "createdAt": "2014-09-22T21:21:28Z",
    "diffHunk": "@@ -54,4 +54,38 @@ class IDFSuite extends FunSuite with LocalSparkContext {\n     assert(tfidf2.indices === Array(1))\n     assert(tfidf2.values(0) ~== (1.0 * expected(1)) absTol 1e-12)\n   }\n+\n+  test(\"idf minimum occurence filtering\") {\n+    val n = 4\n+    val localTermFrequencies = Seq(\n+      Vectors.sparse(n, Array(1, 3), Array(1.0, 2.0)),\n+      Vectors.dense(0.0, 1.0, 2.0, 3.0),\n+      Vectors.sparse(n, Array(1), Array(1.0))\n+    )\n+    val m = localTermFrequencies.size\n+    val termFrequencies = sc.parallelize(localTermFrequencies, 2)\n+    val idf = new IDF(minimumOccurence=1L)\n+    val model = idf.fit(termFrequencies)\n+    val expected = Vectors.dense(Array(0, 3, 1, 2).map { x =>\n+      if(x > 0) {\n+        math.log((m.toDouble + 1.0) / (x + 1.0))"
  }, {
    "author": {
      "login": "rnowling"
    },
    "body": "I copied that line from the original test suite function -- I kept it to be consistent.  I don't think this change is relevant to this PR.\n",
    "commit": "0aa3c63b699f60d3c08ba8bf739a29e8a35d999a",
    "createdAt": "2014-09-22T21:49:00Z",
    "diffHunk": "@@ -54,4 +54,38 @@ class IDFSuite extends FunSuite with LocalSparkContext {\n     assert(tfidf2.indices === Array(1))\n     assert(tfidf2.values(0) ~== (1.0 * expected(1)) absTol 1e-12)\n   }\n+\n+  test(\"idf minimum occurence filtering\") {\n+    val n = 4\n+    val localTermFrequencies = Seq(\n+      Vectors.sparse(n, Array(1, 3), Array(1.0, 2.0)),\n+      Vectors.dense(0.0, 1.0, 2.0, 3.0),\n+      Vectors.sparse(n, Array(1), Array(1.0))\n+    )\n+    val m = localTermFrequencies.size\n+    val termFrequencies = sc.parallelize(localTermFrequencies, 2)\n+    val idf = new IDF(minimumOccurence=1L)\n+    val model = idf.fit(termFrequencies)\n+    val expected = Vectors.dense(Array(0, 3, 1, 2).map { x =>\n+      if(x > 0) {\n+        math.log((m.toDouble + 1.0) / (x + 1.0))"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Could you remove `.toDouble` from both with your next update? It is orthogonal to this PR but it is a small change. Thanks!\n",
    "commit": "0aa3c63b699f60d3c08ba8bf739a29e8a35d999a",
    "createdAt": "2014-09-23T16:40:17Z",
    "diffHunk": "@@ -54,4 +54,38 @@ class IDFSuite extends FunSuite with LocalSparkContext {\n     assert(tfidf2.indices === Array(1))\n     assert(tfidf2.values(0) ~== (1.0 * expected(1)) absTol 1e-12)\n   }\n+\n+  test(\"idf minimum occurence filtering\") {\n+    val n = 4\n+    val localTermFrequencies = Seq(\n+      Vectors.sparse(n, Array(1, 3), Array(1.0, 2.0)),\n+      Vectors.dense(0.0, 1.0, 2.0, 3.0),\n+      Vectors.sparse(n, Array(1), Array(1.0))\n+    )\n+    val m = localTermFrequencies.size\n+    val termFrequencies = sc.parallelize(localTermFrequencies, 2)\n+    val idf = new IDF(minimumOccurence=1L)\n+    val model = idf.fit(termFrequencies)\n+    val expected = Vectors.dense(Array(0, 3, 1, 2).map { x =>\n+      if(x > 0) {\n+        math.log((m.toDouble + 1.0) / (x + 1.0))"
  }],
  "prId": 2494
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "add spaces around `=`\n",
    "commit": "0aa3c63b699f60d3c08ba8bf739a29e8a35d999a",
    "createdAt": "2014-09-23T16:40:11Z",
    "diffHunk": "@@ -54,4 +54,38 @@ class IDFSuite extends FunSuite with LocalSparkContext {\n     assert(tfidf2.indices === Array(1))\n     assert(tfidf2.values(0) ~== (1.0 * expected(1)) absTol 1e-12)\n   }\n+\n+  test(\"idf minimum occurence filtering\") {\n+    val n = 4\n+    val localTermFrequencies = Seq(\n+      Vectors.sparse(n, Array(1, 3), Array(1.0, 2.0)),\n+      Vectors.dense(0.0, 1.0, 2.0, 3.0),\n+      Vectors.sparse(n, Array(1), Array(1.0))\n+    )\n+    val m = localTermFrequencies.size\n+    val termFrequencies = sc.parallelize(localTermFrequencies, 2)\n+    val idf = new IDF(minimumOccurence=1L)"
  }],
  "prId": 2494
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "space after `if`\n",
    "commit": "0aa3c63b699f60d3c08ba8bf739a29e8a35d999a",
    "createdAt": "2014-09-23T16:40:14Z",
    "diffHunk": "@@ -54,4 +54,38 @@ class IDFSuite extends FunSuite with LocalSparkContext {\n     assert(tfidf2.indices === Array(1))\n     assert(tfidf2.values(0) ~== (1.0 * expected(1)) absTol 1e-12)\n   }\n+\n+  test(\"idf minimum occurence filtering\") {\n+    val n = 4\n+    val localTermFrequencies = Seq(\n+      Vectors.sparse(n, Array(1, 3), Array(1.0, 2.0)),\n+      Vectors.dense(0.0, 1.0, 2.0, 3.0),\n+      Vectors.sparse(n, Array(1), Array(1.0))\n+    )\n+    val m = localTermFrequencies.size\n+    val termFrequencies = sc.parallelize(localTermFrequencies, 2)\n+    val idf = new IDF(minimumOccurence=1L)\n+    val model = idf.fit(termFrequencies)\n+    val expected = Vectors.dense(Array(0, 3, 1, 2).map { x =>\n+      if(x > 0) {"
  }],
  "prId": 2494
}]