[{
  "comments": [{
    "author": {
      "login": "tgaloppo"
    },
    "body": "For the single cluster case, I don't think the seed can make a difference.  With only one cluster, this just makes sure the right mean and covariance are computed correctly.\n",
    "commit": "f0df4fd786d7bc552e6ecd2447d8f814a98eb34b",
    "createdAt": "2015-01-09T19:05:01Z",
    "diffHunk": "@@ -35,12 +35,14 @@ class GMMExpectationMaximizationSuite extends FunSuite with MLlibTestSparkContex\n     val Ew = 1.0\n     val Emu = Vectors.dense(5.0, 10.0)\n     val Esigma = Matrices.dense(2, 2, Array(2.0 / 3.0, -2.0 / 3.0, -2.0 / 3.0, 2.0 / 3.0))\n-    \n-    val gmm = new GaussianMixtureEM().setK(1).run(data)\n-                \n-    assert(gmm.weight(0) ~== Ew absTol 1E-5)\n-    assert(gmm.mu(0) ~== Emu absTol 1E-5)\n-    assert(gmm.sigma(0) ~== Esigma absTol 1E-5)\n+\n+    val seeds = Array(314589, 29032897, 50181, 494821, 4660)\n+    seeds.foreach { seed =>\n+      val gmm = new GaussianMixtureEM().setK(1).setSeed(seed).run(data)\n+      assert(gmm.weight(0) ~== Ew absTol 1E-5)\n+      assert(gmm.mu(0) ~== Emu absTol 1E-5)\n+      assert(gmm.sigma(0) ~== Esigma absTol 1E-5)\n+    }",
    "line": 17
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "In general, you're correct.  The issue is that, with some probability, the 5 data points chosen for initializing the cluster will be identical, causing initialization of the covariance matrix to fail.\n\nI'd be fine with having this test use only 1 random seed instead of 5, but it's fast anyways.\n",
    "commit": "f0df4fd786d7bc552e6ecd2447d8f814a98eb34b",
    "createdAt": "2015-01-09T19:37:01Z",
    "diffHunk": "@@ -35,12 +35,14 @@ class GMMExpectationMaximizationSuite extends FunSuite with MLlibTestSparkContex\n     val Ew = 1.0\n     val Emu = Vectors.dense(5.0, 10.0)\n     val Esigma = Matrices.dense(2, 2, Array(2.0 / 3.0, -2.0 / 3.0, -2.0 / 3.0, 2.0 / 3.0))\n-    \n-    val gmm = new GaussianMixtureEM().setK(1).run(data)\n-                \n-    assert(gmm.weight(0) ~== Ew absTol 1E-5)\n-    assert(gmm.mu(0) ~== Emu absTol 1E-5)\n-    assert(gmm.sigma(0) ~== Esigma absTol 1E-5)\n+\n+    val seeds = Array(314589, 29032897, 50181, 494821, 4660)\n+    seeds.foreach { seed =>\n+      val gmm = new GaussianMixtureEM().setK(1).setSeed(seed).run(data)\n+      assert(gmm.weight(0) ~== Ew absTol 1E-5)\n+      assert(gmm.mu(0) ~== Emu absTol 1E-5)\n+      assert(gmm.sigma(0) ~== Esigma absTol 1E-5)\n+    }",
    "line": 17
  }, {
    "author": {
      "login": "tgaloppo"
    },
    "body": "Got it!\n",
    "commit": "f0df4fd786d7bc552e6ecd2447d8f814a98eb34b",
    "createdAt": "2015-01-09T19:43:29Z",
    "diffHunk": "@@ -35,12 +35,14 @@ class GMMExpectationMaximizationSuite extends FunSuite with MLlibTestSparkContex\n     val Ew = 1.0\n     val Emu = Vectors.dense(5.0, 10.0)\n     val Esigma = Matrices.dense(2, 2, Array(2.0 / 3.0, -2.0 / 3.0, -2.0 / 3.0, 2.0 / 3.0))\n-    \n-    val gmm = new GaussianMixtureEM().setK(1).run(data)\n-                \n-    assert(gmm.weight(0) ~== Ew absTol 1E-5)\n-    assert(gmm.mu(0) ~== Emu absTol 1E-5)\n-    assert(gmm.sigma(0) ~== Esigma absTol 1E-5)\n+\n+    val seeds = Array(314589, 29032897, 50181, 494821, 4660)\n+    seeds.foreach { seed =>\n+      val gmm = new GaussianMixtureEM().setK(1).setSeed(seed).run(data)\n+      assert(gmm.weight(0) ~== Ew absTol 1E-5)\n+      assert(gmm.mu(0) ~== Emu absTol 1E-5)\n+      assert(gmm.sigma(0) ~== Esigma absTol 1E-5)\n+    }",
    "line": 17
  }],
  "prId": 3981
}]