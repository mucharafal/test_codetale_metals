[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "There is a LocalSparkContext in mllib test, which you can use to save `beforeAll` and `afterAll`.\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-18T21:47:48Z",
    "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.linalg\n+\n+import scala.util.Random\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.jblas.{DoubleMatrix, Singular, MatrixFunctions}\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.rdd.RDD\n+\n+import org.apache.spark.mllib.util._\n+\n+import org.jblas._\n+\n+class PCASuite extends FunSuite with BeforeAndAfterAll {",
    "line": 33
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "I am following other mllib tests here.\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T06:28:01Z",
    "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.linalg\n+\n+import scala.util.Random\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.jblas.{DoubleMatrix, Singular, MatrixFunctions}\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.rdd.RDD\n+\n+import org.apache.spark.mllib.util._\n+\n+import org.jblas._\n+\n+class PCASuite extends FunSuite with BeforeAndAfterAll {",
    "line": 33
  }],
  "prId": 88
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Use more than one partitions for the RDD.\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-18T21:50:01Z",
    "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.linalg\n+\n+import scala.util.Random\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.jblas.{DoubleMatrix, Singular, MatrixFunctions}\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.rdd.RDD\n+\n+import org.apache.spark.mllib.util._\n+\n+import org.jblas._\n+\n+class PCASuite extends FunSuite with BeforeAndAfterAll {\n+  @transient private var sc: SparkContext = _\n+\n+  override def beforeAll() {\n+    sc = new SparkContext(\"local\", \"test\")\n+  }\n+\n+  override def afterAll() {\n+    sc.stop()\n+    System.clearProperty(\"spark.driver.port\")\n+  }\n+\n+  val EPSILON = 1e-3\n+\n+  // Return jblas matrix from sparse matrix RDD\n+  def getDenseMatrix(matrix: SparseMatrix) : DoubleMatrix = {\n+    val data = matrix.data\n+    val m = matrix.m\n+    val n = matrix.n\n+    val ret = DoubleMatrix.zeros(m, n)\n+    matrix.data.toArray.map(x => ret.put(x.i, x.j, x.mval))\n+    ret\n+  }\n+\n+  def assertMatrixEquals(a: DoubleMatrix, b: DoubleMatrix) {\n+    assert(a.rows == b.rows && a.columns == b.columns, \"dimension mismatch\")\n+    val diff = DoubleMatrix.zeros(a.rows, a.columns)\n+    Array.tabulate(a.rows, a.columns){(i, j) =>\n+      diff.put(i, j,\n+          Math.min(Math.abs(a.get(i, j) - b.get(i, j)),\n+          Math.abs(a.get(i, j) + b.get(i, j))))  }\n+    assert(diff.norm1 < EPSILON, \"matrix mismatch: \" + diff.norm1)\n+  }\n+\n+  test(\"full rank matrix pca\") {\n+    val m = 5\n+    val n = 3\n+    val data = sc.makeRDD(Array.tabulate(m,n){ (a, b) =>\n+      MatrixEntry(a, b, Math.sin(a+b+a*b)) }.flatten )\n+    val a = LAUtils.spToDense(SparseMatrix(data, m, n))\n+\n+    val realPCAArray = Array((0,0,-0.2579), (0,1,-0.6602), (0,2,0.7054),\n+                        (1,0,-0.1448), (1,1,0.7483),  (1,2,0.6474),\n+                        (2,0,0.9553),  (2,1,-0.0649),  (2,2,0.2886))\n+    val realPCA = sc.makeRDD(realPCAArray.map(x => MatrixEntry(x._1, x._2, x._3)))\n+\n+    val coeffs = new DoubleMatrix(new PCA().computePCA(a, n))\n+\n+    assertMatrixEquals(getDenseMatrix(SparseMatrix(realPCA,n,n)), coeffs)  \n+  }\n+\n+  test(\"sparse matrix full rank matrix pca\") {\n+    val m = 5\n+    val n = 3\n+    val data = sc.makeRDD(Array.tabulate(m,n){ (a, b) =>\n+      MatrixEntry(a, b, Math.sin(a+b+a*b)) }.flatten.drop(1) )\n+    val a = LAUtils.spToDense(SparseMatrix(data, m, n))\n+\n+    val realPCAArray = Array((0,0,-0.2579), (0,1,-0.6602), (0,2,0.7054),\n+                        (1,0,-0.1448), (1,1,0.7483),  (1,2,0.6474),\n+                        (2,0,0.9553),  (2,1,-0.0649),  (2,2,0.2886))\n+    val realPCA = sc.makeRDD(realPCAArray.map(x => MatrixEntry(x._1, x._2, x._3)))\n+\n+    val coeffs = new DoubleMatrix(new PCA().computePCA(a, n))\n+\n+    assertMatrixEquals(getDenseMatrix(SparseMatrix(realPCA,n,n)), coeffs)\n+  }\n+\n+  test(\"truncated matrix pca\") {\n+    val m = 5\n+    val n = 3\n+    val data = sc.makeRDD(Array.tabulate(m,n){ (a, b) =>"
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "Done\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T06:28:41Z",
    "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.linalg\n+\n+import scala.util.Random\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.jblas.{DoubleMatrix, Singular, MatrixFunctions}\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.rdd.RDD\n+\n+import org.apache.spark.mllib.util._\n+\n+import org.jblas._\n+\n+class PCASuite extends FunSuite with BeforeAndAfterAll {\n+  @transient private var sc: SparkContext = _\n+\n+  override def beforeAll() {\n+    sc = new SparkContext(\"local\", \"test\")\n+  }\n+\n+  override def afterAll() {\n+    sc.stop()\n+    System.clearProperty(\"spark.driver.port\")\n+  }\n+\n+  val EPSILON = 1e-3\n+\n+  // Return jblas matrix from sparse matrix RDD\n+  def getDenseMatrix(matrix: SparseMatrix) : DoubleMatrix = {\n+    val data = matrix.data\n+    val m = matrix.m\n+    val n = matrix.n\n+    val ret = DoubleMatrix.zeros(m, n)\n+    matrix.data.toArray.map(x => ret.put(x.i, x.j, x.mval))\n+    ret\n+  }\n+\n+  def assertMatrixEquals(a: DoubleMatrix, b: DoubleMatrix) {\n+    assert(a.rows == b.rows && a.columns == b.columns, \"dimension mismatch\")\n+    val diff = DoubleMatrix.zeros(a.rows, a.columns)\n+    Array.tabulate(a.rows, a.columns){(i, j) =>\n+      diff.put(i, j,\n+          Math.min(Math.abs(a.get(i, j) - b.get(i, j)),\n+          Math.abs(a.get(i, j) + b.get(i, j))))  }\n+    assert(diff.norm1 < EPSILON, \"matrix mismatch: \" + diff.norm1)\n+  }\n+\n+  test(\"full rank matrix pca\") {\n+    val m = 5\n+    val n = 3\n+    val data = sc.makeRDD(Array.tabulate(m,n){ (a, b) =>\n+      MatrixEntry(a, b, Math.sin(a+b+a*b)) }.flatten )\n+    val a = LAUtils.spToDense(SparseMatrix(data, m, n))\n+\n+    val realPCAArray = Array((0,0,-0.2579), (0,1,-0.6602), (0,2,0.7054),\n+                        (1,0,-0.1448), (1,1,0.7483),  (1,2,0.6474),\n+                        (2,0,0.9553),  (2,1,-0.0649),  (2,2,0.2886))\n+    val realPCA = sc.makeRDD(realPCAArray.map(x => MatrixEntry(x._1, x._2, x._3)))\n+\n+    val coeffs = new DoubleMatrix(new PCA().computePCA(a, n))\n+\n+    assertMatrixEquals(getDenseMatrix(SparseMatrix(realPCA,n,n)), coeffs)  \n+  }\n+\n+  test(\"sparse matrix full rank matrix pca\") {\n+    val m = 5\n+    val n = 3\n+    val data = sc.makeRDD(Array.tabulate(m,n){ (a, b) =>\n+      MatrixEntry(a, b, Math.sin(a+b+a*b)) }.flatten.drop(1) )\n+    val a = LAUtils.spToDense(SparseMatrix(data, m, n))\n+\n+    val realPCAArray = Array((0,0,-0.2579), (0,1,-0.6602), (0,2,0.7054),\n+                        (1,0,-0.1448), (1,1,0.7483),  (1,2,0.6474),\n+                        (2,0,0.9553),  (2,1,-0.0649),  (2,2,0.2886))\n+    val realPCA = sc.makeRDD(realPCAArray.map(x => MatrixEntry(x._1, x._2, x._3)))\n+\n+    val coeffs = new DoubleMatrix(new PCA().computePCA(a, n))\n+\n+    assertMatrixEquals(getDenseMatrix(SparseMatrix(realPCA,n,n)), coeffs)\n+  }\n+\n+  test(\"truncated matrix pca\") {\n+    val m = 5\n+    val n = 3\n+    val data = sc.makeRDD(Array.tabulate(m,n){ (a, b) =>"
  }],
  "prId": 88
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Need a comment here saying that the one gets dropped is zero.\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-18T21:53:20Z",
    "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.linalg\n+\n+import scala.util.Random\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.jblas.{DoubleMatrix, Singular, MatrixFunctions}\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.rdd.RDD\n+\n+import org.apache.spark.mllib.util._\n+\n+import org.jblas._\n+\n+class PCASuite extends FunSuite with BeforeAndAfterAll {\n+  @transient private var sc: SparkContext = _\n+\n+  override def beforeAll() {\n+    sc = new SparkContext(\"local\", \"test\")\n+  }\n+\n+  override def afterAll() {\n+    sc.stop()\n+    System.clearProperty(\"spark.driver.port\")\n+  }\n+\n+  val EPSILON = 1e-3\n+\n+  // Return jblas matrix from sparse matrix RDD\n+  def getDenseMatrix(matrix: SparseMatrix) : DoubleMatrix = {\n+    val data = matrix.data\n+    val m = matrix.m\n+    val n = matrix.n\n+    val ret = DoubleMatrix.zeros(m, n)\n+    matrix.data.toArray.map(x => ret.put(x.i, x.j, x.mval))\n+    ret\n+  }\n+\n+  def assertMatrixEquals(a: DoubleMatrix, b: DoubleMatrix) {\n+    assert(a.rows == b.rows && a.columns == b.columns, \"dimension mismatch\")\n+    val diff = DoubleMatrix.zeros(a.rows, a.columns)\n+    Array.tabulate(a.rows, a.columns){(i, j) =>\n+      diff.put(i, j,\n+          Math.min(Math.abs(a.get(i, j) - b.get(i, j)),\n+          Math.abs(a.get(i, j) + b.get(i, j))))  }\n+    assert(diff.norm1 < EPSILON, \"matrix mismatch: \" + diff.norm1)\n+  }\n+\n+  test(\"full rank matrix pca\") {\n+    val m = 5\n+    val n = 3\n+    val data = sc.makeRDD(Array.tabulate(m,n){ (a, b) =>\n+      MatrixEntry(a, b, Math.sin(a+b+a*b)) }.flatten )\n+    val a = LAUtils.spToDense(SparseMatrix(data, m, n))\n+\n+    val realPCAArray = Array((0,0,-0.2579), (0,1,-0.6602), (0,2,0.7054),\n+                        (1,0,-0.1448), (1,1,0.7483),  (1,2,0.6474),\n+                        (2,0,0.9553),  (2,1,-0.0649),  (2,2,0.2886))\n+    val realPCA = sc.makeRDD(realPCAArray.map(x => MatrixEntry(x._1, x._2, x._3)))\n+\n+    val coeffs = new DoubleMatrix(new PCA().computePCA(a, n))\n+\n+    assertMatrixEquals(getDenseMatrix(SparseMatrix(realPCA,n,n)), coeffs)  \n+  }\n+\n+  test(\"sparse matrix full rank matrix pca\") {\n+    val m = 5\n+    val n = 3\n+    val data = sc.makeRDD(Array.tabulate(m,n){ (a, b) =>\n+      MatrixEntry(a, b, Math.sin(a+b+a*b)) }.flatten.drop(1) )"
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "done\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T06:29:21Z",
    "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.linalg\n+\n+import scala.util.Random\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.jblas.{DoubleMatrix, Singular, MatrixFunctions}\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.rdd.RDD\n+\n+import org.apache.spark.mllib.util._\n+\n+import org.jblas._\n+\n+class PCASuite extends FunSuite with BeforeAndAfterAll {\n+  @transient private var sc: SparkContext = _\n+\n+  override def beforeAll() {\n+    sc = new SparkContext(\"local\", \"test\")\n+  }\n+\n+  override def afterAll() {\n+    sc.stop()\n+    System.clearProperty(\"spark.driver.port\")\n+  }\n+\n+  val EPSILON = 1e-3\n+\n+  // Return jblas matrix from sparse matrix RDD\n+  def getDenseMatrix(matrix: SparseMatrix) : DoubleMatrix = {\n+    val data = matrix.data\n+    val m = matrix.m\n+    val n = matrix.n\n+    val ret = DoubleMatrix.zeros(m, n)\n+    matrix.data.toArray.map(x => ret.put(x.i, x.j, x.mval))\n+    ret\n+  }\n+\n+  def assertMatrixEquals(a: DoubleMatrix, b: DoubleMatrix) {\n+    assert(a.rows == b.rows && a.columns == b.columns, \"dimension mismatch\")\n+    val diff = DoubleMatrix.zeros(a.rows, a.columns)\n+    Array.tabulate(a.rows, a.columns){(i, j) =>\n+      diff.put(i, j,\n+          Math.min(Math.abs(a.get(i, j) - b.get(i, j)),\n+          Math.abs(a.get(i, j) + b.get(i, j))))  }\n+    assert(diff.norm1 < EPSILON, \"matrix mismatch: \" + diff.norm1)\n+  }\n+\n+  test(\"full rank matrix pca\") {\n+    val m = 5\n+    val n = 3\n+    val data = sc.makeRDD(Array.tabulate(m,n){ (a, b) =>\n+      MatrixEntry(a, b, Math.sin(a+b+a*b)) }.flatten )\n+    val a = LAUtils.spToDense(SparseMatrix(data, m, n))\n+\n+    val realPCAArray = Array((0,0,-0.2579), (0,1,-0.6602), (0,2,0.7054),\n+                        (1,0,-0.1448), (1,1,0.7483),  (1,2,0.6474),\n+                        (2,0,0.9553),  (2,1,-0.0649),  (2,2,0.2886))\n+    val realPCA = sc.makeRDD(realPCAArray.map(x => MatrixEntry(x._1, x._2, x._3)))\n+\n+    val coeffs = new DoubleMatrix(new PCA().computePCA(a, n))\n+\n+    assertMatrixEquals(getDenseMatrix(SparseMatrix(realPCA,n,n)), coeffs)  \n+  }\n+\n+  test(\"sparse matrix full rank matrix pca\") {\n+    val m = 5\n+    val n = 3\n+    val data = sc.makeRDD(Array.tabulate(m,n){ (a, b) =>\n+      MatrixEntry(a, b, Math.sin(a+b+a*b)) }.flatten.drop(1) )"
  }],
  "prId": 88
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "imports should be organized.\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-18T21:53:49Z",
    "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.linalg\n+\n+import scala.util.Random\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.jblas.{DoubleMatrix, Singular, MatrixFunctions}\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.rdd.RDD\n+\n+import org.apache.spark.mllib.util._\n+\n+import org.jblas._",
    "line": 31
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "Done\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T06:30:10Z",
    "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.linalg\n+\n+import scala.util.Random\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.jblas.{DoubleMatrix, Singular, MatrixFunctions}\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.rdd.RDD\n+\n+import org.apache.spark.mllib.util._\n+\n+import org.jblas._",
    "line": 31
  }],
  "prId": 88
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "unnecessary to declare m and n here because they are really only used once. you can just put them in\n\n``` scala\nval ret = DoubleMatrix.zeros(matrix.m, matrix.n)\n```\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T07:20:24Z",
    "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.linalg\n+\n+import scala.util.Random\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.rdd.RDD\n+\n+import org.apache.spark.mllib.util._\n+\n+import org.jblas._\n+\n+class PCASuite extends FunSuite with BeforeAndAfterAll {\n+  @transient private var sc: SparkContext = _\n+\n+  override def beforeAll() {\n+    sc = new SparkContext(\"local\", \"test\")\n+  }\n+\n+  override def afterAll() {\n+    sc.stop()\n+    System.clearProperty(\"spark.driver.port\")\n+  }\n+\n+  val EPSILON = 1e-3\n+\n+  // Return jblas matrix from sparse matrix RDD\n+  def getDenseMatrix(matrix: SparseMatrix) : DoubleMatrix = {\n+    val data = matrix.data\n+    val m = matrix.m"
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "done\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T07:36:07Z",
    "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.linalg\n+\n+import scala.util.Random\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.rdd.RDD\n+\n+import org.apache.spark.mllib.util._\n+\n+import org.jblas._\n+\n+class PCASuite extends FunSuite with BeforeAndAfterAll {\n+  @transient private var sc: SparkContext = _\n+\n+  override def beforeAll() {\n+    sc = new SparkContext(\"local\", \"test\")\n+  }\n+\n+  override def afterAll() {\n+    sc.stop()\n+    System.clearProperty(\"spark.driver.port\")\n+  }\n+\n+  val EPSILON = 1e-3\n+\n+  // Return jblas matrix from sparse matrix RDD\n+  def getDenseMatrix(matrix: SparseMatrix) : DoubleMatrix = {\n+    val data = matrix.data\n+    val m = matrix.m"
  }],
  "prId": 88
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "put a () after collect because (1) it is declared with (), and (2) it has side effect.\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T07:20:52Z",
    "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.linalg\n+\n+import scala.util.Random\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.rdd.RDD\n+\n+import org.apache.spark.mllib.util._\n+\n+import org.jblas._\n+\n+class PCASuite extends FunSuite with BeforeAndAfterAll {\n+  @transient private var sc: SparkContext = _\n+\n+  override def beforeAll() {\n+    sc = new SparkContext(\"local\", \"test\")\n+  }\n+\n+  override def afterAll() {\n+    sc.stop()\n+    System.clearProperty(\"spark.driver.port\")\n+  }\n+\n+  val EPSILON = 1e-3\n+\n+  // Return jblas matrix from sparse matrix RDD\n+  def getDenseMatrix(matrix: SparseMatrix) : DoubleMatrix = {\n+    val data = matrix.data\n+    val m = matrix.m\n+    val n = matrix.n\n+    val ret = DoubleMatrix.zeros(m, n)\n+    matrix.data.collect.map(x => ret.put(x.i, x.j, x.mval))"
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "done\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T07:36:27Z",
    "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.linalg\n+\n+import scala.util.Random\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.rdd.RDD\n+\n+import org.apache.spark.mllib.util._\n+\n+import org.jblas._\n+\n+class PCASuite extends FunSuite with BeforeAndAfterAll {\n+  @transient private var sc: SparkContext = _\n+\n+  override def beforeAll() {\n+    sc = new SparkContext(\"local\", \"test\")\n+  }\n+\n+  override def afterAll() {\n+    sc.stop()\n+    System.clearProperty(\"spark.driver.port\")\n+  }\n+\n+  val EPSILON = 1e-3\n+\n+  // Return jblas matrix from sparse matrix RDD\n+  def getDenseMatrix(matrix: SparseMatrix) : DoubleMatrix = {\n+    val data = matrix.data\n+    val m = matrix.m\n+    val n = matrix.n\n+    val ret = DoubleMatrix.zeros(m, n)\n+    matrix.data.collect.map(x => ret.put(x.i, x.j, x.mval))"
  }],
  "prId": 88
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "probably put the mismatched values here too to aid debugging \n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T07:21:32Z",
    "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.linalg\n+\n+import scala.util.Random\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.rdd.RDD\n+\n+import org.apache.spark.mllib.util._\n+\n+import org.jblas._\n+\n+class PCASuite extends FunSuite with BeforeAndAfterAll {\n+  @transient private var sc: SparkContext = _\n+\n+  override def beforeAll() {\n+    sc = new SparkContext(\"local\", \"test\")\n+  }\n+\n+  override def afterAll() {\n+    sc.stop()\n+    System.clearProperty(\"spark.driver.port\")\n+  }\n+\n+  val EPSILON = 1e-3\n+\n+  // Return jblas matrix from sparse matrix RDD\n+  def getDenseMatrix(matrix: SparseMatrix) : DoubleMatrix = {\n+    val data = matrix.data\n+    val m = matrix.m\n+    val n = matrix.n\n+    val ret = DoubleMatrix.zeros(m, n)\n+    matrix.data.collect.map(x => ret.put(x.i, x.j, x.mval))\n+    ret\n+  }\n+\n+  def assertMatrixEquals(a: DoubleMatrix, b: DoubleMatrix) {\n+    assert(a.rows == b.rows && a.columns == b.columns, \"dimension mismatch\")"
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "Done\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T07:41:41Z",
    "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.linalg\n+\n+import scala.util.Random\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.rdd.RDD\n+\n+import org.apache.spark.mllib.util._\n+\n+import org.jblas._\n+\n+class PCASuite extends FunSuite with BeforeAndAfterAll {\n+  @transient private var sc: SparkContext = _\n+\n+  override def beforeAll() {\n+    sc = new SparkContext(\"local\", \"test\")\n+  }\n+\n+  override def afterAll() {\n+    sc.stop()\n+    System.clearProperty(\"spark.driver.port\")\n+  }\n+\n+  val EPSILON = 1e-3\n+\n+  // Return jblas matrix from sparse matrix RDD\n+  def getDenseMatrix(matrix: SparseMatrix) : DoubleMatrix = {\n+    val data = matrix.data\n+    val m = matrix.m\n+    val n = matrix.n\n+    val ret = DoubleMatrix.zeros(m, n)\n+    matrix.data.collect.map(x => ret.put(x.i, x.j, x.mval))\n+    ret\n+  }\n+\n+  def assertMatrixEquals(a: DoubleMatrix, b: DoubleMatrix) {\n+    assert(a.rows == b.rows && a.columns == b.columns, \"dimension mismatch\")"
  }],
  "prId": 88
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "try to write it this way\n\n``` scala\n    Array.tabulate(a.rows, a.columns) { (i, j) =>\n      diff.put(i, j,\n        Math.min(Math.abs(a.get(i, j) - b.get(i, j)), Math.abs(a.get(i, j) + b.get(i, j))))\n    }\n\n```\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T07:22:51Z",
    "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.linalg\n+\n+import scala.util.Random\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.rdd.RDD\n+\n+import org.apache.spark.mllib.util._\n+\n+import org.jblas._\n+\n+class PCASuite extends FunSuite with BeforeAndAfterAll {\n+  @transient private var sc: SparkContext = _\n+\n+  override def beforeAll() {\n+    sc = new SparkContext(\"local\", \"test\")\n+  }\n+\n+  override def afterAll() {\n+    sc.stop()\n+    System.clearProperty(\"spark.driver.port\")\n+  }\n+\n+  val EPSILON = 1e-3\n+\n+  // Return jblas matrix from sparse matrix RDD\n+  def getDenseMatrix(matrix: SparseMatrix) : DoubleMatrix = {\n+    val data = matrix.data\n+    val m = matrix.m\n+    val n = matrix.n\n+    val ret = DoubleMatrix.zeros(m, n)\n+    matrix.data.collect.map(x => ret.put(x.i, x.j, x.mval))\n+    ret\n+  }\n+\n+  def assertMatrixEquals(a: DoubleMatrix, b: DoubleMatrix) {\n+    assert(a.rows == b.rows && a.columns == b.columns, \"dimension mismatch\")\n+    val diff = DoubleMatrix.zeros(a.rows, a.columns)\n+    Array.tabulate(a.rows, a.columns){(i, j) =>"
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "Done\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T07:44:08Z",
    "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.linalg\n+\n+import scala.util.Random\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.rdd.RDD\n+\n+import org.apache.spark.mllib.util._\n+\n+import org.jblas._\n+\n+class PCASuite extends FunSuite with BeforeAndAfterAll {\n+  @transient private var sc: SparkContext = _\n+\n+  override def beforeAll() {\n+    sc = new SparkContext(\"local\", \"test\")\n+  }\n+\n+  override def afterAll() {\n+    sc.stop()\n+    System.clearProperty(\"spark.driver.port\")\n+  }\n+\n+  val EPSILON = 1e-3\n+\n+  // Return jblas matrix from sparse matrix RDD\n+  def getDenseMatrix(matrix: SparseMatrix) : DoubleMatrix = {\n+    val data = matrix.data\n+    val m = matrix.m\n+    val n = matrix.n\n+    val ret = DoubleMatrix.zeros(m, n)\n+    matrix.data.collect.map(x => ret.put(x.i, x.j, x.mval))\n+    ret\n+  }\n+\n+  def assertMatrixEquals(a: DoubleMatrix, b: DoubleMatrix) {\n+    assert(a.rows == b.rows && a.columns == b.columns, \"dimension mismatch\")\n+    val diff = DoubleMatrix.zeros(a.rows, a.columns)\n+    Array.tabulate(a.rows, a.columns){(i, j) =>"
  }],
  "prId": 88
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Why comparing `Math.abs(a.get(i, j) + b.get(i, j)`? This makes 1 equal -1. Since both a and b are DoubleMatrix, this method is\n\n```\na.dup().sub(b).norm1 < EPSILON\n```\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T21:56:41Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.linalg\n+\n+import scala.util.Random\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.rdd.RDD\n+\n+import org.apache.spark.mllib.util._\n+\n+import org.jblas._\n+\n+class PCASuite extends FunSuite with BeforeAndAfterAll {\n+  @transient private var sc: SparkContext = _\n+\n+  override def beforeAll() {\n+    sc = new SparkContext(\"local\", \"test\")\n+  }\n+\n+  override def afterAll() {\n+    sc.stop()\n+    System.clearProperty(\"spark.driver.port\")\n+  }\n+\n+  val EPSILON = 1e-3\n+\n+  // Return jblas matrix from sparse matrix RDD\n+  def getDenseMatrix(matrix: SparseMatrix) : DoubleMatrix = {\n+    val data = matrix.data\n+    val ret = DoubleMatrix.zeros(matrix.m, matrix.n)\n+    matrix.data.collect().map(x => ret.put(x.i, x.j, x.mval))\n+    ret\n+  }\n+\n+  def assertMatrixEquals(a: DoubleMatrix, b: DoubleMatrix) {\n+    assert(a.rows == b.rows && a.columns == b.columns,\n+      \"dimension mismatch: $a.rows vs $b.rows and $a.columns vs $b.columns\")\n+    val diff = DoubleMatrix.zeros(a.rows, a.columns)\n+    Array.tabulate(a.rows, a.columns) { (i, j) =>\n+      diff.put(i, j,\n+        Math.min(Math.abs(a.get(i, j) - b.get(i, j)), Math.abs(a.get(i, j) + b.get(i, j))))"
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "Yes this is because the equality check needs to ignore the sign - singular vectors returned by jblas might be multiplied by -1. U and V are only unique upto sign\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T21:59:45Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.linalg\n+\n+import scala.util.Random\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.rdd.RDD\n+\n+import org.apache.spark.mllib.util._\n+\n+import org.jblas._\n+\n+class PCASuite extends FunSuite with BeforeAndAfterAll {\n+  @transient private var sc: SparkContext = _\n+\n+  override def beforeAll() {\n+    sc = new SparkContext(\"local\", \"test\")\n+  }\n+\n+  override def afterAll() {\n+    sc.stop()\n+    System.clearProperty(\"spark.driver.port\")\n+  }\n+\n+  val EPSILON = 1e-3\n+\n+  // Return jblas matrix from sparse matrix RDD\n+  def getDenseMatrix(matrix: SparseMatrix) : DoubleMatrix = {\n+    val data = matrix.data\n+    val ret = DoubleMatrix.zeros(matrix.m, matrix.n)\n+    matrix.data.collect().map(x => ret.put(x.i, x.j, x.mval))\n+    ret\n+  }\n+\n+  def assertMatrixEquals(a: DoubleMatrix, b: DoubleMatrix) {\n+    assert(a.rows == b.rows && a.columns == b.columns,\n+      \"dimension mismatch: $a.rows vs $b.rows and $a.columns vs $b.columns\")\n+    val diff = DoubleMatrix.zeros(a.rows, a.columns)\n+    Array.tabulate(a.rows, a.columns) { (i, j) =>\n+      diff.put(i, j,\n+        Math.min(Math.abs(a.get(i, j) - b.get(i, j)), Math.abs(a.get(i, j) + b.get(i, j))))"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "but the questions is \n\n```\n1 1\n1 1\n```\n\nequals \n\n```\n1 -1\n1 1\n```\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T22:06:41Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.linalg\n+\n+import scala.util.Random\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.rdd.RDD\n+\n+import org.apache.spark.mllib.util._\n+\n+import org.jblas._\n+\n+class PCASuite extends FunSuite with BeforeAndAfterAll {\n+  @transient private var sc: SparkContext = _\n+\n+  override def beforeAll() {\n+    sc = new SparkContext(\"local\", \"test\")\n+  }\n+\n+  override def afterAll() {\n+    sc.stop()\n+    System.clearProperty(\"spark.driver.port\")\n+  }\n+\n+  val EPSILON = 1e-3\n+\n+  // Return jblas matrix from sparse matrix RDD\n+  def getDenseMatrix(matrix: SparseMatrix) : DoubleMatrix = {\n+    val data = matrix.data\n+    val ret = DoubleMatrix.zeros(matrix.m, matrix.n)\n+    matrix.data.collect().map(x => ret.put(x.i, x.j, x.mval))\n+    ret\n+  }\n+\n+  def assertMatrixEquals(a: DoubleMatrix, b: DoubleMatrix) {\n+    assert(a.rows == b.rows && a.columns == b.columns,\n+      \"dimension mismatch: $a.rows vs $b.rows and $a.columns vs $b.columns\")\n+    val diff = DoubleMatrix.zeros(a.rows, a.columns)\n+    Array.tabulate(a.rows, a.columns) { (i, j) =>\n+      diff.put(i, j,\n+        Math.min(Math.abs(a.get(i, j) - b.get(i, j)), Math.abs(a.get(i, j) + b.get(i, j))))"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Let's compare the results row by row or column by column and update the method name to avoid confusion.\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T22:10:54Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.linalg\n+\n+import scala.util.Random\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.rdd.RDD\n+\n+import org.apache.spark.mllib.util._\n+\n+import org.jblas._\n+\n+class PCASuite extends FunSuite with BeforeAndAfterAll {\n+  @transient private var sc: SparkContext = _\n+\n+  override def beforeAll() {\n+    sc = new SparkContext(\"local\", \"test\")\n+  }\n+\n+  override def afterAll() {\n+    sc.stop()\n+    System.clearProperty(\"spark.driver.port\")\n+  }\n+\n+  val EPSILON = 1e-3\n+\n+  // Return jblas matrix from sparse matrix RDD\n+  def getDenseMatrix(matrix: SparseMatrix) : DoubleMatrix = {\n+    val data = matrix.data\n+    val ret = DoubleMatrix.zeros(matrix.m, matrix.n)\n+    matrix.data.collect().map(x => ret.put(x.i, x.j, x.mval))\n+    ret\n+  }\n+\n+  def assertMatrixEquals(a: DoubleMatrix, b: DoubleMatrix) {\n+    assert(a.rows == b.rows && a.columns == b.columns,\n+      \"dimension mismatch: $a.rows vs $b.rows and $a.columns vs $b.columns\")\n+    val diff = DoubleMatrix.zeros(a.rows, a.columns)\n+    Array.tabulate(a.rows, a.columns) { (i, j) =>\n+      diff.put(i, j,\n+        Math.min(Math.abs(a.get(i, j) - b.get(i, j)), Math.abs(a.get(i, j) + b.get(i, j))))"
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "Done\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T22:27:15Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.linalg\n+\n+import scala.util.Random\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.rdd.RDD\n+\n+import org.apache.spark.mllib.util._\n+\n+import org.jblas._\n+\n+class PCASuite extends FunSuite with BeforeAndAfterAll {\n+  @transient private var sc: SparkContext = _\n+\n+  override def beforeAll() {\n+    sc = new SparkContext(\"local\", \"test\")\n+  }\n+\n+  override def afterAll() {\n+    sc.stop()\n+    System.clearProperty(\"spark.driver.port\")\n+  }\n+\n+  val EPSILON = 1e-3\n+\n+  // Return jblas matrix from sparse matrix RDD\n+  def getDenseMatrix(matrix: SparseMatrix) : DoubleMatrix = {\n+    val data = matrix.data\n+    val ret = DoubleMatrix.zeros(matrix.m, matrix.n)\n+    matrix.data.collect().map(x => ret.put(x.i, x.j, x.mval))\n+    ret\n+  }\n+\n+  def assertMatrixEquals(a: DoubleMatrix, b: DoubleMatrix) {\n+    assert(a.rows == b.rows && a.columns == b.columns,\n+      \"dimension mismatch: $a.rows vs $b.rows and $a.columns vs $b.columns\")\n+    val diff = DoubleMatrix.zeros(a.rows, a.columns)\n+    Array.tabulate(a.rows, a.columns) { (i, j) =>\n+      diff.put(i, j,\n+        Math.min(Math.abs(a.get(i, j) - b.get(i, j)), Math.abs(a.get(i, j) + b.get(i, j))))"
  }],
  "prId": 88
}]