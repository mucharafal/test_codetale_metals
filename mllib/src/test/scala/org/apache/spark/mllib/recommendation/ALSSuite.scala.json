[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Does the following fit?\n\n```\ncase false =>\n  ALS.train(sc.parallelize(sampledRatings), features, iterations, 0.01, numBlocks, 0L, !negativeFactors)\n```\n",
    "commit": "79bc4b5650ba91ccd76a4e07c5b4b9e6adbf3d7b",
    "createdAt": "2014-04-25T07:34:41Z",
    "diffHunk": "@@ -140,16 +169,21 @@ class ALSSuite extends FunSuite with LocalSparkContext {\n    * @param implicitPrefs  flag to test implicit feedback\n    * @param bulkPredict    flag to test bulk prediciton\n    * @param negativeWeights whether the generated data can contain negative values\n+   * @param numBlocks      number of blocks to partition users and products into\n+   * @param negativeFactors whether the generated user/product factors can have negative entries\n    */\n   def testALS(users: Int, products: Int, features: Int, iterations: Int,\n     samplingRate: Double, matchThreshold: Double, implicitPrefs: Boolean = false,\n-    bulkPredict: Boolean = false, negativeWeights: Boolean = false)\n+    bulkPredict: Boolean = false, negativeWeights: Boolean = false, numBlocks: Int = -1,\n+    negativeFactors: Boolean = true)\n   {\n     val (sampledRatings, trueRatings, truePrefs) = ALSSuite.generateRatings(users, products,\n-      features, samplingRate, implicitPrefs, negativeWeights)\n+      features, samplingRate, implicitPrefs, negativeWeights, negativeFactors)\n     val model = implicitPrefs match {\n-      case false => ALS.train(sc.parallelize(sampledRatings), features, iterations)\n-      case true => ALS.trainImplicit(sc.parallelize(sampledRatings), features, iterations)\n+      case false => ALS.train(sc.parallelize(sampledRatings), features, iterations, 0.01,\n+          numBlocks, 0L, !negativeFactors)"
  }],
  "prId": 460
}]