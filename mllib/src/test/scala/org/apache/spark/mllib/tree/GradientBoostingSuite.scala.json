[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "extra spaces\n",
    "commit": "991c7b58f4648693e7b01ef756d032cc51980eec",
    "createdAt": "2014-10-28T19:01:53Z",
    "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.tree\n+\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.tree.configuration.Algo._\n+import org.apache.spark.mllib.tree.configuration.{BoostingStrategy, Strategy}\n+import org.apache.spark.mllib.tree.impurity.{Variance, Gini}\n+import org.apache.spark.mllib.tree.loss.{SquaredError, LogLoss}\n+import org.apache.spark.mllib.tree.model.{WeightedEnsembleModel, DecisionTreeModel}\n+\n+import org.apache.spark.mllib.util.LocalSparkContext\n+\n+/**\n+ * Test suite for [[GradientBoosting]].\n+ */\n+class GradientBoostingSuite extends FunSuite with LocalSparkContext {\n+\n+  test(\"Binary classification with continuous features:\" +\n+    \" comparing DecisionTree vs. GradientBoosting (numEstimators = 1)\") {\n+\n+    val arr = EnsembleTestHelper.generateOrderedLabeledPoints(numFeatures = 50, 1000)\n+    val rdd = sc.parallelize(arr)\n+    val categoricalFeaturesInfo = Map.empty[Int, Int]\n+    val numEstimators = 1\n+\n+    val remappedInput = rdd.map(x => new LabeledPoint((x.label * 2) - 1, x.features))\n+    val treeStrategy = new Strategy(algo = Regression, impurity = Variance, maxDepth = 2,\n+      numClassesForClassification = 2, categoricalFeaturesInfo = categoricalFeaturesInfo)\n+\n+    val dt = DecisionTree.train(remappedInput, treeStrategy)\n+\n+    val boostingStrategy = new BoostingStrategy(algo = Classification,\n+      numEstimators = numEstimators, loss = LogLoss, maxDepth = 2,\n+      numClassesForClassification = 2, categoricalFeaturesInfo = categoricalFeaturesInfo)\n+\n+    val gbt = GradientBoosting.trainClassifier(rdd, boostingStrategy)\n+    assert(gbt.baseLearners.size === 1)\n+    val gbtTree = gbt.baseLearners(0)\n+\n+\n+    EnsembleTestHelper.validateClassifier(gbt, arr, 0.9)\n+\n+    // Make sure trees are the same.\n+    assert(gbtTree.toString == dt.toString)\n+  }\n+\n+  test(\"Binary classification with continuous features:\" +\n+    \" comparing DecisionTree vs. GradientBoosting (numEstimators = 10)\") {\n+\n+    val arr = EnsembleTestHelper.generateOrderedLabeledPoints(numFeatures = 50, 1000)\n+    val rdd = sc.parallelize(arr)\n+    val categoricalFeaturesInfo = Map.empty[Int, Int]\n+    val numEstimators = 10\n+\n+    val remappedInput = rdd.map(x => new LabeledPoint((x.label * 2) - 1, x.features))\n+    val treeStrategy = new Strategy(algo = Regression, impurity = Variance, maxDepth = 2,\n+      numClassesForClassification = 2, categoricalFeaturesInfo = categoricalFeaturesInfo)\n+\n+    val dt = DecisionTree.train(remappedInput, treeStrategy)\n+\n+    val boostingStrategy = new BoostingStrategy(algo = Classification,\n+      numEstimators = numEstimators, loss = LogLoss, maxDepth = 2,\n+      numClassesForClassification = 2, categoricalFeaturesInfo = categoricalFeaturesInfo)\n+\n+    val gbt = GradientBoosting.trainClassifier(rdd, boostingStrategy)\n+    assert(gbt.baseLearners.size === 10)\n+    val gbtTree = gbt.baseLearners(0)\n+\n+\n+    EnsembleTestHelper.validateClassifier(gbt, arr, 0.9)\n+\n+    // Make sure trees are the same.\n+    assert(gbtTree.toString == dt.toString)\n+  }\n+\n+  test(\"Binary classification with continuous features:\" +\n+    \" Stochastic GradientBoosting (numEstimators = 10, learning rate = 0.9, subsample = 0.75)\") {\n+\n+    val arr = EnsembleTestHelper.generateOrderedLabeledPoints(numFeatures = 50, 1000)\n+    val rdd = sc.parallelize(arr)\n+    val categoricalFeaturesInfo = Map.empty[Int, Int]\n+    val numEstimators = 10\n+\n+    val boostingStrategy = new BoostingStrategy(algo = Classification,\n+      numEstimators = numEstimators, loss = LogLoss, maxDepth = 2,\n+      numClassesForClassification = 2, categoricalFeaturesInfo = categoricalFeaturesInfo,\n+      subsample = 0.75)\n+\n+    val gbt = GradientBoosting.trainClassifier(rdd, boostingStrategy)\n+    assert(gbt.baseLearners.size === 10)\n+\n+    EnsembleTestHelper.validateClassifier(gbt, arr, 0.9)\n+\n+  }\n+\n+"
  }, {
    "author": {
      "login": "manishamde"
    },
    "body": "Will do.\n",
    "commit": "991c7b58f4648693e7b01ef756d032cc51980eec",
    "createdAt": "2014-10-28T19:17:01Z",
    "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.tree\n+\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.tree.configuration.Algo._\n+import org.apache.spark.mllib.tree.configuration.{BoostingStrategy, Strategy}\n+import org.apache.spark.mllib.tree.impurity.{Variance, Gini}\n+import org.apache.spark.mllib.tree.loss.{SquaredError, LogLoss}\n+import org.apache.spark.mllib.tree.model.{WeightedEnsembleModel, DecisionTreeModel}\n+\n+import org.apache.spark.mllib.util.LocalSparkContext\n+\n+/**\n+ * Test suite for [[GradientBoosting]].\n+ */\n+class GradientBoostingSuite extends FunSuite with LocalSparkContext {\n+\n+  test(\"Binary classification with continuous features:\" +\n+    \" comparing DecisionTree vs. GradientBoosting (numEstimators = 1)\") {\n+\n+    val arr = EnsembleTestHelper.generateOrderedLabeledPoints(numFeatures = 50, 1000)\n+    val rdd = sc.parallelize(arr)\n+    val categoricalFeaturesInfo = Map.empty[Int, Int]\n+    val numEstimators = 1\n+\n+    val remappedInput = rdd.map(x => new LabeledPoint((x.label * 2) - 1, x.features))\n+    val treeStrategy = new Strategy(algo = Regression, impurity = Variance, maxDepth = 2,\n+      numClassesForClassification = 2, categoricalFeaturesInfo = categoricalFeaturesInfo)\n+\n+    val dt = DecisionTree.train(remappedInput, treeStrategy)\n+\n+    val boostingStrategy = new BoostingStrategy(algo = Classification,\n+      numEstimators = numEstimators, loss = LogLoss, maxDepth = 2,\n+      numClassesForClassification = 2, categoricalFeaturesInfo = categoricalFeaturesInfo)\n+\n+    val gbt = GradientBoosting.trainClassifier(rdd, boostingStrategy)\n+    assert(gbt.baseLearners.size === 1)\n+    val gbtTree = gbt.baseLearners(0)\n+\n+\n+    EnsembleTestHelper.validateClassifier(gbt, arr, 0.9)\n+\n+    // Make sure trees are the same.\n+    assert(gbtTree.toString == dt.toString)\n+  }\n+\n+  test(\"Binary classification with continuous features:\" +\n+    \" comparing DecisionTree vs. GradientBoosting (numEstimators = 10)\") {\n+\n+    val arr = EnsembleTestHelper.generateOrderedLabeledPoints(numFeatures = 50, 1000)\n+    val rdd = sc.parallelize(arr)\n+    val categoricalFeaturesInfo = Map.empty[Int, Int]\n+    val numEstimators = 10\n+\n+    val remappedInput = rdd.map(x => new LabeledPoint((x.label * 2) - 1, x.features))\n+    val treeStrategy = new Strategy(algo = Regression, impurity = Variance, maxDepth = 2,\n+      numClassesForClassification = 2, categoricalFeaturesInfo = categoricalFeaturesInfo)\n+\n+    val dt = DecisionTree.train(remappedInput, treeStrategy)\n+\n+    val boostingStrategy = new BoostingStrategy(algo = Classification,\n+      numEstimators = numEstimators, loss = LogLoss, maxDepth = 2,\n+      numClassesForClassification = 2, categoricalFeaturesInfo = categoricalFeaturesInfo)\n+\n+    val gbt = GradientBoosting.trainClassifier(rdd, boostingStrategy)\n+    assert(gbt.baseLearners.size === 10)\n+    val gbtTree = gbt.baseLearners(0)\n+\n+\n+    EnsembleTestHelper.validateClassifier(gbt, arr, 0.9)\n+\n+    // Make sure trees are the same.\n+    assert(gbtTree.toString == dt.toString)\n+  }\n+\n+  test(\"Binary classification with continuous features:\" +\n+    \" Stochastic GradientBoosting (numEstimators = 10, learning rate = 0.9, subsample = 0.75)\") {\n+\n+    val arr = EnsembleTestHelper.generateOrderedLabeledPoints(numFeatures = 50, 1000)\n+    val rdd = sc.parallelize(arr)\n+    val categoricalFeaturesInfo = Map.empty[Int, Int]\n+    val numEstimators = 10\n+\n+    val boostingStrategy = new BoostingStrategy(algo = Classification,\n+      numEstimators = numEstimators, loss = LogLoss, maxDepth = 2,\n+      numClassesForClassification = 2, categoricalFeaturesInfo = categoricalFeaturesInfo,\n+      subsample = 0.75)\n+\n+    val gbt = GradientBoosting.trainClassifier(rdd, boostingStrategy)\n+    assert(gbt.baseLearners.size === 10)\n+\n+    EnsembleTestHelper.validateClassifier(gbt, arr, 0.9)\n+\n+  }\n+\n+"
  }],
  "prId": 2607
}]