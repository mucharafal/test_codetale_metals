[{
  "comments": [{
    "author": {
      "login": "thunterdb"
    },
    "body": "I am having an issue with these formulas, based on the very wikipedia page you are referencing. It should not be normalized by the count but by the weight sum, right?\n",
    "commit": "1d4a5fd5888a6e2860d45a4d755e4b5bea63690e",
    "createdAt": "2016-01-06T20:02:46Z",
    "diffHunk": "@@ -109,4 +109,55 @@ class RegressionMetricsSuite extends SparkFunSuite with MLlibTestSparkContext {\n       \"root mean squared error mismatch\")\n     assert(metrics.r2 ~== 1.0 absTol 1E-5, \"r2 score mismatch\")\n   }\n+\n+  test(\"regression metrics with same(1.0) weight samples\") {\n+    val predictionAndObservationWithWeight = sc.parallelize(\n+      Seq((2.25, 3.0, 1.0), (-0.25, -0.5, 1.0), (1.75, 2.0, 1.0), (7.75, 7.0, 1.0)), 2)\n+    val metrics = new RegressionMetrics(predictionAndObservationWithWeight)\n+    assert(metrics.explainedVariance ~== 8.79687 absTol 1E-5,\n+      \"explained variance regression score mismatch\")\n+    assert(metrics.meanAbsoluteError ~== 0.5 absTol 1E-5, \"mean absolute error mismatch\")\n+    assert(metrics.meanSquaredError ~== 0.3125 absTol 1E-5, \"mean squared error mismatch\")\n+    assert(metrics.rootMeanSquaredError ~== 0.55901 absTol 1E-5,\n+      \"root mean squared error mismatch\")\n+    assert(metrics.r2 ~== 0.95717 absTol 1E-5, \"r2 score mismatch\")\n+  }\n+\n+\n+  /**\n+    * The following values are hand calculated using the formula:\n+    * [[https://en.wikipedia.org/wiki/Weighted_arithmetic_mean#Reliability_weights]]\n+    * preds = c(2.25, -0.25, 1.75, 7.75)\n+    * obs = c(3.0, -0.5, 2.0, 7.0)\n+    * weights = c(0.1, 0.2, 0.15, 0.05)\n+    * count = 4\n+    *\n+    * Weighted metrics can be calculated with MultivariateStatisticalSummary.\n+    *             (observations, observations - predictions)\n+    * mean        (1.7, 0.05)\n+    * variance    (7.3, 0.3)\n+    * numNonZeros (0.5, 0.5)\n+    * max         (7.0, 0.75)\n+    * min         (-0.5, -0.75)\n+    * normL2      (2.0, 0.32596)\n+    * normL1      (1.05, 0.2)\n+    *\n+    * explainedVariance: sum((preds - 1.7)^2) / count = 10.1775",
    "line": 37
  }],
  "prId": 9907
}, {
  "comments": [{
    "author": {
      "login": "thunterdb"
    },
    "body": "Same thing for this formula.\n",
    "commit": "1d4a5fd5888a6e2860d45a4d755e4b5bea63690e",
    "createdAt": "2016-01-06T20:03:10Z",
    "diffHunk": "@@ -109,4 +109,55 @@ class RegressionMetricsSuite extends SparkFunSuite with MLlibTestSparkContext {\n       \"root mean squared error mismatch\")\n     assert(metrics.r2 ~== 1.0 absTol 1E-5, \"r2 score mismatch\")\n   }\n+\n+  test(\"regression metrics with same(1.0) weight samples\") {\n+    val predictionAndObservationWithWeight = sc.parallelize(\n+      Seq((2.25, 3.0, 1.0), (-0.25, -0.5, 1.0), (1.75, 2.0, 1.0), (7.75, 7.0, 1.0)), 2)\n+    val metrics = new RegressionMetrics(predictionAndObservationWithWeight)\n+    assert(metrics.explainedVariance ~== 8.79687 absTol 1E-5,\n+      \"explained variance regression score mismatch\")\n+    assert(metrics.meanAbsoluteError ~== 0.5 absTol 1E-5, \"mean absolute error mismatch\")\n+    assert(metrics.meanSquaredError ~== 0.3125 absTol 1E-5, \"mean squared error mismatch\")\n+    assert(metrics.rootMeanSquaredError ~== 0.55901 absTol 1E-5,\n+      \"root mean squared error mismatch\")\n+    assert(metrics.r2 ~== 0.95717 absTol 1E-5, \"r2 score mismatch\")\n+  }\n+\n+\n+  /**\n+    * The following values are hand calculated using the formula:\n+    * [[https://en.wikipedia.org/wiki/Weighted_arithmetic_mean#Reliability_weights]]\n+    * preds = c(2.25, -0.25, 1.75, 7.75)\n+    * obs = c(3.0, -0.5, 2.0, 7.0)\n+    * weights = c(0.1, 0.2, 0.15, 0.05)\n+    * count = 4\n+    *\n+    * Weighted metrics can be calculated with MultivariateStatisticalSummary.\n+    *             (observations, observations - predictions)\n+    * mean        (1.7, 0.05)\n+    * variance    (7.3, 0.3)\n+    * numNonZeros (0.5, 0.5)\n+    * max         (7.0, 0.75)\n+    * min         (-0.5, -0.75)\n+    * normL2      (2.0, 0.32596)\n+    * normL1      (1.05, 0.2)\n+    *\n+    * explainedVariance: sum((preds - 1.7)^2) / count = 10.1775\n+    * meanAbsoluteError: normL1(1) / count = 0.05\n+    * meanSquaredError: normL2(1)^2 / count = 0.02656\n+    * rootMeanSquaredError: sqrt(meanSquaredError) = 0.16298\n+    * r2: 1 - normL2(1)^2 / (variance(0) * (count - 1)) = 0.9951484",
    "line": 41
  }],
  "prId": 9907
}]