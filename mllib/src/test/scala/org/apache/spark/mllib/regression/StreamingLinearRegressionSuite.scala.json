[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "We now have some utils defined in `mllib.TestingUtils` to make this easier: `assert(v1 ~== v2 relTol 1e-15)`. It is okay to keep them in this PR. We can update it after this is merged.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-30T04:01:30Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import java.io.File\n+\n+import com.google.common.io.Files\n+import org.apache.commons.io.FileUtils\n+import org.scalatest.FunSuite\n+import org.apache.spark.SparkConf\n+import org.apache.spark.streaming.{Milliseconds, Seconds, StreamingContext}\n+import org.apache.spark.mllib.util.{MLStreamingUtils, LinearDataGenerator, LocalSparkContext}\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+class StreamingLinearRegressionSuite extends FunSuite {\n+\n+  // Assert that two values are equal within tolerance epsilon\n+  def assertEqual(v1: Double, v2: Double, epsilon: Double) {"
  }],
  "prId": 1361
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Could you explain why this is needed?\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-30T04:02:08Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import java.io.File\n+\n+import com.google.common.io.Files\n+import org.apache.commons.io.FileUtils\n+import org.scalatest.FunSuite\n+import org.apache.spark.SparkConf\n+import org.apache.spark.streaming.{Milliseconds, Seconds, StreamingContext}\n+import org.apache.spark.mllib.util.{MLStreamingUtils, LinearDataGenerator, LocalSparkContext}\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+class StreamingLinearRegressionSuite extends FunSuite {\n+\n+  // Assert that two values are equal within tolerance epsilon\n+  def assertEqual(v1: Double, v2: Double, epsilon: Double) {\n+    def errorMessage = v1.toString + \" did not equal \" + v2.toString\n+    assert(math.abs(v1-v2) <= epsilon, errorMessage)\n+  }\n+\n+  // Assert that model predictions are correct\n+  def validatePrediction(predictions: Seq[Double], input: Seq[LabeledPoint]) {\n+    val numOffPredictions = predictions.zip(input).count { case (prediction, expected) =>\n+      // A prediction is off if the prediction is more than 0.5 away from expected value.\n+      math.abs(prediction - expected.label) > 0.5\n+    }\n+    // At least 80% of the predictions should be on.\n+    assert(numOffPredictions < input.length / 5)\n+  }\n+\n+  // Test if we can accurately learn Y = 10*X1 + 10*X2 on streaming data\n+  test(\"streaming linear regression parameter accuracy\") {\n+\n+    val conf = new SparkConf().setMaster(\"local\").setAppName(\"streaming test\")\n+    val testDir = Files.createTempDir()\n+    val numBatches = 10\n+    val ssc = new StreamingContext(conf, Seconds(1))\n+    val data = MLStreamingUtils.loadLabeledPointsFromText(ssc, testDir.toString)\n+    val model = StreamingLinearRegressionWithSGD.start(numFeatures=2, numIterations=50)\n+\n+    model.trainOn(data)\n+\n+    ssc.start()\n+\n+    // write data to a file stream\n+    Thread.sleep(5000)"
  }, {
    "author": {
      "login": "freeman-lab"
    },
    "body": "MIght not be =) I added it because I saw it in the streaming test suite for file writing, but without it both tests still pass fine.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-31T06:58:13Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import java.io.File\n+\n+import com.google.common.io.Files\n+import org.apache.commons.io.FileUtils\n+import org.scalatest.FunSuite\n+import org.apache.spark.SparkConf\n+import org.apache.spark.streaming.{Milliseconds, Seconds, StreamingContext}\n+import org.apache.spark.mllib.util.{MLStreamingUtils, LinearDataGenerator, LocalSparkContext}\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+class StreamingLinearRegressionSuite extends FunSuite {\n+\n+  // Assert that two values are equal within tolerance epsilon\n+  def assertEqual(v1: Double, v2: Double, epsilon: Double) {\n+    def errorMessage = v1.toString + \" did not equal \" + v2.toString\n+    assert(math.abs(v1-v2) <= epsilon, errorMessage)\n+  }\n+\n+  // Assert that model predictions are correct\n+  def validatePrediction(predictions: Seq[Double], input: Seq[LabeledPoint]) {\n+    val numOffPredictions = predictions.zip(input).count { case (prediction, expected) =>\n+      // A prediction is off if the prediction is more than 0.5 away from expected value.\n+      math.abs(prediction - expected.label) > 0.5\n+    }\n+    // At least 80% of the predictions should be on.\n+    assert(numOffPredictions < input.length / 5)\n+  }\n+\n+  // Test if we can accurately learn Y = 10*X1 + 10*X2 on streaming data\n+  test(\"streaming linear regression parameter accuracy\") {\n+\n+    val conf = new SparkConf().setMaster(\"local\").setAppName(\"streaming test\")\n+    val testDir = Files.createTempDir()\n+    val numBatches = 10\n+    val ssc = new StreamingContext(conf, Seconds(1))\n+    val data = MLStreamingUtils.loadLabeledPointsFromText(ssc, testDir.toString)\n+    val model = StreamingLinearRegressionWithSGD.start(numFeatures=2, numIterations=50)\n+\n+    model.trainOn(data)\n+\n+    ssc.start()\n+\n+    // write data to a file stream\n+    Thread.sleep(5000)"
  }],
  "prId": 1361
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "You can use `with LocalSparkContext` and construct `StreamingContext` by `new StreamingContext(sc, duration)`.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-30T04:04:40Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import java.io.File\n+\n+import com.google.common.io.Files\n+import org.apache.commons.io.FileUtils\n+import org.scalatest.FunSuite\n+import org.apache.spark.SparkConf\n+import org.apache.spark.streaming.{Milliseconds, Seconds, StreamingContext}\n+import org.apache.spark.mllib.util.{MLStreamingUtils, LinearDataGenerator, LocalSparkContext}\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+class StreamingLinearRegressionSuite extends FunSuite {"
  }, {
    "author": {
      "login": "freeman-lab"
    },
    "body": "I wanted to do this but it doesn't seem to work. The first test always passes, but the second test immediately hits this error. Maybe because we're effectively starting multiple StreamingContexts from the same SparkContext? I'm trying to debug. @tdas ?\n\n```\njava.lang.NullPointerException:\n  at org.apache.spark.streaming.StreamingContext.<init>(StreamingContext.scala:159)\n  at org.apache.spark.streaming.StreamingContext.<init>(StreamingContext.scala:66)\n  at org.apache.spark.mllib.regression.StreamingLinearRegressionSuite$$anonfun$2.apply$mcV$sp(StreamingLinearRegressionSuite.scala:92)\n  at org.apache.spark.mllib.regression.StreamingLinearRegressionSuite$$anonfun$2.apply(StreamingLinearRegressionSuite.scala:89)\n  at org.apache.spark.mllib.regression.StreamingLinearRegressionSuite$$anonfun$2.apply(StreamingLinearRegressionSuite.scala:89)\n  at org.scalatest.Transformer$$anonfun$apply$1.apply(Transformer.scala:22)\n  at org.scalatest.Transformer$$anonfun$apply$1.apply(Transformer.scala:22)\n  at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)\n  at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)\n  at org.scalatest.Transformer.apply(Transformer.scala:22)\n```\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-31T06:57:41Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import java.io.File\n+\n+import com.google.common.io.Files\n+import org.apache.commons.io.FileUtils\n+import org.scalatest.FunSuite\n+import org.apache.spark.SparkConf\n+import org.apache.spark.streaming.{Milliseconds, Seconds, StreamingContext}\n+import org.apache.spark.mllib.util.{MLStreamingUtils, LinearDataGenerator, LocalSparkContext}\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+class StreamingLinearRegressionSuite extends FunSuite {"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Did you use the `LocalSparkContext` under `mllib` or core? Try to use the one from mllib.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-31T08:20:12Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import java.io.File\n+\n+import com.google.common.io.Files\n+import org.apache.commons.io.FileUtils\n+import org.scalatest.FunSuite\n+import org.apache.spark.SparkConf\n+import org.apache.spark.streaming.{Milliseconds, Seconds, StreamingContext}\n+import org.apache.spark.mllib.util.{MLStreamingUtils, LinearDataGenerator, LocalSparkContext}\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+class StreamingLinearRegressionSuite extends FunSuite {"
  }, {
    "author": {
      "login": "freeman-lab"
    },
    "body": "I'm using the one from mllib, just got it working with a tip from TD, the call to `ssc.stop` after each test needs `stopSparkContext=false`.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-31T21:29:36Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import java.io.File\n+\n+import com.google.common.io.Files\n+import org.apache.commons.io.FileUtils\n+import org.scalatest.FunSuite\n+import org.apache.spark.SparkConf\n+import org.apache.spark.streaming.{Milliseconds, Seconds, StreamingContext}\n+import org.apache.spark.mllib.util.{MLStreamingUtils, LinearDataGenerator, LocalSparkContext}\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+class StreamingLinearRegressionSuite extends FunSuite {"
  }],
  "prId": 1361
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "We try to avoid using `commons-io` for compatibility. Please check https://github.com/apache/spark/pull/226 and use `Utils.deleteRecursively` defined there to replace `FileUtils.delete*`. \n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-30T04:08:30Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import java.io.File\n+\n+import com.google.common.io.Files\n+import org.apache.commons.io.FileUtils"
  }],
  "prId": 1361
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "add an empty line to separate 3rd party imports from spark imports\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-30T04:09:00Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import java.io.File\n+\n+import com.google.common.io.Files\n+import org.apache.commons.io.FileUtils\n+import org.scalatest.FunSuite"
  }],
  "prId": 1361
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "move scala imports before 3rd party imports. usually the imports are organized into 4 groups in the following order:\n1. java imports (java.*)\n2. scala imports (scala.*)\n3. 3rd-party imports\n4. spark import (org.apache.spark.*)\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-30T04:10:11Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import java.io.File\n+\n+import com.google.common.io.Files\n+import org.apache.commons.io.FileUtils\n+import org.scalatest.FunSuite\n+import org.apache.spark.SparkConf\n+import org.apache.spark.streaming.{Milliseconds, Seconds, StreamingContext}\n+import org.apache.spark.mllib.util.{MLStreamingUtils, LinearDataGenerator, LocalSparkContext}\n+\n+import scala.collection.mutable.ArrayBuffer"
  }],
  "prId": 1361
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "This line is too wide.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-08-01T22:59:44Z",
    "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import java.io.File\n+import java.nio.charset.Charset\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import com.google.common.io.Files\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.util.{LinearDataGenerator, LocalSparkContext, MLUtils}\n+import org.apache.spark.streaming.{Milliseconds, StreamingContext}\n+import org.apache.spark.util.Utils\n+\n+class StreamingLinearRegressionSuite extends FunSuite with LocalSparkContext {\n+\n+  // Assert that two values are equal within tolerance epsilon\n+  def assertEqual(v1: Double, v2: Double, epsilon: Double) {\n+    def errorMessage = v1.toString + \" did not equal \" + v2.toString\n+    assert(math.abs(v1-v2) <= epsilon, errorMessage)\n+  }\n+\n+  // Assert that model predictions are correct\n+  def validatePrediction(predictions: Seq[Double], input: Seq[LabeledPoint]) {\n+    val numOffPredictions = predictions.zip(input).count { case (prediction, expected) =>\n+      // A prediction is off if the prediction is more than 0.5 away from expected value.\n+      math.abs(prediction - expected.label) > 0.5\n+    }\n+    // At least 80% of the predictions should be on.\n+    assert(numOffPredictions < input.length / 5)\n+  }\n+\n+  // Test if we can accurately learn Y = 10*X1 + 10*X2 on streaming data\n+  test(\"streaming linear regression parameter accuracy\") {\n+\n+    val testDir = Files.createTempDir()\n+    val numBatches = 10\n+    val batchDuration = Milliseconds(1000)\n+    val ssc = new StreamingContext(sc, batchDuration)\n+    val data = MLUtils.loadStreamingLabeledPoints(ssc, testDir.toString)\n+    val model = new StreamingLinearRegressionWithSGD()\n+      .setInitialWeights(Vectors.dense(0.0, 0.0))\n+      .setStepSize(0.1)\n+      .setNumIterations(50)\n+\n+    model.trainOn(data)\n+\n+    ssc.start()\n+\n+    // write data to a file stream\n+    for (i <- 0 until numBatches) {\n+      val samples = LinearDataGenerator.generateLinearInput(0.0, Array(10.0, 10.0), 100, 42 * (i + 1))\n+      val file = new File(testDir, i.toString)\n+      Files.write(samples.map(x => x.toString).mkString(\"\\n\"), file, Charset.forName(\"UTF-8\"))\n+      Thread.sleep(batchDuration.milliseconds)\n+    }\n+\n+    ssc.stop(stopSparkContext=false)\n+\n+    System.clearProperty(\"spark.driver.port\")\n+    Utils.deleteRecursively(testDir)\n+\n+    // check accuracy of final parameter estimates\n+    assertEqual(model.latestModel().intercept, 0.0, 0.1)\n+    assertEqual(model.latestModel().weights(0), 10.0, 0.1)\n+    assertEqual(model.latestModel().weights(1), 10.0, 0.1)\n+\n+    // check accuracy of predictions\n+    val validationData = LinearDataGenerator.generateLinearInput(0.0, Array(10.0, 10.0), 100, 17)\n+    validatePrediction(validationData.map(row => model.latestModel().predict(row.features)), validationData)"
  }],
  "prId": 1361
}]