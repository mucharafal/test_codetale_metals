[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`colPtrs`\n",
    "commit": "88814ed215e81bb6b945c8fff60bdb822ac2cb96",
    "createdAt": "2014-09-18T04:53:28Z",
    "diffHunk": "@@ -37,4 +37,26 @@ class BreezeMatrixConversionSuite extends FunSuite {\n     assert(mat.numCols === breeze.cols)\n     assert(mat.values.eq(breeze.data), \"should not copy data\")\n   }\n+\n+  test(\"sparse matrix to breeze\") {\n+    val values = Array(1.0, 2.0, 4.0, 5.0)\n+    val colPointers = Array(0, 2, 4)"
  }],
  "prId": 2294
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`colPtrs`\n",
    "commit": "88814ed215e81bb6b945c8fff60bdb822ac2cb96",
    "createdAt": "2014-09-18T04:53:30Z",
    "diffHunk": "@@ -37,4 +37,26 @@ class BreezeMatrixConversionSuite extends FunSuite {\n     assert(mat.numCols === breeze.cols)\n     assert(mat.values.eq(breeze.data), \"should not copy data\")\n   }\n+\n+  test(\"sparse matrix to breeze\") {\n+    val values = Array(1.0, 2.0, 4.0, 5.0)\n+    val colPointers = Array(0, 2, 4)\n+    val rowIndices = Array(1, 2, 1, 2)\n+    val mat = Matrices.sparse(3, 2, colPointers, rowIndices, values)\n+    val breeze = mat.toBreeze.asInstanceOf[BSM[Double]]\n+    assert(breeze.rows === mat.numRows)\n+    assert(breeze.cols === mat.numCols)\n+    assert(breeze.data.eq(mat.asInstanceOf[SparseMatrix].values), \"should not copy data\")\n+  }\n+\n+  test(\"sparse breeze matrix to sparse matrix\") {\n+    val values = Array(1.0, 2.0, 4.0, 5.0)\n+    val colPointers = Array(0, 2, 4)"
  }],
  "prId": 2294
}]