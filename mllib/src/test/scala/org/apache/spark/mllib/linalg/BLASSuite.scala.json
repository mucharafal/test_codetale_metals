[{
  "comments": [{
    "author": {
      "login": "dbtsai"
    },
    "body": "To the following instead.\n\n```\n    gemv(1.0, dA, dx, 2.0, y1)\n    gemv(1.0, sA, dx, 2.0, y2)\n    gemv(1.0, dA, sx, 2.0, y3)\n    gemv(1.0, sA, sx, 2.0, y4)\n\n    gemv(2.0, dA, dx, 2.0, y5)\n    gemv(2.0, sA, dx, 2.0, y6)\n    gemv(2.0, dA, sx, 2.0, y7)\n    gemv(2.0, sA, sx, 2.0, y8)\n\n    assert(y1 ~== expected2 absTol 1e-15)\n    assert(y2 ~== expected2 absTol 1e-15)\n    assert(y3 ~== expected3 absTol 1e-15)\n    assert(y4 ~== expected3 absTol 1e-15)\n    assert(y5 ~== expected2 absTol 1e-15)\n    assert(y6 ~== expected2 absTol 1e-15)\n    assert(y7 ~== expected3 absTol 1e-15)\n    assert(y8 ~== expected3 absTol 1e-15)\n```\n",
    "commit": "ce0bb8b8016d58eecd00d6f210a213f686e0e062",
    "createdAt": "2015-05-17T05:37:07Z",
    "diffHunk": "@@ -270,17 +271,26 @@ class BLASSuite extends FunSuite {\n     val expected2 = new DenseVector(Array(6.0, 7.0, 4.0, 9.0))\n     val expected3 = new DenseVector(Array(10.0, 8.0, 6.0, 18.0))\n \n-    gemv(1.0, dA, x, 2.0, y1)\n-    gemv(1.0, sA, x, 2.0, y2)\n-    gemv(2.0, dA, x, 2.0, y3)\n-    gemv(2.0, sA, x, 2.0, y4)\n+    gemv(1.0, dA, dx, 2.0, y1)\n+    gemv(1.0, sA, dx, 2.0, y2)\n+    gemv(2.0, dA, dx, 2.0, y3)\n+    gemv(2.0, sA, dx, 2.0, y4)"
  }],
  "prId": 6209
}, {
  "comments": [{
    "author": {
      "login": "dbtsai"
    },
    "body": "check exception for \n\n```\ngemv(1.0, dA.transpose, dx, 2.0, y1)\ngemv(1.0, sA.transpose, dx, 2.0, y1)\ngemv(1.0, dA.transpose, sx, 2.0, y1)\ngemv(1.0, sA.transpose, sx, 2.0, y1)\n```\n",
    "commit": "ce0bb8b8016d58eecd00d6f210a213f686e0e062",
    "createdAt": "2015-05-17T05:39:30Z",
    "diffHunk": "@@ -270,17 +271,26 @@ class BLASSuite extends FunSuite {\n     val expected2 = new DenseVector(Array(6.0, 7.0, 4.0, 9.0))\n     val expected3 = new DenseVector(Array(10.0, 8.0, 6.0, 18.0))\n \n-    gemv(1.0, dA, x, 2.0, y1)\n-    gemv(1.0, sA, x, 2.0, y2)\n-    gemv(2.0, dA, x, 2.0, y3)\n-    gemv(2.0, sA, x, 2.0, y4)\n+    gemv(1.0, dA, dx, 2.0, y1)\n+    gemv(1.0, sA, dx, 2.0, y2)\n+    gemv(2.0, dA, dx, 2.0, y3)\n+    gemv(2.0, sA, dx, 2.0, y4)\n     assert(y1 ~== expected2 absTol 1e-15)\n     assert(y2 ~== expected2 absTol 1e-15)\n     assert(y3 ~== expected3 absTol 1e-15)\n     assert(y4 ~== expected3 absTol 1e-15)\n+\n+    val y1_copy = new DenseVector(Array(1.0, 3.0, 1.0, 0.0))\n+    val y3_copy = y1_copy.copy\n+\n+    gemv(1.0, dA, sx, 2.0, y1_copy)\n+    gemv(2.0, dA, sx, 2.0, y3_copy)\n+    assert(y1_copy ~== expected2 absTol 1e-15)\n+    assert(y3_copy ~== expected3 absTol 1e-15)\n+ \n     withClue(\"columns of A don't match the rows of B\") {\n       intercept[Exception] {\n-        gemv(1.0, dA.transpose, x, 2.0, y1)\n+        gemv(1.0, dA.transpose, dx, 2.0, y1)\n       }\n     }"
  }],
  "prId": 6209
}, {
  "comments": [{
    "author": {
      "login": "dbtsai"
    },
    "body": "add\n\n```\n assert(dA.multiply(sx) ~== expected absTol 1e-15)\n assert(sA.multiply(sx) ~== expected absTol 1e-15)\n```\n",
    "commit": "ce0bb8b8016d58eecd00d6f210a213f686e0e062",
    "createdAt": "2015-05-17T17:23:50Z",
    "diffHunk": "@@ -257,32 +257,60 @@ class BLASSuite extends FunSuite {\n       new DenseMatrix(4, 3, Array(0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 3.0))\n     val sA = new SparseMatrix(4, 3, Array(0, 1, 3, 4), Array(1, 0, 2, 3), Array(1.0, 2.0, 1.0, 3.0))\n \n-    val x = new DenseVector(Array(1.0, 2.0, 3.0))\n+    val dx = new DenseVector(Array(1.0, 2.0, 3.0))\n+    val sx = dx.toSparse\n     val expected = new DenseVector(Array(4.0, 1.0, 2.0, 9.0))\n \n-    assert(dA.multiply(x) ~== expected absTol 1e-15)\n-    assert(sA.multiply(x) ~== expected absTol 1e-15)\n+    assert(dA.multiply(dx) ~== expected absTol 1e-15)\n+    assert(sA.multiply(dx) ~== expected absTol 1e-15)\n "
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "`Matrix.multiply` has a problem. Now its signature is `multiply(y: DenseVector)`. Turning it to `multiply(y: Vector)` or adding new `multiply(y: Vector)` can't pass binary compatibility check as I did in #6189. I am asking @mengxr whether we can add it into `MimaExcludes`.\n",
    "commit": "ce0bb8b8016d58eecd00d6f210a213f686e0e062",
    "createdAt": "2015-05-18T06:11:35Z",
    "diffHunk": "@@ -257,32 +257,60 @@ class BLASSuite extends FunSuite {\n       new DenseMatrix(4, 3, Array(0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 3.0))\n     val sA = new SparseMatrix(4, 3, Array(0, 1, 3, 4), Array(1, 0, 2, 3), Array(1.0, 2.0, 1.0, 3.0))\n \n-    val x = new DenseVector(Array(1.0, 2.0, 3.0))\n+    val dx = new DenseVector(Array(1.0, 2.0, 3.0))\n+    val sx = dx.toSparse\n     val expected = new DenseVector(Array(4.0, 1.0, 2.0, 9.0))\n \n-    assert(dA.multiply(x) ~== expected absTol 1e-15)\n-    assert(sA.multiply(x) ~== expected absTol 1e-15)\n+    assert(dA.multiply(dx) ~== expected absTol 1e-15)\n+    assert(sA.multiply(dx) ~== expected absTol 1e-15)\n "
  }, {
    "author": {
      "login": "dbtsai"
    },
    "body": "@viirya Adding `MimaExcludes` should be fine since you are making it more generalized.\n",
    "commit": "ce0bb8b8016d58eecd00d6f210a213f686e0e062",
    "createdAt": "2015-05-18T06:13:34Z",
    "diffHunk": "@@ -257,32 +257,60 @@ class BLASSuite extends FunSuite {\n       new DenseMatrix(4, 3, Array(0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 3.0))\n     val sA = new SparseMatrix(4, 3, Array(0, 1, 3, 4), Array(1, 0, 2, 3), Array(1.0, 2.0, 1.0, 3.0))\n \n-    val x = new DenseVector(Array(1.0, 2.0, 3.0))\n+    val dx = new DenseVector(Array(1.0, 2.0, 3.0))\n+    val sx = dx.toSparse\n     val expected = new DenseVector(Array(4.0, 1.0, 2.0, 9.0))\n \n-    assert(dA.multiply(x) ~== expected absTol 1e-15)\n-    assert(sA.multiply(x) ~== expected absTol 1e-15)\n+    assert(dA.multiply(dx) ~== expected absTol 1e-15)\n+    assert(sA.multiply(dx) ~== expected absTol 1e-15)\n "
  }],
  "prId": 6209
}, {
  "comments": [{
    "author": {
      "login": "dbtsai"
    },
    "body": "add\n\n```\nassert(dATT.multiply(sx) ~== expected absTol 1e-15)\nassert(sATT.multiply(sx) ~== expected absTol 1e-15)\n```\n",
    "commit": "ce0bb8b8016d58eecd00d6f210a213f686e0e062",
    "createdAt": "2015-05-17T17:24:21Z",
    "diffHunk": "@@ -291,7 +319,7 @@ class BLASSuite extends FunSuite {\n     val dATT = dAT.transpose\n     val sATT = sAT.transpose\n \n-    assert(dATT.multiply(x) ~== expected absTol 1e-15)\n-    assert(sATT.multiply(x) ~== expected absTol 1e-15)\n+    assert(dATT.multiply(dx) ~== expected absTol 1e-15)\n+    assert(sATT.multiply(dx) ~== expected absTol 1e-15)\n   }"
  }],
  "prId": 6209
}]