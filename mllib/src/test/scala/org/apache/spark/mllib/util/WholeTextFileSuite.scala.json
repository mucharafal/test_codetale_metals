[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Indeed, we only need to write a unit test for `WholeTextFileRecordReader`. It is not necessary to verify that  `wholeTextFile` can load files from HDFS. We are actually testing `newAPIHadoopFile` here. Maybe we can get some suggestions from others.\n",
    "commit": "4ed60d16b5d7c760c06dd0d95ee558eee5cfd398",
    "createdAt": "2014-03-21T09:05:02Z",
    "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+\n+import java.io.{BufferedReader, DataOutputStream, FileOutputStream, InputStreamReader}\n+import java.nio.file.Files\n+import java.nio.file.{Path => JPath}\n+import java.nio.file.{Paths => JPaths}\n+\n+import scala.collection.immutable.IndexedSeq\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.fs.Path\n+import org.apache.hadoop.hdfs.MiniDFSCluster\n+import org.apache.hadoop.io.Text\n+\n+import org.apache.spark.mllib.util.MLUtils._\n+import org.apache.spark.SparkContext\n+\n+/**\n+ * Tests HDFS IO and local disk IO of [[wholeTextFile]] in MLutils. HDFS tests create a mock DFS in\n+ * memory, while local disk test create a temp directory. All these temporal storages are deleted\n+ * in the end.\n+ */\n+\n+class WholeTextFileSuite extends FunSuite with BeforeAndAfterAll {"
  }, {
    "author": {
      "login": "yinxusen"
    },
    "body": "Yep, it will be much easy if we just test `WholeTextFileRecordReader` alone. I can construct a `CombineFileSplit` and test it. The correctness of reading files from HDFS and native disk is guaranteed by other tests, I think. \n",
    "commit": "4ed60d16b5d7c760c06dd0d95ee558eee5cfd398",
    "createdAt": "2014-03-21T09:10:37Z",
    "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+\n+import java.io.{BufferedReader, DataOutputStream, FileOutputStream, InputStreamReader}\n+import java.nio.file.Files\n+import java.nio.file.{Path => JPath}\n+import java.nio.file.{Paths => JPaths}\n+\n+import scala.collection.immutable.IndexedSeq\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.fs.Path\n+import org.apache.hadoop.hdfs.MiniDFSCluster\n+import org.apache.hadoop.io.Text\n+\n+import org.apache.spark.mllib.util.MLUtils._\n+import org.apache.spark.SparkContext\n+\n+/**\n+ * Tests HDFS IO and local disk IO of [[wholeTextFile]] in MLutils. HDFS tests create a mock DFS in\n+ * memory, while local disk test create a temp directory. All these temporal storages are deleted\n+ * in the end.\n+ */\n+\n+class WholeTextFileSuite extends FunSuite with BeforeAndAfterAll {"
  }, {
    "author": {
      "login": "yinxusen"
    },
    "body": "I find it is difficult to build `CombineFileSplit` without any real file system. So I think we can keep only the local disk, based on which we can test `WholeTextFileRecordReader` more easily.\n",
    "commit": "4ed60d16b5d7c760c06dd0d95ee558eee5cfd398",
    "createdAt": "2014-03-22T08:28:29Z",
    "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+\n+import java.io.{BufferedReader, DataOutputStream, FileOutputStream, InputStreamReader}\n+import java.nio.file.Files\n+import java.nio.file.{Path => JPath}\n+import java.nio.file.{Paths => JPaths}\n+\n+import scala.collection.immutable.IndexedSeq\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.FunSuite\n+\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.fs.Path\n+import org.apache.hadoop.hdfs.MiniDFSCluster\n+import org.apache.hadoop.io.Text\n+\n+import org.apache.spark.mllib.util.MLUtils._\n+import org.apache.spark.SparkContext\n+\n+/**\n+ * Tests HDFS IO and local disk IO of [[wholeTextFile]] in MLutils. HDFS tests create a mock DFS in\n+ * memory, while local disk test create a temp directory. All these temporal storages are deleted\n+ * in the end.\n+ */\n+\n+class WholeTextFileSuite extends FunSuite with BeforeAndAfterAll {"
  }],
  "prId": 164
}]