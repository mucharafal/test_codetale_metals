[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "The changes are really here; above is mostly code cleanup",
    "commit": "a8472e2774deac565825406828d35834af40cba5",
    "createdAt": "2019-08-18T00:04:56Z",
    "diffHunk": "@@ -561,34 +561,29 @@ object DecisionTreeSuite extends SparkFunSuite {\n    * Create an internal node with the given node ID and feature type.\n    * Note: This does NOT set the child nodes.\n    */\n-  private def createInternalNode(id: Int, featureType: FeatureType): Node = {\n+  private def createInternalNode(\n+      id: Int, featureType: FeatureType, left: Node, right: Node): Node = {\n     val node = Node(nodeIndex = id, new Predict(0.0, 1.0), impurity = 0.5, isLeaf = false)\n-    featureType match {\n-      case Continuous =>\n-        node.split = Some(new Split(feature = 0, threshold = 0.5, Continuous,\n-          categories = List.empty[Double]))\n-      case Categorical =>\n-        node.split = Some(new Split(feature = 1, threshold = 0.0, Categorical,\n-          categories = List(0.0, 1.0)))\n-    }\n-    // TODO: The information gain stats should be consistent with info in children: SPARK-7131\n-    node.stats = Some(new InformationGainStats(gain = 0.1, impurity = 0.2,\n-      leftImpurity = 0.3, rightImpurity = 0.4, new Predict(1.0, 0.4), new Predict(0.0, 0.6)))\n+    node.split = Some(featureType match {\n+      case Continuous => Split(feature = 0, threshold = 0.5, featureType, List.empty[Double])\n+      case Categorical => Split(feature = 1, threshold = 0.0, featureType, List(0.0, 1.0))\n+    })\n+    node.stats = Some(new InformationGainStats(gain = 0.1, impurity = node.impurity,",
    "line": 23
  }],
  "prId": 25485
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "This is the improved test",
    "commit": "a8472e2774deac565825406828d35834af40cba5",
    "createdAt": "2019-08-18T00:05:04Z",
    "diffHunk": "@@ -625,8 +620,7 @@ object DecisionTreeSuite extends SparkFunSuite {\n     assert(a.isLeaf === b.isLeaf)\n     assert(a.split === b.split)\n     (a.stats, b.stats) match {\n-      // TODO: Check other fields besides the information gain.\n-      case (Some(aStats), Some(bStats)) => assert(aStats.gain === bStats.gain)\n+      case (Some(aStats), Some(bStats)) => assert(aStats === bStats)",
    "line": 56
  }],
  "prId": 25485
}]