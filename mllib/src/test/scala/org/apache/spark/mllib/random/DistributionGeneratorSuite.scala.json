[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "remove extra empty line\n",
    "commit": "01121ac8af3d7f6cd44160644d387b3747b925f4",
    "createdAt": "2014-07-25T07:54:57Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.random\n+\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.util.StatCounter\n+\n+// TODO update tests to use TestingUtils for floating point comparison after PR 1367 is merged\n+class DistributionGeneratorSuite extends FunSuite {\n+\n+  def apiChecks(gen: DistributionGenerator) {\n+\n+    // resetting seed should generate the same sequence of random numbers\n+    gen.setSeed(42L)\n+    val array1 = (0 until 1000).map(_ => gen.nextValue())\n+    gen.setSeed(42L)\n+    val array2 = (0 until 1000).map(_ => gen.nextValue())\n+    assert(array1.equals(array2))\n+\n+    // newInstance should contain a difference instance of the rng\n+    // i.e. setting difference seeds for difference instances produces different sequences of\n+    // random numbers.\n+    val gen2 = gen.copy()\n+    gen.setSeed(0L)\n+    val array3 = (0 until 1000).map(_ => gen.nextValue())\n+    gen2.setSeed(1L)\n+    val array4 = (0 until 1000).map(_ => gen2.nextValue())\n+    // Compare arrays instead of elements since individual elements can coincide by chance but the\n+    // sequences should differ given two different seeds.\n+    assert(!array3.equals(array4))\n+\n+    // test that setting the same seed in the copied instance produces the same sequence of numbers\n+    gen.setSeed(0L)\n+    val array5 = (0 until 1000).map(_ => gen.nextValue())\n+    gen2.setSeed(0L)\n+    val array6 = (0 until 1000).map(_ => gen2.nextValue())\n+    assert(array5.equals(array6))\n+  }\n+\n+  def distributionChecks(gen: DistributionGenerator,\n+      mean: Double = 0.0,\n+      stddev: Double = 1.0,\n+      epsilon: Double = 1e-3) {\n+    for (seed <- 0 until 5) {\n+      gen.setSeed(seed.toLong)\n+      val sample = (0 until 10000000).map { _ => gen.nextValue()}\n+      val stats = new StatCounter(sample)\n+      assert(math.abs(stats.mean - mean) < epsilon)\n+      assert(math.abs(stats.stdev - stddev) < epsilon)\n+    }\n+  }\n+\n+  test(\"UniformGenerator\") {\n+    val uniform = new UniformGenerator()\n+    apiChecks(uniform)\n+    // Stddev of uniform distribution = (ub - lb) / math.sqrt(12)\n+    distributionChecks(uniform, 0.5, 1 / math.sqrt(12))\n+  }\n+\n+  test(\"StandardNormalGenerator\") {\n+    val normal = new StandardNormalGenerator()\n+    apiChecks(normal)\n+    distributionChecks(normal, 0.0, 1.0)\n+  }\n+\n+  test(\"PoissonGenerator\") {\n+    // mean = 0.0 will not pass the API checks since 0.0 is always deterministically produced.\n+    for (mean <- List(1.0, 5.0, 100.0)) {\n+      val poisson = new PoissonGenerator(mean)\n+      apiChecks(poisson)\n+      distributionChecks(poisson, mean, math.sqrt(mean), 1e-2)\n+    }\n+  }\n+}\n+"
  }],
  "prId": 1520
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Just curious, how long does the entire test suite take to finish?\n",
    "commit": "01121ac8af3d7f6cd44160644d387b3747b925f4",
    "createdAt": "2014-07-25T08:03:31Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.random\n+\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.util.StatCounter\n+\n+// TODO update tests to use TestingUtils for floating point comparison after PR 1367 is merged\n+class DistributionGeneratorSuite extends FunSuite {\n+\n+  def apiChecks(gen: DistributionGenerator) {\n+\n+    // resetting seed should generate the same sequence of random numbers\n+    gen.setSeed(42L)\n+    val array1 = (0 until 1000).map(_ => gen.nextValue())\n+    gen.setSeed(42L)\n+    val array2 = (0 until 1000).map(_ => gen.nextValue())\n+    assert(array1.equals(array2))\n+\n+    // newInstance should contain a difference instance of the rng\n+    // i.e. setting difference seeds for difference instances produces different sequences of\n+    // random numbers.\n+    val gen2 = gen.copy()\n+    gen.setSeed(0L)\n+    val array3 = (0 until 1000).map(_ => gen.nextValue())\n+    gen2.setSeed(1L)\n+    val array4 = (0 until 1000).map(_ => gen2.nextValue())\n+    // Compare arrays instead of elements since individual elements can coincide by chance but the\n+    // sequences should differ given two different seeds.\n+    assert(!array3.equals(array4))\n+\n+    // test that setting the same seed in the copied instance produces the same sequence of numbers\n+    gen.setSeed(0L)\n+    val array5 = (0 until 1000).map(_ => gen.nextValue())\n+    gen2.setSeed(0L)\n+    val array6 = (0 until 1000).map(_ => gen2.nextValue())\n+    assert(array5.equals(array6))\n+  }\n+\n+  def distributionChecks(gen: DistributionGenerator,\n+      mean: Double = 0.0,\n+      stddev: Double = 1.0,\n+      epsilon: Double = 1e-3) {\n+    for (seed <- 0 until 5) {\n+      gen.setSeed(seed.toLong)\n+      val sample = (0 until 10000000).map { _ => gen.nextValue()}"
  }, {
    "author": {
      "login": "dorx"
    },
    "body": "Old tests ran for 21 s on my laptop. Shaved off a couple 0s everywhere and  now it finishes in 986 milliseconds.\n",
    "commit": "01121ac8af3d7f6cd44160644d387b3747b925f4",
    "createdAt": "2014-07-25T20:47:04Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.random\n+\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.util.StatCounter\n+\n+// TODO update tests to use TestingUtils for floating point comparison after PR 1367 is merged\n+class DistributionGeneratorSuite extends FunSuite {\n+\n+  def apiChecks(gen: DistributionGenerator) {\n+\n+    // resetting seed should generate the same sequence of random numbers\n+    gen.setSeed(42L)\n+    val array1 = (0 until 1000).map(_ => gen.nextValue())\n+    gen.setSeed(42L)\n+    val array2 = (0 until 1000).map(_ => gen.nextValue())\n+    assert(array1.equals(array2))\n+\n+    // newInstance should contain a difference instance of the rng\n+    // i.e. setting difference seeds for difference instances produces different sequences of\n+    // random numbers.\n+    val gen2 = gen.copy()\n+    gen.setSeed(0L)\n+    val array3 = (0 until 1000).map(_ => gen.nextValue())\n+    gen2.setSeed(1L)\n+    val array4 = (0 until 1000).map(_ => gen2.nextValue())\n+    // Compare arrays instead of elements since individual elements can coincide by chance but the\n+    // sequences should differ given two different seeds.\n+    assert(!array3.equals(array4))\n+\n+    // test that setting the same seed in the copied instance produces the same sequence of numbers\n+    gen.setSeed(0L)\n+    val array5 = (0 until 1000).map(_ => gen.nextValue())\n+    gen2.setSeed(0L)\n+    val array6 = (0 until 1000).map(_ => gen2.nextValue())\n+    assert(array5.equals(array6))\n+  }\n+\n+  def distributionChecks(gen: DistributionGenerator,\n+      mean: Double = 0.0,\n+      stddev: Double = 1.0,\n+      epsilon: Double = 1e-3) {\n+    for (seed <- 0 until 5) {\n+      gen.setSeed(seed.toLong)\n+      val sample = (0 until 10000000).map { _ => gen.nextValue()}"
  }],
  "prId": 1520
}]