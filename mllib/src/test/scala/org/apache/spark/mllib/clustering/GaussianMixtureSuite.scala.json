[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`sc` is initialized when `test` is called. But there is no guarantee from the API about when `data` is  called. `GaussianTestData` may not be necessary. Use `lazy val data = ...` directly.\n",
    "commit": "7d2cd561bcb0b3071c21b622ab1bbd69bdb64545",
    "createdAt": "2015-03-12T23:43:56Z",
    "diffHunk": "@@ -138,4 +126,36 @@ class GaussianMixtureSuite extends FunSuite with MLlibTestSparkContext {\n     assert(sparseGMM.gaussians(0).sigma ~== Esigma(0) absTol 1E-3)\n     assert(sparseGMM.gaussians(1).sigma ~== Esigma(1) absTol 1E-3)\n   }\n+\n+  test(\"model save / load\") {\n+    val data = GaussianTestData.data\n+\n+    val gmm = new GaussianMixture().setK(2).setSeed(0).run(data)\n+    val tempDir = Utils.createTempDir()\n+    val path = tempDir.toURI.toString\n+\n+    try {\n+      gmm.save(sc, path)\n+      val sameModel = GaussianMixtureModel.load(sc, path)\n+      assert(sameModel.k === gmm.k)\n+      (0 until sameModel.k).foreach { i =>\n+        assert(sameModel.gaussians(i).mu === gmm.gaussians(i).mu)\n+        assert(sameModel.gaussians(i).sigma === gmm.gaussians(i).sigma)\n+      }\n+    } finally {\n+      Utils.deleteRecursively(tempDir)\n+    }\n+  }\n+\n+  object GaussianTestData {\n+\n+    val data = sc.parallelize(Array("
  }, {
    "author": {
      "login": "MechCoder"
    },
    "body": "How about just defining the Array of Vectors here and the `sc.parallelize` is done inside all necessary test functions\nI did this just to avoid code repetition.\n",
    "commit": "7d2cd561bcb0b3071c21b622ab1bbd69bdb64545",
    "createdAt": "2015-03-13T19:20:05Z",
    "diffHunk": "@@ -138,4 +126,36 @@ class GaussianMixtureSuite extends FunSuite with MLlibTestSparkContext {\n     assert(sparseGMM.gaussians(0).sigma ~== Esigma(0) absTol 1E-3)\n     assert(sparseGMM.gaussians(1).sigma ~== Esigma(1) absTol 1E-3)\n   }\n+\n+  test(\"model save / load\") {\n+    val data = GaussianTestData.data\n+\n+    val gmm = new GaussianMixture().setK(2).setSeed(0).run(data)\n+    val tempDir = Utils.createTempDir()\n+    val path = tempDir.toURI.toString\n+\n+    try {\n+      gmm.save(sc, path)\n+      val sameModel = GaussianMixtureModel.load(sc, path)\n+      assert(sameModel.k === gmm.k)\n+      (0 until sameModel.k).foreach { i =>\n+        assert(sameModel.gaussians(i).mu === gmm.gaussians(i).mu)\n+        assert(sameModel.gaussians(i).sigma === gmm.gaussians(i).sigma)\n+      }\n+    } finally {\n+      Utils.deleteRecursively(tempDir)\n+    }\n+  }\n+\n+  object GaussianTestData {\n+\n+    val data = sc.parallelize(Array("
  }],
  "prId": 4986
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Please leave a TODO here for GMM's `equals/hashCode`.\n",
    "commit": "7d2cd561bcb0b3071c21b622ab1bbd69bdb64545",
    "createdAt": "2015-03-24T19:02:36Z",
    "diffHunk": "@@ -138,4 +126,36 @@ class GaussianMixtureSuite extends FunSuite with MLlibTestSparkContext {\n     assert(sparseGMM.gaussians(0).sigma ~== Esigma(0) absTol 1E-3)\n     assert(sparseGMM.gaussians(1).sigma ~== Esigma(1) absTol 1E-3)\n   }\n+\n+  test(\"model save / load\") {\n+    val data = sc.parallelize(GaussianTestData.data)\n+\n+    val gmm = new GaussianMixture().setK(2).setSeed(0).run(data)\n+    val tempDir = Utils.createTempDir()\n+    val path = tempDir.toURI.toString\n+\n+    try {\n+      gmm.save(sc, path)\n+      val sameModel = GaussianMixtureModel.load(sc, path)\n+      assert(sameModel.k === gmm.k)"
  }],
  "prId": 4986
}]