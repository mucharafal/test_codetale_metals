[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Remove comments because the message may change in the future and this won't get updated.\n",
    "commit": "8c7cbccd8f4f0e19406fdeb3f08bbd6edaf9d2b1",
    "createdAt": "2014-07-24T17:51:44Z",
    "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.scalatest.FunSuite\n+import org.apache.spark.mllib.util.TestingUtils._\n+import org.scalatest.exceptions.TestFailedException\n+\n+class TestingUtilsSuite extends FunSuite {\n+\n+  test(\"Comparing doubles using relative error in percentage.\") {\n+\n+    assert(23.1 ~== 23.52 %+- 2.0)\n+    assert(23.1 ~== 22.74 %+- 2.0)\n+    assert(23.1 ~= 23.52 %+- 2.0)\n+    assert(23.1 ~= 22.74 %+- 2.0)\n+    assert(!(23.1 !~= 23.52 %+- 2.0))\n+    assert(!(23.1 !~= 22.74 %+- 2.0))\n+\n+    withClue(\"Should throw exception with message when test fails.\") {\n+      intercept[TestFailedException] {\n+        // This will throw exception with the following message.\n+        // \"Did not expect 23.1 and 23.52 to be within 2.0% using relative error.\"\n+        assert(23.1 !~== 23.52 %+- 2.0)\n+      }\n+      intercept[TestFailedException] {\n+        // \"Did not expect 23.1 and 22.74 to be within 2.0% using relative error.\"\n+        assert(23.1 !~== 22.74 %+- 2.0)\n+      }\n+    }\n+\n+    assert(23.1 !~== 23.63 %+- 2.0)\n+    assert(23.1 !~== 22.34 %+- 2.0)\n+    assert(23.1 !~= 23.63 %+- 2.0)\n+    assert(23.1 !~= 22.34 %+- 2.0)\n+    assert(!(23.1 ~= 23.63 %+- 2.0))\n+    assert(!(23.1 ~= 22.34 %+- 2.0))\n+\n+    withClue(\"Should throw exception with message when test fails.\") {\n+      intercept[TestFailedException] {\n+        // \"Expected 23.1 and 23.63 to be within 2.0% using relative error.\"\n+        assert(23.1 ~== 23.63 %+- 2.0)\n+      }\n+      intercept[TestFailedException] {\n+        // \"Expected 23.1 and 22.34 to be within 2.0% using relative error.\"\n+        assert(23.1 ~== 22.34 %+- 2.0)\n+      }\n+    }\n+\n+    withClue(\"Comparing against zero should fail the test and throw exception with message.\") {\n+      intercept[TestFailedException] {\n+        // 0.1 or 0.0 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.1 ~== 0.0 %+- 3.2)\n+      }\n+      intercept[TestFailedException] {\n+        // 0.1 or 0.0 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.1 ~= 0.0 %+- 3.2)\n+      }\n+      intercept[TestFailedException] {\n+        // 0.1 or 0.0 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.1 !~== 0.0 %+- 3.2)\n+      }\n+      intercept[TestFailedException] {\n+        // 0.1 or 0.0 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.1 !~= 0.0 %+- 3.2)\n+      }\n+      intercept[TestFailedException] {\n+        // 0.0 or 0.1 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.0 ~== 0.1 %+- 3.2)\n+      }\n+      intercept[TestFailedException] {\n+        // 0.0 or 0.1 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.0 ~= 0.1 %+- 3.2)\n+      }\n+      intercept[TestFailedException] {\n+        // 0.0 or 0.1 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.0 !~== 0.1 %+- 3.2)\n+      }\n+      intercept[TestFailedException] {\n+        // 0.0 or 0.1 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.0 !~= 0.1 %+- 3.2)\n+      }\n+    }\n+\n+    // Comparisons of numbers very close to zero.\n+    assert(10 * Double.MinPositiveValue ~== 9.5 * Double.MinPositiveValue %+- 1.0)\n+    assert(10 * Double.MinPositiveValue !~== 11 * Double.MinPositiveValue %+- 1.0)\n+\n+    assert(-Double.MinPositiveValue ~== 1.18 * -Double.MinPositiveValue %+- 1.2)\n+    assert(-Double.MinPositiveValue ~== 1.38 * -Double.MinPositiveValue %+- 1.2)\n+  }\n+\n+  test(\"Comparing doubles using absolute error.\") {\n+\n+    assert(17.8 ~== 17.99 +- 0.2)\n+    assert(17.8 ~== 17.61 +- 0.2)\n+    assert(17.8 ~= 17.99 +- 0.2)\n+    assert(17.8 ~= 17.61 +- 0.2)\n+    assert(!(17.8 !~= 17.99 +- 0.2))\n+    assert(!(17.8 !~= 17.61 +- 0.2))\n+\n+    withClue(\"Should throw exception with message when test fails.\") {\n+      intercept[TestFailedException] {\n+        // This will throw exception with the following message.\n+        // \"Did not expect 17.8 and 17.99 to be within 0.2 using absolute error.\"\n+        assert(17.8 !~== 17.99 +- 0.2)\n+      }\n+      intercept[TestFailedException] {\n+        // \"Did not expect 17.8 and 17.61 to be within 0.2 using absolute error.\"\n+        assert(17.8 !~== 17.61 +- 0.2)\n+      }\n+    }\n+\n+    assert(17.8 !~== 18.01 +- 0.2)\n+    assert(17.8 !~== 17.59 +- 0.2)\n+    assert(17.8 !~= 18.01 +- 0.2)\n+    assert(17.8 !~= 17.59 +- 0.2)\n+    assert(!(17.8 ~= 18.01 +- 0.2))\n+    assert(!(17.8 ~= 17.59 +- 0.2))\n+\n+    withClue(\"Should throw exception with message when test fails.\") {\n+      intercept[TestFailedException] {\n+        // \"Expected 17.8 and 18.01 to be within 0.2 using absolute error.\"\n+        assert(17.8 ~== 18.01 +- 0.2)\n+      }\n+      intercept[TestFailedException] {\n+        // \"Expected 17.8 and 17.59 to be within 0.2 using absolute error.\"\n+        assert(17.8 ~== 17.59 +- 0.2)\n+      }\n+    }\n+\n+    // Comparisons of numbers very close to zero, and both side of zeros\n+    assert(Double.MinPositiveValue ~== 4 * Double.MinPositiveValue +- 5 * Double.MinPositiveValue)\n+    assert(Double.MinPositiveValue !~== 6 * Double.MinPositiveValue +- 5 * Double.MinPositiveValue)\n+\n+    assert(-Double.MinPositiveValue ~== 3 * Double.MinPositiveValue +- 5 * Double.MinPositiveValue)\n+    assert(Double.MinPositiveValue !~== -4 * Double.MinPositiveValue +- 5 * Double.MinPositiveValue)\n+  }\n+\n+  test(\"Comparing vectors using relative error in percentage.\") {\n+\n+    //Comparisons of two dense vectors\n+    assert(Vectors.dense(Array(3.1, 3.5)) ~== Vectors.dense(Array(3.130, 3.534)) %+- 1.0)\n+\n+    assert(Vectors.dense(Array(3.1, 3.5)) !~== Vectors.dense(Array(3.135, 3.534)) %+- 1.0)\n+\n+    assert(Vectors.dense(Array(3.1, 3.5)) ~= Vectors.dense(Array(3.130, 3.534)) %+- 1.0)\n+\n+    assert(Vectors.dense(Array(3.1, 3.5)) !~= Vectors.dense(Array(3.135, 3.534)) %+- 1.0)\n+\n+    assert(!(Vectors.dense(Array(3.1, 3.5)) !~= Vectors.dense(Array(3.130, 3.534)) %+- 1.0))\n+\n+    assert(!(Vectors.dense(Array(3.1, 3.5)) ~= Vectors.dense(Array(3.135, 3.534)) %+- 1.0))\n+\n+    withClue(\"Should throw exception with message when test fails.\") {\n+      intercept[TestFailedException] {\n+        // This will throw exception with the following message.\n+        // \"Did not expect [3.1,3.5] and [3.13,3.534] to be within 1.0%\n+        // using relative error for all elements.\"\n+        assert(Vectors.dense(Array(3.1, 3.5)) !~== Vectors.dense(Array(3.130, 3.534)) %+- 1.0)\n+      }\n+      intercept[TestFailedException] {\n+        // \"Expected [3.1,3.5] and [3.135,3.534] to be within 1.0%\n+        // using relative error for all elements.\"\n+        assert(Vectors.dense(Array(3.1, 3.5)) ~== Vectors.dense(Array(3.135, 3.534)) %+- 1.0)\n+      }\n+    }\n+\n+    withClue(\"Comparing against zero should fail the test and throw exception with message.\") {\n+      intercept[TestFailedException] {\n+        // \"0.01 or 0.0 is extremely close to zero, so the relative error is meaningless.\"\n+        assert(Vectors.dense(Array(3.1, 0.01)) ~== Vectors.dense(Array(3.13, 0.0)) %+- 1.0)\n+      }\n+      intercept[TestFailedException] {\n+        // \"0.01 or 0.0 is extremely close to zero, so the relative error is meaningless.\"\n+        assert(Vectors.dense(Array(3.1, 0.01)) ~== Vectors.sparse(2, Array(0), Array(3.13)) %+- 1.0)\n+      }\n+    }\n+\n+    // Comparisons of two sparse vectors\n+    assert(Vectors.dense(Array(3.1, 3.5)) ~==\n+      Vectors.sparse(2, Array(0, 1), Array(3.130, 3.534)) %+- 1.0)\n+\n+    assert(Vectors.dense(Array(3.1, 3.5)) !~==\n+      Vectors.sparse(2, Array(0, 1), Array(3.135, 3.534)) %+- 1.0)\n+  }\n+\n+  test(\"Comparing vectors using absolute error.\") {\n+\n+    //Comparisons of two dense vectors\n+    assert(Vectors.dense(Array(3.1, 3.5, 0.0)) ~==\n+      Vectors.dense(Array(3.1 + 1E-8, 3.5 + 2E-7, 1E-8)) +- 1E-6)\n+\n+    assert(Vectors.dense(Array(3.1, 3.5, 0.0)) !~==\n+      Vectors.dense(Array(3.1 + 1E-5, 3.5 + 2E-7, 1 + 1E-3)) +- 1E-6)\n+\n+    assert(Vectors.dense(Array(3.1, 3.5, 0.0)) ~=\n+      Vectors.dense(Array(3.1 + 1E-8, 3.5 + 2E-7, 1E-8)) +- 1E-6)\n+\n+    assert(Vectors.dense(Array(3.1, 3.5, 0.0)) !~=\n+      Vectors.dense(Array(3.1 + 1E-5, 3.5 + 2E-7, 1 + 1E-3)) +- 1E-6)\n+\n+    assert(!(Vectors.dense(Array(3.1, 3.5, 0.0)) !~=\n+      Vectors.dense(Array(3.1 + 1E-8, 3.5 + 2E-7, 1E-8)) +- 1E-6))\n+\n+    assert(!(Vectors.dense(Array(3.1, 3.5, 0.0)) ~=\n+      Vectors.dense(Array(3.1 + 1E-5, 3.5 + 2E-7, 1 + 1E-3)) +- 1E-6))\n+\n+    withClue(\"Should throw exception with message when test fails.\") {\n+      intercept[TestFailedException] {\n+        // This will throw exception with the following message."
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Same applies to other places.\n",
    "commit": "8c7cbccd8f4f0e19406fdeb3f08bbd6edaf9d2b1",
    "createdAt": "2014-07-24T17:55:42Z",
    "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.scalatest.FunSuite\n+import org.apache.spark.mllib.util.TestingUtils._\n+import org.scalatest.exceptions.TestFailedException\n+\n+class TestingUtilsSuite extends FunSuite {\n+\n+  test(\"Comparing doubles using relative error in percentage.\") {\n+\n+    assert(23.1 ~== 23.52 %+- 2.0)\n+    assert(23.1 ~== 22.74 %+- 2.0)\n+    assert(23.1 ~= 23.52 %+- 2.0)\n+    assert(23.1 ~= 22.74 %+- 2.0)\n+    assert(!(23.1 !~= 23.52 %+- 2.0))\n+    assert(!(23.1 !~= 22.74 %+- 2.0))\n+\n+    withClue(\"Should throw exception with message when test fails.\") {\n+      intercept[TestFailedException] {\n+        // This will throw exception with the following message.\n+        // \"Did not expect 23.1 and 23.52 to be within 2.0% using relative error.\"\n+        assert(23.1 !~== 23.52 %+- 2.0)\n+      }\n+      intercept[TestFailedException] {\n+        // \"Did not expect 23.1 and 22.74 to be within 2.0% using relative error.\"\n+        assert(23.1 !~== 22.74 %+- 2.0)\n+      }\n+    }\n+\n+    assert(23.1 !~== 23.63 %+- 2.0)\n+    assert(23.1 !~== 22.34 %+- 2.0)\n+    assert(23.1 !~= 23.63 %+- 2.0)\n+    assert(23.1 !~= 22.34 %+- 2.0)\n+    assert(!(23.1 ~= 23.63 %+- 2.0))\n+    assert(!(23.1 ~= 22.34 %+- 2.0))\n+\n+    withClue(\"Should throw exception with message when test fails.\") {\n+      intercept[TestFailedException] {\n+        // \"Expected 23.1 and 23.63 to be within 2.0% using relative error.\"\n+        assert(23.1 ~== 23.63 %+- 2.0)\n+      }\n+      intercept[TestFailedException] {\n+        // \"Expected 23.1 and 22.34 to be within 2.0% using relative error.\"\n+        assert(23.1 ~== 22.34 %+- 2.0)\n+      }\n+    }\n+\n+    withClue(\"Comparing against zero should fail the test and throw exception with message.\") {\n+      intercept[TestFailedException] {\n+        // 0.1 or 0.0 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.1 ~== 0.0 %+- 3.2)\n+      }\n+      intercept[TestFailedException] {\n+        // 0.1 or 0.0 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.1 ~= 0.0 %+- 3.2)\n+      }\n+      intercept[TestFailedException] {\n+        // 0.1 or 0.0 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.1 !~== 0.0 %+- 3.2)\n+      }\n+      intercept[TestFailedException] {\n+        // 0.1 or 0.0 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.1 !~= 0.0 %+- 3.2)\n+      }\n+      intercept[TestFailedException] {\n+        // 0.0 or 0.1 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.0 ~== 0.1 %+- 3.2)\n+      }\n+      intercept[TestFailedException] {\n+        // 0.0 or 0.1 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.0 ~= 0.1 %+- 3.2)\n+      }\n+      intercept[TestFailedException] {\n+        // 0.0 or 0.1 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.0 !~== 0.1 %+- 3.2)\n+      }\n+      intercept[TestFailedException] {\n+        // 0.0 or 0.1 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.0 !~= 0.1 %+- 3.2)\n+      }\n+    }\n+\n+    // Comparisons of numbers very close to zero.\n+    assert(10 * Double.MinPositiveValue ~== 9.5 * Double.MinPositiveValue %+- 1.0)\n+    assert(10 * Double.MinPositiveValue !~== 11 * Double.MinPositiveValue %+- 1.0)\n+\n+    assert(-Double.MinPositiveValue ~== 1.18 * -Double.MinPositiveValue %+- 1.2)\n+    assert(-Double.MinPositiveValue ~== 1.38 * -Double.MinPositiveValue %+- 1.2)\n+  }\n+\n+  test(\"Comparing doubles using absolute error.\") {\n+\n+    assert(17.8 ~== 17.99 +- 0.2)\n+    assert(17.8 ~== 17.61 +- 0.2)\n+    assert(17.8 ~= 17.99 +- 0.2)\n+    assert(17.8 ~= 17.61 +- 0.2)\n+    assert(!(17.8 !~= 17.99 +- 0.2))\n+    assert(!(17.8 !~= 17.61 +- 0.2))\n+\n+    withClue(\"Should throw exception with message when test fails.\") {\n+      intercept[TestFailedException] {\n+        // This will throw exception with the following message.\n+        // \"Did not expect 17.8 and 17.99 to be within 0.2 using absolute error.\"\n+        assert(17.8 !~== 17.99 +- 0.2)\n+      }\n+      intercept[TestFailedException] {\n+        // \"Did not expect 17.8 and 17.61 to be within 0.2 using absolute error.\"\n+        assert(17.8 !~== 17.61 +- 0.2)\n+      }\n+    }\n+\n+    assert(17.8 !~== 18.01 +- 0.2)\n+    assert(17.8 !~== 17.59 +- 0.2)\n+    assert(17.8 !~= 18.01 +- 0.2)\n+    assert(17.8 !~= 17.59 +- 0.2)\n+    assert(!(17.8 ~= 18.01 +- 0.2))\n+    assert(!(17.8 ~= 17.59 +- 0.2))\n+\n+    withClue(\"Should throw exception with message when test fails.\") {\n+      intercept[TestFailedException] {\n+        // \"Expected 17.8 and 18.01 to be within 0.2 using absolute error.\"\n+        assert(17.8 ~== 18.01 +- 0.2)\n+      }\n+      intercept[TestFailedException] {\n+        // \"Expected 17.8 and 17.59 to be within 0.2 using absolute error.\"\n+        assert(17.8 ~== 17.59 +- 0.2)\n+      }\n+    }\n+\n+    // Comparisons of numbers very close to zero, and both side of zeros\n+    assert(Double.MinPositiveValue ~== 4 * Double.MinPositiveValue +- 5 * Double.MinPositiveValue)\n+    assert(Double.MinPositiveValue !~== 6 * Double.MinPositiveValue +- 5 * Double.MinPositiveValue)\n+\n+    assert(-Double.MinPositiveValue ~== 3 * Double.MinPositiveValue +- 5 * Double.MinPositiveValue)\n+    assert(Double.MinPositiveValue !~== -4 * Double.MinPositiveValue +- 5 * Double.MinPositiveValue)\n+  }\n+\n+  test(\"Comparing vectors using relative error in percentage.\") {\n+\n+    //Comparisons of two dense vectors\n+    assert(Vectors.dense(Array(3.1, 3.5)) ~== Vectors.dense(Array(3.130, 3.534)) %+- 1.0)\n+\n+    assert(Vectors.dense(Array(3.1, 3.5)) !~== Vectors.dense(Array(3.135, 3.534)) %+- 1.0)\n+\n+    assert(Vectors.dense(Array(3.1, 3.5)) ~= Vectors.dense(Array(3.130, 3.534)) %+- 1.0)\n+\n+    assert(Vectors.dense(Array(3.1, 3.5)) !~= Vectors.dense(Array(3.135, 3.534)) %+- 1.0)\n+\n+    assert(!(Vectors.dense(Array(3.1, 3.5)) !~= Vectors.dense(Array(3.130, 3.534)) %+- 1.0))\n+\n+    assert(!(Vectors.dense(Array(3.1, 3.5)) ~= Vectors.dense(Array(3.135, 3.534)) %+- 1.0))\n+\n+    withClue(\"Should throw exception with message when test fails.\") {\n+      intercept[TestFailedException] {\n+        // This will throw exception with the following message.\n+        // \"Did not expect [3.1,3.5] and [3.13,3.534] to be within 1.0%\n+        // using relative error for all elements.\"\n+        assert(Vectors.dense(Array(3.1, 3.5)) !~== Vectors.dense(Array(3.130, 3.534)) %+- 1.0)\n+      }\n+      intercept[TestFailedException] {\n+        // \"Expected [3.1,3.5] and [3.135,3.534] to be within 1.0%\n+        // using relative error for all elements.\"\n+        assert(Vectors.dense(Array(3.1, 3.5)) ~== Vectors.dense(Array(3.135, 3.534)) %+- 1.0)\n+      }\n+    }\n+\n+    withClue(\"Comparing against zero should fail the test and throw exception with message.\") {\n+      intercept[TestFailedException] {\n+        // \"0.01 or 0.0 is extremely close to zero, so the relative error is meaningless.\"\n+        assert(Vectors.dense(Array(3.1, 0.01)) ~== Vectors.dense(Array(3.13, 0.0)) %+- 1.0)\n+      }\n+      intercept[TestFailedException] {\n+        // \"0.01 or 0.0 is extremely close to zero, so the relative error is meaningless.\"\n+        assert(Vectors.dense(Array(3.1, 0.01)) ~== Vectors.sparse(2, Array(0), Array(3.13)) %+- 1.0)\n+      }\n+    }\n+\n+    // Comparisons of two sparse vectors\n+    assert(Vectors.dense(Array(3.1, 3.5)) ~==\n+      Vectors.sparse(2, Array(0, 1), Array(3.130, 3.534)) %+- 1.0)\n+\n+    assert(Vectors.dense(Array(3.1, 3.5)) !~==\n+      Vectors.sparse(2, Array(0, 1), Array(3.135, 3.534)) %+- 1.0)\n+  }\n+\n+  test(\"Comparing vectors using absolute error.\") {\n+\n+    //Comparisons of two dense vectors\n+    assert(Vectors.dense(Array(3.1, 3.5, 0.0)) ~==\n+      Vectors.dense(Array(3.1 + 1E-8, 3.5 + 2E-7, 1E-8)) +- 1E-6)\n+\n+    assert(Vectors.dense(Array(3.1, 3.5, 0.0)) !~==\n+      Vectors.dense(Array(3.1 + 1E-5, 3.5 + 2E-7, 1 + 1E-3)) +- 1E-6)\n+\n+    assert(Vectors.dense(Array(3.1, 3.5, 0.0)) ~=\n+      Vectors.dense(Array(3.1 + 1E-8, 3.5 + 2E-7, 1E-8)) +- 1E-6)\n+\n+    assert(Vectors.dense(Array(3.1, 3.5, 0.0)) !~=\n+      Vectors.dense(Array(3.1 + 1E-5, 3.5 + 2E-7, 1 + 1E-3)) +- 1E-6)\n+\n+    assert(!(Vectors.dense(Array(3.1, 3.5, 0.0)) !~=\n+      Vectors.dense(Array(3.1 + 1E-8, 3.5 + 2E-7, 1E-8)) +- 1E-6))\n+\n+    assert(!(Vectors.dense(Array(3.1, 3.5, 0.0)) ~=\n+      Vectors.dense(Array(3.1 + 1E-5, 3.5 + 2E-7, 1 + 1E-3)) +- 1E-6))\n+\n+    withClue(\"Should throw exception with message when test fails.\") {\n+      intercept[TestFailedException] {\n+        // This will throw exception with the following message."
  }],
  "prId": 1425
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Is it necessary? The clue doesn't contain useful information. Maybe we can use `intercept` directly.\n",
    "commit": "8c7cbccd8f4f0e19406fdeb3f08bbd6edaf9d2b1",
    "createdAt": "2014-07-24T17:55:12Z",
    "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.scalatest.FunSuite\n+import org.apache.spark.mllib.util.TestingUtils._\n+import org.scalatest.exceptions.TestFailedException\n+\n+class TestingUtilsSuite extends FunSuite {\n+\n+  test(\"Comparing doubles using relative error in percentage.\") {\n+\n+    assert(23.1 ~== 23.52 %+- 2.0)\n+    assert(23.1 ~== 22.74 %+- 2.0)\n+    assert(23.1 ~= 23.52 %+- 2.0)\n+    assert(23.1 ~= 22.74 %+- 2.0)\n+    assert(!(23.1 !~= 23.52 %+- 2.0))\n+    assert(!(23.1 !~= 22.74 %+- 2.0))\n+\n+    withClue(\"Should throw exception with message when test fails.\") {\n+      intercept[TestFailedException] {\n+        // This will throw exception with the following message.\n+        // \"Did not expect 23.1 and 23.52 to be within 2.0% using relative error.\"\n+        assert(23.1 !~== 23.52 %+- 2.0)\n+      }\n+      intercept[TestFailedException] {\n+        // \"Did not expect 23.1 and 22.74 to be within 2.0% using relative error.\"\n+        assert(23.1 !~== 22.74 %+- 2.0)\n+      }\n+    }\n+\n+    assert(23.1 !~== 23.63 %+- 2.0)\n+    assert(23.1 !~== 22.34 %+- 2.0)\n+    assert(23.1 !~= 23.63 %+- 2.0)\n+    assert(23.1 !~= 22.34 %+- 2.0)\n+    assert(!(23.1 ~= 23.63 %+- 2.0))\n+    assert(!(23.1 ~= 22.34 %+- 2.0))\n+\n+    withClue(\"Should throw exception with message when test fails.\") {\n+      intercept[TestFailedException] {\n+        // \"Expected 23.1 and 23.63 to be within 2.0% using relative error.\"\n+        assert(23.1 ~== 23.63 %+- 2.0)\n+      }\n+      intercept[TestFailedException] {\n+        // \"Expected 23.1 and 22.34 to be within 2.0% using relative error.\"\n+        assert(23.1 ~== 22.34 %+- 2.0)\n+      }\n+    }\n+\n+    withClue(\"Comparing against zero should fail the test and throw exception with message.\") {\n+      intercept[TestFailedException] {\n+        // 0.1 or 0.0 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.1 ~== 0.0 %+- 3.2)\n+      }\n+      intercept[TestFailedException] {\n+        // 0.1 or 0.0 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.1 ~= 0.0 %+- 3.2)\n+      }\n+      intercept[TestFailedException] {\n+        // 0.1 or 0.0 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.1 !~== 0.0 %+- 3.2)\n+      }\n+      intercept[TestFailedException] {\n+        // 0.1 or 0.0 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.1 !~= 0.0 %+- 3.2)\n+      }\n+      intercept[TestFailedException] {\n+        // 0.0 or 0.1 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.0 ~== 0.1 %+- 3.2)\n+      }\n+      intercept[TestFailedException] {\n+        // 0.0 or 0.1 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.0 ~= 0.1 %+- 3.2)\n+      }\n+      intercept[TestFailedException] {\n+        // 0.0 or 0.1 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.0 !~== 0.1 %+- 3.2)\n+      }\n+      intercept[TestFailedException] {\n+        // 0.0 or 0.1 is extremely close to zero, so the relative error is meaningless.\n+        assert(0.0 !~= 0.1 %+- 3.2)\n+      }\n+    }\n+\n+    // Comparisons of numbers very close to zero.\n+    assert(10 * Double.MinPositiveValue ~== 9.5 * Double.MinPositiveValue %+- 1.0)\n+    assert(10 * Double.MinPositiveValue !~== 11 * Double.MinPositiveValue %+- 1.0)\n+\n+    assert(-Double.MinPositiveValue ~== 1.18 * -Double.MinPositiveValue %+- 1.2)\n+    assert(-Double.MinPositiveValue ~== 1.38 * -Double.MinPositiveValue %+- 1.2)\n+  }\n+\n+  test(\"Comparing doubles using absolute error.\") {\n+\n+    assert(17.8 ~== 17.99 +- 0.2)\n+    assert(17.8 ~== 17.61 +- 0.2)\n+    assert(17.8 ~= 17.99 +- 0.2)\n+    assert(17.8 ~= 17.61 +- 0.2)\n+    assert(!(17.8 !~= 17.99 +- 0.2))\n+    assert(!(17.8 !~= 17.61 +- 0.2))\n+\n+    withClue(\"Should throw exception with message when test fails.\") {\n+      intercept[TestFailedException] {\n+        // This will throw exception with the following message.\n+        // \"Did not expect 17.8 and 17.99 to be within 0.2 using absolute error.\"\n+        assert(17.8 !~== 17.99 +- 0.2)\n+      }\n+      intercept[TestFailedException] {\n+        // \"Did not expect 17.8 and 17.61 to be within 0.2 using absolute error.\"\n+        assert(17.8 !~== 17.61 +- 0.2)\n+      }\n+    }\n+\n+    assert(17.8 !~== 18.01 +- 0.2)\n+    assert(17.8 !~== 17.59 +- 0.2)\n+    assert(17.8 !~= 18.01 +- 0.2)\n+    assert(17.8 !~= 17.59 +- 0.2)\n+    assert(!(17.8 ~= 18.01 +- 0.2))\n+    assert(!(17.8 ~= 17.59 +- 0.2))\n+\n+    withClue(\"Should throw exception with message when test fails.\") {\n+      intercept[TestFailedException] {\n+        // \"Expected 17.8 and 18.01 to be within 0.2 using absolute error.\"\n+        assert(17.8 ~== 18.01 +- 0.2)\n+      }\n+      intercept[TestFailedException] {\n+        // \"Expected 17.8 and 17.59 to be within 0.2 using absolute error.\"\n+        assert(17.8 ~== 17.59 +- 0.2)\n+      }\n+    }\n+\n+    // Comparisons of numbers very close to zero, and both side of zeros\n+    assert(Double.MinPositiveValue ~== 4 * Double.MinPositiveValue +- 5 * Double.MinPositiveValue)\n+    assert(Double.MinPositiveValue !~== 6 * Double.MinPositiveValue +- 5 * Double.MinPositiveValue)\n+\n+    assert(-Double.MinPositiveValue ~== 3 * Double.MinPositiveValue +- 5 * Double.MinPositiveValue)\n+    assert(Double.MinPositiveValue !~== -4 * Double.MinPositiveValue +- 5 * Double.MinPositiveValue)\n+  }\n+\n+  test(\"Comparing vectors using relative error in percentage.\") {\n+\n+    //Comparisons of two dense vectors\n+    assert(Vectors.dense(Array(3.1, 3.5)) ~== Vectors.dense(Array(3.130, 3.534)) %+- 1.0)\n+\n+    assert(Vectors.dense(Array(3.1, 3.5)) !~== Vectors.dense(Array(3.135, 3.534)) %+- 1.0)\n+\n+    assert(Vectors.dense(Array(3.1, 3.5)) ~= Vectors.dense(Array(3.130, 3.534)) %+- 1.0)\n+\n+    assert(Vectors.dense(Array(3.1, 3.5)) !~= Vectors.dense(Array(3.135, 3.534)) %+- 1.0)\n+\n+    assert(!(Vectors.dense(Array(3.1, 3.5)) !~= Vectors.dense(Array(3.130, 3.534)) %+- 1.0))\n+\n+    assert(!(Vectors.dense(Array(3.1, 3.5)) ~= Vectors.dense(Array(3.135, 3.534)) %+- 1.0))\n+\n+    withClue(\"Should throw exception with message when test fails.\") {\n+      intercept[TestFailedException] {\n+        // This will throw exception with the following message.\n+        // \"Did not expect [3.1,3.5] and [3.13,3.534] to be within 1.0%\n+        // using relative error for all elements.\"\n+        assert(Vectors.dense(Array(3.1, 3.5)) !~== Vectors.dense(Array(3.130, 3.534)) %+- 1.0)\n+      }\n+      intercept[TestFailedException] {\n+        // \"Expected [3.1,3.5] and [3.135,3.534] to be within 1.0%\n+        // using relative error for all elements.\"\n+        assert(Vectors.dense(Array(3.1, 3.5)) ~== Vectors.dense(Array(3.135, 3.534)) %+- 1.0)\n+      }\n+    }\n+\n+    withClue(\"Comparing against zero should fail the test and throw exception with message.\") {\n+      intercept[TestFailedException] {\n+        // \"0.01 or 0.0 is extremely close to zero, so the relative error is meaningless.\"\n+        assert(Vectors.dense(Array(3.1, 0.01)) ~== Vectors.dense(Array(3.13, 0.0)) %+- 1.0)\n+      }\n+      intercept[TestFailedException] {\n+        // \"0.01 or 0.0 is extremely close to zero, so the relative error is meaningless.\"\n+        assert(Vectors.dense(Array(3.1, 0.01)) ~== Vectors.sparse(2, Array(0), Array(3.13)) %+- 1.0)\n+      }\n+    }\n+\n+    // Comparisons of two sparse vectors\n+    assert(Vectors.dense(Array(3.1, 3.5)) ~==\n+      Vectors.sparse(2, Array(0, 1), Array(3.130, 3.534)) %+- 1.0)\n+\n+    assert(Vectors.dense(Array(3.1, 3.5)) !~==\n+      Vectors.sparse(2, Array(0, 1), Array(3.135, 3.534)) %+- 1.0)\n+  }\n+\n+  test(\"Comparing vectors using absolute error.\") {\n+\n+    //Comparisons of two dense vectors\n+    assert(Vectors.dense(Array(3.1, 3.5, 0.0)) ~==\n+      Vectors.dense(Array(3.1 + 1E-8, 3.5 + 2E-7, 1E-8)) +- 1E-6)\n+\n+    assert(Vectors.dense(Array(3.1, 3.5, 0.0)) !~==\n+      Vectors.dense(Array(3.1 + 1E-5, 3.5 + 2E-7, 1 + 1E-3)) +- 1E-6)\n+\n+    assert(Vectors.dense(Array(3.1, 3.5, 0.0)) ~=\n+      Vectors.dense(Array(3.1 + 1E-8, 3.5 + 2E-7, 1E-8)) +- 1E-6)\n+\n+    assert(Vectors.dense(Array(3.1, 3.5, 0.0)) !~=\n+      Vectors.dense(Array(3.1 + 1E-5, 3.5 + 2E-7, 1 + 1E-3)) +- 1E-6)\n+\n+    assert(!(Vectors.dense(Array(3.1, 3.5, 0.0)) !~=\n+      Vectors.dense(Array(3.1 + 1E-8, 3.5 + 2E-7, 1E-8)) +- 1E-6))\n+\n+    assert(!(Vectors.dense(Array(3.1, 3.5, 0.0)) ~=\n+      Vectors.dense(Array(3.1 + 1E-5, 3.5 + 2E-7, 1 + 1E-3)) +- 1E-6))\n+\n+    withClue(\"Should throw exception with message when test fails.\") {"
  }],
  "prId": 1425
}]