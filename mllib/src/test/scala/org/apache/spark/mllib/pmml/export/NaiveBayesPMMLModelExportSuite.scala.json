[{
  "comments": [{
    "author": {
      "login": "JasmineGeorge"
    },
    "body": "I'll try and add a validator for Naive Bayes in the Spark-PMML-exporter-validator\n",
    "commit": "b17491d5f2138c8bb24db1498a9c2f8b27943046",
    "createdAt": "2015-10-27T14:47:50Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.pmml.export\n+\n+import scala.{Array => SArray}\n+\n+import org.dmg.pmml._\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.mllib.classification.{NaiveBayes, NaiveBayesModel => SNaiveBayesModel}\n+\n+class NaiveBayesPMMLModelExportSuite extends SparkFunSuite {\n+\n+  test(\"Naive Bayes PMML export\") {\n+    val label = SArray(0.0, 1.0, 2.0)\n+    val pi = SArray(0.5, 0.1, 0.4).map(math.log)\n+    val theta = SArray(\n+      SArray(0.70, 0.10, 0.10, 0.10), // label 0\n+      SArray(0.10, 0.70, 0.10, 0.10), // label 1\n+      SArray(0.10, 0.10, 0.70, 0.10)  // label 2\n+    ).map(_.map(math.log))\n+\n+    val nbModel = new SNaiveBayesModel(label, pi, theta, NaiveBayes.Multinomial)\n+    val nbModelExport = PMMLModelExportFactory.createPMMLModelExport(nbModel)\n+    val pmml = nbModelExport.getPmml\n+\n+    assert(pmml.getHeader.getDescription === \"naive bayes\")\n+    assert(pmml.getDataDictionary.getNumberOfFields === theta(0).length + 1)\n+\n+    // assert Bayes input\n+    val pmmlRegressionModel = pmml.getModels.get(0).asInstanceOf[NaiveBayesModel]\n+    val bayesInputs = pmmlRegressionModel.getBayesInputs\n+    assert(bayesInputs.getBayesInputs.size() === 4)\n+\n+    val bIter = bayesInputs.iterator()\n+    var i = 0\n+    while (bIter.hasNext) {\n+      val bayesInput = bIter.next()\n+      assert(bayesInput.getFieldName.getValue === \"field_\" + i)\n+      val pIter = bayesInput.getPairCounts.iterator()\n+      while (pIter.hasNext) {\n+        val pairs = pIter.next()\n+        val tIter = pairs.getTargetValueCounts.iterator()\n+        var j = 0\n+        while (tIter.hasNext) {\n+          val targetValueCount = tIter.next()\n+          assert(targetValueCount.getCount === theta(j)(i))\n+          j += 1\n+        }\n+      }\n+      i += 1\n+    }\n+\n+    // assert Bayes output\n+    val bayesOutput = pmmlRegressionModel.getBayesOutput.getTargetValueCounts\n+    assert(bayesOutput.getTargetValueCounts.size() === pi.length)\n+\n+    val bayesOutputIter = bayesOutput.iterator()\n+    i = 0\n+    while (bayesOutputIter.hasNext) {\n+      val targetCount = bayesOutputIter.next()\n+      assert(targetCount.getValue === \"target_\" + i)\n+      assert(targetCount.getCount === pi(i))\n+      i += 1\n+    }\n+  }\n+}\n+"
  }],
  "prId": 9057
}]