[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "decrease the default value of tol, e.g., to `1e-10`\n",
    "commit": "b13ac90dc93c7daf42f2773638126ee4e1febcc2",
    "createdAt": "2014-07-10T04:35:24Z",
    "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat\n+\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.mllib.linalg.Vectors\n+\n+class OnlineSummarizerSuite extends FunSuite {\n+\n+  def compareDouble(x: Double, y: Double, tol: Double = 1E-3): Boolean = {"
  }],
  "prId": 955
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "better add two spaces to this line and next line\n",
    "commit": "b13ac90dc93c7daf42f2773638126ee4e1febcc2",
    "createdAt": "2014-07-10T04:35:29Z",
    "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat\n+\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.mllib.linalg.Vectors\n+\n+class OnlineSummarizerSuite extends FunSuite {\n+\n+  def compareDouble(x: Double, y: Double, tol: Double = 1E-3): Boolean = {\n+    math.abs(x - y) / (math.abs(y) + 1e-15) < tol\n+  }\n+\n+  test(\"basic error handing\") {\n+    val summarizer = new OnlineSummarizer\n+\n+    assert(summarizer.count === 0, \"should be zero since nothing is added.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.numNonzeros"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "btw, it should be sufficient to only test against IllegalArgumentException. Asserting on the error message may be error-prone.\n",
    "commit": "b13ac90dc93c7daf42f2773638126ee4e1febcc2",
    "createdAt": "2014-07-10T04:43:47Z",
    "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat\n+\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.mllib.linalg.Vectors\n+\n+class OnlineSummarizerSuite extends FunSuite {\n+\n+  def compareDouble(x: Double, y: Double, tol: Double = 1E-3): Boolean = {\n+    math.abs(x - y) / (math.abs(y) + 1e-15) < tol\n+  }\n+\n+  test(\"basic error handing\") {\n+    val summarizer = new OnlineSummarizer\n+\n+    assert(summarizer.count === 0, \"should be zero since nothing is added.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.numNonzeros"
  }],
  "prId": 955
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "remove `summarizer.` to use builder pattern\n",
    "commit": "b13ac90dc93c7daf42f2773638126ee4e1febcc2",
    "createdAt": "2014-07-10T04:35:32Z",
    "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat\n+\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.mllib.linalg.Vectors\n+\n+class OnlineSummarizerSuite extends FunSuite {\n+\n+  def compareDouble(x: Double, y: Double, tol: Double = 1E-3): Boolean = {\n+    math.abs(x - y) / (math.abs(y) + 1e-15) < tol\n+  }\n+\n+  test(\"basic error handing\") {\n+    val summarizer = new OnlineSummarizer\n+\n+    assert(summarizer.count === 0, \"should be zero since nothing is added.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.numNonzeros\n+    }.getMessage.contains(s\"Nothing has been added to this summarizer.\"),\n+      \"Getting numNonzeros from empty summarizer should throw exception.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.variance\n+    }.getMessage.contains(s\"Nothing has been added to this summarizer.\"),\n+      \"Getting variance from empty summarizer should throw exception.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.mean\n+    }.getMessage.contains(s\"Nothing has been added to this summarizer.\"),\n+      \"Getting mean from empty summarizer should throw exception.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.max\n+    }.getMessage.contains(s\"Nothing has been added to this summarizer.\"),\n+      \"Getting max from empty summarizer should throw exception.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.min\n+    }.getMessage.contains(s\"Nothing has been added to this summarizer.\"),\n+      \"Getting min from empty summarizer should throw exception.\")\n+\n+    summarizer.add(Vectors.dense(-1.0, 2.0, 6.0))\n+    summarizer.add(Vectors.sparse(3, Seq((0, -2.0), (1, 6.0))))"
  }],
  "prId": 955
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Could you add a method called `vectorEqual` and use `assert(vectorEqual(summarizer.mean, Vectors.dense(...)), \"...\")` in the code?\n",
    "commit": "b13ac90dc93c7daf42f2773638126ee4e1febcc2",
    "createdAt": "2014-07-10T04:35:36Z",
    "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat\n+\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.mllib.linalg.Vectors\n+\n+class OnlineSummarizerSuite extends FunSuite {\n+\n+  def compareDouble(x: Double, y: Double, tol: Double = 1E-3): Boolean = {\n+    math.abs(x - y) / (math.abs(y) + 1e-15) < tol\n+  }\n+\n+  test(\"basic error handing\") {\n+    val summarizer = new OnlineSummarizer\n+\n+    assert(summarizer.count === 0, \"should be zero since nothing is added.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.numNonzeros\n+    }.getMessage.contains(s\"Nothing has been added to this summarizer.\"),\n+      \"Getting numNonzeros from empty summarizer should throw exception.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.variance\n+    }.getMessage.contains(s\"Nothing has been added to this summarizer.\"),\n+      \"Getting variance from empty summarizer should throw exception.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.mean\n+    }.getMessage.contains(s\"Nothing has been added to this summarizer.\"),\n+      \"Getting mean from empty summarizer should throw exception.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.max\n+    }.getMessage.contains(s\"Nothing has been added to this summarizer.\"),\n+      \"Getting max from empty summarizer should throw exception.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.min\n+    }.getMessage.contains(s\"Nothing has been added to this summarizer.\"),\n+      \"Getting min from empty summarizer should throw exception.\")\n+\n+    summarizer.add(Vectors.dense(-1.0, 2.0, 6.0))\n+    summarizer.add(Vectors.sparse(3, Seq((0, -2.0), (1, 6.0))))\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.add(Vectors.dense(3.0, 1.0))\n+    }.getMessage.contains(s\"Dimensions mismatch\"),\n+      \"Adding a new dense sample with different array size should throw exception.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.add(Vectors.sparse(5, Seq((0, -2.0), (1, 6.0))))\n+    }.getMessage.contains(s\"Dimensions mismatch\"),\n+      \"Adding a new sparse sample with different array size should throw exception.\")\n+\n+    val summarizer2 = new OnlineSummarizer\n+    summarizer2.add(Vectors.dense(1.0, -2.0, 0.0, 4.0))\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.add(summarizer2)\n+    }.getMessage.contains(s\"Dimensions mismatch\"),\n+      \"Merging a new summarizer with different dimensions should throw exception.\")\n+  }\n+\n+  test(\"dense vector input\") {\n+    val summarizer = new OnlineSummarizer\n+\n+    // For column 2, the maximum will be 0.0, and it's not explicitly added since we ignore all\n+    // the zeros; it's a case we need to test. For column 3, the minimum will be 0.0 which we\n+    // need to test as well.\n+    summarizer.add(Vectors.dense(-1.0, 0.0, 6.0))\n+    summarizer.add(Vectors.dense(3.0, -3.0, 0.0))\n+\n+    assert(summarizer.mean.toArray.corresponds(Vectors.dense(1.0, -1.5, 3.0).toArray) {"
  }],
  "prId": 955
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "same here. use the builder pattern\n",
    "commit": "b13ac90dc93c7daf42f2773638126ee4e1febcc2",
    "createdAt": "2014-07-10T04:36:03Z",
    "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat\n+\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.mllib.linalg.Vectors\n+\n+class OnlineSummarizerSuite extends FunSuite {\n+\n+  def compareDouble(x: Double, y: Double, tol: Double = 1E-3): Boolean = {\n+    math.abs(x - y) / (math.abs(y) + 1e-15) < tol\n+  }\n+\n+  test(\"basic error handing\") {\n+    val summarizer = new OnlineSummarizer\n+\n+    assert(summarizer.count === 0, \"should be zero since nothing is added.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.numNonzeros\n+    }.getMessage.contains(s\"Nothing has been added to this summarizer.\"),\n+      \"Getting numNonzeros from empty summarizer should throw exception.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.variance\n+    }.getMessage.contains(s\"Nothing has been added to this summarizer.\"),\n+      \"Getting variance from empty summarizer should throw exception.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.mean\n+    }.getMessage.contains(s\"Nothing has been added to this summarizer.\"),\n+      \"Getting mean from empty summarizer should throw exception.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.max\n+    }.getMessage.contains(s\"Nothing has been added to this summarizer.\"),\n+      \"Getting max from empty summarizer should throw exception.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.min\n+    }.getMessage.contains(s\"Nothing has been added to this summarizer.\"),\n+      \"Getting min from empty summarizer should throw exception.\")\n+\n+    summarizer.add(Vectors.dense(-1.0, 2.0, 6.0))\n+    summarizer.add(Vectors.sparse(3, Seq((0, -2.0), (1, 6.0))))\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.add(Vectors.dense(3.0, 1.0))\n+    }.getMessage.contains(s\"Dimensions mismatch\"),\n+      \"Adding a new dense sample with different array size should throw exception.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.add(Vectors.sparse(5, Seq((0, -2.0), (1, 6.0))))\n+    }.getMessage.contains(s\"Dimensions mismatch\"),\n+      \"Adding a new sparse sample with different array size should throw exception.\")\n+\n+    val summarizer2 = new OnlineSummarizer\n+    summarizer2.add(Vectors.dense(1.0, -2.0, 0.0, 4.0))\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.add(summarizer2)\n+    }.getMessage.contains(s\"Dimensions mismatch\"),\n+      \"Merging a new summarizer with different dimensions should throw exception.\")\n+  }\n+\n+  test(\"dense vector input\") {\n+    val summarizer = new OnlineSummarizer\n+\n+    // For column 2, the maximum will be 0.0, and it's not explicitly added since we ignore all\n+    // the zeros; it's a case we need to test. For column 3, the minimum will be 0.0 which we\n+    // need to test as well.\n+    summarizer.add(Vectors.dense(-1.0, 0.0, 6.0))\n+    summarizer.add(Vectors.dense(3.0, -3.0, 0.0))\n+\n+    assert(summarizer.mean.toArray.corresponds(Vectors.dense(1.0, -1.5, 3.0).toArray) {\n+      compareDouble(_, _)\n+    }, \"mean mismatch\")\n+\n+    assert(summarizer.min.toArray.corresponds(Vectors.dense(-1.0, -3, 0.0).toArray) {\n+      compareDouble(_, _)\n+    }, \"min mismatch\")\n+\n+    assert(summarizer.max.toArray.corresponds(Vectors.dense(3.0, 0.0, 6.0).toArray) {\n+      compareDouble(_, _)\n+    }, \"max mismatch\")\n+\n+    assert(summarizer.numNonzeros.toArray.corresponds(Vectors.dense(2, 1, 1).toArray) {\n+      _.toLong == _.toLong\n+    }, \"numNonzeros mismatch\")\n+\n+    assert(summarizer.variance.toArray.corresponds(Vectors.dense(8.0, 4.5, 18.0).toArray) {\n+      compareDouble(_, _)\n+    }, \"variance mismatch\")\n+\n+    assert(summarizer.count === 2)\n+  }\n+\n+  test(\"sparse vector input\") {\n+    val summarizer = new OnlineSummarizer\n+\n+    summarizer.add(Vectors.sparse(3, Seq((0, -1.0), (2, 6.0))))\n+    summarizer.add(Vectors.sparse(3, Seq((0, 3.0), (1, -3.0))))\n+\n+    assert(summarizer.mean.toArray.corresponds(Vectors.dense(1.0, -1.5, 3.0).toArray) {\n+      compareDouble(_, _)\n+    }, \"mean mismatch\")\n+\n+    assert(summarizer.min.toArray.corresponds(Vectors.dense(-1.0, -3, 0.0).toArray) {\n+      compareDouble(_, _)\n+    }, \"min mismatch\")\n+\n+    assert(summarizer.max.toArray.corresponds(Vectors.dense(3.0, 0.0, 6.0).toArray) {\n+      compareDouble(_, _)\n+    }, \"max mismatch\")\n+\n+    assert(summarizer.numNonzeros.toArray.corresponds(Vectors.dense(2, 1, 1).toArray) {\n+      _.toLong == _.toLong\n+    }, \"numNonzeros mismatch\")\n+\n+    assert(summarizer.variance.toArray.corresponds(Vectors.dense(8.0, 4.5, 18.0).toArray) {\n+      compareDouble(_, _)\n+    }, \"variance mismatch\")\n+\n+    assert(summarizer.count === 2)\n+  }\n+\n+  test(\"mixing dense and sparse vector input\") {\n+    val summarizer = new OnlineSummarizer\n+\n+    summarizer.add(Vectors.sparse(3, Seq((0, -2.0), (1, 2.3))))\n+    summarizer.add(Vectors.dense(0.0, -1.0, -3.0))"
  }],
  "prId": 955
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "There is only one test for `summarizer3`. Shall we move it closer to the test?\n",
    "commit": "b13ac90dc93c7daf42f2773638126ee4e1febcc2",
    "createdAt": "2014-07-10T04:38:19Z",
    "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat\n+\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.mllib.linalg.Vectors\n+\n+class OnlineSummarizerSuite extends FunSuite {\n+\n+  def compareDouble(x: Double, y: Double, tol: Double = 1E-3): Boolean = {\n+    math.abs(x - y) / (math.abs(y) + 1e-15) < tol\n+  }\n+\n+  test(\"basic error handing\") {\n+    val summarizer = new OnlineSummarizer\n+\n+    assert(summarizer.count === 0, \"should be zero since nothing is added.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.numNonzeros\n+    }.getMessage.contains(s\"Nothing has been added to this summarizer.\"),\n+      \"Getting numNonzeros from empty summarizer should throw exception.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.variance\n+    }.getMessage.contains(s\"Nothing has been added to this summarizer.\"),\n+      \"Getting variance from empty summarizer should throw exception.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.mean\n+    }.getMessage.contains(s\"Nothing has been added to this summarizer.\"),\n+      \"Getting mean from empty summarizer should throw exception.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.max\n+    }.getMessage.contains(s\"Nothing has been added to this summarizer.\"),\n+      \"Getting max from empty summarizer should throw exception.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.min\n+    }.getMessage.contains(s\"Nothing has been added to this summarizer.\"),\n+      \"Getting min from empty summarizer should throw exception.\")\n+\n+    summarizer.add(Vectors.dense(-1.0, 2.0, 6.0))\n+    summarizer.add(Vectors.sparse(3, Seq((0, -2.0), (1, 6.0))))\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.add(Vectors.dense(3.0, 1.0))\n+    }.getMessage.contains(s\"Dimensions mismatch\"),\n+      \"Adding a new dense sample with different array size should throw exception.\")\n+\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.add(Vectors.sparse(5, Seq((0, -2.0), (1, 6.0))))\n+    }.getMessage.contains(s\"Dimensions mismatch\"),\n+      \"Adding a new sparse sample with different array size should throw exception.\")\n+\n+    val summarizer2 = new OnlineSummarizer\n+    summarizer2.add(Vectors.dense(1.0, -2.0, 0.0, 4.0))\n+    assert(intercept[IllegalArgumentException] {\n+      summarizer.add(summarizer2)\n+    }.getMessage.contains(s\"Dimensions mismatch\"),\n+      \"Merging a new summarizer with different dimensions should throw exception.\")\n+  }\n+\n+  test(\"dense vector input\") {\n+    val summarizer = new OnlineSummarizer\n+\n+    // For column 2, the maximum will be 0.0, and it's not explicitly added since we ignore all\n+    // the zeros; it's a case we need to test. For column 3, the minimum will be 0.0 which we\n+    // need to test as well.\n+    summarizer.add(Vectors.dense(-1.0, 0.0, 6.0))\n+    summarizer.add(Vectors.dense(3.0, -3.0, 0.0))\n+\n+    assert(summarizer.mean.toArray.corresponds(Vectors.dense(1.0, -1.5, 3.0).toArray) {\n+      compareDouble(_, _)\n+    }, \"mean mismatch\")\n+\n+    assert(summarizer.min.toArray.corresponds(Vectors.dense(-1.0, -3, 0.0).toArray) {\n+      compareDouble(_, _)\n+    }, \"min mismatch\")\n+\n+    assert(summarizer.max.toArray.corresponds(Vectors.dense(3.0, 0.0, 6.0).toArray) {\n+      compareDouble(_, _)\n+    }, \"max mismatch\")\n+\n+    assert(summarizer.numNonzeros.toArray.corresponds(Vectors.dense(2, 1, 1).toArray) {\n+      _.toLong == _.toLong\n+    }, \"numNonzeros mismatch\")\n+\n+    assert(summarizer.variance.toArray.corresponds(Vectors.dense(8.0, 4.5, 18.0).toArray) {\n+      compareDouble(_, _)\n+    }, \"variance mismatch\")\n+\n+    assert(summarizer.count === 2)\n+  }\n+\n+  test(\"sparse vector input\") {\n+    val summarizer = new OnlineSummarizer\n+\n+    summarizer.add(Vectors.sparse(3, Seq((0, -1.0), (2, 6.0))))\n+    summarizer.add(Vectors.sparse(3, Seq((0, 3.0), (1, -3.0))))\n+\n+    assert(summarizer.mean.toArray.corresponds(Vectors.dense(1.0, -1.5, 3.0).toArray) {\n+      compareDouble(_, _)\n+    }, \"mean mismatch\")\n+\n+    assert(summarizer.min.toArray.corresponds(Vectors.dense(-1.0, -3, 0.0).toArray) {\n+      compareDouble(_, _)\n+    }, \"min mismatch\")\n+\n+    assert(summarizer.max.toArray.corresponds(Vectors.dense(3.0, 0.0, 6.0).toArray) {\n+      compareDouble(_, _)\n+    }, \"max mismatch\")\n+\n+    assert(summarizer.numNonzeros.toArray.corresponds(Vectors.dense(2, 1, 1).toArray) {\n+      _.toLong == _.toLong\n+    }, \"numNonzeros mismatch\")\n+\n+    assert(summarizer.variance.toArray.corresponds(Vectors.dense(8.0, 4.5, 18.0).toArray) {\n+      compareDouble(_, _)\n+    }, \"variance mismatch\")\n+\n+    assert(summarizer.count === 2)\n+  }\n+\n+  test(\"mixing dense and sparse vector input\") {\n+    val summarizer = new OnlineSummarizer\n+\n+    summarizer.add(Vectors.sparse(3, Seq((0, -2.0), (1, 2.3))))\n+    summarizer.add(Vectors.dense(0.0, -1.0, -3.0))\n+    summarizer.add(Vectors.sparse(3, Seq((1, -5.1))))\n+    summarizer.add(Vectors.dense(3.8, 0.0, 1.9))\n+    summarizer.add(Vectors.dense(1.7, -0.6, 0.0))\n+    summarizer.add(Vectors.sparse(3, Seq((1, 1.9), (2, 0.0))))\n+\n+    assert(summarizer.mean.toArray.corresponds(Vectors.dense(0.5833, -0.4166, -0.1833).toArray) {\n+      compareDouble(_, _)\n+    }, \"mean mismatch\")\n+\n+    assert(summarizer.min.toArray.corresponds(Vectors.dense(-2.0, -5.1, -3).toArray) {\n+      compareDouble(_, _)\n+    }, \"min mismatch\")\n+\n+    assert(summarizer.max.toArray.corresponds(Vectors.dense(3.8, 2.3, 1.9).toArray) {\n+      compareDouble(_, _)\n+    }, \"max mismatch\")\n+\n+    assert(summarizer.numNonzeros.toArray.corresponds(Vectors.dense(3, 5, 2).toArray) {\n+      _.toLong == _.toLong\n+    }, \"numNonzeros mismatch\")\n+\n+    assert(summarizer.variance.toArray.corresponds(Vectors.dense(3.858, 7.0457, 2.4817).toArray) {\n+      compareDouble(_, _)\n+    }, \"variance mismatch\")\n+\n+    assert(summarizer.count === 6)\n+  }\n+\n+  test(\"merging two summarizers\") {\n+    val summarizer1 = new OnlineSummarizer\n+    val summarizer2 = new OnlineSummarizer\n+\n+    summarizer1.add(Vectors.sparse(3, Seq((0, -2.0), (1, 2.3))))\n+    summarizer1.add(Vectors.dense(0.0, -1.0, -3.0))\n+\n+    summarizer2.add(Vectors.sparse(3, Seq((1, -5.1))))\n+    summarizer2.add(Vectors.dense(3.8, 0.0, 1.9))\n+    summarizer2.add(Vectors.dense(1.7, -0.6, 0.0))\n+    summarizer2.add(Vectors.sparse(3, Seq((1, 1.9), (2, 0.0))))\n+\n+    val summarizer = summarizer1.add(summarizer2)\n+\n+    assert(summarizer.mean.toArray.corresponds(Vectors.dense(0.5833, -0.4166, -0.1833).toArray) {\n+      compareDouble(_, _)\n+    }, \"mean mismatch\")\n+\n+    assert(summarizer.min.toArray.corresponds(Vectors.dense(-2.0, -5.1, -3).toArray) {\n+      compareDouble(_, _)\n+    }, \"min mismatch\")\n+\n+    assert(summarizer.max.toArray.corresponds(Vectors.dense(3.8, 2.3, 1.9).toArray) {\n+      compareDouble(_, _)\n+    }, \"max mismatch\")\n+\n+    assert(summarizer.numNonzeros.toArray.corresponds(Vectors.dense(3, 5, 2).toArray) {\n+      _.toLong == _.toLong\n+    }, \"numNonzeros mismatch\")\n+\n+    assert(summarizer.variance.toArray.corresponds(Vectors.dense(3.858, 7.0457, 2.4817).toArray) {\n+      compareDouble(_, _)\n+    }, \"variance mismatch\")\n+\n+    assert(summarizer.count === 6)\n+  }\n+\n+  test(\"merging summarizer with empty summarizer\") {\n+    // If one of two is non-empty, this should return the non-empty summarizer.\n+    // If both of them are empty, then just return the empty summarizer.\n+    val summarizer1 = (new OnlineSummarizer).add(\n+      Vectors.dense(0.0, -1.0, -3.0)).add(new OnlineSummarizer)\n+    val summarizer2 = (new OnlineSummarizer).add(\n+      (new OnlineSummarizer).add(Vectors.dense(0.0, -1.0, -3.0)))\n+    val summarizer3 = (new OnlineSummarizer).add(new OnlineSummarizer)"
  }],
  "prId": 955
}]