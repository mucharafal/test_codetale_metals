[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "confusing having 2 things called \"x\"\n",
    "commit": "2ea711c96990c24ed29a4b9476a3809ef26403d6",
    "createdAt": "2014-09-19T22:44:59Z",
    "diffHunk": "@@ -169,4 +169,67 @@ object TestingUtils {\n     override def toString = x.toString\n   }\n \n+  case class CompareMatrixRightSide(\n+     fun: (Matrix, Matrix, Double) => Boolean, y: Matrix, eps: Double, method: String)\n+\n+  /**\n+   * Implicit class for comparing two matrices using relative tolerance or absolute tolerance.\n+   */\n+  implicit class MatrixWithAlmostEquals(val x: Matrix) {\n+\n+    /**\n+     * When the difference of two vectors are within eps, returns true; otherwise, returns false.\n+     */\n+    def ~=(r: CompareMatrixRightSide): Boolean = r.fun(x, r.y, r.eps)\n+\n+    /**\n+     * When the difference of two vectors are within eps, returns false; otherwise, returns true.\n+     */\n+    def !~=(r: CompareMatrixRightSide): Boolean = !r.fun(x, r.y, r.eps)\n+\n+    /**\n+     * Throws exception when the difference of two vectors are NOT within eps;\n+     * otherwise, returns true.\n+     */\n+    def ~==(r: CompareMatrixRightSide): Boolean = {\n+      if (!r.fun(x, r.y, r.eps)) {\n+        throw new TestFailedException(\n+          s\"Expected \\n$x\\n and \\n${r.y}\\n to be within ${r.eps}${r.method} for all elements.\", 0)\n+      }\n+      true\n+    }\n+\n+    /**\n+     * Throws exception when the difference of two matrices are within eps; otherwise, returns true.\n+     */\n+    def !~==(r: CompareMatrixRightSide): Boolean = {\n+      if (r.fun(x, r.y, r.eps)) {\n+        throw new TestFailedException(\n+          s\"Did not expect \\n$x\\n and \\n${r.y}\\n to be within \" +\n+            \"${r.eps}${r.method} for all elements.\", 0)\n+      }\n+      true\n+    }\n+\n+    /**\n+     * Comparison using absolute tolerance.\n+     */\n+    def absTol(eps: Double): CompareMatrixRightSide = CompareMatrixRightSide(\n+      (x: Matrix, y: Matrix, eps: Double) => {\n+        x.toArray.zip(y.toArray).forall(x => x._1 ~= x._2 absTol eps)\n+      }, x, eps, ABS_TOL_MSG)\n+\n+    /**\n+     * Comparison using relative tolerance. Note that comparing against sparse vector\n+     * with elements having value of zero will raise exception because it involves with\n+     * comparing against zero.\n+     */\n+    def relTol(eps: Double): CompareMatrixRightSide = CompareMatrixRightSide(\n+      (x: Matrix, y: Matrix, eps: Double) => {\n+        x.toArray.zip(y.toArray).forall(x => x._1 ~= x._2 relTol eps)",
    "line": 70
  }],
  "prId": 2451
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "confusing having 2 things called x\n",
    "commit": "2ea711c96990c24ed29a4b9476a3809ef26403d6",
    "createdAt": "2014-09-19T22:45:09Z",
    "diffHunk": "@@ -169,4 +169,67 @@ object TestingUtils {\n     override def toString = x.toString\n   }\n \n+  case class CompareMatrixRightSide(\n+     fun: (Matrix, Matrix, Double) => Boolean, y: Matrix, eps: Double, method: String)\n+\n+  /**\n+   * Implicit class for comparing two matrices using relative tolerance or absolute tolerance.\n+   */\n+  implicit class MatrixWithAlmostEquals(val x: Matrix) {\n+\n+    /**\n+     * When the difference of two vectors are within eps, returns true; otherwise, returns false.\n+     */\n+    def ~=(r: CompareMatrixRightSide): Boolean = r.fun(x, r.y, r.eps)\n+\n+    /**\n+     * When the difference of two vectors are within eps, returns false; otherwise, returns true.\n+     */\n+    def !~=(r: CompareMatrixRightSide): Boolean = !r.fun(x, r.y, r.eps)\n+\n+    /**\n+     * Throws exception when the difference of two vectors are NOT within eps;\n+     * otherwise, returns true.\n+     */\n+    def ~==(r: CompareMatrixRightSide): Boolean = {\n+      if (!r.fun(x, r.y, r.eps)) {\n+        throw new TestFailedException(\n+          s\"Expected \\n$x\\n and \\n${r.y}\\n to be within ${r.eps}${r.method} for all elements.\", 0)\n+      }\n+      true\n+    }\n+\n+    /**\n+     * Throws exception when the difference of two matrices are within eps; otherwise, returns true.\n+     */\n+    def !~==(r: CompareMatrixRightSide): Boolean = {\n+      if (r.fun(x, r.y, r.eps)) {\n+        throw new TestFailedException(\n+          s\"Did not expect \\n$x\\n and \\n${r.y}\\n to be within \" +\n+            \"${r.eps}${r.method} for all elements.\", 0)\n+      }\n+      true\n+    }\n+\n+    /**\n+     * Comparison using absolute tolerance.\n+     */\n+    def absTol(eps: Double): CompareMatrixRightSide = CompareMatrixRightSide(\n+      (x: Matrix, y: Matrix, eps: Double) => {\n+        x.toArray.zip(y.toArray).forall(x => x._1 ~= x._2 absTol eps)",
    "line": 60
  }],
  "prId": 2451
}]