[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "\"labels\" --> \"theta\"\n",
    "commit": "23d5a76859ab033ede588e3ea1da1f4cc03ccb51",
    "createdAt": "2015-07-14T20:53:26Z",
    "diffHunk": "@@ -154,6 +155,29 @@ class NaiveBayesSuite extends SparkFunSuite with MLlibTestSparkContext {\n \n     // Test prediction on Array.\n     validatePrediction(validationData.map(row => model.predict(row.features)), validationData)\n+\n+    // Test posteriors\n+    validationData.map(_.features).foreach { features =>\n+      val predicted = model.predictProbabilities(features).toArray\n+      assert(predicted.sum ~== 1.0 relTol 1.0e-10)\n+      val expected = expectedMultinomialProbabilities(model, features)\n+      expected.zip(predicted).foreach { case (e, p) => assert(e ~== p relTol 1.0e-10) }\n+    }\n+  }\n+\n+  /**\n+   * @param model Multinomial Naive Bayes model\n+   * @param testData input to compute posterior probabilities for\n+   * @return posterior class probabilities (in order of labels) for input\n+   */\n+  private def expectedMultinomialProbabilities(model: NaiveBayesModel, testData: Vector) = {\n+    val piVector = new BDV(model.pi)\n+    // model.labels is row-major; treat it as col-major representation of transpose, and transpose:"
  }],
  "prId": 7376
}]