[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "You can try nested Seq:\n\n```\nval sliding = rdd.sliding(3).collect().toSeq.map(_.toSeq)\nval expected = data.flatMap(x => x).sliding(3).map(_.toSeq)\nassert(sliding === expected)\n```\n",
    "commit": "7f7c767f4341b7c043d015196ae46493db4b937a",
    "createdAt": "2014-10-30T22:50:59Z",
    "diffHunk": "@@ -42,9 +42,14 @@ class RDDFunctionsSuite extends FunSuite with LocalSparkContext {\n     val data = Seq(Seq(1, 2, 3), Seq.empty[Int], Seq(4), Seq.empty[Int], Seq(5, 6, 7))\n     val rdd = sc.parallelize(data, data.length).flatMap(s => s)\n     assert(rdd.partitions.size === data.length)\n-    val sliding = rdd.sliding(3)\n-    val expected = data.flatMap(x => x).sliding(3).toList\n-    assert(sliding.collect().toList === expected)\n+    val sliding = rdd.sliding(3).collect().toList \n+    val expected = data.flatMap(x => x).sliding(3).map(_.toArray).toList\n+    // scalatest does not support multi dimensional array comparison"
  }, {
    "author": {
      "login": "numbnut"
    },
    "body": "Thanks for the much better solution. That works just fine.\n",
    "commit": "7f7c767f4341b7c043d015196ae46493db4b937a",
    "createdAt": "2014-10-31T12:12:49Z",
    "diffHunk": "@@ -42,9 +42,14 @@ class RDDFunctionsSuite extends FunSuite with LocalSparkContext {\n     val data = Seq(Seq(1, 2, 3), Seq.empty[Int], Seq(4), Seq.empty[Int], Seq(5, 6, 7))\n     val rdd = sc.parallelize(data, data.length).flatMap(s => s)\n     assert(rdd.partitions.size === data.length)\n-    val sliding = rdd.sliding(3)\n-    val expected = data.flatMap(x => x).sliding(3).toList\n-    assert(sliding.collect().toList === expected)\n+    val sliding = rdd.sliding(3).collect().toList \n+    val expected = data.flatMap(x => x).sliding(3).map(_.toArray).toList\n+    // scalatest does not support multi dimensional array comparison"
  }],
  "prId": 2907
}]