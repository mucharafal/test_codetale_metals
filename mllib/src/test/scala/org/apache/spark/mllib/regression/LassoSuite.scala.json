[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "remove a blank line.\n",
    "commit": "8df01660cf6606780eb8b723cdc4d7166ce5ac18",
    "createdAt": "2014-04-22T00:21:23Z",
    "diffHunk": "@@ -44,8 +44,11 @@ class LassoSuite extends FunSuite with LocalSparkContext {\n       .map { case LabeledPoint(label, features) =>\n       LabeledPoint(label, Vectors.dense(1.0 +: features.toArray))\n     }\n+\n     val testRDD = sc.parallelize(testData, 2).cache()\n \n+"
  }],
  "prId": 458
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "another 2-char indent is better.\n",
    "commit": "8df01660cf6606780eb8b723cdc4d7166ce5ac18",
    "createdAt": "2014-04-22T00:22:03Z",
    "diffHunk": "@@ -113,9 +116,100 @@ class LassoSuite extends FunSuite with LocalSparkContext {\n     validatePrediction(validationData.map(row => model.predict(row.features)), validationData)\n   }\n \n+  test(\"ADMM for Lasso\") {\n+    val nPoints = 1000\n+\n+    val A = 2.0\n+    val B = -1.5\n+    val C = 1.0e-2\n+\n+    val testData = LinearDataGenerator.generateLinearInput(A, Array[Double](B, C), nPoints, 42)\n+      .map { case LabeledPoint(label, features) =>\n+      LabeledPoint(label, Vectors.dense(1.0 +: features.toArray))",
    "line": 21
  }],
  "prId": 458
}]