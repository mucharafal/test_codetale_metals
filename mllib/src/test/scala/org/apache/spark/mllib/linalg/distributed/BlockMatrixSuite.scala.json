[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "organize imports:)\n",
    "commit": "c152a739d7d7d0e091fcb3676225e2a5fb9356f1",
    "createdAt": "2015-01-30T07:28:34Z",
    "diffHunk": "@@ -17,6 +17,8 @@\n \n package org.apache.spark.mllib.linalg.distributed\n \n+import org.apache.spark.SparkException"
  }],
  "prId": 4279
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Remove this test. It should be sufficient that we can detect an error if there exists one.\n",
    "commit": "c152a739d7d7d0e091fcb3676225e2a5fb9356f1",
    "createdAt": "2015-01-30T07:28:36Z",
    "diffHunk": "@@ -146,4 +148,59 @@ class BlockMatrixSuite extends FunSuite with MLlibTestSparkContext {\n     assert(gridBasedMat.toLocalMatrix() === dense)\n     assert(gridBasedMat.toBreeze() === expected)\n   }\n+\n+  test(\"validate\") {\n+    // No error\n+    gridBasedMat.validate\n+\n+    // Wrong MatrixBlock dimensions\n+    val blocks: Seq[((Int, Int), Matrix)] = Seq(\n+      ((0, 0), new DenseMatrix(2, 2, Array(1.0, 0.0, 0.0, 2.0))),\n+      ((0, 1), new DenseMatrix(2, 2, Array(0.0, 1.0, 0.0, 0.0))),\n+      ((1, 0), new DenseMatrix(2, 2, Array(3.0, 0.0, 1.0, 1.0))),\n+      ((1, 1), new DenseMatrix(2, 2, Array(1.0, 2.0, 0.0, 1.0))),\n+      ((2, 1), new DenseMatrix(1, 2, Array(1.0, 5.0))))\n+    val rdd = sc.parallelize(blocks, numPartitions)\n+    val wrongRowPerParts = new BlockMatrix(rdd, rowPerPart + 1, colPerPart)\n+    val wrongColPerParts = new BlockMatrix(rdd, rowPerPart, colPerPart + 1)\n+    intercept[SparkException] {\n+      wrongRowPerParts.validate\n+    }\n+    intercept[SparkException] {\n+      wrongColPerParts.validate\n+    }\n+    // Large number of mismatching MatrixBlock dimensions"
  }],
  "prId": 4279
}]