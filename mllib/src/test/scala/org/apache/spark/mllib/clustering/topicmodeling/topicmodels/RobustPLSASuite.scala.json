[{
  "comments": [{
    "author": {
      "login": "witgo"
    },
    "body": "Add a blank line\n",
    "commit": "e0fcc6fa6af1121973d1d61afefb2e37b9494e3c",
    "createdAt": "2014-07-30T00:15:50Z",
    "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.clustering.topicmodeling.topicmodels\n+\n+import java.util.Random\n+\n+import org.apache.spark.mllib.clustering.topicmodeling.topicmodels.regulaizers.{SymmetricDirichletDocumentOverTopicDistributionRegularizer, SymmetricDirichletTopicRegularizer}\n+\n+class RobustPLSASuite extends AbstractTopicModelSuite[RobustDocumentParameters,\n+                                              RobustGlobalParameters] {\n+  test(\"feasibility\") {\n+    val numberOfTopics = 2\n+    val numberOfIterations = 10\n+\n+    val plsa = new RobustPLSA(sc,\n+      numberOfTopics,\n+      numberOfIterations,\n+      new Random(),\n+      new SymmetricDirichletDocumentOverTopicDistributionRegularizer(0.2f),\n+      new SymmetricDirichletTopicRegularizer(0.2f))\n+\n+    testPLSA(plsa)\n+  }\n+\n+}"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Is this a problem? You mentioned it several times but I don't think a trailing newline is required in Java or Scala.\n",
    "commit": "e0fcc6fa6af1121973d1d61afefb2e37b9494e3c",
    "createdAt": "2014-07-30T00:18:45Z",
    "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.clustering.topicmodeling.topicmodels\n+\n+import java.util.Random\n+\n+import org.apache.spark.mllib.clustering.topicmodeling.topicmodels.regulaizers.{SymmetricDirichletDocumentOverTopicDistributionRegularizer, SymmetricDirichletTopicRegularizer}\n+\n+class RobustPLSASuite extends AbstractTopicModelSuite[RobustDocumentParameters,\n+                                              RobustGlobalParameters] {\n+  test(\"feasibility\") {\n+    val numberOfTopics = 2\n+    val numberOfIterations = 10\n+\n+    val plsa = new RobustPLSA(sc,\n+      numberOfTopics,\n+      numberOfIterations,\n+      new Random(),\n+      new SymmetricDirichletDocumentOverTopicDistributionRegularizer(0.2f),\n+      new SymmetricDirichletTopicRegularizer(0.2f))\n+\n+    testPLSA(plsa)\n+  }\n+\n+}"
  }, {
    "author": {
      "login": "witgo"
    },
    "body": "It seems that git need to blank line end.\n",
    "commit": "e0fcc6fa6af1121973d1d61afefb2e37b9494e3c",
    "createdAt": "2014-08-04T15:01:50Z",
    "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.clustering.topicmodeling.topicmodels\n+\n+import java.util.Random\n+\n+import org.apache.spark.mllib.clustering.topicmodeling.topicmodels.regulaizers.{SymmetricDirichletDocumentOverTopicDistributionRegularizer, SymmetricDirichletTopicRegularizer}\n+\n+class RobustPLSASuite extends AbstractTopicModelSuite[RobustDocumentParameters,\n+                                              RobustGlobalParameters] {\n+  test(\"feasibility\") {\n+    val numberOfTopics = 2\n+    val numberOfIterations = 10\n+\n+    val plsa = new RobustPLSA(sc,\n+      numberOfTopics,\n+      numberOfIterations,\n+      new Random(),\n+      new SymmetricDirichletDocumentOverTopicDistributionRegularizer(0.2f),\n+      new SymmetricDirichletTopicRegularizer(0.2f))\n+\n+    testPLSA(plsa)\n+  }\n+\n+}"
  }],
  "prId": 1269
}]