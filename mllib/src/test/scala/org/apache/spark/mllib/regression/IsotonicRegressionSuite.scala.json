[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "line too wide\n",
    "commit": "5a54ea45334b9ef1273a7303be0ef20b97896c92",
    "createdAt": "2015-01-21T02:56:01Z",
    "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.util.{LocalClusterSparkContext, MLlibTestSparkContext}\n+import org.scalatest.{Matchers, FunSuite}\n+import scala.util.Random\n+import org.apache.spark.mllib.util.IsotonicDataGenerator._\n+\n+class IsotonicRegressionSuite\n+  extends FunSuite\n+  with MLlibTestSparkContext\n+  with Matchers {\n+\n+  private def round(d: Double): Double =\n+    Math.round(d * 100).toDouble / 100\n+\n+  test(\"increasing isotonic regression\") {\n+    val trainRDD = sc.parallelize(generateIsotonicInput(1, 2, 3, 3, 1, 6, 7, 8, 11, 9, 10, 12, 14, 15, 17, 16, 17, 18, 19, 20)).cache()"
  }],
  "prId": 3519
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "We don't use the chop-down style. Please follow the code style from other test suites.\n",
    "commit": "5a54ea45334b9ef1273a7303be0ef20b97896c92",
    "createdAt": "2015-01-27T09:15:13Z",
    "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.scalatest.{Matchers, FunSuite}\n+\n+import org.apache.spark.mllib.util.{LocalClusterSparkContext, MLlibTestSparkContext}\n+import org.apache.spark.mllib.util.IsotonicDataGenerator._\n+\n+class IsotonicRegressionSuite\n+  extends FunSuite\n+  with MLlibTestSparkContext"
  }],
  "prId": 3519
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Mixing infix and `(..)` looks strange. Is the `(..)` after `be` necessary?\n",
    "commit": "5a54ea45334b9ef1273a7303be0ef20b97896c92",
    "createdAt": "2015-01-27T09:15:15Z",
    "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.scalatest.{Matchers, FunSuite}\n+\n+import org.apache.spark.mllib.util.{LocalClusterSparkContext, MLlibTestSparkContext}\n+import org.apache.spark.mllib.util.IsotonicDataGenerator._\n+\n+class IsotonicRegressionSuite\n+  extends FunSuite\n+  with MLlibTestSparkContext\n+  with Matchers {\n+\n+  private def round(d: Double): Double =\n+    Math.round(d * 100).toDouble / 100\n+\n+  test(\"increasing isotonic regression\") {\n+    val trainRDD = sc.parallelize(\n+      generateIsotonicInput(\n+        1, 2, 3, 3, 1, 6, 7, 8, 11, 9, 10, 12, 14, 15, 17, 16, 17, 18, 19, 20)).cache()\n+\n+    val alg = new IsotonicRegression\n+    val model = alg.run(trainRDD, true)\n+\n+    model.labels should be("
  }, {
    "author": {
      "login": "zapletal-martin"
    },
    "body": "Unfortunately yes, `be()` requires the parentheses. Although scalatest matchers are used throughout spark codebase it is not used in mllib so I've changed to use `assert` instead.\n",
    "commit": "5a54ea45334b9ef1273a7303be0ef20b97896c92",
    "createdAt": "2015-01-30T12:20:55Z",
    "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.scalatest.{Matchers, FunSuite}\n+\n+import org.apache.spark.mllib.util.{LocalClusterSparkContext, MLlibTestSparkContext}\n+import org.apache.spark.mllib.util.IsotonicDataGenerator._\n+\n+class IsotonicRegressionSuite\n+  extends FunSuite\n+  with MLlibTestSparkContext\n+  with Matchers {\n+\n+  private def round(d: Double): Double =\n+    Math.round(d * 100).toDouble / 100\n+\n+  test(\"increasing isotonic regression\") {\n+    val trainRDD = sc.parallelize(\n+      generateIsotonicInput(\n+        1, 2, 3, 3, 1, 6, 7, 8, 11, 9, 10, 12, 14, 15, 17, 16, 17, 18, 19, 20)).cache()\n+\n+    val alg = new IsotonicRegression\n+    val model = alg.run(trainRDD, true)\n+\n+    model.labels should be("
  }],
  "prId": 3519
}]