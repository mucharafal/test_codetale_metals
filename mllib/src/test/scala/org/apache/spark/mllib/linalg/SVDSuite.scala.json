[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "use more than one partitions to catch errors when computing distributively\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-18T21:39:33Z",
    "diffHunk": "@@ -93,6 +96,36 @@ class SVDSuite extends FunSuite with BeforeAndAfterAll {\n     assertMatrixEquals(retu.mmul(rets).mmul(retv.transpose), densea)  \n   }\n \n+ test(\"dense full rank matrix svd\") {\n+    val m = 10\n+    val n = 3\n+    val data = sc.makeRDD(Array.tabulate(m,n){ (a, b) =>"
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "Done, all over\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T06:24:04Z",
    "diffHunk": "@@ -93,6 +96,36 @@ class SVDSuite extends FunSuite with BeforeAndAfterAll {\n     assertMatrixEquals(retu.mmul(rets).mmul(retv.transpose), densea)  \n   }\n \n+ test(\"dense full rank matrix svd\") {\n+    val m = 10\n+    val n = 3\n+    val data = sc.makeRDD(Array.tabulate(m,n){ (a, b) =>"
  }],
  "prId": 88
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "to `denseA`?\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-18T21:41:11Z",
    "diffHunk": "@@ -93,6 +96,36 @@ class SVDSuite extends FunSuite with BeforeAndAfterAll {\n     assertMatrixEquals(retu.mmul(rets).mmul(retv.transpose), densea)  \n   }\n \n+ test(\"dense full rank matrix svd\") {\n+    val m = 10\n+    val n = 3\n+    val data = sc.makeRDD(Array.tabulate(m,n){ (a, b) =>\n+      MatrixEntry(a, b, (a + 2).toDouble * (b + 1) / (1 + a + b)) }.flatten )\n+\n+    val a = LAUtils.spToDense(SparseMatrix(data, m, n))\n+\n+    val decomposed = SVD.denseSVD(a, n, true)\n+    val u = LAUtils.denseToSp(decomposed.U)\n+    val v = decomposed.V\n+    val s = decomposed.S\n+\n+    val densea = getDenseMatrix(LAUtils.denseToSp(a))"
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "done\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T06:24:55Z",
    "diffHunk": "@@ -93,6 +96,36 @@ class SVDSuite extends FunSuite with BeforeAndAfterAll {\n     assertMatrixEquals(retu.mmul(rets).mmul(retv.transpose), densea)  \n   }\n \n+ test(\"dense full rank matrix svd\") {\n+    val m = 10\n+    val n = 3\n+    val data = sc.makeRDD(Array.tabulate(m,n){ (a, b) =>\n+      MatrixEntry(a, b, (a + 2).toDouble * (b + 1) / (1 + a + b)) }.flatten )\n+\n+    val a = LAUtils.spToDense(SparseMatrix(data, m, n))\n+\n+    val decomposed = SVD.denseSVD(a, n, true)\n+    val u = LAUtils.denseToSp(decomposed.U)\n+    val v = decomposed.V\n+    val s = decomposed.S\n+\n+    val densea = getDenseMatrix(LAUtils.denseToSp(a))"
  }],
  "prId": 88
}]