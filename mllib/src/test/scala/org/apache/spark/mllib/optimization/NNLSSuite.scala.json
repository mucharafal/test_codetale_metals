[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "You don't need `LocalSparkContext` and `ShouldMatchers`.\n",
    "commit": "79bc4b5650ba91ccd76a4e07c5b4b9e6adbf3d7b",
    "createdAt": "2014-04-21T05:19:26Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.optimization\n+\n+import scala.util.Random\n+\n+import org.scalatest.FunSuite\n+import org.scalatest.matchers.ShouldMatchers\n+\n+import org.apache.spark.mllib.util.LocalSparkContext\n+\n+import org.jblas.DoubleMatrix\n+import org.jblas.SimpleBlas\n+\n+class NNLSSuite extends FunSuite with LocalSparkContext with ShouldMatchers {"
  }],
  "prId": 460
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Use jblas functions to compute ata and atb.\n",
    "commit": "79bc4b5650ba91ccd76a4e07c5b4b9e6adbf3d7b",
    "createdAt": "2014-04-21T05:24:32Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.optimization\n+\n+import scala.util.Random\n+\n+import org.scalatest.FunSuite\n+import org.scalatest.matchers.ShouldMatchers\n+\n+import org.apache.spark.mllib.util.LocalSparkContext\n+\n+import org.jblas.DoubleMatrix\n+import org.jblas.SimpleBlas\n+\n+class NNLSSuite extends FunSuite with LocalSparkContext with ShouldMatchers {\n+  test(\"NNLSbyPCG: exact solution case\") {\n+    val A = new DoubleMatrix(20, 20)\n+    val b = new DoubleMatrix(20, 1)\n+    val rand = new Random(12345)\n+    for (i <- 0 until 20; j <- 0 until 20) {\n+      val aij = rand.nextDouble()\n+      A.put(i, j, aij)\n+      b.put(i, b.get(i, 0) + aij)\n+    }\n+\n+    val ata = new DoubleMatrix(20, 20)\n+    val atb = new DoubleMatrix(20, 1)\n+    for (i <- 0 until 20; j <- 0 until 20; k <- 0 until 20) {"
  }],
  "prId": 460
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Should create a test problem with some constraints active.\n",
    "commit": "79bc4b5650ba91ccd76a4e07c5b4b9e6adbf3d7b",
    "createdAt": "2014-04-21T05:25:36Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.optimization\n+\n+import scala.util.Random\n+\n+import org.scalatest.FunSuite\n+import org.scalatest.matchers.ShouldMatchers\n+\n+import org.apache.spark.mllib.util.LocalSparkContext\n+\n+import org.jblas.DoubleMatrix\n+import org.jblas.SimpleBlas\n+\n+class NNLSSuite extends FunSuite with LocalSparkContext with ShouldMatchers {\n+  test(\"NNLSbyPCG: exact solution case\") {\n+    val A = new DoubleMatrix(20, 20)\n+    val b = new DoubleMatrix(20, 1)\n+    val rand = new Random(12345)\n+    for (i <- 0 until 20; j <- 0 until 20) {\n+      val aij = rand.nextDouble()\n+      A.put(i, j, aij)\n+      b.put(i, b.get(i, 0) + aij)\n+    }\n+\n+    val ata = new DoubleMatrix(20, 20)\n+    val atb = new DoubleMatrix(20, 1)\n+    for (i <- 0 until 20; j <- 0 until 20; k <- 0 until 20) {\n+      ata.put(i, j, ata.get(i, j) + A.get(k, i) * A.get(k, j))\n+    }\n+    for (i <- 0 until 20; j <- 0 until 20) {\n+      atb.put(i, atb.get(i, 0) + A.get(j, i) * b.get(j))\n+    }\n+\n+    val x = NNLSbyPCG.solve(ata, atb, true)\n+    assert(x.length == 20)\n+    var error = 0.0\n+    for (i <- 0 until 20) {\n+      error = error + (x(i) - 1) * (x(i) - 1)"
  }],
  "prId": 460
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`an NNLS`\n",
    "commit": "79bc4b5650ba91ccd76a4e07c5b4b9e6adbf3d7b",
    "createdAt": "2014-04-25T07:17:34Z",
    "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.optimization\n+\n+import scala.util.Random\n+\n+import org.scalatest.FunSuite\n+\n+import org.jblas.{DoubleMatrix, SimpleBlas, NativeBlas}\n+\n+class NNLSSuite extends FunSuite {\n+  /** Generate a NNLS problem whose optimal solution is the all-ones vector. */"
  }],
  "prId": 460
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Performance is not an issue here. We can use high-level APIs like `DoubleMatrix#mmul` and `DoubleMatrix#transpose`.\n",
    "commit": "79bc4b5650ba91ccd76a4e07c5b4b9e6adbf3d7b",
    "createdAt": "2014-04-25T07:20:29Z",
    "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.optimization\n+\n+import scala.util.Random\n+\n+import org.scalatest.FunSuite\n+\n+import org.jblas.{DoubleMatrix, SimpleBlas, NativeBlas}\n+\n+class NNLSSuite extends FunSuite {\n+  /** Generate a NNLS problem whose optimal solution is the all-ones vector. */\n+  def genOnesData(n: Int, rand: Random): (DoubleMatrix, DoubleMatrix) = {\n+    val A = new DoubleMatrix(n, n)\n+    val b = new DoubleMatrix(n, 1)\n+    for (i <- 0 until n; j <- 0 until n) {\n+      val aij = rand.nextDouble()\n+      A.put(i, j, aij)\n+      b.put(i, b.get(i, 0) + aij)\n+    }\n+\n+    val ata = new DoubleMatrix(n, n)\n+    val atb = new DoubleMatrix(n, 1)\n+\n+    NativeBlas.dgemm('T', 'N', n, n, n, 1.0, A.data, 0, n, A.data, 0, n, 0.0, ata.data, 0, n)"
  }],
  "prId": 460
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Ditto.\n",
    "commit": "79bc4b5650ba91ccd76a4e07c5b4b9e6adbf3d7b",
    "createdAt": "2014-04-25T07:21:04Z",
    "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.optimization\n+\n+import scala.util.Random\n+\n+import org.scalatest.FunSuite\n+\n+import org.jblas.{DoubleMatrix, SimpleBlas, NativeBlas}\n+\n+class NNLSSuite extends FunSuite {\n+  /** Generate a NNLS problem whose optimal solution is the all-ones vector. */\n+  def genOnesData(n: Int, rand: Random): (DoubleMatrix, DoubleMatrix) = {\n+    val A = new DoubleMatrix(n, n)\n+    val b = new DoubleMatrix(n, 1)\n+    for (i <- 0 until n; j <- 0 until n) {\n+      val aij = rand.nextDouble()\n+      A.put(i, j, aij)\n+      b.put(i, b.get(i, 0) + aij)\n+    }\n+\n+    val ata = new DoubleMatrix(n, n)\n+    val atb = new DoubleMatrix(n, 1)\n+\n+    NativeBlas.dgemm('T', 'N', n, n, n, 1.0, A.data, 0, n, A.data, 0, n, 0.0, ata.data, 0, n)\n+    NativeBlas.dgemv('T', n, n, 1.0, A.data, 0, n, b.data, 0, 1, 0.0, atb.data, 0, 1)"
  }],
  "prId": 460
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "```\nval A = new DoubleMatrix(n, n, Array.fill(n * n)(rand.nextDouble()): _*)\nval b = A.mult(DoubleMatrix.zeros(n, 1))\n```\n",
    "commit": "79bc4b5650ba91ccd76a4e07c5b4b9e6adbf3d7b",
    "createdAt": "2014-04-25T07:23:54Z",
    "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.optimization\n+\n+import scala.util.Random\n+\n+import org.scalatest.FunSuite\n+\n+import org.jblas.{DoubleMatrix, SimpleBlas, NativeBlas}\n+\n+class NNLSSuite extends FunSuite {\n+  /** Generate a NNLS problem whose optimal solution is the all-ones vector. */\n+  def genOnesData(n: Int, rand: Random): (DoubleMatrix, DoubleMatrix) = {\n+    val A = new DoubleMatrix(n, n)"
  }],
  "prId": 460
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`kase` -> `k`?\n",
    "commit": "79bc4b5650ba91ccd76a4e07c5b4b9e6adbf3d7b",
    "createdAt": "2014-04-25T07:27:27Z",
    "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.optimization\n+\n+import scala.util.Random\n+\n+import org.scalatest.FunSuite\n+\n+import org.jblas.{DoubleMatrix, SimpleBlas, NativeBlas}\n+\n+class NNLSSuite extends FunSuite {\n+  /** Generate a NNLS problem whose optimal solution is the all-ones vector. */\n+  def genOnesData(n: Int, rand: Random): (DoubleMatrix, DoubleMatrix) = {\n+    val A = new DoubleMatrix(n, n)\n+    val b = new DoubleMatrix(n, 1)\n+    for (i <- 0 until n; j <- 0 until n) {\n+      val aij = rand.nextDouble()\n+      A.put(i, j, aij)\n+      b.put(i, b.get(i, 0) + aij)\n+    }\n+\n+    val ata = new DoubleMatrix(n, n)\n+    val atb = new DoubleMatrix(n, 1)\n+\n+    NativeBlas.dgemm('T', 'N', n, n, n, 1.0, A.data, 0, n, A.data, 0, n, 0.0, ata.data, 0, n)\n+    NativeBlas.dgemv('T', n, n, 1.0, A.data, 0, n, b.data, 0, 1, 0.0, atb.data, 0, 1)\n+\n+    (ata, atb)\n+  }\n+\n+  test(\"NNLSbyPCG: exact solution cases\") {\n+    val n = 20\n+    val rand = new Random(12346)\n+    val ws = NNLSbyPCG.createWorkspace(n)\n+    var numSolved = 0\n+\n+    // About 15% of random 20x20 [-1,1]-matrices have a singular value less than 1e-3.  NNLSbyPCG\n+    // can legitimately fail to solve these anywhere close to exactly.  So we grab a considerable\n+    // sample of these matrices and make sure that we solved a substantial fraction of them.\n+\n+    for (kase <- 0 until 100) {"
  }],
  "prId": 460
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`DoubleMatrix#distance2`.\n",
    "commit": "79bc4b5650ba91ccd76a4e07c5b4b9e6adbf3d7b",
    "createdAt": "2014-04-25T07:28:21Z",
    "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.optimization\n+\n+import scala.util.Random\n+\n+import org.scalatest.FunSuite\n+\n+import org.jblas.{DoubleMatrix, SimpleBlas, NativeBlas}\n+\n+class NNLSSuite extends FunSuite {\n+  /** Generate a NNLS problem whose optimal solution is the all-ones vector. */\n+  def genOnesData(n: Int, rand: Random): (DoubleMatrix, DoubleMatrix) = {\n+    val A = new DoubleMatrix(n, n)\n+    val b = new DoubleMatrix(n, 1)\n+    for (i <- 0 until n; j <- 0 until n) {\n+      val aij = rand.nextDouble()\n+      A.put(i, j, aij)\n+      b.put(i, b.get(i, 0) + aij)\n+    }\n+\n+    val ata = new DoubleMatrix(n, n)\n+    val atb = new DoubleMatrix(n, 1)\n+\n+    NativeBlas.dgemm('T', 'N', n, n, n, 1.0, A.data, 0, n, A.data, 0, n, 0.0, ata.data, 0, n)\n+    NativeBlas.dgemv('T', n, n, 1.0, A.data, 0, n, b.data, 0, 1, 0.0, atb.data, 0, 1)\n+\n+    (ata, atb)\n+  }\n+\n+  test(\"NNLSbyPCG: exact solution cases\") {\n+    val n = 20\n+    val rand = new Random(12346)\n+    val ws = NNLSbyPCG.createWorkspace(n)\n+    var numSolved = 0\n+\n+    // About 15% of random 20x20 [-1,1]-matrices have a singular value less than 1e-3.  NNLSbyPCG\n+    // can legitimately fail to solve these anywhere close to exactly.  So we grab a considerable\n+    // sample of these matrices and make sure that we solved a substantial fraction of them.\n+\n+    for (kase <- 0 until 100) {\n+      val (ata, atb) = genOnesData(n, rand)\n+      val x = NNLSbyPCG.solve(ata, atb, true, ws)\n+      assert(x.length == n)\n+      var error = 0.0\n+      var solved = true\n+      for (i <- 0 until n) {"
  }],
  "prId": 460
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Remove this line.\n",
    "commit": "79bc4b5650ba91ccd76a4e07c5b4b9e6adbf3d7b",
    "createdAt": "2014-04-25T07:29:06Z",
    "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.optimization\n+\n+import scala.util.Random\n+\n+import org.scalatest.FunSuite\n+\n+import org.jblas.{DoubleMatrix, SimpleBlas, NativeBlas}\n+\n+class NNLSSuite extends FunSuite {\n+  /** Generate a NNLS problem whose optimal solution is the all-ones vector. */\n+  def genOnesData(n: Int, rand: Random): (DoubleMatrix, DoubleMatrix) = {\n+    val A = new DoubleMatrix(n, n)\n+    val b = new DoubleMatrix(n, 1)\n+    for (i <- 0 until n; j <- 0 until n) {\n+      val aij = rand.nextDouble()\n+      A.put(i, j, aij)\n+      b.put(i, b.get(i, 0) + aij)\n+    }\n+\n+    val ata = new DoubleMatrix(n, n)\n+    val atb = new DoubleMatrix(n, 1)\n+\n+    NativeBlas.dgemm('T', 'N', n, n, n, 1.0, A.data, 0, n, A.data, 0, n, 0.0, ata.data, 0, n)\n+    NativeBlas.dgemv('T', n, n, 1.0, A.data, 0, n, b.data, 0, 1, 0.0, atb.data, 0, 1)\n+\n+    (ata, atb)\n+  }\n+\n+  test(\"NNLSbyPCG: exact solution cases\") {\n+    val n = 20\n+    val rand = new Random(12346)\n+    val ws = NNLSbyPCG.createWorkspace(n)\n+    var numSolved = 0\n+\n+    // About 15% of random 20x20 [-1,1]-matrices have a singular value less than 1e-3.  NNLSbyPCG\n+    // can legitimately fail to solve these anywhere close to exactly.  So we grab a considerable\n+    // sample of these matrices and make sure that we solved a substantial fraction of them.\n+\n+    for (kase <- 0 until 100) {\n+      val (ata, atb) = genOnesData(n, rand)\n+      val x = NNLSbyPCG.solve(ata, atb, true, ws)\n+      assert(x.length == n)\n+      var error = 0.0\n+      var solved = true\n+      for (i <- 0 until n) {\n+        error = error + (x(i) - 1) * (x(i) - 1)\n+        if (Math.abs(x(i) - 1) > 1e-3) solved = false\n+      }\n+      if (error > 1e-2) solved = false\n+      if (solved) numSolved = numSolved + 1\n+    }\n+    println(numSolved)"
  }],
  "prId": 460
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Use `===` instead of `==`. The former outputs more information.\n",
    "commit": "79bc4b5650ba91ccd76a4e07c5b4b9e6adbf3d7b",
    "createdAt": "2014-04-25T07:29:27Z",
    "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.optimization\n+\n+import scala.util.Random\n+\n+import org.scalatest.FunSuite\n+\n+import org.jblas.{DoubleMatrix, SimpleBlas, NativeBlas}\n+\n+class NNLSSuite extends FunSuite {\n+  /** Generate a NNLS problem whose optimal solution is the all-ones vector. */\n+  def genOnesData(n: Int, rand: Random): (DoubleMatrix, DoubleMatrix) = {\n+    val A = new DoubleMatrix(n, n)\n+    val b = new DoubleMatrix(n, 1)\n+    for (i <- 0 until n; j <- 0 until n) {\n+      val aij = rand.nextDouble()\n+      A.put(i, j, aij)\n+      b.put(i, b.get(i, 0) + aij)\n+    }\n+\n+    val ata = new DoubleMatrix(n, n)\n+    val atb = new DoubleMatrix(n, 1)\n+\n+    NativeBlas.dgemm('T', 'N', n, n, n, 1.0, A.data, 0, n, A.data, 0, n, 0.0, ata.data, 0, n)\n+    NativeBlas.dgemv('T', n, n, 1.0, A.data, 0, n, b.data, 0, 1, 0.0, atb.data, 0, 1)\n+\n+    (ata, atb)\n+  }\n+\n+  test(\"NNLSbyPCG: exact solution cases\") {\n+    val n = 20\n+    val rand = new Random(12346)\n+    val ws = NNLSbyPCG.createWorkspace(n)\n+    var numSolved = 0\n+\n+    // About 15% of random 20x20 [-1,1]-matrices have a singular value less than 1e-3.  NNLSbyPCG\n+    // can legitimately fail to solve these anywhere close to exactly.  So we grab a considerable\n+    // sample of these matrices and make sure that we solved a substantial fraction of them.\n+\n+    for (kase <- 0 until 100) {\n+      val (ata, atb) = genOnesData(n, rand)\n+      val x = NNLSbyPCG.solve(ata, atb, true, ws)\n+      assert(x.length == n)"
  }],
  "prId": 460
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`DoubleMatrix` has a constructor for `double[][]`. Maybe you can use it directly.\n",
    "commit": "79bc4b5650ba91ccd76a4e07c5b4b9e6adbf3d7b",
    "createdAt": "2014-04-25T07:31:05Z",
    "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.optimization\n+\n+import scala.util.Random\n+\n+import org.scalatest.FunSuite\n+\n+import org.jblas.{DoubleMatrix, SimpleBlas, NativeBlas}\n+\n+class NNLSSuite extends FunSuite {\n+  /** Generate a NNLS problem whose optimal solution is the all-ones vector. */\n+  def genOnesData(n: Int, rand: Random): (DoubleMatrix, DoubleMatrix) = {\n+    val A = new DoubleMatrix(n, n)\n+    val b = new DoubleMatrix(n, 1)\n+    for (i <- 0 until n; j <- 0 until n) {\n+      val aij = rand.nextDouble()\n+      A.put(i, j, aij)\n+      b.put(i, b.get(i, 0) + aij)\n+    }\n+\n+    val ata = new DoubleMatrix(n, n)\n+    val atb = new DoubleMatrix(n, 1)\n+\n+    NativeBlas.dgemm('T', 'N', n, n, n, 1.0, A.data, 0, n, A.data, 0, n, 0.0, ata.data, 0, n)\n+    NativeBlas.dgemv('T', n, n, 1.0, A.data, 0, n, b.data, 0, 1, 0.0, atb.data, 0, 1)\n+\n+    (ata, atb)\n+  }\n+\n+  test(\"NNLSbyPCG: exact solution cases\") {\n+    val n = 20\n+    val rand = new Random(12346)\n+    val ws = NNLSbyPCG.createWorkspace(n)\n+    var numSolved = 0\n+\n+    // About 15% of random 20x20 [-1,1]-matrices have a singular value less than 1e-3.  NNLSbyPCG\n+    // can legitimately fail to solve these anywhere close to exactly.  So we grab a considerable\n+    // sample of these matrices and make sure that we solved a substantial fraction of them.\n+\n+    for (kase <- 0 until 100) {\n+      val (ata, atb) = genOnesData(n, rand)\n+      val x = NNLSbyPCG.solve(ata, atb, true, ws)\n+      assert(x.length == n)\n+      var error = 0.0\n+      var solved = true\n+      for (i <- 0 until n) {\n+        error = error + (x(i) - 1) * (x(i) - 1)\n+        if (Math.abs(x(i) - 1) > 1e-3) solved = false\n+      }\n+      if (error > 1e-2) solved = false\n+      if (solved) numSolved = numSolved + 1\n+    }\n+    println(numSolved)\n+\n+    assert(numSolved > 50)\n+  }\n+\n+  test(\"NNLSbyPCG: nonnegativity constraint active\") {\n+    val n = 5\n+    val M = Array(\n+      Array( 4.377, -3.531, -1.306, -0.139,  3.418, -1.632),\n+      Array(-3.531,  4.344,  0.934,  0.305, -2.140,  2.115),\n+      Array(-1.306,  0.934,  2.644, -0.203, -0.170,  1.094),\n+      Array(-0.139,  0.305, -0.203,  5.883,  1.428, -1.025),\n+      Array( 3.418, -2.140, -0.170,  1.428,  4.684, -0.636))\n+    val ata = new DoubleMatrix(n, n)"
  }],
  "prId": 460
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`DoubleMatrix#getColumn`.\n",
    "commit": "79bc4b5650ba91ccd76a4e07c5b4b9e6adbf3d7b",
    "createdAt": "2014-04-25T07:32:14Z",
    "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.optimization\n+\n+import scala.util.Random\n+\n+import org.scalatest.FunSuite\n+\n+import org.jblas.{DoubleMatrix, SimpleBlas, NativeBlas}\n+\n+class NNLSSuite extends FunSuite {\n+  /** Generate a NNLS problem whose optimal solution is the all-ones vector. */\n+  def genOnesData(n: Int, rand: Random): (DoubleMatrix, DoubleMatrix) = {\n+    val A = new DoubleMatrix(n, n)\n+    val b = new DoubleMatrix(n, 1)\n+    for (i <- 0 until n; j <- 0 until n) {\n+      val aij = rand.nextDouble()\n+      A.put(i, j, aij)\n+      b.put(i, b.get(i, 0) + aij)\n+    }\n+\n+    val ata = new DoubleMatrix(n, n)\n+    val atb = new DoubleMatrix(n, 1)\n+\n+    NativeBlas.dgemm('T', 'N', n, n, n, 1.0, A.data, 0, n, A.data, 0, n, 0.0, ata.data, 0, n)\n+    NativeBlas.dgemv('T', n, n, 1.0, A.data, 0, n, b.data, 0, 1, 0.0, atb.data, 0, 1)\n+\n+    (ata, atb)\n+  }\n+\n+  test(\"NNLSbyPCG: exact solution cases\") {\n+    val n = 20\n+    val rand = new Random(12346)\n+    val ws = NNLSbyPCG.createWorkspace(n)\n+    var numSolved = 0\n+\n+    // About 15% of random 20x20 [-1,1]-matrices have a singular value less than 1e-3.  NNLSbyPCG\n+    // can legitimately fail to solve these anywhere close to exactly.  So we grab a considerable\n+    // sample of these matrices and make sure that we solved a substantial fraction of them.\n+\n+    for (kase <- 0 until 100) {\n+      val (ata, atb) = genOnesData(n, rand)\n+      val x = NNLSbyPCG.solve(ata, atb, true, ws)\n+      assert(x.length == n)\n+      var error = 0.0\n+      var solved = true\n+      for (i <- 0 until n) {\n+        error = error + (x(i) - 1) * (x(i) - 1)\n+        if (Math.abs(x(i) - 1) > 1e-3) solved = false\n+      }\n+      if (error > 1e-2) solved = false\n+      if (solved) numSolved = numSolved + 1\n+    }\n+    println(numSolved)\n+\n+    assert(numSolved > 50)\n+  }\n+\n+  test(\"NNLSbyPCG: nonnegativity constraint active\") {\n+    val n = 5\n+    val M = Array(\n+      Array( 4.377, -3.531, -1.306, -0.139,  3.418, -1.632),\n+      Array(-3.531,  4.344,  0.934,  0.305, -2.140,  2.115),\n+      Array(-1.306,  0.934,  2.644, -0.203, -0.170,  1.094),\n+      Array(-0.139,  0.305, -0.203,  5.883,  1.428, -1.025),\n+      Array( 3.418, -2.140, -0.170,  1.428,  4.684, -0.636))\n+    val ata = new DoubleMatrix(n, n)\n+    val atb = new DoubleMatrix(n, 1)\n+    for (i <- 0 until n; j <- 0 until n) ata.put(i, j, M(i)(j))\n+    for (i <- 0 until n) atb.put(i, M(i)(n))"
  }],
  "prId": 460
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Also need to assert `x(i) >= 0`.\n",
    "commit": "79bc4b5650ba91ccd76a4e07c5b4b9e6adbf3d7b",
    "createdAt": "2014-04-25T07:32:54Z",
    "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.optimization\n+\n+import scala.util.Random\n+\n+import org.scalatest.FunSuite\n+\n+import org.jblas.{DoubleMatrix, SimpleBlas, NativeBlas}\n+\n+class NNLSSuite extends FunSuite {\n+  /** Generate a NNLS problem whose optimal solution is the all-ones vector. */\n+  def genOnesData(n: Int, rand: Random): (DoubleMatrix, DoubleMatrix) = {\n+    val A = new DoubleMatrix(n, n)\n+    val b = new DoubleMatrix(n, 1)\n+    for (i <- 0 until n; j <- 0 until n) {\n+      val aij = rand.nextDouble()\n+      A.put(i, j, aij)\n+      b.put(i, b.get(i, 0) + aij)\n+    }\n+\n+    val ata = new DoubleMatrix(n, n)\n+    val atb = new DoubleMatrix(n, 1)\n+\n+    NativeBlas.dgemm('T', 'N', n, n, n, 1.0, A.data, 0, n, A.data, 0, n, 0.0, ata.data, 0, n)\n+    NativeBlas.dgemv('T', n, n, 1.0, A.data, 0, n, b.data, 0, 1, 0.0, atb.data, 0, 1)\n+\n+    (ata, atb)\n+  }\n+\n+  test(\"NNLSbyPCG: exact solution cases\") {\n+    val n = 20\n+    val rand = new Random(12346)\n+    val ws = NNLSbyPCG.createWorkspace(n)\n+    var numSolved = 0\n+\n+    // About 15% of random 20x20 [-1,1]-matrices have a singular value less than 1e-3.  NNLSbyPCG\n+    // can legitimately fail to solve these anywhere close to exactly.  So we grab a considerable\n+    // sample of these matrices and make sure that we solved a substantial fraction of them.\n+\n+    for (kase <- 0 until 100) {\n+      val (ata, atb) = genOnesData(n, rand)\n+      val x = NNLSbyPCG.solve(ata, atb, true, ws)\n+      assert(x.length == n)\n+      var error = 0.0\n+      var solved = true\n+      for (i <- 0 until n) {\n+        error = error + (x(i) - 1) * (x(i) - 1)\n+        if (Math.abs(x(i) - 1) > 1e-3) solved = false\n+      }\n+      if (error > 1e-2) solved = false\n+      if (solved) numSolved = numSolved + 1\n+    }\n+    println(numSolved)\n+\n+    assert(numSolved > 50)\n+  }\n+\n+  test(\"NNLSbyPCG: nonnegativity constraint active\") {\n+    val n = 5\n+    val M = Array(\n+      Array( 4.377, -3.531, -1.306, -0.139,  3.418, -1.632),\n+      Array(-3.531,  4.344,  0.934,  0.305, -2.140,  2.115),\n+      Array(-1.306,  0.934,  2.644, -0.203, -0.170,  1.094),\n+      Array(-0.139,  0.305, -0.203,  5.883,  1.428, -1.025),\n+      Array( 3.418, -2.140, -0.170,  1.428,  4.684, -0.636))\n+    val ata = new DoubleMatrix(n, n)\n+    val atb = new DoubleMatrix(n, 1)\n+    for (i <- 0 until n; j <- 0 until n) ata.put(i, j, M(i)(j))\n+    for (i <- 0 until n) atb.put(i, M(i)(n))\n+\n+    val goodx = Array(0.13025, 0.54506, 0.2874, 0.0, 0.028628)\n+\n+    val ws = NNLSbyPCG.createWorkspace(n)\n+    val x = NNLSbyPCG.solve(ata, atb, true, ws)\n+    for (i <- 0 until n) {\n+      assert(Math.abs(x(i) - goodx(i)) < 1e-3)"
  }],
  "prId": 460
}]