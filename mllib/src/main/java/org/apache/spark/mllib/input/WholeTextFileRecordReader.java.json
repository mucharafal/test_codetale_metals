[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "remove empty line\n",
    "commit": "4ed60d16b5d7c760c06dd0d95ee558eee5cfd398",
    "createdAt": "2014-03-21T08:17:41Z",
    "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.input;\n+\n+import java.io.IOException;\n+\n+import com.google.common.io.Closeables;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.mapreduce.InputSplit;\n+import org.apache.hadoop.mapreduce.lib.input.CombineFileSplit;\n+import org.apache.hadoop.mapreduce.RecordReader;\n+import org.apache.hadoop.mapreduce.TaskAttemptContext;\n+\n+/**\n+ * Reads an entire file out in <filename, content> format.\n+ */\n+"
  }],
  "prId": 164
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "fix indentation\n",
    "commit": "4ed60d16b5d7c760c06dd0d95ee558eee5cfd398",
    "createdAt": "2014-03-21T08:19:34Z",
    "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.input;\n+\n+import java.io.IOException;\n+\n+import com.google.common.io.Closeables;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.mapreduce.InputSplit;\n+import org.apache.hadoop.mapreduce.lib.input.CombineFileSplit;\n+import org.apache.hadoop.mapreduce.RecordReader;\n+import org.apache.hadoop.mapreduce.TaskAttemptContext;\n+\n+/**\n+ * Reads an entire file out in <filename, content> format.\n+ */\n+\n+public class WholeTextFileRecordReader extends RecordReader<String, Text> {\n+  private Path path;\n+\n+  private String key = null;\n+  private Text value = null;\n+\n+  private boolean processed = false;\n+\n+  private FileSystem fs;\n+\n+  public WholeTextFileRecordReader(\n+      CombineFileSplit split,\n+      TaskAttemptContext context,\n+      Integer index)\n+    throws IOException {\n+    path = split.getPath(index);\n+    fs = path.getFileSystem(context.getConfiguration());\n+  }\n+\n+  @Override\n+  public void initialize(InputSplit arg0, TaskAttemptContext arg1)\n+    throws IOException, InterruptedException {\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+  }\n+\n+  @Override\n+  public float getProgress() throws IOException {\n+    return processed ? 1.0f : 0.0f;\n+  }\n+\n+  @Override\n+  public String getCurrentKey() throws IOException, InterruptedException {\n+        return key;"
  }],
  "prId": 164
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Need doc.\n",
    "commit": "4ed60d16b5d7c760c06dd0d95ee558eee5cfd398",
    "createdAt": "2014-03-21T08:21:52Z",
    "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.input;\n+\n+import java.io.IOException;\n+\n+import com.google.common.io.Closeables;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.mapreduce.InputSplit;\n+import org.apache.hadoop.mapreduce.lib.input.CombineFileSplit;\n+import org.apache.hadoop.mapreduce.RecordReader;\n+import org.apache.hadoop.mapreduce.TaskAttemptContext;\n+\n+/**\n+ * Reads an entire file out in <filename, content> format.\n+ */\n+\n+public class WholeTextFileRecordReader extends RecordReader<String, Text> {\n+  private Path path;\n+\n+  private String key = null;\n+  private Text value = null;\n+\n+  private boolean processed = false;\n+\n+  private FileSystem fs;\n+\n+  public WholeTextFileRecordReader("
  }],
  "prId": 164
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Let's use the full path here for easy dedup.\n",
    "commit": "4ed60d16b5d7c760c06dd0d95ee558eee5cfd398",
    "createdAt": "2014-03-21T08:55:16Z",
    "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.input;\n+\n+import java.io.IOException;\n+\n+import com.google.common.io.Closeables;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.mapreduce.InputSplit;\n+import org.apache.hadoop.mapreduce.lib.input.CombineFileSplit;\n+import org.apache.hadoop.mapreduce.RecordReader;\n+import org.apache.hadoop.mapreduce.TaskAttemptContext;\n+\n+/**\n+ * Reads an entire file out in <filename, content> format.\n+ */\n+\n+public class WholeTextFileRecordReader extends RecordReader<String, Text> {\n+  private Path path;\n+\n+  private String key = null;\n+  private Text value = null;\n+\n+  private boolean processed = false;\n+\n+  private FileSystem fs;\n+\n+  public WholeTextFileRecordReader(\n+      CombineFileSplit split,\n+      TaskAttemptContext context,\n+      Integer index)\n+    throws IOException {\n+    path = split.getPath(index);\n+    fs = path.getFileSystem(context.getConfiguration());\n+  }\n+\n+  @Override\n+  public void initialize(InputSplit arg0, TaskAttemptContext arg1)\n+    throws IOException, InterruptedException {\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+  }\n+\n+  @Override\n+  public float getProgress() throws IOException {\n+    return processed ? 1.0f : 0.0f;\n+  }\n+\n+  @Override\n+  public String getCurrentKey() throws IOException, InterruptedException {\n+        return key;\n+    }\n+\n+  @Override\n+  public Text getCurrentValue() throws IOException, InterruptedException{\n+        return value;\n+    }\n+\n+  @Override\n+  public boolean nextKeyValue() throws IOException {\n+    if (!processed) {\n+      if (key == null) {\n+        key = path.getName();"
  }],
  "prId": 164
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Need to improve the doc. See my comment on `WholeTextFileInputFormat`.\n",
    "commit": "4ed60d16b5d7c760c06dd0d95ee558eee5cfd398",
    "createdAt": "2014-03-23T06:45:14Z",
    "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.input;\n+\n+import java.io.IOException;\n+\n+import com.google.common.io.Closeables;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.mapreduce.InputSplit;\n+import org.apache.hadoop.mapreduce.lib.input.CombineFileSplit;\n+import org.apache.hadoop.mapreduce.RecordReader;\n+import org.apache.hadoop.mapreduce.TaskAttemptContext;\n+\n+/**\n+ * Reads an entire file out in (filename, content) format. Each element in split is an record of a\n+ * unique, whole file. File name is full path name for easy deduplicate."
  }],
  "prId": 164
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Shall we change `IOUtils.toBytesArray` to Guava's `ByteStreams.toByteArray`? So we can remove `commons-io` from our dependencies. Guava is better at maintaining API compatibility across versions.\n",
    "commit": "4ed60d16b5d7c760c06dd0d95ee558eee5cfd398",
    "createdAt": "2014-03-24T06:15:43Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.input;\n+\n+import java.io.IOException;\n+\n+import com.google.common.io.Closeables;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.mapreduce.InputSplit;\n+import org.apache.hadoop.mapreduce.lib.input.CombineFileSplit;\n+import org.apache.hadoop.mapreduce.RecordReader;\n+import org.apache.hadoop.mapreduce.TaskAttemptContext;\n+\n+/**\n+ * An <code>org.apache.hadoop.mapreduce.RecordReader</code> for reading whole text file out in\n+ * (filename, content) format. Each element in split is an record of a unique, whole file. File name\n+ * is the full path name for easy deduplicate.\n+ */\n+public class WholeTextFileRecordReader extends RecordReader<String, Text> {\n+  private Path path;\n+\n+  private String key = null;\n+  private Text value = null;\n+\n+  private boolean processed = false;\n+\n+  private FileSystem fs;\n+\n+  public WholeTextFileRecordReader(\n+      CombineFileSplit split,\n+      TaskAttemptContext context,\n+      Integer index)\n+    throws IOException {\n+    path = split.getPath(index);\n+    fs = path.getFileSystem(context.getConfiguration());\n+  }\n+\n+  @Override\n+  public void initialize(InputSplit arg0, TaskAttemptContext arg1)\n+    throws IOException, InterruptedException {\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+  }\n+\n+  @Override\n+  public float getProgress() throws IOException {\n+    return processed ? 1.0f : 0.0f;\n+  }\n+\n+  @Override\n+  public String getCurrentKey() throws IOException, InterruptedException {\n+    return key;\n+  }\n+\n+  @Override\n+  public Text getCurrentValue() throws IOException, InterruptedException{\n+    return value;\n+  }\n+\n+  @Override\n+  public boolean nextKeyValue() throws IOException {\n+    if (!processed) {\n+      if (key == null) {\n+        key = path.toString();\n+      }\n+      if (value == null) {\n+        value = new Text();\n+      }\n+\n+      FSDataInputStream fileIn = null;\n+      try {\n+        fileIn = fs.open(path);\n+        byte[] innerBuffer = IOUtils.toByteArray(fileIn);"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "@mengxr @yinxusen PS I am happy to take on removal of use of commons-io in favor of equivalents in Guava. There is a bit more than this usage, but it's easy stuff. Commons IO is fine but it's not necessary to use it here and it is one of those dependencies that could collide with other versions in Hadoop. If anyone nods I'll open a separate PR.\n",
    "commit": "4ed60d16b5d7c760c06dd0d95ee558eee5cfd398",
    "createdAt": "2014-03-24T09:53:22Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.input;\n+\n+import java.io.IOException;\n+\n+import com.google.common.io.Closeables;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.mapreduce.InputSplit;\n+import org.apache.hadoop.mapreduce.lib.input.CombineFileSplit;\n+import org.apache.hadoop.mapreduce.RecordReader;\n+import org.apache.hadoop.mapreduce.TaskAttemptContext;\n+\n+/**\n+ * An <code>org.apache.hadoop.mapreduce.RecordReader</code> for reading whole text file out in\n+ * (filename, content) format. Each element in split is an record of a unique, whole file. File name\n+ * is the full path name for easy deduplicate.\n+ */\n+public class WholeTextFileRecordReader extends RecordReader<String, Text> {\n+  private Path path;\n+\n+  private String key = null;\n+  private Text value = null;\n+\n+  private boolean processed = false;\n+\n+  private FileSystem fs;\n+\n+  public WholeTextFileRecordReader(\n+      CombineFileSplit split,\n+      TaskAttemptContext context,\n+      Integer index)\n+    throws IOException {\n+    path = split.getPath(index);\n+    fs = path.getFileSystem(context.getConfiguration());\n+  }\n+\n+  @Override\n+  public void initialize(InputSplit arg0, TaskAttemptContext arg1)\n+    throws IOException, InterruptedException {\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+  }\n+\n+  @Override\n+  public float getProgress() throws IOException {\n+    return processed ? 1.0f : 0.0f;\n+  }\n+\n+  @Override\n+  public String getCurrentKey() throws IOException, InterruptedException {\n+    return key;\n+  }\n+\n+  @Override\n+  public Text getCurrentValue() throws IOException, InterruptedException{\n+    return value;\n+  }\n+\n+  @Override\n+  public boolean nextKeyValue() throws IOException {\n+    if (!processed) {\n+      if (key == null) {\n+        key = path.toString();\n+      }\n+      if (value == null) {\n+        value = new Text();\n+      }\n+\n+      FSDataInputStream fileIn = null;\n+      try {\n+        fileIn = fs.open(path);\n+        byte[] innerBuffer = IOUtils.toByteArray(fileIn);"
  }, {
    "author": {
      "login": "yinxusen"
    },
    "body": "@srowen It will be cool to remove the dependency of commons-io. But I find that there are only a few places using commons-io, and most of them are testsuites.\n",
    "commit": "4ed60d16b5d7c760c06dd0d95ee558eee5cfd398",
    "createdAt": "2014-03-24T11:38:59Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.input;\n+\n+import java.io.IOException;\n+\n+import com.google.common.io.Closeables;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.mapreduce.InputSplit;\n+import org.apache.hadoop.mapreduce.lib.input.CombineFileSplit;\n+import org.apache.hadoop.mapreduce.RecordReader;\n+import org.apache.hadoop.mapreduce.TaskAttemptContext;\n+\n+/**\n+ * An <code>org.apache.hadoop.mapreduce.RecordReader</code> for reading whole text file out in\n+ * (filename, content) format. Each element in split is an record of a unique, whole file. File name\n+ * is the full path name for easy deduplicate.\n+ */\n+public class WholeTextFileRecordReader extends RecordReader<String, Text> {\n+  private Path path;\n+\n+  private String key = null;\n+  private Text value = null;\n+\n+  private boolean processed = false;\n+\n+  private FileSystem fs;\n+\n+  public WholeTextFileRecordReader(\n+      CombineFileSplit split,\n+      TaskAttemptContext context,\n+      Integer index)\n+    throws IOException {\n+    path = split.getPath(index);\n+    fs = path.getFileSystem(context.getConfiguration());\n+  }\n+\n+  @Override\n+  public void initialize(InputSplit arg0, TaskAttemptContext arg1)\n+    throws IOException, InterruptedException {\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+  }\n+\n+  @Override\n+  public float getProgress() throws IOException {\n+    return processed ? 1.0f : 0.0f;\n+  }\n+\n+  @Override\n+  public String getCurrentKey() throws IOException, InterruptedException {\n+    return key;\n+  }\n+\n+  @Override\n+  public Text getCurrentValue() throws IOException, InterruptedException{\n+    return value;\n+  }\n+\n+  @Override\n+  public boolean nextKeyValue() throws IOException {\n+    if (!processed) {\n+      if (key == null) {\n+        key = path.toString();\n+      }\n+      if (value == null) {\n+        value = new Text();\n+      }\n+\n+      FSDataInputStream fileIn = null;\n+      try {\n+        fileIn = fs.open(path);\n+        byte[] innerBuffer = IOUtils.toByteArray(fileIn);"
  }],
  "prId": 164
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "remove unused import\n",
    "commit": "4ed60d16b5d7c760c06dd0d95ee558eee5cfd398",
    "createdAt": "2014-03-25T00:11:50Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.input;\n+\n+import java.io.IOException;\n+\n+import com.google.common.io.Closeables;\n+import org.apache.commons.io.IOUtils;"
  }],
  "prId": 164
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "change `<code>` to `{@link`\n",
    "commit": "4ed60d16b5d7c760c06dd0d95ee558eee5cfd398",
    "createdAt": "2014-03-25T00:12:11Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.input;\n+\n+import java.io.IOException;\n+\n+import com.google.common.io.Closeables;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.mapreduce.InputSplit;\n+import org.apache.hadoop.mapreduce.lib.input.CombineFileSplit;\n+import org.apache.hadoop.mapreduce.RecordReader;\n+import org.apache.hadoop.mapreduce.TaskAttemptContext;\n+\n+/**\n+ * An <code>org.apache.hadoop.mapreduce.RecordReader</code> for reading whole text file out in"
  }],
  "prId": 164
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "(path, content)\n",
    "commit": "4ed60d16b5d7c760c06dd0d95ee558eee5cfd398",
    "createdAt": "2014-03-25T00:12:24Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.input;\n+\n+import java.io.IOException;\n+\n+import com.google.common.io.Closeables;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.mapreduce.InputSplit;\n+import org.apache.hadoop.mapreduce.lib.input.CombineFileSplit;\n+import org.apache.hadoop.mapreduce.RecordReader;\n+import org.apache.hadoop.mapreduce.TaskAttemptContext;\n+\n+/**\n+ * An <code>org.apache.hadoop.mapreduce.RecordReader</code> for reading whole text file out in\n+ * (filename, content) format. Each element in split is an record of a unique, whole file. File name"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Use `WholeTextInputFormat`'s doc as a reference and update the doc here.\n",
    "commit": "4ed60d16b5d7c760c06dd0d95ee558eee5cfd398",
    "createdAt": "2014-03-25T00:13:03Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.input;\n+\n+import java.io.IOException;\n+\n+import com.google.common.io.Closeables;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.mapreduce.InputSplit;\n+import org.apache.hadoop.mapreduce.lib.input.CombineFileSplit;\n+import org.apache.hadoop.mapreduce.RecordReader;\n+import org.apache.hadoop.mapreduce.TaskAttemptContext;\n+\n+/**\n+ * An <code>org.apache.hadoop.mapreduce.RecordReader</code> for reading whole text file out in\n+ * (filename, content) format. Each element in split is an record of a unique, whole file. File name"
  }],
  "prId": 164
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "add a space after InterruptedException\n",
    "commit": "4ed60d16b5d7c760c06dd0d95ee558eee5cfd398",
    "createdAt": "2014-03-26T06:44:46Z",
    "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.input;\n+\n+import java.io.IOException;\n+\n+import com.google.common.io.ByteStreams;\n+import com.google.common.io.Closeables;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.mapreduce.InputSplit;\n+import org.apache.hadoop.mapreduce.lib.input.CombineFileSplit;\n+import org.apache.hadoop.mapreduce.RecordReader;\n+import org.apache.hadoop.mapreduce.TaskAttemptContext;\n+\n+/**\n+ * An {@link org.apache.hadoop.mapreduce.RecordReader} for reading a single whole text file out in a\n+ * key-value pair, where the key is the file path and the value is the entire content of the file.\n+ */\n+public class WholeTextFileRecordReader extends RecordReader<String, Text> {\n+  private Path path;\n+\n+  private String key = null;\n+  private Text value = null;\n+\n+  private boolean processed = false;\n+\n+  private FileSystem fs;\n+\n+  public WholeTextFileRecordReader(\n+      CombineFileSplit split,\n+      TaskAttemptContext context,\n+      Integer index)\n+    throws IOException {\n+    path = split.getPath(index);\n+    fs = path.getFileSystem(context.getConfiguration());\n+  }\n+\n+  @Override\n+  public void initialize(InputSplit arg0, TaskAttemptContext arg1)\n+    throws IOException, InterruptedException {\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+  }\n+\n+  @Override\n+  public float getProgress() throws IOException {\n+    return processed ? 1.0f : 0.0f;\n+  }\n+\n+  @Override\n+  public String getCurrentKey() throws IOException, InterruptedException {\n+    return key;\n+  }\n+\n+  @Override\n+  public Text getCurrentValue() throws IOException, InterruptedException{"
  }],
  "prId": 164
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "can u add some inline comment to explain what \"processed\" means? You don't want the reader to go through nextKeyValue to find out what it does ..\n",
    "commit": "4ed60d16b5d7c760c06dd0d95ee558eee5cfd398",
    "createdAt": "2014-03-26T06:45:25Z",
    "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.input;\n+\n+import java.io.IOException;\n+\n+import com.google.common.io.ByteStreams;\n+import com.google.common.io.Closeables;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.mapreduce.InputSplit;\n+import org.apache.hadoop.mapreduce.lib.input.CombineFileSplit;\n+import org.apache.hadoop.mapreduce.RecordReader;\n+import org.apache.hadoop.mapreduce.TaskAttemptContext;\n+\n+/**\n+ * An {@link org.apache.hadoop.mapreduce.RecordReader} for reading a single whole text file out in a\n+ * key-value pair, where the key is the file path and the value is the entire content of the file.\n+ */\n+public class WholeTextFileRecordReader extends RecordReader<String, Text> {\n+  private Path path;\n+\n+  private String key = null;\n+  private Text value = null;\n+\n+  private boolean processed = false;"
  }],
  "prId": 164
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "Can we change the value type to String here directly? Then you don't need the extra mapValues\n",
    "commit": "4ed60d16b5d7c760c06dd0d95ee558eee5cfd398",
    "createdAt": "2014-03-26T06:50:49Z",
    "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.input;\n+\n+import java.io.IOException;\n+\n+import com.google.common.io.ByteStreams;\n+import com.google.common.io.Closeables;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.mapreduce.InputSplit;\n+import org.apache.hadoop.mapreduce.lib.input.CombineFileSplit;\n+import org.apache.hadoop.mapreduce.RecordReader;\n+import org.apache.hadoop.mapreduce.TaskAttemptContext;\n+\n+/**\n+ * An {@link org.apache.hadoop.mapreduce.RecordReader} for reading a single whole text file out in a\n+ * key-value pair, where the key is the file path and the value is the entire content of the file.\n+ */\n+public class WholeTextFileRecordReader extends RecordReader<String, Text> {\n+  private Path path;\n+\n+  private String key = null;\n+  private Text value = null;"
  }],
  "prId": 164
}]