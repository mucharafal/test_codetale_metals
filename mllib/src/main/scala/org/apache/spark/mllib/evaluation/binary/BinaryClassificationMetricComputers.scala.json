[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Use another variable for brevity?\n\n```\nval totalPositives = c.numTruePositives + c.numFalsePositives\n```\n",
    "commit": "c2bf2b19315d75f7573b97e043fb2089945ace50",
    "createdAt": "2014-11-07T00:05:18Z",
    "diffHunk": "@@ -27,19 +27,31 @@ private[evaluation] trait BinaryClassificationMetricComputer extends Serializabl\n /** Precision. */\n private[evaluation] object Precision extends BinaryClassificationMetricComputer {\n   override def apply(c: BinaryConfusionMatrix): Double =\n-    c.numTruePositives.toDouble / (c.numTruePositives + c.numFalsePositives)\n+    if (c.numTruePositives + c.numFalsePositives == 0) {"
  }],
  "prId": 3118
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "This should probably return 1.0 in order to fit with BinaryClassificationMetrics.pr (which prepends (0.0, 1.0) to the recall-precision curve).\n",
    "commit": "c2bf2b19315d75f7573b97e043fb2089945ace50",
    "createdAt": "2014-11-07T00:05:21Z",
    "diffHunk": "@@ -27,19 +27,31 @@ private[evaluation] trait BinaryClassificationMetricComputer extends Serializabl\n /** Precision. */\n private[evaluation] object Precision extends BinaryClassificationMetricComputer {\n   override def apply(c: BinaryConfusionMatrix): Double =\n-    c.numTruePositives.toDouble / (c.numTruePositives + c.numFalsePositives)\n+    if (c.numTruePositives + c.numFalsePositives == 0) {\n+      0.0"
  }],
  "prId": 3118
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Scala style (braces):\n\n```\noverride def apply(c: BinaryConfusionMatrix): Double = {\n  if (c.numNegatives == 0) {\n    0.0\n  } else {\n    c.numFalsePositives.toDouble / c.numNegatives\n  }\n}\n```\n",
    "commit": "c2bf2b19315d75f7573b97e043fb2089945ace50",
    "createdAt": "2014-11-07T00:05:23Z",
    "diffHunk": "@@ -27,19 +27,31 @@ private[evaluation] trait BinaryClassificationMetricComputer extends Serializabl\n /** Precision. */\n private[evaluation] object Precision extends BinaryClassificationMetricComputer {\n   override def apply(c: BinaryConfusionMatrix): Double =\n-    c.numTruePositives.toDouble / (c.numTruePositives + c.numFalsePositives)\n+    if (c.numTruePositives + c.numFalsePositives == 0) {\n+      0.0\n+    } else {\n+      c.numTruePositives.toDouble / (c.numTruePositives + c.numFalsePositives)\n+    }\n }\n \n /** False positive rate. */\n private[evaluation] object FalsePositiveRate extends BinaryClassificationMetricComputer {\n   override def apply(c: BinaryConfusionMatrix): Double ="
  }],
  "prId": 3118
}]