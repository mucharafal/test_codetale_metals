[{
  "comments": [{
    "author": {
      "login": "feynmanliang"
    },
    "body": "Lets be consistent and keep the schema as a private class val\n",
    "commit": "759b22d01875f12f7139519d534544f1368ef642",
    "createdAt": "2015-08-31T23:46:51Z",
    "diffHunk": "@@ -61,8 +61,13 @@ private[classification] object GLMClassificationModel {\n       sc.parallelize(Seq(metadata), 1).saveAsTextFile(Loader.metadataPath(path))\n \n       // Create Parquet data.\n-      val data = Data(weights, intercept, threshold)\n-      sc.parallelize(Seq(data), 1).toDF().write.parquet(Loader.dataPath(path))\n+      val dataRDD = sc.parallelize(Seq(Row(weights, intercept, threshold.getOrElse(null))), 1)\n+      val schema = StructType("
  }],
  "prId": 8507
}, {
  "comments": [{
    "author": {
      "login": "feynmanliang"
    },
    "body": "Extra newline\n",
    "commit": "759b22d01875f12f7139519d534544f1368ef642",
    "createdAt": "2015-09-03T17:16:46Z",
    "diffHunk": "@@ -61,10 +61,16 @@ private[classification] object GLMClassificationModel {\n       sc.parallelize(Seq(metadata), 1).saveAsTextFile(Loader.metadataPath(path))\n \n       // Create Parquet data.\n-      val data = Data(weights, intercept, threshold)\n-      sc.parallelize(Seq(data), 1).toDF().write.parquet(Loader.dataPath(path))\n+      val dataRDD = sc.parallelize(Seq(Row(weights, intercept, threshold.getOrElse(null))), 1)\n+      sqlContext.createDataFrame(dataRDD, schema).write.parquet(Loader.dataPath(path))\n     }\n \n+    private val schema = StructType(\n+      Seq(StructField(\"weights\", new VectorUDT, nullable = false),\n+      StructField(\"intercept\", DoubleType, nullable = false),\n+      StructField(\"threshold\", DoubleType, nullable = true)))\n+\n+"
  }],
  "prId": 8507
}]