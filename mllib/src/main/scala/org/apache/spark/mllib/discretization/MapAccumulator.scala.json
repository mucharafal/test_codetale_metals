[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Mark it package private if this is not intended to be used by users.\n",
    "commit": "70b63e42d81f9ca9f9c48bf8435f9620c6800b75",
    "createdAt": "2014-03-24T18:15:07Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements. See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License. You may obtain a copy of the License at\n+*\n+* http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.mllib.discretization\n+\n+import org.apache.spark.AccumulatorParam\n+\n+object MapAccumulator extends AccumulatorParam[Map[String, Int]] {"
  }],
  "prId": 216
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "This has O(n^2) complexity. If the purpose is to merge counters. You should trim keys before adding them into the counter. And then merge another counter in-place.\n",
    "commit": "70b63e42d81f9ca9f9c48bf8435f9620c6800b75",
    "createdAt": "2014-03-24T18:21:36Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements. See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License. You may obtain a copy of the License at\n+*\n+* http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.mllib.discretization\n+\n+import org.apache.spark.AccumulatorParam\n+\n+object MapAccumulator extends AccumulatorParam[Map[String, Int]] {\n+\n+  def addInPlace(map1: Map[String, Int], map2: Map[String, Int]): Map[String, Int] = {\n+    if (map1 isEmpty) {\n+      map2\n+    } else if (map2 isEmpty) {\n+      map1\n+    } else {\n+      var result = Map.empty[String, Int]\n+      for ((y1, x1) <- map1; (y2, x2) <- map2) {\n+        if (y1.trim() == y2.trim()) {"
  }],
  "prId": 216
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "no infix\n",
    "commit": "70b63e42d81f9ca9f9c48bf8435f9620c6800b75",
    "createdAt": "2014-03-25T19:04:51Z",
    "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.discretization\n+\n+import org.apache.spark.AccumulatorParam\n+\n+private[discretization] object MapAccumulator extends AccumulatorParam[Map[String, Int]] {\n+\n+  def addInPlace(map1: Map[String, Int], map2: Map[String, Int]): Map[String, Int] = {\n+\n+    if (map1 isEmpty) {"
  }],
  "prId": 216
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Use `Long` instead of `Int` to avoid overflow.\n",
    "commit": "70b63e42d81f9ca9f9c48bf8435f9620c6800b75",
    "createdAt": "2014-03-25T19:06:02Z",
    "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.discretization\n+\n+import org.apache.spark.AccumulatorParam\n+\n+private[discretization] object MapAccumulator extends AccumulatorParam[Map[String, Int]] {"
  }],
  "prId": 216
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "If `map2` is returned, it might get modified in the next `addInPlace`. The super method suggests only modifying and returning the first. To we better copy everything to `map1` from `map2` in this case, basically, remove this if block.\n",
    "commit": "70b63e42d81f9ca9f9c48bf8435f9620c6800b75",
    "createdAt": "2014-03-25T19:12:25Z",
    "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.discretization\n+\n+import org.apache.spark.AccumulatorParam\n+\n+private[discretization] object MapAccumulator extends AccumulatorParam[Map[String, Int]] {\n+\n+  def addInPlace(map1: Map[String, Int], map2: Map[String, Int]): Map[String, Int] = {\n+\n+    if (map1 isEmpty) {\n+      map2"
  }],
  "prId": 216
}]