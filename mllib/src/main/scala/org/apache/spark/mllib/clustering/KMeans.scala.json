[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Rename this to make it clear it is the new API:\n\n```\nimport org.apache.spark.ml.clustering.{KMeans => NewKMeans}\n```\n",
    "commit": "5ef6f70ef16b742962184d729da3623fea1d703b",
    "createdAt": "2016-04-19T22:36:16Z",
    "diffHunk": "@@ -21,6 +21,8 @@ import scala.collection.mutable.ArrayBuffer\n \n import org.apache.spark.annotation.Since\n import org.apache.spark.internal.Logging\n+import org.apache.spark.ml.clustering"
  }],
  "prId": 12432
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "do not include this in public API docs\n",
    "commit": "5ef6f70ef16b742962184d729da3623fea1d703b",
    "createdAt": "2016-04-19T22:36:17Z",
    "diffHunk": "@@ -209,9 +211,10 @@ class KMeans private (\n   /**\n    * Train a K-means model on the given set of points; `data` should be cached for high\n    * performance, because this is an iterative algorithm.\n+   * `instr` is used to log instrumentation parameters."
  }],
  "prId": 12432
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Default arguments are not Java friendly.  You'll need to do this:\n\n```\ndef run(data: RDD[Vector]): KMeansModel = {\n  run(data, None)\n}\n\nprivate[spark] def run(data: RDD[Vector], instr: Option[Instrumentation[clustering.KMeans]]): KMeansModel = ...\n```\n\nThat way, we will not change the public API.  Note: I'd also use Option instead of null.\n",
    "commit": "5ef6f70ef16b742962184d729da3623fea1d703b",
    "createdAt": "2016-04-19T22:36:18Z",
    "diffHunk": "@@ -209,9 +211,10 @@ class KMeans private (\n   /**\n    * Train a K-means model on the given set of points; `data` should be cached for high\n    * performance, because this is an iterative algorithm.\n+   * `instr` is used to log instrumentation parameters.\n    */\n   @Since(\"0.8.0\")\n-  def run(data: RDD[Vector]): KMeansModel = {\n+  def run(data: RDD[Vector], instr: Instrumentation[clustering.KMeans] = null): KMeansModel = {"
  }],
  "prId": 12432
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Please follow the Spark style guide: [https://cwiki.apache.org/confluence/display/SPARK/Spark+Code+Style+Guide].\nHere, for multi-line method headers, put 1 arg per line, and put the initial arg on the line below the method name.  Check out surrounding code for examples.\n",
    "commit": "5ef6f70ef16b742962184d729da3623fea1d703b",
    "createdAt": "2016-04-19T22:36:20Z",
    "diffHunk": "@@ -238,7 +241,8 @@ class KMeans private (\n   /**\n    * Implementation of K-Means algorithm.\n    */\n-  private def runAlgorithm(data: RDD[VectorWithNorm]): KMeansModel = {\n+  private def runAlgorithm(data: RDD[VectorWithNorm],"
  }],
  "prId": 12432
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "This is being logged on every iteration, but it should only be logged once.  Move before the while loop, and set it using \"centers\".\n",
    "commit": "5ef6f70ef16b742962184d729da3623fea1d703b",
    "createdAt": "2016-04-19T22:36:21Z",
    "diffHunk": "@@ -287,6 +291,10 @@ class KMeans private (\n \n       val bcActiveCenters = sc.broadcast(activeCenters)\n \n+      if (instr != null) {\n+        instr.logNumFeatures(bcActiveCenters.value(0)(0).vector.size)"
  }],
  "prId": 12432
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "This is the public method, so it needs to have the documentation and Since tag.  The private version does not.\n",
    "commit": "5ef6f70ef16b742962184d729da3623fea1d703b",
    "createdAt": "2016-04-20T20:30:28Z",
    "diffHunk": "@@ -206,12 +208,18 @@ class KMeans private (\n     this\n   }\n \n+  def run(data: RDD[Vector]): KMeansModel = {"
  }],
  "prId": 12432
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "indent 2 more space (this & next line)\n",
    "commit": "5ef6f70ef16b742962184d729da3623fea1d703b",
    "createdAt": "2016-04-20T20:30:41Z",
    "diffHunk": "@@ -238,7 +246,9 @@ class KMeans private (\n   /**\n    * Implementation of K-Means algorithm.\n    */\n-  private def runAlgorithm(data: RDD[VectorWithNorm]): KMeansModel = {\n+  private def runAlgorithm(\n+    data: RDD[VectorWithNorm],"
  }],
  "prId": 12432
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "simpler: `instr.map(_.logNumFeatures(...))`\n",
    "commit": "5ef6f70ef16b742962184d729da3623fea1d703b",
    "createdAt": "2016-04-20T20:30:46Z",
    "diffHunk": "@@ -274,6 +284,10 @@ class KMeans private (\n \n     val iterationStartTime = System.nanoTime()\n \n+    if (!instr.isEmpty) {"
  }],
  "prId": 12432
}]