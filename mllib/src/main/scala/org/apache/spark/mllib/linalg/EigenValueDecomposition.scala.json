[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Seems reasonable, though I have a few minor suggestions. I suppose `<=` is OK, technically? and if this size is worth checking, it's probably worth checking `ncv * (ncv + 8)` later. And then, maybe it's best to keep the check by the allocation so they don't get out of sync if someone changes them later.\n",
    "commit": "ee56e05644bbb39883828b2eff58af5e0a4df309",
    "createdAt": "2015-02-06T21:49:40Z",
    "diffHunk": "@@ -66,6 +66,9 @@ private[mllib] object EigenValueDecomposition {\n     // ncv must be smaller than n\n     val ncv = math.min(2 * k, n)\n \n+    require(ncv * n.toLong < Integer.MAX_VALUE, \"Product of 2*k*n must be smaller than \" +"
  }, {
    "author": {
      "login": "mbittmann"
    },
    "body": "Thanks for the feedback. I committed your suggestions into this PR. \n",
    "commit": "ee56e05644bbb39883828b2eff58af5e0a4df309",
    "createdAt": "2015-02-06T23:32:04Z",
    "diffHunk": "@@ -66,6 +66,9 @@ private[mllib] object EigenValueDecomposition {\n     // ncv must be smaller than n\n     val ncv = math.min(2 * k, n)\n \n+    require(ncv * n.toLong < Integer.MAX_VALUE, \"Product of 2*k*n must be smaller than \" +"
  }],
  "prId": 4433
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Sorry, one other tiny thing: the problematic product is not necessarily 2_k_n here. I think you could simplify these error messages to just say that the k and n are too large, rather than explain the computation. Right now the expressions are repeated 3 places. Might be nice to keep that to 2, and keep them together.\n",
    "commit": "ee56e05644bbb39883828b2eff58af5e0a4df309",
    "createdAt": "2015-02-06T23:35:38Z",
    "diffHunk": "@@ -79,6 +79,10 @@ private[mllib] object EigenValueDecomposition {\n     // Mode 1: A*x = lambda*x, A symmetric\n     iparam(6) = 1\n \n+    require(ncv * n.toLong <= Integer.MAX_VALUE, \"Product of 2*k*n must be smaller than \" +"
  }, {
    "author": {
      "login": "mbittmann"
    },
    "body": "Just want to confirm. Are you suggesting just a single 'require' statement that will AND the two conditions? Then just provide a generic comment that either n or k are two large? \n",
    "commit": "ee56e05644bbb39883828b2eff58af5e0a4df309",
    "createdAt": "2015-02-06T23:52:29Z",
    "diffHunk": "@@ -79,6 +79,10 @@ private[mllib] object EigenValueDecomposition {\n     // Mode 1: A*x = lambda*x, A symmetric\n     iparam(6) = 1\n \n+    require(ncv * n.toLong <= Integer.MAX_VALUE, \"Product of 2*k*n must be smaller than \" +"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "You could, sure. Yes, I'm saying the caller may just need or want to know that, basically, k or n is too big. It would be simpler and easier than maintaining a longer explanation.\n",
    "commit": "ee56e05644bbb39883828b2eff58af5e0a4df309",
    "createdAt": "2015-02-06T23:57:26Z",
    "diffHunk": "@@ -79,6 +79,10 @@ private[mllib] object EigenValueDecomposition {\n     // Mode 1: A*x = lambda*x, A symmetric\n     iparam(6) = 1\n \n+    require(ncv * n.toLong <= Integer.MAX_VALUE, \"Product of 2*k*n must be smaller than \" +"
  }, {
    "author": {
      "login": "mbittmann"
    },
    "body": "Okay, I think i figured out what you are saying. Take a look. The check on k may be overkill, since by definition it must be less than n. Therefore k_n is always greater than k_k. There could always be that weird scenario though. Thanks for the help.\n",
    "commit": "ee56e05644bbb39883828b2eff58af5e0a4df309",
    "createdAt": "2015-02-07T00:09:04Z",
    "diffHunk": "@@ -79,6 +79,10 @@ private[mllib] object EigenValueDecomposition {\n     // Mode 1: A*x = lambda*x, A symmetric\n     iparam(6) = 1\n \n+    require(ncv * n.toLong <= Integer.MAX_VALUE, \"Product of 2*k*n must be smaller than \" +"
  }],
  "prId": 4433
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "I don't mean to belabor this, but the new second error message implies that k alone is the problem, and that k exceeds 2^31-1, and those aren't necessarily true. Concretely I'm suggesting something simple like\n\n```\nrequire(n * ncv.toLong <= Integer.MAX_VALUE && ncv * (ncv.toLong + 8) <= Integer.MAX_VALUE, \n        s\"k = $k and/or n = $n are too large to compute an eigendecomposition\")\n```\n",
    "commit": "ee56e05644bbb39883828b2eff58af5e0a4df309",
    "createdAt": "2015-02-07T13:29:26Z",
    "diffHunk": "@@ -79,6 +79,11 @@ private[mllib] object EigenValueDecomposition {\n     // Mode 1: A*x = lambda*x, A symmetric\n     iparam(6) = 1\n \n+    require(n * ncv.toLong <= Integer.MAX_VALUE, \"Large n and/or k will exceed \" +"
  }],
  "prId": 4433
}]