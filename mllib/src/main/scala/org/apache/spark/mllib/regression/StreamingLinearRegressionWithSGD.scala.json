[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "We shouldn't assume the number of features is 2. We can default to `null` and throw an error if this is not set when `trainOn` is called.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-08-02T00:04:55Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * Train or predict a linear regression model on streaming data. Training uses\n+ * Stochastic Gradient Descent to update the model based on each new batch of\n+ * incoming data from a DStream (see `LinearRegressionWithSGD` for model equation)\n+ *\n+ * Each batch of data is assumed to be an RDD of LabeledPoints.\n+ * The number of data points per batch can vary, but the number\n+ * of features must be constant. An initial weight\n+ * vector must be provided.\n+ *\n+ * Use a builder pattern to construct a streaming linear regression\n+ * analysis in an application, like:\n+ *\n+ *  val model = new StreamingLinearRegressionWithSGD()\n+ *    .setStepSize(0.5)\n+ *    .setNumIterations(10)\n+ *    .setInitialWeights(Vectors.dense(...))\n+ *    .trainOn(DStream)\n+ *\n+ */\n+@Experimental\n+class StreamingLinearRegressionWithSGD (\n+    private var stepSize: Double,\n+    private var numIterations: Int,\n+    private var miniBatchFraction: Double,\n+    private var initialWeights: Vector)\n+  extends StreamingLinearAlgorithm[\n+    LinearRegressionModel, LinearRegressionWithSGD] with Serializable {\n+\n+  /**\n+   * Construct a StreamingLinearRegression object with default parameters:\n+   * {stepSize: 0.1, numIterations: 50, miniBatchFraction: 1.0, initialWeights: [0.0, 0.0]}.\n+   */\n+  def this() = this(0.1, 50, 1.0, Vectors.dense(0.0, 0.0))"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Another option is to make it a required argument:\n\n```\ndef this(w0: Vector) = this(0.1, 50, 1.0, w0)\n```\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-08-02T00:05:56Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * Train or predict a linear regression model on streaming data. Training uses\n+ * Stochastic Gradient Descent to update the model based on each new batch of\n+ * incoming data from a DStream (see `LinearRegressionWithSGD` for model equation)\n+ *\n+ * Each batch of data is assumed to be an RDD of LabeledPoints.\n+ * The number of data points per batch can vary, but the number\n+ * of features must be constant. An initial weight\n+ * vector must be provided.\n+ *\n+ * Use a builder pattern to construct a streaming linear regression\n+ * analysis in an application, like:\n+ *\n+ *  val model = new StreamingLinearRegressionWithSGD()\n+ *    .setStepSize(0.5)\n+ *    .setNumIterations(10)\n+ *    .setInitialWeights(Vectors.dense(...))\n+ *    .trainOn(DStream)\n+ *\n+ */\n+@Experimental\n+class StreamingLinearRegressionWithSGD (\n+    private var stepSize: Double,\n+    private var numIterations: Int,\n+    private var miniBatchFraction: Double,\n+    private var initialWeights: Vector)\n+  extends StreamingLinearAlgorithm[\n+    LinearRegressionModel, LinearRegressionWithSGD] with Serializable {\n+\n+  /**\n+   * Construct a StreamingLinearRegression object with default parameters:\n+   * {stepSize: 0.1, numIterations: 50, miniBatchFraction: 1.0, initialWeights: [0.0, 0.0]}.\n+   */\n+  def this() = this(0.1, 50, 1.0, Vectors.dense(0.0, 0.0))"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "The former solution looks better to me. In the future, we can determine the number of features from data.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-08-02T00:07:16Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * Train or predict a linear regression model on streaming data. Training uses\n+ * Stochastic Gradient Descent to update the model based on each new batch of\n+ * incoming data from a DStream (see `LinearRegressionWithSGD` for model equation)\n+ *\n+ * Each batch of data is assumed to be an RDD of LabeledPoints.\n+ * The number of data points per batch can vary, but the number\n+ * of features must be constant. An initial weight\n+ * vector must be provided.\n+ *\n+ * Use a builder pattern to construct a streaming linear regression\n+ * analysis in an application, like:\n+ *\n+ *  val model = new StreamingLinearRegressionWithSGD()\n+ *    .setStepSize(0.5)\n+ *    .setNumIterations(10)\n+ *    .setInitialWeights(Vectors.dense(...))\n+ *    .trainOn(DStream)\n+ *\n+ */\n+@Experimental\n+class StreamingLinearRegressionWithSGD (\n+    private var stepSize: Double,\n+    private var numIterations: Int,\n+    private var miniBatchFraction: Double,\n+    private var initialWeights: Vector)\n+  extends StreamingLinearAlgorithm[\n+    LinearRegressionModel, LinearRegressionWithSGD] with Serializable {\n+\n+  /**\n+   * Construct a StreamingLinearRegression object with default parameters:\n+   * {stepSize: 0.1, numIterations: 50, miniBatchFraction: 1.0, initialWeights: [0.0, 0.0]}.\n+   */\n+  def this() = this(0.1, 50, 1.0, Vectors.dense(0.0, 0.0))"
  }, {
    "author": {
      "login": "freeman-lab"
    },
    "body": "Ok, should probably throw the same error when calling `predictOn` too right? Otherwise we'll get errors inside model.predict.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-08-02T00:39:44Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * Train or predict a linear regression model on streaming data. Training uses\n+ * Stochastic Gradient Descent to update the model based on each new batch of\n+ * incoming data from a DStream (see `LinearRegressionWithSGD` for model equation)\n+ *\n+ * Each batch of data is assumed to be an RDD of LabeledPoints.\n+ * The number of data points per batch can vary, but the number\n+ * of features must be constant. An initial weight\n+ * vector must be provided.\n+ *\n+ * Use a builder pattern to construct a streaming linear regression\n+ * analysis in an application, like:\n+ *\n+ *  val model = new StreamingLinearRegressionWithSGD()\n+ *    .setStepSize(0.5)\n+ *    .setNumIterations(10)\n+ *    .setInitialWeights(Vectors.dense(...))\n+ *    .trainOn(DStream)\n+ *\n+ */\n+@Experimental\n+class StreamingLinearRegressionWithSGD (\n+    private var stepSize: Double,\n+    private var numIterations: Int,\n+    private var miniBatchFraction: Double,\n+    private var initialWeights: Vector)\n+  extends StreamingLinearAlgorithm[\n+    LinearRegressionModel, LinearRegressionWithSGD] with Serializable {\n+\n+  /**\n+   * Construct a StreamingLinearRegression object with default parameters:\n+   * {stepSize: 0.1, numIterations: 50, miniBatchFraction: 1.0, initialWeights: [0.0, 0.0]}.\n+   */\n+  def this() = this(0.1, 50, 1.0, Vectors.dense(0.0, 0.0))"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Yes.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-08-02T00:41:04Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * Train or predict a linear regression model on streaming data. Training uses\n+ * Stochastic Gradient Descent to update the model based on each new batch of\n+ * incoming data from a DStream (see `LinearRegressionWithSGD` for model equation)\n+ *\n+ * Each batch of data is assumed to be an RDD of LabeledPoints.\n+ * The number of data points per batch can vary, but the number\n+ * of features must be constant. An initial weight\n+ * vector must be provided.\n+ *\n+ * Use a builder pattern to construct a streaming linear regression\n+ * analysis in an application, like:\n+ *\n+ *  val model = new StreamingLinearRegressionWithSGD()\n+ *    .setStepSize(0.5)\n+ *    .setNumIterations(10)\n+ *    .setInitialWeights(Vectors.dense(...))\n+ *    .trainOn(DStream)\n+ *\n+ */\n+@Experimental\n+class StreamingLinearRegressionWithSGD (\n+    private var stepSize: Double,\n+    private var numIterations: Int,\n+    private var miniBatchFraction: Double,\n+    private var initialWeights: Vector)\n+  extends StreamingLinearAlgorithm[\n+    LinearRegressionModel, LinearRegressionWithSGD] with Serializable {\n+\n+  /**\n+   * Construct a StreamingLinearRegression object with default parameters:\n+   * {stepSize: 0.1, numIterations: 50, miniBatchFraction: 1.0, initialWeights: [0.0, 0.0]}.\n+   */\n+  def this() = this(0.1, 50, 1.0, Vectors.dense(0.0, 0.0))"
  }, {
    "author": {
      "login": "freeman-lab"
    },
    "body": "K, this should work for now. Will be fun to figure out the automatic setting =)\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-08-02T01:59:53Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * Train or predict a linear regression model on streaming data. Training uses\n+ * Stochastic Gradient Descent to update the model based on each new batch of\n+ * incoming data from a DStream (see `LinearRegressionWithSGD` for model equation)\n+ *\n+ * Each batch of data is assumed to be an RDD of LabeledPoints.\n+ * The number of data points per batch can vary, but the number\n+ * of features must be constant. An initial weight\n+ * vector must be provided.\n+ *\n+ * Use a builder pattern to construct a streaming linear regression\n+ * analysis in an application, like:\n+ *\n+ *  val model = new StreamingLinearRegressionWithSGD()\n+ *    .setStepSize(0.5)\n+ *    .setNumIterations(10)\n+ *    .setInitialWeights(Vectors.dense(...))\n+ *    .trainOn(DStream)\n+ *\n+ */\n+@Experimental\n+class StreamingLinearRegressionWithSGD (\n+    private var stepSize: Double,\n+    private var numIterations: Int,\n+    private var miniBatchFraction: Double,\n+    private var initialWeights: Vector)\n+  extends StreamingLinearAlgorithm[\n+    LinearRegressionModel, LinearRegressionWithSGD] with Serializable {\n+\n+  /**\n+   * Construct a StreamingLinearRegression object with default parameters:\n+   * {stepSize: 0.1, numIterations: 50, miniBatchFraction: 1.0, initialWeights: [0.0, 0.0]}.\n+   */\n+  def this() = this(0.1, 50, 1.0, Vectors.dense(0.0, 0.0))"
  }],
  "prId": 1361
}]