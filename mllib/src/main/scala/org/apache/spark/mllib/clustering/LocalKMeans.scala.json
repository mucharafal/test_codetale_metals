[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "If I were you, I would do this like the below:\n\n``` scala\nval costArray = points.map { point =>\n  KMeans.fastSquaredDistance(point, centers(0))\n}\n```\n",
    "commit": "f11081c8cb18c30c8c2187fb40ff48122e564b15",
    "createdAt": "2016-05-11T10:08:38Z",
    "diffHunk": "@@ -46,17 +46,21 @@ private[mllib] object LocalKMeans extends Logging {\n \n     // Initialize centers by sampling using the k-means++ procedure.\n     centers(0) = pickWeighted(rand, points, weights).toDense\n+    val costArray:Array[Double] = new Array[Double](points.length)\n+    for(i <- 0 to points.length-1){\n+      costArray(i)=KMeans.fastSquaredDistance(points(i), centers(0))\n+    }"
  }, {
    "author": {
      "login": "mouendless"
    },
    "body": "Thx, got it\n",
    "commit": "f11081c8cb18c30c8c2187fb40ff48122e564b15",
    "createdAt": "2016-05-11T10:12:14Z",
    "diffHunk": "@@ -46,17 +46,21 @@ private[mllib] object LocalKMeans extends Logging {\n \n     // Initialize centers by sampling using the k-means++ procedure.\n     centers(0) = pickWeighted(rand, points, weights).toDense\n+    val costArray:Array[Double] = new Array[Double](points.length)\n+    for(i <- 0 to points.length-1){\n+      costArray(i)=KMeans.fastSquaredDistance(points(i), centers(0))\n+    }"
  }],
  "prId": 13047
}]