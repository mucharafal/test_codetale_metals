[{
  "comments": [{
    "author": {
      "login": "mateiz"
    },
    "body": "I don't think this needs to have `@Experimental` if it's a developer API\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-26T22:14:19Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, DeveloperApi}\n+import org.apache.spark.streaming.dstream.DStream\n+\n+/**\n+ * :: DeveloperApi ::\n+ * StreamingRegression implements methods for training\n+ * a linear regression model on streaming data, and using it\n+ * for prediction on streaming data.\n+ *\n+ * This class takes as type parameters a GeneralizedLinearModel,\n+ * and a GeneralizedLinearAlgorithm, making it easy to extend to construct\n+ * streaming versions of arbitrary regression analyses. For example usage,\n+ * see StreamingLinearRegressionWithSGD.\n+ *\n+ */\n+@DeveloperApi\n+@Experimental"
  }],
  "prId": 1361
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Since it only applies to linear regression, maybe `StreamingLinearRegression` is a better name.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-30T03:43:47Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, DeveloperApi}\n+import org.apache.spark.streaming.dstream.DStream\n+\n+/**\n+ * :: DeveloperApi ::\n+ * StreamingRegression implements methods for training\n+ * a linear regression model on streaming data, and using it\n+ * for prediction on streaming data.\n+ *\n+ * This class takes as type parameters a GeneralizedLinearModel,\n+ * and a GeneralizedLinearAlgorithm, making it easy to extend to construct\n+ * streaming versions of arbitrary regression analyses. For example usage,\n+ * see StreamingLinearRegressionWithSGD.\n+ *\n+ */\n+@DeveloperApi\n+@Experimental\n+abstract class StreamingRegression["
  }, {
    "author": {
      "login": "freeman-lab"
    },
    "body": "I guess I was going for something more general to avoid confusion, we can actually get `StreamingLinearRegression`, `StreamingLasso`, `StreamingLogisiticRegression`, etc. all by extending this one class. Maybe `StreamingLinearAlgorithm`?\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-31T07:02:17Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, DeveloperApi}\n+import org.apache.spark.streaming.dstream.DStream\n+\n+/**\n+ * :: DeveloperApi ::\n+ * StreamingRegression implements methods for training\n+ * a linear regression model on streaming data, and using it\n+ * for prediction on streaming data.\n+ *\n+ * This class takes as type parameters a GeneralizedLinearModel,\n+ * and a GeneralizedLinearAlgorithm, making it easy to extend to construct\n+ * streaming versions of arbitrary regression analyses. For example usage,\n+ * see StreamingLinearRegressionWithSGD.\n+ *\n+ */\n+@DeveloperApi\n+@Experimental\n+abstract class StreamingRegression["
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Sounds good.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-31T08:24:46Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, DeveloperApi}\n+import org.apache.spark.streaming.dstream.DStream\n+\n+/**\n+ * :: DeveloperApi ::\n+ * StreamingRegression implements methods for training\n+ * a linear regression model on streaming data, and using it\n+ * for prediction on streaming data.\n+ *\n+ * This class takes as type parameters a GeneralizedLinearModel,\n+ * and a GeneralizedLinearAlgorithm, making it easy to extend to construct\n+ * streaming versions of arbitrary regression analyses. For example usage,\n+ * see StreamingLinearRegressionWithSGD.\n+ *\n+ */\n+@DeveloperApi\n+@Experimental\n+abstract class StreamingRegression["
  }],
  "prId": 1361
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Call it `latestModel` to be more specific?\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-30T03:51:12Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, DeveloperApi}\n+import org.apache.spark.streaming.dstream.DStream\n+\n+/**\n+ * :: DeveloperApi ::\n+ * StreamingRegression implements methods for training\n+ * a linear regression model on streaming data, and using it\n+ * for prediction on streaming data.\n+ *\n+ * This class takes as type parameters a GeneralizedLinearModel,\n+ * and a GeneralizedLinearAlgorithm, making it easy to extend to construct\n+ * streaming versions of arbitrary regression analyses. For example usage,\n+ * see StreamingLinearRegressionWithSGD.\n+ *\n+ */\n+@DeveloperApi\n+@Experimental\n+abstract class StreamingRegression[\n+    M <: GeneralizedLinearModel,\n+    A <: GeneralizedLinearAlgorithm[M]] extends Logging {\n+\n+  /** The model to be updated and used for prediction. */\n+  var model: M\n+\n+  /** The algorithm to use for updating. */\n+  val algorithm: A\n+\n+  /** Return the latest model. */\n+  def latest(): M = {"
  }, {
    "author": {
      "login": "freeman-lab"
    },
    "body": "Great\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-31T07:00:38Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, DeveloperApi}\n+import org.apache.spark.streaming.dstream.DStream\n+\n+/**\n+ * :: DeveloperApi ::\n+ * StreamingRegression implements methods for training\n+ * a linear regression model on streaming data, and using it\n+ * for prediction on streaming data.\n+ *\n+ * This class takes as type parameters a GeneralizedLinearModel,\n+ * and a GeneralizedLinearAlgorithm, making it easy to extend to construct\n+ * streaming versions of arbitrary regression analyses. For example usage,\n+ * see StreamingLinearRegressionWithSGD.\n+ *\n+ */\n+@DeveloperApi\n+@Experimental\n+abstract class StreamingRegression[\n+    M <: GeneralizedLinearModel,\n+    A <: GeneralizedLinearAlgorithm[M]] extends Logging {\n+\n+  /** The model to be updated and used for prediction. */\n+  var model: M\n+\n+  /** The algorithm to use for updating. */\n+  val algorithm: A\n+\n+  /** Return the latest model. */\n+  def latest(): M = {"
  }],
  "prId": 1361
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Add `protected`?\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-30T03:53:07Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, DeveloperApi}\n+import org.apache.spark.streaming.dstream.DStream\n+\n+/**\n+ * :: DeveloperApi ::\n+ * StreamingRegression implements methods for training\n+ * a linear regression model on streaming data, and using it\n+ * for prediction on streaming data.\n+ *\n+ * This class takes as type parameters a GeneralizedLinearModel,\n+ * and a GeneralizedLinearAlgorithm, making it easy to extend to construct\n+ * streaming versions of arbitrary regression analyses. For example usage,\n+ * see StreamingLinearRegressionWithSGD.\n+ *\n+ */\n+@DeveloperApi\n+@Experimental\n+abstract class StreamingRegression[\n+    M <: GeneralizedLinearModel,\n+    A <: GeneralizedLinearAlgorithm[M]] extends Logging {\n+\n+  /** The model to be updated and used for prediction. */\n+  var model: M"
  }],
  "prId": 1361
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Also `protected`?\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-30T03:53:18Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, DeveloperApi}\n+import org.apache.spark.streaming.dstream.DStream\n+\n+/**\n+ * :: DeveloperApi ::\n+ * StreamingRegression implements methods for training\n+ * a linear regression model on streaming data, and using it\n+ * for prediction on streaming data.\n+ *\n+ * This class takes as type parameters a GeneralizedLinearModel,\n+ * and a GeneralizedLinearAlgorithm, making it easy to extend to construct\n+ * streaming versions of arbitrary regression analyses. For example usage,\n+ * see StreamingLinearRegressionWithSGD.\n+ *\n+ */\n+@DeveloperApi\n+@Experimental\n+abstract class StreamingRegression[\n+    M <: GeneralizedLinearModel,\n+    A <: GeneralizedLinearAlgorithm[M]] extends Logging {\n+\n+  /** The model to be updated and used for prediction. */\n+  var model: M\n+\n+  /** The algorithm to use for updating. */\n+  val algorithm: A"
  }],
  "prId": 1361
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`count` requires one pass through the rdd. I think it should be safe to call `algorithm.run` directly. If there are errors with empty RDDs, we need to fix them in mllib.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-30T03:54:49Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, DeveloperApi}\n+import org.apache.spark.streaming.dstream.DStream\n+\n+/**\n+ * :: DeveloperApi ::\n+ * StreamingRegression implements methods for training\n+ * a linear regression model on streaming data, and using it\n+ * for prediction on streaming data.\n+ *\n+ * This class takes as type parameters a GeneralizedLinearModel,\n+ * and a GeneralizedLinearAlgorithm, making it easy to extend to construct\n+ * streaming versions of arbitrary regression analyses. For example usage,\n+ * see StreamingLinearRegressionWithSGD.\n+ *\n+ */\n+@DeveloperApi\n+@Experimental\n+abstract class StreamingRegression[\n+    M <: GeneralizedLinearModel,\n+    A <: GeneralizedLinearAlgorithm[M]] extends Logging {\n+\n+  /** The model to be updated and used for prediction. */\n+  var model: M\n+\n+  /** The algorithm to use for updating. */\n+  val algorithm: A\n+\n+  /** Return the latest model. */\n+  def latest(): M = {\n+    model\n+  }\n+\n+  /**\n+   * Update the model by training on batches of data from a DStream.\n+   * This operation registers a DStream for training the model,\n+   * and updates the model based on every subsequent non-empty\n+   * batch of data from the stream.\n+   *\n+   * @param data DStream containing labeled data\n+   */\n+  def trainOn(data: DStream[LabeledPoint]) {\n+    data.foreachRDD{\n+      rdd =>\n+        if (rdd.count() > 0) {"
  }, {
    "author": {
      "login": "freeman-lab"
    },
    "body": "Ok cool, without this we get NaNs when updating empty RDDs. I'm tracking it down, but pretty sure we'd just need to fix `runMiniBatchSGD` from `GradientDescent`. A count already happens there (line 161), maybe just have it return the initial weights if that count is 0?\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-31T07:00:09Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, DeveloperApi}\n+import org.apache.spark.streaming.dstream.DStream\n+\n+/**\n+ * :: DeveloperApi ::\n+ * StreamingRegression implements methods for training\n+ * a linear regression model on streaming data, and using it\n+ * for prediction on streaming data.\n+ *\n+ * This class takes as type parameters a GeneralizedLinearModel,\n+ * and a GeneralizedLinearAlgorithm, making it easy to extend to construct\n+ * streaming versions of arbitrary regression analyses. For example usage,\n+ * see StreamingLinearRegressionWithSGD.\n+ *\n+ */\n+@DeveloperApi\n+@Experimental\n+abstract class StreamingRegression[\n+    M <: GeneralizedLinearModel,\n+    A <: GeneralizedLinearAlgorithm[M]] extends Logging {\n+\n+  /** The model to be updated and used for prediction. */\n+  var model: M\n+\n+  /** The algorithm to use for updating. */\n+  val algorithm: A\n+\n+  /** Return the latest model. */\n+  def latest(): M = {\n+    model\n+  }\n+\n+  /**\n+   * Update the model by training on batches of data from a DStream.\n+   * This operation registers a DStream for training the model,\n+   * and updates the model based on every subsequent non-empty\n+   * batch of data from the stream.\n+   *\n+   * @param data DStream containing labeled data\n+   */\n+  def trainOn(data: DStream[LabeledPoint]) {\n+    data.foreachRDD{\n+      rdd =>\n+        if (rdd.count() > 0) {"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "That sounds good! Do you mind including that change in this PR?\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-31T08:21:55Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, DeveloperApi}\n+import org.apache.spark.streaming.dstream.DStream\n+\n+/**\n+ * :: DeveloperApi ::\n+ * StreamingRegression implements methods for training\n+ * a linear regression model on streaming data, and using it\n+ * for prediction on streaming data.\n+ *\n+ * This class takes as type parameters a GeneralizedLinearModel,\n+ * and a GeneralizedLinearAlgorithm, making it easy to extend to construct\n+ * streaming versions of arbitrary regression analyses. For example usage,\n+ * see StreamingLinearRegressionWithSGD.\n+ *\n+ */\n+@DeveloperApi\n+@Experimental\n+abstract class StreamingRegression[\n+    M <: GeneralizedLinearModel,\n+    A <: GeneralizedLinearAlgorithm[M]] extends Logging {\n+\n+  /** The model to be updated and used for prediction. */\n+  var model: M\n+\n+  /** The algorithm to use for updating. */\n+  val algorithm: A\n+\n+  /** Return the latest model. */\n+  def latest(): M = {\n+    model\n+  }\n+\n+  /**\n+   * Update the model by training on batches of data from a DStream.\n+   * This operation registers a DStream for training the model,\n+   * and updates the model based on every subsequent non-empty\n+   * batch of data from the stream.\n+   *\n+   * @param data DStream containing labeled data\n+   */\n+  def trainOn(data: DStream[LabeledPoint]) {\n+    data.foreachRDD{\n+      rdd =>\n+        if (rdd.count() > 0) {"
  }, {
    "author": {
      "login": "freeman-lab"
    },
    "body": "For sure!\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-31T21:25:01Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, DeveloperApi}\n+import org.apache.spark.streaming.dstream.DStream\n+\n+/**\n+ * :: DeveloperApi ::\n+ * StreamingRegression implements methods for training\n+ * a linear regression model on streaming data, and using it\n+ * for prediction on streaming data.\n+ *\n+ * This class takes as type parameters a GeneralizedLinearModel,\n+ * and a GeneralizedLinearAlgorithm, making it easy to extend to construct\n+ * streaming versions of arbitrary regression analyses. For example usage,\n+ * see StreamingLinearRegressionWithSGD.\n+ *\n+ */\n+@DeveloperApi\n+@Experimental\n+abstract class StreamingRegression[\n+    M <: GeneralizedLinearModel,\n+    A <: GeneralizedLinearAlgorithm[M]] extends Logging {\n+\n+  /** The model to be updated and used for prediction. */\n+  var model: M\n+\n+  /** The algorithm to use for updating. */\n+  val algorithm: A\n+\n+  /** Return the latest model. */\n+  def latest(): M = {\n+    model\n+  }\n+\n+  /**\n+   * Update the model by training on batches of data from a DStream.\n+   * This operation registers a DStream for training the model,\n+   * and updates the model based on every subsequent non-empty\n+   * batch of data from the stream.\n+   *\n+   * @param data DStream containing labeled data\n+   */\n+  def trainOn(data: DStream[LabeledPoint]) {\n+    data.foreachRDD{\n+      rdd =>\n+        if (rdd.count() > 0) {"
  }],
  "prId": 1361
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`weights` may contain millions of values. We can output the first 100, for example.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-30T03:56:01Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, DeveloperApi}\n+import org.apache.spark.streaming.dstream.DStream\n+\n+/**\n+ * :: DeveloperApi ::\n+ * StreamingRegression implements methods for training\n+ * a linear regression model on streaming data, and using it\n+ * for prediction on streaming data.\n+ *\n+ * This class takes as type parameters a GeneralizedLinearModel,\n+ * and a GeneralizedLinearAlgorithm, making it easy to extend to construct\n+ * streaming versions of arbitrary regression analyses. For example usage,\n+ * see StreamingLinearRegressionWithSGD.\n+ *\n+ */\n+@DeveloperApi\n+@Experimental\n+abstract class StreamingRegression[\n+    M <: GeneralizedLinearModel,\n+    A <: GeneralizedLinearAlgorithm[M]] extends Logging {\n+\n+  /** The model to be updated and used for prediction. */\n+  var model: M\n+\n+  /** The algorithm to use for updating. */\n+  val algorithm: A\n+\n+  /** Return the latest model. */\n+  def latest(): M = {\n+    model\n+  }\n+\n+  /**\n+   * Update the model by training on batches of data from a DStream.\n+   * This operation registers a DStream for training the model,\n+   * and updates the model based on every subsequent non-empty\n+   * batch of data from the stream.\n+   *\n+   * @param data DStream containing labeled data\n+   */\n+  def trainOn(data: DStream[LabeledPoint]) {\n+    data.foreachRDD{\n+      rdd =>\n+        if (rdd.count() > 0) {\n+          model = algorithm.run(rdd, model.weights)\n+          logInfo(\"Model updated\")\n+        }\n+        logInfo(\"Current model: weights, %s\".format(model.weights.toString))"
  }],
  "prId": 1361
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "The intercept won't be updated because we didn't pass the intercept in line 65. This is due to our implementation of GLM. I think we can ignore intercept and ask user to append the bias to the original data if they need intercept.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-30T03:57:42Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, DeveloperApi}\n+import org.apache.spark.streaming.dstream.DStream\n+\n+/**\n+ * :: DeveloperApi ::\n+ * StreamingRegression implements methods for training\n+ * a linear regression model on streaming data, and using it\n+ * for prediction on streaming data.\n+ *\n+ * This class takes as type parameters a GeneralizedLinearModel,\n+ * and a GeneralizedLinearAlgorithm, making it easy to extend to construct\n+ * streaming versions of arbitrary regression analyses. For example usage,\n+ * see StreamingLinearRegressionWithSGD.\n+ *\n+ */\n+@DeveloperApi\n+@Experimental\n+abstract class StreamingRegression[\n+    M <: GeneralizedLinearModel,\n+    A <: GeneralizedLinearAlgorithm[M]] extends Logging {\n+\n+  /** The model to be updated and used for prediction. */\n+  var model: M\n+\n+  /** The algorithm to use for updating. */\n+  val algorithm: A\n+\n+  /** Return the latest model. */\n+  def latest(): M = {\n+    model\n+  }\n+\n+  /**\n+   * Update the model by training on batches of data from a DStream.\n+   * This operation registers a DStream for training the model,\n+   * and updates the model based on every subsequent non-empty\n+   * batch of data from the stream.\n+   *\n+   * @param data DStream containing labeled data\n+   */\n+  def trainOn(data: DStream[LabeledPoint]) {\n+    data.foreachRDD{\n+      rdd =>\n+        if (rdd.count() > 0) {\n+          model = algorithm.run(rdd, model.weights)\n+          logInfo(\"Model updated\")\n+        }\n+        logInfo(\"Current model: weights, %s\".format(model.weights.toString))\n+        logInfo(\"Current model: intercept, %s\".format(model.intercept.toString))"
  }, {
    "author": {
      "login": "freeman-lab"
    },
    "body": "Yup, I noticed this. It could also work to call `setIntercept(addIntercept=true)` where the algorithm is defined (e.g. within `StreamingLinearRegressionWithSGD`), and have a setter to control this. Estimating an intercept from scratch on each update should be well constrained because we'll be starting from the current weights.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-31T06:59:11Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, DeveloperApi}\n+import org.apache.spark.streaming.dstream.DStream\n+\n+/**\n+ * :: DeveloperApi ::\n+ * StreamingRegression implements methods for training\n+ * a linear regression model on streaming data, and using it\n+ * for prediction on streaming data.\n+ *\n+ * This class takes as type parameters a GeneralizedLinearModel,\n+ * and a GeneralizedLinearAlgorithm, making it easy to extend to construct\n+ * streaming versions of arbitrary regression analyses. For example usage,\n+ * see StreamingLinearRegressionWithSGD.\n+ *\n+ */\n+@DeveloperApi\n+@Experimental\n+abstract class StreamingRegression[\n+    M <: GeneralizedLinearModel,\n+    A <: GeneralizedLinearAlgorithm[M]] extends Logging {\n+\n+  /** The model to be updated and used for prediction. */\n+  var model: M\n+\n+  /** The algorithm to use for updating. */\n+  val algorithm: A\n+\n+  /** Return the latest model. */\n+  def latest(): M = {\n+    model\n+  }\n+\n+  /**\n+   * Update the model by training on batches of data from a DStream.\n+   * This operation registers a DStream for training the model,\n+   * and updates the model based on every subsequent non-empty\n+   * batch of data from the stream.\n+   *\n+   * @param data DStream containing labeled data\n+   */\n+  def trainOn(data: DStream[LabeledPoint]) {\n+    data.foreachRDD{\n+      rdd =>\n+        if (rdd.count() > 0) {\n+          model = algorithm.run(rdd, model.weights)\n+          logInfo(\"Model updated\")\n+        }\n+        logInfo(\"Current model: weights, %s\".format(model.weights.toString))\n+        logInfo(\"Current model: intercept, %s\".format(model.intercept.toString))"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "I'm a little worry about the accuracy if we don't provide the previous weight for the intercept. Ignoring the intercept may be safer. Otherwise, if the correct weight for the intercept is large but the step size is small (common for online updates), it may need many steps to recover the weight for the intercept. \n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-31T08:29:12Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, DeveloperApi}\n+import org.apache.spark.streaming.dstream.DStream\n+\n+/**\n+ * :: DeveloperApi ::\n+ * StreamingRegression implements methods for training\n+ * a linear regression model on streaming data, and using it\n+ * for prediction on streaming data.\n+ *\n+ * This class takes as type parameters a GeneralizedLinearModel,\n+ * and a GeneralizedLinearAlgorithm, making it easy to extend to construct\n+ * streaming versions of arbitrary regression analyses. For example usage,\n+ * see StreamingLinearRegressionWithSGD.\n+ *\n+ */\n+@DeveloperApi\n+@Experimental\n+abstract class StreamingRegression[\n+    M <: GeneralizedLinearModel,\n+    A <: GeneralizedLinearAlgorithm[M]] extends Logging {\n+\n+  /** The model to be updated and used for prediction. */\n+  var model: M\n+\n+  /** The algorithm to use for updating. */\n+  val algorithm: A\n+\n+  /** Return the latest model. */\n+  def latest(): M = {\n+    model\n+  }\n+\n+  /**\n+   * Update the model by training on batches of data from a DStream.\n+   * This operation registers a DStream for training the model,\n+   * and updates the model based on every subsequent non-empty\n+   * batch of data from the stream.\n+   *\n+   * @param data DStream containing labeled data\n+   */\n+  def trainOn(data: DStream[LabeledPoint]) {\n+    data.foreachRDD{\n+      rdd =>\n+        if (rdd.count() > 0) {\n+          model = algorithm.run(rdd, model.weights)\n+          logInfo(\"Model updated\")\n+        }\n+        logInfo(\"Current model: weights, %s\".format(model.weights.toString))\n+        logInfo(\"Current model: intercept, %s\".format(model.intercept.toString))"
  }, {
    "author": {
      "login": "freeman-lab"
    },
    "body": "Ok, good points, agreed it's safer. I'll make sure there's a note about this.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-08-01T05:14:18Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, DeveloperApi}\n+import org.apache.spark.streaming.dstream.DStream\n+\n+/**\n+ * :: DeveloperApi ::\n+ * StreamingRegression implements methods for training\n+ * a linear regression model on streaming data, and using it\n+ * for prediction on streaming data.\n+ *\n+ * This class takes as type parameters a GeneralizedLinearModel,\n+ * and a GeneralizedLinearAlgorithm, making it easy to extend to construct\n+ * streaming versions of arbitrary regression analyses. For example usage,\n+ * see StreamingLinearRegressionWithSGD.\n+ *\n+ */\n+@DeveloperApi\n+@Experimental\n+abstract class StreamingRegression[\n+    M <: GeneralizedLinearModel,\n+    A <: GeneralizedLinearAlgorithm[M]] extends Logging {\n+\n+  /** The model to be updated and used for prediction. */\n+  var model: M\n+\n+  /** The algorithm to use for updating. */\n+  val algorithm: A\n+\n+  /** Return the latest model. */\n+  def latest(): M = {\n+    model\n+  }\n+\n+  /**\n+   * Update the model by training on batches of data from a DStream.\n+   * This operation registers a DStream for training the model,\n+   * and updates the model based on every subsequent non-empty\n+   * batch of data from the stream.\n+   *\n+   * @param data DStream containing labeled data\n+   */\n+  def trainOn(data: DStream[LabeledPoint]) {\n+    data.foreachRDD{\n+      rdd =>\n+        if (rdd.count() > 0) {\n+          model = algorithm.run(rdd, model.weights)\n+          logInfo(\"Model updated\")\n+        }\n+        logInfo(\"Current model: weights, %s\".format(model.weights.toString))\n+        logInfo(\"Current model: intercept, %s\".format(model.intercept.toString))"
  }],
  "prId": 1361
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Spark's code style prefers the following:\n\n```\ndata.foreachRDD { rdd =>\n  ...\n```\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-30T04:14:43Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, DeveloperApi}\n+import org.apache.spark.streaming.dstream.DStream\n+\n+/**\n+ * :: DeveloperApi ::\n+ * StreamingRegression implements methods for training\n+ * a linear regression model on streaming data, and using it\n+ * for prediction on streaming data.\n+ *\n+ * This class takes as type parameters a GeneralizedLinearModel,\n+ * and a GeneralizedLinearAlgorithm, making it easy to extend to construct\n+ * streaming versions of arbitrary regression analyses. For example usage,\n+ * see StreamingLinearRegressionWithSGD.\n+ *\n+ */\n+@DeveloperApi\n+@Experimental\n+abstract class StreamingRegression[\n+    M <: GeneralizedLinearModel,\n+    A <: GeneralizedLinearAlgorithm[M]] extends Logging {\n+\n+  /** The model to be updated and used for prediction. */\n+  var model: M\n+\n+  /** The algorithm to use for updating. */\n+  val algorithm: A\n+\n+  /** Return the latest model. */\n+  def latest(): M = {\n+    model\n+  }\n+\n+  /**\n+   * Update the model by training on batches of data from a DStream.\n+   * This operation registers a DStream for training the model,\n+   * and updates the model based on every subsequent non-empty\n+   * batch of data from the stream.\n+   *\n+   * @param data DStream containing labeled data\n+   */\n+  def trainOn(data: DStream[LabeledPoint]) {\n+    data.foreachRDD{\n+      rdd =>"
  }],
  "prId": 1361
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Maybe we can add more information to it, for example, the current time.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-30T04:15:28Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, DeveloperApi}\n+import org.apache.spark.streaming.dstream.DStream\n+\n+/**\n+ * :: DeveloperApi ::\n+ * StreamingRegression implements methods for training\n+ * a linear regression model on streaming data, and using it\n+ * for prediction on streaming data.\n+ *\n+ * This class takes as type parameters a GeneralizedLinearModel,\n+ * and a GeneralizedLinearAlgorithm, making it easy to extend to construct\n+ * streaming versions of arbitrary regression analyses. For example usage,\n+ * see StreamingLinearRegressionWithSGD.\n+ *\n+ */\n+@DeveloperApi\n+@Experimental\n+abstract class StreamingRegression[\n+    M <: GeneralizedLinearModel,\n+    A <: GeneralizedLinearAlgorithm[M]] extends Logging {\n+\n+  /** The model to be updated and used for prediction. */\n+  var model: M\n+\n+  /** The algorithm to use for updating. */\n+  val algorithm: A\n+\n+  /** Return the latest model. */\n+  def latest(): M = {\n+    model\n+  }\n+\n+  /**\n+   * Update the model by training on batches of data from a DStream.\n+   * This operation registers a DStream for training the model,\n+   * and updates the model based on every subsequent non-empty\n+   * batch of data from the stream.\n+   *\n+   * @param data DStream containing labeled data\n+   */\n+  def trainOn(data: DStream[LabeledPoint]) {\n+    data.foreachRDD{\n+      rdd =>\n+        if (rdd.count() > 0) {\n+          model = algorithm.run(rdd, model.weights)\n+          logInfo(\"Model updated\")"
  }, {
    "author": {
      "login": "freeman-lab"
    },
    "body": "great idea!\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-31T06:54:45Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, DeveloperApi}\n+import org.apache.spark.streaming.dstream.DStream\n+\n+/**\n+ * :: DeveloperApi ::\n+ * StreamingRegression implements methods for training\n+ * a linear regression model on streaming data, and using it\n+ * for prediction on streaming data.\n+ *\n+ * This class takes as type parameters a GeneralizedLinearModel,\n+ * and a GeneralizedLinearAlgorithm, making it easy to extend to construct\n+ * streaming versions of arbitrary regression analyses. For example usage,\n+ * see StreamingLinearRegressionWithSGD.\n+ *\n+ */\n+@DeveloperApi\n+@Experimental\n+abstract class StreamingRegression[\n+    M <: GeneralizedLinearModel,\n+    A <: GeneralizedLinearAlgorithm[M]] extends Logging {\n+\n+  /** The model to be updated and used for prediction. */\n+  var model: M\n+\n+  /** The algorithm to use for updating. */\n+  val algorithm: A\n+\n+  /** Return the latest model. */\n+  def latest(): M = {\n+    model\n+  }\n+\n+  /**\n+   * Update the model by training on batches of data from a DStream.\n+   * This operation registers a DStream for training the model,\n+   * and updates the model based on every subsequent non-empty\n+   * batch of data from the stream.\n+   *\n+   * @param data DStream containing labeled data\n+   */\n+  def trainOn(data: DStream[LabeledPoint]) {\n+    data.foreachRDD{\n+      rdd =>\n+        if (rdd.count() > 0) {\n+          model = algorithm.run(rdd, model.weights)\n+          logInfo(\"Model updated\")"
  }],
  "prId": 1361
}]