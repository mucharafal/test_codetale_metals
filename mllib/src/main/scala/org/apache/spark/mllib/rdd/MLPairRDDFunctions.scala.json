[{
  "comments": [{
    "author": {
      "login": "debasish83"
    },
    "body": "I have to look closely into it tomorrow...I have been using topByKey internally and did not remember seeing this bug...\n",
    "commit": "22e6a87523e7ca7bc75c75d0af13769d3d7fa7cc",
    "createdAt": "2015-05-01T07:37:50Z",
    "diffHunk": "@@ -39,7 +39,7 @@ class MLPairRDDFunctions[K: ClassTag, V: ClassTag](self: RDD[(K, V)]) extends Se\n    * @return an RDD that contains the top k values for each key\n    */\n   def topByKey(num: Int)(implicit ord: Ordering[V]): RDD[(K, Array[V])] = {\n-    self.aggregateByKey(new BoundedPriorityQueue[V](num)(ord))(\n+    self.aggregateByKey(new BoundedPriorityQueue[V](num)(ord.reverse))("
  }, {
    "author": {
      "login": "debasish83"
    },
    "body": "yup topByKey behavior as implemented was correct...\n",
    "commit": "22e6a87523e7ca7bc75c75d0af13769d3d7fa7cc",
    "createdAt": "2015-05-01T07:45:01Z",
    "diffHunk": "@@ -39,7 +39,7 @@ class MLPairRDDFunctions[K: ClassTag, V: ClassTag](self: RDD[(K, V)]) extends Se\n    * @return an RDD that contains the top k values for each key\n    */\n   def topByKey(num: Int)(implicit ord: Ordering[V]): RDD[(K, Array[V])] = {\n-    self.aggregateByKey(new BoundedPriorityQueue[V](num)(ord))(\n+    self.aggregateByKey(new BoundedPriorityQueue[V](num)(ord.reverse))("
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "It was correct. Pushed an update.\n",
    "commit": "22e6a87523e7ca7bc75c75d0af13769d3d7fa7cc",
    "createdAt": "2015-05-01T07:51:19Z",
    "diffHunk": "@@ -39,7 +39,7 @@ class MLPairRDDFunctions[K: ClassTag, V: ClassTag](self: RDD[(K, V)]) extends Se\n    * @return an RDD that contains the top k values for each key\n    */\n   def topByKey(num: Int)(implicit ord: Ordering[V]): RDD[(K, Array[V])] = {\n-    self.aggregateByKey(new BoundedPriorityQueue[V](num)(ord))(\n+    self.aggregateByKey(new BoundedPriorityQueue[V](num)(ord.reverse))("
  }],
  "prId": 5829
}]