[{
  "comments": [{
    "author": {
      "login": "freeman-lab"
    },
    "body": "Remove parentheses after `getClusters`\n",
    "commit": "29ccdf9eaa987530435782d2051acbeda3d3ac36",
    "createdAt": "2015-04-27T05:32:11Z",
    "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.clustering\n+\n+import breeze.linalg.{DenseVector => BDV, Vector => BV, norm => breezeNorm}\n+import org.apache.spark.api.java.JavaRDD\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.mllib.util.{Loader, Saveable}\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.{Logging, SparkContext}\n+\n+/**\n+ * This class is used for the model of the hierarchical clustering\n+ *\n+ * @param tree a cluster as a tree node\n+ */\n+class HierarchicalClusteringModel(val tree: ClusterTree)\n+    extends Serializable with Saveable with Logging {\n+\n+  /** Current version of model save/load format. */\n+  override protected def formatVersion: String = \"1.0\"\n+\n+  override def save(sc: SparkContext, path: String) {\n+    val oos = new java.io.ObjectOutputStream(new java.io.FileOutputStream(path))\n+    try {\n+      oos.writeObject(this)\n+    } finally {\n+      oos.close()\n+    }\n+  }\n+\n+  def getClusters(): Array[ClusterTree] = this.tree.getLeavesNodes()"
  }],
  "prId": 5267
}, {
  "comments": [{
    "author": {
      "login": "freeman-lab"
    },
    "body": "Remove parentheses after `getCenters`\n",
    "commit": "29ccdf9eaa987530435782d2051acbeda3d3ac36",
    "createdAt": "2015-04-27T05:32:16Z",
    "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.clustering\n+\n+import breeze.linalg.{DenseVector => BDV, Vector => BV, norm => breezeNorm}\n+import org.apache.spark.api.java.JavaRDD\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.mllib.util.{Loader, Saveable}\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.{Logging, SparkContext}\n+\n+/**\n+ * This class is used for the model of the hierarchical clustering\n+ *\n+ * @param tree a cluster as a tree node\n+ */\n+class HierarchicalClusteringModel(val tree: ClusterTree)\n+    extends Serializable with Saveable with Logging {\n+\n+  /** Current version of model save/load format. */\n+  override protected def formatVersion: String = \"1.0\"\n+\n+  override def save(sc: SparkContext, path: String) {\n+    val oos = new java.io.ObjectOutputStream(new java.io.FileOutputStream(path))\n+    try {\n+      oos.writeObject(this)\n+    } finally {\n+      oos.close()\n+    }\n+  }\n+\n+  def getClusters(): Array[ClusterTree] = this.tree.getLeavesNodes()\n+\n+  def getCenters(): Array[Vector] = this.getClusters().map(_.center)"
  }],
  "prId": 5267
}]