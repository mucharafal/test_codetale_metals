[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Why are these 3 vars?\n",
    "commit": "852aac6149d4d0c932ff34e959d148419b369983",
    "createdAt": "2014-11-03T06:57:35Z",
    "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.export.pmml\n+\n+import org.apache.spark.mllib.clustering.KMeansModel\n+import org.dmg.pmml.DataDictionary\n+import org.dmg.pmml.FieldName\n+import org.dmg.pmml.DataField\n+import org.dmg.pmml.OpType\n+import org.dmg.pmml.DataType\n+import org.dmg.pmml.MiningSchema\n+import org.dmg.pmml.MiningField\n+import org.dmg.pmml.FieldUsageType\n+import org.dmg.pmml.ComparisonMeasure\n+import org.dmg.pmml.ComparisonMeasure.Kind\n+import org.dmg.pmml.SquaredEuclidean\n+import org.dmg.pmml.ClusteringModel\n+import org.dmg.pmml.MiningFunctionType\n+import org.dmg.pmml.ClusteringModel.ModelClass\n+import org.dmg.pmml.ClusteringField\n+import org.dmg.pmml.CompareFunctionType\n+import org.dmg.pmml.Cluster\n+import org.dmg.pmml.Array.Type\n+\n+/**\n+ * PMML Model Export for KMeansModel class\n+ */\n+class KMeansPMMLModelExport(model : KMeansModel) extends PMMLModelExport{\n+\n+  /**\n+   * Export the input KMeansModel model to PMML format\n+   */\n+  populateKMeansPMML(model);\n+  \n+  private def populateKMeansPMML(model : KMeansModel): Unit = {\n+    \n+     pmml.getHeader().setDescription(\"k-means clustering\"); \n+     \n+     if(model.clusterCenters.length > 0){\n+       \n+       val clusterCenter = model.clusterCenters(0)\n+       \n+       var fields = new Array[FieldName](clusterCenter.size)\n+       \n+       var dataDictionary = new DataDictionary()"
  }, {
    "author": {
      "login": "selvinsource"
    },
    "body": "I guess they don't need to be, I will review var/val usage.\n",
    "commit": "852aac6149d4d0c932ff34e959d148419b369983",
    "createdAt": "2014-11-03T22:07:16Z",
    "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.export.pmml\n+\n+import org.apache.spark.mllib.clustering.KMeansModel\n+import org.dmg.pmml.DataDictionary\n+import org.dmg.pmml.FieldName\n+import org.dmg.pmml.DataField\n+import org.dmg.pmml.OpType\n+import org.dmg.pmml.DataType\n+import org.dmg.pmml.MiningSchema\n+import org.dmg.pmml.MiningField\n+import org.dmg.pmml.FieldUsageType\n+import org.dmg.pmml.ComparisonMeasure\n+import org.dmg.pmml.ComparisonMeasure.Kind\n+import org.dmg.pmml.SquaredEuclidean\n+import org.dmg.pmml.ClusteringModel\n+import org.dmg.pmml.MiningFunctionType\n+import org.dmg.pmml.ClusteringModel.ModelClass\n+import org.dmg.pmml.ClusteringField\n+import org.dmg.pmml.CompareFunctionType\n+import org.dmg.pmml.Cluster\n+import org.dmg.pmml.Array.Type\n+\n+/**\n+ * PMML Model Export for KMeansModel class\n+ */\n+class KMeansPMMLModelExport(model : KMeansModel) extends PMMLModelExport{\n+\n+  /**\n+   * Export the input KMeansModel model to PMML format\n+   */\n+  populateKMeansPMML(model);\n+  \n+  private def populateKMeansPMML(model : KMeansModel): Unit = {\n+    \n+     pmml.getHeader().setDescription(\"k-means clustering\"); \n+     \n+     if(model.clusterCenters.length > 0){\n+       \n+       val clusterCenter = model.clusterCenters(0)\n+       \n+       var fields = new Array[FieldName](clusterCenter.size)\n+       \n+       var dataDictionary = new DataDictionary()"
  }],
  "prId": 3062
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "This is a notable issue to discuss -- the MLlib models don't have any indication of what the fields are. Although you can make up a \"field_X\" name for them it kind of makes the resulting model unusable. I think this may require later changes that may be coming in MLlib where MLlib might have more of a notion of schema.\n",
    "commit": "852aac6149d4d0c932ff34e959d148419b369983",
    "createdAt": "2014-11-03T06:58:54Z",
    "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.export.pmml\n+\n+import org.apache.spark.mllib.clustering.KMeansModel\n+import org.dmg.pmml.DataDictionary\n+import org.dmg.pmml.FieldName\n+import org.dmg.pmml.DataField\n+import org.dmg.pmml.OpType\n+import org.dmg.pmml.DataType\n+import org.dmg.pmml.MiningSchema\n+import org.dmg.pmml.MiningField\n+import org.dmg.pmml.FieldUsageType\n+import org.dmg.pmml.ComparisonMeasure\n+import org.dmg.pmml.ComparisonMeasure.Kind\n+import org.dmg.pmml.SquaredEuclidean\n+import org.dmg.pmml.ClusteringModel\n+import org.dmg.pmml.MiningFunctionType\n+import org.dmg.pmml.ClusteringModel.ModelClass\n+import org.dmg.pmml.ClusteringField\n+import org.dmg.pmml.CompareFunctionType\n+import org.dmg.pmml.Cluster\n+import org.dmg.pmml.Array.Type\n+\n+/**\n+ * PMML Model Export for KMeansModel class\n+ */\n+class KMeansPMMLModelExport(model : KMeansModel) extends PMMLModelExport{\n+\n+  /**\n+   * Export the input KMeansModel model to PMML format\n+   */\n+  populateKMeansPMML(model);\n+  \n+  private def populateKMeansPMML(model : KMeansModel): Unit = {\n+    \n+     pmml.getHeader().setDescription(\"k-means clustering\"); \n+     \n+     if(model.clusterCenters.length > 0){\n+       \n+       val clusterCenter = model.clusterCenters(0)\n+       \n+       var fields = new Array[FieldName](clusterCenter.size)\n+       \n+       var dataDictionary = new DataDictionary()\n+       \n+       var miningSchema = new MiningSchema()\n+       \n+       var comparisonMeasure = new ComparisonMeasure()\n+            .withKind(Kind.DISTANCE)\n+            .withMeasure(new SquaredEuclidean()\n+       );\n+       \n+       var clusteringModel = new ClusteringModel(miningSchema, comparisonMeasure, \n+        MiningFunctionType.CLUSTERING, ModelClass.CENTER_BASED, model.clusterCenters.length)\n+        .withModelName(\"k-means\");\n+       \n+       for ( i <- 0 to (clusterCenter.size - 1)) {\n+         fields(i) = FieldName.create(\"field_\" + i)"
  }, {
    "author": {
      "login": "selvinsource"
    },
    "body": "Yeah, when trying to populate the data dictionary I realized the model didn't have the notion of the schema. At first I was thinking that the list of field names could be provided when exporting to PMML but really this should be in the model itself.\n",
    "commit": "852aac6149d4d0c932ff34e959d148419b369983",
    "createdAt": "2014-11-03T22:15:24Z",
    "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.export.pmml\n+\n+import org.apache.spark.mllib.clustering.KMeansModel\n+import org.dmg.pmml.DataDictionary\n+import org.dmg.pmml.FieldName\n+import org.dmg.pmml.DataField\n+import org.dmg.pmml.OpType\n+import org.dmg.pmml.DataType\n+import org.dmg.pmml.MiningSchema\n+import org.dmg.pmml.MiningField\n+import org.dmg.pmml.FieldUsageType\n+import org.dmg.pmml.ComparisonMeasure\n+import org.dmg.pmml.ComparisonMeasure.Kind\n+import org.dmg.pmml.SquaredEuclidean\n+import org.dmg.pmml.ClusteringModel\n+import org.dmg.pmml.MiningFunctionType\n+import org.dmg.pmml.ClusteringModel.ModelClass\n+import org.dmg.pmml.ClusteringField\n+import org.dmg.pmml.CompareFunctionType\n+import org.dmg.pmml.Cluster\n+import org.dmg.pmml.Array.Type\n+\n+/**\n+ * PMML Model Export for KMeansModel class\n+ */\n+class KMeansPMMLModelExport(model : KMeansModel) extends PMMLModelExport{\n+\n+  /**\n+   * Export the input KMeansModel model to PMML format\n+   */\n+  populateKMeansPMML(model);\n+  \n+  private def populateKMeansPMML(model : KMeansModel): Unit = {\n+    \n+     pmml.getHeader().setDescription(\"k-means clustering\"); \n+     \n+     if(model.clusterCenters.length > 0){\n+       \n+       val clusterCenter = model.clusterCenters(0)\n+       \n+       var fields = new Array[FieldName](clusterCenter.size)\n+       \n+       var dataDictionary = new DataDictionary()\n+       \n+       var miningSchema = new MiningSchema()\n+       \n+       var comparisonMeasure = new ComparisonMeasure()\n+            .withKind(Kind.DISTANCE)\n+            .withMeasure(new SquaredEuclidean()\n+       );\n+       \n+       var clusteringModel = new ClusteringModel(miningSchema, comparisonMeasure, \n+        MiningFunctionType.CLUSTERING, ModelClass.CENTER_BASED, model.clusterCenters.length)\n+        .withModelName(\"k-means\");\n+       \n+       for ( i <- 0 to (clusterCenter.size - 1)) {\n+         fields(i) = FieldName.create(\"field_\" + i)"
  }, {
    "author": {
      "login": "selvinsource"
    },
    "body": "However I still find it useful if the end goal of the export is to load it in your own decoupled app, therefore you will know the order of the fields.\n",
    "commit": "852aac6149d4d0c932ff34e959d148419b369983",
    "createdAt": "2014-11-03T22:27:32Z",
    "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.export.pmml\n+\n+import org.apache.spark.mllib.clustering.KMeansModel\n+import org.dmg.pmml.DataDictionary\n+import org.dmg.pmml.FieldName\n+import org.dmg.pmml.DataField\n+import org.dmg.pmml.OpType\n+import org.dmg.pmml.DataType\n+import org.dmg.pmml.MiningSchema\n+import org.dmg.pmml.MiningField\n+import org.dmg.pmml.FieldUsageType\n+import org.dmg.pmml.ComparisonMeasure\n+import org.dmg.pmml.ComparisonMeasure.Kind\n+import org.dmg.pmml.SquaredEuclidean\n+import org.dmg.pmml.ClusteringModel\n+import org.dmg.pmml.MiningFunctionType\n+import org.dmg.pmml.ClusteringModel.ModelClass\n+import org.dmg.pmml.ClusteringField\n+import org.dmg.pmml.CompareFunctionType\n+import org.dmg.pmml.Cluster\n+import org.dmg.pmml.Array.Type\n+\n+/**\n+ * PMML Model Export for KMeansModel class\n+ */\n+class KMeansPMMLModelExport(model : KMeansModel) extends PMMLModelExport{\n+\n+  /**\n+   * Export the input KMeansModel model to PMML format\n+   */\n+  populateKMeansPMML(model);\n+  \n+  private def populateKMeansPMML(model : KMeansModel): Unit = {\n+    \n+     pmml.getHeader().setDescription(\"k-means clustering\"); \n+     \n+     if(model.clusterCenters.length > 0){\n+       \n+       val clusterCenter = model.clusterCenters(0)\n+       \n+       var fields = new Array[FieldName](clusterCenter.size)\n+       \n+       var dataDictionary = new DataDictionary()\n+       \n+       var miningSchema = new MiningSchema()\n+       \n+       var comparisonMeasure = new ComparisonMeasure()\n+            .withKind(Kind.DISTANCE)\n+            .withMeasure(new SquaredEuclidean()\n+       );\n+       \n+       var clusteringModel = new ClusteringModel(miningSchema, comparisonMeasure, \n+        MiningFunctionType.CLUSTERING, ModelClass.CENTER_BASED, model.clusterCenters.length)\n+        .withModelName(\"k-means\");\n+       \n+       for ( i <- 0 to (clusterCenter.size - 1)) {\n+         fields(i) = FieldName.create(\"field_\" + i)"
  }],
  "prId": 3062
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "use `until clusterCenter.size` in Scala\n",
    "commit": "852aac6149d4d0c932ff34e959d148419b369983",
    "createdAt": "2014-11-03T06:59:16Z",
    "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.export.pmml\n+\n+import org.apache.spark.mllib.clustering.KMeansModel\n+import org.dmg.pmml.DataDictionary\n+import org.dmg.pmml.FieldName\n+import org.dmg.pmml.DataField\n+import org.dmg.pmml.OpType\n+import org.dmg.pmml.DataType\n+import org.dmg.pmml.MiningSchema\n+import org.dmg.pmml.MiningField\n+import org.dmg.pmml.FieldUsageType\n+import org.dmg.pmml.ComparisonMeasure\n+import org.dmg.pmml.ComparisonMeasure.Kind\n+import org.dmg.pmml.SquaredEuclidean\n+import org.dmg.pmml.ClusteringModel\n+import org.dmg.pmml.MiningFunctionType\n+import org.dmg.pmml.ClusteringModel.ModelClass\n+import org.dmg.pmml.ClusteringField\n+import org.dmg.pmml.CompareFunctionType\n+import org.dmg.pmml.Cluster\n+import org.dmg.pmml.Array.Type\n+\n+/**\n+ * PMML Model Export for KMeansModel class\n+ */\n+class KMeansPMMLModelExport(model : KMeansModel) extends PMMLModelExport{\n+\n+  /**\n+   * Export the input KMeansModel model to PMML format\n+   */\n+  populateKMeansPMML(model);\n+  \n+  private def populateKMeansPMML(model : KMeansModel): Unit = {\n+    \n+     pmml.getHeader().setDescription(\"k-means clustering\"); \n+     \n+     if(model.clusterCenters.length > 0){\n+       \n+       val clusterCenter = model.clusterCenters(0)\n+       \n+       var fields = new Array[FieldName](clusterCenter.size)\n+       \n+       var dataDictionary = new DataDictionary()\n+       \n+       var miningSchema = new MiningSchema()\n+       \n+       var comparisonMeasure = new ComparisonMeasure()\n+            .withKind(Kind.DISTANCE)\n+            .withMeasure(new SquaredEuclidean()\n+       );\n+       \n+       var clusteringModel = new ClusteringModel(miningSchema, comparisonMeasure, \n+        MiningFunctionType.CLUSTERING, ModelClass.CENTER_BASED, model.clusterCenters.length)\n+        .withModelName(\"k-means\");\n+       \n+       for ( i <- 0 to (clusterCenter.size - 1)) {"
  }, {
    "author": {
      "login": "selvinsource"
    },
    "body": "ok\n",
    "commit": "852aac6149d4d0c932ff34e959d148419b369983",
    "createdAt": "2014-11-03T22:20:46Z",
    "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.export.pmml\n+\n+import org.apache.spark.mllib.clustering.KMeansModel\n+import org.dmg.pmml.DataDictionary\n+import org.dmg.pmml.FieldName\n+import org.dmg.pmml.DataField\n+import org.dmg.pmml.OpType\n+import org.dmg.pmml.DataType\n+import org.dmg.pmml.MiningSchema\n+import org.dmg.pmml.MiningField\n+import org.dmg.pmml.FieldUsageType\n+import org.dmg.pmml.ComparisonMeasure\n+import org.dmg.pmml.ComparisonMeasure.Kind\n+import org.dmg.pmml.SquaredEuclidean\n+import org.dmg.pmml.ClusteringModel\n+import org.dmg.pmml.MiningFunctionType\n+import org.dmg.pmml.ClusteringModel.ModelClass\n+import org.dmg.pmml.ClusteringField\n+import org.dmg.pmml.CompareFunctionType\n+import org.dmg.pmml.Cluster\n+import org.dmg.pmml.Array.Type\n+\n+/**\n+ * PMML Model Export for KMeansModel class\n+ */\n+class KMeansPMMLModelExport(model : KMeansModel) extends PMMLModelExport{\n+\n+  /**\n+   * Export the input KMeansModel model to PMML format\n+   */\n+  populateKMeansPMML(model);\n+  \n+  private def populateKMeansPMML(model : KMeansModel): Unit = {\n+    \n+     pmml.getHeader().setDescription(\"k-means clustering\"); \n+     \n+     if(model.clusterCenters.length > 0){\n+       \n+       val clusterCenter = model.clusterCenters(0)\n+       \n+       var fields = new Array[FieldName](clusterCenter.size)\n+       \n+       var dataDictionary = new DataDictionary()\n+       \n+       var miningSchema = new MiningSchema()\n+       \n+       var comparisonMeasure = new ComparisonMeasure()\n+            .withKind(Kind.DISTANCE)\n+            .withMeasure(new SquaredEuclidean()\n+       );\n+       \n+       var clusteringModel = new ClusteringModel(miningSchema, comparisonMeasure, \n+        MiningFunctionType.CLUSTERING, ModelClass.CENTER_BASED, model.clusterCenters.length)\n+        .withModelName(\"k-means\");\n+       \n+       for ( i <- 0 to (clusterCenter.size - 1)) {"
  }],
  "prId": 3062
}]