[{
  "comments": [{
    "author": {
      "login": "MechCoder"
    },
    "body": "Since Lasso, Ridge and LinearRegression have almost similar methods, I think it might be better to have an abstract class with all three deriving from it and a protected `algorithm` method, to avoid code duplication WDYT?\n",
    "commit": "1977d2b6305c99767bdcc3393743639062d82b89",
    "createdAt": "2015-06-17T18:31:36Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg.Vector\n+\n+/**\n+ * :: Experimental ::\n+ * Train or predict a linear regression model on streaming data. Training uses\n+ * Stochastic Gradient Descent to update the model based on each new batch of\n+ * incoming data from a DStream (see `LinearRegressionWithSGD` for model equation)\n+ *\n+ * Each batch of data is assumed to be an RDD of LabeledPoints.\n+ * The number of data points per batch can vary, but the number\n+ * of features must be constant. An initial weight\n+ * vector must be provided.\n+ *\n+ * Use a builder pattern to construct a streaming linear regression\n+ * analysis in an application, like:\n+ *\n+ *  val model = new StreamingLassoWithSGD()\n+ *    .setStepSize(0.5)\n+ *    .setNumIterations(10)\n+ *    .setInitialWeights(Vectors.dense(...))\n+ *    .trainOn(DStream)\n+ *\n+ */\n+@Experimental\n+class StreamingLassoWithSGD private[mllib](",
    "line": 45
  }],
  "prId": 4456
}]