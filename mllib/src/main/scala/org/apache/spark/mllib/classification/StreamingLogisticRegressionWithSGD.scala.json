[{
  "comments": [{
    "author": {
      "login": "feynmanliang"
    },
    "body": "\"[[StreamingLinearAlgorithm]]\" so API docs generate a link, ditto for L37\n",
    "commit": "0072400825c0c4a871467a92799d12752fe96402",
    "createdAt": "2015-08-27T21:40:38Z",
    "diffHunk": "@@ -32,6 +32,11 @@ import org.apache.spark.mllib.regression.StreamingLinearAlgorithm\n  * of features must be constant. An initial weight\n  * vector must be provided.\n  *\n+ * This class inherits the forgetful algorithm from StreamingLinearAlgorithm"
  }],
  "prId": 8022
}, {
  "comments": [{
    "author": {
      "login": "feynmanliang"
    },
    "body": "This boilerplate is duplicated in streaming linear regression. I am guessing you do this to get the concrete subclass (correct me if I'm wrong), but you actually don't need to do this since the `this.type` in `trait StreamingDecay` takes care of this. A simple REPL example:\n\n``` scala\nscala> trait Superclass { def test: this.type }\ndefined trait Superclass\n\nscala> class Subclass extends Superclass { def test = this }\ndefined class Subclass\n\nscala> (new Subclass()).test\nres0: Subclass = Subclass@1cb4ab3e\n```\n",
    "commit": "0072400825c0c4a871467a92799d12752fe96402",
    "createdAt": "2015-09-03T17:46:48Z",
    "diffHunk": "@@ -101,4 +107,14 @@ class StreamingLogisticRegressionWithSGD private[mllib] (\n     this.model = Some(algorithm.createModel(initialWeights, 0.0))\n     this\n   }\n+\n+  override def setDecayFactor(decayFactor: Double): this.type = {",
    "line": 17
  }, {
    "author": {
      "login": "rotationsymmetry"
    },
    "body": "fixed.\n",
    "commit": "0072400825c0c4a871467a92799d12752fe96402",
    "createdAt": "2015-09-04T02:41:48Z",
    "diffHunk": "@@ -101,4 +107,14 @@ class StreamingLogisticRegressionWithSGD private[mllib] (\n     this.model = Some(algorithm.createModel(initialWeights, 0.0))\n     this\n   }\n+\n+  override def setDecayFactor(decayFactor: Double): this.type = {",
    "line": 17
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "Oh, I meant that you could remove these setters entirely\n\n``` scala\nscala> trait Superclass { def test: this.type = this }\ndefined trait Superclass\n\nscala> class Subclass extends Superclass\ndefined class Subclass\n\nscala> (new Subclass).test\nres1: Subclass = Subclass@b364520\n```\n",
    "commit": "0072400825c0c4a871467a92799d12752fe96402",
    "createdAt": "2015-09-05T02:59:30Z",
    "diffHunk": "@@ -101,4 +107,14 @@ class StreamingLogisticRegressionWithSGD private[mllib] (\n     this.model = Some(algorithm.createModel(initialWeights, 0.0))\n     this\n   }\n+\n+  override def setDecayFactor(decayFactor: Double): this.type = {",
    "line": 17
  }],
  "prId": 8022
}]