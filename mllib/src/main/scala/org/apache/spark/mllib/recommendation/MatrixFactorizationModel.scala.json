[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Is k even needed now?\n",
    "commit": "41049787a1b2f3cba8e77623c69a9f590006199f",
    "createdAt": "2015-11-25T23:02:32Z",
    "diffHunk": "@@ -275,15 +276,13 @@ object MatrixFactorizationModel extends Loader[MatrixFactorizationModel] {\n       num: Int): RDD[(Int, Array[(Int, Double)])] = {\n     val srcBlocks = blockify(rank, srcFeatures)\n     val dstBlocks = blockify(rank, dstFeatures)\n+    val output = new ArrayBuffer[(Int, (Int, Double))]()\n     val ratings = srcBlocks.cartesian(dstBlocks).flatMap {\n       case ((srcIds, srcFactors), (dstIds, dstFactors)) =>\n-        val m = srcIds.length\n-        val n = dstIds.length\n         val ratings = srcFactors.transpose.multiply(dstFactors)\n-        val output = new Array[(Int, (Int, Double))](m * n)\n         var k = 0\n         ratings.foreachActive { (i, j, r) =>\n-          output(k) = (srcIds(i), (dstIds(j), r))\n+          output.append((srcIds(i), (dstIds(j), r)))"
  }],
  "prId": 9980
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "We don't need `output` to hold the buffer. The following should work, though it doesn't really fix the GC problem:\n\n``` scala\n        for (i <- 0 until m; j <- 0 until n) yield {\n          (srcIds(i), dstIds(j), ratings(i, j))\n        }\n```\n",
    "commit": "41049787a1b2f3cba8e77623c69a9f590006199f",
    "createdAt": "2015-11-30T23:35:38Z",
    "diffHunk": "@@ -275,16 +276,13 @@ object MatrixFactorizationModel extends Loader[MatrixFactorizationModel] {\n       num: Int): RDD[(Int, Array[(Int, Double)])] = {\n     val srcBlocks = blockify(rank, srcFeatures)\n     val dstBlocks = blockify(rank, dstFeatures)\n+    val output = new ArrayBuffer[(Int, (Int, Double))]()\n     val ratings = srcBlocks.cartesian(dstBlocks).flatMap {\n       case ((srcIds, srcFactors), (dstIds, dstFactors)) =>\n-        val m = srcIds.length\n-        val n = dstIds.length\n         val ratings = srcFactors.transpose.multiply(dstFactors)\n-        val output = new Array[(Int, (Int, Double))](m * n)\n-        var k = 0\n+        output.clear()\n         ratings.foreachActive { (i, j, r) =>",
    "line": 21
  }],
  "prId": 9980
}]