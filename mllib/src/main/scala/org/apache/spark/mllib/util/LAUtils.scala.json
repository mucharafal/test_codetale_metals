[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Should filter out zeros\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-18T21:36:52Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkContext._\n+\n+import org.apache.spark.mllib.linalg._\n+\n+/**\n+ * Helper methods for linear algebra\n+ */\n+object LAUtils {\n+  /**\n+   * Convert a SparseMatrix into a DenseMatrix\n+   *\n+   * @param sp Sparse matrix to be converted\n+   * @return dense version of the input\n+   */\n+  def spToDense(sp: SparseMatrix): TallSkinnyDenseMatrix = {\n+    val m = sp.m\n+    val n = sp.n\n+    val rows = sp.data.map(x => (x.i, (x.j, x.mval))).groupByKey.map{\n+      case (i, cols) =>\n+        val rowarray = Array.ofDim[Double](n)\n+        for (i <- 0 to cols.size - 1) {\n+          rowarray(cols(i)._1) = cols(i)._2 \n+        }\n+        MatrixRow(i, rowarray)\n+    }\n+    TallSkinnyDenseMatrix(rows, m, n)\n+  }\n+\n+  /**\n+   * Convert a DenseMatrix to a SparseMatrix\n+   *\n+   * @param a matrix to be converted\n+   * @return sparse version of the input\n+   */\n+  def denseToSp(a: TallSkinnyDenseMatrix): SparseMatrix = {\n+    val m = a.m\n+    val n = a.n\n+    val data = a.rows.flatMap{\n+      mrow => Array.tabulate(n)(j => MatrixEntry(mrow.i, j, mrow.data(j)))"
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "done\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T05:31:53Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkContext._\n+\n+import org.apache.spark.mllib.linalg._\n+\n+/**\n+ * Helper methods for linear algebra\n+ */\n+object LAUtils {\n+  /**\n+   * Convert a SparseMatrix into a DenseMatrix\n+   *\n+   * @param sp Sparse matrix to be converted\n+   * @return dense version of the input\n+   */\n+  def spToDense(sp: SparseMatrix): TallSkinnyDenseMatrix = {\n+    val m = sp.m\n+    val n = sp.n\n+    val rows = sp.data.map(x => (x.i, (x.j, x.mval))).groupByKey.map{\n+      case (i, cols) =>\n+        val rowarray = Array.ofDim[Double](n)\n+        for (i <- 0 to cols.size - 1) {\n+          rowarray(cols(i)._1) = cols(i)._2 \n+        }\n+        MatrixRow(i, rowarray)\n+    }\n+    TallSkinnyDenseMatrix(rows, m, n)\n+  }\n+\n+  /**\n+   * Convert a DenseMatrix to a SparseMatrix\n+   *\n+   * @param a matrix to be converted\n+   * @return sparse version of the input\n+   */\n+  def denseToSp(a: TallSkinnyDenseMatrix): SparseMatrix = {\n+    val m = a.m\n+    val n = a.n\n+    val data = a.rows.flatMap{\n+      mrow => Array.tabulate(n)(j => MatrixEntry(mrow.i, j, mrow.data(j)))"
  }],
  "prId": 88
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Do not use `for`.\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-18T21:37:36Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkContext._\n+\n+import org.apache.spark.mllib.linalg._\n+\n+/**\n+ * Helper methods for linear algebra\n+ */\n+object LAUtils {\n+  /**\n+   * Convert a SparseMatrix into a DenseMatrix\n+   *\n+   * @param sp Sparse matrix to be converted\n+   * @return dense version of the input\n+   */\n+  def spToDense(sp: SparseMatrix): TallSkinnyDenseMatrix = {\n+    val m = sp.m\n+    val n = sp.n\n+    val rows = sp.data.map(x => (x.i, (x.j, x.mval))).groupByKey.map{\n+      case (i, cols) =>\n+        val rowarray = Array.ofDim[Double](n)\n+        for (i <- 0 to cols.size - 1) {"
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "I love scala, I really do\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T05:35:47Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkContext._\n+\n+import org.apache.spark.mllib.linalg._\n+\n+/**\n+ * Helper methods for linear algebra\n+ */\n+object LAUtils {\n+  /**\n+   * Convert a SparseMatrix into a DenseMatrix\n+   *\n+   * @param sp Sparse matrix to be converted\n+   * @return dense version of the input\n+   */\n+  def spToDense(sp: SparseMatrix): TallSkinnyDenseMatrix = {\n+    val m = sp.m\n+    val n = sp.n\n+    val rows = sp.data.map(x => (x.i, (x.j, x.mval))).groupByKey.map{\n+      case (i, cols) =>\n+        val rowarray = Array.ofDim[Double](n)\n+        for (i <- 0 to cols.size - 1) {"
  }],
  "prId": 88
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "Let's just spell out sparse rather than \"sp\".\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T07:16:47Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkContext._\n+\n+import org.apache.spark.mllib.linalg._\n+\n+/**\n+ * Helper methods for linear algebra\n+ */\n+object LAUtils {\n+  /**\n+   * Convert a SparseMatrix into a DenseMatrix\n+   *\n+   * @param sp Sparse matrix to be converted\n+   * @return dense version of the input\n+   */\n+  def spToDense(sp: SparseMatrix): TallSkinnyDenseMatrix = {\n+    val m = sp.m\n+    val n = sp.n\n+    val rows = sp.data.map(x => (x.i, (x.j, x.mval))).groupByKey.map{\n+      case (i, cols) =>\n+        val rowarray = Array.ofDim[Double](n)\n+        var j = 0\n+        while (j < cols.size) {\n+          rowarray(cols(j)._1) = cols(j)._2\n+          j += 1 \n+        }\n+        MatrixRow(i, rowarray)\n+    }\n+    TallSkinnyDenseMatrix(rows, m, n)\n+  }\n+\n+  /**\n+   * Convert a DenseMatrix to a SparseMatrix\n+   *\n+   * @param a matrix to be converted\n+   * @return sparse version of the input\n+   */\n+  def denseToSp(a: TallSkinnyDenseMatrix): SparseMatrix = {"
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "Done.\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T07:33:14Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkContext._\n+\n+import org.apache.spark.mllib.linalg._\n+\n+/**\n+ * Helper methods for linear algebra\n+ */\n+object LAUtils {\n+  /**\n+   * Convert a SparseMatrix into a DenseMatrix\n+   *\n+   * @param sp Sparse matrix to be converted\n+   * @return dense version of the input\n+   */\n+  def spToDense(sp: SparseMatrix): TallSkinnyDenseMatrix = {\n+    val m = sp.m\n+    val n = sp.n\n+    val rows = sp.data.map(x => (x.i, (x.j, x.mval))).groupByKey.map{\n+      case (i, cols) =>\n+        val rowarray = Array.ofDim[Double](n)\n+        var j = 0\n+        while (j < cols.size) {\n+          rowarray(cols(j)._1) = cols(j)._2\n+          j += 1 \n+        }\n+        MatrixRow(i, rowarray)\n+    }\n+    TallSkinnyDenseMatrix(rows, m, n)\n+  }\n+\n+  /**\n+   * Convert a DenseMatrix to a SparseMatrix\n+   *\n+   * @param a matrix to be converted\n+   * @return sparse version of the input\n+   */\n+  def denseToSp(a: TallSkinnyDenseMatrix): SparseMatrix = {"
  }],
  "prId": 88
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "spell out Sparse\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T07:17:04Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkContext._\n+\n+import org.apache.spark.mllib.linalg._\n+\n+/**\n+ * Helper methods for linear algebra\n+ */\n+object LAUtils {\n+  /**\n+   * Convert a SparseMatrix into a DenseMatrix\n+   *\n+   * @param sp Sparse matrix to be converted\n+   * @return dense version of the input\n+   */\n+  def spToDense(sp: SparseMatrix): TallSkinnyDenseMatrix = {"
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "Done.\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T07:33:21Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkContext._\n+\n+import org.apache.spark.mllib.linalg._\n+\n+/**\n+ * Helper methods for linear algebra\n+ */\n+object LAUtils {\n+  /**\n+   * Convert a SparseMatrix into a DenseMatrix\n+   *\n+   * @param sp Sparse matrix to be converted\n+   * @return dense version of the input\n+   */\n+  def spToDense(sp: SparseMatrix): TallSkinnyDenseMatrix = {"
  }],
  "prId": 88
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "In Spark code, we usually put the case statement on the same as as the map (when there is only one case)\n\n``` scala\n    val rows = sp.data.map(x => (x.i, (x.j, x.mval))).groupByKey.map { case (i, cols) =>\n      val rowarray = Array.ofDim[Double](n)\n      var j = 0\n      while (j < cols.length) {\n        rowarray(cols(j)._1) = cols(j)._2\n        j += 1 \n      }\n      MatrixRow(i, rowarray)\n    }\n```\n\nMake sure you use array.length instead of array.size because the former is actually faster (doesn't require an implicit conversion into ArrayOps)\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T07:18:58Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkContext._\n+\n+import org.apache.spark.mllib.linalg._\n+\n+/**\n+ * Helper methods for linear algebra\n+ */\n+object LAUtils {\n+  /**\n+   * Convert a SparseMatrix into a DenseMatrix\n+   *\n+   * @param sp Sparse matrix to be converted\n+   * @return dense version of the input\n+   */\n+  def spToDense(sp: SparseMatrix): TallSkinnyDenseMatrix = {\n+    val m = sp.m\n+    val n = sp.n\n+    val rows = sp.data.map(x => (x.i, (x.j, x.mval))).groupByKey.map{"
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "Done\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T07:35:13Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkContext._\n+\n+import org.apache.spark.mllib.linalg._\n+\n+/**\n+ * Helper methods for linear algebra\n+ */\n+object LAUtils {\n+  /**\n+   * Convert a SparseMatrix into a DenseMatrix\n+   *\n+   * @param sp Sparse matrix to be converted\n+   * @return dense version of the input\n+   */\n+  def spToDense(sp: SparseMatrix): TallSkinnyDenseMatrix = {\n+    val m = sp.m\n+    val n = sp.n\n+    val rows = sp.data.map(x => (x.i, (x.j, x.mval))).groupByKey.map{"
  }],
  "prId": 88
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "The method name is not precise since the return type is TallSkinnyDenseMatrix.\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T21:47:14Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkContext._\n+\n+import org.apache.spark.mllib.linalg._\n+\n+/**\n+ * Helper methods for linear algebra\n+ */\n+object LAUtils {\n+  /**\n+   * Convert a SparseMatrix into a DenseMatrix\n+   *\n+   * @param sp Sparse matrix to be converted\n+   * @return dense version of the input\n+   */\n+  def sparseToDense(sp: SparseMatrix): TallSkinnyDenseMatrix = {"
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "renamed\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T21:55:52Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkContext._\n+\n+import org.apache.spark.mllib.linalg._\n+\n+/**\n+ * Helper methods for linear algebra\n+ */\n+object LAUtils {\n+  /**\n+   * Convert a SparseMatrix into a DenseMatrix\n+   *\n+   * @param sp Sparse matrix to be converted\n+   * @return dense version of the input\n+   */\n+  def sparseToDense(sp: SparseMatrix): TallSkinnyDenseMatrix = {"
  }],
  "prId": 88
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Doc needs updates for the return type.\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T21:47:46Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkContext._\n+\n+import org.apache.spark.mllib.linalg._\n+\n+/**\n+ * Helper methods for linear algebra\n+ */\n+object LAUtils {\n+  /**\n+   * Convert a SparseMatrix into a DenseMatrix"
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "done\n",
    "commit": "e298700a69316d9d32bcd1ce3157f22acc4bb585",
    "createdAt": "2014-03-19T21:56:24Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkContext._\n+\n+import org.apache.spark.mllib.linalg._\n+\n+/**\n+ * Helper methods for linear algebra\n+ */\n+object LAUtils {\n+  /**\n+   * Convert a SparseMatrix into a DenseMatrix"
  }],
  "prId": 88
}]