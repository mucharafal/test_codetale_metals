[{
  "comments": [{
    "author": {
      "login": "manishamde"
    },
    "body": "Mentioning supported impurities might help since such errors are generally typos.\n",
    "commit": "d2c1dad75f89db98a693b52f45b7320c4d93ef31",
    "createdAt": "2014-07-28T23:20:52Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.tree.configuration\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.tree.impurity.ClassificationImpurities\n+\n+/**\n+ * :: Experimental ::\n+ * Stores all the configuration options for DecisionTreeClassifier construction\n+ * @param impurity Criterion used for information gain calculation.\n+ *                 Currently supported: \"gini\", \"entropy\"\n+ * @param maxDepth Maximum depth of the tree.\n+ *                 E.g., depth 0 means 1 leaf node; depth 1 means 1 internal node + 2 leaf nodes.\n+ * @param maxBins maximum number of bins used for splitting features\n+ * @param quantileStrategy algorithm for calculating quantiles\n+ * @param maxMemoryInMB maximum memory in MB allocated to histogram aggregation. Default value is\n+ *                      128 MB.\n+ */\n+@Experimental\n+class DTClassifierParams (\n+    var impurity: String = \"gini\",\n+    maxDepth: Int = 4,\n+    maxBins: Int = 100,\n+    quantileStrategy: String = \"sort\",\n+    maxMemoryInMB: Int = 128)\n+  extends DTParams(maxDepth, maxBins, quantileStrategy, maxMemoryInMB) {\n+\n+  def getImpurity: String = this.impurity\n+\n+  def setImpurity(impurity: String) = {\n+    if (!ClassificationImpurities.nameToImpurityMap.contains(impurity)) {\n+      throw new IllegalArgumentException(s\"Bad impurity parameter for classification: $impurity\")"
  }],
  "prId": 1582
}]