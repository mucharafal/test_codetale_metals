[{
  "comments": [{
    "author": {
      "login": "mateiz"
    },
    "body": "Ditto on the default args\n",
    "commit": "24d829460e3ddcfe6c5515d7c197477356c5df0f",
    "createdAt": "2014-04-07T20:37:47Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.linalg.rdd\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.mllib.linalg.Vector\n+\n+/** Represents a row of RowRDDMatrix. */\n+case class IndexedRDDMatrixRow(index: Long, vector: Vector)\n+\n+/**\n+ * Represents a row-oriented RDDMatrix with indexed rows.\n+ *\n+ * @param rows indexed rows of this matrix\n+ * @param m number of rows, where a negative number means unknown\n+ * @param n number of cols, where a negative number means unknown\n+ */\n+class IndexedRowRDDMatrix(\n+    val rows: RDD[IndexedRDDMatrixRow],\n+    m: Long = -1L,\n+    n: Long = -1L) extends RDDMatrix {"
  }],
  "prId": 296
}, {
  "comments": [{
    "author": {
      "login": "mateiz"
    },
    "body": "Do we want to add computePCA, computeSVD and such on this as well, and pass them on to RowMatrix?\n",
    "commit": "24d829460e3ddcfe6c5515d7c197477356c5df0f",
    "createdAt": "2014-04-07T21:18:39Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.linalg.rdd\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.mllib.linalg.Vector\n+\n+/** Represents a row of RowRDDMatrix. */\n+case class IndexedRDDMatrixRow(index: Long, vector: Vector)\n+\n+/**\n+ * Represents a row-oriented RDDMatrix with indexed rows.\n+ *\n+ * @param rows indexed rows of this matrix\n+ * @param m number of rows, where a negative number means unknown\n+ * @param n number of cols, where a negative number means unknown\n+ */\n+class IndexedRowRDDMatrix(\n+    val rows: RDD[IndexedRDDMatrixRow],\n+    m: Long = -1L,\n+    n: Long = -1L) extends RDDMatrix {\n+\n+  private var _m = m\n+  private var _n = n\n+\n+  /** Gets or computes the number of columns. */\n+  override def numCols(): Long = {\n+    if (_n < 0) {\n+      _n = rows.first().vector.size\n+    }\n+    _n\n+  }\n+\n+  override def numRows(): Long = {\n+    if (_m < 0) {\n+      _m = rows.map(_.index).reduce(math.max) + 1\n+    }\n+    _m\n+  }\n+\n+  /** Drops row indices and converts this matrix to a RowRDDMatrix. */\n+  def toRowRDDMatrix(): RowRDDMatrix = {\n+    new RowRDDMatrix(rows.map(_.vector), -1, _n)\n+  }"
  }],
  "prId": 296
}]