[{
  "comments": [{
    "author": {
      "login": "sryza"
    },
    "body": "Is there any difference between this and a `KMeansModel`?  Might we be able to consolidate them into something like a `ClusterCentersModel`?\n",
    "commit": "c25eae2eacacf867c666d730e05bc6daa3fe7a78",
    "createdAt": "2015-06-19T00:54:49Z",
    "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.clustering\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable\n+\n+import org.json4s.DefaultFormats\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.mllib.pmml.PMMLExportable\n+import org.apache.spark.mllib.util.{Loader, Saveable}\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkContext\n+import org.apache.spark.sql.{Row, SQLContext}\n+\n+/**\n+ * A clustering model for DP means. Each point belongs to the cluster with the closest center.\n+ */\n+class DpMeansModel"
  }, {
    "author": {
      "login": "FlytxtRnD"
    },
    "body": "@sryza-Thanks for the comment.  @mengxr  @jkbradley Could you please give your opinon on the same?\n",
    "commit": "c25eae2eacacf867c666d730e05bc6daa3fe7a78",
    "createdAt": "2015-06-22T11:43:31Z",
    "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.clustering\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable\n+\n+import org.json4s.DefaultFormats\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.mllib.pmml.PMMLExportable\n+import org.apache.spark.mllib.util.{Loader, Saveable}\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkContext\n+import org.apache.spark.sql.{Row, SQLContext}\n+\n+/**\n+ * A clustering model for DP means. Each point belongs to the cluster with the closest center.\n+ */\n+class DpMeansModel"
  }, {
    "author": {
      "login": "FlytxtRnD"
    },
    "body": "@sryza DpMeansModel class was designed following the KMeansModel and GaussianMixtureModel. Do you know whether there is any plan to consolidate the clustermodel classes to something like  ClusterCentersModel ?\n",
    "commit": "c25eae2eacacf867c666d730e05bc6daa3fe7a78",
    "createdAt": "2015-06-24T05:59:27Z",
    "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.clustering\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable\n+\n+import org.json4s.DefaultFormats\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.mllib.pmml.PMMLExportable\n+import org.apache.spark.mllib.util.{Loader, Saveable}\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkContext\n+import org.apache.spark.sql.{Row, SQLContext}\n+\n+/**\n+ * A clustering model for DP means. Each point belongs to the cluster with the closest center.\n+ */\n+class DpMeansModel"
  }, {
    "author": {
      "login": "sryza"
    },
    "body": "I don't know if there are plans, just thought it might be a good idea now that three's a crowd.  Probably best to wait for @mengxr or @jkbradley to weigh in before making changes.\n",
    "commit": "c25eae2eacacf867c666d730e05bc6daa3fe7a78",
    "createdAt": "2015-06-24T17:41:20Z",
    "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.clustering\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable\n+\n+import org.json4s.DefaultFormats\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.mllib.pmml.PMMLExportable\n+import org.apache.spark.mllib.util.{Loader, Saveable}\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkContext\n+import org.apache.spark.sql.{Row, SQLContext}\n+\n+/**\n+ * A clustering model for DP means. Each point belongs to the cluster with the closest center.\n+ */\n+class DpMeansModel"
  }, {
    "author": {
      "login": "FlytxtRnD"
    },
    "body": "ok @sryza ..\n",
    "commit": "c25eae2eacacf867c666d730e05bc6daa3fe7a78",
    "createdAt": "2015-06-25T07:04:06Z",
    "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.clustering\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable\n+\n+import org.json4s.DefaultFormats\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.mllib.pmml.PMMLExportable\n+import org.apache.spark.mllib.util.{Loader, Saveable}\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkContext\n+import org.apache.spark.sql.{Row, SQLContext}\n+\n+/**\n+ * A clustering model for DP means. Each point belongs to the cluster with the closest center.\n+ */\n+class DpMeansModel"
  }, {
    "author": {
      "login": "sujkh85"
    },
    "body": "## NAVER - http://www.naver.com/\n\nsujkh@naver.com 님께 보내신 메일 <Re: [spark] [SPARK-8402][MLLIB] DP Means Clustering (#6880)> 이 다음과 같은 이유로 전송 실패했습니다.\n\n---\n\n받는 사람이 회원님의 메일을 수신차단 하였습니다. \n\n---\n",
    "commit": "c25eae2eacacf867c666d730e05bc6daa3fe7a78",
    "createdAt": "2015-06-25T07:04:50Z",
    "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.clustering\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable\n+\n+import org.json4s.DefaultFormats\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.mllib.pmml.PMMLExportable\n+import org.apache.spark.mllib.util.{Loader, Saveable}\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkContext\n+import org.apache.spark.sql.{Row, SQLContext}\n+\n+/**\n+ * A clustering model for DP means. Each point belongs to the cluster with the closest center.\n+ */\n+class DpMeansModel"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "I don't expect users call clustering models via a generic interface, as least for now. So we don't need to address this in this PR.\n",
    "commit": "c25eae2eacacf867c666d730e05bc6daa3fe7a78",
    "createdAt": "2015-07-01T23:49:50Z",
    "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.clustering\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable\n+\n+import org.json4s.DefaultFormats\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.mllib.pmml.PMMLExportable\n+import org.apache.spark.mllib.util.{Loader, Saveable}\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkContext\n+import org.apache.spark.sql.{Row, SQLContext}\n+\n+/**\n+ * A clustering model for DP means. Each point belongs to the cluster with the closest center.\n+ */\n+class DpMeansModel"
  }],
  "prId": 6880
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Shall we add save/load in a separate PR? Just to reduce the length of this PR.\n",
    "commit": "c25eae2eacacf867c666d730e05bc6daa3fe7a78",
    "createdAt": "2015-07-01T23:42:07Z",
    "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.clustering\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable\n+\n+import org.json4s.DefaultFormats\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.mllib.pmml.PMMLExportable\n+import org.apache.spark.mllib.util.{Loader, Saveable}\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkContext\n+import org.apache.spark.sql.{Row, SQLContext}\n+\n+/**\n+ * A clustering model for DP means. Each point belongs to the cluster with the closest center.\n+ */\n+class DpMeansModel\n+    (val clusterCenters: Array[Vector]) extends Saveable with Serializable with PMMLExportable {\n+\n+  /** A Java-friendly constructor that takes an Iterable of Vectors. */\n+  def this(centers: java.lang.Iterable[Vector]) = this(centers.asScala.toArray)\n+\n+  /** Total number of clusters obtained. */\n+  def k: Int = clusterCenters.length\n+\n+  /** Returns the cluster index that a given point belongs to. */\n+  def predict(point: Vector): Int = {\n+    val centersWithNorm = clusterCentersWithNorm\n+    DpMeans.assignCluster(centersWithNorm.to[mutable.ArrayBuffer], new VectorWithNorm(point))._1\n+  }\n+\n+  /** Maps the points in the given RDD to their closest cluster indices. */\n+  def predict(points: RDD[Vector]): RDD[Int] = {\n+    val centersWithNorm = clusterCentersWithNorm\n+    val bcCentersWithNorm = points.context.broadcast(centersWithNorm)\n+    points.map(p => DpMeans.assignCluster(bcCentersWithNorm.value.to[mutable.ArrayBuffer],\n+         new VectorWithNorm(p))._1)\n+  }\n+\n+  /**\n+   * Return the cost (sum of squared distances of points to their nearest center) for this\n+   * model on the given data.\n+   */\n+  def computeCost(data: RDD[Vector]): Double = {\n+    val centersWithNorm = clusterCentersWithNorm\n+    val bcCentersWithNorm = data.context.broadcast(centersWithNorm)\n+    data.map(p => DpMeans.assignCluster(bcCentersWithNorm.value.to[mutable.ArrayBuffer],\n+        new VectorWithNorm(p))._2).sum()\n+  }\n+\n+  private def clusterCentersWithNorm: Iterable[VectorWithNorm] =\n+    clusterCenters.map(new VectorWithNorm(_))\n+\n+  override def save(sc: SparkContext, path: String): Unit = {\n+    DpMeansModel.SaveLoadV1_0.save(sc, this, path)\n+  }\n+\n+  override protected def formatVersion: String = \"1.0\"\n+\n+}\n+\n+object DpMeansModel extends Loader[DpMeansModel] {"
  }],
  "prId": 6880
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "missing doc for `clusterCenters`\n",
    "commit": "c25eae2eacacf867c666d730e05bc6daa3fe7a78",
    "createdAt": "2015-09-08T17:16:18Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.clustering\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.rdd.RDD\n+\n+/**\n+ * A clustering model for DP means. Each point belongs to the cluster with the closest center."
  }],
  "prId": 6880
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "if this line doesn't fit into L29, we should move `(` to L29:\n\n``` scala\nclass DpMeansModel(\n    clusterCenters: Array[Vector]) extends Serializable {\n  ...\n}\n```\n\nBtw, it is also useful to save `lambda` in the model.\n",
    "commit": "c25eae2eacacf867c666d730e05bc6daa3fe7a78",
    "createdAt": "2015-09-08T17:17:36Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.clustering\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.rdd.RDD\n+\n+/**\n+ * A clustering model for DP means. Each point belongs to the cluster with the closest center.\n+ */\n+class DpMeansModel\n+    (val clusterCenters: Array[Vector]) extends Serializable {"
  }],
  "prId": 6880
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "remove empty line\n",
    "commit": "c25eae2eacacf867c666d730e05bc6daa3fe7a78",
    "createdAt": "2015-09-08T17:17:44Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.clustering\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.rdd.RDD\n+\n+/**\n+ * A clustering model for DP means. Each point belongs to the cluster with the closest center.\n+ */\n+class DpMeansModel\n+    (val clusterCenters: Array[Vector]) extends Serializable {\n+\n+  /** A Java-friendly constructor that takes an Iterable of Vectors. */\n+  def this(centers: java.lang.Iterable[Vector]) = this(centers.asScala.toArray)\n+\n+  /** Total number of clusters obtained. */\n+  def k: Int = clusterCenters.length\n+\n+  /** Returns the cluster index that a given point belongs to. */\n+  def predict(point: Vector): Int = {\n+    val centersWithNorm = clusterCentersWithNorm\n+    DpMeans.assignCluster(centersWithNorm.to[mutable.ArrayBuffer], new VectorWithNorm(point))._1\n+  }\n+\n+  /** Maps the points in the given RDD to their closest cluster indices. */\n+  def predict(points: RDD[Vector]): RDD[Int] = {\n+    val centersWithNorm = clusterCentersWithNorm\n+    val bcCentersWithNorm = points.context.broadcast(centersWithNorm)\n+    points.map(p => DpMeans.assignCluster(bcCentersWithNorm.value.to[mutable.ArrayBuffer],\n+         new VectorWithNorm(p))._1)\n+  }\n+\n+  /**\n+   * Return the cost (sum of squared distances of points to their nearest center) for this\n+   * model on the given data.\n+   */\n+  def computeCost(data: RDD[Vector]): Double = {\n+    val centersWithNorm = clusterCentersWithNorm\n+    val bcCentersWithNorm = data.context.broadcast(centersWithNorm)\n+    data.map(p => DpMeans.assignCluster(bcCentersWithNorm.value.to[mutable.ArrayBuffer],\n+        new VectorWithNorm(p))._2).sum()\n+  }\n+\n+  private def clusterCentersWithNorm: Iterable[VectorWithNorm] =\n+    clusterCenters.map(new VectorWithNorm(_))\n+\n+}\n+"
  }],
  "prId": 6880
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "fix indentation and break lines to make it easier to read, e.g.\n\n``` scala\n    points.map { p =>\n      DpMeans.assignCluster(\n        bcCentersWithNorm.value.to[mutable.ArrayBuffer], new VectorWithNorm(p)\n      )._1\n   }\n```\n",
    "commit": "c25eae2eacacf867c666d730e05bc6daa3fe7a78",
    "createdAt": "2015-09-08T17:20:22Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.clustering\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.rdd.RDD\n+\n+/**\n+ * A clustering model for DP means. Each point belongs to the cluster with the closest center.\n+ */\n+class DpMeansModel\n+    (val clusterCenters: Array[Vector]) extends Serializable {\n+\n+  /** A Java-friendly constructor that takes an Iterable of Vectors. */\n+  def this(centers: java.lang.Iterable[Vector]) = this(centers.asScala.toArray)\n+\n+  /** Total number of clusters obtained. */\n+  def k: Int = clusterCenters.length\n+\n+  /** Returns the cluster index that a given point belongs to. */\n+  def predict(point: Vector): Int = {\n+    val centersWithNorm = clusterCentersWithNorm\n+    DpMeans.assignCluster(centersWithNorm.to[mutable.ArrayBuffer], new VectorWithNorm(point))._1\n+  }\n+\n+  /** Maps the points in the given RDD to their closest cluster indices. */\n+  def predict(points: RDD[Vector]): RDD[Int] = {\n+    val centersWithNorm = clusterCentersWithNorm\n+    val bcCentersWithNorm = points.context.broadcast(centersWithNorm)\n+    points.map(p => DpMeans.assignCluster(bcCentersWithNorm.value.to[mutable.ArrayBuffer],\n+         new VectorWithNorm(p))._1)"
  }],
  "prId": 6880
}]