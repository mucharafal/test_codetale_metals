[{
  "comments": [{
    "author": {
      "login": "mateiz"
    },
    "body": "Same here, would be clearer as `\"(%s,%s)\".format(...)`\n",
    "commit": "2d1116a4076c822d828f99206195a0a709b94ca9",
    "createdAt": "2014-05-10T04:56:48Z",
    "diffHunk": "@@ -27,6 +28,28 @@ import org.apache.spark.mllib.linalg.Vector\n  */\n case class LabeledPoint(label: Double, features: Vector) {\n   override def toString: String = {\n-    \"LabeledPoint(%s, %s)\".format(label, features)\n+    Seq(label, features).mkString(\"(\", \",\", \")\")"
  }],
  "prId": 685
}, {
  "comments": [{
    "author": {
      "login": "mateiz"
    },
    "body": "Did we ever expose this to users before 1.0? I don't think we need compatibility with it.\n",
    "commit": "2d1116a4076c822d828f99206195a0a709b94ca9",
    "createdAt": "2014-05-10T04:58:01Z",
    "diffHunk": "@@ -27,6 +28,28 @@ import org.apache.spark.mllib.linalg.Vector\n  */\n case class LabeledPoint(label: Double, features: Vector) {\n   override def toString: String = {\n-    \"LabeledPoint(%s, %s)\".format(label, features)\n+    Seq(label, features).mkString(\"(\", \",\", \")\")\n+  }\n+}\n+\n+object LabeledPoint {\n+  /**\n+   * Parses a string resulted from `LabeledPoint#toString` into\n+   * an [[org.apache.spark.mllib.regression.LabeledPoint]].\n+   */\n+  def parse(s: String): LabeledPoint = {\n+    if (s.startsWith(\"(\") || s.startsWith(\")\")) {\n+      NumericParser.parse(s) match {\n+        case Seq(label: Double, numeric: Any) =>\n+          LabeledPoint(label, Vectors.parseNumeric(numeric))\n+        case other =>\n+          sys.error(s\"Cannot parse $other.\")\n+      }\n+    } else { // dense format used before v1.0"
  }, {
    "author": {
      "login": "mateiz"
    },
    "body": "Oh I see, we actually did; never mind.\n",
    "commit": "2d1116a4076c822d828f99206195a0a709b94ca9",
    "createdAt": "2014-05-10T04:59:10Z",
    "diffHunk": "@@ -27,6 +28,28 @@ import org.apache.spark.mllib.linalg.Vector\n  */\n case class LabeledPoint(label: Double, features: Vector) {\n   override def toString: String = {\n-    \"LabeledPoint(%s, %s)\".format(label, features)\n+    Seq(label, features).mkString(\"(\", \",\", \")\")\n+  }\n+}\n+\n+object LabeledPoint {\n+  /**\n+   * Parses a string resulted from `LabeledPoint#toString` into\n+   * an [[org.apache.spark.mllib.regression.LabeledPoint]].\n+   */\n+  def parse(s: String): LabeledPoint = {\n+    if (s.startsWith(\"(\") || s.startsWith(\")\")) {\n+      NumericParser.parse(s) match {\n+        case Seq(label: Double, numeric: Any) =>\n+          LabeledPoint(label, Vectors.parseNumeric(numeric))\n+        case other =>\n+          sys.error(s\"Cannot parse $other.\")\n+      }\n+    } else { // dense format used before v1.0"
  }],
  "prId": 685
}]