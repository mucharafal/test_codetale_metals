[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "\"Predicted label\" (Please correct elsewhere too)\n",
    "commit": "0b5d65900b22db5a0a9047fd2c3a1010d9d8c36b",
    "createdAt": "2015-04-02T21:44:24Z",
    "diffHunk": "@@ -39,17 +39,15 @@ object LogLoss extends Loss {\n    * Method to calculate the loss gradients for the gradient boosting calculation for binary\n    * classification\n    * The gradient with respect to F(x) is: - 4 y / (1 + exp(2 y F(x)))\n-   * @param model Ensemble model\n-   * @param point Instance of the training dataset\n+   * @param prediction Predicted point"
  }],
  "prId": 5330
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Remove extra newline\n",
    "commit": "0b5d65900b22db5a0a9047fd2c3a1010d9d8c36b",
    "createdAt": "2015-04-02T21:44:26Z",
    "diffHunk": "@@ -39,17 +39,15 @@ object LogLoss extends Loss {\n    * Method to calculate the loss gradients for the gradient boosting calculation for binary\n    * classification\n    * The gradient with respect to F(x) is: - 4 y / (1 + exp(2 y F(x)))\n-   * @param model Ensemble model\n-   * @param point Instance of the training dataset\n+   * @param prediction Predicted point\n+   * @param label True label.\n    * @return Loss gradient\n    */\n-  override def gradient(\n-      model: TreeEnsembleModel,\n-      point: LabeledPoint): Double = {\n-    val prediction = model.predict(point.features)\n-    - 4.0 * point.label / (1.0 + math.exp(2.0 * point.label * prediction))\n+  override def gradient(prediction: Double, label: Double): Double = {\n+    - 4.0 * label / (1.0 + math.exp(2.0 * label * prediction))\n   }\n \n+"
  }],
  "prId": 5330
}]