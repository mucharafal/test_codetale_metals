[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "I think this conflates the idea of being a model with serializing a model to a particular form or place. For example this limits to files, whereas JPMML has one-liners for serializing to a bunch of things already. I think this could be punted to caller code, or at least an orthogonal helper class, not part of the export type hierarchy.\n",
    "commit": "852aac6149d4d0c932ff34e959d148419b369983",
    "createdAt": "2014-11-03T06:43:13Z",
    "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.export\n+\n+import java.io.OutputStream\n+import java.io.FileOutputStream\n+import java.io.File\n+\n+trait ModelExport {"
  }, {
    "author": {
      "login": "selvinsource"
    },
    "body": "I assume you are referring to \nJAXBUtil.marshalPMML(pmml, new StreamResult(outputStream));\nwhich takes as param the StreamResult object and for which there are many constructors.\n\nI didn't want to expose the StreamResult as it is xml specific, but if the decision is to only support PMML xml we may add also the StreamResult.\n\nPersonally I would still like a simple saveLocalFile(path: String) so that the user doesn't have to think too much and just call:\nModelExportFactory.createModelExport(clusters,ModelExportType.PMML).saveLocalF\nile(\"/tmp/kmeans.xml\") for all models.\n",
    "commit": "852aac6149d4d0c932ff34e959d148419b369983",
    "createdAt": "2014-11-03T22:55:20Z",
    "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.export\n+\n+import java.io.OutputStream\n+import java.io.FileOutputStream\n+import java.io.File\n+\n+trait ModelExport {"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Yes, a utility method makes some sense, just not as part of the type hierarchy perhaps. You can expose a utility object that reads/writes PMML objects separately.\n",
    "commit": "852aac6149d4d0c932ff34e959d148419b369983",
    "createdAt": "2014-11-04T10:04:12Z",
    "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.export\n+\n+import java.io.OutputStream\n+import java.io.FileOutputStream\n+import java.io.File\n+\n+trait ModelExport {"
  }],
  "prId": 3062
}]