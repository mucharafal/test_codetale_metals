[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`array1` is dropped and a copy is `array2` is returned. Is it what you want?\n",
    "commit": "70b63e42d81f9ca9f9c48bf8435f9620c6800b75",
    "createdAt": "2014-04-01T16:23:55Z",
    "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.discretization\n+\n+import org.apache.spark.AccumulatorParam\n+\n+private[discretization] object ArrayAccumulator extends AccumulatorParam[Array[Long]] {\n+\n+  def addInPlace(array1: Array[Long], array2: Array[Long]): Array[Long] = {\n+    array2.clone"
  }, {
    "body": "I want to replace the previous value with the new one. I'm not sure which one is more efficient: \n\n```\narray.clone\n```\n\n or \n\n```\nfor (i <- 0 until array1.size) array1(i) = array2(i)\narray1\n```\n",
    "commit": "70b63e42d81f9ca9f9c48bf8435f9620c6800b75",
    "createdAt": "2014-04-02T08:51:06Z",
    "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.discretization\n+\n+import org.apache.spark.AccumulatorParam\n+\n+private[discretization] object ArrayAccumulator extends AccumulatorParam[Array[Long]] {\n+\n+  def addInPlace(array1: Array[Long], array2: Array[Long]): Array[Long] = {\n+    array2.clone"
  }],
  "prId": 216
}]