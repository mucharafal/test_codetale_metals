[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "- `T-test` -> `t-test`\n- add `override` to this and other methods in this class.\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T05:04:07Z",
    "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import java.io.Serializable\n+\n+import scala.language.implicitConversions\n+import scala.math.pow\n+\n+import com.twitter.chill.MeatLocker\n+import org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues\n+import org.apache.commons.math3.stat.inference.TTest\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * Significance testing methods for [[StreamingTest]]. New 2-sample statistical significance tests\n+ * should extend [[StreamingTestMethod]] and introduce a new entry in\n+ * [[StreamingTestMethod.TEST_NAME_TO_OBJECT]]\n+ */\n+private[stat] sealed trait StreamingTestMethod extends Serializable {\n+\n+  val MethodName: String\n+  val NullHypothesis: String\n+\n+  protected type SummaryPairStream =\n+    DStream[(StatCounter, StatCounter)]\n+\n+  /**\n+   * Perform streaming 2-sample statistical significance testing.\n+   *\n+   * @param sampleSummaries stream pairs of summary statistics for the 2 samples\n+   * @return stream of rest results\n+   */\n+  def doTest(sampleSummaries: SummaryPairStream): DStream[StreamingTestResult]\n+\n+  /**\n+   * Implicit adapter to convert between streaming summary statistics type and the type required by\n+   * the t-testing libraries.\n+   */\n+  protected implicit def toApacheCommonsStats(\n+      summaryStats: StatCounter): StatisticalSummaryValues = {\n+    new StatisticalSummaryValues(\n+      summaryStats.mean,\n+      summaryStats.variance,\n+      summaryStats.count,\n+      summaryStats.max,\n+      summaryStats.min,\n+      summaryStats.mean * summaryStats.count\n+    )\n+  }\n+}\n+\n+/**\n+ * Performs Welch's 2-sample t-test. The null hypothesis is that the two data sets have equal mean.\n+ * This test does not assume equal variance between the two samples and does not assume equal\n+ * sample size.\n+ *\n+ * More information: http://en.wikipedia.org/wiki/Welch%27s_t_test\n+ */\n+private[stat] object WelchTTest extends StreamingTestMethod with Logging {\n+\n+  final val MethodName = \"Welch's 2-sample T-test\""
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T20:27:21Z",
    "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import java.io.Serializable\n+\n+import scala.language.implicitConversions\n+import scala.math.pow\n+\n+import com.twitter.chill.MeatLocker\n+import org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues\n+import org.apache.commons.math3.stat.inference.TTest\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * Significance testing methods for [[StreamingTest]]. New 2-sample statistical significance tests\n+ * should extend [[StreamingTestMethod]] and introduce a new entry in\n+ * [[StreamingTestMethod.TEST_NAME_TO_OBJECT]]\n+ */\n+private[stat] sealed trait StreamingTestMethod extends Serializable {\n+\n+  val MethodName: String\n+  val NullHypothesis: String\n+\n+  protected type SummaryPairStream =\n+    DStream[(StatCounter, StatCounter)]\n+\n+  /**\n+   * Perform streaming 2-sample statistical significance testing.\n+   *\n+   * @param sampleSummaries stream pairs of summary statistics for the 2 samples\n+   * @return stream of rest results\n+   */\n+  def doTest(sampleSummaries: SummaryPairStream): DStream[StreamingTestResult]\n+\n+  /**\n+   * Implicit adapter to convert between streaming summary statistics type and the type required by\n+   * the t-testing libraries.\n+   */\n+  protected implicit def toApacheCommonsStats(\n+      summaryStats: StatCounter): StatisticalSummaryValues = {\n+    new StatisticalSummaryValues(\n+      summaryStats.mean,\n+      summaryStats.variance,\n+      summaryStats.count,\n+      summaryStats.max,\n+      summaryStats.min,\n+      summaryStats.mean * summaryStats.count\n+    )\n+  }\n+}\n+\n+/**\n+ * Performs Welch's 2-sample t-test. The null hypothesis is that the two data sets have equal mean.\n+ * This test does not assume equal variance between the two samples and does not assume equal\n+ * sample size.\n+ *\n+ * More information: http://en.wikipedia.org/wiki/Welch%27s_t_test\n+ */\n+private[stat] object WelchTTest extends StreamingTestMethod with Logging {\n+\n+  final val MethodName = \"Welch's 2-sample T-test\""
  }],
  "prId": 4716
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`MethodName` ->`methodName`\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T05:06:34Z",
    "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import java.io.Serializable\n+\n+import scala.language.implicitConversions\n+import scala.math.pow\n+\n+import com.twitter.chill.MeatLocker\n+import org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues\n+import org.apache.commons.math3.stat.inference.TTest\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * Significance testing methods for [[StreamingTest]]. New 2-sample statistical significance tests\n+ * should extend [[StreamingTestMethod]] and introduce a new entry in\n+ * [[StreamingTestMethod.TEST_NAME_TO_OBJECT]]\n+ */\n+private[stat] sealed trait StreamingTestMethod extends Serializable {\n+\n+  val MethodName: String"
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T20:26:16Z",
    "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import java.io.Serializable\n+\n+import scala.language.implicitConversions\n+import scala.math.pow\n+\n+import com.twitter.chill.MeatLocker\n+import org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues\n+import org.apache.commons.math3.stat.inference.TTest\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * Significance testing methods for [[StreamingTest]]. New 2-sample statistical significance tests\n+ * should extend [[StreamingTestMethod]] and introduce a new entry in\n+ * [[StreamingTestMethod.TEST_NAME_TO_OBJECT]]\n+ */\n+private[stat] sealed trait StreamingTestMethod extends Serializable {\n+\n+  val MethodName: String"
  }],
  "prId": 4716
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`nullHypothesis`\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T05:06:35Z",
    "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import java.io.Serializable\n+\n+import scala.language.implicitConversions\n+import scala.math.pow\n+\n+import com.twitter.chill.MeatLocker\n+import org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues\n+import org.apache.commons.math3.stat.inference.TTest\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * Significance testing methods for [[StreamingTest]]. New 2-sample statistical significance tests\n+ * should extend [[StreamingTestMethod]] and introduce a new entry in\n+ * [[StreamingTestMethod.TEST_NAME_TO_OBJECT]]\n+ */\n+private[stat] sealed trait StreamingTestMethod extends Serializable {\n+\n+  val MethodName: String\n+  val NullHypothesis: String"
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T20:26:19Z",
    "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import java.io.Serializable\n+\n+import scala.language.implicitConversions\n+import scala.math.pow\n+\n+import com.twitter.chill.MeatLocker\n+import org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues\n+import org.apache.commons.math3.stat.inference.TTest\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * Significance testing methods for [[StreamingTest]]. New 2-sample statistical significance tests\n+ * should extend [[StreamingTestMethod]] and introduce a new entry in\n+ * [[StreamingTestMethod.TEST_NAME_TO_OBJECT]]\n+ */\n+private[stat] sealed trait StreamingTestMethod extends Serializable {\n+\n+  val MethodName: String\n+  val NullHypothesis: String"
  }],
  "prId": 4716
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`tTester`\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T05:07:31Z",
    "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import java.io.Serializable\n+\n+import scala.language.implicitConversions\n+import scala.math.pow\n+\n+import com.twitter.chill.MeatLocker\n+import org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues\n+import org.apache.commons.math3.stat.inference.TTest\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * Significance testing methods for [[StreamingTest]]. New 2-sample statistical significance tests\n+ * should extend [[StreamingTestMethod]] and introduce a new entry in\n+ * [[StreamingTestMethod.TEST_NAME_TO_OBJECT]]\n+ */\n+private[stat] sealed trait StreamingTestMethod extends Serializable {\n+\n+  val MethodName: String\n+  val NullHypothesis: String\n+\n+  protected type SummaryPairStream =\n+    DStream[(StatCounter, StatCounter)]\n+\n+  /**\n+   * Perform streaming 2-sample statistical significance testing.\n+   *\n+   * @param sampleSummaries stream pairs of summary statistics for the 2 samples\n+   * @return stream of rest results\n+   */\n+  def doTest(sampleSummaries: SummaryPairStream): DStream[StreamingTestResult]\n+\n+  /**\n+   * Implicit adapter to convert between streaming summary statistics type and the type required by\n+   * the t-testing libraries.\n+   */\n+  protected implicit def toApacheCommonsStats(\n+      summaryStats: StatCounter): StatisticalSummaryValues = {\n+    new StatisticalSummaryValues(\n+      summaryStats.mean,\n+      summaryStats.variance,\n+      summaryStats.count,\n+      summaryStats.max,\n+      summaryStats.min,\n+      summaryStats.mean * summaryStats.count\n+    )\n+  }\n+}\n+\n+/**\n+ * Performs Welch's 2-sample t-test. The null hypothesis is that the two data sets have equal mean.\n+ * This test does not assume equal variance between the two samples and does not assume equal\n+ * sample size.\n+ *\n+ * More information: http://en.wikipedia.org/wiki/Welch%27s_t_test\n+ */\n+private[stat] object WelchTTest extends StreamingTestMethod with Logging {\n+\n+  final val MethodName = \"Welch's 2-sample T-test\"\n+  final val NullHypothesis = \"Both groups have same mean\"\n+\n+  private final val TTester = MeatLocker(new TTest())"
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T20:27:35Z",
    "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import java.io.Serializable\n+\n+import scala.language.implicitConversions\n+import scala.math.pow\n+\n+import com.twitter.chill.MeatLocker\n+import org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues\n+import org.apache.commons.math3.stat.inference.TTest\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * Significance testing methods for [[StreamingTest]]. New 2-sample statistical significance tests\n+ * should extend [[StreamingTestMethod]] and introduce a new entry in\n+ * [[StreamingTestMethod.TEST_NAME_TO_OBJECT]]\n+ */\n+private[stat] sealed trait StreamingTestMethod extends Serializable {\n+\n+  val MethodName: String\n+  val NullHypothesis: String\n+\n+  protected type SummaryPairStream =\n+    DStream[(StatCounter, StatCounter)]\n+\n+  /**\n+   * Perform streaming 2-sample statistical significance testing.\n+   *\n+   * @param sampleSummaries stream pairs of summary statistics for the 2 samples\n+   * @return stream of rest results\n+   */\n+  def doTest(sampleSummaries: SummaryPairStream): DStream[StreamingTestResult]\n+\n+  /**\n+   * Implicit adapter to convert between streaming summary statistics type and the type required by\n+   * the t-testing libraries.\n+   */\n+  protected implicit def toApacheCommonsStats(\n+      summaryStats: StatCounter): StatisticalSummaryValues = {\n+    new StatisticalSummaryValues(\n+      summaryStats.mean,\n+      summaryStats.variance,\n+      summaryStats.count,\n+      summaryStats.max,\n+      summaryStats.min,\n+      summaryStats.mean * summaryStats.count\n+    )\n+  }\n+}\n+\n+/**\n+ * Performs Welch's 2-sample t-test. The null hypothesis is that the two data sets have equal mean.\n+ * This test does not assume equal variance between the two samples and does not assume equal\n+ * sample size.\n+ *\n+ * More information: http://en.wikipedia.org/wiki/Welch%27s_t_test\n+ */\n+private[stat] object WelchTTest extends StreamingTestMethod with Logging {\n+\n+  final val MethodName = \"Welch's 2-sample T-test\"\n+  final val NullHypothesis = \"Both groups have same mean\"\n+\n+  private final val TTester = MeatLocker(new TTest())"
  }],
  "prId": 4716
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`t-test`\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T05:07:58Z",
    "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import java.io.Serializable\n+\n+import scala.language.implicitConversions\n+import scala.math.pow\n+\n+import com.twitter.chill.MeatLocker\n+import org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues\n+import org.apache.commons.math3.stat.inference.TTest\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * Significance testing methods for [[StreamingTest]]. New 2-sample statistical significance tests\n+ * should extend [[StreamingTestMethod]] and introduce a new entry in\n+ * [[StreamingTestMethod.TEST_NAME_TO_OBJECT]]\n+ */\n+private[stat] sealed trait StreamingTestMethod extends Serializable {\n+\n+  val MethodName: String\n+  val NullHypothesis: String\n+\n+  protected type SummaryPairStream =\n+    DStream[(StatCounter, StatCounter)]\n+\n+  /**\n+   * Perform streaming 2-sample statistical significance testing.\n+   *\n+   * @param sampleSummaries stream pairs of summary statistics for the 2 samples\n+   * @return stream of rest results\n+   */\n+  def doTest(sampleSummaries: SummaryPairStream): DStream[StreamingTestResult]\n+\n+  /**\n+   * Implicit adapter to convert between streaming summary statistics type and the type required by\n+   * the t-testing libraries.\n+   */\n+  protected implicit def toApacheCommonsStats(\n+      summaryStats: StatCounter): StatisticalSummaryValues = {\n+    new StatisticalSummaryValues(\n+      summaryStats.mean,\n+      summaryStats.variance,\n+      summaryStats.count,\n+      summaryStats.max,\n+      summaryStats.min,\n+      summaryStats.mean * summaryStats.count\n+    )\n+  }\n+}\n+\n+/**\n+ * Performs Welch's 2-sample t-test. The null hypothesis is that the two data sets have equal mean.\n+ * This test does not assume equal variance between the two samples and does not assume equal\n+ * sample size.\n+ *\n+ * More information: http://en.wikipedia.org/wiki/Welch%27s_t_test\n+ */\n+private[stat] object WelchTTest extends StreamingTestMethod with Logging {\n+\n+  final val MethodName = \"Welch's 2-sample T-test\"\n+  final val NullHypothesis = \"Both groups have same mean\"\n+\n+  private final val TTester = MeatLocker(new TTest())\n+\n+  def doTest(data: SummaryPairStream): DStream[StreamingTestResult] =\n+    data.map[StreamingTestResult]((test _).tupled)\n+\n+  private def test(\n+      statsA: StatCounter,\n+      statsB: StatCounter): StreamingTestResult = {\n+    def welchDF(sample1: StatisticalSummaryValues, sample2: StatisticalSummaryValues): Double = {\n+      val s1 = sample1.getVariance\n+      val n1 = sample1.getN\n+      val s2 = sample2.getVariance\n+      val n2 = sample2.getN\n+\n+      val a = pow(s1, 2) / n1\n+      val b = pow(s2, 2) / n2\n+\n+      pow(a + b, 2) / ((pow(a, 2) / (n1 - 1)) + (pow(b, 2) / (n2 - 1)))\n+    }\n+\n+    new StreamingTestResult(\n+      TTester.get.tTest(statsA, statsB),\n+      welchDF(statsA, statsB),\n+      TTester.get.t(statsA, statsB),\n+      MethodName,\n+      NullHypothesis\n+    )\n+  }\n+}\n+\n+/**\n+ * Performs Students's 2-sample t-test. The null hypothesis is that the two data sets have equal\n+ * mean. This test assumes equal variance between the two samples and does not assume equal sample\n+ * size. For unequal variances, Welch's t-test should be used instead.\n+ *\n+ * More information: http://en.wikipedia.org/wiki/Student%27s_t-test\n+ */\n+private[stat] object StudentTTest extends StreamingTestMethod with Logging {\n+\n+  final val MethodName = \"Student's 2-sample T-test\""
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T20:27:41Z",
    "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import java.io.Serializable\n+\n+import scala.language.implicitConversions\n+import scala.math.pow\n+\n+import com.twitter.chill.MeatLocker\n+import org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues\n+import org.apache.commons.math3.stat.inference.TTest\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * Significance testing methods for [[StreamingTest]]. New 2-sample statistical significance tests\n+ * should extend [[StreamingTestMethod]] and introduce a new entry in\n+ * [[StreamingTestMethod.TEST_NAME_TO_OBJECT]]\n+ */\n+private[stat] sealed trait StreamingTestMethod extends Serializable {\n+\n+  val MethodName: String\n+  val NullHypothesis: String\n+\n+  protected type SummaryPairStream =\n+    DStream[(StatCounter, StatCounter)]\n+\n+  /**\n+   * Perform streaming 2-sample statistical significance testing.\n+   *\n+   * @param sampleSummaries stream pairs of summary statistics for the 2 samples\n+   * @return stream of rest results\n+   */\n+  def doTest(sampleSummaries: SummaryPairStream): DStream[StreamingTestResult]\n+\n+  /**\n+   * Implicit adapter to convert between streaming summary statistics type and the type required by\n+   * the t-testing libraries.\n+   */\n+  protected implicit def toApacheCommonsStats(\n+      summaryStats: StatCounter): StatisticalSummaryValues = {\n+    new StatisticalSummaryValues(\n+      summaryStats.mean,\n+      summaryStats.variance,\n+      summaryStats.count,\n+      summaryStats.max,\n+      summaryStats.min,\n+      summaryStats.mean * summaryStats.count\n+    )\n+  }\n+}\n+\n+/**\n+ * Performs Welch's 2-sample t-test. The null hypothesis is that the two data sets have equal mean.\n+ * This test does not assume equal variance between the two samples and does not assume equal\n+ * sample size.\n+ *\n+ * More information: http://en.wikipedia.org/wiki/Welch%27s_t_test\n+ */\n+private[stat] object WelchTTest extends StreamingTestMethod with Logging {\n+\n+  final val MethodName = \"Welch's 2-sample T-test\"\n+  final val NullHypothesis = \"Both groups have same mean\"\n+\n+  private final val TTester = MeatLocker(new TTest())\n+\n+  def doTest(data: SummaryPairStream): DStream[StreamingTestResult] =\n+    data.map[StreamingTestResult]((test _).tupled)\n+\n+  private def test(\n+      statsA: StatCounter,\n+      statsB: StatCounter): StreamingTestResult = {\n+    def welchDF(sample1: StatisticalSummaryValues, sample2: StatisticalSummaryValues): Double = {\n+      val s1 = sample1.getVariance\n+      val n1 = sample1.getN\n+      val s2 = sample2.getVariance\n+      val n2 = sample2.getN\n+\n+      val a = pow(s1, 2) / n1\n+      val b = pow(s2, 2) / n2\n+\n+      pow(a + b, 2) / ((pow(a, 2) / (n1 - 1)) + (pow(b, 2) / (n2 - 1)))\n+    }\n+\n+    new StreamingTestResult(\n+      TTester.get.tTest(statsA, statsB),\n+      welchDF(statsA, statsB),\n+      TTester.get.t(statsA, statsB),\n+      MethodName,\n+      NullHypothesis\n+    )\n+  }\n+}\n+\n+/**\n+ * Performs Students's 2-sample t-test. The null hypothesis is that the two data sets have equal\n+ * mean. This test assumes equal variance between the two samples and does not assume equal sample\n+ * size. For unequal variances, Welch's t-test should be used instead.\n+ *\n+ * More information: http://en.wikipedia.org/wiki/Student%27s_t-test\n+ */\n+private[stat] object StudentTTest extends StreamingTestMethod with Logging {\n+\n+  final val MethodName = \"Student's 2-sample T-test\""
  }],
  "prId": 4716
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "- could be private\n- add explicit type info\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T05:08:19Z",
    "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import java.io.Serializable\n+\n+import scala.language.implicitConversions\n+import scala.math.pow\n+\n+import com.twitter.chill.MeatLocker\n+import org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues\n+import org.apache.commons.math3.stat.inference.TTest\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * Significance testing methods for [[StreamingTest]]. New 2-sample statistical significance tests\n+ * should extend [[StreamingTestMethod]] and introduce a new entry in\n+ * [[StreamingTestMethod.TEST_NAME_TO_OBJECT]]\n+ */\n+private[stat] sealed trait StreamingTestMethod extends Serializable {\n+\n+  val MethodName: String\n+  val NullHypothesis: String\n+\n+  protected type SummaryPairStream =\n+    DStream[(StatCounter, StatCounter)]\n+\n+  /**\n+   * Perform streaming 2-sample statistical significance testing.\n+   *\n+   * @param sampleSummaries stream pairs of summary statistics for the 2 samples\n+   * @return stream of rest results\n+   */\n+  def doTest(sampleSummaries: SummaryPairStream): DStream[StreamingTestResult]\n+\n+  /**\n+   * Implicit adapter to convert between streaming summary statistics type and the type required by\n+   * the t-testing libraries.\n+   */\n+  protected implicit def toApacheCommonsStats(\n+      summaryStats: StatCounter): StatisticalSummaryValues = {\n+    new StatisticalSummaryValues(\n+      summaryStats.mean,\n+      summaryStats.variance,\n+      summaryStats.count,\n+      summaryStats.max,\n+      summaryStats.min,\n+      summaryStats.mean * summaryStats.count\n+    )\n+  }\n+}\n+\n+/**\n+ * Performs Welch's 2-sample t-test. The null hypothesis is that the two data sets have equal mean.\n+ * This test does not assume equal variance between the two samples and does not assume equal\n+ * sample size.\n+ *\n+ * More information: http://en.wikipedia.org/wiki/Welch%27s_t_test\n+ */\n+private[stat] object WelchTTest extends StreamingTestMethod with Logging {\n+\n+  final val MethodName = \"Welch's 2-sample T-test\"\n+  final val NullHypothesis = \"Both groups have same mean\"\n+\n+  private final val TTester = MeatLocker(new TTest())\n+\n+  def doTest(data: SummaryPairStream): DStream[StreamingTestResult] =\n+    data.map[StreamingTestResult]((test _).tupled)\n+\n+  private def test(\n+      statsA: StatCounter,\n+      statsB: StatCounter): StreamingTestResult = {\n+    def welchDF(sample1: StatisticalSummaryValues, sample2: StatisticalSummaryValues): Double = {\n+      val s1 = sample1.getVariance\n+      val n1 = sample1.getN\n+      val s2 = sample2.getVariance\n+      val n2 = sample2.getN\n+\n+      val a = pow(s1, 2) / n1\n+      val b = pow(s2, 2) / n2\n+\n+      pow(a + b, 2) / ((pow(a, 2) / (n1 - 1)) + (pow(b, 2) / (n2 - 1)))\n+    }\n+\n+    new StreamingTestResult(\n+      TTester.get.tTest(statsA, statsB),\n+      welchDF(statsA, statsB),\n+      TTester.get.t(statsA, statsB),\n+      MethodName,\n+      NullHypothesis\n+    )\n+  }\n+}\n+\n+/**\n+ * Performs Students's 2-sample t-test. The null hypothesis is that the two data sets have equal\n+ * mean. This test assumes equal variance between the two samples and does not assume equal sample\n+ * size. For unequal variances, Welch's t-test should be used instead.\n+ *\n+ * More information: http://en.wikipedia.org/wiki/Student%27s_t-test\n+ */\n+private[stat] object StudentTTest extends StreamingTestMethod with Logging {\n+\n+  final val MethodName = \"Student's 2-sample T-test\"\n+  final val NullHypothesis = \"Both groups have same mean\"\n+\n+  private final val TTester = MeatLocker(new TTest())\n+\n+  def doTest(data: SummaryPairStream): DStream[StreamingTestResult] =\n+    data.map[StreamingTestResult]((test _).tupled)\n+\n+  private def test(\n+      statsA: StatCounter,\n+      statsB: StatCounter): StreamingTestResult = {\n+    def studentDF(sample1: StatisticalSummaryValues, sample2: StatisticalSummaryValues): Double =\n+      sample1.getN + sample2.getN - 2\n+\n+    new StreamingTestResult(\n+      TTester.get.homoscedasticTTest(statsA, statsB),\n+      studentDF(statsA, statsB),\n+      TTester.get.homoscedasticT(statsA, statsB),\n+      MethodName,\n+      NullHypothesis\n+    )\n+  }\n+}\n+\n+/**\n+ * Companion object holding supported [[StreamingTestMethod]] names and handles conversion between\n+ * strings used in [[StreamingTest]] configuration and actual method implementation.\n+ *\n+ * Currently supported tests: `welch`, `student`.\n+ */\n+private[stat] object StreamingTestMethod {\n+  // Note: after new `StreamingTestMethod`s are implemented, please update this map.\n+  final val TEST_NAME_TO_OBJECT = Map((\"welch\", WelchTTest), (\"student\", StudentTTest))"
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T20:28:43Z",
    "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import java.io.Serializable\n+\n+import scala.language.implicitConversions\n+import scala.math.pow\n+\n+import com.twitter.chill.MeatLocker\n+import org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues\n+import org.apache.commons.math3.stat.inference.TTest\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * Significance testing methods for [[StreamingTest]]. New 2-sample statistical significance tests\n+ * should extend [[StreamingTestMethod]] and introduce a new entry in\n+ * [[StreamingTestMethod.TEST_NAME_TO_OBJECT]]\n+ */\n+private[stat] sealed trait StreamingTestMethod extends Serializable {\n+\n+  val MethodName: String\n+  val NullHypothesis: String\n+\n+  protected type SummaryPairStream =\n+    DStream[(StatCounter, StatCounter)]\n+\n+  /**\n+   * Perform streaming 2-sample statistical significance testing.\n+   *\n+   * @param sampleSummaries stream pairs of summary statistics for the 2 samples\n+   * @return stream of rest results\n+   */\n+  def doTest(sampleSummaries: SummaryPairStream): DStream[StreamingTestResult]\n+\n+  /**\n+   * Implicit adapter to convert between streaming summary statistics type and the type required by\n+   * the t-testing libraries.\n+   */\n+  protected implicit def toApacheCommonsStats(\n+      summaryStats: StatCounter): StatisticalSummaryValues = {\n+    new StatisticalSummaryValues(\n+      summaryStats.mean,\n+      summaryStats.variance,\n+      summaryStats.count,\n+      summaryStats.max,\n+      summaryStats.min,\n+      summaryStats.mean * summaryStats.count\n+    )\n+  }\n+}\n+\n+/**\n+ * Performs Welch's 2-sample t-test. The null hypothesis is that the two data sets have equal mean.\n+ * This test does not assume equal variance between the two samples and does not assume equal\n+ * sample size.\n+ *\n+ * More information: http://en.wikipedia.org/wiki/Welch%27s_t_test\n+ */\n+private[stat] object WelchTTest extends StreamingTestMethod with Logging {\n+\n+  final val MethodName = \"Welch's 2-sample T-test\"\n+  final val NullHypothesis = \"Both groups have same mean\"\n+\n+  private final val TTester = MeatLocker(new TTest())\n+\n+  def doTest(data: SummaryPairStream): DStream[StreamingTestResult] =\n+    data.map[StreamingTestResult]((test _).tupled)\n+\n+  private def test(\n+      statsA: StatCounter,\n+      statsB: StatCounter): StreamingTestResult = {\n+    def welchDF(sample1: StatisticalSummaryValues, sample2: StatisticalSummaryValues): Double = {\n+      val s1 = sample1.getVariance\n+      val n1 = sample1.getN\n+      val s2 = sample2.getVariance\n+      val n2 = sample2.getN\n+\n+      val a = pow(s1, 2) / n1\n+      val b = pow(s2, 2) / n2\n+\n+      pow(a + b, 2) / ((pow(a, 2) / (n1 - 1)) + (pow(b, 2) / (n2 - 1)))\n+    }\n+\n+    new StreamingTestResult(\n+      TTester.get.tTest(statsA, statsB),\n+      welchDF(statsA, statsB),\n+      TTester.get.t(statsA, statsB),\n+      MethodName,\n+      NullHypothesis\n+    )\n+  }\n+}\n+\n+/**\n+ * Performs Students's 2-sample t-test. The null hypothesis is that the two data sets have equal\n+ * mean. This test assumes equal variance between the two samples and does not assume equal sample\n+ * size. For unequal variances, Welch's t-test should be used instead.\n+ *\n+ * More information: http://en.wikipedia.org/wiki/Student%27s_t-test\n+ */\n+private[stat] object StudentTTest extends StreamingTestMethod with Logging {\n+\n+  final val MethodName = \"Student's 2-sample T-test\"\n+  final val NullHypothesis = \"Both groups have same mean\"\n+\n+  private final val TTester = MeatLocker(new TTest())\n+\n+  def doTest(data: SummaryPairStream): DStream[StreamingTestResult] =\n+    data.map[StreamingTestResult]((test _).tupled)\n+\n+  private def test(\n+      statsA: StatCounter,\n+      statsB: StatCounter): StreamingTestResult = {\n+    def studentDF(sample1: StatisticalSummaryValues, sample2: StatisticalSummaryValues): Double =\n+      sample1.getN + sample2.getN - 2\n+\n+    new StreamingTestResult(\n+      TTester.get.homoscedasticTTest(statsA, statsB),\n+      studentDF(statsA, statsB),\n+      TTester.get.homoscedasticT(statsA, statsB),\n+      MethodName,\n+      NullHypothesis\n+    )\n+  }\n+}\n+\n+/**\n+ * Companion object holding supported [[StreamingTestMethod]] names and handles conversion between\n+ * strings used in [[StreamingTest]] configuration and actual method implementation.\n+ *\n+ * Currently supported tests: `welch`, `student`.\n+ */\n+private[stat] object StreamingTestMethod {\n+  // Note: after new `StreamingTestMethod`s are implemented, please update this map.\n+  final val TEST_NAME_TO_OBJECT = Map((\"welch\", WelchTTest), (\"student\", StudentTTest))"
  }],
  "prId": 4716
}]