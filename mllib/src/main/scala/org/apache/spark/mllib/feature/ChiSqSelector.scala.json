[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "It should be okay to remove this line and use `Vector` directly.\n",
    "commit": "755d358cece5fa09b912416e60ebd7c16f9be05b",
    "createdAt": "2015-01-28T08:42:20Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg"
  }],
  "prId": 1484
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Maybe it is better to use `Array[Int]`, which is Java compatible.\n",
    "commit": "755d358cece5fa09b912416e60ebd7c16f9be05b",
    "createdAt": "2015-01-28T08:42:21Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg\n+import org.apache.spark.mllib.linalg.{Vectors, Vector}\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.rdd.RDD\n+\n+/**\n+ * :: Experimental ::\n+ * Chi Squared selector model.\n+ *\n+ * @param indices list of indices to select (filter)\n+ */\n+@Experimental\n+class ChiSqSelectorModel(indices: IndexedSeq[Int]) extends VectorTransformer {"
  }],
  "prId": 1484
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Since `Compress` is only used in `ChiSqSelector`, shall we move its implementation here?\n",
    "commit": "755d358cece5fa09b912416e60ebd7c16f9be05b",
    "createdAt": "2015-01-28T08:42:23Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg\n+import org.apache.spark.mllib.linalg.{Vectors, Vector}\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.rdd.RDD\n+\n+/**\n+ * :: Experimental ::\n+ * Chi Squared selector model.\n+ *\n+ * @param indices list of indices to select (filter)\n+ */\n+@Experimental\n+class ChiSqSelectorModel(indices: IndexedSeq[Int]) extends VectorTransformer {\n+  /**\n+   * Applies transformation on a vector.\n+   *\n+   * @param vector vector to be transformed.\n+   * @return transformed vector.\n+   */\n+  override def transform(vector: linalg.Vector): linalg.Vector = {\n+    Compress(vector, indices)"
  }, {
    "author": {
      "login": "avulanov"
    },
    "body": "I though it would be useful in general for filtering features. Does it make sense?\n",
    "commit": "755d358cece5fa09b912416e60ebd7c16f9be05b",
    "createdAt": "2015-01-30T20:37:06Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg\n+import org.apache.spark.mllib.linalg.{Vectors, Vector}\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.rdd.RDD\n+\n+/**\n+ * :: Experimental ::\n+ * Chi Squared selector model.\n+ *\n+ * @param indices list of indices to select (filter)\n+ */\n+@Experimental\n+class ChiSqSelectorModel(indices: IndexedSeq[Int]) extends VectorTransformer {\n+  /**\n+   * Applies transformation on a vector.\n+   *\n+   * @param vector vector to be transformed.\n+   * @return transformed vector.\n+   */\n+  override def transform(vector: linalg.Vector): linalg.Vector = {\n+    Compress(vector, indices)"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "The question is that it now lives under `mllib.feature.ChiSqSelector.scala`. We can certainly add this method as `Vector.slice` to `Vectors.scala`. But for this PR, it is fine to make it private. Once we find a home for it, we can expose it.\n",
    "commit": "755d358cece5fa09b912416e60ebd7c16f9be05b",
    "createdAt": "2015-01-30T22:16:32Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg\n+import org.apache.spark.mllib.linalg.{Vectors, Vector}\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.rdd.RDD\n+\n+/**\n+ * :: Experimental ::\n+ * Chi Squared selector model.\n+ *\n+ * @param indices list of indices to select (filter)\n+ */\n+@Experimental\n+class ChiSqSelectorModel(indices: IndexedSeq[Int]) extends VectorTransformer {\n+  /**\n+   * Applies transformation on a vector.\n+   *\n+   * @param vector vector to be transformed.\n+   * @return transformed vector.\n+   */\n+  override def transform(vector: linalg.Vector): linalg.Vector = {\n+    Compress(vector, indices)"
  }],
  "prId": 1484
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Make `ChiSqSelector` a class and `numTopFeatures` its parameter. This should be quite similar to, e.g., IDF: https://github.com/apache/spark/blob/master/mllib/src/main/scala/org/apache/spark/mllib/feature/IDF.scala#L42\n",
    "commit": "755d358cece5fa09b912416e60ebd7c16f9be05b",
    "createdAt": "2015-01-28T08:42:24Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg\n+import org.apache.spark.mllib.linalg.{Vectors, Vector}\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.rdd.RDD\n+\n+/**\n+ * :: Experimental ::\n+ * Chi Squared selector model.\n+ *\n+ * @param indices list of indices to select (filter)\n+ */\n+@Experimental\n+class ChiSqSelectorModel(indices: IndexedSeq[Int]) extends VectorTransformer {\n+  /**\n+   * Applies transformation on a vector.\n+   *\n+   * @param vector vector to be transformed.\n+   * @return transformed vector.\n+   */\n+  override def transform(vector: linalg.Vector): linalg.Vector = {\n+    Compress(vector, indices)\n+  }\n+}\n+\n+/**\n+ * :: Experimental ::\n+ * Creates a ChiSquared feature selector.\n+ */\n+@Experimental\n+object ChiSqSelector {"
  }, {
    "author": {
      "login": "avulanov"
    },
    "body": "Done! However, why do you think it is better than having static function given that this class does nothing but storing an integer (same for IDF)?\n",
    "commit": "755d358cece5fa09b912416e60ebd7c16f9be05b",
    "createdAt": "2015-01-30T18:31:26Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg\n+import org.apache.spark.mllib.linalg.{Vectors, Vector}\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.rdd.RDD\n+\n+/**\n+ * :: Experimental ::\n+ * Chi Squared selector model.\n+ *\n+ * @param indices list of indices to select (filter)\n+ */\n+@Experimental\n+class ChiSqSelectorModel(indices: IndexedSeq[Int]) extends VectorTransformer {\n+  /**\n+   * Applies transformation on a vector.\n+   *\n+   * @param vector vector to be transformed.\n+   * @return transformed vector.\n+   */\n+  override def transform(vector: linalg.Vector): linalg.Vector = {\n+    Compress(vector, indices)\n+  }\n+}\n+\n+/**\n+ * :: Experimental ::\n+ * Creates a ChiSquared feature selector.\n+ */\n+@Experimental\n+object ChiSqSelector {"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "For this one, the static method is convenient. But others may take many parameters, where a static method becomes hard to maintain. To be consistent across MLlib, we use this Estimator/Model style. We can also embed statistics in the model later, which is also helpful.\n",
    "commit": "755d358cece5fa09b912416e60ebd7c16f9be05b",
    "createdAt": "2015-01-30T22:19:42Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg\n+import org.apache.spark.mllib.linalg.{Vectors, Vector}\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.rdd.RDD\n+\n+/**\n+ * :: Experimental ::\n+ * Chi Squared selector model.\n+ *\n+ * @param indices list of indices to select (filter)\n+ */\n+@Experimental\n+class ChiSqSelectorModel(indices: IndexedSeq[Int]) extends VectorTransformer {\n+  /**\n+   * Applies transformation on a vector.\n+   *\n+   * @param vector vector to be transformed.\n+   * @return transformed vector.\n+   */\n+  override def transform(vector: linalg.Vector): linalg.Vector = {\n+    Compress(vector, indices)\n+  }\n+}\n+\n+/**\n+ * :: Experimental ::\n+ * Creates a ChiSquared feature selector.\n+ */\n+@Experimental\n+object ChiSqSelector {"
  }],
  "prId": 1484
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "It might be easier to read if we use multiple lines:\n\n```\nval indices = Statistics.chiSqTest(data)\n  .zipWithIndex\n  .sortBy(-_._1.statistic)\n  .take(numTopFeatures)\n  .map(_._2)\n  .toArray\n```\n",
    "commit": "755d358cece5fa09b912416e60ebd7c16f9be05b",
    "createdAt": "2015-01-28T08:42:25Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg\n+import org.apache.spark.mllib.linalg.{Vectors, Vector}\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.rdd.RDD\n+\n+/**\n+ * :: Experimental ::\n+ * Chi Squared selector model.\n+ *\n+ * @param indices list of indices to select (filter)\n+ */\n+@Experimental\n+class ChiSqSelectorModel(indices: IndexedSeq[Int]) extends VectorTransformer {\n+  /**\n+   * Applies transformation on a vector.\n+   *\n+   * @param vector vector to be transformed.\n+   * @return transformed vector.\n+   */\n+  override def transform(vector: linalg.Vector): linalg.Vector = {\n+    Compress(vector, indices)\n+  }\n+}\n+\n+/**\n+ * :: Experimental ::\n+ * Creates a ChiSquared feature selector.\n+ */\n+@Experimental\n+object ChiSqSelector {\n+\n+  /**\n+   * Returns a ChiSquared feature selector.\n+   *\n+   * @param data data used to compute the Chi Squared statistic.\n+   * @param numTopFeatures number of features that selector will select\n+   *                       (ordered by statistic value descending)\n+   */\n+  def fit(data: RDD[LabeledPoint], numTopFeatures: Int): ChiSqSelectorModel = {\n+    val (_, indices) = Statistics.chiSqTest(data).zipWithIndex.sortBy{ case(res, index) =>"
  }],
  "prId": 1484
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "This is not efficient: 1) `toArray` creates a dense array, 2) `indexes.contains` is O(n)-time. We can handle sparsity in a separate PR. For 2), we can do this\n\n```\nval values = features.toArray\nVector.dense(indices.map(i => values(i)))\n```\n",
    "commit": "755d358cece5fa09b912416e60ebd7c16f9be05b",
    "createdAt": "2015-01-28T08:42:27Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg\n+import org.apache.spark.mllib.linalg.{Vectors, Vector}\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.rdd.RDD\n+\n+/**\n+ * :: Experimental ::\n+ * Chi Squared selector model.\n+ *\n+ * @param indices list of indices to select (filter)\n+ */\n+@Experimental\n+class ChiSqSelectorModel(indices: IndexedSeq[Int]) extends VectorTransformer {\n+  /**\n+   * Applies transformation on a vector.\n+   *\n+   * @param vector vector to be transformed.\n+   * @return transformed vector.\n+   */\n+  override def transform(vector: linalg.Vector): linalg.Vector = {\n+    Compress(vector, indices)\n+  }\n+}\n+\n+/**\n+ * :: Experimental ::\n+ * Creates a ChiSquared feature selector.\n+ */\n+@Experimental\n+object ChiSqSelector {\n+\n+  /**\n+   * Returns a ChiSquared feature selector.\n+   *\n+   * @param data data used to compute the Chi Squared statistic.\n+   * @param numTopFeatures number of features that selector will select\n+   *                       (ordered by statistic value descending)\n+   */\n+  def fit(data: RDD[LabeledPoint], numTopFeatures: Int): ChiSqSelectorModel = {\n+    val (_, indices) = Statistics.chiSqTest(data).zipWithIndex.sortBy{ case(res, index) =>\n+      -res.statistic}.take(numTopFeatures).unzip\n+    new ChiSqSelectorModel(indices)\n+  }\n+}\n+\n+/**\n+ * :: Experimental ::\n+ * Filters features in a given vector\n+ */\n+@Experimental\n+object Compress {\n+  /**\n+   * Returns a vector with features filtered\n+   * @param features vector\n+   * @param indexes indexes of features to filter\n+   */\n+  def apply(features: Vector, indexes: IndexedSeq[Int]): Vector = {\n+    val (values, _) =\n+      features.toArray.zipWithIndex.filter { case (value, index) =>\n+        indexes.contains(index)}.unzip"
  }],
  "prId": 1484
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "This is slow due to hash map creation and hash lookups. Since both arrays are order, we can use the one-catch-another approach to extract indices, for example,\n\nhttps://github.com/apache/spark/blob/master/mllib/src/main/scala/org/apache/spark/mllib/linalg/Vectors.scala#L344\n\nBtw, please use `ArrayBuilder` to build new index/value arrays, which doesn't have the boxing/unboxing issues.\n",
    "commit": "755d358cece5fa09b912416e60ebd7c16f9be05b",
    "createdAt": "2015-01-30T22:23:57Z",
    "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg.{DenseVector, SparseVector, Vectors, Vector}\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.rdd.RDD\n+\n+/**\n+ * :: Experimental ::\n+ * Chi Squared selector model.\n+ *\n+ * @param indices list of indices to select (filter)\n+ */\n+@Experimental\n+class ChiSqSelectorModel(indices: Array[Int]) extends VectorTransformer {\n+  /**\n+   * Applies transformation on a vector.\n+   *\n+   * @param vector vector to be transformed.\n+   * @return transformed vector.\n+   */\n+  override def transform(vector: Vector): Vector = {\n+    Compress(vector, indices)\n+  }\n+}\n+\n+/**\n+ * :: Experimental ::\n+ * Creates a ChiSquared feature selector.\n+ * @param numTopFeatures number of features that selector will select\n+ *                       (ordered by statistic value descending)\n+ */\n+@Experimental\n+class ChiSqSelector (val numTopFeatures: Int) {\n+\n+  /**\n+   * Returns a ChiSquared feature selector.\n+   *\n+   * @param data data used to compute the Chi Squared statistic.\n+   */\n+  def fit(data: RDD[LabeledPoint]): ChiSqSelectorModel = {\n+    val indices = Statistics.chiSqTest(data)\n+      .zipWithIndex.sortBy { case(res, _) => -res.statistic }\n+      .take(numTopFeatures)\n+      .map{ case(_, indices) => indices }\n+    new ChiSqSelectorModel(indices)\n+  }\n+}\n+\n+/**\n+ * :: Experimental ::\n+ * Filters features in a given vector\n+ */\n+@Experimental\n+object Compress {\n+  /**\n+   * Returns a vector with features filtered.\n+   * Preserves the order of filtered features the same as their indices are stored.\n+   * @param features vector\n+   * @param filterIndices indices of features to filter\n+   */\n+  def apply(features: Vector, filterIndices: Array[Int]): Vector = {\n+    features match {\n+      case SparseVector(size, indices, values) =>\n+        val filterMap = filterIndices.zipWithIndex.toMap"
  }, {
    "author": {
      "login": "avulanov"
    },
    "body": "Thank you for suggestion! Do you think it is ok to require indices to be sorted? I've put `.sorted` into `.fit` however another candidate is `.compress`. No \"sorted\" requirement is needed for the latter.\n",
    "commit": "755d358cece5fa09b912416e60ebd7c16f9be05b",
    "createdAt": "2015-01-31T00:40:28Z",
    "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg.{DenseVector, SparseVector, Vectors, Vector}\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.rdd.RDD\n+\n+/**\n+ * :: Experimental ::\n+ * Chi Squared selector model.\n+ *\n+ * @param indices list of indices to select (filter)\n+ */\n+@Experimental\n+class ChiSqSelectorModel(indices: Array[Int]) extends VectorTransformer {\n+  /**\n+   * Applies transformation on a vector.\n+   *\n+   * @param vector vector to be transformed.\n+   * @return transformed vector.\n+   */\n+  override def transform(vector: Vector): Vector = {\n+    Compress(vector, indices)\n+  }\n+}\n+\n+/**\n+ * :: Experimental ::\n+ * Creates a ChiSquared feature selector.\n+ * @param numTopFeatures number of features that selector will select\n+ *                       (ordered by statistic value descending)\n+ */\n+@Experimental\n+class ChiSqSelector (val numTopFeatures: Int) {\n+\n+  /**\n+   * Returns a ChiSquared feature selector.\n+   *\n+   * @param data data used to compute the Chi Squared statistic.\n+   */\n+  def fit(data: RDD[LabeledPoint]): ChiSqSelectorModel = {\n+    val indices = Statistics.chiSqTest(data)\n+      .zipWithIndex.sortBy { case(res, _) => -res.statistic }\n+      .take(numTopFeatures)\n+      .map{ case(_, indices) => indices }\n+    new ChiSqSelectorModel(indices)\n+  }\n+}\n+\n+/**\n+ * :: Experimental ::\n+ * Filters features in a given vector\n+ */\n+@Experimental\n+object Compress {\n+  /**\n+   * Returns a vector with features filtered.\n+   * Preserves the order of filtered features the same as their indices are stored.\n+   * @param features vector\n+   * @param filterIndices indices of features to filter\n+   */\n+  def apply(features: Vector, filterIndices: Array[Int]): Vector = {\n+    features match {\n+      case SparseVector(size, indices, values) =>\n+        val filterMap = filterIndices.zipWithIndex.toMap"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Please see my new inline comments about the constructor. Basically, if we expose the constructor, we should check the ordering of `indices`.\n",
    "commit": "755d358cece5fa09b912416e60ebd7c16f9be05b",
    "createdAt": "2015-01-31T07:59:18Z",
    "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg.{DenseVector, SparseVector, Vectors, Vector}\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.rdd.RDD\n+\n+/**\n+ * :: Experimental ::\n+ * Chi Squared selector model.\n+ *\n+ * @param indices list of indices to select (filter)\n+ */\n+@Experimental\n+class ChiSqSelectorModel(indices: Array[Int]) extends VectorTransformer {\n+  /**\n+   * Applies transformation on a vector.\n+   *\n+   * @param vector vector to be transformed.\n+   * @return transformed vector.\n+   */\n+  override def transform(vector: Vector): Vector = {\n+    Compress(vector, indices)\n+  }\n+}\n+\n+/**\n+ * :: Experimental ::\n+ * Creates a ChiSquared feature selector.\n+ * @param numTopFeatures number of features that selector will select\n+ *                       (ordered by statistic value descending)\n+ */\n+@Experimental\n+class ChiSqSelector (val numTopFeatures: Int) {\n+\n+  /**\n+   * Returns a ChiSquared feature selector.\n+   *\n+   * @param data data used to compute the Chi Squared statistic.\n+   */\n+  def fit(data: RDD[LabeledPoint]): ChiSqSelectorModel = {\n+    val indices = Statistics.chiSqTest(data)\n+      .zipWithIndex.sortBy { case(res, _) => -res.statistic }\n+      .take(numTopFeatures)\n+      .map{ case(_, indices) => indices }\n+    new ChiSqSelectorModel(indices)\n+  }\n+}\n+\n+/**\n+ * :: Experimental ::\n+ * Filters features in a given vector\n+ */\n+@Experimental\n+object Compress {\n+  /**\n+   * Returns a vector with features filtered.\n+   * Preserves the order of filtered features the same as their indices are stored.\n+   * @param features vector\n+   * @param filterIndices indices of features to filter\n+   */\n+  def apply(features: Vector, filterIndices: Array[Int]): Vector = {\n+    features match {\n+      case SparseVector(size, indices, values) =>\n+        val filterMap = filterIndices.zipWithIndex.toMap"
  }],
  "prId": 1484
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "organize imports (If you use idea intellij, there is a useful plugin: https://plugins.jetbrains.com/plugin/7350)\n",
    "commit": "755d358cece5fa09b912416e60ebd7c16f9be05b",
    "createdAt": "2015-01-31T07:56:58Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg.{DenseVector, SparseVector, Vectors, Vector}\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.rdd.RDD\n+\n+import scala.collection.mutable.ArrayBuilder"
  }],
  "prId": 1484
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Remove one space before `private`. It should be okay to expose the constructor as well as `indices`. Otherwise, user won't be able to save/load a model and there is no easy way to obtain `indices`. We need to check the ordering of `indices` in the constructor then. For the name, is it clear that `indices` means selected feature indices under this context? `selectedFeatures` may sound better, which we can put under a feature selector trait. \n",
    "commit": "755d358cece5fa09b912416e60ebd7c16f9be05b",
    "createdAt": "2015-01-31T07:57:00Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg.{DenseVector, SparseVector, Vectors, Vector}\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.rdd.RDD\n+\n+import scala.collection.mutable.ArrayBuilder\n+\n+/**\n+ * :: Experimental ::\n+ * Chi Squared selector model.\n+ *\n+ * @param indices list of indices to select (filter). Must be ordered asc\n+ */\n+@Experimental\n+class ChiSqSelectorModel  private[mllib] (indices: Array[Int]) extends VectorTransformer {"
  }],
  "prId": 1484
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "remove `: Int` (because this is a local var and it is clearly an `Int`)\n",
    "commit": "755d358cece5fa09b912416e60ebd7c16f9be05b",
    "createdAt": "2015-01-31T07:57:02Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg.{DenseVector, SparseVector, Vectors, Vector}\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.rdd.RDD\n+\n+import scala.collection.mutable.ArrayBuilder\n+\n+/**\n+ * :: Experimental ::\n+ * Chi Squared selector model.\n+ *\n+ * @param indices list of indices to select (filter). Must be ordered asc\n+ */\n+@Experimental\n+class ChiSqSelectorModel  private[mllib] (indices: Array[Int]) extends VectorTransformer {\n+  /**\n+   * Applies transformation on a vector.\n+   *\n+   * @param vector vector to be transformed.\n+   * @return transformed vector.\n+   */\n+  override def transform(vector: Vector): Vector = {\n+    compress(vector, indices)\n+  }\n+\n+  /**\n+   * Returns a vector with features filtered.\n+   * Preserves the order of filtered features the same as their indices are stored.\n+   * Might be moved to Vector as .slice\n+   * @param features vector\n+   * @param filterIndices indices of features to filter, must be ordered asc\n+   */\n+  private def compress(features: Vector, filterIndices: Array[Int]): Vector = {\n+    features match {\n+      case SparseVector(size, indices, values) =>\n+        val newSize = filterIndices.length\n+        val newValues = new ArrayBuilder.ofDouble\n+        val newIndices = new ArrayBuilder.ofInt\n+        var i: Int = 0"
  }],
  "prId": 1484
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "space after `while`\n",
    "commit": "755d358cece5fa09b912416e60ebd7c16f9be05b",
    "createdAt": "2015-01-31T07:57:03Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg.{DenseVector, SparseVector, Vectors, Vector}\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.rdd.RDD\n+\n+import scala.collection.mutable.ArrayBuilder\n+\n+/**\n+ * :: Experimental ::\n+ * Chi Squared selector model.\n+ *\n+ * @param indices list of indices to select (filter). Must be ordered asc\n+ */\n+@Experimental\n+class ChiSqSelectorModel  private[mllib] (indices: Array[Int]) extends VectorTransformer {\n+  /**\n+   * Applies transformation on a vector.\n+   *\n+   * @param vector vector to be transformed.\n+   * @return transformed vector.\n+   */\n+  override def transform(vector: Vector): Vector = {\n+    compress(vector, indices)\n+  }\n+\n+  /**\n+   * Returns a vector with features filtered.\n+   * Preserves the order of filtered features the same as their indices are stored.\n+   * Might be moved to Vector as .slice\n+   * @param features vector\n+   * @param filterIndices indices of features to filter, must be ordered asc\n+   */\n+  private def compress(features: Vector, filterIndices: Array[Int]): Vector = {\n+    features match {\n+      case SparseVector(size, indices, values) =>\n+        val newSize = filterIndices.length\n+        val newValues = new ArrayBuilder.ofDouble\n+        val newIndices = new ArrayBuilder.ofInt\n+        var i: Int = 0\n+        var j: Int = 0\n+        while(i < indices.length && j < filterIndices.length) {"
  }],
  "prId": 1484
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "space after `if`\n",
    "commit": "755d358cece5fa09b912416e60ebd7c16f9be05b",
    "createdAt": "2015-01-31T07:57:05Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg.{DenseVector, SparseVector, Vectors, Vector}\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.rdd.RDD\n+\n+import scala.collection.mutable.ArrayBuilder\n+\n+/**\n+ * :: Experimental ::\n+ * Chi Squared selector model.\n+ *\n+ * @param indices list of indices to select (filter). Must be ordered asc\n+ */\n+@Experimental\n+class ChiSqSelectorModel  private[mllib] (indices: Array[Int]) extends VectorTransformer {\n+  /**\n+   * Applies transformation on a vector.\n+   *\n+   * @param vector vector to be transformed.\n+   * @return transformed vector.\n+   */\n+  override def transform(vector: Vector): Vector = {\n+    compress(vector, indices)\n+  }\n+\n+  /**\n+   * Returns a vector with features filtered.\n+   * Preserves the order of filtered features the same as their indices are stored.\n+   * Might be moved to Vector as .slice\n+   * @param features vector\n+   * @param filterIndices indices of features to filter, must be ordered asc\n+   */\n+  private def compress(features: Vector, filterIndices: Array[Int]): Vector = {\n+    features match {\n+      case SparseVector(size, indices, values) =>\n+        val newSize = filterIndices.length\n+        val newValues = new ArrayBuilder.ofDouble\n+        val newIndices = new ArrayBuilder.ofInt\n+        var i: Int = 0\n+        var j: Int = 0\n+        while(i < indices.length && j < filterIndices.length) {\n+          if(indices(i) == filterIndices(j)) {"
  }],
  "prId": 1484
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "space after `if`. For performance, we can store `indices(i)` and `filterIndices(j)` to avoid look up twice\n",
    "commit": "755d358cece5fa09b912416e60ebd7c16f9be05b",
    "createdAt": "2015-01-31T07:57:07Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg.{DenseVector, SparseVector, Vectors, Vector}\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.rdd.RDD\n+\n+import scala.collection.mutable.ArrayBuilder\n+\n+/**\n+ * :: Experimental ::\n+ * Chi Squared selector model.\n+ *\n+ * @param indices list of indices to select (filter). Must be ordered asc\n+ */\n+@Experimental\n+class ChiSqSelectorModel  private[mllib] (indices: Array[Int]) extends VectorTransformer {\n+  /**\n+   * Applies transformation on a vector.\n+   *\n+   * @param vector vector to be transformed.\n+   * @return transformed vector.\n+   */\n+  override def transform(vector: Vector): Vector = {\n+    compress(vector, indices)\n+  }\n+\n+  /**\n+   * Returns a vector with features filtered.\n+   * Preserves the order of filtered features the same as their indices are stored.\n+   * Might be moved to Vector as .slice\n+   * @param features vector\n+   * @param filterIndices indices of features to filter, must be ordered asc\n+   */\n+  private def compress(features: Vector, filterIndices: Array[Int]): Vector = {\n+    features match {\n+      case SparseVector(size, indices, values) =>\n+        val newSize = filterIndices.length\n+        val newValues = new ArrayBuilder.ofDouble\n+        val newIndices = new ArrayBuilder.ofInt\n+        var i: Int = 0\n+        var j: Int = 0\n+        while(i < indices.length && j < filterIndices.length) {\n+          if(indices(i) == filterIndices(j)) {\n+            newIndices += j\n+            newValues += values(i)\n+            j += 1\n+            i += 1\n+          } else {\n+            if(indices(i) > filterIndices(j)) {"
  }],
  "prId": 1484
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Good point! Use a normal comment style `// TODO: Sparse ...`. `/** ... */` is for JavaDoc.\n",
    "commit": "755d358cece5fa09b912416e60ebd7c16f9be05b",
    "createdAt": "2015-01-31T07:57:08Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg.{DenseVector, SparseVector, Vectors, Vector}\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.rdd.RDD\n+\n+import scala.collection.mutable.ArrayBuilder\n+\n+/**\n+ * :: Experimental ::\n+ * Chi Squared selector model.\n+ *\n+ * @param indices list of indices to select (filter). Must be ordered asc\n+ */\n+@Experimental\n+class ChiSqSelectorModel  private[mllib] (indices: Array[Int]) extends VectorTransformer {\n+  /**\n+   * Applies transformation on a vector.\n+   *\n+   * @param vector vector to be transformed.\n+   * @return transformed vector.\n+   */\n+  override def transform(vector: Vector): Vector = {\n+    compress(vector, indices)\n+  }\n+\n+  /**\n+   * Returns a vector with features filtered.\n+   * Preserves the order of filtered features the same as their indices are stored.\n+   * Might be moved to Vector as .slice\n+   * @param features vector\n+   * @param filterIndices indices of features to filter, must be ordered asc\n+   */\n+  private def compress(features: Vector, filterIndices: Array[Int]): Vector = {\n+    features match {\n+      case SparseVector(size, indices, values) =>\n+        val newSize = filterIndices.length\n+        val newValues = new ArrayBuilder.ofDouble\n+        val newIndices = new ArrayBuilder.ofInt\n+        var i: Int = 0\n+        var j: Int = 0\n+        while(i < indices.length && j < filterIndices.length) {\n+          if(indices(i) == filterIndices(j)) {\n+            newIndices += j\n+            newValues += values(i)\n+            j += 1\n+            i += 1\n+          } else {\n+            if(indices(i) > filterIndices(j)) {\n+              j += 1\n+            } else {\n+              i += 1\n+            }\n+          }\n+        }\n+        /** Sparse representation might be ineffective if (newSize ~= newValues.size) */"
  }],
  "prId": 1484
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "It might be worth noting that the values are factors, as in https://github.com/apache/spark/blob/master/mllib/src/main/scala/org/apache/spark/mllib/stat/Statistics.scala#L160\n",
    "commit": "755d358cece5fa09b912416e60ebd7c16f9be05b",
    "createdAt": "2015-01-31T07:57:10Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg.{DenseVector, SparseVector, Vectors, Vector}\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.rdd.RDD\n+\n+import scala.collection.mutable.ArrayBuilder\n+\n+/**\n+ * :: Experimental ::\n+ * Chi Squared selector model.\n+ *\n+ * @param indices list of indices to select (filter). Must be ordered asc\n+ */\n+@Experimental\n+class ChiSqSelectorModel  private[mllib] (indices: Array[Int]) extends VectorTransformer {\n+  /**\n+   * Applies transformation on a vector.\n+   *\n+   * @param vector vector to be transformed.\n+   * @return transformed vector.\n+   */\n+  override def transform(vector: Vector): Vector = {\n+    compress(vector, indices)\n+  }\n+\n+  /**\n+   * Returns a vector with features filtered.\n+   * Preserves the order of filtered features the same as their indices are stored.\n+   * Might be moved to Vector as .slice\n+   * @param features vector\n+   * @param filterIndices indices of features to filter, must be ordered asc\n+   */\n+  private def compress(features: Vector, filterIndices: Array[Int]): Vector = {\n+    features match {\n+      case SparseVector(size, indices, values) =>\n+        val newSize = filterIndices.length\n+        val newValues = new ArrayBuilder.ofDouble\n+        val newIndices = new ArrayBuilder.ofInt\n+        var i: Int = 0\n+        var j: Int = 0\n+        while(i < indices.length && j < filterIndices.length) {\n+          if(indices(i) == filterIndices(j)) {\n+            newIndices += j\n+            newValues += values(i)\n+            j += 1\n+            i += 1\n+          } else {\n+            if(indices(i) > filterIndices(j)) {\n+              j += 1\n+            } else {\n+              i += 1\n+            }\n+          }\n+        }\n+        /** Sparse representation might be ineffective if (newSize ~= newValues.size) */\n+        Vectors.sparse(newSize, newIndices.result(), newValues.result())\n+      case DenseVector(values) =>\n+        val values = features.toArray\n+        Vectors.dense(filterIndices.map(i => values(i)))\n+      case other =>\n+        throw new UnsupportedOperationException(\n+          s\"Only sparse and dense vectors are supported but got ${other.getClass}.\")\n+    }\n+  }\n+}\n+\n+/**\n+ * :: Experimental ::\n+ * Creates a ChiSquared feature selector.\n+ * @param numTopFeatures number of features that selector will select\n+ *                       (ordered by statistic value descending)\n+ */\n+@Experimental\n+class ChiSqSelector (val numTopFeatures: Int) {\n+\n+  /**\n+   * Returns a ChiSquared feature selector.\n+   *\n+   * @param data data used to compute the Chi Squared statistic."
  }],
  "prId": 1484
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "space after `case`\n",
    "commit": "755d358cece5fa09b912416e60ebd7c16f9be05b",
    "createdAt": "2015-01-31T07:57:12Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg.{DenseVector, SparseVector, Vectors, Vector}\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.rdd.RDD\n+\n+import scala.collection.mutable.ArrayBuilder\n+\n+/**\n+ * :: Experimental ::\n+ * Chi Squared selector model.\n+ *\n+ * @param indices list of indices to select (filter). Must be ordered asc\n+ */\n+@Experimental\n+class ChiSqSelectorModel  private[mllib] (indices: Array[Int]) extends VectorTransformer {\n+  /**\n+   * Applies transformation on a vector.\n+   *\n+   * @param vector vector to be transformed.\n+   * @return transformed vector.\n+   */\n+  override def transform(vector: Vector): Vector = {\n+    compress(vector, indices)\n+  }\n+\n+  /**\n+   * Returns a vector with features filtered.\n+   * Preserves the order of filtered features the same as their indices are stored.\n+   * Might be moved to Vector as .slice\n+   * @param features vector\n+   * @param filterIndices indices of features to filter, must be ordered asc\n+   */\n+  private def compress(features: Vector, filterIndices: Array[Int]): Vector = {\n+    features match {\n+      case SparseVector(size, indices, values) =>\n+        val newSize = filterIndices.length\n+        val newValues = new ArrayBuilder.ofDouble\n+        val newIndices = new ArrayBuilder.ofInt\n+        var i: Int = 0\n+        var j: Int = 0\n+        while(i < indices.length && j < filterIndices.length) {\n+          if(indices(i) == filterIndices(j)) {\n+            newIndices += j\n+            newValues += values(i)\n+            j += 1\n+            i += 1\n+          } else {\n+            if(indices(i) > filterIndices(j)) {\n+              j += 1\n+            } else {\n+              i += 1\n+            }\n+          }\n+        }\n+        /** Sparse representation might be ineffective if (newSize ~= newValues.size) */\n+        Vectors.sparse(newSize, newIndices.result(), newValues.result())\n+      case DenseVector(values) =>\n+        val values = features.toArray\n+        Vectors.dense(filterIndices.map(i => values(i)))\n+      case other =>\n+        throw new UnsupportedOperationException(\n+          s\"Only sparse and dense vectors are supported but got ${other.getClass}.\")\n+    }\n+  }\n+}\n+\n+/**\n+ * :: Experimental ::\n+ * Creates a ChiSquared feature selector.\n+ * @param numTopFeatures number of features that selector will select\n+ *                       (ordered by statistic value descending)\n+ */\n+@Experimental\n+class ChiSqSelector (val numTopFeatures: Int) {\n+\n+  /**\n+   * Returns a ChiSquared feature selector.\n+   *\n+   * @param data data used to compute the Chi Squared statistic.\n+   */\n+  def fit(data: RDD[LabeledPoint]): ChiSqSelectorModel = {\n+    val indices = Statistics.chiSqTest(data)\n+      .zipWithIndex.sortBy { case(res, _) => -res.statistic }"
  }],
  "prId": 1484
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "space before `{` and after `case`\n",
    "commit": "755d358cece5fa09b912416e60ebd7c16f9be05b",
    "createdAt": "2015-01-31T07:57:14Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg.{DenseVector, SparseVector, Vectors, Vector}\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.rdd.RDD\n+\n+import scala.collection.mutable.ArrayBuilder\n+\n+/**\n+ * :: Experimental ::\n+ * Chi Squared selector model.\n+ *\n+ * @param indices list of indices to select (filter). Must be ordered asc\n+ */\n+@Experimental\n+class ChiSqSelectorModel  private[mllib] (indices: Array[Int]) extends VectorTransformer {\n+  /**\n+   * Applies transformation on a vector.\n+   *\n+   * @param vector vector to be transformed.\n+   * @return transformed vector.\n+   */\n+  override def transform(vector: Vector): Vector = {\n+    compress(vector, indices)\n+  }\n+\n+  /**\n+   * Returns a vector with features filtered.\n+   * Preserves the order of filtered features the same as their indices are stored.\n+   * Might be moved to Vector as .slice\n+   * @param features vector\n+   * @param filterIndices indices of features to filter, must be ordered asc\n+   */\n+  private def compress(features: Vector, filterIndices: Array[Int]): Vector = {\n+    features match {\n+      case SparseVector(size, indices, values) =>\n+        val newSize = filterIndices.length\n+        val newValues = new ArrayBuilder.ofDouble\n+        val newIndices = new ArrayBuilder.ofInt\n+        var i: Int = 0\n+        var j: Int = 0\n+        while(i < indices.length && j < filterIndices.length) {\n+          if(indices(i) == filterIndices(j)) {\n+            newIndices += j\n+            newValues += values(i)\n+            j += 1\n+            i += 1\n+          } else {\n+            if(indices(i) > filterIndices(j)) {\n+              j += 1\n+            } else {\n+              i += 1\n+            }\n+          }\n+        }\n+        /** Sparse representation might be ineffective if (newSize ~= newValues.size) */\n+        Vectors.sparse(newSize, newIndices.result(), newValues.result())\n+      case DenseVector(values) =>\n+        val values = features.toArray\n+        Vectors.dense(filterIndices.map(i => values(i)))\n+      case other =>\n+        throw new UnsupportedOperationException(\n+          s\"Only sparse and dense vectors are supported but got ${other.getClass}.\")\n+    }\n+  }\n+}\n+\n+/**\n+ * :: Experimental ::\n+ * Creates a ChiSquared feature selector.\n+ * @param numTopFeatures number of features that selector will select\n+ *                       (ordered by statistic value descending)\n+ */\n+@Experimental\n+class ChiSqSelector (val numTopFeatures: Int) {\n+\n+  /**\n+   * Returns a ChiSquared feature selector.\n+   *\n+   * @param data data used to compute the Chi Squared statistic.\n+   */\n+  def fit(data: RDD[LabeledPoint]): ChiSqSelectorModel = {\n+    val indices = Statistics.chiSqTest(data)\n+      .zipWithIndex.sortBy { case(res, _) => -res.statistic }\n+      .take(numTopFeatures)\n+      .map{ case(_, indices) => indices }"
  }],
  "prId": 1484
}]