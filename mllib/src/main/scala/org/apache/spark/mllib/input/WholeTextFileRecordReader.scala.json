[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "add a space after if\n",
    "commit": "4ed60d16b5d7c760c06dd0d95ee558eee5cfd398",
    "createdAt": "2014-03-26T19:15:55Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.input\n+\n+import com.google.common.io.{ByteStreams, Closeables}\n+\n+import org.apache.hadoop.io.Text\n+import org.apache.hadoop.mapreduce.InputSplit\n+import org.apache.hadoop.mapreduce.lib.input.CombineFileSplit\n+import org.apache.hadoop.mapreduce.RecordReader\n+import org.apache.hadoop.mapreduce.TaskAttemptContext\n+\n+/**\n+ * A [[org.apache.hadoop.mapreduce.RecordReader RecordReader]] for reading a single whole text file\n+ * out in a key-value pair, where the key is the file path and the value is the entire content of\n+ * the file.\n+ */\n+private[mllib] class WholeTextFileRecordReader(\n+    split: CombineFileSplit,\n+    context: TaskAttemptContext,\n+    index: Integer)\n+  extends RecordReader[String, String] {\n+\n+  private val path = split.getPath(index)\n+  private val fs = path.getFileSystem(context.getConfiguration)\n+\n+  // True means the current file has been processed, then skip it.\n+  private var processed = false\n+\n+  private val key = path.toString\n+  private var value: String = null\n+\n+  override def initialize(split: InputSplit, context: TaskAttemptContext) = {}\n+\n+  override def close() = {}\n+\n+  override def getProgress = if(processed) 1.0f else 0.0f\n+\n+  override def getCurrentKey = key\n+\n+  override def getCurrentValue = value\n+\n+  override def nextKeyValue = {\n+    if(!processed) {"
  }],
  "prId": 164
}]