[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "It would be helpful if we add doc for `numClasses` mentioning its value for regression problems.\n",
    "commit": "a0ed0daa4c3622e19626de7aa3b29e07c6015ff2",
    "createdAt": "2014-08-17T00:04:08Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.tree.impl\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.tree.configuration.Algo._\n+import org.apache.spark.mllib.tree.configuration.QuantileStrategy._\n+import org.apache.spark.mllib.tree.configuration.Strategy\n+import org.apache.spark.mllib.tree.impurity.Impurity\n+import org.apache.spark.rdd.RDD\n+\n+\n+/**\n+ * Learning and dataset metadata for DecisionTree.\n+ *\n+ * @param featureArity  Map: categorical feature index --> arity.\n+ *                      I.e., the feature takes values in {0, ..., arity - 1}.\n+ */\n+private[tree] class DTMetadata(\n+    val numFeatures: Int,\n+    val numExamples: Long,\n+    val numClasses: Int,"
  }],
  "prId": 1975
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Need to check the value of `k` first. If `k > 30`, the result will be unexpected. Using `1L` instead of `1` may help.\n",
    "commit": "a0ed0daa4c3622e19626de7aa3b29e07c6015ff2",
    "createdAt": "2014-08-17T00:11:24Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.tree.impl\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.tree.configuration.Algo._\n+import org.apache.spark.mllib.tree.configuration.QuantileStrategy._\n+import org.apache.spark.mllib.tree.configuration.Strategy\n+import org.apache.spark.mllib.tree.impurity.Impurity\n+import org.apache.spark.rdd.RDD\n+\n+\n+/**\n+ * Learning and dataset metadata for DecisionTree.\n+ *\n+ * @param featureArity  Map: categorical feature index --> arity.\n+ *                      I.e., the feature takes values in {0, ..., arity - 1}.\n+ */\n+private[tree] class DTMetadata(\n+    val numFeatures: Int,\n+    val numExamples: Long,\n+    val numClasses: Int,\n+    val maxBins: Int,\n+    val featureArity: Map[Int, Int],\n+    val unorderedFeatures: Set[Int],\n+    val impurity: Impurity,\n+    val quantileStrategy: QuantileStrategy) extends Serializable {\n+\n+  def isUnordered(featureIndex: Int): Boolean = unorderedFeatures.contains(featureIndex)\n+\n+  def isClassification: Boolean = numClasses >= 2\n+\n+  def isMulticlass: Boolean = numClasses > 2\n+\n+  def isMulticlassWithCategoricalFeatures: Boolean = isMulticlass && (featureArity.size > 0)\n+\n+  def isCategorical(featureIndex: Int): Boolean = featureArity.contains(featureIndex)\n+\n+  def isContinuous(featureIndex: Int): Boolean = !featureArity.contains(featureIndex)\n+\n+}\n+\n+private[tree] object DTMetadata {\n+\n+  def buildMetadata(input: RDD[LabeledPoint], strategy: Strategy): DTMetadata = {\n+\n+    val numFeatures = input.take(1)(0).features.size\n+    val numExamples = input.count()\n+    val numClasses = strategy.algo match {\n+      case Classification => strategy.numClassesForClassification\n+      case Regression => 0\n+    }\n+\n+    val maxBins = math.min(strategy.maxBins, numExamples).toInt\n+\n+    val unorderedFeatures = new mutable.HashSet[Int]()\n+    if (numClasses > 2) {\n+      strategy.categoricalFeaturesInfo.foreach { case (f, k) =>\n+        val numUnorderedBins = (1 << k - 1) - 1"
  }],
  "prId": 1975
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Do we allow `maxBins >= k` in binary classification?\n",
    "commit": "a0ed0daa4c3622e19626de7aa3b29e07c6015ff2",
    "createdAt": "2014-08-17T00:22:04Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.tree.impl\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.tree.configuration.Algo._\n+import org.apache.spark.mllib.tree.configuration.QuantileStrategy._\n+import org.apache.spark.mllib.tree.configuration.Strategy\n+import org.apache.spark.mllib.tree.impurity.Impurity\n+import org.apache.spark.rdd.RDD\n+\n+\n+/**\n+ * Learning and dataset metadata for DecisionTree.\n+ *\n+ * @param featureArity  Map: categorical feature index --> arity.\n+ *                      I.e., the feature takes values in {0, ..., arity - 1}.\n+ */\n+private[tree] class DTMetadata(\n+    val numFeatures: Int,\n+    val numExamples: Long,\n+    val numClasses: Int,\n+    val maxBins: Int,\n+    val featureArity: Map[Int, Int],\n+    val unorderedFeatures: Set[Int],\n+    val impurity: Impurity,\n+    val quantileStrategy: QuantileStrategy) extends Serializable {\n+\n+  def isUnordered(featureIndex: Int): Boolean = unorderedFeatures.contains(featureIndex)\n+\n+  def isClassification: Boolean = numClasses >= 2\n+\n+  def isMulticlass: Boolean = numClasses > 2\n+\n+  def isMulticlassWithCategoricalFeatures: Boolean = isMulticlass && (featureArity.size > 0)\n+\n+  def isCategorical(featureIndex: Int): Boolean = featureArity.contains(featureIndex)\n+\n+  def isContinuous(featureIndex: Int): Boolean = !featureArity.contains(featureIndex)\n+\n+}\n+\n+private[tree] object DTMetadata {\n+\n+  def buildMetadata(input: RDD[LabeledPoint], strategy: Strategy): DTMetadata = {\n+\n+    val numFeatures = input.take(1)(0).features.size\n+    val numExamples = input.count()\n+    val numClasses = strategy.algo match {\n+      case Classification => strategy.numClassesForClassification\n+      case Regression => 0\n+    }\n+\n+    val maxBins = math.min(strategy.maxBins, numExamples).toInt\n+\n+    val unorderedFeatures = new mutable.HashSet[Int]()\n+    if (numClasses > 2) {\n+      strategy.categoricalFeaturesInfo.foreach { case (f, k) =>\n+        val numUnorderedBins = (1 << k - 1) - 1\n+        if (numUnorderedBins < maxBins) {\n+          unorderedFeatures.add(f)\n+        } else {\n+          // TODO: Allow this case, where we simply will know nothing about some categories?\n+          require(k < maxBins, \"maxBins should be greater than max categories \" +\n+            \"in categorical features\")\n+        }\n+      }\n+    } else {\n+      strategy.categoricalFeaturesInfo.foreach { case (f, k) =>"
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "The code actually relies on this since it uses one more bin than it needs to.  The correction is in my next code update, sorry.\n",
    "commit": "a0ed0daa4c3622e19626de7aa3b29e07c6015ff2",
    "createdAt": "2014-08-17T03:57:22Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.tree.impl\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.tree.configuration.Algo._\n+import org.apache.spark.mllib.tree.configuration.QuantileStrategy._\n+import org.apache.spark.mllib.tree.configuration.Strategy\n+import org.apache.spark.mllib.tree.impurity.Impurity\n+import org.apache.spark.rdd.RDD\n+\n+\n+/**\n+ * Learning and dataset metadata for DecisionTree.\n+ *\n+ * @param featureArity  Map: categorical feature index --> arity.\n+ *                      I.e., the feature takes values in {0, ..., arity - 1}.\n+ */\n+private[tree] class DTMetadata(\n+    val numFeatures: Int,\n+    val numExamples: Long,\n+    val numClasses: Int,\n+    val maxBins: Int,\n+    val featureArity: Map[Int, Int],\n+    val unorderedFeatures: Set[Int],\n+    val impurity: Impurity,\n+    val quantileStrategy: QuantileStrategy) extends Serializable {\n+\n+  def isUnordered(featureIndex: Int): Boolean = unorderedFeatures.contains(featureIndex)\n+\n+  def isClassification: Boolean = numClasses >= 2\n+\n+  def isMulticlass: Boolean = numClasses > 2\n+\n+  def isMulticlassWithCategoricalFeatures: Boolean = isMulticlass && (featureArity.size > 0)\n+\n+  def isCategorical(featureIndex: Int): Boolean = featureArity.contains(featureIndex)\n+\n+  def isContinuous(featureIndex: Int): Boolean = !featureArity.contains(featureIndex)\n+\n+}\n+\n+private[tree] object DTMetadata {\n+\n+  def buildMetadata(input: RDD[LabeledPoint], strategy: Strategy): DTMetadata = {\n+\n+    val numFeatures = input.take(1)(0).features.size\n+    val numExamples = input.count()\n+    val numClasses = strategy.algo match {\n+      case Classification => strategy.numClassesForClassification\n+      case Regression => 0\n+    }\n+\n+    val maxBins = math.min(strategy.maxBins, numExamples).toInt\n+\n+    val unorderedFeatures = new mutable.HashSet[Int]()\n+    if (numClasses > 2) {\n+      strategy.categoricalFeaturesInfo.foreach { case (f, k) =>\n+        val numUnorderedBins = (1 << k - 1) - 1\n+        if (numUnorderedBins < maxBins) {\n+          unorderedFeatures.add(f)\n+        } else {\n+          // TODO: Allow this case, where we simply will know nothing about some categories?\n+          require(k < maxBins, \"maxBins should be greater than max categories \" +\n+            \"in categorical features\")\n+        }\n+      }\n+    } else {\n+      strategy.categoricalFeaturesInfo.foreach { case (f, k) =>"
  }],
  "prId": 1975
}, {
  "comments": [{
    "author": {
      "login": "manishamde"
    },
    "body": "Suggestion: DecisionTreeMetadata, TreeMetadata or Metadata as class name alternatives.\n",
    "commit": "a0ed0daa4c3622e19626de7aa3b29e07c6015ff2",
    "createdAt": "2014-08-17T04:58:17Z",
    "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.tree.impl\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.tree.configuration.Algo._\n+import org.apache.spark.mllib.tree.configuration.QuantileStrategy._\n+import org.apache.spark.mllib.tree.configuration.Strategy\n+import org.apache.spark.mllib.tree.impurity.Impurity\n+import org.apache.spark.rdd.RDD\n+\n+\n+/**\n+ * Learning and dataset metadata for DecisionTree.\n+ *\n+ * @param numClasses    For classification: labels can take values {0, ..., numClasses - 1}.\n+ *                      For regression: fixed at 0 (no meaning).\n+ * @param featureArity  Map: categorical feature index --> arity.\n+ *                      I.e., the feature takes values in {0, ..., arity - 1}.\n+ */\n+private[tree] class DTMetadata("
  }],
  "prId": 1975
}]