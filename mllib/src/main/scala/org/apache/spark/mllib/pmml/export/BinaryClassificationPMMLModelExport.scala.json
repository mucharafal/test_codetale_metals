[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Should be `Double.MinValue`.\n",
    "commit": "852aac6149d4d0c932ff34e959d148419b369983",
    "createdAt": "2015-04-28T18:13:04Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.pmml.export\n+\n+import scala.{Array => SArray}\n+\n+import org.dmg.pmml._\n+\n+import org.apache.spark.mllib.regression.GeneralizedLinearModel\n+\n+/**\n+ * PMML Model Export for GeneralizedLinearModel class with binary ClassificationModel\n+ */\n+private[mllib] class BinaryClassificationPMMLModelExport(\n+    model : GeneralizedLinearModel, \n+    description : String,\n+    normalizationMethod : RegressionNormalizationMethodType,\n+    threshold: Double) \n+  extends PMMLModelExport {\n+\n+  populateBinaryClassificationPMML()\n+\n+  /**\n+   * Export the input LogisticRegressionModel or SVMModel to PMML format.\n+   */\n+  private def populateBinaryClassificationPMML(): Unit = {\n+     pmml.getHeader.setDescription(description)\n+\n+     if (model.weights.size > 0) {\n+       val fields = new SArray[FieldName](model.weights.size)\n+       val dataDictionary = new DataDictionary\n+       val miningSchema = new MiningSchema\n+       val regressionTableYES = new RegressionTable(model.intercept).withTargetCategory(\"1\")\n+       var interceptNO = threshold\n+       if (RegressionNormalizationMethodType.LOGIT == normalizationMethod) {\n+         if (threshold <= 0)\n+           interceptNO = -1000"
  }],
  "prId": 3062
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`Double.MaxValue`\n",
    "commit": "852aac6149d4d0c932ff34e959d148419b369983",
    "createdAt": "2015-04-28T18:13:05Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.pmml.export\n+\n+import scala.{Array => SArray}\n+\n+import org.dmg.pmml._\n+\n+import org.apache.spark.mllib.regression.GeneralizedLinearModel\n+\n+/**\n+ * PMML Model Export for GeneralizedLinearModel class with binary ClassificationModel\n+ */\n+private[mllib] class BinaryClassificationPMMLModelExport(\n+    model : GeneralizedLinearModel, \n+    description : String,\n+    normalizationMethod : RegressionNormalizationMethodType,\n+    threshold: Double) \n+  extends PMMLModelExport {\n+\n+  populateBinaryClassificationPMML()\n+\n+  /**\n+   * Export the input LogisticRegressionModel or SVMModel to PMML format.\n+   */\n+  private def populateBinaryClassificationPMML(): Unit = {\n+     pmml.getHeader.setDescription(description)\n+\n+     if (model.weights.size > 0) {\n+       val fields = new SArray[FieldName](model.weights.size)\n+       val dataDictionary = new DataDictionary\n+       val miningSchema = new MiningSchema\n+       val regressionTableYES = new RegressionTable(model.intercept).withTargetCategory(\"1\")\n+       var interceptNO = threshold\n+       if (RegressionNormalizationMethodType.LOGIT == normalizationMethod) {\n+         if (threshold <= 0)\n+           interceptNO = -1000\n+         else if (threshold >= 1)\n+           interceptNO = 1000"
  }],
  "prId": 3062
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "space around `/` and after `-`: `math.log(1 / threshold - 1)`\n",
    "commit": "852aac6149d4d0c932ff34e959d148419b369983",
    "createdAt": "2015-04-28T18:13:07Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.pmml.export\n+\n+import scala.{Array => SArray}\n+\n+import org.dmg.pmml._\n+\n+import org.apache.spark.mllib.regression.GeneralizedLinearModel\n+\n+/**\n+ * PMML Model Export for GeneralizedLinearModel class with binary ClassificationModel\n+ */\n+private[mllib] class BinaryClassificationPMMLModelExport(\n+    model : GeneralizedLinearModel, \n+    description : String,\n+    normalizationMethod : RegressionNormalizationMethodType,\n+    threshold: Double) \n+  extends PMMLModelExport {\n+\n+  populateBinaryClassificationPMML()\n+\n+  /**\n+   * Export the input LogisticRegressionModel or SVMModel to PMML format.\n+   */\n+  private def populateBinaryClassificationPMML(): Unit = {\n+     pmml.getHeader.setDescription(description)\n+\n+     if (model.weights.size > 0) {\n+       val fields = new SArray[FieldName](model.weights.size)\n+       val dataDictionary = new DataDictionary\n+       val miningSchema = new MiningSchema\n+       val regressionTableYES = new RegressionTable(model.intercept).withTargetCategory(\"1\")\n+       var interceptNO = threshold\n+       if (RegressionNormalizationMethodType.LOGIT == normalizationMethod) {\n+         if (threshold <= 0)\n+           interceptNO = -1000\n+         else if (threshold >= 1)\n+           interceptNO = 1000\n+         else\n+           interceptNO = -math.log(1/threshold -1)"
  }],
  "prId": 3062
}]