[{
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "Don't think it's necessary to say \"Sets the binary toggle param.\"\n",
    "commit": "d6431ebc92b77e7fb1b21309eca0982c3ffd424c",
    "createdAt": "2016-03-20T12:42:02Z",
    "diffHunk": "@@ -36,12 +36,24 @@ import org.apache.spark.util.Utils\n @Since(\"1.1.0\")\n class HashingTF(val numFeatures: Int) extends Serializable {\n \n+  private var binary = false\n+\n   /**\n    */\n   @Since(\"1.1.0\")\n   def this() = this(1 << 20)\n \n   /**\n+   * Sets the binary toggle param. If true, term frequency vector will be binary such that non-zero"
  }],
  "prId": 11832
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Could you please move this if-then-else outside of the loop?  (I'm guessing it would be worthwhile for speed.)\n",
    "commit": "d6431ebc92b77e7fb1b21309eca0982c3ffd424c",
    "createdAt": "2016-03-21T03:11:28Z",
    "diffHunk": "@@ -53,9 +65,10 @@ class HashingTF(val numFeatures: Int) extends Serializable {\n   @Since(\"1.1.0\")\n   def transform(document: Iterable[_]): Vector = {\n     val termFrequencies = mutable.HashMap.empty[Int, Double]\n+    val setTF = if (binary) (i: Int) => 1.0 else (i: Int) => termFrequencies.getOrElse(i, 0.0) + 1.0",
    "line": 29
  }, {
    "author": {
      "login": "hhbyyh"
    },
    "body": "+1\n",
    "commit": "d6431ebc92b77e7fb1b21309eca0982c3ffd424c",
    "createdAt": "2016-03-21T07:11:31Z",
    "diffHunk": "@@ -53,9 +65,10 @@ class HashingTF(val numFeatures: Int) extends Serializable {\n   @Since(\"1.1.0\")\n   def transform(document: Iterable[_]): Vector = {\n     val termFrequencies = mutable.HashMap.empty[Int, Double]\n+    val setTF = if (binary) (i: Int) => 1.0 else (i: Int) => termFrequencies.getOrElse(i, 0.0) + 1.0",
    "line": 29
  }, {
    "author": {
      "login": "BryanCutler"
    },
    "body": "Are you guys talking about the `document.foreach` loop?  The if-then-else is just to assign a function, so it would just be called once per document, then the function is called in the loop.  If this line is a bit too much, I could rewrite it to something more straightforward.\n",
    "commit": "d6431ebc92b77e7fb1b21309eca0982c3ffd424c",
    "createdAt": "2016-03-21T20:59:13Z",
    "diffHunk": "@@ -53,9 +65,10 @@ class HashingTF(val numFeatures: Int) extends Serializable {\n   @Since(\"1.1.0\")\n   def transform(document: Iterable[_]): Vector = {\n     val termFrequencies = mutable.HashMap.empty[Int, Double]\n+    val setTF = if (binary) (i: Int) => 1.0 else (i: Int) => termFrequencies.getOrElse(i, 0.0) + 1.0",
    "line": 29
  }, {
    "author": {
      "login": "MLnick"
    },
    "body": "Yup, the if-else is not actually called within the loop for each term. I think this is ok to keep as is, I don't see any better approach.\n",
    "commit": "d6431ebc92b77e7fb1b21309eca0982c3ffd424c",
    "createdAt": "2016-03-22T07:57:32Z",
    "diffHunk": "@@ -53,9 +65,10 @@ class HashingTF(val numFeatures: Int) extends Serializable {\n   @Since(\"1.1.0\")\n   def transform(document: Iterable[_]): Vector = {\n     val termFrequencies = mutable.HashMap.empty[Int, Double]\n+    val setTF = if (binary) (i: Int) => 1.0 else (i: Int) => termFrequencies.getOrElse(i, 0.0) + 1.0",
    "line": 29
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "Oh yep you're right\n",
    "commit": "d6431ebc92b77e7fb1b21309eca0982c3ffd424c",
    "createdAt": "2016-03-24T04:22:22Z",
    "diffHunk": "@@ -53,9 +65,10 @@ class HashingTF(val numFeatures: Int) extends Serializable {\n   @Since(\"1.1.0\")\n   def transform(document: Iterable[_]): Vector = {\n     val termFrequencies = mutable.HashMap.empty[Int, Double]\n+    val setTF = if (binary) (i: Int) => 1.0 else (i: Int) => termFrequencies.getOrElse(i, 0.0) + 1.0",
    "line": 29
  }],
  "prId": 11832
}]