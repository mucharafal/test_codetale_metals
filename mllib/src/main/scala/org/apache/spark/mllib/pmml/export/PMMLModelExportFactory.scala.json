[{
  "comments": [{
    "author": {
      "login": "imatiach-msft"
    },
    "body": "weird, maybe I missed something obvious, but why is it a RegressionModel normalization method for something that is a classification model",
    "commit": "3ff554dafa70cf69fc5365cd0596a8707274f0cc",
    "createdAt": "2019-02-22T05:19:15Z",
    "diffHunk": "@@ -44,12 +44,12 @@ private[mllib] object PMMLModelExportFactory {\n         new GeneralizedLinearPMMLModelExport(lasso, \"lasso regression\")\n       case svm: SVMModel =>\n         new BinaryClassificationPMMLModelExport(\n-          svm, \"linear SVM\", RegressionNormalizationMethodType.NONE,\n+          svm, \"linear SVM\", RegressionModel.NormalizationMethod.NONE,",
    "line": 14
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "I think it's because the two classifiers it supports are logistic regression and SVM. The former makes sense but not so much SVM, but, it looks like only PMML 4.3 established an export format for it: http://dmg.org/pmml/v4-3/SupportVectorMachine.html . But now we're on PMML 4.3 with this change. That's probably worth doing, though my real purpose in this change is to get Java 9+ working. That can be handled separately.",
    "commit": "3ff554dafa70cf69fc5365cd0596a8707274f0cc",
    "createdAt": "2019-02-22T05:40:47Z",
    "diffHunk": "@@ -44,12 +44,12 @@ private[mllib] object PMMLModelExportFactory {\n         new GeneralizedLinearPMMLModelExport(lasso, \"lasso regression\")\n       case svm: SVMModel =>\n         new BinaryClassificationPMMLModelExport(\n-          svm, \"linear SVM\", RegressionNormalizationMethodType.NONE,\n+          svm, \"linear SVM\", RegressionModel.NormalizationMethod.NONE,",
    "line": 14
  }, {
    "author": {
      "login": "vruusmann"
    },
    "body": "`RegressionModel` is a top-level PMML model element for representing all \"dot product\"-type models; the real mining function type (regression vs classification) is specified using the `functionName` attribute. So, `RegressionModel@functionName=\"classification\"` is how communicates that this model element is encoding a classifier-type function.\r\n\r\nBased on my experience with implementing Apache Spark ML-to-PMML converters (https://github.com/jpmml/jpmml-sparkml), then many non-decision tree based Apache Spark ML model classes (eg. `NaiveBayesClassifier`, `LinearSVC`) are based on the \"dot product\" business logic, and therefore reducible to the `RegressionModel` element. In other words, there is no point in using more complex PMML model elements such as `NaiveBayesModel` or `SupportVectorMachineModel`, when the simplest `RegressionModel` element will be able to capture everything.",
    "commit": "3ff554dafa70cf69fc5365cd0596a8707274f0cc",
    "createdAt": "2019-02-22T07:08:40Z",
    "diffHunk": "@@ -44,12 +44,12 @@ private[mllib] object PMMLModelExportFactory {\n         new GeneralizedLinearPMMLModelExport(lasso, \"lasso regression\")\n       case svm: SVMModel =>\n         new BinaryClassificationPMMLModelExport(\n-          svm, \"linear SVM\", RegressionNormalizationMethodType.NONE,\n+          svm, \"linear SVM\", RegressionModel.NormalizationMethod.NONE,",
    "line": 14
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Thanks as always @vruusmann for review! glad we're getting on a newer version of JPMML",
    "commit": "3ff554dafa70cf69fc5365cd0596a8707274f0cc",
    "createdAt": "2019-02-22T13:45:37Z",
    "diffHunk": "@@ -44,12 +44,12 @@ private[mllib] object PMMLModelExportFactory {\n         new GeneralizedLinearPMMLModelExport(lasso, \"lasso regression\")\n       case svm: SVMModel =>\n         new BinaryClassificationPMMLModelExport(\n-          svm, \"linear SVM\", RegressionNormalizationMethodType.NONE,\n+          svm, \"linear SVM\", RegressionModel.NormalizationMethod.NONE,",
    "line": 14
  }],
  "prId": 23868
}]