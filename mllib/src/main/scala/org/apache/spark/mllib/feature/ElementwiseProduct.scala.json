[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Ditto:\n\n```\nOutputs the Hadamard product (i.e., the element-wise product) of each input vector with a provided \"weight\" vector.  In other words, it scales each column of the dataset by a scalar multiplier.\n```\n\nAlso, this should not say \"dense vector.\"\n",
    "commit": "fac12ad29b6a640b6567e66e57a8176deb621dc8",
    "createdAt": "2015-05-07T00:30:09Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg._\n+\n+/**\n+ * :: Experimental ::\n+ * Element-wise product of dense vectors by a provided vector's components."
  }],
  "prId": 4580
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Could you please add a debugging message stating both sizes?\n",
    "commit": "fac12ad29b6a640b6567e66e57a8176deb621dc8",
    "createdAt": "2015-05-07T00:30:11Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg._\n+\n+/**\n+ * :: Experimental ::\n+ * Element-wise product of dense vectors by a provided vector's components.\n+ *\n+ * @param scalingVector The values used to scale the reference vector's individual components.\n+ */\n+@Experimental\n+class ElementwiseProduct(val scalingVector: Vector) extends VectorTransformer {\n+\n+  /**\n+   * Does the hadamard product transformation.\n+   *\n+   * @param vector vector to be transformed.\n+   * @return transformed vector.\n+   */\n+  override def transform(vector: Vector): Vector = {\n+    require(vector.size == scalingVector.size)"
  }],
  "prId": 4580
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "scala style: add space: `while (i`\n",
    "commit": "fac12ad29b6a640b6567e66e57a8176deb621dc8",
    "createdAt": "2015-05-07T00:30:12Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg._\n+\n+/**\n+ * :: Experimental ::\n+ * Element-wise product of dense vectors by a provided vector's components.\n+ *\n+ * @param scalingVector The values used to scale the reference vector's individual components.\n+ */\n+@Experimental\n+class ElementwiseProduct(val scalingVector: Vector) extends VectorTransformer {\n+\n+  /**\n+   * Does the hadamard product transformation.\n+   *\n+   * @param vector vector to be transformed.\n+   * @return transformed vector.\n+   */\n+  override def transform(vector: Vector): Vector = {\n+    require(vector.size == scalingVector.size)\n+    vector match {\n+      case dv: DenseVector =>\n+        val values: Array[Double] = dv.values.clone()\n+        val dim = scalingVector.size\n+        var i = 0\n+        while(i < dim) {"
  }],
  "prId": 4580
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "scala style: spaces `i += 1`\n",
    "commit": "fac12ad29b6a640b6567e66e57a8176deb621dc8",
    "createdAt": "2015-05-07T00:30:13Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg._\n+\n+/**\n+ * :: Experimental ::\n+ * Element-wise product of dense vectors by a provided vector's components.\n+ *\n+ * @param scalingVector The values used to scale the reference vector's individual components.\n+ */\n+@Experimental\n+class ElementwiseProduct(val scalingVector: Vector) extends VectorTransformer {\n+\n+  /**\n+   * Does the hadamard product transformation.\n+   *\n+   * @param vector vector to be transformed.\n+   * @return transformed vector.\n+   */\n+  override def transform(vector: Vector): Vector = {\n+    require(vector.size == scalingVector.size)\n+    vector match {\n+      case dv: DenseVector =>\n+        val values: Array[Double] = dv.values.clone()\n+        val dim = scalingVector.size\n+        var i = 0\n+        while(i < dim) {\n+          values(i) *= scalingVector(i)\n+          i+=1"
  }],
  "prId": 4580
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Do you need explicit apply, or will this work? `scalingVector(indices(i))`\n",
    "commit": "fac12ad29b6a640b6567e66e57a8176deb621dc8",
    "createdAt": "2015-05-07T00:30:14Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.mllib.linalg._\n+\n+/**\n+ * :: Experimental ::\n+ * Element-wise product of dense vectors by a provided vector's components.\n+ *\n+ * @param scalingVector The values used to scale the reference vector's individual components.\n+ */\n+@Experimental\n+class ElementwiseProduct(val scalingVector: Vector) extends VectorTransformer {\n+\n+  /**\n+   * Does the hadamard product transformation.\n+   *\n+   * @param vector vector to be transformed.\n+   * @return transformed vector.\n+   */\n+  override def transform(vector: Vector): Vector = {\n+    require(vector.size == scalingVector.size)\n+    vector match {\n+      case dv: DenseVector =>\n+        val values: Array[Double] = dv.values.clone()\n+        val dim = scalingVector.size\n+        var i = 0\n+        while(i < dim) {\n+          values(i) *= scalingVector(i)\n+          i+=1\n+        }\n+        Vectors.dense(values)\n+      case SparseVector(size, indices, vs) =>\n+        val values = vs.clone()\n+        val dim = values.size\n+        var i = 0\n+        while (i < dim) {\n+          values(i) *= scalingVector.apply(indices(i))"
  }],
  "prId": 4580
}]