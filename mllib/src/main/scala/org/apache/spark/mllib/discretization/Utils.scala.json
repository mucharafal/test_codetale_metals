[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Sorry, is it used somewhere?\n",
    "commit": "70b63e42d81f9ca9f9c48bf8435f9620c6800b75",
    "createdAt": "2014-03-25T19:16:31Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.discretization\n+\n+object Utils {\n+\n+  implicit class MyRichSeq[T](val seq: Seq[T]) extends AnyVal {"
  }],
  "prId": 216
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "If this is only used in `EntropyMinimizationDiscrtizer`, let's move it there and mark it private.\n",
    "commit": "70b63e42d81f9ca9f9c48bf8435f9620c6800b75",
    "createdAt": "2014-03-25T19:17:12Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.discretization\n+\n+object Utils {\n+\n+  implicit class MyRichSeq[T](val seq: Seq[T]) extends AnyVal {\n+\n+    def apply(indexes: Seq[Int]): Option[Seq[T]] = {\n+      if (indexes.length == 0) {\n+        None\n+      } else {\n+        Some(indexes.map(i => seq(i)))\n+      }\n+    }\n+  }\n+\n+  def sumFreqMaps[A](map1: Map[A, Int],"
  }],
  "prId": 216
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Same O(n^2) complexity problem here.\n",
    "commit": "70b63e42d81f9ca9f9c48bf8435f9620c6800b75",
    "createdAt": "2014-03-25T19:18:17Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.discretization\n+\n+object Utils {\n+\n+  implicit class MyRichSeq[T](val seq: Seq[T]) extends AnyVal {\n+\n+    def apply(indexes: Seq[Int]): Option[Seq[T]] = {\n+      if (indexes.length == 0) {\n+        None\n+      } else {\n+        Some(indexes.map(i => seq(i)))\n+      }\n+    }\n+  }\n+\n+  def sumFreqMaps[A](map1: Map[A, Int],\n+      map2: Map[A, Int]) = {\n+    if (map1 isEmpty) {\n+      map2\n+    } else if (map2 isEmpty) {\n+      map1\n+    } else {\n+      Map.empty[A, Int] ++\n+        (for ((y1, x1) <- map1; (y2, x2) <- map2 if (y1 == y2))"
  }],
  "prId": 216
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Move this function to `EntropyMinimizationDiscretizer` as well.\n",
    "commit": "70b63e42d81f9ca9f9c48bf8435f9620c6800b75",
    "createdAt": "2014-03-25T20:25:19Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.discretization\n+\n+object Utils {\n+\n+  implicit class MyRichSeq[T](val seq: Seq[T]) extends AnyVal {\n+\n+    def apply(indexes: Seq[Int]): Option[Seq[T]] = {\n+      if (indexes.length == 0) {\n+        None\n+      } else {\n+        Some(indexes.map(i => seq(i)))\n+      }\n+    }\n+  }\n+\n+  def sumFreqMaps[A](map1: Map[A, Int],\n+      map2: Map[A, Int]) = {\n+    if (map1 isEmpty) {\n+      map2\n+    } else if (map2 isEmpty) {\n+      map1\n+    } else {\n+      Map.empty[A, Int] ++\n+        (for ((y1, x1) <- map1; (y2, x2) <- map2 if (y1 == y2))\n+          yield ((y1, x1 + x2))) ++\n+        (for (y <- (map1.keySet diff map2.keySet))\n+          yield ((y, map1(y)))) ++\n+        (for (y <- (map2.keySet diff map1.keySet))\n+          yield ((y, map2(y))))\n+    }\n+  }\n+\n+  @inline def log2(x: Double) = {"
  }],
  "prId": 216
}]