[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "This must be since 2.3.0",
    "commit": "68e467e1e78f2deb9aaa6fe2d6cfd907736d5668",
    "createdAt": "2017-11-02T07:47:10Z",
    "diffHunk": "@@ -125,4 +125,14 @@ class RegressionMetrics @Since(\"2.0.0\") (\n       1 - SSerr / SStot\n     }\n   }\n+\n+  /**\n+   * Returns adjusted R^2^, the adjusted coefficient of determination.\n+   * @see <a href=\"https://en.wikipedia.org/wiki/Coefficient_of_determination#Adjusted_R2\">\n+   * Coefficient of determination (Wikipedia)</a>\n+   */\n+  @Since(\"2.2.0\")"
  }],
  "prId": 19638
}, {
  "comments": [{
    "author": {
      "login": "sethah"
    },
    "body": "This isn't correct for the case when there is no intercept. This [previous PR](https://github.com/apache/spark/pull/10384/) is relevant. Actually, there's a bigger problem: `RegressionMetrics` is only passed predictions and observations, nothing about the regression model that was used to fit it. Adjusted r2 doesn't make sense here. In fact, r2 shouldn't be here either since it's only valid for linear regression models. \r\n\r\nThe solution I propose: add a `val r2adj` in the linear regression summary, but simply define it in terms of the r2 value and don't add it to regression metrics or regression evaluator. \r\n\r\n```scala\r\nval r2adj: Double = {\r\n    val interceptDOF = if (privateModel.getFitIntercept) 1 else 0\r\n    1 - (1 - r2) * (numInstances - interceptDOF) / (numInstances - privateModel.coefficients.size - interceptDOF)\r\n  }\r\n```\r\n\r\nOk, but then you can't use it when doing cross validation right? I'm not sure if there's a solution there - maybe to make a `LinearRegressionEvaluator`? `r2` and `adjr2` are not valid for non-linear regression http://statisticsbyjim.com/regression/r-squared-invalid-nonlinear-regression/.",
    "commit": "68e467e1e78f2deb9aaa6fe2d6cfd907736d5668",
    "createdAt": "2017-11-02T21:23:33Z",
    "diffHunk": "@@ -125,4 +125,14 @@ class RegressionMetrics @Since(\"2.0.0\") (\n       1 - SSerr / SStot\n     }\n   }\n+\n+  /**\n+   * Returns adjusted R^2^, the adjusted coefficient of determination.\n+   * @see <a href=\"https://en.wikipedia.org/wiki/Coefficient_of_determination#Adjusted_R2\">\n+   * Coefficient of determination (Wikipedia)</a>\n+   */\n+  @Since(\"2.3.0\")\n+  def r2adj: Double = {\n+    1 - (SSerr / (summary.count - summary.numParam - 1)) / (SStot / (summary.count - 1))"
  }, {
    "author": {
      "login": "tengpeng"
    },
    "body": "1.  Will handle the no intercept case. \r\n2. You are absolutely correct there is an issue in design.\r\n\r\n> Ok, but then you can't use it when doing cross validation right?\r\n- For linear regression, there is nothing to cross validate. For penalized methods, like Lasso, `R^2` is not used for cross validation at any time. \r\n\r\n",
    "commit": "68e467e1e78f2deb9aaa6fe2d6cfd907736d5668",
    "createdAt": "2017-11-03T00:28:19Z",
    "diffHunk": "@@ -125,4 +125,14 @@ class RegressionMetrics @Since(\"2.0.0\") (\n       1 - SSerr / SStot\n     }\n   }\n+\n+  /**\n+   * Returns adjusted R^2^, the adjusted coefficient of determination.\n+   * @see <a href=\"https://en.wikipedia.org/wiki/Coefficient_of_determination#Adjusted_R2\">\n+   * Coefficient of determination (Wikipedia)</a>\n+   */\n+  @Since(\"2.3.0\")\n+  def r2adj: Double = {\n+    1 - (SSerr / (summary.count - summary.numParam - 1)) / (SStot / (summary.count - 1))"
  }],
  "prId": 19638
}]