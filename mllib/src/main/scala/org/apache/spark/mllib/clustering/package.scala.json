[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "missing doc\n",
    "commit": "35da8e9e188e669460000d5799d061ecc3ca150f",
    "createdAt": "2014-10-06T21:50:06Z",
    "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import breeze.linalg.{Vector => BV}\n+import org.apache.spark.rdd.RDD\n+\n+package object base {\n+\n+  val Zero = 0.0\n+  val One = 1.0\n+  val Infinity = Double.MaxValue\n+  val Unknown = -1.0\n+\n+  private[mllib] trait FP extends Serializable {\n+    val weight: Double\n+    val raw: BV[Double]\n+  }\n+\n+  private[mllib] class FPoint(val raw: BV[Double], val weight: Double) extends FP {\n+    override def toString: String = weight + \",\" + (raw.toArray mkString \",\")\n+    lazy val inh = (raw :*  (1.0 / weight)).toArray\n+  }\n+\n+  /**\n+   * A mutable point in homogeneous coordinates that is lazily initialized.\n+   */\n+  private[mllib] class Centroid extends Serializable {\n+    override def toString: String = weight +\n+      (if(raw != null) (\",\" + raw.toArray mkString \",\") else \"\")\n+\n+    def isEmpty = weight == Zero\n+\n+    var raw: BV[Double] = null\n+\n+    var weight: Double = Zero\n+\n+    def add(p: Centroid): this.type = add(p.raw, p.weight)\n+\n+    def add(p: FP): this.type = add(p.raw, p.weight)\n+\n+    def sub(p: Centroid): this.type = sub(p.raw, p.weight)\n+\n+    def sub(p: FP): this.type = sub(p.raw, p.weight)\n+\n+    def sub(r: BV[Double], w: Double): this.type = {\n+      if (r != null) {\n+        if (raw == null) {\n+          raw = r.toVector :*= -1.0\n+          weight = w * -1\n+        } else {\n+          raw -= r\n+          weight = weight - w\n+        }\n+      }\n+      this\n+    }\n+\n+    def add(r: BV[Double], w: Double) : this.type = {\n+      if (r != null) {\n+        if (raw == null) {\n+          raw = r.toVector\n+          weight = w\n+        } else {\n+          raw += r\n+          weight = weight + w\n+        }\n+      }\n+      this\n+    }\n+  }\n+\n+  private[mllib] trait PointOps[P <: FP, C <: FP] {\n+\n+    def distance(p: P, c: C, upperBound: Double): Double",
    "line": 92
  }],
  "prId": 2634
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Should it be `mllib.clustering` as the file is under `clustering/`?\n",
    "commit": "35da8e9e188e669460000d5799d061ecc3ca150f",
    "createdAt": "2015-01-08T23:55:50Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib",
    "line": 18
  }],
  "prId": 2634
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Though private, having some doc would make the code easy to understand. For example,\n1. What does `FP` mean?\n2. `inh`?\n3. ...\n",
    "commit": "35da8e9e188e669460000d5799d061ecc3ca150f",
    "createdAt": "2015-01-08T23:59:50Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib\n+\n+import breeze.linalg.{ Vector => BV }\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.rdd.RDD\n+\n+package object base {",
    "line": 25
  }, {
    "author": {
      "login": "derrickburns"
    },
    "body": "I'm willing to take one last crack at contributing the Bregman modifications to Spark. Here is an layering of the pull requests:\n\n1) modifications to BLAS to support arbitrary functions and axpy on SparseVectors\n2) definition of PointOps trait and various implementations for different divergences \n3) rewrite of clusterer to use PointOps trait but only using the squared Euclidean distance implementation \n4) generalization of clustering interface to select different divergences.\n5) store seeds\n6) maintain exactly K clusters by splitting clusters heuristicly.\n\nI can submit PRs for 1-4. \n\nThoughts?\n\nSent from my iPhone\n\n> On Jan 8, 2015, at 4:00 PM, Xiangrui Meng notifications@github.com wrote:\n> \n> In mllib/src/main/scala/org/apache/spark/mllib/clustering/package.scala:\n> \n> > - *\n> > - \\* Unless required by applicable law or agreed to in writing, software\n> > - \\* distributed under the License is distributed on an \"AS IS\" BASIS,\n> > - \\* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n> > - \\* See the License for the specific language governing permissions and\n> > - \\* limitations under the License.\n> > - */\n> >   +\n> >   +package org.apache.spark.mllib\n> >   +\n> >   +import breeze.linalg.{ Vector => BV }\n> >   +\n> >   +import org.apache.spark.mllib.linalg.Vector\n> >   +import org.apache.spark.rdd.RDD\n> >   +\n> >   +package object base {\n> >   Though private, having some doc would make the code easy to understand. For example,\n> \n> What does FP mean?\n> inh?\n> ...\n> â€”\n> Reply to this email directly or view it on GitHub.\n",
    "commit": "35da8e9e188e669460000d5799d061ecc3ca150f",
    "createdAt": "2015-01-11T18:53:06Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib\n+\n+import breeze.linalg.{ Vector => BV }\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.rdd.RDD\n+\n+package object base {",
    "line": 25
  }, {
    "author": {
      "login": "derrickburns"
    },
    "body": "@mengxr\n\nI tried to build the Spark master branch, but was unsuccessful.\n\nSo, instead of integrating my Bregman clusterer into the latest master\nbranch of Spark, I integrated them into my public GitHub project\nhttps://github.com/derrickburns/generalized-kmeans-clustering.\n\nPer your suggestion, this   version supports sparse vectors.\n\nIncluded is support for several Bregman divergences including: squared\nEuclidean distance, Kullback Leibler divergence, logistic loss, and\ngeneralized I-divergence.\n\nI created a general BregmanDivergence trait and a separate BregmanPointOps\ntrait.  When mixed in together, one gets a specific BregmanPointOps object\nthat computes Bregman divergences very efficiently, caching one value per\npoint and two values per center (per your observation).  This version is\neasier to understand that the previous one.\n\nIncluded also are three different implementations of K-Means clustering: 1)\none that caches distances (CachingKMeans) 2) one that tracks which clusters\nmoved and which points are assigned to which clusters and the distance to\nthe closest cluster (TrackingKMeans); and, 3) one that recomputes all\nclusters and distances (SingleKMeans).\n\nI have found the the TrackingKMeans clusterer has the best performance on\nlast data sets.\n\nI have also found that maintaining cluster centers in homogeneous\ncoordinates is more efficient than using inhomogeneous coordinates for\nmoderate to high dimensional data. There is no penalty for low dimensional\ndata.\n\nIf/when you include such changes in Spark, I would appreciate being\nincluded in the list of contributors.\n\nRegards,\n\nDerrick Burns\n\nOn Sun, Jan 11, 2015 at 10:52 AM, Derrick Burns derrickrburns@gmail.com\nwrote:\n\n> I'm willing to take one last crack at contributing the Bregman\n> modifications to Spark. Here is an layering of the pull requests:\n> \n> 1) modifications to BLAS to support arbitrary functions and axpy on\n> SparseVectors\n> 2) definition of PointOps trait and various implementations for different\n> divergences\n> 3) rewrite of clusterer to use PointOps trait but only using the squared\n> Euclidean distance implementation\n> 4) generalization of clustering interface to select different divergences.\n> 5) store seeds\n> 6) maintain exactly K clusters by splitting clusters heuristicly.\n> \n> I can submit PRs for 1-4.\n> \n> Thoughts?\n> \n> Sent from my iPhone\n> \n> On Jan 8, 2015, at 4:00 PM, Xiangrui Meng notifications@github.com\n> wrote:\n> \n> In mllib/src/main/scala/org/apache/spark/mllib/clustering/package.scala\n> https://github.com/apache/spark/pull/2634#discussion-diff-22693266:\n> \n> > - *\n> > - \\* Unless required by applicable law or agreed to in writing, software\n> > - \\* distributed under the License is distributed on an \"AS IS\" BASIS,\n> > - \\* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n> > - \\* See the License for the specific language governing permissions and\n> > - \\* limitations under the License.\n> > - */\n> >   +\n> >   +package org.apache.spark.mllib\n> >   +\n> >   +import breeze.linalg.{ Vector => BV }\n> >   +\n> >   +import org.apache.spark.mllib.linalg.Vector\n> >   +import org.apache.spark.rdd.RDD\n> >   +\n> >   +package object base {\n> \n> Though private, having some doc would make the code easy to understand.\n> For example,\n> 1. What does FP mean?\n> 2. inh?\n> 3. ...\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/spark/pull/2634/files#r22693266.\n",
    "commit": "35da8e9e188e669460000d5799d061ecc3ca150f",
    "createdAt": "2015-01-12T03:34:59Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib\n+\n+import breeze.linalg.{ Vector => BV }\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.rdd.RDD\n+\n+package object base {",
    "line": 25
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "> 1) modifications to BLAS to support arbitrary functions and axpy on SparseVectors\n\nWe already support axpy on SparseVectors in `mllib.linalg.BLAS`. What do you mean by `arbitrary functions`? If the target is to improve k-means, we only need to implement BLAS ops required by k-means.\n\n> 2) definition of PointOps trait and various implementations for different divergences\n> 3) rewrite of clusterer to use PointOps trait but only using the squared Euclidean distance implementation\n> 4) generalization of clustering interface to select different divergences.\n\nSounds good.\n\n> 5) store seeds\n\nThis is already covered in https://github.com/apache/spark/pull/3610, which is almost ready to merge.\n\n> 6) maintain exactly K clusters by splitting clusters heuristicly.\n\nWe had an example in `StreamingKMeans`. But if we want to support different distances, we need to consider how to keep the new centers inside the domain.\n\nThanks for improving your implementation! Before we merge features one by one, it would be nice to maintain your implementation as a 3rd-party Spark package (spark-packages.org). That helps people find it and send feedbacks.\n",
    "commit": "35da8e9e188e669460000d5799d061ecc3ca150f",
    "createdAt": "2015-01-20T01:02:38Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib\n+\n+import breeze.linalg.{ Vector => BV }\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.rdd.RDD\n+\n+package object base {",
    "line": 25
  }],
  "prId": 2634
}]