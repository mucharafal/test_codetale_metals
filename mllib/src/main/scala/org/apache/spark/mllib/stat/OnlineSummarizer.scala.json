[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "sort imports\n",
    "commit": "b13ac90dc93c7daf42f2773638126ee4e1febcc2",
    "createdAt": "2014-07-10T04:34:55Z",
    "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat\n+\n+import breeze.linalg.{DenseVector => BDV}\n+\n+import org.apache.spark.mllib.linalg.{Vectors, Vector}\n+import org.apache.spark.annotation.DeveloperApi"
  }],
  "prId": 955
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`non-zero` -> `nonzero`\n",
    "commit": "b13ac90dc93c7daf42f2773638126ee4e1febcc2",
    "createdAt": "2014-07-10T04:34:57Z",
    "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat\n+\n+import breeze.linalg.{DenseVector => BDV}\n+\n+import org.apache.spark.mllib.linalg.{Vectors, Vector}\n+import org.apache.spark.annotation.DeveloperApi\n+\n+/**\n+ * :: DeveloperApi ::\n+ * OnlineSummarizer implements [[MultivariateStatisticalSummary]] to compute the mean, variance,\n+ * minimum, maximum, counts, and non-zero counts for samples in sparse or dense vector format in"
  }],
  "prId": 955
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`streaming` has special meaning in spark. Change it to `online`?\n",
    "commit": "b13ac90dc93c7daf42f2773638126ee4e1febcc2",
    "createdAt": "2014-07-10T04:34:59Z",
    "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat\n+\n+import breeze.linalg.{DenseVector => BDV}\n+\n+import org.apache.spark.mllib.linalg.{Vectors, Vector}\n+import org.apache.spark.annotation.DeveloperApi\n+\n+/**\n+ * :: DeveloperApi ::\n+ * OnlineSummarizer implements [[MultivariateStatisticalSummary]] to compute the mean, variance,\n+ * minimum, maximum, counts, and non-zero counts for samples in sparse or dense vector format in\n+ * a streaming fashion."
  }],
  "prId": 955
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`a jointed dataset` -> `the corresponding joint dataset`\n",
    "commit": "b13ac90dc93c7daf42f2773638126ee4e1febcc2",
    "createdAt": "2014-07-10T04:35:02Z",
    "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat\n+\n+import breeze.linalg.{DenseVector => BDV}\n+\n+import org.apache.spark.mllib.linalg.{Vectors, Vector}\n+import org.apache.spark.annotation.DeveloperApi\n+\n+/**\n+ * :: DeveloperApi ::\n+ * OnlineSummarizer implements [[MultivariateStatisticalSummary]] to compute the mean, variance,\n+ * minimum, maximum, counts, and non-zero counts for samples in sparse or dense vector format in\n+ * a streaming fashion.\n+ *\n+ * Two OnlineSummarizers can be merged together to have a statistical summary of a jointed dataset."
  }],
  "prId": 955
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Shall we call it `MultivariateOnlineSummarizer`? The name is long but more accurate.\n",
    "commit": "b13ac90dc93c7daf42f2773638126ee4e1febcc2",
    "createdAt": "2014-07-10T04:35:05Z",
    "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat\n+\n+import breeze.linalg.{DenseVector => BDV}\n+\n+import org.apache.spark.mllib.linalg.{Vectors, Vector}\n+import org.apache.spark.annotation.DeveloperApi\n+\n+/**\n+ * :: DeveloperApi ::\n+ * OnlineSummarizer implements [[MultivariateStatisticalSummary]] to compute the mean, variance,\n+ * minimum, maximum, counts, and non-zero counts for samples in sparse or dense vector format in\n+ * a streaming fashion.\n+ *\n+ * Two OnlineSummarizers can be merged together to have a statistical summary of a jointed dataset.\n+ *\n+ * A numerically stable algorithm is implemented to compute sample mean and variance:\n+ * Reference: [[http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance variance-wiki]]\n+ * Zero elements (including explicit zero values) are skipped when calling add(),\n+ * to have time complexity O(nnz) instead of O(n) for each column.\n+ */\n+@DeveloperApi\n+class OnlineSummarizer extends MultivariateStatisticalSummary with Serializable {"
  }, {
    "author": {
      "login": "dbtsai"
    },
    "body": "I actually want to change MultivariateStatisticalSummary to StatisticalSummary since it's too verbose. But for consistency, I will change it to MultivariateOnlineSummarizer.\n",
    "commit": "b13ac90dc93c7daf42f2773638126ee4e1febcc2",
    "createdAt": "2014-07-10T21:58:56Z",
    "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat\n+\n+import breeze.linalg.{DenseVector => BDV}\n+\n+import org.apache.spark.mllib.linalg.{Vectors, Vector}\n+import org.apache.spark.annotation.DeveloperApi\n+\n+/**\n+ * :: DeveloperApi ::\n+ * OnlineSummarizer implements [[MultivariateStatisticalSummary]] to compute the mean, variance,\n+ * minimum, maximum, counts, and non-zero counts for samples in sparse or dense vector format in\n+ * a streaming fashion.\n+ *\n+ * Two OnlineSummarizers can be merged together to have a statistical summary of a jointed dataset.\n+ *\n+ * A numerically stable algorithm is implemented to compute sample mean and variance:\n+ * Reference: [[http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance variance-wiki]]\n+ * Zero elements (including explicit zero values) are skipped when calling add(),\n+ * to have time complexity O(nnz) instead of O(n) for each column.\n+ */\n+@DeveloperApi\n+class OnlineSummarizer extends MultivariateStatisticalSummary with Serializable {"
  }],
  "prId": 955
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "We don't need doc for overridden methods.\n",
    "commit": "b13ac90dc93c7daf42f2773638126ee4e1febcc2",
    "createdAt": "2014-07-10T04:35:13Z",
    "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat\n+\n+import breeze.linalg.{DenseVector => BDV}\n+\n+import org.apache.spark.mllib.linalg.{Vectors, Vector}\n+import org.apache.spark.annotation.DeveloperApi\n+\n+/**\n+ * :: DeveloperApi ::\n+ * OnlineSummarizer implements [[MultivariateStatisticalSummary]] to compute the mean, variance,\n+ * minimum, maximum, counts, and non-zero counts for samples in sparse or dense vector format in\n+ * a streaming fashion.\n+ *\n+ * Two OnlineSummarizers can be merged together to have a statistical summary of a jointed dataset.\n+ *\n+ * A numerically stable algorithm is implemented to compute sample mean and variance:\n+ * Reference: [[http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance variance-wiki]]\n+ * Zero elements (including explicit zero values) are skipped when calling add(),\n+ * to have time complexity O(nnz) instead of O(n) for each column.\n+ */\n+@DeveloperApi\n+class OnlineSummarizer extends MultivariateStatisticalSummary with Serializable {\n+\n+  private var n = 0\n+  private var currMean: BDV[Double] = _\n+  private var currM2n: BDV[Double] = _\n+  private var totalCnt: Long = 0\n+  private var nnz: BDV[Double] = _\n+  private var currMax: BDV[Double] = _\n+  private var currMin: BDV[Double] = _\n+\n+  /**\n+   * Add a new sample to this summarizer, and update the statistical summary.\n+   *\n+   * @param sample The sample in dense/sparse vector format to be added into this summarizer.\n+   * @return This OnlineSummarizer object.\n+   */\n+  def add(sample: Vector): OnlineSummarizer = {\n+    if (n == 0) {\n+      require(sample.toBreeze.length > 0, s\"Vector should have dimension larger than zero.\")\n+      n = sample.toBreeze.length\n+\n+      currMean = BDV.zeros[Double](n)\n+      currM2n = BDV.zeros[Double](n)\n+      nnz = BDV.zeros[Double](n)\n+      currMax = BDV.fill(n)(Double.MinValue)\n+      currMin = BDV.fill(n)(Double.MaxValue)\n+    }\n+\n+    require(n == sample.toBreeze.length, s\"Dimensions mismatch when adding new sample.\" +\n+      s\" Expecting $n but got ${sample.toBreeze.length}.\")\n+\n+    sample.toBreeze.activeIterator.foreach {\n+      case (_, 0.0) => // Skip explicit zero elements.\n+      case (i, value) =>\n+        if (currMax(i) < value) {\n+          currMax(i) = value\n+        }\n+        if (currMin(i) > value) {\n+          currMin(i) = value\n+        }\n+\n+        val tmpPrevMean = currMean(i)\n+        currMean(i) = (currMean(i) * nnz(i) + value) / (nnz(i) + 1.0)\n+        currM2n(i) += (value - currMean(i)) * (value - tmpPrevMean)\n+\n+        nnz(i) += 1.0\n+    }\n+\n+    totalCnt += 1\n+    this\n+  }\n+\n+  /**\n+   * Merge another OnlineSummarizer, and update the statistical summary. (Note that it's\n+   * in place merging; as a result, this OnlineSummarizer object will be modified.)\n+   *\n+   * @param other The other OnlineSummarizer to be merged.\n+   * @return This OnlineSummarizer object.\n+   */\n+  def add(other: OnlineSummarizer): OnlineSummarizer = {\n+    if (totalCnt == 0) {\n+      other\n+    } else if (other.totalCnt == 0) {\n+      this\n+    } else {\n+      require(n == other.n, s\"Dimensions mismatch when merging with another summarizer. \" +\n+        s\"Expecting $n but got ${other.n}.\")\n+\n+      totalCnt += other.totalCnt\n+      val deltaMean: BDV[Double] = currMean - other.currMean\n+\n+      var i = 0\n+      while (i < n) {\n+        // merge mean together\n+        if (other.currMean(i) != 0.0) {\n+          currMean(i) = (currMean(i) * nnz(i) + other.currMean(i) * other.nnz(i)) /\n+            (nnz(i) + other.nnz(i))\n+        }\n+        // merge m2n together\n+        if (nnz(i) + other.nnz(i) != 0.0) {\n+          currM2n(i) += other.currM2n(i) + deltaMean(i) * deltaMean(i) * nnz(i) * other.nnz(i) /\n+            (nnz(i) + other.nnz(i))\n+        }\n+        if (currMax(i) < other.currMax(i)) {\n+          currMax(i) = other.currMax(i)\n+        }\n+        if (currMin(i) > other.currMin(i)) {\n+          currMin(i) = other.currMin(i)\n+        }\n+        i += 1\n+      }\n+\n+      nnz += other.nnz\n+      this\n+    }\n+  }\n+\n+  /**\n+   * Return the mean of the samples.\n+   *\n+   * @return The vector of the mean.\n+   */\n+  override def mean: Vector = {"
  }],
  "prId": 955
}]