[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "2-space indentation\n",
    "commit": "7f7c767f4341b7c043d015196ae46493db4b937a",
    "createdAt": "2014-10-30T22:50:48Z",
    "diffHunk": "@@ -45,15 +45,16 @@ class SlidingRDDPartition[T](val idx: Int, val prev: Partition, val tail: Seq[T]\n  */\n private[mllib]\n class SlidingRDD[T: ClassTag](@transient val parent: RDD[T], val windowSize: Int)\n-  extends RDD[Seq[T]](parent) {\n+  extends RDD[Array[T]](parent) {\n \n   require(windowSize > 1, s\"Window size must be greater than 1, but got $windowSize.\")\n \n-  override def compute(split: Partition, context: TaskContext): Iterator[Seq[T]] = {\n+  override def compute(split: Partition, context: TaskContext): Iterator[Array[T]] = {\n     val part = split.asInstanceOf[SlidingRDDPartition[T]]\n-    (firstParent[T].iterator(part.prev, context) ++ part.tail)\n+     (firstParent[T].iterator(part.prev, context) ++ part.tail)"
  }, {
    "author": {
      "login": "numbnut"
    },
    "body": "Sorry! I fixed that.\n",
    "commit": "7f7c767f4341b7c043d015196ae46493db4b937a",
    "createdAt": "2014-10-31T12:13:06Z",
    "diffHunk": "@@ -45,15 +45,16 @@ class SlidingRDDPartition[T](val idx: Int, val prev: Partition, val tail: Seq[T]\n  */\n private[mllib]\n class SlidingRDD[T: ClassTag](@transient val parent: RDD[T], val windowSize: Int)\n-  extends RDD[Seq[T]](parent) {\n+  extends RDD[Array[T]](parent) {\n \n   require(windowSize > 1, s\"Window size must be greater than 1, but got $windowSize.\")\n \n-  override def compute(split: Partition, context: TaskContext): Iterator[Seq[T]] = {\n+  override def compute(split: Partition, context: TaskContext): Iterator[Array[T]] = {\n     val part = split.asInstanceOf[SlidingRDDPartition[T]]\n-    (firstParent[T].iterator(part.prev, context) ++ part.tail)\n+     (firstParent[T].iterator(part.prev, context) ++ part.tail)"
  }],
  "prId": 2907
}]