[{
  "comments": [{
    "author": {
      "login": "witgo"
    },
    "body": "The case statement will not affect performance?\n",
    "commit": "2946930ec3de0e0a34e07d065c954d7aabacd4ba",
    "createdAt": "2014-12-22T15:30:41Z",
    "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.optimization\n+\n+import scala.collection.mutable.ListBuffer\n+import scala.math._\n+\n+import breeze.linalg.{DenseVector => BDV, Vector => BV}\n+\n+import org.apache.spark.mllib.linalg.{Vectors, Vector}\n+\n+abstract class Regularizer extends Serializable {\n+  var isSmooth: Boolean = true\n+\n+  def add(that: Regularizer): CompositeRegularizer = {\n+    (new CompositeRegularizer).add(this).add(that)\n+  }\n+\n+  def compute(weights: Vector, cumGradient: Vector): Double\n+}\n+\n+class SimpleRegularizer extends Regularizer {\n+    isSmooth = true\n+\n+  override def compute(weights: Vector, cumGradient: Vector): Double = 0\n+}\n+\n+class CompositeRegularizer extends Regularizer {\n+   isSmooth = true\n+\n+  protected val regularizers = ListBuffer[Regularizer]()\n+\n+  override def add(that: Regularizer): this.type = {\n+    if (this.isSmooth && !that.isSmooth) isSmooth = false\n+    regularizers.append(that)\n+    this\n+  }\n+\n+  override def compute(weights: Vector, cumGradient: Vector): Double = {\n+    if (regularizers.isEmpty) {\n+      0.0\n+    } else {\n+      regularizers.foldLeft(0.0)((loss: Double, x: Regularizer) =>\n+        loss + x.compute(weights, cumGradient)\n+      )\n+    }\n+  }\n+}\n+\n+class L1Regularizer(private val regParam: BV[Double]) extends Regularizer {\n+   isSmooth = false\n+\n+  def this(regParam: Double) = this(new BDV[Double](Array[Double](regParam)))\n+\n+  def this(regParam: Vector) = this(regParam.toBreeze)\n+\n+  def compute(weights: Vector, cumGradient: Vector): Double = {\n+    val brzWeights = weights.toBreeze\n+    val brzCumGradient = cumGradient.toBreeze\n+\n+    if (regParam.length > 1) require(brzWeights.length == regParam.length)\n+\n+    if (regParam.length == 1 && regParam(0) == 0.0) {\n+      0.0\n+    }\n+    else {\n+      var loss: Double = 0.0\n+      brzWeights.activeIterator.foreach {\n+        case (_, 0.0) => // Skip explicit zero elements.",
    "line": 84
  }, {
    "author": {
      "login": "dbtsai"
    },
    "body": "This PR is not finished yet. Will replace this with the new implemented api `foreachActive`.\n",
    "commit": "2946930ec3de0e0a34e07d065c954d7aabacd4ba",
    "createdAt": "2014-12-22T15:49:29Z",
    "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.optimization\n+\n+import scala.collection.mutable.ListBuffer\n+import scala.math._\n+\n+import breeze.linalg.{DenseVector => BDV, Vector => BV}\n+\n+import org.apache.spark.mllib.linalg.{Vectors, Vector}\n+\n+abstract class Regularizer extends Serializable {\n+  var isSmooth: Boolean = true\n+\n+  def add(that: Regularizer): CompositeRegularizer = {\n+    (new CompositeRegularizer).add(this).add(that)\n+  }\n+\n+  def compute(weights: Vector, cumGradient: Vector): Double\n+}\n+\n+class SimpleRegularizer extends Regularizer {\n+    isSmooth = true\n+\n+  override def compute(weights: Vector, cumGradient: Vector): Double = 0\n+}\n+\n+class CompositeRegularizer extends Regularizer {\n+   isSmooth = true\n+\n+  protected val regularizers = ListBuffer[Regularizer]()\n+\n+  override def add(that: Regularizer): this.type = {\n+    if (this.isSmooth && !that.isSmooth) isSmooth = false\n+    regularizers.append(that)\n+    this\n+  }\n+\n+  override def compute(weights: Vector, cumGradient: Vector): Double = {\n+    if (regularizers.isEmpty) {\n+      0.0\n+    } else {\n+      regularizers.foldLeft(0.0)((loss: Double, x: Regularizer) =>\n+        loss + x.compute(weights, cumGradient)\n+      )\n+    }\n+  }\n+}\n+\n+class L1Regularizer(private val regParam: BV[Double]) extends Regularizer {\n+   isSmooth = false\n+\n+  def this(regParam: Double) = this(new BDV[Double](Array[Double](regParam)))\n+\n+  def this(regParam: Vector) = this(regParam.toBreeze)\n+\n+  def compute(weights: Vector, cumGradient: Vector): Double = {\n+    val brzWeights = weights.toBreeze\n+    val brzCumGradient = cumGradient.toBreeze\n+\n+    if (regParam.length > 1) require(brzWeights.length == regParam.length)\n+\n+    if (regParam.length == 1 && regParam(0) == 0.0) {\n+      0.0\n+    }\n+    else {\n+      var loss: Double = 0.0\n+      brzWeights.activeIterator.foreach {\n+        case (_, 0.0) => // Skip explicit zero elements.",
    "line": 84
  }],
  "prId": 1518
}]