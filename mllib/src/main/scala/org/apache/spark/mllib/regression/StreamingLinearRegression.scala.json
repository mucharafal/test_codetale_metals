[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "The imports should be ordered alphabetically.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-30T00:32:58Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.annotation.Experimental"
  }],
  "prId": 1361
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Instead of having static methods, we can define setter methods inside the class and provide a default constructor with no arguments. Then user can use a builder pattern to construct the streaming update algorithm:\n\n```\nnew StreamingLinearRegressionWithSGD()\n  .setStepSize(0.5)\n  .setNumIterations(10)\n  .setInitialWeights(Vectors.dense(...))\n  .trainOn(DStream)\n```\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-30T03:49:55Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.annotation.Experimental\n+\n+/**\n+ * Train or predict a linear regression model on streaming data. Training uses\n+ * Stochastic Gradient Descent to update the model based on each new batch of\n+ * incoming data from a DStream (see LinearRegressionWithSGD for model equation)\n+ *\n+ * Each batch of data is assumed to be an RDD of LabeledPoints.\n+ * The number of data points per batch can vary, but the number\n+ * of features must be constant.\n+ */\n+@Experimental\n+class StreamingLinearRegressionWithSGD private (\n+    private var stepSize: Double,\n+    private var numIterations: Int,\n+    private var miniBatchFraction: Double,\n+    private var numFeatures: Int)\n+  extends StreamingRegression[LinearRegressionModel, LinearRegressionWithSGD] with Serializable {\n+\n+  val algorithm = new LinearRegressionWithSGD(stepSize, numIterations, miniBatchFraction)\n+\n+  var model = algorithm.createModel(Vectors.dense(new Array[Double](numFeatures)), 0.0)\n+\n+}\n+\n+/**\n+ * Top-level methods for calling StreamingLinearRegressionWithSGD.\n+ */\n+@Experimental\n+object StreamingLinearRegressionWithSGD {\n+\n+  /**\n+   * Start a streaming Linear Regression model by setting optimization parameters.\n+   *\n+   * @param numIterations Number of iterations of gradient descent to run.\n+   * @param stepSize Step size to be used for each iteration of gradient descent.\n+   * @param miniBatchFraction Fraction of data to be used per iteration.\n+   * @param numFeatures Number of features per record, must be constant for all batches of data.\n+   */\n+  def start("
  }, {
    "author": {
      "login": "freeman-lab"
    },
    "body": "Nice, I'll add the setter methods, should we then drop the companion object and static methods entirely? Some others, like `LinearRegressionWithSGD`, have both.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-31T07:01:15Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.annotation.Experimental\n+\n+/**\n+ * Train or predict a linear regression model on streaming data. Training uses\n+ * Stochastic Gradient Descent to update the model based on each new batch of\n+ * incoming data from a DStream (see LinearRegressionWithSGD for model equation)\n+ *\n+ * Each batch of data is assumed to be an RDD of LabeledPoints.\n+ * The number of data points per batch can vary, but the number\n+ * of features must be constant.\n+ */\n+@Experimental\n+class StreamingLinearRegressionWithSGD private (\n+    private var stepSize: Double,\n+    private var numIterations: Int,\n+    private var miniBatchFraction: Double,\n+    private var numFeatures: Int)\n+  extends StreamingRegression[LinearRegressionModel, LinearRegressionWithSGD] with Serializable {\n+\n+  val algorithm = new LinearRegressionWithSGD(stepSize, numIterations, miniBatchFraction)\n+\n+  var model = algorithm.createModel(Vectors.dense(new Array[Double](numFeatures)), 0.0)\n+\n+}\n+\n+/**\n+ * Top-level methods for calling StreamingLinearRegressionWithSGD.\n+ */\n+@Experimental\n+object StreamingLinearRegressionWithSGD {\n+\n+  /**\n+   * Start a streaming Linear Regression model by setting optimization parameters.\n+   *\n+   * @param numIterations Number of iterations of gradient descent to run.\n+   * @param stepSize Step size to be used for each iteration of gradient descent.\n+   * @param miniBatchFraction Fraction of data to be used per iteration.\n+   * @param numFeatures Number of features per record, must be constant for all batches of data.\n+   */\n+  def start("
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "I like the builder pattern better, since every time I tried to use the static train method I forgot the order of arguments ...\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-31T08:23:04Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.annotation.Experimental\n+\n+/**\n+ * Train or predict a linear regression model on streaming data. Training uses\n+ * Stochastic Gradient Descent to update the model based on each new batch of\n+ * incoming data from a DStream (see LinearRegressionWithSGD for model equation)\n+ *\n+ * Each batch of data is assumed to be an RDD of LabeledPoints.\n+ * The number of data points per batch can vary, but the number\n+ * of features must be constant.\n+ */\n+@Experimental\n+class StreamingLinearRegressionWithSGD private (\n+    private var stepSize: Double,\n+    private var numIterations: Int,\n+    private var miniBatchFraction: Double,\n+    private var numFeatures: Int)\n+  extends StreamingRegression[LinearRegressionModel, LinearRegressionWithSGD] with Serializable {\n+\n+  val algorithm = new LinearRegressionWithSGD(stepSize, numIterations, miniBatchFraction)\n+\n+  var model = algorithm.createModel(Vectors.dense(new Array[Double](numFeatures)), 0.0)\n+\n+}\n+\n+/**\n+ * Top-level methods for calling StreamingLinearRegressionWithSGD.\n+ */\n+@Experimental\n+object StreamingLinearRegressionWithSGD {\n+\n+  /**\n+   * Start a streaming Linear Regression model by setting optimization parameters.\n+   *\n+   * @param numIterations Number of iterations of gradient descent to run.\n+   * @param stepSize Step size to be used for each iteration of gradient descent.\n+   * @param miniBatchFraction Fraction of data to be used per iteration.\n+   * @param numFeatures Number of features per record, must be constant for all batches of data.\n+   */\n+  def start("
  }, {
    "author": {
      "login": "freeman-lab"
    },
    "body": "Ok, I added setters and do it that way in the example, but kept the static `start` method for consistency with the others, can always drop later.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-08-01T07:12:19Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.annotation.Experimental\n+\n+/**\n+ * Train or predict a linear regression model on streaming data. Training uses\n+ * Stochastic Gradient Descent to update the model based on each new batch of\n+ * incoming data from a DStream (see LinearRegressionWithSGD for model equation)\n+ *\n+ * Each batch of data is assumed to be an RDD of LabeledPoints.\n+ * The number of data points per batch can vary, but the number\n+ * of features must be constant.\n+ */\n+@Experimental\n+class StreamingLinearRegressionWithSGD private (\n+    private var stepSize: Double,\n+    private var numIterations: Int,\n+    private var miniBatchFraction: Double,\n+    private var numFeatures: Int)\n+  extends StreamingRegression[LinearRegressionModel, LinearRegressionWithSGD] with Serializable {\n+\n+  val algorithm = new LinearRegressionWithSGD(stepSize, numIterations, miniBatchFraction)\n+\n+  var model = algorithm.createModel(Vectors.dense(new Array[Double](numFeatures)), 0.0)\n+\n+}\n+\n+/**\n+ * Top-level methods for calling StreamingLinearRegressionWithSGD.\n+ */\n+@Experimental\n+object StreamingLinearRegressionWithSGD {\n+\n+  /**\n+   * Start a streaming Linear Regression model by setting optimization parameters.\n+   *\n+   * @param numIterations Number of iterations of gradient descent to run.\n+   * @param stepSize Step size to be used for each iteration of gradient descent.\n+   * @param miniBatchFraction Fraction of data to be used per iteration.\n+   * @param numFeatures Number of features per record, must be constant for all batches of data.\n+   */\n+  def start("
  }],
  "prId": 1361
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "For streaming updates, the RDDs are usually small. Maybe it is not necessary to use `miniBatchFraction`. But it is fine to keep this option.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-30T04:13:10Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.annotation.Experimental\n+\n+/**\n+ * Train or predict a linear regression model on streaming data. Training uses\n+ * Stochastic Gradient Descent to update the model based on each new batch of\n+ * incoming data from a DStream (see LinearRegressionWithSGD for model equation)\n+ *\n+ * Each batch of data is assumed to be an RDD of LabeledPoints.\n+ * The number of data points per batch can vary, but the number\n+ * of features must be constant.\n+ */\n+@Experimental\n+class StreamingLinearRegressionWithSGD private (\n+    private var stepSize: Double,\n+    private var numIterations: Int,\n+    private var miniBatchFraction: Double,"
  }],
  "prId": 1361
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "If we ask the users to provide the initial weight, we don't need this argument.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-30T04:13:37Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.regression\n+\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.annotation.Experimental\n+\n+/**\n+ * Train or predict a linear regression model on streaming data. Training uses\n+ * Stochastic Gradient Descent to update the model based on each new batch of\n+ * incoming data from a DStream (see LinearRegressionWithSGD for model equation)\n+ *\n+ * Each batch of data is assumed to be an RDD of LabeledPoints.\n+ * The number of data points per batch can vary, but the number\n+ * of features must be constant.\n+ */\n+@Experimental\n+class StreamingLinearRegressionWithSGD private (\n+    private var stepSize: Double,\n+    private var numIterations: Int,\n+    private var miniBatchFraction: Double,\n+    private var numFeatures: Int)"
  }],
  "prId": 1361
}]