[{
  "comments": [{
    "author": {
      "login": "mateiz"
    },
    "body": "Maybe call this `parse` instead of `apply`, should be friendlier\n",
    "commit": "ac444093df8bf395de8bfb7e8cbe9ab5bf7b2fee",
    "createdAt": "2014-04-07T19:39:43Z",
    "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+/** Trait for label parsers. */\n+trait LabelParser extends Serializable {\n+  /** Parses a string label into a double label. */\n+  def apply(labelString: String): Double"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Done.\n",
    "commit": "ac444093df8bf395de8bfb7e8cbe9ab5bf7b2fee",
    "createdAt": "2014-04-07T21:16:24Z",
    "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+/** Trait for label parsers. */\n+trait LabelParser extends Serializable {\n+  /** Parses a string label into a double label. */\n+  def apply(labelString: String): Double"
  }],
  "prId": 345
}, {
  "comments": [{
    "author": {
      "login": "mateiz"
    },
    "body": "You don't need this, you could just do `object BinaryLabelParser extends LabelParser` and pass the object around. Then add a getInstance() method in it to make it usable from Java (otherwise Java users would have to pass `BinaryLabelParser.$INSTANCE` or something like that). Actually try updating one of the Java examples to use this, or just write some Java code to see how it can be called.\n",
    "commit": "ac444093df8bf395de8bfb7e8cbe9ab5bf7b2fee",
    "createdAt": "2014-04-07T19:41:32Z",
    "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+/** Trait for label parsers. */\n+trait LabelParser extends Serializable {\n+  /** Parses a string label into a double label. */\n+  def apply(labelString: String): Double\n+}\n+\n+/**\n+ * Label parser for binary labels, which outputs 1.0 (positive) if the value is greater than 0.5,\n+ * or 0.0 (negative) otherwise. So it works with +1/-1 labeling and +1/0 labeling.\n+ */\n+class BinaryLabelParser extends LabelParser {\n+  /**\n+   * Parses the input label into positive (1.0) if the value is greater than 0.5,\n+   * or negative (0.0) otherwise.\n+   */\n+  override def apply(labelString: String): Double = if (labelString.toDouble > 0.5) 1.0 else 0.0\n+}\n+\n+object BinaryLabelParser {\n+  private lazy val instance = new BinaryLabelParser()\n+  /** Gets the default instance of BinaryLabelParser. */\n+  def apply(): BinaryLabelParser = instance"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Yes, this is much better.\n",
    "commit": "ac444093df8bf395de8bfb7e8cbe9ab5bf7b2fee",
    "createdAt": "2014-04-07T21:16:33Z",
    "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+/** Trait for label parsers. */\n+trait LabelParser extends Serializable {\n+  /** Parses a string label into a double label. */\n+  def apply(labelString: String): Double\n+}\n+\n+/**\n+ * Label parser for binary labels, which outputs 1.0 (positive) if the value is greater than 0.5,\n+ * or 0.0 (negative) otherwise. So it works with +1/-1 labeling and +1/0 labeling.\n+ */\n+class BinaryLabelParser extends LabelParser {\n+  /**\n+   * Parses the input label into positive (1.0) if the value is greater than 0.5,\n+   * or negative (0.0) otherwise.\n+   */\n+  override def apply(labelString: String): Double = if (labelString.toDouble > 0.5) 1.0 else 0.0\n+}\n+\n+object BinaryLabelParser {\n+  private lazy val instance = new BinaryLabelParser()\n+  /** Gets the default instance of BinaryLabelParser. */\n+  def apply(): BinaryLabelParser = instance"
  }],
  "prId": 345
}, {
  "comments": [{
    "author": {
      "login": "mateiz"
    },
    "body": "Ditto on just having an `object` that extends LabelParser\n",
    "commit": "ac444093df8bf395de8bfb7e8cbe9ab5bf7b2fee",
    "createdAt": "2014-04-07T19:41:52Z",
    "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+/** Trait for label parsers. */\n+trait LabelParser extends Serializable {\n+  /** Parses a string label into a double label. */\n+  def apply(labelString: String): Double\n+}\n+\n+/**\n+ * Label parser for binary labels, which outputs 1.0 (positive) if the value is greater than 0.5,\n+ * or 0.0 (negative) otherwise. So it works with +1/-1 labeling and +1/0 labeling.\n+ */\n+class BinaryLabelParser extends LabelParser {\n+  /**\n+   * Parses the input label into positive (1.0) if the value is greater than 0.5,\n+   * or negative (0.0) otherwise.\n+   */\n+  override def apply(labelString: String): Double = if (labelString.toDouble > 0.5) 1.0 else 0.0\n+}\n+\n+object BinaryLabelParser {\n+  private lazy val instance = new BinaryLabelParser()\n+  /** Gets the default instance of BinaryLabelParser. */\n+  def apply(): BinaryLabelParser = instance\n+}\n+\n+/**\n+ * Label parser for multiclass labels, which converts the input label to double.\n+ */\n+class MulticlassLabelParser extends LabelParser {\n+  override def apply(labelString: String): Double =  labelString.toDouble\n+}\n+\n+object MulticlassLabelParser {\n+  private lazy val instance = new MulticlassLabelParser()\n+  /** Gets the default instance of MulticlassLabelParser. */\n+  def apply(): MulticlassLabelParser = instance"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Done.\n",
    "commit": "ac444093df8bf395de8bfb7e8cbe9ab5bf7b2fee",
    "createdAt": "2014-04-07T21:16:39Z",
    "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.util\n+\n+/** Trait for label parsers. */\n+trait LabelParser extends Serializable {\n+  /** Parses a string label into a double label. */\n+  def apply(labelString: String): Double\n+}\n+\n+/**\n+ * Label parser for binary labels, which outputs 1.0 (positive) if the value is greater than 0.5,\n+ * or 0.0 (negative) otherwise. So it works with +1/-1 labeling and +1/0 labeling.\n+ */\n+class BinaryLabelParser extends LabelParser {\n+  /**\n+   * Parses the input label into positive (1.0) if the value is greater than 0.5,\n+   * or negative (0.0) otherwise.\n+   */\n+  override def apply(labelString: String): Double = if (labelString.toDouble > 0.5) 1.0 else 0.0\n+}\n+\n+object BinaryLabelParser {\n+  private lazy val instance = new BinaryLabelParser()\n+  /** Gets the default instance of BinaryLabelParser. */\n+  def apply(): BinaryLabelParser = instance\n+}\n+\n+/**\n+ * Label parser for multiclass labels, which converts the input label to double.\n+ */\n+class MulticlassLabelParser extends LabelParser {\n+  override def apply(labelString: String): Double =  labelString.toDouble\n+}\n+\n+object MulticlassLabelParser {\n+  private lazy val instance = new MulticlassLabelParser()\n+  /** Gets the default instance of MulticlassLabelParser. */\n+  def apply(): MulticlassLabelParser = instance"
  }],
  "prId": 345
}]