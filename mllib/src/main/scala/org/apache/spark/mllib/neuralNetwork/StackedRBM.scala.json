[{
  "comments": [{
    "author": {
      "login": "witgo"
    },
    "body": "There needs to be converted to binary vector?\n",
    "commit": "de47aafc5f721167d64ebc7b987b43375ef26798",
    "createdAt": "2014-11-22T03:08:09Z",
    "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.neuralNetwork\n+\n+import java.util.Random\n+\n+import scala.collection.JavaConversions._\n+\n+import breeze.linalg.{DenseVector => BDV, DenseMatrix => BDM, sum => brzSum}\n+import breeze.numerics.{sigmoid => brzSigmoid}\n+\n+import org.apache.spark.broadcast.Broadcast\n+import org.apache.spark.Logging\n+import org.apache.spark.mllib.linalg.{Vector => SV, DenseVector => SDV}\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.util.random.XORShiftRandom\n+import org.apache.spark.rdd.RDD\n+\n+class StackedRBM(val innerRBMs: Array[RBM])\n+  extends Logging with Serializable {\n+  def this(topology: Array[Int]) {\n+    this(StackedRBM.initializeRBMs(topology))\n+  }\n+\n+  def numLayer = innerRBMs.length\n+\n+  def numInput = innerRBMs.head.numVisible\n+\n+  def numOut = innerRBMs.last.numHidden\n+\n+  def activateHidden(visible: BDM[Double], toLayer: Int): BDM[Double] = {\n+    var x = visible\n+    for (layer <- 0 until toLayer) {\n+      x = innerRBMs(layer).activateHidden(x)\n+      // x = innerRBMs(layer).bernoulli(x)"
  }],
  "prId": 3222
}]