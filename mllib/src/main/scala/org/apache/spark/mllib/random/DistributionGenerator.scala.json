[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Change `@return` to `Returns`. Otherwise the summary will be empty in the generated docs.\n",
    "commit": "01121ac8af3d7f6cd44160644d387b3747b925f4",
    "createdAt": "2014-07-22T06:51:47Z",
    "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.random\n+\n+import cern.jet.random.Poisson\n+import cern.jet.random.engine.DRand\n+\n+import org.apache.spark.util.random.{XORShiftRandom, Pseudorandom}\n+\n+/**\n+ * Trait for random number generators that generate i.i.d values from a distribution.\n+ */\n+trait DistributionGenerator extends Pseudorandom with Serializable {\n+\n+  /**\n+   * @return An i.i.d sample as a Double from an underlying distribution."
  }],
  "prId": 1520
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`partition` has no context here. Maybe simply mention that this is for running multiple instances concurrently.\n",
    "commit": "01121ac8af3d7f6cd44160644d387b3747b925f4",
    "createdAt": "2014-07-22T06:51:48Z",
    "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.random\n+\n+import cern.jet.random.Poisson\n+import cern.jet.random.engine.DRand\n+\n+import org.apache.spark.util.random.{XORShiftRandom, Pseudorandom}\n+\n+/**\n+ * Trait for random number generators that generate i.i.d values from a distribution.\n+ */\n+trait DistributionGenerator extends Pseudorandom with Serializable {\n+\n+  /**\n+   * @return An i.i.d sample as a Double from an underlying distribution.\n+   */\n+  def nextValue(): Double\n+\n+  /**\n+   * @return A copy of the DistributionGenerator with a new instance of the rng object used in the\n+   *         class when applicable. Each partition has a unique seed and therefore requires its"
  }],
  "prId": 1520
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "I saw your argument about using `clone`. Between `copy` and `newInstance`, I think `copy` is better. For example, in Poisson, we need to copy the mean, which is not reflected in `newInstance`.\n",
    "commit": "01121ac8af3d7f6cd44160644d387b3747b925f4",
    "createdAt": "2014-07-22T06:51:51Z",
    "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.random\n+\n+import cern.jet.random.Poisson\n+import cern.jet.random.engine.DRand\n+\n+import org.apache.spark.util.random.{XORShiftRandom, Pseudorandom}\n+\n+/**\n+ * Trait for random number generators that generate i.i.d values from a distribution.\n+ */\n+trait DistributionGenerator extends Pseudorandom with Serializable {\n+\n+  /**\n+   * @return An i.i.d sample as a Double from an underlying distribution.\n+   */\n+  def nextValue(): Double\n+\n+  /**\n+   * @return A copy of the DistributionGenerator with a new instance of the rng object used in the\n+   *         class when applicable. Each partition has a unique seed and therefore requires its\n+   *         own instance of the DistributionGenerator.\n+   */\n+  def newInstance(): DistributionGenerator"
  }, {
    "author": {
      "login": "dorx"
    },
    "body": "So ideally `newInstance` would be an abstract static method inside the DistributionGenerator class that takes an instance as an argument to better express the fact we're copying the class members in the new instance, but since abstract static methods in interfaces aren't really supported in Scala (a combination of trait and object here will be messy for users to implement), copy will do nicely here. \n",
    "commit": "01121ac8af3d7f6cd44160644d387b3747b925f4",
    "createdAt": "2014-07-22T23:05:17Z",
    "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.random\n+\n+import cern.jet.random.Poisson\n+import cern.jet.random.engine.DRand\n+\n+import org.apache.spark.util.random.{XORShiftRandom, Pseudorandom}\n+\n+/**\n+ * Trait for random number generators that generate i.i.d values from a distribution.\n+ */\n+trait DistributionGenerator extends Pseudorandom with Serializable {\n+\n+  /**\n+   * @return An i.i.d sample as a Double from an underlying distribution.\n+   */\n+  def nextValue(): Double\n+\n+  /**\n+   * @return A copy of the DistributionGenerator with a new instance of the rng object used in the\n+   *         class when applicable. Each partition has a unique seed and therefore requires its\n+   *         own instance of the DistributionGenerator.\n+   */\n+  def newInstance(): DistributionGenerator"
  }],
  "prId": 1520
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Is `()` necessary?\n",
    "commit": "01121ac8af3d7f6cd44160644d387b3747b925f4",
    "createdAt": "2014-07-22T06:51:53Z",
    "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.random\n+\n+import cern.jet.random.Poisson\n+import cern.jet.random.engine.DRand\n+\n+import org.apache.spark.util.random.{XORShiftRandom, Pseudorandom}\n+\n+/**\n+ * Trait for random number generators that generate i.i.d values from a distribution.\n+ */\n+trait DistributionGenerator extends Pseudorandom with Serializable {\n+\n+  /**\n+   * @return An i.i.d sample as a Double from an underlying distribution.\n+   */\n+  def nextValue(): Double\n+\n+  /**\n+   * @return A copy of the DistributionGenerator with a new instance of the rng object used in the\n+   *         class when applicable. Each partition has a unique seed and therefore requires its\n+   *         own instance of the DistributionGenerator.\n+   */\n+  def newInstance(): DistributionGenerator\n+}\n+\n+/**\n+ * Generates i.i.d. samples from U[0.0, 1.0]\n+ */\n+class UniformGenerator() extends DistributionGenerator {"
  }],
  "prId": 1520
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Doc is not necessary for the overloaded methods, unless you want to update it. \n",
    "commit": "01121ac8af3d7f6cd44160644d387b3747b925f4",
    "createdAt": "2014-07-22T06:51:56Z",
    "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.random\n+\n+import cern.jet.random.Poisson\n+import cern.jet.random.engine.DRand\n+\n+import org.apache.spark.util.random.{XORShiftRandom, Pseudorandom}\n+\n+/**\n+ * Trait for random number generators that generate i.i.d values from a distribution.\n+ */\n+trait DistributionGenerator extends Pseudorandom with Serializable {\n+\n+  /**\n+   * @return An i.i.d sample as a Double from an underlying distribution.\n+   */\n+  def nextValue(): Double\n+\n+  /**\n+   * @return A copy of the DistributionGenerator with a new instance of the rng object used in the\n+   *         class when applicable. Each partition has a unique seed and therefore requires its\n+   *         own instance of the DistributionGenerator.\n+   */\n+  def newInstance(): DistributionGenerator\n+}\n+\n+/**\n+ * Generates i.i.d. samples from U[0.0, 1.0]\n+ */\n+class UniformGenerator() extends DistributionGenerator {\n+\n+  // XORShiftRandom for better performance. Thread safety isn't necessary here.\n+  private val random = new XORShiftRandom()\n+\n+  /**\n+   * @return An i.i.d sample as a Double from U[0.0, 1.0].\n+   */\n+  override def nextValue(): Double = {\n+    random.nextDouble()\n+  }\n+\n+  /** Set random seed. */"
  }],
  "prId": 1520
}, {
  "comments": [{
    "author": {
      "login": "mateiz"
    },
    "body": "Is it allowed to use a DistributionGenerator before calling setSeed? It would seem simpler to disallow that, but it seems to be something it got from trait Pseudorandom.\n",
    "commit": "01121ac8af3d7f6cd44160644d387b3747b925f4",
    "createdAt": "2014-07-22T08:18:36Z",
    "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.random\n+\n+import cern.jet.random.Poisson\n+import cern.jet.random.engine.DRand\n+\n+import org.apache.spark.util.random.{XORShiftRandom, Pseudorandom}\n+\n+/**\n+ * Trait for random number generators that generate i.i.d values from a distribution.\n+ */\n+trait DistributionGenerator extends Pseudorandom with Serializable {\n+\n+  /**\n+   * @return An i.i.d sample as a Double from an underlying distribution.\n+   */\n+  def nextValue(): Double\n+\n+  /**\n+   * @return A copy of the DistributionGenerator with a new instance of the rng object used in the\n+   *         class when applicable. Each partition has a unique seed and therefore requires its\n+   *         own instance of the DistributionGenerator.\n+   */\n+  def newInstance(): DistributionGenerator\n+}\n+\n+/**\n+ * Generates i.i.d. samples from U[0.0, 1.0]\n+ */\n+class UniformGenerator() extends DistributionGenerator {\n+\n+  // XORShiftRandom for better performance. Thread safety isn't necessary here.\n+  private val random = new XORShiftRandom()\n+\n+  /**\n+   * @return An i.i.d sample as a Double from U[0.0, 1.0].\n+   */\n+  override def nextValue(): Double = {\n+    random.nextDouble()\n+  }\n+\n+  /** Set random seed. */\n+  override def setSeed(seed: Long) = random.setSeed(seed)\n+\n+  override def newInstance(): UniformGenerator = new UniformGenerator()\n+}\n+\n+/**\n+ * Generates i.i.d. samples from the Standard Normal Distribution.\n+ */\n+class StandardNormalGenerator() extends DistributionGenerator {\n+\n+  // XORShiftRandom for better performance. Thread safety isn't necessary here.\n+  private val random = new XORShiftRandom()"
  }, {
    "author": {
      "login": "dorx"
    },
    "body": "As with most random objects, the DistributionGenerator should be created with a default seed (so using it before calling `setSeed` is legal). I like how in Colt it's called `reseed` instead, but `setSeed` is also widely adopted.\n",
    "commit": "01121ac8af3d7f6cd44160644d387b3747b925f4",
    "createdAt": "2014-07-23T00:23:32Z",
    "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.random\n+\n+import cern.jet.random.Poisson\n+import cern.jet.random.engine.DRand\n+\n+import org.apache.spark.util.random.{XORShiftRandom, Pseudorandom}\n+\n+/**\n+ * Trait for random number generators that generate i.i.d values from a distribution.\n+ */\n+trait DistributionGenerator extends Pseudorandom with Serializable {\n+\n+  /**\n+   * @return An i.i.d sample as a Double from an underlying distribution.\n+   */\n+  def nextValue(): Double\n+\n+  /**\n+   * @return A copy of the DistributionGenerator with a new instance of the rng object used in the\n+   *         class when applicable. Each partition has a unique seed and therefore requires its\n+   *         own instance of the DistributionGenerator.\n+   */\n+  def newInstance(): DistributionGenerator\n+}\n+\n+/**\n+ * Generates i.i.d. samples from U[0.0, 1.0]\n+ */\n+class UniformGenerator() extends DistributionGenerator {\n+\n+  // XORShiftRandom for better performance. Thread safety isn't necessary here.\n+  private val random = new XORShiftRandom()\n+\n+  /**\n+   * @return An i.i.d sample as a Double from U[0.0, 1.0].\n+   */\n+  override def nextValue(): Double = {\n+    random.nextDouble()\n+  }\n+\n+  /** Set random seed. */\n+  override def setSeed(seed: Long) = random.setSeed(seed)\n+\n+  override def newInstance(): UniformGenerator = new UniformGenerator()\n+}\n+\n+/**\n+ * Generates i.i.d. samples from the Standard Normal Distribution.\n+ */\n+class StandardNormalGenerator() extends DistributionGenerator {\n+\n+  // XORShiftRandom for better performance. Thread safety isn't necessary here.\n+  private val random = new XORShiftRandom()"
  }],
  "prId": 1520
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`i.i.d` -> `i.i.d.` and in other places\n",
    "commit": "01121ac8af3d7f6cd44160644d387b3747b925f4",
    "createdAt": "2014-07-25T07:52:43Z",
    "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.random\n+\n+import cern.jet.random.Poisson\n+import cern.jet.random.engine.DRand\n+\n+import org.apache.spark.util.random.{XORShiftRandom, Pseudorandom}\n+\n+/**\n+ * Trait for random number generators that generate i.i.d values from a distribution."
  }],
  "prId": 1520
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`Standard Normal Distribution` -> `standard normal distribution`\n",
    "commit": "01121ac8af3d7f6cd44160644d387b3747b925f4",
    "createdAt": "2014-07-25T07:52:47Z",
    "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.random\n+\n+import cern.jet.random.Poisson\n+import cern.jet.random.engine.DRand\n+\n+import org.apache.spark.util.random.{XORShiftRandom, Pseudorandom}\n+\n+/**\n+ * Trait for random number generators that generate i.i.d values from a distribution.\n+ */\n+trait DistributionGenerator extends Pseudorandom with Serializable {\n+\n+  /**\n+   * Returns an i.i.d sample as a Double from an underlying distribution.\n+   */\n+  def nextValue(): Double\n+\n+  /**\n+   * Returns a copy of the DistributionGenerator with a new instance of the rng object used in the\n+   * class when applicable for non-locking concurrent usage.\n+   */\n+  def copy(): DistributionGenerator\n+}\n+\n+/**\n+ * Generates i.i.d. samples from U[0.0, 1.0]\n+ */\n+class UniformGenerator extends DistributionGenerator {\n+\n+  // XORShiftRandom for better performance. Thread safety isn't necessary here.\n+  private val random = new XORShiftRandom()\n+\n+  override def nextValue(): Double = {\n+    random.nextDouble()\n+  }\n+\n+  override def setSeed(seed: Long) = random.setSeed(seed)\n+\n+  override def copy(): UniformGenerator = new UniformGenerator()\n+}\n+\n+/**\n+ * Generates i.i.d. samples from the Standard Normal Distribution."
  }],
  "prId": 1520
}]