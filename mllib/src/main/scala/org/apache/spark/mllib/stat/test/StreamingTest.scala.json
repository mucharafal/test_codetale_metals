[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "use `{{{` for example code\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T04:57:05Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```"
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T20:15:57Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```"
  }],
  "prId": 4716
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`StreamingTest`\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T04:57:06Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()"
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T20:16:07Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()"
  }],
  "prId": 4716
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "add since version to constructor as well: `class StreamingTest @Since(\"1.6.0\") (`\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T04:57:09Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()\n+ *     .setPeacePeriod(10)\n+ *     .setWindowSize(0)\n+ *     .setTestMethod(\"welch\")\n+ *     .registerStream(DStream)\n+ *   ```\n+ */\n+@Experimental\n+@Since(\"1.6.0\")\n+class StreamingTest("
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T20:16:27Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()\n+ *     .setPeacePeriod(10)\n+ *     .setWindowSize(0)\n+ *     .setTestMethod(\"welch\")\n+ *     .registerStream(DStream)\n+ *   ```\n+ */\n+@Experimental\n+@Since(\"1.6.0\")\n+class StreamingTest("
  }],
  "prId": 4716
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "The default values are not Java friendly. Since we already have setters, we can make a default constructor with no arguments. Those values could be private.\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T04:57:13Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()\n+ *     .setPeacePeriod(10)\n+ *     .setWindowSize(0)\n+ *     .setTestMethod(\"welch\")\n+ *     .registerStream(DStream)\n+ *   ```\n+ */\n+@Experimental\n+@Since(\"1.6.0\")\n+class StreamingTest(\n+    @Since(\"1.6.0\") var peacePeriod: Int = 0,"
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T20:17:43Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()\n+ *     .setPeacePeriod(10)\n+ *     .setWindowSize(0)\n+ *     .setTestMethod(\"welch\")\n+ *     .registerStream(DStream)\n+ *   ```\n+ */\n+@Experimental\n+@Since(\"1.6.0\")\n+class StreamingTest(\n+    @Since(\"1.6.0\") var peacePeriod: Int = 0,"
  }],
  "prId": 4716
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "document default value\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T04:57:22Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()\n+ *     .setPeacePeriod(10)\n+ *     .setWindowSize(0)\n+ *     .setTestMethod(\"welch\")\n+ *     .registerStream(DStream)\n+ *   ```\n+ */\n+@Experimental\n+@Since(\"1.6.0\")\n+class StreamingTest(\n+    @Since(\"1.6.0\") var peacePeriod: Int = 0,\n+    @Since(\"1.6.0\") var windowSize: Int = 0,\n+    @Since(\"1.6.0\") var testMethod: StreamingTestMethod = WelchTTest)\n+  extends Logging with Serializable {\n+\n+  /** Set the number of initial batches to ignore. */"
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T20:19:11Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()\n+ *     .setPeacePeriod(10)\n+ *     .setWindowSize(0)\n+ *     .setTestMethod(\"welch\")\n+ *     .registerStream(DStream)\n+ *   ```\n+ */\n+@Experimental\n+@Since(\"1.6.0\")\n+class StreamingTest(\n+    @Since(\"1.6.0\") var peacePeriod: Int = 0,\n+    @Since(\"1.6.0\") var windowSize: Int = 0,\n+    @Since(\"1.6.0\") var testMethod: StreamingTestMethod = WelchTTest)\n+  extends Logging with Serializable {\n+\n+  /** Set the number of initial batches to ignore. */"
  }],
  "prId": 4716
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "document default value\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T04:57:53Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()\n+ *     .setPeacePeriod(10)\n+ *     .setWindowSize(0)\n+ *     .setTestMethod(\"welch\")\n+ *     .registerStream(DStream)\n+ *   ```\n+ */\n+@Experimental\n+@Since(\"1.6.0\")\n+class StreamingTest(\n+    @Since(\"1.6.0\") var peacePeriod: Int = 0,\n+    @Since(\"1.6.0\") var windowSize: Int = 0,\n+    @Since(\"1.6.0\") var testMethod: StreamingTestMethod = WelchTTest)\n+  extends Logging with Serializable {\n+\n+  /** Set the number of initial batches to ignore. */\n+  @Since(\"1.6.0\")\n+  def setPeacePeriod(peacePeriod: Int): this.type = {\n+    this.peacePeriod = peacePeriod\n+    this\n+  }\n+\n+  /**\n+   * Set the number of batches to compute significance tests over.\n+   * A value of 0 will use all batches seen so far."
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T20:19:14Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()\n+ *     .setPeacePeriod(10)\n+ *     .setWindowSize(0)\n+ *     .setTestMethod(\"welch\")\n+ *     .registerStream(DStream)\n+ *   ```\n+ */\n+@Experimental\n+@Since(\"1.6.0\")\n+class StreamingTest(\n+    @Since(\"1.6.0\") var peacePeriod: Int = 0,\n+    @Since(\"1.6.0\") var windowSize: Int = 0,\n+    @Since(\"1.6.0\") var testMethod: StreamingTestMethod = WelchTTest)\n+  extends Logging with Serializable {\n+\n+  /** Set the number of initial batches to ignore. */\n+  @Since(\"1.6.0\")\n+  def setPeacePeriod(peacePeriod: Int): this.type = {\n+    this.peacePeriod = peacePeriod\n+    this\n+  }\n+\n+  /**\n+   * Set the number of batches to compute significance tests over.\n+   * A value of 0 will use all batches seen so far."
  }],
  "prId": 4716
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "document default value and available methods\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T04:57:55Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()\n+ *     .setPeacePeriod(10)\n+ *     .setWindowSize(0)\n+ *     .setTestMethod(\"welch\")\n+ *     .registerStream(DStream)\n+ *   ```\n+ */\n+@Experimental\n+@Since(\"1.6.0\")\n+class StreamingTest(\n+    @Since(\"1.6.0\") var peacePeriod: Int = 0,\n+    @Since(\"1.6.0\") var windowSize: Int = 0,\n+    @Since(\"1.6.0\") var testMethod: StreamingTestMethod = WelchTTest)\n+  extends Logging with Serializable {\n+\n+  /** Set the number of initial batches to ignore. */\n+  @Since(\"1.6.0\")\n+  def setPeacePeriod(peacePeriod: Int): this.type = {\n+    this.peacePeriod = peacePeriod\n+    this\n+  }\n+\n+  /**\n+   * Set the number of batches to compute significance tests over.\n+   * A value of 0 will use all batches seen so far.\n+   */\n+  @Since(\"1.6.0\")\n+  def setWindowSize(windowSize: Int): this.type = {\n+    this.windowSize = windowSize\n+    this\n+  }\n+\n+  /** Set the statistical method used for significance testing. */"
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T20:19:17Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()\n+ *     .setPeacePeriod(10)\n+ *     .setWindowSize(0)\n+ *     .setTestMethod(\"welch\")\n+ *     .registerStream(DStream)\n+ *   ```\n+ */\n+@Experimental\n+@Since(\"1.6.0\")\n+class StreamingTest(\n+    @Since(\"1.6.0\") var peacePeriod: Int = 0,\n+    @Since(\"1.6.0\") var windowSize: Int = 0,\n+    @Since(\"1.6.0\") var testMethod: StreamingTestMethod = WelchTTest)\n+  extends Logging with Serializable {\n+\n+  /** Set the number of initial batches to ignore. */\n+  @Since(\"1.6.0\")\n+  def setPeacePeriod(peacePeriod: Int): this.type = {\n+    this.peacePeriod = peacePeriod\n+    this\n+  }\n+\n+  /**\n+   * Set the number of batches to compute significance tests over.\n+   * A value of 0 will use all batches seen so far.\n+   */\n+  @Since(\"1.6.0\")\n+  def setWindowSize(windowSize: Int): this.type = {\n+    this.windowSize = windowSize\n+    this\n+  }\n+\n+  /** Set the statistical method used for significance testing. */"
  }],
  "prId": 4716
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "document clearly whether `true` means control or experiment\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T04:58:01Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()\n+ *     .setPeacePeriod(10)\n+ *     .setWindowSize(0)\n+ *     .setTestMethod(\"welch\")\n+ *     .registerStream(DStream)\n+ *   ```\n+ */\n+@Experimental\n+@Since(\"1.6.0\")\n+class StreamingTest(\n+    @Since(\"1.6.0\") var peacePeriod: Int = 0,\n+    @Since(\"1.6.0\") var windowSize: Int = 0,\n+    @Since(\"1.6.0\") var testMethod: StreamingTestMethod = WelchTTest)\n+  extends Logging with Serializable {\n+\n+  /** Set the number of initial batches to ignore. */\n+  @Since(\"1.6.0\")\n+  def setPeacePeriod(peacePeriod: Int): this.type = {\n+    this.peacePeriod = peacePeriod\n+    this\n+  }\n+\n+  /**\n+   * Set the number of batches to compute significance tests over.\n+   * A value of 0 will use all batches seen so far.\n+   */\n+  @Since(\"1.6.0\")\n+  def setWindowSize(windowSize: Int): this.type = {\n+    this.windowSize = windowSize\n+    this\n+  }\n+\n+  /** Set the statistical method used for significance testing. */\n+  @Since(\"1.6.0\")\n+  def setTestMethod(method: String): this.type = {\n+    this.testMethod = StreamingTestMethod.getTestMethodFromName(method)\n+    this\n+  }\n+\n+  /**\n+   * Register a [[DStream]] of values for significance testing.\n+   *\n+   * @param data stream of (key,value) pairs where the key is the group membership (control or"
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "Will adopt `true` means experiment semantics although I don't think it matters here since all the tests are symmetric\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T20:21:30Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()\n+ *     .setPeacePeriod(10)\n+ *     .setWindowSize(0)\n+ *     .setTestMethod(\"welch\")\n+ *     .registerStream(DStream)\n+ *   ```\n+ */\n+@Experimental\n+@Since(\"1.6.0\")\n+class StreamingTest(\n+    @Since(\"1.6.0\") var peacePeriod: Int = 0,\n+    @Since(\"1.6.0\") var windowSize: Int = 0,\n+    @Since(\"1.6.0\") var testMethod: StreamingTestMethod = WelchTTest)\n+  extends Logging with Serializable {\n+\n+  /** Set the number of initial batches to ignore. */\n+  @Since(\"1.6.0\")\n+  def setPeacePeriod(peacePeriod: Int): this.type = {\n+    this.peacePeriod = peacePeriod\n+    this\n+  }\n+\n+  /**\n+   * Set the number of batches to compute significance tests over.\n+   * A value of 0 will use all batches seen so far.\n+   */\n+  @Since(\"1.6.0\")\n+  def setWindowSize(windowSize: Int): this.type = {\n+    this.windowSize = windowSize\n+    this\n+  }\n+\n+  /** Set the statistical method used for significance testing. */\n+  @Since(\"1.6.0\")\n+  def setTestMethod(method: String): this.type = {\n+    this.testMethod = StreamingTestMethod.getTestMethodFromName(method)\n+    this\n+  }\n+\n+  /**\n+   * Register a [[DStream]] of values for significance testing.\n+   *\n+   * @param data stream of (key,value) pairs where the key is the group membership (control or"
  }],
  "prId": 4716
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`val testResults =` is not necessary\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T04:58:38Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()\n+ *     .setPeacePeriod(10)\n+ *     .setWindowSize(0)\n+ *     .setTestMethod(\"welch\")\n+ *     .registerStream(DStream)\n+ *   ```\n+ */\n+@Experimental\n+@Since(\"1.6.0\")\n+class StreamingTest(\n+    @Since(\"1.6.0\") var peacePeriod: Int = 0,\n+    @Since(\"1.6.0\") var windowSize: Int = 0,\n+    @Since(\"1.6.0\") var testMethod: StreamingTestMethod = WelchTTest)\n+  extends Logging with Serializable {\n+\n+  /** Set the number of initial batches to ignore. */\n+  @Since(\"1.6.0\")\n+  def setPeacePeriod(peacePeriod: Int): this.type = {\n+    this.peacePeriod = peacePeriod\n+    this\n+  }\n+\n+  /**\n+   * Set the number of batches to compute significance tests over.\n+   * A value of 0 will use all batches seen so far.\n+   */\n+  @Since(\"1.6.0\")\n+  def setWindowSize(windowSize: Int): this.type = {\n+    this.windowSize = windowSize\n+    this\n+  }\n+\n+  /** Set the statistical method used for significance testing. */\n+  @Since(\"1.6.0\")\n+  def setTestMethod(method: String): this.type = {\n+    this.testMethod = StreamingTestMethod.getTestMethodFromName(method)\n+    this\n+  }\n+\n+  /**\n+   * Register a [[DStream]] of values for significance testing.\n+   *\n+   * @param data stream of (key,value) pairs where the key is the group membership (control or\n+   *             treatment) and the value is the numerical metric to test for significance\n+   * @return stream of significance testing results\n+   */\n+  @Since(\"1.6.0\")\n+  def registerStream(data: DStream[(Boolean, Double)]): DStream[StreamingTestResult] = {\n+    val dataAfterPeacePeriod = dropPeacePeriod(data)\n+    val summarizedData = summarizeByKeyAndWindow(dataAfterPeacePeriod)\n+    val pairedSummaries = pairSummaries(summarizedData)\n+    val testResults = testMethod.doTest(pairedSummaries)"
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T20:21:58Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()\n+ *     .setPeacePeriod(10)\n+ *     .setWindowSize(0)\n+ *     .setTestMethod(\"welch\")\n+ *     .registerStream(DStream)\n+ *   ```\n+ */\n+@Experimental\n+@Since(\"1.6.0\")\n+class StreamingTest(\n+    @Since(\"1.6.0\") var peacePeriod: Int = 0,\n+    @Since(\"1.6.0\") var windowSize: Int = 0,\n+    @Since(\"1.6.0\") var testMethod: StreamingTestMethod = WelchTTest)\n+  extends Logging with Serializable {\n+\n+  /** Set the number of initial batches to ignore. */\n+  @Since(\"1.6.0\")\n+  def setPeacePeriod(peacePeriod: Int): this.type = {\n+    this.peacePeriod = peacePeriod\n+    this\n+  }\n+\n+  /**\n+   * Set the number of batches to compute significance tests over.\n+   * A value of 0 will use all batches seen so far.\n+   */\n+  @Since(\"1.6.0\")\n+  def setWindowSize(windowSize: Int): this.type = {\n+    this.windowSize = windowSize\n+    this\n+  }\n+\n+  /** Set the statistical method used for significance testing. */\n+  @Since(\"1.6.0\")\n+  def setTestMethod(method: String): this.type = {\n+    this.testMethod = StreamingTestMethod.getTestMethodFromName(method)\n+    this\n+  }\n+\n+  /**\n+   * Register a [[DStream]] of values for significance testing.\n+   *\n+   * @param data stream of (key,value) pairs where the key is the group membership (control or\n+   *             treatment) and the value is the numerical metric to test for significance\n+   * @return stream of significance testing results\n+   */\n+  @Since(\"1.6.0\")\n+  def registerStream(data: DStream[(Boolean, Double)]): DStream[StreamingTestResult] = {\n+    val dataAfterPeacePeriod = dropPeacePeriod(data)\n+    val summarizedData = summarizeByKeyAndWindow(dataAfterPeacePeriod)\n+    val pairedSummaries = pairSummaries(summarizedData)\n+    val testResults = testMethod.doTest(pairedSummaries)"
  }],
  "prId": 4716
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "you only need an empty `RDD[(Boolean, Double)]`\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T04:59:47Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()\n+ *     .setPeacePeriod(10)\n+ *     .setWindowSize(0)\n+ *     .setTestMethod(\"welch\")\n+ *     .registerStream(DStream)\n+ *   ```\n+ */\n+@Experimental\n+@Since(\"1.6.0\")\n+class StreamingTest(\n+    @Since(\"1.6.0\") var peacePeriod: Int = 0,\n+    @Since(\"1.6.0\") var windowSize: Int = 0,\n+    @Since(\"1.6.0\") var testMethod: StreamingTestMethod = WelchTTest)\n+  extends Logging with Serializable {\n+\n+  /** Set the number of initial batches to ignore. */\n+  @Since(\"1.6.0\")\n+  def setPeacePeriod(peacePeriod: Int): this.type = {\n+    this.peacePeriod = peacePeriod\n+    this\n+  }\n+\n+  /**\n+   * Set the number of batches to compute significance tests over.\n+   * A value of 0 will use all batches seen so far.\n+   */\n+  @Since(\"1.6.0\")\n+  def setWindowSize(windowSize: Int): this.type = {\n+    this.windowSize = windowSize\n+    this\n+  }\n+\n+  /** Set the statistical method used for significance testing. */\n+  @Since(\"1.6.0\")\n+  def setTestMethod(method: String): this.type = {\n+    this.testMethod = StreamingTestMethod.getTestMethodFromName(method)\n+    this\n+  }\n+\n+  /**\n+   * Register a [[DStream]] of values for significance testing.\n+   *\n+   * @param data stream of (key,value) pairs where the key is the group membership (control or\n+   *             treatment) and the value is the numerical metric to test for significance\n+   * @return stream of significance testing results\n+   */\n+  @Since(\"1.6.0\")\n+  def registerStream(data: DStream[(Boolean, Double)]): DStream[StreamingTestResult] = {\n+    val dataAfterPeacePeriod = dropPeacePeriod(data)\n+    val summarizedData = summarizeByKeyAndWindow(dataAfterPeacePeriod)\n+    val pairedSummaries = pairSummaries(summarizedData)\n+    val testResults = testMethod.doTest(pairedSummaries)\n+\n+    testResults\n+  }\n+\n+  /** Drop all batches inside the peace period. */\n+  private[stat] def dropPeacePeriod(\n+      data: DStream[(Boolean, Double)]): DStream[(Boolean, Double)] = {\n+    data.transform { (rdd, time) =>\n+      if (time.milliseconds > data.slideDuration.milliseconds * peacePeriod) {\n+        rdd\n+      } else {\n+        rdd.filter(_ => false) // TODO: Is there a better way to drop a RDD from a DStream?"
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T20:23:05Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()\n+ *     .setPeacePeriod(10)\n+ *     .setWindowSize(0)\n+ *     .setTestMethod(\"welch\")\n+ *     .registerStream(DStream)\n+ *   ```\n+ */\n+@Experimental\n+@Since(\"1.6.0\")\n+class StreamingTest(\n+    @Since(\"1.6.0\") var peacePeriod: Int = 0,\n+    @Since(\"1.6.0\") var windowSize: Int = 0,\n+    @Since(\"1.6.0\") var testMethod: StreamingTestMethod = WelchTTest)\n+  extends Logging with Serializable {\n+\n+  /** Set the number of initial batches to ignore. */\n+  @Since(\"1.6.0\")\n+  def setPeacePeriod(peacePeriod: Int): this.type = {\n+    this.peacePeriod = peacePeriod\n+    this\n+  }\n+\n+  /**\n+   * Set the number of batches to compute significance tests over.\n+   * A value of 0 will use all batches seen so far.\n+   */\n+  @Since(\"1.6.0\")\n+  def setWindowSize(windowSize: Int): this.type = {\n+    this.windowSize = windowSize\n+    this\n+  }\n+\n+  /** Set the statistical method used for significance testing. */\n+  @Since(\"1.6.0\")\n+  def setTestMethod(method: String): this.type = {\n+    this.testMethod = StreamingTestMethod.getTestMethodFromName(method)\n+    this\n+  }\n+\n+  /**\n+   * Register a [[DStream]] of values for significance testing.\n+   *\n+   * @param data stream of (key,value) pairs where the key is the group membership (control or\n+   *             treatment) and the value is the numerical metric to test for significance\n+   * @return stream of significance testing results\n+   */\n+  @Since(\"1.6.0\")\n+  def registerStream(data: DStream[(Boolean, Double)]): DStream[StreamingTestResult] = {\n+    val dataAfterPeacePeriod = dropPeacePeriod(data)\n+    val summarizedData = summarizeByKeyAndWindow(dataAfterPeacePeriod)\n+    val pairedSummaries = pairSummaries(summarizedData)\n+    val testResults = testMethod.doTest(pairedSummaries)\n+\n+    testResults\n+  }\n+\n+  /** Drop all batches inside the peace period. */\n+  private[stat] def dropPeacePeriod(\n+      data: DStream[(Boolean, Double)]): DStream[(Boolean, Double)] = {\n+    data.transform { (rdd, time) =>\n+      if (time.milliseconds > data.slideDuration.milliseconds * peacePeriod) {\n+        rdd\n+      } else {\n+        rdd.filter(_ => false) // TODO: Is there a better way to drop a RDD from a DStream?"
  }],
  "prId": 4716
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "A and B -> control and experiement\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T05:01:59Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()\n+ *     .setPeacePeriod(10)\n+ *     .setWindowSize(0)\n+ *     .setTestMethod(\"welch\")\n+ *     .registerStream(DStream)\n+ *   ```\n+ */\n+@Experimental\n+@Since(\"1.6.0\")\n+class StreamingTest(\n+    @Since(\"1.6.0\") var peacePeriod: Int = 0,\n+    @Since(\"1.6.0\") var windowSize: Int = 0,\n+    @Since(\"1.6.0\") var testMethod: StreamingTestMethod = WelchTTest)\n+  extends Logging with Serializable {\n+\n+  /** Set the number of initial batches to ignore. */\n+  @Since(\"1.6.0\")\n+  def setPeacePeriod(peacePeriod: Int): this.type = {\n+    this.peacePeriod = peacePeriod\n+    this\n+  }\n+\n+  /**\n+   * Set the number of batches to compute significance tests over.\n+   * A value of 0 will use all batches seen so far.\n+   */\n+  @Since(\"1.6.0\")\n+  def setWindowSize(windowSize: Int): this.type = {\n+    this.windowSize = windowSize\n+    this\n+  }\n+\n+  /** Set the statistical method used for significance testing. */\n+  @Since(\"1.6.0\")\n+  def setTestMethod(method: String): this.type = {\n+    this.testMethod = StreamingTestMethod.getTestMethodFromName(method)\n+    this\n+  }\n+\n+  /**\n+   * Register a [[DStream]] of values for significance testing.\n+   *\n+   * @param data stream of (key,value) pairs where the key is the group membership (control or\n+   *             treatment) and the value is the numerical metric to test for significance\n+   * @return stream of significance testing results\n+   */\n+  @Since(\"1.6.0\")\n+  def registerStream(data: DStream[(Boolean, Double)]): DStream[StreamingTestResult] = {\n+    val dataAfterPeacePeriod = dropPeacePeriod(data)\n+    val summarizedData = summarizeByKeyAndWindow(dataAfterPeacePeriod)\n+    val pairedSummaries = pairSummaries(summarizedData)\n+    val testResults = testMethod.doTest(pairedSummaries)\n+\n+    testResults\n+  }\n+\n+  /** Drop all batches inside the peace period. */\n+  private[stat] def dropPeacePeriod(\n+      data: DStream[(Boolean, Double)]): DStream[(Boolean, Double)] = {\n+    data.transform { (rdd, time) =>\n+      if (time.milliseconds > data.slideDuration.milliseconds * peacePeriod) {\n+        rdd\n+      } else {\n+        rdd.filter(_ => false) // TODO: Is there a better way to drop a RDD from a DStream?\n+      }\n+    }\n+  }\n+\n+  /** Compute summary statistics over each key and the specified test window size. */\n+  private[stat] def summarizeByKeyAndWindow(\n+      data: DStream[(Boolean, Double)]): DStream[(Boolean, StatCounter)] = {\n+    if (this.windowSize == 0) {\n+      data.updateStateByKey[StatCounter](\n+        (newValues: Seq[Double], oldSummary: Option[StatCounter]) => {\n+          val newSummary = oldSummary.getOrElse(new StatCounter())\n+          newSummary.merge(newValues)\n+          Some(newSummary)\n+        })\n+    } else {\n+      val windowDuration = data.slideDuration * this.windowSize\n+      data\n+        .groupByKeyAndWindow(windowDuration)\n+        .mapValues { values =>\n+          val summary = new StatCounter()\n+          values.foreach(value => summary.merge(value))\n+          summary\n+        }\n+    }\n+  }\n+\n+  /**\n+   * Transform a stream of summaries into pairs representing summary statistics for group A and"
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T20:24:35Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()\n+ *     .setPeacePeriod(10)\n+ *     .setWindowSize(0)\n+ *     .setTestMethod(\"welch\")\n+ *     .registerStream(DStream)\n+ *   ```\n+ */\n+@Experimental\n+@Since(\"1.6.0\")\n+class StreamingTest(\n+    @Since(\"1.6.0\") var peacePeriod: Int = 0,\n+    @Since(\"1.6.0\") var windowSize: Int = 0,\n+    @Since(\"1.6.0\") var testMethod: StreamingTestMethod = WelchTTest)\n+  extends Logging with Serializable {\n+\n+  /** Set the number of initial batches to ignore. */\n+  @Since(\"1.6.0\")\n+  def setPeacePeriod(peacePeriod: Int): this.type = {\n+    this.peacePeriod = peacePeriod\n+    this\n+  }\n+\n+  /**\n+   * Set the number of batches to compute significance tests over.\n+   * A value of 0 will use all batches seen so far.\n+   */\n+  @Since(\"1.6.0\")\n+  def setWindowSize(windowSize: Int): this.type = {\n+    this.windowSize = windowSize\n+    this\n+  }\n+\n+  /** Set the statistical method used for significance testing. */\n+  @Since(\"1.6.0\")\n+  def setTestMethod(method: String): this.type = {\n+    this.testMethod = StreamingTestMethod.getTestMethodFromName(method)\n+    this\n+  }\n+\n+  /**\n+   * Register a [[DStream]] of values for significance testing.\n+   *\n+   * @param data stream of (key,value) pairs where the key is the group membership (control or\n+   *             treatment) and the value is the numerical metric to test for significance\n+   * @return stream of significance testing results\n+   */\n+  @Since(\"1.6.0\")\n+  def registerStream(data: DStream[(Boolean, Double)]): DStream[StreamingTestResult] = {\n+    val dataAfterPeacePeriod = dropPeacePeriod(data)\n+    val summarizedData = summarizeByKeyAndWindow(dataAfterPeacePeriod)\n+    val pairedSummaries = pairSummaries(summarizedData)\n+    val testResults = testMethod.doTest(pairedSummaries)\n+\n+    testResults\n+  }\n+\n+  /** Drop all batches inside the peace period. */\n+  private[stat] def dropPeacePeriod(\n+      data: DStream[(Boolean, Double)]): DStream[(Boolean, Double)] = {\n+    data.transform { (rdd, time) =>\n+      if (time.milliseconds > data.slideDuration.milliseconds * peacePeriod) {\n+        rdd\n+      } else {\n+        rdd.filter(_ => false) // TODO: Is there a better way to drop a RDD from a DStream?\n+      }\n+    }\n+  }\n+\n+  /** Compute summary statistics over each key and the specified test window size. */\n+  private[stat] def summarizeByKeyAndWindow(\n+      data: DStream[(Boolean, Double)]): DStream[(Boolean, StatCounter)] = {\n+    if (this.windowSize == 0) {\n+      data.updateStateByKey[StatCounter](\n+        (newValues: Seq[Double], oldSummary: Option[StatCounter]) => {\n+          val newSummary = oldSummary.getOrElse(new StatCounter())\n+          newSummary.merge(newValues)\n+          Some(newSummary)\n+        })\n+    } else {\n+      val windowDuration = data.slideDuration * this.windowSize\n+      data\n+        .groupByKeyAndWindow(windowDuration)\n+        .mapValues { values =>\n+          val summary = new StatCounter()\n+          values.foreach(value => summary.merge(value))\n+          summary\n+        }\n+    }\n+  }\n+\n+  /**\n+   * Transform a stream of summaries into pairs representing summary statistics for group A and"
  }],
  "prId": 4716
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "A/B -> control/experiment\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T05:02:00Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()\n+ *     .setPeacePeriod(10)\n+ *     .setWindowSize(0)\n+ *     .setTestMethod(\"welch\")\n+ *     .registerStream(DStream)\n+ *   ```\n+ */\n+@Experimental\n+@Since(\"1.6.0\")\n+class StreamingTest(\n+    @Since(\"1.6.0\") var peacePeriod: Int = 0,\n+    @Since(\"1.6.0\") var windowSize: Int = 0,\n+    @Since(\"1.6.0\") var testMethod: StreamingTestMethod = WelchTTest)\n+  extends Logging with Serializable {\n+\n+  /** Set the number of initial batches to ignore. */\n+  @Since(\"1.6.0\")\n+  def setPeacePeriod(peacePeriod: Int): this.type = {\n+    this.peacePeriod = peacePeriod\n+    this\n+  }\n+\n+  /**\n+   * Set the number of batches to compute significance tests over.\n+   * A value of 0 will use all batches seen so far.\n+   */\n+  @Since(\"1.6.0\")\n+  def setWindowSize(windowSize: Int): this.type = {\n+    this.windowSize = windowSize\n+    this\n+  }\n+\n+  /** Set the statistical method used for significance testing. */\n+  @Since(\"1.6.0\")\n+  def setTestMethod(method: String): this.type = {\n+    this.testMethod = StreamingTestMethod.getTestMethodFromName(method)\n+    this\n+  }\n+\n+  /**\n+   * Register a [[DStream]] of values for significance testing.\n+   *\n+   * @param data stream of (key,value) pairs where the key is the group membership (control or\n+   *             treatment) and the value is the numerical metric to test for significance\n+   * @return stream of significance testing results\n+   */\n+  @Since(\"1.6.0\")\n+  def registerStream(data: DStream[(Boolean, Double)]): DStream[StreamingTestResult] = {\n+    val dataAfterPeacePeriod = dropPeacePeriod(data)\n+    val summarizedData = summarizeByKeyAndWindow(dataAfterPeacePeriod)\n+    val pairedSummaries = pairSummaries(summarizedData)\n+    val testResults = testMethod.doTest(pairedSummaries)\n+\n+    testResults\n+  }\n+\n+  /** Drop all batches inside the peace period. */\n+  private[stat] def dropPeacePeriod(\n+      data: DStream[(Boolean, Double)]): DStream[(Boolean, Double)] = {\n+    data.transform { (rdd, time) =>\n+      if (time.milliseconds > data.slideDuration.milliseconds * peacePeriod) {\n+        rdd\n+      } else {\n+        rdd.filter(_ => false) // TODO: Is there a better way to drop a RDD from a DStream?\n+      }\n+    }\n+  }\n+\n+  /** Compute summary statistics over each key and the specified test window size. */\n+  private[stat] def summarizeByKeyAndWindow(\n+      data: DStream[(Boolean, Double)]): DStream[(Boolean, StatCounter)] = {\n+    if (this.windowSize == 0) {\n+      data.updateStateByKey[StatCounter](\n+        (newValues: Seq[Double], oldSummary: Option[StatCounter]) => {\n+          val newSummary = oldSummary.getOrElse(new StatCounter())\n+          newSummary.merge(newValues)\n+          Some(newSummary)\n+        })\n+    } else {\n+      val windowDuration = data.slideDuration * this.windowSize\n+      data\n+        .groupByKeyAndWindow(windowDuration)\n+        .mapValues { values =>\n+          val summary = new StatCounter()\n+          values.foreach(value => summary.merge(value))\n+          summary\n+        }\n+    }\n+  }\n+\n+  /**\n+   * Transform a stream of summaries into pairs representing summary statistics for group A and\n+   * group B up to this batch.\n+   */\n+  private[stat] def pairSummaries(summarizedData: DStream[(Boolean, StatCounter)])\n+      : DStream[(StatCounter, StatCounter)] = {\n+    summarizedData\n+      .map[(Int, StatCounter)](x => (0, x._2))\n+      .groupByKey()  // Iterable[StatCounter] should be length two, one for each A/B group"
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T20:25:32Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()\n+ *     .setPeacePeriod(10)\n+ *     .setWindowSize(0)\n+ *     .setTestMethod(\"welch\")\n+ *     .registerStream(DStream)\n+ *   ```\n+ */\n+@Experimental\n+@Since(\"1.6.0\")\n+class StreamingTest(\n+    @Since(\"1.6.0\") var peacePeriod: Int = 0,\n+    @Since(\"1.6.0\") var windowSize: Int = 0,\n+    @Since(\"1.6.0\") var testMethod: StreamingTestMethod = WelchTTest)\n+  extends Logging with Serializable {\n+\n+  /** Set the number of initial batches to ignore. */\n+  @Since(\"1.6.0\")\n+  def setPeacePeriod(peacePeriod: Int): this.type = {\n+    this.peacePeriod = peacePeriod\n+    this\n+  }\n+\n+  /**\n+   * Set the number of batches to compute significance tests over.\n+   * A value of 0 will use all batches seen so far.\n+   */\n+  @Since(\"1.6.0\")\n+  def setWindowSize(windowSize: Int): this.type = {\n+    this.windowSize = windowSize\n+    this\n+  }\n+\n+  /** Set the statistical method used for significance testing. */\n+  @Since(\"1.6.0\")\n+  def setTestMethod(method: String): this.type = {\n+    this.testMethod = StreamingTestMethod.getTestMethodFromName(method)\n+    this\n+  }\n+\n+  /**\n+   * Register a [[DStream]] of values for significance testing.\n+   *\n+   * @param data stream of (key,value) pairs where the key is the group membership (control or\n+   *             treatment) and the value is the numerical metric to test for significance\n+   * @return stream of significance testing results\n+   */\n+  @Since(\"1.6.0\")\n+  def registerStream(data: DStream[(Boolean, Double)]): DStream[StreamingTestResult] = {\n+    val dataAfterPeacePeriod = dropPeacePeriod(data)\n+    val summarizedData = summarizeByKeyAndWindow(dataAfterPeacePeriod)\n+    val pairedSummaries = pairSummaries(summarizedData)\n+    val testResults = testMethod.doTest(pairedSummaries)\n+\n+    testResults\n+  }\n+\n+  /** Drop all batches inside the peace period. */\n+  private[stat] def dropPeacePeriod(\n+      data: DStream[(Boolean, Double)]): DStream[(Boolean, Double)] = {\n+    data.transform { (rdd, time) =>\n+      if (time.milliseconds > data.slideDuration.milliseconds * peacePeriod) {\n+        rdd\n+      } else {\n+        rdd.filter(_ => false) // TODO: Is there a better way to drop a RDD from a DStream?\n+      }\n+    }\n+  }\n+\n+  /** Compute summary statistics over each key and the specified test window size. */\n+  private[stat] def summarizeByKeyAndWindow(\n+      data: DStream[(Boolean, Double)]): DStream[(Boolean, StatCounter)] = {\n+    if (this.windowSize == 0) {\n+      data.updateStateByKey[StatCounter](\n+        (newValues: Seq[Double], oldSummary: Option[StatCounter]) => {\n+          val newSummary = oldSummary.getOrElse(new StatCounter())\n+          newSummary.merge(newValues)\n+          Some(newSummary)\n+        })\n+    } else {\n+      val windowDuration = data.slideDuration * this.windowSize\n+      data\n+        .groupByKeyAndWindow(windowDuration)\n+        .mapValues { values =>\n+          val summary = new StatCounter()\n+          values.foreach(value => summary.merge(value))\n+          summary\n+        }\n+    }\n+  }\n+\n+  /**\n+   * Transform a stream of summaries into pairs representing summary statistics for group A and\n+   * group B up to this batch.\n+   */\n+  private[stat] def pairSummaries(summarizedData: DStream[(Boolean, StatCounter)])\n+      : DStream[(StatCounter, StatCounter)] = {\n+    summarizedData\n+      .map[(Int, StatCounter)](x => (0, x._2))\n+      .groupByKey()  // Iterable[StatCounter] should be length two, one for each A/B group"
  }],
  "prId": 4716
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`) ) ->`))`\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T05:02:03Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()\n+ *     .setPeacePeriod(10)\n+ *     .setWindowSize(0)\n+ *     .setTestMethod(\"welch\")\n+ *     .registerStream(DStream)\n+ *   ```\n+ */\n+@Experimental\n+@Since(\"1.6.0\")\n+class StreamingTest(\n+    @Since(\"1.6.0\") var peacePeriod: Int = 0,\n+    @Since(\"1.6.0\") var windowSize: Int = 0,\n+    @Since(\"1.6.0\") var testMethod: StreamingTestMethod = WelchTTest)\n+  extends Logging with Serializable {\n+\n+  /** Set the number of initial batches to ignore. */\n+  @Since(\"1.6.0\")\n+  def setPeacePeriod(peacePeriod: Int): this.type = {\n+    this.peacePeriod = peacePeriod\n+    this\n+  }\n+\n+  /**\n+   * Set the number of batches to compute significance tests over.\n+   * A value of 0 will use all batches seen so far.\n+   */\n+  @Since(\"1.6.0\")\n+  def setWindowSize(windowSize: Int): this.type = {\n+    this.windowSize = windowSize\n+    this\n+  }\n+\n+  /** Set the statistical method used for significance testing. */\n+  @Since(\"1.6.0\")\n+  def setTestMethod(method: String): this.type = {\n+    this.testMethod = StreamingTestMethod.getTestMethodFromName(method)\n+    this\n+  }\n+\n+  /**\n+   * Register a [[DStream]] of values for significance testing.\n+   *\n+   * @param data stream of (key,value) pairs where the key is the group membership (control or\n+   *             treatment) and the value is the numerical metric to test for significance\n+   * @return stream of significance testing results\n+   */\n+  @Since(\"1.6.0\")\n+  def registerStream(data: DStream[(Boolean, Double)]): DStream[StreamingTestResult] = {\n+    val dataAfterPeacePeriod = dropPeacePeriod(data)\n+    val summarizedData = summarizeByKeyAndWindow(dataAfterPeacePeriod)\n+    val pairedSummaries = pairSummaries(summarizedData)\n+    val testResults = testMethod.doTest(pairedSummaries)\n+\n+    testResults\n+  }\n+\n+  /** Drop all batches inside the peace period. */\n+  private[stat] def dropPeacePeriod(\n+      data: DStream[(Boolean, Double)]): DStream[(Boolean, Double)] = {\n+    data.transform { (rdd, time) =>\n+      if (time.milliseconds > data.slideDuration.milliseconds * peacePeriod) {\n+        rdd\n+      } else {\n+        rdd.filter(_ => false) // TODO: Is there a better way to drop a RDD from a DStream?\n+      }\n+    }\n+  }\n+\n+  /** Compute summary statistics over each key and the specified test window size. */\n+  private[stat] def summarizeByKeyAndWindow(\n+      data: DStream[(Boolean, Double)]): DStream[(Boolean, StatCounter)] = {\n+    if (this.windowSize == 0) {\n+      data.updateStateByKey[StatCounter](\n+        (newValues: Seq[Double], oldSummary: Option[StatCounter]) => {\n+          val newSummary = oldSummary.getOrElse(new StatCounter())\n+          newSummary.merge(newValues)\n+          Some(newSummary)\n+        })\n+    } else {\n+      val windowDuration = data.slideDuration * this.windowSize\n+      data\n+        .groupByKeyAndWindow(windowDuration)\n+        .mapValues { values =>\n+          val summary = new StatCounter()\n+          values.foreach(value => summary.merge(value))\n+          summary\n+        }\n+    }\n+  }\n+\n+  /**\n+   * Transform a stream of summaries into pairs representing summary statistics for group A and\n+   * group B up to this batch.\n+   */\n+  private[stat] def pairSummaries(summarizedData: DStream[(Boolean, StatCounter)])\n+      : DStream[(StatCounter, StatCounter)] = {\n+    summarizedData\n+      .map[(Int, StatCounter)](x => (0, x._2))\n+      .groupByKey()  // Iterable[StatCounter] should be length two, one for each A/B group\n+      .map(x => (x._2.head, x._2.last) )"
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK\n",
    "commit": "ba71bfad58d6aedb193e0f7b0cf32747d6a59ce2",
    "createdAt": "2015-09-18T20:25:40Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.stat.test\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.util.StatCounter\n+\n+/**\n+ * :: Experimental ::\n+ * Performs online 2-sample significance testing for a stream of (Boolean, Double) pairs. The\n+ * Boolean identifies which sample each observation comes from, and the Double is the numeric value\n+ * of the observation.\n+ *\n+ * To address novelty affects, the `peacePeriod` specifies a set number of initial\n+ * [[org.apache.spark.rdd.RDD]] batches of the [[DStream]] to be dropped from significance testing.\n+ *\n+ * The `windowSize` sets the number of batches each significance test is to be performed over. The\n+ * window is sliding with a stride length of 1 batch. Setting windowSize to 0 will perform\n+ * cumulative processing, using all batches seen so far.\n+ *\n+ * Different tests may be used for assessing statistical significance depending on assumptions\n+ * satisfied by data. For more details, see [[StreamingTestMethod]]. The `testMethod` specifies\n+ * which test will be used.\n+ *\n+ * Use a builder pattern to construct a streaming test in an application, for example:\n+ *   ```\n+ *   val model = new OnlineABTest()\n+ *     .setPeacePeriod(10)\n+ *     .setWindowSize(0)\n+ *     .setTestMethod(\"welch\")\n+ *     .registerStream(DStream)\n+ *   ```\n+ */\n+@Experimental\n+@Since(\"1.6.0\")\n+class StreamingTest(\n+    @Since(\"1.6.0\") var peacePeriod: Int = 0,\n+    @Since(\"1.6.0\") var windowSize: Int = 0,\n+    @Since(\"1.6.0\") var testMethod: StreamingTestMethod = WelchTTest)\n+  extends Logging with Serializable {\n+\n+  /** Set the number of initial batches to ignore. */\n+  @Since(\"1.6.0\")\n+  def setPeacePeriod(peacePeriod: Int): this.type = {\n+    this.peacePeriod = peacePeriod\n+    this\n+  }\n+\n+  /**\n+   * Set the number of batches to compute significance tests over.\n+   * A value of 0 will use all batches seen so far.\n+   */\n+  @Since(\"1.6.0\")\n+  def setWindowSize(windowSize: Int): this.type = {\n+    this.windowSize = windowSize\n+    this\n+  }\n+\n+  /** Set the statistical method used for significance testing. */\n+  @Since(\"1.6.0\")\n+  def setTestMethod(method: String): this.type = {\n+    this.testMethod = StreamingTestMethod.getTestMethodFromName(method)\n+    this\n+  }\n+\n+  /**\n+   * Register a [[DStream]] of values for significance testing.\n+   *\n+   * @param data stream of (key,value) pairs where the key is the group membership (control or\n+   *             treatment) and the value is the numerical metric to test for significance\n+   * @return stream of significance testing results\n+   */\n+  @Since(\"1.6.0\")\n+  def registerStream(data: DStream[(Boolean, Double)]): DStream[StreamingTestResult] = {\n+    val dataAfterPeacePeriod = dropPeacePeriod(data)\n+    val summarizedData = summarizeByKeyAndWindow(dataAfterPeacePeriod)\n+    val pairedSummaries = pairSummaries(summarizedData)\n+    val testResults = testMethod.doTest(pairedSummaries)\n+\n+    testResults\n+  }\n+\n+  /** Drop all batches inside the peace period. */\n+  private[stat] def dropPeacePeriod(\n+      data: DStream[(Boolean, Double)]): DStream[(Boolean, Double)] = {\n+    data.transform { (rdd, time) =>\n+      if (time.milliseconds > data.slideDuration.milliseconds * peacePeriod) {\n+        rdd\n+      } else {\n+        rdd.filter(_ => false) // TODO: Is there a better way to drop a RDD from a DStream?\n+      }\n+    }\n+  }\n+\n+  /** Compute summary statistics over each key and the specified test window size. */\n+  private[stat] def summarizeByKeyAndWindow(\n+      data: DStream[(Boolean, Double)]): DStream[(Boolean, StatCounter)] = {\n+    if (this.windowSize == 0) {\n+      data.updateStateByKey[StatCounter](\n+        (newValues: Seq[Double], oldSummary: Option[StatCounter]) => {\n+          val newSummary = oldSummary.getOrElse(new StatCounter())\n+          newSummary.merge(newValues)\n+          Some(newSummary)\n+        })\n+    } else {\n+      val windowDuration = data.slideDuration * this.windowSize\n+      data\n+        .groupByKeyAndWindow(windowDuration)\n+        .mapValues { values =>\n+          val summary = new StatCounter()\n+          values.foreach(value => summary.merge(value))\n+          summary\n+        }\n+    }\n+  }\n+\n+  /**\n+   * Transform a stream of summaries into pairs representing summary statistics for group A and\n+   * group B up to this batch.\n+   */\n+  private[stat] def pairSummaries(summarizedData: DStream[(Boolean, StatCounter)])\n+      : DStream[(StatCounter, StatCounter)] = {\n+    summarizedData\n+      .map[(Int, StatCounter)](x => (0, x._2))\n+      .groupByKey()  // Iterable[StatCounter] should be length two, one for each A/B group\n+      .map(x => (x._2.head, x._2.last) )"
  }],
  "prId": 4716
}]