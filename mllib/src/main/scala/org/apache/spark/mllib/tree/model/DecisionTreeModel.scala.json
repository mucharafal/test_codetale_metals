[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Same question was asked by @srowen : It is easy to support multi-class?\n\nAlso, why 0.5 is used here as the threshold?\n",
    "commit": "1e8c70483984d86a204e0377b2b043cc17c854ac",
    "createdAt": "2014-03-10T18:19:46Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.tree.model\n+\n+import org.apache.spark.mllib.tree.configuration.Algo._\n+import org.apache.spark.rdd.RDD\n+\n+/**\n+ * Model to store the decision tree parameters\n+ * @param topNode root node\n+ * @param algo algorithm type -- classification or regression\n+ */\n+class DecisionTreeModel(val topNode: Node, val algo: Algo) extends Serializable {\n+\n+  /**\n+   * Predict values for a single data point using the model trained.\n+   *\n+   * @param features array representing a single data point\n+   * @return Double prediction from the trained model\n+   */\n+  def predict(features: Array[Double]): Double = {\n+    algo match {\n+      case Classification => {\n+        if (topNode.predictIfLeaf(features) < 0.5) 0.0 else 1.0"
  }, {
    "author": {
      "login": "manishamde"
    },
    "body": "0.5 was just a threshold used for verification. I will make it configurable and for now return a double value between 0 and 1 similar to other classification algorithms in mllib. This will make it easier for performing ROC/AUC calculations.\n",
    "commit": "1e8c70483984d86a204e0377b2b043cc17c854ac",
    "createdAt": "2014-03-11T04:35:30Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.tree.model\n+\n+import org.apache.spark.mllib.tree.configuration.Algo._\n+import org.apache.spark.rdd.RDD\n+\n+/**\n+ * Model to store the decision tree parameters\n+ * @param topNode root node\n+ * @param algo algorithm type -- classification or regression\n+ */\n+class DecisionTreeModel(val topNode: Node, val algo: Algo) extends Serializable {\n+\n+  /**\n+   * Predict values for a single data point using the model trained.\n+   *\n+   * @param features array representing a single data point\n+   * @return Double prediction from the trained model\n+   */\n+  def predict(features: Array[Double]): Double = {\n+    algo match {\n+      case Classification => {\n+        if (topNode.predictIfLeaf(features) < 0.5) 0.0 else 1.0"
  }],
  "prId": 79
}]