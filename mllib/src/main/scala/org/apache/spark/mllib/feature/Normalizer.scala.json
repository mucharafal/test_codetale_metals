[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`n` -> `p`, which is commonly used for norms.\n",
    "commit": "78c15d3eb9a6003180a08cb53688455ff82d4463",
    "createdAt": "2014-08-03T06:30:20Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Normalizes samples individually to unit L^n norm\n+ *\n+ * @param n  L^2 norm by default. Normalization in L^n space.\n+ */\n+@DeveloperApi\n+class Normalizer(n: Int) extends VectorTransformer with Serializable {"
  }],
  "prId": 1207
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`p >= 1`? Any use case for `p \\in (0, 1)`?\n",
    "commit": "78c15d3eb9a6003180a08cb53688455ff82d4463",
    "createdAt": "2014-08-03T06:30:22Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Normalizes samples individually to unit L^n norm\n+ *\n+ * @param n  L^2 norm by default. Normalization in L^n space.\n+ */\n+@DeveloperApi\n+class Normalizer(n: Int) extends VectorTransformer with Serializable {\n+\n+  def this() = this(2)\n+\n+  require(n > 0)"
  }, {
    "author": {
      "login": "dbtsai"
    },
    "body": "This is Int. As long as we require p > 0; it implies p >= 0\n",
    "commit": "78c15d3eb9a6003180a08cb53688455ff82d4463",
    "createdAt": "2014-08-03T06:35:27Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Normalizes samples individually to unit L^n norm\n+ *\n+ * @param n  L^2 norm by default. Normalization in L^n space.\n+ */\n+@DeveloperApi\n+class Normalizer(n: Int) extends VectorTransformer with Serializable {\n+\n+  def this() = this(2)\n+\n+  require(n > 0)"
  }, {
    "author": {
      "login": "dbtsai"
    },
    "body": "I made it more explicit for not saving one cpu cycle. \n",
    "commit": "78c15d3eb9a6003180a08cb53688455ff82d4463",
    "createdAt": "2014-08-03T06:36:16Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Normalizes samples individually to unit L^n norm\n+ *\n+ * @param n  L^2 norm by default. Normalization in L^n space.\n+ */\n+@DeveloperApi\n+class Normalizer(n: Int) extends VectorTransformer with Serializable {\n+\n+  def this() = this(2)\n+\n+  require(n > 0)"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Ah, we should use Double for norm and also accept `Double.PositiveInfinity`. 1, 2, and `inf` are the popular norms.\n",
    "commit": "78c15d3eb9a6003180a08cb53688455ff82d4463",
    "createdAt": "2014-08-03T06:37:44Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Normalizes samples individually to unit L^n norm\n+ *\n+ * @param n  L^2 norm by default. Normalization in L^n space.\n+ */\n+@DeveloperApi\n+class Normalizer(n: Int) extends VectorTransformer with Serializable {\n+\n+  def this() = this(2)\n+\n+  require(n > 0)"
  }],
  "prId": 1207
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "We can use breeze's norm directly, e.g., `norm(v, 2.0)`.\n",
    "commit": "78c15d3eb9a6003180a08cb53688455ff82d4463",
    "createdAt": "2014-08-03T06:30:25Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Normalizes samples individually to unit L^n norm\n+ *\n+ * @param n  L^2 norm by default. Normalization in L^n space.\n+ */\n+@DeveloperApi\n+class Normalizer(n: Int) extends VectorTransformer with Serializable {\n+\n+  def this() = this(2)\n+\n+  require(n > 0)\n+\n+  /**\n+   * Applies unit length normalization on a vector.\n+   *\n+   * @param vector vector to be normalized.\n+   * @return normalized vector. If all the elements in vector are zeros, it will return as it.\n+   */\n+  override def transform(vector: Vector): Vector = {\n+    var sum = 0.0\n+    vector.toBreeze.activeIterator.foreach {"
  }],
  "prId": 1207
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Should be faster if we branch on the vector type here. If the vector is sparse, we only need to copy its value array. Also, the `activeIterator` is not very efficient.\n",
    "commit": "78c15d3eb9a6003180a08cb53688455ff82d4463",
    "createdAt": "2014-08-03T06:30:37Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Normalizes samples individually to unit L^n norm\n+ *\n+ * @param n  L^2 norm by default. Normalization in L^n space.\n+ */\n+@DeveloperApi\n+class Normalizer(n: Int) extends VectorTransformer with Serializable {\n+\n+  def this() = this(2)\n+\n+  require(n > 0)\n+\n+  /**\n+   * Applies unit length normalization on a vector.\n+   *\n+   * @param vector vector to be normalized.\n+   * @return normalized vector. If all the elements in vector are zeros, it will return as it.\n+   */\n+  override def transform(vector: Vector): Vector = {\n+    var sum = 0.0\n+    vector.toBreeze.activeIterator.foreach {\n+      case (i, value) => sum += Math.pow(Math.abs(value), n)\n+    }\n+\n+    val output = vector.toBreeze.copy"
  }],
  "prId": 1207
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "For sparse vectors, `apply(Int)` is implemented using binary search. So we should operate on the values array directly, e.g., `IDF.scala`.\n",
    "commit": "78c15d3eb9a6003180a08cb53688455ff82d4463",
    "createdAt": "2014-08-03T06:30:41Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Normalizes samples individually to unit L^n norm\n+ *\n+ * @param n  L^2 norm by default. Normalization in L^n space.\n+ */\n+@DeveloperApi\n+class Normalizer(n: Int) extends VectorTransformer with Serializable {\n+\n+  def this() = this(2)\n+\n+  require(n > 0)\n+\n+  /**\n+   * Applies unit length normalization on a vector.\n+   *\n+   * @param vector vector to be normalized.\n+   * @return normalized vector. If all the elements in vector are zeros, it will return as it.\n+   */\n+  override def transform(vector: Vector): Vector = {\n+    var sum = 0.0\n+    vector.toBreeze.activeIterator.foreach {\n+      case (i, value) => sum += Math.pow(Math.abs(value), n)\n+    }\n+\n+    val output = vector.toBreeze.copy\n+    if (sum != 0.0) {\n+      sum = Math.pow(sum, 1.0 / n)\n+      output.activeIterator.foreach {\n+        case (i, value) => output(i) = value / sum"
  }],
  "prId": 1207
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "There is no `L_{-inf}`. We can remove this option. `min(abs(vector))` is usually zero for most datasets.\n",
    "commit": "78c15d3eb9a6003180a08cb53688455ff82d4463",
    "createdAt": "2014-08-04T02:26:52Z",
    "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import breeze.linalg.{DenseVector => BDV, SparseVector => BSV}\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Normalizes samples individually to unit L^p norm\n+ *\n+ * For any 1 <= p < Double.Infinity, normalizes samples using sum(abs(vector).^p)^(1/p) as norm.\n+ * For p = Double.Infinity, max(abs(vector)) will be used as norm for normalization.\n+ * For p = Double.NegativeInfinity, min(abs(vector)) will be used as norm for normalization."
  }, {
    "author": {
      "login": "dbtsai"
    },
    "body": "matlab has L_{-inf}  http://www.mathworks.com/help/matlab/ref/norm.html for min(abs(X)). I agree that it's not useful for sparse data. Gonna remove it.\n",
    "commit": "78c15d3eb9a6003180a08cb53688455ff82d4463",
    "createdAt": "2014-08-04T02:37:29Z",
    "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import breeze.linalg.{DenseVector => BDV, SparseVector => BSV}\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Normalizes samples individually to unit L^p norm\n+ *\n+ * For any 1 <= p < Double.Infinity, normalizes samples using sum(abs(vector).^p)^(1/p) as norm.\n+ * For p = Double.Infinity, max(abs(vector)) will be used as norm for normalization.\n+ * For p = Double.NegativeInfinity, min(abs(vector)) will be used as norm for normalization."
  }],
  "prId": 1207
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`Double.PositiveInfinity`\n",
    "commit": "78c15d3eb9a6003180a08cb53688455ff82d4463",
    "createdAt": "2014-08-04T02:27:28Z",
    "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import breeze.linalg.{DenseVector => BDV, SparseVector => BSV}\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Normalizes samples individually to unit L^p norm\n+ *\n+ * For any 1 <= p < Double.Infinity, normalizes samples using sum(abs(vector).^p)^(1/p) as norm.\n+ * For p = Double.Infinity, max(abs(vector)) will be used as norm for normalization."
  }],
  "prId": 1207
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`L^p` -> `L^p^` (to make it show up correctly in the generated doc)\n",
    "commit": "78c15d3eb9a6003180a08cb53688455ff82d4463",
    "createdAt": "2014-08-04T02:33:49Z",
    "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import breeze.linalg.{DenseVector => BDV, SparseVector => BSV}\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Normalizes samples individually to unit L^p norm\n+ *\n+ * For any 1 <= p < Double.Infinity, normalizes samples using sum(abs(vector).^p)^(1/p) as norm.\n+ * For p = Double.Infinity, max(abs(vector)) will be used as norm for normalization.\n+ * For p = Double.NegativeInfinity, min(abs(vector)) will be used as norm for normalization.\n+ *\n+ * @param p Normalization in L^p space, p = 2 by default."
  }],
  "prId": 1207
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`distance` -> `nrm` or `norm`?\n",
    "commit": "78c15d3eb9a6003180a08cb53688455ff82d4463",
    "createdAt": "2014-08-04T02:35:42Z",
    "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import breeze.linalg.{DenseVector => BDV, SparseVector => BSV}\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Normalizes samples individually to unit L^p norm\n+ *\n+ * For any 1 <= p < Double.Infinity, normalizes samples using sum(abs(vector).^p)^(1/p) as norm.\n+ * For p = Double.Infinity, max(abs(vector)) will be used as norm for normalization.\n+ * For p = Double.NegativeInfinity, min(abs(vector)) will be used as norm for normalization.\n+ *\n+ * @param p Normalization in L^p space, p = 2 by default.\n+ */\n+@DeveloperApi\n+class Normalizer(p: Double) extends VectorTransformer {\n+\n+  def this() = this(2)\n+\n+  require(p >= 1.0 || p == Double.NegativeInfinity)\n+\n+  /**\n+   * Applies unit length normalization on a vector.\n+   *\n+   * @param vector vector to be normalized.\n+   * @return normalized vector. If the norm of the input is zero, it will return the input vector.\n+   */\n+  override def transform(vector: Vector): Vector = {\n+    var distance = 0.0"
  }],
  "prId": 1207
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`=> {` -> `=>` and remove the closing `}` below\n",
    "commit": "78c15d3eb9a6003180a08cb53688455ff82d4463",
    "createdAt": "2014-08-04T02:43:27Z",
    "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import breeze.linalg.{DenseVector => BDV, SparseVector => BSV}\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Normalizes samples individually to unit L^p norm\n+ *\n+ * For any 1 <= p < Double.Infinity, normalizes samples using sum(abs(vector).^p)^(1/p) as norm.\n+ * For p = Double.Infinity, max(abs(vector)) will be used as norm for normalization.\n+ * For p = Double.NegativeInfinity, min(abs(vector)) will be used as norm for normalization.\n+ *\n+ * @param p Normalization in L^p space, p = 2 by default.\n+ */\n+@DeveloperApi\n+class Normalizer(p: Double) extends VectorTransformer {\n+\n+  def this() = this(2)\n+\n+  require(p >= 1.0 || p == Double.NegativeInfinity)\n+\n+  /**\n+   * Applies unit length normalization on a vector.\n+   *\n+   * @param vector vector to be normalized.\n+   * @return normalized vector. If the norm of the input is zero, it will return the input vector.\n+   */\n+  override def transform(vector: Vector): Vector = {\n+    var distance = 0.0\n+\n+    if (p >= 1.0) {\n+      distance = vector.toBreeze.norm(p)\n+    } else if (p == Double.NegativeInfinity) {\n+      // Breeze norm doesn't work when p = NegativeInfinity\n+      var min = Double.PositiveInfinity\n+      vector.toBreeze match {\n+        case dv: BDV[Double] => {\n+          var i = 0\n+          while (i < dv.length) {\n+            if (Math.abs(dv(i)) < min) min = Math.abs(Math.abs(dv(i)))\n+            i += 1\n+          }\n+        }\n+        case sv: BSV[Double] => {\n+          if (sv.index.length != sv.length) {\n+            // Find a zero element in sparse vector, don't need going into the loop.\n+            min = 0.0\n+          } else {\n+            var i = 0\n+            while (i < sv.index.length) {\n+              if (Math.abs(sv.data(i)) < min) min = Math.abs(Math.abs(sv.data(i)))\n+              i += 1\n+            }\n+          }\n+        }\n+        case v: Any =>\n+          throw new IllegalArgumentException(\"Do not support vector type \" + v.getClass)\n+      }\n+      distance = if (min != Double.PositiveInfinity) min else 0.0\n+    }\n+\n+    if (distance != 0.0) {\n+      // For dense vector, we've to allocate new memory for new output vector.\n+      // However, for sparse vector, the `index` array will not be changed,\n+      // so we can re-use it to save memory.\n+      vector.toBreeze match {\n+        case dv: BDV[Double] => Vectors.fromBreeze(dv :/ distance)\n+        case sv: BSV[Double] => {"
  }],
  "prId": 1207
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`^` must be used in pairs in order to show up correctly in the generated doc\n",
    "commit": "78c15d3eb9a6003180a08cb53688455ff82d4463",
    "createdAt": "2014-08-04T03:00:29Z",
    "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import breeze.linalg.{DenseVector => BDV, SparseVector => BSV}\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Normalizes samples individually to unit L^p norm\n+ *\n+ * For any 1 <= p < Double.Infinity, normalizes samples using sum(abs(vector).^p)^(1/p) as norm."
  }],
  "prId": 1207
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`^p^` (fun to read ^o^)\n",
    "commit": "78c15d3eb9a6003180a08cb53688455ff82d4463",
    "createdAt": "2014-08-04T03:56:17Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import breeze.linalg.{DenseVector => BDV, SparseVector => BSV}\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Normalizes samples individually to unit L^p^ norm",
    "line": 27
  }, {
    "author": {
      "login": "dbtsai"
    },
    "body": "lol...\n",
    "commit": "78c15d3eb9a6003180a08cb53688455ff82d4463",
    "createdAt": "2014-08-04T04:02:55Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import breeze.linalg.{DenseVector => BDV, SparseVector => BSV}\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Normalizes samples individually to unit L^p^ norm",
    "line": 27
  }],
  "prId": 1207
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "minor: `: Any` can be removed\n",
    "commit": "78c15d3eb9a6003180a08cb53688455ff82d4463",
    "createdAt": "2014-08-04T03:56:19Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.mllib.feature\n+\n+import breeze.linalg.{DenseVector => BDV, SparseVector => BSV}\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.mllib.linalg.{Vector, Vectors}\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Normalizes samples individually to unit L^p^ norm\n+ *\n+ * For any 1 <= p < Double.PositiveInfinity, normalizes samples using\n+ * sum(abs(vector).^p^)^(1/p)^ as norm.\n+ *\n+ * For p = Double.PositiveInfinity, max(abs(vector)) will be used as norm for normalization.\n+ *\n+ * @param p Normalization in L^p^ space, p = 2 by default.\n+ */\n+@DeveloperApi\n+class Normalizer(p: Double) extends VectorTransformer {\n+\n+  def this() = this(2)\n+\n+  require(p >= 1.0)\n+\n+  /**\n+   * Applies unit length normalization on a vector.\n+   *\n+   * @param vector vector to be normalized.\n+   * @return normalized vector. If the norm of the input is zero, it will return the input vector.\n+   */\n+  override def transform(vector: Vector): Vector = {\n+    var norm = vector.toBreeze.norm(p)\n+\n+    if (norm != 0.0) {\n+      // For dense vector, we've to allocate new memory for new output vector.\n+      // However, for sparse vector, the `index` array will not be changed,\n+      // so we can re-use it to save memory.\n+      vector.toBreeze match {\n+        case dv: BDV[Double] => Vectors.fromBreeze(dv :/ norm)\n+        case sv: BSV[Double] =>\n+          val output = new BSV[Double](sv.index, sv.data.clone(), sv.length)\n+          var i = 0\n+          while (i < output.data.length) {\n+            output.data(i) /= norm\n+            i += 1\n+          }\n+          Vectors.fromBreeze(output)\n+        case v: Any =>"
  }],
  "prId": 1207
}]