[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "extra newlines\n",
    "commit": "9bd2922691f4303bc28d5150fb43e5aa5e81ac9c",
    "createdAt": "2015-05-21T22:17:49Z",
    "diffHunk": "@@ -50,10 +59,22 @@ class HashingTF(override val uid: String) extends UnaryTransformer[Iterable[_],\n   /** @group setParam */\n   def setNumFeatures(value: Int): this.type = set(numFeatures, value)\n \n-  override protected def createTransformFunc: Iterable[_] => Vector = {\n+"
  }],
  "prId": 6308
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "\"array type\" --> \"ArrayType\"\n",
    "commit": "9bd2922691f4303bc28d5150fb43e5aa5e81ac9c",
    "createdAt": "2015-05-21T22:17:50Z",
    "diffHunk": "@@ -50,10 +59,22 @@ class HashingTF(override val uid: String) extends UnaryTransformer[Iterable[_],\n   /** @group setParam */\n   def setNumFeatures(value: Int): this.type = set(numFeatures, value)\n \n-  override protected def createTransformFunc: Iterable[_] => Vector = {\n+\n+\n+  override def transform(dataset: DataFrame): DataFrame = {\n+    val outputSchema = transformSchema(dataset.schema)\n     val hashingTF = new feature.HashingTF($(numFeatures))\n-    hashingTF.transform\n+    val t = udf { terms: Seq[_] => hashingTF.transform(terms) }\n+    val metadata = outputSchema($(outputCol)).metadata\n+    dataset.select(col(\"*\"), t(col($(inputCol))).as($(outputCol), metadata))\n   }\n \n-  override protected def outputDataType: DataType = new VectorUDT()\n+  override def transformSchema(schema: StructType): StructType = {\n+    val inputType = schema($(inputCol)).dataType\n+    require(inputType.isInstanceOf[ArrayType],\n+      s\"The input column must be array type, but got $inputType.\")"
  }],
  "prId": 6308
}]