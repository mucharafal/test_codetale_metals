[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Import this inside the class.\n",
    "commit": "8f8e74797c8699881741be2d492560e4c49ebb7f",
    "createdAt": "2016-02-12T01:41:02Z",
    "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.hadoop.fs.Path\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.feature.StratifiedSampling.StratifiedSamplingWriter"
  }],
  "prId": 11102
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Add `@see` to link to `DataFrame.sampleBy` so we don't need to document the behavior for keys not appearing in the map.\n",
    "commit": "8f8e74797c8699881741be2d492560e4c49ebb7f",
    "createdAt": "2016-02-12T01:41:03Z",
    "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.hadoop.fs.Path\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.feature.StratifiedSampling.StratifiedSamplingWriter\n+import org.apache.spark.ml.param.ParamMap\n+import org.apache.spark.ml.param.shared._\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Row}\n+import org.apache.spark.sql.types.{StringType, StructType}\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * :: Experimental ::\n+ *\n+ * Stratified sampling on the DataFrame according to the keys in a specific label column. User\n+ * can set 'fraction' to set different sampling rate for each key.\n+ *\n+ * @param withReplacement can elements be sampled multiple times (replaced when sampled out)\n+ * @param fraction expected size of the sample as a fraction of the items\n+ *  without replacement: probability that each element is chosen; fraction must be [0, 1]\n+ *  with replacement: expected number of times each element is chosen; fraction must be >= 0\n+ */"
  }],
  "prId": 11102
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "- `StratifiedSampler`\n- space after `private`\n",
    "commit": "8f8e74797c8699881741be2d492560e4c49ebb7f",
    "createdAt": "2016-02-12T01:41:04Z",
    "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.hadoop.fs.Path\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.feature.StratifiedSampling.StratifiedSamplingWriter\n+import org.apache.spark.ml.param.ParamMap\n+import org.apache.spark.ml.param.shared._\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Row}\n+import org.apache.spark.sql.types.{StringType, StructType}\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * :: Experimental ::\n+ *\n+ * Stratified sampling on the DataFrame according to the keys in a specific label column. User\n+ * can set 'fraction' to set different sampling rate for each key.\n+ *\n+ * @param withReplacement can elements be sampled multiple times (replaced when sampled out)\n+ * @param fraction expected size of the sample as a fraction of the items\n+ *  without replacement: probability that each element is chosen; fraction must be [0, 1]\n+ *  with replacement: expected number of times each element is chosen; fraction must be >= 0\n+ */\n+@Experimental\n+final class StratifiedSampling private("
  }],
  "prId": 11102
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Add a Java friendly constructor. `Map` is from Scala.\n",
    "commit": "8f8e74797c8699881741be2d492560e4c49ebb7f",
    "createdAt": "2016-02-12T01:41:06Z",
    "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.hadoop.fs.Path\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.feature.StratifiedSampling.StratifiedSamplingWriter\n+import org.apache.spark.ml.param.ParamMap\n+import org.apache.spark.ml.param.shared._\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Row}\n+import org.apache.spark.sql.types.{StringType, StructType}\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * :: Experimental ::\n+ *\n+ * Stratified sampling on the DataFrame according to the keys in a specific label column. User\n+ * can set 'fraction' to set different sampling rate for each key.\n+ *\n+ * @param withReplacement can elements be sampled multiple times (replaced when sampled out)\n+ * @param fraction expected size of the sample as a fraction of the items\n+ *  without replacement: probability that each element is chosen; fraction must be [0, 1]\n+ *  with replacement: expected number of times each element is chosen; fraction must be >= 0\n+ */\n+@Experimental\n+final class StratifiedSampling private(\n+    override val uid: String,\n+    val withReplacement: Boolean,\n+    val fraction: Map[String, Double])\n+  extends Transformer with HasLabelCol with HasSeed with DefaultParamsWritable {\n+\n+  @Since(\"2.0.0\")\n+  def this(withReplacement: Boolean, fraction: Map[String, Double]) ="
  }],
  "prId": 11102
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "This is not necessary. We assign a fixed seed based on the hash value of the class name.\n",
    "commit": "8f8e74797c8699881741be2d492560e4c49ebb7f",
    "createdAt": "2016-02-12T01:41:08Z",
    "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.hadoop.fs.Path\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.feature.StratifiedSampling.StratifiedSamplingWriter\n+import org.apache.spark.ml.param.ParamMap\n+import org.apache.spark.ml.param.shared._\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Row}\n+import org.apache.spark.sql.types.{StringType, StructType}\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * :: Experimental ::\n+ *\n+ * Stratified sampling on the DataFrame according to the keys in a specific label column. User\n+ * can set 'fraction' to set different sampling rate for each key.\n+ *\n+ * @param withReplacement can elements be sampled multiple times (replaced when sampled out)\n+ * @param fraction expected size of the sample as a fraction of the items\n+ *  without replacement: probability that each element is chosen; fraction must be [0, 1]\n+ *  with replacement: expected number of times each element is chosen; fraction must be >= 0\n+ */\n+@Experimental\n+final class StratifiedSampling private(\n+    override val uid: String,\n+    val withReplacement: Boolean,\n+    val fraction: Map[String, Double])\n+  extends Transformer with HasLabelCol with HasSeed with DefaultParamsWritable {\n+\n+  @Since(\"2.0.0\")\n+  def this(withReplacement: Boolean, fraction: Map[String, Double]) =\n+    this(Identifiable.randomUID(\"stratifiedSampling\"), withReplacement, fraction)\n+\n+  /** @group setParam */\n+  @Since(\"2.0.0\")\n+  def setSeed(value: Long): this.type = set(seed, value)\n+\n+  /** @group setParam */\n+  @Since(\"2.0.0\")\n+  def setLabel(value: String): this.type = set(labelCol, value)\n+\n+  setDefault(seed -> Utils.random.nextLong)"
  }],
  "prId": 11102
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "turn on logging\n",
    "commit": "8f8e74797c8699881741be2d492560e4c49ebb7f",
    "createdAt": "2016-02-12T01:41:09Z",
    "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.hadoop.fs.Path\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.feature.StratifiedSampling.StratifiedSamplingWriter\n+import org.apache.spark.ml.param.ParamMap\n+import org.apache.spark.ml.param.shared._\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Row}\n+import org.apache.spark.sql.types.{StringType, StructType}\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * :: Experimental ::\n+ *\n+ * Stratified sampling on the DataFrame according to the keys in a specific label column. User\n+ * can set 'fraction' to set different sampling rate for each key.\n+ *\n+ * @param withReplacement can elements be sampled multiple times (replaced when sampled out)\n+ * @param fraction expected size of the sample as a fraction of the items\n+ *  without replacement: probability that each element is chosen; fraction must be [0, 1]\n+ *  with replacement: expected number of times each element is chosen; fraction must be >= 0\n+ */\n+@Experimental\n+final class StratifiedSampling private(\n+    override val uid: String,\n+    val withReplacement: Boolean,\n+    val fraction: Map[String, Double])\n+  extends Transformer with HasLabelCol with HasSeed with DefaultParamsWritable {\n+\n+  @Since(\"2.0.0\")\n+  def this(withReplacement: Boolean, fraction: Map[String, Double]) =\n+    this(Identifiable.randomUID(\"stratifiedSampling\"), withReplacement, fraction)\n+\n+  /** @group setParam */\n+  @Since(\"2.0.0\")\n+  def setSeed(value: Long): this.type = set(seed, value)\n+\n+  /** @group setParam */\n+  @Since(\"2.0.0\")\n+  def setLabel(value: String): this.type = set(labelCol, value)\n+\n+  setDefault(seed -> Utils.random.nextLong)\n+\n+  @Since(\"2.0.0\")\n+  override def transform(data: DataFrame): DataFrame = {\n+    transformSchema(data.schema)"
  }],
  "prId": 11102
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`DataFrame` has `sampleBy` implemented. We can just use that.\n",
    "commit": "8f8e74797c8699881741be2d492560e4c49ebb7f",
    "createdAt": "2016-02-12T01:41:11Z",
    "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.hadoop.fs.Path\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.feature.StratifiedSampling.StratifiedSamplingWriter\n+import org.apache.spark.ml.param.ParamMap\n+import org.apache.spark.ml.param.shared._\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Row}\n+import org.apache.spark.sql.types.{StringType, StructType}\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * :: Experimental ::\n+ *\n+ * Stratified sampling on the DataFrame according to the keys in a specific label column. User\n+ * can set 'fraction' to set different sampling rate for each key.\n+ *\n+ * @param withReplacement can elements be sampled multiple times (replaced when sampled out)\n+ * @param fraction expected size of the sample as a fraction of the items\n+ *  without replacement: probability that each element is chosen; fraction must be [0, 1]\n+ *  with replacement: expected number of times each element is chosen; fraction must be >= 0\n+ */\n+@Experimental\n+final class StratifiedSampling private(\n+    override val uid: String,\n+    val withReplacement: Boolean,\n+    val fraction: Map[String, Double])\n+  extends Transformer with HasLabelCol with HasSeed with DefaultParamsWritable {\n+\n+  @Since(\"2.0.0\")\n+  def this(withReplacement: Boolean, fraction: Map[String, Double]) =\n+    this(Identifiable.randomUID(\"stratifiedSampling\"), withReplacement, fraction)\n+\n+  /** @group setParam */\n+  @Since(\"2.0.0\")\n+  def setSeed(value: Long): this.type = set(seed, value)\n+\n+  /** @group setParam */\n+  @Since(\"2.0.0\")\n+  def setLabel(value: String): this.type = set(labelCol, value)\n+\n+  setDefault(seed -> Utils.random.nextLong)\n+\n+  @Since(\"2.0.0\")\n+  override def transform(data: DataFrame): DataFrame = {\n+    transformSchema(data.schema)\n+    val schema = data.schema\n+    val colId = schema.fieldIndex($(labelCol))\n+    val result = data.rdd.map(r => (r.get(colId), r))"
  }],
  "prId": 11102
}]