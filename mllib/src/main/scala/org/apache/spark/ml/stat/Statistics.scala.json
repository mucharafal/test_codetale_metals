[{
  "comments": [{
    "author": {
      "login": "imatiach-msft"
    },
    "body": "minor terminology comment: should this be ML instead of MLLib?  I understand this is for the new ML vector types?",
    "commit": "7c540e5080aa10894d33cfa9924b65bd551375ab",
    "createdAt": "2017-03-01T17:42:01Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.stat\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.linalg.{SQLDataTypes, Vector}\n+import org.apache.spark.mllib.linalg.{Vectors => OldVectors}\n+import org.apache.spark.mllib.stat.{Statistics => OldStatistics}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.types.{StructField, StructType}\n+\n+/**\n+ * API for statistical functions in MLlib, compatible with Dataframes and Datasets.\n+ *\n+ * The functions in this package generalize the functions in [[org.apache.spark.sql.Dataset.stat]]\n+ * to MLlib's Vector types."
  }, {
    "author": {
      "login": "thunterdb"
    },
    "body": "I will use `spark.ml` which is the most correct terminology.",
    "commit": "7c540e5080aa10894d33cfa9924b65bd551375ab",
    "createdAt": "2017-03-15T23:12:49Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.stat\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.linalg.{SQLDataTypes, Vector}\n+import org.apache.spark.mllib.linalg.{Vectors => OldVectors}\n+import org.apache.spark.mllib.stat.{Statistics => OldStatistics}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.types.{StructField, StructType}\n+\n+/**\n+ * API for statistical functions in MLlib, compatible with Dataframes and Datasets.\n+ *\n+ * The functions in this package generalize the functions in [[org.apache.spark.sql.Dataset.stat]]\n+ * to MLlib's Vector types."
  }],
  "prId": 17108
}, {
  "comments": [{
    "author": {
      "login": "imatiach-msft"
    },
    "body": "very minor: \"Sentence case\" params, as in \"A dataset...\", \"The name...\" ",
    "commit": "7c540e5080aa10894d33cfa9924b65bd551375ab",
    "createdAt": "2017-03-01T17:43:33Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.stat\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.linalg.{SQLDataTypes, Vector}\n+import org.apache.spark.mllib.linalg.{Vectors => OldVectors}\n+import org.apache.spark.mllib.stat.{Statistics => OldStatistics}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.types.{StructField, StructType}\n+\n+/**\n+ * API for statistical functions in MLlib, compatible with Dataframes and Datasets.\n+ *\n+ * The functions in this package generalize the functions in [[org.apache.spark.sql.Dataset.stat]]\n+ * to MLlib's Vector types.\n+ */\n+@Since(\"2.2.0\")\n+object Statistics {\n+\n+  /**\n+   * Compute the correlation matrix for the input RDD of Vectors using the specified method.\n+   * Methods currently supported: `pearson` (default), `spearman`.\n+   *\n+   * @param dataset a dataset or a dataframe"
  }, {
    "author": {
      "login": "imatiach-msft"
    },
    "body": "it seems there are inconsistencies in a lot of comments.  I wish we had something like scalastyle for comments...",
    "commit": "7c540e5080aa10894d33cfa9924b65bd551375ab",
    "createdAt": "2017-03-01T17:56:13Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.stat\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.linalg.{SQLDataTypes, Vector}\n+import org.apache.spark.mllib.linalg.{Vectors => OldVectors}\n+import org.apache.spark.mllib.stat.{Statistics => OldStatistics}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.types.{StructField, StructType}\n+\n+/**\n+ * API for statistical functions in MLlib, compatible with Dataframes and Datasets.\n+ *\n+ * The functions in this package generalize the functions in [[org.apache.spark.sql.Dataset.stat]]\n+ * to MLlib's Vector types.\n+ */\n+@Since(\"2.2.0\")\n+object Statistics {\n+\n+  /**\n+   * Compute the correlation matrix for the input RDD of Vectors using the specified method.\n+   * Methods currently supported: `pearson` (default), `spearman`.\n+   *\n+   * @param dataset a dataset or a dataframe"
  }, {
    "author": {
      "login": "thunterdb"
    },
    "body": "oh yes, thank you. I am correcting the other instances of course.",
    "commit": "7c540e5080aa10894d33cfa9924b65bd551375ab",
    "createdAt": "2017-03-15T23:15:04Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.stat\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.linalg.{SQLDataTypes, Vector}\n+import org.apache.spark.mllib.linalg.{Vectors => OldVectors}\n+import org.apache.spark.mllib.stat.{Statistics => OldStatistics}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.types.{StructField, StructType}\n+\n+/**\n+ * API for statistical functions in MLlib, compatible with Dataframes and Datasets.\n+ *\n+ * The functions in this package generalize the functions in [[org.apache.spark.sql.Dataset.stat]]\n+ * to MLlib's Vector types.\n+ */\n+@Since(\"2.2.0\")\n+object Statistics {\n+\n+  /**\n+   * Compute the correlation matrix for the input RDD of Vectors using the specified method.\n+   * Methods currently supported: `pearson` (default), `spearman`.\n+   *\n+   * @param dataset a dataset or a dataframe"
  }],
  "prId": 17108
}, {
  "comments": [{
    "author": {
      "login": "imatiach-msft"
    },
    "body": "remove commented out code (?)",
    "commit": "7c540e5080aa10894d33cfa9924b65bd551375ab",
    "createdAt": "2017-03-01T17:45:09Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.stat\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.linalg.{SQLDataTypes, Vector}\n+import org.apache.spark.mllib.linalg.{Vectors => OldVectors}\n+import org.apache.spark.mllib.stat.{Statistics => OldStatistics}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.types.{StructField, StructType}\n+\n+/**\n+ * API for statistical functions in MLlib, compatible with Dataframes and Datasets.\n+ *\n+ * The functions in this package generalize the functions in [[org.apache.spark.sql.Dataset.stat]]\n+ * to MLlib's Vector types.\n+ */\n+@Since(\"2.2.0\")\n+object Statistics {\n+\n+  /**\n+   * Compute the correlation matrix for the input RDD of Vectors using the specified method.\n+   * Methods currently supported: `pearson` (default), `spearman`.\n+   *\n+   * @param dataset a dataset or a dataframe\n+   * @param column the name of the column of vectors for which the correlation coefficient needs\n+   *               to be computed. This must be a column of the dataset, and it must contain\n+   *               Vector objects.\n+   * @param method String specifying the method to use for computing correlation.\n+   *               Supported: `pearson` (default), `spearman`\n+   * @return A dataframe that contains the correlation matrix of the column of vectors. This\n+   *         dataframe contains a single row and a single column of name\n+   *         '$METHODNAME($COLUMN)'.\n+   * @throws IllegalArgumentException if the column is not a valid column in the dataset, or if\n+   *                                  the content of this column is not of type Vector.\n+   *\n+   *  Here is how to access the correlation coefficient:\n+   *  {{{\n+   *    val data: Dataset[Vector] = ...\n+   *    val Row(coeff: Matrix) = Statistics.corr(data, \"value\").head\n+   *    // coeff now contains the Pearson correlation matrix.\n+   *  }}}\n+   *\n+   * @note For Spearman, a rank correlation, we need to create an RDD[Double] for each column\n+   * and sort it in order to retrieve the ranks and then join the columns back into an RDD[Vector],\n+   * which is fairly costly. Cache the input RDD before calling corr with `method = \"spearman\"` to\n+   * avoid recomputing the common lineage.\n+   */\n+  // TODO: how do we handle missing values?\n+  @Since(\"2.2.0\")\n+  def corr(dataset: Dataset[_], column: String, method: String): DataFrame = {\n+    val rdd = dataset.select(column).rdd.map {\n+      case Row(v: Vector) => OldVectors.fromML(v)\n+//      case r: GenericRowWithSchema => OldVectors.fromML(r.getAs[Vector](0))"
  }],
  "prId": 17108
}, {
  "comments": [{
    "author": {
      "login": "imatiach-msft"
    },
    "body": "minor comment: ideally shouldn't you check for collisions prior to creating the name - eg add a suffix such as \"_2\" or _i if the column name already exists",
    "commit": "7c540e5080aa10894d33cfa9924b65bd551375ab",
    "createdAt": "2017-03-01T17:47:27Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.stat\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.linalg.{SQLDataTypes, Vector}\n+import org.apache.spark.mllib.linalg.{Vectors => OldVectors}\n+import org.apache.spark.mllib.stat.{Statistics => OldStatistics}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.types.{StructField, StructType}\n+\n+/**\n+ * API for statistical functions in MLlib, compatible with Dataframes and Datasets.\n+ *\n+ * The functions in this package generalize the functions in [[org.apache.spark.sql.Dataset.stat]]\n+ * to MLlib's Vector types.\n+ */\n+@Since(\"2.2.0\")\n+object Statistics {\n+\n+  /**\n+   * Compute the correlation matrix for the input RDD of Vectors using the specified method.\n+   * Methods currently supported: `pearson` (default), `spearman`.\n+   *\n+   * @param dataset a dataset or a dataframe\n+   * @param column the name of the column of vectors for which the correlation coefficient needs\n+   *               to be computed. This must be a column of the dataset, and it must contain\n+   *               Vector objects.\n+   * @param method String specifying the method to use for computing correlation.\n+   *               Supported: `pearson` (default), `spearman`\n+   * @return A dataframe that contains the correlation matrix of the column of vectors. This\n+   *         dataframe contains a single row and a single column of name\n+   *         '$METHODNAME($COLUMN)'.\n+   * @throws IllegalArgumentException if the column is not a valid column in the dataset, or if\n+   *                                  the content of this column is not of type Vector.\n+   *\n+   *  Here is how to access the correlation coefficient:\n+   *  {{{\n+   *    val data: Dataset[Vector] = ...\n+   *    val Row(coeff: Matrix) = Statistics.corr(data, \"value\").head\n+   *    // coeff now contains the Pearson correlation matrix.\n+   *  }}}\n+   *\n+   * @note For Spearman, a rank correlation, we need to create an RDD[Double] for each column\n+   * and sort it in order to retrieve the ranks and then join the columns back into an RDD[Vector],\n+   * which is fairly costly. Cache the input RDD before calling corr with `method = \"spearman\"` to\n+   * avoid recomputing the common lineage.\n+   */\n+  // TODO: how do we handle missing values?\n+  @Since(\"2.2.0\")\n+  def corr(dataset: Dataset[_], column: String, method: String): DataFrame = {\n+    val rdd = dataset.select(column).rdd.map {\n+      case Row(v: Vector) => OldVectors.fromML(v)\n+//      case r: GenericRowWithSchema => OldVectors.fromML(r.getAs[Vector](0))\n+    }\n+    val oldM = OldStatistics.corr(rdd, method)\n+    val name = s\"$method($column)\"\n+    val schema = StructType(Array(StructField(name, SQLDataTypes.MatrixType, nullable = true)))"
  }, {
    "author": {
      "login": "imatiach-msft"
    },
    "body": "ideally this would be an infrastructure-level method that just finds a new column name and would be reusable in other code.  I don't believe something like this exists.",
    "commit": "7c540e5080aa10894d33cfa9924b65bd551375ab",
    "createdAt": "2017-03-01T17:52:31Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.stat\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.linalg.{SQLDataTypes, Vector}\n+import org.apache.spark.mllib.linalg.{Vectors => OldVectors}\n+import org.apache.spark.mllib.stat.{Statistics => OldStatistics}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.types.{StructField, StructType}\n+\n+/**\n+ * API for statistical functions in MLlib, compatible with Dataframes and Datasets.\n+ *\n+ * The functions in this package generalize the functions in [[org.apache.spark.sql.Dataset.stat]]\n+ * to MLlib's Vector types.\n+ */\n+@Since(\"2.2.0\")\n+object Statistics {\n+\n+  /**\n+   * Compute the correlation matrix for the input RDD of Vectors using the specified method.\n+   * Methods currently supported: `pearson` (default), `spearman`.\n+   *\n+   * @param dataset a dataset or a dataframe\n+   * @param column the name of the column of vectors for which the correlation coefficient needs\n+   *               to be computed. This must be a column of the dataset, and it must contain\n+   *               Vector objects.\n+   * @param method String specifying the method to use for computing correlation.\n+   *               Supported: `pearson` (default), `spearman`\n+   * @return A dataframe that contains the correlation matrix of the column of vectors. This\n+   *         dataframe contains a single row and a single column of name\n+   *         '$METHODNAME($COLUMN)'.\n+   * @throws IllegalArgumentException if the column is not a valid column in the dataset, or if\n+   *                                  the content of this column is not of type Vector.\n+   *\n+   *  Here is how to access the correlation coefficient:\n+   *  {{{\n+   *    val data: Dataset[Vector] = ...\n+   *    val Row(coeff: Matrix) = Statistics.corr(data, \"value\").head\n+   *    // coeff now contains the Pearson correlation matrix.\n+   *  }}}\n+   *\n+   * @note For Spearman, a rank correlation, we need to create an RDD[Double] for each column\n+   * and sort it in order to retrieve the ranks and then join the columns back into an RDD[Vector],\n+   * which is fairly costly. Cache the input RDD before calling corr with `method = \"spearman\"` to\n+   * avoid recomputing the common lineage.\n+   */\n+  // TODO: how do we handle missing values?\n+  @Since(\"2.2.0\")\n+  def corr(dataset: Dataset[_], column: String, method: String): DataFrame = {\n+    val rdd = dataset.select(column).rdd.map {\n+      case Row(v: Vector) => OldVectors.fromML(v)\n+//      case r: GenericRowWithSchema => OldVectors.fromML(r.getAs[Vector](0))\n+    }\n+    val oldM = OldStatistics.corr(rdd, method)\n+    val name = s\"$method($column)\"\n+    val schema = StructType(Array(StructField(name, SQLDataTypes.MatrixType, nullable = true)))"
  }],
  "prId": 17108
}, {
  "comments": [{
    "author": {
      "login": "imatiach-msft"
    },
    "body": "this is more a comment for the internal implementation of the pearson/spearman calculation, I don't think it should be at this level (maybe moved into the MLLib code?).  I think they should just ignore the rows where one of the columns compared have a missing/nan value and log a warning (but only once) when they encounter this -- if all are missing, we just assign a 0 score.\r\n\r\n",
    "commit": "7c540e5080aa10894d33cfa9924b65bd551375ab",
    "createdAt": "2017-03-01T18:08:28Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.stat\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.linalg.{SQLDataTypes, Vector}\n+import org.apache.spark.mllib.linalg.{Vectors => OldVectors}\n+import org.apache.spark.mllib.stat.{Statistics => OldStatistics}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.types.{StructField, StructType}\n+\n+/**\n+ * API for statistical functions in MLlib, compatible with Dataframes and Datasets.\n+ *\n+ * The functions in this package generalize the functions in [[org.apache.spark.sql.Dataset.stat]]\n+ * to MLlib's Vector types.\n+ */\n+@Since(\"2.2.0\")\n+object Statistics {\n+\n+  /**\n+   * Compute the correlation matrix for the input RDD of Vectors using the specified method.\n+   * Methods currently supported: `pearson` (default), `spearman`.\n+   *\n+   * @param dataset a dataset or a dataframe\n+   * @param column the name of the column of vectors for which the correlation coefficient needs\n+   *               to be computed. This must be a column of the dataset, and it must contain\n+   *               Vector objects.\n+   * @param method String specifying the method to use for computing correlation.\n+   *               Supported: `pearson` (default), `spearman`\n+   * @return A dataframe that contains the correlation matrix of the column of vectors. This\n+   *         dataframe contains a single row and a single column of name\n+   *         '$METHODNAME($COLUMN)'.\n+   * @throws IllegalArgumentException if the column is not a valid column in the dataset, or if\n+   *                                  the content of this column is not of type Vector.\n+   *\n+   *  Here is how to access the correlation coefficient:\n+   *  {{{\n+   *    val data: Dataset[Vector] = ...\n+   *    val Row(coeff: Matrix) = Statistics.corr(data, \"value\").head\n+   *    // coeff now contains the Pearson correlation matrix.\n+   *  }}}\n+   *\n+   * @note For Spearman, a rank correlation, we need to create an RDD[Double] for each column\n+   * and sort it in order to retrieve the ranks and then join the columns back into an RDD[Vector],\n+   * which is fairly costly. Cache the input RDD before calling corr with `method = \"spearman\"` to\n+   * avoid recomputing the common lineage.\n+   */\n+  // TODO: how do we handle missing values?"
  }, {
    "author": {
      "login": "thunterdb"
    },
    "body": "Good point. I will remove the comment at this point, since this should be decided in JIRA instead of during the implementation.",
    "commit": "7c540e5080aa10894d33cfa9924b65bd551375ab",
    "createdAt": "2017-03-15T23:17:06Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.stat\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.linalg.{SQLDataTypes, Vector}\n+import org.apache.spark.mllib.linalg.{Vectors => OldVectors}\n+import org.apache.spark.mllib.stat.{Statistics => OldStatistics}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.types.{StructField, StructType}\n+\n+/**\n+ * API for statistical functions in MLlib, compatible with Dataframes and Datasets.\n+ *\n+ * The functions in this package generalize the functions in [[org.apache.spark.sql.Dataset.stat]]\n+ * to MLlib's Vector types.\n+ */\n+@Since(\"2.2.0\")\n+object Statistics {\n+\n+  /**\n+   * Compute the correlation matrix for the input RDD of Vectors using the specified method.\n+   * Methods currently supported: `pearson` (default), `spearman`.\n+   *\n+   * @param dataset a dataset or a dataframe\n+   * @param column the name of the column of vectors for which the correlation coefficient needs\n+   *               to be computed. This must be a column of the dataset, and it must contain\n+   *               Vector objects.\n+   * @param method String specifying the method to use for computing correlation.\n+   *               Supported: `pearson` (default), `spearman`\n+   * @return A dataframe that contains the correlation matrix of the column of vectors. This\n+   *         dataframe contains a single row and a single column of name\n+   *         '$METHODNAME($COLUMN)'.\n+   * @throws IllegalArgumentException if the column is not a valid column in the dataset, or if\n+   *                                  the content of this column is not of type Vector.\n+   *\n+   *  Here is how to access the correlation coefficient:\n+   *  {{{\n+   *    val data: Dataset[Vector] = ...\n+   *    val Row(coeff: Matrix) = Statistics.corr(data, \"value\").head\n+   *    // coeff now contains the Pearson correlation matrix.\n+   *  }}}\n+   *\n+   * @note For Spearman, a rank correlation, we need to create an RDD[Double] for each column\n+   * and sort it in order to retrieve the ranks and then join the columns back into an RDD[Vector],\n+   * which is fairly costly. Cache the input RDD before calling corr with `method = \"spearman\"` to\n+   * avoid recomputing the common lineage.\n+   */\n+  // TODO: how do we handle missing values?"
  }],
  "prId": 17108
}, {
  "comments": [{
    "author": {
      "login": "imatiach-msft"
    },
    "body": "shouldn't this have @Experimental tag at the top?  similar to:\r\nhttps://github.com/apache/spark/pull/17110/files\r\n",
    "commit": "7c540e5080aa10894d33cfa9924b65bd551375ab",
    "createdAt": "2017-03-01T18:58:25Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.stat\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.linalg.{SQLDataTypes, Vector}\n+import org.apache.spark.mllib.linalg.{Vectors => OldVectors}\n+import org.apache.spark.mllib.stat.{Statistics => OldStatistics}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.types.{StructField, StructType}\n+\n+/**\n+ * API for statistical functions in MLlib, compatible with Dataframes and Datasets.\n+ *\n+ * The functions in this package generalize the functions in [[org.apache.spark.sql.Dataset.stat]]\n+ * to MLlib's Vector types.\n+ */\n+@Since(\"2.2.0\")"
  }, {
    "author": {
      "login": "thunterdb"
    },
    "body": "Good point, thanks",
    "commit": "7c540e5080aa10894d33cfa9924b65bd551375ab",
    "createdAt": "2017-03-15T23:25:29Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.stat\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.linalg.{SQLDataTypes, Vector}\n+import org.apache.spark.mllib.linalg.{Vectors => OldVectors}\n+import org.apache.spark.mllib.stat.{Statistics => OldStatistics}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.types.{StructField, StructType}\n+\n+/**\n+ * API for statistical functions in MLlib, compatible with Dataframes and Datasets.\n+ *\n+ * The functions in this package generalize the functions in [[org.apache.spark.sql.Dataset.stat]]\n+ * to MLlib's Vector types.\n+ */\n+@Since(\"2.2.0\")"
  }],
  "prId": 17108
}]