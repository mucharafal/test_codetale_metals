[{
  "comments": [{
    "author": {
      "login": "BryanCutler"
    },
    "body": "I'm not sure if using the Broadcast variable as a parameter is a good idea\n",
    "commit": "86e73ded458c8cc8790c13a98c4a0f3f7efb7dbc",
    "createdAt": "2015-05-20T23:22:26Z",
    "diffHunk": "@@ -184,9 +185,45 @@ abstract class PredictionModel[FeaturesType, M <: PredictionModel[FeaturesType,\n     }\n   }\n \n+  protected def transformImpl(dataset: DataFrame): DataFrame = {\n+    dataset.withColumn($(predictionCol), callUDF(predict _, DoubleType, col($(featuresCol))))\n+  }\n+\n   /**\n    * Predict label for the given features.\n    * This internal method is used to implement [[transform()]] and output [[predictionCol]].\n    */\n   protected def predict(features: FeaturesType): Double\n }\n+\n+\n+/**\n+ * :: DeveloperApi ::\n+ *\n+ * Abstraction for a model for prediction tasks that will broadcast the model used to predict.\n+ *\n+ * @tparam FeaturesType  Type of features.\n+ *                       E.g., [[org.apache.spark.mllib.linalg.VectorUDT]] for vector features.\n+ * @tparam M  Specialization of [[PredictionModel]].  If you subclass this type, use this type\n+ *            parameter to specify the concrete type for the corresponding model.\n+ */\n+@DeveloperApi\n+abstract class PredictionModelBroadcasting[\n+    FeaturesType, M <: PredictionModelBroadcasting[FeaturesType, M]\n+  ]\n+  extends PredictionModel[FeaturesType, M] {\n+\n+  protected def transformImpl(dataset: DataFrame, bcastModel: Broadcast[M]): DataFrame = {"
  }],
  "prId": 6300
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "This could call:\n\n```\ntransformImpl(dataset)\n```\n",
    "commit": "86e73ded458c8cc8790c13a98c4a0f3f7efb7dbc",
    "createdAt": "2015-07-09T00:59:26Z",
    "diffHunk": "@@ -174,9 +174,15 @@ abstract class PredictionModel[FeaturesType, M <: PredictionModel[FeaturesType,\n    * @return transformed dataset with [[predictionCol]] of type [[Double]]\n    */\n   override def transform(dataset: DataFrame): DataFrame = {\n+    transformImpl(dataset, predict)\n+  }\n+\n+  protected def transformImpl(\n+      dataset: DataFrame,\n+      predictFunc: (FeaturesType) => Double): DataFrame = {\n     transformSchema(dataset.schema, logging = true)\n     if ($(predictionCol).nonEmpty) {\n-      dataset.withColumn($(predictionCol), callUDF(predict _, DoubleType, col($(featuresCol))))"
  }],
  "prId": 6300
}]