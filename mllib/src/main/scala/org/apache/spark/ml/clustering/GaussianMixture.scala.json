[{
  "comments": [{
    "author": {
      "login": "yanboliang"
    },
    "body": "I think it's better to make `gaussians` return `DataFrame`, then we can get it directly at Python side. For ML, we did not need a Python wrapper like what we did at `GaussianMixtureModelWrapper` for MLlib. cc @jkbradley \n",
    "commit": "16d94f41d408d6692ee1af1cc6d88901a9a4299b",
    "createdAt": "2016-04-19T04:18:38Z",
    "diffHunk": "@@ -105,6 +108,15 @@ class GaussianMixtureModel private[ml] (\n   def gaussians: Array[MultivariateGaussian] = parentModel.gaussians\n \n   @Since(\"2.0.0\")"
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "I'd prefer to have a wrapper since, without it, it would be difficult for users to do anything with the gaussians' means and covariance matrices.  However, I should have realized on the initial PR that we should define a new MultivariateGaussian class within spark.ml so that we do not reference spark.mllib publicly.  I can send a quick PR to add this on the Scala side.  @yanboliang does this sound reasonable to you?\n\nFor serialization to the Python side, we could use DataFrames if it simplifies the code.  To do that, we could keep a private reference to the SQLContext from training.\n",
    "commit": "16d94f41d408d6692ee1af1cc6d88901a9a4299b",
    "createdAt": "2016-04-19T17:14:56Z",
    "diffHunk": "@@ -105,6 +108,15 @@ class GaussianMixtureModel private[ml] (\n   def gaussians: Array[MultivariateGaussian] = parentModel.gaussians\n \n   @Since(\"2.0.0\")"
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "I just created [https://issues.apache.org/jira/browse/SPARK-14732] for this.\n",
    "commit": "16d94f41d408d6692ee1af1cc6d88901a9a4299b",
    "createdAt": "2016-04-19T17:18:56Z",
    "diffHunk": "@@ -105,6 +108,15 @@ class GaussianMixtureModel private[ml] (\n   def gaussians: Array[MultivariateGaussian] = parentModel.gaussians\n \n   @Since(\"2.0.0\")"
  }, {
    "author": {
      "login": "wangmiao1981"
    },
    "body": "@jkbradley I changed the gaussians return value as DataFrame and it works for python side. Now I change the related scala side which directly uses gaussians. There are two places in the test and one place in the saveImpl function. I will submit the code for review. I think if we can keep two methods, one is the original gaussians, the other is the Dataframe API for Python, the code could be simpler. Now, I just use one method.\n",
    "commit": "16d94f41d408d6692ee1af1cc6d88901a9a4299b",
    "createdAt": "2016-04-19T18:59:12Z",
    "diffHunk": "@@ -105,6 +108,15 @@ class GaussianMixtureModel private[ml] (\n   def gaussians: Array[MultivariateGaussian] = parentModel.gaussians\n \n   @Since(\"2.0.0\")"
  }, {
    "author": {
      "login": "yanboliang"
    },
    "body": "@jkbradley @wangmiao1981 I vote `GaussianMixtureModel.gaussians` should return type of `DataFrame` for both Scala and Python, we need the same return type for different languages.\nI refer that `LDAModel.describeTopics` and `Word2VecModel.findSynonyms` both return `DataFrame` in ML, but they use wrapper in MLlib such as [`describeTopics`](https://github.com/apache/spark/blob/master/mllib/src/main/scala/org/apache/spark/mllib/api/python/LDAModelWrapper.scala#L34). I think return `DataFrame` is the best solution for these kind of issues. I'm open to hear your thoughts. Thanks!\n",
    "commit": "16d94f41d408d6692ee1af1cc6d88901a9a4299b",
    "createdAt": "2016-04-20T14:46:55Z",
    "diffHunk": "@@ -105,6 +108,15 @@ class GaussianMixtureModel private[ml] (\n   def gaussians: Array[MultivariateGaussian] = parentModel.gaussians\n \n   @Since(\"2.0.0\")"
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "I agree it simplifies things when the return result is either a basic type or a DataFrame.  I think it makes sense for topics and synonyms, for which there is no \"natural\" representation.  But for distributions, there is a natural class to provide (the MultivariateGaussian class, with its associated methods like pdf).  I'd also be OK with providing only a dataframe for now in Python, perhaps using a method called `gaussiansDF`.\n",
    "commit": "16d94f41d408d6692ee1af1cc6d88901a9a4299b",
    "createdAt": "2016-04-20T18:53:42Z",
    "diffHunk": "@@ -105,6 +108,15 @@ class GaussianMixtureModel private[ml] (\n   def gaussians: Array[MultivariateGaussian] = parentModel.gaussians\n \n   @Since(\"2.0.0\")"
  }, {
    "author": {
      "login": "wangmiao1981"
    },
    "body": "@jkbradley As I discussed with Yanbo, I only keep one method, gaussians, instead of two separate: gaussians and gaussiansDF. Do you mean renaming gaussians to gaussiansDF?\nThanks!\n",
    "commit": "16d94f41d408d6692ee1af1cc6d88901a9a4299b",
    "createdAt": "2016-04-20T21:48:05Z",
    "diffHunk": "@@ -105,6 +108,15 @@ class GaussianMixtureModel private[ml] (\n   def gaussians: Array[MultivariateGaussian] = parentModel.gaussians\n \n   @Since(\"2.0.0\")"
  }, {
    "author": {
      "login": "yanboliang"
    },
    "body": "@jkbradley It make sense to use a natural class to represent `gaussians`. I'm OK with providing a dataframe for now in Python. \n@wangmiao1981 Let's keep two variables: `gaussians` and `gaussiansDF` at Scala side. `gaussiansDF` is used for Python reference.\n",
    "commit": "16d94f41d408d6692ee1af1cc6d88901a9a4299b",
    "createdAt": "2016-04-21T16:16:35Z",
    "diffHunk": "@@ -105,6 +108,15 @@ class GaussianMixtureModel private[ml] (\n   def gaussians: Array[MultivariateGaussian] = parentModel.gaussians\n \n   @Since(\"2.0.0\")"
  }],
  "prId": 12402
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Sorry, but I'd like to change my recommendation.  To follow existing implementations, let's just getOrCreate the SQLContext in gaussiansDF.\n",
    "commit": "16d94f41d408d6692ee1af1cc6d88901a9a4299b",
    "createdAt": "2016-04-22T00:12:10Z",
    "diffHunk": "@@ -70,12 +70,13 @@ private[clustering] trait GaussianMixtureParams extends Params with HasMaxIter w\n @Experimental\n class GaussianMixtureModel private[ml] (\n     @Since(\"2.0.0\") override val uid: String,\n-    private val parentModel: MLlibGMModel)\n+    private val parentModel: MLlibGMModel,\n+    @Since(\"2.0.0\") @transient protected val sqlContext: SQLContext)"
  }],
  "prId": 12402
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Here's how:\n\n```\n    val sc = SparkContext.getOrCreate()\n    val sqlContext = SQLContext.getOrCreate(sc)\n```\n",
    "commit": "16d94f41d408d6692ee1af1cc6d88901a9a4299b",
    "createdAt": "2016-04-22T00:12:12Z",
    "diffHunk": "@@ -104,6 +105,17 @@ class GaussianMixtureModel private[ml] (\n   @Since(\"2.0.0\")\n   def gaussians: Array[MultivariateGaussian] = parentModel.gaussians\n \n+  /**\n+   * Helper method used in Python\n+   */\n+  def gaussiansDF: DataFrame = {"
  }],
  "prId": 12402
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Write real documentation, including schema of DataFrame\n",
    "commit": "16d94f41d408d6692ee1af1cc6d88901a9a4299b",
    "createdAt": "2016-04-22T00:12:18Z",
    "diffHunk": "@@ -104,6 +105,17 @@ class GaussianMixtureModel private[ml] (\n   @Since(\"2.0.0\")\n   def gaussians: Array[MultivariateGaussian] = parentModel.gaussians\n \n+  /**\n+   * Helper method used in Python"
  }],
  "prId": 12402
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Just use `gaussians`; no need for a temp val.\n",
    "commit": "16d94f41d408d6692ee1af1cc6d88901a9a4299b",
    "createdAt": "2016-04-22T00:12:21Z",
    "diffHunk": "@@ -104,6 +105,17 @@ class GaussianMixtureModel private[ml] (\n   @Since(\"2.0.0\")\n   def gaussians: Array[MultivariateGaussian] = parentModel.gaussians\n \n+  /**\n+   * Helper method used in Python\n+   */\n+  def gaussiansDF: DataFrame = {\n+    val tmp_gaussians = parentModel.gaussians"
  }],
  "prId": 12402
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Let's call the columns \"mean\" and \"cov\"\nI'm planning on naming them mean/cov in the spark.ml MultivariateGaussian in order to match other libraries.\n",
    "commit": "16d94f41d408d6692ee1af1cc6d88901a9a4299b",
    "createdAt": "2016-04-22T00:12:24Z",
    "diffHunk": "@@ -104,6 +105,17 @@ class GaussianMixtureModel private[ml] (\n   @Since(\"2.0.0\")\n   def gaussians: Array[MultivariateGaussian] = parentModel.gaussians\n \n+  /**\n+   * Helper method used in Python\n+   */\n+  def gaussiansDF: DataFrame = {\n+    val tmp_gaussians = parentModel.gaussians\n+    val modelGaussians = tmp_gaussians.map { gaussian =>\n+      (gaussian.mu, gaussian.sigma)\n+    }\n+    sqlContext.createDataFrame(modelGaussians).toDF(\"mu\", \"sigma\")"
  }],
  "prId": 12402
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Remove this 1 line.  (This is an implementation detail and should not be exposed in user docs.)\n",
    "commit": "16d94f41d408d6692ee1af1cc6d88901a9a4299b",
    "createdAt": "2016-04-23T05:08:50Z",
    "diffHunk": "@@ -104,6 +105,25 @@ class GaussianMixtureModel private[ml] (\n   @Since(\"2.0.0\")\n   def gaussians: Array[MultivariateGaussian] = parentModel.gaussians\n \n+  /**\n+   * Helper method used in Python."
  }],
  "prId": 12402
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Surround schema with triple braces to make it appear like code:\n\n```\n{{{\nroot\n|-- ...\n}}}\n```\n",
    "commit": "16d94f41d408d6692ee1af1cc6d88901a9a4299b",
    "createdAt": "2016-04-23T05:08:51Z",
    "diffHunk": "@@ -104,6 +105,25 @@ class GaussianMixtureModel private[ml] (\n   @Since(\"2.0.0\")\n   def gaussians: Array[MultivariateGaussian] = parentModel.gaussians\n \n+  /**\n+   * Helper method used in Python.\n+   * Retrieve Gaussian distributions as a DataFrame.\n+   * Each row represents a Gaussian Distribution.\n+   * Two columns are defined: mean and cov.\n+   * Schema:\n+   * root"
  }],
  "prId": 12402
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Since 2.0.0\n",
    "commit": "16d94f41d408d6692ee1af1cc6d88901a9a4299b",
    "createdAt": "2016-04-23T05:08:52Z",
    "diffHunk": "@@ -104,6 +105,25 @@ class GaussianMixtureModel private[ml] (\n   @Since(\"2.0.0\")\n   def gaussians: Array[MultivariateGaussian] = parentModel.gaussians\n \n+  /**\n+   * Helper method used in Python.\n+   * Retrieve Gaussian distributions as a DataFrame.\n+   * Each row represents a Gaussian Distribution.\n+   * Two columns are defined: mean and cov.\n+   * Schema:\n+   * root\n+   * |-- mean: vector (nullable = true)\n+   * |-- cov: matrix (nullable = true)\n+   */\n+  def gaussiansDF: DataFrame = {"
  }],
  "prId": 12402
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Actually, this is the right format (with indentation):\n\n```\n   * Schema:\n   * {{{\n   *  root\n   *   |-- mean: vector (nullable = true)\n   *   |-- cov: matrix (nullable = true)\n   * }}}\n```\n",
    "commit": "16d94f41d408d6692ee1af1cc6d88901a9a4299b",
    "createdAt": "2016-04-25T17:09:54Z",
    "diffHunk": "@@ -104,6 +105,27 @@ class GaussianMixtureModel private[ml] (\n   @Since(\"2.0.0\")\n   def gaussians: Array[MultivariateGaussian] = parentModel.gaussians\n \n+  /**\n+   * Retrieve Gaussian distributions as a DataFrame.\n+   * Each row represents a Gaussian Distribution.\n+   * Two columns are defined: mean and cov.\n+   * Schema:",
    "line": 25
  }],
  "prId": 12402
}]