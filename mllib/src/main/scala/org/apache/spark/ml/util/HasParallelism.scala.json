[{
  "comments": [{
    "author": {
      "login": "BryanCutler"
    },
    "body": "processes -> threads",
    "commit": "2a335fec1a4527e4970e88c10555d7d3f0375c35",
    "createdAt": "2017-07-04T00:57:45Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import java.util.concurrent.ExecutorService\n+\n+import scala.concurrent.ExecutionContext\n+\n+import com.google.common.util.concurrent.MoreExecutors\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * Common parameter for estimators trained in a multithreaded environment.\n+ */\n+private[ml] trait HasParallelism extends Params {\n+\n+  /**\n+   * param for the number of processes to use when running parallel one vs. rest\n+   * The implementation of parallel one vs. rest runs the classification for\n+   * each class in a separate process.\n+   * @group expertParam\n+   */\n+  @Since(\"2.3.0\")\n+  val parallelism = new IntParam(this, \"parallelism\",\n+    \"the number of processes to use when running parallel algorithms\", ParamValidators.gtEq(1))"
  }],
  "prId": 18281
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "`setDefault(parallelism -> 1)` on one line",
    "commit": "2a335fec1a4527e4970e88c10555d7d3f0375c35",
    "createdAt": "2017-07-04T10:29:03Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import java.util.concurrent.ExecutorService\n+\n+import scala.concurrent.ExecutionContext\n+\n+import com.google.common.util.concurrent.MoreExecutors\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * Common parameter for estimators trained in a multithreaded environment.\n+ */\n+private[ml] trait HasParallelism extends Params {\n+\n+  /**\n+   * param for the number of processes to use when running parallel one vs. rest\n+   * The implementation of parallel one vs. rest runs the classification for\n+   * each class in a separate process.\n+   * @group expertParam\n+   */\n+  @Since(\"2.3.0\")\n+  val parallelism = new IntParam(this, \"parallelism\",\n+    \"the number of processes to use when running parallel algorithms\", ParamValidators.gtEq(1))\n+\n+  setDefault(\n+    parallelism -> 1"
  }],
  "prId": 18281
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "Do we intend to allow this to be overridden? i.e. it then becomes part of the public API. This could be good thing as it would allow developers flexibility in specifying a custom `ExecutionContext`. But in that case we should document that here.\r\n\r\nIf we don't (yet) want to expose it we should make it `protected`.\r\n\r\nI think for now we should keep it private, we can expose it later if there is demand.",
    "commit": "2a335fec1a4527e4970e88c10555d7d3f0375c35",
    "createdAt": "2017-07-04T10:31:10Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import java.util.concurrent.ExecutorService\n+\n+import scala.concurrent.ExecutionContext\n+\n+import com.google.common.util.concurrent.MoreExecutors\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * Common parameter for estimators trained in a multithreaded environment.\n+ */\n+private[ml] trait HasParallelism extends Params {\n+\n+  /**\n+   * param for the number of processes to use when running parallel one vs. rest\n+   * The implementation of parallel one vs. rest runs the classification for\n+   * each class in a separate process.\n+   * @group expertParam\n+   */\n+  @Since(\"2.3.0\")\n+  val parallelism = new IntParam(this, \"parallelism\",\n+    \"the number of processes to use when running parallel algorithms\", ParamValidators.gtEq(1))\n+\n+  setDefault(\n+    parallelism -> 1\n+  )\n+\n+  /** @group getParam */\n+  def getParallelism: Int = $(parallelism)\n+\n+  /** @group setParam */\n+  @Since(\"2.3.0\")\n+  def setParallelism(value: Int): this.type = {\n+    set(parallelism, value)\n+  }\n+\n+  def getExecutionContext: ExecutionContext = {"
  }, {
    "author": {
      "login": "BryanCutler"
    },
    "body": "Good point @MLnick , this should absolutely be `protected` for now.",
    "commit": "2a335fec1a4527e4970e88c10555d7d3f0375c35",
    "createdAt": "2017-07-05T17:46:21Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import java.util.concurrent.ExecutorService\n+\n+import scala.concurrent.ExecutionContext\n+\n+import com.google.common.util.concurrent.MoreExecutors\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * Common parameter for estimators trained in a multithreaded environment.\n+ */\n+private[ml] trait HasParallelism extends Params {\n+\n+  /**\n+   * param for the number of processes to use when running parallel one vs. rest\n+   * The implementation of parallel one vs. rest runs the classification for\n+   * each class in a separate process.\n+   * @group expertParam\n+   */\n+  @Since(\"2.3.0\")\n+  val parallelism = new IntParam(this, \"parallelism\",\n+    \"the number of processes to use when running parallel algorithms\", ParamValidators.gtEq(1))\n+\n+  setDefault(\n+    parallelism -> 1\n+  )\n+\n+  /** @group getParam */\n+  def getParallelism: Int = $(parallelism)\n+\n+  /** @group setParam */\n+  @Since(\"2.3.0\")\n+  def setParallelism(value: Int): this.type = {\n+    set(parallelism, value)\n+  }\n+\n+  def getExecutionContext: ExecutionContext = {"
  }],
  "prId": 18281
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "Unused import",
    "commit": "2a335fec1a4527e4970e88c10555d7d3f0375c35",
    "createdAt": "2017-07-04T10:35:01Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import java.util.concurrent.ExecutorService\n+\n+import scala.concurrent.ExecutionContext\n+\n+import com.google.common.util.concurrent.MoreExecutors"
  }],
  "prId": 18281
}, {
  "comments": [{
    "author": {
      "login": "BryanCutler"
    },
    "body": "This import is unused also, please clean these up",
    "commit": "2a335fec1a4527e4970e88c10555d7d3f0375c35",
    "createdAt": "2017-07-05T17:44:07Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import java.util.concurrent.ExecutorService"
  }],
  "prId": 18281
}, {
  "comments": [{
    "author": {
      "login": "BryanCutler"
    },
    "body": "change `getParallelism` -> `n`",
    "commit": "2a335fec1a4527e4970e88c10555d7d3f0375c35",
    "createdAt": "2017-07-05T17:46:10Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import java.util.concurrent.ExecutorService\n+\n+import scala.concurrent.ExecutionContext\n+\n+import com.google.common.util.concurrent.MoreExecutors\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * Common parameter for estimators trained in a multithreaded environment.\n+ */\n+private[ml] trait HasParallelism extends Params {\n+\n+  /**\n+   * param for the number of processes to use when running parallel one vs. rest\n+   * The implementation of parallel one vs. rest runs the classification for\n+   * each class in a separate process.\n+   * @group expertParam\n+   */\n+  @Since(\"2.3.0\")\n+  val parallelism = new IntParam(this, \"parallelism\",\n+    \"the number of processes to use when running parallel algorithms\", ParamValidators.gtEq(1))\n+\n+  setDefault(\n+    parallelism -> 1\n+  )\n+\n+  /** @group getParam */\n+  def getParallelism: Int = $(parallelism)\n+\n+  /** @group setParam */\n+  @Since(\"2.3.0\")\n+  def setParallelism(value: Int): this.type = {\n+    set(parallelism, value)\n+  }\n+\n+  def getExecutionContext: ExecutionContext = {\n+    getParallelism match {\n+      case 1 =>\n+        ThreadUtils.sameThread\n+      case n =>\n+        ExecutionContext.fromExecutorService(ThreadUtils\n+          .newDaemonCachedThreadPool(s\"${this.getClass.getSimpleName}-thread-pool\", getParallelism))"
  }],
  "prId": 18281
}, {
  "comments": [{
    "author": {
      "login": "BryanCutler"
    },
    "body": "@MLnick , does this package seem ok or would you recommend a different location for this trait?",
    "commit": "2a335fec1a4527e4970e88c10555d7d3f0375c35",
    "createdAt": "2017-07-05T17:56:34Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util"
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "How about under org.apache.spark.ml.param.shared?",
    "commit": "2a335fec1a4527e4970e88c10555d7d3f0375c35",
    "createdAt": "2017-07-14T21:17:28Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util"
  }],
  "prId": 18281
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Don't write \"one vs rest\" here since this will be used by other algorithms.  Maybe say something like \"when running multiple Spark jobs in parallel for a meta-algorithm\"",
    "commit": "2a335fec1a4527e4970e88c10555d7d3f0375c35",
    "createdAt": "2017-07-14T21:14:56Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import scala.concurrent.ExecutionContext\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * Common parameter for estimators trained in a multithreaded environment.\n+ */\n+private[ml] trait HasParallelism extends Params {\n+\n+  /**\n+   * param for the number of threads to use when running parallel one vs. rest"
  }],
  "prId": 18281
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "We shouldn't add Since annotations for traits which will be shared across multiple algorithms.  (E.g., we could add something in 2.4 which uses this trait.)",
    "commit": "2a335fec1a4527e4970e88c10555d7d3f0375c35",
    "createdAt": "2017-07-14T21:16:08Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import scala.concurrent.ExecutionContext\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * Common parameter for estimators trained in a multithreaded environment.\n+ */\n+private[ml] trait HasParallelism extends Params {\n+\n+  /**\n+   * param for the number of threads to use when running parallel one vs. rest\n+   * The implementation of parallel one vs. rest runs the classification for\n+   * each class in a separate threads.\n+   * @group expertParam\n+   */\n+  @Since(\"2.3.0\")"
  }],
  "prId": 18281
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "expertGetParam",
    "commit": "2a335fec1a4527e4970e88c10555d7d3f0375c35",
    "createdAt": "2017-07-14T21:17:58Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import scala.concurrent.ExecutionContext\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * Common parameter for estimators trained in a multithreaded environment.\n+ */\n+private[ml] trait HasParallelism extends Params {\n+\n+  /**\n+   * param for the number of threads to use when running parallel one vs. rest\n+   * The implementation of parallel one vs. rest runs the classification for\n+   * each class in a separate threads.\n+   * @group expertParam\n+   */\n+  @Since(\"2.3.0\")\n+  val parallelism = new IntParam(this, \"parallelism\",\n+    \"the number of threads to use when running parallel algorithms\", ParamValidators.gtEq(1))\n+\n+  setDefault(parallelism -> 1)\n+\n+  /** @group getParam */"
  }],
  "prId": 18281
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "expertSetParam",
    "commit": "2a335fec1a4527e4970e88c10555d7d3f0375c35",
    "createdAt": "2017-07-14T21:18:26Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import scala.concurrent.ExecutionContext\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * Common parameter for estimators trained in a multithreaded environment.\n+ */\n+private[ml] trait HasParallelism extends Params {\n+\n+  /**\n+   * param for the number of threads to use when running parallel one vs. rest\n+   * The implementation of parallel one vs. rest runs the classification for\n+   * each class in a separate threads.\n+   * @group expertParam\n+   */\n+  @Since(\"2.3.0\")\n+  val parallelism = new IntParam(this, \"parallelism\",\n+    \"the number of threads to use when running parallel algorithms\", ParamValidators.gtEq(1))\n+\n+  setDefault(parallelism -> 1)\n+\n+  /** @group getParam */\n+  def getParallelism: Int = $(parallelism)\n+\n+  /** @group setParam */"
  }],
  "prId": 18281
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "make package private: ```private[ml]```",
    "commit": "2a335fec1a4527e4970e88c10555d7d3f0375c35",
    "createdAt": "2017-07-14T21:19:15Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import scala.concurrent.ExecutionContext\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * Common parameter for estimators trained in a multithreaded environment.\n+ */\n+private[ml] trait HasParallelism extends Params {\n+\n+  /**\n+   * param for the number of threads to use when running parallel one vs. rest\n+   * The implementation of parallel one vs. rest runs the classification for\n+   * each class in a separate threads.\n+   * @group expertParam\n+   */\n+  @Since(\"2.3.0\")\n+  val parallelism = new IntParam(this, \"parallelism\",\n+    \"the number of threads to use when running parallel algorithms\", ParamValidators.gtEq(1))\n+\n+  setDefault(parallelism -> 1)\n+\n+  /** @group getParam */\n+  def getParallelism: Int = $(parallelism)\n+\n+  /** @group setParam */\n+  @Since(\"2.3.0\")\n+  def setParallelism(value: Int): this.type = {\n+    set(parallelism, value)\n+  }\n+\n+  protected def getExecutionContext: ExecutionContext = {"
  }],
  "prId": 18281
}]