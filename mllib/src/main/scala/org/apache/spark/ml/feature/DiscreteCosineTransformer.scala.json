[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Use double-brackets around link + text following:\n\n```\nMore information on [[https://en.wikipedia.org/wiki/Discrete_cosine_transform#DCT-II  Wikipedia]]\n```\n",
    "commit": "433dbc72943ea64fe295c8dfc0a343bbbf815696",
    "createdAt": "2015-06-23T18:56:51Z",
    "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import edu.emory.mathcs.jtransforms.dct._\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.UnaryTransformer\n+import org.apache.spark.ml.param.BooleanParam\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.types.{NumericType, ArrayType, DataType, DoubleType}\n+\n+/**\n+ * :: Experimental ::\n+ * A feature transformer that takes the 1D discrete cosine transform of a real vector.\n+ * It returns a real vector of the same length representing the DCT. The return vector is scaled\n+ * such that the transform matrix is unitary.\n+ *\n+ * More information: https://en.wikipedia.org/wiki/Discrete_cosine_transform#DCT-II"
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK.\n",
    "commit": "433dbc72943ea64fe295c8dfc0a343bbbf815696",
    "createdAt": "2015-06-23T21:21:15Z",
    "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import edu.emory.mathcs.jtransforms.dct._\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.UnaryTransformer\n+import org.apache.spark.ml.param.BooleanParam\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.types.{NumericType, ArrayType, DataType, DoubleType}\n+\n+/**\n+ * :: Experimental ::\n+ * A feature transformer that takes the 1D discrete cosine transform of a real vector.\n+ * It returns a real vector of the same length representing the DCT. The return vector is scaled\n+ * such that the transform matrix is unitary.\n+ *\n+ * More information: https://en.wikipedia.org/wiki/Discrete_cosine_transform#DCT-II"
  }],
  "prId": 6894
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "What does this mean?  If this is a note-to-self, I'd remove it for the PR.  If it's a real to-do item, I'd make a follow-up JIRA and note the JIRA number here.\n",
    "commit": "433dbc72943ea64fe295c8dfc0a343bbbf815696",
    "createdAt": "2015-06-23T18:56:52Z",
    "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import edu.emory.mathcs.jtransforms.dct._\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.UnaryTransformer\n+import org.apache.spark.ml.param.BooleanParam\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.types.{NumericType, ArrayType, DataType, DoubleType}\n+\n+/**\n+ * :: Experimental ::\n+ * A feature transformer that takes the 1D discrete cosine transform of a real vector.\n+ * It returns a real vector of the same length representing the DCT. The return vector is scaled\n+ * such that the transform matrix is unitary.\n+ *\n+ * More information: https://en.wikipedia.org/wiki/Discrete_cosine_transform#DCT-II\n+ */\n+@Experimental\n+// TODO: explore variance -IN (and +OUT in UnaryTransformer)"
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "I was thinking about how subtyping UnaryTransformer should work (covariant return, contravariant argument) but we can handle that when (if) we run in to it.\n",
    "commit": "433dbc72943ea64fe295c8dfc0a343bbbf815696",
    "createdAt": "2015-06-24T17:01:53Z",
    "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import edu.emory.mathcs.jtransforms.dct._\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.UnaryTransformer\n+import org.apache.spark.ml.param.BooleanParam\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.types.{NumericType, ArrayType, DataType, DoubleType}\n+\n+/**\n+ * :: Experimental ::\n+ * A feature transformer that takes the 1D discrete cosine transform of a real vector.\n+ * It returns a real vector of the same length representing the DCT. The return vector is scaled\n+ * such that the transform matrix is unitary.\n+ *\n+ * More information: https://en.wikipedia.org/wiki/Discrete_cosine_transform#DCT-II\n+ */\n+@Experimental\n+// TODO: explore variance -IN (and +OUT in UnaryTransformer)"
  }],
  "prId": 6894
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Could you please add a little Java unit test to check Java compatibility (not algorithm correctness)?  I always worry when using type parameters.\n",
    "commit": "433dbc72943ea64fe295c8dfc0a343bbbf815696",
    "createdAt": "2015-06-23T18:56:54Z",
    "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import edu.emory.mathcs.jtransforms.dct._\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.UnaryTransformer\n+import org.apache.spark.ml.param.BooleanParam\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.types.{NumericType, ArrayType, DataType, DoubleType}\n+\n+/**\n+ * :: Experimental ::\n+ * A feature transformer that takes the 1D discrete cosine transform of a real vector.\n+ * It returns a real vector of the same length representing the DCT. The return vector is scaled\n+ * such that the transform matrix is unitary.\n+ *\n+ * More information: https://en.wikipedia.org/wiki/Discrete_cosine_transform#DCT-II\n+ */\n+@Experimental\n+// TODO: explore variance -IN (and +OUT in UnaryTransformer)\n+class DiscreteCosineTransformer[IN : Numeric](override val uid: String)"
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK. Removing the type parameter actually since we are switching `Seq[T : Numeric]` to `Vector`, but will still include a Java test.\n",
    "commit": "433dbc72943ea64fe295c8dfc0a343bbbf815696",
    "createdAt": "2015-06-24T18:16:36Z",
    "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import edu.emory.mathcs.jtransforms.dct._\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.UnaryTransformer\n+import org.apache.spark.ml.param.BooleanParam\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.types.{NumericType, ArrayType, DataType, DoubleType}\n+\n+/**\n+ * :: Experimental ::\n+ * A feature transformer that takes the 1D discrete cosine transform of a real vector.\n+ * It returns a real vector of the same length representing the DCT. The return vector is scaled\n+ * such that the transform matrix is unitary.\n+ *\n+ * More information: https://en.wikipedia.org/wiki/Discrete_cosine_transform#DCT-II\n+ */\n+@Experimental\n+// TODO: explore variance -IN (and +OUT in UnaryTransformer)\n+class DiscreteCosineTransformer[IN : Numeric](override val uid: String)"
  }],
  "prId": 6894
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "remove\n",
    "commit": "433dbc72943ea64fe295c8dfc0a343bbbf815696",
    "createdAt": "2015-06-23T18:56:59Z",
    "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import edu.emory.mathcs.jtransforms.dct._\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.UnaryTransformer\n+import org.apache.spark.ml.param.BooleanParam\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.types.{NumericType, ArrayType, DataType, DoubleType}\n+\n+/**\n+ * :: Experimental ::\n+ * A feature transformer that takes the 1D discrete cosine transform of a real vector.\n+ * It returns a real vector of the same length representing the DCT. The return vector is scaled\n+ * such that the transform matrix is unitary.\n+ *\n+ * More information: https://en.wikipedia.org/wiki/Discrete_cosine_transform#DCT-II\n+ */\n+@Experimental\n+// TODO: explore variance -IN (and +OUT in UnaryTransformer)\n+class DiscreteCosineTransformer[IN : Numeric](override val uid: String)\n+  extends UnaryTransformer[Seq[IN], Seq[Double], DiscreteCosineTransformer[IN]] {\n+\n+  def this() = this(Identifiable.randomUID(\"dct\"))\n+\n+  /**\n+   * Indicates whether to perform the inverse DCT (true) or forward DCT (false).\n+   * Default: false\n+   * @group param\n+   */\n+  def inverse: BooleanParam = new BooleanParam(\n+    this, \"inverse\", \"Set transformer to perform inverse DCT\")\n+\n+  /** @group setParam */\n+  def setInverse(value: Boolean): this.type = set(inverse, value)\n+\n+  /** @group getParam */\n+  def getInverse: Boolean = $(inverse)\n+\n+  /**\n+   * Indicates whether output type should be double (true) or single (false) floating point.\n+   * Default: true\n+   * @group param\n+   */\n+  def doublePrecision: BooleanParam = new BooleanParam("
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "OK.\n",
    "commit": "433dbc72943ea64fe295c8dfc0a343bbbf815696",
    "createdAt": "2015-06-23T21:31:09Z",
    "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import edu.emory.mathcs.jtransforms.dct._\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.UnaryTransformer\n+import org.apache.spark.ml.param.BooleanParam\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.types.{NumericType, ArrayType, DataType, DoubleType}\n+\n+/**\n+ * :: Experimental ::\n+ * A feature transformer that takes the 1D discrete cosine transform of a real vector.\n+ * It returns a real vector of the same length representing the DCT. The return vector is scaled\n+ * such that the transform matrix is unitary.\n+ *\n+ * More information: https://en.wikipedia.org/wiki/Discrete_cosine_transform#DCT-II\n+ */\n+@Experimental\n+// TODO: explore variance -IN (and +OUT in UnaryTransformer)\n+class DiscreteCosineTransformer[IN : Numeric](override val uid: String)\n+  extends UnaryTransformer[Seq[IN], Seq[Double], DiscreteCosineTransformer[IN]] {\n+\n+  def this() = this(Identifiable.randomUID(\"dct\"))\n+\n+  /**\n+   * Indicates whether to perform the inverse DCT (true) or forward DCT (false).\n+   * Default: false\n+   * @group param\n+   */\n+  def inverse: BooleanParam = new BooleanParam(\n+    this, \"inverse\", \"Set transformer to perform inverse DCT\")\n+\n+  /** @group setParam */\n+  def setInverse(value: Boolean): this.type = set(inverse, value)\n+\n+  /** @group getParam */\n+  def getInverse: Boolean = $(inverse)\n+\n+  /**\n+   * Indicates whether output type should be double (true) or single (false) floating point.\n+   * Default: true\n+   * @group param\n+   */\n+  def doublePrecision: BooleanParam = new BooleanParam("
  }],
  "prId": 6894
}]