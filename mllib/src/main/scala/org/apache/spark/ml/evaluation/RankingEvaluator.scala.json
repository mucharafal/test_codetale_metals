[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Not a big deal, but could you generate this from the `supportedMetrics` by filtering those including \"AtK\"?",
    "commit": "7de9bdf82e03982b78c1ce7e5d500edd0185ae1b",
    "createdAt": "2019-06-19T13:24:20Z",
    "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.spark.ml.evaluation\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.param._\n+import org.apache.spark.ml.param.shared._\n+import org.apache.spark.ml.util._\n+import org.apache.spark.mllib.evaluation.RankingMetrics\n+import org.apache.spark.sql.Dataset\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Evaluator for ranking, which expects two input columns: prediction and label.\n+ */\n+@Experimental\n+@Since(\"3.0.0\")\n+class RankingEvaluator (override val uid: String)\n+  extends Evaluator with HasPredictionCol with HasLabelCol with DefaultParamsWritable {\n+\n+  import RankingEvaluator.supportedMetricNames\n+\n+  def this() = this(Identifiable.randomUID(\"rankEval\"))\n+\n+  /**\n+   * param for metric name in evaluation (supports `\"meanAveragePrecision\"` (default),\n+   * `\"meanAveragePrecisionAtK\"`, `\"precisionAtK\"`, `\"ndcgAtK\"`, `\"recallAtK\"`)\n+   * @group param\n+   */\n+  final val metricName: Param[String] = {\n+    val allowedParams = ParamValidators.inArray(supportedMetricNames)\n+    new Param(this, \"metricName\", \"metric name in evaluation \" +\n+      s\"${supportedMetricNames.mkString(\"(\", \"|\", \")\")}\", allowedParams)\n+  }\n+\n+  /** @group getParam */\n+  def getMetricName: String = $(metricName)\n+\n+  /** @group setParam */\n+  def setMetricName(value: String): this.type = set(metricName, value)\n+\n+  setDefault(metricName -> \"meanAveragePrecision\")\n+\n+  final val k = new IntParam(this, \"k\",\n+    \"The ranking position value used in meanAveragePrecisionAtK|precisionAtK|ndcgAtK|recallAtK.\" +"
  }],
  "prId": 24869
}]