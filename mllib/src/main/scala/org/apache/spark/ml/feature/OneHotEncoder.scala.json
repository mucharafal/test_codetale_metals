[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Need JavaDoc. For pipeline components, we use default constructor and set parameter values in setters. Since OneHotEncoder is a unary transformer, you can extend `UnaryTransformer` directly and then overwrite `createTransformFunc`. Please check the implementation of `StringIndexer` and see how to define parameters and their default values.\n",
    "commit": "f383250d6342c13b28617d05d0d597f5a6bee814",
    "createdAt": "2015-04-15T20:44:04Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.annotation.AlphaComponent\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.attribute.NominalAttribute\n+import org.apache.spark.ml.param._\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types.{StringType, StructType}\n+\n+@AlphaComponent\n+class OneHotEncoder(labelNames: Seq[String], includeFirst: Boolean = true) extends Transformer"
  }],
  "prId": 5500
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Without the first category the rest could be still dependent. We should say \"Including the first category would make the vector columns linearly dependent because they sum up to one.\"\n",
    "commit": "f383250d6342c13b28617d05d0d597f5a6bee814",
    "createdAt": "2015-04-21T22:11:27Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.annotation.AlphaComponent\n+import org.apache.spark.ml.UnaryTransformer\n+import org.apache.spark.ml.attribute.NominalAttribute\n+import org.apache.spark.mllib.linalg.{Vector, Vectors, VectorUDT}\n+import org.apache.spark.ml.param._\n+import org.apache.spark.ml.param.shared.{HasInputCol, HasOutputCol}\n+import org.apache.spark.ml.util.SchemaUtils\n+import org.apache.spark.sql.types.{DataType, DoubleType, StructType}\n+\n+/**\n+ * A one-hot encoder that maps a column of label indices to a column of binary vectors, with\n+ * at most a single one-value. By default, the binary vector has an element for each category, so\n+ * with 5 categories, an input value of 2.0 would map to an output vector of\n+ * (0.0, 0.0, 1.0, 0.0, 0.0). If includeFirst is set to false, the first category is omitted, so the\n+ * output vector for the previous example would be (0.0, 1.0, 0.0, 0.0) and an input value\n+ * of 0.0 would map to a vector of all zeros.  Omitting the first category enables the vector\n+ * columns to be independent."
  }],
  "prId": 5500
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Use `BooleanParam` instead of `Param[Boolean]` for Java API compatibility.\n",
    "commit": "f383250d6342c13b28617d05d0d597f5a6bee814",
    "createdAt": "2015-04-21T22:11:29Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.annotation.AlphaComponent\n+import org.apache.spark.ml.UnaryTransformer\n+import org.apache.spark.ml.attribute.NominalAttribute\n+import org.apache.spark.mllib.linalg.{Vector, Vectors, VectorUDT}\n+import org.apache.spark.ml.param._\n+import org.apache.spark.ml.param.shared.{HasInputCol, HasOutputCol}\n+import org.apache.spark.ml.util.SchemaUtils\n+import org.apache.spark.sql.types.{DataType, DoubleType, StructType}\n+\n+/**\n+ * A one-hot encoder that maps a column of label indices to a column of binary vectors, with\n+ * at most a single one-value. By default, the binary vector has an element for each category, so\n+ * with 5 categories, an input value of 2.0 would map to an output vector of\n+ * (0.0, 0.0, 1.0, 0.0, 0.0). If includeFirst is set to false, the first category is omitted, so the\n+ * output vector for the previous example would be (0.0, 1.0, 0.0, 0.0) and an input value\n+ * of 0.0 would map to a vector of all zeros.  Omitting the first category enables the vector\n+ * columns to be independent.\n+ */\n+@AlphaComponent\n+class OneHotEncoder extends UnaryTransformer[Double, Vector, OneHotEncoder]\n+  with HasInputCol with HasOutputCol {\n+\n+  /**\n+   * Whether to include a component in the encoded vectors for the first category, defaults to true.\n+   * @group param\n+   */\n+  final val includeFirst: Param[Boolean] ="
  }],
  "prId": 5500
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Label names should be extracted from the metadata, e.g., generated by `StringIndexer`.\n",
    "commit": "f383250d6342c13b28617d05d0d597f5a6bee814",
    "createdAt": "2015-04-21T22:11:30Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.annotation.AlphaComponent\n+import org.apache.spark.ml.UnaryTransformer\n+import org.apache.spark.ml.attribute.NominalAttribute\n+import org.apache.spark.mllib.linalg.{Vector, Vectors, VectorUDT}\n+import org.apache.spark.ml.param._\n+import org.apache.spark.ml.param.shared.{HasInputCol, HasOutputCol}\n+import org.apache.spark.ml.util.SchemaUtils\n+import org.apache.spark.sql.types.{DataType, DoubleType, StructType}\n+\n+/**\n+ * A one-hot encoder that maps a column of label indices to a column of binary vectors, with\n+ * at most a single one-value. By default, the binary vector has an element for each category, so\n+ * with 5 categories, an input value of 2.0 would map to an output vector of\n+ * (0.0, 0.0, 1.0, 0.0, 0.0). If includeFirst is set to false, the first category is omitted, so the\n+ * output vector for the previous example would be (0.0, 1.0, 0.0, 0.0) and an input value\n+ * of 0.0 would map to a vector of all zeros.  Omitting the first category enables the vector\n+ * columns to be independent.\n+ */\n+@AlphaComponent\n+class OneHotEncoder extends UnaryTransformer[Double, Vector, OneHotEncoder]\n+  with HasInputCol with HasOutputCol {\n+\n+  /**\n+   * Whether to include a component in the encoded vectors for the first category, defaults to true.\n+   * @group param\n+   */\n+  final val includeFirst: Param[Boolean] =\n+    new Param[Boolean](this, \"includeFirst\", \"include first category\")\n+  setDefault(includeFirst -> true)\n+\n+  /**\n+   * The names of the categories. Used to identify them in the attributes of the output column.\n+   * This is a required parameter.\n+   * @group param\n+   */\n+  final val labelNames: Param[Array[String]] ="
  }],
  "prId": 5500
}]