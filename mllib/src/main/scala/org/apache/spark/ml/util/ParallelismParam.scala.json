[{
  "comments": [{
    "author": {
      "login": "BryanCutler"
    },
    "body": "I think `HasParallelism` might be a more consistent name for the trait",
    "commit": "2a335fec1a4527e4970e88c10555d7d3f0375c35",
    "createdAt": "2017-06-23T06:50:44Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import java.util.concurrent.ExecutorService\n+\n+import com.google.common.util.concurrent.MoreExecutors\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * Common parameter for estimators trained in a multithreaded environment.\n+ */\n+private[ml] trait ParallelismParam extends Params {"
  }],
  "prId": 18281
}, {
  "comments": [{
    "author": {
      "login": "BryanCutler"
    },
    "body": "this will need to be a more general description if it's a shared param",
    "commit": "2a335fec1a4527e4970e88c10555d7d3f0375c35",
    "createdAt": "2017-06-23T06:51:18Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import java.util.concurrent.ExecutorService\n+\n+import com.google.common.util.concurrent.MoreExecutors\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * Common parameter for estimators trained in a multithreaded environment.\n+ */\n+private[ml] trait ParallelismParam extends Params {\n+\n+  /**\n+   * param for the number of processes to use when running parallel one vs. rest\n+   * The implementation of parallel one vs. rest runs the classification for\n+   * each class in a separate process.\n+   * @group param\n+   */\n+  @Since(\"2.3.0\")\n+  val parallelism = new IntParam(this, \"parallelism\",\n+    \"the number of processes to use when running parallel one vs. rest\", ParamValidators.gtEq(1))"
  }],
  "prId": 18281
}, {
  "comments": [{
    "author": {
      "login": "BryanCutler"
    },
    "body": "@MLnick suggested this be an expert param on my PR, probably a good idea",
    "commit": "2a335fec1a4527e4970e88c10555d7d3f0375c35",
    "createdAt": "2017-06-23T06:53:41Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import java.util.concurrent.ExecutorService\n+\n+import com.google.common.util.concurrent.MoreExecutors\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * Common parameter for estimators trained in a multithreaded environment.\n+ */\n+private[ml] trait ParallelismParam extends Params {\n+\n+  /**\n+   * param for the number of processes to use when running parallel one vs. rest\n+   * The implementation of parallel one vs. rest runs the classification for\n+   * each class in a separate process.\n+   * @group param\n+   */\n+  @Since(\"2.3.0\")\n+  val parallelism = new IntParam(this, \"parallelism\",\n+    \"the number of processes to use when running parallel one vs. rest\", ParamValidators.gtEq(1))\n+\n+  setDefault(\n+    parallelism -> 1\n+  )\n+\n+  /** @group getParam */"
  }],
  "prId": 18281
}, {
  "comments": [{
    "author": {
      "login": "BryanCutler"
    },
    "body": "I think pattern matching is cleaner that using `if.. return.. else`",
    "commit": "2a335fec1a4527e4970e88c10555d7d3f0375c35",
    "createdAt": "2017-06-23T06:54:42Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import java.util.concurrent.ExecutorService\n+\n+import com.google.common.util.concurrent.MoreExecutors\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * Common parameter for estimators trained in a multithreaded environment.\n+ */\n+private[ml] trait ParallelismParam extends Params {\n+\n+  /**\n+   * param for the number of processes to use when running parallel one vs. rest\n+   * The implementation of parallel one vs. rest runs the classification for\n+   * each class in a separate process.\n+   * @group param\n+   */\n+  @Since(\"2.3.0\")\n+  val parallelism = new IntParam(this, \"parallelism\",\n+    \"the number of processes to use when running parallel one vs. rest\", ParamValidators.gtEq(1))\n+\n+  setDefault(\n+    parallelism -> 1\n+  )\n+\n+  /** @group getParam */\n+  def getParallelism: Int = $(parallelism)\n+\n+  /** @group setParam */\n+  @Since(\"2.3.0\")\n+  def setParallelism(value: Int): this.type = {\n+    set(parallelism, value)\n+  }\n+\n+  def getExecutorService: ExecutorService = {\n+    if (getParallelism == 1) {"
  }],
  "prId": 18281
}, {
  "comments": [{
    "author": {
      "login": "BryanCutler"
    },
    "body": "So after thinking about this, we shouldn't directly use `MoreExecutors.sameThreadExecutor()` that comes from guava.  This is deprecated in a newer version and replaced by `directExecutor` or something.  Instead, just make use of the one from Spark `ThreadUtils` only that already wraps it in an `ExecutionContext`, so you will need to use that.",
    "commit": "2a335fec1a4527e4970e88c10555d7d3f0375c35",
    "createdAt": "2017-06-23T06:57:29Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util\n+\n+import java.util.concurrent.ExecutorService\n+\n+import com.google.common.util.concurrent.MoreExecutors\n+\n+import org.apache.spark.annotation.Since\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * Common parameter for estimators trained in a multithreaded environment.\n+ */\n+private[ml] trait ParallelismParam extends Params {\n+\n+  /**\n+   * param for the number of processes to use when running parallel one vs. rest\n+   * The implementation of parallel one vs. rest runs the classification for\n+   * each class in a separate process.\n+   * @group param\n+   */\n+  @Since(\"2.3.0\")\n+  val parallelism = new IntParam(this, \"parallelism\",\n+    \"the number of processes to use when running parallel one vs. rest\", ParamValidators.gtEq(1))\n+\n+  setDefault(\n+    parallelism -> 1\n+  )\n+\n+  /** @group getParam */\n+  def getParallelism: Int = $(parallelism)\n+\n+  /** @group setParam */\n+  @Since(\"2.3.0\")\n+  def setParallelism(value: Int): this.type = {\n+    set(parallelism, value)\n+  }\n+\n+  def getExecutorService: ExecutorService = {\n+    if (getParallelism == 1) {\n+      return MoreExecutors.sameThreadExecutor()"
  }],
  "prId": 18281
}, {
  "comments": [{
    "author": {
      "login": "BryanCutler"
    },
    "body": "I'm not sure this is the best place for this, what do you think @jkbradley ?",
    "commit": "2a335fec1a4527e4970e88c10555d7d3f0375c35",
    "createdAt": "2017-06-23T07:03:37Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.util"
  }],
  "prId": 18281
}]