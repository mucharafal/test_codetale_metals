[{
  "comments": [{
    "author": {
      "login": "hhbyyh"
    },
    "body": "I added this as an identifier, so during loading we know which JSON converter to invoke. \r\n\r\nIf this is a good idea, maybe JsonVectorConverter should also have the className, to be used in saving only for now. (Loading will not be changed to be compatible with old models)\r\n\r\n",
    "commit": "579945668e6f7e93d76102185bdf1d274e6c7773",
    "createdAt": "2017-10-18T07:12:28Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.ml.linalg\n+\n+import org.json4s.DefaultFormats\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods.{compact, parse => parseJson, render}\n+\n+private[ml] object JsonMatrixConverter {\n+\n+  /** Unique class name for identifying JSON object encoded by this class. */\n+  val className = \"org.apache.spark.ml.linalg.Matrix\""
  }, {
    "author": {
      "login": "yanboliang"
    },
    "body": "I'd suggest a more shorter string(or integer) to identify this is a matrix, it should be huge burden to store so long metadata string for a matrix with several elements. ",
    "commit": "579945668e6f7e93d76102185bdf1d274e6c7773",
    "createdAt": "2017-11-07T22:59:00Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.ml.linalg\n+\n+import org.json4s.DefaultFormats\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods.{compact, parse => parseJson, render}\n+\n+private[ml] object JsonMatrixConverter {\n+\n+  /** Unique class name for identifying JSON object encoded by this class. */\n+  val className = \"org.apache.spark.ml.linalg.Matrix\""
  }, {
    "author": {
      "login": "yanboliang"
    },
    "body": "Or can we just use ```type``` to identify vector and matrix? For example, ```type``` less than 10 is reserved for vector and more than 10 is for matrix. What do you think of it?",
    "commit": "579945668e6f7e93d76102185bdf1d274e6c7773",
    "createdAt": "2017-11-07T23:09:27Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.ml.linalg\n+\n+import org.json4s.DefaultFormats\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods.{compact, parse => parseJson, render}\n+\n+private[ml] object JsonMatrixConverter {\n+\n+  /** Unique class name for identifying JSON object encoded by this class. */\n+  val className = \"org.apache.spark.ml.linalg.Matrix\""
  }, {
    "author": {
      "login": "hhbyyh"
    },
    "body": "Sure. I can see your point. An example for the json,\r\n{\"class\":\"org.apache.spark.ml.linalg.Matrix\",\"type\":0,\"numRows\":3,\"numCols\":2,\"colPtrs\":[0,1,3,4],\"rowIndices\":[1,0,1,0],\"values\":[1.21,2.3,9.8,9.0],\"isTransposed\":true}\r\n\r\n This is primarily for parameter serialization and I assume there will not be many instances. Sure we can use Int for `class` or different ranges of `type` to distinguish different classes. While storage efficiency is important, I also want to have a solution that's easy to extend for future and friendly for debugging or trouble shooting. Thus keeping the literal class info in the json is still attractive to me. Is it OK if we use `class: matrix` for this?",
    "commit": "579945668e6f7e93d76102185bdf1d274e6c7773",
    "createdAt": "2017-11-13T01:02:30Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.ml.linalg\n+\n+import org.json4s.DefaultFormats\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods.{compact, parse => parseJson, render}\n+\n+private[ml] object JsonMatrixConverter {\n+\n+  /** Unique class name for identifying JSON object encoded by this class. */\n+  val className = \"org.apache.spark.ml.linalg.Matrix\""
  }, {
    "author": {
      "login": "WeichenXu123"
    },
    "body": "I think `class: \"matrix\"` is OK. shorter identifier is better.",
    "commit": "579945668e6f7e93d76102185bdf1d274e6c7773",
    "createdAt": "2017-11-13T09:42:00Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.ml.linalg\n+\n+import org.json4s.DefaultFormats\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods.{compact, parse => parseJson, render}\n+\n+private[ml] object JsonMatrixConverter {\n+\n+  /** Unique class name for identifying JSON object encoded by this class. */\n+  val className = \"org.apache.spark.ml.linalg.Matrix\""
  }, {
    "author": {
      "login": "yanboliang"
    },
    "body": "@hhbyyh You have got a point there, agree.",
    "commit": "579945668e6f7e93d76102185bdf1d274e6c7773",
    "createdAt": "2017-12-07T01:44:43Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.ml.linalg\n+\n+import org.json4s.DefaultFormats\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods.{compact, parse => parseJson, render}\n+\n+private[ml] object JsonMatrixConverter {\n+\n+  /** Unique class name for identifying JSON object encoded by this class. */\n+  val className = \"org.apache.spark.ml.linalg.Matrix\""
  }],
  "prId": 19525
}]