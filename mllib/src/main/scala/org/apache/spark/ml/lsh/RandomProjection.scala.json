[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Can we use spark vector? We have BLAS library (`BLAS.dot`) for spark vector and you don't need to convert to Breeze and back to spark vector below.\n",
    "commit": "35708458a0ee156c097ca604efeafaa37d3c8a6d",
    "createdAt": "2016-09-19T08:12:56Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.lsh\n+\n+import scala.util.Random\n+\n+import breeze.linalg.functions.euclideanDistance\n+import breeze.linalg.normalize\n+\n+import org.apache.spark.ml.linalg.{Vector, Vectors}\n+import org.apache.spark.ml.param.{DoubleParam, Params, ParamValidators}\n+import org.apache.spark.ml.util.Identifiable\n+\n+/**\n+ * Params for [[RandomProjection]].\n+ */\n+private[ml] trait RandomProjectionParams extends Params {\n+  val bucketLength: DoubleParam = new DoubleParam(this, \"bucketLength\",\n+    \"the length of each hash bucket\", ParamValidators.gt(0))\n+}\n+\n+class RandomProjectionModel(\n+    override val uid: String,\n+    val randUnitVectors: Array[breeze.linalg.Vector[Double]])"
  }, {
    "author": {
      "login": "Yunni"
    },
    "body": "Done.\n",
    "commit": "35708458a0ee156c097ca604efeafaa37d3c8a6d",
    "createdAt": "2016-09-19T22:43:40Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.lsh\n+\n+import scala.util.Random\n+\n+import breeze.linalg.functions.euclideanDistance\n+import breeze.linalg.normalize\n+\n+import org.apache.spark.ml.linalg.{Vector, Vectors}\n+import org.apache.spark.ml.param.{DoubleParam, Params, ParamValidators}\n+import org.apache.spark.ml.util.Identifiable\n+\n+/**\n+ * Params for [[RandomProjection]].\n+ */\n+private[ml] trait RandomProjectionParams extends Params {\n+  val bucketLength: DoubleParam = new DoubleParam(this, \"bucketLength\",\n+    \"the length of each hash bucket\", ParamValidators.gt(0))\n+}\n+\n+class RandomProjectionModel(\n+    override val uid: String,\n+    val randUnitVectors: Array[breeze.linalg.Vector[Double]])"
  }],
  "prId": 15148
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "`Vectors.sqdist` is specified for spark vector. We can use it and get its square root.\n",
    "commit": "35708458a0ee156c097ca604efeafaa37d3c8a6d",
    "createdAt": "2016-09-19T08:17:59Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.lsh\n+\n+import scala.util.Random\n+\n+import breeze.linalg.functions.euclideanDistance\n+import breeze.linalg.normalize\n+\n+import org.apache.spark.ml.linalg.{Vector, Vectors}\n+import org.apache.spark.ml.param.{DoubleParam, Params, ParamValidators}\n+import org.apache.spark.ml.util.Identifiable\n+\n+/**\n+ * Params for [[RandomProjection]].\n+ */\n+private[ml] trait RandomProjectionParams extends Params {\n+  val bucketLength: DoubleParam = new DoubleParam(this, \"bucketLength\",\n+    \"the length of each hash bucket\", ParamValidators.gt(0))\n+}\n+\n+class RandomProjectionModel(\n+    override val uid: String,\n+    val randUnitVectors: Array[breeze.linalg.Vector[Double]])\n+  extends LSHModel[Vector, RandomProjectionModel] with RandomProjectionParams {\n+\n+  override protected[this] val hashFunction: (Vector) => Vector = {\n+    key: Vector => {\n+      val hashValues: Array[Double] = randUnitVectors.map({\n+        randUnitVector => Math.floor(key.asBreeze.dot(randUnitVector) / $(bucketLength))\n+      })\n+      Vectors.dense(hashValues)\n+    }\n+  }\n+\n+  override protected[this] def keyDistance(x: Vector, y: Vector): Double = {\n+    euclideanDistance(x.asBreeze, y.asBreeze)"
  }, {
    "author": {
      "login": "Yunni"
    },
    "body": "Done.\n",
    "commit": "35708458a0ee156c097ca604efeafaa37d3c8a6d",
    "createdAt": "2016-09-19T22:43:46Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.lsh\n+\n+import scala.util.Random\n+\n+import breeze.linalg.functions.euclideanDistance\n+import breeze.linalg.normalize\n+\n+import org.apache.spark.ml.linalg.{Vector, Vectors}\n+import org.apache.spark.ml.param.{DoubleParam, Params, ParamValidators}\n+import org.apache.spark.ml.util.Identifiable\n+\n+/**\n+ * Params for [[RandomProjection]].\n+ */\n+private[ml] trait RandomProjectionParams extends Params {\n+  val bucketLength: DoubleParam = new DoubleParam(this, \"bucketLength\",\n+    \"the length of each hash bucket\", ParamValidators.gt(0))\n+}\n+\n+class RandomProjectionModel(\n+    override val uid: String,\n+    val randUnitVectors: Array[breeze.linalg.Vector[Double]])\n+  extends LSHModel[Vector, RandomProjectionModel] with RandomProjectionParams {\n+\n+  override protected[this] val hashFunction: (Vector) => Vector = {\n+    key: Vector => {\n+      val hashValues: Array[Double] = randUnitVectors.map({\n+        randUnitVector => Math.floor(key.asBreeze.dot(randUnitVector) / $(bucketLength))\n+      })\n+      Vectors.dense(hashValues)\n+    }\n+  }\n+\n+  override protected[this] def keyDistance(x: Vector, y: Vector): Double = {\n+    euclideanDistance(x.asBreeze, y.asBreeze)"
  }],
  "prId": 15148
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "As mentioned above, we can use spark vector to avoid Breeze conversion.\n",
    "commit": "35708458a0ee156c097ca604efeafaa37d3c8a6d",
    "createdAt": "2016-09-19T08:18:44Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.lsh\n+\n+import scala.util.Random\n+\n+import breeze.linalg.functions.euclideanDistance\n+import breeze.linalg.normalize\n+\n+import org.apache.spark.ml.linalg.{Vector, Vectors}\n+import org.apache.spark.ml.param.{DoubleParam, Params, ParamValidators}\n+import org.apache.spark.ml.util.Identifiable\n+\n+/**\n+ * Params for [[RandomProjection]].\n+ */\n+private[ml] trait RandomProjectionParams extends Params {\n+  val bucketLength: DoubleParam = new DoubleParam(this, \"bucketLength\",\n+    \"the length of each hash bucket\", ParamValidators.gt(0))\n+}\n+\n+class RandomProjectionModel(\n+    override val uid: String,\n+    val randUnitVectors: Array[breeze.linalg.Vector[Double]])\n+  extends LSHModel[Vector, RandomProjectionModel] with RandomProjectionParams {\n+\n+  override protected[this] val hashFunction: (Vector) => Vector = {\n+    key: Vector => {\n+      val hashValues: Array[Double] = randUnitVectors.map({\n+        randUnitVector => Math.floor(key.asBreeze.dot(randUnitVector) / $(bucketLength))\n+      })\n+      Vectors.dense(hashValues)\n+    }\n+  }\n+\n+  override protected[this] def keyDistance(x: Vector, y: Vector): Double = {\n+    euclideanDistance(x.asBreeze, y.asBreeze)\n+  }\n+}\n+\n+class RandomProjection(override val uid: String) extends LSH[Vector, RandomProjectionModel]\n+  with RandomProjectionParams {\n+\n+  private[this] var inputDim = -1\n+\n+  private[this] lazy val randUnitVectors: Array[breeze.linalg.Vector[Double]] = {"
  }, {
    "author": {
      "login": "Yunni"
    },
    "body": "Done.\n",
    "commit": "35708458a0ee156c097ca604efeafaa37d3c8a6d",
    "createdAt": "2016-09-19T22:43:52Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.lsh\n+\n+import scala.util.Random\n+\n+import breeze.linalg.functions.euclideanDistance\n+import breeze.linalg.normalize\n+\n+import org.apache.spark.ml.linalg.{Vector, Vectors}\n+import org.apache.spark.ml.param.{DoubleParam, Params, ParamValidators}\n+import org.apache.spark.ml.util.Identifiable\n+\n+/**\n+ * Params for [[RandomProjection]].\n+ */\n+private[ml] trait RandomProjectionParams extends Params {\n+  val bucketLength: DoubleParam = new DoubleParam(this, \"bucketLength\",\n+    \"the length of each hash bucket\", ParamValidators.gt(0))\n+}\n+\n+class RandomProjectionModel(\n+    override val uid: String,\n+    val randUnitVectors: Array[breeze.linalg.Vector[Double]])\n+  extends LSHModel[Vector, RandomProjectionModel] with RandomProjectionParams {\n+\n+  override protected[this] val hashFunction: (Vector) => Vector = {\n+    key: Vector => {\n+      val hashValues: Array[Double] = randUnitVectors.map({\n+        randUnitVector => Math.floor(key.asBreeze.dot(randUnitVector) / $(bucketLength))\n+      })\n+      Vectors.dense(hashValues)\n+    }\n+  }\n+\n+  override protected[this] def keyDistance(x: Vector, y: Vector): Double = {\n+    euclideanDistance(x.asBreeze, y.asBreeze)\n+  }\n+}\n+\n+class RandomProjection(override val uid: String) extends LSH[Vector, RandomProjectionModel]\n+  with RandomProjectionParams {\n+\n+  private[this] var inputDim = -1\n+\n+  private[this] lazy val randUnitVectors: Array[breeze.linalg.Vector[Double]] = {"
  }],
  "prId": 15148
}]