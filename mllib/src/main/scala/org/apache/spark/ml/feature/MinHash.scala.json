[{
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "@jkbradley is it not more confusing to not have any reference or further explanation here? You mentioned in https://github.com/apache/spark/pull/15148#issuecomment-258991190 to remove this, but should we not have some doc here or a better reference instead of nothing?\n",
    "commit": "6aac8b343c5ea3a91b8517a2d3f47ed055ece9ad",
    "createdAt": "2016-11-09T11:20:34Z",
    "diffHunk": "@@ -32,13 +32,7 @@ import org.apache.spark.sql.types.StructType\n  * :: Experimental ::\n  *\n  * Model produced by [[MinHash]], where multiple hash functions are stored. Each hash function is\n- * a perfect hash function:\n- *    `h_i(x) = (x * k_i mod prime) mod numEntries`\n- * where `k_i` is the i-th coefficient, and both `x` and `k_i` are from `Z_prime^*`\n- *\n- * Reference:\n- * [[https://en.wikipedia.org/wiki/Perfect_hash_function Wikipedia on Perfect Hash Function]]\n- *\n+ * a perfect hash."
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "I don't think it's technically a perfect hash function because it's being \"perfect\" depends on the number of buckets used, right?\n",
    "commit": "6aac8b343c5ea3a91b8517a2d3f47ed055ece9ad",
    "createdAt": "2016-11-09T18:07:13Z",
    "diffHunk": "@@ -32,13 +32,7 @@ import org.apache.spark.sql.types.StructType\n  * :: Experimental ::\n  *\n  * Model produced by [[MinHash]], where multiple hash functions are stored. Each hash function is\n- * a perfect hash function:\n- *    `h_i(x) = (x * k_i mod prime) mod numEntries`\n- * where `k_i` is the i-th coefficient, and both `x` and `k_i` are from `Z_prime^*`\n- *\n- * Reference:\n- * [[https://en.wikipedia.org/wiki/Perfect_hash_function Wikipedia on Perfect Hash Function]]\n- *\n+ * a perfect hash."
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "(But I do like the idea of having more references.)\n",
    "commit": "6aac8b343c5ea3a91b8517a2d3f47ed055ece9ad",
    "createdAt": "2016-11-09T18:37:13Z",
    "diffHunk": "@@ -32,13 +32,7 @@ import org.apache.spark.sql.types.StructType\n  * :: Experimental ::\n  *\n  * Model produced by [[MinHash]], where multiple hash functions are stored. Each hash function is\n- * a perfect hash function:\n- *    `h_i(x) = (x * k_i mod prime) mod numEntries`\n- * where `k_i` is the i-th coefficient, and both `x` and `k_i` are from `Z_prime^*`\n- *\n- * Reference:\n- * [[https://en.wikipedia.org/wiki/Perfect_hash_function Wikipedia on Perfect Hash Function]]\n- *\n+ * a perfect hash."
  }, {
    "author": {
      "login": "sethah"
    },
    "body": "Maybe:\n\n``` scala\n/** \n * Model produced by [[MinHash]], where multiple hash functions are stored. Each hash function is\n * a perfect hash function for a specific set `S` with cardinality equal to `numEntries`:\n *    `h_i(x) = ((x \\cdot k_i) \\mod prime) \\mod numEntries`\n```\n",
    "commit": "6aac8b343c5ea3a91b8517a2d3f47ed055ece9ad",
    "createdAt": "2016-11-09T18:59:43Z",
    "diffHunk": "@@ -32,13 +32,7 @@ import org.apache.spark.sql.types.StructType\n  * :: Experimental ::\n  *\n  * Model produced by [[MinHash]], where multiple hash functions are stored. Each hash function is\n- * a perfect hash function:\n- *    `h_i(x) = (x * k_i mod prime) mod numEntries`\n- * where `k_i` is the i-th coefficient, and both `x` and `k_i` are from `Z_prime^*`\n- *\n- * Reference:\n- * [[https://en.wikipedia.org/wiki/Perfect_hash_function Wikipedia on Perfect Hash Function]]\n- *\n+ * a perfect hash."
  }, {
    "author": {
      "login": "Yunni"
    },
    "body": "Fixed. Thanks for all of your suggestions!\n",
    "commit": "6aac8b343c5ea3a91b8517a2d3f47ed055ece9ad",
    "createdAt": "2016-11-09T23:12:43Z",
    "diffHunk": "@@ -32,13 +32,7 @@ import org.apache.spark.sql.types.StructType\n  * :: Experimental ::\n  *\n  * Model produced by [[MinHash]], where multiple hash functions are stored. Each hash function is\n- * a perfect hash function:\n- *    `h_i(x) = (x * k_i mod prime) mod numEntries`\n- * where `k_i` is the i-th coefficient, and both `x` and `k_i` are from `Z_prime^*`\n- *\n- * Reference:\n- * [[https://en.wikipedia.org/wiki/Perfect_hash_function Wikipedia on Perfect Hash Function]]\n- *\n+ * a perfect hash."
  }],
  "prId": 15800
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Why just 0 and 1? I think if more pairs of values are the same, more the two vectors are closer, right?\n",
    "commit": "6aac8b343c5ea3a91b8517a2d3f47ed055ece9ad",
    "createdAt": "2016-11-10T06:35:37Z",
    "diffHunk": "@@ -76,7 +72,19 @@ class MinHashModel private[ml] (\n   @Since(\"2.1.0\")\n   override protected[ml] def hashDistance(x: Vector, y: Vector): Double = {\n     // Since it's generated by hashing, it will be a pair of dense vectors.\n-    x.toDense.values.zip(y.toDense.values).map(pair => math.abs(pair._1 - pair._2)).min\n+    if (x.toDense.values.zip(y.toDense.values).exists(pair => pair._1 == pair._2)) {",
    "line": 20
  }, {
    "author": {
      "login": "sethah"
    },
    "body": "See discussion above :)\n",
    "commit": "6aac8b343c5ea3a91b8517a2d3f47ed055ece9ad",
    "createdAt": "2016-11-10T16:23:55Z",
    "diffHunk": "@@ -76,7 +72,19 @@ class MinHashModel private[ml] (\n   @Since(\"2.1.0\")\n   override protected[ml] def hashDistance(x: Vector, y: Vector): Double = {\n     // Since it's generated by hashing, it will be a pair of dense vectors.\n-    x.toDense.values.zip(y.toDense.values).map(pair => math.abs(pair._1 - pair._2)).min\n+    if (x.toDense.values.zip(y.toDense.values).exists(pair => pair._1 == pair._2)) {",
    "line": 20
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "I think I do more agree on the comment from @jkbradley at https://github.com/apache/spark/pull/15800#issuecomment-259298082, if I understand correctly some terms here.\n\nIs the indicator meaning a matching hashing value between two vectors from one hashing function, i.e., h_i?\nIf this understanding is correct, I think averaging indicators should be the right way to compute MinHash's hash distance.\n",
    "commit": "6aac8b343c5ea3a91b8517a2d3f47ed055ece9ad",
    "createdAt": "2016-11-11T02:33:18Z",
    "diffHunk": "@@ -76,7 +72,19 @@ class MinHashModel private[ml] (\n   @Since(\"2.1.0\")\n   override protected[ml] def hashDistance(x: Vector, y: Vector): Double = {\n     // Since it's generated by hashing, it will be a pair of dense vectors.\n-    x.toDense.values.zip(y.toDense.values).map(pair => math.abs(pair._1 - pair._2)).min\n+    if (x.toDense.values.zip(y.toDense.values).exists(pair => pair._1 == pair._2)) {",
    "line": 20
  }],
  "prId": 15800
}]