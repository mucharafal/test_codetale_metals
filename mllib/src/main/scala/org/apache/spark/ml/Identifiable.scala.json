[{
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "How about uuid or uniqueId or uniqId?  `uid` is usually short for user id\n",
    "commit": "2cc93fd7104b76a7cfb6428b3b3deade76e91590",
    "createdAt": "2014-11-06T05:52:43Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml\n+\n+import java.util.UUID\n+\n+/**\n+ * Something with a unique id.\n+ */\n+trait Identifiable extends Serializable {\n+\n+  /**\n+   * A unique id for the object.\n+   */\n+  val uid: String = this.getClass.getSimpleName + \"-\" + Identifiable.randomUid"
  }],
  "prId": 3099
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Will this cause problems if users try to create instances of Identifiable on executors (e.g., in order to train a bunch of models locally)?\n",
    "commit": "2cc93fd7104b76a7cfb6428b3b3deade76e91590",
    "createdAt": "2014-11-10T20:43:29Z",
    "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml\n+\n+import java.util.UUID\n+\n+/**\n+ * Object with a unique id.\n+ */\n+trait Identifiable extends Serializable {\n+\n+  /**\n+   * A unique id for the object. The default implementation concatenates the class name, \"-\", and 8\n+   * random hex chars.\n+   */\n+  val uid: String = this.getClass.getSimpleName + \"-\" + UUID.randomUUID().toString.take(8)"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "This is not a lazy val. We should create the instance on local, serialize it, and then send it to workers.\n",
    "commit": "2cc93fd7104b76a7cfb6428b3b3deade76e91590",
    "createdAt": "2014-11-11T00:20:51Z",
    "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml\n+\n+import java.util.UUID\n+\n+/**\n+ * Object with a unique id.\n+ */\n+trait Identifiable extends Serializable {\n+\n+  /**\n+   * A unique id for the object. The default implementation concatenates the class name, \"-\", and 8\n+   * random hex chars.\n+   */\n+  val uid: String = this.getClass.getSimpleName + \"-\" + UUID.randomUUID().toString.take(8)"
  }],
  "prId": 3099
}]