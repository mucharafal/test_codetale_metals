[{
  "comments": [{
    "author": {
      "login": "WeichenXu123"
    },
    "body": "Actually, `updateParentImpurity` has no relation with any feature column, but here you pass in the `feature` column only want to use the `indices` array, passing anyone feature column will be OK. But, this looks weird, maybe it can be better designed.",
    "commit": "d86dd18e47451c2e4463c68db441f92a898ac765",
    "createdAt": "2017-10-16T09:02:33Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.tree.impl\n+\n+import org.apache.spark.ml.tree.Split\n+\n+/**\n+ * Helpers for updating DTStatsAggregators during collection of sufficient stats for tree training.\n+ */\n+private[impl] object AggUpdateUtils {\n+\n+  /**\n+   * Updates the parent node stats of the passed-in impurity aggregator with the labels\n+   * corresponding to the feature values at indices [from, to).\n+   */\n+  private[impl] def updateParentImpurity(\n+      statsAggregator: DTStatsAggregator,\n+      col: FeatureVector,"
  }],
  "prId": 19433
}, {
  "comments": [{
    "author": {
      "login": "WeichenXu123"
    },
    "body": "You only need to pass in the `featureSplit: Array[Split]`, don't pass all splits for all features.",
    "commit": "d86dd18e47451c2e4463c68db441f92a898ac765",
    "createdAt": "2017-10-16T09:04:07Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.tree.impl\n+\n+import org.apache.spark.ml.tree.Split\n+\n+/**\n+ * Helpers for updating DTStatsAggregators during collection of sufficient stats for tree training.\n+ */\n+private[impl] object AggUpdateUtils {\n+\n+  /**\n+   * Updates the parent node stats of the passed-in impurity aggregator with the labels\n+   * corresponding to the feature values at indices [from, to).\n+   */\n+  private[impl] def updateParentImpurity(\n+      statsAggregator: DTStatsAggregator,\n+      col: FeatureVector,\n+      from: Int,\n+      to: Int,\n+      instanceWeights: Array[Double],\n+      labels: Array[Double]): Unit = {\n+    from.until(to).foreach { idx =>\n+      val rowIndex = col.indices(idx)\n+      val label = labels(rowIndex)\n+      statsAggregator.updateParent(label, instanceWeights(rowIndex))\n+    }\n+  }\n+\n+  /**\n+   * Update aggregator for an (unordered feature, label) pair\n+   * @param splits Array of arrays of splits for each feature; splits(i) = splits for feature i.\n+   */\n+  private[impl] def updateUnorderedFeature(\n+      agg: DTStatsAggregator,\n+      featureValue: Int,\n+      label: Double,\n+      featureIndex: Int,\n+      featureIndexIdx: Int,\n+      splits: Array[Array[Split]],"
  }, {
    "author": {
      "login": "smurching"
    },
    "body": "Good call, I'll make this change.",
    "commit": "d86dd18e47451c2e4463c68db441f92a898ac765",
    "createdAt": "2017-10-25T00:46:43Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.tree.impl\n+\n+import org.apache.spark.ml.tree.Split\n+\n+/**\n+ * Helpers for updating DTStatsAggregators during collection of sufficient stats for tree training.\n+ */\n+private[impl] object AggUpdateUtils {\n+\n+  /**\n+   * Updates the parent node stats of the passed-in impurity aggregator with the labels\n+   * corresponding to the feature values at indices [from, to).\n+   */\n+  private[impl] def updateParentImpurity(\n+      statsAggregator: DTStatsAggregator,\n+      col: FeatureVector,\n+      from: Int,\n+      to: Int,\n+      instanceWeights: Array[Double],\n+      labels: Array[Double]): Unit = {\n+    from.until(to).foreach { idx =>\n+      val rowIndex = col.indices(idx)\n+      val label = labels(rowIndex)\n+      statsAggregator.updateParent(label, instanceWeights(rowIndex))\n+    }\n+  }\n+\n+  /**\n+   * Update aggregator for an (unordered feature, label) pair\n+   * @param splits Array of arrays of splits for each feature; splits(i) = splits for feature i.\n+   */\n+  private[impl] def updateUnorderedFeature(\n+      agg: DTStatsAggregator,\n+      featureValue: Int,\n+      label: Double,\n+      featureIndex: Int,\n+      featureIndexIdx: Int,\n+      splits: Array[Array[Split]],"
  }],
  "prId": 19433
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "featureIndex is not used",
    "commit": "d86dd18e47451c2e4463c68db441f92a898ac765",
    "createdAt": "2017-11-10T04:59:05Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.tree.impl\n+\n+import org.apache.spark.ml.tree.Split\n+\n+/**\n+ * Helpers for updating DTStatsAggregators during collection of sufficient stats for tree training.\n+ */\n+private[impl] object AggUpdateUtils {\n+\n+  /**\n+   * Updates the parent node stats of the passed-in impurity aggregator with the labels\n+   * corresponding to the feature values at indices [from, to).\n+   * @param indices Array of row indices for feature values; indices(i) = row index of the ith\n+   *                feature value\n+   */\n+  private[impl] def updateParentImpurity(\n+      statsAggregator: DTStatsAggregator,\n+      indices: Array[Int],\n+      from: Int,\n+      to: Int,\n+      instanceWeights: Array[Double],\n+      labels: Array[Double]): Unit = {\n+    from.until(to).foreach { idx =>\n+      val rowIndex = indices(idx)\n+      val label = labels(rowIndex)\n+      statsAggregator.updateParent(label, instanceWeights(rowIndex))\n+    }\n+  }\n+\n+  /**\n+   * Update aggregator for an (unordered feature, label) pair\n+   * @param featureSplits Array of splits for the current feature\n+   */\n+  private[impl] def updateUnorderedFeature(\n+      agg: DTStatsAggregator,\n+      featureValue: Int,\n+      label: Double,\n+      featureIndex: Int,\n+      featureIndexIdx: Int,\n+      featureSplits: Array[Split],\n+      instanceWeight: Double): Unit = {\n+    val leftNodeFeatureOffset = agg.getFeatureOffset(featureIndexIdx)\n+    // Each unordered split has a corresponding bin for impurity stats of data points that fall\n+    // onto the left side of the split. For each unordered split, update left-side bin if applicable\n+    // for the current data point.\n+    val numSplits = agg.metadata.numSplits(featureIndex)\n+    var splitIndex = 0\n+    while (splitIndex < numSplits) {\n+      if (featureSplits(splitIndex).shouldGoLeft(featureValue, featureSplits)) {\n+        agg.featureUpdate(leftNodeFeatureOffset, splitIndex, label, instanceWeight)\n+      }\n+      splitIndex += 1\n+    }\n+  }\n+\n+  /** Update aggregator for an (ordered feature, label) pair */\n+  private[impl] def updateOrderedFeature(\n+      agg: DTStatsAggregator,\n+      featureValue: Int,\n+      label: Double,\n+      featureIndex: Int,"
  }],
  "prId": 19433
}]