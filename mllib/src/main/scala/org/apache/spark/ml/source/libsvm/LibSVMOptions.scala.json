[{
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "We need multi-characters for the separator? Hive assumes a single character in `LINES TERMINATED BY` https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-CreateTableCreate/Drop/TruncateTable",
    "commit": "265dd48ce16fd62058f4515a9e91c67942b45ed7",
    "createdAt": "2017-07-10T14:45:27Z",
    "diffHunk": "@@ -41,11 +41,15 @@ private[libsvm] class LibSVMOptions(@transient private val parameters: CaseInsen\n     case o => throw new IllegalArgumentException(s\"Invalid value `$o` for parameter \" +\n       s\"`$VECTOR_TYPE`. Expected types are `sparse` and `dense`.\")\n   }\n+\n+  val lineSeparator: Option[String] = parameters.get(LINE_SEPARATOR)"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Yea, actually in case of Univocity, it requires 2 characters:\r\n\r\n```\r\nCsvWriterSettings settings = new CsvWriterSettings();\r\nsettings.getFormat().setLineSeparator(\"aaa\");\r\n```\r\n\r\n```\r\nException in thread \"main\" java.lang.IllegalArgumentException: Invalid line separator. Up to 2 characters are expected. Got 3 characters.\r\n\tat com.univocity.parsers.common.Format.setLineSeparator(Format.java:121)\r\n\tat com.univocity.parsers.common.Format.setLineSeparator(Format.java:109)\r\n```\r\n\r\nI don't see a reason to restrict this for now. At least, I can provide an usecase with Windows -`\\r\\n`.",
    "commit": "265dd48ce16fd62058f4515a9e91c67942b45ed7",
    "createdAt": "2017-07-10T15:22:06Z",
    "diffHunk": "@@ -41,11 +41,15 @@ private[libsvm] class LibSVMOptions(@transient private val parameters: CaseInsen\n     case o => throw new IllegalArgumentException(s\"Invalid value `$o` for parameter \" +\n       s\"`$VECTOR_TYPE`. Expected types are `sparse` and `dense`.\")\n   }\n+\n+  val lineSeparator: Option[String] = parameters.get(LINE_SEPARATOR)"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "yea, ok. But I couldn't just imagine an usecase to use more than two characters. It's okay to me that we'll follow committers decisions on this. Thanks!",
    "commit": "265dd48ce16fd62058f4515a9e91c67942b45ed7",
    "createdAt": "2017-07-10T15:36:06Z",
    "diffHunk": "@@ -41,11 +41,15 @@ private[libsvm] class LibSVMOptions(@transient private val parameters: CaseInsen\n     case o => throw new IllegalArgumentException(s\"Invalid value `$o` for parameter \" +\n       s\"`$VECTOR_TYPE`. Expected types are `sparse` and `dense`.\")\n   }\n+\n+  val lineSeparator: Option[String] = parameters.get(LINE_SEPARATOR)"
  }, {
    "author": {
      "login": "ash211"
    },
    "body": "I've seen datasets that have multi-character delimiters of more than 2 characters.  Specifically `|~|`\r\n\r\nSo yes there is a use case, but it's a long tail one.  I'd be happy to get this progress of up to 2 characters and work towards 3+ in a future PR",
    "commit": "265dd48ce16fd62058f4515a9e91c67942b45ed7",
    "createdAt": "2017-07-10T20:57:50Z",
    "diffHunk": "@@ -41,11 +41,15 @@ private[libsvm] class LibSVMOptions(@transient private val parameters: CaseInsen\n     case o => throw new IllegalArgumentException(s\"Invalid value `$o` for parameter \" +\n       s\"`$VECTOR_TYPE`. Expected types are `sparse` and `dense`.\")\n   }\n+\n+  val lineSeparator: Option[String] = parameters.get(LINE_SEPARATOR)"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "Could we put this option in a single place for these formats? I feel putting this option in each format looks a little messy...",
    "commit": "265dd48ce16fd62058f4515a9e91c67942b45ed7",
    "createdAt": "2017-07-11T03:05:26Z",
    "diffHunk": "@@ -41,11 +41,15 @@ private[libsvm] class LibSVMOptions(@transient private val parameters: CaseInsen\n     case o => throw new IllegalArgumentException(s\"Invalid value `$o` for parameter \" +\n       s\"`$VECTOR_TYPE`. Expected types are `sparse` and `dense`.\")\n   }\n+\n+  val lineSeparator: Option[String] = parameters.get(LINE_SEPARATOR)"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "Also, if we support one or two characters only,  I feel we better explicitly throw an exception for more than two characters here.",
    "commit": "265dd48ce16fd62058f4515a9e91c67942b45ed7",
    "createdAt": "2017-07-11T03:07:27Z",
    "diffHunk": "@@ -41,11 +41,15 @@ private[libsvm] class LibSVMOptions(@transient private val parameters: CaseInsen\n     case o => throw new IllegalArgumentException(s\"Invalid value `$o` for parameter \" +\n       s\"`$VECTOR_TYPE`. Expected types are `sparse` and `dense`.\")\n   }\n+\n+  val lineSeparator: Option[String] = parameters.get(LINE_SEPARATOR)"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "`compression` is also there for many datasources. Probably, let me try to open up a discussion about tying up those later.",
    "commit": "265dd48ce16fd62058f4515a9e91c67942b45ed7",
    "createdAt": "2017-07-11T03:53:02Z",
    "diffHunk": "@@ -41,11 +41,15 @@ private[libsvm] class LibSVMOptions(@transient private val parameters: CaseInsen\n     case o => throw new IllegalArgumentException(s\"Invalid value `$o` for parameter \" +\n       s\"`$VECTOR_TYPE`. Expected types are `sparse` and `dense`.\")\n   }\n+\n+  val lineSeparator: Option[String] = parameters.get(LINE_SEPARATOR)"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "ok, thanks!",
    "commit": "265dd48ce16fd62058f4515a9e91c67942b45ed7",
    "createdAt": "2017-07-11T03:57:53Z",
    "diffHunk": "@@ -41,11 +41,15 @@ private[libsvm] class LibSVMOptions(@transient private val parameters: CaseInsen\n     case o => throw new IllegalArgumentException(s\"Invalid value `$o` for parameter \" +\n       s\"`$VECTOR_TYPE`. Expected types are `sparse` and `dense`.\")\n   }\n+\n+  val lineSeparator: Option[String] = parameters.get(LINE_SEPARATOR)"
  }],
  "prId": 18581
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Please use the full name.",
    "commit": "265dd48ce16fd62058f4515a9e91c67942b45ed7",
    "createdAt": "2017-08-23T17:16:22Z",
    "diffHunk": "@@ -41,11 +41,15 @@ private[libsvm] class LibSVMOptions(@transient private val parameters: CaseInsen\n     case o => throw new IllegalArgumentException(s\"Invalid value `$o` for parameter \" +\n       s\"`$VECTOR_TYPE`. Expected types are `sparse` and `dense`.\")\n   }\n+\n+  val lineSeparator: Option[String] = parameters.get(LINE_SEPARATOR)\n+  lineSeparator.foreach(s => require(s.nonEmpty, s\"'$LINE_SEPARATOR' cannot be an empty string.\"))\n }\n \n private[libsvm] object LibSVMOptions {\n   val NUM_FEATURES = \"numFeatures\"\n   val VECTOR_TYPE = \"vectorType\"\n   val DENSE_VECTOR_TYPE = \"dense\"\n   val SPARSE_VECTOR_TYPE = \"sparse\"\n+  val LINE_SEPARATOR = \"lineSep\"",
    "line": 14
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "This name came after `sep` in CSV which resembled R. Do you prefer `separator` and `lineSeparator`?",
    "commit": "265dd48ce16fd62058f4515a9e91c67942b45ed7",
    "createdAt": "2017-08-23T22:37:00Z",
    "diffHunk": "@@ -41,11 +41,15 @@ private[libsvm] class LibSVMOptions(@transient private val parameters: CaseInsen\n     case o => throw new IllegalArgumentException(s\"Invalid value `$o` for parameter \" +\n       s\"`$VECTOR_TYPE`. Expected types are `sparse` and `dense`.\")\n   }\n+\n+  val lineSeparator: Option[String] = parameters.get(LINE_SEPARATOR)\n+  lineSeparator.foreach(s => require(s.nonEmpty, s\"'$LINE_SEPARATOR' cannot be an empty string.\"))\n }\n \n private[libsvm] object LibSVMOptions {\n   val NUM_FEATURES = \"numFeatures\"\n   val VECTOR_TYPE = \"vectorType\"\n   val DENSE_VECTOR_TYPE = \"dense\"\n   val SPARSE_VECTOR_TYPE = \"sparse\"\n+  val LINE_SEPARATOR = \"lineSep\"",
    "line": 14
  }, {
    "author": {
      "login": "gatorsmile"
    },
    "body": "Either `lineDelimiter` or `lineSeparator` looks fine. \r\n\r\nIn the future, we could also support field delimiters.",
    "commit": "265dd48ce16fd62058f4515a9e91c67942b45ed7",
    "createdAt": "2017-08-24T08:02:26Z",
    "diffHunk": "@@ -41,11 +41,15 @@ private[libsvm] class LibSVMOptions(@transient private val parameters: CaseInsen\n     case o => throw new IllegalArgumentException(s\"Invalid value `$o` for parameter \" +\n       s\"`$VECTOR_TYPE`. Expected types are `sparse` and `dense`.\")\n   }\n+\n+  val lineSeparator: Option[String] = parameters.get(LINE_SEPARATOR)\n+  lineSeparator.foreach(s => require(s.nonEmpty, s\"'$LINE_SEPARATOR' cannot be an empty string.\"))\n }\n \n private[libsvm] object LibSVMOptions {\n   val NUM_FEATURES = \"numFeatures\"\n   val VECTOR_TYPE = \"vectorType\"\n   val DENSE_VECTOR_TYPE = \"dense\"\n   val SPARSE_VECTOR_TYPE = \"sparse\"\n+  val LINE_SEPARATOR = \"lineSep\"",
    "line": 14
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I actually meant `sep` here:\r\n\r\nhttps://github.com/apache/spark/blob/3c0c2d09ca89c6b6247137823169db17847dfae3/sql/core/src/main/scala/org/apache/spark/sql/DataFrameReader.scala#L488-L489\r\n\r\nand was thinking of matching the name ..",
    "commit": "265dd48ce16fd62058f4515a9e91c67942b45ed7",
    "createdAt": "2017-08-24T08:24:10Z",
    "diffHunk": "@@ -41,11 +41,15 @@ private[libsvm] class LibSVMOptions(@transient private val parameters: CaseInsen\n     case o => throw new IllegalArgumentException(s\"Invalid value `$o` for parameter \" +\n       s\"`$VECTOR_TYPE`. Expected types are `sparse` and `dense`.\")\n   }\n+\n+  val lineSeparator: Option[String] = parameters.get(LINE_SEPARATOR)\n+  lineSeparator.foreach(s => require(s.nonEmpty, s\"'$LINE_SEPARATOR' cannot be an empty string.\"))\n }\n \n private[libsvm] object LibSVMOptions {\n   val NUM_FEATURES = \"numFeatures\"\n   val VECTOR_TYPE = \"vectorType\"\n   val DENSE_VECTOR_TYPE = \"dense\"\n   val SPARSE_VECTOR_TYPE = \"sparse\"\n+  val LINE_SEPARATOR = \"lineSep\"",
    "line": 14
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Just for history, it was `delimiter` but renamed to `sep`.",
    "commit": "265dd48ce16fd62058f4515a9e91c67942b45ed7",
    "createdAt": "2017-08-24T08:26:38Z",
    "diffHunk": "@@ -41,11 +41,15 @@ private[libsvm] class LibSVMOptions(@transient private val parameters: CaseInsen\n     case o => throw new IllegalArgumentException(s\"Invalid value `$o` for parameter \" +\n       s\"`$VECTOR_TYPE`. Expected types are `sparse` and `dense`.\")\n   }\n+\n+  val lineSeparator: Option[String] = parameters.get(LINE_SEPARATOR)\n+  lineSeparator.foreach(s => require(s.nonEmpty, s\"'$LINE_SEPARATOR' cannot be an empty string.\"))\n }\n \n private[libsvm] object LibSVMOptions {\n   val NUM_FEATURES = \"numFeatures\"\n   val VECTOR_TYPE = \"vectorType\"\n   val DENSE_VECTOR_TYPE = \"dense\"\n   val SPARSE_VECTOR_TYPE = \"sparse\"\n+  val LINE_SEPARATOR = \"lineSep\"",
    "line": 14
  }],
  "prId": 18581
}]