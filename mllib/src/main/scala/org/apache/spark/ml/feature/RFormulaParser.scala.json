[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Nit: we generally avoid postfix syntax as it generates a compiler warning in some cases. Just `left.add(t)` etc",
    "commit": "e911ae0da8437b3574cfa3ac70679d6c85156c7e",
    "createdAt": "2019-06-02T13:24:34Z",
    "diffHunk": "@@ -144,10 +155,50 @@ private[ml] case class ResolvedRFormula(\n  * R formula terms. See the R formula docs here for more information:\n  * http://stat.ethz.ch/R-manual/R-patched/library/stats/html/formula.html\n  */\n-private[ml] sealed trait Term\n+private[ml] sealed trait Term {\n+\n+  /** Default representation of a single Term as a part of summed terms. */\n+  def asTerms: Terms = Terms(Seq(this))\n+\n+  /** Creates a summation term by concatenation of terms. */\n+  def add(other: Term): Term = Terms(this.asTerms.terms ++ other.asTerms.terms)\n+\n+  /**\n+   * Fold by adding deletion terms to the left. Double negation\n+   * doesn't cancel deletion in order not to add extra terms, e.g.\n+   * a - (b - c) = a - Deletion(b) - Deletion(c) = a\n+   */\n+  def subtract(other: Term): Term = {\n+    other.asTerms.terms.foldLeft(this) {\n+      case (left, right) =>\n+        right match {\n+          case t: Deletion => left add t"
  }, {
    "author": {
      "login": "ozancicek"
    },
    "body": "ok, I got rid of those syntax",
    "commit": "e911ae0da8437b3574cfa3ac70679d6c85156c7e",
    "createdAt": "2019-06-03T09:14:22Z",
    "diffHunk": "@@ -144,10 +155,50 @@ private[ml] case class ResolvedRFormula(\n  * R formula terms. See the R formula docs here for more information:\n  * http://stat.ethz.ch/R-manual/R-patched/library/stats/html/formula.html\n  */\n-private[ml] sealed trait Term\n+private[ml] sealed trait Term {\n+\n+  /** Default representation of a single Term as a part of summed terms. */\n+  def asTerms: Terms = Terms(Seq(this))\n+\n+  /** Creates a summation term by concatenation of terms. */\n+  def add(other: Term): Term = Terms(this.asTerms.terms ++ other.asTerms.terms)\n+\n+  /**\n+   * Fold by adding deletion terms to the left. Double negation\n+   * doesn't cancel deletion in order not to add extra terms, e.g.\n+   * a - (b - c) = a - Deletion(b) - Deletion(c) = a\n+   */\n+  def subtract(other: Term): Term = {\n+    other.asTerms.terms.foldLeft(this) {\n+      case (left, right) =>\n+        right match {\n+          case t: Deletion => left add t"
  }],
  "prId": 24764
}]