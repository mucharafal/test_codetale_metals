[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Same here. `cross-validation` would appear under `TrainValidationSplit`.\n",
    "commit": "be64a131d020f642d569baef75c7f5c05420bad9",
    "createdAt": "2015-07-07T04:43:45Z",
    "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.tuning\n+\n+import scala.reflect.ClassTag\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.ml.evaluation.Evaluator\n+import org.apache.spark.ml.param._\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.ml.{Model, Estimator}\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.types.StructType\n+\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Common params for [[TrainValidatorSplitParams]] and [[CrossValidatorParams]].\n+ */\n+@DeveloperApi\n+private[ml] trait ValidatorParams extends Params {\n+\n+  /**\n+   * param for the estimator to be validated\n+   * @group param\n+   */\n+  val estimator: Param[Estimator[_]] = new Param(this, \"estimator\", \"estimator for selection\")\n+\n+  /** @group getParam */\n+  def getEstimator: Estimator[_] = $(estimator)\n+\n+  /**\n+   * param for estimator param maps\n+   * @group param\n+   */\n+  val estimatorParamMaps: Param[Array[ParamMap]] =\n+    new Param(this, \"estimatorParamMaps\", \"param maps for the estimator\")\n+\n+  /** @group getParam */\n+  def getEstimatorParamMaps: Array[ParamMap] = $(estimatorParamMaps)\n+\n+  /**\n+   * param for the evaluator used to select hyper-parameters that maximize the validated metric\n+   * @group param\n+   */\n+  val evaluator: Param[Evaluator] = new Param(this, \"evaluator\",\n+    \"evaluator used to select hyper-parameters that maximize the validated metric\")\n+\n+  /** @group getParam */\n+  def getEvaluator: Evaluator = $(evaluator)\n+}\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Abstract class for validation approaches for hyper-parameter tuning.\n+ */\n+@DeveloperApi\n+private[ml] abstract class Validator[M <: Model[M], V <: Validator[M, _] : ClassTag]\n+  (override val uid: String)\n+  extends Estimator[M]\n+  with Logging with ValidatorParams {\n+\n+  def this() = this(Identifiable.randomUID(\"cv\"))\n+\n+  /** @group setParam */\n+  def setEstimator(value: Estimator[_]): V = set(estimator, value).asInstanceOf[V]\n+\n+  /** @group setParam */\n+  def setEstimatorParamMaps(value: Array[ParamMap]): V =\n+    set(estimatorParamMaps, value).asInstanceOf[V]\n+\n+  /** @group setParam */\n+  def setEvaluator(value: Evaluator): V = set(evaluator, value).asInstanceOf[V]\n+\n+  override def fit(dataset: DataFrame): M = {\n+    val sqlCtx = dataset.sqlContext\n+    val est = $(estimator)\n+    val eval = $(evaluator)\n+    val epm = $(estimatorParamMaps)\n+    val numModels = epm.length\n+\n+    val metrics = validationLogic(dataset, est, eval, epm, numModels)\n+\n+    logInfo(s\"Average validation metrics: ${metrics.toSeq}\")\n+    val (bestMetric, bestIndex) = metrics.zipWithIndex.maxBy(_._1)\n+    logInfo(s\"Best set of parameters:\\n${epm(bestIndex)}\")\n+    logInfo(s\"Best cross-validation metric: $bestMetric.\")",
    "line": 103
  }],
  "prId": 6996
}]