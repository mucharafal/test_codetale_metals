[{
  "comments": [{
    "author": {
      "login": "yanboliang"
    },
    "body": "off-topic, but I think it's a bug. We should not allow users pass `fitIntercept` to control whether to fit intercept, this should be handled by formula. For example, if users specify formula `y ~ a + b + c - 1`, then the model should be fitted w/o intercept. Could you please fix this bug as well? Thanks.\n",
    "commit": "b1f7b238a4655e5f4493a741daff1d0a45521e5a",
    "createdAt": "2016-11-19T10:19:16Z",
    "diffHunk": "@@ -84,14 +93,12 @@ private[r] object LogisticRegressionWrapper\n \n     val rFormula = new RFormula()\n       .setFormula(formula)\n-    RWrapperUtils.checkDataColumns(rFormula, data)\n+      .setForceIndexLabel(true)\n+    checkDataColumns(rFormula, data)\n     val rFormulaModel = rFormula.fit(data)\n \n-    // get feature names from output schema\n-    val schema = rFormulaModel.transform(data).schema\n-    val featureAttrs = AttributeGroup.fromStructField(schema(rFormulaModel.getFeaturesCol))\n-      .attributes.get\n-    val features = featureAttrs.map(_.name.get)\n+    // get labels and feature names from output schema\n+    val (features, labels) = getFeaturesAndLabels(rFormulaModel, data)\n \n     // assemble and fit the pipeline\n     val logisticRegression = new LogisticRegression()",
    "line": 72
  }, {
    "author": {
      "login": "wangmiao1981"
    },
    "body": "OK. Fix it in this PR",
    "commit": "b1f7b238a4655e5f4493a741daff1d0a45521e5a",
    "createdAt": "2016-11-28T18:56:41Z",
    "diffHunk": "@@ -84,14 +93,12 @@ private[r] object LogisticRegressionWrapper\n \n     val rFormula = new RFormula()\n       .setFormula(formula)\n-    RWrapperUtils.checkDataColumns(rFormula, data)\n+      .setForceIndexLabel(true)\n+    checkDataColumns(rFormula, data)\n     val rFormulaModel = rFormula.fit(data)\n \n-    // get feature names from output schema\n-    val schema = rFormulaModel.transform(data).schema\n-    val featureAttrs = AttributeGroup.fromStructField(schema(rFormulaModel.getFeaturesCol))\n-      .attributes.get\n-    val features = featureAttrs.map(_.name.get)\n+    // get labels and feature names from output schema\n+    val (features, labels) = getFeaturesAndLabels(rFormulaModel, data)\n \n     // assemble and fit the pipeline\n     val logisticRegression = new LogisticRegression()",
    "line": 72
  }],
  "prId": 15910
}]