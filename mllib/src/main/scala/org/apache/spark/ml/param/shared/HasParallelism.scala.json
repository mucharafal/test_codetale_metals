[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "This one-vs-rest-specific doc can go under OneVsRest itself.  You could put it in the setter method in OneVsRest.",
    "commit": "2a335fec1a4527e4970e88c10555d7d3f0375c35",
    "createdAt": "2017-07-17T16:13:25Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.param.shared\n+\n+import scala.concurrent.ExecutionContext\n+\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * Common parameter for estimators trained in a multithreaded environment.\n+ */\n+private[ml] trait HasParallelism extends Params {\n+\n+  /**\n+   * param for the number of threads to use when running parallel meta-algorithms\n+   * The implementation of parallel one vs. rest runs the classification for"
  }],
  "prId": 18281
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "I forgot before: This should go in OneVsRest itself to be Java-friendly.",
    "commit": "2a335fec1a4527e4970e88c10555d7d3f0375c35",
    "createdAt": "2017-07-17T16:14:07Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.param.shared\n+\n+import scala.concurrent.ExecutionContext\n+\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * Common parameter for estimators trained in a multithreaded environment.\n+ */\n+private[ml] trait HasParallelism extends Params {\n+\n+  /**\n+   * param for the number of threads to use when running parallel meta-algorithms\n+   * The implementation of parallel one vs. rest runs the classification for\n+   * each class in a separate threads.\n+   * @group expertParam\n+   */\n+  val parallelism = new IntParam(this, \"parallelism\",\n+    \"the number of threads to use when running parallel algorithms\", ParamValidators.gtEq(1))\n+\n+  setDefault(parallelism -> 1)\n+\n+  /** @group expertGetParam */\n+  def getParallelism: Int = $(parallelism)\n+\n+  /** @group expertSetParam */\n+  def setParallelism(value: Int): this.type = {",
    "line": 43
  }],
  "prId": 18281
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "You can remove this now that it is in OneVsRest",
    "commit": "2a335fec1a4527e4970e88c10555d7d3f0375c35",
    "createdAt": "2017-07-28T00:21:46Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.param.shared\n+\n+import scala.concurrent.ExecutionContext\n+\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * Common parameter for estimators trained in a multithreaded environment.\n+ */\n+private[ml] trait HasParallelism extends Params {\n+\n+  /**\n+   * param for the number of threads to use when running parallel meta-algorithms\n+   * @group expertParam\n+   */\n+  val parallelism = new IntParam(this, \"parallelism\",\n+    \"the number of threads to use when running parallel algorithms\", ParamValidators.gtEq(1))\n+\n+  setDefault(parallelism -> 1)\n+\n+  /** @group expertGetParam */\n+  def getParallelism: Int = $(parallelism)\n+\n+  /** @group expertSetParam */\n+  def setParallelism(value: Int): this.type = {",
    "line": 43
  }],
  "prId": 18281
}]