[{
  "comments": [{
    "author": {
      "login": "sueann"
    },
    "body": "we may want to put this somewhere more general to be used ?",
    "commit": "6a7e3d138b33c66644cdf68b6b20287ab0705aa6",
    "createdAt": "2017-02-28T00:29:13Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.recommendation\n+\n+import scala.language.implicitConversions\n+import scala.reflect.runtime.universe.TypeTag\n+\n+import org.apache.spark.sql.{Encoder, Encoders}\n+import org.apache.spark.sql.catalyst.encoders.ExpressionEncoder\n+import org.apache.spark.sql.expressions.Aggregator\n+import org.apache.spark.util.BoundedPriorityQueue\n+\n+/**\n+ * Works on rows of the form (K1, K2, V) where K1 & K2 are IDs and V is the score value. Finds\n+ * the top `num` K2 items based on the given Ordering.\n+ */\n+\n+private[recommendation] class TopByKeyAggregator[K1: TypeTag, K2: TypeTag, V: TypeTag]"
  }, {
    "author": {
      "login": "sueann"
    },
    "body": "(It'd need its own unit tests, though not sure if we'll get everything in for 2.2)",
    "commit": "6a7e3d138b33c66644cdf68b6b20287ab0705aa6",
    "createdAt": "2017-02-28T00:29:43Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.recommendation\n+\n+import scala.language.implicitConversions\n+import scala.reflect.runtime.universe.TypeTag\n+\n+import org.apache.spark.sql.{Encoder, Encoders}\n+import org.apache.spark.sql.catalyst.encoders.ExpressionEncoder\n+import org.apache.spark.sql.expressions.Aggregator\n+import org.apache.spark.util.BoundedPriorityQueue\n+\n+/**\n+ * Works on rows of the form (K1, K2, V) where K1 & K2 are IDs and V is the score value. Finds\n+ * the top `num` K2 items based on the given Ordering.\n+ */\n+\n+private[recommendation] class TopByKeyAggregator[K1: TypeTag, K2: TypeTag, V: TypeTag]"
  }],
  "prId": 17090
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "I think you need to throw some spaces and braces in here to make it a bit more readable?",
    "commit": "6a7e3d138b33c66644cdf68b6b20287ab0705aa6",
    "createdAt": "2017-02-28T00:32:05Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.recommendation\n+\n+import scala.language.implicitConversions\n+import scala.reflect.runtime.universe.TypeTag\n+\n+import org.apache.spark.sql.{Encoder, Encoders}\n+import org.apache.spark.sql.catalyst.encoders.ExpressionEncoder\n+import org.apache.spark.sql.expressions.Aggregator\n+import org.apache.spark.util.BoundedPriorityQueue\n+\n+/**\n+ * Works on rows of the form (K1, K2, V) where K1 & K2 are IDs and V is the score value. Finds\n+ * the top `num` K2 items based on the given Ordering.\n+ */\n+\n+private[recommendation] class TopByKeyAggregator[K1: TypeTag, K2: TypeTag, V: TypeTag]\n+  (num: Int, ord: Ordering[(K2, V)])\n+  extends Aggregator[(K1, K2, V), BoundedPriorityQueue[(K2, V)], Array[(K2, V)]] {\n+\n+  override def zero: BoundedPriorityQueue[(K2, V)] = new BoundedPriorityQueue[(K2, V)](num)(ord)\n+  override def reduce("
  }, {
    "author": {
      "login": "sueann"
    },
    "body": "üëç",
    "commit": "6a7e3d138b33c66644cdf68b6b20287ab0705aa6",
    "createdAt": "2017-02-28T00:39:27Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.recommendation\n+\n+import scala.language.implicitConversions\n+import scala.reflect.runtime.universe.TypeTag\n+\n+import org.apache.spark.sql.{Encoder, Encoders}\n+import org.apache.spark.sql.catalyst.encoders.ExpressionEncoder\n+import org.apache.spark.sql.expressions.Aggregator\n+import org.apache.spark.util.BoundedPriorityQueue\n+\n+/**\n+ * Works on rows of the form (K1, K2, V) where K1 & K2 are IDs and V is the score value. Finds\n+ * the top `num` K2 items based on the given Ordering.\n+ */\n+\n+private[recommendation] class TopByKeyAggregator[K1: TypeTag, K2: TypeTag, V: TypeTag]\n+  (num: Int, ord: Ordering[(K2, V)])\n+  extends Aggregator[(K1, K2, V), BoundedPriorityQueue[(K2, V)], Array[(K2, V)]] {\n+\n+  override def zero: BoundedPriorityQueue[(K2, V)] = new BoundedPriorityQueue[(K2, V)](num)(ord)\n+  override def reduce("
  }],
  "prId": 17090
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "IntelliJ style complaint: include \"()\" at end",
    "commit": "6a7e3d138b33c66644cdf68b6b20287ab0705aa6",
    "createdAt": "2017-02-28T01:05:53Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.recommendation\n+\n+import scala.language.implicitConversions\n+import scala.reflect.runtime.universe.TypeTag\n+\n+import org.apache.spark.sql.{Encoder, Encoders}\n+import org.apache.spark.sql.catalyst.encoders.ExpressionEncoder\n+import org.apache.spark.sql.expressions.Aggregator\n+import org.apache.spark.util.BoundedPriorityQueue\n+\n+/**\n+ * Works on rows of the form (K1, K2, V) where K1 & K2 are IDs and V is the score value. Finds\n+ * the top `num` K2 items based on the given Ordering.\n+ */\n+\n+private[recommendation] class TopByKeyAggregator[K1: TypeTag, K2: TypeTag, V: TypeTag]\n+  (num: Int, ord: Ordering[(K2, V)])\n+  extends Aggregator[(K1, K2, V), BoundedPriorityQueue[(K2, V)], Array[(K2, V)]] {\n+\n+  override def zero: BoundedPriorityQueue[(K2, V)] = new BoundedPriorityQueue[(K2, V)](num)(ord)\n+  override def reduce(\n+    q: BoundedPriorityQueue[(K2, V)],\n+    a: (K1, K2, V)): BoundedPriorityQueue[(K2, V)] = q += {(a._2, a._3)}\n+  override def merge(\n+      q1: BoundedPriorityQueue[(K2, V)],\n+      q2: BoundedPriorityQueue[(K2, V)]): BoundedPriorityQueue[(K2, V)] = q1 ++= q2\n+  override def finish(r: BoundedPriorityQueue[(K2, V)]): Array[(K2, V)] =\n+    r.toArray.sorted(ord.reverse)\n+  override def bufferEncoder: Encoder[BoundedPriorityQueue[(K2, V)]] =\n+    Encoders.kryo[BoundedPriorityQueue[(K2, V)]]\n+  override def outputEncoder: Encoder[Array[(K2, V)]] = ExpressionEncoder[Array[(K2, V)]]"
  }],
  "prId": 17090
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "I'd think we should have at least some basic tests for this - see `MLPairRDDFunctionsSuite` for example",
    "commit": "6a7e3d138b33c66644cdf68b6b20287ab0705aa6",
    "createdAt": "2017-02-28T19:56:33Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.recommendation\n+\n+import scala.language.implicitConversions\n+import scala.reflect.runtime.universe.TypeTag\n+\n+import org.apache.spark.sql.{Encoder, Encoders}\n+import org.apache.spark.sql.catalyst.encoders.ExpressionEncoder\n+import org.apache.spark.sql.expressions.Aggregator\n+import org.apache.spark.util.BoundedPriorityQueue\n+\n+\n+/**\n+ * Works on rows of the form (K1, K2, V) where K1 & K2 are IDs and V is the score value. Finds\n+ * the top `num` K2 items based on the given Ordering.\n+ */\n+private[recommendation] class TopByKeyAggregator[K1: TypeTag, K2: TypeTag, V: TypeTag]",
    "line": 33
  }],
  "prId": 17090
}]