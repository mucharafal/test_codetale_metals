[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Maybe `private[feature]`?",
    "commit": "c20cd97d7ce5690993b4490bb7cca955e7703d90",
    "createdAt": "2018-02-16T08:42:08Z",
    "diffHunk": "@@ -218,4 +221,32 @@ object FeatureHasher extends DefaultParamsReadable[FeatureHasher] {\n \n   @Since(\"2.3.0\")\n   override def load(path: String): FeatureHasher = super.load(path)\n+\n+  private val seed = OldHashingTF.seed\n+\n+  /**\n+   * Calculate a hash code value for the term object using\n+   * Austin Appleby's MurmurHash 3 algorithm (MurmurHash3_x86_32).\n+   * This is the default hash algorithm used from Spark 2.0 onwards.\n+   * Use hashUnsafeBytes2 to match the original algorithm with the value.\n+   * See SPARK-23381.\n+   */\n+  @Since(\"2.3.0\")\n+  def murmur3Hash(term: Any): Int = {",
    "line": 41
  }, {
    "author": {
      "login": "gatorsmile"
    },
    "body": "I would also address this comment.",
    "commit": "c20cd97d7ce5690993b4490bb7cca955e7703d90",
    "createdAt": "2018-02-16T21:06:42Z",
    "diffHunk": "@@ -218,4 +221,32 @@ object FeatureHasher extends DefaultParamsReadable[FeatureHasher] {\n \n   @Since(\"2.3.0\")\n   override def load(path: String): FeatureHasher = super.load(path)\n+\n+  private val seed = OldHashingTF.seed\n+\n+  /**\n+   * Calculate a hash code value for the term object using\n+   * Austin Appleby's MurmurHash 3 algorithm (MurmurHash3_x86_32).\n+   * This is the default hash algorithm used from Spark 2.0 onwards.\n+   * Use hashUnsafeBytes2 to match the original algorithm with the value.\n+   * See SPARK-23381.\n+   */\n+  @Since(\"2.3.0\")\n+  def murmur3Hash(term: Any): Int = {",
    "line": 41
  }],
  "prId": 20568
}]