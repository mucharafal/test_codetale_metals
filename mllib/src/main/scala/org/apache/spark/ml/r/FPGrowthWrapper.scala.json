[{
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "do we need these?",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-07T06:16:01Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s._\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._"
  }, {
    "author": {
      "login": "zero323"
    },
    "body": "We can skip `import org.json4s._` if won't do any parsing, but import org.json4s.jackson.JsonMethods._` provide both `render` and `compact` which are used to create JSON metadata.",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-07T16:07:14Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s._\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._"
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "wangmiao1981"
    },
    "body": "alignment",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-17T05:44:08Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.fpm.{FPGrowth, FPGrowthModel}\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class FPGrowthWrapper private (val fpGrowthModel: FPGrowthModel) extends MLWritable {\n+  def freqItemsets: DataFrame = fpGrowthModel.freqItemsets\n+  def associationRules: DataFrame = fpGrowthModel.associationRules\n+\n+  def transform(dataset: Dataset[_]): DataFrame = {\n+    fpGrowthModel.transform(dataset)\n+  }\n+\n+  override def write: MLWriter = new FPGrowthWrapper.FPGrowthWrapperWriter(this)\n+}\n+\n+private[r] object FPGrowthWrapper extends MLReadable[FPGrowthWrapper] {\n+\n+  def fit(\n+         data: DataFrame,"
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "wangmiao1981"
    },
    "body": "indentation seems incorrect here and above line. ",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-17T05:45:26Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.fpm.{FPGrowth, FPGrowthModel}\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class FPGrowthWrapper private (val fpGrowthModel: FPGrowthModel) extends MLWritable {\n+  def freqItemsets: DataFrame = fpGrowthModel.freqItemsets\n+  def associationRules: DataFrame = fpGrowthModel.associationRules\n+\n+  def transform(dataset: Dataset[_]): DataFrame = {\n+    fpGrowthModel.transform(dataset)\n+  }\n+\n+  override def write: MLWriter = new FPGrowthWrapper.FPGrowthWrapperWriter(this)\n+}\n+\n+private[r] object FPGrowthWrapper extends MLReadable[FPGrowthWrapper] {\n+\n+  def fit(\n+         data: DataFrame,\n+         minSupport: Double,\n+         minConfidence: Double,\n+         featuresCol: String,\n+         predictionCol: String,\n+         numPartitions: Integer): FPGrowthWrapper = {\n+    val fpGrowth = new FPGrowth()\n+      .setMinSupport(minSupport)\n+      .setMinConfidence(minConfidence)\n+      .setPredictionCol(predictionCol)\n+\n+    if (numPartitions != null && numPartitions > 0) {\n+      fpGrowth.setNumPartitions(numPartitions)\n+    }\n+\n+    val fpGrowthModel = fpGrowth.fit(data)\n+\n+    new FPGrowthWrapper(fpGrowthModel)\n+  }\n+\n+  override def read: MLReader[FPGrowthWrapper] = new FPGrowthWrapperReader\n+\n+  class FPGrowthWrapperReader extends MLReader[FPGrowthWrapper] {\n+    override def load(path: String): FPGrowthWrapper = {\n+      val modelPath = new Path(path, \"model\").toString\n+      val fPGrowthModel = FPGrowthModel.load(modelPath)\n+\n+      new FPGrowthWrapper(fPGrowthModel)\n+    }\n+  }\n+\n+    class FPGrowthWrapperWriter(instance: FPGrowthWrapper) extends MLWriter {"
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "given the earlier suggestion, we should also check numPartition > 0 in R before passing to here",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-20T20:45:44Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.fpm.{FPGrowth, FPGrowthModel}\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class FPGrowthWrapper private (val fpGrowthModel: FPGrowthModel) extends MLWritable {\n+  def freqItemsets: DataFrame = fpGrowthModel.freqItemsets\n+  def associationRules: DataFrame = fpGrowthModel.associationRules\n+\n+  def transform(dataset: Dataset[_]): DataFrame = {\n+    fpGrowthModel.transform(dataset)\n+  }\n+\n+  override def write: MLWriter = new FPGrowthWrapper.FPGrowthWrapperWriter(this)\n+}\n+\n+private[r] object FPGrowthWrapper extends MLReadable[FPGrowthWrapper] {\n+\n+  def fit(\n+           data: DataFrame,\n+           minSupport: Double,\n+           minConfidence: Double,\n+           itemsCol: String,\n+           numPartitions: Integer): FPGrowthWrapper = {\n+    val fpGrowth = new FPGrowth()\n+      .setMinSupport(minSupport)\n+      .setMinConfidence(minConfidence)\n+      .setItemsCol(itemsCol)\n+\n+    if (numPartitions != null && numPartitions > 0) {",
    "line": 52
  }, {
    "author": {
      "login": "zero323"
    },
    "body": "If you feel it is necessary. Personally I wanted to treat any non-strictly positive number as `null`. ",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-27T18:52:51Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.fpm.{FPGrowth, FPGrowthModel}\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class FPGrowthWrapper private (val fpGrowthModel: FPGrowthModel) extends MLWritable {\n+  def freqItemsets: DataFrame = fpGrowthModel.freqItemsets\n+  def associationRules: DataFrame = fpGrowthModel.associationRules\n+\n+  def transform(dataset: Dataset[_]): DataFrame = {\n+    fpGrowthModel.transform(dataset)\n+  }\n+\n+  override def write: MLWriter = new FPGrowthWrapper.FPGrowthWrapperWriter(this)\n+}\n+\n+private[r] object FPGrowthWrapper extends MLReadable[FPGrowthWrapper] {\n+\n+  def fit(\n+           data: DataFrame,\n+           minSupport: Double,\n+           minConfidence: Double,\n+           itemsCol: String,\n+           numPartitions: Integer): FPGrowthWrapper = {\n+    val fpGrowth = new FPGrowth()\n+      .setMinSupport(minSupport)\n+      .setMinConfidence(minConfidence)\n+      .setItemsCol(itemsCol)\n+\n+    if (numPartitions != null && numPartitions > 0) {",
    "line": 52
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "anything else we could add as metadata that is not in the model already?",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-20T20:46:41Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.fpm.{FPGrowth, FPGrowthModel}\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class FPGrowthWrapper private (val fpGrowthModel: FPGrowthModel) extends MLWritable {\n+  def freqItemsets: DataFrame = fpGrowthModel.freqItemsets\n+  def associationRules: DataFrame = fpGrowthModel.associationRules\n+\n+  def transform(dataset: Dataset[_]): DataFrame = {\n+    fpGrowthModel.transform(dataset)\n+  }\n+\n+  override def write: MLWriter = new FPGrowthWrapper.FPGrowthWrapperWriter(this)\n+}\n+\n+private[r] object FPGrowthWrapper extends MLReadable[FPGrowthWrapper] {\n+\n+  def fit(\n+           data: DataFrame,\n+           minSupport: Double,\n+           minConfidence: Double,\n+           itemsCol: String,\n+           numPartitions: Integer): FPGrowthWrapper = {\n+    val fpGrowth = new FPGrowth()\n+      .setMinSupport(minSupport)\n+      .setMinConfidence(minConfidence)\n+      .setItemsCol(itemsCol)\n+\n+    if (numPartitions != null && numPartitions > 0) {\n+      fpGrowth.setNumPartitions(numPartitions)\n+    }\n+\n+    val fpGrowthModel = fpGrowth.fit(data)\n+\n+    new FPGrowthWrapper(fpGrowthModel)\n+  }\n+\n+  override def read: MLReader[FPGrowthWrapper] = new FPGrowthWrapperReader\n+\n+  class FPGrowthWrapperReader extends MLReader[FPGrowthWrapper] {\n+    override def load(path: String): FPGrowthWrapper = {\n+      val modelPath = new Path(path, \"model\").toString\n+      val fPGrowthModel = FPGrowthModel.load(modelPath)\n+\n+      new FPGrowthWrapper(fPGrowthModel)\n+    }\n+  }\n+\n+  class FPGrowthWrapperWriter(instance: FPGrowthWrapper) extends MLWriter {\n+    override protected def saveImpl(path: String): Unit = {\n+      val modelPath = new Path(path, \"model\").toString\n+      val rMetadataPath = new Path(path, \"rMetadata\").toString",
    "line": 75
  }, {
    "author": {
      "login": "zero323"
    },
    "body": "I don't think so. Model captures all the parameters.",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-21T14:30:10Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.fpm.{FPGrowth, FPGrowthModel}\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class FPGrowthWrapper private (val fpGrowthModel: FPGrowthModel) extends MLWritable {\n+  def freqItemsets: DataFrame = fpGrowthModel.freqItemsets\n+  def associationRules: DataFrame = fpGrowthModel.associationRules\n+\n+  def transform(dataset: Dataset[_]): DataFrame = {\n+    fpGrowthModel.transform(dataset)\n+  }\n+\n+  override def write: MLWriter = new FPGrowthWrapper.FPGrowthWrapperWriter(this)\n+}\n+\n+private[r] object FPGrowthWrapper extends MLReadable[FPGrowthWrapper] {\n+\n+  def fit(\n+           data: DataFrame,\n+           minSupport: Double,\n+           minConfidence: Double,\n+           itemsCol: String,\n+           numPartitions: Integer): FPGrowthWrapper = {\n+    val fpGrowth = new FPGrowth()\n+      .setMinSupport(minSupport)\n+      .setMinConfidence(minConfidence)\n+      .setItemsCol(itemsCol)\n+\n+    if (numPartitions != null && numPartitions > 0) {\n+      fpGrowth.setNumPartitions(numPartitions)\n+    }\n+\n+    val fpGrowthModel = fpGrowth.fit(data)\n+\n+    new FPGrowthWrapper(fpGrowthModel)\n+  }\n+\n+  override def read: MLReader[FPGrowthWrapper] = new FPGrowthWrapperReader\n+\n+  class FPGrowthWrapperReader extends MLReader[FPGrowthWrapper] {\n+    override def load(path: String): FPGrowthWrapper = {\n+      val modelPath = new Path(path, \"model\").toString\n+      val fPGrowthModel = FPGrowthModel.load(modelPath)\n+\n+      new FPGrowthWrapper(fPGrowthModel)\n+    }\n+  }\n+\n+  class FPGrowthWrapperWriter(instance: FPGrowthWrapper) extends MLWriter {\n+    override protected def saveImpl(path: String): Unit = {\n+      val modelPath = new Path(path, \"model\").toString\n+      val rMetadataPath = new Path(path, \"rMetadata\").toString",
    "line": 75
  }],
  "prId": 17170
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "and this comment https://github.com/apache/spark/pull/17170#discussion_r107011745",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-27T01:53:37Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.fpm.{FPGrowth, FPGrowthModel}\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class FPGrowthWrapper private (val fpGrowthModel: FPGrowthModel) extends MLWritable {\n+  def freqItemsets: DataFrame = fpGrowthModel.freqItemsets\n+  def associationRules: DataFrame = fpGrowthModel.associationRules\n+\n+  def transform(dataset: Dataset[_]): DataFrame = {\n+    fpGrowthModel.transform(dataset)\n+  }\n+\n+  override def write: MLWriter = new FPGrowthWrapper.FPGrowthWrapperWriter(this)\n+}\n+\n+private[r] object FPGrowthWrapper extends MLReadable[FPGrowthWrapper] {\n+\n+  def fit(\n+           data: DataFrame,\n+           minSupport: Double,\n+           minConfidence: Double,\n+           itemsCol: String,\n+           numPartitions: Integer): FPGrowthWrapper = {\n+    val fpGrowth = new FPGrowth()\n+      .setMinSupport(minSupport)\n+      .setMinConfidence(minConfidence)\n+      .setItemsCol(itemsCol)\n+\n+    if (numPartitions != null && numPartitions > 0) {",
    "line": 52
  }, {
    "author": {
      "login": "felixcheung"
    },
    "body": "and https://github.com/apache/spark/pull/17170#discussion_r107349375",
    "commit": "64c07aaa0d538c6d0fe01a8fe831e11194603e22",
    "createdAt": "2017-03-27T01:54:01Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.fpm.{FPGrowth, FPGrowthModel}\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class FPGrowthWrapper private (val fpGrowthModel: FPGrowthModel) extends MLWritable {\n+  def freqItemsets: DataFrame = fpGrowthModel.freqItemsets\n+  def associationRules: DataFrame = fpGrowthModel.associationRules\n+\n+  def transform(dataset: Dataset[_]): DataFrame = {\n+    fpGrowthModel.transform(dataset)\n+  }\n+\n+  override def write: MLWriter = new FPGrowthWrapper.FPGrowthWrapperWriter(this)\n+}\n+\n+private[r] object FPGrowthWrapper extends MLReadable[FPGrowthWrapper] {\n+\n+  def fit(\n+           data: DataFrame,\n+           minSupport: Double,\n+           minConfidence: Double,\n+           itemsCol: String,\n+           numPartitions: Integer): FPGrowthWrapper = {\n+    val fpGrowth = new FPGrowth()\n+      .setMinSupport(minSupport)\n+      .setMinConfidence(minConfidence)\n+      .setItemsCol(itemsCol)\n+\n+    if (numPartitions != null && numPartitions > 0) {",
    "line": 52
  }],
  "prId": 17170
}]