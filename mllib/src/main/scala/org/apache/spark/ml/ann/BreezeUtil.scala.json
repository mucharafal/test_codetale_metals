[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Should be package private. Please also leave a TODO message to switch to MLlib's BLAS impl.\n",
    "commit": "4806b6fa75d12002c1e19d929c23c7153a0bedd3",
    "createdAt": "2015-07-29T23:35:18Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.ann\n+\n+import breeze.linalg.{DenseMatrix => BDM, DenseVector => BDV}\n+import com.github.fommil.netlib.BLAS.{getInstance => NativeBLAS}\n+\n+/**\n+ * In-place DGEMM and DGEMV for Breeze\n+ */\n+object BreezeUtil {"
  }],
  "prId": 7621
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Is it necessary to add this branch? If `beta` is not zero, we still need to scale matrix `c`. Calling `NativeBLAS.dgemm` should be sufficient.\n",
    "commit": "4806b6fa75d12002c1e19d929c23c7153a0bedd3",
    "createdAt": "2015-07-29T23:35:20Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.ann\n+\n+import breeze.linalg.{DenseMatrix => BDM, DenseVector => BDV}\n+import com.github.fommil.netlib.BLAS.{getInstance => NativeBLAS}\n+\n+/**\n+ * In-place DGEMM and DGEMV for Breeze\n+ */\n+object BreezeUtil {\n+\n+  private def transposeString(a: BDM[Double]): String = if (a.isTranspose) \"T\" else \"N\"\n+\n+  /**\n+   * DGEMM: C := alpha * A * B + beta * C\n+   * @param alpha alpha\n+   * @param a A\n+   * @param b B\n+   * @param beta beta\n+   * @param c C\n+   */\n+  def dgemm(alpha: Double, a: BDM[Double], b: BDM[Double], beta: Double, c: BDM[Double]): Unit = {\n+    // TODO: add code if matrices isTranspose!!!\n+    require(a.cols == b.rows, \"A & B Dimension mismatch!\")\n+    require(a.rows == c.rows, \"A & C Dimension mismatch!\")\n+    require(b.cols == c.cols, \"A & C Dimension mismatch!\")\n+    if(a.rows == 0 || b.rows == 0 || a.cols == 0 || b.cols == 0) {"
  }],
  "prId": 7621
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "do not need the extra blank line\n",
    "commit": "4806b6fa75d12002c1e19d929c23c7153a0bedd3",
    "createdAt": "2015-07-29T23:35:22Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.ann\n+\n+import breeze.linalg.{DenseMatrix => BDM, DenseVector => BDV}\n+import com.github.fommil.netlib.BLAS.{getInstance => NativeBLAS}\n+\n+/**\n+ * In-place DGEMM and DGEMV for Breeze\n+ */\n+object BreezeUtil {\n+\n+  private def transposeString(a: BDM[Double]): String = if (a.isTranspose) \"T\" else \"N\"\n+\n+  /**\n+   * DGEMM: C := alpha * A * B + beta * C\n+   * @param alpha alpha\n+   * @param a A\n+   * @param b B\n+   * @param beta beta\n+   * @param c C\n+   */\n+  def dgemm(alpha: Double, a: BDM[Double], b: BDM[Double], beta: Double, c: BDM[Double]): Unit = {\n+    // TODO: add code if matrices isTranspose!!!\n+    require(a.cols == b.rows, \"A & B Dimension mismatch!\")\n+    require(a.rows == c.rows, \"A & C Dimension mismatch!\")\n+    require(b.cols == c.cols, \"A & C Dimension mismatch!\")\n+    if(a.rows == 0 || b.rows == 0 || a.cols == 0 || b.cols == 0) {\n+    } else {\n+      NativeBLAS.dgemm(transposeString(a), transposeString(b), c.rows, c.cols, a.cols,\n+        alpha, a.data, a.offset, a.majorStride, b.data, b.offset, b.majorStride,\n+        beta, c.data, c.offset, c.rows)\n+    }\n+  }\n+\n+  /**\n+   * DGEMV: y := alpha * A * x + beta * y\n+   * @param alpha alpha\n+   * @param a A\n+   * @param x x\n+   * @param beta beta\n+   * @param y y\n+   */\n+  def dgemv(alpha: Double, a: BDM[Double], x: BDV[Double], beta: Double, y: BDV[Double]): Unit = {\n+"
  }],
  "prId": 7621
}]