[{
  "comments": [{
    "author": {
      "login": "yanboliang"
    },
    "body": "I'd like to change it to `case p => copy(ParamMap.empty)`, and this will make `GeneralizedLinearRegressionTrainingSummary` always along with an immutable model.\nBecause the training summary should be provided when the model training. If the model was updated later not by re-train, we should not provide updated training summary.\n",
    "commit": "37e31db8f05a0f3d5721763229f3ba38b50db880",
    "createdAt": "2016-04-27T12:52:41Z",
    "diffHunk": "@@ -761,16 +783,24 @@ class GeneralizedLinearRegressionModel private[ml] (\n    * otherwise generates a new column and sets it as the prediction column on a new copy\n    * of the current model.\n    */\n-  private[regression] def findSummaryModelAndPredictionCol()\n-    : (GeneralizedLinearRegressionModel, String) = {\n+  private[regression] def getSummaryModel: GeneralizedLinearRegressionModel = {\n     $(predictionCol) match {\n       case \"\" =>\n         val predictionColName = \"prediction_\" + java.util.UUID.randomUUID.toString\n-        (copy(ParamMap.empty).setPredictionCol(predictionColName), predictionColName)\n-      case p => (this, p)\n+        copy(ParamMap.empty).setPredictionCol(predictionColName)\n+      case p => this"
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "That sounds good.  That way, we can just use the model internally in the summary and will not need to copy the model parameters below.  I'll do that.\n",
    "commit": "37e31db8f05a0f3d5721763229f3ba38b50db880",
    "createdAt": "2016-04-27T19:28:35Z",
    "diffHunk": "@@ -761,16 +783,24 @@ class GeneralizedLinearRegressionModel private[ml] (\n    * otherwise generates a new column and sets it as the prediction column on a new copy\n    * of the current model.\n    */\n-  private[regression] def findSummaryModelAndPredictionCol()\n-    : (GeneralizedLinearRegressionModel, String) = {\n+  private[regression] def getSummaryModel: GeneralizedLinearRegressionModel = {\n     $(predictionCol) match {\n       case \"\" =>\n         val predictionColName = \"prediction_\" + java.util.UUID.randomUUID.toString\n-        (copy(ParamMap.empty).setPredictionCol(predictionColName), predictionColName)\n-      case p => (this, p)\n+        copy(ParamMap.empty).setPredictionCol(predictionColName)\n+      case p => this"
  }],
  "prId": 12624
}, {
  "comments": [{
    "author": {
      "login": "yanboliang"
    },
    "body": "If the model of `GeneralizedLinearRegressionSummary` is immutable, it's not necessary to extract these values in advance.\n",
    "commit": "37e31db8f05a0f3d5721763229f3ba38b50db880",
    "createdAt": "2016-04-27T13:00:13Z",
    "diffHunk": "@@ -834,43 +864,51 @@ object GeneralizedLinearRegressionModel extends MLReadable[GeneralizedLinearRegr\n \n /**\n  * :: Experimental ::\n- * Summarizing Generalized Linear regression Fits.\n+ * Summary of [[GeneralizedLinearRegression]] model and predictions.\n  *\n  * @param predictions predictions output by the model's `transform` method\n- * @param predictionCol field in \"predictions\" which gives the prediction value of each instance\n  * @param model the model that should be summarized\n- * @param diagInvAtWA diagonal of matrix (A^T * W * A)^-1 in the last iteration\n- * @param numIterations number of iterations\n- * @param solver the solver algorithm used for model training\n  */\n @Since(\"2.0.0\")\n @Experimental\n class GeneralizedLinearRegressionSummary private[regression] (\n     @Since(\"2.0.0\") @transient val predictions: DataFrame,\n-    @Since(\"2.0.0\") val predictionCol: String,\n-    @Since(\"2.0.0\") val model: GeneralizedLinearRegressionModel,\n-    private val diagInvAtWA: Array[Double],\n-    @Since(\"2.0.0\") val numIterations: Int,\n-    @Since(\"2.0.0\") val solver: String) extends Serializable {\n+    model: GeneralizedLinearRegressionModel) extends Serializable {\n \n   import GeneralizedLinearRegression._\n \n-  private lazy val family = Family.fromName(model.getFamily)\n-  private lazy val link = if (model.isDefined(model.getParam(\"link\"))) {\n+  // Extract values from model immediately to avoid problems with user reseting model Params.\n+  // Coefficients is not a deep copy, but that is acceptable.\n+\n+  /**\n+   * Field in \"predictions\" which gives the prediction value of each instance\n+   */\n+  @Since(\"2.0.0\")\n+  val predictionCol: String = model.getPredictionCol\n+\n+  private val weightCol: String = model.getWeightCol\n+  private val labelCol: String = model.getLabelCol\n+\n+  private[regression] val familyName: String = model.getFamily\n+  private[regression] val family: Family = Family.fromName(familyName)\n+  private[regression] val link: Link = if (model.isDefined(model.link)) {\n     Link.fromName(model.getLink)\n   } else {\n     family.defaultLink\n   }\n+  private[regression] val fitIntercept: Boolean = model.getFitIntercept\n+  private[regression] val intercept: Double = model.intercept\n+  private[regression] val coefficients: Vector = model.coefficients"
  }],
  "prId": 12624
}, {
  "comments": [{
    "author": {
      "login": "yanboliang"
    },
    "body": "L874 will deep copy the model including coefficients and intercept, so I think this document is out of date.\n",
    "commit": "37e31db8f05a0f3d5721763229f3ba38b50db880",
    "createdAt": "2016-04-28T14:11:38Z",
    "diffHunk": "@@ -834,36 +836,55 @@ object GeneralizedLinearRegressionModel extends MLReadable[GeneralizedLinearRegr\n \n /**\n  * :: Experimental ::\n- * Summarizing Generalized Linear regression Fits.\n+ * Summary of [[GeneralizedLinearRegression]] model and predictions.\n  *\n- * @param predictions predictions output by the model's `transform` method\n- * @param predictionCol field in \"predictions\" which gives the prediction value of each instance\n- * @param model the model that should be summarized\n- * @param diagInvAtWA diagonal of matrix (A^T * W * A)^-1 in the last iteration\n- * @param numIterations number of iterations\n- * @param solver the solver algorithm used for model training\n+ * @param dataset Dataset to be summarized.\n+ * @param origModel Model to be summarized.  This is copied to create an internal\n+ *                  model which cannot be modified from outside.\n  */\n @Since(\"2.0.0\")\n @Experimental\n class GeneralizedLinearRegressionSummary private[regression] (\n-    @Since(\"2.0.0\") @transient val predictions: DataFrame,\n-    @Since(\"2.0.0\") val predictionCol: String,\n-    @Since(\"2.0.0\") val model: GeneralizedLinearRegressionModel,\n-    private val diagInvAtWA: Array[Double],\n-    @Since(\"2.0.0\") val numIterations: Int,\n-    @Since(\"2.0.0\") val solver: String) extends Serializable {\n+    dataset: Dataset[_],\n+    origModel: GeneralizedLinearRegressionModel) extends Serializable {\n \n   import GeneralizedLinearRegression._\n \n-  private lazy val family = Family.fromName(model.getFamily)\n-  private lazy val link = if (model.isDefined(model.getParam(\"link\"))) {\n+  /**\n+   * Field in \"predictions\" which gives the prediction value of each instance.\n+   * This is set to a new column name if the original model's `predictionCol` is not set.\n+   */\n+  @Since(\"2.0.0\")\n+  val predictionCol: String = {\n+    if (origModel.isDefined(origModel.predictionCol) && origModel.getPredictionCol != \"\") {\n+      origModel.getPredictionCol\n+    } else {\n+      \"prediction_\" + java.util.UUID.randomUUID.toString\n+    }\n+  }\n+\n+  /**\n+   * Private copy of model to ensure Params are not modified outside this class.\n+   * Coefficients is not a deep copy, but that is acceptable.",
    "line": 277
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "I'm pretty sure it's a shallow copy of the coefficients: [https://github.com/apache/spark/blob/89addd40abdacd65cc03ac8aa5f9cf3dd4a4c19b/mllib/src/main/scala/org/apache/spark/ml/regression/GeneralizedLinearRegression.scala#L776]\n",
    "commit": "37e31db8f05a0f3d5721763229f3ba38b50db880",
    "createdAt": "2016-04-28T18:20:48Z",
    "diffHunk": "@@ -834,36 +836,55 @@ object GeneralizedLinearRegressionModel extends MLReadable[GeneralizedLinearRegr\n \n /**\n  * :: Experimental ::\n- * Summarizing Generalized Linear regression Fits.\n+ * Summary of [[GeneralizedLinearRegression]] model and predictions.\n  *\n- * @param predictions predictions output by the model's `transform` method\n- * @param predictionCol field in \"predictions\" which gives the prediction value of each instance\n- * @param model the model that should be summarized\n- * @param diagInvAtWA diagonal of matrix (A^T * W * A)^-1 in the last iteration\n- * @param numIterations number of iterations\n- * @param solver the solver algorithm used for model training\n+ * @param dataset Dataset to be summarized.\n+ * @param origModel Model to be summarized.  This is copied to create an internal\n+ *                  model which cannot be modified from outside.\n  */\n @Since(\"2.0.0\")\n @Experimental\n class GeneralizedLinearRegressionSummary private[regression] (\n-    @Since(\"2.0.0\") @transient val predictions: DataFrame,\n-    @Since(\"2.0.0\") val predictionCol: String,\n-    @Since(\"2.0.0\") val model: GeneralizedLinearRegressionModel,\n-    private val diagInvAtWA: Array[Double],\n-    @Since(\"2.0.0\") val numIterations: Int,\n-    @Since(\"2.0.0\") val solver: String) extends Serializable {\n+    dataset: Dataset[_],\n+    origModel: GeneralizedLinearRegressionModel) extends Serializable {\n \n   import GeneralizedLinearRegression._\n \n-  private lazy val family = Family.fromName(model.getFamily)\n-  private lazy val link = if (model.isDefined(model.getParam(\"link\"))) {\n+  /**\n+   * Field in \"predictions\" which gives the prediction value of each instance.\n+   * This is set to a new column name if the original model's `predictionCol` is not set.\n+   */\n+  @Since(\"2.0.0\")\n+  val predictionCol: String = {\n+    if (origModel.isDefined(origModel.predictionCol) && origModel.getPredictionCol != \"\") {\n+      origModel.getPredictionCol\n+    } else {\n+      \"prediction_\" + java.util.UUID.randomUUID.toString\n+    }\n+  }\n+\n+  /**\n+   * Private copy of model to ensure Params are not modified outside this class.\n+   * Coefficients is not a deep copy, but that is acceptable.",
    "line": 277
  }],
  "prId": 12624
}]