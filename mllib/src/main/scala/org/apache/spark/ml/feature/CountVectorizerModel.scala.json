[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "I just noticed this: we generally use very short uid names.  How about \"cntVec\"?\n",
    "commit": "5f3f655c7bf2feaf9502e13abdf160657cc41fdc",
    "createdAt": "2015-07-09T00:02:45Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.ml.feature\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.UnaryTransformer\n+import org.apache.spark.ml.param.{ParamMap, ParamValidators, IntParam}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.mllib.linalg.{Vectors, VectorUDT, Vector}\n+import org.apache.spark.sql.types.{StringType, ArrayType, DataType}\n+\n+/**\n+ * :: Experimental ::\n+ * Converts a text document to a sparse vector of token counts.\n+ * @param vocabulary An Array over terms. Only the terms in the vocabulary will be counted.\n+ */\n+@Experimental\n+class CountVectorizerModel (override val uid: String, val vocabulary: Array[String])\n+  extends UnaryTransformer[Seq[String], Vector, CountVectorizerModel] {\n+\n+  def this(vocabulary: Array[String]) =\n+    this(Identifiable.randomUID(\"countVectorizerModel\"), vocabulary)"
  }],
  "prId": 7084
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "neglect --> ignore\n",
    "commit": "5f3f655c7bf2feaf9502e13abdf160657cc41fdc",
    "createdAt": "2015-07-09T00:02:47Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.ml.feature\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.UnaryTransformer\n+import org.apache.spark.ml.param.{ParamMap, ParamValidators, IntParam}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.mllib.linalg.{Vectors, VectorUDT, Vector}\n+import org.apache.spark.sql.types.{StringType, ArrayType, DataType}\n+\n+/**\n+ * :: Experimental ::\n+ * Converts a text document to a sparse vector of token counts.\n+ * @param vocabulary An Array over terms. Only the terms in the vocabulary will be counted.\n+ */\n+@Experimental\n+class CountVectorizerModel (override val uid: String, val vocabulary: Array[String])\n+  extends UnaryTransformer[Seq[String], Vector, CountVectorizerModel] {\n+\n+  def this(vocabulary: Array[String]) =\n+    this(Identifiable.randomUID(\"countVectorizerModel\"), vocabulary)\n+\n+  /**\n+   * Corpus-specific filter to neglect scarce words in a document. For each document, terms with"
  }],
  "prId": 7084
}]