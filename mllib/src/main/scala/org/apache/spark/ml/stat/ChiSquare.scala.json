[{
  "comments": [{
    "author": {
      "login": "imatiach-msft"
    },
    "body": "shouldn't chi square test work for binary type as well?  or we don't want to support that?",
    "commit": "19fa02ad6d8cd73553cc804828e659918c6fa872",
    "createdAt": "2017-03-01T22:17:19Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.stat\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.linalg.{Vector, Vectors, VectorUDT}\n+import org.apache.spark.ml.util.SchemaUtils\n+import org.apache.spark.mllib.linalg.{Vectors => OldVectors}\n+import org.apache.spark.mllib.regression.{LabeledPoint => OldLabeledPoint}\n+import org.apache.spark.mllib.stat.{Statistics => OldStatistics}\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions.col\n+\n+\n+/**\n+ * :: Experimental ::\n+ *\n+ * Chi-square hypothesis testing for categorical data.\n+ *\n+ * See <a href=\"http://en.wikipedia.org/wiki/Chi-squared_test\">Wikipedia</a> for more information\n+ * on the Chi-squared test.\n+ */\n+@Experimental\n+@Since(\"2.2.0\")\n+object ChiSquare {\n+\n+  /** Used to construct output schema of tests */\n+  private case class ChiSquareResult(\n+      pValues: Vector,\n+      degreesOfFreedom: Array[Int],\n+      statistics: Vector)\n+\n+  /**\n+   * Conduct Pearson's independence test for every feature against the label across the input RDD.\n+   * For each feature, the (feature, label) pairs are converted into a contingency matrix for which\n+   * the Chi-squared statistic is computed. All label and feature values must be categorical.\n+   *\n+   * The null hypothesis is that the occurrence of the outcomes is statistically independent.\n+   *\n+   * @param dataset  DataFrame of categorical labels and categorical features.\n+   *                 Real-valued features will be treated as categorical for each distinct value.\n+   * @param featuresCol  Name of features column in dataset, of type `Vector` (`VectorUDT`)\n+   * @param labelCol  Name of label column in dataset, of any numerical type\n+   * @return DataFrame containing the test result for every feature against the label.\n+   *         This DataFrame will contain a single Row with the following fields:\n+   *          - `pValues: Vector`\n+   *          - `degreesOfFreedom: Array[Int]`\n+   *          - `statistics: Vector`\n+   *         Each of these fields has one value per feature.\n+   */\n+  @Since(\"2.2.0\")\n+  def test(dataset: DataFrame, featuresCol: String, labelCol: String): DataFrame = {\n+    val spark = dataset.sparkSession\n+    import spark.implicits._\n+\n+    SchemaUtils.checkColumnType(dataset.schema, featuresCol, new VectorUDT)\n+    SchemaUtils.checkNumericType(dataset.schema, labelCol)",
    "line": 72
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "Sounds reasonable, but let's do that in the future; this is already a lot more types than the RDD-based API supports.",
    "commit": "19fa02ad6d8cd73553cc804828e659918c6fa872",
    "createdAt": "2017-03-03T19:01:13Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.stat\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.linalg.{Vector, Vectors, VectorUDT}\n+import org.apache.spark.ml.util.SchemaUtils\n+import org.apache.spark.mllib.linalg.{Vectors => OldVectors}\n+import org.apache.spark.mllib.regression.{LabeledPoint => OldLabeledPoint}\n+import org.apache.spark.mllib.stat.{Statistics => OldStatistics}\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions.col\n+\n+\n+/**\n+ * :: Experimental ::\n+ *\n+ * Chi-square hypothesis testing for categorical data.\n+ *\n+ * See <a href=\"http://en.wikipedia.org/wiki/Chi-squared_test\">Wikipedia</a> for more information\n+ * on the Chi-squared test.\n+ */\n+@Experimental\n+@Since(\"2.2.0\")\n+object ChiSquare {\n+\n+  /** Used to construct output schema of tests */\n+  private case class ChiSquareResult(\n+      pValues: Vector,\n+      degreesOfFreedom: Array[Int],\n+      statistics: Vector)\n+\n+  /**\n+   * Conduct Pearson's independence test for every feature against the label across the input RDD.\n+   * For each feature, the (feature, label) pairs are converted into a contingency matrix for which\n+   * the Chi-squared statistic is computed. All label and feature values must be categorical.\n+   *\n+   * The null hypothesis is that the occurrence of the outcomes is statistically independent.\n+   *\n+   * @param dataset  DataFrame of categorical labels and categorical features.\n+   *                 Real-valued features will be treated as categorical for each distinct value.\n+   * @param featuresCol  Name of features column in dataset, of type `Vector` (`VectorUDT`)\n+   * @param labelCol  Name of label column in dataset, of any numerical type\n+   * @return DataFrame containing the test result for every feature against the label.\n+   *         This DataFrame will contain a single Row with the following fields:\n+   *          - `pValues: Vector`\n+   *          - `degreesOfFreedom: Array[Int]`\n+   *          - `statistics: Vector`\n+   *         Each of these fields has one value per feature.\n+   */\n+  @Since(\"2.2.0\")\n+  def test(dataset: DataFrame, featuresCol: String, labelCol: String): DataFrame = {\n+    val spark = dataset.sparkSession\n+    import spark.implicits._\n+\n+    SchemaUtils.checkColumnType(dataset.schema, featuresCol, new VectorUDT)\n+    SchemaUtils.checkNumericType(dataset.schema, labelCol)",
    "line": 72
  }],
  "prId": 17110
}, {
  "comments": [{
    "author": {
      "login": "imatiach-msft"
    },
    "body": "it would be nice to optimize this in the future -- since we have schema, if the label and features have been converted to categorical, we can get the unique values right away instead of having to re-generate the maps for distinct labels and features",
    "commit": "19fa02ad6d8cd73553cc804828e659918c6fa872",
    "createdAt": "2017-03-01T23:05:35Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.stat\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.linalg.{Vector, Vectors, VectorUDT}\n+import org.apache.spark.ml.util.SchemaUtils\n+import org.apache.spark.mllib.linalg.{Vectors => OldVectors}\n+import org.apache.spark.mllib.regression.{LabeledPoint => OldLabeledPoint}\n+import org.apache.spark.mllib.stat.{Statistics => OldStatistics}\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions.col\n+\n+\n+/**\n+ * :: Experimental ::\n+ *\n+ * Chi-square hypothesis testing for categorical data.\n+ *\n+ * See <a href=\"http://en.wikipedia.org/wiki/Chi-squared_test\">Wikipedia</a> for more information\n+ * on the Chi-squared test.\n+ */\n+@Experimental\n+@Since(\"2.2.0\")\n+object ChiSquare {\n+\n+  /** Used to construct output schema of tests */\n+  private case class ChiSquareResult(\n+      pValues: Vector,\n+      degreesOfFreedom: Array[Int],\n+      statistics: Vector)\n+\n+  /**\n+   * Conduct Pearson's independence test for every feature against the label across the input RDD.\n+   * For each feature, the (feature, label) pairs are converted into a contingency matrix for which\n+   * the Chi-squared statistic is computed. All label and feature values must be categorical.\n+   *\n+   * The null hypothesis is that the occurrence of the outcomes is statistically independent.\n+   *\n+   * @param dataset  DataFrame of categorical labels and categorical features.\n+   *                 Real-valued features will be treated as categorical for each distinct value.\n+   * @param featuresCol  Name of features column in dataset, of type `Vector` (`VectorUDT`)\n+   * @param labelCol  Name of label column in dataset, of any numerical type\n+   * @return DataFrame containing the test result for every feature against the label.\n+   *         This DataFrame will contain a single Row with the following fields:\n+   *          - `pValues: Vector`\n+   *          - `degreesOfFreedom: Array[Int]`\n+   *          - `statistics: Vector`\n+   *         Each of these fields has one value per feature.\n+   */\n+  @Since(\"2.2.0\")\n+  def test(dataset: DataFrame, featuresCol: String, labelCol: String): DataFrame = {\n+    val spark = dataset.sparkSession\n+    import spark.implicits._\n+\n+    SchemaUtils.checkColumnType(dataset.schema, featuresCol, new VectorUDT)\n+    SchemaUtils.checkNumericType(dataset.schema, labelCol)\n+    val rdd = dataset.select(col(labelCol).cast(\"double\"), col(featuresCol)).as[(Double, Vector)]\n+      .rdd.map { case (label, features) => OldLabeledPoint(label, OldVectors.fromML(features)) }\n+    val testResults = OldStatistics.chiSqTest(rdd)",
    "line": 75
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "Definitely; feel free to make a JIRA for it.",
    "commit": "19fa02ad6d8cd73553cc804828e659918c6fa872",
    "createdAt": "2017-03-03T19:01:14Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.stat\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.linalg.{Vector, Vectors, VectorUDT}\n+import org.apache.spark.ml.util.SchemaUtils\n+import org.apache.spark.mllib.linalg.{Vectors => OldVectors}\n+import org.apache.spark.mllib.regression.{LabeledPoint => OldLabeledPoint}\n+import org.apache.spark.mllib.stat.{Statistics => OldStatistics}\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions.col\n+\n+\n+/**\n+ * :: Experimental ::\n+ *\n+ * Chi-square hypothesis testing for categorical data.\n+ *\n+ * See <a href=\"http://en.wikipedia.org/wiki/Chi-squared_test\">Wikipedia</a> for more information\n+ * on the Chi-squared test.\n+ */\n+@Experimental\n+@Since(\"2.2.0\")\n+object ChiSquare {\n+\n+  /** Used to construct output schema of tests */\n+  private case class ChiSquareResult(\n+      pValues: Vector,\n+      degreesOfFreedom: Array[Int],\n+      statistics: Vector)\n+\n+  /**\n+   * Conduct Pearson's independence test for every feature against the label across the input RDD.\n+   * For each feature, the (feature, label) pairs are converted into a contingency matrix for which\n+   * the Chi-squared statistic is computed. All label and feature values must be categorical.\n+   *\n+   * The null hypothesis is that the occurrence of the outcomes is statistically independent.\n+   *\n+   * @param dataset  DataFrame of categorical labels and categorical features.\n+   *                 Real-valued features will be treated as categorical for each distinct value.\n+   * @param featuresCol  Name of features column in dataset, of type `Vector` (`VectorUDT`)\n+   * @param labelCol  Name of label column in dataset, of any numerical type\n+   * @return DataFrame containing the test result for every feature against the label.\n+   *         This DataFrame will contain a single Row with the following fields:\n+   *          - `pValues: Vector`\n+   *          - `degreesOfFreedom: Array[Int]`\n+   *          - `statistics: Vector`\n+   *         Each of these fields has one value per feature.\n+   */\n+  @Since(\"2.2.0\")\n+  def test(dataset: DataFrame, featuresCol: String, labelCol: String): DataFrame = {\n+    val spark = dataset.sparkSession\n+    import spark.implicits._\n+\n+    SchemaUtils.checkColumnType(dataset.schema, featuresCol, new VectorUDT)\n+    SchemaUtils.checkNumericType(dataset.schema, labelCol)\n+    val rdd = dataset.select(col(labelCol).cast(\"double\"), col(featuresCol)).as[(Double, Vector)]\n+      .rdd.map { case (label, features) => OldLabeledPoint(label, OldVectors.fromML(features)) }\n+    val testResults = OldStatistics.chiSqTest(rdd)",
    "line": 75
  }],
  "prId": 17110
}]