[{
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "instead of 1, find last?",
    "commit": "d36c23a3736cf985c9692f4a14e00945a2d38732",
    "createdAt": "2017-01-14T01:33:16Z",
    "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s._\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.{Pipeline, PipelineModel}\n+import org.apache.spark.ml.attribute.AttributeGroup\n+import org.apache.spark.ml.clustering.{BisectingKMeans, BisectingKMeansModel}\n+import org.apache.spark.ml.feature.RFormula\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class BisectingKMeansWrapper private (\n+    val pipeline: PipelineModel,\n+    val features: Array[String],\n+    val size: Array[Long],\n+    val isLoaded: Boolean = false) extends MLWritable {\n+  private val bisectingKmeansModel: BisectingKMeansModel =\n+    pipeline.stages(1).asInstanceOf[BisectingKMeansModel]"
  }],
  "prId": 16566
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "clusterCenters is already an Array?",
    "commit": "d36c23a3736cf985c9692f4a14e00945a2d38732",
    "createdAt": "2017-01-14T01:35:22Z",
    "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s._\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.{Pipeline, PipelineModel}\n+import org.apache.spark.ml.attribute.AttributeGroup\n+import org.apache.spark.ml.clustering.{BisectingKMeans, BisectingKMeansModel}\n+import org.apache.spark.ml.feature.RFormula\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class BisectingKMeansWrapper private (\n+    val pipeline: PipelineModel,\n+    val features: Array[String],\n+    val size: Array[Long],\n+    val isLoaded: Boolean = false) extends MLWritable {\n+  private val bisectingKmeansModel: BisectingKMeansModel =\n+    pipeline.stages(1).asInstanceOf[BisectingKMeansModel]\n+\n+  lazy val coefficients: Array[Double] = bisectingKmeansModel.clusterCenters.flatMap(_.toArray)"
  }, {
    "author": {
      "login": "wangmiao1981"
    },
    "body": "It is `Array[Vector]`. I need flatmap to transform it into `Array[Double]`, which is similar to Kmeans. \r\nIn addition, we have the serialization bug of not supporint Vector type open.",
    "commit": "d36c23a3736cf985c9692f4a14e00945a2d38732",
    "createdAt": "2017-01-19T22:18:48Z",
    "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s._\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.{Pipeline, PipelineModel}\n+import org.apache.spark.ml.attribute.AttributeGroup\n+import org.apache.spark.ml.clustering.{BisectingKMeans, BisectingKMeansModel}\n+import org.apache.spark.ml.feature.RFormula\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class BisectingKMeansWrapper private (\n+    val pipeline: PipelineModel,\n+    val features: Array[String],\n+    val size: Array[Long],\n+    val isLoaded: Boolean = false) extends MLWritable {\n+  private val bisectingKmeansModel: BisectingKMeansModel =\n+    pipeline.stages(1).asInstanceOf[BisectingKMeansModel]\n+\n+  lazy val coefficients: Array[Double] = bisectingKmeansModel.clusterCenters.flatMap(_.toArray)"
  }],
  "prId": 16566
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "does this have valid values when the model is loaded?",
    "commit": "d36c23a3736cf985c9692f4a14e00945a2d38732",
    "createdAt": "2017-01-21T06:49:08Z",
    "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s._\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.{Pipeline, PipelineModel}\n+import org.apache.spark.ml.attribute.AttributeGroup\n+import org.apache.spark.ml.clustering.{BisectingKMeans, BisectingKMeansModel}\n+import org.apache.spark.ml.feature.RFormula\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class BisectingKMeansWrapper private (\n+    val pipeline: PipelineModel,\n+    val features: Array[String],\n+    val size: Array[Long],\n+    val isLoaded: Boolean = false) extends MLWritable {\n+  private val bisectingKmeansModel: BisectingKMeansModel =\n+    pipeline.stages.last.asInstanceOf[BisectingKMeansModel]\n+\n+  lazy val coefficients: Array[Double] = bisectingKmeansModel.clusterCenters.flatMap(_.toArray)\n+\n+  lazy val k: Int = bisectingKmeansModel.getK\n+\n+  lazy val cluster: DataFrame = bisectingKmeansModel.summary.cluster"
  }, {
    "author": {
      "login": "felixcheung"
    },
    "body": "ah this is checked on the R side. could you add a comment here",
    "commit": "d36c23a3736cf985c9692f4a14e00945a2d38732",
    "createdAt": "2017-01-21T06:52:14Z",
    "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s._\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.{Pipeline, PipelineModel}\n+import org.apache.spark.ml.attribute.AttributeGroup\n+import org.apache.spark.ml.clustering.{BisectingKMeans, BisectingKMeansModel}\n+import org.apache.spark.ml.feature.RFormula\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class BisectingKMeansWrapper private (\n+    val pipeline: PipelineModel,\n+    val features: Array[String],\n+    val size: Array[Long],\n+    val isLoaded: Boolean = false) extends MLWritable {\n+  private val bisectingKmeansModel: BisectingKMeansModel =\n+    pipeline.stages.last.asInstanceOf[BisectingKMeansModel]\n+\n+  lazy val coefficients: Array[Double] = bisectingKmeansModel.clusterCenters.flatMap(_.toArray)\n+\n+  lazy val k: Int = bisectingKmeansModel.getK\n+\n+  lazy val cluster: DataFrame = bisectingKmeansModel.summary.cluster"
  }],
  "prId": 16566
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "let's be consistent here with L38 - either (1) or last",
    "commit": "d36c23a3736cf985c9692f4a14e00945a2d38732",
    "createdAt": "2017-01-21T06:50:45Z",
    "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s._\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.{Pipeline, PipelineModel}\n+import org.apache.spark.ml.attribute.AttributeGroup\n+import org.apache.spark.ml.clustering.{BisectingKMeans, BisectingKMeansModel}\n+import org.apache.spark.ml.feature.RFormula\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class BisectingKMeansWrapper private (\n+    val pipeline: PipelineModel,\n+    val features: Array[String],\n+    val size: Array[Long],\n+    val isLoaded: Boolean = false) extends MLWritable {\n+  private val bisectingKmeansModel: BisectingKMeansModel =\n+    pipeline.stages.last.asInstanceOf[BisectingKMeansModel]\n+\n+  lazy val coefficients: Array[Double] = bisectingKmeansModel.clusterCenters.flatMap(_.toArray)\n+\n+  lazy val k: Int = bisectingKmeansModel.getK\n+\n+  lazy val cluster: DataFrame = bisectingKmeansModel.summary.cluster\n+\n+  def fitted(method: String): DataFrame = {\n+    if (method == \"centers\") {\n+      bisectingKmeansModel.summary.predictions.drop(bisectingKmeansModel.getFeaturesCol)\n+    } else if (method == \"classes\") {\n+      bisectingKmeansModel.summary.cluster\n+    } else {\n+      throw new UnsupportedOperationException(\n+        s\"Method (centers or classes) required but $method found.\")\n+    }\n+  }\n+\n+  def transform(dataset: Dataset[_]): DataFrame = {\n+    pipeline.transform(dataset).drop(bisectingKmeansModel.getFeaturesCol)\n+  }\n+\n+  override def write: MLWriter = new BisectingKMeansWrapper.BisectingKMeansWrapperWriter(this)\n+}\n+\n+private[r] object BisectingKMeansWrapper extends MLReadable[BisectingKMeansWrapper] {\n+\n+  def fit(\n+      data: DataFrame,\n+      formula: String,\n+      k: Int,\n+      maxIter: Int,\n+      seed: String,\n+      minDivisibleClusterSize: Double\n+      ): BisectingKMeansWrapper = {\n+\n+    val rFormula = new RFormula()\n+      .setFormula(formula)\n+      .setFeaturesCol(\"features\")\n+    RWrapperUtils.checkDataColumns(rFormula, data)\n+    val rFormulaModel = rFormula.fit(data)\n+\n+    // get feature names from output schema\n+    val schema = rFormulaModel.transform(data).schema\n+    val featureAttrs = AttributeGroup.fromStructField(schema(rFormulaModel.getFeaturesCol))\n+      .attributes.get\n+    val features = featureAttrs.map(_.name.get)\n+\n+    val bisectingKmeans = new BisectingKMeans()\n+      .setK(k)\n+      .setMaxIter(maxIter)\n+      .setMinDivisibleClusterSize(minDivisibleClusterSize)\n+      .setFeaturesCol(rFormula.getFeaturesCol)\n+\n+    if (seed != null && seed.length > 0) bisectingKmeans.setSeed(seed.toInt)\n+\n+    val pipeline = new Pipeline()\n+      .setStages(Array(rFormulaModel, bisectingKmeans))\n+      .fit(data)\n+\n+    val bisectingKmeansModel: BisectingKMeansModel =\n+      pipeline.stages(1).asInstanceOf[BisectingKMeansModel]"
  }],
  "prId": 16566
}]