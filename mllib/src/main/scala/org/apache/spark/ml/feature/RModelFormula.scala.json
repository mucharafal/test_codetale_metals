[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Also mention the operators we support and a link to the official R formula document.\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T20:50:56Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against a R model formula."
  }, {
    "author": {
      "login": "ericl"
    },
    "body": "Done\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T23:40:11Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against a R model formula."
  }],
  "prId": 7381
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Remove `private[spark]` so Scala users can also use it.\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T20:51:15Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against a R model formula.\n+ */\n+@Experimental\n+private[spark] class RModelFormula(override val uid: String)"
  }, {
    "author": {
      "login": "ericl"
    },
    "body": "Done\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T23:40:10Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against a R model formula.\n+ */\n+@Experimental\n+private[spark] class RModelFormula(override val uid: String)"
  }],
  "prId": 7381
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Missing doc and `@group param` in the ScalaDoc. The group is used to group methods in the generated Scala doc.\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T20:51:16Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against a R model formula.\n+ */\n+@Experimental\n+private[spark] class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")"
  }, {
    "author": {
      "login": "ericl"
    },
    "body": "Done\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T23:40:15Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against a R model formula.\n+ */\n+@Experimental\n+private[spark] class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")"
  }],
  "prId": 7381
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Why is this `protected` instead of `private`?\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T20:51:22Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against a R model formula.\n+ */\n+@Experimental\n+private[spark] class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+  protected var parsedFormula: Option[RFormula] = None"
  }, {
    "author": {
      "login": "ericl"
    },
    "body": "Done\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T23:40:17Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against a R model formula.\n+ */\n+@Experimental\n+private[spark] class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+  protected var parsedFormula: Option[RFormula] = None"
  }],
  "prId": 7381
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "- missing `@group setParam`\n- `a R` -> `an R`\n- missing `getFormula`\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T20:51:24Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against a R model formula.\n+ */\n+@Experimental\n+private[spark] class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+  protected var parsedFormula: Option[RFormula] = None\n+\n+  /**\n+   * Sets the formula to use for this transformer. Must be called before use.\n+   * @param value a R formula in string form (e.g. \"y ~ x + z\")"
  }, {
    "author": {
      "login": "ericl"
    },
    "body": "Done\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T23:40:18Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against a R model formula.\n+ */\n+@Experimental\n+private[spark] class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+  protected var parsedFormula: Option[RFormula] = None\n+\n+  /**\n+   * Sets the formula to use for this transformer. Must be called before use.\n+   * @param value a R formula in string form (e.g. \"y ~ x + z\")"
  }],
  "prId": 7381
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Missing setters for `featuresCol` and `labelCol`.\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T20:51:26Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against a R model formula.\n+ */\n+@Experimental\n+private[spark] class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+  protected var parsedFormula: Option[RFormula] = None\n+\n+  /**\n+   * Sets the formula to use for this transformer. Must be called before use.\n+   * @param value a R formula in string form (e.g. \"y ~ x + z\")\n+   */\n+  def setFormula(value: String): this.type = {\n+    parsedFormula = Some(RFormulaParser.parse(value))\n+    set(formula, value)\n+    this\n+  }\n+"
  }, {
    "author": {
      "login": "ericl"
    },
    "body": "Done\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T23:40:20Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against a R model formula.\n+ */\n+@Experimental\n+private[spark] class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+  protected var parsedFormula: Option[RFormula] = None\n+\n+  /**\n+   * Sets the formula to use for this transformer. Must be called before use.\n+   * @param value a R formula in string form (e.g. \"y ~ x + z\")\n+   */\n+  def setFormula(value: String): this.type = {\n+    parsedFormula = Some(RFormulaParser.parse(value))\n+    set(formula, value)\n+    this\n+  }\n+"
  }],
  "prId": 7381
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "private?\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T20:51:45Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against a R model formula.\n+ */\n+@Experimental\n+private[spark] class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+  protected var parsedFormula: Option[RFormula] = None\n+\n+  /**\n+   * Sets the formula to use for this transformer. Must be called before use.\n+   * @param value a R formula in string form (e.g. \"y ~ x + z\")\n+   */\n+  def setFormula(value: String): this.type = {\n+    parsedFormula = Some(RFormulaParser.parse(value))\n+    set(formula, value)\n+    this\n+  }\n+\n+  override def transformSchema(schema: StructType): StructType = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    val withFeatures = featureTransformer.transformSchema(schema)\n+    val nullable = schema(parsedFormula.get.response).dataType match {\n+      case _: NumericType | BooleanType => false\n+      case _ => true\n+    }\n+    StructType(withFeatures.fields :+ StructField($(labelCol), DoubleType, nullable))\n+  }\n+\n+  override def transform(dataset: DataFrame): DataFrame = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    transformLabel(featureTransformer.transform(dataset))\n+  }\n+\n+  override def copy(extra: ParamMap): RModelFormula = defaultCopy(extra)\n+\n+  override def toString: String = s\"RModelFormula(${get(formula)})\"\n+\n+  protected def transformLabel(dataset: DataFrame): DataFrame = {"
  }, {
    "author": {
      "login": "ericl"
    },
    "body": "Done\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T23:40:23Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against a R model formula.\n+ */\n+@Experimental\n+private[spark] class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+  protected var parsedFormula: Option[RFormula] = None\n+\n+  /**\n+   * Sets the formula to use for this transformer. Must be called before use.\n+   * @param value a R formula in string form (e.g. \"y ~ x + z\")\n+   */\n+  def setFormula(value: String): this.type = {\n+    parsedFormula = Some(RFormulaParser.parse(value))\n+    set(formula, value)\n+    this\n+  }\n+\n+  override def transformSchema(schema: StructType): StructType = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    val withFeatures = featureTransformer.transformSchema(schema)\n+    val nullable = schema(parsedFormula.get.response).dataType match {\n+      case _: NumericType | BooleanType => false\n+      case _ => true\n+    }\n+    StructType(withFeatures.fields :+ StructField($(labelCol), DoubleType, nullable))\n+  }\n+\n+  override def transform(dataset: DataFrame): DataFrame = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    transformLabel(featureTransformer.transform(dataset))\n+  }\n+\n+  override def copy(extra: ParamMap): RModelFormula = defaultCopy(extra)\n+\n+  override def toString: String = s\"RModelFormula(${get(formula)})\"\n+\n+  protected def transformLabel(dataset: DataFrame): DataFrame = {"
  }],
  "prId": 7381
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Should use a random uid (the default transformer).\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T20:52:06Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against a R model formula.\n+ */\n+@Experimental\n+private[spark] class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+  protected var parsedFormula: Option[RFormula] = None\n+\n+  /**\n+   * Sets the formula to use for this transformer. Must be called before use.\n+   * @param value a R formula in string form (e.g. \"y ~ x + z\")\n+   */\n+  def setFormula(value: String): this.type = {\n+    parsedFormula = Some(RFormulaParser.parse(value))\n+    set(formula, value)\n+    this\n+  }\n+\n+  override def transformSchema(schema: StructType): StructType = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    val withFeatures = featureTransformer.transformSchema(schema)\n+    val nullable = schema(parsedFormula.get.response).dataType match {\n+      case _: NumericType | BooleanType => false\n+      case _ => true\n+    }\n+    StructType(withFeatures.fields :+ StructField($(labelCol), DoubleType, nullable))\n+  }\n+\n+  override def transform(dataset: DataFrame): DataFrame = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    transformLabel(featureTransformer.transform(dataset))\n+  }\n+\n+  override def copy(extra: ParamMap): RModelFormula = defaultCopy(extra)\n+\n+  override def toString: String = s\"RModelFormula(${get(formula)})\"\n+\n+  protected def transformLabel(dataset: DataFrame): DataFrame = {\n+    val responseName = parsedFormula.get.response\n+    dataset.schema(responseName).dataType match {\n+      case _: NumericType | BooleanType =>\n+        dataset.select(\n+          col(\"*\"),\n+          dataset(responseName).cast(DoubleType).as($(labelCol)))\n+      case StringType =>\n+        new StringIndexer(uid)"
  }, {
    "author": {
      "login": "ericl"
    },
    "body": "Done\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T23:40:25Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against a R model formula.\n+ */\n+@Experimental\n+private[spark] class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+  protected var parsedFormula: Option[RFormula] = None\n+\n+  /**\n+   * Sets the formula to use for this transformer. Must be called before use.\n+   * @param value a R formula in string form (e.g. \"y ~ x + z\")\n+   */\n+  def setFormula(value: String): this.type = {\n+    parsedFormula = Some(RFormulaParser.parse(value))\n+    set(formula, value)\n+    this\n+  }\n+\n+  override def transformSchema(schema: StructType): StructType = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    val withFeatures = featureTransformer.transformSchema(schema)\n+    val nullable = schema(parsedFormula.get.response).dataType match {\n+      case _: NumericType | BooleanType => false\n+      case _ => true\n+    }\n+    StructType(withFeatures.fields :+ StructField($(labelCol), DoubleType, nullable))\n+  }\n+\n+  override def transform(dataset: DataFrame): DataFrame = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    transformLabel(featureTransformer.transform(dataset))\n+  }\n+\n+  override def copy(extra: ParamMap): RModelFormula = defaultCopy(extra)\n+\n+  override def toString: String = s\"RModelFormula(${get(formula)})\"\n+\n+  protected def transformLabel(dataset: DataFrame): DataFrame = {\n+    val responseName = parsedFormula.get.response\n+    dataset.schema(responseName).dataType match {\n+      case _: NumericType | BooleanType =>\n+        dataset.select(\n+          col(\"*\"),\n+          dataset(responseName).cast(DoubleType).as($(labelCol)))\n+      case StringType =>\n+        new StringIndexer(uid)"
  }],
  "prId": 7381
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "We don't need `:: Experimental ::` on private classes.\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T20:52:23Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against a R model formula.\n+ */\n+@Experimental\n+private[spark] class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+  protected var parsedFormula: Option[RFormula] = None\n+\n+  /**\n+   * Sets the formula to use for this transformer. Must be called before use.\n+   * @param value a R formula in string form (e.g. \"y ~ x + z\")\n+   */\n+  def setFormula(value: String): this.type = {\n+    parsedFormula = Some(RFormulaParser.parse(value))\n+    set(formula, value)\n+    this\n+  }\n+\n+  override def transformSchema(schema: StructType): StructType = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    val withFeatures = featureTransformer.transformSchema(schema)\n+    val nullable = schema(parsedFormula.get.response).dataType match {\n+      case _: NumericType | BooleanType => false\n+      case _ => true\n+    }\n+    StructType(withFeatures.fields :+ StructField($(labelCol), DoubleType, nullable))\n+  }\n+\n+  override def transform(dataset: DataFrame): DataFrame = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    transformLabel(featureTransformer.transform(dataset))\n+  }\n+\n+  override def copy(extra: ParamMap): RModelFormula = defaultCopy(extra)\n+\n+  override def toString: String = s\"RModelFormula(${get(formula)})\"\n+\n+  protected def transformLabel(dataset: DataFrame): DataFrame = {\n+    val responseName = parsedFormula.get.response\n+    dataset.schema(responseName).dataType match {\n+      case _: NumericType | BooleanType =>\n+        dataset.select(\n+          col(\"*\"),\n+          dataset(responseName).cast(DoubleType).as($(labelCol)))\n+      case StringType =>\n+        new StringIndexer(uid)\n+          .setInputCol(responseName)\n+          .setOutputCol($(labelCol))\n+          .fit(dataset)\n+          .transform(dataset)\n+      case other =>\n+        throw new IllegalArgumentException(\"Unsupported type for response: \" + other)\n+    }\n+  }\n+\n+  protected def featureTransformer: Transformer = {\n+    // TODO(ekl) add support for non-numeric features and feature interactions\n+    new VectorAssembler(uid)\n+      .setInputCols(parsedFormula.get.terms.toArray)\n+      .setOutputCol($(featuresCol))\n+  }\n+}\n+\n+/**\n+ * :: Experimental ::"
  }, {
    "author": {
      "login": "ericl"
    },
    "body": "Done\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T23:40:27Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against a R model formula.\n+ */\n+@Experimental\n+private[spark] class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+  protected var parsedFormula: Option[RFormula] = None\n+\n+  /**\n+   * Sets the formula to use for this transformer. Must be called before use.\n+   * @param value a R formula in string form (e.g. \"y ~ x + z\")\n+   */\n+  def setFormula(value: String): this.type = {\n+    parsedFormula = Some(RFormulaParser.parse(value))\n+    set(formula, value)\n+    this\n+  }\n+\n+  override def transformSchema(schema: StructType): StructType = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    val withFeatures = featureTransformer.transformSchema(schema)\n+    val nullable = schema(parsedFormula.get.response).dataType match {\n+      case _: NumericType | BooleanType => false\n+      case _ => true\n+    }\n+    StructType(withFeatures.fields :+ StructField($(labelCol), DoubleType, nullable))\n+  }\n+\n+  override def transform(dataset: DataFrame): DataFrame = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    transformLabel(featureTransformer.transform(dataset))\n+  }\n+\n+  override def copy(extra: ParamMap): RModelFormula = defaultCopy(extra)\n+\n+  override def toString: String = s\"RModelFormula(${get(formula)})\"\n+\n+  protected def transformLabel(dataset: DataFrame): DataFrame = {\n+    val responseName = parsedFormula.get.response\n+    dataset.schema(responseName).dataType match {\n+      case _: NumericType | BooleanType =>\n+        dataset.select(\n+          col(\"*\"),\n+          dataset(responseName).cast(DoubleType).as($(labelCol)))\n+      case StringType =>\n+        new StringIndexer(uid)\n+          .setInputCol(responseName)\n+          .setOutputCol($(labelCol))\n+          .fit(dataset)\n+          .transform(dataset)\n+      case other =>\n+        throw new IllegalArgumentException(\"Unsupported type for response: \" + other)\n+    }\n+  }\n+\n+  protected def featureTransformer: Transformer = {\n+    // TODO(ekl) add support for non-numeric features and feature interactions\n+    new VectorAssembler(uid)\n+      .setInputCols(parsedFormula.get.terms.toArray)\n+      .setOutputCol($(featuresCol))\n+  }\n+}\n+\n+/**\n+ * :: Experimental ::"
  }],
  "prId": 7381
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Does R accept `$` in terms?\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T20:53:03Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against a R model formula.\n+ */\n+@Experimental\n+private[spark] class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+  protected var parsedFormula: Option[RFormula] = None\n+\n+  /**\n+   * Sets the formula to use for this transformer. Must be called before use.\n+   * @param value a R formula in string form (e.g. \"y ~ x + z\")\n+   */\n+  def setFormula(value: String): this.type = {\n+    parsedFormula = Some(RFormulaParser.parse(value))\n+    set(formula, value)\n+    this\n+  }\n+\n+  override def transformSchema(schema: StructType): StructType = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    val withFeatures = featureTransformer.transformSchema(schema)\n+    val nullable = schema(parsedFormula.get.response).dataType match {\n+      case _: NumericType | BooleanType => false\n+      case _ => true\n+    }\n+    StructType(withFeatures.fields :+ StructField($(labelCol), DoubleType, nullable))\n+  }\n+\n+  override def transform(dataset: DataFrame): DataFrame = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    transformLabel(featureTransformer.transform(dataset))\n+  }\n+\n+  override def copy(extra: ParamMap): RModelFormula = defaultCopy(extra)\n+\n+  override def toString: String = s\"RModelFormula(${get(formula)})\"\n+\n+  protected def transformLabel(dataset: DataFrame): DataFrame = {\n+    val responseName = parsedFormula.get.response\n+    dataset.schema(responseName).dataType match {\n+      case _: NumericType | BooleanType =>\n+        dataset.select(\n+          col(\"*\"),\n+          dataset(responseName).cast(DoubleType).as($(labelCol)))\n+      case StringType =>\n+        new StringIndexer(uid)\n+          .setInputCol(responseName)\n+          .setOutputCol($(labelCol))\n+          .fit(dataset)\n+          .transform(dataset)\n+      case other =>\n+        throw new IllegalArgumentException(\"Unsupported type for response: \" + other)\n+    }\n+  }\n+\n+  protected def featureTransformer: Transformer = {\n+    // TODO(ekl) add support for non-numeric features and feature interactions\n+    new VectorAssembler(uid)\n+      .setInputCols(parsedFormula.get.terms.toArray)\n+      .setOutputCol($(featuresCol))\n+  }\n+}\n+\n+/**\n+ * :: Experimental ::\n+ * Represents a parsed R formula.\n+ */\n+private[ml] case class RFormula(response: String, terms: Seq[String])\n+\n+/**\n+ * :: Experimental ::\n+ * Limited implementation of R formula parsing. Currently supports: '~', '+'.\n+ */\n+private[ml] object RFormulaParser extends RegexParsers {\n+  def term: Parser[String] = \"([a-zA-Z]|\\\\.[a-zA-Z_])[a-zA-Z0-9._]*\".r"
  }, {
    "author": {
      "login": "ericl"
    },
    "body": "Looks like R supports arbitrary expressions in terms, so we'd need a full parser to be sure. For $ am I not sure it makes sense, since we assume the terms are from the dataframe already.\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-14T23:40:33Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against a R model formula.\n+ */\n+@Experimental\n+private[spark] class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+  protected var parsedFormula: Option[RFormula] = None\n+\n+  /**\n+   * Sets the formula to use for this transformer. Must be called before use.\n+   * @param value a R formula in string form (e.g. \"y ~ x + z\")\n+   */\n+  def setFormula(value: String): this.type = {\n+    parsedFormula = Some(RFormulaParser.parse(value))\n+    set(formula, value)\n+    this\n+  }\n+\n+  override def transformSchema(schema: StructType): StructType = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    val withFeatures = featureTransformer.transformSchema(schema)\n+    val nullable = schema(parsedFormula.get.response).dataType match {\n+      case _: NumericType | BooleanType => false\n+      case _ => true\n+    }\n+    StructType(withFeatures.fields :+ StructField($(labelCol), DoubleType, nullable))\n+  }\n+\n+  override def transform(dataset: DataFrame): DataFrame = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    transformLabel(featureTransformer.transform(dataset))\n+  }\n+\n+  override def copy(extra: ParamMap): RModelFormula = defaultCopy(extra)\n+\n+  override def toString: String = s\"RModelFormula(${get(formula)})\"\n+\n+  protected def transformLabel(dataset: DataFrame): DataFrame = {\n+    val responseName = parsedFormula.get.response\n+    dataset.schema(responseName).dataType match {\n+      case _: NumericType | BooleanType =>\n+        dataset.select(\n+          col(\"*\"),\n+          dataset(responseName).cast(DoubleType).as($(labelCol)))\n+      case StringType =>\n+        new StringIndexer(uid)\n+          .setInputCol(responseName)\n+          .setOutputCol($(labelCol))\n+          .fit(dataset)\n+          .transform(dataset)\n+      case other =>\n+        throw new IllegalArgumentException(\"Unsupported type for response: \" + other)\n+    }\n+  }\n+\n+  protected def featureTransformer: Transformer = {\n+    // TODO(ekl) add support for non-numeric features and feature interactions\n+    new VectorAssembler(uid)\n+      .setInputCols(parsedFormula.get.terms.toArray)\n+      .setOutputCol($(featuresCol))\n+  }\n+}\n+\n+/**\n+ * :: Experimental ::\n+ * Represents a parsed R formula.\n+ */\n+private[ml] case class RFormula(response: String, terms: Seq[String])\n+\n+/**\n+ * :: Experimental ::\n+ * Limited implementation of R formula parsing. Currently supports: '~', '+'.\n+ */\n+private[ml] object RFormulaParser extends RegexParsers {\n+  def term: Parser[String] = \"([a-zA-Z]|\\\\.[a-zA-Z_])[a-zA-Z0-9._]*\".r"
  }],
  "prId": 7381
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Use `http://stat.ethz.ch/R-manual/R-patched/library/stats/html/formula.html` instead, which is in the raw R manual format.\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-15T01:03:36Z",
    "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against an R model formula. Currently\n+ * we support a limited subset of the R operators, including '~' and '+'. Also see the R formula\n+ * docs here: http://www.inside-r.org/r-doc/stats/formula"
  }],
  "prId": 7381
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`col` -> `value` (to be consistent with other setters. Since the method name already contains this info, it is not necessary to repeat that for the arg, especially for really long names)\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-15T01:03:40Z",
    "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against an R model formula. Currently\n+ * we support a limited subset of the R operators, including '~' and '+'. Also see the R formula\n+ * docs here: http://www.inside-r.org/r-doc/stats/formula\n+ */\n+@Experimental\n+class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  /**\n+   * R formula parameter. The formula is provided in string form.\n+   * @group setParam\n+   */\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+\n+  private var parsedFormula: Option[RFormula] = None\n+\n+  /**\n+   * Sets the formula to use for this transformer. Must be called before use.\n+   * @group setParam\n+   * @param value an R formula in string form (e.g. \"y ~ x + z\")\n+   */\n+  def setFormula(value: String): this.type = {\n+    parsedFormula = Some(RFormulaParser.parse(value))\n+    set(formula, value)\n+    this\n+  }\n+\n+  /** @group getParam */\n+  def getFormula: String = $(formula)\n+\n+  /** @group getParam */\n+  def setFeaturesCol(col: String): this.type = set(featuresCol, col)"
  }],
  "prId": 7381
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "To be consistent, rename `featureTransformer` to `transformFeatures`?\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-15T01:03:41Z",
    "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against an R model formula. Currently\n+ * we support a limited subset of the R operators, including '~' and '+'. Also see the R formula\n+ * docs here: http://www.inside-r.org/r-doc/stats/formula\n+ */\n+@Experimental\n+class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  /**\n+   * R formula parameter. The formula is provided in string form.\n+   * @group setParam\n+   */\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+\n+  private var parsedFormula: Option[RFormula] = None\n+\n+  /**\n+   * Sets the formula to use for this transformer. Must be called before use.\n+   * @group setParam\n+   * @param value an R formula in string form (e.g. \"y ~ x + z\")\n+   */\n+  def setFormula(value: String): this.type = {\n+    parsedFormula = Some(RFormulaParser.parse(value))\n+    set(formula, value)\n+    this\n+  }\n+\n+  /** @group getParam */\n+  def getFormula: String = $(formula)\n+\n+  /** @group getParam */\n+  def setFeaturesCol(col: String): this.type = set(featuresCol, col)\n+\n+  /** @group getParam */\n+  def setLabelCol(col: String): this.type = set(labelCol, col)\n+\n+  override def transformSchema(schema: StructType): StructType = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    val withFeatures = featureTransformer.transformSchema(schema)\n+    val nullable = schema(parsedFormula.get.response).dataType match {\n+      case _: NumericType | BooleanType => false\n+      case _ => true\n+    }\n+    StructType(withFeatures.fields :+ StructField($(labelCol), DoubleType, nullable))\n+  }\n+\n+  override def transform(dataset: DataFrame): DataFrame = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    transformLabel(featureTransformer.transform(dataset))"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Actually, I mean `featureTransformer.transform` -> `transformFeatures`. This is minor.\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-16T03:30:48Z",
    "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against an R model formula. Currently\n+ * we support a limited subset of the R operators, including '~' and '+'. Also see the R formula\n+ * docs here: http://www.inside-r.org/r-doc/stats/formula\n+ */\n+@Experimental\n+class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  /**\n+   * R formula parameter. The formula is provided in string form.\n+   * @group setParam\n+   */\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+\n+  private var parsedFormula: Option[RFormula] = None\n+\n+  /**\n+   * Sets the formula to use for this transformer. Must be called before use.\n+   * @group setParam\n+   * @param value an R formula in string form (e.g. \"y ~ x + z\")\n+   */\n+  def setFormula(value: String): this.type = {\n+    parsedFormula = Some(RFormulaParser.parse(value))\n+    set(formula, value)\n+    this\n+  }\n+\n+  /** @group getParam */\n+  def getFormula: String = $(formula)\n+\n+  /** @group getParam */\n+  def setFeaturesCol(col: String): this.type = set(featuresCol, col)\n+\n+  /** @group getParam */\n+  def setLabelCol(col: String): this.type = set(labelCol, col)\n+\n+  override def transformSchema(schema: StructType): StructType = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    val withFeatures = featureTransformer.transformSchema(schema)\n+    val nullable = schema(parsedFormula.get.response).dataType match {\n+      case _: NumericType | BooleanType => false\n+      case _ => true\n+    }\n+    StructType(withFeatures.fields :+ StructField($(labelCol), DoubleType, nullable))\n+  }\n+\n+  override def transform(dataset: DataFrame): DataFrame = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    transformLabel(featureTransformer.transform(dataset))"
  }, {
    "author": {
      "login": "ericl"
    },
    "body": "Ah, the problem is that featureTransformer is used for both transform and transformSchema (and I think we'll need it to transform the input data to predict).\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-16T19:53:26Z",
    "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against an R model formula. Currently\n+ * we support a limited subset of the R operators, including '~' and '+'. Also see the R formula\n+ * docs here: http://www.inside-r.org/r-doc/stats/formula\n+ */\n+@Experimental\n+class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  /**\n+   * R formula parameter. The formula is provided in string form.\n+   * @group setParam\n+   */\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+\n+  private var parsedFormula: Option[RFormula] = None\n+\n+  /**\n+   * Sets the formula to use for this transformer. Must be called before use.\n+   * @group setParam\n+   * @param value an R formula in string form (e.g. \"y ~ x + z\")\n+   */\n+  def setFormula(value: String): this.type = {\n+    parsedFormula = Some(RFormulaParser.parse(value))\n+    set(formula, value)\n+    this\n+  }\n+\n+  /** @group getParam */\n+  def getFormula: String = $(formula)\n+\n+  /** @group getParam */\n+  def setFeaturesCol(col: String): this.type = set(featuresCol, col)\n+\n+  /** @group getParam */\n+  def setLabelCol(col: String): this.type = set(labelCol, col)\n+\n+  override def transformSchema(schema: StructType): StructType = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    val withFeatures = featureTransformer.transformSchema(schema)\n+    val nullable = schema(parsedFormula.get.response).dataType match {\n+      case _: NumericType | BooleanType => false\n+      case _ => true\n+    }\n+    StructType(withFeatures.fields :+ StructField($(labelCol), DoubleType, nullable))\n+  }\n+\n+  override def transform(dataset: DataFrame): DataFrame = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    transformLabel(featureTransformer.transform(dataset))"
  }],
  "prId": 7381
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "minor: `${get(formula))` -> `$getFormula` (slightly easier to read)\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-15T01:03:43Z",
    "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against an R model formula. Currently\n+ * we support a limited subset of the R operators, including '~' and '+'. Also see the R formula\n+ * docs here: http://www.inside-r.org/r-doc/stats/formula\n+ */\n+@Experimental\n+class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  /**\n+   * R formula parameter. The formula is provided in string form.\n+   * @group setParam\n+   */\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+\n+  private var parsedFormula: Option[RFormula] = None\n+\n+  /**\n+   * Sets the formula to use for this transformer. Must be called before use.\n+   * @group setParam\n+   * @param value an R formula in string form (e.g. \"y ~ x + z\")\n+   */\n+  def setFormula(value: String): this.type = {\n+    parsedFormula = Some(RFormulaParser.parse(value))\n+    set(formula, value)\n+    this\n+  }\n+\n+  /** @group getParam */\n+  def getFormula: String = $(formula)\n+\n+  /** @group getParam */\n+  def setFeaturesCol(col: String): this.type = set(featuresCol, col)\n+\n+  /** @group getParam */\n+  def setLabelCol(col: String): this.type = set(labelCol, col)\n+\n+  override def transformSchema(schema: StructType): StructType = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    val withFeatures = featureTransformer.transformSchema(schema)\n+    val nullable = schema(parsedFormula.get.response).dataType match {\n+      case _: NumericType | BooleanType => false\n+      case _ => true\n+    }\n+    StructType(withFeatures.fields :+ StructField($(labelCol), DoubleType, nullable))\n+  }\n+\n+  override def transform(dataset: DataFrame): DataFrame = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    transformLabel(featureTransformer.transform(dataset))\n+  }\n+\n+  override def copy(extra: ParamMap): RModelFormula = defaultCopy(extra)\n+\n+  override def toString: String = s\"RModelFormula(${get(formula)})\""
  }, {
    "author": {
      "login": "ericl"
    },
    "body": "Kept as get(), since toString should not throw.\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-15T23:43:01Z",
    "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against an R model formula. Currently\n+ * we support a limited subset of the R operators, including '~' and '+'. Also see the R formula\n+ * docs here: http://www.inside-r.org/r-doc/stats/formula\n+ */\n+@Experimental\n+class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  /**\n+   * R formula parameter. The formula is provided in string form.\n+   * @group setParam\n+   */\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+\n+  private var parsedFormula: Option[RFormula] = None\n+\n+  /**\n+   * Sets the formula to use for this transformer. Must be called before use.\n+   * @group setParam\n+   * @param value an R formula in string form (e.g. \"y ~ x + z\")\n+   */\n+  def setFormula(value: String): this.type = {\n+    parsedFormula = Some(RFormulaParser.parse(value))\n+    set(formula, value)\n+    this\n+  }\n+\n+  /** @group getParam */\n+  def getFormula: String = $(formula)\n+\n+  /** @group getParam */\n+  def setFeaturesCol(col: String): this.type = set(featuresCol, col)\n+\n+  /** @group getParam */\n+  def setLabelCol(col: String): this.type = set(labelCol, col)\n+\n+  override def transformSchema(schema: StructType): StructType = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    val withFeatures = featureTransformer.transformSchema(schema)\n+    val nullable = schema(parsedFormula.get.response).dataType match {\n+      case _: NumericType | BooleanType => false\n+      case _ => true\n+    }\n+    StructType(withFeatures.fields :+ StructField($(labelCol), DoubleType, nullable))\n+  }\n+\n+  override def transform(dataset: DataFrame): DataFrame = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    transformLabel(featureTransformer.transform(dataset))\n+  }\n+\n+  override def copy(extra: ParamMap): RModelFormula = defaultCopy(extra)\n+\n+  override def toString: String = s\"RModelFormula(${get(formula)})\""
  }],
  "prId": 7381
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "\"response\", \"target\", or \"label\" are all valid names. In MLlib, we use \"label\". So it might be useful to rename \"response\" to \"label\".\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-15T01:03:44Z",
    "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against an R model formula. Currently\n+ * we support a limited subset of the R operators, including '~' and '+'. Also see the R formula\n+ * docs here: http://www.inside-r.org/r-doc/stats/formula\n+ */\n+@Experimental\n+class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  /**\n+   * R formula parameter. The formula is provided in string form.\n+   * @group setParam\n+   */\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+\n+  private var parsedFormula: Option[RFormula] = None\n+\n+  /**\n+   * Sets the formula to use for this transformer. Must be called before use.\n+   * @group setParam\n+   * @param value an R formula in string form (e.g. \"y ~ x + z\")\n+   */\n+  def setFormula(value: String): this.type = {\n+    parsedFormula = Some(RFormulaParser.parse(value))\n+    set(formula, value)\n+    this\n+  }\n+\n+  /** @group getParam */\n+  def getFormula: String = $(formula)\n+\n+  /** @group getParam */\n+  def setFeaturesCol(col: String): this.type = set(featuresCol, col)\n+\n+  /** @group getParam */\n+  def setLabelCol(col: String): this.type = set(labelCol, col)\n+\n+  override def transformSchema(schema: StructType): StructType = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    val withFeatures = featureTransformer.transformSchema(schema)\n+    val nullable = schema(parsedFormula.get.response).dataType match {\n+      case _: NumericType | BooleanType => false\n+      case _ => true\n+    }\n+    StructType(withFeatures.fields :+ StructField($(labelCol), DoubleType, nullable))\n+  }\n+\n+  override def transform(dataset: DataFrame): DataFrame = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    transformLabel(featureTransformer.transform(dataset))\n+  }\n+\n+  override def copy(extra: ParamMap): RModelFormula = defaultCopy(extra)\n+\n+  override def toString: String = s\"RModelFormula(${get(formula)})\"\n+\n+  private def transformLabel(dataset: DataFrame): DataFrame = {\n+    val responseName = parsedFormula.get.response"
  }],
  "prId": 7381
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "What if the `responseName` is the same as `labelCol`? This may cause unexpected behavior. If the input is `DoubleType`, we should allow `labelCol` be the same as the target term in the formula. If we need to do transformation, then user should set a different `labelCol`. We can set the default `featuresCol` and `labelCol` based on the uid and hence it won't have name collision. I don't think this is a good solution, but I don't have good suggestions.\n\nBtw, we can use `DataFrame.withColumn` to append a new column.\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-15T01:03:46Z",
    "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against an R model formula. Currently\n+ * we support a limited subset of the R operators, including '~' and '+'. Also see the R formula\n+ * docs here: http://www.inside-r.org/r-doc/stats/formula\n+ */\n+@Experimental\n+class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  /**\n+   * R formula parameter. The formula is provided in string form.\n+   * @group setParam\n+   */\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+\n+  private var parsedFormula: Option[RFormula] = None\n+\n+  /**\n+   * Sets the formula to use for this transformer. Must be called before use.\n+   * @group setParam\n+   * @param value an R formula in string form (e.g. \"y ~ x + z\")\n+   */\n+  def setFormula(value: String): this.type = {\n+    parsedFormula = Some(RFormulaParser.parse(value))\n+    set(formula, value)\n+    this\n+  }\n+\n+  /** @group getParam */\n+  def getFormula: String = $(formula)\n+\n+  /** @group getParam */\n+  def setFeaturesCol(col: String): this.type = set(featuresCol, col)\n+\n+  /** @group getParam */\n+  def setLabelCol(col: String): this.type = set(labelCol, col)\n+\n+  override def transformSchema(schema: StructType): StructType = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    val withFeatures = featureTransformer.transformSchema(schema)\n+    val nullable = schema(parsedFormula.get.response).dataType match {\n+      case _: NumericType | BooleanType => false\n+      case _ => true\n+    }\n+    StructType(withFeatures.fields :+ StructField($(labelCol), DoubleType, nullable))\n+  }\n+\n+  override def transform(dataset: DataFrame): DataFrame = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    transformLabel(featureTransformer.transform(dataset))\n+  }\n+\n+  override def copy(extra: ParamMap): RModelFormula = defaultCopy(extra)\n+\n+  override def toString: String = s\"RModelFormula(${get(formula)})\"\n+\n+  private def transformLabel(dataset: DataFrame): DataFrame = {\n+    val responseName = parsedFormula.get.response\n+    dataset.schema(responseName).dataType match {\n+      case _: NumericType | BooleanType =>\n+        dataset.select(\n+          col(\"*\"),\n+          dataset(responseName).cast(DoubleType).as($(labelCol)))"
  }, {
    "author": {
      "login": "ericl"
    },
    "body": "I added a check for this case, but kept the defaults as \"feature\" and \"label\" unless you think we should always randomize.\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-15T23:43:38Z",
    "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against an R model formula. Currently\n+ * we support a limited subset of the R operators, including '~' and '+'. Also see the R formula\n+ * docs here: http://www.inside-r.org/r-doc/stats/formula\n+ */\n+@Experimental\n+class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  /**\n+   * R formula parameter. The formula is provided in string form.\n+   * @group setParam\n+   */\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+\n+  private var parsedFormula: Option[RFormula] = None\n+\n+  /**\n+   * Sets the formula to use for this transformer. Must be called before use.\n+   * @group setParam\n+   * @param value an R formula in string form (e.g. \"y ~ x + z\")\n+   */\n+  def setFormula(value: String): this.type = {\n+    parsedFormula = Some(RFormulaParser.parse(value))\n+    set(formula, value)\n+    this\n+  }\n+\n+  /** @group getParam */\n+  def getFormula: String = $(formula)\n+\n+  /** @group getParam */\n+  def setFeaturesCol(col: String): this.type = set(featuresCol, col)\n+\n+  /** @group getParam */\n+  def setLabelCol(col: String): this.type = set(labelCol, col)\n+\n+  override def transformSchema(schema: StructType): StructType = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    val withFeatures = featureTransformer.transformSchema(schema)\n+    val nullable = schema(parsedFormula.get.response).dataType match {\n+      case _: NumericType | BooleanType => false\n+      case _ => true\n+    }\n+    StructType(withFeatures.fields :+ StructField($(labelCol), DoubleType, nullable))\n+  }\n+\n+  override def transform(dataset: DataFrame): DataFrame = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    transformLabel(featureTransformer.transform(dataset))\n+  }\n+\n+  override def copy(extra: ParamMap): RModelFormula = defaultCopy(extra)\n+\n+  override def toString: String = s\"RModelFormula(${get(formula)})\"\n+\n+  private def transformLabel(dataset: DataFrame): DataFrame = {\n+    val responseName = parsedFormula.get.response\n+    dataset.schema(responseName).dataType match {\n+      case _: NumericType | BooleanType =>\n+        dataset.select(\n+          col(\"*\"),\n+          dataset(responseName).cast(DoubleType).as($(labelCol)))"
  }],
  "prId": 7381
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "It might be necessary to implement `RModelFormula` as an `Estimator`. Otherwise, this StringIndexer() will be called every time when `transform` is called. If the input dataset is different, it would result different answers. For this PR, how about removing support for string labels? In a follow-up PR, we can make `RModelFormula` as an `Estimator`, whose `fit` returns a `RModelFormulaModel` ... (The name is awkward. Maybe we should call `RFormula` and `RFormulaModel` instead.)\n",
    "commit": "d1959d2818b11c6b173442deb6582e73557545c2",
    "createdAt": "2015-07-15T03:41:57Z",
    "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import scala.util.parsing.combinator.RegexParsers\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.ml.Transformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.ml.param.shared.{HasFeaturesCol, HasLabelCol}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * :: Experimental ::\n+ * Implements the transforms required for fitting a dataset against an R model formula. Currently\n+ * we support a limited subset of the R operators, including '~' and '+'. Also see the R formula\n+ * docs here: http://www.inside-r.org/r-doc/stats/formula\n+ */\n+@Experimental\n+class RModelFormula(override val uid: String)\n+  extends Transformer with HasFeaturesCol with HasLabelCol {\n+\n+  def this() = this(Identifiable.randomUID(\"rModelFormula\"))\n+\n+  /**\n+   * R formula parameter. The formula is provided in string form.\n+   * @group setParam\n+   */\n+  val formula: Param[String] = new Param(this, \"formula\", \"R model formula\")\n+\n+  private var parsedFormula: Option[RFormula] = None\n+\n+  /**\n+   * Sets the formula to use for this transformer. Must be called before use.\n+   * @group setParam\n+   * @param value an R formula in string form (e.g. \"y ~ x + z\")\n+   */\n+  def setFormula(value: String): this.type = {\n+    parsedFormula = Some(RFormulaParser.parse(value))\n+    set(formula, value)\n+    this\n+  }\n+\n+  /** @group getParam */\n+  def getFormula: String = $(formula)\n+\n+  /** @group getParam */\n+  def setFeaturesCol(col: String): this.type = set(featuresCol, col)\n+\n+  /** @group getParam */\n+  def setLabelCol(col: String): this.type = set(labelCol, col)\n+\n+  override def transformSchema(schema: StructType): StructType = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    val withFeatures = featureTransformer.transformSchema(schema)\n+    val nullable = schema(parsedFormula.get.response).dataType match {\n+      case _: NumericType | BooleanType => false\n+      case _ => true\n+    }\n+    StructType(withFeatures.fields :+ StructField($(labelCol), DoubleType, nullable))\n+  }\n+\n+  override def transform(dataset: DataFrame): DataFrame = {\n+    require(parsedFormula.isDefined, \"Must call setFormula() first.\")\n+    transformLabel(featureTransformer.transform(dataset))\n+  }\n+\n+  override def copy(extra: ParamMap): RModelFormula = defaultCopy(extra)\n+\n+  override def toString: String = s\"RModelFormula(${get(formula)})\"\n+\n+  private def transformLabel(dataset: DataFrame): DataFrame = {\n+    val responseName = parsedFormula.get.response\n+    dataset.schema(responseName).dataType match {\n+      case _: NumericType | BooleanType =>\n+        dataset.select(\n+          col(\"*\"),\n+          dataset(responseName).cast(DoubleType).as($(labelCol)))\n+      case StringType =>\n+        new StringIndexer()"
  }],
  "prId": 7381
}]