[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "newline at the end - technically this should be caught by scalastyle.",
    "commit": "218ce4cf796308c8705a27889b25100e2b779365",
    "createdAt": "2018-09-04T10:09:54Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source.image\n+\n+/**\n+ * `image` package implements Spark SQL data source API for loading IMAGE data as `DataFrame`.\n+ * The loaded `DataFrame` has one `StructType` column: `image`.\n+ * The schema of the `image` column is:\n+ *  - origin: String (represent the origin of image. If loaded from file, then it is file path)\n+ *  - height: Int (height of image)\n+ *  - width: Int (width of image)\n+ *  - nChannels: Int (number of image channels)\n+ *  - mode: Int (OpenCV-compatible type)\n+ *  - data: BinaryType (Image bytes in OpenCV-compatible order: row-wise BGR in most cases)\n+ *\n+ * To use IMAGE data source, you need to set \"image\" as the format in `DataFrameReader` and\n+ * optionally specify options, for example:\n+ * {{{\n+ *   // Scala\n+ *   val df = spark.read.format(\"image\")\n+ *     .option(\"dropImageFailures\", \"true\")\n+ *     .load(\"data/mllib/images/imagesWithPartitions\")\n+ *\n+ *   // Java\n+ *   Dataset<Row> df = spark.read().format(\"image\")\n+ *     .option(\"dropImageFailures\", \"true\")\n+ *     .load(\"data/mllib/images/imagesWithPartitions\");\n+ * }}}\n+ *\n+ * IMAGE data source supports the following options:\n+ *  - \"dropImageFailures\": Whether to drop the files that are not valid images from the result.\n+ *\n+ * @note This class is public for documentation purpose. Please don't use this class directly.\n+ * Rather, use the data source API as illustrated above.\n+ */\n+class ImageDataSource private() {}",
    "line": 53
  }],
  "prId": 22328
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "@WeichenXu123, don't we plan to make a documentation in the site?",
    "commit": "218ce4cf796308c8705a27889b25100e2b779365",
    "createdAt": "2018-09-04T10:18:23Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source.image\n+\n+/**\n+ * `image` package implements Spark SQL data source API for loading IMAGE data as `DataFrame`.\n+ * The loaded `DataFrame` has one `StructType` column: `image`.\n+ * The schema of the `image` column is:\n+ *  - origin: String (represent the origin of image. If loaded from file, then it is file path)\n+ *  - height: Int (height of image)\n+ *  - width: Int (width of image)\n+ *  - nChannels: Int (number of image channels)\n+ *  - mode: Int (OpenCV-compatible type)\n+ *  - data: BinaryType (Image bytes in OpenCV-compatible order: row-wise BGR in most cases)\n+ *\n+ * To use IMAGE data source, you need to set \"image\" as the format in `DataFrameReader` and\n+ * optionally specify options, for example:\n+ * {{{\n+ *   // Scala\n+ *   val df = spark.read.format(\"image\")\n+ *     .option(\"dropImageFailures\", \"true\")\n+ *     .load(\"data/mllib/images/imagesWithPartitions\")\n+ *\n+ *   // Java\n+ *   Dataset<Row> df = spark.read().format(\"image\")\n+ *     .option(\"dropImageFailures\", \"true\")\n+ *     .load(\"data/mllib/images/imagesWithPartitions\");\n+ * }}}\n+ *\n+ * IMAGE data source supports the following options:\n+ *  - \"dropImageFailures\": Whether to drop the files that are not valid images from the result.\n+ *\n+ * @note This class is public for documentation purpose. Please don't use this class directly.\n+ * Rather, use the data source API as illustrated above."
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "I didn't see a section in the doc that lists all built-in data sources. It would be nice if we create a section and link it to this API doc. I think we can do it with a follow-up PR. I want to see if we can get this PR merged before branch cut:)",
    "commit": "218ce4cf796308c8705a27889b25100e2b779365",
    "createdAt": "2018-09-04T15:44:07Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source.image\n+\n+/**\n+ * `image` package implements Spark SQL data source API for loading IMAGE data as `DataFrame`.\n+ * The loaded `DataFrame` has one `StructType` column: `image`.\n+ * The schema of the `image` column is:\n+ *  - origin: String (represent the origin of image. If loaded from file, then it is file path)\n+ *  - height: Int (height of image)\n+ *  - width: Int (width of image)\n+ *  - nChannels: Int (number of image channels)\n+ *  - mode: Int (OpenCV-compatible type)\n+ *  - data: BinaryType (Image bytes in OpenCV-compatible order: row-wise BGR in most cases)\n+ *\n+ * To use IMAGE data source, you need to set \"image\" as the format in `DataFrameReader` and\n+ * optionally specify options, for example:\n+ * {{{\n+ *   // Scala\n+ *   val df = spark.read.format(\"image\")\n+ *     .option(\"dropImageFailures\", \"true\")\n+ *     .load(\"data/mllib/images/imagesWithPartitions\")\n+ *\n+ *   // Java\n+ *   Dataset<Row> df = spark.read().format(\"image\")\n+ *     .option(\"dropImageFailures\", \"true\")\n+ *     .load(\"data/mllib/images/imagesWithPartitions\");\n+ * }}}\n+ *\n+ * IMAGE data source supports the following options:\n+ *  - \"dropImageFailures\": Whether to drop the files that are not valid images from the result.\n+ *\n+ * @note This class is public for documentation purpose. Please don't use this class directly.\n+ * Rather, use the data source API as illustrated above."
  }],
  "prId": 22328
}, {
  "comments": [{
    "author": {
      "login": "imatiach-msft"
    },
    "body": "tiny nit: although it makes sense, \"optionally specify options\" is a bit confusing, maybe \"optionally specify arguments\" or just \"specify options\"?",
    "commit": "218ce4cf796308c8705a27889b25100e2b779365",
    "createdAt": "2018-09-04T15:51:40Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source.image\n+\n+/**\n+ * `image` package implements Spark SQL data source API for loading IMAGE data as `DataFrame`.\n+ * The loaded `DataFrame` has one `StructType` column: `image`.\n+ * The schema of the `image` column is:\n+ *  - origin: String (represent the origin of image. If loaded from file, then it is file path)\n+ *  - height: Int (height of image)\n+ *  - width: Int (width of image)\n+ *  - nChannels: Int (number of image channels)\n+ *  - mode: Int (OpenCV-compatible type)\n+ *  - data: BinaryType (Image bytes in OpenCV-compatible order: row-wise BGR in most cases)\n+ *\n+ * To use IMAGE data source, you need to set \"image\" as the format in `DataFrameReader` and\n+ * optionally specify options, for example:"
  }, {
    "author": {
      "login": "WeichenXu123"
    },
    "body": "The latter \"options\" is \"datasource options\", it is the widely used term.\r\nSo I prefer to change to \"optionally specify the datasource options\"",
    "commit": "218ce4cf796308c8705a27889b25100e2b779365",
    "createdAt": "2018-09-05T04:54:44Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source.image\n+\n+/**\n+ * `image` package implements Spark SQL data source API for loading IMAGE data as `DataFrame`.\n+ * The loaded `DataFrame` has one `StructType` column: `image`.\n+ * The schema of the `image` column is:\n+ *  - origin: String (represent the origin of image. If loaded from file, then it is file path)\n+ *  - height: Int (height of image)\n+ *  - width: Int (width of image)\n+ *  - nChannels: Int (number of image channels)\n+ *  - mode: Int (OpenCV-compatible type)\n+ *  - data: BinaryType (Image bytes in OpenCV-compatible order: row-wise BGR in most cases)\n+ *\n+ * To use IMAGE data source, you need to set \"image\" as the format in `DataFrameReader` and\n+ * optionally specify options, for example:"
  }],
  "prId": 22328
}, {
  "comments": [{
    "author": {
      "login": "imatiach-msft"
    },
    "body": "this is very cool!",
    "commit": "218ce4cf796308c8705a27889b25100e2b779365",
    "createdAt": "2018-09-04T15:55:21Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source.image\n+\n+/**\n+ * `image` package implements Spark SQL data source API for loading IMAGE data as `DataFrame`.\n+ * The loaded `DataFrame` has one `StructType` column: `image`.\n+ * The schema of the `image` column is:\n+ *  - origin: String (represent the origin of image. If loaded from file, then it is file path)\n+ *  - height: Int (height of image)\n+ *  - width: Int (width of image)\n+ *  - nChannels: Int (number of image channels)\n+ *  - mode: Int (OpenCV-compatible type)\n+ *  - data: BinaryType (Image bytes in OpenCV-compatible order: row-wise BGR in most cases)\n+ *\n+ * To use IMAGE data source, you need to set \"image\" as the format in `DataFrameReader` and\n+ * optionally specify options, for example:\n+ * {{{\n+ *   // Scala\n+ *   val df = spark.read.format(\"image\")"
  }],
  "prId": 22328
}, {
  "comments": [{
    "author": {
      "login": "jaceklaskowski"
    },
    "body": "\"represents\" + \"the image\". I can see many missing `a`s and `the`s in the description :(",
    "commit": "218ce4cf796308c8705a27889b25100e2b779365",
    "createdAt": "2018-09-04T19:19:10Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source.image\n+\n+/**\n+ * `image` package implements Spark SQL data source API for loading IMAGE data as `DataFrame`.\n+ * The loaded `DataFrame` has one `StructType` column: `image`.\n+ * The schema of the `image` column is:\n+ *  - origin: String (represent the origin of image. If loaded from file, then it is file path)"
  }],
  "prId": 22328
}, {
  "comments": [{
    "author": {
      "login": "jaceklaskowski"
    },
    "body": "`true` as  a boolean value, please.",
    "commit": "218ce4cf796308c8705a27889b25100e2b779365",
    "createdAt": "2018-09-04T19:20:28Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source.image\n+\n+/**\n+ * `image` package implements Spark SQL data source API for loading IMAGE data as `DataFrame`.\n+ * The loaded `DataFrame` has one `StructType` column: `image`.\n+ * The schema of the `image` column is:\n+ *  - origin: String (represent the origin of image. If loaded from file, then it is file path)\n+ *  - height: Int (height of image)\n+ *  - width: Int (width of image)\n+ *  - nChannels: Int (number of image channels)\n+ *  - mode: Int (OpenCV-compatible type)\n+ *  - data: BinaryType (Image bytes in OpenCV-compatible order: row-wise BGR in most cases)\n+ *\n+ * To use IMAGE data source, you need to set \"image\" as the format in `DataFrameReader` and\n+ * optionally specify options, for example:\n+ * {{{\n+ *   // Scala\n+ *   val df = spark.read.format(\"image\")\n+ *     .option(\"dropImageFailures\", \"true\")"
  }, {
    "author": {
      "login": "WeichenXu123"
    },
    "body": "option API require (k: String, v:String) parameters.",
    "commit": "218ce4cf796308c8705a27889b25100e2b779365",
    "createdAt": "2018-09-05T05:21:14Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source.image\n+\n+/**\n+ * `image` package implements Spark SQL data source API for loading IMAGE data as `DataFrame`.\n+ * The loaded `DataFrame` has one `StructType` column: `image`.\n+ * The schema of the `image` column is:\n+ *  - origin: String (represent the origin of image. If loaded from file, then it is file path)\n+ *  - height: Int (height of image)\n+ *  - width: Int (width of image)\n+ *  - nChannels: Int (number of image channels)\n+ *  - mode: Int (OpenCV-compatible type)\n+ *  - data: BinaryType (Image bytes in OpenCV-compatible order: row-wise BGR in most cases)\n+ *\n+ * To use IMAGE data source, you need to set \"image\" as the format in `DataFrameReader` and\n+ * optionally specify options, for example:\n+ * {{{\n+ *   // Scala\n+ *   val df = spark.read.format(\"image\")\n+ *     .option(\"dropImageFailures\", \"true\")"
  }, {
    "author": {
      "login": "jaceklaskowski"
    },
    "body": "Really? What about `option(key: String, value: Boolean): DataFrameReader` then? There are more --> http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.DataFrameReader",
    "commit": "218ce4cf796308c8705a27889b25100e2b779365",
    "createdAt": "2018-09-05T10:29:10Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source.image\n+\n+/**\n+ * `image` package implements Spark SQL data source API for loading IMAGE data as `DataFrame`.\n+ * The loaded `DataFrame` has one `StructType` column: `image`.\n+ * The schema of the `image` column is:\n+ *  - origin: String (represent the origin of image. If loaded from file, then it is file path)\n+ *  - height: Int (height of image)\n+ *  - width: Int (width of image)\n+ *  - nChannels: Int (number of image channels)\n+ *  - mode: Int (OpenCV-compatible type)\n+ *  - data: BinaryType (Image bytes in OpenCV-compatible order: row-wise BGR in most cases)\n+ *\n+ * To use IMAGE data source, you need to set \"image\" as the format in `DataFrameReader` and\n+ * optionally specify options, for example:\n+ * {{{\n+ *   // Scala\n+ *   val df = spark.read.format(\"image\")\n+ *     .option(\"dropImageFailures\", \"true\")"
  }],
  "prId": 22328
}, {
  "comments": [{
    "author": {
      "login": "jaceklaskowski"
    },
    "body": "s/datasource/data source",
    "commit": "218ce4cf796308c8705a27889b25100e2b779365",
    "createdAt": "2018-09-05T05:17:50Z",
    "diffHunk": "@@ -29,7 +29,7 @@ package org.apache.spark.ml.source.image\n  *  - data: BinaryType (Image bytes in OpenCV-compatible order: row-wise BGR in most cases)\n  *\n  * To use IMAGE data source, you need to set \"image\" as the format in `DataFrameReader` and\n- * optionally specify options, for example:\n+ * optionally specify the datasource options, for example:"
  }],
  "prId": 22328
}, {
  "comments": [{
    "author": {
      "login": "jaceklaskowski"
    },
    "body": "s/\"write\"/saving images to a file(s)/ ?",
    "commit": "218ce4cf796308c8705a27889b25100e2b779365",
    "createdAt": "2018-09-05T05:19:08Z",
    "diffHunk": "@@ -45,6 +45,8 @@ package org.apache.spark.ml.source.image\n  * IMAGE data source supports the following options:\n  *  - \"dropImageFailures\": Whether to drop the files that are not valid images from the result.\n  *\n+ * @note This IMAGE data source does not support \"write\"."
  }],
  "prId": 22328
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "why do we need this class?",
    "commit": "218ce4cf796308c8705a27889b25100e2b779365",
    "createdAt": "2018-09-05T05:23:24Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source.image\n+\n+/**\n+ * `image` package implements Spark SQL data source API for loading IMAGE data as `DataFrame`.\n+ * The loaded `DataFrame` has one `StructType` column: `image`.\n+ * The schema of the `image` column is:\n+ *  - origin: String (represent the origin of image. If loaded from file, then it is file path)\n+ *  - height: Int (height of image)\n+ *  - width: Int (width of image)\n+ *  - nChannels: Int (number of image channels)\n+ *  - mode: Int (OpenCV-compatible type)\n+ *  - data: BinaryType (Image bytes in OpenCV-compatible order: row-wise BGR in most cases)\n+ *\n+ * To use IMAGE data source, you need to set \"image\" as the format in `DataFrameReader` and\n+ * optionally specify the datasource options, for example:\n+ * {{{\n+ *   // Scala\n+ *   val df = spark.read.format(\"image\")\n+ *     .option(\"dropImageFailures\", \"true\")\n+ *     .load(\"data/mllib/images/imagesWithPartitions\")\n+ *\n+ *   // Java\n+ *   Dataset<Row> df = spark.read().format(\"image\")\n+ *     .option(\"dropImageFailures\", \"true\")\n+ *     .load(\"data/mllib/images/imagesWithPartitions\");\n+ * }}}\n+ *\n+ * IMAGE data source supports the following options:\n+ *  - \"dropImageFailures\": Whether to drop the files that are not valid images from the result.\n+ *\n+ * @note This IMAGE data source does not support \"write\".\n+ *\n+ * @note This class is public for documentation purpose. Please don't use this class directly.\n+ * Rather, use the data source API as illustrated above.\n+ */\n+class ImageDataSource private() {}",
    "line": 53
  }, {
    "author": {
      "login": "WeichenXu123"
    },
    "body": "for doc.\r\nsimilar to `LibSVMDataSource`",
    "commit": "218ce4cf796308c8705a27889b25100e2b779365",
    "createdAt": "2018-09-05T05:24:07Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source.image\n+\n+/**\n+ * `image` package implements Spark SQL data source API for loading IMAGE data as `DataFrame`.\n+ * The loaded `DataFrame` has one `StructType` column: `image`.\n+ * The schema of the `image` column is:\n+ *  - origin: String (represent the origin of image. If loaded from file, then it is file path)\n+ *  - height: Int (height of image)\n+ *  - width: Int (width of image)\n+ *  - nChannels: Int (number of image channels)\n+ *  - mode: Int (OpenCV-compatible type)\n+ *  - data: BinaryType (Image bytes in OpenCV-compatible order: row-wise BGR in most cases)\n+ *\n+ * To use IMAGE data source, you need to set \"image\" as the format in `DataFrameReader` and\n+ * optionally specify the datasource options, for example:\n+ * {{{\n+ *   // Scala\n+ *   val df = spark.read.format(\"image\")\n+ *     .option(\"dropImageFailures\", \"true\")\n+ *     .load(\"data/mllib/images/imagesWithPartitions\")\n+ *\n+ *   // Java\n+ *   Dataset<Row> df = spark.read().format(\"image\")\n+ *     .option(\"dropImageFailures\", \"true\")\n+ *     .load(\"data/mllib/images/imagesWithPartitions\");\n+ * }}}\n+ *\n+ * IMAGE data source supports the following options:\n+ *  - \"dropImageFailures\": Whether to drop the files that are not valid images from the result.\n+ *\n+ * @note This IMAGE data source does not support \"write\".\n+ *\n+ * @note This class is public for documentation purpose. Please don't use this class directly.\n+ * Rather, use the data source API as illustrated above.\n+ */\n+class ImageDataSource private() {}",
    "line": 53
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "Is this a convention? AFAIK in the scala world we usually put document in package object.",
    "commit": "218ce4cf796308c8705a27889b25100e2b779365",
    "createdAt": "2018-09-05T05:31:17Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source.image\n+\n+/**\n+ * `image` package implements Spark SQL data source API for loading IMAGE data as `DataFrame`.\n+ * The loaded `DataFrame` has one `StructType` column: `image`.\n+ * The schema of the `image` column is:\n+ *  - origin: String (represent the origin of image. If loaded from file, then it is file path)\n+ *  - height: Int (height of image)\n+ *  - width: Int (width of image)\n+ *  - nChannels: Int (number of image channels)\n+ *  - mode: Int (OpenCV-compatible type)\n+ *  - data: BinaryType (Image bytes in OpenCV-compatible order: row-wise BGR in most cases)\n+ *\n+ * To use IMAGE data source, you need to set \"image\" as the format in `DataFrameReader` and\n+ * optionally specify the datasource options, for example:\n+ * {{{\n+ *   // Scala\n+ *   val df = spark.read.format(\"image\")\n+ *     .option(\"dropImageFailures\", \"true\")\n+ *     .load(\"data/mllib/images/imagesWithPartitions\")\n+ *\n+ *   // Java\n+ *   Dataset<Row> df = spark.read().format(\"image\")\n+ *     .option(\"dropImageFailures\", \"true\")\n+ *     .load(\"data/mllib/images/imagesWithPartitions\");\n+ * }}}\n+ *\n+ * IMAGE data source supports the following options:\n+ *  - \"dropImageFailures\": Whether to drop the files that are not valid images from the result.\n+ *\n+ * @note This IMAGE data source does not support \"write\".\n+ *\n+ * @note This class is public for documentation purpose. Please don't use this class directly.\n+ * Rather, use the data source API as illustrated above.\n+ */\n+class ImageDataSource private() {}",
    "line": 53
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Can we just simply remove this and make a followup for the doc in the site .. ",
    "commit": "218ce4cf796308c8705a27889b25100e2b779365",
    "createdAt": "2018-09-05T06:05:46Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source.image\n+\n+/**\n+ * `image` package implements Spark SQL data source API for loading IMAGE data as `DataFrame`.\n+ * The loaded `DataFrame` has one `StructType` column: `image`.\n+ * The schema of the `image` column is:\n+ *  - origin: String (represent the origin of image. If loaded from file, then it is file path)\n+ *  - height: Int (height of image)\n+ *  - width: Int (width of image)\n+ *  - nChannels: Int (number of image channels)\n+ *  - mode: Int (OpenCV-compatible type)\n+ *  - data: BinaryType (Image bytes in OpenCV-compatible order: row-wise BGR in most cases)\n+ *\n+ * To use IMAGE data source, you need to set \"image\" as the format in `DataFrameReader` and\n+ * optionally specify the datasource options, for example:\n+ * {{{\n+ *   // Scala\n+ *   val df = spark.read.format(\"image\")\n+ *     .option(\"dropImageFailures\", \"true\")\n+ *     .load(\"data/mllib/images/imagesWithPartitions\")\n+ *\n+ *   // Java\n+ *   Dataset<Row> df = spark.read().format(\"image\")\n+ *     .option(\"dropImageFailures\", \"true\")\n+ *     .load(\"data/mllib/images/imagesWithPartitions\");\n+ * }}}\n+ *\n+ * IMAGE data source supports the following options:\n+ *  - \"dropImageFailures\": Whether to drop the files that are not valid images from the result.\n+ *\n+ * @note This IMAGE data source does not support \"write\".\n+ *\n+ * @note This class is public for documentation purpose. Please don't use this class directly.\n+ * Rather, use the data source API as illustrated above.\n+ */\n+class ImageDataSource private() {}",
    "line": 53
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Re: @cloud-fan The Scala package doc doesn't work for Java, which requires a different format.\r\n\r\nRe: @HyukjinKwon It would be nice to have some doc in the site, though I didn't find the list of built-in data sources in the doc site. I think it is okay to have docs in both locations for IDE users and for people search on the web.",
    "commit": "218ce4cf796308c8705a27889b25100e2b779365",
    "createdAt": "2018-09-05T08:32:59Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source.image\n+\n+/**\n+ * `image` package implements Spark SQL data source API for loading IMAGE data as `DataFrame`.\n+ * The loaded `DataFrame` has one `StructType` column: `image`.\n+ * The schema of the `image` column is:\n+ *  - origin: String (represent the origin of image. If loaded from file, then it is file path)\n+ *  - height: Int (height of image)\n+ *  - width: Int (width of image)\n+ *  - nChannels: Int (number of image channels)\n+ *  - mode: Int (OpenCV-compatible type)\n+ *  - data: BinaryType (Image bytes in OpenCV-compatible order: row-wise BGR in most cases)\n+ *\n+ * To use IMAGE data source, you need to set \"image\" as the format in `DataFrameReader` and\n+ * optionally specify the datasource options, for example:\n+ * {{{\n+ *   // Scala\n+ *   val df = spark.read.format(\"image\")\n+ *     .option(\"dropImageFailures\", \"true\")\n+ *     .load(\"data/mllib/images/imagesWithPartitions\")\n+ *\n+ *   // Java\n+ *   Dataset<Row> df = spark.read().format(\"image\")\n+ *     .option(\"dropImageFailures\", \"true\")\n+ *     .load(\"data/mllib/images/imagesWithPartitions\");\n+ * }}}\n+ *\n+ * IMAGE data source supports the following options:\n+ *  - \"dropImageFailures\": Whether to drop the files that are not valid images from the result.\n+ *\n+ * @note This IMAGE data source does not support \"write\".\n+ *\n+ * @note This class is public for documentation purpose. Please don't use this class directly.\n+ * Rather, use the data source API as illustrated above.\n+ */\n+class ImageDataSource private() {}",
    "line": 53
  }],
  "prId": 22328
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "\"IMAGE\" doesn't need to be all uppercase. Just say \"loading images\".",
    "commit": "218ce4cf796308c8705a27889b25100e2b779365",
    "createdAt": "2018-09-05T15:34:05Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source.image\n+\n+/**\n+ * `image` package implements Spark SQL data source API for loading IMAGE data as `DataFrame`."
  }],
  "prId": 22328
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "does it always load from files?",
    "commit": "218ce4cf796308c8705a27889b25100e2b779365",
    "createdAt": "2018-09-05T15:34:32Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source.image\n+\n+/**\n+ * `image` package implements Spark SQL data source API for loading IMAGE data as `DataFrame`.\n+ * The loaded `DataFrame` has one `StructType` column: `image`.\n+ * The schema of the `image` column is:\n+ *  - origin: String (represents the origin of the image.\n+ *                    If loaded from files, then it is the file path)"
  }],
  "prId": 22328
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "ditto on \"IMAGE\"",
    "commit": "218ce4cf796308c8705a27889b25100e2b779365",
    "createdAt": "2018-09-05T15:35:42Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source.image\n+\n+/**\n+ * `image` package implements Spark SQL data source API for loading IMAGE data as `DataFrame`.\n+ * The loaded `DataFrame` has one `StructType` column: `image`.\n+ * The schema of the `image` column is:\n+ *  - origin: String (represents the origin of the image.\n+ *                    If loaded from files, then it is the file path)\n+ *  - height: Int (height of the image)\n+ *  - width: Int (width of the image)\n+ *  - nChannels: Int (number of the image channels)\n+ *  - mode: Int (OpenCV-compatible type)\n+ *  - data: BinaryType (Image bytes in OpenCV-compatible order: row-wise BGR in most cases)\n+ *\n+ * To use IMAGE data source, you need to set \"image\" as the format in `DataFrameReader` and"
  }],
  "prId": 22328
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "How about changing `dropImageFailures` to `dropInvalid`?",
    "commit": "218ce4cf796308c8705a27889b25100e2b779365",
    "createdAt": "2018-09-05T15:37:21Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.source.image\n+\n+/**\n+ * `image` package implements Spark SQL data source API for loading IMAGE data as `DataFrame`.\n+ * The loaded `DataFrame` has one `StructType` column: `image`.\n+ * The schema of the `image` column is:\n+ *  - origin: String (represents the origin of the image.\n+ *                    If loaded from files, then it is the file path)\n+ *  - height: Int (height of the image)\n+ *  - width: Int (width of the image)\n+ *  - nChannels: Int (number of the image channels)\n+ *  - mode: Int (OpenCV-compatible type)\n+ *  - data: BinaryType (Image bytes in OpenCV-compatible order: row-wise BGR in most cases)\n+ *\n+ * To use IMAGE data source, you need to set \"image\" as the format in `DataFrameReader` and\n+ * optionally specify the data source options, for example:\n+ * {{{\n+ *   // Scala\n+ *   val df = spark.read.format(\"image\")\n+ *     .option(\"dropImageFailures\", true)\n+ *     .load(\"data/mllib/images/partitioned\")\n+ *\n+ *   // Java\n+ *   Dataset<Row> df = spark.read().format(\"image\")\n+ *     .option(\"dropImageFailures\", true)\n+ *     .load(\"data/mllib/images/partitioned\");\n+ * }}}\n+ *\n+ * IMAGE data source supports the following options:\n+ *  - \"dropImageFailures\": Whether to drop the files that are not valid images from the result."
  }],
  "prId": 22328
}]