[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "This was wrongly committed previously?",
    "commit": "bd800316aa01bf2e922209eefb9a500d71fbf899",
    "createdAt": "2019-02-03T10:07:56Z",
    "diffHunk": "@@ -91,46 +124,58 @@ private[ml] trait MLEvents extends Logging {\n \n   def withFitEvent[M <: Model[M]](\n       estimator: Estimator[M], dataset: Dataset[_])(func: => M): M = {\n-    val startEvent = FitStart(estimator, dataset)\n+    val startEvent = FitStart[M]()\n+    startEvent.estimator = estimator\n+    startEvent.dataset = dataset\n     logEvent(startEvent)\n     listenerBus.post(startEvent)\n     val model: M = func\n-    val endEvent = FitEnd(estimator, model)\n+    val endEvent = FitEnd[M]()\n+    endEvent.estimator = estimator\n+    endEvent.model = model\n     logEvent(endEvent)\n     listenerBus.post(endEvent)\n     model\n   }\n \n   def withTransformEvent(\n       transformer: Transformer, input: Dataset[_])(func: => DataFrame): DataFrame = {\n-    val startEvent = TransformStart(transformer, input)\n+    val startEvent = TransformStart()\n+    startEvent.transformer = transformer\n+    startEvent.input = input\n     logEvent(startEvent)\n     listenerBus.post(startEvent)\n     val output: DataFrame = func\n-    val endEvent = TransformEnd(transformer, output)\n+    val endEvent = TransformEnd()\n+    endEvent.transformer = transformer\n+    endEvent.output = output\n     logEvent(endEvent)\n     listenerBus.post(endEvent)\n     output\n   }\n \n   def withLoadInstanceEvent[T](reader: MLReader[T], path: String)(func: => T): T = {\n-    val startEvent = LoadInstanceStart(reader, path)\n+    val startEvent = LoadInstanceStart[T](path)\n+    startEvent.reader = reader\n     logEvent(startEvent)\n     listenerBus.post(startEvent)\n     val instance: T = func\n-    val endEvent = LoadInstanceEnd(reader, instance)\n+    val endEvent = LoadInstanceEnd[T]()\n+    endEvent.reader = reader\n+    endEvent.instance = instance\n     logEvent(endEvent)\n     listenerBus.post(endEvent)\n     instance\n   }\n \n   def withSaveInstanceEvent(writer: MLWriter, path: String)(func: => Unit): Unit = {\n-    listenerBus.post(SaveInstanceEnd(writer, path))",
    "line": 158
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Yup, I fixed it while I'm here",
    "commit": "bd800316aa01bf2e922209eefb9a500d71fbf899",
    "createdAt": "2019-02-03T13:12:17Z",
    "diffHunk": "@@ -91,46 +124,58 @@ private[ml] trait MLEvents extends Logging {\n \n   def withFitEvent[M <: Model[M]](\n       estimator: Estimator[M], dataset: Dataset[_])(func: => M): M = {\n-    val startEvent = FitStart(estimator, dataset)\n+    val startEvent = FitStart[M]()\n+    startEvent.estimator = estimator\n+    startEvent.dataset = dataset\n     logEvent(startEvent)\n     listenerBus.post(startEvent)\n     val model: M = func\n-    val endEvent = FitEnd(estimator, model)\n+    val endEvent = FitEnd[M]()\n+    endEvent.estimator = estimator\n+    endEvent.model = model\n     logEvent(endEvent)\n     listenerBus.post(endEvent)\n     model\n   }\n \n   def withTransformEvent(\n       transformer: Transformer, input: Dataset[_])(func: => DataFrame): DataFrame = {\n-    val startEvent = TransformStart(transformer, input)\n+    val startEvent = TransformStart()\n+    startEvent.transformer = transformer\n+    startEvent.input = input\n     logEvent(startEvent)\n     listenerBus.post(startEvent)\n     val output: DataFrame = func\n-    val endEvent = TransformEnd(transformer, output)\n+    val endEvent = TransformEnd()\n+    endEvent.transformer = transformer\n+    endEvent.output = output\n     logEvent(endEvent)\n     listenerBus.post(endEvent)\n     output\n   }\n \n   def withLoadInstanceEvent[T](reader: MLReader[T], path: String)(func: => T): T = {\n-    val startEvent = LoadInstanceStart(reader, path)\n+    val startEvent = LoadInstanceStart[T](path)\n+    startEvent.reader = reader\n     logEvent(startEvent)\n     listenerBus.post(startEvent)\n     val instance: T = func\n-    val endEvent = LoadInstanceEnd(reader, instance)\n+    val endEvent = LoadInstanceEnd[T]()\n+    endEvent.reader = reader\n+    endEvent.instance = instance\n     logEvent(endEvent)\n     listenerBus.post(endEvent)\n     instance\n   }\n \n   def withSaveInstanceEvent(writer: MLWriter, path: String)(func: => Unit): Unit = {\n-    listenerBus.post(SaveInstanceEnd(writer, path))",
    "line": 158
  }],
  "prId": 23728
}]