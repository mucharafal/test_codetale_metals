[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Can this be done with `match` or is there a specific advantage to this formulation, like speed?\n",
    "commit": "71d1bd042360376b7f8f75ba6be3471f443ce34e",
    "createdAt": "2015-03-06T11:30:41Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.attribute\n+\n+/**\n+ * An enum-like type for attribute types: [[AttributeType$#Numeric]], [[AttributeType$#Nominal]],\n+ * and [[AttributeType$#Binary]].\n+ */\n+sealed abstract class AttributeType(val name: String)\n+\n+object AttributeType {\n+\n+  /** Numeric type. */\n+  final val Numeric: AttributeType = {\n+    case object Numeric extends AttributeType(\"numeric\")\n+    Numeric\n+  }\n+\n+  /** Nominal type. */\n+  final val Nominal: AttributeType = {\n+    case object Nominal extends AttributeType(\"nominal\")\n+    Nominal\n+  }\n+\n+  /** Binary type. */\n+  final val Binary: AttributeType = {\n+    case object Binary extends AttributeType(\"binary\")\n+    Binary\n+  }\n+\n+  /**\n+   * Gets the [[AttributeType]] object from its name.\n+   * @param name attribute type name: \"numeric\", \"nominal\", or \"binary\"\n+   */\n+  def fromName(name: String): AttributeType = {\n+    if (name == Numeric.name) {",
    "line": 51
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Yes. `match ... case ...` usually generates more byte code, but I didn't verify it in this case. Let me check the bytecode.\n",
    "commit": "71d1bd042360376b7f8f75ba6be3471f443ce34e",
    "createdAt": "2015-03-06T16:55:30Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.attribute\n+\n+/**\n+ * An enum-like type for attribute types: [[AttributeType$#Numeric]], [[AttributeType$#Nominal]],\n+ * and [[AttributeType$#Binary]].\n+ */\n+sealed abstract class AttributeType(val name: String)\n+\n+object AttributeType {\n+\n+  /** Numeric type. */\n+  final val Numeric: AttributeType = {\n+    case object Numeric extends AttributeType(\"numeric\")\n+    Numeric\n+  }\n+\n+  /** Nominal type. */\n+  final val Nominal: AttributeType = {\n+    case object Nominal extends AttributeType(\"nominal\")\n+    Nominal\n+  }\n+\n+  /** Binary type. */\n+  final val Binary: AttributeType = {\n+    case object Binary extends AttributeType(\"binary\")\n+    Binary\n+  }\n+\n+  /**\n+   * Gets the [[AttributeType]] object from its name.\n+   * @param name attribute type name: \"numeric\", \"nominal\", or \"binary\"\n+   */\n+  def fromName(name: String): AttributeType = {\n+    if (name == Numeric.name) {",
    "line": 51
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Verified that `match ... case ...` produces more byte code. It doesn't mean that there will be a noticeable performance drop. No strong preference here.\n",
    "commit": "71d1bd042360376b7f8f75ba6be3471f443ce34e",
    "createdAt": "2015-03-06T17:29:16Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.attribute\n+\n+/**\n+ * An enum-like type for attribute types: [[AttributeType$#Numeric]], [[AttributeType$#Nominal]],\n+ * and [[AttributeType$#Binary]].\n+ */\n+sealed abstract class AttributeType(val name: String)\n+\n+object AttributeType {\n+\n+  /** Numeric type. */\n+  final val Numeric: AttributeType = {\n+    case object Numeric extends AttributeType(\"numeric\")\n+    Numeric\n+  }\n+\n+  /** Nominal type. */\n+  final val Nominal: AttributeType = {\n+    case object Nominal extends AttributeType(\"nominal\")\n+    Nominal\n+  }\n+\n+  /** Binary type. */\n+  final val Binary: AttributeType = {\n+    case object Binary extends AttributeType(\"binary\")\n+    Binary\n+  }\n+\n+  /**\n+   * Gets the [[AttributeType]] object from its name.\n+   * @param name attribute type name: \"numeric\", \"nominal\", or \"binary\"\n+   */\n+  def fromName(name: String): AttributeType = {\n+    if (name == Numeric.name) {",
    "line": 51
  }],
  "prId": 4925
}]