[{
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "Need `getBucketLength`\n",
    "commit": "35708458a0ee156c097ca604efeafaa37d3c8a6d",
    "createdAt": "2016-09-26T13:46:11Z",
    "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature.lsh\n+\n+import scala.util.Random\n+\n+import breeze.linalg.normalize\n+\n+import org.apache.spark.ml.linalg.{BLAS, Vector, Vectors}\n+import org.apache.spark.ml.param.{DoubleParam, Params, ParamValidators}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.Dataset\n+import org.apache.spark.sql.functions._\n+\n+/**\n+ * Params for [[RandomProjection]].\n+ */\n+private[ml] trait RandomProjectionParams extends Params {\n+  val bucketLength: DoubleParam = new DoubleParam(this, \"bucketLength\","
  }, {
    "author": {
      "login": "Yunni"
    },
    "body": "Done.\n",
    "commit": "35708458a0ee156c097ca604efeafaa37d3c8a6d",
    "createdAt": "2016-09-28T19:41:26Z",
    "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature.lsh\n+\n+import scala.util.Random\n+\n+import breeze.linalg.normalize\n+\n+import org.apache.spark.ml.linalg.{BLAS, Vector, Vectors}\n+import org.apache.spark.ml.param.{DoubleParam, Params, ParamValidators}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.Dataset\n+import org.apache.spark.sql.functions._\n+\n+/**\n+ * Params for [[RandomProjection]].\n+ */\n+private[ml] trait RandomProjectionParams extends Params {\n+  val bucketLength: DoubleParam = new DoubleParam(this, \"bucketLength\","
  }],
  "prId": 15148
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "See below comment, I think we can do without this var.\n",
    "commit": "35708458a0ee156c097ca604efeafaa37d3c8a6d",
    "createdAt": "2016-09-26T13:47:58Z",
    "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature.lsh\n+\n+import scala.util.Random\n+\n+import breeze.linalg.normalize\n+\n+import org.apache.spark.ml.linalg.{BLAS, Vector, Vectors}\n+import org.apache.spark.ml.param.{DoubleParam, Params, ParamValidators}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.Dataset\n+import org.apache.spark.sql.functions._\n+\n+/**\n+ * Params for [[RandomProjection]].\n+ */\n+private[ml] trait RandomProjectionParams extends Params {\n+  val bucketLength: DoubleParam = new DoubleParam(this, \"bucketLength\",\n+    \"the length of each hash bucket\", ParamValidators.gt(0))\n+}\n+\n+class RandomProjectionModel(\n+    override val uid: String,\n+    val randUnitVectors: Array[Vector])\n+  extends LSHModel[Vector, RandomProjectionModel] with RandomProjectionParams {\n+\n+  override protected[this] val hashFunction: (Vector) => Vector = {\n+    key: Vector => {\n+      val hashValues: Array[Double] = randUnitVectors.map({\n+        randUnitVector => Math.floor(BLAS.dot(key, randUnitVector) / $(bucketLength))\n+      })\n+      Vectors.dense(hashValues)\n+    }\n+  }\n+\n+  override protected[ml] def keyDistance(x: Vector, y: Vector): Double = {\n+    Math.sqrt(Vectors.sqdist(x, y))\n+  }\n+}\n+\n+/**\n+ * This [[RandomProjection]] implements Locality Sensitive Hashing functions with 2-stable\n+ * distributions. If you are looking for LSH for cos distance, please use [[SignRandomProjection]]\n+ *\n+ * References:\n+ * Wang, Jingdong et al. \"Hashing for similarity search: A survey.\" arXiv preprint\n+ * arXiv:1408.2927 (2014).\n+ */\n+class RandomProjection(override val uid: String) extends LSH[Vector, RandomProjectionModel]\n+  with RandomProjectionParams {\n+\n+  private[this] var inputDim = -1"
  }],
  "prId": 15148
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "How about \n\n``` scala\n  private[this] lazy val randUnitVectors: Int => Array[Vector] = (d: Int) => {\n    Array.fill($(outputDim)) {\n      val randArray = Array.fill(d)(Random.nextGaussian())\n      Vectors.fromBreeze(normalize(breeze.linalg.Vector(randArray)))\n    }\n  }\n...\n  override protected[this] def createRawLSHModel(dataset: Dataset[_]): RandomProjectionModel = {\n    val inputDim = dataset.select(col($(inputCol))).head().get(0).asInstanceOf[Vector].size\n    new RandomProjectionModel(uid, randUnitVectors(inputDim))\n  }\n```\n",
    "commit": "35708458a0ee156c097ca604efeafaa37d3c8a6d",
    "createdAt": "2016-09-26T13:47:59Z",
    "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature.lsh\n+\n+import scala.util.Random\n+\n+import breeze.linalg.normalize\n+\n+import org.apache.spark.ml.linalg.{BLAS, Vector, Vectors}\n+import org.apache.spark.ml.param.{DoubleParam, Params, ParamValidators}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.Dataset\n+import org.apache.spark.sql.functions._\n+\n+/**\n+ * Params for [[RandomProjection]].\n+ */\n+private[ml] trait RandomProjectionParams extends Params {\n+  val bucketLength: DoubleParam = new DoubleParam(this, \"bucketLength\",\n+    \"the length of each hash bucket\", ParamValidators.gt(0))\n+}\n+\n+class RandomProjectionModel(\n+    override val uid: String,\n+    val randUnitVectors: Array[Vector])\n+  extends LSHModel[Vector, RandomProjectionModel] with RandomProjectionParams {\n+\n+  override protected[this] val hashFunction: (Vector) => Vector = {\n+    key: Vector => {\n+      val hashValues: Array[Double] = randUnitVectors.map({\n+        randUnitVector => Math.floor(BLAS.dot(key, randUnitVector) / $(bucketLength))\n+      })\n+      Vectors.dense(hashValues)\n+    }\n+  }\n+\n+  override protected[ml] def keyDistance(x: Vector, y: Vector): Double = {\n+    Math.sqrt(Vectors.sqdist(x, y))\n+  }\n+}\n+\n+/**\n+ * This [[RandomProjection]] implements Locality Sensitive Hashing functions with 2-stable\n+ * distributions. If you are looking for LSH for cos distance, please use [[SignRandomProjection]]\n+ *\n+ * References:\n+ * Wang, Jingdong et al. \"Hashing for similarity search: A survey.\" arXiv preprint\n+ * arXiv:1408.2927 (2014).\n+ */\n+class RandomProjection(override val uid: String) extends LSH[Vector, RandomProjectionModel]\n+  with RandomProjectionParams {\n+\n+  private[this] var inputDim = -1\n+\n+  private[this] lazy val randUnitVectors: Array[Vector] = {"
  }, {
    "author": {
      "login": "Yunni"
    },
    "body": "Moved to Superclass. Removed  var inputDim = -1\n",
    "commit": "35708458a0ee156c097ca604efeafaa37d3c8a6d",
    "createdAt": "2016-09-28T19:41:44Z",
    "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature.lsh\n+\n+import scala.util.Random\n+\n+import breeze.linalg.normalize\n+\n+import org.apache.spark.ml.linalg.{BLAS, Vector, Vectors}\n+import org.apache.spark.ml.param.{DoubleParam, Params, ParamValidators}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.Dataset\n+import org.apache.spark.sql.functions._\n+\n+/**\n+ * Params for [[RandomProjection]].\n+ */\n+private[ml] trait RandomProjectionParams extends Params {\n+  val bucketLength: DoubleParam = new DoubleParam(this, \"bucketLength\",\n+    \"the length of each hash bucket\", ParamValidators.gt(0))\n+}\n+\n+class RandomProjectionModel(\n+    override val uid: String,\n+    val randUnitVectors: Array[Vector])\n+  extends LSHModel[Vector, RandomProjectionModel] with RandomProjectionParams {\n+\n+  override protected[this] val hashFunction: (Vector) => Vector = {\n+    key: Vector => {\n+      val hashValues: Array[Double] = randUnitVectors.map({\n+        randUnitVector => Math.floor(BLAS.dot(key, randUnitVector) / $(bucketLength))\n+      })\n+      Vectors.dense(hashValues)\n+    }\n+  }\n+\n+  override protected[ml] def keyDistance(x: Vector, y: Vector): Double = {\n+    Math.sqrt(Vectors.sqdist(x, y))\n+  }\n+}\n+\n+/**\n+ * This [[RandomProjection]] implements Locality Sensitive Hashing functions with 2-stable\n+ * distributions. If you are looking for LSH for cos distance, please use [[SignRandomProjection]]\n+ *\n+ * References:\n+ * Wang, Jingdong et al. \"Hashing for similarity search: A survey.\" arXiv preprint\n+ * arXiv:1408.2927 (2014).\n+ */\n+class RandomProjection(override val uid: String) extends LSH[Vector, RandomProjectionModel]\n+  with RandomProjectionParams {\n+\n+  private[this] var inputDim = -1\n+\n+  private[this] lazy val randUnitVectors: Array[Vector] = {"
  }],
  "prId": 15148
}]