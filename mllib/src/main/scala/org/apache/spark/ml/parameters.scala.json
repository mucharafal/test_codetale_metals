[{
  "comments": [{
    "author": {
      "login": "sryza"
    },
    "body": "Curious - what would this filtering be used for?\n",
    "commit": "2cc93fd7104b76a7cfb6428b3b3deade76e91590",
    "createdAt": "2014-11-05T19:16:22Z",
    "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml\n+\n+import java.lang.reflect.Modifier\n+\n+import scala.language.implicitConversions\n+import scala.collection.mutable\n+\n+/**\n+ * A param with self-contained documentation and optionally default value.\n+ *\n+ * @param parent parent object\n+ * @param name param name\n+ * @param doc documentation\n+ * @param default optional default value\n+ * @tparam T param value type\n+ */\n+class Param[T] private (\n+    val parent: Identifiable,\n+    val name: String,\n+    val doc: String,\n+    val default: Option[T]) extends Serializable {\n+\n+  /**\n+   * Creates a param without a default value.\n+   *\n+   * @param parent parent object\n+   * @param name param name\n+   * @param doc documentation\n+   */\n+  def this(parent: Identifiable, name: String, doc: String) = this(parent, name, doc, None)\n+\n+  /**\n+   * Creates a param with a default value.\n+   *\n+   * @param parent parent object\n+   * @param name param name\n+   * @param doc documentation\n+   * @param default default value\n+   */\n+  def this(parent: Identifiable, name: String, doc: String, default: T) =\n+    this(parent, name, doc, Some(default))\n+\n+  /**\n+   * Creates a param pair with the given value (for Java).\n+   */\n+  def w(value: T): ParamPair[T] = ParamPair(this, value)\n+\n+  /**\n+   * Creates a param pair with the given value (for Scala).\n+   */\n+  def ->(value: T): ParamPair[T] = ParamPair(this, value)\n+\n+  override def toString: String = {\n+    if (default.isDefined) {\n+      s\"$name: $doc (default: ${default.get})\"\n+    } else {\n+      s\"$name: $doc\"\n+    }\n+  }\n+}\n+\n+/**\n+ * A param amd its value.\n+ */\n+case class ParamPair[T](param: Param[T], value: T)\n+\n+/**\n+ * Trait for components that take parameters.\n+ */\n+trait Params {\n+\n+  /** Returns all params. */\n+  def params: Array[Param[_]] = {\n+    val methods = this.getClass.getMethods\n+    methods.filter { m =>\n+      Modifier.isPublic(m.getModifiers) &&\n+        classOf[Param[_]].isAssignableFrom(m.getReturnType) &&\n+        m.getParameterTypes.isEmpty\n+    }.map(m => m.invoke(this).asInstanceOf[Param[_]])\n+  }\n+\n+  /** Gets a param by its name. */\n+  def getParam(paramName: String): Param[Any] = {\n+    val m = this.getClass.getMethod(paramName)\n+    assert(Modifier.isPublic(m.getModifiers) &&\n+      classOf[Param[_]].isAssignableFrom(m.getReturnType))\n+    m.invoke(this).asInstanceOf[Param[Any]]\n+  }\n+\n+  /**\n+   * Validates parameters specified by the input parameter map.\n+   * Raises an exception if any parameter belongs to this object is invalid.\n+   */\n+  def validateParams(paramMap: ParamMap): Unit = {}\n+\n+  /**\n+   * Returns the documentation of all params.\n+   */\n+  def explainParams(): String = params.mkString(\"\\n\")\n+}\n+\n+/**\n+ * Trait for instances that hold their own param maps.\n+ */\n+trait OwnParamMap {\n+\n+  /**\n+   * Internal param map.\n+   */\n+  val paramMap: ParamMap = ParamMap.empty\n+\n+  /**\n+   * Sets a parameter in the own parameter map.\n+   */\n+  def set[T](param: Param[T], value: T): this.type = {\n+    paramMap.put(param.asInstanceOf[Param[Any]], value)\n+    this\n+  }\n+}\n+\n+private[ml] object Params {\n+\n+  /**\n+   * Returns a Params implementation without any\n+   */\n+  val empty: Params = new Params {\n+    override def params: Array[Param[_]] = Array.empty\n+  }\n+}\n+\n+/**\n+ * A param to value map.\n+ */\n+class ParamMap private[ml] (\n+    private val params: mutable.Map[Param[Any], Any]) extends Serializable {\n+\n+  /**\n+   * Creates an empty param map.\n+   */\n+  def this() = this(mutable.Map.empty[Param[Any], Any])\n+\n+  /**\n+   * Puts a (param, value) pair (overwrites if the input param exists).\n+   */\n+  def put[T](param: Param[T], value: T): this.type = {\n+    params(param.asInstanceOf[Param[Any]]) = value\n+    this\n+  }\n+\n+  /**\n+   * Puts a param pair (overwrites if the input param exists).\n+   */\n+  def put(firstParamPair: ParamPair[_], otherParamPairs: ParamPair[_]*): this.type = {\n+    put(firstParamPair.param.asInstanceOf[Param[Any]], firstParamPair.value)\n+    otherParamPairs.foreach { p =>\n+      put(p.param.asInstanceOf[Param[Any]], p.value)\n+    }\n+    this\n+  }\n+\n+  /**\n+   * Gets the value of the input param or the default value if it does not exist.\n+   * Raises a NoSuchElementException if there is no value associated with the input param.\n+   */\n+  def apply[T](param: Param[T]): T = {\n+    params.getOrElse(param.asInstanceOf[Param[Any]], param.default.get).asInstanceOf[T]\n+  }\n+\n+  /**\n+   * Checks whether a parameter is specified.\n+   */\n+  def contains(param: Param[_]): Boolean = {\n+    params.contains(param.asInstanceOf[Param[Any]])\n+  }\n+\n+  /**\n+   * Filter this param map for the given parent.\n+   */\n+  def filter(parent: Identifiable): ParamMap = {"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "This is useful when we try to store training parameters in trained models.\n",
    "commit": "2cc93fd7104b76a7cfb6428b3b3deade76e91590",
    "createdAt": "2014-11-06T02:47:15Z",
    "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml\n+\n+import java.lang.reflect.Modifier\n+\n+import scala.language.implicitConversions\n+import scala.collection.mutable\n+\n+/**\n+ * A param with self-contained documentation and optionally default value.\n+ *\n+ * @param parent parent object\n+ * @param name param name\n+ * @param doc documentation\n+ * @param default optional default value\n+ * @tparam T param value type\n+ */\n+class Param[T] private (\n+    val parent: Identifiable,\n+    val name: String,\n+    val doc: String,\n+    val default: Option[T]) extends Serializable {\n+\n+  /**\n+   * Creates a param without a default value.\n+   *\n+   * @param parent parent object\n+   * @param name param name\n+   * @param doc documentation\n+   */\n+  def this(parent: Identifiable, name: String, doc: String) = this(parent, name, doc, None)\n+\n+  /**\n+   * Creates a param with a default value.\n+   *\n+   * @param parent parent object\n+   * @param name param name\n+   * @param doc documentation\n+   * @param default default value\n+   */\n+  def this(parent: Identifiable, name: String, doc: String, default: T) =\n+    this(parent, name, doc, Some(default))\n+\n+  /**\n+   * Creates a param pair with the given value (for Java).\n+   */\n+  def w(value: T): ParamPair[T] = ParamPair(this, value)\n+\n+  /**\n+   * Creates a param pair with the given value (for Scala).\n+   */\n+  def ->(value: T): ParamPair[T] = ParamPair(this, value)\n+\n+  override def toString: String = {\n+    if (default.isDefined) {\n+      s\"$name: $doc (default: ${default.get})\"\n+    } else {\n+      s\"$name: $doc\"\n+    }\n+  }\n+}\n+\n+/**\n+ * A param amd its value.\n+ */\n+case class ParamPair[T](param: Param[T], value: T)\n+\n+/**\n+ * Trait for components that take parameters.\n+ */\n+trait Params {\n+\n+  /** Returns all params. */\n+  def params: Array[Param[_]] = {\n+    val methods = this.getClass.getMethods\n+    methods.filter { m =>\n+      Modifier.isPublic(m.getModifiers) &&\n+        classOf[Param[_]].isAssignableFrom(m.getReturnType) &&\n+        m.getParameterTypes.isEmpty\n+    }.map(m => m.invoke(this).asInstanceOf[Param[_]])\n+  }\n+\n+  /** Gets a param by its name. */\n+  def getParam(paramName: String): Param[Any] = {\n+    val m = this.getClass.getMethod(paramName)\n+    assert(Modifier.isPublic(m.getModifiers) &&\n+      classOf[Param[_]].isAssignableFrom(m.getReturnType))\n+    m.invoke(this).asInstanceOf[Param[Any]]\n+  }\n+\n+  /**\n+   * Validates parameters specified by the input parameter map.\n+   * Raises an exception if any parameter belongs to this object is invalid.\n+   */\n+  def validateParams(paramMap: ParamMap): Unit = {}\n+\n+  /**\n+   * Returns the documentation of all params.\n+   */\n+  def explainParams(): String = params.mkString(\"\\n\")\n+}\n+\n+/**\n+ * Trait for instances that hold their own param maps.\n+ */\n+trait OwnParamMap {\n+\n+  /**\n+   * Internal param map.\n+   */\n+  val paramMap: ParamMap = ParamMap.empty\n+\n+  /**\n+   * Sets a parameter in the own parameter map.\n+   */\n+  def set[T](param: Param[T], value: T): this.type = {\n+    paramMap.put(param.asInstanceOf[Param[Any]], value)\n+    this\n+  }\n+}\n+\n+private[ml] object Params {\n+\n+  /**\n+   * Returns a Params implementation without any\n+   */\n+  val empty: Params = new Params {\n+    override def params: Array[Param[_]] = Array.empty\n+  }\n+}\n+\n+/**\n+ * A param to value map.\n+ */\n+class ParamMap private[ml] (\n+    private val params: mutable.Map[Param[Any], Any]) extends Serializable {\n+\n+  /**\n+   * Creates an empty param map.\n+   */\n+  def this() = this(mutable.Map.empty[Param[Any], Any])\n+\n+  /**\n+   * Puts a (param, value) pair (overwrites if the input param exists).\n+   */\n+  def put[T](param: Param[T], value: T): this.type = {\n+    params(param.asInstanceOf[Param[Any]]) = value\n+    this\n+  }\n+\n+  /**\n+   * Puts a param pair (overwrites if the input param exists).\n+   */\n+  def put(firstParamPair: ParamPair[_], otherParamPairs: ParamPair[_]*): this.type = {\n+    put(firstParamPair.param.asInstanceOf[Param[Any]], firstParamPair.value)\n+    otherParamPairs.foreach { p =>\n+      put(p.param.asInstanceOf[Param[Any]], p.value)\n+    }\n+    this\n+  }\n+\n+  /**\n+   * Gets the value of the input param or the default value if it does not exist.\n+   * Raises a NoSuchElementException if there is no value associated with the input param.\n+   */\n+  def apply[T](param: Param[T]): T = {\n+    params.getOrElse(param.asInstanceOf[Param[Any]], param.default.get).asInstanceOf[T]\n+  }\n+\n+  /**\n+   * Checks whether a parameter is specified.\n+   */\n+  def contains(param: Param[_]): Boolean = {\n+    params.contains(param.asInstanceOf[Param[Any]])\n+  }\n+\n+  /**\n+   * Filter this param map for the given parent.\n+   */\n+  def filter(parent: Identifiable): ParamMap = {"
  }],
  "prId": 3099
}]