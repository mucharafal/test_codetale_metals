[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "We never want to use default arguments in Scala APIs since they are not Java-friendly.  Let's just state recommended values in the docstrings.  We can add defaults when we create an Estimator.",
    "commit": "76d411998205a3920ee8d1e353c8422658b2e330",
    "createdAt": "2018-04-24T20:09:37Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.mllib.fpm.{PrefixSpan => mllibPrefixSpan}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.functions.col\n+import org.apache.spark.sql.types.{LongType, StructField, StructType}\n+import org.apache.spark.storage.StorageLevel\n+\n+/**\n+ * :: Experimental ::\n+ * A parallel PrefixSpan algorithm to mine frequent sequential patterns.\n+ * The PrefixSpan algorithm is described in J. Pei, et al., PrefixSpan: Mining Sequential Patterns\n+ * Efficiently by Prefix-Projected Pattern Growth\n+ * (see <a href=\"http://doi.org/10.1109/ICDE.2001.914830\">here</a>).\n+ *\n+ * @see <a href=\"https://en.wikipedia.org/wiki/Sequential_Pattern_Mining\">Sequential Pattern Mining\n+ * (Wikipedia)</a>\n+ */\n+@Since(\"2.4.0\")\n+@Experimental\n+object PrefixSpan {\n+\n+  /**\n+   * :: Experimental ::\n+   * Finds the complete set of frequent sequential patterns in the input sequences of itemsets.\n+   *\n+   * @param dataset A dataset or a dataframe containing a sequence column which is\n+   *                {{{Seq[Seq[_]]}}} type\n+   * @param sequenceCol the name of the sequence column in dataset\n+   * @param minSupport the minimal support level of the sequential pattern, any pattern that\n+   *                   appears more than (minSupport * size-of-the-dataset) times will be output\n+   *                  (default: `0.1`).\n+   * @param maxPatternLength the maximal length of the sequential pattern, any pattern that appears\n+   *                         less than maxPatternLength will be output (default: `10`).\n+   * @param maxLocalProjDBSize The maximum number of items (including delimiters used in the\n+   *                           internal storage format) allowed in a projected database before\n+   *                           local processing. If a projected database exceeds this size, another\n+   *                           iteration of distributed prefix growth is run (default: `32000000`).\n+   * @return A dataframe that contains columns of sequence and corresponding frequency.\n+   */\n+  @Since(\"2.4.0\")\n+  def findFrequentSequentPatterns(\n+      dataset: Dataset[_],\n+      sequenceCol: String,\n+      minSupport: Double = 0.1,"
  }],
  "prId": 20973
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Let's fix this phrasing by just saying \"the maximal length of the sequential pattern\"  (The other part does not make sense: \"any pattern that appears...\")  Feel free to fix that in the old API doc too.",
    "commit": "76d411998205a3920ee8d1e353c8422658b2e330",
    "createdAt": "2018-04-24T20:11:19Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.mllib.fpm.{PrefixSpan => mllibPrefixSpan}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.functions.col\n+import org.apache.spark.sql.types.{LongType, StructField, StructType}\n+import org.apache.spark.storage.StorageLevel\n+\n+/**\n+ * :: Experimental ::\n+ * A parallel PrefixSpan algorithm to mine frequent sequential patterns.\n+ * The PrefixSpan algorithm is described in J. Pei, et al., PrefixSpan: Mining Sequential Patterns\n+ * Efficiently by Prefix-Projected Pattern Growth\n+ * (see <a href=\"http://doi.org/10.1109/ICDE.2001.914830\">here</a>).\n+ *\n+ * @see <a href=\"https://en.wikipedia.org/wiki/Sequential_Pattern_Mining\">Sequential Pattern Mining\n+ * (Wikipedia)</a>\n+ */\n+@Since(\"2.4.0\")\n+@Experimental\n+object PrefixSpan {\n+\n+  /**\n+   * :: Experimental ::\n+   * Finds the complete set of frequent sequential patterns in the input sequences of itemsets.\n+   *\n+   * @param dataset A dataset or a dataframe containing a sequence column which is\n+   *                {{{Seq[Seq[_]]}}} type\n+   * @param sequenceCol the name of the sequence column in dataset\n+   * @param minSupport the minimal support level of the sequential pattern, any pattern that\n+   *                   appears more than (minSupport * size-of-the-dataset) times will be output\n+   *                  (default: `0.1`).\n+   * @param maxPatternLength the maximal length of the sequential pattern, any pattern that appears"
  }],
  "prId": 20973
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Be very explicit about the output schema please: For each column, provide the name and DataType.",
    "commit": "76d411998205a3920ee8d1e353c8422658b2e330",
    "createdAt": "2018-04-24T20:13:22Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.mllib.fpm.{PrefixSpan => mllibPrefixSpan}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.functions.col\n+import org.apache.spark.sql.types.{LongType, StructField, StructType}\n+import org.apache.spark.storage.StorageLevel\n+\n+/**\n+ * :: Experimental ::\n+ * A parallel PrefixSpan algorithm to mine frequent sequential patterns.\n+ * The PrefixSpan algorithm is described in J. Pei, et al., PrefixSpan: Mining Sequential Patterns\n+ * Efficiently by Prefix-Projected Pattern Growth\n+ * (see <a href=\"http://doi.org/10.1109/ICDE.2001.914830\">here</a>).\n+ *\n+ * @see <a href=\"https://en.wikipedia.org/wiki/Sequential_Pattern_Mining\">Sequential Pattern Mining\n+ * (Wikipedia)</a>\n+ */\n+@Since(\"2.4.0\")\n+@Experimental\n+object PrefixSpan {\n+\n+  /**\n+   * :: Experimental ::\n+   * Finds the complete set of frequent sequential patterns in the input sequences of itemsets.\n+   *\n+   * @param dataset A dataset or a dataframe containing a sequence column which is\n+   *                {{{Seq[Seq[_]]}}} type\n+   * @param sequenceCol the name of the sequence column in dataset\n+   * @param minSupport the minimal support level of the sequential pattern, any pattern that\n+   *                   appears more than (minSupport * size-of-the-dataset) times will be output\n+   *                  (default: `0.1`).\n+   * @param maxPatternLength the maximal length of the sequential pattern, any pattern that appears\n+   *                         less than maxPatternLength will be output (default: `10`).\n+   * @param maxLocalProjDBSize The maximum number of items (including delimiters used in the\n+   *                           internal storage format) allowed in a projected database before\n+   *                           local processing. If a projected database exceeds this size, another\n+   *                           iteration of distributed prefix growth is run (default: `32000000`).\n+   * @return A dataframe that contains columns of sequence and corresponding frequency."
  }],
  "prId": 20973
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "rename: findFrequentSequentPatterns -> findFrequentSequent**ial**Patterns",
    "commit": "76d411998205a3920ee8d1e353c8422658b2e330",
    "createdAt": "2018-04-24T20:13:55Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.mllib.fpm.{PrefixSpan => mllibPrefixSpan}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.functions.col\n+import org.apache.spark.sql.types.{LongType, StructField, StructType}\n+import org.apache.spark.storage.StorageLevel\n+\n+/**\n+ * :: Experimental ::\n+ * A parallel PrefixSpan algorithm to mine frequent sequential patterns.\n+ * The PrefixSpan algorithm is described in J. Pei, et al., PrefixSpan: Mining Sequential Patterns\n+ * Efficiently by Prefix-Projected Pattern Growth\n+ * (see <a href=\"http://doi.org/10.1109/ICDE.2001.914830\">here</a>).\n+ *\n+ * @see <a href=\"https://en.wikipedia.org/wiki/Sequential_Pattern_Mining\">Sequential Pattern Mining\n+ * (Wikipedia)</a>\n+ */\n+@Since(\"2.4.0\")\n+@Experimental\n+object PrefixSpan {\n+\n+  /**\n+   * :: Experimental ::\n+   * Finds the complete set of frequent sequential patterns in the input sequences of itemsets.\n+   *\n+   * @param dataset A dataset or a dataframe containing a sequence column which is\n+   *                {{{Seq[Seq[_]]}}} type\n+   * @param sequenceCol the name of the sequence column in dataset\n+   * @param minSupport the minimal support level of the sequential pattern, any pattern that\n+   *                   appears more than (minSupport * size-of-the-dataset) times will be output\n+   *                  (default: `0.1`).\n+   * @param maxPatternLength the maximal length of the sequential pattern, any pattern that appears\n+   *                         less than maxPatternLength will be output (default: `10`).\n+   * @param maxLocalProjDBSize The maximum number of items (including delimiters used in the\n+   *                           internal storage format) allowed in a projected database before\n+   *                           local processing. If a projected database exceeds this size, another\n+   *                           iteration of distributed prefix growth is run (default: `32000000`).\n+   * @return A dataframe that contains columns of sequence and corresponding frequency.\n+   */\n+  @Since(\"2.4.0\")\n+  def findFrequentSequentPatterns("
  }],
  "prId": 20973
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "We don't really need this handlePersistence logic here since it's handled by the spark.mllib implementation.",
    "commit": "76d411998205a3920ee8d1e353c8422658b2e330",
    "createdAt": "2018-04-24T20:15:12Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.mllib.fpm.{PrefixSpan => mllibPrefixSpan}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.functions.col\n+import org.apache.spark.sql.types.{LongType, StructField, StructType}\n+import org.apache.spark.storage.StorageLevel\n+\n+/**\n+ * :: Experimental ::\n+ * A parallel PrefixSpan algorithm to mine frequent sequential patterns.\n+ * The PrefixSpan algorithm is described in J. Pei, et al., PrefixSpan: Mining Sequential Patterns\n+ * Efficiently by Prefix-Projected Pattern Growth\n+ * (see <a href=\"http://doi.org/10.1109/ICDE.2001.914830\">here</a>).\n+ *\n+ * @see <a href=\"https://en.wikipedia.org/wiki/Sequential_Pattern_Mining\">Sequential Pattern Mining\n+ * (Wikipedia)</a>\n+ */\n+@Since(\"2.4.0\")\n+@Experimental\n+object PrefixSpan {\n+\n+  /**\n+   * :: Experimental ::\n+   * Finds the complete set of frequent sequential patterns in the input sequences of itemsets.\n+   *\n+   * @param dataset A dataset or a dataframe containing a sequence column which is\n+   *                {{{Seq[Seq[_]]}}} type\n+   * @param sequenceCol the name of the sequence column in dataset\n+   * @param minSupport the minimal support level of the sequential pattern, any pattern that\n+   *                   appears more than (minSupport * size-of-the-dataset) times will be output\n+   *                  (default: `0.1`).\n+   * @param maxPatternLength the maximal length of the sequential pattern, any pattern that appears\n+   *                         less than maxPatternLength will be output (default: `10`).\n+   * @param maxLocalProjDBSize The maximum number of items (including delimiters used in the\n+   *                           internal storage format) allowed in a projected database before\n+   *                           local processing. If a projected database exceeds this size, another\n+   *                           iteration of distributed prefix growth is run (default: `32000000`).\n+   * @return A dataframe that contains columns of sequence and corresponding frequency.\n+   */\n+  @Since(\"2.4.0\")\n+  def findFrequentSequentPatterns(\n+      dataset: Dataset[_],\n+      sequenceCol: String,\n+      minSupport: Double = 0.1,\n+      maxPatternLength: Int = 10,\n+      maxLocalProjDBSize: Long = 32000000L): DataFrame = {\n+    val handlePersistence = dataset.storageLevel == StorageLevel.NONE"
  }],
  "prId": 20973
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Let's check the input schema and throw a clear exception if it's not OK.",
    "commit": "76d411998205a3920ee8d1e353c8422658b2e330",
    "createdAt": "2018-04-24T20:15:46Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.mllib.fpm.{PrefixSpan => mllibPrefixSpan}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.functions.col\n+import org.apache.spark.sql.types.{LongType, StructField, StructType}\n+import org.apache.spark.storage.StorageLevel\n+\n+/**\n+ * :: Experimental ::\n+ * A parallel PrefixSpan algorithm to mine frequent sequential patterns.\n+ * The PrefixSpan algorithm is described in J. Pei, et al., PrefixSpan: Mining Sequential Patterns\n+ * Efficiently by Prefix-Projected Pattern Growth\n+ * (see <a href=\"http://doi.org/10.1109/ICDE.2001.914830\">here</a>).\n+ *\n+ * @see <a href=\"https://en.wikipedia.org/wiki/Sequential_Pattern_Mining\">Sequential Pattern Mining\n+ * (Wikipedia)</a>\n+ */\n+@Since(\"2.4.0\")\n+@Experimental\n+object PrefixSpan {\n+\n+  /**\n+   * :: Experimental ::\n+   * Finds the complete set of frequent sequential patterns in the input sequences of itemsets.\n+   *\n+   * @param dataset A dataset or a dataframe containing a sequence column which is\n+   *                {{{Seq[Seq[_]]}}} type\n+   * @param sequenceCol the name of the sequence column in dataset\n+   * @param minSupport the minimal support level of the sequential pattern, any pattern that\n+   *                   appears more than (minSupport * size-of-the-dataset) times will be output\n+   *                  (default: `0.1`).\n+   * @param maxPatternLength the maximal length of the sequential pattern, any pattern that appears\n+   *                         less than maxPatternLength will be output (default: `10`).\n+   * @param maxLocalProjDBSize The maximum number of items (including delimiters used in the\n+   *                           internal storage format) allowed in a projected database before\n+   *                           local processing. If a projected database exceeds this size, another\n+   *                           iteration of distributed prefix growth is run (default: `32000000`).\n+   * @return A dataframe that contains columns of sequence and corresponding frequency.\n+   */\n+  @Since(\"2.4.0\")\n+  def findFrequentSequentPatterns(\n+      dataset: Dataset[_],\n+      sequenceCol: String,\n+      minSupport: Double = 0.1,\n+      maxPatternLength: Int = 10,\n+      maxLocalProjDBSize: Long = 32000000L): DataFrame = {\n+    val handlePersistence = dataset.storageLevel == StorageLevel.NONE\n+\n+    val data = dataset.select(sequenceCol)"
  }],
  "prId": 20973
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "It'd be nice to document that rows with nulls in this column are ignored.",
    "commit": "76d411998205a3920ee8d1e353c8422658b2e330",
    "createdAt": "2018-04-24T20:16:27Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.mllib.fpm.{PrefixSpan => mllibPrefixSpan}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.functions.col\n+import org.apache.spark.sql.types.{LongType, StructField, StructType}\n+import org.apache.spark.storage.StorageLevel\n+\n+/**\n+ * :: Experimental ::\n+ * A parallel PrefixSpan algorithm to mine frequent sequential patterns.\n+ * The PrefixSpan algorithm is described in J. Pei, et al., PrefixSpan: Mining Sequential Patterns\n+ * Efficiently by Prefix-Projected Pattern Growth\n+ * (see <a href=\"http://doi.org/10.1109/ICDE.2001.914830\">here</a>).\n+ *\n+ * @see <a href=\"https://en.wikipedia.org/wiki/Sequential_Pattern_Mining\">Sequential Pattern Mining\n+ * (Wikipedia)</a>\n+ */\n+@Since(\"2.4.0\")\n+@Experimental\n+object PrefixSpan {\n+\n+  /**\n+   * :: Experimental ::\n+   * Finds the complete set of frequent sequential patterns in the input sequences of itemsets.\n+   *\n+   * @param dataset A dataset or a dataframe containing a sequence column which is\n+   *                {{{Seq[Seq[_]]}}} type\n+   * @param sequenceCol the name of the sequence column in dataset"
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "You could add a unit test for that too.",
    "commit": "76d411998205a3920ee8d1e353c8422658b2e330",
    "createdAt": "2018-04-24T20:16:48Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.mllib.fpm.{PrefixSpan => mllibPrefixSpan}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.functions.col\n+import org.apache.spark.sql.types.{LongType, StructField, StructType}\n+import org.apache.spark.storage.StorageLevel\n+\n+/**\n+ * :: Experimental ::\n+ * A parallel PrefixSpan algorithm to mine frequent sequential patterns.\n+ * The PrefixSpan algorithm is described in J. Pei, et al., PrefixSpan: Mining Sequential Patterns\n+ * Efficiently by Prefix-Projected Pattern Growth\n+ * (see <a href=\"http://doi.org/10.1109/ICDE.2001.914830\">here</a>).\n+ *\n+ * @see <a href=\"https://en.wikipedia.org/wiki/Sequential_Pattern_Mining\">Sequential Pattern Mining\n+ * (Wikipedia)</a>\n+ */\n+@Since(\"2.4.0\")\n+@Experimental\n+object PrefixSpan {\n+\n+  /**\n+   * :: Experimental ::\n+   * Finds the complete set of frequent sequential patterns in the input sequences of itemsets.\n+   *\n+   * @param dataset A dataset or a dataframe containing a sequence column which is\n+   *                {{{Seq[Seq[_]]}}} type\n+   * @param sequenceCol the name of the sequence column in dataset"
  }],
  "prId": 20973
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "nit: I'd prefer to call the column \"frequency\"",
    "commit": "76d411998205a3920ee8d1e353c8422658b2e330",
    "createdAt": "2018-04-24T20:18:55Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.mllib.fpm.{PrefixSpan => mllibPrefixSpan}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.functions.col\n+import org.apache.spark.sql.types.{LongType, StructField, StructType}\n+import org.apache.spark.storage.StorageLevel\n+\n+/**\n+ * :: Experimental ::\n+ * A parallel PrefixSpan algorithm to mine frequent sequential patterns.\n+ * The PrefixSpan algorithm is described in J. Pei, et al., PrefixSpan: Mining Sequential Patterns\n+ * Efficiently by Prefix-Projected Pattern Growth\n+ * (see <a href=\"http://doi.org/10.1109/ICDE.2001.914830\">here</a>).\n+ *\n+ * @see <a href=\"https://en.wikipedia.org/wiki/Sequential_Pattern_Mining\">Sequential Pattern Mining\n+ * (Wikipedia)</a>\n+ */\n+@Since(\"2.4.0\")\n+@Experimental\n+object PrefixSpan {\n+\n+  /**\n+   * :: Experimental ::\n+   * Finds the complete set of frequent sequential patterns in the input sequences of itemsets.\n+   *\n+   * @param dataset A dataset or a dataframe containing a sequence column which is\n+   *                {{{Seq[Seq[_]]}}} type\n+   * @param sequenceCol the name of the sequence column in dataset\n+   * @param minSupport the minimal support level of the sequential pattern, any pattern that\n+   *                   appears more than (minSupport * size-of-the-dataset) times will be output\n+   *                  (default: `0.1`).\n+   * @param maxPatternLength the maximal length of the sequential pattern, any pattern that appears\n+   *                         less than maxPatternLength will be output (default: `10`).\n+   * @param maxLocalProjDBSize The maximum number of items (including delimiters used in the\n+   *                           internal storage format) allowed in a projected database before\n+   *                           local processing. If a projected database exceeds this size, another\n+   *                           iteration of distributed prefix growth is run (default: `32000000`).\n+   * @return A dataframe that contains columns of sequence and corresponding frequency.\n+   */\n+  @Since(\"2.4.0\")\n+  def findFrequentSequentPatterns(\n+      dataset: Dataset[_],\n+      sequenceCol: String,\n+      minSupport: Double = 0.1,\n+      maxPatternLength: Int = 10,\n+      maxLocalProjDBSize: Long = 32000000L): DataFrame = {\n+    val handlePersistence = dataset.storageLevel == StorageLevel.NONE\n+\n+    val data = dataset.select(sequenceCol)\n+    val sequences = data.where(col(sequenceCol).isNotNull).rdd\n+      .map(r => r.getAs[Seq[Seq[Any]]](0).map(_.toArray).toArray)\n+\n+    val mllibPrefixSpan = new mllibPrefixSpan()\n+      .setMinSupport(minSupport)\n+      .setMaxPatternLength(maxPatternLength)\n+      .setMaxLocalProjDBSize(maxLocalProjDBSize)\n+    if (handlePersistence) {\n+      sequences.persist(StorageLevel.MEMORY_AND_DISK)\n+    }\n+    val rows = mllibPrefixSpan.run(sequences).freqSequences.map(f => Row(f.sequence, f.freq))\n+    val schema = StructType(Seq(\n+      StructField(\"sequence\", dataset.schema(sequenceCol).dataType, nullable = false),\n+      StructField(\"freq\", LongType, nullable = false)))"
  }],
  "prId": 20973
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "I had asked for this change to \"frequency\" from \"freq,\" but I belatedly realized that this conflicts with the existing FPGrowth API, which uses \"freq.\"  It would be best to maintain consistency.  Would you mind reverting to \"freq?\"",
    "commit": "76d411998205a3920ee8d1e353c8422658b2e330",
    "createdAt": "2018-04-30T17:47:40Z",
    "diffHunk": "@@ -44,26 +43,37 @@ object PrefixSpan {\n    *\n    * @param dataset A dataset or a dataframe containing a sequence column which is\n    *                {{{Seq[Seq[_]]}}} type\n-   * @param sequenceCol the name of the sequence column in dataset\n+   * @param sequenceCol the name of the sequence column in dataset, rows with nulls in this column\n+   *                    are ignored\n    * @param minSupport the minimal support level of the sequential pattern, any pattern that\n    *                   appears more than (minSupport * size-of-the-dataset) times will be output\n-   *                  (default: `0.1`).\n-   * @param maxPatternLength the maximal length of the sequential pattern, any pattern that appears\n-   *                         less than maxPatternLength will be output (default: `10`).\n+   *                  (recommended value: `0.1`).\n+   * @param maxPatternLength the maximal length of the sequential pattern\n+   *                         (recommended value: `10`).\n    * @param maxLocalProjDBSize The maximum number of items (including delimiters used in the\n    *                           internal storage format) allowed in a projected database before\n    *                           local processing. If a projected database exceeds this size, another\n-   *                           iteration of distributed prefix growth is run (default: `32000000`).\n-   * @return A dataframe that contains columns of sequence and corresponding frequency.\n+   *                           iteration of distributed prefix growth is run\n+   *                           (recommended value: `32000000`).\n+   * @return A `DataFrame` that contains columns of sequence and corresponding frequency.\n+   *         The schema of it will be:\n+   *          - `sequence: Seq[Seq[T]]` (T is the item type)\n+   *          - `frequency: Long`"
  }, {
    "author": {
      "login": "WeichenXu123"
    },
    "body": "sure!",
    "commit": "76d411998205a3920ee8d1e353c8422658b2e330",
    "createdAt": "2018-05-01T01:09:26Z",
    "diffHunk": "@@ -44,26 +43,37 @@ object PrefixSpan {\n    *\n    * @param dataset A dataset or a dataframe containing a sequence column which is\n    *                {{{Seq[Seq[_]]}}} type\n-   * @param sequenceCol the name of the sequence column in dataset\n+   * @param sequenceCol the name of the sequence column in dataset, rows with nulls in this column\n+   *                    are ignored\n    * @param minSupport the minimal support level of the sequential pattern, any pattern that\n    *                   appears more than (minSupport * size-of-the-dataset) times will be output\n-   *                  (default: `0.1`).\n-   * @param maxPatternLength the maximal length of the sequential pattern, any pattern that appears\n-   *                         less than maxPatternLength will be output (default: `10`).\n+   *                  (recommended value: `0.1`).\n+   * @param maxPatternLength the maximal length of the sequential pattern\n+   *                         (recommended value: `10`).\n    * @param maxLocalProjDBSize The maximum number of items (including delimiters used in the\n    *                           internal storage format) allowed in a projected database before\n    *                           local processing. If a projected database exceeds this size, another\n-   *                           iteration of distributed prefix growth is run (default: `32000000`).\n-   * @return A dataframe that contains columns of sequence and corresponding frequency.\n+   *                           iteration of distributed prefix growth is run\n+   *                           (recommended value: `32000000`).\n+   * @return A `DataFrame` that contains columns of sequence and corresponding frequency.\n+   *         The schema of it will be:\n+   *          - `sequence: Seq[Seq[T]]` (T is the item type)\n+   *          - `frequency: Long`"
  }],
  "prId": 20973
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "@WeichenXu123 @jkbradley The static method doesn't scale with parameters. If we add a new param, we have to keep the old one for binary compatibility. Why not using setters? I think we only need to avoid using `fit` and `transform` names.",
    "commit": "76d411998205a3920ee8d1e353c8422658b2e330",
    "createdAt": "2018-05-09T05:05:24Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.mllib.fpm.{PrefixSpan => mllibPrefixSpan}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.functions.col\n+import org.apache.spark.sql.types.{ArrayType, LongType, StructField, StructType}\n+\n+/**\n+ * :: Experimental ::\n+ * A parallel PrefixSpan algorithm to mine frequent sequential patterns.\n+ * The PrefixSpan algorithm is described in J. Pei, et al., PrefixSpan: Mining Sequential Patterns\n+ * Efficiently by Prefix-Projected Pattern Growth\n+ * (see <a href=\"http://doi.org/10.1109/ICDE.2001.914830\">here</a>).\n+ *\n+ * @see <a href=\"https://en.wikipedia.org/wiki/Sequential_Pattern_Mining\">Sequential Pattern Mining\n+ * (Wikipedia)</a>\n+ */\n+@Since(\"2.4.0\")\n+@Experimental\n+object PrefixSpan {\n+\n+  /**\n+   * :: Experimental ::\n+   * Finds the complete set of frequent sequential patterns in the input sequences of itemsets.\n+   *\n+   * @param dataset A dataset or a dataframe containing a sequence column which is\n+   *                {{{Seq[Seq[_]]}}} type\n+   * @param sequenceCol the name of the sequence column in dataset, rows with nulls in this column\n+   *                    are ignored\n+   * @param minSupport the minimal support level of the sequential pattern, any pattern that\n+   *                   appears more than (minSupport * size-of-the-dataset) times will be output\n+   *                  (recommended value: `0.1`).\n+   * @param maxPatternLength the maximal length of the sequential pattern\n+   *                         (recommended value: `10`).\n+   * @param maxLocalProjDBSize The maximum number of items (including delimiters used in the\n+   *                           internal storage format) allowed in a projected database before\n+   *                           local processing. If a projected database exceeds this size, another\n+   *                           iteration of distributed prefix growth is run\n+   *                           (recommended value: `32000000`).\n+   * @return A `DataFrame` that contains columns of sequence and corresponding frequency.\n+   *         The schema of it will be:\n+   *          - `sequence: Seq[Seq[T]]` (T is the item type)\n+   *          - `freq: Long`\n+   */\n+  @Since(\"2.4.0\")\n+  def findFrequentSequentialPatterns(\n+      dataset: Dataset[_],\n+      sequenceCol: String,",
    "line": 66
  }, {
    "author": {
      "login": "WeichenXu123"
    },
    "body": "I agree with using setters. @jkbradley What do you think of it ? ",
    "commit": "76d411998205a3920ee8d1e353c8422658b2e330",
    "createdAt": "2018-05-09T10:14:09Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.mllib.fpm.{PrefixSpan => mllibPrefixSpan}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.functions.col\n+import org.apache.spark.sql.types.{ArrayType, LongType, StructField, StructType}\n+\n+/**\n+ * :: Experimental ::\n+ * A parallel PrefixSpan algorithm to mine frequent sequential patterns.\n+ * The PrefixSpan algorithm is described in J. Pei, et al., PrefixSpan: Mining Sequential Patterns\n+ * Efficiently by Prefix-Projected Pattern Growth\n+ * (see <a href=\"http://doi.org/10.1109/ICDE.2001.914830\">here</a>).\n+ *\n+ * @see <a href=\"https://en.wikipedia.org/wiki/Sequential_Pattern_Mining\">Sequential Pattern Mining\n+ * (Wikipedia)</a>\n+ */\n+@Since(\"2.4.0\")\n+@Experimental\n+object PrefixSpan {\n+\n+  /**\n+   * :: Experimental ::\n+   * Finds the complete set of frequent sequential patterns in the input sequences of itemsets.\n+   *\n+   * @param dataset A dataset or a dataframe containing a sequence column which is\n+   *                {{{Seq[Seq[_]]}}} type\n+   * @param sequenceCol the name of the sequence column in dataset, rows with nulls in this column\n+   *                    are ignored\n+   * @param minSupport the minimal support level of the sequential pattern, any pattern that\n+   *                   appears more than (minSupport * size-of-the-dataset) times will be output\n+   *                  (recommended value: `0.1`).\n+   * @param maxPatternLength the maximal length of the sequential pattern\n+   *                         (recommended value: `10`).\n+   * @param maxLocalProjDBSize The maximum number of items (including delimiters used in the\n+   *                           internal storage format) allowed in a projected database before\n+   *                           local processing. If a projected database exceeds this size, another\n+   *                           iteration of distributed prefix growth is run\n+   *                           (recommended value: `32000000`).\n+   * @return A `DataFrame` that contains columns of sequence and corresponding frequency.\n+   *         The schema of it will be:\n+   *          - `sequence: Seq[Seq[T]]` (T is the item type)\n+   *          - `freq: Long`\n+   */\n+  @Since(\"2.4.0\")\n+  def findFrequentSequentialPatterns(\n+      dataset: Dataset[_],\n+      sequenceCol: String,",
    "line": 66
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "I agree in general, but I don’t think it’s a big deal for PrefixSpan.  I think of our current static method as a temporary workaround until we do the work to build a Model which can make meaningful predictions.  This will mean that further PrefixSpan improvements may be blocked on this Model work, but I think that’s OK since predictions should be the next priority for PrefixSpan.  Once we have a Model, I recommend we deprecate the current static method.\r\n\r\nI'm also OK with changing this to use setters, but then we should name it something else so that we can replace it with an Estimator + Model pair later on.  I'd suggest \"PrefixSpanBuilder.\"",
    "commit": "76d411998205a3920ee8d1e353c8422658b2e330",
    "createdAt": "2018-05-10T00:58:08Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.mllib.fpm.{PrefixSpan => mllibPrefixSpan}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.functions.col\n+import org.apache.spark.sql.types.{ArrayType, LongType, StructField, StructType}\n+\n+/**\n+ * :: Experimental ::\n+ * A parallel PrefixSpan algorithm to mine frequent sequential patterns.\n+ * The PrefixSpan algorithm is described in J. Pei, et al., PrefixSpan: Mining Sequential Patterns\n+ * Efficiently by Prefix-Projected Pattern Growth\n+ * (see <a href=\"http://doi.org/10.1109/ICDE.2001.914830\">here</a>).\n+ *\n+ * @see <a href=\"https://en.wikipedia.org/wiki/Sequential_Pattern_Mining\">Sequential Pattern Mining\n+ * (Wikipedia)</a>\n+ */\n+@Since(\"2.4.0\")\n+@Experimental\n+object PrefixSpan {\n+\n+  /**\n+   * :: Experimental ::\n+   * Finds the complete set of frequent sequential patterns in the input sequences of itemsets.\n+   *\n+   * @param dataset A dataset or a dataframe containing a sequence column which is\n+   *                {{{Seq[Seq[_]]}}} type\n+   * @param sequenceCol the name of the sequence column in dataset, rows with nulls in this column\n+   *                    are ignored\n+   * @param minSupport the minimal support level of the sequential pattern, any pattern that\n+   *                   appears more than (minSupport * size-of-the-dataset) times will be output\n+   *                  (recommended value: `0.1`).\n+   * @param maxPatternLength the maximal length of the sequential pattern\n+   *                         (recommended value: `10`).\n+   * @param maxLocalProjDBSize The maximum number of items (including delimiters used in the\n+   *                           internal storage format) allowed in a projected database before\n+   *                           local processing. If a projected database exceeds this size, another\n+   *                           iteration of distributed prefix growth is run\n+   *                           (recommended value: `32000000`).\n+   * @return A `DataFrame` that contains columns of sequence and corresponding frequency.\n+   *         The schema of it will be:\n+   *          - `sequence: Seq[Seq[T]]` (T is the item type)\n+   *          - `freq: Long`\n+   */\n+  @Since(\"2.4.0\")\n+  def findFrequentSequentialPatterns(\n+      dataset: Dataset[_],\n+      sequenceCol: String,",
    "line": 66
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "It should be easier to keep the `PrefixSpan` name and make it an `Estimator` later. For example:\r\n\r\n~~~scala\r\nfinal class PrefixSpan(override val uid: String) extends Params {\r\n  // param, setters, getters\r\n  def findFrequentSequentialPatterns(dataset: Dataset[_]): DataFrame\r\n}\r\n~~~\r\n\r\nLater we can add `Estimator.fit` and `PrefixSpanModel.transform`. Any issue with this approach?",
    "commit": "76d411998205a3920ee8d1e353c8422658b2e330",
    "createdAt": "2018-05-15T23:16:36Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.mllib.fpm.{PrefixSpan => mllibPrefixSpan}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.functions.col\n+import org.apache.spark.sql.types.{ArrayType, LongType, StructField, StructType}\n+\n+/**\n+ * :: Experimental ::\n+ * A parallel PrefixSpan algorithm to mine frequent sequential patterns.\n+ * The PrefixSpan algorithm is described in J. Pei, et al., PrefixSpan: Mining Sequential Patterns\n+ * Efficiently by Prefix-Projected Pattern Growth\n+ * (see <a href=\"http://doi.org/10.1109/ICDE.2001.914830\">here</a>).\n+ *\n+ * @see <a href=\"https://en.wikipedia.org/wiki/Sequential_Pattern_Mining\">Sequential Pattern Mining\n+ * (Wikipedia)</a>\n+ */\n+@Since(\"2.4.0\")\n+@Experimental\n+object PrefixSpan {\n+\n+  /**\n+   * :: Experimental ::\n+   * Finds the complete set of frequent sequential patterns in the input sequences of itemsets.\n+   *\n+   * @param dataset A dataset or a dataframe containing a sequence column which is\n+   *                {{{Seq[Seq[_]]}}} type\n+   * @param sequenceCol the name of the sequence column in dataset, rows with nulls in this column\n+   *                    are ignored\n+   * @param minSupport the minimal support level of the sequential pattern, any pattern that\n+   *                   appears more than (minSupport * size-of-the-dataset) times will be output\n+   *                  (recommended value: `0.1`).\n+   * @param maxPatternLength the maximal length of the sequential pattern\n+   *                         (recommended value: `10`).\n+   * @param maxLocalProjDBSize The maximum number of items (including delimiters used in the\n+   *                           internal storage format) allowed in a projected database before\n+   *                           local processing. If a projected database exceeds this size, another\n+   *                           iteration of distributed prefix growth is run\n+   *                           (recommended value: `32000000`).\n+   * @return A `DataFrame` that contains columns of sequence and corresponding frequency.\n+   *         The schema of it will be:\n+   *          - `sequence: Seq[Seq[T]]` (T is the item type)\n+   *          - `freq: Long`\n+   */\n+  @Since(\"2.4.0\")\n+  def findFrequentSequentialPatterns(\n+      dataset: Dataset[_],\n+      sequenceCol: String,",
    "line": 66
  }, {
    "author": {
      "login": "WeichenXu123"
    },
    "body": "this way `final class PrefixSpan(override val uid: String) extends Params` seemingly breaks binary compatibility if later we change it into an estimator ?\r\n",
    "commit": "76d411998205a3920ee8d1e353c8422658b2e330",
    "createdAt": "2018-05-16T03:00:47Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.mllib.fpm.{PrefixSpan => mllibPrefixSpan}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.functions.col\n+import org.apache.spark.sql.types.{ArrayType, LongType, StructField, StructType}\n+\n+/**\n+ * :: Experimental ::\n+ * A parallel PrefixSpan algorithm to mine frequent sequential patterns.\n+ * The PrefixSpan algorithm is described in J. Pei, et al., PrefixSpan: Mining Sequential Patterns\n+ * Efficiently by Prefix-Projected Pattern Growth\n+ * (see <a href=\"http://doi.org/10.1109/ICDE.2001.914830\">here</a>).\n+ *\n+ * @see <a href=\"https://en.wikipedia.org/wiki/Sequential_Pattern_Mining\">Sequential Pattern Mining\n+ * (Wikipedia)</a>\n+ */\n+@Since(\"2.4.0\")\n+@Experimental\n+object PrefixSpan {\n+\n+  /**\n+   * :: Experimental ::\n+   * Finds the complete set of frequent sequential patterns in the input sequences of itemsets.\n+   *\n+   * @param dataset A dataset or a dataframe containing a sequence column which is\n+   *                {{{Seq[Seq[_]]}}} type\n+   * @param sequenceCol the name of the sequence column in dataset, rows with nulls in this column\n+   *                    are ignored\n+   * @param minSupport the minimal support level of the sequential pattern, any pattern that\n+   *                   appears more than (minSupport * size-of-the-dataset) times will be output\n+   *                  (recommended value: `0.1`).\n+   * @param maxPatternLength the maximal length of the sequential pattern\n+   *                         (recommended value: `10`).\n+   * @param maxLocalProjDBSize The maximum number of items (including delimiters used in the\n+   *                           internal storage format) allowed in a projected database before\n+   *                           local processing. If a projected database exceeds this size, another\n+   *                           iteration of distributed prefix growth is run\n+   *                           (recommended value: `32000000`).\n+   * @return A `DataFrame` that contains columns of sequence and corresponding frequency.\n+   *         The schema of it will be:\n+   *          - `sequence: Seq[Seq[T]]` (T is the item type)\n+   *          - `freq: Long`\n+   */\n+  @Since(\"2.4.0\")\n+  def findFrequentSequentialPatterns(\n+      dataset: Dataset[_],\n+      sequenceCol: String,",
    "line": 66
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Adding `extends Estimator` later should only introduce new methods to the class but no breaking changes.",
    "commit": "76d411998205a3920ee8d1e353c8422658b2e330",
    "createdAt": "2018-05-16T18:42:40Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.mllib.fpm.{PrefixSpan => mllibPrefixSpan}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.functions.col\n+import org.apache.spark.sql.types.{ArrayType, LongType, StructField, StructType}\n+\n+/**\n+ * :: Experimental ::\n+ * A parallel PrefixSpan algorithm to mine frequent sequential patterns.\n+ * The PrefixSpan algorithm is described in J. Pei, et al., PrefixSpan: Mining Sequential Patterns\n+ * Efficiently by Prefix-Projected Pattern Growth\n+ * (see <a href=\"http://doi.org/10.1109/ICDE.2001.914830\">here</a>).\n+ *\n+ * @see <a href=\"https://en.wikipedia.org/wiki/Sequential_Pattern_Mining\">Sequential Pattern Mining\n+ * (Wikipedia)</a>\n+ */\n+@Since(\"2.4.0\")\n+@Experimental\n+object PrefixSpan {\n+\n+  /**\n+   * :: Experimental ::\n+   * Finds the complete set of frequent sequential patterns in the input sequences of itemsets.\n+   *\n+   * @param dataset A dataset or a dataframe containing a sequence column which is\n+   *                {{{Seq[Seq[_]]}}} type\n+   * @param sequenceCol the name of the sequence column in dataset, rows with nulls in this column\n+   *                    are ignored\n+   * @param minSupport the minimal support level of the sequential pattern, any pattern that\n+   *                   appears more than (minSupport * size-of-the-dataset) times will be output\n+   *                  (recommended value: `0.1`).\n+   * @param maxPatternLength the maximal length of the sequential pattern\n+   *                         (recommended value: `10`).\n+   * @param maxLocalProjDBSize The maximum number of items (including delimiters used in the\n+   *                           internal storage format) allowed in a projected database before\n+   *                           local processing. If a projected database exceeds this size, another\n+   *                           iteration of distributed prefix growth is run\n+   *                           (recommended value: `32000000`).\n+   * @return A `DataFrame` that contains columns of sequence and corresponding frequency.\n+   *         The schema of it will be:\n+   *          - `sequence: Seq[Seq[T]]` (T is the item type)\n+   *          - `freq: Long`\n+   */\n+  @Since(\"2.4.0\")\n+  def findFrequentSequentialPatterns(\n+      dataset: Dataset[_],\n+      sequenceCol: String,",
    "line": 66
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "Oh, I think you're right @mengxr .  That approach sounds good.",
    "commit": "76d411998205a3920ee8d1e353c8422658b2e330",
    "createdAt": "2018-05-17T00:57:18Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.mllib.fpm.{PrefixSpan => mllibPrefixSpan}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.functions.col\n+import org.apache.spark.sql.types.{ArrayType, LongType, StructField, StructType}\n+\n+/**\n+ * :: Experimental ::\n+ * A parallel PrefixSpan algorithm to mine frequent sequential patterns.\n+ * The PrefixSpan algorithm is described in J. Pei, et al., PrefixSpan: Mining Sequential Patterns\n+ * Efficiently by Prefix-Projected Pattern Growth\n+ * (see <a href=\"http://doi.org/10.1109/ICDE.2001.914830\">here</a>).\n+ *\n+ * @see <a href=\"https://en.wikipedia.org/wiki/Sequential_Pattern_Mining\">Sequential Pattern Mining\n+ * (Wikipedia)</a>\n+ */\n+@Since(\"2.4.0\")\n+@Experimental\n+object PrefixSpan {\n+\n+  /**\n+   * :: Experimental ::\n+   * Finds the complete set of frequent sequential patterns in the input sequences of itemsets.\n+   *\n+   * @param dataset A dataset or a dataframe containing a sequence column which is\n+   *                {{{Seq[Seq[_]]}}} type\n+   * @param sequenceCol the name of the sequence column in dataset, rows with nulls in this column\n+   *                    are ignored\n+   * @param minSupport the minimal support level of the sequential pattern, any pattern that\n+   *                   appears more than (minSupport * size-of-the-dataset) times will be output\n+   *                  (recommended value: `0.1`).\n+   * @param maxPatternLength the maximal length of the sequential pattern\n+   *                         (recommended value: `10`).\n+   * @param maxLocalProjDBSize The maximum number of items (including delimiters used in the\n+   *                           internal storage format) allowed in a projected database before\n+   *                           local processing. If a projected database exceeds this size, another\n+   *                           iteration of distributed prefix growth is run\n+   *                           (recommended value: `32000000`).\n+   * @return A `DataFrame` that contains columns of sequence and corresponding frequency.\n+   *         The schema of it will be:\n+   *          - `sequence: Seq[Seq[T]]` (T is the item type)\n+   *          - `freq: Long`\n+   */\n+  @Since(\"2.4.0\")\n+  def findFrequentSequentialPatterns(\n+      dataset: Dataset[_],\n+      sequenceCol: String,",
    "line": 66
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "@WeichenXu123 Do you have time to send a PR to update this API?",
    "commit": "76d411998205a3920ee8d1e353c8422658b2e330",
    "createdAt": "2018-05-17T00:58:08Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.mllib.fpm.{PrefixSpan => mllibPrefixSpan}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.functions.col\n+import org.apache.spark.sql.types.{ArrayType, LongType, StructField, StructType}\n+\n+/**\n+ * :: Experimental ::\n+ * A parallel PrefixSpan algorithm to mine frequent sequential patterns.\n+ * The PrefixSpan algorithm is described in J. Pei, et al., PrefixSpan: Mining Sequential Patterns\n+ * Efficiently by Prefix-Projected Pattern Growth\n+ * (see <a href=\"http://doi.org/10.1109/ICDE.2001.914830\">here</a>).\n+ *\n+ * @see <a href=\"https://en.wikipedia.org/wiki/Sequential_Pattern_Mining\">Sequential Pattern Mining\n+ * (Wikipedia)</a>\n+ */\n+@Since(\"2.4.0\")\n+@Experimental\n+object PrefixSpan {\n+\n+  /**\n+   * :: Experimental ::\n+   * Finds the complete set of frequent sequential patterns in the input sequences of itemsets.\n+   *\n+   * @param dataset A dataset or a dataframe containing a sequence column which is\n+   *                {{{Seq[Seq[_]]}}} type\n+   * @param sequenceCol the name of the sequence column in dataset, rows with nulls in this column\n+   *                    are ignored\n+   * @param minSupport the minimal support level of the sequential pattern, any pattern that\n+   *                   appears more than (minSupport * size-of-the-dataset) times will be output\n+   *                  (recommended value: `0.1`).\n+   * @param maxPatternLength the maximal length of the sequential pattern\n+   *                         (recommended value: `10`).\n+   * @param maxLocalProjDBSize The maximum number of items (including delimiters used in the\n+   *                           internal storage format) allowed in a projected database before\n+   *                           local processing. If a projected database exceeds this size, another\n+   *                           iteration of distributed prefix growth is run\n+   *                           (recommended value: `32000000`).\n+   * @return A `DataFrame` that contains columns of sequence and corresponding frequency.\n+   *         The schema of it will be:\n+   *          - `sequence: Seq[Seq[T]]` (T is the item type)\n+   *          - `freq: Long`\n+   */\n+  @Since(\"2.4.0\")\n+  def findFrequentSequentialPatterns(\n+      dataset: Dataset[_],\n+      sequenceCol: String,",
    "line": 66
  }, {
    "author": {
      "login": "WeichenXu123"
    },
    "body": "Sure. Will update soon!",
    "commit": "76d411998205a3920ee8d1e353c8422658b2e330",
    "createdAt": "2018-05-17T06:47:28Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.mllib.fpm.{PrefixSpan => mllibPrefixSpan}\n+import org.apache.spark.sql.{DataFrame, Dataset, Row}\n+import org.apache.spark.sql.functions.col\n+import org.apache.spark.sql.types.{ArrayType, LongType, StructField, StructType}\n+\n+/**\n+ * :: Experimental ::\n+ * A parallel PrefixSpan algorithm to mine frequent sequential patterns.\n+ * The PrefixSpan algorithm is described in J. Pei, et al., PrefixSpan: Mining Sequential Patterns\n+ * Efficiently by Prefix-Projected Pattern Growth\n+ * (see <a href=\"http://doi.org/10.1109/ICDE.2001.914830\">here</a>).\n+ *\n+ * @see <a href=\"https://en.wikipedia.org/wiki/Sequential_Pattern_Mining\">Sequential Pattern Mining\n+ * (Wikipedia)</a>\n+ */\n+@Since(\"2.4.0\")\n+@Experimental\n+object PrefixSpan {\n+\n+  /**\n+   * :: Experimental ::\n+   * Finds the complete set of frequent sequential patterns in the input sequences of itemsets.\n+   *\n+   * @param dataset A dataset or a dataframe containing a sequence column which is\n+   *                {{{Seq[Seq[_]]}}} type\n+   * @param sequenceCol the name of the sequence column in dataset, rows with nulls in this column\n+   *                    are ignored\n+   * @param minSupport the minimal support level of the sequential pattern, any pattern that\n+   *                   appears more than (minSupport * size-of-the-dataset) times will be output\n+   *                  (recommended value: `0.1`).\n+   * @param maxPatternLength the maximal length of the sequential pattern\n+   *                         (recommended value: `10`).\n+   * @param maxLocalProjDBSize The maximum number of items (including delimiters used in the\n+   *                           internal storage format) allowed in a projected database before\n+   *                           local processing. If a projected database exceeds this size, another\n+   *                           iteration of distributed prefix growth is run\n+   *                           (recommended value: `32000000`).\n+   * @return A `DataFrame` that contains columns of sequence and corresponding frequency.\n+   *         The schema of it will be:\n+   *          - `sequence: Seq[Seq[T]]` (T is the item type)\n+   *          - `freq: Long`\n+   */\n+  @Since(\"2.4.0\")\n+  def findFrequentSequentialPatterns(\n+      dataset: Dataset[_],\n+      sequenceCol: String,",
    "line": 66
  }],
  "prId": 20973
}]