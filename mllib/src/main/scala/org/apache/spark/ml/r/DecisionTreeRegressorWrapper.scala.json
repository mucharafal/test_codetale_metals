[{
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "ditto\n",
    "commit": "0694f84e86a18179f06abf028d6e573c5c1af4b0",
    "createdAt": "2016-10-09T01:57:11Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s._\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.{Pipeline, PipelineModel}\n+import org.apache.spark.ml.attribute.AttributeGroup\n+import org.apache.spark.ml.feature.RFormula\n+import org.apache.spark.ml.regression.{DecisionTreeRegressionModel, DecisionTreeRegressor}\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class DecisionTreeRegressorWrapper private (\n+  val pipeline: PipelineModel,\n+  val features: Array[String],\n+  val maxDepth: Int,\n+  val maxBins: Int) extends MLWritable {\n+\n+  private val DTModel: DecisionTreeRegressionModel =\n+    pipeline.stages(1).asInstanceOf[DecisionTreeRegressionModel]\n+\n+  lazy val depth: Int = DTModel.depth\n+  lazy val numNodes: Int = DTModel.numNodes\n+\n+  def summary: String = DTModel.toDebugString\n+\n+  def transform(dataset: Dataset[_]): DataFrame = {\n+    pipeline.transform(dataset)\n+      .drop(DTModel.getFeaturesCol)\n+  }\n+\n+  override def write: MLWriter = new\n+      DecisionTreeRegressorWrapper.DecisionTreeRegressorWrapperWriter(this)\n+}\n+\n+private[r] object DecisionTreeRegressorWrapper extends MLReadable[DecisionTreeRegressorWrapper] {\n+  def fit(data: DataFrame,\n+          formula: String,\n+          maxDepth: Int,\n+          maxBins: Int): DecisionTreeRegressorWrapper = {\n+\n+    val rFormula = new RFormula()\n+      .setFormula(formula)\n+      .setFeaturesCol(\"features\")",
    "line": 63
  }],
  "prId": 13690
}]