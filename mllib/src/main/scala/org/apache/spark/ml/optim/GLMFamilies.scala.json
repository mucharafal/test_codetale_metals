[{
  "comments": [{
    "author": {
      "login": "sethah"
    },
    "body": "I believe the link function here should default to `Log` not `Logit`\n",
    "commit": "cb2057e2eeadbb52c467667ad15e23f1723685cd",
    "createdAt": "2016-01-08T00:13:21Z",
    "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.optim\n+\n+import org.apache.spark.rdd.RDD\n+\n+/**\n+ * A description of the error distribution and link function to be used in the model.\n+ * @param link a link function instance\n+ */\n+private[ml] abstract class Family(val link: Link) extends Serializable {\n+\n+  /**\n+   * Starting value for mu in the IRLS algorithm.\n+   */\n+  def startingMu(y: Double, yMean: Double): Double = (y + yMean) / 2.0\n+\n+  /**\n+   * Deviance of (y, mu) pair.\n+   * Deviance is usually defined as twice the loglikelihood ratio.\n+   */\n+  def deviance(y: RDD[Double], mu: RDD[Double]): Double\n+\n+  /** Weights for IRLS steps. */\n+  def weights(mu: Double): Double\n+\n+  /** The working dependent variable. */\n+  def z(y: Double, mu: Double, eta: Double): Double\n+}\n+\n+/**\n+ * Binomial exponential family distribution.\n+ * The default link for the Binomial family is the logit link.\n+ * @param link a link function instance\n+ */\n+private[ml] class Binomial(link: Link = new Logit) extends Family(link) {\n+\n+  override def startingMu(y: Double, yMean: Double): Double = (y + 0.5) / 2.0\n+\n+  override def deviance(y: RDD[Double], mu: RDD[Double]): Double = {\n+    mu.zip(y).map { case (mu, y) =>\n+      val my = 1.0 - y\n+      y * math.log(math.max(y, 1.0) / mu) +\n+        my * math.log(math.max(my, 1.0) / (1.0 - mu))\n+    }.sum() * 2\n+  }\n+\n+  override def weights(mu: Double): Double = {\n+    mu * (1 - mu)\n+  }\n+\n+  override def z(y: Double, mu: Double, eta: Double): Double = {\n+    eta + (y - mu) * link.deriv(mu)\n+  }\n+}\n+\n+/**\n+ * Poisson exponential family.\n+ * The default link for the Poisson family is the log link.\n+ * @param link a link function instance\n+ */\n+private[ml] class Poisson(link: Link = new Logit) extends Family(link) {"
  }, {
    "author": {
      "login": "yanboliang"
    },
    "body": "Yep, it's typo.\n",
    "commit": "cb2057e2eeadbb52c467667ad15e23f1723685cd",
    "createdAt": "2016-01-08T04:14:26Z",
    "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.optim\n+\n+import org.apache.spark.rdd.RDD\n+\n+/**\n+ * A description of the error distribution and link function to be used in the model.\n+ * @param link a link function instance\n+ */\n+private[ml] abstract class Family(val link: Link) extends Serializable {\n+\n+  /**\n+   * Starting value for mu in the IRLS algorithm.\n+   */\n+  def startingMu(y: Double, yMean: Double): Double = (y + yMean) / 2.0\n+\n+  /**\n+   * Deviance of (y, mu) pair.\n+   * Deviance is usually defined as twice the loglikelihood ratio.\n+   */\n+  def deviance(y: RDD[Double], mu: RDD[Double]): Double\n+\n+  /** Weights for IRLS steps. */\n+  def weights(mu: Double): Double\n+\n+  /** The working dependent variable. */\n+  def z(y: Double, mu: Double, eta: Double): Double\n+}\n+\n+/**\n+ * Binomial exponential family distribution.\n+ * The default link for the Binomial family is the logit link.\n+ * @param link a link function instance\n+ */\n+private[ml] class Binomial(link: Link = new Logit) extends Family(link) {\n+\n+  override def startingMu(y: Double, yMean: Double): Double = (y + 0.5) / 2.0\n+\n+  override def deviance(y: RDD[Double], mu: RDD[Double]): Double = {\n+    mu.zip(y).map { case (mu, y) =>\n+      val my = 1.0 - y\n+      y * math.log(math.max(y, 1.0) / mu) +\n+        my * math.log(math.max(my, 1.0) / (1.0 - mu))\n+    }.sum() * 2\n+  }\n+\n+  override def weights(mu: Double): Double = {\n+    mu * (1 - mu)\n+  }\n+\n+  override def z(y: Double, mu: Double, eta: Double): Double = {\n+    eta + (y - mu) * link.deriv(mu)\n+  }\n+}\n+\n+/**\n+ * Poisson exponential family.\n+ * The default link for the Poisson family is the log link.\n+ * @param link a link function instance\n+ */\n+private[ml] class Poisson(link: Link = new Logit) extends Family(link) {"
  }],
  "prId": 10639
}, {
  "comments": [{
    "author": {
      "login": "sethah"
    },
    "body": "This is the generic form for the z update, but in the Poisson family you have hard coded the update specific to the family. I think we should stick to a single convention, and it makes most sense to me to use the generic update. That way, we can implement in the parent class and we don't need to implement in the base classes.\n\nAdditionally, I think it would be better to call this something other than `z` because it isn't very descriptive. I don't have a strong opinion on what it should be called, but I have seen it called _adjusted response_ in other places (among other names).\n",
    "commit": "cb2057e2eeadbb52c467667ad15e23f1723685cd",
    "createdAt": "2016-01-08T19:25:00Z",
    "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.optim\n+\n+import org.apache.spark.rdd.RDD\n+\n+/**\n+ * A description of the error distribution and link function to be used in the model.\n+ * @param link a link function instance\n+ */\n+private[ml] abstract class Family(val link: Link) extends Serializable {\n+\n+  /**\n+   * Starting value for mu in the IRLS algorithm.\n+   */\n+  def startingMu(y: Double, yMean: Double): Double = (y + yMean) / 2.0\n+\n+  /**\n+   * Deviance of (y, mu) pair.\n+   * Deviance is usually defined as twice the loglikelihood ratio.\n+   */\n+  def deviance(y: RDD[Double], mu: RDD[Double]): Double\n+\n+  /** Weights for IRLS steps. */\n+  def weights(mu: Double): Double\n+\n+  /** The working dependent variable. */\n+  def z(y: Double, mu: Double, eta: Double): Double\n+\n+  /** Linear predictors based on given mu. */\n+  def predict(mu: Double): Double = this.link.link(mu)\n+\n+  /** Fitted values based on linear predictors eta. */\n+  def fitted(eta: Double): Double = this.link.unlink(eta)\n+}\n+\n+/**\n+ * Binomial exponential family distribution.\n+ * The default link for the Binomial family is the logit link.\n+ * @param link a link function instance\n+ */\n+private[ml] class Binomial(link: Link = Logit) extends Family(link) {\n+\n+  override def startingMu(y: Double, yMean: Double): Double = (y + 0.5) / 2.0\n+\n+  override def deviance(y: RDD[Double], mu: RDD[Double]): Double = {\n+    mu.zip(y).map { case (mu, y) =>\n+      val my = 1.0 - y\n+      y * math.log(math.max(y, 1.0) / mu) +\n+        my * math.log(math.max(my, 1.0) / (1.0 - mu))\n+    }.sum() * 2\n+  }\n+\n+  override def weights(mu: Double): Double = {\n+    mu * (1 - mu)\n+  }\n+\n+  override def z(y: Double, mu: Double, eta: Double): Double = {\n+    eta + (y - mu) * link.deriv(mu)"
  }],
  "prId": 10639
}, {
  "comments": [{
    "author": {
      "login": "sethah"
    },
    "body": "Hard coding the weights like this here won't be correct if anything other than the canonical link function is used, I believe. Since we aren't doing anything to restrict link functions to only the canonical ones, this should probably defined in terms of the link function's derivative. Statsmodels does it [here](https://github.com/statsmodels/statsmodels/blob/master/statsmodels/genmod/families/family.py#L120).\n",
    "commit": "cb2057e2eeadbb52c467667ad15e23f1723685cd",
    "createdAt": "2016-01-11T23:28:42Z",
    "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.optim\n+\n+import org.apache.spark.rdd.RDD\n+\n+/**\n+ * A description of the error distribution and link function to be used in the model.\n+ * @param link a link function instance\n+ */\n+private[ml] abstract class Family(val link: Link) extends Serializable {\n+\n+  /**\n+   * Starting value for mu in the IRLS algorithm.\n+   */\n+  def startingMu(y: Double, yMean: Double): Double = (y + yMean) / 2.0\n+\n+  /**\n+   * Deviance of (y, mu) pair.\n+   * Deviance is usually defined as twice the loglikelihood ratio.\n+   */\n+  def deviance(y: RDD[Double], mu: RDD[Double]): Double\n+\n+  /** Weights for IRLS steps. */\n+  def weights(mu: Double): Double\n+\n+  /** The adjusted response variable. */\n+  def adjusted(y: Double, mu: Double, eta: Double): Double = {\n+    eta + (y - mu) * link.deriv(mu)\n+  }\n+\n+  /** Linear predictors based on given mu. */\n+  def predict(mu: Double): Double = this.link.link(mu)\n+\n+  /** Fitted values based on linear predictors eta. */\n+  def fitted(eta: Double): Double = this.link.unlink(eta)\n+}\n+\n+/**\n+ * Binomial exponential family distribution.\n+ * The default link for the Binomial family is the logit link.\n+ * @param link a link function instance\n+ */\n+private[ml] class Binomial(link: Link = Logit) extends Family(link) {\n+\n+  override def startingMu(y: Double, yMean: Double): Double = (y + 0.5) / 2.0\n+\n+  override def deviance(y: RDD[Double], mu: RDD[Double]): Double = {\n+    mu.zip(y).map { case (mu, y) =>\n+      val my = 1.0 - y\n+      y * math.log(math.max(y, 1.0) / mu) +\n+        my * math.log(math.max(my, 1.0) / (1.0 - mu))\n+    }.sum() * 2\n+  }\n+\n+  override def weights(mu: Double): Double = {\n+    mu * (1 - mu)"
  }],
  "prId": 10639
}, {
  "comments": [{
    "author": {
      "login": "sethah"
    },
    "body": "Is there a reference you can point to for this exact form of the deviance equation (other than SparkGLM package)? I haven't seen the max function in other places.\n\nThis may or may not be related, but how will we guarantee that the endogenous variable does not contain invalid values (negative for poisson, outside [0, 1] for binomial, etc...?\n",
    "commit": "cb2057e2eeadbb52c467667ad15e23f1723685cd",
    "createdAt": "2016-01-13T17:03:00Z",
    "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.optim\n+\n+import org.apache.spark.rdd.RDD\n+\n+/**\n+ * A description of the error distribution and link function to be used in the model.\n+ * @param link a link function instance\n+ */\n+private[ml] abstract class Family(val link: Link) extends Serializable {\n+\n+  /**\n+   * Starting value for mu in the IRLS algorithm.\n+   */\n+  def startingMu(y: Double, yMean: Double): Double = (y + yMean) / 2.0\n+\n+  /**\n+   * Deviance of (y, mu) pair.\n+   * Deviance is usually defined as twice the loglikelihood ratio.\n+   */\n+  def deviance(y: RDD[Double], mu: RDD[Double]): Double\n+\n+  /** The variance of mu to its mean. */\n+  def variance(mu: Double): Double = 1.0\n+\n+  /** Weights for IRLS steps. */\n+  def weights(mu: Double): Double = {\n+    1.0 / (math.pow(this.link.deriv(mu), 2.0) * this.variance(mu))\n+  }\n+\n+  /** The adjusted response variable. */\n+  def adjusted(y: Double, mu: Double, eta: Double): Double = {\n+    eta + (y - mu) * link.deriv(mu)\n+  }\n+\n+  /** Linear predictors based on given mu. */\n+  def predict(mu: Double): Double = this.link.link(mu)\n+\n+  /** Fitted values based on linear predictors eta. */\n+  def fitted(eta: Double): Double = this.link.unlink(eta)\n+}\n+\n+/**\n+ * Binomial exponential family distribution.\n+ * The default link for the Binomial family is the logit link.\n+ * @param link a link function instance\n+ */\n+private[ml] class Binomial(link: Link = Logit) extends Family(link) {\n+\n+  override def startingMu(y: Double, yMean: Double): Double = (y + 0.5) / 2.0\n+\n+  override def deviance(y: RDD[Double], mu: RDD[Double]): Double = {\n+    mu.zip(y).map { case (mu, y) =>\n+      val my = 1.0 - y\n+      y * math.log(math.max(y, 1.0) / mu) +\n+        my * math.log(math.max(my, 1.0) / (1.0 - mu))\n+    }.sum() * 2\n+  }\n+\n+  override def variance(mu: Double): Double = {\n+    mu * (1 - mu)\n+  }\n+}\n+\n+private[ml] object Binomial {\n+\n+  def apply(link: Link): Binomial = new Binomial(link)\n+}\n+\n+/**\n+ * Poisson exponential family.\n+ * The default link for the Poisson family is the log link.\n+ * @param link a link function instance\n+ */\n+private[ml] class Poisson(link: Link = Log) extends Family(link) {\n+\n+  override def deviance(y: RDD[Double], mu: RDD[Double]): Double = {\n+    mu.zip(y).map { case (mu, y) =>\n+      y * math.log(math.max(y, 1.0) / mu) - (y - mu)"
  }],
  "prId": 10639
}]