[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`sealed`?\n",
    "commit": "6aae25587cdcadc0e5d68078ca77d0cdee59e6e4",
    "createdAt": "2015-04-16T06:39:26Z",
    "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.impl.tree\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.mllib.tree.configuration.{FeatureType => OldFeatureType}\n+import org.apache.spark.mllib.tree.model.{Split => OldSplit}\n+\n+\n+/**\n+ * Interface for a \"Split,\" which specifies a test made at a decision tree node\n+ * to choose the left or right path.\n+ */\n+trait Split extends Serializable {"
  }],
  "prId": 5530
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "minor: `feature` -> `featureIndex`?\n",
    "commit": "6aae25587cdcadc0e5d68078ca77d0cdee59e6e4",
    "createdAt": "2015-04-16T06:39:27Z",
    "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.impl.tree\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.mllib.tree.configuration.{FeatureType => OldFeatureType}\n+import org.apache.spark.mllib.tree.model.{Split => OldSplit}\n+\n+\n+/**\n+ * Interface for a \"Split,\" which specifies a test made at a decision tree node\n+ * to choose the left or right path.\n+ */\n+trait Split extends Serializable {\n+\n+  /** Index of feature which this split tests */\n+  def feature: Int"
  }],
  "prId": 5530
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "It returns a boolean. So it might be better to call it `shouldGoLeft`.\n",
    "commit": "6aae25587cdcadc0e5d68078ca77d0cdee59e6e4",
    "createdAt": "2015-04-16T06:39:31Z",
    "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.impl.tree\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.mllib.tree.configuration.{FeatureType => OldFeatureType}\n+import org.apache.spark.mllib.tree.model.{Split => OldSplit}\n+\n+\n+/**\n+ * Interface for a \"Split,\" which specifies a test made at a decision tree node\n+ * to choose the left or right path.\n+ */\n+trait Split extends Serializable {\n+\n+  /** Index of feature which this split tests */\n+  def feature: Int\n+\n+  /** Return true (split to left) or false (split to right) */\n+  private[ml] def goLeft(features: Vector): Boolean"
  }],
  "prId": 5530
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`categories` -> `leftCategories`?\n",
    "commit": "6aae25587cdcadc0e5d68078ca77d0cdee59e6e4",
    "createdAt": "2015-04-16T06:39:42Z",
    "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.impl.tree\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.mllib.tree.configuration.{FeatureType => OldFeatureType}\n+import org.apache.spark.mllib.tree.model.{Split => OldSplit}\n+\n+\n+/**\n+ * Interface for a \"Split,\" which specifies a test made at a decision tree node\n+ * to choose the left or right path.\n+ */\n+trait Split extends Serializable {\n+\n+  /** Index of feature which this split tests */\n+  def feature: Int\n+\n+  /** Return true (split to left) or false (split to right) */\n+  private[ml] def goLeft(features: Vector): Boolean\n+\n+  /** Convert to old Split format */\n+  private[tree] def toOld: OldSplit\n+}\n+\n+private[ml] object Split {\n+\n+  def fromOld(oldSplit: OldSplit): Split = {\n+    oldSplit.featureType match {\n+      case OldFeatureType.Categorical =>\n+        new CategoricalSplit(feature = oldSplit.feature,\n+          categories = oldSplit.categories.toSet)\n+      case OldFeatureType.Continuous =>\n+        new ContinuousSplit(feature = oldSplit.feature, threshold = oldSplit.threshold)\n+    }\n+  }\n+\n+}\n+\n+/**\n+ * Split which tests a categorical feature.\n+ * @param feature  Index of the feature to test\n+ * @param categories  If the feature value is in this set of categories, then the split goes left."
  }],
  "prId": 5530
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`Set` is not Java friendly. We can use `Array[Double]` in the constructor and save `Set[Double]` internally. Btw, do we want to optimize the storage based on which side has less number of categories? If yes, we can have `categories: Array[Double], isLeft: Boolean`.\n",
    "commit": "6aae25587cdcadc0e5d68078ca77d0cdee59e6e4",
    "createdAt": "2015-04-16T06:39:44Z",
    "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.impl.tree\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.mllib.tree.configuration.{FeatureType => OldFeatureType}\n+import org.apache.spark.mllib.tree.model.{Split => OldSplit}\n+\n+\n+/**\n+ * Interface for a \"Split,\" which specifies a test made at a decision tree node\n+ * to choose the left or right path.\n+ */\n+trait Split extends Serializable {\n+\n+  /** Index of feature which this split tests */\n+  def feature: Int\n+\n+  /** Return true (split to left) or false (split to right) */\n+  private[ml] def goLeft(features: Vector): Boolean\n+\n+  /** Convert to old Split format */\n+  private[tree] def toOld: OldSplit\n+}\n+\n+private[ml] object Split {\n+\n+  def fromOld(oldSplit: OldSplit): Split = {\n+    oldSplit.featureType match {\n+      case OldFeatureType.Categorical =>\n+        new CategoricalSplit(feature = oldSplit.feature,\n+          categories = oldSplit.categories.toSet)\n+      case OldFeatureType.Continuous =>\n+        new ContinuousSplit(feature = oldSplit.feature, threshold = oldSplit.threshold)\n+    }\n+  }\n+\n+}\n+\n+/**\n+ * Split which tests a categorical feature.\n+ * @param feature  Index of the feature to test\n+ * @param categories  If the feature value is in this set of categories, then the split goes left.\n+ *                    Otherwise, it goes right.\n+ */\n+class CategoricalSplit(override val feature: Int, val categories: Set[Double]) extends Split {"
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "I was thinking more about optimizing running time (if there were thousands of categories), rather than storage.  I'll go for Array in the constructor and Set internally, as you suggested.  I'll add a to-do for optimizing storage.\n",
    "commit": "6aae25587cdcadc0e5d68078ca77d0cdee59e6e4",
    "createdAt": "2015-04-16T18:12:37Z",
    "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.impl.tree\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.mllib.tree.configuration.{FeatureType => OldFeatureType}\n+import org.apache.spark.mllib.tree.model.{Split => OldSplit}\n+\n+\n+/**\n+ * Interface for a \"Split,\" which specifies a test made at a decision tree node\n+ * to choose the left or right path.\n+ */\n+trait Split extends Serializable {\n+\n+  /** Index of feature which this split tests */\n+  def feature: Int\n+\n+  /** Return true (split to left) or false (split to right) */\n+  private[ml] def goLeft(features: Vector): Boolean\n+\n+  /** Convert to old Split format */\n+  private[tree] def toOld: OldSplit\n+}\n+\n+private[ml] object Split {\n+\n+  def fromOld(oldSplit: OldSplit): Split = {\n+    oldSplit.featureType match {\n+      case OldFeatureType.Categorical =>\n+        new CategoricalSplit(feature = oldSplit.feature,\n+          categories = oldSplit.categories.toSet)\n+      case OldFeatureType.Continuous =>\n+        new ContinuousSplit(feature = oldSplit.feature, threshold = oldSplit.threshold)\n+    }\n+  }\n+\n+}\n+\n+/**\n+ * Split which tests a categorical feature.\n+ * @param feature  Index of the feature to test\n+ * @param categories  If the feature value is in this set of categories, then the split goes left.\n+ *                    Otherwise, it goes right.\n+ */\n+class CategoricalSplit(override val feature: Int, val categories: Set[Double]) extends Split {"
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "I ended up going ahead and doing this to-do, so that part of the code will change a bit.\n",
    "commit": "6aae25587cdcadc0e5d68078ca77d0cdee59e6e4",
    "createdAt": "2015-04-16T18:35:37Z",
    "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.impl.tree\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.mllib.tree.configuration.{FeatureType => OldFeatureType}\n+import org.apache.spark.mllib.tree.model.{Split => OldSplit}\n+\n+\n+/**\n+ * Interface for a \"Split,\" which specifies a test made at a decision tree node\n+ * to choose the left or right path.\n+ */\n+trait Split extends Serializable {\n+\n+  /** Index of feature which this split tests */\n+  def feature: Int\n+\n+  /** Return true (split to left) or false (split to right) */\n+  private[ml] def goLeft(features: Vector): Boolean\n+\n+  /** Convert to old Split format */\n+  private[tree] def toOld: OldSplit\n+}\n+\n+private[ml] object Split {\n+\n+  def fromOld(oldSplit: OldSplit): Split = {\n+    oldSplit.featureType match {\n+      case OldFeatureType.Categorical =>\n+        new CategoricalSplit(feature = oldSplit.feature,\n+          categories = oldSplit.categories.toSet)\n+      case OldFeatureType.Continuous =>\n+        new ContinuousSplit(feature = oldSplit.feature, threshold = oldSplit.threshold)\n+    }\n+  }\n+\n+}\n+\n+/**\n+ * Split which tests a categorical feature.\n+ * @param feature  Index of the feature to test\n+ * @param categories  If the feature value is in this set of categories, then the split goes left.\n+ *                    Otherwise, it goes right.\n+ */\n+class CategoricalSplit(override val feature: Int, val categories: Set[Double]) extends Split {"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Sounds good.\n",
    "commit": "6aae25587cdcadc0e5d68078ca77d0cdee59e6e4",
    "createdAt": "2015-04-17T20:14:41Z",
    "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.impl.tree\n+\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.mllib.tree.configuration.{FeatureType => OldFeatureType}\n+import org.apache.spark.mllib.tree.model.{Split => OldSplit}\n+\n+\n+/**\n+ * Interface for a \"Split,\" which specifies a test made at a decision tree node\n+ * to choose the left or right path.\n+ */\n+trait Split extends Serializable {\n+\n+  /** Index of feature which this split tests */\n+  def feature: Int\n+\n+  /** Return true (split to left) or false (split to right) */\n+  private[ml] def goLeft(features: Vector): Boolean\n+\n+  /** Convert to old Split format */\n+  private[tree] def toOld: OldSplit\n+}\n+\n+private[ml] object Split {\n+\n+  def fromOld(oldSplit: OldSplit): Split = {\n+    oldSplit.featureType match {\n+      case OldFeatureType.Categorical =>\n+        new CategoricalSplit(feature = oldSplit.feature,\n+          categories = oldSplit.categories.toSet)\n+      case OldFeatureType.Continuous =>\n+        new ContinuousSplit(feature = oldSplit.feature, threshold = oldSplit.threshold)\n+    }\n+  }\n+\n+}\n+\n+/**\n+ * Split which tests a categorical feature.\n+ * @param feature  Index of the feature to test\n+ * @param categories  If the feature value is in this set of categories, then the split goes left.\n+ *                    Otherwise, it goes right.\n+ */\n+class CategoricalSplit(override val feature: Int, val categories: Set[Double]) extends Split {"
  }],
  "prId": 5530
}]