[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Please keep `logging` on, which uses DEBUG level.\n",
    "commit": "97502382834ec84f0b58ae67be924df074564d1b",
    "createdAt": "2016-02-12T01:17:35Z",
    "diffHunk": "@@ -62,28 +65,57 @@ final class Binarizer(override val uid: String)\n   def setOutputCol(value: String): this.type = set(outputCol, value)\n \n   override def transform(dataset: DataFrame): DataFrame = {\n-    transformSchema(dataset.schema, logging = true)\n+    val outputSchema = transformSchema(dataset.schema)"
  }],
  "prId": 10976
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Check `value > td` first and skip zeros:\n\n``` scala\nif (value > td) {\n  indices += index\n  values += 1.0\n}\n```\n",
    "commit": "97502382834ec84f0b58ae67be924df074564d1b",
    "createdAt": "2016-02-12T01:17:37Z",
    "diffHunk": "@@ -62,28 +65,57 @@ final class Binarizer(override val uid: String)\n   def setOutputCol(value: String): this.type = set(outputCol, value)\n \n   override def transform(dataset: DataFrame): DataFrame = {\n-    transformSchema(dataset.schema, logging = true)\n+    val outputSchema = transformSchema(dataset.schema)\n+    val schema = dataset.schema\n+    val inputType = schema($(inputCol)).dataType\n     val td = $(threshold)\n-    val binarizer = udf { in: Double => if (in > td) 1.0 else 0.0 }\n-    val outputColName = $(outputCol)\n-    val metadata = BinaryAttribute.defaultAttr.withName(outputColName).toMetadata()\n-    dataset.select(col(\"*\"),\n-      binarizer(col($(inputCol))).as(outputColName, metadata))\n+\n+    val binarizerDouble = udf { in: Double => if (in > td) 1.0 else 0.0 }\n+    val binarizerVector = udf { (data: Vector) =>\n+      val indices = ArrayBuilder.make[Int]\n+      val values = ArrayBuilder.make[Double]\n+\n+      data.foreachActive { (index, value) =>\n+        indices += index"
  }],
  "prId": 10976
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "We can output `Vectors.sparse(data.size, indices.result(), values.result()).compressed` directly.\n",
    "commit": "97502382834ec84f0b58ae67be924df074564d1b",
    "createdAt": "2016-02-12T01:17:42Z",
    "diffHunk": "@@ -62,28 +65,57 @@ final class Binarizer(override val uid: String)\n   def setOutputCol(value: String): this.type = set(outputCol, value)\n \n   override def transform(dataset: DataFrame): DataFrame = {\n-    transformSchema(dataset.schema, logging = true)\n+    val outputSchema = transformSchema(dataset.schema)\n+    val schema = dataset.schema\n+    val inputType = schema($(inputCol)).dataType\n     val td = $(threshold)\n-    val binarizer = udf { in: Double => if (in > td) 1.0 else 0.0 }\n-    val outputColName = $(outputCol)\n-    val metadata = BinaryAttribute.defaultAttr.withName(outputColName).toMetadata()\n-    dataset.select(col(\"*\"),\n-      binarizer(col($(inputCol))).as(outputColName, metadata))\n+\n+    val binarizerDouble = udf { in: Double => if (in > td) 1.0 else 0.0 }\n+    val binarizerVector = udf { (data: Vector) =>\n+      val indices = ArrayBuilder.make[Int]\n+      val values = ArrayBuilder.make[Double]\n+\n+      data.foreachActive { (index, value) =>\n+        indices += index\n+        values += (if (value > td) 1.0 else 0.0)\n+      }\n+\n+      data match {"
  }],
  "prId": 10976
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "nit: we can use `val` here like:\n\n```\nval outCol: StructField = inputType match {\n  case DoubleType =>\n    BinaryAttribute.defaultAttr.withName(outputColName).toStructField()\n  case _: VectorUDT =>\n    new StructField(outputColName, new VectorUDT, true)\n  case other =>\n    throw new IllegalArgumentException(s\"Data type $other is not supported.\")\n}\n```\n",
    "commit": "97502382834ec84f0b58ae67be924df074564d1b",
    "createdAt": "2016-02-14T10:03:11Z",
    "diffHunk": "@@ -62,28 +65,54 @@ final class Binarizer(override val uid: String)\n   def setOutputCol(value: String): this.type = set(outputCol, value)\n \n   override def transform(dataset: DataFrame): DataFrame = {\n-    transformSchema(dataset.schema, logging = true)\n+    val outputSchema = transformSchema(dataset.schema, logging = true)\n+    val schema = dataset.schema\n+    val inputType = schema($(inputCol)).dataType\n     val td = $(threshold)\n-    val binarizer = udf { in: Double => if (in > td) 1.0 else 0.0 }\n-    val outputColName = $(outputCol)\n-    val metadata = BinaryAttribute.defaultAttr.withName(outputColName).toMetadata()\n-    dataset.select(col(\"*\"),\n-      binarizer(col($(inputCol))).as(outputColName, metadata))\n+\n+    val binarizerDouble = udf { in: Double => if (in > td) 1.0 else 0.0 }\n+    val binarizerVector = udf { (data: Vector) =>\n+      val indices = ArrayBuilder.make[Int]\n+      val values = ArrayBuilder.make[Double]\n+\n+      data.foreachActive { (index, value) =>\n+        if (value > td) {\n+          indices += index\n+          values +=  1.0\n+        }\n+      }\n+\n+      Vectors.sparse(data.size, indices.result(), values.result()).compressed\n+    }\n+\n+    val metadata = outputSchema($(outputCol)).metadata\n+\n+    inputType match {\n+      case DoubleType =>\n+        dataset.select(col(\"*\"), binarizerDouble(col($(inputCol))).as($(outputCol), metadata))\n+      case _: VectorUDT =>\n+        dataset.select(col(\"*\"), binarizerVector(col($(inputCol))).as($(outputCol), metadata))\n+    }\n   }\n \n   override def transformSchema(schema: StructType): StructType = {\n-    validateParams()\n-    SchemaUtils.checkColumnType(schema, $(inputCol), DoubleType)\n-\n-    val inputFields = schema.fields\n+    val inputType = schema($(inputCol)).dataType\n     val outputColName = $(outputCol)\n-\n-    require(inputFields.forall(_.name != outputColName),\n-      s\"Output column $outputColName already exists.\")\n-\n-    val attr = BinaryAttribute.defaultAttr.withName(outputColName)\n-    val outputFields = inputFields :+ attr.toStructField()\n-    StructType(outputFields)\n+    var outCol: StructField = null"
  }],
  "prId": 10976
}]