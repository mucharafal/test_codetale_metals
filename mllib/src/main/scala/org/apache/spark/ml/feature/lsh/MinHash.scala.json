[{
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "A little more info in the Scaladoc for this param would be useful.\n",
    "commit": "35708458a0ee156c097ca604efeafaa37d3c8a6d",
    "createdAt": "2016-09-26T13:13:14Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature.lsh\n+\n+import scala.util.Random\n+\n+import org.apache.spark.ml.linalg.{Vector, Vectors}\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.Dataset\n+\n+/**\n+ * Params for [[MinHash]].\n+ */\n+private[ml] trait MinHashModelParams extends Params {\n+  protected[this] val prime = 2038074743\n+\n+  val numIndex: IntParam = new IntParam(this, \"numIndex\", \"the number of index\","
  }, {
    "author": {
      "login": "Yunni"
    },
    "body": "This Param is removed.\n",
    "commit": "35708458a0ee156c097ca604efeafaa37d3c8a6d",
    "createdAt": "2016-09-28T19:41:20Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature.lsh\n+\n+import scala.util.Random\n+\n+import org.apache.spark.ml.linalg.{Vector, Vectors}\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.Dataset\n+\n+/**\n+ * Params for [[MinHash]].\n+ */\n+private[ml] trait MinHashModelParams extends Params {\n+  protected[this] val prime = 2038074743\n+\n+  val numIndex: IntParam = new IntParam(this, \"numIndex\", \"the number of index\","
  }],
  "prId": 15148
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "While not a hard style requirement, most of the codebase prefers this style: \n\n``` scala\n  private[this] lazy val hashFunctions: Seq[Double => Double] = {\n    (0 until $(outputDim)).map { i =>\n      // Perfect Hash function, use 2n buckets to reduce collision.\n      elem: Double => (1 + elem) * randSeq(i).toLong % prime % ($(numIndex) * 2)\n    }\n  }\n```\n",
    "commit": "35708458a0ee156c097ca604efeafaa37d3c8a6d",
    "createdAt": "2016-09-26T13:43:19Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature.lsh\n+\n+import scala.util.Random\n+\n+import org.apache.spark.ml.linalg.{Vector, Vectors}\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.Dataset\n+\n+/**\n+ * Params for [[MinHash]].\n+ */\n+private[ml] trait MinHashModelParams extends Params {\n+  protected[this] val prime = 2038074743\n+\n+  val numIndex: IntParam = new IntParam(this, \"numIndex\", \"the number of index\",\n+    ParamValidators.inRange(0, prime, lowerInclusive = false, upperInclusive = false))\n+}\n+\n+class MinHashModel(override val uid: String, hashFunctions: Seq[Double => Double])\n+  extends LSHModel[Seq[Double], MinHashModel] with MinHashModelParams {\n+\n+  override protected[this] val hashFunction: Seq[Double] => Vector = {\n+    elems: Seq[Double] =>\n+      Vectors.dense(hashFunctions.map(\n+        func => elems.map(func).min\n+      ).toArray)\n+  }\n+\n+  /**\n+   * :: DeveloperApi ::\n+   *\n+   * Calculate the distance between two different keys using the distance metric corresponding\n+   * to the hashFunction\n+   *\n+   * @param x One of the point in the metric space\n+   * @param y Another the point in the metric space\n+   * @return The distance between x and y in double\n+   */\n+  override protected[ml] def keyDistance(x: Seq[Double], y: Seq[Double]): Double = {\n+    val xSet = x.toSet\n+    val ySet = y.toSet\n+    1 - xSet.intersect(ySet).size.toDouble / xSet.union(ySet).size.toDouble\n+  }\n+}\n+\n+/**\n+ * LSH class for Jaccard distance\n+ * @param uid\n+ */\n+class MinHash(override val uid: String) extends LSH[Seq[Double], MinHashModel]\n+  with MinHashModelParams {\n+\n+  private[this] lazy val randSeq: Seq[Int] = {\n+    Seq.fill($(outputDim))(1 + Random.nextInt(prime - 1)).take($(outputDim))\n+  }\n+\n+  private[this] lazy val hashFunctions: Seq[Double => Double] = {"
  }, {
    "author": {
      "login": "Yunni"
    },
    "body": "Done.\n",
    "commit": "35708458a0ee156c097ca604efeafaa37d3c8a6d",
    "createdAt": "2016-09-28T19:41:25Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature.lsh\n+\n+import scala.util.Random\n+\n+import org.apache.spark.ml.linalg.{Vector, Vectors}\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.Dataset\n+\n+/**\n+ * Params for [[MinHash]].\n+ */\n+private[ml] trait MinHashModelParams extends Params {\n+  protected[this] val prime = 2038074743\n+\n+  val numIndex: IntParam = new IntParam(this, \"numIndex\", \"the number of index\",\n+    ParamValidators.inRange(0, prime, lowerInclusive = false, upperInclusive = false))\n+}\n+\n+class MinHashModel(override val uid: String, hashFunctions: Seq[Double => Double])\n+  extends LSHModel[Seq[Double], MinHashModel] with MinHashModelParams {\n+\n+  override protected[this] val hashFunction: Seq[Double] => Vector = {\n+    elems: Seq[Double] =>\n+      Vectors.dense(hashFunctions.map(\n+        func => elems.map(func).min\n+      ).toArray)\n+  }\n+\n+  /**\n+   * :: DeveloperApi ::\n+   *\n+   * Calculate the distance between two different keys using the distance metric corresponding\n+   * to the hashFunction\n+   *\n+   * @param x One of the point in the metric space\n+   * @param y Another the point in the metric space\n+   * @return The distance between x and y in double\n+   */\n+  override protected[ml] def keyDistance(x: Seq[Double], y: Seq[Double]): Double = {\n+    val xSet = x.toSet\n+    val ySet = y.toSet\n+    1 - xSet.intersect(ySet).size.toDouble / xSet.union(ySet).size.toDouble\n+  }\n+}\n+\n+/**\n+ * LSH class for Jaccard distance\n+ * @param uid\n+ */\n+class MinHash(override val uid: String) extends LSH[Seq[Double], MinHashModel]\n+  with MinHashModelParams {\n+\n+  private[this] lazy val randSeq: Seq[Int] = {\n+    Seq.fill($(outputDim))(1 + Random.nextInt(prime - 1)).take($(outputDim))\n+  }\n+\n+  private[this] lazy val hashFunctions: Seq[Double => Double] = {"
  }],
  "prId": 15148
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "I think we'll need `getNumIndex`\n",
    "commit": "35708458a0ee156c097ca604efeafaa37d3c8a6d",
    "createdAt": "2016-09-26T13:44:39Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature.lsh\n+\n+import scala.util.Random\n+\n+import org.apache.spark.ml.linalg.{Vector, Vectors}\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.Dataset\n+\n+/**\n+ * Params for [[MinHash]].\n+ */\n+private[ml] trait MinHashModelParams extends Params {\n+  protected[this] val prime = 2038074743\n+\n+  val numIndex: IntParam = new IntParam(this, \"numIndex\", \"the number of index\","
  }, {
    "author": {
      "login": "Yunni"
    },
    "body": "This Param is removed.\n",
    "commit": "35708458a0ee156c097ca604efeafaa37d3c8a6d",
    "createdAt": "2016-09-28T19:41:22Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature.lsh\n+\n+import scala.util.Random\n+\n+import org.apache.spark.ml.linalg.{Vector, Vectors}\n+import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.sql.Dataset\n+\n+/**\n+ * Params for [[MinHash]].\n+ */\n+private[ml] trait MinHashModelParams extends Params {\n+  protected[this] val prime = 2038074743\n+\n+  val numIndex: IntParam = new IntParam(this, \"numIndex\", \"the number of index\","
  }],
  "prId": 15148
}]