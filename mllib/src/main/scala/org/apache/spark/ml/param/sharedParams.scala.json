[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "I would move it to `LinearRegression` and rename it to `alpha`. This is not a shared param.\n",
    "commit": "a81c201d61d6952e5cb0c3682760b136ac8297ba",
    "createdAt": "2015-02-04T01:22:36Z",
    "diffHunk": "@@ -23,6 +23,27 @@ private[ml] trait HasRegParam extends Params {\n   def getRegParam: Double = get(regParam)\n }\n \n+private[ml] trait HasElasticNetParam extends HasRegParam {\n+  /** param for elastic net regularization parameter */\n+  val alphaParam: DoubleParam = new DoubleParam("
  }, {
    "author": {
      "login": "dbtsai"
    },
    "body": "LOR will have it eventually as well. Do you mean we should `with HasAlpha with HasRegParam` instead of `with HasElasticNetParam`?\n",
    "commit": "a81c201d61d6952e5cb0c3682760b136ac8297ba",
    "createdAt": "2015-02-05T02:16:49Z",
    "diffHunk": "@@ -23,6 +23,27 @@ private[ml] trait HasRegParam extends Params {\n   def getRegParam: Double = get(regParam)\n }\n \n+private[ml] trait HasElasticNetParam extends HasRegParam {\n+  /** param for elastic net regularization parameter */\n+  val alphaParam: DoubleParam = new DoubleParam("
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "I'd vote for not using HasRegParam at all and using elastic net-specific terminology such as l1RegParam, l2RegParam or something else which makes it clear which param applies to which part of the regularization.\n",
    "commit": "a81c201d61d6952e5cb0c3682760b136ac8297ba",
    "createdAt": "2015-02-23T07:10:59Z",
    "diffHunk": "@@ -23,6 +23,27 @@ private[ml] trait HasRegParam extends Params {\n   def getRegParam: Double = get(regParam)\n }\n \n+private[ml] trait HasElasticNetParam extends HasRegParam {\n+  /** param for elastic net regularization parameter */\n+  val alphaParam: DoubleParam = new DoubleParam("
  }],
  "prId": 4259
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "In `spark.ml`, we try to use short names for parameters. This could be called `tol`, as used in sklearn and matlab.\n",
    "commit": "a81c201d61d6952e5cb0c3682760b136ac8297ba",
    "createdAt": "2015-02-04T01:22:37Z",
    "diffHunk": "@@ -23,6 +23,27 @@ private[ml] trait HasRegParam extends Params {\n   def getRegParam: Double = get(regParam)\n }\n \n+private[ml] trait HasElasticNetParam extends HasRegParam {\n+  /** param for elastic net regularization parameter */\n+  val alphaParam: DoubleParam = new DoubleParam(\n+    this, \"alphaParam\", \"the ElasticNet mixing parameter\")\n+  def getAlphaParam: Double = get(alphaParam)\n+}\n+\n+private[ml] trait HasConvergenceTol extends Params {"
  }],
  "prId": 4259
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "If we don't allow turning off intercept for now, shall we remove it in this PR? For the name, it should be okay to call it `intercept` or `withIntercept`. It is a little strange to see `getAddIntercept`and `setAddIntercept`.\n",
    "commit": "a81c201d61d6952e5cb0c3682760b136ac8297ba",
    "createdAt": "2015-02-04T01:22:39Z",
    "diffHunk": "@@ -23,6 +23,27 @@ private[ml] trait HasRegParam extends Params {\n   def getRegParam: Double = get(regParam)\n }\n \n+private[ml] trait HasElasticNetParam extends HasRegParam {\n+  /** param for elastic net regularization parameter */\n+  val alphaParam: DoubleParam = new DoubleParam(\n+    this, \"alphaParam\", \"the ElasticNet mixing parameter\")\n+  def getAlphaParam: Double = get(alphaParam)\n+}\n+\n+private[ml] trait HasConvergenceTol extends Params {\n+  /** param for max number of iterations */\n+  val convergenceTol: DoubleParam = new DoubleParam(\n+    this, \"convergenceTol\", \"the convergence tolerance for iterative algorithms\")\n+  def getConvergenceTol: Double = get(convergenceTol)\n+}\n+\n+private[ml] trait HasIntercept extends Params {"
  }, {
    "author": {
      "login": "dbtsai"
    },
    "body": "I would like to be able to disable intercept in this PR. Should not be too hard.\n",
    "commit": "a81c201d61d6952e5cb0c3682760b136ac8297ba",
    "createdAt": "2015-02-05T02:45:14Z",
    "diffHunk": "@@ -23,6 +23,27 @@ private[ml] trait HasRegParam extends Params {\n   def getRegParam: Double = get(regParam)\n }\n \n+private[ml] trait HasElasticNetParam extends HasRegParam {\n+  /** param for elastic net regularization parameter */\n+  val alphaParam: DoubleParam = new DoubleParam(\n+    this, \"alphaParam\", \"the ElasticNet mixing parameter\")\n+  def getAlphaParam: Double = get(alphaParam)\n+}\n+\n+private[ml] trait HasConvergenceTol extends Params {\n+  /** param for max number of iterations */\n+  val convergenceTol: DoubleParam = new DoubleParam(\n+    this, \"convergenceTol\", \"the convergence tolerance for iterative algorithms\")\n+  def getConvergenceTol: Double = get(convergenceTol)\n+}\n+\n+private[ml] trait HasIntercept extends Params {"
  }],
  "prId": 4259
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Do we want to call this \"alphaParam?\"  That name assumes people have read elastic net papers.  What about something like:\n- \"elasticNetParam\" (very explicit) (I assume this was your original name.)\n- \"regMixing\" (also explicit)\n- \"regAlpha\" (at least will be grouped next to \"regParam\")\n",
    "commit": "a81c201d61d6952e5cb0c3682760b136ac8297ba",
    "createdAt": "2015-03-24T20:43:19Z",
    "diffHunk": "@@ -34,6 +34,43 @@ private[ml] trait HasRegParam extends Params {\n   def getRegParam: Double = get(regParam)\n }\n \n+private[ml] trait HasElasticNetParam extends HasRegParam {"
  }, {
    "author": {
      "login": "dbtsai"
    },
    "body": "I voted for `regAlphaParam: Double` for the variable name, and keep `HasElasticNetParam` as the trait name. What do you think?\n",
    "commit": "a81c201d61d6952e5cb0c3682760b136ac8297ba",
    "createdAt": "2015-03-26T00:47:15Z",
    "diffHunk": "@@ -34,6 +34,43 @@ private[ml] trait HasRegParam extends Params {\n   def getRegParam: Double = get(regParam)\n }\n \n+private[ml] trait HasElasticNetParam extends HasRegParam {"
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "I think the names should definitely match, so we should pick one.  I'm OK with \"elasticNetParam\" or \"regAlpha.\"  (I think \"regAlpha\" doesn't need \"Param\" attached to it since \"alpha\" is the name of the parameter.)  Since \"elastic net\" is more easily recognized than \"alpha,\" I vote for \"elasticNetParam.\"\n",
    "commit": "a81c201d61d6952e5cb0c3682760b136ac8297ba",
    "createdAt": "2015-03-26T17:25:46Z",
    "diffHunk": "@@ -34,6 +34,43 @@ private[ml] trait HasRegParam extends Params {\n   def getRegParam: Double = get(regParam)\n }\n \n+private[ml] trait HasElasticNetParam extends HasRegParam {"
  }, {
    "author": {
      "login": "dbtsai"
    },
    "body": "Sounds great! I'm convinced to do something like\n\n``` scala\nprivate[ml] trait HasElasticNetParam extends HasRegParam {\n  /**\n   * param for elastic net regularization parameter\n   * @group param\n   */\n  val elasticNetParam: DoubleParam =\n    new DoubleParam(this, \"elasticNetParam\", \"the ElasticNet mixing parameter\")\n\n  /** @group getParam */\n  def getElasticNetParam: Double = get(elasticNetParam)\n}\n```\n",
    "commit": "a81c201d61d6952e5cb0c3682760b136ac8297ba",
    "createdAt": "2015-03-26T21:59:58Z",
    "diffHunk": "@@ -34,6 +34,43 @@ private[ml] trait HasRegParam extends Params {\n   def getRegParam: Double = get(regParam)\n }\n \n+private[ml] trait HasElasticNetParam extends HasRegParam {"
  }, {
    "author": {
      "login": "jkbradley"
    },
    "body": "Nice, I like that it extends HasRegParam.  When you update it, can you please make the doc specify more about the parameter (range, plus which end of the range corresponds to L1 vs. L2)?\n",
    "commit": "a81c201d61d6952e5cb0c3682760b136ac8297ba",
    "createdAt": "2015-03-27T21:15:11Z",
    "diffHunk": "@@ -34,6 +34,43 @@ private[ml] trait HasRegParam extends Params {\n   def getRegParam: Double = get(regParam)\n }\n \n+private[ml] trait HasElasticNetParam extends HasRegParam {"
  }, {
    "author": {
      "login": "dbtsai"
    },
    "body": "Definitely. It seems that there is no easy way to specify the valid parameter range or requirement in this framework. Do you think it's a good idea that I add the check like the following?\n\n``` scala\n  def getElasticNetParam: Double = {\n    val elasticNetParam = get(elasticNetParam)\n    require(elasticNetParam >= 0)\n    require(elasticNetParam <= 1)\n    elasticNetParam\n  }\n```\n",
    "commit": "a81c201d61d6952e5cb0c3682760b136ac8297ba",
    "createdAt": "2015-03-27T21:37:21Z",
    "diffHunk": "@@ -34,6 +34,43 @@ private[ml] trait HasRegParam extends Params {\n   def getRegParam: Double = get(regParam)\n }\n \n+private[ml] trait HasElasticNetParam extends HasRegParam {"
  }],
  "prId": 4259
}]