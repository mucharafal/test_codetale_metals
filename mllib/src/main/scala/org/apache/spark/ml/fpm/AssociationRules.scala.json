[{
  "comments": [{
    "author": {
      "login": "zhengruifeng"
    },
    "body": "there should be a `ParamValidators.inRange(...)`",
    "commit": "9940c4716daf47c6678fdd45abba8afa71a3e53a",
    "createdAt": "2017-01-05T05:26:35Z",
    "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.param.{DoubleParam, Param, ParamMap, Params}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.mllib.fpm.{AssociationRules => MLlibAssociationRules}\n+import org.apache.spark.mllib.fpm.FPGrowth.FreqItemset\n+import org.apache.spark.sql.{DataFrame, Dataset, SparkSession}\n+\n+/**\n+ * :: Experimental ::\n+ *\n+ * Generates association rules from frequent itemsets (\"items\", \"freq\"). This method only generates\n+ * association rules which have a single item as the consequent.\n+ */\n+@Since(\"2.1.0\")\n+@Experimental\n+class AssociationRules(override val uid: String) extends Params {\n+\n+  @Since(\"2.1.0\")\n+  def this() = this(Identifiable.randomUID(\"AssociationRules\"))\n+\n+  /**\n+   * Param for items column name. Items must be array of Integers.\n+   * Default: \"items\"\n+   * @group param\n+   */\n+  final val itemsCol: Param[String] = new Param[String](this, \"itemsCol\", \"items column name\")\n+\n+\n+  /** @group getParam */\n+  @Since(\"2.1.0\")\n+  final def getItemsCol: String = $(itemsCol)\n+\n+  /** @group setParam */\n+  @Since(\"2.1.0\")\n+  def setItemsCol(value: String): this.type = set(itemsCol, value)\n+\n+  /**\n+   * Param for frequency column name. Data type should be Long.\n+   * Default: \"freq\"\n+   * @group param\n+   */\n+  final val freqCol: Param[String] = new Param[String](this, \"freqCol\", \"frequency column name\")\n+\n+\n+  /** @group getParam */\n+  @Since(\"2.1.0\")\n+  final def getFreqCol: String = $(freqCol)\n+\n+  /** @group setParam */\n+  @Since(\"2.1.0\")\n+  def setFreqCol(value: String): this.type = set(freqCol, value)\n+\n+  /**\n+   * Param for minimum confidence, range [0.0, 1.0].\n+   * @group param\n+   */\n+  final val minConfidence: DoubleParam = new DoubleParam(this, \"minConfidence\", \"min confidence\")"
  }],
  "prId": 15415
}, {
  "comments": [{
    "author": {
      "login": "zhengruifeng"
    },
    "body": "`Array[String]` confilct with `Array[Int]` in https://github.com/apache/spark/pull/15415/files#diff-0a641720038f962d333ef38402a02207R41\r\nand is there some way to support general types?",
    "commit": "9940c4716daf47c6678fdd45abba8afa71a3e53a",
    "createdAt": "2017-01-05T05:32:13Z",
    "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.param.{DoubleParam, Param, ParamMap, Params}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.mllib.fpm.{AssociationRules => MLlibAssociationRules}\n+import org.apache.spark.mllib.fpm.FPGrowth.FreqItemset\n+import org.apache.spark.sql.{DataFrame, Dataset, SparkSession}\n+\n+/**\n+ * :: Experimental ::\n+ *\n+ * Generates association rules from frequent itemsets (\"items\", \"freq\"). This method only generates\n+ * association rules which have a single item as the consequent.\n+ */\n+@Since(\"2.1.0\")\n+@Experimental\n+class AssociationRules(override val uid: String) extends Params {\n+\n+  @Since(\"2.1.0\")\n+  def this() = this(Identifiable.randomUID(\"AssociationRules\"))\n+\n+  /**\n+   * Param for items column name. Items must be array of Integers.\n+   * Default: \"items\"\n+   * @group param\n+   */\n+  final val itemsCol: Param[String] = new Param[String](this, \"itemsCol\", \"items column name\")\n+\n+\n+  /** @group getParam */\n+  @Since(\"2.1.0\")\n+  final def getItemsCol: String = $(itemsCol)\n+\n+  /** @group setParam */\n+  @Since(\"2.1.0\")\n+  def setItemsCol(value: String): this.type = set(itemsCol, value)\n+\n+  /**\n+   * Param for frequency column name. Data type should be Long.\n+   * Default: \"freq\"\n+   * @group param\n+   */\n+  final val freqCol: Param[String] = new Param[String](this, \"freqCol\", \"frequency column name\")\n+\n+\n+  /** @group getParam */\n+  @Since(\"2.1.0\")\n+  final def getFreqCol: String = $(freqCol)\n+\n+  /** @group setParam */\n+  @Since(\"2.1.0\")\n+  def setFreqCol(value: String): this.type = set(freqCol, value)\n+\n+  /**\n+   * Param for minimum confidence, range [0.0, 1.0].\n+   * @group param\n+   */\n+  final val minConfidence: DoubleParam = new DoubleParam(this, \"minConfidence\", \"min confidence\")\n+\n+  /** @group getParam */\n+  @Since(\"2.1.0\")\n+  final def getMinConfidence: Double = $(minConfidence)\n+\n+  /** @group setParam */\n+  @Since(\"2.1.0\")\n+  def setMinConfidence(value: Double): this.type = set(minConfidence, value)\n+\n+  setDefault(itemsCol -> \"items\", freqCol -> \"freq\", minConfidence -> 0.8)\n+\n+  /**\n+   * Computes the association rules with confidence above [[minConfidence]].\n+   * @param freqItemsets DataFrame containing frequent itemset obtained from algorithms like\n+   *                     [[FPGrowth]]. Users can set itemsCol (frequent itemSet, Array[String])"
  }],
  "prId": 15415
}, {
  "comments": [{
    "author": {
      "login": "zhengruifeng"
    },
    "body": "Since val `sqlContext` is of type `SparkSession`, what about rename it `spark`?",
    "commit": "9940c4716daf47c6678fdd45abba8afa71a3e53a",
    "createdAt": "2017-01-05T05:36:03Z",
    "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.param.{DoubleParam, Param, ParamMap, Params}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.mllib.fpm.{AssociationRules => MLlibAssociationRules}\n+import org.apache.spark.mllib.fpm.FPGrowth.FreqItemset\n+import org.apache.spark.sql.{DataFrame, Dataset, SparkSession}\n+\n+/**\n+ * :: Experimental ::\n+ *\n+ * Generates association rules from frequent itemsets (\"items\", \"freq\"). This method only generates\n+ * association rules which have a single item as the consequent.\n+ */\n+@Since(\"2.1.0\")\n+@Experimental\n+class AssociationRules(override val uid: String) extends Params {\n+\n+  @Since(\"2.1.0\")\n+  def this() = this(Identifiable.randomUID(\"AssociationRules\"))\n+\n+  /**\n+   * Param for items column name. Items must be array of Integers.\n+   * Default: \"items\"\n+   * @group param\n+   */\n+  final val itemsCol: Param[String] = new Param[String](this, \"itemsCol\", \"items column name\")\n+\n+\n+  /** @group getParam */\n+  @Since(\"2.1.0\")\n+  final def getItemsCol: String = $(itemsCol)\n+\n+  /** @group setParam */\n+  @Since(\"2.1.0\")\n+  def setItemsCol(value: String): this.type = set(itemsCol, value)\n+\n+  /**\n+   * Param for frequency column name. Data type should be Long.\n+   * Default: \"freq\"\n+   * @group param\n+   */\n+  final val freqCol: Param[String] = new Param[String](this, \"freqCol\", \"frequency column name\")\n+\n+\n+  /** @group getParam */\n+  @Since(\"2.1.0\")\n+  final def getFreqCol: String = $(freqCol)\n+\n+  /** @group setParam */\n+  @Since(\"2.1.0\")\n+  def setFreqCol(value: String): this.type = set(freqCol, value)\n+\n+  /**\n+   * Param for minimum confidence, range [0.0, 1.0].\n+   * @group param\n+   */\n+  final val minConfidence: DoubleParam = new DoubleParam(this, \"minConfidence\", \"min confidence\")\n+\n+  /** @group getParam */\n+  @Since(\"2.1.0\")\n+  final def getMinConfidence: Double = $(minConfidence)\n+\n+  /** @group setParam */\n+  @Since(\"2.1.0\")\n+  def setMinConfidence(value: Double): this.type = set(minConfidence, value)\n+\n+  setDefault(itemsCol -> \"items\", freqCol -> \"freq\", minConfidence -> 0.8)\n+\n+  /**\n+   * Computes the association rules with confidence above [[minConfidence]].\n+   * @param freqItemsets DataFrame containing frequent itemset obtained from algorithms like\n+   *                     [[FPGrowth]]. Users can set itemsCol (frequent itemSet, Array[String])\n+   *                     and freqCol (appearance count, Long) names in the DataFrame.\n+   * @return a DataFrame(\"antecedent\", \"consequent\", \"confidence\") containing the association\n+    *         rules.\n+   *\n+   */\n+  @Since(\"2.1.0\")\n+  def run(freqItemsets: Dataset[_]): DataFrame = {\n+    val freqItemSetRdd = freqItemsets.select($(itemsCol), $(freqCol)).rdd\n+      .map(row => new FreqItemset(row.getSeq[String](0).toArray, row.getLong(1)))\n+\n+    val sqlContext = SparkSession.builder().getOrCreate()"
  }],
  "prId": 15415
}, {
  "comments": [{
    "author": {
      "login": "zhengruifeng"
    },
    "body": "Since `AssociationRules` transform DataFrame `freqItemsets` to DataFrame `rules`, can it be a subclass of `Transformer`?",
    "commit": "9940c4716daf47c6678fdd45abba8afa71a3e53a",
    "createdAt": "2017-01-05T05:39:43Z",
    "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.param.{DoubleParam, Param, ParamMap, Params}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.mllib.fpm.{AssociationRules => MLlibAssociationRules}\n+import org.apache.spark.mllib.fpm.FPGrowth.FreqItemset\n+import org.apache.spark.sql.{DataFrame, Dataset, SparkSession}\n+\n+/**\n+ * :: Experimental ::\n+ *\n+ * Generates association rules from frequent itemsets (\"items\", \"freq\"). This method only generates\n+ * association rules which have a single item as the consequent.\n+ */\n+@Since(\"2.1.0\")\n+@Experimental\n+class AssociationRules(override val uid: String) extends Params {"
  }, {
    "author": {
      "login": "hhbyyh"
    },
    "body": "`freqItemsets` and `rules` does not have a one-to-one mapping relation and will probably violates the primitives of Transformer. ",
    "commit": "9940c4716daf47c6678fdd45abba8afa71a3e53a",
    "createdAt": "2017-01-19T07:05:25Z",
    "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.param.{DoubleParam, Param, ParamMap, Params}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.mllib.fpm.{AssociationRules => MLlibAssociationRules}\n+import org.apache.spark.mllib.fpm.FPGrowth.FreqItemset\n+import org.apache.spark.sql.{DataFrame, Dataset, SparkSession}\n+\n+/**\n+ * :: Experimental ::\n+ *\n+ * Generates association rules from frequent itemsets (\"items\", \"freq\"). This method only generates\n+ * association rules which have a single item as the consequent.\n+ */\n+@Since(\"2.1.0\")\n+@Experimental\n+class AssociationRules(override val uid: String) extends Params {"
  }],
  "prId": 15415
}, {
  "comments": [{
    "author": {
      "login": "zhengruifeng"
    },
    "body": "If inheriting `Transformer`, here should be `override def transform(dataset: Dataset[_]): DataFrame`",
    "commit": "9940c4716daf47c6678fdd45abba8afa71a3e53a",
    "createdAt": "2017-01-05T05:41:24Z",
    "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.param.{DoubleParam, Param, ParamMap, Params}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.mllib.fpm.{AssociationRules => MLlibAssociationRules}\n+import org.apache.spark.mllib.fpm.FPGrowth.FreqItemset\n+import org.apache.spark.sql.{DataFrame, Dataset, SparkSession}\n+\n+/**\n+ * :: Experimental ::\n+ *\n+ * Generates association rules from frequent itemsets (\"items\", \"freq\"). This method only generates\n+ * association rules which have a single item as the consequent.\n+ */\n+@Since(\"2.1.0\")\n+@Experimental\n+class AssociationRules(override val uid: String) extends Params {\n+\n+  @Since(\"2.1.0\")\n+  def this() = this(Identifiable.randomUID(\"AssociationRules\"))\n+\n+  /**\n+   * Param for items column name. Items must be array of Integers.\n+   * Default: \"items\"\n+   * @group param\n+   */\n+  final val itemsCol: Param[String] = new Param[String](this, \"itemsCol\", \"items column name\")\n+\n+\n+  /** @group getParam */\n+  @Since(\"2.1.0\")\n+  final def getItemsCol: String = $(itemsCol)\n+\n+  /** @group setParam */\n+  @Since(\"2.1.0\")\n+  def setItemsCol(value: String): this.type = set(itemsCol, value)\n+\n+  /**\n+   * Param for frequency column name. Data type should be Long.\n+   * Default: \"freq\"\n+   * @group param\n+   */\n+  final val freqCol: Param[String] = new Param[String](this, \"freqCol\", \"frequency column name\")\n+\n+\n+  /** @group getParam */\n+  @Since(\"2.1.0\")\n+  final def getFreqCol: String = $(freqCol)\n+\n+  /** @group setParam */\n+  @Since(\"2.1.0\")\n+  def setFreqCol(value: String): this.type = set(freqCol, value)\n+\n+  /**\n+   * Param for minimum confidence, range [0.0, 1.0].\n+   * @group param\n+   */\n+  final val minConfidence: DoubleParam = new DoubleParam(this, \"minConfidence\", \"min confidence\")\n+\n+  /** @group getParam */\n+  @Since(\"2.1.0\")\n+  final def getMinConfidence: Double = $(minConfidence)\n+\n+  /** @group setParam */\n+  @Since(\"2.1.0\")\n+  def setMinConfidence(value: Double): this.type = set(minConfidence, value)\n+\n+  setDefault(itemsCol -> \"items\", freqCol -> \"freq\", minConfidence -> 0.8)\n+\n+  /**\n+   * Computes the association rules with confidence above [[minConfidence]].\n+   * @param freqItemsets DataFrame containing frequent itemset obtained from algorithms like\n+   *                     [[FPGrowth]]. Users can set itemsCol (frequent itemSet, Array[String])\n+   *                     and freqCol (appearance count, Long) names in the DataFrame.\n+   * @return a DataFrame(\"antecedent\", \"consequent\", \"confidence\") containing the association\n+    *         rules.\n+   *\n+   */\n+  @Since(\"2.1.0\")\n+  def run(freqItemsets: Dataset[_]): DataFrame = {"
  }],
  "prId": 15415
}, {
  "comments": [{
    "author": {
      "login": "zhengruifeng"
    },
    "body": "should be 2.2.0",
    "commit": "9940c4716daf47c6678fdd45abba8afa71a3e53a",
    "createdAt": "2017-01-05T05:45:18Z",
    "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.param.{DoubleParam, Param, ParamMap, Params}\n+import org.apache.spark.ml.util.Identifiable\n+import org.apache.spark.mllib.fpm.{AssociationRules => MLlibAssociationRules}\n+import org.apache.spark.mllib.fpm.FPGrowth.FreqItemset\n+import org.apache.spark.sql.{DataFrame, Dataset, SparkSession}\n+\n+/**\n+ * :: Experimental ::\n+ *\n+ * Generates association rules from frequent itemsets (\"items\", \"freq\"). This method only generates\n+ * association rules which have a single item as the consequent.\n+ */\n+@Since(\"2.1.0\")"
  }],
  "prId": 15415
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Definitely document the input schema since it is non-standard.  The description here can be short, with more details in the class-level Scala doc.",
    "commit": "9940c4716daf47c6678fdd45abba8afa71a3e53a",
    "createdAt": "2017-02-01T18:21:13Z",
    "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.hadoop.fs.Path\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.{Estimator, Model}\n+import org.apache.spark.ml.param._\n+import org.apache.spark.ml.param.shared.HasPredictionCol\n+import org.apache.spark.ml.util.{DefaultParamsReader, DefaultParamsWriter, _}\n+import org.apache.spark.mllib.fpm.{AssociationRules => MLlibAssociationRules}\n+import org.apache.spark.mllib.fpm.FPGrowth.FreqItemset\n+import org.apache.spark.sql.{DataFrame, Dataset, SparkSession}\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+\n+/**\n+ * Common params for AssociationRules and AssociationRulesModel\n+ */\n+private[fpm] trait AssociationRulesParam extends Params with HasPredictionCol{\n+\n+  /**\n+   * Param for items column name. Items must be array of Strings.\n+   * Default: \"items\"\n+   *\n+   * @group param\n+   */\n+  final val itemsCol: Param[String] = new Param[String](this, \"itemsCol\", \"column name in the\" +\n+    \" DataFrame containing the items\")\n+\n+\n+  /** @group getParam */\n+  @Since(\"2.2.0\")\n+  final def getItemsCol: String = $(itemsCol)\n+  setDefault(itemsCol -> \"items\")\n+}\n+\n+@Since(\"2.2.0\")\n+object AssociationRules extends DefaultParamsReadable[AssociationRules] {\n+\n+  @Since(\"2.2.0\")\n+  override def load(path: String): AssociationRules = super.load(path)\n+}\n+\n+/**\n+ * :: Experimental ::\n+ *\n+ * Generates association rules from frequent itemsets DataFrame(\"items\", \"freq\"). This method only\n+ * generates association rules which have a single item as the consequent.\n+ */\n+@Since(\"2.2.0\")\n+@Experimental\n+class AssociationRules(override val uid: String)\n+  extends Estimator[AssociationRulesModel] with AssociationRulesParam with HasPredictionCol {\n+\n+  @Since(\"2.2.0\")\n+  def this() = this(Identifiable.randomUID(\"AssociationRules\"))\n+\n+  /** @group setParam */\n+  @Since(\"2.2.0\")\n+  def setItemsCol(value: String): this.type = set(itemsCol, value)\n+\n+  /**\n+   * Param for frequency column name. Data type should be Long.\n+   * Default: \"freq\"\n+   *\n+   * @group param\n+   */\n+  final val freqCol: Param[String] = new Param[String](this, \"freqCol\", \"frequency column name\")\n+\n+\n+  /** @group getParam */\n+  @Since(\"2.2.0\")\n+  final def getFreqCol: String = $(freqCol)\n+\n+  /** @group setParam */\n+  @Since(\"2.2.0\")\n+  def setFreqCol(value: String): this.type = set(freqCol, value)\n+  setDefault(freqCol -> \"freq\")\n+\n+  /**\n+   * Param for minimum confidence, range [0.0, 1.0].\n+    *\n+    * @group param\n+   */\n+  final val minConfidence: DoubleParam = new DoubleParam(this, \"minConfidence\", \"min confidence\",\n+    ParamValidators.inRange(0.0, 1.0))\n+\n+  /** @group getParam */\n+  @Since(\"2.2.0\")\n+  final def getMinConfidence: Double = $(minConfidence)\n+\n+  /** @group setParam */\n+  @Since(\"2.2.0\")\n+  def setMinConfidence(value: Double): this.type = set(minConfidence, value)\n+  setDefault(minConfidence -> 0.8)\n+\n+  /**\n+   * Computes the association rules with confidence above [[minConfidence]].\n+   *\n+   * @return a DataFrame(\"antecedent\", \"consequent\", \"confidence\") containing the association\n+   *         rules.\n+   */\n+  @Since(\"2.2.0\")\n+  override def fit(dataset: Dataset[_]): AssociationRulesModel = {"
  }],
  "prId": 15415
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "clarify",
    "commit": "9940c4716daf47c6678fdd45abba8afa71a3e53a",
    "createdAt": "2017-02-01T18:21:35Z",
    "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.hadoop.fs.Path\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.{Estimator, Model}\n+import org.apache.spark.ml.param._\n+import org.apache.spark.ml.param.shared.HasPredictionCol\n+import org.apache.spark.ml.util.{DefaultParamsReader, DefaultParamsWriter, _}\n+import org.apache.spark.mllib.fpm.{AssociationRules => MLlibAssociationRules}\n+import org.apache.spark.mllib.fpm.FPGrowth.FreqItemset\n+import org.apache.spark.sql.{DataFrame, Dataset, SparkSession}\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+\n+/**\n+ * Common params for AssociationRules and AssociationRulesModel\n+ */\n+private[fpm] trait AssociationRulesParam extends Params with HasPredictionCol{\n+\n+  /**\n+   * Param for items column name. Items must be array of Strings.\n+   * Default: \"items\"\n+   *\n+   * @group param\n+   */\n+  final val itemsCol: Param[String] = new Param[String](this, \"itemsCol\", \"column name in the\" +\n+    \" DataFrame containing the items\")\n+\n+\n+  /** @group getParam */\n+  @Since(\"2.2.0\")\n+  final def getItemsCol: String = $(itemsCol)\n+  setDefault(itemsCol -> \"items\")\n+}\n+\n+@Since(\"2.2.0\")\n+object AssociationRules extends DefaultParamsReadable[AssociationRules] {\n+\n+  @Since(\"2.2.0\")\n+  override def load(path: String): AssociationRules = super.load(path)\n+}\n+\n+/**\n+ * :: Experimental ::\n+ *\n+ * Generates association rules from frequent itemsets DataFrame(\"items\", \"freq\"). This method only\n+ * generates association rules which have a single item as the consequent.\n+ */\n+@Since(\"2.2.0\")\n+@Experimental\n+class AssociationRules(override val uid: String)\n+  extends Estimator[AssociationRulesModel] with AssociationRulesParam with HasPredictionCol {\n+\n+  @Since(\"2.2.0\")\n+  def this() = this(Identifiable.randomUID(\"AssociationRules\"))\n+\n+  /** @group setParam */\n+  @Since(\"2.2.0\")\n+  def setItemsCol(value: String): this.type = set(itemsCol, value)\n+\n+  /**\n+   * Param for frequency column name. Data type should be Long.\n+   * Default: \"freq\"\n+   *\n+   * @group param\n+   */\n+  final val freqCol: Param[String] = new Param[String](this, \"freqCol\", \"frequency column name\")\n+\n+\n+  /** @group getParam */\n+  @Since(\"2.2.0\")\n+  final def getFreqCol: String = $(freqCol)\n+\n+  /** @group setParam */\n+  @Since(\"2.2.0\")\n+  def setFreqCol(value: String): this.type = set(freqCol, value)\n+  setDefault(freqCol -> \"freq\")\n+\n+  /**\n+   * Param for minimum confidence, range [0.0, 1.0].\n+    *\n+    * @group param\n+   */\n+  final val minConfidence: DoubleParam = new DoubleParam(this, \"minConfidence\", \"min confidence\",\n+    ParamValidators.inRange(0.0, 1.0))\n+\n+  /** @group getParam */\n+  @Since(\"2.2.0\")\n+  final def getMinConfidence: Double = $(minConfidence)\n+\n+  /** @group setParam */\n+  @Since(\"2.2.0\")\n+  def setMinConfidence(value: Double): this.type = set(minConfidence, value)\n+  setDefault(minConfidence -> 0.8)\n+\n+  /**\n+   * Computes the association rules with confidence above [[minConfidence]].\n+   *\n+   * @return a DataFrame(\"antecedent\", \"consequent\", \"confidence\") containing the association\n+   *         rules.\n+   */\n+  @Since(\"2.2.0\")\n+  override def fit(dataset: Dataset[_]): AssociationRulesModel = {\n+    val freqItemSetRdd = dataset.select($(itemsCol), $(freqCol)).rdd\n+      .map(row => new FreqItemset(row.getSeq[String](0).toArray, row.getLong(1)))\n+\n+    val spark = SparkSession.builder().getOrCreate()\n+    import spark.implicits._\n+    val oldModel = new MLlibAssociationRules()\n+      .setMinConfidence($(minConfidence))\n+      .run(freqItemSetRdd)\n+      .map(r => (r.antecedent, r.consequent, r.confidence))\n+      .toDF(\"antecedent\", \"consequent\", \"confidence\")\n+    copyValues(new AssociationRulesModel(uid, oldModel).setParent(this))\n+  }\n+\n+  @Since(\"2.2.0\")\n+  override def transformSchema(schema: StructType): StructType = {\n+    SchemaUtils.checkColumnType(schema, $(itemsCol), new ArrayType(StringType, false))\n+    SchemaUtils.checkColumnType(schema, $(freqCol), LongType)\n+    SchemaUtils.appendColumn(schema, $(predictionCol), new ArrayType(StringType, false))\n+  }\n+\n+  override def copy(extra: ParamMap): AssociationRules = defaultCopy(extra)\n+\n+}\n+\n+\n+/**\n+ * :: Experimental ::\n+ * Model fitted by AssociationRules.\n+ *\n+ * @param associationRules AssociationRules"
  }],
  "prId": 15415
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "need Since annotation",
    "commit": "9940c4716daf47c6678fdd45abba8afa71a3e53a",
    "createdAt": "2017-02-01T18:21:36Z",
    "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.hadoop.fs.Path\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.{Estimator, Model}\n+import org.apache.spark.ml.param._\n+import org.apache.spark.ml.param.shared.HasPredictionCol\n+import org.apache.spark.ml.util.{DefaultParamsReader, DefaultParamsWriter, _}\n+import org.apache.spark.mllib.fpm.{AssociationRules => MLlibAssociationRules}\n+import org.apache.spark.mllib.fpm.FPGrowth.FreqItemset\n+import org.apache.spark.sql.{DataFrame, Dataset, SparkSession}\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+\n+/**\n+ * Common params for AssociationRules and AssociationRulesModel\n+ */\n+private[fpm] trait AssociationRulesParam extends Params with HasPredictionCol{\n+\n+  /**\n+   * Param for items column name. Items must be array of Strings.\n+   * Default: \"items\"\n+   *\n+   * @group param\n+   */\n+  final val itemsCol: Param[String] = new Param[String](this, \"itemsCol\", \"column name in the\" +\n+    \" DataFrame containing the items\")\n+\n+\n+  /** @group getParam */\n+  @Since(\"2.2.0\")\n+  final def getItemsCol: String = $(itemsCol)\n+  setDefault(itemsCol -> \"items\")\n+}\n+\n+@Since(\"2.2.0\")\n+object AssociationRules extends DefaultParamsReadable[AssociationRules] {\n+\n+  @Since(\"2.2.0\")\n+  override def load(path: String): AssociationRules = super.load(path)\n+}\n+\n+/**\n+ * :: Experimental ::\n+ *\n+ * Generates association rules from frequent itemsets DataFrame(\"items\", \"freq\"). This method only\n+ * generates association rules which have a single item as the consequent.\n+ */\n+@Since(\"2.2.0\")\n+@Experimental\n+class AssociationRules(override val uid: String)\n+  extends Estimator[AssociationRulesModel] with AssociationRulesParam with HasPredictionCol {\n+\n+  @Since(\"2.2.0\")\n+  def this() = this(Identifiable.randomUID(\"AssociationRules\"))\n+\n+  /** @group setParam */\n+  @Since(\"2.2.0\")\n+  def setItemsCol(value: String): this.type = set(itemsCol, value)\n+\n+  /**\n+   * Param for frequency column name. Data type should be Long.\n+   * Default: \"freq\"\n+   *\n+   * @group param\n+   */\n+  final val freqCol: Param[String] = new Param[String](this, \"freqCol\", \"frequency column name\")\n+\n+\n+  /** @group getParam */\n+  @Since(\"2.2.0\")\n+  final def getFreqCol: String = $(freqCol)\n+\n+  /** @group setParam */\n+  @Since(\"2.2.0\")\n+  def setFreqCol(value: String): this.type = set(freqCol, value)\n+  setDefault(freqCol -> \"freq\")\n+\n+  /**\n+   * Param for minimum confidence, range [0.0, 1.0].\n+    *\n+    * @group param\n+   */\n+  final val minConfidence: DoubleParam = new DoubleParam(this, \"minConfidence\", \"min confidence\",\n+    ParamValidators.inRange(0.0, 1.0))\n+\n+  /** @group getParam */\n+  @Since(\"2.2.0\")\n+  final def getMinConfidence: Double = $(minConfidence)\n+\n+  /** @group setParam */\n+  @Since(\"2.2.0\")\n+  def setMinConfidence(value: Double): this.type = set(minConfidence, value)\n+  setDefault(minConfidence -> 0.8)\n+\n+  /**\n+   * Computes the association rules with confidence above [[minConfidence]].\n+   *\n+   * @return a DataFrame(\"antecedent\", \"consequent\", \"confidence\") containing the association\n+   *         rules.\n+   */\n+  @Since(\"2.2.0\")\n+  override def fit(dataset: Dataset[_]): AssociationRulesModel = {\n+    val freqItemSetRdd = dataset.select($(itemsCol), $(freqCol)).rdd\n+      .map(row => new FreqItemset(row.getSeq[String](0).toArray, row.getLong(1)))\n+\n+    val spark = SparkSession.builder().getOrCreate()\n+    import spark.implicits._\n+    val oldModel = new MLlibAssociationRules()\n+      .setMinConfidence($(minConfidence))\n+      .run(freqItemSetRdd)\n+      .map(r => (r.antecedent, r.consequent, r.confidence))\n+      .toDF(\"antecedent\", \"consequent\", \"confidence\")\n+    copyValues(new AssociationRulesModel(uid, oldModel).setParent(this))\n+  }\n+\n+  @Since(\"2.2.0\")\n+  override def transformSchema(schema: StructType): StructType = {\n+    SchemaUtils.checkColumnType(schema, $(itemsCol), new ArrayType(StringType, false))\n+    SchemaUtils.checkColumnType(schema, $(freqCol), LongType)\n+    SchemaUtils.appendColumn(schema, $(predictionCol), new ArrayType(StringType, false))\n+  }\n+\n+  override def copy(extra: ParamMap): AssociationRules = defaultCopy(extra)\n+\n+}\n+\n+\n+/**\n+ * :: Experimental ::\n+ * Model fitted by AssociationRules.\n+ *\n+ * @param associationRules AssociationRules\n+ */\n+@Since(\"2.2.0\")\n+@Experimental\n+class AssociationRulesModel private[ml] (\n+    @Since(\"2.2.0\") override val uid: String,\n+    val associationRules: DataFrame)"
  }],
  "prId": 15415
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "This looks like it will blow up clusters for large models.  Use a join instead of a UDF.",
    "commit": "9940c4716daf47c6678fdd45abba8afa71a3e53a",
    "createdAt": "2017-02-01T18:21:37Z",
    "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.hadoop.fs.Path\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.{Estimator, Model}\n+import org.apache.spark.ml.param._\n+import org.apache.spark.ml.param.shared.HasPredictionCol\n+import org.apache.spark.ml.util.{DefaultParamsReader, DefaultParamsWriter, _}\n+import org.apache.spark.mllib.fpm.{AssociationRules => MLlibAssociationRules}\n+import org.apache.spark.mllib.fpm.FPGrowth.FreqItemset\n+import org.apache.spark.sql.{DataFrame, Dataset, SparkSession}\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+\n+/**\n+ * Common params for AssociationRules and AssociationRulesModel\n+ */\n+private[fpm] trait AssociationRulesParam extends Params with HasPredictionCol{\n+\n+  /**\n+   * Param for items column name. Items must be array of Strings.\n+   * Default: \"items\"\n+   *\n+   * @group param\n+   */\n+  final val itemsCol: Param[String] = new Param[String](this, \"itemsCol\", \"column name in the\" +\n+    \" DataFrame containing the items\")\n+\n+\n+  /** @group getParam */\n+  @Since(\"2.2.0\")\n+  final def getItemsCol: String = $(itemsCol)\n+  setDefault(itemsCol -> \"items\")\n+}\n+\n+@Since(\"2.2.0\")\n+object AssociationRules extends DefaultParamsReadable[AssociationRules] {\n+\n+  @Since(\"2.2.0\")\n+  override def load(path: String): AssociationRules = super.load(path)\n+}\n+\n+/**\n+ * :: Experimental ::\n+ *\n+ * Generates association rules from frequent itemsets DataFrame(\"items\", \"freq\"). This method only\n+ * generates association rules which have a single item as the consequent.\n+ */\n+@Since(\"2.2.0\")\n+@Experimental\n+class AssociationRules(override val uid: String)\n+  extends Estimator[AssociationRulesModel] with AssociationRulesParam with HasPredictionCol {\n+\n+  @Since(\"2.2.0\")\n+  def this() = this(Identifiable.randomUID(\"AssociationRules\"))\n+\n+  /** @group setParam */\n+  @Since(\"2.2.0\")\n+  def setItemsCol(value: String): this.type = set(itemsCol, value)\n+\n+  /**\n+   * Param for frequency column name. Data type should be Long.\n+   * Default: \"freq\"\n+   *\n+   * @group param\n+   */\n+  final val freqCol: Param[String] = new Param[String](this, \"freqCol\", \"frequency column name\")\n+\n+\n+  /** @group getParam */\n+  @Since(\"2.2.0\")\n+  final def getFreqCol: String = $(freqCol)\n+\n+  /** @group setParam */\n+  @Since(\"2.2.0\")\n+  def setFreqCol(value: String): this.type = set(freqCol, value)\n+  setDefault(freqCol -> \"freq\")\n+\n+  /**\n+   * Param for minimum confidence, range [0.0, 1.0].\n+    *\n+    * @group param\n+   */\n+  final val minConfidence: DoubleParam = new DoubleParam(this, \"minConfidence\", \"min confidence\",\n+    ParamValidators.inRange(0.0, 1.0))\n+\n+  /** @group getParam */\n+  @Since(\"2.2.0\")\n+  final def getMinConfidence: Double = $(minConfidence)\n+\n+  /** @group setParam */\n+  @Since(\"2.2.0\")\n+  def setMinConfidence(value: Double): this.type = set(minConfidence, value)\n+  setDefault(minConfidence -> 0.8)\n+\n+  /**\n+   * Computes the association rules with confidence above [[minConfidence]].\n+   *\n+   * @return a DataFrame(\"antecedent\", \"consequent\", \"confidence\") containing the association\n+   *         rules.\n+   */\n+  @Since(\"2.2.0\")\n+  override def fit(dataset: Dataset[_]): AssociationRulesModel = {\n+    val freqItemSetRdd = dataset.select($(itemsCol), $(freqCol)).rdd\n+      .map(row => new FreqItemset(row.getSeq[String](0).toArray, row.getLong(1)))\n+\n+    val spark = SparkSession.builder().getOrCreate()\n+    import spark.implicits._\n+    val oldModel = new MLlibAssociationRules()\n+      .setMinConfidence($(minConfidence))\n+      .run(freqItemSetRdd)\n+      .map(r => (r.antecedent, r.consequent, r.confidence))\n+      .toDF(\"antecedent\", \"consequent\", \"confidence\")\n+    copyValues(new AssociationRulesModel(uid, oldModel).setParent(this))\n+  }\n+\n+  @Since(\"2.2.0\")\n+  override def transformSchema(schema: StructType): StructType = {\n+    SchemaUtils.checkColumnType(schema, $(itemsCol), new ArrayType(StringType, false))\n+    SchemaUtils.checkColumnType(schema, $(freqCol), LongType)\n+    SchemaUtils.appendColumn(schema, $(predictionCol), new ArrayType(StringType, false))\n+  }\n+\n+  override def copy(extra: ParamMap): AssociationRules = defaultCopy(extra)\n+\n+}\n+\n+\n+/**\n+ * :: Experimental ::\n+ * Model fitted by AssociationRules.\n+ *\n+ * @param associationRules AssociationRules\n+ */\n+@Since(\"2.2.0\")\n+@Experimental\n+class AssociationRulesModel private[ml] (\n+    @Since(\"2.2.0\") override val uid: String,\n+    val associationRules: DataFrame)\n+  extends Model[AssociationRulesModel] with AssociationRulesParam with MLWritable {\n+\n+  /** @group setParam */\n+  @Since(\"2.2.0\")\n+  def setItemsCol(value: String): this.type = set(itemsCol, value)\n+\n+  /** @group setParam */\n+  @Since(\"2.2.0\")\n+  def setPredictionCol(value: String): this.type = set(predictionCol, value)\n+\n+  @Since(\"2.2.0\")\n+  override def transform(dataset: Dataset[_]): DataFrame = {\n+    val rules = associationRules.rdd.map(r =>\n+      (r.getSeq[String](0), r.getSeq[String](1))\n+    ).collect()"
  }],
  "prId": 15415
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "returns a model, not DataFrame",
    "commit": "9940c4716daf47c6678fdd45abba8afa71a3e53a",
    "createdAt": "2017-02-01T18:21:59Z",
    "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.fpm\n+\n+import org.apache.hadoop.fs.Path\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+import org.apache.spark.ml.{Estimator, Model}\n+import org.apache.spark.ml.param._\n+import org.apache.spark.ml.param.shared.HasPredictionCol\n+import org.apache.spark.ml.util.{DefaultParamsReader, DefaultParamsWriter, _}\n+import org.apache.spark.mllib.fpm.{AssociationRules => MLlibAssociationRules}\n+import org.apache.spark.mllib.fpm.FPGrowth.FreqItemset\n+import org.apache.spark.sql.{DataFrame, Dataset, SparkSession}\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types._\n+\n+\n+/**\n+ * Common params for AssociationRules and AssociationRulesModel\n+ */\n+private[fpm] trait AssociationRulesParam extends Params with HasPredictionCol{\n+\n+  /**\n+   * Param for items column name. Items must be array of Strings.\n+   * Default: \"items\"\n+   *\n+   * @group param\n+   */\n+  final val itemsCol: Param[String] = new Param[String](this, \"itemsCol\", \"column name in the\" +\n+    \" DataFrame containing the items\")\n+\n+\n+  /** @group getParam */\n+  @Since(\"2.2.0\")\n+  final def getItemsCol: String = $(itemsCol)\n+  setDefault(itemsCol -> \"items\")\n+}\n+\n+@Since(\"2.2.0\")\n+object AssociationRules extends DefaultParamsReadable[AssociationRules] {\n+\n+  @Since(\"2.2.0\")\n+  override def load(path: String): AssociationRules = super.load(path)\n+}\n+\n+/**\n+ * :: Experimental ::\n+ *\n+ * Generates association rules from frequent itemsets DataFrame(\"items\", \"freq\"). This method only\n+ * generates association rules which have a single item as the consequent.\n+ */\n+@Since(\"2.2.0\")\n+@Experimental\n+class AssociationRules(override val uid: String)\n+  extends Estimator[AssociationRulesModel] with AssociationRulesParam with HasPredictionCol {\n+\n+  @Since(\"2.2.0\")\n+  def this() = this(Identifiable.randomUID(\"AssociationRules\"))\n+\n+  /** @group setParam */\n+  @Since(\"2.2.0\")\n+  def setItemsCol(value: String): this.type = set(itemsCol, value)\n+\n+  /**\n+   * Param for frequency column name. Data type should be Long.\n+   * Default: \"freq\"\n+   *\n+   * @group param\n+   */\n+  final val freqCol: Param[String] = new Param[String](this, \"freqCol\", \"frequency column name\")\n+\n+\n+  /** @group getParam */\n+  @Since(\"2.2.0\")\n+  final def getFreqCol: String = $(freqCol)\n+\n+  /** @group setParam */\n+  @Since(\"2.2.0\")\n+  def setFreqCol(value: String): this.type = set(freqCol, value)\n+  setDefault(freqCol -> \"freq\")\n+\n+  /**\n+   * Param for minimum confidence, range [0.0, 1.0].\n+    *\n+    * @group param\n+   */\n+  final val minConfidence: DoubleParam = new DoubleParam(this, \"minConfidence\", \"min confidence\",\n+    ParamValidators.inRange(0.0, 1.0))\n+\n+  /** @group getParam */\n+  @Since(\"2.2.0\")\n+  final def getMinConfidence: Double = $(minConfidence)\n+\n+  /** @group setParam */\n+  @Since(\"2.2.0\")\n+  def setMinConfidence(value: Double): this.type = set(minConfidence, value)\n+  setDefault(minConfidence -> 0.8)\n+\n+  /**\n+   * Computes the association rules with confidence above [[minConfidence]].\n+   *\n+   * @return a DataFrame(\"antecedent\", \"consequent\", \"confidence\") containing the association"
  }],
  "prId": 15415
}]