[{
  "comments": [{
    "author": {
      "login": "smurching"
    },
    "body": "TODO: replace this with an in-place matrix transpose for memory efficiency.",
    "commit": "d86dd18e47451c2e4463c68db441f92a898ac765",
    "createdAt": "2017-10-09T07:40:13Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.tree.impl\n+\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * Utility methods specific to local decision tree training.\n+ */\n+private[ml] object LocalDecisionTreeUtils extends Logging {\n+\n+  /**\n+   * Convert a dataset of binned feature values from row storage to column storage.\n+   * Stores data as [[org.apache.spark.ml.linalg.DenseVector]].\n+   *\n+   *\n+   * @param rowStore  An array of input data rows, each represented as an\n+   *                  int array of binned feature values\n+   * @return Transpose of rowStore as an array of columns consisting of binned feature values.\n+   *\n+   * TODO: Add implementation for sparse data.\n+   *       For sparse data, distribute more evenly based on number of non-zeros.\n+   *       (First collect stats to decide how to partition.)\n+   */\n+  private[impl] def rowToColumnStoreDense(rowStore: Array[Array[Int]]): Array[Array[Int]] = {\n+    // Compute the number of rows in the data\n+    val numRows = {\n+      val longNumRows: Long = rowStore.length\n+      require(longNumRows < Int.MaxValue, s\"rowToColumnStore given RDD with $longNumRows rows,\" +\n+        s\" but can handle at most ${Int.MaxValue} rows\")\n+      longNumRows.toInt\n+    }\n+\n+    // Check that the input dataset isn't empty (0 rows) or featureless (rows with 0 features)\n+    require(numRows > 0, \"Local decision tree training requires numRows > 0.\")\n+    val numFeatures = rowStore(0).length\n+    require(numFeatures > 0, \"Local decision tree training requires numFeatures > 0.\")\n+    // Return the transpose of the rowStore matrix\n+    0.until(numFeatures).map { colIdx =>"
  }],
  "prId": 19433
}]