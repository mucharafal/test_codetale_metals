[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Is this wrapper needed? Can't we directly call `findFrequentSequentialPatterns`on `PrefixSpan` object?",
    "commit": "0bab5aca283bacdfe36ba1c669521df9d7ff81f3",
    "createdAt": "2018-07-17T20:16:49Z",
    "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.spark.ml.fpm.PrefixSpan\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class PrefixSpanWrapper private (val prefixSpan: PrefixSpan) {"
  }, {
    "author": {
      "login": "huaxingao"
    },
    "body": "You are right. I will remove \r\n```\r\nprivate[r] class PrefixSpanWrapper private (val prefixSpan: PrefixSpan) {\r\n  def findFrequentSequentialPatterns(dataset: Dataset[_]): DataFrame = {\r\n    prefixSpan.findFrequentSequentialPatterns(dataset)\r\n  }\r\n}\r\n```",
    "commit": "0bab5aca283bacdfe36ba1c669521df9d7ff81f3",
    "createdAt": "2018-07-18T01:39:28Z",
    "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.spark.ml.fpm.PrefixSpan\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class PrefixSpanWrapper private (val prefixSpan: PrefixSpan) {"
  }],
  "prId": 21710
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Why `maxLocalProjDBSize` is `Double`, I see you do `toLong` later?",
    "commit": "0bab5aca283bacdfe36ba1c669521df9d7ff81f3",
    "createdAt": "2018-07-18T18:38:32Z",
    "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.spark.ml.fpm.PrefixSpan\n+\n+private[r] object PrefixSpanWrapper {\n+  def getPrefixSpan(\n+      minSupport: Double,\n+      maxPatternLength: Int,\n+      maxLocalProjDBSize: Double,",
    "line": 26
  }, {
    "author": {
      "login": "huaxingao"
    },
    "body": "```maxLocalProjDBSize``` is a ```LongParam``` in scala, but it seems that r doesn't have ```long```. \r\nSee ```help(integer):```\r\n```\r\n Note that on almost all implementations of R the range of\r\n representable integers is restricted to about +/-2*10^9: ‘double’s\r\n can hold much larger integers exactly.\r\n```\r\nso I used ```double``` in r, and do ```toLong``` later",
    "commit": "0bab5aca283bacdfe36ba1c669521df9d7ff81f3",
    "createdAt": "2018-07-18T20:54:21Z",
    "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.spark.ml.fpm.PrefixSpan\n+\n+private[r] object PrefixSpanWrapper {\n+  def getPrefixSpan(\n+      minSupport: Double,\n+      maxPatternLength: Int,\n+      maxLocalProjDBSize: Double,",
    "line": 26
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "Ah, I see. Thanks.",
    "commit": "0bab5aca283bacdfe36ba1c669521df9d7ff81f3",
    "createdAt": "2018-07-18T21:37:50Z",
    "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.spark.ml.fpm.PrefixSpan\n+\n+private[r] object PrefixSpanWrapper {\n+  def getPrefixSpan(\n+      minSupport: Double,\n+      maxPatternLength: Int,\n+      maxLocalProjDBSize: Double,",
    "line": 26
  }, {
    "author": {
      "login": "felixcheung"
    },
    "body": "no native 64 bit int support in R. double is ok ",
    "commit": "0bab5aca283bacdfe36ba1c669521df9d7ff81f3",
    "createdAt": "2018-10-09T06:24:10Z",
    "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.spark.ml.fpm.PrefixSpan\n+\n+private[r] object PrefixSpanWrapper {\n+  def getPrefixSpan(\n+      minSupport: Double,\n+      maxPatternLength: Int,\n+      maxLocalProjDBSize: Double,",
    "line": 26
  }],
  "prId": 21710
}]