[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Is it the same as `ratingCol`? Then why do we need the `r` prefix? cc: @yanboliang \n",
    "commit": "a653256bbc799d8485288439ce27d13fd85e7c5b",
    "createdAt": "2016-08-17T18:23:29Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s._\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.recommendation.{ALS, ALSModel}\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class ALSWrapper private (\n+    val alsm: ALSModel,\n+    val rRatingCol: String,"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Btw, can we get those metadata from the model object?\n",
    "commit": "a653256bbc799d8485288439ce27d13fd85e7c5b",
    "createdAt": "2016-08-17T18:25:33Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s._\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.recommendation.{ALS, ALSModel}\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class ALSWrapper private (\n+    val alsm: ALSModel,\n+    val rRatingCol: String,"
  }, {
    "author": {
      "login": "junyangq"
    },
    "body": "I followed the naming in `GeneralizedLinearRegressionWrapper`. It seems that we don't actually that.\n",
    "commit": "a653256bbc799d8485288439ce27d13fd85e7c5b",
    "createdAt": "2016-08-18T09:05:45Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s._\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.recommendation.{ALS, ALSModel}\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class ALSWrapper private (\n+    val alsm: ALSModel,\n+    val rRatingCol: String,"
  }],
  "prId": 14384
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`alsModel`\n",
    "commit": "a653256bbc799d8485288439ce27d13fd85e7c5b",
    "createdAt": "2016-08-17T18:25:10Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s._\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.recommendation.{ALS, ALSModel}\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class ALSWrapper private (\n+    val alsm: ALSModel,"
  }, {
    "author": {
      "login": "junyangq"
    },
    "body": "Done. Thanks!\n",
    "commit": "a653256bbc799d8485288439ce27d13fd85e7c5b",
    "createdAt": "2016-08-18T00:44:39Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s._\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.recommendation.{ALS, ALSModel}\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class ALSWrapper private (\n+    val alsm: ALSModel,"
  }],
  "prId": 14384
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Chop down the arguments and use 4-space indentation.\n",
    "commit": "a653256bbc799d8485288439ce27d13fd85e7c5b",
    "createdAt": "2016-08-17T18:26:11Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s._\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.recommendation.{ALS, ALSModel}\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class ALSWrapper private (\n+    val alsm: ALSModel,\n+    val rRatingCol: String,\n+    val rUserCol: String,\n+    val rItemCol: String,\n+    val rRegParam: Double,\n+    val rMaxIter: Int) extends MLWritable {\n+\n+  lazy val rUserFactors: DataFrame = alsm.userFactors\n+\n+  lazy val rItemFactors: DataFrame = alsm.itemFactors\n+\n+  lazy val rRank: Int = alsm.rank\n+\n+  def transform(dataset: Dataset[_]): DataFrame = {\n+    alsm.transform(dataset)\n+  }\n+\n+  override def write: MLWriter = new ALSWrapper.ALSWrapperWriter(this)\n+}\n+\n+private[r] object ALSWrapper extends MLReadable[ALSWrapper] {\n+\n+  def fit(data: DataFrame, features: Array[String], rank: Int, regParam: Double, maxIter: Int,"
  }],
  "prId": 14384
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Why not using explicit params? If this is to avoid style check, you can turn it off: https://github.com/apache/spark/blob/master/mllib/src/main/scala/org/apache/spark/ml/recommendation/ALS.scala#L666.\n",
    "commit": "a653256bbc799d8485288439ce27d13fd85e7c5b",
    "createdAt": "2016-08-17T18:27:26Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s._\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.recommendation.{ALS, ALSModel}\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class ALSWrapper private (\n+    val alsm: ALSModel,\n+    val rRatingCol: String,\n+    val rUserCol: String,\n+    val rItemCol: String,\n+    val rRegParam: Double,\n+    val rMaxIter: Int) extends MLWritable {\n+\n+  lazy val rUserFactors: DataFrame = alsm.userFactors\n+\n+  lazy val rItemFactors: DataFrame = alsm.itemFactors\n+\n+  lazy val rRank: Int = alsm.rank\n+\n+  def transform(dataset: Dataset[_]): DataFrame = {\n+    alsm.transform(dataset)\n+  }\n+\n+  override def write: MLWriter = new ALSWrapper.ALSWrapperWriter(this)\n+}\n+\n+private[r] object ALSWrapper extends MLReadable[ALSWrapper] {\n+\n+  def fit(data: DataFrame, features: Array[String], rank: Int, regParam: Double, maxIter: Int,\n+          implicitPrefs: Boolean, alpha: Double, nonnegative: Boolean,\n+          distParams: Array[Int]): ALSWrapper = {"
  }, {
    "author": {
      "login": "junyangq"
    },
    "body": "Yeah, it was intended to avoid style check. It's been corrected now.\n",
    "commit": "a653256bbc799d8485288439ce27d13fd85e7c5b",
    "createdAt": "2016-08-18T09:06:48Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s._\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.recommendation.{ALS, ALSModel}\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private[r] class ALSWrapper private (\n+    val alsm: ALSModel,\n+    val rRatingCol: String,\n+    val rUserCol: String,\n+    val rItemCol: String,\n+    val rRegParam: Double,\n+    val rMaxIter: Int) extends MLWritable {\n+\n+  lazy val rUserFactors: DataFrame = alsm.userFactors\n+\n+  lazy val rItemFactors: DataFrame = alsm.itemFactors\n+\n+  lazy val rRank: Int = alsm.rank\n+\n+  def transform(dataset: Dataset[_]): DataFrame = {\n+    alsm.transform(dataset)\n+  }\n+\n+  override def write: MLWriter = new ALSWrapper.ALSWrapperWriter(this)\n+}\n+\n+private[r] object ALSWrapper extends MLReadable[ALSWrapper] {\n+\n+  def fit(data: DataFrame, features: Array[String], rank: Int, regParam: Double, maxIter: Int,\n+          implicitPrefs: Boolean, alpha: Double, nonnegative: Boolean,\n+          distParams: Array[Int]): ALSWrapper = {"
  }],
  "prId": 14384
}]