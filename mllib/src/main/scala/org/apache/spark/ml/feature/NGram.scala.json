[{
  "comments": [{
    "author": {
      "login": "mpetruska"
    },
    "body": "Note to self: please fill this in.",
    "commit": "43534b2d5daa8cfdbd9aefcad00956851de040b3",
    "createdAt": "2017-11-04T13:32:30Z",
    "diffHunk": "@@ -42,11 +42,22 @@ class NGram @Since(\"1.5.0\") (@Since(\"1.5.0\") override val uid: String)\n \n   /**\n    * Minimum n-gram length, greater than or equal to 1.\n+   * All values of m such that n <= m <= maxN will be used.\n    * Default: 2, bigram features\n    * @group param\n    */\n   @Since(\"1.5.0\")\n-  val n: IntParam = new IntParam(this, \"n\", \"number elements per n-gram (>=1)\",\n+  val n: IntParam = new IntParam(this, \"n\", \"minimum number of elements per n-gram (>=1)\",\n+    ParamValidators.gtEq(1))\n+\n+  /**\n+   * Maximum n-gram length, greater than or equal to `n`.\n+   * All values of m such that n <= m <= maxN will be used.\n+   * Default: 2, bigram features\n+   * @group param\n+   */\n+  @Since(\"From which version?\")"
  }],
  "prId": 19659
}, {
  "comments": [{
    "author": {
      "login": "mpetruska"
    },
    "body": "Note to self: please fill this in.",
    "commit": "43534b2d5daa8cfdbd9aefcad00956851de040b3",
    "createdAt": "2017-11-04T13:32:35Z",
    "diffHunk": "@@ -57,10 +68,22 @@ class NGram @Since(\"1.5.0\") (@Since(\"1.5.0\") override val uid: String)\n   @Since(\"1.5.0\")\n   def getN: Int = $(n)\n \n+  /** @group setParam */\n+  @Since(\"From which version?\")"
  }],
  "prId": 19659
}, {
  "comments": [{
    "author": {
      "login": "mpetruska"
    },
    "body": "Note to self: please fill this in.",
    "commit": "43534b2d5daa8cfdbd9aefcad00956851de040b3",
    "createdAt": "2017-11-04T13:32:41Z",
    "diffHunk": "@@ -57,10 +68,22 @@ class NGram @Since(\"1.5.0\") (@Since(\"1.5.0\") override val uid: String)\n   @Since(\"1.5.0\")\n   def getN: Int = $(n)\n \n+  /** @group setParam */\n+  @Since(\"From which version?\")\n+  def setMaxN(value: Int): this.type = set(maxN, value)\n+\n+  /** @group getParam */\n+  @Since(\"From which version?\")"
  }],
  "prId": 19659
}, {
  "comments": [{
    "author": {
      "login": "holdenk"
    },
    "body": "Should this have a default value? Also perhaps the explanation that if unset maxN = n ",
    "commit": "43534b2d5daa8cfdbd9aefcad00956851de040b3",
    "createdAt": "2017-11-07T19:32:51Z",
    "diffHunk": "@@ -42,11 +42,22 @@ class NGram @Since(\"1.5.0\") (@Since(\"1.5.0\") override val uid: String)\n \n   /**\n    * Minimum n-gram length, greater than or equal to 1.\n+   * All values of m such that n <= m <= maxN will be used.\n    * Default: 2, bigram features\n    * @group param\n    */\n   @Since(\"1.5.0\")\n-  val n: IntParam = new IntParam(this, \"n\", \"number elements per n-gram (>=1)\",\n+  val n: IntParam = new IntParam(this, \"n\", \"minimum number of elements per n-gram (>=1)\",\n+    ParamValidators.gtEq(1))\n+\n+  /**\n+   * Maximum n-gram length, greater than or equal to `n`.\n+   * All values of m such that n <= m <= maxN will be used.\n+   * Default: 2, bigram features\n+   * @group param\n+   */\n+  @Since(\"From which version?\")\n+  val maxN: IntParam = new IntParam(this, \"maxN\", \"maximum number elements per n-gram (>=n)\","
  }, {
    "author": {
      "login": "mpetruska"
    },
    "body": "Added explanation in the scaladoc comment for the case when `maxN` is not set.\r\nThe default is set to 2 here: https://github.com/apache/spark/pull/19659/files#diff-1382b3c686a15fe145d84a40a504ecc3R85",
    "commit": "43534b2d5daa8cfdbd9aefcad00956851de040b3",
    "createdAt": "2017-11-08T14:52:30Z",
    "diffHunk": "@@ -42,11 +42,22 @@ class NGram @Since(\"1.5.0\") (@Since(\"1.5.0\") override val uid: String)\n \n   /**\n    * Minimum n-gram length, greater than or equal to 1.\n+   * All values of m such that n <= m <= maxN will be used.\n    * Default: 2, bigram features\n    * @group param\n    */\n   @Since(\"1.5.0\")\n-  val n: IntParam = new IntParam(this, \"n\", \"number elements per n-gram (>=1)\",\n+  val n: IntParam = new IntParam(this, \"n\", \"minimum number of elements per n-gram (>=1)\",\n+    ParamValidators.gtEq(1))\n+\n+  /**\n+   * Maximum n-gram length, greater than or equal to `n`.\n+   * All values of m such that n <= m <= maxN will be used.\n+   * Default: 2, bigram features\n+   * @group param\n+   */\n+  @Since(\"From which version?\")\n+  val maxN: IntParam = new IntParam(this, \"maxN\", \"maximum number elements per n-gram (>=n)\","
  }],
  "prId": 19659
}]