[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "missing colons:\n\n```\n * :: AlphaComponent ::\n```\n",
    "commit": "fac12ad29b6a640b6567e66e57a8176deb621dc8",
    "createdAt": "2015-05-07T00:29:59Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.annotation.AlphaComponent\n+import org.apache.spark.ml.UnaryTransformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.mllib.feature\n+import org.apache.spark.mllib.linalg.{Vector, VectorUDT}\n+import org.apache.spark.sql.types.DataType\n+\n+/**\n+ * :: AlphaComponent"
  }],
  "prId": 4580
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Could this please be made more explicit, as in the programming guide?\n\n```\nOutputs the Hadamard product (i.e., the element-wise product) of each input vector with a provided \"weight\" vector.  In other words, it scales each column of the dataset by a scalar multiplier.\n```\n",
    "commit": "fac12ad29b6a640b6567e66e57a8176deb621dc8",
    "createdAt": "2015-05-07T00:30:00Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.annotation.AlphaComponent\n+import org.apache.spark.ml.UnaryTransformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.mllib.feature\n+import org.apache.spark.mllib.linalg.{Vector, VectorUDT}\n+import org.apache.spark.sql.types.DataType\n+\n+/**\n+ * :: AlphaComponent\n+ * Maps a vector to the hadamard product of it and a reference vector."
  }],
  "prId": 4580
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Add tag: `@group param`\n",
    "commit": "fac12ad29b6a640b6567e66e57a8176deb621dc8",
    "createdAt": "2015-05-07T00:30:01Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.annotation.AlphaComponent\n+import org.apache.spark.ml.UnaryTransformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.mllib.feature\n+import org.apache.spark.mllib.linalg.{Vector, VectorUDT}\n+import org.apache.spark.sql.types.DataType\n+\n+/**\n+ * :: AlphaComponent\n+ * Maps a vector to the hadamard product of it and a reference vector.\n+ */\n+@AlphaComponent\n+class ElementwiseProduct extends UnaryTransformer[Vector, Vector, ElementwiseProduct] {\n+\n+  /** the vector to multiply with input vectors */"
  }],
  "prId": 4580
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Scala style: remove extra space before colon:\n`scalingVec: Param`\n",
    "commit": "fac12ad29b6a640b6567e66e57a8176deb621dc8",
    "createdAt": "2015-05-07T00:30:02Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.annotation.AlphaComponent\n+import org.apache.spark.ml.UnaryTransformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.mllib.feature\n+import org.apache.spark.mllib.linalg.{Vector, VectorUDT}\n+import org.apache.spark.sql.types.DataType\n+\n+/**\n+ * :: AlphaComponent\n+ * Maps a vector to the hadamard product of it and a reference vector.\n+ */\n+@AlphaComponent\n+class ElementwiseProduct extends UnaryTransformer[Vector, Vector, ElementwiseProduct] {\n+\n+  /** the vector to multiply with input vectors */\n+  val scalingVec : Param[Vector] = new Param(this, \"scalingVector\", \"vector for hadamard product\")"
  }],
  "prId": 4580
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Add tag: `@group setParam`\n",
    "commit": "fac12ad29b6a640b6567e66e57a8176deb621dc8",
    "createdAt": "2015-05-07T00:30:03Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.annotation.AlphaComponent\n+import org.apache.spark.ml.UnaryTransformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.mllib.feature\n+import org.apache.spark.mllib.linalg.{Vector, VectorUDT}\n+import org.apache.spark.sql.types.DataType\n+\n+/**\n+ * :: AlphaComponent\n+ * Maps a vector to the hadamard product of it and a reference vector.\n+ */\n+@AlphaComponent\n+class ElementwiseProduct extends UnaryTransformer[Vector, Vector, ElementwiseProduct] {\n+\n+  /** the vector to multiply with input vectors */\n+  val scalingVec : Param[Vector] = new Param(this, \"scalingVector\", \"vector for hadamard product\")\n+  def setScalingVec(value: Vector): this.type = set(scalingVec, value)"
  }],
  "prId": 4580
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Add tag: `@group getParam`\n",
    "commit": "fac12ad29b6a640b6567e66e57a8176deb621dc8",
    "createdAt": "2015-05-07T00:30:05Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.annotation.AlphaComponent\n+import org.apache.spark.ml.UnaryTransformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.mllib.feature\n+import org.apache.spark.mllib.linalg.{Vector, VectorUDT}\n+import org.apache.spark.sql.types.DataType\n+\n+/**\n+ * :: AlphaComponent\n+ * Maps a vector to the hadamard product of it and a reference vector.\n+ */\n+@AlphaComponent\n+class ElementwiseProduct extends UnaryTransformer[Vector, Vector, ElementwiseProduct] {\n+\n+  /** the vector to multiply with input vectors */\n+  val scalingVec : Param[Vector] = new Param(this, \"scalingVector\", \"vector for hadamard product\")\n+  def setScalingVec(value: Vector): this.type = set(scalingVec, value)\n+  def getScalingVec: Vector = getOrDefault(scalingVec)"
  }],
  "prId": 4580
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Please check if scalingVec has been set, and print an error message if not.\n",
    "commit": "fac12ad29b6a640b6567e66e57a8176deb621dc8",
    "createdAt": "2015-05-07T00:30:06Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.feature\n+\n+import org.apache.spark.annotation.AlphaComponent\n+import org.apache.spark.ml.UnaryTransformer\n+import org.apache.spark.ml.param.{Param, ParamMap}\n+import org.apache.spark.mllib.feature\n+import org.apache.spark.mllib.linalg.{Vector, VectorUDT}\n+import org.apache.spark.sql.types.DataType\n+\n+/**\n+ * :: AlphaComponent\n+ * Maps a vector to the hadamard product of it and a reference vector.\n+ */\n+@AlphaComponent\n+class ElementwiseProduct extends UnaryTransformer[Vector, Vector, ElementwiseProduct] {\n+\n+  /** the vector to multiply with input vectors */\n+  val scalingVec : Param[Vector] = new Param(this, \"scalingVector\", \"vector for hadamard product\")\n+  def setScalingVec(value: Vector): this.type = set(scalingVec, value)\n+  def getScalingVec: Vector = getOrDefault(scalingVec)\n+\n+  override protected def createTransformFunc(paramMap: ParamMap): Vector => Vector = {\n+    val elemScaler = new feature.ElementwiseProduct(paramMap(scalingVec))"
  }],
  "prId": 4580
}]