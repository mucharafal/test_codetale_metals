[{
  "comments": [{
    "author": {
      "login": "yanboliang"
    },
    "body": "Since `IsotonicRegression` is a regression model, so it's unnecessary to extract labels from column metadata (actually we did not save `NominalAtrribute` for regression model). Thanks!\n",
    "commit": "4400e2f4374712c9cd7f0d8322c7447bf99d4b29",
    "createdAt": "2016-07-27T03:42:52Z",
    "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s._\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.{Pipeline, PipelineModel}\n+import org.apache.spark.ml.attribute.{Attribute, AttributeGroup, NominalAttribute}\n+import org.apache.spark.ml.feature.RFormula\n+import org.apache.spark.ml.regression.{IsotonicRegression, IsotonicRegressionModel}\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private [r] class IsotonicRegressionWrapper private (\n+    val pipeline: PipelineModel,\n+    val labels: Array[String],\n+    val features: Array[String]) extends MLWritable {\n+\n+  private val isotonicRegressionModel: IsotonicRegressionModel =\n+    pipeline.stages(1).asInstanceOf[IsotonicRegressionModel]\n+\n+  lazy val boundaries: Array[Double] = isotonicRegressionModel.boundaries.toArray\n+\n+  lazy val predictions: Array[Double] = isotonicRegressionModel.predictions.toArray\n+\n+  def fitted(method: String): Array[Double] = {\n+    if (method == \"boundaries\") {\n+      boundaries\n+    } else if (method == \"predictions\") {\n+      predictions\n+    } else {\n+      throw new UnsupportedOperationException(\n+        s\"Method (boundaries or predictions) required but $method found.\")\n+    }\n+  }\n+\n+  def transform(dataset: Dataset[_]): DataFrame = {\n+    pipeline.transform(dataset).drop(isotonicRegressionModel.getFeaturesCol)\n+  }\n+\n+  override def write: MLWriter = new IsotonicRegressionWrapper.IsotonicRegressionWrapperWriter(this)\n+}\n+\n+private[r] object IsotonicRegressionWrapper\n+    extends MLReadable[IsotonicRegressionWrapper] {\n+\n+  def fit(\n+      data: DataFrame,\n+      formula: String,\n+      isotonic: Boolean,\n+      featureIndex: Int): IsotonicRegressionWrapper = {\n+\n+    val rFormulaModel = new RFormula()\n+      .setFormula(formula)\n+      .fit(data)\n+\n+    // get feature names from output schema\n+    val schema = rFormulaModel.transform(data).schema\n+    val labelAttr = Attribute.fromStructField(schema(rFormulaModel.getLabelCol))\n+      .asInstanceOf[NominalAttribute]\n+    val labels = labelAttr.values.get"
  }],
  "prId": 14182
}, {
  "comments": [{
    "author": {
      "login": "junyangq"
    },
    "body": "-> `private[r]`\n",
    "commit": "4400e2f4374712c9cd7f0d8322c7447bf99d4b29",
    "createdAt": "2016-07-29T22:52:46Z",
    "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ml.r\n+\n+import org.apache.hadoop.fs.Path\n+import org.json4s._\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.ml.{Pipeline, PipelineModel}\n+import org.apache.spark.ml.attribute.{AttributeGroup}\n+import org.apache.spark.ml.feature.RFormula\n+import org.apache.spark.ml.regression.{IsotonicRegression, IsotonicRegressionModel}\n+import org.apache.spark.ml.util._\n+import org.apache.spark.sql.{DataFrame, Dataset}\n+\n+private [r] class IsotonicRegressionWrapper private ("
  }],
  "prId": 14182
}]