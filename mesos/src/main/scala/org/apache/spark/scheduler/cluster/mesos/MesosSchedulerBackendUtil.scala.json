[{
  "comments": [{
    "author": {
      "login": "susanxhuynh"
    },
    "body": "Can you remove the parsePortMappingsSpec method now (defined above)?\n",
    "commit": "5789d6bb133489c9a29ccf3d61cac46723581648",
    "createdAt": "2016-11-04T14:15:39Z",
    "diffHunk": "@@ -99,67 +99,55 @@ private[mesos] object MesosSchedulerBackendUtil extends Logging {\n     .toList\n   }\n \n-  /**\n-   * Construct a DockerInfo structure and insert it into a ContainerInfo\n-   */\n-  def addDockerInfo(\n-      container: ContainerInfo.Builder,\n-      image: String,\n-      containerizer: String,\n-      forcePullImage: Boolean = false,\n-      volumes: Option[List[Volume]] = None,\n-      portmaps: Option[List[ContainerInfo.DockerInfo.PortMapping]] = None): Unit = {\n+  def containerInfo(conf: SparkConf): ContainerInfo = {\n+    val containerType = if (conf.contains(\"spark.mesos.executor.docker.image\") &&\n+      conf.get(\"spark.mesos.containerizer\", \"docker\") == \"docker\") {\n+      ContainerInfo.Type.DOCKER\n+    } else {\n+      ContainerInfo.Type.MESOS\n+    }\n+\n+    val containerInfo = ContainerInfo.newBuilder()\n+      .setType(containerType)\n+\n+    conf.getOption(\"spark.mesos.executor.docker.image\").map { image =>\n+      val forcePullImage = conf.getOption(\"spark.mesos.executor.docker.forcePullImage\")\n+        .exists(_.equals(\"true\"))\n+      if (containerType == ContainerInfo.Type.DOCKER) {\n+        containerInfo.setDocker(dockerInfo(image, forcePullImage))\n+      } else {\n+        containerInfo.setMesos(mesosInfo(image, forcePullImage))\n+      }\n \n-    containerizer match {\n-      case \"docker\" =>\n-        container.setType(ContainerInfo.Type.DOCKER)\n-        val docker = ContainerInfo.DockerInfo.newBuilder()\n-          .setImage(image)\n-          .setForcePullImage(forcePullImage)\n-        // TODO (mgummelt): Remove this. Portmaps have no effect,\n-        //                  as we don't support bridge networking.\n-        portmaps.foreach(_.foreach(docker.addPortMappings))\n-        container.setDocker(docker)\n-      case \"mesos\" =>\n-        container.setType(ContainerInfo.Type.MESOS)\n-        val imageProto = Image.newBuilder()\n-          .setType(Image.Type.DOCKER)\n-          .setDocker(Image.Docker.newBuilder().setName(image))\n-          .setCached(!forcePullImage)\n-        container.setMesos(ContainerInfo.MesosInfo.newBuilder().setImage(imageProto))\n-      case _ =>\n-        throw new SparkException(\n-          \"spark.mesos.containerizer must be one of {\\\"docker\\\", \\\"mesos\\\"}\")\n+      val volumes = conf\n+        .getOption(\"spark.mesos.executor.docker.volumes\")\n+        .map(parseVolumesSpec)\n+\n+      volumes.foreach(_.foreach(containerInfo.addVolumes(_)))\n+    }\n+\n+    conf.getOption(\"spark.mesos.network.name\").map { name =>\n+      val info = NetworkInfo.newBuilder().setName(name).build()\n+      containerInfo.addNetworkInfos(info)\n     }\n \n-    volumes.foreach(_.foreach(container.addVolumes))\n+    containerInfo.build()\n   }\n \n-  /**\n-   * Setup a docker containerizer from MesosDriverDescription scheduler properties\n-   */\n-  def setupContainerBuilderDockerInfo(\n-    imageName: String,\n-    conf: SparkConf,\n-    builder: ContainerInfo.Builder): Unit = {\n-    val forcePullImage = conf\n-      .getOption(\"spark.mesos.executor.docker.forcePullImage\")\n-      .exists(_.equals(\"true\"))\n-    val volumes = conf\n-      .getOption(\"spark.mesos.executor.docker.volumes\")\n-      .map(parseVolumesSpec)\n-    val portmaps = conf\n-      .getOption(\"spark.mesos.executor.docker.portmaps\")\n-      .map(parsePortMappingsSpec)",
    "line": 104
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "I actually just re-added the ports stuff, in case we want to support it in the future.  It's just removed from the docs.\n",
    "commit": "5789d6bb133489c9a29ccf3d61cac46723581648",
    "createdAt": "2016-11-04T17:16:58Z",
    "diffHunk": "@@ -99,67 +99,55 @@ private[mesos] object MesosSchedulerBackendUtil extends Logging {\n     .toList\n   }\n \n-  /**\n-   * Construct a DockerInfo structure and insert it into a ContainerInfo\n-   */\n-  def addDockerInfo(\n-      container: ContainerInfo.Builder,\n-      image: String,\n-      containerizer: String,\n-      forcePullImage: Boolean = false,\n-      volumes: Option[List[Volume]] = None,\n-      portmaps: Option[List[ContainerInfo.DockerInfo.PortMapping]] = None): Unit = {\n+  def containerInfo(conf: SparkConf): ContainerInfo = {\n+    val containerType = if (conf.contains(\"spark.mesos.executor.docker.image\") &&\n+      conf.get(\"spark.mesos.containerizer\", \"docker\") == \"docker\") {\n+      ContainerInfo.Type.DOCKER\n+    } else {\n+      ContainerInfo.Type.MESOS\n+    }\n+\n+    val containerInfo = ContainerInfo.newBuilder()\n+      .setType(containerType)\n+\n+    conf.getOption(\"spark.mesos.executor.docker.image\").map { image =>\n+      val forcePullImage = conf.getOption(\"spark.mesos.executor.docker.forcePullImage\")\n+        .exists(_.equals(\"true\"))\n+      if (containerType == ContainerInfo.Type.DOCKER) {\n+        containerInfo.setDocker(dockerInfo(image, forcePullImage))\n+      } else {\n+        containerInfo.setMesos(mesosInfo(image, forcePullImage))\n+      }\n \n-    containerizer match {\n-      case \"docker\" =>\n-        container.setType(ContainerInfo.Type.DOCKER)\n-        val docker = ContainerInfo.DockerInfo.newBuilder()\n-          .setImage(image)\n-          .setForcePullImage(forcePullImage)\n-        // TODO (mgummelt): Remove this. Portmaps have no effect,\n-        //                  as we don't support bridge networking.\n-        portmaps.foreach(_.foreach(docker.addPortMappings))\n-        container.setDocker(docker)\n-      case \"mesos\" =>\n-        container.setType(ContainerInfo.Type.MESOS)\n-        val imageProto = Image.newBuilder()\n-          .setType(Image.Type.DOCKER)\n-          .setDocker(Image.Docker.newBuilder().setName(image))\n-          .setCached(!forcePullImage)\n-        container.setMesos(ContainerInfo.MesosInfo.newBuilder().setImage(imageProto))\n-      case _ =>\n-        throw new SparkException(\n-          \"spark.mesos.containerizer must be one of {\\\"docker\\\", \\\"mesos\\\"}\")\n+      val volumes = conf\n+        .getOption(\"spark.mesos.executor.docker.volumes\")\n+        .map(parseVolumesSpec)\n+\n+      volumes.foreach(_.foreach(containerInfo.addVolumes(_)))\n+    }\n+\n+    conf.getOption(\"spark.mesos.network.name\").map { name =>\n+      val info = NetworkInfo.newBuilder().setName(name).build()\n+      containerInfo.addNetworkInfos(info)\n     }\n \n-    volumes.foreach(_.foreach(container.addVolumes))\n+    containerInfo.build()\n   }\n \n-  /**\n-   * Setup a docker containerizer from MesosDriverDescription scheduler properties\n-   */\n-  def setupContainerBuilderDockerInfo(\n-    imageName: String,\n-    conf: SparkConf,\n-    builder: ContainerInfo.Builder): Unit = {\n-    val forcePullImage = conf\n-      .getOption(\"spark.mesos.executor.docker.forcePullImage\")\n-      .exists(_.equals(\"true\"))\n-    val volumes = conf\n-      .getOption(\"spark.mesos.executor.docker.volumes\")\n-      .map(parseVolumesSpec)\n-    val portmaps = conf\n-      .getOption(\"spark.mesos.executor.docker.portmaps\")\n-      .map(parsePortMappingsSpec)",
    "line": 104
  }],
  "prId": 15740
}]