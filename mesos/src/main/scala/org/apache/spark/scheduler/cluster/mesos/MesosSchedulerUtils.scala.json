[{
  "comments": [{
    "author": {
      "login": "tnachen"
    },
    "body": "Fix the parameters indent\n",
    "commit": "bd9ace4ea815bb9e4395dc2cafd52e6889250b29",
    "createdAt": "2016-10-07T17:13:02Z",
    "diffHunk": "@@ -69,38 +68,51 @@ trait MesosSchedulerUtils extends Logging {\n       conf: SparkConf,\n       webuiUrl: Option[String] = None,\n       checkpoint: Option[Boolean] = None,\n-      failoverTimeout: Option[Double] = None,\n       frameworkId: Option[String] = None): SchedulerDriver = {\n-    val fwInfoBuilder = FrameworkInfo.newBuilder().setUser(sparkUser).setName(appName)\n+    val fwInfo = createFrameworkInfo(sparkUser, appName, conf, webuiUrl, checkpoint, frameworkId)\n     val credBuilder = Credential.newBuilder()\n-    webuiUrl.foreach { url => fwInfoBuilder.setWebuiUrl(url) }\n-    checkpoint.foreach { checkpoint => fwInfoBuilder.setCheckpoint(checkpoint) }\n-    failoverTimeout.foreach { timeout => fwInfoBuilder.setFailoverTimeout(timeout) }\n-    frameworkId.foreach { id =>\n-      fwInfoBuilder.setId(FrameworkID.newBuilder().setValue(id).build())\n-    }\n     conf.getOption(\"spark.mesos.principal\").foreach { principal =>\n-      fwInfoBuilder.setPrincipal(principal)\n       credBuilder.setPrincipal(principal)\n     }\n     conf.getOption(\"spark.mesos.secret\").foreach { secret =>\n       credBuilder.setSecret(secret)\n     }\n-    if (credBuilder.hasSecret && !fwInfoBuilder.hasPrincipal) {\n+    if (credBuilder.hasSecret && !fwInfo.hasPrincipal) {\n       throw new SparkException(\n         \"spark.mesos.principal must be configured when spark.mesos.secret is set\")\n     }\n-    conf.getOption(\"spark.mesos.role\").foreach { role =>\n-      fwInfoBuilder.setRole(role)\n-    }\n     if (credBuilder.hasPrincipal) {\n       new MesosSchedulerDriver(\n-        scheduler, fwInfoBuilder.build(), masterUrl, credBuilder.build())\n+        scheduler, fwInfo, masterUrl, credBuilder.build())\n     } else {\n-      new MesosSchedulerDriver(scheduler, fwInfoBuilder.build(), masterUrl)\n+      new MesosSchedulerDriver(scheduler, fwInfo, masterUrl)\n     }\n   }\n \n+  def createFrameworkInfo(\n+    sparkUser: String,"
  }],
  "prId": 14936
}, {
  "comments": [{
    "author": {
      "login": "tnachen"
    },
    "body": "This new flag needs to get added to the documentation as well\n",
    "commit": "bd9ace4ea815bb9e4395dc2cafd52e6889250b29",
    "createdAt": "2016-10-07T17:13:34Z",
    "diffHunk": "@@ -69,38 +68,51 @@ trait MesosSchedulerUtils extends Logging {\n       conf: SparkConf,\n       webuiUrl: Option[String] = None,\n       checkpoint: Option[Boolean] = None,\n-      failoverTimeout: Option[Double] = None,\n       frameworkId: Option[String] = None): SchedulerDriver = {\n-    val fwInfoBuilder = FrameworkInfo.newBuilder().setUser(sparkUser).setName(appName)\n+    val fwInfo = createFrameworkInfo(sparkUser, appName, conf, webuiUrl, checkpoint, frameworkId)\n     val credBuilder = Credential.newBuilder()\n-    webuiUrl.foreach { url => fwInfoBuilder.setWebuiUrl(url) }\n-    checkpoint.foreach { checkpoint => fwInfoBuilder.setCheckpoint(checkpoint) }\n-    failoverTimeout.foreach { timeout => fwInfoBuilder.setFailoverTimeout(timeout) }\n-    frameworkId.foreach { id =>\n-      fwInfoBuilder.setId(FrameworkID.newBuilder().setValue(id).build())\n-    }\n     conf.getOption(\"spark.mesos.principal\").foreach { principal =>\n-      fwInfoBuilder.setPrincipal(principal)\n       credBuilder.setPrincipal(principal)\n     }\n     conf.getOption(\"spark.mesos.secret\").foreach { secret =>\n       credBuilder.setSecret(secret)\n     }\n-    if (credBuilder.hasSecret && !fwInfoBuilder.hasPrincipal) {\n+    if (credBuilder.hasSecret && !fwInfo.hasPrincipal) {\n       throw new SparkException(\n         \"spark.mesos.principal must be configured when spark.mesos.secret is set\")\n     }\n-    conf.getOption(\"spark.mesos.role\").foreach { role =>\n-      fwInfoBuilder.setRole(role)\n-    }\n     if (credBuilder.hasPrincipal) {\n       new MesosSchedulerDriver(\n-        scheduler, fwInfoBuilder.build(), masterUrl, credBuilder.build())\n+        scheduler, fwInfo, masterUrl, credBuilder.build())\n     } else {\n-      new MesosSchedulerDriver(scheduler, fwInfoBuilder.build(), masterUrl)\n+      new MesosSchedulerDriver(scheduler, fwInfo, masterUrl)\n     }\n   }\n \n+  def createFrameworkInfo(\n+    sparkUser: String,\n+    appName: String,\n+    conf: SparkConf,\n+    webuiUrl: Option[String] = None,\n+    checkpoint: Option[Boolean] = None,\n+    frameworkId: Option[String] = None): FrameworkInfo = {\n+    val fwInfoBuilder = FrameworkInfo.newBuilder().setUser(sparkUser).setName(appName)\n+    webuiUrl.foreach { url => fwInfoBuilder.setWebuiUrl(url) }\n+    checkpoint.foreach { checkpoint => fwInfoBuilder.setCheckpoint(checkpoint) }\n+    fwInfoBuilder.setFailoverTimeout(conf.getDouble(\"spark.mesos.failoverTimeout\", 10))"
  }],
  "prId": 14936
}]