[{
  "comments": [{
    "author": {
      "login": "jaceklaskowski"
    },
    "body": "I think the convention is to indent by 4 spaces only not to align to the first parameter.\n",
    "commit": "09f3197e7cac9a45315bf5bdaed57c97bcd0e46d",
    "createdAt": "2016-08-14T18:45:47Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster\n+\n+import org.apache.spark.{SparkContext, SparkException}\n+import org.apache.spark.scheduler.{ExternalClusterManager, SchedulerBackend, TaskScheduler, TaskSchedulerImpl}\n+import org.apache.spark.scheduler.cluster.mesos.{MesosCoarseGrainedSchedulerBackend, MesosFineGrainedSchedulerBackend}\n+\n+/**\n+ * Cluster Manager for creation of Yarn scheduler and backend\n+ */\n+private[spark] class MesosClusterManager extends ExternalClusterManager {\n+  private val MESOS_REGEX = \"\"\"mesos://(.*)\"\"\".r\n+\n+  override def canCreate(masterURL: String): Boolean = {\n+    masterURL.startsWith(\"mesos\")\n+  }\n+\n+  override def createTaskScheduler(sc: SparkContext, masterURL: String): TaskScheduler = {\n+    new TaskSchedulerImpl(sc)\n+  }\n+\n+  override def createSchedulerBackend(sc: SparkContext,\n+                                      masterURL: String,"
  }],
  "prId": 14637
}, {
  "comments": [{
    "author": {
      "login": "jaceklaskowski"
    },
    "body": "Oh, I thought Spark supports coarse-grain scheduling only (even for Mesos that had fine-grained one too). Will it stay or is this a temporary thing?\n",
    "commit": "09f3197e7cac9a45315bf5bdaed57c97bcd0e46d",
    "createdAt": "2016-08-14T18:47:26Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster\n+\n+import org.apache.spark.{SparkContext, SparkException}\n+import org.apache.spark.scheduler.{ExternalClusterManager, SchedulerBackend, TaskScheduler, TaskSchedulerImpl}\n+import org.apache.spark.scheduler.cluster.mesos.{MesosCoarseGrainedSchedulerBackend, MesosFineGrainedSchedulerBackend}\n+\n+/**\n+ * Cluster Manager for creation of Yarn scheduler and backend\n+ */\n+private[spark] class MesosClusterManager extends ExternalClusterManager {\n+  private val MESOS_REGEX = \"\"\"mesos://(.*)\"\"\".r\n+\n+  override def canCreate(masterURL: String): Boolean = {\n+    masterURL.startsWith(\"mesos\")\n+  }\n+\n+  override def createTaskScheduler(sc: SparkContext, masterURL: String): TaskScheduler = {\n+    new TaskSchedulerImpl(sc)\n+  }\n+\n+  override def createSchedulerBackend(sc: SparkContext,\n+                                      masterURL: String,\n+                                      scheduler: TaskScheduler): SchedulerBackend = {\n+    val mesosUrl = MESOS_REGEX.findFirstMatchIn(masterURL).get.group(1)\n+    val coarse = sc.conf.getBoolean(\"spark.mesos.coarse\", defaultValue = true)"
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "Mesos supports coarse-grained and fine-grained, but fine-grained is deprecated \n",
    "commit": "09f3197e7cac9a45315bf5bdaed57c97bcd0e46d",
    "createdAt": "2016-08-19T20:38:10Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster\n+\n+import org.apache.spark.{SparkContext, SparkException}\n+import org.apache.spark.scheduler.{ExternalClusterManager, SchedulerBackend, TaskScheduler, TaskSchedulerImpl}\n+import org.apache.spark.scheduler.cluster.mesos.{MesosCoarseGrainedSchedulerBackend, MesosFineGrainedSchedulerBackend}\n+\n+/**\n+ * Cluster Manager for creation of Yarn scheduler and backend\n+ */\n+private[spark] class MesosClusterManager extends ExternalClusterManager {\n+  private val MESOS_REGEX = \"\"\"mesos://(.*)\"\"\".r\n+\n+  override def canCreate(masterURL: String): Boolean = {\n+    masterURL.startsWith(\"mesos\")\n+  }\n+\n+  override def createTaskScheduler(sc: SparkContext, masterURL: String): TaskScheduler = {\n+    new TaskSchedulerImpl(sc)\n+  }\n+\n+  override def createSchedulerBackend(sc: SparkContext,\n+                                      masterURL: String,\n+                                      scheduler: TaskScheduler): SchedulerBackend = {\n+    val mesosUrl = MESOS_REGEX.findFirstMatchIn(masterURL).get.group(1)\n+    val coarse = sc.conf.getBoolean(\"spark.mesos.coarse\", defaultValue = true)"
  }],
  "prId": 14637
}]