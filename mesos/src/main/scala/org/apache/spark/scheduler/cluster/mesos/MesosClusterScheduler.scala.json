[{
  "comments": [{
    "author": {
      "login": "mgummelt"
    },
    "body": "We really need to factor out all these conf vars like YARN does at some point\n",
    "commit": "7195c6e76164dc01f71e78e98cb2a6438497266d",
    "createdAt": "2016-10-11T17:32:45Z",
    "diffHunk": "@@ -129,6 +129,7 @@ private[spark] class MesosClusterScheduler(\n   private val queuedCapacity = conf.getInt(\"spark.mesos.maxDrivers\", 200)\n   private val retainedDrivers = conf.getInt(\"spark.mesos.retainedDrivers\", 200)\n   private val maxRetryWaitTime = conf.getInt(\"spark.mesos.cluster.retry.wait.max\", 60) // 1 minute\n+  private val useFetchCache = conf.getBoolean(\"spark.mesos.fetchCache.enable\", false)",
    "line": 4
  }, {
    "author": {
      "login": "drcrallen"
    },
    "body": "Good idea but outside scope of this PR\n",
    "commit": "7195c6e76164dc01f71e78e98cb2a6438497266d",
    "createdAt": "2016-10-12T22:34:14Z",
    "diffHunk": "@@ -129,6 +129,7 @@ private[spark] class MesosClusterScheduler(\n   private val queuedCapacity = conf.getInt(\"spark.mesos.maxDrivers\", 200)\n   private val retainedDrivers = conf.getInt(\"spark.mesos.retainedDrivers\", 200)\n   private val maxRetryWaitTime = conf.getInt(\"spark.mesos.cluster.retry.wait.max\", 60) // 1 minute\n+  private val useFetchCache = conf.getBoolean(\"spark.mesos.fetchCache.enable\", false)",
    "line": 4
  }],
  "prId": 13713
}]