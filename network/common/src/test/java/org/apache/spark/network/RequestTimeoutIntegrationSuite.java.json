[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "can we reduce this to a much smaller number (100ms)? otherwise tests here take quite long.\n",
    "commit": "8699680d4f7b972487818cdd1abc5dcfdf3cad43",
    "createdAt": "2015-04-20T03:14:38Z",
    "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network;\n+\n+import com.google.common.collect.Maps;\n+import com.google.common.util.concurrent.Uninterruptibles;\n+import org.apache.spark.network.buffer.ManagedBuffer;\n+import org.apache.spark.network.buffer.NioManagedBuffer;\n+import org.apache.spark.network.client.ChunkReceivedCallback;\n+import org.apache.spark.network.client.RpcResponseCallback;\n+import org.apache.spark.network.client.TransportClient;\n+import org.apache.spark.network.client.TransportClientFactory;\n+import org.apache.spark.network.server.RpcHandler;\n+import org.apache.spark.network.server.StreamManager;\n+import org.apache.spark.network.server.TransportServer;\n+import org.apache.spark.network.util.MapConfigProvider;\n+import org.apache.spark.network.util.TransportConf;\n+import org.junit.*;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.*;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Suite which ensures that requests that go without a response for the network timeout period are\n+ * failed, and the connection closed.\n+ *\n+ * In this suite, we use 5 seconds as the connection timeout, with some slack given in the tests,\n+ * to ensure stability in different test environments.\n+ */\n+public class RequestTimeoutIntegrationSuite {\n+\n+  private TransportServer server;\n+  private TransportClientFactory clientFactory;\n+\n+  private StreamManager defaultManager;\n+  private TransportConf conf;\n+\n+  // A large timeout that \"shouldn't happen\", for the sake of faulty tests not hanging forever.\n+  private final int FOREVER = 60 * 1000;\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    Map<String, String> configMap = Maps.newHashMap();\n+    configMap.put(\"spark.shuffle.io.connectionTimeout\", \"5s\");"
  }, {
    "author": {
      "login": "aarondav"
    },
    "body": "The tests take 19 seconds, which is annoying but preferable to sporadically failing. I don't trust overloaded Jenkins machines, but I could drop it by a couple factors.\n",
    "commit": "8699680d4f7b972487818cdd1abc5dcfdf3cad43",
    "createdAt": "2015-04-20T03:16:04Z",
    "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network;\n+\n+import com.google.common.collect.Maps;\n+import com.google.common.util.concurrent.Uninterruptibles;\n+import org.apache.spark.network.buffer.ManagedBuffer;\n+import org.apache.spark.network.buffer.NioManagedBuffer;\n+import org.apache.spark.network.client.ChunkReceivedCallback;\n+import org.apache.spark.network.client.RpcResponseCallback;\n+import org.apache.spark.network.client.TransportClient;\n+import org.apache.spark.network.client.TransportClientFactory;\n+import org.apache.spark.network.server.RpcHandler;\n+import org.apache.spark.network.server.StreamManager;\n+import org.apache.spark.network.server.TransportServer;\n+import org.apache.spark.network.util.MapConfigProvider;\n+import org.apache.spark.network.util.TransportConf;\n+import org.junit.*;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.*;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Suite which ensures that requests that go without a response for the network timeout period are\n+ * failed, and the connection closed.\n+ *\n+ * In this suite, we use 5 seconds as the connection timeout, with some slack given in the tests,\n+ * to ensure stability in different test environments.\n+ */\n+public class RequestTimeoutIntegrationSuite {\n+\n+  private TransportServer server;\n+  private TransportClientFactory clientFactory;\n+\n+  private StreamManager defaultManager;\n+  private TransportConf conf;\n+\n+  // A large timeout that \"shouldn't happen\", for the sake of faulty tests not hanging forever.\n+  private final int FOREVER = 60 * 1000;\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    Map<String, String> configMap = Maps.newHashMap();\n+    configMap.put(\"spark.shuffle.io.connectionTimeout\", \"5s\");"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "2s sounds good.\n",
    "commit": "8699680d4f7b972487818cdd1abc5dcfdf3cad43",
    "createdAt": "2015-04-20T03:23:14Z",
    "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network;\n+\n+import com.google.common.collect.Maps;\n+import com.google.common.util.concurrent.Uninterruptibles;\n+import org.apache.spark.network.buffer.ManagedBuffer;\n+import org.apache.spark.network.buffer.NioManagedBuffer;\n+import org.apache.spark.network.client.ChunkReceivedCallback;\n+import org.apache.spark.network.client.RpcResponseCallback;\n+import org.apache.spark.network.client.TransportClient;\n+import org.apache.spark.network.client.TransportClientFactory;\n+import org.apache.spark.network.server.RpcHandler;\n+import org.apache.spark.network.server.StreamManager;\n+import org.apache.spark.network.server.TransportServer;\n+import org.apache.spark.network.util.MapConfigProvider;\n+import org.apache.spark.network.util.TransportConf;\n+import org.junit.*;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.*;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Suite which ensures that requests that go without a response for the network timeout period are\n+ * failed, and the connection closed.\n+ *\n+ * In this suite, we use 5 seconds as the connection timeout, with some slack given in the tests,\n+ * to ensure stability in different test environments.\n+ */\n+public class RequestTimeoutIntegrationSuite {\n+\n+  private TransportServer server;\n+  private TransportClientFactory clientFactory;\n+\n+  private StreamManager defaultManager;\n+  private TransportConf conf;\n+\n+  // A large timeout that \"shouldn't happen\", for the sake of faulty tests not hanging forever.\n+  private final int FOREVER = 60 * 1000;\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    Map<String, String> configMap = Maps.newHashMap();\n+    configMap.put(\"spark.shuffle.io.connectionTimeout\", \"5s\");"
  }],
  "prId": 5584
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "reminder once you change the timeout: 5s -> 2s\n",
    "commit": "8699680d4f7b972487818cdd1abc5dcfdf3cad43",
    "createdAt": "2015-04-20T03:23:24Z",
    "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network;\n+\n+import com.google.common.collect.Maps;\n+import com.google.common.util.concurrent.Uninterruptibles;\n+import org.apache.spark.network.buffer.ManagedBuffer;\n+import org.apache.spark.network.buffer.NioManagedBuffer;\n+import org.apache.spark.network.client.ChunkReceivedCallback;\n+import org.apache.spark.network.client.RpcResponseCallback;\n+import org.apache.spark.network.client.TransportClient;\n+import org.apache.spark.network.client.TransportClientFactory;\n+import org.apache.spark.network.server.RpcHandler;\n+import org.apache.spark.network.server.StreamManager;\n+import org.apache.spark.network.server.TransportServer;\n+import org.apache.spark.network.util.MapConfigProvider;\n+import org.apache.spark.network.util.TransportConf;\n+import org.junit.*;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.*;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Suite which ensures that requests that go without a response for the network timeout period are\n+ * failed, and the connection closed.\n+ *\n+ * In this suite, we use 5 seconds as the connection timeout, with some slack given in the tests,"
  }],
  "prId": 5584
}]