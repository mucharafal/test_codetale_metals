[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "put quotes around buffer?\n",
    "commit": "cadfd28f116f0dbca11e580a23caf82060bcf922",
    "createdAt": "2014-10-27T22:07:08Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.protocol.response;\n+\n+import com.google.common.base.Objects;\n+import io.netty.buffer.ByteBuf;\n+\n+import org.apache.spark.network.buffer.ManagedBuffer;\n+import org.apache.spark.network.buffer.NettyManagedBuffer;\n+import org.apache.spark.network.protocol.StreamChunkId;\n+\n+/**\n+ * Response to {@link org.apache.spark.network.protocol.request.ChunkFetchRequest} when a chunk\n+ * exists and has been successfully fetched.\n+ *\n+ * Note that the server-side encoding of this messages does NOT include the buffer itself, as this\n+ * may be written by Netty in a more efficient manner (i.e., zero-copy write).\n+ * Similarly, the client-side decoding will reuse the Netty ByteBuf as the buffer.\n+ */\n+public final class ChunkFetchSuccess implements ResponseMessage {\n+  public final StreamChunkId streamChunkId;\n+  public final ManagedBuffer buffer;\n+\n+  public ChunkFetchSuccess(StreamChunkId streamChunkId, ManagedBuffer buffer) {\n+    this.streamChunkId = streamChunkId;\n+    this.buffer = buffer;\n+  }\n+\n+  @Override\n+  public Type type() { return Type.ChunkFetchSuccess; }\n+\n+  @Override\n+  public int encodedLength() {\n+    return streamChunkId.encodedLength();\n+  }\n+\n+  /** Encoding does NOT include buffer itself. See {@link MessageEncoder}. */"
  }],
  "prId": 2753
}]