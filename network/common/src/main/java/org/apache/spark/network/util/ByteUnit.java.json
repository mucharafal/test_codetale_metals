[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "We have to be a little careful if importing third-party code, especially source. Looks like this is AL2 licensed: https://github.com/fabian-barney/Utils/blob/master/utils/LICENSE  And it has no `NOTICE` file. So should be OK.\n\nHowever, you can't remove his copyright statement. If you also added changes or new code, you can also include the ASF header to cover your work, but should retain his too.\n\nHowever, I'm not sure this is the best code to reuse, and I base that almost entirely on the fact that it treats numbers of bytes as `double`s which seems wrong. This feels like something that doesn't need to be this complex, so could be reimplemented easily.\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-18T18:52:44Z",
    "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+/**\n+ * Code based on https://github.com/fabian-barney/Utils"
  }, {
    "author": {
      "login": "ilganeli"
    },
    "body": "Sean - I think his primary reason for using `double`s was to allow handling of larger byte sizes. On second thought though, using long allows us up to 8 Exabytes which should be more than we ever need. \n\nI'll rewrite it from scratch to avoid the copyright issues and to fix this.\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-18T19:26:40Z",
    "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+/**\n+ * Code based on https://github.com/fabian-barney/Utils"
  }],
  "prId": 5574
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "This would be simpler if you had a \"multiplier\" in the constructor. e.g.\n\n```\nBYTE(1),\nKiB(C_KiB),\n...\n\nprivate ByteUnit(long multiplier) {\n  this.multiplier = multiplier;\n}\n\nlong toBytes(long d) { return multiplier * d; }\n\nlong convert(long d, ByteUnit u) { return toBytes(d) / u.multiplier; }\n\nlong toKiB(long d) { return convert(d, KiB); }\n```\n\nOr something.\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-20T23:15:37Z",
    "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+public enum ByteUnit {\n+  /** Byte (B) */\n+  BYTE {\n+    public long toBytes(long d) { return d; }\n+    \n+    public long convert(long d, ByteUnit u) { return u.toBytes(d); }\n+  },\n+\n+  /** Kibibyte (KiB) = 1024 Byte */\n+  KiB {\n+    public long toBytes(long d) { return x(d, C_KiB); }\n+    \n+    public long convert(long d, ByteUnit u) { return u.toKiB(d); }\n+  },\n+\n+  /** Mebibyte (MiB) = (1024^2) Byte */\n+  MiB {\n+    public long toBytes(long d) { return x(d, C_MiB); }\n+    \n+    public long convert(long d, ByteUnit u) { return u.toMiB(d); }\n+  },\n+\n+  /** Gibibyte (GiB) = (1024^3) Byte */\n+  GiB {\n+    public long toBytes(long d) { return x(d, C_GiB);\n+    }\n+\n+    public long convert(long d, ByteUnit u) { return u.toGiB(d); }\n+  },\n+\n+  /** Tebibyte (TiB) = (1024^4) Byte */\n+  TiB {\n+    public long toBytes(long d) { return x(d, C_TiB); }\n+    \n+    public long convert(long d, ByteUnit u) { return u.toTiB(d); }\n+  },\n+\n+  /** Pebibyte (PB) = (1024^5) Byte */\n+  PiB {\n+    public long toBytes(long d) { return x(d, C_PiB); }\n+    \n+    public long convert(long d, ByteUnit u) { return u.toPiB(d); }\n+  };\n+\n+  static final long C_KiB = 1024l;\n+  static final long C_MiB = (long) Math.pow(1024l, 2l);\n+  static final long C_GiB = (long) Math.pow(1024l, 3l);\n+  static final long C_TiB = (long) Math.pow(1024l, 4l);\n+  static final long C_PiB = (long) Math.pow(1024l, 5l);\n+\n+  static final long MAX = Long.MAX_VALUE;\n+\n+  /**\n+   * Scale d by m, checking for overflow.\n+   * This has a short name to make above code more readable.\n+   */\n+  static long x(long d, long m) {\n+    long over = MAX / d;\n+    if (d >  over) return Long.MAX_VALUE;\n+    if (d < -over) return Long.MIN_VALUE;\n+    return d * m;\n+  }\n+\n+  public long convert(long d, ByteUnit u) { throw new AbstractMethodError(); }"
  }],
  "prId": 5574
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "style:\n\n```\nGiB {\n  public long toBytes(...) { return ... };\n  public long convert(...) { return ... };\n}\n```\n\nthe new lines aren't super necessary\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-21T00:40:43Z",
    "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+public enum ByteUnit {\n+  /** Byte (B) */\n+  BYTE {\n+    public long toBytes(long d) { return d; }\n+    \n+    public long convert(long d, ByteUnit u) { return u.toBytes(d); }\n+  },\n+\n+  /** Kibibyte (KiB) = 1024 Byte */\n+  KiB {\n+    public long toBytes(long d) { return x(d, C_KiB); }\n+    \n+    public long convert(long d, ByteUnit u) { return u.toKiB(d); }\n+  },\n+\n+  /** Mebibyte (MiB) = (1024^2) Byte */\n+  MiB {\n+    public long toBytes(long d) { return x(d, C_MiB); }\n+    \n+    public long convert(long d, ByteUnit u) { return u.toMiB(d); }\n+  },\n+\n+  /** Gibibyte (GiB) = (1024^3) Byte */\n+  GiB {\n+    public long toBytes(long d) { return x(d, C_GiB);\n+    }\n+\n+    public long convert(long d, ByteUnit u) { return u.toGiB(d); }\n+  },"
  }],
  "prId": 5574
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "super nit: `1234L` seems to be way more common in the code base.\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-22T18:33:57Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+public enum ByteUnit {\n+  BYTE (1),\n+  KiB (1024l),"
  }],
  "prId": 5574
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "private final\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-22T18:34:11Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+public enum ByteUnit {\n+  BYTE (1),\n+  KiB (1024l),\n+  MiB ((long) Math.pow(1024l, 2l)),\n+  GiB ((long) Math.pow(1024l, 3l)),\n+  TiB ((long) Math.pow(1024l, 4l)),\n+  PiB ((long) Math.pow(1024l, 5l));\n+\n+  private ByteUnit(long multiplier) {\n+    this.multiplier = multiplier;\n+  }\n+\n+  // Interpret the provided number (d) with suffix (u) as this unit type.\n+  // E.g. KiB.interpret(1, MiB) interprets 1MiB as its KiB representation = 1024k\n+  public long interpret(long d, ByteUnit u) {\n+    return u.toBytes(d) / multiplier;  \n+  }\n+  \n+  // Convert the provided number (d) interpreted as this unit type to unit type (u). \n+  public long convert(long d, ByteUnit u) {\n+    return toBytes(d) / u.multiplier;\n+  }\n+\n+  public long toBytes(long d) { return x(d, multiplier); }\n+  public long toKiB(long d) { return convert(d, KiB); }\n+  public long toMiB(long d) { return convert(d, MiB); }\n+  public long toGiB(long d) { return convert(d, GiB); }\n+  public long toTiB(long d) { return convert(d, TiB); }\n+  public long toPiB(long d) { return convert(d, PiB); }\n+  \n+  long multiplier = 0;"
  }, {
    "author": {
      "login": "ilganeli"
    },
    "body": "Multiplier is not final - it's set in the constructor.\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-22T19:10:35Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+public enum ByteUnit {\n+  BYTE (1),\n+  KiB (1024l),\n+  MiB ((long) Math.pow(1024l, 2l)),\n+  GiB ((long) Math.pow(1024l, 3l)),\n+  TiB ((long) Math.pow(1024l, 4l)),\n+  PiB ((long) Math.pow(1024l, 5l));\n+\n+  private ByteUnit(long multiplier) {\n+    this.multiplier = multiplier;\n+  }\n+\n+  // Interpret the provided number (d) with suffix (u) as this unit type.\n+  // E.g. KiB.interpret(1, MiB) interprets 1MiB as its KiB representation = 1024k\n+  public long interpret(long d, ByteUnit u) {\n+    return u.toBytes(d) / multiplier;  \n+  }\n+  \n+  // Convert the provided number (d) interpreted as this unit type to unit type (u). \n+  public long convert(long d, ByteUnit u) {\n+    return toBytes(d) / u.multiplier;\n+  }\n+\n+  public long toBytes(long d) { return x(d, multiplier); }\n+  public long toKiB(long d) { return convert(d, KiB); }\n+  public long toMiB(long d) { return convert(d, MiB); }\n+  public long toGiB(long d) { return convert(d, GiB); }\n+  public long toTiB(long d) { return convert(d, TiB); }\n+  public long toPiB(long d) { return convert(d, PiB); }\n+  \n+  long multiplier = 0;"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "That's ok. This is Java, not Scala. (Meaning the field should be final.)\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-22T21:18:06Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+public enum ByteUnit {\n+  BYTE (1),\n+  KiB (1024l),\n+  MiB ((long) Math.pow(1024l, 2l)),\n+  GiB ((long) Math.pow(1024l, 3l)),\n+  TiB ((long) Math.pow(1024l, 4l)),\n+  PiB ((long) Math.pow(1024l, 5l));\n+\n+  private ByteUnit(long multiplier) {\n+    this.multiplier = multiplier;\n+  }\n+\n+  // Interpret the provided number (d) with suffix (u) as this unit type.\n+  // E.g. KiB.interpret(1, MiB) interprets 1MiB as its KiB representation = 1024k\n+  public long interpret(long d, ByteUnit u) {\n+    return u.toBytes(d) / multiplier;  \n+  }\n+  \n+  // Convert the provided number (d) interpreted as this unit type to unit type (u). \n+  public long convert(long d, ByteUnit u) {\n+    return toBytes(d) / u.multiplier;\n+  }\n+\n+  public long toBytes(long d) { return x(d, multiplier); }\n+  public long toKiB(long d) { return convert(d, KiB); }\n+  public long toMiB(long d) { return convert(d, MiB); }\n+  public long toGiB(long d) { return convert(d, GiB); }\n+  public long toTiB(long d) { return convert(d, TiB); }\n+  public long toPiB(long d) { return convert(d, PiB); }\n+  \n+  long multiplier = 0;"
  }],
  "prId": 5574
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "not used anywhere?\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-22T18:34:59Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+public enum ByteUnit {\n+  BYTE (1),\n+  KiB (1024l),\n+  MiB ((long) Math.pow(1024l, 2l)),\n+  GiB ((long) Math.pow(1024l, 3l)),\n+  TiB ((long) Math.pow(1024l, 4l)),\n+  PiB ((long) Math.pow(1024l, 5l));\n+\n+  private ByteUnit(long multiplier) {\n+    this.multiplier = multiplier;\n+  }\n+\n+  // Interpret the provided number (d) with suffix (u) as this unit type.\n+  // E.g. KiB.interpret(1, MiB) interprets 1MiB as its KiB representation = 1024k\n+  public long interpret(long d, ByteUnit u) {\n+    return u.toBytes(d) / multiplier;  \n+  }\n+  \n+  // Convert the provided number (d) interpreted as this unit type to unit type (u). \n+  public long convert(long d, ByteUnit u) {\n+    return toBytes(d) / u.multiplier;\n+  }\n+\n+  public long toBytes(long d) { return x(d, multiplier); }\n+  public long toKiB(long d) { return convert(d, KiB); }\n+  public long toMiB(long d) { return convert(d, MiB); }\n+  public long toGiB(long d) { return convert(d, GiB); }\n+  public long toTiB(long d) { return convert(d, TiB); }\n+  public long toPiB(long d) { return convert(d, PiB); }\n+  \n+  long multiplier = 0;\n+  static final long MAX = Long.MAX_VALUE;"
  }, {
    "author": {
      "login": "ilganeli"
    },
    "body": "Wanted to still keep these in case they were used down the line. Would you recommend getting rid of them?\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-22T18:36:25Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+public enum ByteUnit {\n+  BYTE (1),\n+  KiB (1024l),\n+  MiB ((long) Math.pow(1024l, 2l)),\n+  GiB ((long) Math.pow(1024l, 3l)),\n+  TiB ((long) Math.pow(1024l, 4l)),\n+  PiB ((long) Math.pow(1024l, 5l));\n+\n+  private ByteUnit(long multiplier) {\n+    this.multiplier = multiplier;\n+  }\n+\n+  // Interpret the provided number (d) with suffix (u) as this unit type.\n+  // E.g. KiB.interpret(1, MiB) interprets 1MiB as its KiB representation = 1024k\n+  public long interpret(long d, ByteUnit u) {\n+    return u.toBytes(d) / multiplier;  \n+  }\n+  \n+  // Convert the provided number (d) interpreted as this unit type to unit type (u). \n+  public long convert(long d, ByteUnit u) {\n+    return toBytes(d) / u.multiplier;\n+  }\n+\n+  public long toBytes(long d) { return x(d, multiplier); }\n+  public long toKiB(long d) { return convert(d, KiB); }\n+  public long toMiB(long d) { return convert(d, MiB); }\n+  public long toGiB(long d) { return convert(d, GiB); }\n+  public long toTiB(long d) { return convert(d, TiB); }\n+  public long toPiB(long d) { return convert(d, PiB); }\n+  \n+  long multiplier = 0;\n+  static final long MAX = Long.MAX_VALUE;"
  }],
  "prId": 5574
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "There's only one call to this method.\n- Is it needed?\n- If so, the cryptic name is not helping with anything.\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-22T18:35:43Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+public enum ByteUnit {\n+  BYTE (1),\n+  KiB (1024l),\n+  MiB ((long) Math.pow(1024l, 2l)),\n+  GiB ((long) Math.pow(1024l, 3l)),\n+  TiB ((long) Math.pow(1024l, 4l)),\n+  PiB ((long) Math.pow(1024l, 5l));\n+\n+  private ByteUnit(long multiplier) {\n+    this.multiplier = multiplier;\n+  }\n+\n+  // Interpret the provided number (d) with suffix (u) as this unit type.\n+  // E.g. KiB.interpret(1, MiB) interprets 1MiB as its KiB representation = 1024k\n+  public long interpret(long d, ByteUnit u) {\n+    return u.toBytes(d) / multiplier;  \n+  }\n+  \n+  // Convert the provided number (d) interpreted as this unit type to unit type (u). \n+  public long convert(long d, ByteUnit u) {\n+    return toBytes(d) / u.multiplier;\n+  }\n+\n+  public long toBytes(long d) { return x(d, multiplier); }\n+  public long toKiB(long d) { return convert(d, KiB); }\n+  public long toMiB(long d) { return convert(d, MiB); }\n+  public long toGiB(long d) { return convert(d, GiB); }\n+  public long toTiB(long d) { return convert(d, TiB); }\n+  public long toPiB(long d) { return convert(d, PiB); }\n+  \n+  long multiplier = 0;\n+  static final long MAX = Long.MAX_VALUE;\n+\n+  /**\n+   * Scale d by m, checking for overflow.\n+   * This has a short name to make above code more readable."
  }],
  "prId": 5574
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "If you want this to be available, then it should be public. But I'd avoid adding it until it's actually needed.\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-22T21:20:03Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+public enum ByteUnit {\n+  BYTE (1),\n+  KiB (1024L),\n+  MiB ((long) Math.pow(1024L, 2L)),\n+  GiB ((long) Math.pow(1024L, 3L)),\n+  TiB ((long) Math.pow(1024L, 4L)),\n+  PiB ((long) Math.pow(1024L, 5L));\n+\n+  private ByteUnit(long multiplier) {\n+    this.multiplier = multiplier;\n+  }\n+\n+  // Interpret the provided number (d) with suffix (u) as this unit type.\n+  // E.g. KiB.interpret(1, MiB) interprets 1MiB as its KiB representation = 1024k\n+  public long interpret(long d, ByteUnit u) {\n+    return u.toBytes(d) / multiplier;  \n+  }\n+  \n+  // Convert the provided number (d) interpreted as this unit type to unit type (u). \n+  public long convert(long d, ByteUnit u) {\n+    return toBytes(d) / u.multiplier;\n+  }\n+\n+  public long toBytes(long d) {\n+    if (d == 0) { return 0; }\n+    long over = MAX / d;\n+    if (d >  over) return Long.MAX_VALUE;\n+    if (d < -over) return Long.MIN_VALUE;\n+    return d * multiplier; \n+  }\n+  public long toKiB(long d) { return convert(d, KiB); }\n+  public long toMiB(long d) { return convert(d, MiB); }\n+  public long toGiB(long d) { return convert(d, GiB); }\n+  public long toTiB(long d) { return convert(d, TiB); }\n+  public long toPiB(long d) { return convert(d, PiB); }\n+  \n+  private long multiplier = 0;\n+  static final long MAX = Long.MAX_VALUE;"
  }],
  "prId": 5574
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Doesn't seem worth it to have a private `MAX` just for this one use. Use `Long.MAX_VALUE`.\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-23T01:14:36Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+public enum ByteUnit {\n+  BYTE (1),\n+  KiB (1024L),\n+  MiB ((long) Math.pow(1024L, 2L)),\n+  GiB ((long) Math.pow(1024L, 3L)),\n+  TiB ((long) Math.pow(1024L, 4L)),\n+  PiB ((long) Math.pow(1024L, 5L));\n+\n+  private ByteUnit(long multiplier) {\n+    this.multiplier = multiplier;\n+  }\n+\n+  // Interpret the provided number (d) with suffix (u) as this unit type.\n+  // E.g. KiB.interpret(1, MiB) interprets 1MiB as its KiB representation = 1024k\n+  public long interpret(long d, ByteUnit u) {\n+    return u.toBytes(d) / multiplier;  \n+  }\n+  \n+  // Convert the provided number (d) interpreted as this unit type to unit type (u). \n+  public long convert(long d, ByteUnit u) {\n+    return toBytes(d) / u.multiplier;\n+  }\n+\n+  public long toBytes(long d) {\n+    if (d == 0) { return 0; }\n+    long over = MAX / d;"
  }],
  "prId": 5574
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Hmmm... I feel like it would be better to throw an exception instead of truncating.\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-23T01:15:25Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+public enum ByteUnit {\n+  BYTE (1),\n+  KiB (1024L),\n+  MiB ((long) Math.pow(1024L, 2L)),\n+  GiB ((long) Math.pow(1024L, 3L)),\n+  TiB ((long) Math.pow(1024L, 4L)),\n+  PiB ((long) Math.pow(1024L, 5L));\n+\n+  private ByteUnit(long multiplier) {\n+    this.multiplier = multiplier;\n+  }\n+\n+  // Interpret the provided number (d) with suffix (u) as this unit type.\n+  // E.g. KiB.interpret(1, MiB) interprets 1MiB as its KiB representation = 1024k\n+  public long interpret(long d, ByteUnit u) {\n+    return u.toBytes(d) / multiplier;  \n+  }\n+  \n+  // Convert the provided number (d) interpreted as this unit type to unit type (u). \n+  public long convert(long d, ByteUnit u) {\n+    return toBytes(d) / u.multiplier;\n+  }\n+\n+  public long toBytes(long d) {\n+    if (d == 0) { return 0; }\n+    long over = MAX / d;\n+    if (d >  over) return Long.MAX_VALUE;"
  }],
  "prId": 5574
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Negative byte counts sound a little weird, but well. Same comment as above, though.\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-23T01:16:00Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+public enum ByteUnit {\n+  BYTE (1),\n+  KiB (1024L),\n+  MiB ((long) Math.pow(1024L, 2L)),\n+  GiB ((long) Math.pow(1024L, 3L)),\n+  TiB ((long) Math.pow(1024L, 4L)),\n+  PiB ((long) Math.pow(1024L, 5L));\n+\n+  private ByteUnit(long multiplier) {\n+    this.multiplier = multiplier;\n+  }\n+\n+  // Interpret the provided number (d) with suffix (u) as this unit type.\n+  // E.g. KiB.interpret(1, MiB) interprets 1MiB as its KiB representation = 1024k\n+  public long interpret(long d, ByteUnit u) {\n+    return u.toBytes(d) / multiplier;  \n+  }\n+  \n+  // Convert the provided number (d) interpreted as this unit type to unit type (u). \n+  public long convert(long d, ByteUnit u) {\n+    return toBytes(d) / u.multiplier;\n+  }\n+\n+  public long toBytes(long d) {\n+    if (d == 0) { return 0; }\n+    long over = MAX / d;\n+    if (d >  over) return Long.MAX_VALUE;\n+    if (d < -over) return Long.MIN_VALUE;"
  }],
  "prId": 5574
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "How about `convertTo` and `convertFrom` instead?\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-23T01:17:22Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+public enum ByteUnit {\n+  BYTE (1),\n+  KiB (1024L),\n+  MiB ((long) Math.pow(1024L, 2L)),\n+  GiB ((long) Math.pow(1024L, 3L)),\n+  TiB ((long) Math.pow(1024L, 4L)),\n+  PiB ((long) Math.pow(1024L, 5L));\n+\n+  private ByteUnit(long multiplier) {\n+    this.multiplier = multiplier;\n+  }\n+\n+  // Interpret the provided number (d) with suffix (u) as this unit type.\n+  // E.g. KiB.interpret(1, MiB) interprets 1MiB as its KiB representation = 1024k\n+  public long interpret(long d, ByteUnit u) {"
  }],
  "prId": 5574
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "If you want to be really correct here, you could avoid overflows by playing with the multipliers instead of converting things to bytes first.\n\nI think what's bugging me is that the semantics of all these methods are a little weird. It seems like you're trying to cap the maximum amount to be represented to `Long.MAX_VALUE` _bytes_ (so that having `Long.MAX_VALUE` PB, for example, would be wrong since you can't convert that to bytes). I'm not sure that's needed, but if you want that, it should be enforced differently (and not here). Otherwise, I'd rework these methods to avoid overflows where possible, and throw exceptions when they would happen.\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-23T01:20:35Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+public enum ByteUnit {\n+  BYTE (1),\n+  KiB (1024L),\n+  MiB ((long) Math.pow(1024L, 2L)),\n+  GiB ((long) Math.pow(1024L, 3L)),\n+  TiB ((long) Math.pow(1024L, 4L)),\n+  PiB ((long) Math.pow(1024L, 5L));\n+\n+  private ByteUnit(long multiplier) {\n+    this.multiplier = multiplier;\n+  }\n+\n+  // Interpret the provided number (d) with suffix (u) as this unit type.\n+  // E.g. KiB.interpret(1, MiB) interprets 1MiB as its KiB representation = 1024k\n+  public long interpret(long d, ByteUnit u) {\n+    return u.toBytes(d) / multiplier;  \n+  }\n+  \n+  // Convert the provided number (d) interpreted as this unit type to unit type (u). \n+  public long convert(long d, ByteUnit u) {\n+    return toBytes(d) / u.multiplier;"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "I saw your comment about using double - I don't think that's a great idea because doubles lose precision as you try to work with values at different orders of magniture.\n\nRegarding the last paragraph of my comment above, I don't think it's going to be an issue in practice; but the code here can be changed to at least avoid overflows where possible. I checked `j.u.c.TimeUnit`, used in the time functions in this class, and it seems to follow the approach you took, than when an overflow is inevitable it caps the value at `Long.MAX_VALUE`. So that part is fine.\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-23T18:40:19Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+public enum ByteUnit {\n+  BYTE (1),\n+  KiB (1024L),\n+  MiB ((long) Math.pow(1024L, 2L)),\n+  GiB ((long) Math.pow(1024L, 3L)),\n+  TiB ((long) Math.pow(1024L, 4L)),\n+  PiB ((long) Math.pow(1024L, 5L));\n+\n+  private ByteUnit(long multiplier) {\n+    this.multiplier = multiplier;\n+  }\n+\n+  // Interpret the provided number (d) with suffix (u) as this unit type.\n+  // E.g. KiB.interpret(1, MiB) interprets 1MiB as its KiB representation = 1024k\n+  public long interpret(long d, ByteUnit u) {\n+    return u.toBytes(d) / multiplier;  \n+  }\n+  \n+  // Convert the provided number (d) interpreted as this unit type to unit type (u). \n+  public long convert(long d, ByteUnit u) {\n+    return toBytes(d) / u.multiplier;"
  }],
  "prId": 5574
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "As I mentioned, I do not think that using double is the correct thing. Not only the API looks weird (`toBytes` returns double while the others return `long`), but doubles do not have infinite precision.\n\nInstead, for example, have this:\n\n```\npublic long convertFrom(long d, ByteUnit u) {\n  return u.convertTo(d, this);\n}\n\npublic long convertTo(long d, ByteUnit u) {\n  if (multiplier > u.multiplier) {\n    long ratio = multiplier / u.multiplier;\n    if (Long.MAX_VALUE / ratio < d) {\n      throw new IllegalArgumentException(\"OVERFLOW!\");\n    }\n    return d * ratio;\n  } else {\n    return d / (u.multiplier / multiplier);\n  }\n}\n```\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-23T23:27:01Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+public enum ByteUnit {\n+  BYTE (1, \"Bytes\"),\n+  KiB (1024, \"KiB\"),\n+  MiB (Math.pow(1024, 2), \"MiB\"),\n+  GiB (Math.pow(1024, 3), \"GiB\"),\n+  TiB (Math.pow(1024, 4), \"TiB\"),\n+  PiB (Math.pow(1024, 5), \"PiB\");\n+\n+  private ByteUnit(double multiplier, String name) {\n+    this.multiplier = multiplier;\n+    this.name = name;\n+  }\n+\n+  // Interpret the provided number (d) with suffix (u) as this unit type.\n+  // E.g. KiB.interpret(1, MiB) interprets 1MiB as its KiB representation = 1024k\n+  public long convertFrom(long d, ByteUnit u) {\n+    double converted = u.toBytes(d) / multiplier;\n+    if (converted > Long.MAX_VALUE)\n+      throw new IllegalArgumentException(\"Converted value (\" + converted + \") \" +\n+        \"exceeds Long.MAX_VALUE for \" + name + \". Try a larger suffix (e.g. MiB instead of KiB)\");\n+    return (long) converted;  \n+  }\n+  \n+  // Convert the provided number (d) interpreted as this unit type to unit type (u). \n+  public long convertTo(long d, ByteUnit u) {\n+    double converted = toBytes(d) / u.multiplier;\n+    if (converted > Long.MAX_VALUE)\n+      throw new IllegalArgumentException(\"Converted value (\" + converted + \") \" +\n+        \"exceeds Long.MAX_VALUE for \" + u.name + \". Try a larger suffix (e.g. MiB instead of KiB)\");\n+\n+    return (long) converted;\n+  }\n+\n+  public double toBytes(long d) {"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Just to illustrate my concern, these are the kinds of things you run into when working with floating-point numbers:\n\n```\nscala> (1E15).asInstanceOf[Long] == (1E15+1).asInstanceOf[Long]\nres0: Boolean = false\n\nscala> (1E16).asInstanceOf[Long] == (1E16+1).asInstanceOf[Long]\nres1: Boolean = true\n```\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-23T23:38:32Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+public enum ByteUnit {\n+  BYTE (1, \"Bytes\"),\n+  KiB (1024, \"KiB\"),\n+  MiB (Math.pow(1024, 2), \"MiB\"),\n+  GiB (Math.pow(1024, 3), \"GiB\"),\n+  TiB (Math.pow(1024, 4), \"TiB\"),\n+  PiB (Math.pow(1024, 5), \"PiB\");\n+\n+  private ByteUnit(double multiplier, String name) {\n+    this.multiplier = multiplier;\n+    this.name = name;\n+  }\n+\n+  // Interpret the provided number (d) with suffix (u) as this unit type.\n+  // E.g. KiB.interpret(1, MiB) interprets 1MiB as its KiB representation = 1024k\n+  public long convertFrom(long d, ByteUnit u) {\n+    double converted = u.toBytes(d) / multiplier;\n+    if (converted > Long.MAX_VALUE)\n+      throw new IllegalArgumentException(\"Converted value (\" + converted + \") \" +\n+        \"exceeds Long.MAX_VALUE for \" + name + \". Try a larger suffix (e.g. MiB instead of KiB)\");\n+    return (long) converted;  \n+  }\n+  \n+  // Convert the provided number (d) interpreted as this unit type to unit type (u). \n+  public long convertTo(long d, ByteUnit u) {\n+    double converted = toBytes(d) / u.multiplier;\n+    if (converted > Long.MAX_VALUE)\n+      throw new IllegalArgumentException(\"Converted value (\" + converted + \") \" +\n+        \"exceeds Long.MAX_VALUE for \" + u.name + \". Try a larger suffix (e.g. MiB instead of KiB)\");\n+\n+    return (long) converted;\n+  }\n+\n+  public double toBytes(long d) {"
  }],
  "prId": 5574
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "These two fields need to be final, as I mentioned before. Just don't initialize them here.\n\n`multiplier`, also, should be a `long`.\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-23T23:27:33Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+public enum ByteUnit {\n+  BYTE (1, \"Bytes\"),\n+  KiB (1024, \"KiB\"),\n+  MiB (Math.pow(1024, 2), \"MiB\"),\n+  GiB (Math.pow(1024, 3), \"GiB\"),\n+  TiB (Math.pow(1024, 4), \"TiB\"),\n+  PiB (Math.pow(1024, 5), \"PiB\");\n+\n+  private ByteUnit(double multiplier, String name) {\n+    this.multiplier = multiplier;\n+    this.name = name;\n+  }\n+\n+  // Interpret the provided number (d) with suffix (u) as this unit type.\n+  // E.g. KiB.interpret(1, MiB) interprets 1MiB as its KiB representation = 1024k\n+  public long convertFrom(long d, ByteUnit u) {\n+    double converted = u.toBytes(d) / multiplier;\n+    if (converted > Long.MAX_VALUE)\n+      throw new IllegalArgumentException(\"Converted value (\" + converted + \") \" +\n+        \"exceeds Long.MAX_VALUE for \" + name + \". Try a larger suffix (e.g. MiB instead of KiB)\");\n+    return (long) converted;  \n+  }\n+  \n+  // Convert the provided number (d) interpreted as this unit type to unit type (u). \n+  public long convertTo(long d, ByteUnit u) {\n+    double converted = toBytes(d) / u.multiplier;\n+    if (converted > Long.MAX_VALUE)\n+      throw new IllegalArgumentException(\"Converted value (\" + converted + \") \" +\n+        \"exceeds Long.MAX_VALUE for \" + u.name + \". Try a larger suffix (e.g. MiB instead of KiB)\");\n+\n+    return (long) converted;\n+  }\n+\n+  public double toBytes(long d) {\n+    if (d < 0) {\n+      throw new IllegalArgumentException(\"Negative size value. Size must be positive: \" + d);\n+    }\n+    return d * multiplier; \n+  }\n+  \n+  public long toKiB(long d) { return convertTo(d, KiB); }\n+  public long toMiB(long d) { return convertTo(d, MiB); }\n+  public long toGiB(long d) { return convertTo(d, GiB); }\n+  public long toTiB(long d) { return convertTo(d, TiB); }\n+  public long toPiB(long d) { return convertTo(d, PiB); }\n+  \n+  private double multiplier = 0;\n+  private String name = \"\";"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "In fact you don't need `name` at all. Just call `name()`.\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-23T23:34:12Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+public enum ByteUnit {\n+  BYTE (1, \"Bytes\"),\n+  KiB (1024, \"KiB\"),\n+  MiB (Math.pow(1024, 2), \"MiB\"),\n+  GiB (Math.pow(1024, 3), \"GiB\"),\n+  TiB (Math.pow(1024, 4), \"TiB\"),\n+  PiB (Math.pow(1024, 5), \"PiB\");\n+\n+  private ByteUnit(double multiplier, String name) {\n+    this.multiplier = multiplier;\n+    this.name = name;\n+  }\n+\n+  // Interpret the provided number (d) with suffix (u) as this unit type.\n+  // E.g. KiB.interpret(1, MiB) interprets 1MiB as its KiB representation = 1024k\n+  public long convertFrom(long d, ByteUnit u) {\n+    double converted = u.toBytes(d) / multiplier;\n+    if (converted > Long.MAX_VALUE)\n+      throw new IllegalArgumentException(\"Converted value (\" + converted + \") \" +\n+        \"exceeds Long.MAX_VALUE for \" + name + \". Try a larger suffix (e.g. MiB instead of KiB)\");\n+    return (long) converted;  \n+  }\n+  \n+  // Convert the provided number (d) interpreted as this unit type to unit type (u). \n+  public long convertTo(long d, ByteUnit u) {\n+    double converted = toBytes(d) / u.multiplier;\n+    if (converted > Long.MAX_VALUE)\n+      throw new IllegalArgumentException(\"Converted value (\" + converted + \") \" +\n+        \"exceeds Long.MAX_VALUE for \" + u.name + \". Try a larger suffix (e.g. MiB instead of KiB)\");\n+\n+    return (long) converted;\n+  }\n+\n+  public double toBytes(long d) {\n+    if (d < 0) {\n+      throw new IllegalArgumentException(\"Negative size value. Size must be positive: \" + d);\n+    }\n+    return d * multiplier; \n+  }\n+  \n+  public long toKiB(long d) { return convertTo(d, KiB); }\n+  public long toMiB(long d) { return convertTo(d, MiB); }\n+  public long toGiB(long d) { return convertTo(d, GiB); }\n+  public long toTiB(long d) { return convertTo(d, TiB); }\n+  public long toPiB(long d) { return convertTo(d, PiB); }\n+  \n+  private double multiplier = 0;\n+  private String name = \"\";"
  }],
  "prId": 5574
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: you need spaces in the string around the `d` value. You could also use `String.format()` although that would probably not make things much cleaner.\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-24T17:23:24Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+public enum ByteUnit {\n+  BYTE (1),\n+  KiB (1024L),\n+  MiB ((long) Math.pow(1024L, 2L)),\n+  GiB ((long) Math.pow(1024L, 3L)),\n+  TiB ((long) Math.pow(1024L, 4L)),\n+  PiB ((long) Math.pow(1024L, 5L));\n+\n+  private ByteUnit(long multiplier) {\n+    this.multiplier = multiplier;\n+  }\n+\n+  // Interpret the provided number (d) with suffix (u) as this unit type.\n+  // E.g. KiB.interpret(1, MiB) interprets 1MiB as its KiB representation = 1024k\n+  public long convertFrom(long d, ByteUnit u) {\n+    return u.convertTo(d, this);\n+  }\n+  \n+  // Convert the provided number (d) interpreted as this unit type to unit type (u). \n+  public long convertTo(long d, ByteUnit u) {\n+    if (multiplier > u.multiplier) {\n+      long ratio = multiplier / u.multiplier;\n+      if (Long.MAX_VALUE / ratio < d) {\n+        throw new IllegalArgumentException(\"Conversion of\" + d + \"exceeds Long.MAX_VALUE in \""
  }],
  "prId": 5574
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: s/suffix/unit?\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-24T17:23:49Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+public enum ByteUnit {\n+  BYTE (1),\n+  KiB (1024L),\n+  MiB ((long) Math.pow(1024L, 2L)),\n+  GiB ((long) Math.pow(1024L, 3L)),\n+  TiB ((long) Math.pow(1024L, 4L)),\n+  PiB ((long) Math.pow(1024L, 5L));\n+\n+  private ByteUnit(long multiplier) {\n+    this.multiplier = multiplier;\n+  }\n+\n+  // Interpret the provided number (d) with suffix (u) as this unit type.\n+  // E.g. KiB.interpret(1, MiB) interprets 1MiB as its KiB representation = 1024k\n+  public long convertFrom(long d, ByteUnit u) {\n+    return u.convertTo(d, this);\n+  }\n+  \n+  // Convert the provided number (d) interpreted as this unit type to unit type (u). \n+  public long convertTo(long d, ByteUnit u) {\n+    if (multiplier > u.multiplier) {\n+      long ratio = multiplier / u.multiplier;\n+      if (Long.MAX_VALUE / ratio < d) {\n+        throw new IllegalArgumentException(\"Conversion of\" + d + \"exceeds Long.MAX_VALUE in \"\n+          + name() + \". Try a larger suffix (e.g. MiB instead of KiB)\");"
  }],
  "prId": 5574
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: fields are generally declared before the constructor.\n",
    "commit": "11f699948b70ed6dadb4653e2c55013fd60a074d",
    "createdAt": "2015-04-24T17:24:06Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.util;\n+\n+public enum ByteUnit {\n+  BYTE (1),\n+  KiB (1024L),\n+  MiB ((long) Math.pow(1024L, 2L)),\n+  GiB ((long) Math.pow(1024L, 3L)),\n+  TiB ((long) Math.pow(1024L, 4L)),\n+  PiB ((long) Math.pow(1024L, 5L));\n+\n+  private ByteUnit(long multiplier) {\n+    this.multiplier = multiplier;\n+  }\n+\n+  // Interpret the provided number (d) with suffix (u) as this unit type.\n+  // E.g. KiB.interpret(1, MiB) interprets 1MiB as its KiB representation = 1024k\n+  public long convertFrom(long d, ByteUnit u) {\n+    return u.convertTo(d, this);\n+  }\n+  \n+  // Convert the provided number (d) interpreted as this unit type to unit type (u). \n+  public long convertTo(long d, ByteUnit u) {\n+    if (multiplier > u.multiplier) {\n+      long ratio = multiplier / u.multiplier;\n+      if (Long.MAX_VALUE / ratio < d) {\n+        throw new IllegalArgumentException(\"Conversion of\" + d + \"exceeds Long.MAX_VALUE in \"\n+          + name() + \". Try a larger suffix (e.g. MiB instead of KiB)\");\n+      }\n+      return d * ratio;\n+    } else {\n+      // Perform operations in this order to avoid potential overflow \n+      // when computing d * multiplier\n+      return d / (u.multiplier / multiplier);\n+    }\n+  }\n+\n+  public double toBytes(long d) {\n+    if (d < 0) {\n+      throw new IllegalArgumentException(\"Negative size value. Size must be positive: \" + d);\n+    }\n+    return d * multiplier; \n+  }\n+  \n+  public long toKiB(long d) { return convertTo(d, KiB); }\n+  public long toMiB(long d) { return convertTo(d, MiB); }\n+  public long toGiB(long d) { return convertTo(d, GiB); }\n+  public long toTiB(long d) { return convertTo(d, TiB); }\n+  public long toPiB(long d) { return convertTo(d, PiB); }\n+  \n+  private final long multiplier;",
    "line": 66
  }],
  "prId": 5574
}]