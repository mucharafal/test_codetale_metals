[{
  "comments": [{
    "author": {
      "login": "aarondav"
    },
    "body": "Please remove this method, it should no longer be used.\n",
    "commit": "cf2c086cd7dcdb0f047dd1eca73e1708d812f25a",
    "createdAt": "2015-04-30T17:51:29Z",
    "diffHunk": "@@ -44,6 +46,17 @@\n   public abstract ManagedBuffer getChunk(long streamId, int chunkIndex);\n \n   /**\n+   * Register the given stream to the associated channel. So these streams can be cleaned up later.\n+   */\n+  public void registerChannel(Channel channel, long streamId) { }\n+\n+  /**\n+   * Indicates that the given channel has been terminated. After this occurs, we are guaranteed not\n+   * to read from the associated streams again, so any state can be cleaned up.\n+   */\n+  public void connectionTerminated(Channel channel) { }\n+\n+  /**"
  }],
  "prId": 5743
}, {
  "comments": [{
    "author": {
      "login": "aarondav"
    },
    "body": "Let's beef up the documentation:\n\nAssociates a stream with a single client connection, which is guaranteed to be the only reader of the stream. The getChunk() method will be called serially on this connection and once the connection is closed, the stream will never be used again, enabling cleanup.\n\nThis must be called before the first getChunk() on the stream, but it may be invoked multiple times with the same channel and stream id.\n",
    "commit": "cf2c086cd7dcdb0f047dd1eca73e1708d812f25a",
    "createdAt": "2015-04-30T17:55:38Z",
    "diffHunk": "@@ -44,6 +46,17 @@\n   public abstract ManagedBuffer getChunk(long streamId, int chunkIndex);\n \n   /**\n+   * Register the given stream to the associated channel. So these streams can be cleaned up later."
  }],
  "prId": 5743
}]