[{
  "comments": [{
    "author": {
      "login": "aarondav"
    },
    "body": "Is this property relevant for the client? Potentially we could just do away with this static map if not.\n",
    "commit": "ff019662055edeaf8d709087e0279afa37011353",
    "createdAt": "2015-04-27T05:37:00Z",
    "diffHunk": "@@ -60,13 +60,19 @@\n   static final String DIGEST = \"DIGEST-MD5\";\n \n   /**\n-   * The quality of protection is just \"auth\". This means that we are doing\n-   * authentication only, we are not supporting integrity or privacy protection of the\n-   * communication channel after authentication. This could be changed to be configurable\n-   * in the future.\n+   * QOP value that includes encryption.\n+   */\n+  static final String QOP_AUTH_CONF = \"auth-conf\";\n+\n+  /**\n+   * QOP value that does not include encryption.\n+   */\n+  static final String QOP_AUTH = \"auth\";\n+\n+  /**\n+   * Common SASL config properties for both client and server.\n    */\n   static final Map<String, String> SASL_PROPS = ImmutableMap.<String, String>builder()\n-    .put(Sasl.QOP, \"auth\")\n     .put(Sasl.SERVER_AUTH, \"true\")"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "I don't think it applies to the client. I'm also not sure whether it's needed at all, but I'll change the code so it's only set for the server.\n",
    "commit": "ff019662055edeaf8d709087e0279afa37011353",
    "createdAt": "2015-04-27T21:02:13Z",
    "diffHunk": "@@ -60,13 +60,19 @@\n   static final String DIGEST = \"DIGEST-MD5\";\n \n   /**\n-   * The quality of protection is just \"auth\". This means that we are doing\n-   * authentication only, we are not supporting integrity or privacy protection of the\n-   * communication channel after authentication. This could be changed to be configurable\n-   * in the future.\n+   * QOP value that includes encryption.\n+   */\n+  static final String QOP_AUTH_CONF = \"auth-conf\";\n+\n+  /**\n+   * QOP value that does not include encryption.\n+   */\n+  static final String QOP_AUTH = \"auth\";\n+\n+  /**\n+   * Common SASL config properties for both client and server.\n    */\n   static final Map<String, String> SASL_PROPS = ImmutableMap.<String, String>builder()\n-    .put(Sasl.QOP, \"auth\")\n     .put(Sasl.SERVER_AUTH, \"true\")"
  }],
  "prId": 5377
}, {
  "comments": [{
    "author": {
      "login": "aarondav"
    },
    "body": "I liked the spelled-out \"quality of protection\" better :)\n",
    "commit": "ff019662055edeaf8d709087e0279afa37011353",
    "createdAt": "2015-04-27T05:37:39Z",
    "diffHunk": "@@ -60,13 +60,19 @@\n   static final String DIGEST = \"DIGEST-MD5\";\n \n   /**\n-   * The quality of protection is just \"auth\". This means that we are doing\n-   * authentication only, we are not supporting integrity or privacy protection of the\n-   * communication channel after authentication. This could be changed to be configurable\n-   * in the future.\n+   * QOP value that includes encryption."
  }],
  "prId": 5377
}, {
  "comments": [{
    "author": {
      "login": "aarondav"
    },
    "body": "I assume this is a comma-separated list of the supported formats, for negotiation? Maybe add a comment to this effect.\n",
    "commit": "ff019662055edeaf8d709087e0279afa37011353",
    "createdAt": "2015-04-27T05:38:27Z",
    "diffHunk": "@@ -75,11 +81,20 @@\n   private final SecretKeyHolder secretKeyHolder;\n   private SaslServer saslServer;\n \n-  public SparkSaslServer(String secretKeyId, SecretKeyHolder secretKeyHolder) {\n+  public SparkSaslServer(\n+      String secretKeyId,\n+      SecretKeyHolder secretKeyHolder,\n+      boolean alwaysEncrypt) {\n     this.secretKeyId = secretKeyId;\n     this.secretKeyHolder = secretKeyHolder;\n+\n+    String qop = alwaysEncrypt ? QOP_AUTH_CONF : String.format(\"%s,%s\", QOP_AUTH_CONF, QOP_AUTH);"
  }],
  "prId": 5377
}]