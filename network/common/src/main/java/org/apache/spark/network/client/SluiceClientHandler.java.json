[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "maybe remove the todo and explain why this is ok instead.\n",
    "commit": "cadfd28f116f0dbca11e580a23caf82060bcf922",
    "createdAt": "2014-10-14T06:03:31Z",
    "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.client;\n+\n+import java.net.SocketAddress;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.spark.network.protocol.StreamChunkId;\n+import org.apache.spark.network.protocol.response.ChunkFetchFailure;\n+import org.apache.spark.network.protocol.response.ChunkFetchSuccess;\n+import org.apache.spark.network.protocol.response.RpcFailure;\n+import org.apache.spark.network.protocol.response.RpcResponse;\n+import org.apache.spark.network.protocol.response.ServerResponse;\n+\n+/**\n+ * Handler that processes server responses, in response to requests issued from [[SluiceClient]].\n+ * It works by tracking the list of outstanding requests (and their callbacks).\n+ *\n+ * Concurrency: thread safe and can be called from multiple threads.\n+ */\n+public class SluiceClientHandler extends SimpleChannelInboundHandler<ServerResponse> {\n+  private final Logger logger = LoggerFactory.getLogger(SluiceClientHandler.class);\n+\n+  private final Map<StreamChunkId, ChunkReceivedCallback> outstandingFetches =\n+      new ConcurrentHashMap<StreamChunkId, ChunkReceivedCallback>();\n+\n+  private final Map<Long, RpcResponseCallback> outstandingRpcs =\n+      new ConcurrentHashMap<Long, RpcResponseCallback>();\n+\n+  public void addFetchRequest(StreamChunkId streamChunkId, ChunkReceivedCallback callback) {\n+    outstandingFetches.put(streamChunkId, callback);\n+  }\n+\n+  public void removeFetchRequest(StreamChunkId streamChunkId) {\n+    outstandingFetches.remove(streamChunkId);\n+  }\n+\n+  public void addRpcRequest(long tag, RpcResponseCallback callback) {\n+    outstandingRpcs.put(tag, callback);\n+  }\n+\n+  public void removeRpcRequest(long tag) {\n+    outstandingRpcs.remove(tag);\n+  }\n+\n+  /**\n+   * Fire the failure callback for all outstanding requests. This is called when we have an\n+   * uncaught exception or pre-mature connection termination.\n+   */\n+  private void failOutstandingRequests(Throwable cause) {\n+    for (Map.Entry<StreamChunkId, ChunkReceivedCallback> entry : outstandingFetches.entrySet()) {\n+      entry.getValue().onFailure(entry.getKey().chunkIndex, cause);\n+    }\n+    // TODO(rxin): Maybe we need to synchronize the access? Otherwise we could clear new requests"
  }],
  "prId": 2753
}]