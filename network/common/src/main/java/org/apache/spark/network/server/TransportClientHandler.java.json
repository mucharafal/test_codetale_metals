[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "try catch?\n",
    "commit": "cadfd28f116f0dbca11e580a23caf82060bcf922",
    "createdAt": "2014-10-27T22:31:48Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.server;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.spark.network.client.TransportClient;\n+import org.apache.spark.network.client.TransportResponseHandler;\n+import org.apache.spark.network.protocol.Message;\n+import org.apache.spark.network.protocol.request.RequestMessage;\n+import org.apache.spark.network.protocol.response.ResponseMessage;\n+import org.apache.spark.network.util.NettyUtils;\n+\n+/**\n+ * A handler which is used for delegating requests to the\n+ * {@link TransportRequestHandler} and responses to the\n+ * {@link org.apache.spark.network.client.TransportResponseHandler}.\n+ *\n+ * All channels created in the transport layer are bidirectional. When the Client initiates a Netty\n+ * Channel with a RequestMessage (which gets handled by the Server's RequestHandler), the Server\n+ * will produce a ResponseMessage (handled by the Client's ResponseHandler). However, the Server\n+ * also gets a handle on the same Channel, so it may then begin to send RequestMessages to the\n+ * Client.\n+ * This means that the Client also needs a RequestHandler and the Server needs a ResponseHandler,\n+ * for the Client's responses to the Server's requests.\n+ */\n+public class TransportClientHandler extends SimpleChannelInboundHandler<Message> {\n+  private final Logger logger = LoggerFactory.getLogger(TransportClientHandler.class);\n+\n+  private final TransportClient client;\n+  private final TransportResponseHandler responseHandler;\n+  private final TransportRequestHandler requestHandler;\n+\n+  public TransportClientHandler(\n+      TransportClient client,\n+      TransportResponseHandler responseHandler,\n+      TransportRequestHandler requestHandler) {\n+    this.client = client;\n+    this.responseHandler = responseHandler;\n+    this.requestHandler = requestHandler;\n+  }\n+\n+  public TransportClient getClient() {\n+    return client;\n+  }\n+\n+  @Override\n+  public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n+    logger.warn(\"Exception in connection from \" + NettyUtils.getRemoteAddress(ctx.channel()),\n+      cause);\n+    requestHandler.exceptionCaught(cause);\n+    responseHandler.exceptionCaught(cause);\n+    ctx.close();\n+  }\n+\n+  @Override\n+  public void channelUnregistered(ChannelHandlerContext ctx) throws Exception {\n+    requestHandler.channelUnregistered();"
  }],
  "prId": 2753
}]