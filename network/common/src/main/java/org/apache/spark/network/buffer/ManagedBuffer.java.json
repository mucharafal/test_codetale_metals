[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "createInputStream\n",
    "commit": "cadfd28f116f0dbca11e580a23caf82060bcf922",
    "createdAt": "2014-10-27T21:19:44Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.buffer;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * This interface provides an immutable view for data in the form of bytes. The implementation\n+ * should specify how the data is provided:\n+ *\n+ * - {@link FileSegmentManagedBuffer}: data backed by part of a file\n+ * - {@link NioManagedBuffer}: data backed by a NIO ByteBuffer\n+ * - {@link NettyManagedBuffer}: data backed by a Netty ByteBuf\n+ *\n+ * The concrete buffer implementation might be managed outside the JVM garbage collector.\n+ * For example, in the case of {@link NettyManagedBuffer}, the buffers are reference counted.\n+ * In that case, if the buffer is going to be passed around to a different thread, retain/release\n+ * should be called.\n+ */\n+public abstract class ManagedBuffer {\n+\n+  /** Number of bytes of the data. */\n+  public abstract long size();\n+\n+  /**\n+   * Exposes this buffer's data as an NIO ByteBuffer. Changing the position and limit of the\n+   * returned ByteBuffer should not affect the content of this buffer.\n+   */\n+  public abstract ByteBuffer nioByteBuffer() throws IOException;\n+\n+  /**\n+   * Exposes this buffer's data as an InputStream. The underlying implementation does not\n+   * necessarily check for the length of bytes read, so the caller is responsible for making sure\n+   * it does not go over the limit.\n+   */\n+  public abstract InputStream inputStream() throws IOException;"
  }],
  "prId": 2753
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "maybe comment on in the future, everything in spark should just operate on ManagedBuffer abstraction and we should deprecate nio bytebuffer.\n",
    "commit": "cadfd28f116f0dbca11e580a23caf82060bcf922",
    "createdAt": "2014-10-27T21:21:21Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.buffer;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * This interface provides an immutable view for data in the form of bytes. The implementation\n+ * should specify how the data is provided:\n+ *\n+ * - {@link FileSegmentManagedBuffer}: data backed by part of a file\n+ * - {@link NioManagedBuffer}: data backed by a NIO ByteBuffer\n+ * - {@link NettyManagedBuffer}: data backed by a Netty ByteBuf\n+ *\n+ * The concrete buffer implementation might be managed outside the JVM garbage collector.\n+ * For example, in the case of {@link NettyManagedBuffer}, the buffers are reference counted.\n+ * In that case, if the buffer is going to be passed around to a different thread, retain/release\n+ * should be called.\n+ */\n+public abstract class ManagedBuffer {\n+\n+  /** Number of bytes of the data. */\n+  public abstract long size();\n+\n+  /**\n+   * Exposes this buffer's data as an NIO ByteBuffer. Changing the position and limit of the\n+   * returned ByteBuffer should not affect the content of this buffer.\n+   */\n+  public abstract ByteBuffer nioByteBuffer() throws IOException;"
  }],
  "prId": 2753
}]