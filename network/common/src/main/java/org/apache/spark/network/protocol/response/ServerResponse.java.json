[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "nitpick: space after switch\n",
    "commit": "cadfd28f116f0dbca11e580a23caf82060bcf922",
    "createdAt": "2014-10-14T06:58:35Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.protocol.response;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import org.apache.spark.network.protocol.Encodable;\n+\n+/**\n+ * Messages from server to client (usually in response to some\n+ * {@link org.apache.spark.network.protocol.request.ClientRequest}.\n+ */\n+public interface ServerResponse extends Encodable {\n+  /** Used to identify this response type. */\n+  Type type();\n+\n+  /**\n+   * Preceding every serialized ServerResponse is the type, which allows us to deserialize\n+   * the response.\n+   */\n+  public static enum Type implements Encodable {\n+    ChunkFetchSuccess(0), ChunkFetchFailure(1), RpcResponse(2), RpcFailure(3);\n+\n+    private final byte id;\n+\n+    private Type(int id) {\n+      assert id < 128 : \"Cannot have more than 128 response types\";\n+      this.id = (byte) id;\n+    }\n+\n+    public byte id() { return id; }\n+\n+    @Override public int encodedLength() { return 1; }\n+\n+    @Override public void encode(ByteBuf buf) { buf.writeByte(id); }\n+\n+    public static Type decode(ByteBuf buf) {\n+      byte id = buf.readByte();\n+      switch(id) {"
  }],
  "prId": 2753
}]