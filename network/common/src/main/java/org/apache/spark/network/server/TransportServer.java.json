[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "better check for whether this is initialized (maybe use negative port number in the beginning), and throw IllegalStateException if it is not.\n",
    "commit": "cadfd28f116f0dbca11e580a23caf82060bcf922",
    "createdAt": "2014-10-28T04:14:49Z",
    "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.server;\n+\n+import java.io.Closeable;\n+import java.net.InetSocketAddress;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelOption;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.socket.SocketChannel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.spark.network.TransportContext;\n+import org.apache.spark.network.util.IOMode;\n+import org.apache.spark.network.util.NettyUtils;\n+import org.apache.spark.network.util.TransportConf;\n+\n+/**\n+ * Server for the efficient, low-level streaming service.\n+ */\n+public class TransportServer implements Closeable {\n+  private final Logger logger = LoggerFactory.getLogger(TransportServer.class);\n+\n+  private final TransportContext context;\n+  private final TransportConf conf;\n+\n+  private ServerBootstrap bootstrap;\n+  private ChannelFuture channelFuture;\n+  private int port;\n+\n+  public TransportServer(TransportContext context) {\n+    this.context = context;\n+    this.conf = context.getConf();\n+\n+    init();\n+  }\n+\n+  public int getPort() { return port; }"
  }],
  "prId": 2753
}]