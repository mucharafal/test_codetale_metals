[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "should we mutate some state in here and assert that the state is mutated?\n",
    "commit": "33a64a981863642403f5dbe6df81e8c45d8d29ba",
    "createdAt": "2014-11-06T21:41:51Z",
    "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.shuffle;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Random;\n+import java.util.concurrent.Executor;\n+\n+import com.google.common.util.concurrent.MoreExecutors;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ExternalShuffleCleanupSuite {\n+\n+  // Same-thread Executor used to ensure cleanup happens synchronously in test thread.\n+  Executor sameThreadExecutor = MoreExecutors.sameThreadExecutor();\n+\n+  @Test\n+  public void noCleanupAndCleanup() throws IOException {\n+    TestShuffleDataContext dataContext = createSomeData();\n+\n+    ExternalShuffleBlockManager manager = new ExternalShuffleBlockManager(sameThreadExecutor);\n+    manager.registerExecutor(\"app\", \"exec0\", dataContext.createExecutorInfo(\"shuffleMgr\"));\n+    manager.applicationRemoved(\"app\", false /* cleanup */);\n+\n+    assertStillThere(dataContext);\n+\n+    manager.registerExecutor(\"app\", \"exec1\", dataContext.createExecutorInfo(\"shuffleMgr\"));\n+    manager.applicationRemoved(\"app\", true /* cleanup */);\n+\n+    assertCleanedUp(dataContext);\n+  }\n+\n+  @Test\n+  public void cleanupUsesExecutor() throws IOException {\n+    TestShuffleDataContext dataContext = createSomeData();\n+\n+    // Executor which does nothing to ensure we're actually using it.\n+    Executor noThreadExecutor = new Executor() {\n+      @Override public void execute(Runnable runnable) { /* do nothing */ }"
  }],
  "prId": 3126
}]