[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "need new line above this\n",
    "commit": "48b622d262d0ab580ecd452ab73cee903f8d1d84",
    "createdAt": "2014-11-05T08:00:09Z",
    "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.shuffle;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+import org.apache.spark.network.TestUtils;\n+import org.apache.spark.network.TransportContext;\n+import org.apache.spark.network.sasl.SaslRpcHandler;\n+import org.apache.spark.network.sasl.SecretKeyHolder;\n+import org.apache.spark.network.server.RpcHandler;\n+import org.apache.spark.network.server.TransportServer;\n+import org.apache.spark.network.util.SystemPropertyConfigProvider;\n+import org.apache.spark.network.util.TransportConf;\n+\n+public class ExternalShuffleSecuritySuite {\n+\n+  TransportConf conf = new TransportConf(new SystemPropertyConfigProvider());\n+  TransportServer server;\n+\n+  @Before\n+  public void beforeEach() {\n+    RpcHandler handler = new SaslRpcHandler(new ExternalShuffleBlockHandler(),\n+      new TestSecretKeyHolder(\"my-app-id\", \"secret\"));\n+    TransportContext context = new TransportContext(conf, handler);\n+    this.server = context.createServer();\n+  }\n+\n+  @After\n+  public void afterEach() {\n+    if (server != null) {\n+      server.close();\n+      server = null;\n+    }\n+  }\n+\n+  @Test\n+  public void testValid() {\n+    validate(\"my-app-id\", \"secret\");\n+  }\n+\n+  @Test\n+  public void testBadAppId() {\n+    try {\n+      validate(\"wrong-app-id\", \"secret\");\n+    } catch (Exception e) {\n+      assertTrue(e.getMessage(), e.getMessage().contains(\"Wrong appId!\"));\n+    }\n+  }\n+\n+  @Test\n+  public void testBadSecret() {\n+    try {\n+      validate(\"my-app-id\", \"bad-secret\");\n+    } catch (Exception e) {\n+      assertTrue(e.getMessage(), e.getMessage().contains(\"Mismatched response\"));\n+    }\n+  }\n+\n+  /** Creates an ExternalShuffleClient and attempts to register with the server. */\n+  private void validate(String appId, String secretKey) {\n+    ExternalShuffleClient client =\n+      new ExternalShuffleClient(conf, new TestSecretKeyHolder(appId, secretKey), true);\n+    client.init(appId);\n+    // Registration either succeeds or throws an exception.\n+    client.registerWithShuffleServer(TestUtils.getLocalHost(), server.getPort(), \"exec0\",\n+      new ExecutorShuffleInfo(new String[0], 0, \"\"));\n+  }\n+\n+  /** Provides a secret key holder which always returns the given secret key, for a single appId. */\n+  static class TestSecretKeyHolder implements SecretKeyHolder {\n+    private final String appId;\n+    private final String secretKey;\n+\n+    TestSecretKeyHolder(String appId, String secretKey) {\n+      this.appId = appId;\n+      this.secretKey = secretKey;\n+    }\n+\n+    @Override\n+    public String getSaslUser(String appId) {\n+      return \"user\";\n+    }\n+    @Override"
  }],
  "prId": 3108
}]