[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "can u make sure somewhere we log the time it takes to establish a connection? we should definitely log it in the ClientFactory itself.\n",
    "commit": "3481718baf66f4c02568f08d7011af19a2c47f4b",
    "createdAt": "2014-11-04T08:48:57Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.sasl;\n+\n+import java.util.concurrent.ConcurrentMap;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.collect.Maps;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.spark.network.client.RpcResponseCallback;\n+import org.apache.spark.network.client.TransportClient;\n+import org.apache.spark.network.protocol.Encodable;\n+import org.apache.spark.network.server.RpcHandler;\n+import org.apache.spark.network.server.StreamManager;\n+\n+/**\n+ * RPC Handler which performs SASL authentication before delegating to a child RPC handler.\n+ * The delegate will only receive messages if the given connection has been successfully\n+ * authenticated. A connection may be authenticated at most once.\n+ *\n+ * Note that the authentication process consists of multiple challenge-response pairs, each of\n+ * which are individual RPCs.\n+ */\n+public class SaslRpcHandler extends RpcHandler {\n+  private final Logger logger = LoggerFactory.getLogger(SaslRpcHandler.class);\n+\n+  /** RpcHandler we will delegate for authenticated connections. */\n+  private final RpcHandler delegate;\n+\n+  /** Class which provides secret keys which are shared by server and client on a per-app basis. */\n+  private final SecretKeyHolder secretKeyHolder;\n+\n+  /** Maps each channel to its SASL authentication state. */\n+  private final ConcurrentMap<TransportClient, SparkSaslServer> channelAuthenticationMap;\n+\n+  public SaslRpcHandler(RpcHandler delegate, SecretKeyHolder secretKeyHolder) {\n+    this.delegate = delegate;\n+    this.secretKeyHolder = secretKeyHolder;\n+    this.channelAuthenticationMap = Maps.newConcurrentMap();\n+  }\n+\n+  @Override\n+  public void receive(TransportClient client, byte[] message, RpcResponseCallback callback) {\n+    SparkSaslServer saslServer = channelAuthenticationMap.get(client);\n+    if (saslServer != null && saslServer.isComplete()) {\n+      // Authentication complete, delegate to base handler.\n+      delegate.receive(client, message, callback);\n+      return;\n+    }\n+\n+    SaslMessage saslMessage = SaslMessage.decode(Unpooled.wrappedBuffer(message));\n+\n+    if (saslServer == null) {",
    "line": 72
  }, {
    "author": {
      "login": "aarondav"
    },
    "body": "Added it at the debug level in ClientFactory.\n",
    "commit": "3481718baf66f4c02568f08d7011af19a2c47f4b",
    "createdAt": "2014-11-04T16:59:19Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.sasl;\n+\n+import java.util.concurrent.ConcurrentMap;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.collect.Maps;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.spark.network.client.RpcResponseCallback;\n+import org.apache.spark.network.client.TransportClient;\n+import org.apache.spark.network.protocol.Encodable;\n+import org.apache.spark.network.server.RpcHandler;\n+import org.apache.spark.network.server.StreamManager;\n+\n+/**\n+ * RPC Handler which performs SASL authentication before delegating to a child RPC handler.\n+ * The delegate will only receive messages if the given connection has been successfully\n+ * authenticated. A connection may be authenticated at most once.\n+ *\n+ * Note that the authentication process consists of multiple challenge-response pairs, each of\n+ * which are individual RPCs.\n+ */\n+public class SaslRpcHandler extends RpcHandler {\n+  private final Logger logger = LoggerFactory.getLogger(SaslRpcHandler.class);\n+\n+  /** RpcHandler we will delegate for authenticated connections. */\n+  private final RpcHandler delegate;\n+\n+  /** Class which provides secret keys which are shared by server and client on a per-app basis. */\n+  private final SecretKeyHolder secretKeyHolder;\n+\n+  /** Maps each channel to its SASL authentication state. */\n+  private final ConcurrentMap<TransportClient, SparkSaslServer> channelAuthenticationMap;\n+\n+  public SaslRpcHandler(RpcHandler delegate, SecretKeyHolder secretKeyHolder) {\n+    this.delegate = delegate;\n+    this.secretKeyHolder = secretKeyHolder;\n+    this.channelAuthenticationMap = Maps.newConcurrentMap();\n+  }\n+\n+  @Override\n+  public void receive(TransportClient client, byte[] message, RpcResponseCallback callback) {\n+    SparkSaslServer saslServer = channelAuthenticationMap.get(client);\n+    if (saslServer != null && saslServer.isComplete()) {\n+      // Authentication complete, delegate to base handler.\n+      delegate.receive(client, message, callback);\n+      return;\n+    }\n+\n+    SaslMessage saslMessage = SaslMessage.decode(Unpooled.wrappedBuffer(message));\n+\n+    if (saslServer == null) {",
    "line": 72
  }],
  "prId": 3087
}]