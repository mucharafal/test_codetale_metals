[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "i don't have a good suggestion yet, but OneForOneStreamManager is not the best name.\n",
    "commit": "4d1f8c174f362028a6a439a567bc2241f82a61c6",
    "createdAt": "2014-10-31T05:43:12Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.shuffle;\n+\n+import java.util.Arrays;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.spark.network.buffer.ManagedBuffer;\n+import org.apache.spark.network.client.ChunkReceivedCallback;\n+import org.apache.spark.network.client.RpcResponseCallback;\n+import org.apache.spark.network.client.TransportClient;\n+import org.apache.spark.network.util.JavaUtils;\n+\n+/**\n+ * Simple wrapper on top of a TransportClient which interprets each chunk as a whole block, and\n+ * invokes the BlockFetchingListener appropriately. This class is agnostic to the actual RPC\n+ * handler, as long as there is a single \"open blocks\" message which returns a ShuffleStreamHandle,\n+ * and Java serialization is used.\n+ *\n+ * Note that this typically corresponds to a\n+ * {@link org.apache.spark.network.server.OneForOneStreamManager} on the server side.\n+ */\n+public class OneForOneBlockFetcher {",
    "line": 40
  }, {
    "author": {
      "login": "aarondav"
    },
    "body": "Let me know if you find a better name! :)\n",
    "commit": "4d1f8c174f362028a6a439a567bc2241f82a61c6",
    "createdAt": "2014-10-31T23:37:02Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.shuffle;\n+\n+import java.util.Arrays;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.spark.network.buffer.ManagedBuffer;\n+import org.apache.spark.network.client.ChunkReceivedCallback;\n+import org.apache.spark.network.client.RpcResponseCallback;\n+import org.apache.spark.network.client.TransportClient;\n+import org.apache.spark.network.util.JavaUtils;\n+\n+/**\n+ * Simple wrapper on top of a TransportClient which interprets each chunk as a whole block, and\n+ * invokes the BlockFetchingListener appropriately. This class is agnostic to the actual RPC\n+ * handler, as long as there is a single \"open blocks\" message which returns a ShuffleStreamHandle,\n+ * and Java serialization is used.\n+ *\n+ * Note that this typically corresponds to a\n+ * {@link org.apache.spark.network.server.OneForOneStreamManager} on the server side.\n+ */\n+public class OneForOneBlockFetcher {",
    "line": 40
  }],
  "prId": 3001
}]