[{
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "nit: ordering\n",
    "commit": "e444d119ec46d70b6d319b6bb4c6bc109935d5d5",
    "createdAt": "2015-10-22T16:22:56Z",
    "diffHunk": "@@ -22,6 +22,7 @@\n \n import com.google.common.base.Preconditions;\n import com.google.common.collect.Lists;\n+import org.apache.spark.network.buffer.ManagedBuffer;"
  }],
  "prId": 9227
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "I think we don't need this change. Right?\n",
    "commit": "e444d119ec46d70b6d319b6bb4c6bc109935d5d5",
    "createdAt": "2015-11-05T19:03:24Z",
    "diffHunk": "@@ -137,9 +137,10 @@ public void registerWithShuffleServer(\n       String execId,\n       ExecutorShuffleInfo executorInfo) throws IOException {\n     checkInit();\n-    TransportClient client = clientFactory.createClient(host, port);\n+    TransportClient client = clientFactory.createUnmanagedClient(host, port);"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "I think it's fine. This executor won't talk to this particular shuffle service after this, so it can close its connection right away.\n",
    "commit": "e444d119ec46d70b6d319b6bb4c6bc109935d5d5",
    "createdAt": "2015-11-05T19:42:27Z",
    "diffHunk": "@@ -137,9 +137,10 @@ public void registerWithShuffleServer(\n       String execId,\n       ExecutorShuffleInfo executorInfo) throws IOException {\n     checkInit();\n-    TransportClient client = clientFactory.createClient(host, port);\n+    TransportClient client = clientFactory.createUnmanagedClient(host, port);"
  }],
  "prId": 9227
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "You need to add a `try..finally` here, otherwise you may not close the connection.\n",
    "commit": "e444d119ec46d70b6d319b6bb4c6bc109935d5d5",
    "createdAt": "2015-11-10T00:47:50Z",
    "diffHunk": "@@ -137,9 +137,10 @@ public void registerWithShuffleServer(\n       String execId,\n       ExecutorShuffleInfo executorInfo) throws IOException {\n     checkInit();\n-    TransportClient client = clientFactory.createClient(host, port);\n+    TransportClient client = clientFactory.createUnmanagedClient(host, port);\n     byte[] registerMessage = new RegisterExecutor(appId, execId, executorInfo).toByteArray();\n     client.sendRpcSync(registerMessage, 5000 /* timeoutMs */);\n+    client.close();"
  }],
  "prId": 9227
}]