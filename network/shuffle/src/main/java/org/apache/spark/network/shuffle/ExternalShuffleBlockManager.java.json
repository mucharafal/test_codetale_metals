[{
  "comments": [{
    "author": {
      "login": "aarondav"
    },
    "body": "The following 32 lines are the only material change in this entire PR. The rest is utility functions imported from core Utils, Java cruft around lambdas and classes, and updating/adding tests.\n",
    "commit": "33a64a981863642403f5dbe6df81e8c45d8d29ba",
    "createdAt": "2014-11-06T01:18:06Z",
    "diffHunk": "@@ -95,6 +111,56 @@ public ManagedBuffer getBlockData(String appId, String execId, String blockId) {\n   }\n \n   /**",
    "line": 67
  }],
  "prId": 3126
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "This is confusing because elsewhere when we say `executors` we mean Spark executors. I think we should call this something else `directoryCleaner` or something (and update the comment to say \"Java executor\" instead)\n",
    "commit": "33a64a981863642403f5dbe6df81e8c45d8d29ba",
    "createdAt": "2014-11-06T21:40:13Z",
    "diffHunk": "@@ -43,13 +50,22 @@\n public class ExternalShuffleBlockManager {\n   private final Logger logger = LoggerFactory.getLogger(ExternalShuffleBlockManager.class);\n \n-  // Map from \"appId-execId\" to the executor's configuration.\n-  private final ConcurrentHashMap<String, ExecutorShuffleInfo> executors =\n-    new ConcurrentHashMap<String, ExecutorShuffleInfo>();\n+  // Map containing all registered executors' metadata.\n+  private final ConcurrentMap<AppExecId, ExecutorShuffleInfo> executors;\n \n-  // Returns an id suitable for a single executor within a single application.\n-  private String getAppExecId(String appId, String execId) {\n-    return appId + \"-\" + execId;\n+  // Single-threaded executor used to perform expensive recursive directory deletion.\n+  private final Executor directoryCleanupExecutor;"
  }],
  "prId": 3126
}]