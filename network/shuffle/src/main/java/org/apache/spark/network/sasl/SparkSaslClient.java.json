[{
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "Why was this (and other classes) changed to java?  \n",
    "commit": "3481718baf66f4c02568f08d7011af19a2c47f4b",
    "createdAt": "2014-11-04T14:12:28Z",
    "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.sasl;\n+\n+import javax.security.auth.callback.Callback;\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.auth.callback.NameCallback;\n+import javax.security.auth.callback.PasswordCallback;\n+import javax.security.auth.callback.UnsupportedCallbackException;\n+import javax.security.sasl.RealmCallback;\n+import javax.security.sasl.RealmChoiceCallback;\n+import javax.security.sasl.Sasl;\n+import javax.security.sasl.SaslClient;\n+import javax.security.sasl.SaslException;\n+import java.io.IOException;\n+\n+import com.google.common.base.Throwables;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.spark.network.sasl.SparkSaslServer.*;\n+\n+/**\n+ * A SASL Client for Spark which simply keeps track of the state of a single SASL session, from the\n+ * initial state to the \"authenticated\" state. This client initializes the protocol via a\n+ * firstToken, which is then followed by a set of challenges and responses.\n+ */\n+public class SparkSaslClient {",
    "line": 43
  }, {
    "author": {
      "login": "aarondav"
    },
    "body": "For inclusion in the YARN node manager with minimal dependencies (no dependencies on Spark or Scala).\n",
    "commit": "3481718baf66f4c02568f08d7011af19a2c47f4b",
    "createdAt": "2014-11-04T17:00:06Z",
    "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.sasl;\n+\n+import javax.security.auth.callback.Callback;\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.auth.callback.NameCallback;\n+import javax.security.auth.callback.PasswordCallback;\n+import javax.security.auth.callback.UnsupportedCallbackException;\n+import javax.security.sasl.RealmCallback;\n+import javax.security.sasl.RealmChoiceCallback;\n+import javax.security.sasl.Sasl;\n+import javax.security.sasl.SaslClient;\n+import javax.security.sasl.SaslException;\n+import java.io.IOException;\n+\n+import com.google.common.base.Throwables;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.spark.network.sasl.SparkSaslServer.*;\n+\n+/**\n+ * A SASL Client for Spark which simply keeps track of the state of a single SASL session, from the\n+ * initial state to the \"authenticated\" state. This client initializes the protocol via a\n+ * firstToken, which is then followed by a set of challenges and responses.\n+ */\n+public class SparkSaslClient {",
    "line": 43
  }],
  "prId": 3087
}]