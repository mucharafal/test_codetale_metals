[{
  "comments": [{
    "author": {
      "login": "mgaido91"
    },
    "body": "maybe a `map(...).getOrElse(..)` would be more readable.",
    "commit": "54cb6f1342e8786f4a643d175645c157d918dc96",
    "createdAt": "2019-04-23T10:47:24Z",
    "diffHunk": "@@ -53,8 +54,10 @@ case class AvroDataToCatalyst(\n \n   @transient private lazy val avroSchema = new Schema.Parser().parse(jsonFormatSchema)\n \n-  @transient private lazy val reader = new GenericDatumReader[Any](avroSchema)\n-\n+  @transient private lazy val reader =\n+    writerJsonFormatSchema.fold(new GenericDatumReader[Any](avroSchema))("
  }, {
    "author": {
      "login": "giamo"
    },
    "body": "Changed üëç ",
    "commit": "54cb6f1342e8786f4a643d175645c157d918dc96",
    "createdAt": "2019-04-30T14:15:30Z",
    "diffHunk": "@@ -53,8 +54,10 @@ case class AvroDataToCatalyst(\n \n   @transient private lazy val avroSchema = new Schema.Parser().parse(jsonFormatSchema)\n \n-  @transient private lazy val reader = new GenericDatumReader[Any](avroSchema)\n-\n+  @transient private lazy val reader =\n+    writerJsonFormatSchema.fold(new GenericDatumReader[Any](avroSchema))("
  }],
  "prId": 24405
}, {
  "comments": [{
    "author": {
      "login": "gengliangwang"
    },
    "body": "So either writerJsonFormatSchema or jsonFormatSchema is used. In such case, if writerJsonFormatSchema is present, why not set writerJsonFormatSchema as jsonFormatSchema without changing the API?\r\nCould you explain more how the API is called?",
    "commit": "54cb6f1342e8786f4a643d175645c157d918dc96",
    "createdAt": "2019-07-17T16:31:40Z",
    "diffHunk": "@@ -53,7 +54,9 @@ case class AvroDataToCatalyst(\n \n   @transient private lazy val avroSchema = new Schema.Parser().parse(jsonFormatSchema)\n \n-  @transient private lazy val reader = new GenericDatumReader[Any](avroSchema)\n+  @transient private lazy val reader = writerJsonFormatSchema"
  }, {
    "author": {
      "login": "giamo"
    },
    "body": "No, if the writerJsonFormatSchema is set then both writerJsonFormatSchema and jsonFormatSchema are used (in the `.map`), otherwise only the jsonFormatSchema is used (in the `.getOrElse`).\r\n\r\nIn the first case the GenericDatumReader is built with the constructor accepting the two schemas (reader and writer) while in the second case it's built with the constructor accepting only one schema (which is assumed to be the same for both operations): https://avro.apache.org/docs/1.8.2/api/java/org/apache/avro/generic/GenericDatumReader.html\r\n\r\nPlease refer to the Jira ticket for a more detailed explanation: https://issues.apache.org/jira/browse/SPARK-27506",
    "commit": "54cb6f1342e8786f4a643d175645c157d918dc96",
    "createdAt": "2019-07-17T19:10:23Z",
    "diffHunk": "@@ -53,7 +54,9 @@ case class AvroDataToCatalyst(\n \n   @transient private lazy val avroSchema = new Schema.Parser().parse(jsonFormatSchema)\n \n-  @transient private lazy val reader = new GenericDatumReader[Any](avroSchema)\n+  @transient private lazy val reader = writerJsonFormatSchema"
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "I see. Sorry for the misunderstanding. \r\nI am now +1 for the proposal\r\n",
    "commit": "54cb6f1342e8786f4a643d175645c157d918dc96",
    "createdAt": "2019-07-18T06:09:20Z",
    "diffHunk": "@@ -53,7 +54,9 @@ case class AvroDataToCatalyst(\n \n   @transient private lazy val avroSchema = new Schema.Parser().parse(jsonFormatSchema)\n \n-  @transient private lazy val reader = new GenericDatumReader[Any](avroSchema)\n+  @transient private lazy val reader = writerJsonFormatSchema"
  }],
  "prId": 24405
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "It's `writerJsonFormatSchema` but why we need to set in reader?",
    "commit": "54cb6f1342e8786f4a643d175645c157d918dc96",
    "createdAt": "2019-08-13T16:00:46Z",
    "diffHunk": "@@ -53,7 +54,9 @@ case class AvroDataToCatalyst(\n \n   @transient private lazy val avroSchema = new Schema.Parser().parse(jsonFormatSchema)\n \n-  @transient private lazy val reader = new GenericDatumReader[Any](avroSchema)\n+  @transient private lazy val reader = writerJsonFormatSchema"
  }, {
    "author": {
      "login": "giamo"
    },
    "body": "It's the whole point of the PR, it's explained in the description and in the Jira ticket ",
    "commit": "54cb6f1342e8786f4a643d175645c157d918dc96",
    "createdAt": "2019-08-15T08:45:00Z",
    "diffHunk": "@@ -53,7 +54,9 @@ case class AvroDataToCatalyst(\n \n   @transient private lazy val avroSchema = new Schema.Parser().parse(jsonFormatSchema)\n \n-  @transient private lazy val reader = new GenericDatumReader[Any](avroSchema)\n+  @transient private lazy val reader = writerJsonFormatSchema"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I am saying it doesn't look clear unless you read the whole PR description and JIRA.",
    "commit": "54cb6f1342e8786f4a643d175645c157d918dc96",
    "createdAt": "2019-08-23T02:46:29Z",
    "diffHunk": "@@ -53,7 +54,9 @@ case class AvroDataToCatalyst(\n \n   @transient private lazy val avroSchema = new Schema.Parser().parse(jsonFormatSchema)\n \n-  @transient private lazy val reader = new GenericDatumReader[Any](avroSchema)\n+  @transient private lazy val reader = writerJsonFormatSchema"
  }],
  "prId": 24405
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Can we rename it with proper docs? Two avro schemas look super confusing",
    "commit": "54cb6f1342e8786f4a643d175645c157d918dc96",
    "createdAt": "2019-08-13T16:01:10Z",
    "diffHunk": "@@ -33,7 +33,8 @@ import org.apache.spark.sql.types._\n case class AvroDataToCatalyst(\n     child: Expression,\n     jsonFormatSchema: String,\n-    options: Map[String, String])\n+    options: Map[String, String],\n+    writerJsonFormatSchema: Option[String] = None)"
  }],
  "prId": 24405
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "do you mean the reader must use a schema that matches the avro encoded binary, but we can use a compatible schema in `AvroDeserializer`, which can do schema evolution?",
    "commit": "54cb6f1342e8786f4a643d175645c157d918dc96",
    "createdAt": "2019-08-14T11:58:16Z",
    "diffHunk": "@@ -53,7 +54,9 @@ case class AvroDataToCatalyst(\n \n   @transient private lazy val avroSchema = new Schema.Parser().parse(jsonFormatSchema)\n \n-  @transient private lazy val reader = new GenericDatumReader[Any](avroSchema)",
    "line": 8
  }, {
    "author": {
      "login": "giamo"
    },
    "body": "Exactly, to read data you can use a compatible evolved schema, but you also need to pass the schema with which the data was originally serialized. Using this GenericDatumReader API https://avro.apache.org/docs/1.8.2/api/java/org/apache/avro/generic/GenericDatumReader.html#GenericDatumReader(org.apache.avro.Schema,%20org.apache.avro.Schema)",
    "commit": "54cb6f1342e8786f4a643d175645c157d918dc96",
    "createdAt": "2019-08-15T08:47:39Z",
    "diffHunk": "@@ -53,7 +54,9 @@ case class AvroDataToCatalyst(\n \n   @transient private lazy val avroSchema = new Schema.Parser().parse(jsonFormatSchema)\n \n-  @transient private lazy val reader = new GenericDatumReader[Any](avroSchema)",
    "line": 8
  }],
  "prId": 24405
}]