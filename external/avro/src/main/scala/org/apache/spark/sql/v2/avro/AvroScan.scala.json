[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "To get a new Hadoop conf, we need to use `asCaseSensitiveMap` like the following.\r\n```\r\n    val caseSensitiveMap = options.asCaseSensitiveMap.asScala.toMap\r\n    // Hadoop Configurations are case sensitive.\r\n    val hadoopConf = sparkSession.sessionState.newHadoopConfWithOptions(caseSensitiveMap)\r\n```",
    "commit": "fc98bd53130f67a4ea140d70a393c0ba4ba9c83e",
    "createdAt": "2019-07-05T02:56:47Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.v2.avro\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.fs.Path\n+\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.execution.datasources.PartitioningAwareFileIndex\n+import org.apache.spark.sql.execution.datasources.v2.FileScan\n+import org.apache.spark.sql.sources.v2.reader.PartitionReaderFactory\n+import org.apache.spark.sql.types.StructType\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+import org.apache.spark.util.SerializableConfiguration\n+\n+case class AvroScan(\n+    sparkSession: SparkSession,\n+    fileIndex: PartitioningAwareFileIndex,\n+    dataSchema: StructType,\n+    readDataSchema: StructType,\n+    readPartitionSchema: StructType,\n+    options: CaseInsensitiveStringMap)\n+  extends FileScan(sparkSession, fileIndex, readDataSchema, readPartitionSchema) {\n+    override def isSplitable(path: Path): Boolean = true\n+\n+    override def createReaderFactory(): PartitionReaderFactory = {\n+      val optionsAsScala = options.asScala.toMap\n+      val hadoopConf = sparkSession.sessionState.newHadoopConfWithOptions(optionsAsScala)"
  }],
  "prId": 25017
}]