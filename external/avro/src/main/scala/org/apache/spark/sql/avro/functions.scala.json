[{
  "comments": [{
    "author": {
      "login": "mgaido91"
    },
    "body": "I think this case is rare enough to set this to `None` by default at least.",
    "commit": "54cb6f1342e8786f4a643d175645c157d918dc96",
    "createdAt": "2019-05-08T14:14:15Z",
    "diffHunk": "@@ -28,39 +28,59 @@ object functions {\n // scalastyle:on: object.name\n \n   /**\n-   * Converts a binary column of avro format into its corresponding catalyst value. The specified\n-   * schema must match the read data, otherwise the behavior is undefined: it may fail or return\n-   * arbitrary result.\n+   * Converts a binary column of avro format into its corresponding catalyst value. If a writer's\n+   * schema is provided, a different (but compatible) schema can be used for reading. If no writer's\n+   * schema is provided, the specified schema must match the read data, otherwise the behavior is\n+   * undefined: it may fail or return arbitrary result.\n    *\n    * @param data the binary column.\n    * @param jsonFormatSchema the avro schema in JSON string format.\n+   * @param writerJsonFormatSchema the avro schema in JSON string format used to serialize the data.\n    *\n    * @since 3.0.0\n    */\n   @Experimental\n   def from_avro(\n       data: Column,\n-      jsonFormatSchema: String): Column = {\n-    new Column(AvroDataToCatalyst(data.expr, jsonFormatSchema, Map.empty))\n+      jsonFormatSchema: String,\n+      writerJsonFormatSchema: Option[String]): Column = {\n+    new Column(\n+      AvroDataToCatalyst(\n+        data.expr,\n+        jsonFormatSchema,\n+        Map.empty,\n+        writerJsonFormatSchema\n+      )\n+    )\n   }\n \n   /**\n-   * Converts a binary column of avro format into its corresponding catalyst value. The specified\n-   * schema must match the read data, otherwise the behavior is undefined: it may fail or return\n-   * arbitrary result.\n+   * Converts a binary column of avro format into its corresponding catalyst value. If a writer's\n+   * schema is provided, a different (but compatible) schema can be used for reading. If no writer's\n+   * schema is provided, the specified schema must match the read data, otherwise the behavior is\n+   * undefined: it may fail or return arbitrary result.\n    *\n    * @param data the binary column.\n    * @param jsonFormatSchema the avro schema in JSON string format.\n    * @param options options to control how the Avro record is parsed.\n+   * @param writerJsonFormatSchema the avro schema in JSON string format used to serialize the data.\n    *\n    * @since 3.0.0\n    */\n   @Experimental\n   def from_avro(\n       data: Column,\n       jsonFormatSchema: String,\n-      options: java.util.Map[String, String]): Column = {\n-    new Column(AvroDataToCatalyst(data.expr, jsonFormatSchema, options.asScala.toMap))\n+      options: java.util.Map[String, String],\n+      writerJsonFormatSchema: Option[String]): Column = {"
  }, {
    "author": {
      "login": "giamo"
    },
    "body": "Sure, it makes sense, though I can only set the default for one of the two `from_avro`s otherwise the compiler complains that there are multiple overloaded functions with default arguments",
    "commit": "54cb6f1342e8786f4a643d175645c157d918dc96",
    "createdAt": "2019-05-08T16:28:02Z",
    "diffHunk": "@@ -28,39 +28,59 @@ object functions {\n // scalastyle:on: object.name\n \n   /**\n-   * Converts a binary column of avro format into its corresponding catalyst value. The specified\n-   * schema must match the read data, otherwise the behavior is undefined: it may fail or return\n-   * arbitrary result.\n+   * Converts a binary column of avro format into its corresponding catalyst value. If a writer's\n+   * schema is provided, a different (but compatible) schema can be used for reading. If no writer's\n+   * schema is provided, the specified schema must match the read data, otherwise the behavior is\n+   * undefined: it may fail or return arbitrary result.\n    *\n    * @param data the binary column.\n    * @param jsonFormatSchema the avro schema in JSON string format.\n+   * @param writerJsonFormatSchema the avro schema in JSON string format used to serialize the data.\n    *\n    * @since 3.0.0\n    */\n   @Experimental\n   def from_avro(\n       data: Column,\n-      jsonFormatSchema: String): Column = {\n-    new Column(AvroDataToCatalyst(data.expr, jsonFormatSchema, Map.empty))\n+      jsonFormatSchema: String,\n+      writerJsonFormatSchema: Option[String]): Column = {\n+    new Column(\n+      AvroDataToCatalyst(\n+        data.expr,\n+        jsonFormatSchema,\n+        Map.empty,\n+        writerJsonFormatSchema\n+      )\n+    )\n   }\n \n   /**\n-   * Converts a binary column of avro format into its corresponding catalyst value. The specified\n-   * schema must match the read data, otherwise the behavior is undefined: it may fail or return\n-   * arbitrary result.\n+   * Converts a binary column of avro format into its corresponding catalyst value. If a writer's\n+   * schema is provided, a different (but compatible) schema can be used for reading. If no writer's\n+   * schema is provided, the specified schema must match the read data, otherwise the behavior is\n+   * undefined: it may fail or return arbitrary result.\n    *\n    * @param data the binary column.\n    * @param jsonFormatSchema the avro schema in JSON string format.\n    * @param options options to control how the Avro record is parsed.\n+   * @param writerJsonFormatSchema the avro schema in JSON string format used to serialize the data.\n    *\n    * @since 3.0.0\n    */\n   @Experimental\n   def from_avro(\n       data: Column,\n       jsonFormatSchema: String,\n-      options: java.util.Map[String, String]): Column = {\n-    new Column(AvroDataToCatalyst(data.expr, jsonFormatSchema, options.asScala.toMap))\n+      options: java.util.Map[String, String],\n+      writerJsonFormatSchema: Option[String]): Column = {"
  }],
  "prId": 24405
}, {
  "comments": [{
    "author": {
      "login": "mgaido91"
    },
    "body": "shall we have it with default value to `None`?",
    "commit": "54cb6f1342e8786f4a643d175645c157d918dc96",
    "createdAt": "2019-07-18T08:12:20Z",
    "diffHunk": "@@ -28,39 +28,59 @@ object functions {\n // scalastyle:on: object.name\n \n   /**\n-   * Converts a binary column of avro format into its corresponding catalyst value. The specified\n-   * schema must match the read data, otherwise the behavior is undefined: it may fail or return\n-   * arbitrary result.\n+   * Converts a binary column of avro format into its corresponding catalyst value. If a writer's\n+   * schema is provided, a different (but compatible) schema can be used for reading. If no writer's\n+   * schema is provided, the specified schema must match the read data, otherwise the behavior is\n+   * undefined: it may fail or return arbitrary result.\n    *\n    * @param data the binary column.\n    * @param jsonFormatSchema the avro schema in JSON string format.\n+   * @param writerJsonFormatSchema the avro schema in JSON string format used to serialize the data.\n    *\n    * @since 3.0.0\n    */\n   @Experimental\n   def from_avro(\n       data: Column,\n-      jsonFormatSchema: String): Column = {\n-    new Column(AvroDataToCatalyst(data.expr, jsonFormatSchema, Map.empty))\n+      jsonFormatSchema: String,\n+      writerJsonFormatSchema: Option[String]): Column = {"
  }, {
    "author": {
      "login": "giamo"
    },
    "body": "it's not possible because the other version already has a default value: \r\n`[error] in object functions, multiple overloaded alternatives of method from_avro define default arguments`",
    "commit": "54cb6f1342e8786f4a643d175645c157d918dc96",
    "createdAt": "2019-07-18T18:11:20Z",
    "diffHunk": "@@ -28,39 +28,59 @@ object functions {\n // scalastyle:on: object.name\n \n   /**\n-   * Converts a binary column of avro format into its corresponding catalyst value. The specified\n-   * schema must match the read data, otherwise the behavior is undefined: it may fail or return\n-   * arbitrary result.\n+   * Converts a binary column of avro format into its corresponding catalyst value. If a writer's\n+   * schema is provided, a different (but compatible) schema can be used for reading. If no writer's\n+   * schema is provided, the specified schema must match the read data, otherwise the behavior is\n+   * undefined: it may fail or return arbitrary result.\n    *\n    * @param data the binary column.\n    * @param jsonFormatSchema the avro schema in JSON string format.\n+   * @param writerJsonFormatSchema the avro schema in JSON string format used to serialize the data.\n    *\n    * @since 3.0.0\n    */\n   @Experimental\n   def from_avro(\n       data: Column,\n-      jsonFormatSchema: String): Column = {\n-    new Column(AvroDataToCatalyst(data.expr, jsonFormatSchema, Map.empty))\n+      jsonFormatSchema: String,\n+      writerJsonFormatSchema: Option[String]): Column = {"
  }],
  "prId": 24405
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "`Option` is Scala specific one. I think we need another overridden version for Java to use it.",
    "commit": "54cb6f1342e8786f4a643d175645c157d918dc96",
    "createdAt": "2019-08-13T15:43:41Z",
    "diffHunk": "@@ -28,39 +28,59 @@ object functions {\n // scalastyle:on: object.name\n \n   /**\n-   * Converts a binary column of avro format into its corresponding catalyst value. The specified\n-   * schema must match the read data, otherwise the behavior is undefined: it may fail or return\n-   * arbitrary result.\n+   * Converts a binary column of avro format into its corresponding catalyst value. If a writer's\n+   * schema is provided, a different (but compatible) schema can be used for reading. If no writer's\n+   * schema is provided, the specified schema must match the read data, otherwise the behavior is\n+   * undefined: it may fail or return arbitrary result.\n    *\n    * @param data the binary column.\n    * @param jsonFormatSchema the avro schema in JSON string format.\n+   * @param writerJsonFormatSchema the avro schema in JSON string format used to serialize the data.\n    *\n    * @since 3.0.0\n    */\n   @Experimental\n   def from_avro(\n       data: Column,\n-      jsonFormatSchema: String): Column = {\n-    new Column(AvroDataToCatalyst(data.expr, jsonFormatSchema, Map.empty))\n+      jsonFormatSchema: String,\n+      writerJsonFormatSchema: Option[String]): Column = {"
  }, {
    "author": {
      "login": "giamo"
    },
    "body": "You can create an Option in Java using `Option.apply(...)`",
    "commit": "54cb6f1342e8786f4a643d175645c157d918dc96",
    "createdAt": "2019-08-15T08:41:43Z",
    "diffHunk": "@@ -28,39 +28,59 @@ object functions {\n // scalastyle:on: object.name\n \n   /**\n-   * Converts a binary column of avro format into its corresponding catalyst value. The specified\n-   * schema must match the read data, otherwise the behavior is undefined: it may fail or return\n-   * arbitrary result.\n+   * Converts a binary column of avro format into its corresponding catalyst value. If a writer's\n+   * schema is provided, a different (but compatible) schema can be used for reading. If no writer's\n+   * schema is provided, the specified schema must match the read data, otherwise the behavior is\n+   * undefined: it may fail or return arbitrary result.\n    *\n    * @param data the binary column.\n    * @param jsonFormatSchema the avro schema in JSON string format.\n+   * @param writerJsonFormatSchema the avro schema in JSON string format used to serialize the data.\n    *\n    * @since 3.0.0\n    */\n   @Experimental\n   def from_avro(\n       data: Column,\n-      jsonFormatSchema: String): Column = {\n-    new Column(AvroDataToCatalyst(data.expr, jsonFormatSchema, Map.empty))\n+      jsonFormatSchema: String,\n+      writerJsonFormatSchema: Option[String]): Column = {"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Is it a Java native library? or Scala's?",
    "commit": "54cb6f1342e8786f4a643d175645c157d918dc96",
    "createdAt": "2019-08-23T02:44:37Z",
    "diffHunk": "@@ -28,39 +28,59 @@ object functions {\n // scalastyle:on: object.name\n \n   /**\n-   * Converts a binary column of avro format into its corresponding catalyst value. The specified\n-   * schema must match the read data, otherwise the behavior is undefined: it may fail or return\n-   * arbitrary result.\n+   * Converts a binary column of avro format into its corresponding catalyst value. If a writer's\n+   * schema is provided, a different (but compatible) schema can be used for reading. If no writer's\n+   * schema is provided, the specified schema must match the read data, otherwise the behavior is\n+   * undefined: it may fail or return arbitrary result.\n    *\n    * @param data the binary column.\n    * @param jsonFormatSchema the avro schema in JSON string format.\n+   * @param writerJsonFormatSchema the avro schema in JSON string format used to serialize the data.\n    *\n    * @since 3.0.0\n    */\n   @Experimental\n   def from_avro(\n       data: Column,\n-      jsonFormatSchema: String): Column = {\n-    new Column(AvroDataToCatalyst(data.expr, jsonFormatSchema, Map.empty))\n+      jsonFormatSchema: String,\n+      writerJsonFormatSchema: Option[String]): Column = {"
  }],
  "prId": 24405
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Can you describe some copy-and-paste-able example? you can do it via:\r\n\r\n```\r\n{{{\r\n  ...\r\n}}}\r\n```",
    "commit": "54cb6f1342e8786f4a643d175645c157d918dc96",
    "createdAt": "2019-08-13T15:54:25Z",
    "diffHunk": "@@ -28,39 +28,59 @@ object functions {\n // scalastyle:on: object.name\n \n   /**\n-   * Converts a binary column of avro format into its corresponding catalyst value. The specified\n-   * schema must match the read data, otherwise the behavior is undefined: it may fail or return\n-   * arbitrary result.\n+   * Converts a binary column of avro format into its corresponding catalyst value. If a writer's\n+   * schema is provided, a different (but compatible) schema can be used for reading. If no writer's\n+   * schema is provided, the specified schema must match the read data, otherwise the behavior is\n+   * undefined: it may fail or return arbitrary result.\n    *\n    * @param data the binary column.\n    * @param jsonFormatSchema the avro schema in JSON string format.\n+   * @param writerJsonFormatSchema the avro schema in JSON string format used to serialize the data."
  }],
  "prId": 24405
}]