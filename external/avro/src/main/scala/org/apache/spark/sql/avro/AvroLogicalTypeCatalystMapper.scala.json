[{
  "comments": [{
    "author": {
      "login": "edrevo"
    },
    "body": "nit: `de` -> `the`",
    "commit": "cc5352243de47c664631333300579174d5fd75d0",
    "createdAt": "2019-11-18T12:29:22Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.spark.sql.avro\n+\n+import org.apache.avro.{LogicalType, Schema}\n+\n+import org.apache.spark.sql.avro.SchemaConverters.SchemaType\n+\n+/**\n+ * Mapping interface between Catalyst struct type and Avro schemas\n+ */\n+trait AvroLogicalTypeCatalystMapper extends Serializable {\n+\n+  /**\n+   * Given Avro logical type returns mapped Catalyst type\n+   * @return sql mappings\n+   */\n+  def toSqlType: PartialFunction[LogicalType, SchemaType]\n+\n+  /**\n+   * Given a [[org.apache.spark.sql.avro.RecordInfo]] returns mapped Avro schema type\n+   * @return partial function with mappings\n+   */\n+  def toAvroSchema: PartialFunction[RecordInfo, Schema]\n+\n+  /**\n+   * Given Avro logical type and a [[org.apache.spark.sql.avro.DataDeserializer]] deserialize\n+   * de given Avro data to Catalyst data using the catalyst updater."
  }],
  "prId": 26524
}, {
  "comments": [{
    "author": {
      "login": "edrevo"
    },
    "body": "nit: `de` -> `the`",
    "commit": "cc5352243de47c664631333300579174d5fd75d0",
    "createdAt": "2019-11-18T12:29:39Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.spark.sql.avro\n+\n+import org.apache.avro.{LogicalType, Schema}\n+\n+import org.apache.spark.sql.avro.SchemaConverters.SchemaType\n+\n+/**\n+ * Mapping interface between Catalyst struct type and Avro schemas\n+ */\n+trait AvroLogicalTypeCatalystMapper extends Serializable {\n+\n+  /**\n+   * Given Avro logical type returns mapped Catalyst type\n+   * @return sql mappings\n+   */\n+  def toSqlType: PartialFunction[LogicalType, SchemaType]\n+\n+  /**\n+   * Given a [[org.apache.spark.sql.avro.RecordInfo]] returns mapped Avro schema type\n+   * @return partial function with mappings\n+   */\n+  def toAvroSchema: PartialFunction[RecordInfo, Schema]\n+\n+  /**\n+   * Given Avro logical type and a [[org.apache.spark.sql.avro.DataDeserializer]] deserialize\n+   * de given Avro data to Catalyst data using the catalyst updater.\n+   * @return Avro deserialization mappings\n+   */\n+  def deserialize: PartialFunction[LogicalType, DataDeserializer => Unit]\n+\n+  /**\n+   * Given Avro logical type and a [[org.apache.spark.sql.avro.DataSerializer]] serialize\n+   * de given Catalyst data to Avro data."
  }],
  "prId": 26524
}, {
  "comments": [{
    "author": {
      "login": "edrevo"
    },
    "body": "This should probably be marked as `@Experimental`, but someone from the Spark team should confirm.",
    "commit": "cc5352243de47c664631333300579174d5fd75d0",
    "createdAt": "2019-11-18T12:37:28Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.spark.sql.avro\n+\n+import org.apache.avro.{LogicalType, Schema}\n+\n+import org.apache.spark.sql.avro.SchemaConverters.SchemaType\n+\n+/**\n+ * Mapping interface between Catalyst struct type and Avro schemas\n+ */\n+trait AvroLogicalTypeCatalystMapper extends Serializable {",
    "line": 28
  }],
  "prId": 26524
}]