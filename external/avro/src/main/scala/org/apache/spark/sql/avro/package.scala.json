[{
  "comments": [{
    "author": {
      "login": "MaxGekk"
    },
    "body": "I think it is better to extend `DataFrameReader` by new method `avro` as for other supported datasources.",
    "commit": "3979bad51df55ffb24dcb28cf823c5c68b407337",
    "createdAt": "2018-07-10T21:01:50Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+package object avro {\n+  /**\n+   * Adds a method, `avro`, to DataFrameWriter that allows you to write avro files using\n+   * the DataFileWriter\n+   */\n+  implicit class AvroDataFrameWriter[T](writer: DataFrameWriter[T]) {\n+    def avro: String => Unit = writer.format(\"avro\").save\n+  }\n+\n+  /**\n+   * Adds a method, `avro`, to DataFrameReader that allows you to read avro files using\n+   * the DataFileReade\n+   */\n+  implicit class AvroDataFrameReader(reader: DataFrameReader) {"
  }],
  "prId": 21742
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "typo: `DataFileReade`",
    "commit": "3979bad51df55ffb24dcb28cf823c5c68b407337",
    "createdAt": "2018-07-11T02:30:24Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+package object avro {\n+  /**\n+   * Adds a method, `avro`, to DataFrameWriter that allows you to write avro files using\n+   * the DataFileWriter\n+   */\n+  implicit class AvroDataFrameWriter[T](writer: DataFrameWriter[T]) {\n+    def avro: String => Unit = writer.format(\"avro\").save\n+  }\n+\n+  /**\n+   * Adds a method, `avro`, to DataFrameReader that allows you to read avro files using\n+   * the DataFileReade"
  }],
  "prId": 21742
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Does this mean `avro` must be at the end of call chain of `DataFileWriter`?",
    "commit": "3979bad51df55ffb24dcb28cf823c5c68b407337",
    "createdAt": "2018-07-11T02:31:48Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+package object avro {\n+  /**\n+   * Adds a method, `avro`, to DataFrameWriter that allows you to write avro files using\n+   * the DataFileWriter\n+   */\n+  implicit class AvroDataFrameWriter[T](writer: DataFrameWriter[T]) {\n+    def avro: String => Unit = writer.format(\"avro\").save",
    "line": 26
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "Yes, this is the same as `orc`, `csv`, etc.",
    "commit": "3979bad51df55ffb24dcb28cf823c5c68b407337",
    "createdAt": "2018-07-11T05:55:35Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+package object avro {\n+  /**\n+   * Adds a method, `avro`, to DataFrameWriter that allows you to write avro files using\n+   * the DataFileWriter\n+   */\n+  implicit class AvroDataFrameWriter[T](writer: DataFrameWriter[T]) {\n+    def avro: String => Unit = writer.format(\"avro\").save",
    "line": 26
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "But it doesn't support Java and Python though.",
    "commit": "3979bad51df55ffb24dcb28cf823c5c68b407337",
    "createdAt": "2018-07-11T05:58:10Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+package object avro {\n+  /**\n+   * Adds a method, `avro`, to DataFrameWriter that allows you to write avro files using\n+   * the DataFileWriter\n+   */\n+  implicit class AvroDataFrameWriter[T](writer: DataFrameWriter[T]) {\n+    def avro: String => Unit = writer.format(\"avro\").save",
    "line": 26
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "I think in most cases, users will directly use `df.write.format(\"avro\")`, which should be good enough.",
    "commit": "3979bad51df55ffb24dcb28cf823c5c68b407337",
    "createdAt": "2018-07-11T06:09:02Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+package object avro {\n+  /**\n+   * Adds a method, `avro`, to DataFrameWriter that allows you to write avro files using\n+   * the DataFileWriter\n+   */\n+  implicit class AvroDataFrameWriter[T](writer: DataFrameWriter[T]) {\n+    def avro: String => Unit = writer.format(\"avro\").save",
    "line": 26
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Yup, in that case, I think we wouldn't even need this in Scala side.",
    "commit": "3979bad51df55ffb24dcb28cf823c5c68b407337",
    "createdAt": "2018-07-11T06:16:14Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+package object avro {\n+  /**\n+   * Adds a method, `avro`, to DataFrameWriter that allows you to write avro files using\n+   * the DataFileWriter\n+   */\n+  implicit class AvroDataFrameWriter[T](writer: DataFrameWriter[T]) {\n+    def avro: String => Unit = writer.format(\"avro\").save",
    "line": 26
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "I am not sure about this. This exists in spark-avro for a long time, and it should be used by some users. I can't see any downside of keeping it.",
    "commit": "3979bad51df55ffb24dcb28cf823c5c68b407337",
    "createdAt": "2018-07-11T07:55:51Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+package object avro {\n+  /**\n+   * Adds a method, `avro`, to DataFrameWriter that allows you to write avro files using\n+   * the DataFileWriter\n+   */\n+  implicit class AvroDataFrameWriter[T](writer: DataFrameWriter[T]) {\n+    def avro: String => Unit = writer.format(\"avro\").save",
    "line": 26
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "In that case, can we move this into DataFrameReader and DataFrameWriter for Python and Java usages too?\r\n\r\nI think this was just a workaround to resemble Spark 2.0.0's API shape. spark-avro as a thridparty would probably keep source and binary compatibility but here I think we don't keep them here although we will probably keep the behaviours. So, I think it's better to minimise the exposed APIs when we are in doubt.\r\n\r\nTo me, I can't see any particular advantage of keeping it on the other hand as implicit here.\r\n",
    "commit": "3979bad51df55ffb24dcb28cf823c5c68b407337",
    "createdAt": "2018-07-11T08:11:41Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+package object avro {\n+  /**\n+   * Adds a method, `avro`, to DataFrameWriter that allows you to write avro files using\n+   * the DataFileWriter\n+   */\n+  implicit class AvroDataFrameWriter[T](writer: DataFrameWriter[T]) {\n+    def avro: String => Unit = writer.format(\"avro\").save",
    "line": 26
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "For instance, CSV didn't bring all other APIs at the initial implementation:\r\n\r\n https://github.com/databricks/spark-csv/blob/master/src/main/scala/com/databricks/spark/csv/package.scala#L36-L213 \r\n\r\nand its parser API https://github.com/databricks/spark-csv/blob/master/src/main/scala/com/databricks/spark/csv/CsvParser.scala\r\n",
    "commit": "3979bad51df55ffb24dcb28cf823c5c68b407337",
    "createdAt": "2018-07-11T08:20:50Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+package object avro {\n+  /**\n+   * Adds a method, `avro`, to DataFrameWriter that allows you to write avro files using\n+   * the DataFileWriter\n+   */\n+  implicit class AvroDataFrameWriter[T](writer: DataFrameWriter[T]) {\n+    def avro: String => Unit = writer.format(\"avro\").save",
    "line": 26
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "I'd remove the Scala API.\r\n",
    "commit": "3979bad51df55ffb24dcb28cf823c5c68b407337",
    "createdAt": "2018-07-18T19:10:13Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+package object avro {\n+  /**\n+   * Adds a method, `avro`, to DataFrameWriter that allows you to write avro files using\n+   * the DataFileWriter\n+   */\n+  implicit class AvroDataFrameWriter[T](writer: DataFrameWriter[T]) {\n+    def avro: String => Unit = writer.format(\"avro\").save",
    "line": 26
  }],
  "prId": 21742
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I think this was just ported as is from the avro. Shall we expose these into Spark's DataFrameReader and Writer?",
    "commit": "3979bad51df55ffb24dcb28cf823c5c68b407337",
    "createdAt": "2018-07-11T02:50:33Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+package object avro {\n+  /**\n+   * Adds a method, `avro`, to DataFrameWriter that allows you to write avro files using\n+   * the DataFileWriter\n+   */\n+  implicit class AvroDataFrameWriter[T](writer: DataFrameWriter[T]) {",
    "line": 25
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "I am not sure about this. If we put the package under `/external`, I don't think we should expose it in DataFrameReader and Writer.",
    "commit": "3979bad51df55ffb24dcb28cf823c5c68b407337",
    "createdAt": "2018-07-11T07:57:27Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+package object avro {\n+  /**\n+   * Adds a method, `avro`, to DataFrameWriter that allows you to write avro files using\n+   * the DataFileWriter\n+   */\n+  implicit class AvroDataFrameWriter[T](writer: DataFrameWriter[T]) {",
    "line": 25
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "I am actually ok with either way.\r\n@marmbrus @tdas What do you think? If so, should we should expose `.kafka` in `DataFrameReader`/`DataFrameWriter` as well?",
    "commit": "3979bad51df55ffb24dcb28cf823c5c68b407337",
    "createdAt": "2018-07-11T08:21:32Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+package object avro {\n+  /**\n+   * Adds a method, `avro`, to DataFrameWriter that allows you to write avro files using\n+   * the DataFileWriter\n+   */\n+  implicit class AvroDataFrameWriter[T](writer: DataFrameWriter[T]) {",
    "line": 25
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I think we could do that separately though like we did in CSV.",
    "commit": "3979bad51df55ffb24dcb28cf823c5c68b407337",
    "createdAt": "2018-07-11T08:25:21Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+package object avro {\n+  /**\n+   * Adds a method, `avro`, to DataFrameWriter that allows you to write avro files using\n+   * the DataFileWriter\n+   */\n+  implicit class AvroDataFrameWriter[T](writer: DataFrameWriter[T]) {",
    "line": 25
  }],
  "prId": 21742
}]