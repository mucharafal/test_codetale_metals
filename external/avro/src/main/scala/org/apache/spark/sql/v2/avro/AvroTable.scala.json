[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit: the code style should be\r\n```\r\ndef fun1(\r\n    arg1: T,\r\n    arg2: T)...\r\n```",
    "commit": "118d81f561ffc1837a065cfa5e8f53e5ace7c987",
    "createdAt": "2019-10-02T03:38:09Z",
    "diffHunk": "@@ -42,8 +42,10 @@ case class AvroTable(\n   override def inferSchema(files: Seq[FileStatus]): Option[StructType] =\n     AvroUtils.inferSchema(sparkSession, options.asScala.toMap, files)\n \n-  override def newWriteBuilder(options: CaseInsensitiveStringMap): WriteBuilder =\n-    new AvroWriteBuilder(options, paths, formatName, supportsDataType)\n+  override def newWriteBuilder(options: CaseInsensitiveStringMap,"
  }],
  "prId": 25990
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit: `info` is good enough as the parameter name.",
    "commit": "118d81f561ffc1837a065cfa5e8f53e5ace7c987",
    "createdAt": "2019-11-15T10:15:27Z",
    "diffHunk": "@@ -42,8 +42,11 @@ case class AvroTable(\n   override def inferSchema(files: Seq[FileStatus]): Option[StructType] =\n     AvroUtils.inferSchema(sparkSession, options.asScala.toMap, files)\n \n-  override def newWriteBuilder(options: CaseInsensitiveStringMap): WriteBuilder =\n-    new AvroWriteBuilder(options, paths, formatName, supportsDataType)\n+  override def newWriteBuilder(\n+      options: CaseInsensitiveStringMap,\n+      writeInfo: LogicalWriteInfo): WriteBuilder ="
  }],
  "prId": 25990
}]