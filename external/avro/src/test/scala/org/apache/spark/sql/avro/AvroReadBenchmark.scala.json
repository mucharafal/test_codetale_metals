[{
  "comments": [{
    "author": {
      "login": "MaxGekk"
    },
    "body": "Could you use the Benchmark API for the benchmarks: https://github.com/apache/spark/blob/39e2bad6a866d27c3ca594d15e574a1da3ee84cc/core/src/main/scala/org/apache/spark/util/Benchmark.scala#L48 ?",
    "commit": "3979bad51df55ffb24dcb28cf823c5c68b407337",
    "createdAt": "2018-07-10T20:52:55Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.avro\n+\n+import java.io.File\n+import java.util.concurrent.TimeUnit\n+\n+import org.apache.spark.sql.SparkSession\n+\n+// scalastyle:off println\n+\n+/**\n+ * This object runs a simple benchmark test on the avro files in benchmarkFilesDir. It measures\n+ * how long does it take to convert them into DataFrame and run count() method on them. See\n+ * README on how to invoke it.\n+ */\n+object AvroReadBenchmark {\n+\n+  def main(args: Array[String]) {\n+    val benchmarkDirFiles = new File(AvroFileGenerator.outputDir).list\n+    if (benchmarkDirFiles == null || benchmarkDirFiles.isEmpty) {\n+      sys.error(s\"The benchmark directory ($AvroFileGenerator.outputDir) does not exist or \" +\n+        \"is empty. First you should generate some files to run a benchmark with (see README)\")\n+    }\n+\n+    val spark = SparkSession.builder().master(\"local[2]\").appName(\"AvroReadBenchmark\")\n+      .getOrCreate()\n+\n+    spark.read.avro(AvroFileGenerator.outputDir).count()\n+\n+    println(\"\\n\\n\\nStaring benchmark test - creating DataFrame from benchmark avro files\\n\\n\\n\")\n+\n+    val startTime = System.nanoTime\n+    spark\n+      .read\n+      .avro(AvroFileGenerator.outputDir)\n+      .select(\"string\")\n+      .count()\n+    val endTime = System.nanoTime"
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "This PR is for initial import. I have created sub task:\r\nhttps://issues.apache.org/jira/browse/SPARK-24777",
    "commit": "3979bad51df55ffb24dcb28cf823c5c68b407337",
    "createdAt": "2018-07-11T04:54:09Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.avro\n+\n+import java.io.File\n+import java.util.concurrent.TimeUnit\n+\n+import org.apache.spark.sql.SparkSession\n+\n+// scalastyle:off println\n+\n+/**\n+ * This object runs a simple benchmark test on the avro files in benchmarkFilesDir. It measures\n+ * how long does it take to convert them into DataFrame and run count() method on them. See\n+ * README on how to invoke it.\n+ */\n+object AvroReadBenchmark {\n+\n+  def main(args: Array[String]) {\n+    val benchmarkDirFiles = new File(AvroFileGenerator.outputDir).list\n+    if (benchmarkDirFiles == null || benchmarkDirFiles.isEmpty) {\n+      sys.error(s\"The benchmark directory ($AvroFileGenerator.outputDir) does not exist or \" +\n+        \"is empty. First you should generate some files to run a benchmark with (see README)\")\n+    }\n+\n+    val spark = SparkSession.builder().master(\"local[2]\").appName(\"AvroReadBenchmark\")\n+      .getOrCreate()\n+\n+    spark.read.avro(AvroFileGenerator.outputDir).count()\n+\n+    println(\"\\n\\n\\nStaring benchmark test - creating DataFrame from benchmark avro files\\n\\n\\n\")\n+\n+    val startTime = System.nanoTime\n+    spark\n+      .read\n+      .avro(AvroFileGenerator.outputDir)\n+      .select(\"string\")\n+      .count()\n+    val endTime = System.nanoTime"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "In that case, shall we add the whole benchmark separately?",
    "commit": "3979bad51df55ffb24dcb28cf823c5c68b407337",
    "createdAt": "2018-07-11T05:45:59Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.avro\n+\n+import java.io.File\n+import java.util.concurrent.TimeUnit\n+\n+import org.apache.spark.sql.SparkSession\n+\n+// scalastyle:off println\n+\n+/**\n+ * This object runs a simple benchmark test on the avro files in benchmarkFilesDir. It measures\n+ * how long does it take to convert them into DataFrame and run count() method on them. See\n+ * README on how to invoke it.\n+ */\n+object AvroReadBenchmark {\n+\n+  def main(args: Array[String]) {\n+    val benchmarkDirFiles = new File(AvroFileGenerator.outputDir).list\n+    if (benchmarkDirFiles == null || benchmarkDirFiles.isEmpty) {\n+      sys.error(s\"The benchmark directory ($AvroFileGenerator.outputDir) does not exist or \" +\n+        \"is empty. First you should generate some files to run a benchmark with (see README)\")\n+    }\n+\n+    val spark = SparkSession.builder().master(\"local[2]\").appName(\"AvroReadBenchmark\")\n+      .getOrCreate()\n+\n+    spark.read.avro(AvroFileGenerator.outputDir).count()\n+\n+    println(\"\\n\\n\\nStaring benchmark test - creating DataFrame from benchmark avro files\\n\\n\\n\")\n+\n+    val startTime = System.nanoTime\n+    spark\n+      .read\n+      .avro(AvroFileGenerator.outputDir)\n+      .select(\"string\")\n+      .count()\n+    val endTime = System.nanoTime"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "makes sense to me.",
    "commit": "3979bad51df55ffb24dcb28cf823c5c68b407337",
    "createdAt": "2018-07-11T06:38:31Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.avro\n+\n+import java.io.File\n+import java.util.concurrent.TimeUnit\n+\n+import org.apache.spark.sql.SparkSession\n+\n+// scalastyle:off println\n+\n+/**\n+ * This object runs a simple benchmark test on the avro files in benchmarkFilesDir. It measures\n+ * how long does it take to convert them into DataFrame and run count() method on them. See\n+ * README on how to invoke it.\n+ */\n+object AvroReadBenchmark {\n+\n+  def main(args: Array[String]) {\n+    val benchmarkDirFiles = new File(AvroFileGenerator.outputDir).list\n+    if (benchmarkDirFiles == null || benchmarkDirFiles.isEmpty) {\n+      sys.error(s\"The benchmark directory ($AvroFileGenerator.outputDir) does not exist or \" +\n+        \"is empty. First you should generate some files to run a benchmark with (see README)\")\n+    }\n+\n+    val spark = SparkSession.builder().master(\"local[2]\").appName(\"AvroReadBenchmark\")\n+      .getOrCreate()\n+\n+    spark.read.avro(AvroFileGenerator.outputDir).count()\n+\n+    println(\"\\n\\n\\nStaring benchmark test - creating DataFrame from benchmark avro files\\n\\n\\n\")\n+\n+    val startTime = System.nanoTime\n+    spark\n+      .read\n+      .avro(AvroFileGenerator.outputDir)\n+      .select(\"string\")\n+      .count()\n+    val endTime = System.nanoTime"
  }],
  "prId": 21742
}, {
  "comments": [{
    "author": {
      "login": "MaxGekk"
    },
    "body": "Could you leave benchmark results here like in JsonBenchmarks for example: https://github.com/apache/spark/blob/bd14da6fd5a77cc03efff193a84ffccbe892cc13/sql/core/src/test/scala/org/apache/spark/sql/execution/datasources/json/JsonBenchmarks.scala#L76-L79",
    "commit": "3979bad51df55ffb24dcb28cf823c5c68b407337",
    "createdAt": "2018-07-10T20:55:42Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.avro\n+\n+import java.io.File\n+import java.util.concurrent.TimeUnit\n+\n+import org.apache.spark.sql.SparkSession\n+\n+// scalastyle:off println\n+\n+/**\n+ * This object runs a simple benchmark test on the avro files in benchmarkFilesDir. It measures\n+ * how long does it take to convert them into DataFrame and run count() method on them. See\n+ * README on how to invoke it.\n+ */\n+object AvroReadBenchmark {\n+\n+  def main(args: Array[String]) {\n+    val benchmarkDirFiles = new File(AvroFileGenerator.outputDir).list\n+    if (benchmarkDirFiles == null || benchmarkDirFiles.isEmpty) {\n+      sys.error(s\"The benchmark directory ($AvroFileGenerator.outputDir) does not exist or \" +\n+        \"is empty. First you should generate some files to run a benchmark with (see README)\")\n+    }\n+\n+    val spark = SparkSession.builder().master(\"local[2]\").appName(\"AvroReadBenchmark\")\n+      .getOrCreate()\n+\n+    spark.read.avro(AvroFileGenerator.outputDir).count()\n+\n+    println(\"\\n\\n\\nStaring benchmark test - creating DataFrame from benchmark avro files\\n\\n\\n\")\n+\n+    val startTime = System.nanoTime\n+    spark\n+      .read\n+      .avro(AvroFileGenerator.outputDir)\n+      .select(\"string\")\n+      .count()\n+    val endTime = System.nanoTime\n+    val executionTime = TimeUnit.SECONDS.convert(endTime - startTime, TimeUnit.NANOSECONDS)\n+\n+    println(s\"\\n\\n\\nFinished benchmark test - result was $executionTime seconds\\n\\n\\n\")"
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "This PR is for initial import. I have created sub task:\r\nhttps://issues.apache.org/jira/browse/SPARK-24777",
    "commit": "3979bad51df55ffb24dcb28cf823c5c68b407337",
    "createdAt": "2018-07-11T04:54:26Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.avro\n+\n+import java.io.File\n+import java.util.concurrent.TimeUnit\n+\n+import org.apache.spark.sql.SparkSession\n+\n+// scalastyle:off println\n+\n+/**\n+ * This object runs a simple benchmark test on the avro files in benchmarkFilesDir. It measures\n+ * how long does it take to convert them into DataFrame and run count() method on them. See\n+ * README on how to invoke it.\n+ */\n+object AvroReadBenchmark {\n+\n+  def main(args: Array[String]) {\n+    val benchmarkDirFiles = new File(AvroFileGenerator.outputDir).list\n+    if (benchmarkDirFiles == null || benchmarkDirFiles.isEmpty) {\n+      sys.error(s\"The benchmark directory ($AvroFileGenerator.outputDir) does not exist or \" +\n+        \"is empty. First you should generate some files to run a benchmark with (see README)\")\n+    }\n+\n+    val spark = SparkSession.builder().master(\"local[2]\").appName(\"AvroReadBenchmark\")\n+      .getOrCreate()\n+\n+    spark.read.avro(AvroFileGenerator.outputDir).count()\n+\n+    println(\"\\n\\n\\nStaring benchmark test - creating DataFrame from benchmark avro files\\n\\n\\n\")\n+\n+    val startTime = System.nanoTime\n+    spark\n+      .read\n+      .avro(AvroFileGenerator.outputDir)\n+      .select(\"string\")\n+      .count()\n+    val endTime = System.nanoTime\n+    val executionTime = TimeUnit.SECONDS.convert(endTime - startTime, TimeUnit.NANOSECONDS)\n+\n+    println(s\"\\n\\n\\nFinished benchmark test - result was $executionTime seconds\\n\\n\\n\")"
  }],
  "prId": 21742
}, {
  "comments": [{
    "author": {
      "login": "MaxGekk"
    },
    "body": "I don't think it make sense to read from 2 task in parallel. You just introduce unnecessary fluctuations in the results. I would do measurements in one task.",
    "commit": "3979bad51df55ffb24dcb28cf823c5c68b407337",
    "createdAt": "2018-07-10T20:59:18Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.avro\n+\n+import java.io.File\n+import java.util.concurrent.TimeUnit\n+\n+import org.apache.spark.sql.SparkSession\n+\n+// scalastyle:off println\n+\n+/**\n+ * This object runs a simple benchmark test on the avro files in benchmarkFilesDir. It measures\n+ * how long does it take to convert them into DataFrame and run count() method on them. See\n+ * README on how to invoke it.\n+ */\n+object AvroReadBenchmark {\n+\n+  def main(args: Array[String]) {\n+    val benchmarkDirFiles = new File(AvroFileGenerator.outputDir).list\n+    if (benchmarkDirFiles == null || benchmarkDirFiles.isEmpty) {\n+      sys.error(s\"The benchmark directory ($AvroFileGenerator.outputDir) does not exist or \" +\n+        \"is empty. First you should generate some files to run a benchmark with (see README)\")\n+    }\n+\n+    val spark = SparkSession.builder().master(\"local[2]\").appName(\"AvroReadBenchmark\")"
  }],
  "prId": 21742
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "ditto.",
    "commit": "3979bad51df55ffb24dcb28cf823c5c68b407337",
    "createdAt": "2018-07-11T02:34:20Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.avro\n+\n+import java.io.File\n+import java.util.concurrent.TimeUnit\n+\n+import org.apache.spark.sql.SparkSession\n+\n+// scalastyle:off println\n+\n+/**\n+ * This object runs a simple benchmark test on the avro files in benchmarkFilesDir. It measures\n+ * how long does it take to convert them into DataFrame and run count() method on them. See\n+ * README on how to invoke it."
  }],
  "prId": 21742
}]