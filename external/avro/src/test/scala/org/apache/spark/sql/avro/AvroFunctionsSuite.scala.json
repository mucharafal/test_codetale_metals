[{
  "comments": [{
    "author": {
      "login": "mgaido91"
    },
    "body": "this can go in a single line",
    "commit": "54cb6f1342e8786f4a643d175645c157d918dc96",
    "createdAt": "2019-07-18T08:14:25Z",
    "diffHunk": "@@ -147,10 +147,55 @@ class AvroFunctionsSuite extends QueryTest with SharedSQLContext with SQLTestUti\n       val df = Seq(\"one\", \"two\", \"three\", \"four\").map(generateBinary(_, simpleSchema))\n         .toDF()\n         .withColumn(\"value\",\n-          functions.from_avro(col(\"value\"), simpleSchema))\n+          functions.from_avro(col(\"value\"), simpleSchema, None))\n \n       assert(df.queryExecution.executedPlan.isInstanceOf[LocalTableScanExec])\n       assert(df.collect().map(_.get(0)) === Seq(Row(\"one\"), Row(\"two\"), Row(\"three\"), Row(\"four\")))\n     }\n   }\n+\n+  test(\"roundtrip in to_avro and from_avro with different compatible schemas\") {\n+    val df = spark.range(10).select(\n+      struct(\n+        'id.as(\"col1\"),\n+        'id.cast(\"string\").as(\"col2\")\n+      ).as(\"struct\")\n+    )\n+    val avroStructDF = df.select(to_avro('struct).as(\"avro\"))\n+    val writerAvroTypeStruct = s\"\"\"\n+      |{\n+      |  \"type\": \"record\",\n+      |  \"name\": \"struct\",\n+      |  \"fields\": [\n+      |    {\"name\": \"col1\", \"type\": \"int\"},\n+      |    {\"name\": \"col2\", \"type\": \"string\"}\n+      |  ]\n+      |}\n+    \"\"\".stripMargin\n+\n+    val evolvedAvroTypeStruct = s\"\"\"\n+      |{\n+      |  \"type\": \"record\",\n+      |  \"name\": \"struct\",\n+      |  \"fields\": [\n+      |    {\"name\": \"col1\", \"type\": \"int\"},\n+      |    {\"name\": \"col2\", \"type\": \"string\"},\n+      |    {\"name\": \"col3\", \"type\": \"string\", \"default\": \"\"}\n+      |  ]\n+      |}\n+    \"\"\".stripMargin\n+\n+    val expected = spark.range(10).select(\n+      struct("
  }],
  "prId": 24405
}, {
  "comments": [{
    "author": {
      "login": "mgaido91"
    },
    "body": "this can go on a single line",
    "commit": "54cb6f1342e8786f4a643d175645c157d918dc96",
    "createdAt": "2019-07-18T08:15:24Z",
    "diffHunk": "@@ -147,10 +147,55 @@ class AvroFunctionsSuite extends QueryTest with SharedSQLContext with SQLTestUti\n       val df = Seq(\"one\", \"two\", \"three\", \"four\").map(generateBinary(_, simpleSchema))\n         .toDF()\n         .withColumn(\"value\",\n-          functions.from_avro(col(\"value\"), simpleSchema))\n+          functions.from_avro(col(\"value\"), simpleSchema, None))\n \n       assert(df.queryExecution.executedPlan.isInstanceOf[LocalTableScanExec])\n       assert(df.collect().map(_.get(0)) === Seq(Row(\"one\"), Row(\"two\"), Row(\"three\"), Row(\"four\")))\n     }\n   }\n+\n+  test(\"roundtrip in to_avro and from_avro with different compatible schemas\") {\n+    val df = spark.range(10).select(\n+      struct("
  }],
  "prId": 24405
}, {
  "comments": [{
    "author": {
      "login": "mgaido91"
    },
    "body": "please add the JIRA id to the test case string",
    "commit": "54cb6f1342e8786f4a643d175645c157d918dc96",
    "createdAt": "2019-07-18T08:15:49Z",
    "diffHunk": "@@ -147,10 +147,55 @@ class AvroFunctionsSuite extends QueryTest with SharedSQLContext with SQLTestUti\n       val df = Seq(\"one\", \"two\", \"three\", \"four\").map(generateBinary(_, simpleSchema))\n         .toDF()\n         .withColumn(\"value\",\n-          functions.from_avro(col(\"value\"), simpleSchema))\n+          functions.from_avro(col(\"value\"), simpleSchema, None))\n \n       assert(df.queryExecution.executedPlan.isInstanceOf[LocalTableScanExec])\n       assert(df.collect().map(_.get(0)) === Seq(Row(\"one\"), Row(\"two\"), Row(\"three\"), Row(\"four\")))\n     }\n   }\n+\n+  test(\"roundtrip in to_avro and from_avro with different compatible schemas\") {"
  }],
  "prId": 24405
}, {
  "comments": [{
    "author": {
      "login": "Fokko"
    },
    "body": "I would also add a test with an incompatible schema, for example, changing a `string` to an `int`.",
    "commit": "54cb6f1342e8786f4a643d175645c157d918dc96",
    "createdAt": "2019-10-16T08:38:13Z",
    "diffHunk": "@@ -153,4 +153,45 @@ class AvroFunctionsSuite extends QueryTest with SharedSparkSession {\n       assert(df.collect().map(_.get(0)) === Seq(Row(\"one\"), Row(\"two\"), Row(\"three\"), Row(\"four\")))\n     }\n   }\n+\n+  test(\"SPARK-27506: roundtrip in to_avro and from_avro with different compatible schemas\") {",
    "line": 14
  }],
  "prId": 24405
}]