[{
  "comments": [{
    "author": {
      "login": "mariobriggs"
    },
    "body": "this default has to be something greater than 0. Since KafkaRDDIterator.getNext() is implemented as a recursive function below, we run into a StackOverflow exception when this is 0. \n\nThis also means if the user specifically also sets this to 0 via 'spark.kafka.poll.time', do we need to guard against it? (or move to a simple imperative for loop)\n",
    "commit": "229b773f9c5c894088a29937f241ad0db48991ba",
    "createdAt": "2016-01-29T13:39:54Z",
    "diffHunk": "@@ -0,0 +1,237 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka.newapi\n+\n+import java.util.{Collections, Properties}\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ArrayBuffer\n+import scala.reflect.ClassTag\n+\n+import org.apache.kafka.clients.consumer.{ConsumerRecord, KafkaConsumer}\n+import org.apache.kafka.common.TopicPartition\n+\n+import org.apache.spark.{Logging, Partition, SparkContext, TaskContext}\n+import org.apache.spark.partial.{BoundedDouble, PartialResult}\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.streaming.kafka.newapi.KafkaCluster.LeaderOffset\n+import org.apache.spark.util.NextIterator\n+\n+\n+\n+/**\n+ * A batch-oriented interface for consuming from Kafka.\n+ * Starting and ending offsets are specified in advance,\n+ * so that you can control exactly-once semantics.\n+ *\n+ * @param kafkaParams Kafka <a href=\"http://kafka.apache.org/documentation.html#configuration\">\n+ *                    configuration parameters</a>. Requires \"bootstrap.servers\" to be set\n+ *                    with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+ * @param offsetRanges offset ranges that define the Kafka data belonging to this RDD\n+ */\n+private[kafka]\n+class KafkaRDD[K: ClassTag, V: ClassTag, R: ClassTag] private[spark] (\n+    sc: SparkContext,\n+    kafkaParams: Map[String, String],\n+    val offsetRanges: Array[OffsetRange],\n+    messageHandler: ConsumerRecord[K, V] => R\n+  ) extends RDD[R](sc, Nil) with Logging with HasOffsetRanges {\n+\n+  private val KAFKA_DEFAULT_POLL_TIME: String = \"0\""
  }, {
    "author": {
      "login": "markgrover"
    },
    "body": "Hi Mario, Based on these API docs, it seems like 0 is a valid option:\nhttps://kafka.apache.org/090/javadoc/org/apache/kafka/clients/consumer/KafkaConsumer.html#poll(long)\n\nIf you can explain further why 0 is problematic, I'd appreciate that, and am happy to make suggested changes, I don't see the problem just yet:-)\n",
    "commit": "229b773f9c5c894088a29937f241ad0db48991ba",
    "createdAt": "2016-02-02T04:59:42Z",
    "diffHunk": "@@ -0,0 +1,237 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka.newapi\n+\n+import java.util.{Collections, Properties}\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ArrayBuffer\n+import scala.reflect.ClassTag\n+\n+import org.apache.kafka.clients.consumer.{ConsumerRecord, KafkaConsumer}\n+import org.apache.kafka.common.TopicPartition\n+\n+import org.apache.spark.{Logging, Partition, SparkContext, TaskContext}\n+import org.apache.spark.partial.{BoundedDouble, PartialResult}\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.streaming.kafka.newapi.KafkaCluster.LeaderOffset\n+import org.apache.spark.util.NextIterator\n+\n+\n+\n+/**\n+ * A batch-oriented interface for consuming from Kafka.\n+ * Starting and ending offsets are specified in advance,\n+ * so that you can control exactly-once semantics.\n+ *\n+ * @param kafkaParams Kafka <a href=\"http://kafka.apache.org/documentation.html#configuration\">\n+ *                    configuration parameters</a>. Requires \"bootstrap.servers\" to be set\n+ *                    with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+ * @param offsetRanges offset ranges that define the Kafka data belonging to this RDD\n+ */\n+private[kafka]\n+class KafkaRDD[K: ClassTag, V: ClassTag, R: ClassTag] private[spark] (\n+    sc: SparkContext,\n+    kafkaParams: Map[String, String],\n+    val offsetRanges: Array[OffsetRange],\n+    messageHandler: ConsumerRecord[K, V] => R\n+  ) extends RDD[R](sc, Nil) with Logging with HasOffsetRanges {\n+\n+  private val KAFKA_DEFAULT_POLL_TIME: String = \"0\""
  }, {
    "author": {
      "login": "mariobriggs"
    },
    "body": "U can reproduce the problem by running the test suites without setting this - \"spark.kafka.poll.time\" -> \"1000\".\n\nSo problem basically is that we had implemented the situation when timeout is too small (i.e. poll returns no data), as a recursive function call. So for e.g. if it actually takes 700 ms for the kafkaClient to get the data from the kakfaServer, then for that period of 700 ms, we are making continous recursive function calls which cause a JVM stackoverflow.\n\nI have issued a PR to your repo, where i reimplemented this functionality using a imperative loop rather than a recursive function call \n",
    "commit": "229b773f9c5c894088a29937f241ad0db48991ba",
    "createdAt": "2016-02-02T12:30:30Z",
    "diffHunk": "@@ -0,0 +1,237 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka.newapi\n+\n+import java.util.{Collections, Properties}\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ArrayBuffer\n+import scala.reflect.ClassTag\n+\n+import org.apache.kafka.clients.consumer.{ConsumerRecord, KafkaConsumer}\n+import org.apache.kafka.common.TopicPartition\n+\n+import org.apache.spark.{Logging, Partition, SparkContext, TaskContext}\n+import org.apache.spark.partial.{BoundedDouble, PartialResult}\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.streaming.kafka.newapi.KafkaCluster.LeaderOffset\n+import org.apache.spark.util.NextIterator\n+\n+\n+\n+/**\n+ * A batch-oriented interface for consuming from Kafka.\n+ * Starting and ending offsets are specified in advance,\n+ * so that you can control exactly-once semantics.\n+ *\n+ * @param kafkaParams Kafka <a href=\"http://kafka.apache.org/documentation.html#configuration\">\n+ *                    configuration parameters</a>. Requires \"bootstrap.servers\" to be set\n+ *                    with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+ * @param offsetRanges offset ranges that define the Kafka data belonging to this RDD\n+ */\n+private[kafka]\n+class KafkaRDD[K: ClassTag, V: ClassTag, R: ClassTag] private[spark] (\n+    sc: SparkContext,\n+    kafkaParams: Map[String, String],\n+    val offsetRanges: Array[OffsetRange],\n+    messageHandler: ConsumerRecord[K, V] => R\n+  ) extends RDD[R](sc, Nil) with Logging with HasOffsetRanges {\n+\n+  private val KAFKA_DEFAULT_POLL_TIME: String = \"0\""
  }],
  "prId": 10953
}]