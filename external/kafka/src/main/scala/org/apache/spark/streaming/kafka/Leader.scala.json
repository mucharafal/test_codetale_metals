[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "As I said earlier, traits are not great for maintaining binary compatibility when you want to extend the trait. So lets either simple class (private constructor), or a Java interface (the concrete implementation can be in scala as it is now). Bunch of stuff in Spark are done this way. \n",
    "commit": "1dc29415e3c0ac23a4207513686dfe5ee5ab2725",
    "createdAt": "2015-01-30T04:19:16Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka\n+\n+import kafka.common.TopicAndPartition\n+\n+/** Host info for the leader of a Kafka TopicAndPartition */\n+\n+trait Leader {"
  }],
  "prId": 3798
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "nit: I think this fits in 100 chars. Should be fine to put in a line. Otherwise looks unnecessarily long. \n",
    "commit": "1dc29415e3c0ac23a4207513686dfe5ee5ab2725",
    "createdAt": "2015-01-30T04:21:36Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka\n+\n+import kafka.common.TopicAndPartition\n+\n+/** Host info for the leader of a Kafka TopicAndPartition */\n+\n+trait Leader {\n+    /** kafka topic name */\n+  def topic: String\n+\n+  /** kafka partition id */\n+  def partition: Int\n+\n+  /** kafka hostname */\n+  def host: String\n+  \n+  /** kafka host's port */\n+  def port: Int\n+}\n+\n+private class LeaderImpl(\n+  override val topic: String,\n+  override val partition: Int,\n+  override val host: String,\n+  override val port: Int\n+) extends Leader\n+\n+object Leader {\n+  def create(\n+    topic: String,\n+    partition: Int,\n+    host: String,\n+    port: Int): Leader =\n+    new LeaderImpl("
  }],
  "prId": 3798
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "incorrect indentation.\n",
    "commit": "1dc29415e3c0ac23a4207513686dfe5ee5ab2725",
    "createdAt": "2015-01-30T04:21:57Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka\n+\n+import kafka.common.TopicAndPartition\n+\n+/** Host info for the leader of a Kafka TopicAndPartition */\n+\n+trait Leader {\n+    /** kafka topic name */\n+  def topic: String\n+\n+  /** kafka partition id */\n+  def partition: Int\n+\n+  /** kafka hostname */\n+  def host: String\n+  \n+  /** kafka host's port */\n+  def port: Int\n+}\n+\n+private class LeaderImpl(\n+  override val topic: String,\n+  override val partition: Int,\n+  override val host: String,\n+  override val port: Int\n+) extends Leader\n+\n+object Leader {\n+  def create(\n+    topic: String,\n+    partition: Int,\n+    host: String,\n+    port: Int): Leader =\n+    new LeaderImpl(\n+      topic,\n+      partition,\n+      host,\n+      port)\n+\n+    def create("
  }],
  "prId": 3798
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "indent of 4 over the top line for such multiple class/method parameters. \nSee this https://cwiki.apache.org/confluence/display/SPARK/Spark+Code+Style+Guide\nThis is a problem with a lot of the methods, especially in KafkaCluster. I know its annoying but please fix them :)\n",
    "commit": "1dc29415e3c0ac23a4207513686dfe5ee5ab2725",
    "createdAt": "2015-01-30T04:23:52Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka\n+\n+import kafka.common.TopicAndPartition\n+\n+/** Host info for the leader of a Kafka TopicAndPartition */\n+\n+trait Leader {\n+    /** kafka topic name */\n+  def topic: String\n+\n+  /** kafka partition id */\n+  def partition: Int\n+\n+  /** kafka hostname */\n+  def host: String\n+  \n+  /** kafka host's port */\n+  def port: Int\n+}\n+\n+private class LeaderImpl(\n+  override val topic: String,\n+  override val partition: Int,\n+  override val host: String,\n+  override val port: Int\n+) extends Leader\n+\n+object Leader {\n+  def create(\n+    topic: String,"
  }],
  "prId": 3798
}, {
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "Similar with offset ranges, can't we just have a single way to construct these?\n",
    "commit": "1dc29415e3c0ac23a4207513686dfe5ee5ab2725",
    "createdAt": "2015-02-03T08:33:55Z",
    "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka\n+\n+import kafka.common.TopicAndPartition\n+\n+/** Host info for the leader of a Kafka TopicAndPartition */\n+final class Leader private(\n+    /** kafka topic name */\n+    val topic: String,\n+    /** kafka partition id */\n+    val partition: Int,\n+    /** kafka hostname */\n+    val host: String,\n+    /** kafka host's port */\n+    val port: Int) extends Serializable\n+\n+object Leader {\n+  def create(topic: String, partition: Int, host: String, port: Int): Leader =",
    "line": 34
  }],
  "prId": 3798
}]