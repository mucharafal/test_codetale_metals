[{
  "comments": [{
    "author": {
      "login": "mariobriggs"
    },
    "body": "thinking another way. Instead of having a common base class and then 2 classes that extend it, could we introduce a 'BackPressure' trait that is then mixed-in \n\nBenefits :  we don't have to force fit things like Decoder's in base class  type (especially given we are force fitting the deprecated thing in base)\n\nWe still might not be able to do away with the TopicPartition vs TopicAndPartition even when using the BackPressure trait. But in those scenario's, i think we should use the new consumer class as a rule of thumb rather than the old kafka.xxx classes (after all that is what we will knock off over period of time and not the other way around and also we force the old impl to do the extra conversion step and not the new impl.... few nanosecond gain :-) )\n",
    "commit": "229b773f9c5c894088a29937f241ad0db48991ba",
    "createdAt": "2016-02-08T17:51:16Z",
    "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka\n+\n+import scala.collection.mutable\n+import scala.reflect.ClassTag\n+\n+import kafka.common.TopicAndPartition\n+import kafka.serializer.Decoder\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.streaming.{StreamingContext, Time}\n+import org.apache.spark.streaming.dstream._\n+import org.apache.spark.streaming.scheduler.{RateController, StreamInputInfo}\n+import org.apache.spark.streaming.scheduler.rate.RateEstimator\n+\n+/**\n+ *  A stream of {@link org.apache.spark.streaming.kafka.KafkaRDD} where\n+ * each given Kafka topic/partition corresponds to an RDD partition.\n+ * The spark configuration spark.streaming.kafka.maxRatePerPartition gives the maximum number\n+ *  of messages\n+ * per second that each '''partition''' will accept.\n+ * Starting offsets are specified in advance,\n+ * and this DStream is not responsible for committing offsets,\n+ * so that you can control exactly-once semantics.\n+ * For an easy interface to Kafka-managed offsets,\n+ *  see {@link org.apache.spark.streaming.kafka.KafkaCluster}\n+  *\n+  * @param kafkaParams Kafka <a href=\"http://kafka.apache.org/documentation.html#configuration\">\n+ * configuration parameters</a>.\n+ *   Requires \"metadata.broker.list\" or \"bootstrap.servers\" to be set with Kafka broker(s),\n+ *   NOT zookeeper servers, specified in host1:port1,host2:port2 form.\n+ * @param fromOffsets per-topic/partition Kafka offsets defining the (inclusive)\n+ *  starting point of the stream\n+ */\n+private[streaming]\n+abstract class DirectKafkaInputDStreamBase[",
    "line": 52
  }, {
    "author": {
      "login": "markgrover"
    },
    "body": "Hi Mario, thanks for your feedback. This is a reasonable request. However, I think both you and I realize this is relatively minor and see my comment below about the new API not being the go to recommendation just yet. So, I will keep this on the back burner for now.\n",
    "commit": "229b773f9c5c894088a29937f241ad0db48991ba",
    "createdAt": "2016-02-09T19:33:49Z",
    "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka\n+\n+import scala.collection.mutable\n+import scala.reflect.ClassTag\n+\n+import kafka.common.TopicAndPartition\n+import kafka.serializer.Decoder\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.streaming.{StreamingContext, Time}\n+import org.apache.spark.streaming.dstream._\n+import org.apache.spark.streaming.scheduler.{RateController, StreamInputInfo}\n+import org.apache.spark.streaming.scheduler.rate.RateEstimator\n+\n+/**\n+ *  A stream of {@link org.apache.spark.streaming.kafka.KafkaRDD} where\n+ * each given Kafka topic/partition corresponds to an RDD partition.\n+ * The spark configuration spark.streaming.kafka.maxRatePerPartition gives the maximum number\n+ *  of messages\n+ * per second that each '''partition''' will accept.\n+ * Starting offsets are specified in advance,\n+ * and this DStream is not responsible for committing offsets,\n+ * so that you can control exactly-once semantics.\n+ * For an easy interface to Kafka-managed offsets,\n+ *  see {@link org.apache.spark.streaming.kafka.KafkaCluster}\n+  *\n+  * @param kafkaParams Kafka <a href=\"http://kafka.apache.org/documentation.html#configuration\">\n+ * configuration parameters</a>.\n+ *   Requires \"metadata.broker.list\" or \"bootstrap.servers\" to be set with Kafka broker(s),\n+ *   NOT zookeeper servers, specified in host1:port1,host2:port2 form.\n+ * @param fromOffsets per-topic/partition Kafka offsets defining the (inclusive)\n+ *  starting point of the stream\n+ */\n+private[streaming]\n+abstract class DirectKafkaInputDStreamBase[",
    "line": 52
  }],
  "prId": 10953
}]