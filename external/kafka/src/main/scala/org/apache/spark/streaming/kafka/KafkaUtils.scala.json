[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "nit: incorrect indent.\n",
    "commit": "b2bbfee3cd164cebaf4e3cd51d97bbd4372dde42",
    "createdAt": "2015-11-17T01:54:11Z",
    "diffHunk": "@@ -566,86 +579,97 @@ private[kafka] class KafkaUtilsPythonHelper {\n       storageLevel)\n   }\n \n-  def createRDD(\n+  def createRDDWithoutMessageHandler(\n       jsc: JavaSparkContext,\n       kafkaParams: JMap[String, String],\n       offsetRanges: JList[OffsetRange],\n-      leaders: JMap[TopicAndPartition, Broker]): JavaPairRDD[Array[Byte], Array[Byte]] = {\n-    val messageHandler = new JFunction[MessageAndMetadata[Array[Byte], Array[Byte]],\n-      (Array[Byte], Array[Byte])] {\n-      def call(t1: MessageAndMetadata[Array[Byte], Array[Byte]]): (Array[Byte], Array[Byte]) =\n-        (t1.key(), t1.message())\n-    }\n+      leaders: JMap[TopicAndPartition, Broker]\n+      ): JavaRDD[(Array[Byte], Array[Byte])] = {"
  }],
  "prId": 9742
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "incorrect indent\n",
    "commit": "b2bbfee3cd164cebaf4e3cd51d97bbd4372dde42",
    "createdAt": "2015-11-17T01:55:52Z",
    "diffHunk": "@@ -566,86 +579,97 @@ private[kafka] class KafkaUtilsPythonHelper {\n       storageLevel)\n   }\n \n-  def createRDD(\n+  def createRDDWithoutMessageHandler(\n       jsc: JavaSparkContext,\n       kafkaParams: JMap[String, String],\n       offsetRanges: JList[OffsetRange],\n-      leaders: JMap[TopicAndPartition, Broker]): JavaPairRDD[Array[Byte], Array[Byte]] = {\n-    val messageHandler = new JFunction[MessageAndMetadata[Array[Byte], Array[Byte]],\n-      (Array[Byte], Array[Byte])] {\n-      def call(t1: MessageAndMetadata[Array[Byte], Array[Byte]]): (Array[Byte], Array[Byte]) =\n-        (t1.key(), t1.message())\n-    }\n+      leaders: JMap[TopicAndPartition, Broker]\n+      ): JavaRDD[(Array[Byte], Array[Byte])] = {\n+    val messageHandler =\n+      (mmd: MessageAndMetadata[Array[Byte], Array[Byte]]) => (mmd.key, mmd.message)\n+    new JavaRDD(createRDD(jsc, kafkaParams, offsetRanges, leaders, messageHandler))\n+  }\n+\n+  def createRDDWithMessageHandler(\n+      jsc: JavaSparkContext,\n+      kafkaParams: JMap[String, String],\n+      offsetRanges: JList[OffsetRange],\n+      leaders: JMap[TopicAndPartition, Broker]\n+    ): JavaRDD[Array[Byte]] = {\n+    val messageHandler = (mmd: MessageAndMetadata[Array[Byte], Array[Byte]]) =>\n+      new PythonMessageAndMetadata(\n+        mmd.topic, mmd.partition, mmd.offset, mmd.key(), mmd.message())\n+    val rdd = createRDD(jsc, kafkaParams, offsetRanges, leaders, messageHandler).\n+        mapPartitions(picklerIterator)\n+    new JavaRDD(rdd)\n+  }\n \n-    val jrdd = KafkaUtils.createRDD[\n-      Array[Byte],\n-      Array[Byte],\n-      DefaultDecoder,\n-      DefaultDecoder,\n-      (Array[Byte], Array[Byte])](\n-        jsc,\n-        classOf[Array[Byte]],\n-        classOf[Array[Byte]],\n-        classOf[DefaultDecoder],\n-        classOf[DefaultDecoder],\n-        classOf[(Array[Byte], Array[Byte])],\n-        kafkaParams,\n-        offsetRanges.toArray(new Array[OffsetRange](offsetRanges.size())),\n-        leaders,\n-        messageHandler\n-      )\n-    new JavaPairRDD(jrdd.rdd)\n+  private def createRDD[V: ClassTag](\n+      jsc: JavaSparkContext,\n+      kafkaParams: JMap[String, String],\n+      offsetRanges: JList[OffsetRange],\n+      leaders: JMap[TopicAndPartition, Broker],\n+      messageHandler: MessageAndMetadata[Array[Byte], Array[Byte]] => V): RDD[V] = {\n+    KafkaUtils.createRDD[Array[Byte], Array[Byte], DefaultDecoder, DefaultDecoder, V](\n+      jsc.sc,\n+      kafkaParams.asScala.toMap,\n+      offsetRanges.toArray(new Array[OffsetRange](offsetRanges.size())),\n+      leaders.asScala.toMap,\n+      messageHandler\n+    )\n+  }\n+\n+  def createDirectStreamWithoutMessageHandler(\n+      jssc: JavaStreamingContext,\n+      kafkaParams: JMap[String, String],\n+      topics: JSet[String],\n+      fromOffsets: JMap[TopicAndPartition, JLong]\n+      ): JavaDStream[(Array[Byte], Array[Byte])] = {\n+    val messageHandler =\n+      (mmd: MessageAndMetadata[Array[Byte], Array[Byte]]) => (mmd.key, mmd.message)\n+    new JavaDStream(createDirectStream(jssc, kafkaParams, topics, fromOffsets, messageHandler))\n   }\n \n-  def createDirectStream(\n+  def createDirectStreamWithMessageHandler(\n       jssc: JavaStreamingContext,\n       kafkaParams: JMap[String, String],\n       topics: JSet[String],\n       fromOffsets: JMap[TopicAndPartition, JLong]\n-    ): JavaPairInputDStream[Array[Byte], Array[Byte]] = {\n+      ): JavaDStream[Array[Byte]] = {"
  }],
  "prId": 9742
}]