[{
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "You don't need to convert to bytes. PythonRDD will do it. You can pass a Sting JavaDStream and use `UTF8Deserializer` in Python directly.\n",
    "commit": "03f3e884d433eaa83c8573720d0b3262fadf36ae",
    "createdAt": "2015-07-15T09:42:18Z",
    "diffHunk": "@@ -74,3 +75,24 @@ object MQTTUtils {\n     createStream(jssc.ssc, brokerUrl, topic, storageLevel)\n   }\n }\n+\n+/**\n+ * This is a helper class that wraps the methods in MQTTUtils into more Python-friendly class and\n+ * function so that it can be easily instantiated and called from Python's MQTTUtils.\n+ */\n+private class MQTTUtilsPythonHelper {\n+\n+  def createStream(\n+      jssc: JavaStreamingContext,\n+      brokerUrl: String,\n+      topic: String,\n+      storageLevel: StorageLevel\n+    ): JavaDStream[Array[Byte]] = {\n+    val dstream = MQTTUtils.createStream(jssc, brokerUrl, topic, storageLevel)\n+    dstream.map(new Function[String, Array[Byte]] {\n+      override def call(data: String): Array[Byte] = {\n+        data.getBytes(\"UTF-8\")"
  }, {
    "author": {
      "login": "prabeesh"
    },
    "body": "In side the function it should be Array[Byte] not a string\n",
    "commit": "03f3e884d433eaa83c8573720d0b3262fadf36ae",
    "createdAt": "2015-07-20T14:07:32Z",
    "diffHunk": "@@ -74,3 +75,24 @@ object MQTTUtils {\n     createStream(jssc.ssc, brokerUrl, topic, storageLevel)\n   }\n }\n+\n+/**\n+ * This is a helper class that wraps the methods in MQTTUtils into more Python-friendly class and\n+ * function so that it can be easily instantiated and called from Python's MQTTUtils.\n+ */\n+private class MQTTUtilsPythonHelper {\n+\n+  def createStream(\n+      jssc: JavaStreamingContext,\n+      brokerUrl: String,\n+      topic: String,\n+      storageLevel: StorageLevel\n+    ): JavaDStream[Array[Byte]] = {\n+    val dstream = MQTTUtils.createStream(jssc, brokerUrl, topic, storageLevel)\n+    dstream.map(new Function[String, Array[Byte]] {\n+      override def call(data: String): Array[Byte] = {\n+        data.getBytes(\"UTF-8\")"
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "I mean you can return `JavaDStream[String]` directly. \n",
    "commit": "03f3e884d433eaa83c8573720d0b3262fadf36ae",
    "createdAt": "2015-07-20T15:51:39Z",
    "diffHunk": "@@ -74,3 +75,24 @@ object MQTTUtils {\n     createStream(jssc.ssc, brokerUrl, topic, storageLevel)\n   }\n }\n+\n+/**\n+ * This is a helper class that wraps the methods in MQTTUtils into more Python-friendly class and\n+ * function so that it can be easily instantiated and called from Python's MQTTUtils.\n+ */\n+private class MQTTUtilsPythonHelper {\n+\n+  def createStream(\n+      jssc: JavaStreamingContext,\n+      brokerUrl: String,\n+      topic: String,\n+      storageLevel: StorageLevel\n+    ): JavaDStream[Array[Byte]] = {\n+    val dstream = MQTTUtils.createStream(jssc, brokerUrl, topic, storageLevel)\n+    dstream.map(new Function[String, Array[Byte]] {\n+      override def call(data: String): Array[Byte] = {\n+        data.getBytes(\"UTF-8\")"
  }],
  "prId": 4229
}]