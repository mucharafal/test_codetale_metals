[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Is this needed in the stream options? Shouldn't it be inherited from the cluster configuration in the main config?",
    "commit": "b0003550109a44a1646cdbae27b92f84de4dadb5",
    "createdAt": "2019-08-26T20:30:04Z",
    "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.util.UUID\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.security.{Credentials, UserGroupInformation}\n+import org.apache.kafka.common.security.auth.SecurityProtocol.SASL_PLAINTEXT\n+\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.deploy.security.HadoopDelegationTokenManager\n+import org.apache.spark.internal.config.{KEYTAB, PRINCIPAL}\n+import org.apache.spark.sql.execution.streaming.MemoryStream\n+import org.apache.spark.sql.streaming.{OutputMode, StreamTest}\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class KafkaDelegationTokenSuite extends StreamTest with SharedSQLContext with KafkaTest {\n+\n+  import testImplicits._\n+\n+  protected var testUtils: KafkaTestUtils = _\n+\n+  protected override def sparkConf = super.sparkConf\n+    .set(\"spark.security.credentials.hadoopfs.enabled\", \"false\")\n+    .set(\"spark.security.credentials.hbase.enabled\", \"false\")\n+    .set(KEYTAB, testUtils.clientKeytab)\n+    .set(PRINCIPAL, testUtils.clientPrincipal)\n+    .set(\"spark.kafka.clusters.cluster1.auth.bootstrap.servers\", testUtils.brokerAddress)\n+    .set(\"spark.kafka.clusters.cluster1.security.protocol\", SASL_PLAINTEXT.name)\n+\n+  override def beforeAll(): Unit = {\n+    testUtils = new KafkaTestUtils(Map.empty, true)\n+    testUtils.setup()\n+    super.beforeAll()\n+  }\n+\n+  override def afterAll(): Unit = {\n+    try {\n+      if (testUtils != null) {\n+        testUtils.teardown()\n+        testUtils = null\n+      }\n+      UserGroupInformation.reset()\n+    } finally {\n+      super.afterAll()\n+    }\n+  }\n+\n+  test(\"Roundtrip\") {\n+    val hadoopConf = new Configuration()\n+    val manager = new HadoopDelegationTokenManager(spark.sparkContext.conf, hadoopConf, null)\n+    val credentials = new Credentials()\n+    manager.obtainDelegationTokens(credentials)\n+    val serializedCredentials = SparkHadoopUtil.get.serialize(credentials)\n+    SparkHadoopUtil.get.addDelegationTokens(serializedCredentials, spark.sparkContext.conf)\n+\n+    val topic = \"topic-\" + UUID.randomUUID().toString\n+    testUtils.createTopic(topic, partitions = 5)\n+\n+    withTempDir { checkpointDir =>\n+      val input = MemoryStream[String]\n+\n+      val df = input.toDF()\n+      val writer = df.writeStream\n+        .outputMode(OutputMode.Append)\n+        .format(\"kafka\")\n+        .option(\"checkpointLocation\", checkpointDir.getCanonicalPath)\n+        .option(\"kafka.bootstrap.servers\", testUtils.brokerAddress)\n+        .option(\"kafka.security.protocol\", SASL_PLAINTEXT.name)",
    "line": 85
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "I was thinking about that before and the conclusion was not to inherit it. Obtaining a token should not necessarily use the same protocol as data fetching.",
    "commit": "b0003550109a44a1646cdbae27b92f84de4dadb5",
    "createdAt": "2019-08-27T13:57:13Z",
    "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.util.UUID\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.security.{Credentials, UserGroupInformation}\n+import org.apache.kafka.common.security.auth.SecurityProtocol.SASL_PLAINTEXT\n+\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.deploy.security.HadoopDelegationTokenManager\n+import org.apache.spark.internal.config.{KEYTAB, PRINCIPAL}\n+import org.apache.spark.sql.execution.streaming.MemoryStream\n+import org.apache.spark.sql.streaming.{OutputMode, StreamTest}\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class KafkaDelegationTokenSuite extends StreamTest with SharedSQLContext with KafkaTest {\n+\n+  import testImplicits._\n+\n+  protected var testUtils: KafkaTestUtils = _\n+\n+  protected override def sparkConf = super.sparkConf\n+    .set(\"spark.security.credentials.hadoopfs.enabled\", \"false\")\n+    .set(\"spark.security.credentials.hbase.enabled\", \"false\")\n+    .set(KEYTAB, testUtils.clientKeytab)\n+    .set(PRINCIPAL, testUtils.clientPrincipal)\n+    .set(\"spark.kafka.clusters.cluster1.auth.bootstrap.servers\", testUtils.brokerAddress)\n+    .set(\"spark.kafka.clusters.cluster1.security.protocol\", SASL_PLAINTEXT.name)\n+\n+  override def beforeAll(): Unit = {\n+    testUtils = new KafkaTestUtils(Map.empty, true)\n+    testUtils.setup()\n+    super.beforeAll()\n+  }\n+\n+  override def afterAll(): Unit = {\n+    try {\n+      if (testUtils != null) {\n+        testUtils.teardown()\n+        testUtils = null\n+      }\n+      UserGroupInformation.reset()\n+    } finally {\n+      super.afterAll()\n+    }\n+  }\n+\n+  test(\"Roundtrip\") {\n+    val hadoopConf = new Configuration()\n+    val manager = new HadoopDelegationTokenManager(spark.sparkContext.conf, hadoopConf, null)\n+    val credentials = new Credentials()\n+    manager.obtainDelegationTokens(credentials)\n+    val serializedCredentials = SparkHadoopUtil.get.serialize(credentials)\n+    SparkHadoopUtil.get.addDelegationTokens(serializedCredentials, spark.sparkContext.conf)\n+\n+    val topic = \"topic-\" + UUID.randomUUID().toString\n+    testUtils.createTopic(topic, partitions = 5)\n+\n+    withTempDir { checkpointDir =>\n+      val input = MemoryStream[String]\n+\n+      val df = input.toDF()\n+      val writer = df.writeStream\n+        .outputMode(OutputMode.Append)\n+        .format(\"kafka\")\n+        .option(\"checkpointLocation\", checkpointDir.getCanonicalPath)\n+        .option(\"kafka.bootstrap.servers\", testUtils.brokerAddress)\n+        .option(\"kafka.security.protocol\", SASL_PLAINTEXT.name)",
    "line": 85
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Hmm. Not sure I completely agree. While you might want them to be different in some case that I can't think of, I don't see a reason not to inherit that value by default if the bootstrap servers match some existing cluster configuration.\r\n\r\nSo inherit, but allow user to override.\r\n\r\n(Although this isn't necessarily related to this PR.)",
    "commit": "b0003550109a44a1646cdbae27b92f84de4dadb5",
    "createdAt": "2019-08-27T18:27:59Z",
    "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.util.UUID\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.security.{Credentials, UserGroupInformation}\n+import org.apache.kafka.common.security.auth.SecurityProtocol.SASL_PLAINTEXT\n+\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.deploy.security.HadoopDelegationTokenManager\n+import org.apache.spark.internal.config.{KEYTAB, PRINCIPAL}\n+import org.apache.spark.sql.execution.streaming.MemoryStream\n+import org.apache.spark.sql.streaming.{OutputMode, StreamTest}\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class KafkaDelegationTokenSuite extends StreamTest with SharedSQLContext with KafkaTest {\n+\n+  import testImplicits._\n+\n+  protected var testUtils: KafkaTestUtils = _\n+\n+  protected override def sparkConf = super.sparkConf\n+    .set(\"spark.security.credentials.hadoopfs.enabled\", \"false\")\n+    .set(\"spark.security.credentials.hbase.enabled\", \"false\")\n+    .set(KEYTAB, testUtils.clientKeytab)\n+    .set(PRINCIPAL, testUtils.clientPrincipal)\n+    .set(\"spark.kafka.clusters.cluster1.auth.bootstrap.servers\", testUtils.brokerAddress)\n+    .set(\"spark.kafka.clusters.cluster1.security.protocol\", SASL_PLAINTEXT.name)\n+\n+  override def beforeAll(): Unit = {\n+    testUtils = new KafkaTestUtils(Map.empty, true)\n+    testUtils.setup()\n+    super.beforeAll()\n+  }\n+\n+  override def afterAll(): Unit = {\n+    try {\n+      if (testUtils != null) {\n+        testUtils.teardown()\n+        testUtils = null\n+      }\n+      UserGroupInformation.reset()\n+    } finally {\n+      super.afterAll()\n+    }\n+  }\n+\n+  test(\"Roundtrip\") {\n+    val hadoopConf = new Configuration()\n+    val manager = new HadoopDelegationTokenManager(spark.sparkContext.conf, hadoopConf, null)\n+    val credentials = new Credentials()\n+    manager.obtainDelegationTokens(credentials)\n+    val serializedCredentials = SparkHadoopUtil.get.serialize(credentials)\n+    SparkHadoopUtil.get.addDelegationTokens(serializedCredentials, spark.sparkContext.conf)\n+\n+    val topic = \"topic-\" + UUID.randomUUID().toString\n+    testUtils.createTopic(topic, partitions = 5)\n+\n+    withTempDir { checkpointDir =>\n+      val input = MemoryStream[String]\n+\n+      val df = input.toDF()\n+      val writer = df.writeStream\n+        .outputMode(OutputMode.Append)\n+        .format(\"kafka\")\n+        .option(\"checkpointLocation\", checkpointDir.getCanonicalPath)\n+        .option(\"kafka.bootstrap.servers\", testUtils.brokerAddress)\n+        .option(\"kafka.security.protocol\", SASL_PLAINTEXT.name)",
    "line": 85
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "I agree that the default is not convenient. At the moment all the users have to set it even if not differ. What I wanted to do is not closing this door. Taking over by default if matches in broker name and overwriting it with the `.option(\"kafka.security.protocol\", ...` makes it convenient and flexible as well. Thanks and going to file a jira...",
    "commit": "b0003550109a44a1646cdbae27b92f84de4dadb5",
    "createdAt": "2019-08-28T12:31:17Z",
    "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.util.UUID\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.security.{Credentials, UserGroupInformation}\n+import org.apache.kafka.common.security.auth.SecurityProtocol.SASL_PLAINTEXT\n+\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.deploy.security.HadoopDelegationTokenManager\n+import org.apache.spark.internal.config.{KEYTAB, PRINCIPAL}\n+import org.apache.spark.sql.execution.streaming.MemoryStream\n+import org.apache.spark.sql.streaming.{OutputMode, StreamTest}\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class KafkaDelegationTokenSuite extends StreamTest with SharedSQLContext with KafkaTest {\n+\n+  import testImplicits._\n+\n+  protected var testUtils: KafkaTestUtils = _\n+\n+  protected override def sparkConf = super.sparkConf\n+    .set(\"spark.security.credentials.hadoopfs.enabled\", \"false\")\n+    .set(\"spark.security.credentials.hbase.enabled\", \"false\")\n+    .set(KEYTAB, testUtils.clientKeytab)\n+    .set(PRINCIPAL, testUtils.clientPrincipal)\n+    .set(\"spark.kafka.clusters.cluster1.auth.bootstrap.servers\", testUtils.brokerAddress)\n+    .set(\"spark.kafka.clusters.cluster1.security.protocol\", SASL_PLAINTEXT.name)\n+\n+  override def beforeAll(): Unit = {\n+    testUtils = new KafkaTestUtils(Map.empty, true)\n+    testUtils.setup()\n+    super.beforeAll()\n+  }\n+\n+  override def afterAll(): Unit = {\n+    try {\n+      if (testUtils != null) {\n+        testUtils.teardown()\n+        testUtils = null\n+      }\n+      UserGroupInformation.reset()\n+    } finally {\n+      super.afterAll()\n+    }\n+  }\n+\n+  test(\"Roundtrip\") {\n+    val hadoopConf = new Configuration()\n+    val manager = new HadoopDelegationTokenManager(spark.sparkContext.conf, hadoopConf, null)\n+    val credentials = new Credentials()\n+    manager.obtainDelegationTokens(credentials)\n+    val serializedCredentials = SparkHadoopUtil.get.serialize(credentials)\n+    SparkHadoopUtil.get.addDelegationTokens(serializedCredentials, spark.sparkContext.conf)\n+\n+    val topic = \"topic-\" + UUID.randomUUID().toString\n+    testUtils.createTopic(topic, partitions = 5)\n+\n+    withTempDir { checkpointDir =>\n+      val input = MemoryStream[String]\n+\n+      val df = input.toDF()\n+      val writer = df.writeStream\n+        .outputMode(OutputMode.Append)\n+        .format(\"kafka\")\n+        .option(\"checkpointLocation\", checkpointDir.getCanonicalPath)\n+        .option(\"kafka.bootstrap.servers\", testUtils.brokerAddress)\n+        .option(\"kafka.security.protocol\", SASL_PLAINTEXT.name)",
    "line": 85
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "For tracking purposes I've filed [SPARK-28928](https://issues.apache.org/jira/browse/SPARK-28928).",
    "commit": "b0003550109a44a1646cdbae27b92f84de4dadb5",
    "createdAt": "2019-08-30T12:33:48Z",
    "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.util.UUID\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.security.{Credentials, UserGroupInformation}\n+import org.apache.kafka.common.security.auth.SecurityProtocol.SASL_PLAINTEXT\n+\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.deploy.security.HadoopDelegationTokenManager\n+import org.apache.spark.internal.config.{KEYTAB, PRINCIPAL}\n+import org.apache.spark.sql.execution.streaming.MemoryStream\n+import org.apache.spark.sql.streaming.{OutputMode, StreamTest}\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class KafkaDelegationTokenSuite extends StreamTest with SharedSQLContext with KafkaTest {\n+\n+  import testImplicits._\n+\n+  protected var testUtils: KafkaTestUtils = _\n+\n+  protected override def sparkConf = super.sparkConf\n+    .set(\"spark.security.credentials.hadoopfs.enabled\", \"false\")\n+    .set(\"spark.security.credentials.hbase.enabled\", \"false\")\n+    .set(KEYTAB, testUtils.clientKeytab)\n+    .set(PRINCIPAL, testUtils.clientPrincipal)\n+    .set(\"spark.kafka.clusters.cluster1.auth.bootstrap.servers\", testUtils.brokerAddress)\n+    .set(\"spark.kafka.clusters.cluster1.security.protocol\", SASL_PLAINTEXT.name)\n+\n+  override def beforeAll(): Unit = {\n+    testUtils = new KafkaTestUtils(Map.empty, true)\n+    testUtils.setup()\n+    super.beforeAll()\n+  }\n+\n+  override def afterAll(): Unit = {\n+    try {\n+      if (testUtils != null) {\n+        testUtils.teardown()\n+        testUtils = null\n+      }\n+      UserGroupInformation.reset()\n+    } finally {\n+      super.afterAll()\n+    }\n+  }\n+\n+  test(\"Roundtrip\") {\n+    val hadoopConf = new Configuration()\n+    val manager = new HadoopDelegationTokenManager(spark.sparkContext.conf, hadoopConf, null)\n+    val credentials = new Credentials()\n+    manager.obtainDelegationTokens(credentials)\n+    val serializedCredentials = SparkHadoopUtil.get.serialize(credentials)\n+    SparkHadoopUtil.get.addDelegationTokens(serializedCredentials, spark.sparkContext.conf)\n+\n+    val topic = \"topic-\" + UUID.randomUUID().toString\n+    testUtils.createTopic(topic, partitions = 5)\n+\n+    withTempDir { checkpointDir =>\n+      val input = MemoryStream[String]\n+\n+      val df = input.toDF()\n+      val writer = df.writeStream\n+        .outputMode(OutputMode.Append)\n+        .format(\"kafka\")\n+        .option(\"checkpointLocation\", checkpointDir.getCanonicalPath)\n+        .option(\"kafka.bootstrap.servers\", testUtils.brokerAddress)\n+        .option(\"kafka.security.protocol\", SASL_PLAINTEXT.name)",
    "line": 85
  }],
  "prId": 25477
}]