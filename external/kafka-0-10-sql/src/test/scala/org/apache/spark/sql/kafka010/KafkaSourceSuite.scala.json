[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Thank you so much for investigating and fixing this, @jose-torres !\r\nActually, I faced several deadlock situations with these suites.",
    "commit": "66bdcea6c18770fa339b03b3765a4724325c2cb3",
    "createdAt": "2018-01-25T19:22:09Z",
    "diffHunk": "@@ -1116,6 +1116,7 @@ class KafkaSourceStressForDontFailOnDataLossSuite extends StreamTest with Shared\n     }\n \n     query.stop()\n+    query.awaitTermination()"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Do you think we can have `query.processAllAvailable()` before `query.stop()`, too?",
    "commit": "66bdcea6c18770fa339b03b3765a4724325c2cb3",
    "createdAt": "2018-01-25T19:33:11Z",
    "diffHunk": "@@ -1116,6 +1116,7 @@ class KafkaSourceStressForDontFailOnDataLossSuite extends StreamTest with Shared\n     }\n \n     query.stop()\n+    query.awaitTermination()"
  }, {
    "author": {
      "login": "jose-torres"
    },
    "body": "This made me realize I misdiagnosed the problem. awaitTermination() can't actually help here, because the query itself is generating an exception.\r\n\r\nThe real problem is that we're using a \"local[2,3]\" test cluster, which only has 2 cores. Continuous processing requires 1 core per topic partition, so when the test randomly gets above 2 topics, it will fail to make progress. If it stays above 2 topics when the test ends, we'll get the observed flakiness. I'm going to bump the priority of reporting some kind of error in this scenario.\r\n\r\nWe can keep the awaitTermination and add processAllAvailable, since they won't hurt.",
    "commit": "66bdcea6c18770fa339b03b3765a4724325c2cb3",
    "createdAt": "2018-01-25T19:55:04Z",
    "diffHunk": "@@ -1116,6 +1116,7 @@ class KafkaSourceStressForDontFailOnDataLossSuite extends StreamTest with Shared\n     }\n \n     query.stop()\n+    query.awaitTermination()"
  }, {
    "author": {
      "login": "jose-torres"
    },
    "body": "(This most likely explains your observed deadlock situations; the query will look very much like it's deadlocked if the epoch never advances because not all partitions are running.)",
    "commit": "66bdcea6c18770fa339b03b3765a4724325c2cb3",
    "createdAt": "2018-01-25T19:57:35Z",
    "diffHunk": "@@ -1116,6 +1116,7 @@ class KafkaSourceStressForDontFailOnDataLossSuite extends StreamTest with Shared\n     }\n \n     query.stop()\n+    query.awaitTermination()"
  }],
  "prId": 20398
}]