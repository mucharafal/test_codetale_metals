[{
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "can you also add a test:\r\n```\r\nfromOffsets = Map(tp1 -> 1),\r\nuntilOffsets = Map(tp1 -> 10)\r\nminPartitions = 3\r\n```",
    "commit": "602ab36490a692080682867f98a8a5d8f7b2390d",
    "createdAt": "2018-03-02T23:25:48Z",
    "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.kafka.common.TopicPartition\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.sources.v2.DataSourceOptions\n+\n+class KafkaOffsetRangeCalculatorSuite extends SparkFunSuite {\n+\n+  def testWithMinPartitions(name: String, minPartition: Int)\n+      (f: KafkaOffsetRangeCalculator => Unit): Unit = {\n+    val options = new DataSourceOptions(Map(\"minPartitions\" -> minPartition.toString).asJava)\n+    test(s\"with minPartition = $minPartition: $name\") {\n+      f(KafkaOffsetRangeCalculator(options))\n+    }\n+  }\n+\n+\n+  test(\"with no minPartition: N TopicPartitions to N offset ranges\") {\n+    val calc = KafkaOffsetRangeCalculator(DataSourceOptions.empty())\n+    assert(\n+      calc.getRanges(\n+        fromOffsets = Map(tp1 -> 1),\n+        untilOffsets = Map(tp1 -> 2)) ==\n+      Seq(KafkaOffsetRange(tp1, 1, 2, None)))\n+\n+    assert(\n+      calc.getRanges(\n+        fromOffsets = Map(tp1 -> 1),\n+        untilOffsets = Map(tp1 -> 2, tp2 -> 1), Seq.empty) ==\n+      Seq(KafkaOffsetRange(tp1, 1, 2, None)))\n+\n+    assert(\n+      calc.getRanges(\n+        fromOffsets = Map(tp1 -> 1, tp2 -> 1),\n+        untilOffsets = Map(tp1 -> 2)) ==\n+      Seq(KafkaOffsetRange(tp1, 1, 2, None)))\n+\n+    assert(\n+      calc.getRanges(\n+        fromOffsets = Map(tp1 -> 1, tp2 -> 1),\n+        untilOffsets = Map(tp1 -> 2),\n+        executorLocations = Seq(\"location\")) ==\n+      Seq(KafkaOffsetRange(tp1, 1, 2, Some(\"location\"))))\n+  }\n+\n+  test(\"with no minPartition: empty ranges ignored\") {\n+    val calc = KafkaOffsetRangeCalculator(DataSourceOptions.empty())\n+    assert(\n+      calc.getRanges(\n+        fromOffsets = Map(tp1 -> 1, tp2 -> 1),\n+        untilOffsets = Map(tp1 -> 2, tp2 -> 1)) ==\n+      Seq(KafkaOffsetRange(tp1, 1, 2, None)))\n+  }\n+\n+  testWithMinPartitions(\"N TopicPartitions to N offset ranges\", 3) { calc =>\n+    assert(\n+      calc.getRanges(\n+        fromOffsets = Map(tp1 -> 1, tp2 -> 1, tp3 -> 1),\n+        untilOffsets = Map(tp1 -> 2, tp2 -> 2, tp3 -> 2)) ==\n+      Seq(\n+        KafkaOffsetRange(tp1, 1, 2, None),\n+        KafkaOffsetRange(tp2, 1, 2, None),\n+        KafkaOffsetRange(tp3, 1, 2, None)))\n+  }\n+\n+  testWithMinPartitions(\"1 TopicPartition to N offset ranges\", 4) { calc =>\n+    assert(\n+      calc.getRanges(\n+        fromOffsets = Map(tp1 -> 1),\n+        untilOffsets = Map(tp1 -> 5)) ==\n+      Seq(\n+        KafkaOffsetRange(tp1, 1, 2, None),\n+        KafkaOffsetRange(tp1, 2, 3, None),\n+        KafkaOffsetRange(tp1, 3, 4, None),\n+        KafkaOffsetRange(tp1, 4, 5, None)))\n+\n+    assert(\n+      calc.getRanges(\n+        fromOffsets = Map(tp1 -> 1),\n+        untilOffsets = Map(tp1 -> 5),\n+        executorLocations = Seq(\"location\")) ==\n+        Seq(\n+          KafkaOffsetRange(tp1, 1, 2, None),\n+          KafkaOffsetRange(tp1, 2, 3, None),\n+          KafkaOffsetRange(tp1, 3, 4, None),\n+          KafkaOffsetRange(tp1, 4, 5, None))) // location pref not set when minPartition is set\n+  }\n+\n+  testWithMinPartitions(\"N skewed TopicPartitions to M offset ranges\", 3) { calc =>",
    "line": 109
  }],
  "prId": 20698
}]