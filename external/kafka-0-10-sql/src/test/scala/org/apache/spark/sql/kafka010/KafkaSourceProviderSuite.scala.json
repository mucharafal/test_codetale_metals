[{
  "comments": [{
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Is it possible to move this into `KafkaSourceProviderSuite` and generalize it (for instance add private method as param an T return type)?",
    "commit": "04b937433662fef8ceaea4714ed5d6cd6638417a",
    "createdAt": "2019-06-28T09:50:52Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.util.Locale\n+\n+import scala.collection.JavaConverters._\n+\n+import org.scalatest.PrivateMethodTester\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.sources.v2.reader.Scan\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class KafkaSourceProviderSuite extends SparkFunSuite with PrivateMethodTester {\n+  private val pollTimeoutMsMethod = PrivateMethod[Long]('pollTimeoutMs)\n+\n+  test(\"SPARK-28142 - continuous mode - options should be handled as case-insensitive\") {\n+    def getPollTimeoutMsFromContinuousStream(options: CaseInsensitiveStringMap): Long = {"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "For instance I would like to reach `KafkaOffsetReader` inside `KafkaContinuousStream`. I need something like this but would be good to generalize it a bit in advance:\r\n```\r\n    def getKafkaOffsetReaderFromContinuousStream(options: CaseInsensitiveStringMap): KafkaOffsetReader = {\r\n      val scan = getKafkaDataSourceScan(options)\r\n      val stream = scan.toContinuousStream(\"dummy\").asInstanceOf[KafkaContinuousStream]\r\n      stream.invokePrivate(offsetReader())\r\n    }\r\n```\r\n",
    "commit": "04b937433662fef8ceaea4714ed5d6cd6638417a",
    "createdAt": "2019-06-28T10:33:19Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.util.Locale\n+\n+import scala.collection.JavaConverters._\n+\n+import org.scalatest.PrivateMethodTester\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.sources.v2.reader.Scan\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class KafkaSourceProviderSuite extends SparkFunSuite with PrivateMethodTester {\n+  private val pollTimeoutMsMethod = PrivateMethod[Long]('pollTimeoutMs)\n+\n+  test(\"SPARK-28142 - continuous mode - options should be handled as case-insensitive\") {\n+    def getPollTimeoutMsFromContinuousStream(options: CaseInsensitiveStringMap): Long = {"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "The other possibility is to split creation and invokePrivate...",
    "commit": "04b937433662fef8ceaea4714ed5d6cd6638417a",
    "createdAt": "2019-06-28T11:12:11Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.util.Locale\n+\n+import scala.collection.JavaConverters._\n+\n+import org.scalatest.PrivateMethodTester\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.sources.v2.reader.Scan\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class KafkaSourceProviderSuite extends SparkFunSuite with PrivateMethodTester {\n+  private val pollTimeoutMsMethod = PrivateMethod[Long]('pollTimeoutMs)\n+\n+  test(\"SPARK-28142 - continuous mode - options should be handled as case-insensitive\") {\n+    def getPollTimeoutMsFromContinuousStream(options: CaseInsensitiveStringMap): Long = {"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Nice suggestion! I guess you would need to do similar one if this patch doesn't provide generic one, so welcome suggestion on the way to reuse the code.",
    "commit": "04b937433662fef8ceaea4714ed5d6cd6638417a",
    "createdAt": "2019-06-28T11:18:08Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.util.Locale\n+\n+import scala.collection.JavaConverters._\n+\n+import org.scalatest.PrivateMethodTester\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.sources.v2.reader.Scan\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class KafkaSourceProviderSuite extends SparkFunSuite with PrivateMethodTester {\n+  private val pollTimeoutMsMethod = PrivateMethod[Long]('pollTimeoutMs)\n+\n+  test(\"SPARK-28142 - continuous mode - options should be handled as case-insensitive\") {\n+    def getPollTimeoutMsFromContinuousStream(options: CaseInsensitiveStringMap): Long = {"
  }],
  "prId": 24999
}, {
  "comments": [{
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Nit: Changing one func call to another one-liner looks odd but it's fine.",
    "commit": "04b937433662fef8ceaea4714ed5d6cd6638417a",
    "createdAt": "2019-06-28T12:14:02Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.util.Locale\n+\n+import scala.collection.JavaConverters._\n+\n+import org.scalatest.PrivateMethodTester\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.sources.v2.reader.Scan\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class KafkaSourceProviderSuite extends SparkFunSuite with PrivateMethodTester {\n+  private val pollTimeoutMsMethod = PrivateMethod[Long]('pollTimeoutMs)\n+\n+  test(\"SPARK-28142 - continuous mode - options should be handled as case-insensitive\") {\n+    def getPollTimeoutMsFromContinuousStream(options: CaseInsensitiveStringMap): Long = {\n+      val scan = getKafkaDataSourceScan(options)\n+      val stream = getKafkaContinuousStream(scan)\n+      getValue(stream, pollTimeoutMsMethod)"
  }],
  "prId": 24999
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Shall we remove this function since this is used once?",
    "commit": "04b937433662fef8ceaea4714ed5d6cd6638417a",
    "createdAt": "2019-07-03T04:30:53Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.util.Locale\n+\n+import scala.collection.JavaConverters._\n+\n+import org.scalatest.PrivateMethodTester\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.sources.v2.reader.Scan\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class KafkaSourceProviderSuite extends SparkFunSuite with PrivateMethodTester {\n+  private val pollTimeoutMsMethod = PrivateMethod[Long]('pollTimeoutMs)\n+\n+  test(\"SPARK-28142 - continuous mode - options should be handled as case-insensitive\") {\n+    // we're trying to read the value of \"pollTimeout\" to see whether option is handled correctly\n+\n+    // upper-case\n+    val expectedValue = 1000\n+    val mapWithUppercase = buildCaseInsensitiveStringMap(\n+      KafkaSourceProvider.CONSUMER_POLL_TIMEOUT.toUpperCase(Locale.ROOT) -> expectedValue.toString)\n+    assert(expectedValue === getFieldFromContinuousStream(mapWithUppercase, pollTimeoutMsMethod))\n+\n+    // lower-case\n+    val mapWithLowercase = buildCaseInsensitiveStringMap(\n+      KafkaSourceProvider.CONSUMER_POLL_TIMEOUT.toLowerCase(Locale.ROOT) -> expectedValue.toString)\n+    assert(expectedValue === getFieldFromContinuousStream(mapWithLowercase, pollTimeoutMsMethod))\n+  }\n+\n+  private def buildCaseInsensitiveStringMap(\n+      options: (String, String)*): CaseInsensitiveStringMap = {\n+    val requiredOptions = Map(\"kafka.bootstrap.servers\" -> \"dummy\", \"subscribe\" -> \"dummy\")\n+    new CaseInsensitiveStringMap((options.toMap ++ requiredOptions).asJava)\n+  }\n+\n+  private def getKafkaDataSourceScan(options: CaseInsensitiveStringMap): Scan = {",
    "line": 94
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "#24967 is planned to reuse this and some more methods being introduced here, as similar tests are required to be added there. @gaborgsomogyi and I discussed to bring methods in this PR. I'm happy to add UT to this patch which #24967 is about to bring after merging this patch, if we want to see how these methods will be reused.",
    "commit": "04b937433662fef8ceaea4714ed5d6cd6638417a",
    "createdAt": "2019-07-03T04:46:42Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.util.Locale\n+\n+import scala.collection.JavaConverters._\n+\n+import org.scalatest.PrivateMethodTester\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.sources.v2.reader.Scan\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class KafkaSourceProviderSuite extends SparkFunSuite with PrivateMethodTester {\n+  private val pollTimeoutMsMethod = PrivateMethod[Long]('pollTimeoutMs)\n+\n+  test(\"SPARK-28142 - continuous mode - options should be handled as case-insensitive\") {\n+    // we're trying to read the value of \"pollTimeout\" to see whether option is handled correctly\n+\n+    // upper-case\n+    val expectedValue = 1000\n+    val mapWithUppercase = buildCaseInsensitiveStringMap(\n+      KafkaSourceProvider.CONSUMER_POLL_TIMEOUT.toUpperCase(Locale.ROOT) -> expectedValue.toString)\n+    assert(expectedValue === getFieldFromContinuousStream(mapWithUppercase, pollTimeoutMsMethod))\n+\n+    // lower-case\n+    val mapWithLowercase = buildCaseInsensitiveStringMap(\n+      KafkaSourceProvider.CONSUMER_POLL_TIMEOUT.toLowerCase(Locale.ROOT) -> expectedValue.toString)\n+    assert(expectedValue === getFieldFromContinuousStream(mapWithLowercase, pollTimeoutMsMethod))\n+  }\n+\n+  private def buildCaseInsensitiveStringMap(\n+      options: (String, String)*): CaseInsensitiveStringMap = {\n+    val requiredOptions = Map(\"kafka.bootstrap.servers\" -> \"dummy\", \"subscribe\" -> \"dummy\")\n+    new CaseInsensitiveStringMap((options.toMap ++ requiredOptions).asJava)\n+  }\n+\n+  private def getKafkaDataSourceScan(options: CaseInsensitiveStringMap): Scan = {",
    "line": 94
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "I'm not sure if #24967 is merged or not. But, I got it. ",
    "commit": "04b937433662fef8ceaea4714ed5d6cd6638417a",
    "createdAt": "2019-07-03T04:58:32Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.util.Locale\n+\n+import scala.collection.JavaConverters._\n+\n+import org.scalatest.PrivateMethodTester\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.sources.v2.reader.Scan\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class KafkaSourceProviderSuite extends SparkFunSuite with PrivateMethodTester {\n+  private val pollTimeoutMsMethod = PrivateMethod[Long]('pollTimeoutMs)\n+\n+  test(\"SPARK-28142 - continuous mode - options should be handled as case-insensitive\") {\n+    // we're trying to read the value of \"pollTimeout\" to see whether option is handled correctly\n+\n+    // upper-case\n+    val expectedValue = 1000\n+    val mapWithUppercase = buildCaseInsensitiveStringMap(\n+      KafkaSourceProvider.CONSUMER_POLL_TIMEOUT.toUpperCase(Locale.ROOT) -> expectedValue.toString)\n+    assert(expectedValue === getFieldFromContinuousStream(mapWithUppercase, pollTimeoutMsMethod))\n+\n+    // lower-case\n+    val mapWithLowercase = buildCaseInsensitiveStringMap(\n+      KafkaSourceProvider.CONSUMER_POLL_TIMEOUT.toLowerCase(Locale.ROOT) -> expectedValue.toString)\n+    assert(expectedValue === getFieldFromContinuousStream(mapWithLowercase, pollTimeoutMsMethod))\n+  }\n+\n+  private def buildCaseInsensitiveStringMap(\n+      options: (String, String)*): CaseInsensitiveStringMap = {\n+    val requiredOptions = Map(\"kafka.bootstrap.servers\" -> \"dummy\", \"subscribe\" -> \"dummy\")\n+    new CaseInsensitiveStringMap((options.toMap ++ requiredOptions).asJava)\n+  }\n+\n+  private def getKafkaDataSourceScan(options: CaseInsensitiveStringMap): Scan = {",
    "line": 94
  }],
  "prId": 24999
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "If we remove `getKafkaDataSourceScan`, we can remove this, too.",
    "commit": "04b937433662fef8ceaea4714ed5d6cd6638417a",
    "createdAt": "2019-07-03T04:40:13Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.util.Locale\n+\n+import scala.collection.JavaConverters._\n+\n+import org.scalatest.PrivateMethodTester\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.sources.v2.reader.Scan",
    "line": 28
  }],
  "prId": 24999
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Like the following, let's reduce the repetition in this test function and remove `buildCaseInsensitiveStringMap`, too.\r\n```scala\r\n  test(\"SPARK-28142 - continuous mode - options should be handled case-insensitively\") {\r\n    // we're trying to read the value of \"pollTimeout\" to see whether option is handled correctly\r\n    val option = KafkaSourceProvider.CONSUMER_POLL_TIMEOUT\r\n    val expectedValue = 1000\r\n    Seq(option.toUpperCase(Locale.ROOT), option.toLowerCase(Locale.ROOT)).foreach { name =>\r\n      val map = new CaseInsensitiveStringMap(Map(\r\n        \"kafka.bootstrap.servers\" -> \"dummy\",\r\n        \"subscribe\" -> \"dummy\",\r\n        name -> expectedValue.toString).asJava)\r\n      assert(expectedValue === getFieldFromContinuousStream(map, pollTimeoutMsMethod))\r\n    }\r\n  }\r\n```",
    "commit": "04b937433662fef8ceaea4714ed5d6cd6638417a",
    "createdAt": "2019-07-03T05:01:27Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.util.Locale\n+\n+import scala.collection.JavaConverters._\n+\n+import org.scalatest.PrivateMethodTester\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.sources.v2.reader.Scan\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class KafkaSourceProviderSuite extends SparkFunSuite with PrivateMethodTester {\n+  private val pollTimeoutMsMethod = PrivateMethod[Long]('pollTimeoutMs)\n+\n+  test(\"SPARK-28142 - continuous mode - options should be handled as case-insensitive\") {",
    "line": 66
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Same here. I guess I would just add test here to ensure they are being reused. Maybe the test would fail given #24967 is a patch for that, but we can comment here and in #24967 we can uncomment. Let me update the PR.",
    "commit": "04b937433662fef8ceaea4714ed5d6cd6638417a",
    "createdAt": "2019-07-03T05:04:04Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.util.Locale\n+\n+import scala.collection.JavaConverters._\n+\n+import org.scalatest.PrivateMethodTester\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.sources.v2.reader.Scan\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class KafkaSourceProviderSuite extends SparkFunSuite with PrivateMethodTester {\n+  private val pollTimeoutMsMethod = PrivateMethod[Long]('pollTimeoutMs)\n+\n+  test(\"SPARK-28142 - continuous mode - options should be handled as case-insensitive\") {",
    "line": 66
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "? What is the same here? At least you should remove the repeatition.",
    "commit": "04b937433662fef8ceaea4714ed5d6cd6638417a",
    "createdAt": "2019-07-03T05:07:28Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.util.Locale\n+\n+import scala.collection.JavaConverters._\n+\n+import org.scalatest.PrivateMethodTester\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.sources.v2.reader.Scan\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class KafkaSourceProviderSuite extends SparkFunSuite with PrivateMethodTester {\n+  private val pollTimeoutMsMethod = PrivateMethod[Long]('pollTimeoutMs)\n+\n+  test(\"SPARK-28142 - continuous mode - options should be handled as case-insensitive\") {",
    "line": 66
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "I'm sorry I missed to get the point. Looks like the point is reducing code for testing uppercase and lowercase. Thanks for the great suggestion. Addressed.",
    "commit": "04b937433662fef8ceaea4714ed5d6cd6638417a",
    "createdAt": "2019-07-03T06:01:08Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.util.Locale\n+\n+import scala.collection.JavaConverters._\n+\n+import org.scalatest.PrivateMethodTester\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.sources.v2.reader.Scan\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class KafkaSourceProviderSuite extends SparkFunSuite with PrivateMethodTester {\n+  private val pollTimeoutMsMethod = PrivateMethod[Long]('pollTimeoutMs)\n+\n+  test(\"SPARK-28142 - continuous mode - options should be handled as case-insensitive\") {",
    "line": 66
  }],
  "prId": 24999
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Do we need `with BeforeAndAfterEach`? `SparkFunSuite` already has it.",
    "commit": "04b937433662fef8ceaea4714ed5d6cd6638417a",
    "createdAt": "2019-07-03T20:43:25Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.util.Locale\n+\n+import scala.collection.JavaConverters._\n+\n+import org.mockito.Mockito.{mock, when}\n+import org.scalatest.{BeforeAndAfterEach, PrivateMethodTester}\n+\n+import org.apache.spark.{SparkConf, SparkEnv, SparkFunSuite}\n+import org.apache.spark.sql.sources.v2.reader.Scan\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class KafkaSourceProviderSuite\n+  extends SparkFunSuite\n+  with BeforeAndAfterEach"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Nice catch. You're right. Removed.",
    "commit": "04b937433662fef8ceaea4714ed5d6cd6638417a",
    "createdAt": "2019-07-04T02:49:55Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.util.Locale\n+\n+import scala.collection.JavaConverters._\n+\n+import org.mockito.Mockito.{mock, when}\n+import org.scalatest.{BeforeAndAfterEach, PrivateMethodTester}\n+\n+import org.apache.spark.{SparkConf, SparkEnv, SparkFunSuite}\n+import org.apache.spark.sql.sources.v2.reader.Scan\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class KafkaSourceProviderSuite\n+  extends SparkFunSuite\n+  with BeforeAndAfterEach"
  }],
  "prId": 24999
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Let's not forget to call `super.afterEach` for safety.",
    "commit": "04b937433662fef8ceaea4714ed5d6cd6638417a",
    "createdAt": "2019-07-03T20:44:16Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.util.Locale\n+\n+import scala.collection.JavaConverters._\n+\n+import org.mockito.Mockito.{mock, when}\n+import org.scalatest.{BeforeAndAfterEach, PrivateMethodTester}\n+\n+import org.apache.spark.{SparkConf, SparkEnv, SparkFunSuite}\n+import org.apache.spark.sql.sources.v2.reader.Scan\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class KafkaSourceProviderSuite\n+  extends SparkFunSuite\n+  with BeforeAndAfterEach\n+  with PrivateMethodTester {\n+\n+  private val pollTimeoutMsMethod = PrivateMethod[Long]('pollTimeoutMs)\n+  private val maxOffsetsPerTriggerMethod = PrivateMethod[Option[Long]]('maxOffsetsPerTrigger)\n+\n+  override protected def afterEach(): Unit = {\n+    SparkEnv.set(null)",
    "line": 37
  }],
  "prId": 24999
}]