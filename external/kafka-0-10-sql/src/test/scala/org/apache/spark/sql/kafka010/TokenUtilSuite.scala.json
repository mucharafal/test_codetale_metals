[{
  "comments": [{
    "author": {
      "login": "steveloughran"
    },
    "body": "why use of .equals() over scalatest's `===` operator? That one includes the values in the assertion raised",
    "commit": "a1228657a56d53ee2ff39232536e88223950d36a",
    "createdAt": "2018-10-09T09:33:11Z",
    "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import org.apache.kafka.clients.CommonClientConfigs\n+import org.apache.kafka.common.config.SaslConfigs\n+import org.scalatest.BeforeAndAfterEach\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.internal.config._\n+\n+class TokenUtilSuite extends SparkFunSuite with BeforeAndAfterEach {\n+  private val bootStrapServers = \"127.0.0.1:0\"\n+  private val plainSecurityProtocol = \"SASL_PLAINTEXT\"\n+  private val sslSecurityProtocol = \"SASL_SSL\"\n+  private val trustStoreLocation = \"/path/to/trustStore\"\n+  private val trustStorePassword = \"secret\"\n+  private val keytab = \"/path/to/keytab\"\n+  private val kerberosServiceName = \"kafka\"\n+  private val principal = \"user@domain.com\"\n+\n+  private var sparkConf: SparkConf = null\n+\n+  override def beforeEach(): Unit = {\n+    super.beforeEach()\n+    sparkConf = new SparkConf()\n+  }\n+\n+  test(\"createAdminClientProperties without bootstrap servers should throw exception\") {\n+    val thrown = intercept[IllegalArgumentException] {\n+      TokenUtil.createAdminClientProperties(sparkConf)\n+    }\n+    assert(thrown.getMessage contains\n+      \"Tried to obtain kafka delegation token but bootstrap servers not configured.\")\n+  }\n+\n+  test(\"createAdminClientProperties without SSL protocol should not take over truststore config\") {\n+    sparkConf.set(KAFKA_BOOTSTRAP_SERVERS, bootStrapServers)\n+    sparkConf.set(KAFKA_SECURITY_PROTOCOL, plainSecurityProtocol)\n+    sparkConf.set(KAFKA_TRUSTSTORE_LOCATION, trustStoreLocation)\n+    sparkConf.set(KAFKA_TRUSTSTORE_PASSWORD, trustStoreLocation)\n+\n+    val adminClientProperties = TokenUtil.createAdminClientProperties(sparkConf)\n+\n+    assert(adminClientProperties.get(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG)\n+      .equals(bootStrapServers))"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "No particular reason, changed.",
    "commit": "a1228657a56d53ee2ff39232536e88223950d36a",
    "createdAt": "2018-10-10T08:48:52Z",
    "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import org.apache.kafka.clients.CommonClientConfigs\n+import org.apache.kafka.common.config.SaslConfigs\n+import org.scalatest.BeforeAndAfterEach\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.internal.config._\n+\n+class TokenUtilSuite extends SparkFunSuite with BeforeAndAfterEach {\n+  private val bootStrapServers = \"127.0.0.1:0\"\n+  private val plainSecurityProtocol = \"SASL_PLAINTEXT\"\n+  private val sslSecurityProtocol = \"SASL_SSL\"\n+  private val trustStoreLocation = \"/path/to/trustStore\"\n+  private val trustStorePassword = \"secret\"\n+  private val keytab = \"/path/to/keytab\"\n+  private val kerberosServiceName = \"kafka\"\n+  private val principal = \"user@domain.com\"\n+\n+  private var sparkConf: SparkConf = null\n+\n+  override def beforeEach(): Unit = {\n+    super.beforeEach()\n+    sparkConf = new SparkConf()\n+  }\n+\n+  test(\"createAdminClientProperties without bootstrap servers should throw exception\") {\n+    val thrown = intercept[IllegalArgumentException] {\n+      TokenUtil.createAdminClientProperties(sparkConf)\n+    }\n+    assert(thrown.getMessage contains\n+      \"Tried to obtain kafka delegation token but bootstrap servers not configured.\")\n+  }\n+\n+  test(\"createAdminClientProperties without SSL protocol should not take over truststore config\") {\n+    sparkConf.set(KAFKA_BOOTSTRAP_SERVERS, bootStrapServers)\n+    sparkConf.set(KAFKA_SECURITY_PROTOCOL, plainSecurityProtocol)\n+    sparkConf.set(KAFKA_TRUSTSTORE_LOCATION, trustStoreLocation)\n+    sparkConf.set(KAFKA_TRUSTSTORE_PASSWORD, trustStoreLocation)\n+\n+    val adminClientProperties = TokenUtil.createAdminClientProperties(sparkConf)\n+\n+    assert(adminClientProperties.get(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG)\n+      .equals(bootStrapServers))"
  }],
  "prId": 22598
}]