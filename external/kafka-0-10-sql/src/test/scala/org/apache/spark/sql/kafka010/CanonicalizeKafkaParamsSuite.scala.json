[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "CanonicalKP2?",
    "commit": "a10276abc783ad3818821c31f38ce56acc3e9d77",
    "createdAt": "2017-05-20T08:31:29Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.{util => ju}\n+\n+import org.apache.kafka.common.serialization.ByteArraySerializer\n+import org.scalatest.PrivateMethodTester\n+\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class CanonicalizeKafkaParamsSuite extends SharedSQLContext with PrivateMethodTester {\n+\n+  test(\"Same unique id is returned for same set of kafka parameters\") {\n+    CanonicalizeKafkaParams.clear()\n+    val kafkaParams = new ju.HashMap[String, Object]()\n+    kafkaParams.put(\"acks\", \"0\")\n+    // Here only host should be resolvable, it does not need a running instance of kafka server.\n+    kafkaParams.put(\"bootstrap.servers\", \"127.0.0.1:9022\")\n+    kafkaParams.put(\"key.serializer\", classOf[ByteArraySerializer].getName)\n+    kafkaParams.put(\"value.serializer\", classOf[ByteArraySerializer].getName)\n+    val kp2 = CanonicalizeKafkaParams.computeUniqueCanonicalForm(kafkaParams)\n+    val kafkaParams2 = new ju.HashMap[String, Object](kafkaParams)\n+    val kp3 = CanonicalizeKafkaParams.computeUniqueCanonicalForm(kafkaParams2)\n+    val uid1 = kp2.get(CanonicalizeKafkaParams.sparkKafkaParamsUniqueId).toString\n+    val uid2 = kp3.get(CanonicalizeKafkaParams.sparkKafkaParamsUniqueId).toString\n+    assert(uid1 == uid2)\n+  }\n+\n+  test(\"New unique id is generated for any modification in kafka parameters.\") {\n+    CanonicalizeKafkaParams.clear()\n+    val kafkaParams = new ju.HashMap[String, Object]()\n+    kafkaParams.put(\"acks\", \"0\")\n+    // Here only host should be resolvable, it does not need a running instance of kafka server.\n+    kafkaParams.put(\"bootstrap.servers\", \"127.0.0.1:9022\")\n+    kafkaParams.put(\"key.serializer\", classOf[ByteArraySerializer].getName)\n+    kafkaParams.put(\"value.serializer\", classOf[ByteArraySerializer].getName)\n+    val kp2 = CanonicalizeKafkaParams.computeUniqueCanonicalForm(kafkaParams)\n+    val kafkaParams2 = new ju.HashMap[String, Object](kafkaParams)\n+    kafkaParams2.put(\"acks\", \"1\")\n+    val kp3 = CanonicalizeKafkaParams.computeUniqueCanonicalForm(kafkaParams2)"
  }],
  "prId": 17308
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "CanonicalKP?",
    "commit": "a10276abc783ad3818821c31f38ce56acc3e9d77",
    "createdAt": "2017-05-20T08:31:30Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.{util => ju}\n+\n+import org.apache.kafka.common.serialization.ByteArraySerializer\n+import org.scalatest.PrivateMethodTester\n+\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class CanonicalizeKafkaParamsSuite extends SharedSQLContext with PrivateMethodTester {\n+\n+  test(\"Same unique id is returned for same set of kafka parameters\") {\n+    CanonicalizeKafkaParams.clear()\n+    val kafkaParams = new ju.HashMap[String, Object]()\n+    kafkaParams.put(\"acks\", \"0\")\n+    // Here only host should be resolvable, it does not need a running instance of kafka server.\n+    kafkaParams.put(\"bootstrap.servers\", \"127.0.0.1:9022\")\n+    kafkaParams.put(\"key.serializer\", classOf[ByteArraySerializer].getName)\n+    kafkaParams.put(\"value.serializer\", classOf[ByteArraySerializer].getName)\n+    val kp2 = CanonicalizeKafkaParams.computeUniqueCanonicalForm(kafkaParams)\n+    val kafkaParams2 = new ju.HashMap[String, Object](kafkaParams)\n+    val kp3 = CanonicalizeKafkaParams.computeUniqueCanonicalForm(kafkaParams2)\n+    val uid1 = kp2.get(CanonicalizeKafkaParams.sparkKafkaParamsUniqueId).toString\n+    val uid2 = kp3.get(CanonicalizeKafkaParams.sparkKafkaParamsUniqueId).toString\n+    assert(uid1 == uid2)\n+  }\n+\n+  test(\"New unique id is generated for any modification in kafka parameters.\") {\n+    CanonicalizeKafkaParams.clear()\n+    val kafkaParams = new ju.HashMap[String, Object]()\n+    kafkaParams.put(\"acks\", \"0\")\n+    // Here only host should be resolvable, it does not need a running instance of kafka server.\n+    kafkaParams.put(\"bootstrap.servers\", \"127.0.0.1:9022\")\n+    kafkaParams.put(\"key.serializer\", classOf[ByteArraySerializer].getName)\n+    kafkaParams.put(\"value.serializer\", classOf[ByteArraySerializer].getName)\n+    val kp2 = CanonicalizeKafkaParams.computeUniqueCanonicalForm(kafkaParams)"
  }],
  "prId": 17308
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Do we use this import?",
    "commit": "a10276abc783ad3818821c31f38ce56acc3e9d77",
    "createdAt": "2017-05-24T07:17:07Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.{util => ju}\n+\n+import org.apache.kafka.common.serialization.ByteArraySerializer\n+import org.scalatest.PrivateMethodTester"
  }, {
    "author": {
      "login": "ScrapCodes"
    },
    "body": "Ahh, oversight. Thanks !",
    "commit": "a10276abc783ad3818821c31f38ce56acc3e9d77",
    "createdAt": "2017-05-24T08:39:03Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.{util => ju}\n+\n+import org.apache.kafka.common.serialization.ByteArraySerializer\n+import org.scalatest.PrivateMethodTester"
  }],
  "prId": 17308
}]