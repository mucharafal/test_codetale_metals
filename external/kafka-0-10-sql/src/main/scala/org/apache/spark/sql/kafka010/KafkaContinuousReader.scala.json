[{
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "This may happen. I prefer to use `require` like this:\r\n```\r\nrequire(kafkaOffset.topicPartition == topicPartition, s\"expected: $topicPartition actual: ${kafkaOffset.topicPartition}\")\r\n```",
    "commit": "992e2c1de84b9e82875f47ecc21aad2a299038a7",
    "createdAt": "2018-03-14T19:35:03Z",
    "diffHunk": "@@ -164,7 +164,15 @@ case class KafkaContinuousDataReaderFactory(\n     startOffset: Long,\n     kafkaParams: ju.Map[String, Object],\n     pollTimeoutMs: Long,\n-    failOnDataLoss: Boolean) extends DataReaderFactory[UnsafeRow] {\n+    failOnDataLoss: Boolean) extends ContinuousDataReaderFactory[UnsafeRow] {\n+\n+  override def createDataReaderWithOffset(offset: PartitionOffset): DataReader[UnsafeRow] = {\n+    val kafkaOffset = offset.asInstanceOf[KafkaSourcePartitionOffset]\n+    assert(kafkaOffset.topicPartition == topicPartition)"
  }, {
    "author": {
      "login": "xuanyuanking"
    },
    "body": "Got it.",
    "commit": "992e2c1de84b9e82875f47ecc21aad2a299038a7",
    "createdAt": "2018-03-15T03:16:52Z",
    "diffHunk": "@@ -164,7 +164,15 @@ case class KafkaContinuousDataReaderFactory(\n     startOffset: Long,\n     kafkaParams: ju.Map[String, Object],\n     pollTimeoutMs: Long,\n-    failOnDataLoss: Boolean) extends DataReaderFactory[UnsafeRow] {\n+    failOnDataLoss: Boolean) extends ContinuousDataReaderFactory[UnsafeRow] {\n+\n+  override def createDataReaderWithOffset(offset: PartitionOffset): DataReader[UnsafeRow] = {\n+    val kafkaOffset = offset.asInstanceOf[KafkaSourcePartitionOffset]\n+    assert(kafkaOffset.topicPartition == topicPartition)"
  }],
  "prId": 20689
}]