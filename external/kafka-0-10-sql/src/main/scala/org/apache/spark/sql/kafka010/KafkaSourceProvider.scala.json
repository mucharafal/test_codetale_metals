[{
  "comments": [{
    "author": {
      "login": "koeninger"
    },
    "body": "Sorry there isn't an automatic formatter for this... but use 4 space indentation for multi-line argument lists\r\n\r\nhttps://github.com/databricks/scala-style-guide#spacing-and-indentation",
    "commit": "9196623d2b1fa29522dcc400e27edccf8fea946a",
    "createdAt": "2018-11-21T16:38:30Z",
    "diffHunk": "@@ -538,6 +538,17 @@ private[kafka010] object KafkaSourceProvider extends Logging {\n       .setIfUnset(ConsumerConfig.RECEIVE_BUFFER_CONFIG, 65536: java.lang.Integer)\n       .build()\n \n+  /**\n+   * Returns a unique consumer group (group.id), allowing the user to set the prefix of\n+   * the consumer group\n+   */\n+  private def streamingUniqueGroupId(parameters: Map[String, String],"
  }, {
    "author": {
      "login": "zouzias"
    },
    "body": "No worries, done.",
    "commit": "9196623d2b1fa29522dcc400e27edccf8fea946a",
    "createdAt": "2018-11-21T17:26:06Z",
    "diffHunk": "@@ -538,6 +538,17 @@ private[kafka010] object KafkaSourceProvider extends Logging {\n       .setIfUnset(ConsumerConfig.RECEIVE_BUFFER_CONFIG, 65536: java.lang.Integer)\n       .build()\n \n+  /**\n+   * Returns a unique consumer group (group.id), allowing the user to set the prefix of\n+   * the consumer group\n+   */\n+  private def streamingUniqueGroupId(parameters: Map[String, String],"
  }, {
    "author": {
      "login": "koeninger"
    },
    "body": "first arg should be on its own newline as well",
    "commit": "9196623d2b1fa29522dcc400e27edccf8fea946a",
    "createdAt": "2018-11-21T17:33:31Z",
    "diffHunk": "@@ -538,6 +538,17 @@ private[kafka010] object KafkaSourceProvider extends Logging {\n       .setIfUnset(ConsumerConfig.RECEIVE_BUFFER_CONFIG, 65536: java.lang.Integer)\n       .build()\n \n+  /**\n+   * Returns a unique consumer group (group.id), allowing the user to set the prefix of\n+   * the consumer group\n+   */\n+  private def streamingUniqueGroupId(parameters: Map[String, String],"
  }],
  "prId": 23103
}, {
  "comments": [{
    "author": {
      "login": "koeninger"
    },
    "body": "It seems like convention has been to mostly use camelcase for streaming options that aren't from the existing kafka.blah.whatever configuration namespace... e.g. subscribePattern, startingOffsets, maxOffsetsPerTrigger",
    "commit": "9196623d2b1fa29522dcc400e27edccf8fea946a",
    "createdAt": "2018-11-21T16:41:08Z",
    "diffHunk": "@@ -538,6 +538,17 @@ private[kafka010] object KafkaSourceProvider extends Logging {\n       .setIfUnset(ConsumerConfig.RECEIVE_BUFFER_CONFIG, 65536: java.lang.Integer)\n       .build()\n \n+  /**\n+   * Returns a unique consumer group (group.id), allowing the user to set the prefix of\n+   * the consumer group\n+   */\n+  private def streamingUniqueGroupId(parameters: Map[String, String],\n+                                     metadataPath: String): String = {\n+    val groupIdPrefix = parameters\n+      .getOrElse(\"group.id.prefix\", \"spark-kafka-source\")"
  }, {
    "author": {
      "login": "zouzias"
    },
    "body": "I named the property `kafka.groupIdPrefix` for now. Let me know if you have a better name in mind.",
    "commit": "9196623d2b1fa29522dcc400e27edccf8fea946a",
    "createdAt": "2018-11-21T17:25:22Z",
    "diffHunk": "@@ -538,6 +538,17 @@ private[kafka010] object KafkaSourceProvider extends Logging {\n       .setIfUnset(ConsumerConfig.RECEIVE_BUFFER_CONFIG, 65536: java.lang.Integer)\n       .build()\n \n+  /**\n+   * Returns a unique consumer group (group.id), allowing the user to set the prefix of\n+   * the consumer group\n+   */\n+  private def streamingUniqueGroupId(parameters: Map[String, String],\n+                                     metadataPath: String): String = {\n+    val groupIdPrefix = parameters\n+      .getOrElse(\"group.id.prefix\", \"spark-kafka-source\")"
  }, {
    "author": {
      "login": "koeninger"
    },
    "body": "kafka.* is reserved for the existing kafka project's client configs, see e.g. line 86.  I'd just go with groupIdPrefix",
    "commit": "9196623d2b1fa29522dcc400e27edccf8fea946a",
    "createdAt": "2018-11-21T17:31:01Z",
    "diffHunk": "@@ -538,6 +538,17 @@ private[kafka010] object KafkaSourceProvider extends Logging {\n       .setIfUnset(ConsumerConfig.RECEIVE_BUFFER_CONFIG, 65536: java.lang.Integer)\n       .build()\n \n+  /**\n+   * Returns a unique consumer group (group.id), allowing the user to set the prefix of\n+   * the consumer group\n+   */\n+  private def streamingUniqueGroupId(parameters: Map[String, String],\n+                                     metadataPath: String): String = {\n+    val groupIdPrefix = parameters\n+      .getOrElse(\"group.id.prefix\", \"spark-kafka-source\")"
  }, {
    "author": {
      "login": "zouzias"
    },
    "body": "Makes sense, fixed in 39424dd ",
    "commit": "9196623d2b1fa29522dcc400e27edccf8fea946a",
    "createdAt": "2018-11-22T07:54:05Z",
    "diffHunk": "@@ -538,6 +538,17 @@ private[kafka010] object KafkaSourceProvider extends Logging {\n       .setIfUnset(ConsumerConfig.RECEIVE_BUFFER_CONFIG, 65536: java.lang.Integer)\n       .build()\n \n+  /**\n+   * Returns a unique consumer group (group.id), allowing the user to set the prefix of\n+   * the consumer group\n+   */\n+  private def streamingUniqueGroupId(parameters: Map[String, String],\n+                                     metadataPath: String): String = {\n+    val groupIdPrefix = parameters\n+      .getOrElse(\"group.id.prefix\", \"spark-kafka-source\")"
  }],
  "prId": 23103
}]