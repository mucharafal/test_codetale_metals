[{
  "comments": [{
    "author": {
      "login": "steveloughran"
    },
    "body": "IBM JAAS is different here.see [hadoop and kerberps -JAAS](https://steveloughran.gitbooks.io/kerberos_and_hadoop/content/sections/jaas.html)\r\n\r\nIn [ZKDelegationTokenSecretManager](https://github.com/apache/hadoop/blob/a55d6bba71c81c1c4e9d8cd11f55c78f10a548b0/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/ZKDelegationTokenSecretManager.java#L241) this is done based off the JVM",
    "commit": "a1228657a56d53ee2ff39232536e88223950d36a",
    "createdAt": "2018-10-01T12:13:49Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import org.apache.hadoop.security.UserGroupInformation\n+import org.apache.hadoop.security.token.{Token, TokenIdentifier}\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config._\n+\n+private[kafka010] object KafkaSecurityHelper extends Logging {\n+  def getKeytabJaasParams(sparkConf: SparkConf): Option[String] = {\n+    if (sparkConf.get(KEYTAB).nonEmpty) {\n+      Some(getKrbJaasParams(sparkConf))\n+    } else {\n+      None\n+    }\n+  }\n+\n+  def getKrbJaasParams(sparkConf: SparkConf): String = {\n+    val serviceName = sparkConf.get(KAFKA_KERBEROS_SERVICE_NAME)\n+    require(serviceName.nonEmpty, \"Kerberos service name must be defined\")\n+    val keytab = sparkConf.get(KEYTAB)\n+    require(keytab.nonEmpty, \"Keytab must be defined\")\n+    val principal = sparkConf.get(PRINCIPAL)\n+    require(principal.nonEmpty, \"Principal must be defined\")\n+\n+    val params =\n+      s\"\"\"\n+      |com.sun.security.auth.module.Krb5LoginModule required"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Oh, nice catch! Solving it soon...",
    "commit": "a1228657a56d53ee2ff39232536e88223950d36a",
    "createdAt": "2018-10-01T13:24:07Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import org.apache.hadoop.security.UserGroupInformation\n+import org.apache.hadoop.security.token.{Token, TokenIdentifier}\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config._\n+\n+private[kafka010] object KafkaSecurityHelper extends Logging {\n+  def getKeytabJaasParams(sparkConf: SparkConf): Option[String] = {\n+    if (sparkConf.get(KEYTAB).nonEmpty) {\n+      Some(getKrbJaasParams(sparkConf))\n+    } else {\n+      None\n+    }\n+  }\n+\n+  def getKrbJaasParams(sparkConf: SparkConf): String = {\n+    val serviceName = sparkConf.get(KAFKA_KERBEROS_SERVICE_NAME)\n+    require(serviceName.nonEmpty, \"Kerberos service name must be defined\")\n+    val keytab = sparkConf.get(KEYTAB)\n+    require(keytab.nonEmpty, \"Keytab must be defined\")\n+    val principal = sparkConf.get(PRINCIPAL)\n+    require(principal.nonEmpty, \"Principal must be defined\")\n+\n+    val params =\n+      s\"\"\"\n+      |com.sun.security.auth.module.Krb5LoginModule required"
  }, {
    "author": {
      "login": "steveloughran"
    },
    "body": "There is a whole section in UGI code related to IBM JVMs changing the classnames of kerberos stuff. Just assume that any class with sun or oracle in the name will be different there and you won't be disappointed.",
    "commit": "a1228657a56d53ee2ff39232536e88223950d36a",
    "createdAt": "2018-10-02T18:25:19Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import org.apache.hadoop.security.UserGroupInformation\n+import org.apache.hadoop.security.token.{Token, TokenIdentifier}\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config._\n+\n+private[kafka010] object KafkaSecurityHelper extends Logging {\n+  def getKeytabJaasParams(sparkConf: SparkConf): Option[String] = {\n+    if (sparkConf.get(KEYTAB).nonEmpty) {\n+      Some(getKrbJaasParams(sparkConf))\n+    } else {\n+      None\n+    }\n+  }\n+\n+  def getKrbJaasParams(sparkConf: SparkConf): String = {\n+    val serviceName = sparkConf.get(KAFKA_KERBEROS_SERVICE_NAME)\n+    require(serviceName.nonEmpty, \"Kerberos service name must be defined\")\n+    val keytab = sparkConf.get(KEYTAB)\n+    require(keytab.nonEmpty, \"Keytab must be defined\")\n+    val principal = sparkConf.get(PRINCIPAL)\n+    require(principal.nonEmpty, \"Principal must be defined\")\n+\n+    val params =\n+      s\"\"\"\n+      |com.sun.security.auth.module.Krb5LoginModule required"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Fixed.",
    "commit": "a1228657a56d53ee2ff39232536e88223950d36a",
    "createdAt": "2018-10-02T19:30:43Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import org.apache.hadoop.security.UserGroupInformation\n+import org.apache.hadoop.security.token.{Token, TokenIdentifier}\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config._\n+\n+private[kafka010] object KafkaSecurityHelper extends Logging {\n+  def getKeytabJaasParams(sparkConf: SparkConf): Option[String] = {\n+    if (sparkConf.get(KEYTAB).nonEmpty) {\n+      Some(getKrbJaasParams(sparkConf))\n+    } else {\n+      None\n+    }\n+  }\n+\n+  def getKrbJaasParams(sparkConf: SparkConf): String = {\n+    val serviceName = sparkConf.get(KAFKA_KERBEROS_SERVICE_NAME)\n+    require(serviceName.nonEmpty, \"Kerberos service name must be defined\")\n+    val keytab = sparkConf.get(KEYTAB)\n+    require(keytab.nonEmpty, \"Keytab must be defined\")\n+    val principal = sparkConf.get(PRINCIPAL)\n+    require(principal.nonEmpty, \"Principal must be defined\")\n+\n+    val params =\n+      s\"\"\"\n+      |com.sun.security.auth.module.Krb5LoginModule required"
  }],
  "prId": 22598
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "s/nonEmpty/isDefined\r\n\r\n(You could also use `map` but I think in this case the if is clearer.)",
    "commit": "a1228657a56d53ee2ff39232536e88223950d36a",
    "createdAt": "2018-10-04T18:32:09Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import org.apache.hadoop.security.UserGroupInformation\n+import org.apache.hadoop.security.token.{Token, TokenIdentifier}\n+import org.apache.kafka.common.security.scram.ScramLoginModule\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config._\n+\n+private[kafka010] object KafkaSecurityHelper extends Logging {\n+  def getKeytabJaasParams(sparkConf: SparkConf): Option[String] = {\n+    if (sparkConf.get(KEYTAB).nonEmpty) {"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Fixed.",
    "commit": "a1228657a56d53ee2ff39232536e88223950d36a",
    "createdAt": "2018-10-08T12:59:04Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import org.apache.hadoop.security.UserGroupInformation\n+import org.apache.hadoop.security.token.{Token, TokenIdentifier}\n+import org.apache.kafka.common.security.scram.ScramLoginModule\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config._\n+\n+private[kafka010] object KafkaSecurityHelper extends Logging {\n+  def getKeytabJaasParams(sparkConf: SparkConf): Option[String] = {\n+    if (sparkConf.get(KEYTAB).nonEmpty) {"
  }],
  "prId": 22598
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "This is only called from the above method. Why not inline it? Then you can remove redundant code like the principal check.",
    "commit": "a1228657a56d53ee2ff39232536e88223950d36a",
    "createdAt": "2018-10-04T18:34:59Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import org.apache.hadoop.security.UserGroupInformation\n+import org.apache.hadoop.security.token.{Token, TokenIdentifier}\n+import org.apache.kafka.common.security.scram.ScramLoginModule\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config._\n+\n+private[kafka010] object KafkaSecurityHelper extends Logging {\n+  def getKeytabJaasParams(sparkConf: SparkConf): Option[String] = {\n+    if (sparkConf.get(KEYTAB).nonEmpty) {\n+      Some(getKrbJaasParams(sparkConf))\n+    } else {\n+      None\n+    }\n+  }\n+\n+  def getKrbJaasParams(sparkConf: SparkConf): String = {"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Inlined.",
    "commit": "a1228657a56d53ee2ff39232536e88223950d36a",
    "createdAt": "2018-10-08T12:59:28Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import org.apache.hadoop.security.UserGroupInformation\n+import org.apache.hadoop.security.token.{Token, TokenIdentifier}\n+import org.apache.kafka.common.security.scram.ScramLoginModule\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config._\n+\n+private[kafka010] object KafkaSecurityHelper extends Logging {\n+  def getKeytabJaasParams(sparkConf: SparkConf): Option[String] = {\n+    if (sparkConf.get(KEYTAB).nonEmpty) {\n+      Some(getKrbJaasParams(sparkConf))\n+    } else {\n+      None\n+    }\n+  }\n+\n+  def getKrbJaasParams(sparkConf: SparkConf): String = {"
  }],
  "prId": 22598
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Feels like more of a debug message.",
    "commit": "a1228657a56d53ee2ff39232536e88223950d36a",
    "createdAt": "2018-10-04T18:35:50Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import org.apache.hadoop.security.UserGroupInformation\n+import org.apache.hadoop.security.token.{Token, TokenIdentifier}\n+import org.apache.kafka.common.security.scram.ScramLoginModule\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config._\n+\n+private[kafka010] object KafkaSecurityHelper extends Logging {\n+  def getKeytabJaasParams(sparkConf: SparkConf): Option[String] = {\n+    if (sparkConf.get(KEYTAB).nonEmpty) {\n+      Some(getKrbJaasParams(sparkConf))\n+    } else {\n+      None\n+    }\n+  }\n+\n+  def getKrbJaasParams(sparkConf: SparkConf): String = {\n+    val serviceName = sparkConf.get(KAFKA_KERBEROS_SERVICE_NAME)\n+    require(serviceName.nonEmpty, \"Kerberos service name must be defined\")\n+    val keytab = sparkConf.get(KEYTAB)\n+    require(keytab.nonEmpty, \"Keytab must be defined\")\n+    val principal = sparkConf.get(PRINCIPAL)\n+    require(principal.nonEmpty, \"Principal must be defined\")\n+\n+    val params =\n+      s\"\"\"\n+      |${getKrb5LoginModuleName} required\n+      | useKeyTab=true\n+      | serviceName=\"${serviceName.get}\"\n+      | keyTab=\"${keytab.get}\"\n+      | principal=\"${principal.get}\";\n+      \"\"\".stripMargin.replace(\"\\n\", \"\")\n+    logInfo(s\"Krb JAAS params: $params\")"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Fixed.",
    "commit": "a1228657a56d53ee2ff39232536e88223950d36a",
    "createdAt": "2018-10-08T12:59:39Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import org.apache.hadoop.security.UserGroupInformation\n+import org.apache.hadoop.security.token.{Token, TokenIdentifier}\n+import org.apache.kafka.common.security.scram.ScramLoginModule\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config._\n+\n+private[kafka010] object KafkaSecurityHelper extends Logging {\n+  def getKeytabJaasParams(sparkConf: SparkConf): Option[String] = {\n+    if (sparkConf.get(KEYTAB).nonEmpty) {\n+      Some(getKrbJaasParams(sparkConf))\n+    } else {\n+      None\n+    }\n+  }\n+\n+  def getKrbJaasParams(sparkConf: SparkConf): String = {\n+    val serviceName = sparkConf.get(KAFKA_KERBEROS_SERVICE_NAME)\n+    require(serviceName.nonEmpty, \"Kerberos service name must be defined\")\n+    val keytab = sparkConf.get(KEYTAB)\n+    require(keytab.nonEmpty, \"Keytab must be defined\")\n+    val principal = sparkConf.get(PRINCIPAL)\n+    require(principal.nonEmpty, \"Principal must be defined\")\n+\n+    val params =\n+      s\"\"\"\n+      |${getKrb5LoginModuleName} required\n+      | useKeyTab=true\n+      | serviceName=\"${serviceName.get}\"\n+      | keyTab=\"${keytab.get}\"\n+      | principal=\"${principal.get}\";\n+      \"\"\".stripMargin.replace(\"\\n\", \"\")\n+    logInfo(s\"Krb JAAS params: $params\")"
  }],
  "prId": 22598
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "One parameter per line.",
    "commit": "a1228657a56d53ee2ff39232536e88223950d36a",
    "createdAt": "2018-10-04T18:42:30Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import org.apache.hadoop.security.UserGroupInformation\n+import org.apache.hadoop.security.token.{Token, TokenIdentifier}\n+import org.apache.kafka.common.security.scram.ScramLoginModule\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config._\n+\n+private[kafka010] object KafkaSecurityHelper extends Logging {\n+  def getKeytabJaasParams(sparkConf: SparkConf): Option[String] = {\n+    if (sparkConf.get(KEYTAB).nonEmpty) {\n+      Some(getKrbJaasParams(sparkConf))\n+    } else {\n+      None\n+    }\n+  }\n+\n+  def getKrbJaasParams(sparkConf: SparkConf): String = {\n+    val serviceName = sparkConf.get(KAFKA_KERBEROS_SERVICE_NAME)\n+    require(serviceName.nonEmpty, \"Kerberos service name must be defined\")\n+    val keytab = sparkConf.get(KEYTAB)\n+    require(keytab.nonEmpty, \"Keytab must be defined\")\n+    val principal = sparkConf.get(PRINCIPAL)\n+    require(principal.nonEmpty, \"Principal must be defined\")\n+\n+    val params =\n+      s\"\"\"\n+      |${getKrb5LoginModuleName} required\n+      | useKeyTab=true\n+      | serviceName=\"${serviceName.get}\"\n+      | keyTab=\"${keytab.get}\"\n+      | principal=\"${principal.get}\";\n+      \"\"\".stripMargin.replace(\"\\n\", \"\")\n+    logInfo(s\"Krb JAAS params: $params\")\n+\n+    params\n+  }\n+\n+  private def getKrb5LoginModuleName(): String = {\n+    if (System.getProperty(\"java.vendor\").contains(\"IBM\")) {\n+      \"com.ibm.security.auth.module.Krb5LoginModule\"\n+    } else {\n+      \"com.sun.security.auth.module.Krb5LoginModule\"\n+    }\n+  }\n+\n+  def getTokenJaasParams(sparkConf: SparkConf): Option[String] = {\n+    val token = UserGroupInformation.getCurrentUser().getCredentials.getToken(\n+      TokenUtil.TOKEN_SERVICE)\n+    if (token != null) {\n+      Some(getScramJaasParams(sparkConf, token))\n+    } else {\n+      None\n+    }\n+  }\n+\n+  private def getScramJaasParams(\n+      sparkConf: SparkConf, token: Token[_ <: TokenIdentifier]): String = {"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Fixed.",
    "commit": "a1228657a56d53ee2ff39232536e88223950d36a",
    "createdAt": "2018-10-08T12:59:49Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import org.apache.hadoop.security.UserGroupInformation\n+import org.apache.hadoop.security.token.{Token, TokenIdentifier}\n+import org.apache.kafka.common.security.scram.ScramLoginModule\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config._\n+\n+private[kafka010] object KafkaSecurityHelper extends Logging {\n+  def getKeytabJaasParams(sparkConf: SparkConf): Option[String] = {\n+    if (sparkConf.get(KEYTAB).nonEmpty) {\n+      Some(getKrbJaasParams(sparkConf))\n+    } else {\n+      None\n+    }\n+  }\n+\n+  def getKrbJaasParams(sparkConf: SparkConf): String = {\n+    val serviceName = sparkConf.get(KAFKA_KERBEROS_SERVICE_NAME)\n+    require(serviceName.nonEmpty, \"Kerberos service name must be defined\")\n+    val keytab = sparkConf.get(KEYTAB)\n+    require(keytab.nonEmpty, \"Keytab must be defined\")\n+    val principal = sparkConf.get(PRINCIPAL)\n+    require(principal.nonEmpty, \"Principal must be defined\")\n+\n+    val params =\n+      s\"\"\"\n+      |${getKrb5LoginModuleName} required\n+      | useKeyTab=true\n+      | serviceName=\"${serviceName.get}\"\n+      | keyTab=\"${keytab.get}\"\n+      | principal=\"${principal.get}\";\n+      \"\"\".stripMargin.replace(\"\\n\", \"\")\n+    logInfo(s\"Krb JAAS params: $params\")\n+\n+    params\n+  }\n+\n+  private def getKrb5LoginModuleName(): String = {\n+    if (System.getProperty(\"java.vendor\").contains(\"IBM\")) {\n+      \"com.ibm.security.auth.module.Krb5LoginModule\"\n+    } else {\n+      \"com.sun.security.auth.module.Krb5LoginModule\"\n+    }\n+  }\n+\n+  def getTokenJaasParams(sparkConf: SparkConf): Option[String] = {\n+    val token = UserGroupInformation.getCurrentUser().getCredentials.getToken(\n+      TokenUtil.TOKEN_SERVICE)\n+    if (token != null) {\n+      Some(getScramJaasParams(sparkConf, token))\n+    } else {\n+      None\n+    }\n+  }\n+\n+  private def getScramJaasParams(\n+      sparkConf: SparkConf, token: Token[_ <: TokenIdentifier]): String = {"
  }],
  "prId": 22598
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "s/nonEmpty/isDefined",
    "commit": "a1228657a56d53ee2ff39232536e88223950d36a",
    "createdAt": "2018-10-04T18:42:48Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import org.apache.hadoop.security.UserGroupInformation\n+import org.apache.hadoop.security.token.{Token, TokenIdentifier}\n+import org.apache.kafka.common.security.scram.ScramLoginModule\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config._\n+\n+private[kafka010] object KafkaSecurityHelper extends Logging {\n+  def getKeytabJaasParams(sparkConf: SparkConf): Option[String] = {\n+    if (sparkConf.get(KEYTAB).nonEmpty) {\n+      Some(getKrbJaasParams(sparkConf))\n+    } else {\n+      None\n+    }\n+  }\n+\n+  def getKrbJaasParams(sparkConf: SparkConf): String = {\n+    val serviceName = sparkConf.get(KAFKA_KERBEROS_SERVICE_NAME)\n+    require(serviceName.nonEmpty, \"Kerberos service name must be defined\")\n+    val keytab = sparkConf.get(KEYTAB)\n+    require(keytab.nonEmpty, \"Keytab must be defined\")\n+    val principal = sparkConf.get(PRINCIPAL)\n+    require(principal.nonEmpty, \"Principal must be defined\")\n+\n+    val params =\n+      s\"\"\"\n+      |${getKrb5LoginModuleName} required\n+      | useKeyTab=true\n+      | serviceName=\"${serviceName.get}\"\n+      | keyTab=\"${keytab.get}\"\n+      | principal=\"${principal.get}\";\n+      \"\"\".stripMargin.replace(\"\\n\", \"\")\n+    logInfo(s\"Krb JAAS params: $params\")\n+\n+    params\n+  }\n+\n+  private def getKrb5LoginModuleName(): String = {\n+    if (System.getProperty(\"java.vendor\").contains(\"IBM\")) {\n+      \"com.ibm.security.auth.module.Krb5LoginModule\"\n+    } else {\n+      \"com.sun.security.auth.module.Krb5LoginModule\"\n+    }\n+  }\n+\n+  def getTokenJaasParams(sparkConf: SparkConf): Option[String] = {\n+    val token = UserGroupInformation.getCurrentUser().getCredentials.getToken(\n+      TokenUtil.TOKEN_SERVICE)\n+    if (token != null) {\n+      Some(getScramJaasParams(sparkConf, token))\n+    } else {\n+      None\n+    }\n+  }\n+\n+  private def getScramJaasParams(\n+      sparkConf: SparkConf, token: Token[_ <: TokenIdentifier]): String = {\n+    val serviceName = sparkConf.get(KAFKA_KERBEROS_SERVICE_NAME)\n+    require(serviceName.nonEmpty, \"Kerberos service name must be defined\")"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Fixed.",
    "commit": "a1228657a56d53ee2ff39232536e88223950d36a",
    "createdAt": "2018-10-08T13:00:00Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import org.apache.hadoop.security.UserGroupInformation\n+import org.apache.hadoop.security.token.{Token, TokenIdentifier}\n+import org.apache.kafka.common.security.scram.ScramLoginModule\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config._\n+\n+private[kafka010] object KafkaSecurityHelper extends Logging {\n+  def getKeytabJaasParams(sparkConf: SparkConf): Option[String] = {\n+    if (sparkConf.get(KEYTAB).nonEmpty) {\n+      Some(getKrbJaasParams(sparkConf))\n+    } else {\n+      None\n+    }\n+  }\n+\n+  def getKrbJaasParams(sparkConf: SparkConf): String = {\n+    val serviceName = sparkConf.get(KAFKA_KERBEROS_SERVICE_NAME)\n+    require(serviceName.nonEmpty, \"Kerberos service name must be defined\")\n+    val keytab = sparkConf.get(KEYTAB)\n+    require(keytab.nonEmpty, \"Keytab must be defined\")\n+    val principal = sparkConf.get(PRINCIPAL)\n+    require(principal.nonEmpty, \"Principal must be defined\")\n+\n+    val params =\n+      s\"\"\"\n+      |${getKrb5LoginModuleName} required\n+      | useKeyTab=true\n+      | serviceName=\"${serviceName.get}\"\n+      | keyTab=\"${keytab.get}\"\n+      | principal=\"${principal.get}\";\n+      \"\"\".stripMargin.replace(\"\\n\", \"\")\n+    logInfo(s\"Krb JAAS params: $params\")\n+\n+    params\n+  }\n+\n+  private def getKrb5LoginModuleName(): String = {\n+    if (System.getProperty(\"java.vendor\").contains(\"IBM\")) {\n+      \"com.ibm.security.auth.module.Krb5LoginModule\"\n+    } else {\n+      \"com.sun.security.auth.module.Krb5LoginModule\"\n+    }\n+  }\n+\n+  def getTokenJaasParams(sparkConf: SparkConf): Option[String] = {\n+    val token = UserGroupInformation.getCurrentUser().getCredentials.getToken(\n+      TokenUtil.TOKEN_SERVICE)\n+    if (token != null) {\n+      Some(getScramJaasParams(sparkConf, token))\n+    } else {\n+      None\n+    }\n+  }\n+\n+  private def getScramJaasParams(\n+      sparkConf: SparkConf, token: Token[_ <: TokenIdentifier]): String = {\n+    val serviceName = sparkConf.get(KAFKA_KERBEROS_SERVICE_NAME)\n+    require(serviceName.nonEmpty, \"Kerberos service name must be defined\")"
  }],
  "prId": 22598
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "debug",
    "commit": "a1228657a56d53ee2ff39232536e88223950d36a",
    "createdAt": "2018-10-04T18:43:11Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import org.apache.hadoop.security.UserGroupInformation\n+import org.apache.hadoop.security.token.{Token, TokenIdentifier}\n+import org.apache.kafka.common.security.scram.ScramLoginModule\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config._\n+\n+private[kafka010] object KafkaSecurityHelper extends Logging {\n+  def getKeytabJaasParams(sparkConf: SparkConf): Option[String] = {\n+    if (sparkConf.get(KEYTAB).nonEmpty) {\n+      Some(getKrbJaasParams(sparkConf))\n+    } else {\n+      None\n+    }\n+  }\n+\n+  def getKrbJaasParams(sparkConf: SparkConf): String = {\n+    val serviceName = sparkConf.get(KAFKA_KERBEROS_SERVICE_NAME)\n+    require(serviceName.nonEmpty, \"Kerberos service name must be defined\")\n+    val keytab = sparkConf.get(KEYTAB)\n+    require(keytab.nonEmpty, \"Keytab must be defined\")\n+    val principal = sparkConf.get(PRINCIPAL)\n+    require(principal.nonEmpty, \"Principal must be defined\")\n+\n+    val params =\n+      s\"\"\"\n+      |${getKrb5LoginModuleName} required\n+      | useKeyTab=true\n+      | serviceName=\"${serviceName.get}\"\n+      | keyTab=\"${keytab.get}\"\n+      | principal=\"${principal.get}\";\n+      \"\"\".stripMargin.replace(\"\\n\", \"\")\n+    logInfo(s\"Krb JAAS params: $params\")\n+\n+    params\n+  }\n+\n+  private def getKrb5LoginModuleName(): String = {\n+    if (System.getProperty(\"java.vendor\").contains(\"IBM\")) {\n+      \"com.ibm.security.auth.module.Krb5LoginModule\"\n+    } else {\n+      \"com.sun.security.auth.module.Krb5LoginModule\"\n+    }\n+  }\n+\n+  def getTokenJaasParams(sparkConf: SparkConf): Option[String] = {\n+    val token = UserGroupInformation.getCurrentUser().getCredentials.getToken(\n+      TokenUtil.TOKEN_SERVICE)\n+    if (token != null) {\n+      Some(getScramJaasParams(sparkConf, token))\n+    } else {\n+      None\n+    }\n+  }\n+\n+  private def getScramJaasParams(\n+      sparkConf: SparkConf, token: Token[_ <: TokenIdentifier]): String = {\n+    val serviceName = sparkConf.get(KAFKA_KERBEROS_SERVICE_NAME)\n+    require(serviceName.nonEmpty, \"Kerberos service name must be defined\")\n+    val username = new String(token.getIdentifier)\n+    val password = new String(token.getPassword)\n+\n+    val loginModuleName = classOf[ScramLoginModule].getName\n+    val params =\n+      s\"\"\"\n+      |$loginModuleName required\n+      | tokenauth=true\n+      | serviceName=\"${serviceName.get}\"\n+      | username=\"$username\"\n+      | password=\"$password\";\n+      \"\"\".stripMargin.replace(\"\\n\", \"\")\n+    logInfo(s\"Scram JAAS params: ${params.replaceAll(\"password=\\\".*\\\"\", \"password=\\\"[hidden]\\\"\")}\")"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Fixed.",
    "commit": "a1228657a56d53ee2ff39232536e88223950d36a",
    "createdAt": "2018-10-08T13:00:07Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import org.apache.hadoop.security.UserGroupInformation\n+import org.apache.hadoop.security.token.{Token, TokenIdentifier}\n+import org.apache.kafka.common.security.scram.ScramLoginModule\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config._\n+\n+private[kafka010] object KafkaSecurityHelper extends Logging {\n+  def getKeytabJaasParams(sparkConf: SparkConf): Option[String] = {\n+    if (sparkConf.get(KEYTAB).nonEmpty) {\n+      Some(getKrbJaasParams(sparkConf))\n+    } else {\n+      None\n+    }\n+  }\n+\n+  def getKrbJaasParams(sparkConf: SparkConf): String = {\n+    val serviceName = sparkConf.get(KAFKA_KERBEROS_SERVICE_NAME)\n+    require(serviceName.nonEmpty, \"Kerberos service name must be defined\")\n+    val keytab = sparkConf.get(KEYTAB)\n+    require(keytab.nonEmpty, \"Keytab must be defined\")\n+    val principal = sparkConf.get(PRINCIPAL)\n+    require(principal.nonEmpty, \"Principal must be defined\")\n+\n+    val params =\n+      s\"\"\"\n+      |${getKrb5LoginModuleName} required\n+      | useKeyTab=true\n+      | serviceName=\"${serviceName.get}\"\n+      | keyTab=\"${keytab.get}\"\n+      | principal=\"${principal.get}\";\n+      \"\"\".stripMargin.replace(\"\\n\", \"\")\n+    logInfo(s\"Krb JAAS params: $params\")\n+\n+    params\n+  }\n+\n+  private def getKrb5LoginModuleName(): String = {\n+    if (System.getProperty(\"java.vendor\").contains(\"IBM\")) {\n+      \"com.ibm.security.auth.module.Krb5LoginModule\"\n+    } else {\n+      \"com.sun.security.auth.module.Krb5LoginModule\"\n+    }\n+  }\n+\n+  def getTokenJaasParams(sparkConf: SparkConf): Option[String] = {\n+    val token = UserGroupInformation.getCurrentUser().getCredentials.getToken(\n+      TokenUtil.TOKEN_SERVICE)\n+    if (token != null) {\n+      Some(getScramJaasParams(sparkConf, token))\n+    } else {\n+      None\n+    }\n+  }\n+\n+  private def getScramJaasParams(\n+      sparkConf: SparkConf, token: Token[_ <: TokenIdentifier]): String = {\n+    val serviceName = sparkConf.get(KAFKA_KERBEROS_SERVICE_NAME)\n+    require(serviceName.nonEmpty, \"Kerberos service name must be defined\")\n+    val username = new String(token.getIdentifier)\n+    val password = new String(token.getPassword)\n+\n+    val loginModuleName = classOf[ScramLoginModule].getName\n+    val params =\n+      s\"\"\"\n+      |$loginModuleName required\n+      | tokenauth=true\n+      | serviceName=\"${serviceName.get}\"\n+      | username=\"$username\"\n+      | password=\"$password\";\n+      \"\"\".stripMargin.replace(\"\\n\", \"\")\n+    logInfo(s\"Scram JAAS params: ${params.replaceAll(\"password=\\\".*\\\"\", \"password=\\\"[hidden]\\\"\")}\")"
  }],
  "prId": 22598
}, {
  "comments": [{
    "author": {
      "login": "steveloughran"
    },
    "body": "+ add a comment pointing at hadoop UserGroupInformation so that if someone ever needs to maintain it, they'll know where to look",
    "commit": "a1228657a56d53ee2ff39232536e88223950d36a",
    "createdAt": "2018-10-09T09:29:37Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import org.apache.hadoop.security.UserGroupInformation\n+import org.apache.hadoop.security.token.{Token, TokenIdentifier}\n+import org.apache.kafka.common.security.scram.ScramLoginModule\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config._\n+\n+private[kafka010] object KafkaSecurityHelper extends Logging {\n+  def getKeytabJaasParams(sparkConf: SparkConf): Option[String] = {\n+    val keytab = sparkConf.get(KEYTAB)\n+    if (keytab.isDefined) {\n+      val serviceName = sparkConf.get(KAFKA_KERBEROS_SERVICE_NAME)\n+      require(serviceName.nonEmpty, \"Kerberos service name must be defined\")\n+      val principal = sparkConf.get(PRINCIPAL)\n+      require(principal.nonEmpty, \"Principal must be defined\")\n+\n+      val params =\n+        s\"\"\"\n+        |${getKrb5LoginModuleName} required\n+        | useKeyTab=true\n+        | serviceName=\"${serviceName.get}\"\n+        | keyTab=\"${keytab.get}\"\n+        | principal=\"${principal.get}\";\n+        \"\"\".stripMargin.replace(\"\\n\", \"\")\n+      logDebug(s\"Krb JAAS params: $params\")\n+      Some(params)\n+    } else {\n+      None\n+    }\n+  }\n+\n+  private def getKrb5LoginModuleName(): String = {"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Added.",
    "commit": "a1228657a56d53ee2ff39232536e88223950d36a",
    "createdAt": "2018-10-10T08:48:26Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import org.apache.hadoop.security.UserGroupInformation\n+import org.apache.hadoop.security.token.{Token, TokenIdentifier}\n+import org.apache.kafka.common.security.scram.ScramLoginModule\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config._\n+\n+private[kafka010] object KafkaSecurityHelper extends Logging {\n+  def getKeytabJaasParams(sparkConf: SparkConf): Option[String] = {\n+    val keytab = sparkConf.get(KEYTAB)\n+    if (keytab.isDefined) {\n+      val serviceName = sparkConf.get(KAFKA_KERBEROS_SERVICE_NAME)\n+      require(serviceName.nonEmpty, \"Kerberos service name must be defined\")\n+      val principal = sparkConf.get(PRINCIPAL)\n+      require(principal.nonEmpty, \"Principal must be defined\")\n+\n+      val params =\n+        s\"\"\"\n+        |${getKrb5LoginModuleName} required\n+        | useKeyTab=true\n+        | serviceName=\"${serviceName.get}\"\n+        | keyTab=\"${keytab.get}\"\n+        | principal=\"${principal.get}\";\n+        \"\"\".stripMargin.replace(\"\\n\", \"\")\n+      logDebug(s\"Krb JAAS params: $params\")\n+      Some(params)\n+    } else {\n+      None\n+    }\n+  }\n+\n+  private def getKrb5LoginModuleName(): String = {"
  }],
  "prId": 22598
}]