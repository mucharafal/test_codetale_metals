[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Import Timestamp? or does it conflict?",
    "commit": "de02de411aa00cbacc94be5b746dc48be0fe77a3",
    "createdAt": "2019-09-10T14:04:15Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.{UnsafeProjection, UnsafeRow}\n+import org.apache.spark.sql.catalyst.util.{DateTimeUtils, GenericArrayData}\n+import org.apache.spark.sql.types._\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+/** A simple class for converting Kafka ConsumerRecord to InternalRow/UnsafeRow */\n+private[kafka010] class KafkaRecordToRowConverter {\n+  import KafkaRecordToRowConverter._\n+\n+  private val toUnsafeRowWithoutHeaders = UnsafeProjection.create(schemaWithoutHeaders)\n+  private val toUnsafeRowWithHeaders = UnsafeProjection.create(schemaWithHeaders)\n+\n+  val toInternalRowWithoutHeaders: Record => InternalRow =\n+    (cr: Record) => InternalRow(\n+      cr.key, cr.value, UTF8String.fromString(cr.topic), cr.partition, cr.offset,\n+      DateTimeUtils.fromJavaTimestamp(new java.sql.Timestamp(cr.timestamp)), cr.timestampType.id\n+    )\n+\n+  val toInternalRowWithHeaders: Record => InternalRow =\n+    (cr: Record) => InternalRow(\n+      cr.key, cr.value, UTF8String.fromString(cr.topic), cr.partition, cr.offset,\n+      DateTimeUtils.fromJavaTimestamp(new java.sql.Timestamp(cr.timestamp)), cr.timestampType.id,"
  }],
  "prId": 22282
}]