[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "+1 for renaming to `KafkaConfigUpdater`.",
    "commit": "dcacd7546fd42542da91a3076fea2915065cdff4",
    "createdAt": "2018-12-14T17:37:48Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.{util => ju}\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.kafka.common.config.SaslConfigs\n+\n+import org.apache.spark.SparkEnv\n+import org.apache.spark.deploy.security.KafkaTokenUtil\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config.Kafka\n+\n+/**\n+ * Class to conveniently update Kafka config params, while logging the changes\n+ */\n+private[kafka010] case class KafkaConfigUpdater(module: String, kafkaParams: Map[String, String])",
    "line": 34
  }],
  "prId": 23321
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "You don't have to change this, but `Map` has `putIfAbsent`. If you want to log the new value if set:\r\n```\r\nif (map.putIfAbsent(key, value) == null) {\r\n  logDebug(...)\r\n}\r\n```",
    "commit": "dcacd7546fd42542da91a3076fea2915065cdff4",
    "createdAt": "2018-12-15T13:50:33Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.{util => ju}\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.kafka.common.config.SaslConfigs\n+\n+import org.apache.spark.SparkEnv\n+import org.apache.spark.deploy.security.KafkaTokenUtil\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config.Kafka\n+\n+/**\n+ * Class to conveniently update Kafka config params, while logging the changes\n+ */\n+private[kafka010] case class KafkaConfigUpdater(module: String, kafkaParams: Map[String, String])\n+    extends Logging {\n+  private val map = new ju.HashMap[String, Object](kafkaParams.asJava)\n+\n+  def set(key: String, value: Object): this.type = {\n+    map.put(key, value)\n+    logDebug(s\"$module: Set $key to $value, earlier value: ${kafkaParams.getOrElse(key, \"\")}\")\n+    this\n+  }\n+\n+  def setIfUnset(key: String, value: Object): KafkaConfigUpdater = {\n+    if (!map.containsKey(key)) {",
    "line": 45
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Thanks for the info, good point. That's coming from the original code and here just wanted to move + add tests to minimise the change.",
    "commit": "dcacd7546fd42542da91a3076fea2915065cdff4",
    "createdAt": "2018-12-15T15:57:48Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.{util => ju}\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.kafka.common.config.SaslConfigs\n+\n+import org.apache.spark.SparkEnv\n+import org.apache.spark.deploy.security.KafkaTokenUtil\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config.Kafka\n+\n+/**\n+ * Class to conveniently update Kafka config params, while logging the changes\n+ */\n+private[kafka010] case class KafkaConfigUpdater(module: String, kafkaParams: Map[String, String])\n+    extends Logging {\n+  private val map = new ju.HashMap[String, Object](kafkaParams.asJava)\n+\n+  def set(key: String, value: Object): this.type = {\n+    map.put(key, value)\n+    logDebug(s\"$module: Set $key to $value, earlier value: ${kafkaParams.getOrElse(key, \"\")}\")\n+    this\n+  }\n+\n+  def setIfUnset(key: String, value: Object): KafkaConfigUpdater = {\n+    if (!map.containsKey(key)) {",
    "line": 45
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Yeah, that's OK, this is tiny. I think we are in general welcome to make tiny improvements like this while touching the code.",
    "commit": "dcacd7546fd42542da91a3076fea2915065cdff4",
    "createdAt": "2018-12-17T11:41:35Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.{util => ju}\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.kafka.common.config.SaslConfigs\n+\n+import org.apache.spark.SparkEnv\n+import org.apache.spark.deploy.security.KafkaTokenUtil\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config.Kafka\n+\n+/**\n+ * Class to conveniently update Kafka config params, while logging the changes\n+ */\n+private[kafka010] case class KafkaConfigUpdater(module: String, kafkaParams: Map[String, String])\n+    extends Logging {\n+  private val map = new ju.HashMap[String, Object](kafkaParams.asJava)\n+\n+  def set(key: String, value: Object): this.type = {\n+    map.put(key, value)\n+    logDebug(s\"$module: Set $key to $value, earlier value: ${kafkaParams.getOrElse(key, \"\")}\")\n+    this\n+  }\n+\n+  def setIfUnset(key: String, value: Object): KafkaConfigUpdater = {\n+    if (!map.containsKey(key)) {",
    "line": 45
  }],
  "prId": 23321
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Usually, we need to use `this.type` **consistently** in a class in order to support `Chaining` for this class and derived classes. But, this class is using this only once here.\r\n- If you want to use `this.type` here, let's fix the other chaining functions like `setIfUnset` together.\r\n- Otherwise (this is a private `case class` and we are not going to use like that), let's use `KafkaConfigUpdater` instead of `this.type`.",
    "commit": "dcacd7546fd42542da91a3076fea2915065cdff4",
    "createdAt": "2018-12-15T21:14:20Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.{util => ju}\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.kafka.common.config.SaslConfigs\n+\n+import org.apache.spark.SparkEnv\n+import org.apache.spark.deploy.security.KafkaTokenUtil\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config.Kafka\n+\n+/**\n+ * Class to conveniently update Kafka config params, while logging the changes\n+ */\n+private[kafka010] case class KafkaConfigUpdater(module: String, kafkaParams: Map[String, String])\n+    extends Logging {\n+  private val map = new ju.HashMap[String, Object](kafkaParams.asJava)\n+\n+  def set(key: String, value: Object): this.type = {",
    "line": 38
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Nice catch, fixed to `this.type`.",
    "commit": "dcacd7546fd42542da91a3076fea2915065cdff4",
    "createdAt": "2018-12-17T08:15:34Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.kafka010\n+\n+import java.{util => ju}\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.kafka.common.config.SaslConfigs\n+\n+import org.apache.spark.SparkEnv\n+import org.apache.spark.deploy.security.KafkaTokenUtil\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.config.Kafka\n+\n+/**\n+ * Class to conveniently update Kafka config params, while logging the changes\n+ */\n+private[kafka010] case class KafkaConfigUpdater(module: String, kafkaParams: Map[String, String])\n+    extends Logging {\n+  private val map = new ju.HashMap[String, Object](kafkaParams.asJava)\n+\n+  def set(key: String, value: Object): this.type = {",
    "line": 38
  }],
  "prId": 23321
}]