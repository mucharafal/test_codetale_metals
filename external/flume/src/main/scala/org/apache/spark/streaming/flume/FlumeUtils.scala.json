[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "This lines is too long.\n",
    "commit": "41d5338295cde4fecb1c95f32adc0e684e6ad597",
    "createdAt": "2014-06-21T20:19:12Z",
    "diffHunk": "@@ -36,7 +36,25 @@ object FlumeUtils {\n       port: Int,\n       storageLevel: StorageLevel = StorageLevel.MEMORY_AND_DISK_SER_2\n     ): ReceiverInputDStream[SparkFlumeEvent] = {\n-    val inputStream = new FlumeInputDStream[SparkFlumeEvent](ssc, hostname, port, storageLevel)\n+    createStream(ssc, hostname, port, storageLevel, false)\n+  }\n+\n+  /**\n+   * Create a input stream from a Flume source.\n+   * @param ssc      StreamingContext object\n+   * @param hostname Hostname of the slave machine to which the flume data will be sent\n+   * @param port     Port of the slave machine to which the flume data will be sent\n+   * @param storageLevel  Storage level to use for storing the received objects\n+   * @param enableDecompression  should netty server decompress input stream\n+   */\n+  def createStream (\n+      ssc: StreamingContext,\n+      hostname: String,\n+      port: Int,\n+      storageLevel: StorageLevel,\n+      enableDecompression: Boolean\n+    ): ReceiverInputDStream[SparkFlumeEvent] = {\n+    val inputStream = new FlumeInputDStream[SparkFlumeEvent](ssc, hostname, port, storageLevel, enableDecompression)"
  }],
  "prId": 1168
}]