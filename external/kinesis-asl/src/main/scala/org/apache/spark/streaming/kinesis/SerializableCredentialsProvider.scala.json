[{
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "I would add a `null` check here and add logging that we're falling back to `DefaultProviderChain`",
    "commit": "da18da0d98d1f4e433480de8df6f6c34b1e0fb39",
    "createdAt": "2017-02-21T23:24:00Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.collection.JavaConverters._\n+\n+import com.amazonaws.auth._\n+\n+/**\n+ * Serializable interface providing a method executors can call to obtain an\n+ * AWSCredentialsProvider instance for authenticating to AWS services.\n+ */\n+private[kinesis] sealed trait SerializableCredentialsProvider extends Serializable {\n+  /**\n+   * Return an AWSCredentialProvider instance that can be used by the Kinesis Client\n+   * Library to authenticate to AWS services (Kinesis, CloudWatch and DynamoDB).\n+   */\n+  def provider: AWSCredentialsProvider\n+}\n+\n+/** Returns DefaultAWSCredentialsProviderChain for authentication. */\n+private[kinesis] final case object DefaultCredentialsProvider\n+  extends SerializableCredentialsProvider {\n+\n+  def provider: AWSCredentialsProvider = new DefaultAWSCredentialsProviderChain\n+}\n+\n+/** Returns AWSStaticCredentialsProvider constructed using basic AWS keypair. */\n+private[kinesis] final case class BasicCredentialsProvider(\n+    awsAccessKeyId: String,\n+    awsSecretKey: String) extends SerializableCredentialsProvider {\n+\n+  def provider: AWSCredentialsProvider ="
  }],
  "prId": 16744
}, {
  "comments": [{
    "author": {
      "login": "budde"
    },
    "body": "I can add the exception to the log message if you think it's appropriate",
    "commit": "da18da0d98d1f4e433480de8df6f6c34b1e0fb39",
    "createdAt": "2017-02-22T00:01:09Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.collection.JavaConverters._\n+\n+import com.amazonaws.auth._\n+\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * Serializable interface providing a method executors can call to obtain an\n+ * AWSCredentialsProvider instance for authenticating to AWS services.\n+ */\n+private[kinesis] sealed trait SerializableCredentialsProvider extends Serializable {\n+  /**\n+   * Return an AWSCredentialProvider instance that can be used by the Kinesis Client\n+   * Library to authenticate to AWS services (Kinesis, CloudWatch and DynamoDB).\n+   */\n+  def provider: AWSCredentialsProvider\n+}\n+\n+/** Returns DefaultAWSCredentialsProviderChain for authentication. */\n+private[kinesis] final case object DefaultCredentialsProvider\n+  extends SerializableCredentialsProvider {\n+\n+  def provider: AWSCredentialsProvider = new DefaultAWSCredentialsProviderChain\n+}\n+\n+/**\n+ * Returns AWSStaticCredentialsProvider constructed using basic AWS keypair. Falls back to using\n+ * DefaultAWSCredentialsProviderChain if unable to construct a AWSCredentialsProviderChain\n+ * instance with the provided arguments (e.g. if they are null).\n+ */\n+private[kinesis] final case class BasicCredentialsProvider(\n+    awsAccessKeyId: String,\n+    awsSecretKey: String) extends SerializableCredentialsProvider with Logging {\n+\n+  def provider: AWSCredentialsProvider = try {\n+    new AWSStaticCredentialsProvider(new BasicAWSCredentials(awsAccessKeyId, awsSecretKey))\n+  } catch {\n+    case _: IllegalArgumentException =>"
  }],
  "prId": 16744
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "Would you like to add it? Does the AWS exception include what was missing, e.g. access key was null or something?",
    "commit": "da18da0d98d1f4e433480de8df6f6c34b1e0fb39",
    "createdAt": "2017-02-22T00:30:36Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.collection.JavaConverters._\n+\n+import com.amazonaws.auth._\n+\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * Serializable interface providing a method executors can call to obtain an\n+ * AWSCredentialsProvider instance for authenticating to AWS services.\n+ */\n+private[kinesis] sealed trait SerializableCredentialsProvider extends Serializable {\n+  /**\n+   * Return an AWSCredentialProvider instance that can be used by the Kinesis Client\n+   * Library to authenticate to AWS services (Kinesis, CloudWatch and DynamoDB).\n+   */\n+  def provider: AWSCredentialsProvider\n+}\n+\n+/** Returns DefaultAWSCredentialsProviderChain for authentication. */\n+private[kinesis] final case object DefaultCredentialsProvider\n+  extends SerializableCredentialsProvider {\n+\n+  def provider: AWSCredentialsProvider = new DefaultAWSCredentialsProviderChain\n+}\n+\n+/**\n+ * Returns AWSStaticCredentialsProvider constructed using basic AWS keypair. Falls back to using\n+ * DefaultAWSCredentialsProviderChain if unable to construct a AWSCredentialsProviderChain\n+ * instance with the provided arguments (e.g. if they are null).\n+ */\n+private[kinesis] final case class BasicCredentialsProvider(\n+    awsAccessKeyId: String,\n+    awsSecretKey: String) extends SerializableCredentialsProvider with Logging {\n+\n+  def provider: AWSCredentialsProvider = try {\n+    new AWSStaticCredentialsProvider(new BasicAWSCredentials(awsAccessKeyId, awsSecretKey))\n+  } catch {\n+    case _: IllegalArgumentException =>\n+      logWarning(\"Unable to construct AWSStaticCredentialsProvider with provided keypair; \" +\n+        \"falling back to DefaultAWSCredentialsProviderChain\")"
  }, {
    "author": {
      "login": "budde"
    },
    "body": "It does specify that access key/secret key is null. I'll just add it.",
    "commit": "da18da0d98d1f4e433480de8df6f6c34b1e0fb39",
    "createdAt": "2017-02-22T00:33:23Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.collection.JavaConverters._\n+\n+import com.amazonaws.auth._\n+\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * Serializable interface providing a method executors can call to obtain an\n+ * AWSCredentialsProvider instance for authenticating to AWS services.\n+ */\n+private[kinesis] sealed trait SerializableCredentialsProvider extends Serializable {\n+  /**\n+   * Return an AWSCredentialProvider instance that can be used by the Kinesis Client\n+   * Library to authenticate to AWS services (Kinesis, CloudWatch and DynamoDB).\n+   */\n+  def provider: AWSCredentialsProvider\n+}\n+\n+/** Returns DefaultAWSCredentialsProviderChain for authentication. */\n+private[kinesis] final case object DefaultCredentialsProvider\n+  extends SerializableCredentialsProvider {\n+\n+  def provider: AWSCredentialsProvider = new DefaultAWSCredentialsProviderChain\n+}\n+\n+/**\n+ * Returns AWSStaticCredentialsProvider constructed using basic AWS keypair. Falls back to using\n+ * DefaultAWSCredentialsProviderChain if unable to construct a AWSCredentialsProviderChain\n+ * instance with the provided arguments (e.g. if they are null).\n+ */\n+private[kinesis] final case class BasicCredentialsProvider(\n+    awsAccessKeyId: String,\n+    awsSecretKey: String) extends SerializableCredentialsProvider with Logging {\n+\n+  def provider: AWSCredentialsProvider = try {\n+    new AWSStaticCredentialsProvider(new BasicAWSCredentials(awsAccessKeyId, awsSecretKey))\n+  } catch {\n+    case _: IllegalArgumentException =>\n+      logWarning(\"Unable to construct AWSStaticCredentialsProvider with provided keypair; \" +\n+        \"falling back to DefaultAWSCredentialsProviderChain\")"
  }],
  "prId": 16744
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "Use `\"falling back to DefaultAWSCredentialsProviderChain.\", e)` instead.",
    "commit": "da18da0d98d1f4e433480de8df6f6c34b1e0fb39",
    "createdAt": "2017-02-22T01:44:25Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.collection.JavaConverters._\n+\n+import com.amazonaws.auth._\n+\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * Serializable interface providing a method executors can call to obtain an\n+ * AWSCredentialsProvider instance for authenticating to AWS services.\n+ */\n+private[kinesis] sealed trait SerializableCredentialsProvider extends Serializable {\n+  /**\n+   * Return an AWSCredentialProvider instance that can be used by the Kinesis Client\n+   * Library to authenticate to AWS services (Kinesis, CloudWatch and DynamoDB).\n+   */\n+  def provider: AWSCredentialsProvider\n+}\n+\n+/** Returns DefaultAWSCredentialsProviderChain for authentication. */\n+private[kinesis] final case object DefaultCredentialsProvider\n+  extends SerializableCredentialsProvider {\n+\n+  def provider: AWSCredentialsProvider = new DefaultAWSCredentialsProviderChain\n+}\n+\n+/**\n+ * Returns AWSStaticCredentialsProvider constructed using basic AWS keypair. Falls back to using\n+ * DefaultAWSCredentialsProviderChain if unable to construct a AWSCredentialsProviderChain\n+ * instance with the provided arguments (e.g. if they are null).\n+ */\n+private[kinesis] final case class BasicCredentialsProvider(\n+    awsAccessKeyId: String,\n+    awsSecretKey: String) extends SerializableCredentialsProvider with Logging {\n+\n+  def provider: AWSCredentialsProvider = try {\n+    new AWSStaticCredentialsProvider(new BasicAWSCredentials(awsAccessKeyId, awsSecretKey))\n+  } catch {\n+    case e: IllegalArgumentException =>\n+      logWarning(\"Unable to construct AWSStaticCredentialsProvider with provided keypair; \" +\n+        s\"falling back to DefaultAWSCredentialsProviderChain: $e\")"
  }, {
    "author": {
      "login": "brkyvz"
    },
    "body": "can do it in a separate PR if you like",
    "commit": "da18da0d98d1f4e433480de8df6f6c34b1e0fb39",
    "createdAt": "2017-02-22T01:44:41Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.collection.JavaConverters._\n+\n+import com.amazonaws.auth._\n+\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * Serializable interface providing a method executors can call to obtain an\n+ * AWSCredentialsProvider instance for authenticating to AWS services.\n+ */\n+private[kinesis] sealed trait SerializableCredentialsProvider extends Serializable {\n+  /**\n+   * Return an AWSCredentialProvider instance that can be used by the Kinesis Client\n+   * Library to authenticate to AWS services (Kinesis, CloudWatch and DynamoDB).\n+   */\n+  def provider: AWSCredentialsProvider\n+}\n+\n+/** Returns DefaultAWSCredentialsProviderChain for authentication. */\n+private[kinesis] final case object DefaultCredentialsProvider\n+  extends SerializableCredentialsProvider {\n+\n+  def provider: AWSCredentialsProvider = new DefaultAWSCredentialsProviderChain\n+}\n+\n+/**\n+ * Returns AWSStaticCredentialsProvider constructed using basic AWS keypair. Falls back to using\n+ * DefaultAWSCredentialsProviderChain if unable to construct a AWSCredentialsProviderChain\n+ * instance with the provided arguments (e.g. if they are null).\n+ */\n+private[kinesis] final case class BasicCredentialsProvider(\n+    awsAccessKeyId: String,\n+    awsSecretKey: String) extends SerializableCredentialsProvider with Logging {\n+\n+  def provider: AWSCredentialsProvider = try {\n+    new AWSStaticCredentialsProvider(new BasicAWSCredentials(awsAccessKeyId, awsSecretKey))\n+  } catch {\n+    case e: IllegalArgumentException =>\n+      logWarning(\"Unable to construct AWSStaticCredentialsProvider with provided keypair; \" +\n+        s\"falling back to DefaultAWSCredentialsProviderChain: $e\")"
  }, {
    "author": {
      "login": "budde"
    },
    "body": "I went ahead and updated it.",
    "commit": "da18da0d98d1f4e433480de8df6f6c34b1e0fb39",
    "createdAt": "2017-02-22T01:47:40Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.collection.JavaConverters._\n+\n+import com.amazonaws.auth._\n+\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * Serializable interface providing a method executors can call to obtain an\n+ * AWSCredentialsProvider instance for authenticating to AWS services.\n+ */\n+private[kinesis] sealed trait SerializableCredentialsProvider extends Serializable {\n+  /**\n+   * Return an AWSCredentialProvider instance that can be used by the Kinesis Client\n+   * Library to authenticate to AWS services (Kinesis, CloudWatch and DynamoDB).\n+   */\n+  def provider: AWSCredentialsProvider\n+}\n+\n+/** Returns DefaultAWSCredentialsProviderChain for authentication. */\n+private[kinesis] final case object DefaultCredentialsProvider\n+  extends SerializableCredentialsProvider {\n+\n+  def provider: AWSCredentialsProvider = new DefaultAWSCredentialsProviderChain\n+}\n+\n+/**\n+ * Returns AWSStaticCredentialsProvider constructed using basic AWS keypair. Falls back to using\n+ * DefaultAWSCredentialsProviderChain if unable to construct a AWSCredentialsProviderChain\n+ * instance with the provided arguments (e.g. if they are null).\n+ */\n+private[kinesis] final case class BasicCredentialsProvider(\n+    awsAccessKeyId: String,\n+    awsSecretKey: String) extends SerializableCredentialsProvider with Logging {\n+\n+  def provider: AWSCredentialsProvider = try {\n+    new AWSStaticCredentialsProvider(new BasicAWSCredentials(awsAccessKeyId, awsSecretKey))\n+  } catch {\n+    case e: IllegalArgumentException =>\n+      logWarning(\"Unable to construct AWSStaticCredentialsProvider with provided keypair; \" +\n+        s\"falling back to DefaultAWSCredentialsProviderChain: $e\")"
  }],
  "prId": 16744
}]