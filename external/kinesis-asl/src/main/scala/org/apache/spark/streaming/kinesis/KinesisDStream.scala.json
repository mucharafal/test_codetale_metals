[{
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "I feel that builders rarely have constructor params. I understand you wanted to make these the `required` options, but I would just rather have the builder have a `zero-param` constructor, and it checks for the required fields upon `build()`. What do you think?",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-13T22:50:34Z",
    "diffHunk": "@@ -0,0 +1,559 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.reflect.ClassTag\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import com.amazonaws.services.kinesis.model.Record\n+\n+import org.apache.spark.annotation.InterfaceStability\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+\n+@InterfaceStability.Stable\n+object KinesisDStream {\n+  /**\n+   * Builder for [[KinesisInputDStream]] instances.\n+   *\n+   * @param ssc StreamingContext to be used for creating DStreams\n+   * @param streamName Name of Kinesis stream\n+   * @param messageHandler Function for extracting DStream data type from KCL Record\n+   *\n+   * @since 2.2.0\n+   */\n+  @InterfaceStability.Stable\n+  class Builder[T: ClassTag]("
  }, {
    "author": {
      "login": "budde"
    },
    "body": "This is probably the first builder class I've implemented so I'll defer to your judgment here :)",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-14T00:48:37Z",
    "diffHunk": "@@ -0,0 +1,559 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.reflect.ClassTag\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import com.amazonaws.services.kinesis.model.Record\n+\n+import org.apache.spark.annotation.InterfaceStability\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+\n+@InterfaceStability.Stable\n+object KinesisDStream {\n+  /**\n+   * Builder for [[KinesisInputDStream]] instances.\n+   *\n+   * @param ssc StreamingContext to be used for creating DStreams\n+   * @param streamName Name of Kinesis stream\n+   * @param messageHandler Function for extracting DStream data type from KCL Record\n+   *\n+   * @since 2.2.0\n+   */\n+  @InterfaceStability.Stable\n+  class Builder[T: ClassTag]("
  }],
  "prId": 17250
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "I would also make this a `required` field, otherwise people will face confusing issues when they start 2 streams from the same Spark application.",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-13T22:52:09Z",
    "diffHunk": "@@ -0,0 +1,559 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.reflect.ClassTag\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import com.amazonaws.services.kinesis.model.Record\n+\n+import org.apache.spark.annotation.InterfaceStability\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+\n+@InterfaceStability.Stable\n+object KinesisDStream {\n+  /**\n+   * Builder for [[KinesisInputDStream]] instances.\n+   *\n+   * @param ssc StreamingContext to be used for creating DStreams\n+   * @param streamName Name of Kinesis stream\n+   * @param messageHandler Function for extracting DStream data type from KCL Record\n+   *\n+   * @since 2.2.0\n+   */\n+  @InterfaceStability.Stable\n+  class Builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T) {\n+    private var endpointUrl = DEFAULT_KINESIS_ENDPOINT_URL\n+    private var regionName = DEFAULT_KINESIS_REGION_NAME\n+    private var initialPositionInStream = DEFAULT_INITIAL_POSITION_IN_STREAM\n+    private var checkpointAppName = ssc.sparkContext.appName"
  }, {
    "author": {
      "login": "budde"
    },
    "body": "Sounds reasonable. Feel free to push back on any other defaults as well-- figured these would just be a starting point. ",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-14T00:48:34Z",
    "diffHunk": "@@ -0,0 +1,559 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.reflect.ClassTag\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import com.amazonaws.services.kinesis.model.Record\n+\n+import org.apache.spark.annotation.InterfaceStability\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+\n+@InterfaceStability.Stable\n+object KinesisDStream {\n+  /**\n+   * Builder for [[KinesisInputDStream]] instances.\n+   *\n+   * @param ssc StreamingContext to be used for creating DStreams\n+   * @param streamName Name of Kinesis stream\n+   * @param messageHandler Function for extracting DStream data type from KCL Record\n+   *\n+   * @since 2.2.0\n+   */\n+  @InterfaceStability.Stable\n+  class Builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T) {\n+    private var endpointUrl = DEFAULT_KINESIS_ENDPOINT_URL\n+    private var regionName = DEFAULT_KINESIS_REGION_NAME\n+    private var initialPositionInStream = DEFAULT_INITIAL_POSITION_IN_STREAM\n+    private var checkpointAppName = ssc.sparkContext.appName"
  }],
  "prId": 17250
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "Would be great to document what happens when both region and endpoint is set, but are referring to different regions",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-13T22:54:22Z",
    "diffHunk": "@@ -0,0 +1,559 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.reflect.ClassTag\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import com.amazonaws.services.kinesis.model.Record\n+\n+import org.apache.spark.annotation.InterfaceStability\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+\n+@InterfaceStability.Stable\n+object KinesisDStream {\n+  /**\n+   * Builder for [[KinesisInputDStream]] instances.\n+   *\n+   * @param ssc StreamingContext to be used for creating DStreams\n+   * @param streamName Name of Kinesis stream\n+   * @param messageHandler Function for extracting DStream data type from KCL Record\n+   *\n+   * @since 2.2.0\n+   */\n+  @InterfaceStability.Stable\n+  class Builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T) {\n+    private var endpointUrl = DEFAULT_KINESIS_ENDPOINT_URL\n+    private var regionName = DEFAULT_KINESIS_REGION_NAME\n+    private var initialPositionInStream = DEFAULT_INITIAL_POSITION_IN_STREAM\n+    private var checkpointAppName = ssc.sparkContext.appName\n+    private var checkpointInterval = ssc.graph.batchDuration\n+    private var storageLevel = DEFAULT_STORAGE_LEVEL\n+    private var kinesisCredsProvider: SerializableCredentialsProvider = DefaultCredentialsProvider\n+    private var dynamoDBCredsProvider: Option[SerializableCredentialsProvider] = None\n+    private var cloudWatchCredsProvider: Option[SerializableCredentialsProvider] = None\n+\n+    /**\n+     * Sets the AWS Kinesis endpoint URL. Defaults to \"https://kinesis.us-east-1.amazonaws.com\" if\n+     * no custom value is specified"
  }, {
    "author": {
      "login": "budde"
    },
    "body": "I'll take a look and see. To be honest supplying both of these has always felt pretty redundant to me. The AWS SDK has changed a bit in how it handles endpoints and regions as well, so it may also be worth revisiting how ```KinesisReceiver``` uses these params.\r\n\r\nLong term, it may also be nice to allow for different endpoints to be specified for Kinesis, DynamoDB and CloudWatch (I think the KCL should support this...)",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-14T00:48:27Z",
    "diffHunk": "@@ -0,0 +1,559 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.reflect.ClassTag\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import com.amazonaws.services.kinesis.model.Record\n+\n+import org.apache.spark.annotation.InterfaceStability\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+\n+@InterfaceStability.Stable\n+object KinesisDStream {\n+  /**\n+   * Builder for [[KinesisInputDStream]] instances.\n+   *\n+   * @param ssc StreamingContext to be used for creating DStreams\n+   * @param streamName Name of Kinesis stream\n+   * @param messageHandler Function for extracting DStream data type from KCL Record\n+   *\n+   * @since 2.2.0\n+   */\n+  @InterfaceStability.Stable\n+  class Builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T) {\n+    private var endpointUrl = DEFAULT_KINESIS_ENDPOINT_URL\n+    private var regionName = DEFAULT_KINESIS_REGION_NAME\n+    private var initialPositionInStream = DEFAULT_INITIAL_POSITION_IN_STREAM\n+    private var checkpointAppName = ssc.sparkContext.appName\n+    private var checkpointInterval = ssc.graph.batchDuration\n+    private var storageLevel = DEFAULT_STORAGE_LEVEL\n+    private var kinesisCredsProvider: SerializableCredentialsProvider = DefaultCredentialsProvider\n+    private var dynamoDBCredsProvider: Option[SerializableCredentialsProvider] = None\n+    private var cloudWatchCredsProvider: Option[SerializableCredentialsProvider] = None\n+\n+    /**\n+     * Sets the AWS Kinesis endpoint URL. Defaults to \"https://kinesis.us-east-1.amazonaws.com\" if\n+     * no custom value is specified"
  }],
  "prId": 17250
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "could you link `InitialPositionInStream` for simplicity",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-13T22:55:17Z",
    "diffHunk": "@@ -0,0 +1,559 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.reflect.ClassTag\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import com.amazonaws.services.kinesis.model.Record\n+\n+import org.apache.spark.annotation.InterfaceStability\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+\n+@InterfaceStability.Stable\n+object KinesisDStream {\n+  /**\n+   * Builder for [[KinesisInputDStream]] instances.\n+   *\n+   * @param ssc StreamingContext to be used for creating DStreams\n+   * @param streamName Name of Kinesis stream\n+   * @param messageHandler Function for extracting DStream data type from KCL Record\n+   *\n+   * @since 2.2.0\n+   */\n+  @InterfaceStability.Stable\n+  class Builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T) {\n+    private var endpointUrl = DEFAULT_KINESIS_ENDPOINT_URL\n+    private var regionName = DEFAULT_KINESIS_REGION_NAME\n+    private var initialPositionInStream = DEFAULT_INITIAL_POSITION_IN_STREAM\n+    private var checkpointAppName = ssc.sparkContext.appName\n+    private var checkpointInterval = ssc.graph.batchDuration\n+    private var storageLevel = DEFAULT_STORAGE_LEVEL\n+    private var kinesisCredsProvider: SerializableCredentialsProvider = DefaultCredentialsProvider\n+    private var dynamoDBCredsProvider: Option[SerializableCredentialsProvider] = None\n+    private var cloudWatchCredsProvider: Option[SerializableCredentialsProvider] = None\n+\n+    /**\n+     * Sets the AWS Kinesis endpoint URL. Defaults to \"https://kinesis.us-east-1.amazonaws.com\" if\n+     * no custom value is specified\n+     *\n+     * @param url Kinesis endpoint URL to use\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def endpointUrl(url: String): Builder[T] = {\n+      endpointUrl = url\n+      this\n+    }\n+\n+    /**\n+     * Sets the AWS region to construct clients for. Defaults to \"us-east-1\" if no custom value\n+     * is specified.\n+     *\n+     * @param regionName Name of AWS region to use (e.g. \"us-west-2\")\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def regionName(regionName: String): Builder[T] = {\n+      this.regionName = regionName\n+      this\n+    }\n+\n+    /**\n+     * Sets the initial position data is read from in the Kinesis stream. Defaults to\n+     * InitialPositionInStream.LATEST if no custom value is specified."
  }, {
    "author": {
      "login": "budde"
    },
    "body": "Will do",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-14T00:48:23Z",
    "diffHunk": "@@ -0,0 +1,559 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.reflect.ClassTag\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import com.amazonaws.services.kinesis.model.Record\n+\n+import org.apache.spark.annotation.InterfaceStability\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+\n+@InterfaceStability.Stable\n+object KinesisDStream {\n+  /**\n+   * Builder for [[KinesisInputDStream]] instances.\n+   *\n+   * @param ssc StreamingContext to be used for creating DStreams\n+   * @param streamName Name of Kinesis stream\n+   * @param messageHandler Function for extracting DStream data type from KCL Record\n+   *\n+   * @since 2.2.0\n+   */\n+  @InterfaceStability.Stable\n+  class Builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T) {\n+    private var endpointUrl = DEFAULT_KINESIS_ENDPOINT_URL\n+    private var regionName = DEFAULT_KINESIS_REGION_NAME\n+    private var initialPositionInStream = DEFAULT_INITIAL_POSITION_IN_STREAM\n+    private var checkpointAppName = ssc.sparkContext.appName\n+    private var checkpointInterval = ssc.graph.batchDuration\n+    private var storageLevel = DEFAULT_STORAGE_LEVEL\n+    private var kinesisCredsProvider: SerializableCredentialsProvider = DefaultCredentialsProvider\n+    private var dynamoDBCredsProvider: Option[SerializableCredentialsProvider] = None\n+    private var cloudWatchCredsProvider: Option[SerializableCredentialsProvider] = None\n+\n+    /**\n+     * Sets the AWS Kinesis endpoint URL. Defaults to \"https://kinesis.us-east-1.amazonaws.com\" if\n+     * no custom value is specified\n+     *\n+     * @param url Kinesis endpoint URL to use\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def endpointUrl(url: String): Builder[T] = {\n+      endpointUrl = url\n+      this\n+    }\n+\n+    /**\n+     * Sets the AWS region to construct clients for. Defaults to \"us-east-1\" if no custom value\n+     * is specified.\n+     *\n+     * @param regionName Name of AWS region to use (e.g. \"us-west-2\")\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def regionName(regionName: String): Builder[T] = {\n+      this.regionName = regionName\n+      this\n+    }\n+\n+    /**\n+     * Sets the initial position data is read from in the Kinesis stream. Defaults to\n+     * InitialPositionInStream.LATEST if no custom value is specified."
  }],
  "prId": 17250
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "We shouldn't default to the Spark app name",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-13T22:55:42Z",
    "diffHunk": "@@ -0,0 +1,559 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.reflect.ClassTag\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import com.amazonaws.services.kinesis.model.Record\n+\n+import org.apache.spark.annotation.InterfaceStability\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+\n+@InterfaceStability.Stable\n+object KinesisDStream {\n+  /**\n+   * Builder for [[KinesisInputDStream]] instances.\n+   *\n+   * @param ssc StreamingContext to be used for creating DStreams\n+   * @param streamName Name of Kinesis stream\n+   * @param messageHandler Function for extracting DStream data type from KCL Record\n+   *\n+   * @since 2.2.0\n+   */\n+  @InterfaceStability.Stable\n+  class Builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T) {\n+    private var endpointUrl = DEFAULT_KINESIS_ENDPOINT_URL\n+    private var regionName = DEFAULT_KINESIS_REGION_NAME\n+    private var initialPositionInStream = DEFAULT_INITIAL_POSITION_IN_STREAM\n+    private var checkpointAppName = ssc.sparkContext.appName\n+    private var checkpointInterval = ssc.graph.batchDuration\n+    private var storageLevel = DEFAULT_STORAGE_LEVEL\n+    private var kinesisCredsProvider: SerializableCredentialsProvider = DefaultCredentialsProvider\n+    private var dynamoDBCredsProvider: Option[SerializableCredentialsProvider] = None\n+    private var cloudWatchCredsProvider: Option[SerializableCredentialsProvider] = None\n+\n+    /**\n+     * Sets the AWS Kinesis endpoint URL. Defaults to \"https://kinesis.us-east-1.amazonaws.com\" if\n+     * no custom value is specified\n+     *\n+     * @param url Kinesis endpoint URL to use\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def endpointUrl(url: String): Builder[T] = {\n+      endpointUrl = url\n+      this\n+    }\n+\n+    /**\n+     * Sets the AWS region to construct clients for. Defaults to \"us-east-1\" if no custom value\n+     * is specified.\n+     *\n+     * @param regionName Name of AWS region to use (e.g. \"us-west-2\")\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def regionName(regionName: String): Builder[T] = {\n+      this.regionName = regionName\n+      this\n+    }\n+\n+    /**\n+     * Sets the initial position data is read from in the Kinesis stream. Defaults to\n+     * InitialPositionInStream.LATEST if no custom value is specified.\n+     *\n+     * @param initialPosition InitialPositionInStream value specifying where Spark Streaming\n+     *                        will start reading records in the Kinesis stream from\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def initialPositionInStream(initialPosition: InitialPositionInStream): Builder[T] = {\n+      initialPositionInStream = initialPosition\n+      this\n+    }\n+\n+    /**\n+     * Sets the KCL application name to use when checkpointing state to DynamoDB. Defaults to the"
  }, {
    "author": {
      "login": "budde"
    },
    "body": "We'll make this required",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-14T00:48:20Z",
    "diffHunk": "@@ -0,0 +1,559 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.reflect.ClassTag\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import com.amazonaws.services.kinesis.model.Record\n+\n+import org.apache.spark.annotation.InterfaceStability\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+\n+@InterfaceStability.Stable\n+object KinesisDStream {\n+  /**\n+   * Builder for [[KinesisInputDStream]] instances.\n+   *\n+   * @param ssc StreamingContext to be used for creating DStreams\n+   * @param streamName Name of Kinesis stream\n+   * @param messageHandler Function for extracting DStream data type from KCL Record\n+   *\n+   * @since 2.2.0\n+   */\n+  @InterfaceStability.Stable\n+  class Builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T) {\n+    private var endpointUrl = DEFAULT_KINESIS_ENDPOINT_URL\n+    private var regionName = DEFAULT_KINESIS_REGION_NAME\n+    private var initialPositionInStream = DEFAULT_INITIAL_POSITION_IN_STREAM\n+    private var checkpointAppName = ssc.sparkContext.appName\n+    private var checkpointInterval = ssc.graph.batchDuration\n+    private var storageLevel = DEFAULT_STORAGE_LEVEL\n+    private var kinesisCredsProvider: SerializableCredentialsProvider = DefaultCredentialsProvider\n+    private var dynamoDBCredsProvider: Option[SerializableCredentialsProvider] = None\n+    private var cloudWatchCredsProvider: Option[SerializableCredentialsProvider] = None\n+\n+    /**\n+     * Sets the AWS Kinesis endpoint URL. Defaults to \"https://kinesis.us-east-1.amazonaws.com\" if\n+     * no custom value is specified\n+     *\n+     * @param url Kinesis endpoint URL to use\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def endpointUrl(url: String): Builder[T] = {\n+      endpointUrl = url\n+      this\n+    }\n+\n+    /**\n+     * Sets the AWS region to construct clients for. Defaults to \"us-east-1\" if no custom value\n+     * is specified.\n+     *\n+     * @param regionName Name of AWS region to use (e.g. \"us-west-2\")\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def regionName(regionName: String): Builder[T] = {\n+      this.regionName = regionName\n+      this\n+    }\n+\n+    /**\n+     * Sets the initial position data is read from in the Kinesis stream. Defaults to\n+     * InitialPositionInStream.LATEST if no custom value is specified.\n+     *\n+     * @param initialPosition InitialPositionInStream value specifying where Spark Streaming\n+     *                        will start reading records in the Kinesis stream from\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def initialPositionInStream(initialPosition: InitialPositionInStream): Builder[T] = {\n+      initialPositionInStream = initialPosition\n+      this\n+    }\n+\n+    /**\n+     * Sets the KCL application name to use when checkpointing state to DynamoDB. Defaults to the"
  }],
  "prId": 17250
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "Kinda feels unnecessary?",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-13T22:57:08Z",
    "diffHunk": "@@ -0,0 +1,559 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.reflect.ClassTag\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import com.amazonaws.services.kinesis.model.Record\n+\n+import org.apache.spark.annotation.InterfaceStability\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+\n+@InterfaceStability.Stable\n+object KinesisDStream {\n+  /**\n+   * Builder for [[KinesisInputDStream]] instances.\n+   *\n+   * @param ssc StreamingContext to be used for creating DStreams\n+   * @param streamName Name of Kinesis stream\n+   * @param messageHandler Function for extracting DStream data type from KCL Record\n+   *\n+   * @since 2.2.0\n+   */\n+  @InterfaceStability.Stable\n+  class Builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T) {\n+    private var endpointUrl = DEFAULT_KINESIS_ENDPOINT_URL\n+    private var regionName = DEFAULT_KINESIS_REGION_NAME\n+    private var initialPositionInStream = DEFAULT_INITIAL_POSITION_IN_STREAM\n+    private var checkpointAppName = ssc.sparkContext.appName\n+    private var checkpointInterval = ssc.graph.batchDuration\n+    private var storageLevel = DEFAULT_STORAGE_LEVEL\n+    private var kinesisCredsProvider: SerializableCredentialsProvider = DefaultCredentialsProvider\n+    private var dynamoDBCredsProvider: Option[SerializableCredentialsProvider] = None\n+    private var cloudWatchCredsProvider: Option[SerializableCredentialsProvider] = None\n+\n+    /**\n+     * Sets the AWS Kinesis endpoint URL. Defaults to \"https://kinesis.us-east-1.amazonaws.com\" if\n+     * no custom value is specified\n+     *\n+     * @param url Kinesis endpoint URL to use\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def endpointUrl(url: String): Builder[T] = {\n+      endpointUrl = url\n+      this\n+    }\n+\n+    /**\n+     * Sets the AWS region to construct clients for. Defaults to \"us-east-1\" if no custom value\n+     * is specified.\n+     *\n+     * @param regionName Name of AWS region to use (e.g. \"us-west-2\")\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def regionName(regionName: String): Builder[T] = {\n+      this.regionName = regionName\n+      this\n+    }\n+\n+    /**\n+     * Sets the initial position data is read from in the Kinesis stream. Defaults to\n+     * InitialPositionInStream.LATEST if no custom value is specified.\n+     *\n+     * @param initialPosition InitialPositionInStream value specifying where Spark Streaming\n+     *                        will start reading records in the Kinesis stream from\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def initialPositionInStream(initialPosition: InitialPositionInStream): Builder[T] = {\n+      initialPositionInStream = initialPosition\n+      this\n+    }\n+\n+    /**\n+     * Sets the KCL application name to use when checkpointing state to DynamoDB. Defaults to the\n+     * Spark app name if no custom value is specified.\n+     *\n+     * @param appName Value to use for the KCL app name (used when creating the DynamoDB checkpoint\n+     *                table and when writing metrics to CloudWatch)\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointAppName(appName: String): Builder[T] = {\n+      checkpointAppName = appName\n+      this\n+    }\n+\n+    /**\n+     * Sets how often the KCL application state is checkpointed to DynamoDB. Defaults to the Spark\n+     * Streaming batch interval if no custom value is specified.\n+     *\n+     * @param interval [[Duration]] specifying how often the KCL state should be checkpointed to\n+     *                 DynamoDB.\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointInterval(interval: Duration): Builder[T] = {\n+      checkpointInterval = interval\n+      this\n+    }\n+\n+    /**\n+     * Sets the storage level of the blocks for the DStream created. Defaults to\n+     * [[StorageLevel.MEMORY_AND_DISK_2]] if no custom value is specified.\n+     *\n+     * @param storageLevel [[StorageLevel]] to use for the DStream data blocks\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def storageLevel(storageLevel: StorageLevel): Builder[T] = {\n+      this.storageLevel = storageLevel\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the Kinesis service. This\n+     * is also the default credentials provider used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisDefaultCredentials(): Builder[T] = {"
  }, {
    "author": {
      "login": "budde"
    },
    "body": "Yeah, I mostly put this here for the sake of completeness. Should be able to remove this if we introduce a credential builder and replace it with a single method that just takes a ```SerializableCredentialsProvider``` instance to use for the service. A user could always just manually pass ```DefaultCredentialsProvider``` if they really want to for some reason.",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-14T00:48:17Z",
    "diffHunk": "@@ -0,0 +1,559 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.reflect.ClassTag\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import com.amazonaws.services.kinesis.model.Record\n+\n+import org.apache.spark.annotation.InterfaceStability\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+\n+@InterfaceStability.Stable\n+object KinesisDStream {\n+  /**\n+   * Builder for [[KinesisInputDStream]] instances.\n+   *\n+   * @param ssc StreamingContext to be used for creating DStreams\n+   * @param streamName Name of Kinesis stream\n+   * @param messageHandler Function for extracting DStream data type from KCL Record\n+   *\n+   * @since 2.2.0\n+   */\n+  @InterfaceStability.Stable\n+  class Builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T) {\n+    private var endpointUrl = DEFAULT_KINESIS_ENDPOINT_URL\n+    private var regionName = DEFAULT_KINESIS_REGION_NAME\n+    private var initialPositionInStream = DEFAULT_INITIAL_POSITION_IN_STREAM\n+    private var checkpointAppName = ssc.sparkContext.appName\n+    private var checkpointInterval = ssc.graph.batchDuration\n+    private var storageLevel = DEFAULT_STORAGE_LEVEL\n+    private var kinesisCredsProvider: SerializableCredentialsProvider = DefaultCredentialsProvider\n+    private var dynamoDBCredsProvider: Option[SerializableCredentialsProvider] = None\n+    private var cloudWatchCredsProvider: Option[SerializableCredentialsProvider] = None\n+\n+    /**\n+     * Sets the AWS Kinesis endpoint URL. Defaults to \"https://kinesis.us-east-1.amazonaws.com\" if\n+     * no custom value is specified\n+     *\n+     * @param url Kinesis endpoint URL to use\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def endpointUrl(url: String): Builder[T] = {\n+      endpointUrl = url\n+      this\n+    }\n+\n+    /**\n+     * Sets the AWS region to construct clients for. Defaults to \"us-east-1\" if no custom value\n+     * is specified.\n+     *\n+     * @param regionName Name of AWS region to use (e.g. \"us-west-2\")\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def regionName(regionName: String): Builder[T] = {\n+      this.regionName = regionName\n+      this\n+    }\n+\n+    /**\n+     * Sets the initial position data is read from in the Kinesis stream. Defaults to\n+     * InitialPositionInStream.LATEST if no custom value is specified.\n+     *\n+     * @param initialPosition InitialPositionInStream value specifying where Spark Streaming\n+     *                        will start reading records in the Kinesis stream from\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def initialPositionInStream(initialPosition: InitialPositionInStream): Builder[T] = {\n+      initialPositionInStream = initialPosition\n+      this\n+    }\n+\n+    /**\n+     * Sets the KCL application name to use when checkpointing state to DynamoDB. Defaults to the\n+     * Spark app name if no custom value is specified.\n+     *\n+     * @param appName Value to use for the KCL app name (used when creating the DynamoDB checkpoint\n+     *                table and when writing metrics to CloudWatch)\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointAppName(appName: String): Builder[T] = {\n+      checkpointAppName = appName\n+      this\n+    }\n+\n+    /**\n+     * Sets how often the KCL application state is checkpointed to DynamoDB. Defaults to the Spark\n+     * Streaming batch interval if no custom value is specified.\n+     *\n+     * @param interval [[Duration]] specifying how often the KCL state should be checkpointed to\n+     *                 DynamoDB.\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointInterval(interval: Duration): Builder[T] = {\n+      checkpointInterval = interval\n+      this\n+    }\n+\n+    /**\n+     * Sets the storage level of the blocks for the DStream created. Defaults to\n+     * [[StorageLevel.MEMORY_AND_DISK_2]] if no custom value is specified.\n+     *\n+     * @param storageLevel [[StorageLevel]] to use for the DStream data blocks\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def storageLevel(storageLevel: StorageLevel): Builder[T] = {\n+      this.storageLevel = storageLevel\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the Kinesis service. This\n+     * is also the default credentials provider used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisDefaultCredentials(): Builder[T] = {"
  }],
  "prId": 17250
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "I would get rid of the constructor params, and check for required values here, i.e.\r\n 1. `ssc`\r\n 2. `streamName`\r\n 3. `appName`",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-13T23:00:36Z",
    "diffHunk": "@@ -0,0 +1,559 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.reflect.ClassTag\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import com.amazonaws.services.kinesis.model.Record\n+\n+import org.apache.spark.annotation.InterfaceStability\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+\n+@InterfaceStability.Stable\n+object KinesisDStream {\n+  /**\n+   * Builder for [[KinesisInputDStream]] instances.\n+   *\n+   * @param ssc StreamingContext to be used for creating DStreams\n+   * @param streamName Name of Kinesis stream\n+   * @param messageHandler Function for extracting DStream data type from KCL Record\n+   *\n+   * @since 2.2.0\n+   */\n+  @InterfaceStability.Stable\n+  class Builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T) {\n+    private var endpointUrl = DEFAULT_KINESIS_ENDPOINT_URL\n+    private var regionName = DEFAULT_KINESIS_REGION_NAME\n+    private var initialPositionInStream = DEFAULT_INITIAL_POSITION_IN_STREAM\n+    private var checkpointAppName = ssc.sparkContext.appName\n+    private var checkpointInterval = ssc.graph.batchDuration\n+    private var storageLevel = DEFAULT_STORAGE_LEVEL\n+    private var kinesisCredsProvider: SerializableCredentialsProvider = DefaultCredentialsProvider\n+    private var dynamoDBCredsProvider: Option[SerializableCredentialsProvider] = None\n+    private var cloudWatchCredsProvider: Option[SerializableCredentialsProvider] = None\n+\n+    /**\n+     * Sets the AWS Kinesis endpoint URL. Defaults to \"https://kinesis.us-east-1.amazonaws.com\" if\n+     * no custom value is specified\n+     *\n+     * @param url Kinesis endpoint URL to use\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def endpointUrl(url: String): Builder[T] = {\n+      endpointUrl = url\n+      this\n+    }\n+\n+    /**\n+     * Sets the AWS region to construct clients for. Defaults to \"us-east-1\" if no custom value\n+     * is specified.\n+     *\n+     * @param regionName Name of AWS region to use (e.g. \"us-west-2\")\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def regionName(regionName: String): Builder[T] = {\n+      this.regionName = regionName\n+      this\n+    }\n+\n+    /**\n+     * Sets the initial position data is read from in the Kinesis stream. Defaults to\n+     * InitialPositionInStream.LATEST if no custom value is specified.\n+     *\n+     * @param initialPosition InitialPositionInStream value specifying where Spark Streaming\n+     *                        will start reading records in the Kinesis stream from\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def initialPositionInStream(initialPosition: InitialPositionInStream): Builder[T] = {\n+      initialPositionInStream = initialPosition\n+      this\n+    }\n+\n+    /**\n+     * Sets the KCL application name to use when checkpointing state to DynamoDB. Defaults to the\n+     * Spark app name if no custom value is specified.\n+     *\n+     * @param appName Value to use for the KCL app name (used when creating the DynamoDB checkpoint\n+     *                table and when writing metrics to CloudWatch)\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointAppName(appName: String): Builder[T] = {\n+      checkpointAppName = appName\n+      this\n+    }\n+\n+    /**\n+     * Sets how often the KCL application state is checkpointed to DynamoDB. Defaults to the Spark\n+     * Streaming batch interval if no custom value is specified.\n+     *\n+     * @param interval [[Duration]] specifying how often the KCL state should be checkpointed to\n+     *                 DynamoDB.\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointInterval(interval: Duration): Builder[T] = {\n+      checkpointInterval = interval\n+      this\n+    }\n+\n+    /**\n+     * Sets the storage level of the blocks for the DStream created. Defaults to\n+     * [[StorageLevel.MEMORY_AND_DISK_2]] if no custom value is specified.\n+     *\n+     * @param storageLevel [[StorageLevel]] to use for the DStream data blocks\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def storageLevel(storageLevel: StorageLevel): Builder[T] = {\n+      this.storageLevel = storageLevel\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the Kinesis service. This\n+     * is also the default credentials provider used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisDefaultCredentials(): Builder[T] = {\n+      kinesisCredsProvider = DefaultCredentialsProvider\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the Kinesis service. The default AWS\n+     * credentials provider chain is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey)\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(stsRoleArn, stsSessionName)\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the DynamoDB service. The\n+     * Kinesis credentials provider is used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBDefaultCredentials(): Builder[T] = {\n+      dynamoDBCredsProvider = Option(DefaultCredentialsProvider)\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the DynamoDB service. The Kinesis\n+     * credentials provider is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey))\n+      this\n+    }\n+\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(stsRoleArn, stsSessionName))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the CloudWatch service. The\n+     * Kinesis credentials provider is used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchDefaultCredentials(): Builder[T] = {\n+      cloudWatchCredsProvider = Option(DefaultCredentialsProvider)\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the CloudWatch service. The Kinesis\n+     * credentials provider is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(stsRoleArn, stsSessionName))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Create a new instance of [[KinesisInputDStream]] with configured parameters.\n+     *\n+     * @return Instance of [[KinesisInputDStream]] constructed with configured parameters\n+     */\n+    def build(): KinesisInputDStream[T] = new KinesisInputDStream("
  }, {
    "author": {
      "login": "budde"
    },
    "body": "I'll expand the builder to recognize required params and remove them as ctor args",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-14T00:48:11Z",
    "diffHunk": "@@ -0,0 +1,559 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.reflect.ClassTag\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import com.amazonaws.services.kinesis.model.Record\n+\n+import org.apache.spark.annotation.InterfaceStability\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+\n+@InterfaceStability.Stable\n+object KinesisDStream {\n+  /**\n+   * Builder for [[KinesisInputDStream]] instances.\n+   *\n+   * @param ssc StreamingContext to be used for creating DStreams\n+   * @param streamName Name of Kinesis stream\n+   * @param messageHandler Function for extracting DStream data type from KCL Record\n+   *\n+   * @since 2.2.0\n+   */\n+  @InterfaceStability.Stable\n+  class Builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T) {\n+    private var endpointUrl = DEFAULT_KINESIS_ENDPOINT_URL\n+    private var regionName = DEFAULT_KINESIS_REGION_NAME\n+    private var initialPositionInStream = DEFAULT_INITIAL_POSITION_IN_STREAM\n+    private var checkpointAppName = ssc.sparkContext.appName\n+    private var checkpointInterval = ssc.graph.batchDuration\n+    private var storageLevel = DEFAULT_STORAGE_LEVEL\n+    private var kinesisCredsProvider: SerializableCredentialsProvider = DefaultCredentialsProvider\n+    private var dynamoDBCredsProvider: Option[SerializableCredentialsProvider] = None\n+    private var cloudWatchCredsProvider: Option[SerializableCredentialsProvider] = None\n+\n+    /**\n+     * Sets the AWS Kinesis endpoint URL. Defaults to \"https://kinesis.us-east-1.amazonaws.com\" if\n+     * no custom value is specified\n+     *\n+     * @param url Kinesis endpoint URL to use\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def endpointUrl(url: String): Builder[T] = {\n+      endpointUrl = url\n+      this\n+    }\n+\n+    /**\n+     * Sets the AWS region to construct clients for. Defaults to \"us-east-1\" if no custom value\n+     * is specified.\n+     *\n+     * @param regionName Name of AWS region to use (e.g. \"us-west-2\")\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def regionName(regionName: String): Builder[T] = {\n+      this.regionName = regionName\n+      this\n+    }\n+\n+    /**\n+     * Sets the initial position data is read from in the Kinesis stream. Defaults to\n+     * InitialPositionInStream.LATEST if no custom value is specified.\n+     *\n+     * @param initialPosition InitialPositionInStream value specifying where Spark Streaming\n+     *                        will start reading records in the Kinesis stream from\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def initialPositionInStream(initialPosition: InitialPositionInStream): Builder[T] = {\n+      initialPositionInStream = initialPosition\n+      this\n+    }\n+\n+    /**\n+     * Sets the KCL application name to use when checkpointing state to DynamoDB. Defaults to the\n+     * Spark app name if no custom value is specified.\n+     *\n+     * @param appName Value to use for the KCL app name (used when creating the DynamoDB checkpoint\n+     *                table and when writing metrics to CloudWatch)\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointAppName(appName: String): Builder[T] = {\n+      checkpointAppName = appName\n+      this\n+    }\n+\n+    /**\n+     * Sets how often the KCL application state is checkpointed to DynamoDB. Defaults to the Spark\n+     * Streaming batch interval if no custom value is specified.\n+     *\n+     * @param interval [[Duration]] specifying how often the KCL state should be checkpointed to\n+     *                 DynamoDB.\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointInterval(interval: Duration): Builder[T] = {\n+      checkpointInterval = interval\n+      this\n+    }\n+\n+    /**\n+     * Sets the storage level of the blocks for the DStream created. Defaults to\n+     * [[StorageLevel.MEMORY_AND_DISK_2]] if no custom value is specified.\n+     *\n+     * @param storageLevel [[StorageLevel]] to use for the DStream data blocks\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def storageLevel(storageLevel: StorageLevel): Builder[T] = {\n+      this.storageLevel = storageLevel\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the Kinesis service. This\n+     * is also the default credentials provider used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisDefaultCredentials(): Builder[T] = {\n+      kinesisCredsProvider = DefaultCredentialsProvider\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the Kinesis service. The default AWS\n+     * credentials provider chain is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey)\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(stsRoleArn, stsSessionName)\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the DynamoDB service. The\n+     * Kinesis credentials provider is used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBDefaultCredentials(): Builder[T] = {\n+      dynamoDBCredsProvider = Option(DefaultCredentialsProvider)\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the DynamoDB service. The Kinesis\n+     * credentials provider is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey))\n+      this\n+    }\n+\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(stsRoleArn, stsSessionName))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the CloudWatch service. The\n+     * Kinesis credentials provider is used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchDefaultCredentials(): Builder[T] = {\n+      cloudWatchCredsProvider = Option(DefaultCredentialsProvider)\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the CloudWatch service. The Kinesis\n+     * credentials provider is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(stsRoleArn, stsSessionName))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Create a new instance of [[KinesisInputDStream]] with configured parameters.\n+     *\n+     * @return Instance of [[KinesisInputDStream]] constructed with configured parameters\n+     */\n+    def build(): KinesisInputDStream[T] = new KinesisInputDStream("
  }],
  "prId": 17250
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "Have the builder take `setStreamingContext`, one which takes `StreamingContext` and the other `JavaStreamingContext`",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-13T23:02:01Z",
    "diffHunk": "@@ -0,0 +1,559 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.reflect.ClassTag\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import com.amazonaws.services.kinesis.model.Record\n+\n+import org.apache.spark.annotation.InterfaceStability\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+\n+@InterfaceStability.Stable\n+object KinesisDStream {\n+  /**\n+   * Builder for [[KinesisInputDStream]] instances.\n+   *\n+   * @param ssc StreamingContext to be used for creating DStreams\n+   * @param streamName Name of Kinesis stream\n+   * @param messageHandler Function for extracting DStream data type from KCL Record\n+   *\n+   * @since 2.2.0\n+   */\n+  @InterfaceStability.Stable\n+  class Builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T) {\n+    private var endpointUrl = DEFAULT_KINESIS_ENDPOINT_URL\n+    private var regionName = DEFAULT_KINESIS_REGION_NAME\n+    private var initialPositionInStream = DEFAULT_INITIAL_POSITION_IN_STREAM\n+    private var checkpointAppName = ssc.sparkContext.appName\n+    private var checkpointInterval = ssc.graph.batchDuration\n+    private var storageLevel = DEFAULT_STORAGE_LEVEL\n+    private var kinesisCredsProvider: SerializableCredentialsProvider = DefaultCredentialsProvider\n+    private var dynamoDBCredsProvider: Option[SerializableCredentialsProvider] = None\n+    private var cloudWatchCredsProvider: Option[SerializableCredentialsProvider] = None\n+\n+    /**\n+     * Sets the AWS Kinesis endpoint URL. Defaults to \"https://kinesis.us-east-1.amazonaws.com\" if\n+     * no custom value is specified\n+     *\n+     * @param url Kinesis endpoint URL to use\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def endpointUrl(url: String): Builder[T] = {\n+      endpointUrl = url\n+      this\n+    }\n+\n+    /**\n+     * Sets the AWS region to construct clients for. Defaults to \"us-east-1\" if no custom value\n+     * is specified.\n+     *\n+     * @param regionName Name of AWS region to use (e.g. \"us-west-2\")\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def regionName(regionName: String): Builder[T] = {\n+      this.regionName = regionName\n+      this\n+    }\n+\n+    /**\n+     * Sets the initial position data is read from in the Kinesis stream. Defaults to\n+     * InitialPositionInStream.LATEST if no custom value is specified.\n+     *\n+     * @param initialPosition InitialPositionInStream value specifying where Spark Streaming\n+     *                        will start reading records in the Kinesis stream from\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def initialPositionInStream(initialPosition: InitialPositionInStream): Builder[T] = {\n+      initialPositionInStream = initialPosition\n+      this\n+    }\n+\n+    /**\n+     * Sets the KCL application name to use when checkpointing state to DynamoDB. Defaults to the\n+     * Spark app name if no custom value is specified.\n+     *\n+     * @param appName Value to use for the KCL app name (used when creating the DynamoDB checkpoint\n+     *                table and when writing metrics to CloudWatch)\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointAppName(appName: String): Builder[T] = {\n+      checkpointAppName = appName\n+      this\n+    }\n+\n+    /**\n+     * Sets how often the KCL application state is checkpointed to DynamoDB. Defaults to the Spark\n+     * Streaming batch interval if no custom value is specified.\n+     *\n+     * @param interval [[Duration]] specifying how often the KCL state should be checkpointed to\n+     *                 DynamoDB.\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointInterval(interval: Duration): Builder[T] = {\n+      checkpointInterval = interval\n+      this\n+    }\n+\n+    /**\n+     * Sets the storage level of the blocks for the DStream created. Defaults to\n+     * [[StorageLevel.MEMORY_AND_DISK_2]] if no custom value is specified.\n+     *\n+     * @param storageLevel [[StorageLevel]] to use for the DStream data blocks\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def storageLevel(storageLevel: StorageLevel): Builder[T] = {\n+      this.storageLevel = storageLevel\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the Kinesis service. This\n+     * is also the default credentials provider used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisDefaultCredentials(): Builder[T] = {\n+      kinesisCredsProvider = DefaultCredentialsProvider\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the Kinesis service. The default AWS\n+     * credentials provider chain is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey)\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(stsRoleArn, stsSessionName)\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the DynamoDB service. The\n+     * Kinesis credentials provider is used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBDefaultCredentials(): Builder[T] = {\n+      dynamoDBCredsProvider = Option(DefaultCredentialsProvider)\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the DynamoDB service. The Kinesis\n+     * credentials provider is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey))\n+      this\n+    }\n+\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(stsRoleArn, stsSessionName))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the CloudWatch service. The\n+     * Kinesis credentials provider is used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchDefaultCredentials(): Builder[T] = {\n+      cloudWatchCredsProvider = Option(DefaultCredentialsProvider)\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the CloudWatch service. The Kinesis\n+     * credentials provider is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(stsRoleArn, stsSessionName))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Create a new instance of [[KinesisInputDStream]] with configured parameters.\n+     *\n+     * @return Instance of [[KinesisInputDStream]] constructed with configured parameters\n+     */\n+    def build(): KinesisInputDStream[T] = new KinesisInputDStream(\n+      ssc,\n+      streamName,\n+      endpointUrl,\n+      regionName,\n+      initialPositionInStream,\n+      checkpointAppName,\n+      checkpointInterval,\n+      storageLevel,\n+      messageHandler,\n+      kinesisCredsProvider,\n+      dynamoDBCredsProvider,\n+      cloudWatchCredsProvider)\n+\n+    private def buildSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: Option[String] = None,\n+        awsKeypair: Option[(String, String)] = None): STSCredentialsProvider = {\n+      val baseCredentials = STSCredentialsProvider(\n+        stsRoleArn = stsRoleArn,\n+        stsSessionName = stsSessionName,\n+        stsExternalId = stsExternalId)\n+      awsKeypair match {\n+        case Some((accessKey, secretKey)) =>\n+          baseCredentials.copy(\n+            longLivedCredsProvider = BasicCredentialsProvider(accessKey, secretKey))\n+        case None =>\n+          baseCredentials\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Creates a [[KinesisDStream.Builder]] for constructing [[KinesisInputDStream]] instances\n+   * of type [[T]] using the provided message handler.\n+   *\n+   * @since 2.2.0\n+   *\n+   * @param ssc StreamingContext to construct DStream with\n+   * @param streamName Name of Kinesis stream to read from\n+   * @param messageHandler Handler used to extract type [[T]] from a Kinesis [[Record]]\n+   * @return [[KinesisDStream.Builder]] instance\n+   */\n+  def builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T): Builder[T] =\n+    new Builder(ssc, streamName, messageHandler)\n+\n+  /**\n+   * Creates a [[KinesisDStream.Builder]] for constructing [[KinesisInputDStream]] instances\n+   * of type [[Array[Byte]].\n+   *\n+   * @since 2.2.0\n+   *\n+   * @param ssc StreamingContext to construct DStream with\n+   * @param streamName Name of Kinesis stream to read from\n+   * @return [[KinesisDStream.Builder]] instance\n+   */\n+  def builder(ssc: StreamingContext, streamName: String): Builder[Array[Byte]]\n+    = builder(ssc, streamName, KinesisUtils.defaultMessageHandler(_))\n+\n+  /**\n+   * Creates a [[KinesisDStream.Builder]] for constructing [[KinesisInputDStream]] instances\n+   * of type [[T]] using the provided message handler.\n+   *\n+   * @since 2.2.0\n+   *\n+   * @param jssc JavaStreamingContext to construct DStream with\n+   * @param streamName Name of Kinesis stream to read from\n+   * @param messageHandler Handler used to extract type [[T]] from a Kinesis [[Record]]\n+   * @return [[KinesisDStream.Builder]] instance\n+   */\n+  def builder[T: ClassTag](\n+      jssc: JavaStreamingContext,"
  }, {
    "author": {
      "login": "budde"
    },
    "body": "Will be made required builder arguments",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-14T00:48:09Z",
    "diffHunk": "@@ -0,0 +1,559 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.reflect.ClassTag\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import com.amazonaws.services.kinesis.model.Record\n+\n+import org.apache.spark.annotation.InterfaceStability\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+\n+@InterfaceStability.Stable\n+object KinesisDStream {\n+  /**\n+   * Builder for [[KinesisInputDStream]] instances.\n+   *\n+   * @param ssc StreamingContext to be used for creating DStreams\n+   * @param streamName Name of Kinesis stream\n+   * @param messageHandler Function for extracting DStream data type from KCL Record\n+   *\n+   * @since 2.2.0\n+   */\n+  @InterfaceStability.Stable\n+  class Builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T) {\n+    private var endpointUrl = DEFAULT_KINESIS_ENDPOINT_URL\n+    private var regionName = DEFAULT_KINESIS_REGION_NAME\n+    private var initialPositionInStream = DEFAULT_INITIAL_POSITION_IN_STREAM\n+    private var checkpointAppName = ssc.sparkContext.appName\n+    private var checkpointInterval = ssc.graph.batchDuration\n+    private var storageLevel = DEFAULT_STORAGE_LEVEL\n+    private var kinesisCredsProvider: SerializableCredentialsProvider = DefaultCredentialsProvider\n+    private var dynamoDBCredsProvider: Option[SerializableCredentialsProvider] = None\n+    private var cloudWatchCredsProvider: Option[SerializableCredentialsProvider] = None\n+\n+    /**\n+     * Sets the AWS Kinesis endpoint URL. Defaults to \"https://kinesis.us-east-1.amazonaws.com\" if\n+     * no custom value is specified\n+     *\n+     * @param url Kinesis endpoint URL to use\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def endpointUrl(url: String): Builder[T] = {\n+      endpointUrl = url\n+      this\n+    }\n+\n+    /**\n+     * Sets the AWS region to construct clients for. Defaults to \"us-east-1\" if no custom value\n+     * is specified.\n+     *\n+     * @param regionName Name of AWS region to use (e.g. \"us-west-2\")\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def regionName(regionName: String): Builder[T] = {\n+      this.regionName = regionName\n+      this\n+    }\n+\n+    /**\n+     * Sets the initial position data is read from in the Kinesis stream. Defaults to\n+     * InitialPositionInStream.LATEST if no custom value is specified.\n+     *\n+     * @param initialPosition InitialPositionInStream value specifying where Spark Streaming\n+     *                        will start reading records in the Kinesis stream from\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def initialPositionInStream(initialPosition: InitialPositionInStream): Builder[T] = {\n+      initialPositionInStream = initialPosition\n+      this\n+    }\n+\n+    /**\n+     * Sets the KCL application name to use when checkpointing state to DynamoDB. Defaults to the\n+     * Spark app name if no custom value is specified.\n+     *\n+     * @param appName Value to use for the KCL app name (used when creating the DynamoDB checkpoint\n+     *                table and when writing metrics to CloudWatch)\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointAppName(appName: String): Builder[T] = {\n+      checkpointAppName = appName\n+      this\n+    }\n+\n+    /**\n+     * Sets how often the KCL application state is checkpointed to DynamoDB. Defaults to the Spark\n+     * Streaming batch interval if no custom value is specified.\n+     *\n+     * @param interval [[Duration]] specifying how often the KCL state should be checkpointed to\n+     *                 DynamoDB.\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointInterval(interval: Duration): Builder[T] = {\n+      checkpointInterval = interval\n+      this\n+    }\n+\n+    /**\n+     * Sets the storage level of the blocks for the DStream created. Defaults to\n+     * [[StorageLevel.MEMORY_AND_DISK_2]] if no custom value is specified.\n+     *\n+     * @param storageLevel [[StorageLevel]] to use for the DStream data blocks\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def storageLevel(storageLevel: StorageLevel): Builder[T] = {\n+      this.storageLevel = storageLevel\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the Kinesis service. This\n+     * is also the default credentials provider used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisDefaultCredentials(): Builder[T] = {\n+      kinesisCredsProvider = DefaultCredentialsProvider\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the Kinesis service. The default AWS\n+     * credentials provider chain is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey)\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(stsRoleArn, stsSessionName)\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the DynamoDB service. The\n+     * Kinesis credentials provider is used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBDefaultCredentials(): Builder[T] = {\n+      dynamoDBCredsProvider = Option(DefaultCredentialsProvider)\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the DynamoDB service. The Kinesis\n+     * credentials provider is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey))\n+      this\n+    }\n+\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(stsRoleArn, stsSessionName))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the CloudWatch service. The\n+     * Kinesis credentials provider is used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchDefaultCredentials(): Builder[T] = {\n+      cloudWatchCredsProvider = Option(DefaultCredentialsProvider)\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the CloudWatch service. The Kinesis\n+     * credentials provider is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(stsRoleArn, stsSessionName))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Create a new instance of [[KinesisInputDStream]] with configured parameters.\n+     *\n+     * @return Instance of [[KinesisInputDStream]] constructed with configured parameters\n+     */\n+    def build(): KinesisInputDStream[T] = new KinesisInputDStream(\n+      ssc,\n+      streamName,\n+      endpointUrl,\n+      regionName,\n+      initialPositionInStream,\n+      checkpointAppName,\n+      checkpointInterval,\n+      storageLevel,\n+      messageHandler,\n+      kinesisCredsProvider,\n+      dynamoDBCredsProvider,\n+      cloudWatchCredsProvider)\n+\n+    private def buildSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: Option[String] = None,\n+        awsKeypair: Option[(String, String)] = None): STSCredentialsProvider = {\n+      val baseCredentials = STSCredentialsProvider(\n+        stsRoleArn = stsRoleArn,\n+        stsSessionName = stsSessionName,\n+        stsExternalId = stsExternalId)\n+      awsKeypair match {\n+        case Some((accessKey, secretKey)) =>\n+          baseCredentials.copy(\n+            longLivedCredsProvider = BasicCredentialsProvider(accessKey, secretKey))\n+        case None =>\n+          baseCredentials\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Creates a [[KinesisDStream.Builder]] for constructing [[KinesisInputDStream]] instances\n+   * of type [[T]] using the provided message handler.\n+   *\n+   * @since 2.2.0\n+   *\n+   * @param ssc StreamingContext to construct DStream with\n+   * @param streamName Name of Kinesis stream to read from\n+   * @param messageHandler Handler used to extract type [[T]] from a Kinesis [[Record]]\n+   * @return [[KinesisDStream.Builder]] instance\n+   */\n+  def builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T): Builder[T] =\n+    new Builder(ssc, streamName, messageHandler)\n+\n+  /**\n+   * Creates a [[KinesisDStream.Builder]] for constructing [[KinesisInputDStream]] instances\n+   * of type [[Array[Byte]].\n+   *\n+   * @since 2.2.0\n+   *\n+   * @param ssc StreamingContext to construct DStream with\n+   * @param streamName Name of Kinesis stream to read from\n+   * @return [[KinesisDStream.Builder]] instance\n+   */\n+  def builder(ssc: StreamingContext, streamName: String): Builder[Array[Byte]]\n+    = builder(ssc, streamName, KinesisUtils.defaultMessageHandler(_))\n+\n+  /**\n+   * Creates a [[KinesisDStream.Builder]] for constructing [[KinesisInputDStream]] instances\n+   * of type [[T]] using the provided message handler.\n+   *\n+   * @since 2.2.0\n+   *\n+   * @param jssc JavaStreamingContext to construct DStream with\n+   * @param streamName Name of Kinesis stream to read from\n+   * @param messageHandler Handler used to extract type [[T]] from a Kinesis [[Record]]\n+   * @return [[KinesisDStream.Builder]] instance\n+   */\n+  def builder[T: ClassTag](\n+      jssc: JavaStreamingContext,"
  }],
  "prId": 17250
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "let's also have a `setMessageHandler` function as well",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-13T23:02:44Z",
    "diffHunk": "@@ -0,0 +1,559 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.reflect.ClassTag\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import com.amazonaws.services.kinesis.model.Record\n+\n+import org.apache.spark.annotation.InterfaceStability\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+\n+@InterfaceStability.Stable\n+object KinesisDStream {\n+  /**\n+   * Builder for [[KinesisInputDStream]] instances.\n+   *\n+   * @param ssc StreamingContext to be used for creating DStreams\n+   * @param streamName Name of Kinesis stream\n+   * @param messageHandler Function for extracting DStream data type from KCL Record\n+   *\n+   * @since 2.2.0\n+   */\n+  @InterfaceStability.Stable\n+  class Builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T) {\n+    private var endpointUrl = DEFAULT_KINESIS_ENDPOINT_URL\n+    private var regionName = DEFAULT_KINESIS_REGION_NAME\n+    private var initialPositionInStream = DEFAULT_INITIAL_POSITION_IN_STREAM\n+    private var checkpointAppName = ssc.sparkContext.appName\n+    private var checkpointInterval = ssc.graph.batchDuration\n+    private var storageLevel = DEFAULT_STORAGE_LEVEL\n+    private var kinesisCredsProvider: SerializableCredentialsProvider = DefaultCredentialsProvider\n+    private var dynamoDBCredsProvider: Option[SerializableCredentialsProvider] = None\n+    private var cloudWatchCredsProvider: Option[SerializableCredentialsProvider] = None\n+\n+    /**\n+     * Sets the AWS Kinesis endpoint URL. Defaults to \"https://kinesis.us-east-1.amazonaws.com\" if\n+     * no custom value is specified\n+     *\n+     * @param url Kinesis endpoint URL to use\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def endpointUrl(url: String): Builder[T] = {\n+      endpointUrl = url\n+      this\n+    }\n+\n+    /**\n+     * Sets the AWS region to construct clients for. Defaults to \"us-east-1\" if no custom value\n+     * is specified.\n+     *\n+     * @param regionName Name of AWS region to use (e.g. \"us-west-2\")\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def regionName(regionName: String): Builder[T] = {\n+      this.regionName = regionName\n+      this\n+    }\n+\n+    /**\n+     * Sets the initial position data is read from in the Kinesis stream. Defaults to\n+     * InitialPositionInStream.LATEST if no custom value is specified.\n+     *\n+     * @param initialPosition InitialPositionInStream value specifying where Spark Streaming\n+     *                        will start reading records in the Kinesis stream from\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def initialPositionInStream(initialPosition: InitialPositionInStream): Builder[T] = {\n+      initialPositionInStream = initialPosition\n+      this\n+    }\n+\n+    /**\n+     * Sets the KCL application name to use when checkpointing state to DynamoDB. Defaults to the\n+     * Spark app name if no custom value is specified.\n+     *\n+     * @param appName Value to use for the KCL app name (used when creating the DynamoDB checkpoint\n+     *                table and when writing metrics to CloudWatch)\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointAppName(appName: String): Builder[T] = {\n+      checkpointAppName = appName\n+      this\n+    }\n+\n+    /**\n+     * Sets how often the KCL application state is checkpointed to DynamoDB. Defaults to the Spark\n+     * Streaming batch interval if no custom value is specified.\n+     *\n+     * @param interval [[Duration]] specifying how often the KCL state should be checkpointed to\n+     *                 DynamoDB.\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointInterval(interval: Duration): Builder[T] = {\n+      checkpointInterval = interval\n+      this\n+    }\n+\n+    /**\n+     * Sets the storage level of the blocks for the DStream created. Defaults to\n+     * [[StorageLevel.MEMORY_AND_DISK_2]] if no custom value is specified.\n+     *\n+     * @param storageLevel [[StorageLevel]] to use for the DStream data blocks\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def storageLevel(storageLevel: StorageLevel): Builder[T] = {\n+      this.storageLevel = storageLevel\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the Kinesis service. This\n+     * is also the default credentials provider used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisDefaultCredentials(): Builder[T] = {\n+      kinesisCredsProvider = DefaultCredentialsProvider\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the Kinesis service. The default AWS\n+     * credentials provider chain is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey)\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(stsRoleArn, stsSessionName)\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the DynamoDB service. The\n+     * Kinesis credentials provider is used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBDefaultCredentials(): Builder[T] = {\n+      dynamoDBCredsProvider = Option(DefaultCredentialsProvider)\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the DynamoDB service. The Kinesis\n+     * credentials provider is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey))\n+      this\n+    }\n+\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(stsRoleArn, stsSessionName))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the CloudWatch service. The\n+     * Kinesis credentials provider is used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchDefaultCredentials(): Builder[T] = {\n+      cloudWatchCredsProvider = Option(DefaultCredentialsProvider)\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the CloudWatch service. The Kinesis\n+     * credentials provider is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(stsRoleArn, stsSessionName))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Create a new instance of [[KinesisInputDStream]] with configured parameters.\n+     *\n+     * @return Instance of [[KinesisInputDStream]] constructed with configured parameters\n+     */\n+    def build(): KinesisInputDStream[T] = new KinesisInputDStream(\n+      ssc,\n+      streamName,\n+      endpointUrl,\n+      regionName,\n+      initialPositionInStream,\n+      checkpointAppName,\n+      checkpointInterval,\n+      storageLevel,\n+      messageHandler,\n+      kinesisCredsProvider,\n+      dynamoDBCredsProvider,\n+      cloudWatchCredsProvider)\n+\n+    private def buildSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: Option[String] = None,\n+        awsKeypair: Option[(String, String)] = None): STSCredentialsProvider = {\n+      val baseCredentials = STSCredentialsProvider(\n+        stsRoleArn = stsRoleArn,\n+        stsSessionName = stsSessionName,\n+        stsExternalId = stsExternalId)\n+      awsKeypair match {\n+        case Some((accessKey, secretKey)) =>\n+          baseCredentials.copy(\n+            longLivedCredsProvider = BasicCredentialsProvider(accessKey, secretKey))\n+        case None =>\n+          baseCredentials\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Creates a [[KinesisDStream.Builder]] for constructing [[KinesisInputDStream]] instances\n+   * of type [[T]] using the provided message handler.\n+   *\n+   * @since 2.2.0\n+   *\n+   * @param ssc StreamingContext to construct DStream with\n+   * @param streamName Name of Kinesis stream to read from\n+   * @param messageHandler Handler used to extract type [[T]] from a Kinesis [[Record]]\n+   * @return [[KinesisDStream.Builder]] instance\n+   */\n+  def builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T): Builder[T] =\n+    new Builder(ssc, streamName, messageHandler)\n+\n+  /**\n+   * Creates a [[KinesisDStream.Builder]] for constructing [[KinesisInputDStream]] instances\n+   * of type [[Array[Byte]].\n+   *\n+   * @since 2.2.0\n+   *\n+   * @param ssc StreamingContext to construct DStream with\n+   * @param streamName Name of Kinesis stream to read from\n+   * @return [[KinesisDStream.Builder]] instance\n+   */\n+  def builder(ssc: StreamingContext, streamName: String): Builder[Array[Byte]]\n+    = builder(ssc, streamName, KinesisUtils.defaultMessageHandler(_))\n+\n+  /**\n+   * Creates a [[KinesisDStream.Builder]] for constructing [[KinesisInputDStream]] instances\n+   * of type [[T]] using the provided message handler.\n+   *\n+   * @since 2.2.0\n+   *\n+   * @param jssc JavaStreamingContext to construct DStream with\n+   * @param streamName Name of Kinesis stream to read from\n+   * @param messageHandler Handler used to extract type [[T]] from a Kinesis [[Record]]\n+   * @return [[KinesisDStream.Builder]] instance\n+   */\n+  def builder[T: ClassTag](\n+      jssc: JavaStreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T): Builder[T] = builder(jssc.ssc, streamName, messageHandler)"
  }, {
    "author": {
      "login": "budde"
    },
    "body": "Will do",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-14T00:48:06Z",
    "diffHunk": "@@ -0,0 +1,559 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.reflect.ClassTag\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import com.amazonaws.services.kinesis.model.Record\n+\n+import org.apache.spark.annotation.InterfaceStability\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+\n+@InterfaceStability.Stable\n+object KinesisDStream {\n+  /**\n+   * Builder for [[KinesisInputDStream]] instances.\n+   *\n+   * @param ssc StreamingContext to be used for creating DStreams\n+   * @param streamName Name of Kinesis stream\n+   * @param messageHandler Function for extracting DStream data type from KCL Record\n+   *\n+   * @since 2.2.0\n+   */\n+  @InterfaceStability.Stable\n+  class Builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T) {\n+    private var endpointUrl = DEFAULT_KINESIS_ENDPOINT_URL\n+    private var regionName = DEFAULT_KINESIS_REGION_NAME\n+    private var initialPositionInStream = DEFAULT_INITIAL_POSITION_IN_STREAM\n+    private var checkpointAppName = ssc.sparkContext.appName\n+    private var checkpointInterval = ssc.graph.batchDuration\n+    private var storageLevel = DEFAULT_STORAGE_LEVEL\n+    private var kinesisCredsProvider: SerializableCredentialsProvider = DefaultCredentialsProvider\n+    private var dynamoDBCredsProvider: Option[SerializableCredentialsProvider] = None\n+    private var cloudWatchCredsProvider: Option[SerializableCredentialsProvider] = None\n+\n+    /**\n+     * Sets the AWS Kinesis endpoint URL. Defaults to \"https://kinesis.us-east-1.amazonaws.com\" if\n+     * no custom value is specified\n+     *\n+     * @param url Kinesis endpoint URL to use\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def endpointUrl(url: String): Builder[T] = {\n+      endpointUrl = url\n+      this\n+    }\n+\n+    /**\n+     * Sets the AWS region to construct clients for. Defaults to \"us-east-1\" if no custom value\n+     * is specified.\n+     *\n+     * @param regionName Name of AWS region to use (e.g. \"us-west-2\")\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def regionName(regionName: String): Builder[T] = {\n+      this.regionName = regionName\n+      this\n+    }\n+\n+    /**\n+     * Sets the initial position data is read from in the Kinesis stream. Defaults to\n+     * InitialPositionInStream.LATEST if no custom value is specified.\n+     *\n+     * @param initialPosition InitialPositionInStream value specifying where Spark Streaming\n+     *                        will start reading records in the Kinesis stream from\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def initialPositionInStream(initialPosition: InitialPositionInStream): Builder[T] = {\n+      initialPositionInStream = initialPosition\n+      this\n+    }\n+\n+    /**\n+     * Sets the KCL application name to use when checkpointing state to DynamoDB. Defaults to the\n+     * Spark app name if no custom value is specified.\n+     *\n+     * @param appName Value to use for the KCL app name (used when creating the DynamoDB checkpoint\n+     *                table and when writing metrics to CloudWatch)\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointAppName(appName: String): Builder[T] = {\n+      checkpointAppName = appName\n+      this\n+    }\n+\n+    /**\n+     * Sets how often the KCL application state is checkpointed to DynamoDB. Defaults to the Spark\n+     * Streaming batch interval if no custom value is specified.\n+     *\n+     * @param interval [[Duration]] specifying how often the KCL state should be checkpointed to\n+     *                 DynamoDB.\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointInterval(interval: Duration): Builder[T] = {\n+      checkpointInterval = interval\n+      this\n+    }\n+\n+    /**\n+     * Sets the storage level of the blocks for the DStream created. Defaults to\n+     * [[StorageLevel.MEMORY_AND_DISK_2]] if no custom value is specified.\n+     *\n+     * @param storageLevel [[StorageLevel]] to use for the DStream data blocks\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def storageLevel(storageLevel: StorageLevel): Builder[T] = {\n+      this.storageLevel = storageLevel\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the Kinesis service. This\n+     * is also the default credentials provider used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisDefaultCredentials(): Builder[T] = {\n+      kinesisCredsProvider = DefaultCredentialsProvider\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the Kinesis service. The default AWS\n+     * credentials provider chain is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey)\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(stsRoleArn, stsSessionName)\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the DynamoDB service. The\n+     * Kinesis credentials provider is used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBDefaultCredentials(): Builder[T] = {\n+      dynamoDBCredsProvider = Option(DefaultCredentialsProvider)\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the DynamoDB service. The Kinesis\n+     * credentials provider is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey))\n+      this\n+    }\n+\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(stsRoleArn, stsSessionName))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the CloudWatch service. The\n+     * Kinesis credentials provider is used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchDefaultCredentials(): Builder[T] = {\n+      cloudWatchCredsProvider = Option(DefaultCredentialsProvider)\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the CloudWatch service. The Kinesis\n+     * credentials provider is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(stsRoleArn, stsSessionName))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Create a new instance of [[KinesisInputDStream]] with configured parameters.\n+     *\n+     * @return Instance of [[KinesisInputDStream]] constructed with configured parameters\n+     */\n+    def build(): KinesisInputDStream[T] = new KinesisInputDStream(\n+      ssc,\n+      streamName,\n+      endpointUrl,\n+      regionName,\n+      initialPositionInStream,\n+      checkpointAppName,\n+      checkpointInterval,\n+      storageLevel,\n+      messageHandler,\n+      kinesisCredsProvider,\n+      dynamoDBCredsProvider,\n+      cloudWatchCredsProvider)\n+\n+    private def buildSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: Option[String] = None,\n+        awsKeypair: Option[(String, String)] = None): STSCredentialsProvider = {\n+      val baseCredentials = STSCredentialsProvider(\n+        stsRoleArn = stsRoleArn,\n+        stsSessionName = stsSessionName,\n+        stsExternalId = stsExternalId)\n+      awsKeypair match {\n+        case Some((accessKey, secretKey)) =>\n+          baseCredentials.copy(\n+            longLivedCredsProvider = BasicCredentialsProvider(accessKey, secretKey))\n+        case None =>\n+          baseCredentials\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Creates a [[KinesisDStream.Builder]] for constructing [[KinesisInputDStream]] instances\n+   * of type [[T]] using the provided message handler.\n+   *\n+   * @since 2.2.0\n+   *\n+   * @param ssc StreamingContext to construct DStream with\n+   * @param streamName Name of Kinesis stream to read from\n+   * @param messageHandler Handler used to extract type [[T]] from a Kinesis [[Record]]\n+   * @return [[KinesisDStream.Builder]] instance\n+   */\n+  def builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T): Builder[T] =\n+    new Builder(ssc, streamName, messageHandler)\n+\n+  /**\n+   * Creates a [[KinesisDStream.Builder]] for constructing [[KinesisInputDStream]] instances\n+   * of type [[Array[Byte]].\n+   *\n+   * @since 2.2.0\n+   *\n+   * @param ssc StreamingContext to construct DStream with\n+   * @param streamName Name of Kinesis stream to read from\n+   * @return [[KinesisDStream.Builder]] instance\n+   */\n+  def builder(ssc: StreamingContext, streamName: String): Builder[Array[Byte]]\n+    = builder(ssc, streamName, KinesisUtils.defaultMessageHandler(_))\n+\n+  /**\n+   * Creates a [[KinesisDStream.Builder]] for constructing [[KinesisInputDStream]] instances\n+   * of type [[T]] using the provided message handler.\n+   *\n+   * @since 2.2.0\n+   *\n+   * @param jssc JavaStreamingContext to construct DStream with\n+   * @param streamName Name of Kinesis stream to read from\n+   * @param messageHandler Handler used to extract type [[T]] from a Kinesis [[Record]]\n+   * @return [[KinesisDStream.Builder]] instance\n+   */\n+  def builder[T: ClassTag](\n+      jssc: JavaStreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T): Builder[T] = builder(jssc.ssc, streamName, messageHandler)"
  }],
  "prId": 17250
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "nit: move `=` to line above",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-13T23:17:21Z",
    "diffHunk": "@@ -0,0 +1,559 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.reflect.ClassTag\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import com.amazonaws.services.kinesis.model.Record\n+\n+import org.apache.spark.annotation.InterfaceStability\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+\n+@InterfaceStability.Stable\n+object KinesisDStream {\n+  /**\n+   * Builder for [[KinesisInputDStream]] instances.\n+   *\n+   * @param ssc StreamingContext to be used for creating DStreams\n+   * @param streamName Name of Kinesis stream\n+   * @param messageHandler Function for extracting DStream data type from KCL Record\n+   *\n+   * @since 2.2.0\n+   */\n+  @InterfaceStability.Stable\n+  class Builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T) {\n+    private var endpointUrl = DEFAULT_KINESIS_ENDPOINT_URL\n+    private var regionName = DEFAULT_KINESIS_REGION_NAME\n+    private var initialPositionInStream = DEFAULT_INITIAL_POSITION_IN_STREAM\n+    private var checkpointAppName = ssc.sparkContext.appName\n+    private var checkpointInterval = ssc.graph.batchDuration\n+    private var storageLevel = DEFAULT_STORAGE_LEVEL\n+    private var kinesisCredsProvider: SerializableCredentialsProvider = DefaultCredentialsProvider\n+    private var dynamoDBCredsProvider: Option[SerializableCredentialsProvider] = None\n+    private var cloudWatchCredsProvider: Option[SerializableCredentialsProvider] = None\n+\n+    /**\n+     * Sets the AWS Kinesis endpoint URL. Defaults to \"https://kinesis.us-east-1.amazonaws.com\" if\n+     * no custom value is specified\n+     *\n+     * @param url Kinesis endpoint URL to use\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def endpointUrl(url: String): Builder[T] = {\n+      endpointUrl = url\n+      this\n+    }\n+\n+    /**\n+     * Sets the AWS region to construct clients for. Defaults to \"us-east-1\" if no custom value\n+     * is specified.\n+     *\n+     * @param regionName Name of AWS region to use (e.g. \"us-west-2\")\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def regionName(regionName: String): Builder[T] = {\n+      this.regionName = regionName\n+      this\n+    }\n+\n+    /**\n+     * Sets the initial position data is read from in the Kinesis stream. Defaults to\n+     * InitialPositionInStream.LATEST if no custom value is specified.\n+     *\n+     * @param initialPosition InitialPositionInStream value specifying where Spark Streaming\n+     *                        will start reading records in the Kinesis stream from\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def initialPositionInStream(initialPosition: InitialPositionInStream): Builder[T] = {\n+      initialPositionInStream = initialPosition\n+      this\n+    }\n+\n+    /**\n+     * Sets the KCL application name to use when checkpointing state to DynamoDB. Defaults to the\n+     * Spark app name if no custom value is specified.\n+     *\n+     * @param appName Value to use for the KCL app name (used when creating the DynamoDB checkpoint\n+     *                table and when writing metrics to CloudWatch)\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointAppName(appName: String): Builder[T] = {\n+      checkpointAppName = appName\n+      this\n+    }\n+\n+    /**\n+     * Sets how often the KCL application state is checkpointed to DynamoDB. Defaults to the Spark\n+     * Streaming batch interval if no custom value is specified.\n+     *\n+     * @param interval [[Duration]] specifying how often the KCL state should be checkpointed to\n+     *                 DynamoDB.\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointInterval(interval: Duration): Builder[T] = {\n+      checkpointInterval = interval\n+      this\n+    }\n+\n+    /**\n+     * Sets the storage level of the blocks for the DStream created. Defaults to\n+     * [[StorageLevel.MEMORY_AND_DISK_2]] if no custom value is specified.\n+     *\n+     * @param storageLevel [[StorageLevel]] to use for the DStream data blocks\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def storageLevel(storageLevel: StorageLevel): Builder[T] = {\n+      this.storageLevel = storageLevel\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the Kinesis service. This\n+     * is also the default credentials provider used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisDefaultCredentials(): Builder[T] = {\n+      kinesisCredsProvider = DefaultCredentialsProvider\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the Kinesis service. The default AWS\n+     * credentials provider chain is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey)\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(stsRoleArn, stsSessionName)\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the DynamoDB service. The\n+     * Kinesis credentials provider is used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBDefaultCredentials(): Builder[T] = {\n+      dynamoDBCredsProvider = Option(DefaultCredentialsProvider)\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the DynamoDB service. The Kinesis\n+     * credentials provider is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey))\n+      this\n+    }\n+\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(stsRoleArn, stsSessionName))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the CloudWatch service. The\n+     * Kinesis credentials provider is used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchDefaultCredentials(): Builder[T] = {\n+      cloudWatchCredsProvider = Option(DefaultCredentialsProvider)\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the CloudWatch service. The Kinesis\n+     * credentials provider is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(stsRoleArn, stsSessionName))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Create a new instance of [[KinesisInputDStream]] with configured parameters.\n+     *\n+     * @return Instance of [[KinesisInputDStream]] constructed with configured parameters\n+     */\n+    def build(): KinesisInputDStream[T] = new KinesisInputDStream(\n+      ssc,\n+      streamName,\n+      endpointUrl,\n+      regionName,\n+      initialPositionInStream,\n+      checkpointAppName,\n+      checkpointInterval,\n+      storageLevel,\n+      messageHandler,\n+      kinesisCredsProvider,\n+      dynamoDBCredsProvider,\n+      cloudWatchCredsProvider)\n+\n+    private def buildSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: Option[String] = None,\n+        awsKeypair: Option[(String, String)] = None): STSCredentialsProvider = {\n+      val baseCredentials = STSCredentialsProvider(\n+        stsRoleArn = stsRoleArn,\n+        stsSessionName = stsSessionName,\n+        stsExternalId = stsExternalId)\n+      awsKeypair match {\n+        case Some((accessKey, secretKey)) =>\n+          baseCredentials.copy(\n+            longLivedCredsProvider = BasicCredentialsProvider(accessKey, secretKey))\n+        case None =>\n+          baseCredentials\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Creates a [[KinesisDStream.Builder]] for constructing [[KinesisInputDStream]] instances\n+   * of type [[T]] using the provided message handler.\n+   *\n+   * @since 2.2.0\n+   *\n+   * @param ssc StreamingContext to construct DStream with\n+   * @param streamName Name of Kinesis stream to read from\n+   * @param messageHandler Handler used to extract type [[T]] from a Kinesis [[Record]]\n+   * @return [[KinesisDStream.Builder]] instance\n+   */\n+  def builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T): Builder[T] =\n+    new Builder(ssc, streamName, messageHandler)\n+\n+  /**\n+   * Creates a [[KinesisDStream.Builder]] for constructing [[KinesisInputDStream]] instances\n+   * of type [[Array[Byte]].\n+   *\n+   * @since 2.2.0\n+   *\n+   * @param ssc StreamingContext to construct DStream with\n+   * @param streamName Name of Kinesis stream to read from\n+   * @return [[KinesisDStream.Builder]] instance\n+   */\n+  def builder(ssc: StreamingContext, streamName: String): Builder[Array[Byte]]\n+    = builder(ssc, streamName, KinesisUtils.defaultMessageHandler(_))\n+\n+  /**\n+   * Creates a [[KinesisDStream.Builder]] for constructing [[KinesisInputDStream]] instances\n+   * of type [[T]] using the provided message handler.\n+   *\n+   * @since 2.2.0\n+   *\n+   * @param jssc JavaStreamingContext to construct DStream with\n+   * @param streamName Name of Kinesis stream to read from\n+   * @param messageHandler Handler used to extract type [[T]] from a Kinesis [[Record]]\n+   * @return [[KinesisDStream.Builder]] instance\n+   */\n+  def builder[T: ClassTag](\n+      jssc: JavaStreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T): Builder[T] = builder(jssc.ssc, streamName, messageHandler)\n+\n+  /**\n+   * Creates a [[KinesisDStream.Builder]] for constructing [[KinesisInputDStream]] instances\n+   * of type [[Array[Byte]].\n+   *\n+   * @since 2.2.0\n+   *\n+   * @param jssc JavaStreamingContext to construct DStream with\n+   * @param streamName Name of Kinesis stream to read from\n+   * @return [[KinesisDStream.Builder]] instance\n+   */\n+  def builder(jssc: JavaStreamingContext, streamName: String): Builder[Array[Byte]]\n+    = builder(jssc.ssc, streamName)\n+\n+  private[kinesis] val DEFAULT_KINESIS_ENDPOINT_URL: String\n+    = \"https://kinesis.us-east-1.amazonaws.com\""
  }, {
    "author": {
      "login": "budde"
    },
    "body": "Will do",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-14T00:48:05Z",
    "diffHunk": "@@ -0,0 +1,559 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.reflect.ClassTag\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import com.amazonaws.services.kinesis.model.Record\n+\n+import org.apache.spark.annotation.InterfaceStability\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+\n+@InterfaceStability.Stable\n+object KinesisDStream {\n+  /**\n+   * Builder for [[KinesisInputDStream]] instances.\n+   *\n+   * @param ssc StreamingContext to be used for creating DStreams\n+   * @param streamName Name of Kinesis stream\n+   * @param messageHandler Function for extracting DStream data type from KCL Record\n+   *\n+   * @since 2.2.0\n+   */\n+  @InterfaceStability.Stable\n+  class Builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T) {\n+    private var endpointUrl = DEFAULT_KINESIS_ENDPOINT_URL\n+    private var regionName = DEFAULT_KINESIS_REGION_NAME\n+    private var initialPositionInStream = DEFAULT_INITIAL_POSITION_IN_STREAM\n+    private var checkpointAppName = ssc.sparkContext.appName\n+    private var checkpointInterval = ssc.graph.batchDuration\n+    private var storageLevel = DEFAULT_STORAGE_LEVEL\n+    private var kinesisCredsProvider: SerializableCredentialsProvider = DefaultCredentialsProvider\n+    private var dynamoDBCredsProvider: Option[SerializableCredentialsProvider] = None\n+    private var cloudWatchCredsProvider: Option[SerializableCredentialsProvider] = None\n+\n+    /**\n+     * Sets the AWS Kinesis endpoint URL. Defaults to \"https://kinesis.us-east-1.amazonaws.com\" if\n+     * no custom value is specified\n+     *\n+     * @param url Kinesis endpoint URL to use\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def endpointUrl(url: String): Builder[T] = {\n+      endpointUrl = url\n+      this\n+    }\n+\n+    /**\n+     * Sets the AWS region to construct clients for. Defaults to \"us-east-1\" if no custom value\n+     * is specified.\n+     *\n+     * @param regionName Name of AWS region to use (e.g. \"us-west-2\")\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def regionName(regionName: String): Builder[T] = {\n+      this.regionName = regionName\n+      this\n+    }\n+\n+    /**\n+     * Sets the initial position data is read from in the Kinesis stream. Defaults to\n+     * InitialPositionInStream.LATEST if no custom value is specified.\n+     *\n+     * @param initialPosition InitialPositionInStream value specifying where Spark Streaming\n+     *                        will start reading records in the Kinesis stream from\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def initialPositionInStream(initialPosition: InitialPositionInStream): Builder[T] = {\n+      initialPositionInStream = initialPosition\n+      this\n+    }\n+\n+    /**\n+     * Sets the KCL application name to use when checkpointing state to DynamoDB. Defaults to the\n+     * Spark app name if no custom value is specified.\n+     *\n+     * @param appName Value to use for the KCL app name (used when creating the DynamoDB checkpoint\n+     *                table and when writing metrics to CloudWatch)\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointAppName(appName: String): Builder[T] = {\n+      checkpointAppName = appName\n+      this\n+    }\n+\n+    /**\n+     * Sets how often the KCL application state is checkpointed to DynamoDB. Defaults to the Spark\n+     * Streaming batch interval if no custom value is specified.\n+     *\n+     * @param interval [[Duration]] specifying how often the KCL state should be checkpointed to\n+     *                 DynamoDB.\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointInterval(interval: Duration): Builder[T] = {\n+      checkpointInterval = interval\n+      this\n+    }\n+\n+    /**\n+     * Sets the storage level of the blocks for the DStream created. Defaults to\n+     * [[StorageLevel.MEMORY_AND_DISK_2]] if no custom value is specified.\n+     *\n+     * @param storageLevel [[StorageLevel]] to use for the DStream data blocks\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def storageLevel(storageLevel: StorageLevel): Builder[T] = {\n+      this.storageLevel = storageLevel\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the Kinesis service. This\n+     * is also the default credentials provider used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisDefaultCredentials(): Builder[T] = {\n+      kinesisCredsProvider = DefaultCredentialsProvider\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the Kinesis service. The default AWS\n+     * credentials provider chain is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey)\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(stsRoleArn, stsSessionName)\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the DynamoDB service. The\n+     * Kinesis credentials provider is used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBDefaultCredentials(): Builder[T] = {\n+      dynamoDBCredsProvider = Option(DefaultCredentialsProvider)\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the DynamoDB service. The Kinesis\n+     * credentials provider is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey))\n+      this\n+    }\n+\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(stsRoleArn, stsSessionName))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the DynamoDB service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def dynamoDBSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      dynamoDBCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the CloudWatch service. The\n+     * Kinesis credentials provider is used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchDefaultCredentials(): Builder[T] = {\n+      cloudWatchCredsProvider = Option(DefaultCredentialsProvider)\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the CloudWatch service. The Kinesis\n+     * credentials provider is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(stsRoleArn, stsSessionName))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId)))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the CloudWatch service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def cloudWatchSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      cloudWatchCredsProvider = Option(buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId),\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey)))\n+      this\n+    }\n+\n+    /**\n+     * Create a new instance of [[KinesisInputDStream]] with configured parameters.\n+     *\n+     * @return Instance of [[KinesisInputDStream]] constructed with configured parameters\n+     */\n+    def build(): KinesisInputDStream[T] = new KinesisInputDStream(\n+      ssc,\n+      streamName,\n+      endpointUrl,\n+      regionName,\n+      initialPositionInStream,\n+      checkpointAppName,\n+      checkpointInterval,\n+      storageLevel,\n+      messageHandler,\n+      kinesisCredsProvider,\n+      dynamoDBCredsProvider,\n+      cloudWatchCredsProvider)\n+\n+    private def buildSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: Option[String] = None,\n+        awsKeypair: Option[(String, String)] = None): STSCredentialsProvider = {\n+      val baseCredentials = STSCredentialsProvider(\n+        stsRoleArn = stsRoleArn,\n+        stsSessionName = stsSessionName,\n+        stsExternalId = stsExternalId)\n+      awsKeypair match {\n+        case Some((accessKey, secretKey)) =>\n+          baseCredentials.copy(\n+            longLivedCredsProvider = BasicCredentialsProvider(accessKey, secretKey))\n+        case None =>\n+          baseCredentials\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Creates a [[KinesisDStream.Builder]] for constructing [[KinesisInputDStream]] instances\n+   * of type [[T]] using the provided message handler.\n+   *\n+   * @since 2.2.0\n+   *\n+   * @param ssc StreamingContext to construct DStream with\n+   * @param streamName Name of Kinesis stream to read from\n+   * @param messageHandler Handler used to extract type [[T]] from a Kinesis [[Record]]\n+   * @return [[KinesisDStream.Builder]] instance\n+   */\n+  def builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T): Builder[T] =\n+    new Builder(ssc, streamName, messageHandler)\n+\n+  /**\n+   * Creates a [[KinesisDStream.Builder]] for constructing [[KinesisInputDStream]] instances\n+   * of type [[Array[Byte]].\n+   *\n+   * @since 2.2.0\n+   *\n+   * @param ssc StreamingContext to construct DStream with\n+   * @param streamName Name of Kinesis stream to read from\n+   * @return [[KinesisDStream.Builder]] instance\n+   */\n+  def builder(ssc: StreamingContext, streamName: String): Builder[Array[Byte]]\n+    = builder(ssc, streamName, KinesisUtils.defaultMessageHandler(_))\n+\n+  /**\n+   * Creates a [[KinesisDStream.Builder]] for constructing [[KinesisInputDStream]] instances\n+   * of type [[T]] using the provided message handler.\n+   *\n+   * @since 2.2.0\n+   *\n+   * @param jssc JavaStreamingContext to construct DStream with\n+   * @param streamName Name of Kinesis stream to read from\n+   * @param messageHandler Handler used to extract type [[T]] from a Kinesis [[Record]]\n+   * @return [[KinesisDStream.Builder]] instance\n+   */\n+  def builder[T: ClassTag](\n+      jssc: JavaStreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T): Builder[T] = builder(jssc.ssc, streamName, messageHandler)\n+\n+  /**\n+   * Creates a [[KinesisDStream.Builder]] for constructing [[KinesisInputDStream]] instances\n+   * of type [[Array[Byte]].\n+   *\n+   * @since 2.2.0\n+   *\n+   * @param jssc JavaStreamingContext to construct DStream with\n+   * @param streamName Name of Kinesis stream to read from\n+   * @return [[KinesisDStream.Builder]] instance\n+   */\n+  def builder(jssc: JavaStreamingContext, streamName: String): Builder[Array[Byte]]\n+    = builder(jssc.ssc, streamName)\n+\n+  private[kinesis] val DEFAULT_KINESIS_ENDPOINT_URL: String\n+    = \"https://kinesis.us-east-1.amazonaws.com\""
  }],
  "prId": 17250
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "With this many methods for the credential provider, I feel we need a credential provider builder. I wouldn't want to re-enter everything again between `dynamoDb` and `cloudWatch`. If I want to keep them separate from the `kinesis` credentials",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-13T23:27:15Z",
    "diffHunk": "@@ -0,0 +1,559 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.reflect.ClassTag\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import com.amazonaws.services.kinesis.model.Record\n+\n+import org.apache.spark.annotation.InterfaceStability\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+\n+@InterfaceStability.Stable\n+object KinesisDStream {\n+  /**\n+   * Builder for [[KinesisInputDStream]] instances.\n+   *\n+   * @param ssc StreamingContext to be used for creating DStreams\n+   * @param streamName Name of Kinesis stream\n+   * @param messageHandler Function for extracting DStream data type from KCL Record\n+   *\n+   * @since 2.2.0\n+   */\n+  @InterfaceStability.Stable\n+  class Builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T) {\n+    private var endpointUrl = DEFAULT_KINESIS_ENDPOINT_URL\n+    private var regionName = DEFAULT_KINESIS_REGION_NAME\n+    private var initialPositionInStream = DEFAULT_INITIAL_POSITION_IN_STREAM\n+    private var checkpointAppName = ssc.sparkContext.appName\n+    private var checkpointInterval = ssc.graph.batchDuration\n+    private var storageLevel = DEFAULT_STORAGE_LEVEL\n+    private var kinesisCredsProvider: SerializableCredentialsProvider = DefaultCredentialsProvider\n+    private var dynamoDBCredsProvider: Option[SerializableCredentialsProvider] = None\n+    private var cloudWatchCredsProvider: Option[SerializableCredentialsProvider] = None\n+\n+    /**\n+     * Sets the AWS Kinesis endpoint URL. Defaults to \"https://kinesis.us-east-1.amazonaws.com\" if\n+     * no custom value is specified\n+     *\n+     * @param url Kinesis endpoint URL to use\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def endpointUrl(url: String): Builder[T] = {\n+      endpointUrl = url\n+      this\n+    }\n+\n+    /**\n+     * Sets the AWS region to construct clients for. Defaults to \"us-east-1\" if no custom value\n+     * is specified.\n+     *\n+     * @param regionName Name of AWS region to use (e.g. \"us-west-2\")\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def regionName(regionName: String): Builder[T] = {\n+      this.regionName = regionName\n+      this\n+    }\n+\n+    /**\n+     * Sets the initial position data is read from in the Kinesis stream. Defaults to\n+     * InitialPositionInStream.LATEST if no custom value is specified.\n+     *\n+     * @param initialPosition InitialPositionInStream value specifying where Spark Streaming\n+     *                        will start reading records in the Kinesis stream from\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def initialPositionInStream(initialPosition: InitialPositionInStream): Builder[T] = {\n+      initialPositionInStream = initialPosition\n+      this\n+    }\n+\n+    /**\n+     * Sets the KCL application name to use when checkpointing state to DynamoDB. Defaults to the\n+     * Spark app name if no custom value is specified.\n+     *\n+     * @param appName Value to use for the KCL app name (used when creating the DynamoDB checkpoint\n+     *                table and when writing metrics to CloudWatch)\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointAppName(appName: String): Builder[T] = {\n+      checkpointAppName = appName\n+      this\n+    }\n+\n+    /**\n+     * Sets how often the KCL application state is checkpointed to DynamoDB. Defaults to the Spark\n+     * Streaming batch interval if no custom value is specified.\n+     *\n+     * @param interval [[Duration]] specifying how often the KCL state should be checkpointed to\n+     *                 DynamoDB.\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointInterval(interval: Duration): Builder[T] = {\n+      checkpointInterval = interval\n+      this\n+    }\n+\n+    /**\n+     * Sets the storage level of the blocks for the DStream created. Defaults to\n+     * [[StorageLevel.MEMORY_AND_DISK_2]] if no custom value is specified.\n+     *\n+     * @param storageLevel [[StorageLevel]] to use for the DStream data blocks\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def storageLevel(storageLevel: StorageLevel): Builder[T] = {\n+      this.storageLevel = storageLevel\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the Kinesis service. This\n+     * is also the default credentials provider used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisDefaultCredentials(): Builder[T] = {\n+      kinesisCredsProvider = DefaultCredentialsProvider\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the Kinesis service. The default AWS\n+     * credentials provider chain is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey)\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(stsRoleArn, stsSessionName)\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials("
  }, {
    "author": {
      "login": "budde"
    },
    "body": "I'll look at introducing a credential builder",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-14T00:48:14Z",
    "diffHunk": "@@ -0,0 +1,559 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import scala.reflect.ClassTag\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+import com.amazonaws.services.kinesis.model.Record\n+\n+import org.apache.spark.annotation.InterfaceStability\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.{Duration, StreamingContext}\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+\n+@InterfaceStability.Stable\n+object KinesisDStream {\n+  /**\n+   * Builder for [[KinesisInputDStream]] instances.\n+   *\n+   * @param ssc StreamingContext to be used for creating DStreams\n+   * @param streamName Name of Kinesis stream\n+   * @param messageHandler Function for extracting DStream data type from KCL Record\n+   *\n+   * @since 2.2.0\n+   */\n+  @InterfaceStability.Stable\n+  class Builder[T: ClassTag](\n+      ssc: StreamingContext,\n+      streamName: String,\n+      messageHandler: Record => T) {\n+    private var endpointUrl = DEFAULT_KINESIS_ENDPOINT_URL\n+    private var regionName = DEFAULT_KINESIS_REGION_NAME\n+    private var initialPositionInStream = DEFAULT_INITIAL_POSITION_IN_STREAM\n+    private var checkpointAppName = ssc.sparkContext.appName\n+    private var checkpointInterval = ssc.graph.batchDuration\n+    private var storageLevel = DEFAULT_STORAGE_LEVEL\n+    private var kinesisCredsProvider: SerializableCredentialsProvider = DefaultCredentialsProvider\n+    private var dynamoDBCredsProvider: Option[SerializableCredentialsProvider] = None\n+    private var cloudWatchCredsProvider: Option[SerializableCredentialsProvider] = None\n+\n+    /**\n+     * Sets the AWS Kinesis endpoint URL. Defaults to \"https://kinesis.us-east-1.amazonaws.com\" if\n+     * no custom value is specified\n+     *\n+     * @param url Kinesis endpoint URL to use\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def endpointUrl(url: String): Builder[T] = {\n+      endpointUrl = url\n+      this\n+    }\n+\n+    /**\n+     * Sets the AWS region to construct clients for. Defaults to \"us-east-1\" if no custom value\n+     * is specified.\n+     *\n+     * @param regionName Name of AWS region to use (e.g. \"us-west-2\")\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def regionName(regionName: String): Builder[T] = {\n+      this.regionName = regionName\n+      this\n+    }\n+\n+    /**\n+     * Sets the initial position data is read from in the Kinesis stream. Defaults to\n+     * InitialPositionInStream.LATEST if no custom value is specified.\n+     *\n+     * @param initialPosition InitialPositionInStream value specifying where Spark Streaming\n+     *                        will start reading records in the Kinesis stream from\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def initialPositionInStream(initialPosition: InitialPositionInStream): Builder[T] = {\n+      initialPositionInStream = initialPosition\n+      this\n+    }\n+\n+    /**\n+     * Sets the KCL application name to use when checkpointing state to DynamoDB. Defaults to the\n+     * Spark app name if no custom value is specified.\n+     *\n+     * @param appName Value to use for the KCL app name (used when creating the DynamoDB checkpoint\n+     *                table and when writing metrics to CloudWatch)\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointAppName(appName: String): Builder[T] = {\n+      checkpointAppName = appName\n+      this\n+    }\n+\n+    /**\n+     * Sets how often the KCL application state is checkpointed to DynamoDB. Defaults to the Spark\n+     * Streaming batch interval if no custom value is specified.\n+     *\n+     * @param interval [[Duration]] specifying how often the KCL state should be checkpointed to\n+     *                 DynamoDB.\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def checkpointInterval(interval: Duration): Builder[T] = {\n+      checkpointInterval = interval\n+      this\n+    }\n+\n+    /**\n+     * Sets the storage level of the blocks for the DStream created. Defaults to\n+     * [[StorageLevel.MEMORY_AND_DISK_2]] if no custom value is specified.\n+     *\n+     * @param storageLevel [[StorageLevel]] to use for the DStream data blocks\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def storageLevel(storageLevel: StorageLevel): Builder[T] = {\n+      this.storageLevel = storageLevel\n+      this\n+    }\n+\n+    /**\n+     * Use the default AWS credentials provider chain to authenticate to the Kinesis service. This\n+     * is also the default credentials provider used if no custom value is specified.\n+     *\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisDefaultCredentials(): Builder[T] = {\n+      kinesisCredsProvider = DefaultCredentialsProvider\n+      this\n+    }\n+\n+    /**\n+     * Use an AWS credential keypair to authenticate to the Kinesis service. The default AWS\n+     * credentials provider chain is used if no custom value is specified.\n+     *\n+     * @param awsAccessKeyId AWS access key ID\n+     * @param awsSecretKey AWS secret key\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisBasicAWSCredentials(awsAccessKeyId: String, awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = BasicCredentialsProvider(\n+        awsAccessKeyId = awsAccessKeyId,\n+        awsSecretKey = awsSecretKey)\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The default\n+     * credential chain is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(stsRoleArn: String, stsSessionName: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(stsRoleArn, stsSessionName)\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The provided\n+     * AWS credential keypair is used to authenticate to STS and no external ID is used.\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        awsAccessKeyId: String,\n+        awsSecretKey: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        awsKeypair = Option(awsAccessKeyId, awsSecretKey))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The default\n+     * credential chain is used to authenticate to STS and the provided external ID is\n+     * validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials(\n+        stsRoleArn: String,\n+        stsSessionName: String,\n+        stsExternalId: String): Builder[T] = {\n+      kinesisCredsProvider = buildSTSCredentials(\n+        stsRoleArn,\n+        stsSessionName,\n+        stsExternalId = Option(stsExternalId))\n+      this\n+    }\n+\n+    /**\n+     * Assume an STS role in order to authenticate to the Kinesis service. The provided\n+     * AWS credential keypair is used to authenticate to STS and the provided external ID\n+     * is validated against the value in the assumed role's policy (if one is specified).\n+     *\n+     * @param stsRoleArn ARN of the IAM role to assume via STS\n+     * @param stsSessionName Name to identify STS sessions by\n+     * @param awsAccessKeyId AWS access key ID for authenicating to STS\n+     * @param stsExternaId External ID used by STS to validate IAM role trust policy\n+     * @param awsSecretKey AWS secret key for authenticating to STS\n+     * @return Reference to this [[KinesisDStream.Builder]]\n+     */\n+    def kinesisSTSCredentials("
  }],
  "prId": 17250
}]