[{
  "comments": [{
    "author": {
      "login": "budde"
    },
    "body": "This should be a ```val``` or, better yet, a ```def``` (```def``` can be overridden with ```val``` in child classes)",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-08-18T21:57:42Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  var initialPositionInStream: InitialPositionInStream"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "budde"
    },
    "body": "Is this necessary?",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-08-18T21:58:03Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  var initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  def instance: InitialPosition = this"
  }, {
    "author": {
      "login": "budde"
    },
    "body": "Looks like it is for Java compatibility",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-08-18T22:38:09Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  var initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  def instance: InitialPosition = this"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "budde"
    },
    "body": "I'd just make this a ```val``` or at least remove the parens as this method has no side-effects",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-08-18T22:32:14Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  var initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  def instance: InitialPosition = this\n+  override var initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.LATEST\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.TRIM_HORIZON.\n+ */\n+case object TrimHorizon extends InitialPosition {\n+  def instance: InitialPosition = this\n+  override var initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.TRIM_HORIZON\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.AT_TIMESTAMP.\n+ */\n+case class AtTimestamp(timestamp: Date) extends InitialPosition {\n+  def instance: InitialPosition = this\n+  override var initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.AT_TIMESTAMP\n+}\n+\n+/**\n+ * Companion object for InitialPosition that returns\n+ * appropriate version of InitialPositionInStream.\n+ */\n+object InitialPosition {\n+\n+  /**\n+   * Returns instance of Latest with InitialPositionInStream.LATEST.\n+   * @return [[Latest]]\n+   */\n+  def latest() : InitialPosition = {"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "budde"
    },
    "body": "Change to ```val```",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-08-18T22:32:24Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  var initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  def instance: InitialPosition = this\n+  override var initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.LATEST\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.TRIM_HORIZON.\n+ */\n+case object TrimHorizon extends InitialPosition {\n+  def instance: InitialPosition = this\n+  override var initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.TRIM_HORIZON\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.AT_TIMESTAMP.\n+ */\n+case class AtTimestamp(timestamp: Date) extends InitialPosition {\n+  def instance: InitialPosition = this\n+  override var initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.AT_TIMESTAMP\n+}\n+\n+/**\n+ * Companion object for InitialPosition that returns\n+ * appropriate version of InitialPositionInStream.\n+ */\n+object InitialPosition {\n+\n+  /**\n+   * Returns instance of Latest with InitialPositionInStream.LATEST.\n+   * @return [[Latest]]\n+   */\n+  def latest() : InitialPosition = {\n+    Latest\n+  }\n+\n+  /**\n+   * Returns instance of Latest with InitialPositionInStream.TRIM_HORIZON.\n+   * @return [[TrimHorizon]]\n+   */\n+  def trimHorizon() : InitialPosition = {"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "budde"
    },
    "body": "Is this method really necessary? Especially if it can only be used for a subset of the official ```InitialPositionInStream``` implementations?",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-08-18T22:33:59Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  var initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  def instance: InitialPosition = this\n+  override var initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.LATEST\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.TRIM_HORIZON.\n+ */\n+case object TrimHorizon extends InitialPosition {\n+  def instance: InitialPosition = this\n+  override var initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.TRIM_HORIZON\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.AT_TIMESTAMP.\n+ */\n+case class AtTimestamp(timestamp: Date) extends InitialPosition {\n+  def instance: InitialPosition = this\n+  override var initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.AT_TIMESTAMP\n+}\n+\n+/**\n+ * Companion object for InitialPosition that returns\n+ * appropriate version of InitialPositionInStream.\n+ */\n+object InitialPosition {\n+\n+  /**\n+   * Returns instance of Latest with InitialPositionInStream.LATEST.\n+   * @return [[Latest]]\n+   */\n+  def latest() : InitialPosition = {\n+    Latest\n+  }\n+\n+  /**\n+   * Returns instance of Latest with InitialPositionInStream.TRIM_HORIZON.\n+   * @return [[TrimHorizon]]\n+   */\n+  def trimHorizon() : InitialPosition = {\n+    TrimHorizon\n+  }\n+\n+  /**\n+   * Returns instance of AtTimestamp with InitialPositionInStream.AT_TIMESTAMP.\n+   * @return [[AtTimestamp]]\n+   */\n+  def atTimestamp(timestamp: Date) : InitialPosition = {\n+    AtTimestamp(timestamp)\n+  }\n+\n+  /**\n+   * Returns instance of [[InitialPosition]] based on the passed [[InitialPositionInStream]].\n+   * @return [[InitialPosition]]\n+   */\n+  def kinesisInitialPositionInStream("
  }, {
    "author": {
      "login": "budde"
    },
    "body": "Ok, I see that it is being used to maintain the original APIs present in ```KinesisUtils```. However, we should be deprecating ```KinesisUtils``` at some (undetermined?) point. Would be good to remove this method at that time as well.\r\n\r\nI'd suggest adding a comment to the docs for this method indicating it exists to maintain compatibility with the original ```KinesisUtils``` API.",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-08-18T22:37:19Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  var initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  def instance: InitialPosition = this\n+  override var initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.LATEST\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.TRIM_HORIZON.\n+ */\n+case object TrimHorizon extends InitialPosition {\n+  def instance: InitialPosition = this\n+  override var initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.TRIM_HORIZON\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.AT_TIMESTAMP.\n+ */\n+case class AtTimestamp(timestamp: Date) extends InitialPosition {\n+  def instance: InitialPosition = this\n+  override var initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.AT_TIMESTAMP\n+}\n+\n+/**\n+ * Companion object for InitialPosition that returns\n+ * appropriate version of InitialPositionInStream.\n+ */\n+object InitialPosition {\n+\n+  /**\n+   * Returns instance of Latest with InitialPositionInStream.LATEST.\n+   * @return [[Latest]]\n+   */\n+  def latest() : InitialPosition = {\n+    Latest\n+  }\n+\n+  /**\n+   * Returns instance of Latest with InitialPositionInStream.TRIM_HORIZON.\n+   * @return [[TrimHorizon]]\n+   */\n+  def trimHorizon() : InitialPosition = {\n+    TrimHorizon\n+  }\n+\n+  /**\n+   * Returns instance of AtTimestamp with InitialPositionInStream.AT_TIMESTAMP.\n+   * @return [[AtTimestamp]]\n+   */\n+  def atTimestamp(timestamp: Date) : InitialPosition = {\n+    AtTimestamp(timestamp)\n+  }\n+\n+  /**\n+   * Returns instance of [[InitialPosition]] based on the passed [[InitialPositionInStream]].\n+   * @return [[InitialPosition]]\n+   */\n+  def kinesisInitialPositionInStream("
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "budde"
    },
    "body": "*nit* remove space before ```:```",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-08-20T16:42:35Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  val initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.LATEST\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.TRIM_HORIZON.\n+ */\n+case object TrimHorizon extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.TRIM_HORIZON\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.AT_TIMESTAMP.\n+ */\n+case class AtTimestamp(timestamp: Date) extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.AT_TIMESTAMP\n+}\n+\n+/**\n+ * Companion object for InitialPosition that returns\n+ * appropriate version of InitialPositionInStream.\n+ */\n+object InitialPosition {\n+\n+  /**\n+   * An instance of Latest with InitialPositionInStream.LATEST.\n+   * @return [[Latest]]\n+   */\n+  val latest : InitialPosition = Latest"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "budde"
    },
    "body": "*nit* remove space before ```:```",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-08-20T16:42:41Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  val initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.LATEST\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.TRIM_HORIZON.\n+ */\n+case object TrimHorizon extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.TRIM_HORIZON\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.AT_TIMESTAMP.\n+ */\n+case class AtTimestamp(timestamp: Date) extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.AT_TIMESTAMP\n+}\n+\n+/**\n+ * Companion object for InitialPosition that returns\n+ * appropriate version of InitialPositionInStream.\n+ */\n+object InitialPosition {\n+\n+  /**\n+   * An instance of Latest with InitialPositionInStream.LATEST.\n+   * @return [[Latest]]\n+   */\n+  val latest : InitialPosition = Latest\n+\n+  /**\n+   * An instance of Latest with InitialPositionInStream.TRIM_HORIZON.\n+   * @return [[TrimHorizon]]\n+   */\n+  val trimHorizon : InitialPosition = TrimHorizon"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "budde"
    },
    "body": "*nit* remove space before ```:```",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-08-20T16:42:47Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  val initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.LATEST\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.TRIM_HORIZON.\n+ */\n+case object TrimHorizon extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.TRIM_HORIZON\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.AT_TIMESTAMP.\n+ */\n+case class AtTimestamp(timestamp: Date) extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.AT_TIMESTAMP\n+}\n+\n+/**\n+ * Companion object for InitialPosition that returns\n+ * appropriate version of InitialPositionInStream.\n+ */\n+object InitialPosition {\n+\n+  /**\n+   * An instance of Latest with InitialPositionInStream.LATEST.\n+   * @return [[Latest]]\n+   */\n+  val latest : InitialPosition = Latest\n+\n+  /**\n+   * An instance of Latest with InitialPositionInStream.TRIM_HORIZON.\n+   * @return [[TrimHorizon]]\n+   */\n+  val trimHorizon : InitialPosition = TrimHorizon\n+\n+  /**\n+   * Returns instance of AtTimestamp with InitialPositionInStream.AT_TIMESTAMP.\n+   * @return [[AtTimestamp]]\n+   */\n+  def atTimestamp(timestamp: Date) : InitialPosition = AtTimestamp(timestamp)"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "budde"
    },
    "body": "*nit* Indent this one more level. Remove space before ```:```.",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-08-20T16:43:24Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  val initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.LATEST\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.TRIM_HORIZON.\n+ */\n+case object TrimHorizon extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.TRIM_HORIZON\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.AT_TIMESTAMP.\n+ */\n+case class AtTimestamp(timestamp: Date) extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.AT_TIMESTAMP\n+}\n+\n+/**\n+ * Companion object for InitialPosition that returns\n+ * appropriate version of InitialPositionInStream.\n+ */\n+object InitialPosition {\n+\n+  /**\n+   * An instance of Latest with InitialPositionInStream.LATEST.\n+   * @return [[Latest]]\n+   */\n+  val latest : InitialPosition = Latest\n+\n+  /**\n+   * An instance of Latest with InitialPositionInStream.TRIM_HORIZON.\n+   * @return [[TrimHorizon]]\n+   */\n+  val trimHorizon : InitialPosition = TrimHorizon\n+\n+  /**\n+   * Returns instance of AtTimestamp with InitialPositionInStream.AT_TIMESTAMP.\n+   * @return [[AtTimestamp]]\n+   */\n+  def atTimestamp(timestamp: Date) : InitialPosition = AtTimestamp(timestamp)\n+\n+  /**\n+   * Returns instance of [[InitialPosition]] based on the passed [[InitialPositionInStream]].\n+   * This method is used in KinesisUtils for translating the InitialPositionInStream\n+   * to InitialPosition. This function would be removed when we deprecate the KinesisUtils.\n+   *\n+   * @return [[InitialPosition]]\n+   */\n+  def kinesisInitialPositionInStream(\n+    initialPositionInStream: InitialPositionInStream) : InitialPosition = {"
  }, {
    "author": {
      "login": "yssharma"
    },
    "body": "Added all other review comments. The indentation was making it look weird, so skipped the indentation.",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-08-21T03:09:23Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  val initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.LATEST\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.TRIM_HORIZON.\n+ */\n+case object TrimHorizon extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.TRIM_HORIZON\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.AT_TIMESTAMP.\n+ */\n+case class AtTimestamp(timestamp: Date) extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.AT_TIMESTAMP\n+}\n+\n+/**\n+ * Companion object for InitialPosition that returns\n+ * appropriate version of InitialPositionInStream.\n+ */\n+object InitialPosition {\n+\n+  /**\n+   * An instance of Latest with InitialPositionInStream.LATEST.\n+   * @return [[Latest]]\n+   */\n+  val latest : InitialPosition = Latest\n+\n+  /**\n+   * An instance of Latest with InitialPositionInStream.TRIM_HORIZON.\n+   * @return [[TrimHorizon]]\n+   */\n+  val trimHorizon : InitialPosition = TrimHorizon\n+\n+  /**\n+   * Returns instance of AtTimestamp with InitialPositionInStream.AT_TIMESTAMP.\n+   * @return [[AtTimestamp]]\n+   */\n+  def atTimestamp(timestamp: Date) : InitialPosition = AtTimestamp(timestamp)\n+\n+  /**\n+   * Returns instance of [[InitialPosition]] based on the passed [[InitialPositionInStream]].\n+   * This method is used in KinesisUtils for translating the InitialPositionInStream\n+   * to InitialPosition. This function would be removed when we deprecate the KinesisUtils.\n+   *\n+   * @return [[InitialPosition]]\n+   */\n+  def kinesisInitialPositionInStream(\n+    initialPositionInStream: InitialPositionInStream) : InitialPosition = {"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "nit: The first letters can be capitalized. `Latest`, `TrimHorizon`, `AtTimestamp`... Similar to `Trigger.Once()` or `Trigger.ProcessingTime(..)` in Structured Streaming",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-09-03T20:00:08Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  val initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.LATEST\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.TRIM_HORIZON.\n+ */\n+case object TrimHorizon extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.TRIM_HORIZON\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.AT_TIMESTAMP.\n+ */\n+case class AtTimestamp(timestamp: Date) extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.AT_TIMESTAMP\n+}\n+\n+/**\n+ * Companion object for InitialPosition that returns\n+ * appropriate version of InitialPositionInStream.\n+ */\n+object InitialPosition {\n+\n+  /**\n+   * An instance of Latest with InitialPositionInStream.LATEST.\n+   * @return [[Latest]]\n+   */\n+  val latest: InitialPosition = Latest"
  }, {
    "author": {
      "login": "yssharma"
    },
    "body": "Interesting. Could you please explain why have we done this capitalization. Once() and ProcessingTime() are methods and shouldn't they be camel cased ?",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-09-06T11:00:08Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  val initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.LATEST\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.TRIM_HORIZON.\n+ */\n+case object TrimHorizon extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.TRIM_HORIZON\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.AT_TIMESTAMP.\n+ */\n+case class AtTimestamp(timestamp: Date) extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.AT_TIMESTAMP\n+}\n+\n+/**\n+ * Companion object for InitialPosition that returns\n+ * appropriate version of InitialPositionInStream.\n+ */\n+object InitialPosition {\n+\n+  /**\n+   * An instance of Latest with InitialPositionInStream.LATEST.\n+   * @return [[Latest]]\n+   */\n+  val latest: InitialPosition = Latest"
  }, {
    "author": {
      "login": "brkyvz"
    },
    "body": "Good question. They used to be just classes. Since we couldn't have a nice way for using a `case object` in Java, you need to add a $ after the classname, e.g. `TrimHorizon$`, we decided to go the class syntax'y way. In scala, this still allows you to use the class with `KinesisInitialPosition.Latest` for example.",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-09-06T17:57:55Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  val initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.LATEST\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.TRIM_HORIZON.\n+ */\n+case object TrimHorizon extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.TRIM_HORIZON\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.AT_TIMESTAMP.\n+ */\n+case class AtTimestamp(timestamp: Date) extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.AT_TIMESTAMP\n+}\n+\n+/**\n+ * Companion object for InitialPosition that returns\n+ * appropriate version of InitialPositionInStream.\n+ */\n+object InitialPosition {\n+\n+  /**\n+   * An instance of Latest with InitialPositionInStream.LATEST.\n+   * @return [[Latest]]\n+   */\n+  val latest: InitialPosition = Latest"
  }, {
    "author": {
      "login": "yssharma"
    },
    "body": "Implemented new java wrapper for the Api !",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-09-09T13:23:14Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  val initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.LATEST\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.TRIM_HORIZON.\n+ */\n+case object TrimHorizon extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.TRIM_HORIZON\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.AT_TIMESTAMP.\n+ */\n+case class AtTimestamp(timestamp: Date) extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.AT_TIMESTAMP\n+}\n+\n+/**\n+ * Companion object for InitialPosition that returns\n+ * appropriate version of InitialPositionInStream.\n+ */\n+object InitialPosition {\n+\n+  /**\n+   * An instance of Latest with InitialPositionInStream.LATEST.\n+   * @return [[Latest]]\n+   */\n+  val latest: InitialPosition = Latest"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "why do you need the `instance`s?",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-09-05T18:55:28Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  val initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  val instance: InitialPosition = this"
  }, {
    "author": {
      "login": "yssharma"
    },
    "body": "It was required for the Java Api for using `TrimHorizon.instance()`.",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-09-06T11:12:15Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  val initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  val instance: InitialPosition = this"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "how about `fromKinesisInitialPosition`?",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-09-05T19:04:50Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  val initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.LATEST\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.TRIM_HORIZON.\n+ */\n+case object TrimHorizon extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.TRIM_HORIZON\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.AT_TIMESTAMP.\n+ */\n+case class AtTimestamp(timestamp: Date) extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.AT_TIMESTAMP\n+}\n+\n+/**\n+ * Companion object for InitialPosition that returns\n+ * appropriate version of InitialPositionInStream.\n+ */\n+object InitialPosition {\n+\n+  /**\n+   * An instance of Latest with InitialPositionInStream.LATEST.\n+   * @return [[Latest]]\n+   */\n+  val latest: InitialPosition = Latest\n+\n+  /**\n+   * An instance of Latest with InitialPositionInStream.TRIM_HORIZON.\n+   * @return [[TrimHorizon]]\n+   */\n+  val trimHorizon: InitialPosition = TrimHorizon\n+\n+  /**\n+   * Returns instance of AtTimestamp with InitialPositionInStream.AT_TIMESTAMP.\n+   * @return [[AtTimestamp]]\n+   */\n+  def atTimestamp(timestamp: Date): InitialPosition = AtTimestamp(timestamp)\n+\n+  /**\n+   * Returns instance of [[InitialPosition]] based on the passed [[InitialPositionInStream]].\n+   * This method is used in KinesisUtils for translating the InitialPositionInStream\n+   * to InitialPosition. This function would be removed when we deprecate the KinesisUtils.\n+   *\n+   * @return [[InitialPosition]]\n+   */\n+  def kinesisInitialPositionInStream("
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "Rather, `please use the builder API in ... to use AT_TIMESTAMP` ",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-09-05T19:06:18Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  val initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.LATEST\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.TRIM_HORIZON.\n+ */\n+case object TrimHorizon extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.TRIM_HORIZON\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.AT_TIMESTAMP.\n+ */\n+case class AtTimestamp(timestamp: Date) extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.AT_TIMESTAMP\n+}\n+\n+/**\n+ * Companion object for InitialPosition that returns\n+ * appropriate version of InitialPositionInStream.\n+ */\n+object InitialPosition {\n+\n+  /**\n+   * An instance of Latest with InitialPositionInStream.LATEST.\n+   * @return [[Latest]]\n+   */\n+  val latest: InitialPosition = Latest\n+\n+  /**\n+   * An instance of Latest with InitialPositionInStream.TRIM_HORIZON.\n+   * @return [[TrimHorizon]]\n+   */\n+  val trimHorizon: InitialPosition = TrimHorizon\n+\n+  /**\n+   * Returns instance of AtTimestamp with InitialPositionInStream.AT_TIMESTAMP.\n+   * @return [[AtTimestamp]]\n+   */\n+  def atTimestamp(timestamp: Date): InitialPosition = AtTimestamp(timestamp)\n+\n+  /**\n+   * Returns instance of [[InitialPosition]] based on the passed [[InitialPositionInStream]].\n+   * This method is used in KinesisUtils for translating the InitialPositionInStream\n+   * to InitialPosition. This function would be removed when we deprecate the KinesisUtils.\n+   *\n+   * @return [[InitialPosition]]\n+   */\n+  def kinesisInitialPositionInStream(\n+    initialPositionInStream: InitialPositionInStream): InitialPosition = {\n+    if (initialPositionInStream == InitialPositionInStream.LATEST) {\n+      latest\n+    } else if (initialPositionInStream == InitialPositionInStream.TRIM_HORIZON) {\n+      trimHorizon\n+    } else {\n+      // InitialPositionInStream.AT_TIMESTAMP is not supported.\n+      // Use InitialPosition.atTimestamp(timestamp) instead.\n+      throw new UnsupportedOperationException(\n+        \"Only InitialPositionInStream.LATEST and InitialPositionInStream.TRIM_HORIZON\" +\n+          \"supported in initialPositionInStream(). Use InitialPosition.atTimestamp(timestamp)\" +"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "For these to be Java friendly, we may need to put them in a java file, similar to https://github.com/apache/spark/blob/master/sql/core/src/main/java/org/apache/spark/sql/streaming/Trigger.java",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-09-05T19:08:40Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  val initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.LATEST\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.TRIM_HORIZON.\n+ */\n+case object TrimHorizon extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.TRIM_HORIZON\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.AT_TIMESTAMP.\n+ */\n+case class AtTimestamp(timestamp: Date) extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.AT_TIMESTAMP\n+}\n+\n+/**\n+ * Companion object for InitialPosition that returns\n+ * appropriate version of InitialPositionInStream.\n+ */\n+object InitialPosition {"
  }, {
    "author": {
      "login": "yssharma"
    },
    "body": "Looks good. \r\nHow do you compare the syntax below. Which one makes more sense : \r\n`InitialPosition initialPosition = TrimHorizon.instance();`\r\nvs, introducing a new java class KinesisInitialPosition.java for:\r\n`InitialPosition initialPosition = KinesisInitialPosition.trimHorizon();`",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-09-06T11:53:50Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  val initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.LATEST\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.TRIM_HORIZON.\n+ */\n+case object TrimHorizon extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.TRIM_HORIZON\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.AT_TIMESTAMP.\n+ */\n+case class AtTimestamp(timestamp: Date) extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.AT_TIMESTAMP\n+}\n+\n+/**\n+ * Companion object for InitialPosition that returns\n+ * appropriate version of InitialPositionInStream.\n+ */\n+object InitialPosition {"
  }, {
    "author": {
      "login": "brkyvz"
    },
    "body": "I like `InitialPosition initialPosition = KinesisInitialPosition.TrimHorizon();` best :)",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-09-06T17:55:21Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  val initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.LATEST\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.TRIM_HORIZON.\n+ */\n+case object TrimHorizon extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.TRIM_HORIZON\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.AT_TIMESTAMP.\n+ */\n+case class AtTimestamp(timestamp: Date) extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.AT_TIMESTAMP\n+}\n+\n+/**\n+ * Companion object for InitialPosition that returns\n+ * appropriate version of InitialPositionInStream.\n+ */\n+object InitialPosition {"
  }, {
    "author": {
      "login": "yssharma"
    },
    "body": "I've implemented the functions with this Capital naming, but still feel a bit salty about this :)",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-09-08T00:10:29Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  val initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.LATEST\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.TRIM_HORIZON.\n+ */\n+case object TrimHorizon extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.TRIM_HORIZON\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.AT_TIMESTAMP.\n+ */\n+case class AtTimestamp(timestamp: Date) extends InitialPosition {\n+  val instance: InitialPosition = this\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.AT_TIMESTAMP\n+}\n+\n+/**\n+ * Companion object for InitialPosition that returns\n+ * appropriate version of InitialPositionInStream.\n+ */\n+object InitialPosition {"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "We don't need both the Scala API for this anymore. We can just use the Java objects directly.",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-10-10T20:55:01Z",
    "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  val initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.LATEST\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.TRIM_HORIZON.\n+ */\n+case object TrimHorizon extends InitialPosition {\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.TRIM_HORIZON\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.AT_TIMESTAMP.\n+ */\n+case class AtTimestamp(timestamp: Date) extends InitialPosition {\n+  override val initialPositionInStream: InitialPositionInStream\n+    = InitialPositionInStream.AT_TIMESTAMP\n+}\n+\n+/**\n+ * Companion object for InitialPosition that returns\n+ * appropriate version of InitialPositionInStream.\n+ */\n+object InitialPosition {\n+\n+  /**\n+   * An instance of Latest with InitialPositionInStream.LATEST.\n+   * @return [[Latest]]\n+   */\n+  val latest: InitialPosition = Latest\n+\n+  /**\n+   * An instance of Latest with InitialPositionInStream.TRIM_HORIZON.\n+   * @return [[TrimHorizon]]\n+   */\n+  val trimHorizon: InitialPosition = TrimHorizon"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "can you wrap all of these in an object?\r\n```scala\r\nsealed trait InitialPosition {\r\n  ...\r\n}\r\n\r\nobject internal {\r\n  case object Latest extends InitialPosition {\r\n  }\r\n  ...\r\n  case class AtTimestamp(timestamp: Date) extends InitialPosition {\r\n  }\r\n}\r\n```\r\nNote how InitialPosition is outside, and `internal` is lowercase.\r\n\r\nso that people go only through the Java Interface (`org.apache.spark.streaming.kinesis.Latest()`) etc\r\n\r\nYour documentation and test cases go through the Scala interface which makes it super weird to have 2 things corresponding to the same thing.",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-12-12T03:57:49Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  val initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {"
  }, {
    "author": {
      "login": "yashs360"
    },
    "body": "Hi @brkyvz , Thanks for the review. \r\nAre you suggesting to put everything into a new object. And refer the case objects from the java class methods?\r\nIn that case is it better to create the objects in Java and expose them directly, since we will have cases where we will need direct access to the case objects/classes (instead of the java methods) like one of the test cases:\r\n`initialPosition.asInstanceOf[AtTimestamp].timestamp`\r\n\r\nI would create a new branch with the changes and share with you if its fine ?",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-12-14T23:07:24Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis\n+\n+import java.util.Date\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream\n+\n+/**\n+ * Trait for Kinesis's InitialPositionInStream.\n+ * This will be overridden by more specific types.\n+ */\n+sealed trait InitialPosition {\n+  val initialPositionInStream: InitialPositionInStream\n+}\n+\n+/**\n+ * Case object for Kinesis's InitialPositionInStream.LATEST.\n+ */\n+case object Latest extends InitialPosition {"
  }],
  "prId": 18029
}]