[{
  "comments": [{
    "author": {
      "login": "budde"
    },
    "body": "I'd use the standard ```// comment``` syntax here instead of JavaDoc as you aren't documenting a class or method.",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-06-01T20:44:35Z",
    "diffHunk": "@@ -148,17 +149,31 @@ private[kinesis] class KinesisReceiver[T](\n \n     kinesisCheckpointer = new KinesisCheckpointer(receiver, checkpointInterval, workerId)\n     val kinesisProvider = kinesisCreds.provider\n-    val kinesisClientLibConfiguration = new KinesisClientLibConfiguration(\n-          checkpointAppName,\n-          streamName,\n-          kinesisProvider,\n-          dynamoDBCreds.map(_.provider).getOrElse(kinesisProvider),\n-          cloudWatchCreds.map(_.provider).getOrElse(kinesisProvider),\n-          workerId)\n-        .withKinesisEndpoint(endpointUrl)\n-        .withInitialPositionInStream(initialPositionInStream)\n-        .withTaskBackoffTimeMillis(500)\n-        .withRegionName(regionName)\n+\n+    val kinesisClientLibConfiguration = {\n+      var clientLibConf = new KinesisClientLibConfiguration(\n+        checkpointAppName,\n+        streamName,\n+        kinesisProvider,\n+        dynamoDBCreds.map(_.provider).getOrElse(kinesisProvider),\n+        cloudWatchCreds.map(_.provider).getOrElse(kinesisProvider),\n+        workerId)\n+      .withKinesisEndpoint(endpointUrl)\n+      .withTaskBackoffTimeMillis(500)\n+      .withRegionName(regionName)\n+\n+      /** Enhance the Kinesis receiver based on InitialPositionInStream  */"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "budde"
    },
    "body": "See my previous comment in **KinesisInputDStream.scala** about these parameters",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-06-01T20:48:28Z",
    "diffHunk": "@@ -84,6 +84,7 @@ private[kinesis] class KinesisReceiver[T](\n     endpointUrl: String,\n     regionName: String,\n     initialPositionInStream: InitialPositionInStream,\n+    initialPositionInStreamTimestamp: Date,"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "budde"
    },
    "body": "Here's a more stylish way of doing this in Scala:\r\n\r\n```scala\r\ninitialPosition match {\r\n  case atTimestamp: AtTimestamp =>\r\n    baseClientLibConfiguration.withTimestampAtInitialPositionInStream(atTimestamp.timestamp)\r\n  case _ =>\r\n    baseClientLibConfiguration\r\n}\r\n```",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-08-18T22:28:50Z",
    "diffHunk": "@@ -148,18 +149,28 @@ private[kinesis] class KinesisReceiver[T](\n \n     kinesisCheckpointer = new KinesisCheckpointer(receiver, checkpointInterval, workerId)\n     val kinesisProvider = kinesisCreds.provider\n-    val kinesisClientLibConfiguration = new KinesisClientLibConfiguration(\n+    var kinesisClientLibConfiguration = new KinesisClientLibConfiguration(\n           checkpointAppName,\n           streamName,\n           kinesisProvider,\n           dynamoDBCreds.map(_.provider).getOrElse(kinesisProvider),\n           cloudWatchCreds.map(_.provider).getOrElse(kinesisProvider),\n           workerId)\n         .withKinesisEndpoint(endpointUrl)\n-        .withInitialPositionInStream(initialPositionInStream)\n+        .withInitialPositionInStream(initialPosition.initialPositionInStream)\n         .withTaskBackoffTimeMillis(500)\n         .withRegionName(regionName)\n \n+    // Update the Kinesis client lib config with timestamp\n+    // if InitialPositionInStream.AT_TIMESTAMP is passed\n+    kinesisClientLibConfiguration =\n+      if (initialPosition.initialPositionInStream == InitialPositionInStream.AT_TIMESTAMP) {"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "budde"
    },
    "body": "Keep this a val, but you can introduce a new scope with a temp val using braces, e.g.: \r\n\r\n```scala\r\nval kinesisClientLibConfiguration = {\r\n  val baseClientLibConfiguration = new KinesisClientLibConfiguration(\r\n      checkpointAppName,\r\n      streamName,\r\n      ...\r\n    .withKinesisEndpoint(endpointUrl)\r\n    .withInitialPositionInStream(initialPosition.initialPositionInStream)\r\n    ...\r\n\r\n  initialPosition match {\r\n    // see comment below\r\n    ...\r\n  }\r\n}\r\n```",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-08-18T22:31:45Z",
    "diffHunk": "@@ -148,18 +149,28 @@ private[kinesis] class KinesisReceiver[T](\n \n     kinesisCheckpointer = new KinesisCheckpointer(receiver, checkpointInterval, workerId)\n     val kinesisProvider = kinesisCreds.provider\n-    val kinesisClientLibConfiguration = new KinesisClientLibConfiguration(\n+    var kinesisClientLibConfiguration = new KinesisClientLibConfiguration("
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "nit: \r\n```scala\r\ninitialPosition match {\r\n  case AtTimestamp(ts) =>\r\n    baseClientLibConfiguration.withTimestampAtInitialPositionInStream(ts)\r\n...\r\n}\r\n\r\n```",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-10-10T20:59:46Z",
    "diffHunk": "@@ -148,18 +149,30 @@ private[kinesis] class KinesisReceiver[T](\n \n     kinesisCheckpointer = new KinesisCheckpointer(receiver, checkpointInterval, workerId)\n     val kinesisProvider = kinesisCreds.provider\n-    val kinesisClientLibConfiguration = new KinesisClientLibConfiguration(\n-          checkpointAppName,\n-          streamName,\n-          kinesisProvider,\n-          dynamoDBCreds.map(_.provider).getOrElse(kinesisProvider),\n-          cloudWatchCreds.map(_.provider).getOrElse(kinesisProvider),\n-          workerId)\n+\n+    val kinesisClientLibConfiguration = {\n+      val baseClientLibConfiguration = new KinesisClientLibConfiguration(\n+        checkpointAppName,\n+        streamName,\n+        kinesisProvider,\n+        dynamoDBCreds.map(_.provider).getOrElse(kinesisProvider),\n+        cloudWatchCreds.map(_.provider).getOrElse(kinesisProvider),\n+        workerId)\n         .withKinesisEndpoint(endpointUrl)\n-        .withInitialPositionInStream(initialPositionInStream)\n+        .withInitialPositionInStream(initialPosition.initialPositionInStream)\n         .withTaskBackoffTimeMillis(500)\n         .withRegionName(regionName)\n \n+      // Update the Kinesis client lib config with timestamp\n+      // if InitialPositionInStream.AT_TIMESTAMP is passed\n+      initialPosition match {\n+        case atTimestamp: AtTimestamp =>"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "nit: indentation",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-12-25T07:51:41Z",
    "diffHunk": "@@ -56,12 +57,13 @@ import org.apache.spark.util.Utils\n  * @param endpointUrl  Url of Kinesis service (e.g., https://kinesis.us-east-1.amazonaws.com)\n  * @param regionName  Region name used by the Kinesis Client Library for\n  *                    DynamoDB (lease coordination and checkpointing) and CloudWatch (metrics)\n- * @param initialPositionInStream  In the absence of Kinesis checkpoint info, this is the\n+ * @param initialPosition  Instance of [[KinesisInitialPosition]]\n+ *                                 In the absence of Kinesis checkpoint info, this is the"
  }],
  "prId": 18029
}]