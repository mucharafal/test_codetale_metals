[{
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "Can you instead return `Latest$.MODULE$`",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-10-10T20:55:34Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis;\n+\n+import java.util.Date;\n+\n+/**\n+ * A java wrapper for org.apache.spark.streaming.kinesis.InitialPosition\n+ * to expose the corresponding scala objects for InitialPositionInStream.\n+ * The functions are intentionally Upper cased to appear like classes for\n+ * usage in Java classes.\n+ */\n+public class KinesisInitialPosition {\n+\n+    /**\n+     * Returns instance of AtTimestamp with InitialPositionInStream.LATEST.\n+     * @return\n+     */\n+    public static InitialPosition Latest() {\n+        return InitialPosition$.MODULE$.latest();"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "Can you instead return `TrimHorizon$.MODULE$`",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-10-10T20:55:44Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis;\n+\n+import java.util.Date;\n+\n+/**\n+ * A java wrapper for org.apache.spark.streaming.kinesis.InitialPosition\n+ * to expose the corresponding scala objects for InitialPositionInStream.\n+ * The functions are intentionally Upper cased to appear like classes for\n+ * usage in Java classes.\n+ */\n+public class KinesisInitialPosition {\n+\n+    /**\n+     * Returns instance of AtTimestamp with InitialPositionInStream.LATEST.\n+     * @return\n+     */\n+    public static InitialPosition Latest() {\n+        return InitialPosition$.MODULE$.latest();\n+    }\n+\n+    /**\n+     * Returns instance of AtTimestamp with InitialPositionInStream.TRIM_HORIZON.\n+     * @return\n+     */\n+    public static InitialPosition TrimHorizon() {\n+        return InitialPosition$.MODULE$.trimHorizon();"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "`AtTimestamp.apply(timestamp)`",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-10-10T20:55:58Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis;\n+\n+import java.util.Date;\n+\n+/**\n+ * A java wrapper for org.apache.spark.streaming.kinesis.InitialPosition\n+ * to expose the corresponding scala objects for InitialPositionInStream.\n+ * The functions are intentionally Upper cased to appear like classes for\n+ * usage in Java classes.\n+ */\n+public class KinesisInitialPosition {\n+\n+    /**\n+     * Returns instance of AtTimestamp with InitialPositionInStream.LATEST.\n+     * @return\n+     */\n+    public static InitialPosition Latest() {\n+        return InitialPosition$.MODULE$.latest();\n+    }\n+\n+    /**\n+     * Returns instance of AtTimestamp with InitialPositionInStream.TRIM_HORIZON.\n+     * @return\n+     */\n+    public static InitialPosition TrimHorizon() {\n+        return InitialPosition$.MODULE$.trimHorizon();\n+    }\n+\n+    /**\n+     * Returns instance of AtTimestamp with InitialPositionInStream.AT_TIMESTAMP.\n+     * @param timestamp\n+     * @return\n+     */\n+    public static InitialPosition AtTimestamp(Date timestamp) {\n+        return InitialPosition$.MODULE$.atTimestamp(timestamp);"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "please add `@InterfaceStability.Evolving` above",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-12-12T03:52:40Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis;\n+\n+import java.util.Date;\n+\n+/**\n+ * A java wrapper for org.apache.spark.streaming.kinesis.InitialPosition\n+ * to expose the corresponding scala objects for InitialPositionInStream.\n+ * The functions are intentionally Upper cased to appear like classes for\n+ * usage in Java classes.\n+ */\n+public class KinesisInitialPosition {"
  }],
  "prId": 18029
}]