[{
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "nit: new line",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-12-25T07:53:30Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kinesis;\n+\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream;\n+\n+import java.io.Serializable;\n+import java.util.Date;\n+\n+/**\n+ * A java wrapper for exposing [[InitialPositionInStream]]\n+ * to the corresponding Kinesis readers.\n+ */\n+interface KinesisInitialPosition {\n+    InitialPositionInStream getPosition();\n+}\n+\n+public class KinesisInitialPositions {\n+    public static class Latest implements KinesisInitialPosition, Serializable {\n+        public Latest() {}\n+\n+        @Override\n+        public InitialPositionInStream getPosition() {\n+            return InitialPositionInStream.LATEST;\n+        }\n+    }\n+\n+    public static class TrimHorizon implements KinesisInitialPosition, Serializable {\n+        public TrimHorizon() {}\n+\n+        @Override\n+        public InitialPositionInStream getPosition() {\n+            return InitialPositionInStream.TRIM_HORIZON;\n+        }\n+    }\n+\n+    public static class AtTimestamp implements KinesisInitialPosition, Serializable {\n+        private Date timestamp;\n+\n+        public AtTimestamp(Date timestamp) {\n+            this.timestamp = timestamp;\n+        }\n+\n+        @Override\n+        public InitialPositionInStream getPosition() {\n+            return InitialPositionInStream.AT_TIMESTAMP;\n+        }\n+\n+        public Date getTimestamp() {\n+            return timestamp;\n+        }\n+    }\n+\n+\n+    /**\n+     * Returns instance of [[KinesisInitialPosition]] based on the passed [[InitialPositionInStream]].\n+     * This method is used in KinesisUtils for translating the InitialPositionInStream\n+     * to InitialPosition. This function would be removed when we deprecate the KinesisUtils.\n+     *\n+     * @return [[InitialPosition]]\n+     */\n+    public static KinesisInitialPosition fromKinesisInitialPosition(\n+            InitialPositionInStream initialPositionInStream) throws UnsupportedOperationException {\n+        if (initialPositionInStream == InitialPositionInStream.LATEST) {\n+            return new Latest();\n+        } else if (initialPositionInStream == InitialPositionInStream.TRIM_HORIZON) {\n+            return new TrimHorizon();\n+        } else {\n+            // InitialPositionInStream.AT_TIMESTAMP is not supported.\n+            // Use InitialPosition.atTimestamp(timestamp) instead.\n+            throw new UnsupportedOperationException(\n+                    \"Only InitialPositionInStream.LATEST and InitialPositionInStream.TRIM_HORIZON \" +\n+                            \"supported in initialPositionInStream(). Please use the initialPosition() from \" +\n+                            \"builder API in KinesisInputDStream for using InitialPositionInStream.AT_TIMESTAMP\");\n+        }\n+    }\n+}",
    "line": 91
  }],
  "prId": 18029
}]