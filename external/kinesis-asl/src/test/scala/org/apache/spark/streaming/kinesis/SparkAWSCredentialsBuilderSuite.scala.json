[{
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "nit: could you make this a single line? ",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-23T18:36:07Z",
    "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import org.apache.spark.streaming.TestSuiteBase\n+import org.apache.spark.util.Utils\n+\n+class SparkAWSCredentialsBuilderSuite extends TestSuiteBase {\n+  private def builder = SparkAWSCredentials.builder\n+\n+  private val basicCreds = BasicCredentials(\n+    awsAccessKeyId = \"a-very-nice-access-key\",\n+    awsSecretKey = \"a-very-nice-secret-key\")\n+\n+  private val stsCreds = STSCredentials(\n+    stsRoleArn = \"a-very-nice-role-arn\",\n+    stsSessionName = \"a-very-nice-secret-key\",\n+    stsExternalId = Option(\"a-very-nice-external-id\"),\n+    longLivedCredsProvider = basicCreds)\n+\n+  test(\"should build DefaultCredentials when given no params\") {\n+    assert(builder.build() == DefaultCredentials)\n+  }\n+\n+  test(\"should build BasicCredentials\") {\n+    assertResult(basicCreds) {\n+      builder.basicCredentials(basicCreds.awsAccessKeyId, basicCreds.awsSecretKey)\n+        .build()\n+    }\n+  }\n+\n+  test(\"should build STSCredentials\") {\n+    // No external ID, default long-lived creds\n+    assertResult(stsCreds.copy(\n+      stsExternalId = None,\n+      longLivedCredsProvider = DefaultCredentials)) {\n+      builder.stsCredentials(stsCreds.stsRoleArn, stsCreds.stsSessionName)\n+        .build()\n+    }\n+    // Default long-lived creds\n+    assertResult(stsCreds.copy(\n+      longLivedCredsProvider = DefaultCredentials)) {\n+      builder.stsCredentials(\n+          stsCreds.stsRoleArn,\n+          stsCreds.stsSessionName,\n+          stsCreds.stsExternalId.get)\n+        .build()\n+    }\n+    // No external ID, basic keypair for long-lived creds\n+    assertResult(stsCreds.copy("
  }, {
    "author": {
      "login": "budde"
    },
    "body": "Will do",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-23T19:15:06Z",
    "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import org.apache.spark.streaming.TestSuiteBase\n+import org.apache.spark.util.Utils\n+\n+class SparkAWSCredentialsBuilderSuite extends TestSuiteBase {\n+  private def builder = SparkAWSCredentials.builder\n+\n+  private val basicCreds = BasicCredentials(\n+    awsAccessKeyId = \"a-very-nice-access-key\",\n+    awsSecretKey = \"a-very-nice-secret-key\")\n+\n+  private val stsCreds = STSCredentials(\n+    stsRoleArn = \"a-very-nice-role-arn\",\n+    stsSessionName = \"a-very-nice-secret-key\",\n+    stsExternalId = Option(\"a-very-nice-external-id\"),\n+    longLivedCredsProvider = basicCreds)\n+\n+  test(\"should build DefaultCredentials when given no params\") {\n+    assert(builder.build() == DefaultCredentials)\n+  }\n+\n+  test(\"should build BasicCredentials\") {\n+    assertResult(basicCreds) {\n+      builder.basicCredentials(basicCreds.awsAccessKeyId, basicCreds.awsSecretKey)\n+        .build()\n+    }\n+  }\n+\n+  test(\"should build STSCredentials\") {\n+    // No external ID, default long-lived creds\n+    assertResult(stsCreds.copy(\n+      stsExternalId = None,\n+      longLivedCredsProvider = DefaultCredentials)) {\n+      builder.stsCredentials(stsCreds.stsRoleArn, stsCreds.stsSessionName)\n+        .build()\n+    }\n+    // Default long-lived creds\n+    assertResult(stsCreds.copy(\n+      longLivedCredsProvider = DefaultCredentials)) {\n+      builder.stsCredentials(\n+          stsCreds.stsRoleArn,\n+          stsCreds.stsSessionName,\n+          stsCreds.stsExternalId.get)\n+        .build()\n+    }\n+    // No external ID, basic keypair for long-lived creds\n+    assertResult(stsCreds.copy("
  }],
  "prId": 17250
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "nit: single line please.",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-23T18:36:16Z",
    "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import org.apache.spark.streaming.TestSuiteBase\n+import org.apache.spark.util.Utils\n+\n+class SparkAWSCredentialsBuilderSuite extends TestSuiteBase {\n+  private def builder = SparkAWSCredentials.builder\n+\n+  private val basicCreds = BasicCredentials(\n+    awsAccessKeyId = \"a-very-nice-access-key\",\n+    awsSecretKey = \"a-very-nice-secret-key\")\n+\n+  private val stsCreds = STSCredentials(\n+    stsRoleArn = \"a-very-nice-role-arn\",\n+    stsSessionName = \"a-very-nice-secret-key\",\n+    stsExternalId = Option(\"a-very-nice-external-id\"),\n+    longLivedCredsProvider = basicCreds)\n+\n+  test(\"should build DefaultCredentials when given no params\") {\n+    assert(builder.build() == DefaultCredentials)\n+  }\n+\n+  test(\"should build BasicCredentials\") {\n+    assertResult(basicCreds) {\n+      builder.basicCredentials(basicCreds.awsAccessKeyId, basicCreds.awsSecretKey)\n+        .build()\n+    }\n+  }\n+\n+  test(\"should build STSCredentials\") {\n+    // No external ID, default long-lived creds\n+    assertResult(stsCreds.copy(\n+      stsExternalId = None,\n+      longLivedCredsProvider = DefaultCredentials)) {\n+      builder.stsCredentials(stsCreds.stsRoleArn, stsCreds.stsSessionName)\n+        .build()\n+    }\n+    // Default long-lived creds\n+    assertResult(stsCreds.copy(\n+      longLivedCredsProvider = DefaultCredentials)) {"
  }, {
    "author": {
      "login": "budde"
    },
    "body": "I'll fix it. This happened since ```DefaultCredentialsProvider``` was shortened to ```DefaultCredentials``` so I'll try to check for other places where a multiline statement can be rolled up into a single line",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-23T19:14:57Z",
    "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import org.apache.spark.streaming.TestSuiteBase\n+import org.apache.spark.util.Utils\n+\n+class SparkAWSCredentialsBuilderSuite extends TestSuiteBase {\n+  private def builder = SparkAWSCredentials.builder\n+\n+  private val basicCreds = BasicCredentials(\n+    awsAccessKeyId = \"a-very-nice-access-key\",\n+    awsSecretKey = \"a-very-nice-secret-key\")\n+\n+  private val stsCreds = STSCredentials(\n+    stsRoleArn = \"a-very-nice-role-arn\",\n+    stsSessionName = \"a-very-nice-secret-key\",\n+    stsExternalId = Option(\"a-very-nice-external-id\"),\n+    longLivedCredsProvider = basicCreds)\n+\n+  test(\"should build DefaultCredentials when given no params\") {\n+    assert(builder.build() == DefaultCredentials)\n+  }\n+\n+  test(\"should build BasicCredentials\") {\n+    assertResult(basicCreds) {\n+      builder.basicCredentials(basicCreds.awsAccessKeyId, basicCreds.awsSecretKey)\n+        .build()\n+    }\n+  }\n+\n+  test(\"should build STSCredentials\") {\n+    // No external ID, default long-lived creds\n+    assertResult(stsCreds.copy(\n+      stsExternalId = None,\n+      longLivedCredsProvider = DefaultCredentials)) {\n+      builder.stsCredentials(stsCreds.stsRoleArn, stsCreds.stsSessionName)\n+        .build()\n+    }\n+    // Default long-lived creds\n+    assertResult(stsCreds.copy(\n+      longLivedCredsProvider = DefaultCredentials)) {"
  }],
  "prId": 17250
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "I know we didn't have it before, but could you also check that after deserialization, they're equivalent?\r\n```scala\r\nval creds = BasicCredentials(\"x\", \"y\")\r\nassert(Utils.deserialize[BasicCredentials](Utils.serialize(creds)) === creds)\r\n```",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-23T18:37:49Z",
    "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import org.apache.spark.streaming.TestSuiteBase\n+import org.apache.spark.util.Utils\n+\n+class SparkAWSCredentialsBuilderSuite extends TestSuiteBase {\n+  private def builder = SparkAWSCredentials.builder\n+\n+  private val basicCreds = BasicCredentials(\n+    awsAccessKeyId = \"a-very-nice-access-key\",\n+    awsSecretKey = \"a-very-nice-secret-key\")\n+\n+  private val stsCreds = STSCredentials(\n+    stsRoleArn = \"a-very-nice-role-arn\",\n+    stsSessionName = \"a-very-nice-secret-key\",\n+    stsExternalId = Option(\"a-very-nice-external-id\"),\n+    longLivedCredsProvider = basicCreds)\n+\n+  test(\"should build DefaultCredentials when given no params\") {\n+    assert(builder.build() == DefaultCredentials)\n+  }\n+\n+  test(\"should build BasicCredentials\") {\n+    assertResult(basicCreds) {\n+      builder.basicCredentials(basicCreds.awsAccessKeyId, basicCreds.awsSecretKey)\n+        .build()\n+    }\n+  }\n+\n+  test(\"should build STSCredentials\") {\n+    // No external ID, default long-lived creds\n+    assertResult(stsCreds.copy(\n+      stsExternalId = None,\n+      longLivedCredsProvider = DefaultCredentials)) {\n+      builder.stsCredentials(stsCreds.stsRoleArn, stsCreds.stsSessionName)\n+        .build()\n+    }\n+    // Default long-lived creds\n+    assertResult(stsCreds.copy(\n+      longLivedCredsProvider = DefaultCredentials)) {\n+      builder.stsCredentials(\n+          stsCreds.stsRoleArn,\n+          stsCreds.stsSessionName,\n+          stsCreds.stsExternalId.get)\n+        .build()\n+    }\n+    // No external ID, basic keypair for long-lived creds\n+    assertResult(stsCreds.copy(\n+      stsExternalId = None)) {\n+      builder.stsCredentials(stsCreds.stsRoleArn, stsCreds.stsSessionName)\n+        .basicCredentials(basicCreds.awsAccessKeyId, basicCreds.awsSecretKey)\n+        .build()\n+    }\n+    // Basic keypair for long-lived creds\n+    assertResult(stsCreds) {\n+      builder.stsCredentials(\n+          stsCreds.stsRoleArn,\n+          stsCreds.stsSessionName,\n+          stsCreds.stsExternalId.get)\n+        .basicCredentials(basicCreds.awsAccessKeyId, basicCreds.awsSecretKey)\n+        .build()\n+    }\n+    // Order shouldn't matter\n+    assertResult(stsCreds) {\n+      builder.basicCredentials(basicCreds.awsAccessKeyId, basicCreds.awsSecretKey)\n+        .stsCredentials(\n+          stsCreds.stsRoleArn,\n+          stsCreds.stsSessionName,\n+          stsCreds.stsExternalId.get)\n+        .build()\n+    }\n+  }\n+\n+  test(\"SparkAWSCredentials classes should be serializable\") {\n+    Utils.deserialize[BasicCredentials]("
  }, {
    "author": {
      "login": "budde"
    },
    "body": "Will do",
    "commit": "03f91dadb3878aa47f2a134e3e1b8d46aadd3b47",
    "createdAt": "2017-03-23T19:15:13Z",
    "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import org.apache.spark.streaming.TestSuiteBase\n+import org.apache.spark.util.Utils\n+\n+class SparkAWSCredentialsBuilderSuite extends TestSuiteBase {\n+  private def builder = SparkAWSCredentials.builder\n+\n+  private val basicCreds = BasicCredentials(\n+    awsAccessKeyId = \"a-very-nice-access-key\",\n+    awsSecretKey = \"a-very-nice-secret-key\")\n+\n+  private val stsCreds = STSCredentials(\n+    stsRoleArn = \"a-very-nice-role-arn\",\n+    stsSessionName = \"a-very-nice-secret-key\",\n+    stsExternalId = Option(\"a-very-nice-external-id\"),\n+    longLivedCredsProvider = basicCreds)\n+\n+  test(\"should build DefaultCredentials when given no params\") {\n+    assert(builder.build() == DefaultCredentials)\n+  }\n+\n+  test(\"should build BasicCredentials\") {\n+    assertResult(basicCreds) {\n+      builder.basicCredentials(basicCreds.awsAccessKeyId, basicCreds.awsSecretKey)\n+        .build()\n+    }\n+  }\n+\n+  test(\"should build STSCredentials\") {\n+    // No external ID, default long-lived creds\n+    assertResult(stsCreds.copy(\n+      stsExternalId = None,\n+      longLivedCredsProvider = DefaultCredentials)) {\n+      builder.stsCredentials(stsCreds.stsRoleArn, stsCreds.stsSessionName)\n+        .build()\n+    }\n+    // Default long-lived creds\n+    assertResult(stsCreds.copy(\n+      longLivedCredsProvider = DefaultCredentials)) {\n+      builder.stsCredentials(\n+          stsCreds.stsRoleArn,\n+          stsCreds.stsSessionName,\n+          stsCreds.stsExternalId.get)\n+        .build()\n+    }\n+    // No external ID, basic keypair for long-lived creds\n+    assertResult(stsCreds.copy(\n+      stsExternalId = None)) {\n+      builder.stsCredentials(stsCreds.stsRoleArn, stsCreds.stsSessionName)\n+        .basicCredentials(basicCreds.awsAccessKeyId, basicCreds.awsSecretKey)\n+        .build()\n+    }\n+    // Basic keypair for long-lived creds\n+    assertResult(stsCreds) {\n+      builder.stsCredentials(\n+          stsCreds.stsRoleArn,\n+          stsCreds.stsSessionName,\n+          stsCreds.stsExternalId.get)\n+        .basicCredentials(basicCreds.awsAccessKeyId, basicCreds.awsSecretKey)\n+        .build()\n+    }\n+    // Order shouldn't matter\n+    assertResult(stsCreds) {\n+      builder.basicCredentials(basicCreds.awsAccessKeyId, basicCreds.awsSecretKey)\n+        .stsCredentials(\n+          stsCreds.stsRoleArn,\n+          stsCreds.stsSessionName,\n+          stsCreds.stsExternalId.get)\n+        .build()\n+    }\n+  }\n+\n+  test(\"SparkAWSCredentials classes should be serializable\") {\n+    Utils.deserialize[BasicCredentials]("
  }],
  "prId": 17250
}]