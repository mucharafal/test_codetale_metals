[{
  "comments": [{
    "author": {
      "login": "budde"
    },
    "body": "Why not just roll this into the previous check? There's a lot of code duplication going on for no other reason than to check that another config value is passed properly.",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-06-01T20:41:49Z",
    "diffHunk": "@@ -112,4 +112,38 @@ class KinesisInputDStreamBuilderSuite extends TestSuiteBase with BeforeAndAfterE\n     assert(dstream.dynamoDBCreds == Option(customDynamoDBCreds))\n     assert(dstream.cloudWatchCreds == Option(customCloudWatchCreds))\n   }\n+\n+  test(\"should propagate kinesis fetch timestamp values to KinesisInputDStream\") {"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "yssharma"
    },
    "body": "@budde Added optional timestamp for resume, but passing as Some() doesn't seem very interesting. Passing a  date directly seems more intuitive. Thoughts ?",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-06-03T13:06:46Z",
    "diffHunk": "@@ -111,5 +110,28 @@ class KinesisInputDStreamBuilderSuite extends TestSuiteBase with BeforeAndAfterE\n     assert(dstream.kinesisCreds == customKinesisCreds)\n     assert(dstream.dynamoDBCreds == Option(customDynamoDBCreds))\n     assert(dstream.cloudWatchCreds == Option(customCloudWatchCreds))\n+\n+    val yesterday = DateUtils.addDays(new Date, -1)\n+    val dStreamFromTimestamp = builder\n+    .endpointUrl(customEndpointUrl)\n+    .regionName(customRegion)\n+    .initialPositionInStream(InitialPositionInStream.AT_TIMESTAMP, Some(yesterday))"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "please indent all these lines",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-06-05T18:47:24Z",
    "diffHunk": "@@ -111,5 +111,29 @@ class KinesisInputDStreamBuilderSuite extends TestSuiteBase with BeforeAndAfterE\n     assert(dstream.kinesisCreds == customKinesisCreds)\n     assert(dstream.dynamoDBCreds == Option(customDynamoDBCreds))\n     assert(dstream.cloudWatchCreds == Option(customCloudWatchCreds))\n+\n+    val yesterday = DateUtils.addDays(new Date, -1)\n+    val dStreamFromTimestamp = builder\n+    .endpointUrl(customEndpointUrl)"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "budde"
    },
    "body": "*nit* Think this would be sufficient:\r\n\r\n```scala\r\nassert(dstream.initialPosition == DEFAULT_INITIAL_POSITION)\r\n```",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-08-20T16:45:55Z",
    "diffHunk": "@@ -72,7 +70,8 @@ class KinesisInputDStreamBuilderSuite extends TestSuiteBase with BeforeAndAfterE\n     val dstream = builder.build()\n     assert(dstream.endpointUrl == DEFAULT_KINESIS_ENDPOINT_URL)\n     assert(dstream.regionName == DEFAULT_KINESIS_REGION_NAME)\n-    assert(dstream.initialPositionInStream == DEFAULT_INITIAL_POSITION_IN_STREAM)\n+    assert(dstream.initialPosition.initialPositionInStream"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "budde"
    },
    "body": "*nit* Again, I think this could be simplified to:\r\n\r\n```scala\r\nassert(dstream.initialPosition == customInitialPosition)\r\n```",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-08-20T16:46:34Z",
    "diffHunk": "@@ -104,12 +103,61 @@ class KinesisInputDStreamBuilderSuite extends TestSuiteBase with BeforeAndAfterE\n       .build()\n     assert(dstream.endpointUrl == customEndpointUrl)\n     assert(dstream.regionName == customRegion)\n-    assert(dstream.initialPositionInStream == customInitialPosition)\n+    assert(dstream.initialPosition.initialPositionInStream"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "budde"
    },
    "body": "*nit* Again, I think this could be simplified to:\r\n\r\n```scala\r\nassert(dstream.initialPosition == initialPositionAtTimestamp)\r\n```",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-08-20T16:47:40Z",
    "diffHunk": "@@ -104,12 +103,61 @@ class KinesisInputDStreamBuilderSuite extends TestSuiteBase with BeforeAndAfterE\n       .build()\n     assert(dstream.endpointUrl == customEndpointUrl)\n     assert(dstream.regionName == customRegion)\n-    assert(dstream.initialPositionInStream == customInitialPosition)\n+    assert(dstream.initialPosition.initialPositionInStream\n+      == customInitialPosition.initialPositionInStream)\n     assert(dstream.checkpointAppName == customAppName)\n     assert(dstream.checkpointInterval == customCheckpointInterval)\n     assert(dstream._storageLevel == customStorageLevel)\n     assert(dstream.kinesisCreds == customKinesisCreds)\n     assert(dstream.dynamoDBCreds == Option(customDynamoDBCreds))\n     assert(dstream.cloudWatchCreds == Option(customCloudWatchCreds))\n+\n+    // Testing with InitialPosition.atTimestamp\n+    val cal = Calendar.getInstance()\n+    cal.add(Calendar.DATE, -1)\n+    val timestamp = cal.getTime()\n+    val initialPositionAtTimestamp = InitialPosition.atTimestamp(timestamp)\n+\n+    val dstreamAtTimestamp = builder\n+      .endpointUrl(customEndpointUrl)\n+      .regionName(customRegion)\n+      .initialPosition(initialPositionAtTimestamp)\n+      .checkpointAppName(customAppName)\n+      .checkpointInterval(customCheckpointInterval)\n+      .storageLevel(customStorageLevel)\n+      .kinesisCredentials(customKinesisCreds)\n+      .dynamoDBCredentials(customDynamoDBCreds)\n+      .cloudWatchCredentials(customCloudWatchCreds)\n+      .build()\n+    assert(dstreamAtTimestamp.endpointUrl == customEndpointUrl)\n+    assert(dstreamAtTimestamp.regionName == customRegion)\n+    assert(dstreamAtTimestamp.initialPosition.initialPositionInStream"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "how is the following lines a different test?",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-12-12T03:48:55Z",
    "diffHunk": "@@ -101,12 +102,60 @@ class KinesisInputDStreamBuilderSuite extends TestSuiteBase with BeforeAndAfterE\n       .build()\n     assert(dstream.endpointUrl == customEndpointUrl)\n     assert(dstream.regionName == customRegion)\n-    assert(dstream.initialPositionInStream == customInitialPosition)\n+    assert(dstream.initialPosition == customInitialPosition)\n     assert(dstream.checkpointAppName == customAppName)\n     assert(dstream.checkpointInterval == customCheckpointInterval)\n     assert(dstream._storageLevel == customStorageLevel)\n     assert(dstream.kinesisCreds == customKinesisCreds)\n     assert(dstream.dynamoDBCreds == Option(customDynamoDBCreds))\n     assert(dstream.cloudWatchCreds == Option(customCloudWatchCreds))\n+\n+    // Testing with AtTimestamp\n+    val cal = Calendar.getInstance()\n+    cal.add(Calendar.DATE, -1)\n+    val timestamp = cal.getTime()\n+    val initialPositionAtTimestamp = AtTimestamp(timestamp)\n+\n+    val dstreamAtTimestamp = builder\n+      .endpointUrl(customEndpointUrl)\n+      .regionName(customRegion)\n+      .initialPosition(initialPositionAtTimestamp)\n+      .checkpointAppName(customAppName)\n+      .checkpointInterval(customCheckpointInterval)\n+      .storageLevel(customStorageLevel)\n+      .kinesisCredentials(customKinesisCreds)\n+      .dynamoDBCredentials(customDynamoDBCreds)\n+      .cloudWatchCredentials(customCloudWatchCreds)\n+      .build()\n+    assert(dstreamAtTimestamp.endpointUrl == customEndpointUrl)\n+    assert(dstreamAtTimestamp.regionName == customRegion)\n+    assert(dstreamAtTimestamp.initialPosition.initialPositionInStream\n+      == initialPositionAtTimestamp.initialPositionInStream)\n+    assert(\n+      dstreamAtTimestamp.initialPosition.asInstanceOf[AtTimestamp].timestamp.equals(timestamp))\n+    assert(dstreamAtTimestamp.checkpointAppName == customAppName)\n+    assert(dstreamAtTimestamp.checkpointInterval == customCheckpointInterval)\n+    assert(dstreamAtTimestamp._storageLevel == customStorageLevel)\n+    assert(dstreamAtTimestamp.kinesisCreds == customKinesisCreds)\n+    assert(dstreamAtTimestamp.dynamoDBCreds == Option(customDynamoDBCreds))\n+    assert(dstreamAtTimestamp.cloudWatchCreds == Option(customCloudWatchCreds))\n+\n+    // Testing with AtTimestamp\n+    val initialPositionAtTimestamp2 = AtTimestamp(timestamp)"
  }],
  "prId": 18029
}]