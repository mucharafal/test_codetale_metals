[{
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "could you add one more test where the `longLivedCredentialsProvider` is the `DefaultCredentialsProvider`?",
    "commit": "da18da0d98d1f4e433480de8df6f6c34b1e0fb39",
    "createdAt": "2017-02-07T19:01:09Z",
    "diffHunk": "@@ -62,9 +62,20 @@ class KinesisReceiverSuite extends TestSuiteBase with Matchers with BeforeAndAft\n     checkpointerMock = mock[IRecordProcessorCheckpointer]\n   }\n \n-  test(\"check serializability of SerializableAWSCredentials\") {\n-    Utils.deserialize[SerializableAWSCredentials](\n-      Utils.serialize(new SerializableAWSCredentials(\"x\", \"y\")))\n+  test(\"check serializability of credential provider classes\") {\n+    Utils.deserialize[BasicCredentialsProvider](\n+      Utils.serialize(BasicCredentialsProvider(\n+        awsAccessKeyId = \"x\",\n+        awsSecretKey = \"y\")))\n+\n+    Utils.deserialize[STSCredentialsProvider](\n+      Utils.serialize(STSCredentialsProvider(\n+        stsRoleArn = \"fakeArn\",\n+        stsSessionName = \"fakeSessionName\",\n+        stsExternalId = Some(\"fakeExternalId\"),\n+        longLivedCredsProvider = BasicCredentialsProvider(",
    "line": 33
  }, {
    "author": {
      "login": "brkyvz"
    },
    "body": "or simply serialize/deserialize the `DefaultCredentialsProvider`",
    "commit": "da18da0d98d1f4e433480de8df6f6c34b1e0fb39",
    "createdAt": "2017-02-07T19:01:28Z",
    "diffHunk": "@@ -62,9 +62,20 @@ class KinesisReceiverSuite extends TestSuiteBase with Matchers with BeforeAndAft\n     checkpointerMock = mock[IRecordProcessorCheckpointer]\n   }\n \n-  test(\"check serializability of SerializableAWSCredentials\") {\n-    Utils.deserialize[SerializableAWSCredentials](\n-      Utils.serialize(new SerializableAWSCredentials(\"x\", \"y\")))\n+  test(\"check serializability of credential provider classes\") {\n+    Utils.deserialize[BasicCredentialsProvider](\n+      Utils.serialize(BasicCredentialsProvider(\n+        awsAccessKeyId = \"x\",\n+        awsSecretKey = \"y\")))\n+\n+    Utils.deserialize[STSCredentialsProvider](\n+      Utils.serialize(STSCredentialsProvider(\n+        stsRoleArn = \"fakeArn\",\n+        stsSessionName = \"fakeSessionName\",\n+        stsExternalId = Some(\"fakeExternalId\"),\n+        longLivedCredsProvider = BasicCredentialsProvider(",
    "line": 33
  }, {
    "author": {
      "login": "budde"
    },
    "body": "I'll add another test ```longLivedCredentialsProvider.``` I ran into errors making similar ser/de test for ```DefaultCredentialsProvider``` since it's a case ~~class~~ object.",
    "commit": "da18da0d98d1f4e433480de8df6f6c34b1e0fb39",
    "createdAt": "2017-02-07T19:22:16Z",
    "diffHunk": "@@ -62,9 +62,20 @@ class KinesisReceiverSuite extends TestSuiteBase with Matchers with BeforeAndAft\n     checkpointerMock = mock[IRecordProcessorCheckpointer]\n   }\n \n-  test(\"check serializability of SerializableAWSCredentials\") {\n-    Utils.deserialize[SerializableAWSCredentials](\n-      Utils.serialize(new SerializableAWSCredentials(\"x\", \"y\")))\n+  test(\"check serializability of credential provider classes\") {\n+    Utils.deserialize[BasicCredentialsProvider](\n+      Utils.serialize(BasicCredentialsProvider(\n+        awsAccessKeyId = \"x\",\n+        awsSecretKey = \"y\")))\n+\n+    Utils.deserialize[STSCredentialsProvider](\n+      Utils.serialize(STSCredentialsProvider(\n+        stsRoleArn = \"fakeArn\",\n+        stsSessionName = \"fakeSessionName\",\n+        stsExternalId = Some(\"fakeExternalId\"),\n+        longLivedCredsProvider = BasicCredentialsProvider(",
    "line": 33
  }],
  "prId": 16744
}]