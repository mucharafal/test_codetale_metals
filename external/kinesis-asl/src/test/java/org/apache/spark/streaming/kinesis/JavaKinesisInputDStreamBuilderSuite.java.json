[{
  "comments": [{
    "author": {
      "login": "budde"
    },
    "body": "Indentation is inconsistent with lines 45-53",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-06-01T20:42:31Z",
    "diffHunk": "@@ -57,6 +58,26 @@ public void testJavaKinesisDStreamBuilder() {\n     assert(kinesisDStream.checkpointAppName() == appName);\n     assert(kinesisDStream.checkpointInterval() == checkpointInterval);\n     assert(kinesisDStream._storageLevel() == storageLevel);\n+\n+    Date yesterday = DateUtils.addDays(new Date(), -1);\n+    KinesisInputDStream<byte[]> kinesisDStreamFromTimestamp = KinesisInputDStream.builder()\n+            .streamingContext(ssc)\n+            .streamName(streamName)\n+            .endpointUrl(endpointUrl)\n+            .regionName(region)\n+            .initialPositionInStream(yesterday)\n+            .checkpointAppName(appName)\n+            .checkpointInterval(checkpointInterval)\n+            .storageLevel(storageLevel)\n+            .build();"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "yssharma"
    },
    "body": "@budde not having the overloaded methods introduces this backward compatibility issue which I didn't like much. What are your thoughts on this ?",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-06-03T12:51:04Z",
    "diffHunk": "@@ -45,7 +46,7 @@ public void testJavaKinesisDStreamBuilder() {\n       .streamName(streamName)\n       .endpointUrl(endpointUrl)\n       .regionName(region)\n-      .initialPositionInStream(initialPosition)\n+      .initialPositionInStream(initialPosition, scala.Option.apply(null))"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "ditto on API change",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-10-10T21:00:05Z",
    "diffHunk": "@@ -45,15 +43,15 @@ public void testJavaKinesisDStreamBuilder() {\n       .streamName(streamName)\n       .endpointUrl(endpointUrl)\n       .regionName(region)\n-      .initialPositionInStream(initialPosition)",
    "line": 65
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "nit: indentation should be 2 spaces.",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-12-25T07:56:20Z",
    "diffHunk": "@@ -45,18 +44,90 @@ public void testJavaKinesisDStreamBuilder() {\n       .streamName(streamName)\n       .endpointUrl(endpointUrl)\n       .regionName(region)\n-      .initialPositionInStream(initialPosition)\n+      .initialPosition(initialPosition)\n       .checkpointAppName(appName)\n       .checkpointInterval(checkpointInterval)\n       .storageLevel(storageLevel)\n       .build();\n     assert(kinesisDStream.streamName() == streamName);\n     assert(kinesisDStream.endpointUrl() == endpointUrl);\n     assert(kinesisDStream.regionName() == region);\n-    assert(kinesisDStream.initialPositionInStream() == initialPosition);\n+    assert(kinesisDStream.initialPosition().getPosition() == initialPosition.getPosition());\n+    assert(kinesisDStream.checkpointAppName() == appName);\n+    assert(kinesisDStream.checkpointInterval() == checkpointInterval);\n+    assert(kinesisDStream._storageLevel() == storageLevel);\n+    ssc.stop();\n+  }\n+\n+  /**\n+   * Test to ensure that the old API for InitialPositionInStream\n+   * is supported in KinesisDStream.Builder.\n+   * This test would be removed when we deprecate the KinesisUtils.\n+   */\n+  @Test\n+  public void testJavaKinesisDStreamBuilderOldApi() {\n+    String streamName = \"a-very-nice-stream-name\";\n+    String endpointUrl = \"https://kinesis.us-west-2.amazonaws.com\";\n+    String region = \"us-west-2\";\n+    String appName = \"a-very-nice-kinesis-app\";\n+    Duration checkpointInterval = Seconds.apply(30);\n+    StorageLevel storageLevel = StorageLevel.MEMORY_ONLY();\n+\n+    KinesisInputDStream<byte[]> kinesisDStream = KinesisInputDStream.builder()\n+            .streamingContext(ssc)"
  }],
  "prId": 18029
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "This test could be moved to become a Scala test instead, using \r\n```scala\r\nintercept[UnsupportedOperationException] {\r\n  ...\r\n}\r\n```",
    "commit": "bdd080c2ea7b3c2f215e1ca6a6614ade3f074601",
    "createdAt": "2017-12-25T07:57:22Z",
    "diffHunk": "@@ -45,18 +44,90 @@ public void testJavaKinesisDStreamBuilder() {\n       .streamName(streamName)\n       .endpointUrl(endpointUrl)\n       .regionName(region)\n-      .initialPositionInStream(initialPosition)\n+      .initialPosition(initialPosition)\n       .checkpointAppName(appName)\n       .checkpointInterval(checkpointInterval)\n       .storageLevel(storageLevel)\n       .build();\n     assert(kinesisDStream.streamName() == streamName);\n     assert(kinesisDStream.endpointUrl() == endpointUrl);\n     assert(kinesisDStream.regionName() == region);\n-    assert(kinesisDStream.initialPositionInStream() == initialPosition);\n+    assert(kinesisDStream.initialPosition().getPosition() == initialPosition.getPosition());\n+    assert(kinesisDStream.checkpointAppName() == appName);\n+    assert(kinesisDStream.checkpointInterval() == checkpointInterval);\n+    assert(kinesisDStream._storageLevel() == storageLevel);\n+    ssc.stop();\n+  }\n+\n+  /**\n+   * Test to ensure that the old API for InitialPositionInStream\n+   * is supported in KinesisDStream.Builder.\n+   * This test would be removed when we deprecate the KinesisUtils.\n+   */\n+  @Test\n+  public void testJavaKinesisDStreamBuilderOldApi() {\n+    String streamName = \"a-very-nice-stream-name\";\n+    String endpointUrl = \"https://kinesis.us-west-2.amazonaws.com\";\n+    String region = \"us-west-2\";\n+    String appName = \"a-very-nice-kinesis-app\";\n+    Duration checkpointInterval = Seconds.apply(30);\n+    StorageLevel storageLevel = StorageLevel.MEMORY_ONLY();\n+\n+    KinesisInputDStream<byte[]> kinesisDStream = KinesisInputDStream.builder()\n+            .streamingContext(ssc)\n+            .streamName(streamName)\n+            .endpointUrl(endpointUrl)\n+            .regionName(region)\n+            .initialPositionInStream(InitialPositionInStream.LATEST)\n+            .checkpointAppName(appName)\n+            .checkpointInterval(checkpointInterval)\n+            .storageLevel(storageLevel)\n+            .build();\n+    assert(kinesisDStream.streamName() == streamName);\n+    assert(kinesisDStream.endpointUrl() == endpointUrl);\n+    assert(kinesisDStream.regionName() == region);\n+    assert(kinesisDStream.initialPosition().getPosition() == InitialPositionInStream.LATEST);\n     assert(kinesisDStream.checkpointAppName() == appName);\n     assert(kinesisDStream.checkpointInterval() == checkpointInterval);\n     assert(kinesisDStream._storageLevel() == storageLevel);\n     ssc.stop();\n   }\n+\n+  /**\n+   * Test to ensure that the old API for InitialPositionInStream\n+   * is supported in KinesisDStream.Builder.\n+   * Test old API doesn't support the InitialPositionInStream.AT_TIMESTAMP.\n+   * This test would be removed when we deprecate the KinesisUtils.\n+   */\n+  @Test\n+  public void testJavaKinesisDStreamBuilderOldApiAtTimestamp() {"
  }],
  "prId": 18029
}]