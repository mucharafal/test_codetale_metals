[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Please provide complete Java documentation on how these functions are used. Refer to other XYZUtils to get an idea.\n",
    "commit": "faa1743d8e4f6a2d66f4825e5400372e89a3ba7d",
    "createdAt": "2014-03-26T01:40:34Z",
    "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import org.apache.spark.streaming.StreamingContext\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+import org.apache.spark.streaming.api.java.JavaDStream\n+\n+object KinesisUtils {\n+\n+  def createStream(\n+      ssc: StreamingContext,\n+      accesskey:String=\"\",\n+      accessSecretKey:String=\"\",\n+      kinesisStream:String,\n+      kinesisEndpoint:String=\"https://kinesis.us-east-1.amazonaws.com\", \n+      storageLevel: StorageLevel = StorageLevel.MEMORY_ONLY_SER_2\n+    ): DStream[String] = {\n+    new KinesisInputDStream(ssc, accesskey,accessSecretKey,kinesisStream,kinesisEndpoint, storageLevel)\n+  }\n+  def createStream("
  }],
  "prId": 223
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Scala style issue.\n",
    "commit": "faa1743d8e4f6a2d66f4825e5400372e89a3ba7d",
    "createdAt": "2014-03-26T01:45:18Z",
    "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kinesis\n+\n+import org.apache.spark.streaming.StreamingContext\n+import org.apache.spark.streaming.dstream.DStream\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.streaming.api.java.JavaStreamingContext\n+import org.apache.spark.streaming.api.java.JavaDStream\n+\n+object KinesisUtils {\n+\n+  def createStream(\n+      ssc: StreamingContext,\n+      accesskey:String=\"\",\n+      accessSecretKey:String=\"\",\n+      kinesisStream:String,\n+      kinesisEndpoint:String=\"https://kinesis.us-east-1.amazonaws.com\", \n+      storageLevel: StorageLevel = StorageLevel.MEMORY_ONLY_SER_2\n+    ): DStream[String] = {\n+    new KinesisInputDStream(ssc, accesskey,accessSecretKey,kinesisStream,kinesisEndpoint, storageLevel)\n+  }\n+  def createStream(\n+      jssc: JavaStreamingContext,\n+      accesskey:String,\n+      accessSecretKey:String,\n+      kinesisStream:String,\n+      kinesisEndpoint:String, \n+      storageLevel: StorageLevel\n+    ): JavaDStream[String] = {\n+    new KinesisInputDStream(jssc.ssc, accesskey,accessSecretKey,kinesisStream,kinesisEndpoint, storageLevel)"
  }],
  "prId": 223
}]