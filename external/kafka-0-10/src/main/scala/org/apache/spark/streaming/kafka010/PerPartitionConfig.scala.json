[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "if you want to avoid breaking apis, i'd make this an abstract class rather than a trait\n",
    "commit": "9e0e39125ba8d4f062bcd11a84c21c7a34b125d8",
    "createdAt": "2016-11-04T22:27:24Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka010\n+\n+import org.apache.kafka.common.TopicPartition\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.annotation.Experimental\n+\n+/**\n+ * :: Experimental ::\n+ * Interface for user-supplied configurations that can't otherwise be set via Spark properties,\n+ * because they need tweaking on a per-partition basis,\n+ */\n+@Experimental\n+trait PerPartitionConfig extends Serializable {"
  }],
  "prId": 15132
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "you don't need to () here\n",
    "commit": "9e0e39125ba8d4f062bcd11a84c21c7a34b125d8",
    "createdAt": "2016-11-05T07:03:28Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka010\n+\n+import org.apache.kafka.common.TopicPartition\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.annotation.Experimental\n+\n+/**\n+ * :: Experimental ::\n+ * Interface for user-supplied configurations that can't otherwise be set via Spark properties,\n+ * because they need tweaking on a per-partition basis,\n+ */\n+@Experimental\n+abstract class PerPartitionConfig() extends Serializable {"
  }],
  "prId": 15132
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "dumb question - can this ever overflow?\n",
    "commit": "9e0e39125ba8d4f062bcd11a84c21c7a34b125d8",
    "createdAt": "2016-11-05T07:06:02Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka010\n+\n+import org.apache.kafka.common.TopicPartition\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.annotation.Experimental\n+\n+/**\n+ * :: Experimental ::\n+ * Interface for user-supplied configurations that can't otherwise be set via Spark properties,\n+ * because they need tweaking on a per-partition basis,\n+ */\n+@Experimental\n+abstract class PerPartitionConfig() extends Serializable {\n+  /**\n+   *  Maximum rate (number of records per second) at which data will be read\n+   *  from each Kafka partition.\n+   */\n+  def maxRatePerPartition(topicPartition: TopicPartition): Int"
  }, {
    "author": {
      "login": "koeninger"
    },
    "body": "That's a reasonable question.  2 billion messages per second on a single thread would be pretty extreme, but I don't think it hurts us to change this to a long.\n",
    "commit": "9e0e39125ba8d4f062bcd11a84c21c7a34b125d8",
    "createdAt": "2016-11-07T16:23:25Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka010\n+\n+import org.apache.kafka.common.TopicPartition\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.annotation.Experimental\n+\n+/**\n+ * :: Experimental ::\n+ * Interface for user-supplied configurations that can't otherwise be set via Spark properties,\n+ * because they need tweaking on a per-partition basis,\n+ */\n+@Experimental\n+abstract class PerPartitionConfig() extends Serializable {\n+  /**\n+   *  Maximum rate (number of records per second) at which data will be read\n+   *  from each Kafka partition.\n+   */\n+  def maxRatePerPartition(topicPartition: TopicPartition): Int"
  }],
  "prId": 15132
}]