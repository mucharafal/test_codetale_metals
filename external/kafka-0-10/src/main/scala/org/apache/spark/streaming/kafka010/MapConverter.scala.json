[{
  "comments": [{
    "author": {
      "login": "koeninger"
    },
    "body": "Where were you actually running into an issue with this?  I tested \n\n```\nnew ju.HashMap[String, Object](map.asJava)\n```\n\nto roundtrip through serialization correctly, and from a quick look at the definition of that java hashmap constructor I think it's doing basically the same thing as this.\n",
    "commit": "e5026f7e9ccc575744bc108cbe02a6fac0c2cdad",
    "createdAt": "2016-06-30T15:27:44Z",
    "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kafka010\n+\n+import scala.collection.JavaConverters._\n+\n+private[kafka010] object MapConverter {\n+  /** Convert to Java Map, while ensuring that the map is serializable */\n+  def asJavaMap[K, V](scalaMap: collection.Map[K, V]): java.util.Map[K, V] = {\n+    // Putting in a new map ensures that there are no intermediate wrappers that\n+    // could give rise to serialization issues\n+    val javaMap = new java.util.HashMap[K, V]()\n+    javaMap.putAll(scalaMap.asJava)",
    "line": 27
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "Right. I forgot that constructor of hashmap. Let me fix this. \n",
    "commit": "e5026f7e9ccc575744bc108cbe02a6fac0c2cdad",
    "createdAt": "2016-06-30T17:45:38Z",
    "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kafka010\n+\n+import scala.collection.JavaConverters._\n+\n+private[kafka010] object MapConverter {\n+  /** Convert to Java Map, while ensuring that the map is serializable */\n+  def asJavaMap[K, V](scalaMap: collection.Map[K, V]): java.util.Map[K, V] = {\n+    // Putting in a new map ensures that there are no intermediate wrappers that\n+    // could give rise to serialization issues\n+    val javaMap = new java.util.HashMap[K, V]()\n+    javaMap.putAll(scalaMap.asJava)",
    "line": 27
  }, {
    "author": {
      "login": "koeninger"
    },
    "body": "@tdas Can you take a look at my linked alternative PR before putting much more time into this one?\n",
    "commit": "e5026f7e9ccc575744bc108cbe02a6fac0c2cdad",
    "createdAt": "2016-06-30T17:55:55Z",
    "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.kafka010\n+\n+import scala.collection.JavaConverters._\n+\n+private[kafka010] object MapConverter {\n+  /** Convert to Java Map, while ensuring that the map is serializable */\n+  def asJavaMap[K, V](scalaMap: collection.Map[K, V]): java.util.Map[K, V] = {\n+    // Putting in a new map ensures that there are no intermediate wrappers that\n+    // could give rise to serialization issues\n+    val javaMap = new java.util.HashMap[K, V]()\n+    javaMap.putAll(scalaMap.asJava)",
    "line": 27
  }],
  "prId": 13996
}]