[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Why does this need to have class tags? That is forcing the keyClass and valueClass params in the `create()` method.\n",
    "commit": "cffb0e0fb89808732c3ab3c1c7d83049549e2e2d",
    "createdAt": "2016-06-27T07:10:42Z",
    "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka\n+\n+import java.{ util => ju }\n+\n+import scala.collection.JavaConverters._\n+import scala.reflect.ClassTag\n+\n+import org.apache.kafka.clients.consumer._\n+import org.apache.kafka.common.TopicPartition\n+\n+/**\n+ * Choice of how to create and configure underlying Kafka Consumers on driver and executors.\n+ * Kafka 0.10 consumers can require additional, sometimes complex, setup after object\n+ *  instantiation. This interface encapsulates that process, and allows it to be checkpointed.\n+ * @tparam K type of Kafka message key\n+ * @tparam V type of Kafka message value\n+ */\n+trait ConsumerStrategy[K, V] {\n+  /**\n+   * Kafka <a href=\"http://kafka.apache.org/documentation.htmll#newconsumerconfigs\">\n+   * configuration parameters</a> to be used on executors. Requires \"bootstrap.servers\" to be set\n+   * with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+   */\n+  def executorKafkaParams: ju.Map[String, Object]\n+\n+  /**\n+   * Must return a fully configured Kafka Consumer, including subscribed or assigned topics.\n+   * This consumer will be used on the driver to query for offsets only, not messages.\n+   * @param currentOffsets A map from TopicPartition to offset, indicating how far the driver\n+   * has successfully read.  Will be empty on initial start, possibly non-empty on restart from\n+   * checkpoint.\n+   * TODO: is strategy or dstream responsible for seeking on checkpoint restart\n+   */\n+  def onStart(currentOffsets: Map[TopicPartition, Long]): Consumer[K, V]\n+}\n+\n+/**\n+ * Subscribe to a collection of topics.\n+ * @param topics collection of topics to subscribe\n+ * @param kafkaParams Kafka\n+ * <a href=\"http://kafka.apache.org/documentation.htmll#newconsumerconfigs\">\n+ * configuration parameters</a> to be used on driver. The same parameters will be used on executors,\n+ * with minor automatic modifications applied.\n+ *  Requires \"bootstrap.servers\" to be set\n+ * with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+ */\n+case class Subscribe[K: ClassTag, V: ClassTag]("
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "Also lets make the constructors private. Will be easier for future compatibility.\n",
    "commit": "cffb0e0fb89808732c3ab3c1c7d83049549e2e2d",
    "createdAt": "2016-06-27T07:15:35Z",
    "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka\n+\n+import java.{ util => ju }\n+\n+import scala.collection.JavaConverters._\n+import scala.reflect.ClassTag\n+\n+import org.apache.kafka.clients.consumer._\n+import org.apache.kafka.common.TopicPartition\n+\n+/**\n+ * Choice of how to create and configure underlying Kafka Consumers on driver and executors.\n+ * Kafka 0.10 consumers can require additional, sometimes complex, setup after object\n+ *  instantiation. This interface encapsulates that process, and allows it to be checkpointed.\n+ * @tparam K type of Kafka message key\n+ * @tparam V type of Kafka message value\n+ */\n+trait ConsumerStrategy[K, V] {\n+  /**\n+   * Kafka <a href=\"http://kafka.apache.org/documentation.htmll#newconsumerconfigs\">\n+   * configuration parameters</a> to be used on executors. Requires \"bootstrap.servers\" to be set\n+   * with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+   */\n+  def executorKafkaParams: ju.Map[String, Object]\n+\n+  /**\n+   * Must return a fully configured Kafka Consumer, including subscribed or assigned topics.\n+   * This consumer will be used on the driver to query for offsets only, not messages.\n+   * @param currentOffsets A map from TopicPartition to offset, indicating how far the driver\n+   * has successfully read.  Will be empty on initial start, possibly non-empty on restart from\n+   * checkpoint.\n+   * TODO: is strategy or dstream responsible for seeking on checkpoint restart\n+   */\n+  def onStart(currentOffsets: Map[TopicPartition, Long]): Consumer[K, V]\n+}\n+\n+/**\n+ * Subscribe to a collection of topics.\n+ * @param topics collection of topics to subscribe\n+ * @param kafkaParams Kafka\n+ * <a href=\"http://kafka.apache.org/documentation.htmll#newconsumerconfigs\">\n+ * configuration parameters</a> to be used on driver. The same parameters will be used on executors,\n+ * with minor automatic modifications applied.\n+ *  Requires \"bootstrap.servers\" to be set\n+ * with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+ */\n+case class Subscribe[K: ClassTag, V: ClassTag]("
  }, {
    "author": {
      "login": "koeninger"
    },
    "body": "Pretty sure this needs class tags because the underlying consumer that its creating is parameterized on those classes, but I can test it out\n",
    "commit": "cffb0e0fb89808732c3ab3c1c7d83049549e2e2d",
    "createdAt": "2016-06-27T13:52:38Z",
    "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka\n+\n+import java.{ util => ju }\n+\n+import scala.collection.JavaConverters._\n+import scala.reflect.ClassTag\n+\n+import org.apache.kafka.clients.consumer._\n+import org.apache.kafka.common.TopicPartition\n+\n+/**\n+ * Choice of how to create and configure underlying Kafka Consumers on driver and executors.\n+ * Kafka 0.10 consumers can require additional, sometimes complex, setup after object\n+ *  instantiation. This interface encapsulates that process, and allows it to be checkpointed.\n+ * @tparam K type of Kafka message key\n+ * @tparam V type of Kafka message value\n+ */\n+trait ConsumerStrategy[K, V] {\n+  /**\n+   * Kafka <a href=\"http://kafka.apache.org/documentation.htmll#newconsumerconfigs\">\n+   * configuration parameters</a> to be used on executors. Requires \"bootstrap.servers\" to be set\n+   * with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+   */\n+  def executorKafkaParams: ju.Map[String, Object]\n+\n+  /**\n+   * Must return a fully configured Kafka Consumer, including subscribed or assigned topics.\n+   * This consumer will be used on the driver to query for offsets only, not messages.\n+   * @param currentOffsets A map from TopicPartition to offset, indicating how far the driver\n+   * has successfully read.  Will be empty on initial start, possibly non-empty on restart from\n+   * checkpoint.\n+   * TODO: is strategy or dstream responsible for seeking on checkpoint restart\n+   */\n+  def onStart(currentOffsets: Map[TopicPartition, Long]): Consumer[K, V]\n+}\n+\n+/**\n+ * Subscribe to a collection of topics.\n+ * @param topics collection of topics to subscribe\n+ * @param kafkaParams Kafka\n+ * <a href=\"http://kafka.apache.org/documentation.htmll#newconsumerconfigs\">\n+ * configuration parameters</a> to be used on driver. The same parameters will be used on executors,\n+ * with minor automatic modifications applied.\n+ *  Requires \"bootstrap.servers\" to be set\n+ * with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+ */\n+case class Subscribe[K: ClassTag, V: ClassTag]("
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "The KafkaConsumer class and Consumer interface seems to be written in Java. So I dont think there is a real need for ClassTags. Please check it out, I may very well be missing something.\n",
    "commit": "cffb0e0fb89808732c3ab3c1c7d83049549e2e2d",
    "createdAt": "2016-06-27T18:26:23Z",
    "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka\n+\n+import java.{ util => ju }\n+\n+import scala.collection.JavaConverters._\n+import scala.reflect.ClassTag\n+\n+import org.apache.kafka.clients.consumer._\n+import org.apache.kafka.common.TopicPartition\n+\n+/**\n+ * Choice of how to create and configure underlying Kafka Consumers on driver and executors.\n+ * Kafka 0.10 consumers can require additional, sometimes complex, setup after object\n+ *  instantiation. This interface encapsulates that process, and allows it to be checkpointed.\n+ * @tparam K type of Kafka message key\n+ * @tparam V type of Kafka message value\n+ */\n+trait ConsumerStrategy[K, V] {\n+  /**\n+   * Kafka <a href=\"http://kafka.apache.org/documentation.htmll#newconsumerconfigs\">\n+   * configuration parameters</a> to be used on executors. Requires \"bootstrap.servers\" to be set\n+   * with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+   */\n+  def executorKafkaParams: ju.Map[String, Object]\n+\n+  /**\n+   * Must return a fully configured Kafka Consumer, including subscribed or assigned topics.\n+   * This consumer will be used on the driver to query for offsets only, not messages.\n+   * @param currentOffsets A map from TopicPartition to offset, indicating how far the driver\n+   * has successfully read.  Will be empty on initial start, possibly non-empty on restart from\n+   * checkpoint.\n+   * TODO: is strategy or dstream responsible for seeking on checkpoint restart\n+   */\n+  def onStart(currentOffsets: Map[TopicPartition, Long]): Consumer[K, V]\n+}\n+\n+/**\n+ * Subscribe to a collection of topics.\n+ * @param topics collection of topics to subscribe\n+ * @param kafkaParams Kafka\n+ * <a href=\"http://kafka.apache.org/documentation.htmll#newconsumerconfigs\">\n+ * configuration parameters</a> to be used on driver. The same parameters will be used on executors,\n+ * with minor automatic modifications applied.\n+ *  Requires \"bootstrap.servers\" to be set\n+ * with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+ */\n+case class Subscribe[K: ClassTag, V: ClassTag]("
  }],
  "prId": 11863
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "nit: wrong indent\n\nwould be nice to have an apply for scala maps.\n",
    "commit": "cffb0e0fb89808732c3ab3c1c7d83049549e2e2d",
    "createdAt": "2016-06-27T07:17:33Z",
    "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka\n+\n+import java.{ util => ju }\n+\n+import scala.collection.JavaConverters._\n+import scala.reflect.ClassTag\n+\n+import org.apache.kafka.clients.consumer._\n+import org.apache.kafka.common.TopicPartition\n+\n+/**\n+ * Choice of how to create and configure underlying Kafka Consumers on driver and executors.\n+ * Kafka 0.10 consumers can require additional, sometimes complex, setup after object\n+ *  instantiation. This interface encapsulates that process, and allows it to be checkpointed.\n+ * @tparam K type of Kafka message key\n+ * @tparam V type of Kafka message value\n+ */\n+trait ConsumerStrategy[K, V] {\n+  /**\n+   * Kafka <a href=\"http://kafka.apache.org/documentation.htmll#newconsumerconfigs\">\n+   * configuration parameters</a> to be used on executors. Requires \"bootstrap.servers\" to be set\n+   * with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+   */\n+  def executorKafkaParams: ju.Map[String, Object]\n+\n+  /**\n+   * Must return a fully configured Kafka Consumer, including subscribed or assigned topics.\n+   * This consumer will be used on the driver to query for offsets only, not messages.\n+   * @param currentOffsets A map from TopicPartition to offset, indicating how far the driver\n+   * has successfully read.  Will be empty on initial start, possibly non-empty on restart from\n+   * checkpoint.\n+   * TODO: is strategy or dstream responsible for seeking on checkpoint restart\n+   */\n+  def onStart(currentOffsets: Map[TopicPartition, Long]): Consumer[K, V]\n+}\n+\n+/**\n+ * Subscribe to a collection of topics.\n+ * @param topics collection of topics to subscribe\n+ * @param kafkaParams Kafka\n+ * <a href=\"http://kafka.apache.org/documentation.htmll#newconsumerconfigs\">\n+ * configuration parameters</a> to be used on driver. The same parameters will be used on executors,\n+ * with minor automatic modifications applied.\n+ *  Requires \"bootstrap.servers\" to be set\n+ * with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+ */\n+case class Subscribe[K: ClassTag, V: ClassTag](\n+    topics: ju.Collection[java.lang.String],\n+    kafkaParams: ju.Map[String, Object]\n+  ) extends ConsumerStrategy[K, V] {\n+\n+  def executorKafkaParams: ju.Map[String, Object] = kafkaParams\n+\n+  def onStart(currentOffsets: Map[TopicPartition, Long]): Consumer[K, V] = {\n+    val consumer = new KafkaConsumer[K, V](kafkaParams)\n+    consumer.subscribe(topics)\n+    consumer\n+  }\n+}\n+\n+object Subscribe {\n+  def create[K, V](\n+      keyClass: Class[K],\n+      valueClass: Class[V],\n+      topics: ju.Collection[java.lang.String],\n+      kafkaParams: ju.Map[String, Object]\n+  ): Subscribe[K, V] = {"
  }],
  "prId": 11863
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Please do not add Todo in the public doc.\n",
    "commit": "cffb0e0fb89808732c3ab3c1c7d83049549e2e2d",
    "createdAt": "2016-06-27T09:48:35Z",
    "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka\n+\n+import java.{ util => ju }\n+\n+import scala.collection.JavaConverters._\n+import scala.reflect.ClassTag\n+\n+import org.apache.kafka.clients.consumer._\n+import org.apache.kafka.common.TopicPartition\n+\n+/**\n+ * Choice of how to create and configure underlying Kafka Consumers on driver and executors.\n+ * Kafka 0.10 consumers can require additional, sometimes complex, setup after object\n+ *  instantiation. This interface encapsulates that process, and allows it to be checkpointed.\n+ * @tparam K type of Kafka message key\n+ * @tparam V type of Kafka message value\n+ */\n+trait ConsumerStrategy[K, V] {\n+  /**\n+   * Kafka <a href=\"http://kafka.apache.org/documentation.htmll#newconsumerconfigs\">\n+   * configuration parameters</a> to be used on executors. Requires \"bootstrap.servers\" to be set\n+   * with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+   */\n+  def executorKafkaParams: ju.Map[String, Object]\n+\n+  /**\n+   * Must return a fully configured Kafka Consumer, including subscribed or assigned topics.\n+   * This consumer will be used on the driver to query for offsets only, not messages.\n+   * @param currentOffsets A map from TopicPartition to offset, indicating how far the driver\n+   * has successfully read.  Will be empty on initial start, possibly non-empty on restart from\n+   * checkpoint.\n+   * TODO: is strategy or dstream responsible for seeking on checkpoint restart"
  }, {
    "author": {
      "login": "koeninger"
    },
    "body": "If they're expected to do additional work it needs to be documented, but in retrospect I don't think its necessary, will remove\n",
    "commit": "cffb0e0fb89808732c3ab3c1c7d83049549e2e2d",
    "createdAt": "2016-06-27T13:45:34Z",
    "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka\n+\n+import java.{ util => ju }\n+\n+import scala.collection.JavaConverters._\n+import scala.reflect.ClassTag\n+\n+import org.apache.kafka.clients.consumer._\n+import org.apache.kafka.common.TopicPartition\n+\n+/**\n+ * Choice of how to create and configure underlying Kafka Consumers on driver and executors.\n+ * Kafka 0.10 consumers can require additional, sometimes complex, setup after object\n+ *  instantiation. This interface encapsulates that process, and allows it to be checkpointed.\n+ * @tparam K type of Kafka message key\n+ * @tparam V type of Kafka message value\n+ */\n+trait ConsumerStrategy[K, V] {\n+  /**\n+   * Kafka <a href=\"http://kafka.apache.org/documentation.htmll#newconsumerconfigs\">\n+   * configuration parameters</a> to be used on executors. Requires \"bootstrap.servers\" to be set\n+   * with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+   */\n+  def executorKafkaParams: ju.Map[String, Object]\n+\n+  /**\n+   * Must return a fully configured Kafka Consumer, including subscribed or assigned topics.\n+   * This consumer will be used on the driver to query for offsets only, not messages.\n+   * @param currentOffsets A map from TopicPartition to offset, indicating how far the driver\n+   * has successfully read.  Will be empty on initial start, possibly non-empty on restart from\n+   * checkpoint.\n+   * TODO: is strategy or dstream responsible for seeking on checkpoint restart"
  }],
  "prId": 11863
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Please add some basic docs on the object (e.g. \"Helper object for creating [[Subscribe]] strategy\") and create as that will be an entry point as well, especially in Scala docs.\n",
    "commit": "cffb0e0fb89808732c3ab3c1c7d83049549e2e2d",
    "createdAt": "2016-06-27T09:50:22Z",
    "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka\n+\n+import java.{ util => ju }\n+\n+import scala.collection.JavaConverters._\n+import scala.reflect.ClassTag\n+\n+import org.apache.kafka.clients.consumer._\n+import org.apache.kafka.common.TopicPartition\n+\n+/**\n+ * Choice of how to create and configure underlying Kafka Consumers on driver and executors.\n+ * Kafka 0.10 consumers can require additional, sometimes complex, setup after object\n+ *  instantiation. This interface encapsulates that process, and allows it to be checkpointed.\n+ * @tparam K type of Kafka message key\n+ * @tparam V type of Kafka message value\n+ */\n+trait ConsumerStrategy[K, V] {\n+  /**\n+   * Kafka <a href=\"http://kafka.apache.org/documentation.htmll#newconsumerconfigs\">\n+   * configuration parameters</a> to be used on executors. Requires \"bootstrap.servers\" to be set\n+   * with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+   */\n+  def executorKafkaParams: ju.Map[String, Object]\n+\n+  /**\n+   * Must return a fully configured Kafka Consumer, including subscribed or assigned topics.\n+   * This consumer will be used on the driver to query for offsets only, not messages.\n+   * @param currentOffsets A map from TopicPartition to offset, indicating how far the driver\n+   * has successfully read.  Will be empty on initial start, possibly non-empty on restart from\n+   * checkpoint.\n+   * TODO: is strategy or dstream responsible for seeking on checkpoint restart\n+   */\n+  def onStart(currentOffsets: Map[TopicPartition, Long]): Consumer[K, V]\n+}\n+\n+/**\n+ * Subscribe to a collection of topics.\n+ * @param topics collection of topics to subscribe\n+ * @param kafkaParams Kafka\n+ * <a href=\"http://kafka.apache.org/documentation.htmll#newconsumerconfigs\">\n+ * configuration parameters</a> to be used on driver. The same parameters will be used on executors,\n+ * with minor automatic modifications applied.\n+ *  Requires \"bootstrap.servers\" to be set\n+ * with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+ */\n+case class Subscribe[K: ClassTag, V: ClassTag](\n+    topics: ju.Collection[java.lang.String],\n+    kafkaParams: ju.Map[String, Object]\n+  ) extends ConsumerStrategy[K, V] {\n+\n+  def executorKafkaParams: ju.Map[String, Object] = kafkaParams\n+\n+  def onStart(currentOffsets: Map[TopicPartition, Long]): Consumer[K, V] = {\n+    val consumer = new KafkaConsumer[K, V](kafkaParams)\n+    consumer.subscribe(topics)\n+    consumer\n+  }\n+}\n+\n+object Subscribe {"
  }],
  "prId": 11863
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "This is the only one of the ConsumerStrategy that I have doubts on. I find the usage of this\n`FromOffset(offsets, Assign(....))` confusing in terms of code. So let me ask this. In the common usecases, that these strategies are addressing, is anybody ever going to use `FromOffsets` with anything other than Assign? If not, then this is can be parameter in Assign, and it will be less confusing syntax. And for those who indeed want to assign offsets with differently initiated consumers,  they can always create a custom ConsumerStrategy.\n",
    "commit": "cffb0e0fb89808732c3ab3c1c7d83049549e2e2d",
    "createdAt": "2016-06-27T09:52:48Z",
    "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka\n+\n+import java.{ util => ju }\n+\n+import scala.collection.JavaConverters._\n+import scala.reflect.ClassTag\n+\n+import org.apache.kafka.clients.consumer._\n+import org.apache.kafka.common.TopicPartition\n+\n+/**\n+ * Choice of how to create and configure underlying Kafka Consumers on driver and executors.\n+ * Kafka 0.10 consumers can require additional, sometimes complex, setup after object\n+ *  instantiation. This interface encapsulates that process, and allows it to be checkpointed.\n+ * @tparam K type of Kafka message key\n+ * @tparam V type of Kafka message value\n+ */\n+trait ConsumerStrategy[K, V] {\n+  /**\n+   * Kafka <a href=\"http://kafka.apache.org/documentation.htmll#newconsumerconfigs\">\n+   * configuration parameters</a> to be used on executors. Requires \"bootstrap.servers\" to be set\n+   * with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+   */\n+  def executorKafkaParams: ju.Map[String, Object]\n+\n+  /**\n+   * Must return a fully configured Kafka Consumer, including subscribed or assigned topics.\n+   * This consumer will be used on the driver to query for offsets only, not messages.\n+   * @param currentOffsets A map from TopicPartition to offset, indicating how far the driver\n+   * has successfully read.  Will be empty on initial start, possibly non-empty on restart from\n+   * checkpoint.\n+   * TODO: is strategy or dstream responsible for seeking on checkpoint restart\n+   */\n+  def onStart(currentOffsets: Map[TopicPartition, Long]): Consumer[K, V]\n+}\n+\n+/**\n+ * Subscribe to a collection of topics.\n+ * @param topics collection of topics to subscribe\n+ * @param kafkaParams Kafka\n+ * <a href=\"http://kafka.apache.org/documentation.htmll#newconsumerconfigs\">\n+ * configuration parameters</a> to be used on driver. The same parameters will be used on executors,\n+ * with minor automatic modifications applied.\n+ *  Requires \"bootstrap.servers\" to be set\n+ * with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+ */\n+case class Subscribe[K: ClassTag, V: ClassTag](\n+    topics: ju.Collection[java.lang.String],\n+    kafkaParams: ju.Map[String, Object]\n+  ) extends ConsumerStrategy[K, V] {\n+\n+  def executorKafkaParams: ju.Map[String, Object] = kafkaParams\n+\n+  def onStart(currentOffsets: Map[TopicPartition, Long]): Consumer[K, V] = {\n+    val consumer = new KafkaConsumer[K, V](kafkaParams)\n+    consumer.subscribe(topics)\n+    consumer\n+  }\n+}\n+\n+object Subscribe {\n+  def create[K, V](\n+      keyClass: Class[K],\n+      valueClass: Class[V],\n+      topics: ju.Collection[java.lang.String],\n+      kafkaParams: ju.Map[String, Object]\n+  ): Subscribe[K, V] = {\n+    implicit val keyCmt: ClassTag[K] = ClassTag(keyClass)\n+    implicit val valueCmt: ClassTag[V] = ClassTag(valueClass)\n+    Subscribe[K, V](topics, kafkaParams)\n+  }\n+}\n+\n+/**\n+ * Assign a fixed collection of TopicPartitions\n+ * @param topicPartitions collection of TopicPartitions to subscribe\n+ * @param kafkaParams Kafka\n+ * <a href=\"http://kafka.apache.org/documentation.htmll#newconsumerconfigs\">\n+ * configuration parameters</a> to be used on driver. The same parameters will be used on executors,\n+ * with minor automatic modifications applied.\n+ *  Requires \"bootstrap.servers\" to be set\n+ * with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+ */\n+case class Assign[K: ClassTag, V: ClassTag](\n+    topicPartitions: ju.Collection[TopicPartition],\n+    kafkaParams: ju.Map[String, Object]\n+  ) extends ConsumerStrategy[K, V] {\n+\n+  def executorKafkaParams: ju.Map[String, Object] = kafkaParams\n+\n+  def onStart(currentOffsets: Map[TopicPartition, Long]): Consumer[K, V] = {\n+    val consumer = new KafkaConsumer[K, V](kafkaParams)\n+    consumer.assign(topicPartitions)\n+    consumer\n+  }\n+}\n+\n+object Assign {\n+  def create[K, V](\n+      keyClass: Class[K],\n+      valueClass: Class[V],\n+      topicPartitions: ju.Collection[TopicPartition],\n+      kafkaParams: ju.Map[String, Object]\n+  ): Assign[K, V] = {\n+    implicit val keyCmt: ClassTag[K] = ClassTag(keyClass)\n+    implicit val valueCmt: ClassTag[V] = ClassTag(valueClass)\n+    Assign[K, V](topicPartitions, kafkaParams)\n+  }\n+}\n+\n+\n+/**\n+ * Set offsets on initial startup only, after another strategy has configured consumer\n+ * @param offsets: offsets to begin at\n+ * @param init: ConsumerStrategy responsible for instantiation and initial config\n+ */\n+case class FromOffsets[K: ClassTag, V: ClassTag]("
  }, {
    "author": {
      "login": "koeninger"
    },
    "body": "Yes you can specify starting offsets for any subscription or assignment, because its just a seek on particular topic partitions.\nThere's a way to subscribe based on a regex, so there's at least one more obvious SubscribePattern strategy subclass.\nI can do SubscribeFromOffsets, AssignFromOffsets, SubscribePatternFromOffsets, but this gets to be a combinatorial issue pretty quickly.\n\nedit - in the interests of keeping that api flat, I can just duplicate seek code in each subclass, skip seeking if the offsets are empty, and have an alternate apply method that defaults to empty offsets\n",
    "commit": "cffb0e0fb89808732c3ab3c1c7d83049549e2e2d",
    "createdAt": "2016-06-27T13:42:49Z",
    "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka\n+\n+import java.{ util => ju }\n+\n+import scala.collection.JavaConverters._\n+import scala.reflect.ClassTag\n+\n+import org.apache.kafka.clients.consumer._\n+import org.apache.kafka.common.TopicPartition\n+\n+/**\n+ * Choice of how to create and configure underlying Kafka Consumers on driver and executors.\n+ * Kafka 0.10 consumers can require additional, sometimes complex, setup after object\n+ *  instantiation. This interface encapsulates that process, and allows it to be checkpointed.\n+ * @tparam K type of Kafka message key\n+ * @tparam V type of Kafka message value\n+ */\n+trait ConsumerStrategy[K, V] {\n+  /**\n+   * Kafka <a href=\"http://kafka.apache.org/documentation.htmll#newconsumerconfigs\">\n+   * configuration parameters</a> to be used on executors. Requires \"bootstrap.servers\" to be set\n+   * with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+   */\n+  def executorKafkaParams: ju.Map[String, Object]\n+\n+  /**\n+   * Must return a fully configured Kafka Consumer, including subscribed or assigned topics.\n+   * This consumer will be used on the driver to query for offsets only, not messages.\n+   * @param currentOffsets A map from TopicPartition to offset, indicating how far the driver\n+   * has successfully read.  Will be empty on initial start, possibly non-empty on restart from\n+   * checkpoint.\n+   * TODO: is strategy or dstream responsible for seeking on checkpoint restart\n+   */\n+  def onStart(currentOffsets: Map[TopicPartition, Long]): Consumer[K, V]\n+}\n+\n+/**\n+ * Subscribe to a collection of topics.\n+ * @param topics collection of topics to subscribe\n+ * @param kafkaParams Kafka\n+ * <a href=\"http://kafka.apache.org/documentation.htmll#newconsumerconfigs\">\n+ * configuration parameters</a> to be used on driver. The same parameters will be used on executors,\n+ * with minor automatic modifications applied.\n+ *  Requires \"bootstrap.servers\" to be set\n+ * with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+ */\n+case class Subscribe[K: ClassTag, V: ClassTag](\n+    topics: ju.Collection[java.lang.String],\n+    kafkaParams: ju.Map[String, Object]\n+  ) extends ConsumerStrategy[K, V] {\n+\n+  def executorKafkaParams: ju.Map[String, Object] = kafkaParams\n+\n+  def onStart(currentOffsets: Map[TopicPartition, Long]): Consumer[K, V] = {\n+    val consumer = new KafkaConsumer[K, V](kafkaParams)\n+    consumer.subscribe(topics)\n+    consumer\n+  }\n+}\n+\n+object Subscribe {\n+  def create[K, V](\n+      keyClass: Class[K],\n+      valueClass: Class[V],\n+      topics: ju.Collection[java.lang.String],\n+      kafkaParams: ju.Map[String, Object]\n+  ): Subscribe[K, V] = {\n+    implicit val keyCmt: ClassTag[K] = ClassTag(keyClass)\n+    implicit val valueCmt: ClassTag[V] = ClassTag(valueClass)\n+    Subscribe[K, V](topics, kafkaParams)\n+  }\n+}\n+\n+/**\n+ * Assign a fixed collection of TopicPartitions\n+ * @param topicPartitions collection of TopicPartitions to subscribe\n+ * @param kafkaParams Kafka\n+ * <a href=\"http://kafka.apache.org/documentation.htmll#newconsumerconfigs\">\n+ * configuration parameters</a> to be used on driver. The same parameters will be used on executors,\n+ * with minor automatic modifications applied.\n+ *  Requires \"bootstrap.servers\" to be set\n+ * with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+ */\n+case class Assign[K: ClassTag, V: ClassTag](\n+    topicPartitions: ju.Collection[TopicPartition],\n+    kafkaParams: ju.Map[String, Object]\n+  ) extends ConsumerStrategy[K, V] {\n+\n+  def executorKafkaParams: ju.Map[String, Object] = kafkaParams\n+\n+  def onStart(currentOffsets: Map[TopicPartition, Long]): Consumer[K, V] = {\n+    val consumer = new KafkaConsumer[K, V](kafkaParams)\n+    consumer.assign(topicPartitions)\n+    consumer\n+  }\n+}\n+\n+object Assign {\n+  def create[K, V](\n+      keyClass: Class[K],\n+      valueClass: Class[V],\n+      topicPartitions: ju.Collection[TopicPartition],\n+      kafkaParams: ju.Map[String, Object]\n+  ): Assign[K, V] = {\n+    implicit val keyCmt: ClassTag[K] = ClassTag(keyClass)\n+    implicit val valueCmt: ClassTag[V] = ClassTag(valueClass)\n+    Assign[K, V](topicPartitions, kafkaParams)\n+  }\n+}\n+\n+\n+/**\n+ * Set offsets on initial startup only, after another strategy has configured consumer\n+ * @param offsets: offsets to begin at\n+ * @param init: ConsumerStrategy responsible for instantiation and initial config\n+ */\n+case class FromOffsets[K: ClassTag, V: ClassTag]("
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "I agree it is a combinatorial issue. But our focus with these premade strategies is to make the common use cases easier. I think I like your later suggestion with alternate apply method. We can have it on both subscribe and assign.\n",
    "commit": "cffb0e0fb89808732c3ab3c1c7d83049549e2e2d",
    "createdAt": "2016-06-27T19:43:18Z",
    "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka\n+\n+import java.{ util => ju }\n+\n+import scala.collection.JavaConverters._\n+import scala.reflect.ClassTag\n+\n+import org.apache.kafka.clients.consumer._\n+import org.apache.kafka.common.TopicPartition\n+\n+/**\n+ * Choice of how to create and configure underlying Kafka Consumers on driver and executors.\n+ * Kafka 0.10 consumers can require additional, sometimes complex, setup after object\n+ *  instantiation. This interface encapsulates that process, and allows it to be checkpointed.\n+ * @tparam K type of Kafka message key\n+ * @tparam V type of Kafka message value\n+ */\n+trait ConsumerStrategy[K, V] {\n+  /**\n+   * Kafka <a href=\"http://kafka.apache.org/documentation.htmll#newconsumerconfigs\">\n+   * configuration parameters</a> to be used on executors. Requires \"bootstrap.servers\" to be set\n+   * with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+   */\n+  def executorKafkaParams: ju.Map[String, Object]\n+\n+  /**\n+   * Must return a fully configured Kafka Consumer, including subscribed or assigned topics.\n+   * This consumer will be used on the driver to query for offsets only, not messages.\n+   * @param currentOffsets A map from TopicPartition to offset, indicating how far the driver\n+   * has successfully read.  Will be empty on initial start, possibly non-empty on restart from\n+   * checkpoint.\n+   * TODO: is strategy or dstream responsible for seeking on checkpoint restart\n+   */\n+  def onStart(currentOffsets: Map[TopicPartition, Long]): Consumer[K, V]\n+}\n+\n+/**\n+ * Subscribe to a collection of topics.\n+ * @param topics collection of topics to subscribe\n+ * @param kafkaParams Kafka\n+ * <a href=\"http://kafka.apache.org/documentation.htmll#newconsumerconfigs\">\n+ * configuration parameters</a> to be used on driver. The same parameters will be used on executors,\n+ * with minor automatic modifications applied.\n+ *  Requires \"bootstrap.servers\" to be set\n+ * with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+ */\n+case class Subscribe[K: ClassTag, V: ClassTag](\n+    topics: ju.Collection[java.lang.String],\n+    kafkaParams: ju.Map[String, Object]\n+  ) extends ConsumerStrategy[K, V] {\n+\n+  def executorKafkaParams: ju.Map[String, Object] = kafkaParams\n+\n+  def onStart(currentOffsets: Map[TopicPartition, Long]): Consumer[K, V] = {\n+    val consumer = new KafkaConsumer[K, V](kafkaParams)\n+    consumer.subscribe(topics)\n+    consumer\n+  }\n+}\n+\n+object Subscribe {\n+  def create[K, V](\n+      keyClass: Class[K],\n+      valueClass: Class[V],\n+      topics: ju.Collection[java.lang.String],\n+      kafkaParams: ju.Map[String, Object]\n+  ): Subscribe[K, V] = {\n+    implicit val keyCmt: ClassTag[K] = ClassTag(keyClass)\n+    implicit val valueCmt: ClassTag[V] = ClassTag(valueClass)\n+    Subscribe[K, V](topics, kafkaParams)\n+  }\n+}\n+\n+/**\n+ * Assign a fixed collection of TopicPartitions\n+ * @param topicPartitions collection of TopicPartitions to subscribe\n+ * @param kafkaParams Kafka\n+ * <a href=\"http://kafka.apache.org/documentation.htmll#newconsumerconfigs\">\n+ * configuration parameters</a> to be used on driver. The same parameters will be used on executors,\n+ * with minor automatic modifications applied.\n+ *  Requires \"bootstrap.servers\" to be set\n+ * with Kafka broker(s) specified in host1:port1,host2:port2 form.\n+ */\n+case class Assign[K: ClassTag, V: ClassTag](\n+    topicPartitions: ju.Collection[TopicPartition],\n+    kafkaParams: ju.Map[String, Object]\n+  ) extends ConsumerStrategy[K, V] {\n+\n+  def executorKafkaParams: ju.Map[String, Object] = kafkaParams\n+\n+  def onStart(currentOffsets: Map[TopicPartition, Long]): Consumer[K, V] = {\n+    val consumer = new KafkaConsumer[K, V](kafkaParams)\n+    consumer.assign(topicPartitions)\n+    consumer\n+  }\n+}\n+\n+object Assign {\n+  def create[K, V](\n+      keyClass: Class[K],\n+      valueClass: Class[V],\n+      topicPartitions: ju.Collection[TopicPartition],\n+      kafkaParams: ju.Map[String, Object]\n+  ): Assign[K, V] = {\n+    implicit val keyCmt: ClassTag[K] = ClassTag(keyClass)\n+    implicit val valueCmt: ClassTag[V] = ClassTag(valueClass)\n+    Assign[K, V](topicPartitions, kafkaParams)\n+  }\n+}\n+\n+\n+/**\n+ * Set offsets on initial startup only, after another strategy has configured consumer\n+ * @param offsets: offsets to begin at\n+ * @param init: ConsumerStrategy responsible for instantiation and initial config\n+ */\n+case class FromOffsets[K: ClassTag, V: ClassTag]("
  }],
  "prId": 11863
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: add `@Experimental` for classes and methods in this file.\n",
    "commit": "cffb0e0fb89808732c3ab3c1c7d83049549e2e2d",
    "createdAt": "2016-06-29T21:45:09Z",
    "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka\n+\n+import java.{ util => ju }\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.kafka.clients.consumer._\n+import org.apache.kafka.common.TopicPartition\n+\n+/**\n+ * Choice of how to create and configure underlying Kafka Consumers on driver and executors.\n+ * Kafka 0.10 consumers can require additional, sometimes complex, setup after object\n+ *  instantiation. This interface encapsulates that process, and allows it to be checkpointed.\n+ * @tparam K type of Kafka message key\n+ * @tparam V type of Kafka message value\n+ */\n+trait ConsumerStrategy[K, V] {"
  }],
  "prId": 11863
}]