[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "@koeninger I dont think this trait is needed any more since we return InputDStream.\n",
    "commit": "cffb0e0fb89808732c3ab3c1c7d83049549e2e2d",
    "createdAt": "2016-06-30T00:03:38Z",
    "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka\n+\n+import org.apache.kafka.clients.consumer.OffsetCommitCallback\n+import org.apache.kafka.common.TopicPartition\n+\n+import org.apache.spark.annotation.Experimental\n+\n+/**\n+ * Represents any object that has a collection of [[OffsetRange]]s. This can be used to access the\n+ * offset ranges in RDDs generated by the direct Kafka DStream (see\n+ * [[KafkaUtils.createDirectStream]]).\n+ * {{{\n+ *   KafkaUtils.createDirectStream(...).foreachRDD { rdd =>\n+ *      val offsetRanges = rdd.asInstanceOf[HasOffsetRanges].offsetRanges\n+ *      ...\n+ *   }\n+ * }}}\n+ */\n+trait HasOffsetRanges {\n+  def offsetRanges: Array[OffsetRange]\n+}\n+\n+/**\n+ *  :: Experimental ::\n+ * Represents any object that can commit a collection of [[OffsetRange]]s.\n+ * The direct Kafka DStream implements this interface (see\n+ * [[KafkaUtils.createDirectStream]]).\n+ * {{{\n+ *   val stream = KafkaUtils.createDirectStream(...)\n+ *     ...\n+ *   stream.asInstanceOf[CanCommitOffsets].commitAsync(offsets, new OffsetCommitCallback() {\n+ *     def onComplete(m: java.util.Map[TopicPartition, OffsetAndMetadata], e: Exception) {\n+ *        if (null != e) {\n+ *           // error\n+ *        } else {\n+ *         // success\n+ *       }\n+ *     }\n+ *   })\n+ * }}}\n+ */\n+@Experimental\n+trait CanCommitOffsets {"
  }],
  "prId": 11863
}]