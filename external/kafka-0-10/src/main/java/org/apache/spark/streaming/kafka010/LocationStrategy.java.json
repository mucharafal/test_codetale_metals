[{
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: docs?\n",
    "commit": "e5026f7e9ccc575744bc108cbe02a6fac0c2cdad",
    "createdAt": "2016-06-30T17:55:56Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka010;\n+\n+import java.util.Map;\n+\n+import scala.collection.JavaConversions;\n+\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * :: Experimental ::\n+ * Abstract class representing choice of how to schedule consumers for a given TopicPartition on an\n+ * executor. Kafka 0.10 consumers prefetch messages, so it's important for performance to keep\n+ * cached consumers on appropriate executors, not recreate them for every partition. Choice of\n+ * location is only a preference, not an absolute; partitions may be scheduled elsewhere.\n+ */\n+@Experimental\n+public abstract class LocationStrategy {\n+\n+  /**\n+   * :: Experimental ::\n+   * Use this in most cases, it will consistently distribute partitions across all executors.\n+   */\n+  public static LocationStrategy PreferConsistent() {\n+    return PreferConsistent$.MODULE$;\n+  }\n+\n+  /**\n+   * :: Experimental ::\n+   * Use this only if your executors are on the same nodes as your Kafka brokers.\n+   */\n+  public static LocationStrategy PreferBrokers() {\n+    return PreferBrokers$.MODULE$;\n+  }\n+\n+\n+  public static LocationStrategy PreferFixed(Map<TopicPartition, String> hostMap) {",
    "line": 54
  }],
  "prId": 13996
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: docs?\n",
    "commit": "e5026f7e9ccc575744bc108cbe02a6fac0c2cdad",
    "createdAt": "2016-06-30T17:56:02Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka010;\n+\n+import java.util.Map;\n+\n+import scala.collection.JavaConversions;\n+\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * :: Experimental ::\n+ * Abstract class representing choice of how to schedule consumers for a given TopicPartition on an\n+ * executor. Kafka 0.10 consumers prefetch messages, so it's important for performance to keep\n+ * cached consumers on appropriate executors, not recreate them for every partition. Choice of\n+ * location is only a preference, not an absolute; partitions may be scheduled elsewhere.\n+ */\n+@Experimental\n+public abstract class LocationStrategy {\n+\n+  /**\n+   * :: Experimental ::\n+   * Use this in most cases, it will consistently distribute partitions across all executors.\n+   */\n+  public static LocationStrategy PreferConsistent() {\n+    return PreferConsistent$.MODULE$;\n+  }\n+\n+  /**\n+   * :: Experimental ::\n+   * Use this only if your executors are on the same nodes as your Kafka brokers.\n+   */\n+  public static LocationStrategy PreferBrokers() {\n+    return PreferBrokers$.MODULE$;\n+  }\n+\n+\n+  public static LocationStrategy PreferFixed(Map<TopicPartition, String> hostMap) {\n+    return new PreferFixed(hostMap);\n+  }\n+\n+  public static LocationStrategy PreferFixed(scala.collection.Map<TopicPartition, String> hostMap) {",
    "line": 58
  }],
  "prId": 13996
}]