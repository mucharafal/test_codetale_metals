[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Use string interpolation to be consistent?",
    "commit": "e3ae84523621405d2f2b55ec92cb79921aaba961",
    "createdAt": "2018-02-20T23:15:14Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka010.mocks\n+\n+import java.util.concurrent._\n+\n+import kafka.utils.Time\n+\n+/**\n+ * A class used for unit testing things which depend on the Time interface.\n+ *\n+ * This class never manually advances the clock, it only does so when you call\n+ *   sleep(ms)\n+ *\n+ * It also comes with an associated scheduler instance for managing background tasks in\n+ * a deterministic way.\n+ */\n+private[kafka010] class MockTime(@volatile private var currentMs: Long) extends Time {\n+\n+  val scheduler = new MockScheduler(this)\n+\n+  def this() = this(System.currentTimeMillis)\n+\n+  def milliseconds: Long = currentMs\n+\n+  def nanoseconds: Long =\n+    TimeUnit.NANOSECONDS.convert(currentMs, TimeUnit.MILLISECONDS)\n+\n+  def sleep(ms: Long) {\n+    this.currentMs += ms\n+    scheduler.tick()\n+  }\n+\n+  override def toString(): String = \"MockTime(%d)\".format(milliseconds)"
  }],
  "prId": 20572
}]