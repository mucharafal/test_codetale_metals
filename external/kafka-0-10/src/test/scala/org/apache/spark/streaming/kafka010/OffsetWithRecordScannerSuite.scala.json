[{
  "comments": [{
    "author": {
      "login": "koeninger"
    },
    "body": "These tests aren't really testing the actual scenario we care about (transaction markers at the end of an offset range), which should be directly testable now that kafka has been upgraded to 2.0",
    "commit": "69582f46cb8c7f7285c42b86d06bf475a43a3856",
    "createdAt": "2018-08-04T23:07:16Z",
    "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.kafka010\n+\n+import java.{util => ju}\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.kafka.clients.consumer.{Consumer, ConsumerRecord, ConsumerRecords}\n+import org.apache.kafka.common.TopicPartition\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.internal.Logging\n+\n+class OffsetWithRecordScannerSuite\n+  extends SparkFunSuite\n+    with Logging {\n+\n+  class OffsetWithRecordScannerMock[K, V](records: List[Option[ConsumerRecord[K, V]]])\n+    extends OffsetWithRecordScanner[K, V](\n+      Map[String, Object](\"isolation.level\" -> \"read_committed\").asJava, 1, 1, 0.75F, true) {\n+    var i = -1\n+    override protected def getNext(c: KafkaDataConsumer[K, V]): Option[ConsumerRecord[K, V]] = {\n+      i = i + 1\n+      records(i)\n+    }\n+\n+  }\n+\n+  val emptyConsumerRecords = new ConsumerRecords[String, String](ju.Collections.emptyMap())\n+  val tp = new TopicPartition(\"topic\", 0)\n+\n+  test(\"Rewinder construction should fail if isolation level isn set to read_committed\") {\n+    intercept[IllegalStateException] {\n+      new OffsetWithRecordScanner[String, String](\n+        Map[String, Object](\"isolation.level\" -> \"read_uncommitted\").asJava, 1, 1, 0.75F, true)\n+    }\n+  }\n+\n+  test(\"Rewinder construction shouldn't fail if isolation level isn't set\") {\n+      assert(new OffsetWithRecordScanner[String, String](\n+        Map[String, Object]().asJava, 1, 1, 0.75F, true) != null)\n+  }\n+\n+  test(\"Rewinder construction should fail if isolation level isn't set to committed\") {\n+    intercept[IllegalStateException] {\n+      new OffsetWithRecordScanner[String, String](\n+        Map[String, Object](\"isolation.level\" -> \"read_uncommitted\").asJava, 1, 1, 0.75F, true)\n+    }\n+  }\n+\n+  test(\"Rewind should return the proper count.\") {\n+    var scanner = new OffsetWithRecordScannerMock[String, String](\n+      records(Some(0), Some(1), Some(2), Some(3)))\n+    val (offset, size) = scanner.iterateUntilLastOrEmpty(0, 0, null, 2)\n+    assert(offset === 2)\n+    assert(size === 2)\n+  }\n+\n+  test(\"Rewind should return the proper count with gap\") {\n+    var scanner = new OffsetWithRecordScannerMock[String, String](\n+      records(Some(0), Some(1), Some(3), Some(4), Some(5)))\n+    val (offset, size) = scanner.iterateUntilLastOrEmpty(0, 0, null, 3)\n+    assert(offset === 4)\n+    assert(size === 3)\n+  }\n+\n+  test(\"Rewind should return the proper count for the end of the iterator\") {\n+    var scanner = new OffsetWithRecordScannerMock[String, String](\n+      records(Some(0), Some(1), Some(2), None))\n+    val (offset, size) = scanner.iterateUntilLastOrEmpty(0, 0, null, 3)\n+    assert(offset === 3)\n+    assert(size === 3)\n+  }\n+\n+  test(\"Rewind should return the proper count missing data\") {\n+    var scanner = new OffsetWithRecordScannerMock[String, String](\n+      records(Some(0), None))\n+    val (offset, size) = scanner.iterateUntilLastOrEmpty(0, 0, null, 2)\n+    assert(offset === 1)\n+    assert(size === 1)\n+  }\n+\n+  test(\"Rewind should return the proper count without data\") {\n+    var scanner = new OffsetWithRecordScannerMock[String, String](\n+      records(None))\n+    val (offset, size) = scanner.iterateUntilLastOrEmpty(0, 0, null, 2)\n+    assert(offset === 0)\n+    assert(size === 0)\n+  }\n+\n+  private def records(offsets: Option[Long]*) = {\n+    offsets.map(o => o.map(new ConsumerRecord(\"topic\", 0, _, \"k\", \"v\"))).toList\n+  }\n+}",
    "line": 110
  }],
  "prId": 21917
}]