[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Since you're changing `shutdownNow()` to `shutdown()` in SparkAvroCallbackHandler.scala, I'd suggest creating a dummy object and use `Object.wait()` here, and `Object.notifyAll()` in the shutdown method above, so that sleeping tasks are woken up.\n",
    "commit": "f93a07c9e6cd4b34a276e9c75aa601fdafa67ef7",
    "createdAt": "2014-08-20T23:01:38Z",
    "diffHunk": "@@ -115,7 +122,7 @@ private class TransactionProcessor(val channel: Channel, val seqNum: String,\n                   ByteBuffer.wrap(event.getBody)))\n                 gotEventsInThisTxn = true\n               case None =>\n-                if (!gotEventsInThisTxn) {\n+                if (!gotEventsInThisTxn && !stopped) {\n                   logDebug(\"Sleeping for \" + backOffInterval + \" millis as no events were read in\" +\n                     \" the current transaction\")\n                   TimeUnit.MILLISECONDS.sleep(backOffInterval)",
    "line": 38
  }, {
    "author": {
      "login": "harishreedharan"
    },
    "body": "I actually restored the `shutdownNow()` methods since we handle the interrupts.\n",
    "commit": "f93a07c9e6cd4b34a276e9c75aa601fdafa67ef7",
    "createdAt": "2014-08-21T03:02:25Z",
    "diffHunk": "@@ -115,7 +122,7 @@ private class TransactionProcessor(val channel: Channel, val seqNum: String,\n                   ByteBuffer.wrap(event.getBody)))\n                 gotEventsInThisTxn = true\n               case None =>\n-                if (!gotEventsInThisTxn) {\n+                if (!gotEventsInThisTxn && !stopped) {\n                   logDebug(\"Sleeping for \" + backOffInterval + \" millis as no events were read in\" +\n                     \" the current transaction\")\n                   TimeUnit.MILLISECONDS.sleep(backOffInterval)",
    "line": 38
  }],
  "prId": 2065
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Do you expect to have many of these runnning at a time? If so I'd demote this to `logDebug`.\n",
    "commit": "f93a07c9e6cd4b34a276e9c75aa601fdafa67ef7",
    "createdAt": "2014-08-21T16:13:45Z",
    "diffHunk": "@@ -88,6 +90,11 @@ private class TransactionProcessor(val channel: Channel, val seqNum: String,\n     batchAckLatch.countDown()\n   }\n \n+  private[flume] def shutdown(): Unit = {\n+    logInfo(\"Shutting down transaction processor\")"
  }],
  "prId": 2065
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "These two methods are not necessary any more!\n",
    "commit": "f93a07c9e6cd4b34a276e9c75aa601fdafa67ef7",
    "createdAt": "2014-08-27T05:59:04Z",
    "diffHunk": "@@ -225,4 +237,16 @@ private class TransactionProcessor(val channel: Channel, val seqNum: String,\n     processAckOrNack()\n     null\n   }\n+\n+  override def hashCode(): Int =  {"
  }],
  "prId": 2065
}]