[{
  "comments": [{
    "author": {
      "login": "aarondav"
    },
    "body": "Could use the `@GuardedBy(\"sequenceNumberToProcessor\")` javax annotation.\n",
    "commit": "0d087ac6ae18ed7766d08dc630aeb12279dbb4e7",
    "createdAt": "2014-12-08T19:51:40Z",
    "diffHunk": "@@ -47,8 +47,8 @@ private[flume] class SparkAvroCallbackHandler(val threads: Int, val channel: Cha\n   val transactionExecutorOpt = Option(Executors.newFixedThreadPool(threads,\n     new ThreadFactoryBuilder().setDaemon(true)\n       .setNameFormat(\"Spark Sink Processor Thread - %d\").build()))\n-  private val sequenceNumberToProcessor =\n-    new ConcurrentHashMap[CharSequence, TransactionProcessor]()\n+  // Protected by `sequenceNumberToProcessor`",
    "line": 19
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "`external/flume-sink` doesn't depend on jsr305. `GuardedBy` is in jsr305***.jar. However, great to know that we can use `GuardedBy` in Spark.\n",
    "commit": "0d087ac6ae18ed7766d08dc630aeb12279dbb4e7",
    "createdAt": "2014-12-09T02:15:32Z",
    "diffHunk": "@@ -47,8 +47,8 @@ private[flume] class SparkAvroCallbackHandler(val threads: Int, val channel: Cha\n   val transactionExecutorOpt = Option(Executors.newFixedThreadPool(threads,\n     new ThreadFactoryBuilder().setDaemon(true)\n       .setNameFormat(\"Spark Sink Processor Thread - %d\").build()))\n-  private val sequenceNumberToProcessor =\n-    new ConcurrentHashMap[CharSequence, TransactionProcessor]()\n+  // Protected by `sequenceNumberToProcessor`",
    "line": 19
  }, {
    "author": {
      "login": "aarondav"
    },
    "body": "Ah, did not realize it was not a javax standard. Thanks.\n",
    "commit": "0d087ac6ae18ed7766d08dc630aeb12279dbb4e7",
    "createdAt": "2014-12-09T07:53:31Z",
    "diffHunk": "@@ -47,8 +47,8 @@ private[flume] class SparkAvroCallbackHandler(val threads: Int, val channel: Cha\n   val transactionExecutorOpt = Option(Executors.newFixedThreadPool(threads,\n     new ThreadFactoryBuilder().setDaemon(true)\n       .setNameFormat(\"Spark Sink Processor Thread - %d\").build()))\n-  private val sequenceNumberToProcessor =\n-    new ConcurrentHashMap[CharSequence, TransactionProcessor]()\n+  // Protected by `sequenceNumberToProcessor`",
    "line": 19
  }],
  "prId": 3634
}]