[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`// Test reading null values using the second row.`",
    "commit": "d8cbe54f0440dd4bf4d87ca934a0bdbbf2eaa862",
    "createdAt": "2017-01-20T22:36:53Z",
    "diffHunk": "@@ -96,6 +100,9 @@ class PostgresIntegrationSuite extends DockerJDBCIntegrationSuite {\n     assert(rows(0).getString(14) == \"d1\")\n     assert(rows(0).getFloat(15) == 1.01f)\n     assert(rows(0).getShort(16) == 1)\n+\n+    // Test reading null values."
  }],
  "prId": 15192
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Add a comment above this line to indicate the following statements are testing the first row.",
    "commit": "d8cbe54f0440dd4bf4d87ca934a0bdbbf2eaa862",
    "createdAt": "2017-01-20T22:37:24Z",
    "diffHunk": "@@ -51,12 +51,16 @@ class PostgresIntegrationSuite extends DockerJDBCIntegrationSuite {\n       + \"B'1000100101', E'\\\\\\\\xDEADBEEF', true, '172.16.0.42', '192.168.0.0/16', \"\n       + \"\"\"'{1, 2}', '{\"a\", null, \"b\"}', '{0.11, 0.22}', '{0.11, 0.22}', 'd1', 1.01, 1)\"\"\"\n     ).executeUpdate()\n+    conn.prepareStatement(\"INSERT INTO bar VALUES (null, null, null, null, null, \"\n+      + \"null, null, null, null, null, \"\n+      + \"null, null, null, null, null, null, null)\"\n+    ).executeUpdate()\n   }\n \n   test(\"Type mapping for various types\") {\n     val df = sqlContext.read.jdbc(jdbcUrl, \"bar\", new Properties)\n-    val rows = df.collect()\n-    assert(rows.length == 1)\n+    val rows = df.collect().sortBy(_.toString())\n+    assert(rows.length == 2)\n     val types = rows(0).toSeq.map(x => x.getClass)"
  }],
  "prId": 15192
}]