[{
  "comments": [{
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "nit: It would be more stable if you could refer default value of configuration instead of referring it (`SASL_SSL`) directly, but not a big deal.",
    "commit": "7f16e2862369a549e62baae72dab1fa0607199fb",
    "createdAt": "2019-09-04T08:56:07Z",
    "diffHunk": "@@ -76,6 +79,25 @@ class KafkaConfigUpdaterSuite extends SparkFunSuite with KafkaDelegationTokenTes\n     val params = Map(\n       CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG -> bootStrapServers\n     )\n+    testWithTokenSetValues(params, updatedParams => {\n+      assert(updatedParams.get(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG) === SASL_SSL.name)"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Fixed.",
    "commit": "7f16e2862369a549e62baae72dab1fa0607199fb",
    "createdAt": "2019-09-04T13:12:01Z",
    "diffHunk": "@@ -76,6 +79,25 @@ class KafkaConfigUpdaterSuite extends SparkFunSuite with KafkaDelegationTokenTes\n     val params = Map(\n       CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG -> bootStrapServers\n     )\n+    testWithTokenSetValues(params, updatedParams => {\n+      assert(updatedParams.get(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG) === SASL_SSL.name)"
  }],
  "prId": 25631
}, {
  "comments": [{
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "The test name is a bit confused - as I saw it as overriding protocol to what is defined for token but it works opposite.",
    "commit": "7f16e2862369a549e62baae72dab1fa0607199fb",
    "createdAt": "2019-09-04T08:57:56Z",
    "diffHunk": "@@ -76,6 +79,25 @@ class KafkaConfigUpdaterSuite extends SparkFunSuite with KafkaDelegationTokenTes\n     val params = Map(\n       CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG -> bootStrapServers\n     )\n+    testWithTokenSetValues(params, updatedParams => {\n+      assert(updatedParams.get(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG) === SASL_SSL.name)\n+    })\n+  }\n+\n+  test(\"setAuthenticationConfigIfNeeded with token should set values and override protocol\") {"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Restructured a bit. Let me know if you've better idea and we can adapt it.",
    "commit": "7f16e2862369a549e62baae72dab1fa0607199fb",
    "createdAt": "2019-09-04T13:13:00Z",
    "diffHunk": "@@ -76,6 +79,25 @@ class KafkaConfigUpdaterSuite extends SparkFunSuite with KafkaDelegationTokenTes\n     val params = Map(\n       CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG -> bootStrapServers\n     )\n+    testWithTokenSetValues(params, updatedParams => {\n+      assert(updatedParams.get(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG) === SASL_SSL.name)\n+    })\n+  }\n+\n+  test(\"setAuthenticationConfigIfNeeded with token should set values and override protocol\") {"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "I guess `setAuthenticationConfigIfNeeded` is not important here in test name - we're verifying that protocol in source/sink takes effect (preference) if protocol is specified for both source/sink and delegation token. It would be ideal if we could represent the point.",
    "commit": "7f16e2862369a549e62baae72dab1fa0607199fb",
    "createdAt": "2019-09-04T13:36:32Z",
    "diffHunk": "@@ -76,6 +79,25 @@ class KafkaConfigUpdaterSuite extends SparkFunSuite with KafkaDelegationTokenTes\n     val params = Map(\n       CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG -> bootStrapServers\n     )\n+    testWithTokenSetValues(params, updatedParams => {\n+      assert(updatedParams.get(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG) === SASL_SSL.name)\n+    })\n+  }\n+\n+  test(\"setAuthenticationConfigIfNeeded with token should set values and override protocol\") {"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "The way how I'm structuring tests is: given -> when -> then.\r\n`setAuthenticationConfigIfNeeded` is the action (when part) which executed. Maybe we can rephrase it like: `setAuthenticationConfigIfNeeded with token should prefer overridden protocol`?",
    "commit": "7f16e2862369a549e62baae72dab1fa0607199fb",
    "createdAt": "2019-09-04T13:47:21Z",
    "diffHunk": "@@ -76,6 +79,25 @@ class KafkaConfigUpdaterSuite extends SparkFunSuite with KafkaDelegationTokenTes\n     val params = Map(\n       CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG -> bootStrapServers\n     )\n+    testWithTokenSetValues(params, updatedParams => {\n+      assert(updatedParams.get(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG) === SASL_SSL.name)\n+    })\n+  }\n+\n+  test(\"setAuthenticationConfigIfNeeded with token should set values and override protocol\") {"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "\"overriden\" <- this brings confusion. Without knowing details, we don't know what's the basic configuration for protocol and what will override it. The thing is simple, once we specify protocol in source/sink, it should always take effect regardless of protocol in token.",
    "commit": "7f16e2862369a549e62baae72dab1fa0607199fb",
    "createdAt": "2019-09-04T14:30:18Z",
    "diffHunk": "@@ -76,6 +79,25 @@ class KafkaConfigUpdaterSuite extends SparkFunSuite with KafkaDelegationTokenTes\n     val params = Map(\n       CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG -> bootStrapServers\n     )\n+    testWithTokenSetValues(params, updatedParams => {\n+      assert(updatedParams.get(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG) === SASL_SSL.name)\n+    })\n+  }\n+\n+  test(\"setAuthenticationConfigIfNeeded with token should set values and override protocol\") {"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "See your point: `setAuthenticationConfigIfNeeded with token should prefer source protocol`?",
    "commit": "7f16e2862369a549e62baae72dab1fa0607199fb",
    "createdAt": "2019-09-04T14:50:57Z",
    "diffHunk": "@@ -76,6 +79,25 @@ class KafkaConfigUpdaterSuite extends SparkFunSuite with KafkaDelegationTokenTes\n     val params = Map(\n       CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG -> bootStrapServers\n     )\n+    testWithTokenSetValues(params, updatedParams => {\n+      assert(updatedParams.get(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG) === SASL_SSL.name)\n+    })\n+  }\n+\n+  test(\"setAuthenticationConfigIfNeeded with token should set values and override protocol\") {"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "New test name looks OK to me.",
    "commit": "7f16e2862369a549e62baae72dab1fa0607199fb",
    "createdAt": "2019-09-04T18:08:45Z",
    "diffHunk": "@@ -76,6 +79,25 @@ class KafkaConfigUpdaterSuite extends SparkFunSuite with KafkaDelegationTokenTes\n     val params = Map(\n       CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG -> bootStrapServers\n     )\n+    testWithTokenSetValues(params, updatedParams => {\n+      assert(updatedParams.get(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG) === SASL_SSL.name)\n+    })\n+  }\n+\n+  test(\"setAuthenticationConfigIfNeeded with token should set values and override protocol\") {"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "I've taken over what Marcelo suggested which is more or less the same in a negated way.",
    "commit": "7f16e2862369a549e62baae72dab1fa0607199fb",
    "createdAt": "2019-09-05T11:32:41Z",
    "diffHunk": "@@ -76,6 +79,25 @@ class KafkaConfigUpdaterSuite extends SparkFunSuite with KafkaDelegationTokenTes\n     val params = Map(\n       CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG -> bootStrapServers\n     )\n+    testWithTokenSetValues(params, updatedParams => {\n+      assert(updatedParams.get(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG) === SASL_SSL.name)\n+    })\n+  }\n+\n+  test(\"setAuthenticationConfigIfNeeded with token should set values and override protocol\") {"
  }],
  "prId": 25631
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "\"should not override user-defined protocol\"",
    "commit": "7f16e2862369a549e62baae72dab1fa0607199fb",
    "createdAt": "2019-09-04T21:41:06Z",
    "diffHunk": "@@ -76,6 +79,27 @@ class KafkaConfigUpdaterSuite extends SparkFunSuite with KafkaDelegationTokenTes\n     val params = Map(\n       CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG -> bootStrapServers\n     )\n+    testWithTokenSetValues(params, updatedParams => {\n+      assert(updatedParams.get(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG) ===\n+        KafkaTokenSparkConf.DEFAULT_SECURITY_PROTOCOL_CONFIG)\n+    })\n+  }\n+\n+  test(\"setAuthenticationConfigIfNeeded with token should set values but override protocol\") {"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Fixed.",
    "commit": "7f16e2862369a549e62baae72dab1fa0607199fb",
    "createdAt": "2019-09-05T11:33:15Z",
    "diffHunk": "@@ -76,6 +79,27 @@ class KafkaConfigUpdaterSuite extends SparkFunSuite with KafkaDelegationTokenTes\n     val params = Map(\n       CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG -> bootStrapServers\n     )\n+    testWithTokenSetValues(params, updatedParams => {\n+      assert(updatedParams.get(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG) ===\n+        KafkaTokenSparkConf.DEFAULT_SECURITY_PROTOCOL_CONFIG)\n+    })\n+  }\n+\n+  test(\"setAuthenticationConfigIfNeeded with token should set values but override protocol\") {"
  }],
  "prId": 25631
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "This is nicer with a curried function.\r\n\r\n```\r\ntestWithTokenSetValues(params) { updatedParams =>\r\n   ...\r\n}\r\n```\r\n\r\nLots of examples in Spark's code.",
    "commit": "7f16e2862369a549e62baae72dab1fa0607199fb",
    "createdAt": "2019-09-04T21:42:42Z",
    "diffHunk": "@@ -76,6 +79,27 @@ class KafkaConfigUpdaterSuite extends SparkFunSuite with KafkaDelegationTokenTes\n     val params = Map(\n       CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG -> bootStrapServers\n     )\n+    testWithTokenSetValues(params, updatedParams => {\n+      assert(updatedParams.get(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG) ===\n+        KafkaTokenSparkConf.DEFAULT_SECURITY_PROTOCOL_CONFIG)\n+    })\n+  }\n+\n+  test(\"setAuthenticationConfigIfNeeded with token should set values but override protocol\") {\n+    val overrideProtocolName = SASL_PLAINTEXT.name\n+    val params = Map(\n+      CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG -> bootStrapServers,\n+      CommonClientConfigs.SECURITY_PROTOCOL_CONFIG -> overrideProtocolName\n+    )\n+    testWithTokenSetValues(params, updatedParams => {\n+      assert(updatedParams.get(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG) ===\n+        overrideProtocolName)\n+    })\n+  }\n+\n+  def testWithTokenSetValues("
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Changed.",
    "commit": "7f16e2862369a549e62baae72dab1fa0607199fb",
    "createdAt": "2019-09-05T11:38:01Z",
    "diffHunk": "@@ -76,6 +79,27 @@ class KafkaConfigUpdaterSuite extends SparkFunSuite with KafkaDelegationTokenTes\n     val params = Map(\n       CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG -> bootStrapServers\n     )\n+    testWithTokenSetValues(params, updatedParams => {\n+      assert(updatedParams.get(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG) ===\n+        KafkaTokenSparkConf.DEFAULT_SECURITY_PROTOCOL_CONFIG)\n+    })\n+  }\n+\n+  test(\"setAuthenticationConfigIfNeeded with token should set values but override protocol\") {\n+    val overrideProtocolName = SASL_PLAINTEXT.name\n+    val params = Map(\n+      CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG -> bootStrapServers,\n+      CommonClientConfigs.SECURITY_PROTOCOL_CONFIG -> overrideProtocolName\n+    )\n+    testWithTokenSetValues(params, updatedParams => {\n+      assert(updatedParams.get(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG) ===\n+        overrideProtocolName)\n+    })\n+  }\n+\n+  def testWithTokenSetValues("
  }],
  "prId": 25631
}]