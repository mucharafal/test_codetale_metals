[
  {
    "id" : "7b25f551-75c0-44f0-90c9-3336ef5c9ce7",
    "prId" : 79,
    "comments" : [
      {
        "id" : "26bcd8f6-853a-49be-8b1b-7b5d311ff710",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Should we mention addCompilerPlugin(semanticdb)? It's currently required for definitions.",
        "createdAt" : "2017-11-30T21:24:15Z",
        "updatedAt" : "2017-12-01T15:49:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e56345a0-2dd3-4f62-9ff8-f2f73fcf5d54",
        "parentId" : "26bcd8f6-853a-49be-8b1b-7b5d311ff710",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "ah, yes, totally forgot about that, thanks",
        "createdAt" : "2017-11-30T21:31:36Z",
        "updatedAt" : "2017-12-01T15:49:11Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a2b2357bcf2208d48b22765e74dc151800c0218d",
    "line" : 59,
    "diffHunk" : "@@ -0,0 +1,49 @@\n+> ⚠️ This project is very alpha stage. Expect bugs and surprising behavior. Ticket reports and patches are welcome!\n+\n+# Installation\n+The following guide provides instructions on how to try this on a real project, with the purpose\n+of collecting valuable feedback from real-world scenarios.\n+\n+## Step 1 - sbt plugin\n+The server needs to access some metadata about the build configuration. This data are produced by\n+an sbt plugin. This plugin is currently not published, so you will need to copy paste it on your machine.\n+You have two options: enable the plugin globally (so that it will be available in all projects) or\n+locally to a single project.\n+\n+Here's the source of the plugin: https://github.com/scalameta/language-server/blob/master/project/ScalametaLanguageServerPlugin.scala\n+\n+### Globally\n+Copy the source to either (depending on your sbt version):\n+- `~/.sbt/0.13/plugins/project/ScalametaLanguageServerPlugin.scala` (sbt 0.13)\n+- `~/.sbt/1.0/plugins/project/ScalametaLanguageServerPlugin.scala` (sbt 1.0)\n+\n+### Locally\n+Copy the source to `/path/to/yourproject/project/ScalametaLanguageServerPlugin.scala`\n+\n+## Step 2 - build the VSCode extension\n+The VSCode extension is not yet published on the Marketplace, so you'll need to build it locally.\n+For this step, `node` and `npm` are required.\n+\n+- `cd vscode-extension`\n+- `npm install`\n+- `npm run build`\n+- `code --install-extension vscode-scalameta-0.0.1.vsix`\n+\n+## Step 3 - publish the server locally\n+From the repo root run `sbt publishLocal`\n+\n+# Usage\n+In your project of choice, open `sbt` in your project and run `*:scalametaEnableCompletions`.\n+As mentioned above, this will produce the necessary metadata for the server.\n+\n+> **NOTE**: you will need to repeat this step every time you add a new source file to the project\n+\n+Open your project in VSCode (`code .` from your terminal) and open a Scala file; the server will now start.\n+\n+Please note that it may take a few seconds for the server to start and there's currently no explicit\n+indication that the server has started (other than features starting to work).\n+To monitor the server activity, we suggest to watch the log file in your project's target directory,\n+for instance: `tail -f target/metaserver.log`.\n+\n+Finally, since most features currently rely on a successful compilation step, make sure you incrementally\n+compile your project by running `~compile` in `sbt`."
  },
  {
    "id" : "f35e51df-6471-487f-b4eb-5614ef7e2bd6",
    "prId" : 79,
    "comments" : [
      {
        "id" : "9fbdae88-5017-4239-8829-c805a23bb6b3",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "I would move this step under the Usage section, like the `scalametaEnableCompletions` mention. Because the previous 3 steps need to be done once for all projects, while this needs to be done once for each project. ",
        "createdAt" : "2017-12-01T00:07:16Z",
        "updatedAt" : "2017-12-01T15:49:11Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f36b83a6-e2a2-4bdb-ac99-2bb2e47ba04d",
        "parentId" : "9fbdae88-5017-4239-8829-c805a23bb6b3",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I agree: I think a more sensible split is \"Global setup\" / \"Per-project setup\", rather than \"Instructions\" / \"Usage\"",
        "createdAt" : "2017-12-01T13:43:26Z",
        "updatedAt" : "2017-12-01T15:49:11Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a2b2357bcf2208d48b22765e74dc151800c0218d",
    "line" : null,
    "diffHunk" : "@@ -32,8 +32,18 @@ For this step, `node` and `npm` are required.\n ## Step 3 - publish the server locally\n From the repo root run `sbt publishLocal`\n \n+## Step 4 - add semanticdb-scalac compiler plugin to your project\n+Some features of the server rely on the artifacts produced by [`semanticdb-scalac`](http://scalameta.org/tutorial/#semanticdb-scalac)."
  },
  {
    "id" : "ad2d49c3-48d2-4389-b384-5755f47212c4",
    "prId" : 79,
    "comments" : [
      {
        "id" : "0c9d16cc-242d-4720-9552-6040cfea5890",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "or run `clean` in sbt",
        "createdAt" : "2017-12-01T00:10:40Z",
        "updatedAt" : "2017-12-01T15:49:11Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "664257a5-c7d1-4512-823a-2b490d713372",
        "parentId" : "0c9d16cc-242d-4720-9552-6040cfea5890",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "what do you mean? If you run `clean` you will need to re-run the command again.",
        "createdAt" : "2017-12-01T10:24:21Z",
        "updatedAt" : "2017-12-01T15:49:11Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "da81f1d9-1fe9-4316-8072-429d5613326f",
        "parentId" : "0c9d16cc-242d-4720-9552-6040cfea5890",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I'm personally concerned about writing docs on .compilerconfig/scalametaEnableCompletions, it's really just the bare bones to be able to develop more lsp features. I think we should consider moving to eclipse settings/bloop-config/sbt-lsp before adding instructions for non-contributors to play around with. `.compilerconfig`/scalametaEnableCompletion was never meant to be widely used.",
        "createdAt" : "2017-12-01T10:41:22Z",
        "updatedAt" : "2017-12-01T15:49:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "553fb630-8d7a-417f-9f7f-e4cc2cbbf36b",
        "parentId" : "0c9d16cc-242d-4720-9552-6040cfea5890",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "> If you run clean you will need to re-run the command again.\r\n\r\nI meant exactly this, just to add it to the note:\r\n\r\n> ou will need to repeat this step every time you add a new source file to the project _or run `clean` in sbt_",
        "createdAt" : "2017-12-01T10:43:40Z",
        "updatedAt" : "2017-12-01T15:49:11Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0264a58e-5043-4658-a521-92b46c8df7db",
        "parentId" : "0c9d16cc-242d-4720-9552-6040cfea5890",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "@olafurpg I understand your concern, but I think it's ok for the audience we're targeting now (a few people to have some feedback). As I said in the original post, my intent is not to advertise this in anyway.\r\n\r\nIncidentally, I've tested the guide on 4 colleagues of mine, with different results. I'll report back soon and tweak the instruction a little.\r\n\r\n@laughedelic ah I understand now! It makes sense, I'll add it.",
        "createdAt" : "2017-12-01T13:42:47Z",
        "updatedAt" : "2017-12-01T15:49:11Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a2b2357bcf2208d48b22765e74dc151800c0218d",
    "line" : null,
    "diffHunk" : "@@ -32,8 +32,18 @@ For this step, `node` and `npm` are required.\n ## Step 3 - publish the server locally\n From the repo root run `sbt publishLocal`\n \n+## Step 4 - add semanticdb-scalac compiler plugin to your project\n+Some features of the server rely on the artifacts produced by [`semanticdb-scalac`](http://scalameta.org/tutorial/#semanticdb-scalac).\n+Enable it in your sbt build by:\n+\n+- adding the setting\n+\n+    `addCompilerPlugin(\"org.scalameta\" % \"semanticdb-scalac\" % \"2.1.2\" cross CrossVersion.full)`\n+\n+- adding the `-Yrangepos` scalac flag (e.g. `scalacOptions += \"-Yrangepos\"`)\n+\n # Usage\n-In your project of choice, open `sbt` in your project and run `*:scalametaEnableCompletions`.\n+In your project of choice, open `sbt` and run `*:scalametaEnableCompletions`.\n As mentioned above, this will produce the necessary metadata for the server.\n \n > **NOTE**: you will need to repeat this step every time you add a new source file to the project"
  },
  {
    "id" : "2ba7c4b3-937a-441a-a273-7dd21444169d",
    "prId" : 137,
    "comments" : [
      {
        "id" : "c0c6d173-3979-41dd-91e5-28633a8398b7",
        "parentId" : null,
        "author" : {
          "login" : "cquiroz",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3615303?u=4f8908ca530e79d2da27aa9fb58e557c85452a14&v=4"
        },
        "body" : "I was exactly looking for this, but can this be enable without touching any of the `sbt` files?",
        "createdAt" : "2017-12-18T20:54:53Z",
        "updatedAt" : "2017-12-18T20:59:48Z",
        "lastEditedBy" : {
          "login" : "cquiroz",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3615303?u=4f8908ca530e79d2da27aa9fb58e557c85452a14&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a4340c46-b153-4996-975c-9f34f8485ab4",
        "parentId" : "c0c6d173-3979-41dd-91e5-28633a8398b7",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Yes, this works without touching any sbt files.",
        "createdAt" : "2017-12-18T20:59:19Z",
        "updatedAt" : "2017-12-18T20:59:48Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c0a22d5b4b0bec14b8334b06379a15781329cd9e",
    "line" : 22,
    "diffHunk" : "@@ -32,14 +32,24 @@ From the repo root run `sbt publishLocal`\n These steps are required on each project.\n \n ## Step 1 - add semanticdb-scalac compiler plugin to your project\n-Some features of the server rely on the artifacts produced by [`semanticdb-scalac`](http://scalameta.org/tutorial/#semanticdb-scalac).\n-Enable it in your sbt build by:\n-\n-- adding the setting\n-\n-    `addCompilerPlugin(\"org.scalameta\" % \"semanticdb-scalac\" % \"2.1.2\" cross CrossVersion.full)`\n-\n-- adding the `-Yrangepos` scalac flag (e.g. `scalacOptions += \"-Yrangepos\"`)\n+Some features of the server rely on the artifacts produced by the [`semanticdb-scalac`](http://scalameta.org/tutorial/#semanticdb-scalac) compiler plugin.\n+There are two alternative ways to install `semanticdb-scalac`.\n+\n+The first option is to enable `semanticdb-scalac` permanently for your project in `build.sbt` with:\n+\n+```scala\n+libraryDependencies += compilerPlugin(\"org.scalameta\" % \"semanticdb-scalac\" % \"2.1.2\" cross CrossVersion.full)\n+scalacOptions += \"-Yrangepos\"\n+```\n+\n+The second option is to enable `semanticdb-scalac` only for an active sbt session by running `semanticdbEnable` from the sbt shell."
  },
  {
    "id" : "7cd0d4c1-5304-44e2-8056-fc1917e2c7ef",
    "prId" : 214,
    "comments" : [
      {
        "id" : "50cb3631-6c10-4d8e-a22a-38b0e97dd9ed",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Can this be updated to the latest 2.*?",
        "createdAt" : "2018-03-31T14:14:14Z",
        "updatedAt" : "2018-03-31T22:01:15Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5119d1f7-c9b3-4c84-ac61-208d6c16ed9a",
        "parentId" : "50cb3631-6c10-4d8e-a22a-38b0e97dd9ed",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Good idea, done.\r\n\r\nWe will soon need to upgrade to 3.x",
        "createdAt" : "2018-03-31T15:36:49Z",
        "updatedAt" : "2018-03-31T22:01:15Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d3146fa5e1de6aea4434fb7ac94da886a8657feb",
    "line" : null,
    "diffHunk" : "@@ -1,69 +1,96 @@\n-> ⚠️ This project is very alpha stage. Expect bugs and surprising behavior. Ticket reports and patches are welcome!\n+> ⚠️ This project is very alpha stage. Expect bugs and incomplete documentation.\n \n-The following guide provides instructions on how to try this on a real project, with the purpose\n-of collecting valuable feedback from real-world scenarios.\n+The following instructions are intended for contributors who want to try Metals\n+on a real-world project.\n \n # Global setup\n+\n These steps are required once per machine.\n \n ## Step 1 - sbt plugin\n-The server needs to access some metadata about the build configuration. This data are produced by\n-an sbt plugin. This plugin is currently not published, so you will need to copy paste it on your machine.\n \n-Here's the source of the plugin: https://github.com/scalameta/metals/blob/master/project/MetalsPlugin.scala\n+The server needs to access some metadata about the build configuration. This\n+data are produced by an sbt plugin. This plugin is currently not published, so\n+you will need to copy paste it on your machine.\n+\n+Here's the source of the plugin:\n+https://github.com/scalameta/metals/blob/master/project/MetalsPlugin.scala\n \n Copy the source to either (depending on your sbt version):\n-- (sbt 0.13) `~/.sbt/0.13/plugins/MetalsPlugin.scala`\n-- (sbt 1.0) `~/.sbt/1.0/plugins/MetalsPlugin.scala`\n+\n+* (sbt 0.13) `~/.sbt/0.13/plugins/MetalsPlugin.scala`\n+* (sbt 1.0) `~/.sbt/1.0/plugins/MetalsPlugin.scala`\n \n ## Step 2 - build the VSCode extension\n-The VSCode extension is not yet published on the Marketplace, so you'll need to build it locally.\n-For this step, `node` and `npm` are required.\n \n-- `cd vscode-extension`\n-- `npm install`\n-- `npm run build`\n-- `code --install-extension vscode-metals-0.0.1.vsix`\n+The VSCode extension is not yet published on the Marketplace, so you'll need to\n+build it locally. For this step, `node`, `npm` and VS Code are required.\n+\n+* `cd vscode-extension`\n+* `npm install`\n+* `npm run build`\n+* `code --install-extension vscode-metals-0.0.1.vsix`\n+\n+Make sure you have the\n+[\"Scala Syntax\"](https://marketplace.visualstudio.com/items?itemName=daltonjorge.scala)\n+plugin installed in VS Code.\n \n ## Step 3 - publish the server locally\n+\n From the repo root run `sbt publishLocal`\n \n # Per-project setup\n+\n These steps are required on each project.\n \n ## Step 1 - add semanticdb-scalac compiler plugin to your project\n-Some features of the server rely on the artifacts produced by the [`semanticdb-scalac`](http://scalameta.org/tutorial/#semanticdb-scalac) compiler plugin.\n-There are two alternative ways to install `semanticdb-scalac`.\n \n-The first option is to enable `semanticdb-scalac` permanently for your project in `build.sbt` with:\n+Some features like definition/references/hover rely on artifacts produced by a\n+compiler plugin called `semanticdb-scalac`. There are two alternative ways to\n+install `semanticdb-scalac`.\n+\n+The first option is to enable `semanticdb-scalac` permanently for your project\n+in `build.sbt` with:\n \n ```scala\n-libraryDependencies += compilerPlugin(\"org.scalameta\" % \"semanticdb-scalac\" % \"2.1.2\" cross CrossVersion.full)\n+ addCompilerPlugin(\"org.scalameta\" % \"semanticdb-scalac\" % \"2.1.2\" cross CrossVersion.full)"
  },
  {
    "id" : "54cfac96-c26e-47ad-ac00-6ff591ec2877",
    "prId" : 214,
    "comments" : [
      {
        "id" : "4f7f7ddf-c6ec-46ca-88e9-ce4f30899241",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "I think it's better if you rename it in this PR (to whatever is less misleading) than add this note.",
        "createdAt" : "2018-03-31T14:15:45Z",
        "updatedAt" : "2018-03-31T22:01:15Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4fea0f2d-9b6d-497b-9eff-a1314a8d9987",
        "parentId" : "4f7f7ddf-c6ec-46ca-88e9-ce4f30899241",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I agree, done. Renamed to `metalsSetup`.",
        "createdAt" : "2018-03-31T15:37:01Z",
        "updatedAt" : "2018-03-31T22:01:15Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d3146fa5e1de6aea4434fb7ac94da886a8657feb",
    "line" : null,
    "diffHunk" : "@@ -1,69 +1,96 @@\n-> ⚠️ This project is very alpha stage. Expect bugs and surprising behavior. Ticket reports and patches are welcome!\n+> ⚠️ This project is very alpha stage. Expect bugs and incomplete documentation.\n \n-The following guide provides instructions on how to try this on a real project, with the purpose\n-of collecting valuable feedback from real-world scenarios.\n+The following instructions are intended for contributors who want to try Metals\n+on a real-world project.\n \n # Global setup\n+\n These steps are required once per machine.\n \n ## Step 1 - sbt plugin\n-The server needs to access some metadata about the build configuration. This data are produced by\n-an sbt plugin. This plugin is currently not published, so you will need to copy paste it on your machine.\n \n-Here's the source of the plugin: https://github.com/scalameta/metals/blob/master/project/MetalsPlugin.scala\n+The server needs to access some metadata about the build configuration. This\n+data are produced by an sbt plugin. This plugin is currently not published, so\n+you will need to copy paste it on your machine.\n+\n+Here's the source of the plugin:\n+https://github.com/scalameta/metals/blob/master/project/MetalsPlugin.scala\n \n Copy the source to either (depending on your sbt version):\n-- (sbt 0.13) `~/.sbt/0.13/plugins/MetalsPlugin.scala`\n-- (sbt 1.0) `~/.sbt/1.0/plugins/MetalsPlugin.scala`\n+\n+* (sbt 0.13) `~/.sbt/0.13/plugins/MetalsPlugin.scala`\n+* (sbt 1.0) `~/.sbt/1.0/plugins/MetalsPlugin.scala`\n \n ## Step 2 - build the VSCode extension\n-The VSCode extension is not yet published on the Marketplace, so you'll need to build it locally.\n-For this step, `node` and `npm` are required.\n \n-- `cd vscode-extension`\n-- `npm install`\n-- `npm run build`\n-- `code --install-extension vscode-metals-0.0.1.vsix`\n+The VSCode extension is not yet published on the Marketplace, so you'll need to\n+build it locally. For this step, `node`, `npm` and VS Code are required.\n+\n+* `cd vscode-extension`\n+* `npm install`\n+* `npm run build`\n+* `code --install-extension vscode-metals-0.0.1.vsix`\n+\n+Make sure you have the\n+[\"Scala Syntax\"](https://marketplace.visualstudio.com/items?itemName=daltonjorge.scala)\n+plugin installed in VS Code.\n \n ## Step 3 - publish the server locally\n+\n From the repo root run `sbt publishLocal`\n \n # Per-project setup\n+\n These steps are required on each project.\n \n ## Step 1 - add semanticdb-scalac compiler plugin to your project\n-Some features of the server rely on the artifacts produced by the [`semanticdb-scalac`](http://scalameta.org/tutorial/#semanticdb-scalac) compiler plugin.\n-There are two alternative ways to install `semanticdb-scalac`.\n \n-The first option is to enable `semanticdb-scalac` permanently for your project in `build.sbt` with:\n+Some features like definition/references/hover rely on artifacts produced by a\n+compiler plugin called `semanticdb-scalac`. There are two alternative ways to\n+install `semanticdb-scalac`.\n+\n+The first option is to enable `semanticdb-scalac` permanently for your project\n+in `build.sbt` with:\n \n ```scala\n-libraryDependencies += compilerPlugin(\"org.scalameta\" % \"semanticdb-scalac\" % \"2.1.2\" cross CrossVersion.full)\n+ addCompilerPlugin(\"org.scalameta\" % \"semanticdb-scalac\" % \"2.1.2\" cross CrossVersion.full)\n scalacOptions += \"-Yrangepos\"\n ```\n \n-The second option is to enable `semanticdb-scalac` only for an active sbt session by running `semanticdbEnable` from the sbt shell.\n+The second option is to enable `semanticdb-scalac` only for an active sbt\n+session by running `semanticdbEnable` from the sbt shell.\n+\n ```scala\n $ sbt\n > semanticdbEnable // automatically runs libraryDependencies += compilerPlugin(...)\n > compile // re-compile project with semanticdb-scalac compiler plugin\n > ...\n ```\n-As soon as you exit the sbt shell you need to re-run `semanticdbEnable` next time you open sbt.\n+\n+As soon as you exit the sbt shell you need to re-run `semanticdbEnable` next\n+time you open sbt.\n \n ## Step 2 - produce the build metadata\n+\n In your project of choice, open `sbt` and run `*:metalsEnableCompletions`.\n-As mentioned above, this will produce the necessary metadata for the server.\n+Running the task produces the necessary metadata for the server to support\n+features like completions and goto definition in dependency sources.\n \n-> **NOTE**: you will need to repeat this step every time you add a new source file to the project or if you run `sbt clean`\n+> **NOTE**: you will need to repeat this step every time you add a new\n+> dependency in your build or when you run `sbt clean`. Also,\n+> the \"`metalsEnableCompletions`\" name is misleading since it does not\n+> automatically enable completions."
  },
  {
    "id" : "2df95a10-72ea-4185-b857-5665839b8be2",
    "prId" : 214,
    "comments" : [
      {
        "id" : "2c043297-4283-4632-a0b8-acb687725b32",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "I think it's worth mentioning that you can watch this log in the VSCode output panel (selecting Metals on the right)",
        "createdAt" : "2018-03-31T14:19:26Z",
        "updatedAt" : "2018-03-31T22:01:15Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3184f995-a6c0-46e6-b85b-137964019be0",
        "parentId" : "2c043297-4283-4632-a0b8-acb687725b32",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I've never done that. \r\n\r\nUpdated.",
        "createdAt" : "2018-03-31T15:37:52Z",
        "updatedAt" : "2018-03-31T22:01:15Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "db79ddbb-4a2c-4b0d-b757-de3721442c9f",
        "parentId" : "2c043297-4283-4632-a0b8-acb687725b32",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Good catch, I exclusively look at logs from the VSCode panel!",
        "createdAt" : "2018-03-31T17:51:29Z",
        "updatedAt" : "2018-03-31T22:01:15Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d3146fa5e1de6aea4434fb7ac94da886a8657feb",
    "line" : null,
    "diffHunk" : "@@ -1,69 +1,96 @@\n-> ⚠️ This project is very alpha stage. Expect bugs and surprising behavior. Ticket reports and patches are welcome!\n+> ⚠️ This project is very alpha stage. Expect bugs and incomplete documentation.\n \n-The following guide provides instructions on how to try this on a real project, with the purpose\n-of collecting valuable feedback from real-world scenarios.\n+The following instructions are intended for contributors who want to try Metals\n+on a real-world project.\n \n # Global setup\n+\n These steps are required once per machine.\n \n ## Step 1 - sbt plugin\n-The server needs to access some metadata about the build configuration. This data are produced by\n-an sbt plugin. This plugin is currently not published, so you will need to copy paste it on your machine.\n \n-Here's the source of the plugin: https://github.com/scalameta/metals/blob/master/project/MetalsPlugin.scala\n+The server needs to access some metadata about the build configuration. This\n+data are produced by an sbt plugin. This plugin is currently not published, so\n+you will need to copy paste it on your machine.\n+\n+Here's the source of the plugin:\n+https://github.com/scalameta/metals/blob/master/project/MetalsPlugin.scala\n \n Copy the source to either (depending on your sbt version):\n-- (sbt 0.13) `~/.sbt/0.13/plugins/MetalsPlugin.scala`\n-- (sbt 1.0) `~/.sbt/1.0/plugins/MetalsPlugin.scala`\n+\n+* (sbt 0.13) `~/.sbt/0.13/plugins/MetalsPlugin.scala`\n+* (sbt 1.0) `~/.sbt/1.0/plugins/MetalsPlugin.scala`\n \n ## Step 2 - build the VSCode extension\n-The VSCode extension is not yet published on the Marketplace, so you'll need to build it locally.\n-For this step, `node` and `npm` are required.\n \n-- `cd vscode-extension`\n-- `npm install`\n-- `npm run build`\n-- `code --install-extension vscode-metals-0.0.1.vsix`\n+The VSCode extension is not yet published on the Marketplace, so you'll need to\n+build it locally. For this step, `node`, `npm` and VS Code are required.\n+\n+* `cd vscode-extension`\n+* `npm install`\n+* `npm run build`\n+* `code --install-extension vscode-metals-0.0.1.vsix`\n+\n+Make sure you have the\n+[\"Scala Syntax\"](https://marketplace.visualstudio.com/items?itemName=daltonjorge.scala)\n+plugin installed in VS Code.\n \n ## Step 3 - publish the server locally\n+\n From the repo root run `sbt publishLocal`\n \n # Per-project setup\n+\n These steps are required on each project.\n \n ## Step 1 - add semanticdb-scalac compiler plugin to your project\n-Some features of the server rely on the artifacts produced by the [`semanticdb-scalac`](http://scalameta.org/tutorial/#semanticdb-scalac) compiler plugin.\n-There are two alternative ways to install `semanticdb-scalac`.\n \n-The first option is to enable `semanticdb-scalac` permanently for your project in `build.sbt` with:\n+Some features like definition/references/hover rely on artifacts produced by a\n+compiler plugin called `semanticdb-scalac`. There are two alternative ways to\n+install `semanticdb-scalac`.\n+\n+The first option is to enable `semanticdb-scalac` permanently for your project\n+in `build.sbt` with:\n \n ```scala\n-libraryDependencies += compilerPlugin(\"org.scalameta\" % \"semanticdb-scalac\" % \"2.1.2\" cross CrossVersion.full)\n+ addCompilerPlugin(\"org.scalameta\" % \"semanticdb-scalac\" % \"2.1.2\" cross CrossVersion.full)\n scalacOptions += \"-Yrangepos\"\n ```\n \n-The second option is to enable `semanticdb-scalac` only for an active sbt session by running `semanticdbEnable` from the sbt shell.\n+The second option is to enable `semanticdb-scalac` only for an active sbt\n+session by running `semanticdbEnable` from the sbt shell.\n+\n ```scala\n $ sbt\n > semanticdbEnable // automatically runs libraryDependencies += compilerPlugin(...)\n > compile // re-compile project with semanticdb-scalac compiler plugin\n > ...\n ```\n-As soon as you exit the sbt shell you need to re-run `semanticdbEnable` next time you open sbt.\n+\n+As soon as you exit the sbt shell you need to re-run `semanticdbEnable` next\n+time you open sbt.\n \n ## Step 2 - produce the build metadata\n+\n In your project of choice, open `sbt` and run `*:metalsEnableCompletions`.\n-As mentioned above, this will produce the necessary metadata for the server.\n+Running the task produces the necessary metadata for the server to support\n+features like completions and goto definition in dependency sources.\n \n-> **NOTE**: you will need to repeat this step every time you add a new source file to the project or if you run `sbt clean`\n+> **NOTE**: you will need to repeat this step every time you add a new\n+> dependency in your build or when you run `sbt clean`. Also,\n+> the \"`metalsEnableCompletions`\" name is misleading since it does not\n+> automatically enable completions.\n \n ## Step 3 - start editing\n-Open your project in VSCode (`code .` from your terminal) and open a Scala file; the server will now start.\n \n-Please note that it may take a few seconds for the server to start and there's currently no explicit\n-indication that the server has started (other than features starting to work).\n-To monitor the server activity, we suggest to watch the log file in your project's target directory,\n-for instance: `tail -f .metals/metals.log`.\n+Open your project in VSCode (`code .` from your terminal) and open a Scala file;\n+the server will now start.\n+\n+Please note that it may take a few seconds for the server to start and there's\n+currently no explicit indication that the server has started (other than\n+features starting to work). To monitor the server activity, we suggest to watch\n+the log file in your project's target directory, for instance:\n+`tail -f .metals/metals.log`."
  },
  {
    "id" : "8d117817-a3c6-499b-bdbe-89a631cedc6c",
    "prId" : 218,
    "comments" : [
      {
        "id" : "d77b80fd-1c93-4c76-b615-089e01ded3b7",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Installing the metals VSCode extension now automatically ensures that https://marketplace.visualstudio.com/items?itemName=scala-lang.scala is installed.",
        "createdAt" : "2018-04-02T13:59:54Z",
        "updatedAt" : "2018-04-02T13:59:55Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "068a26e77742148e377252e19071478495c26d1e",
    "line" : 6,
    "diffHunk" : "@@ -27,13 +27,10 @@ The VSCode extension is not yet published on the Marketplace, so you'll need to\n build it locally.\n \n * Make sure you have installed `node`, `npm` and VS Code.\n-* Install the\n-  [\"Scala Syntax\"](https://marketplace.visualstudio.com/items?itemName=daltonjorge.scala)\n-  plugin in VS Code."
  }
]