[
  {
    "id" : "d5b6ed14-aa4d-40bb-a069-60bb15d64bc6",
    "prId" : 1,
    "comments" : [
      {
        "id" : "0f0cbb87-b282-44bb-acae-4db1c3e534b4",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "does this mean the file is reloaded from disk at every execution of scalafix? If this is not an expensive operation it would save the burden of syncing the file (so what I said above may not be true)",
        "createdAt" : "2017-11-05T09:50:10Z",
        "updatedAt" : "2017-11-05T11:26:41Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c200e05d-f9b4-417c-a496-b01532744a71",
        "parentId" : "0f0cbb87-b282-44bb-acae-4db1c3e534b4",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This is only creating a `m.Input.File`, not reading the file. I made it a def so that we don't cache an empty result in case .scalafix.conf. I'd love to create a library like cosmic conf (iirc, js lib) that handles caching and looking up filenames etc. For now I think we should focus on correctness and later improve bottlenecks where they appear.",
        "createdAt" : "2017-11-05T10:43:14Z",
        "updatedAt" : "2017-11-05T11:26:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7997b78c44b241641a7ac02fac3fa7eee9fbb649",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,135 @@\n+// In scalafix package to access private[scalafix] methods.\n+package scalafix.languageserver\n+\n+import java.io.PrintStream\n+import java.nio.file.Files\n+import scala.meta.internal.tokenizers.PlatformTokenizerCache\n+import scala.tools.nsc.interpreter.OutputStream\n+import scala.{meta => m}\n+import scalafix._\n+import scalafix.internal.config.LazySemanticdbIndex\n+import scalafix.internal.config.ScalafixConfig\n+import scalafix.internal.config.ScalafixReporter\n+import scalafix.internal.util.EagerInMemorySemanticdbIndex\n+import scalafix.lint.LintSeverity\n+import scalafix.patch.Patch\n+import scalafix.reflect.ScalafixReflect\n+import scalafix.rule.RuleCtx\n+import scalafix.rule.RuleName\n+import scalafix.util.SemanticdbIndex\n+import langserver.core.Connection\n+import langserver.messages.MessageType\n+import langserver.{types => l}\n+import metaconfig.ConfDecoder\n+import org.langmeta.internal.semanticdb.{schema => s}\n+import org.langmeta.io.AbsolutePath\n+import org.langmeta.io.RelativePath\n+\n+case class ScalafixResult(path: RelativePath, diagnostics: Seq[l.Diagnostic])\n+\n+class ScalafixService(cwd: AbsolutePath,\n+                      out: OutputStream,\n+                      connection: Connection) {\n+  def configFile: Option[m.Input] = ScalafixConfig.auto(cwd)"
  },
  {
    "id" : "3d1987e7-f019-4741-8e89-8eddc384a0fb",
    "prId" : 1,
    "comments" : [
      {
        "id" : "88ddc707-56c7-4b8c-9477-42cb068de559",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "are we actually using all these overloads?",
        "createdAt" : "2017-11-05T09:51:10Z",
        "updatedAt" : "2017-11-05T11:26:41Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "38fd455c-dc9c-4b66-8578-dd76eff4efa2",
        "parentId" : "88ddc707-56c7-4b8c-9477-42cb068de559",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Nope, I'll strip it down. ",
        "createdAt" : "2017-11-05T10:44:51Z",
        "updatedAt" : "2017-11-05T11:26:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7997b78c44b241641a7ac02fac3fa7eee9fbb649",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,135 @@\n+// In scalafix package to access private[scalafix] methods.\n+package scalafix.languageserver\n+\n+import java.io.PrintStream\n+import java.nio.file.Files\n+import scala.meta.internal.tokenizers.PlatformTokenizerCache\n+import scala.tools.nsc.interpreter.OutputStream\n+import scala.{meta => m}\n+import scalafix._\n+import scalafix.internal.config.LazySemanticdbIndex\n+import scalafix.internal.config.ScalafixConfig\n+import scalafix.internal.config.ScalafixReporter\n+import scalafix.internal.util.EagerInMemorySemanticdbIndex\n+import scalafix.lint.LintSeverity\n+import scalafix.patch.Patch\n+import scalafix.reflect.ScalafixReflect\n+import scalafix.rule.RuleCtx\n+import scalafix.rule.RuleName\n+import scalafix.util.SemanticdbIndex\n+import langserver.core.Connection\n+import langserver.messages.MessageType\n+import langserver.{types => l}\n+import metaconfig.ConfDecoder\n+import org.langmeta.internal.semanticdb.{schema => s}\n+import org.langmeta.io.AbsolutePath\n+import org.langmeta.io.RelativePath\n+\n+case class ScalafixResult(path: RelativePath, diagnostics: Seq[l.Diagnostic])\n+\n+class ScalafixService(cwd: AbsolutePath,\n+                      out: OutputStream,\n+                      connection: Connection) {\n+  def configFile: Option[m.Input] = ScalafixConfig.auto(cwd)\n+  def lazySemanticdbIndex(index: SemanticdbIndex): LazySemanticdbIndex =\n+    new LazySemanticdbIndex(\n+      _ => Some(index),\n+      ScalafixReporter.default.copy(outStream = new PrintStream(out)))\n+  def onNewSemanticdb(path: AbsolutePath): Seq[ScalafixResult] =\n+    onNewSemanticdb(s.Database.parseFrom(Files.readAllBytes(path.toNIO)))\n+  def onNewSemanticdb(database: s.Database): Seq[ScalafixResult] =\n+    onNewSemanticdb(database.toDb(None))\n+  def onNewSemanticdb(database: m.Database): Seq[ScalafixResult] = {"
  },
  {
    "id" : "02a43853-11ca-438e-b230-612321dada41",
    "prId" : 1,
    "comments" : [
      {
        "id" : "069cf6ab-7967-48f5-a654-715317232416",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "what does `extraRules` do? I don't get the comment",
        "createdAt" : "2017-11-05T09:52:10Z",
        "updatedAt" : "2017-11-05T11:26:41Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "64222825-84f0-4170-a46b-8afb73f6c968",
        "parentId" : "069cf6ab-7967-48f5-a654-715317232416",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I expanded on the comment, I think we may want to use `extraRules` down the road.",
        "createdAt" : "2017-11-05T10:48:26Z",
        "updatedAt" : "2017-11-05T11:26:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7997b78c44b241641a7ac02fac3fa7eee9fbb649",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,135 @@\n+// In scalafix package to access private[scalafix] methods.\n+package scalafix.languageserver\n+\n+import java.io.PrintStream\n+import java.nio.file.Files\n+import scala.meta.internal.tokenizers.PlatformTokenizerCache\n+import scala.tools.nsc.interpreter.OutputStream\n+import scala.{meta => m}\n+import scalafix._\n+import scalafix.internal.config.LazySemanticdbIndex\n+import scalafix.internal.config.ScalafixConfig\n+import scalafix.internal.config.ScalafixReporter\n+import scalafix.internal.util.EagerInMemorySemanticdbIndex\n+import scalafix.lint.LintSeverity\n+import scalafix.patch.Patch\n+import scalafix.reflect.ScalafixReflect\n+import scalafix.rule.RuleCtx\n+import scalafix.rule.RuleName\n+import scalafix.util.SemanticdbIndex\n+import langserver.core.Connection\n+import langserver.messages.MessageType\n+import langserver.{types => l}\n+import metaconfig.ConfDecoder\n+import org.langmeta.internal.semanticdb.{schema => s}\n+import org.langmeta.io.AbsolutePath\n+import org.langmeta.io.RelativePath\n+\n+case class ScalafixResult(path: RelativePath, diagnostics: Seq[l.Diagnostic])\n+\n+class ScalafixService(cwd: AbsolutePath,\n+                      out: OutputStream,\n+                      connection: Connection) {\n+  def configFile: Option[m.Input] = ScalafixConfig.auto(cwd)\n+  def lazySemanticdbIndex(index: SemanticdbIndex): LazySemanticdbIndex =\n+    new LazySemanticdbIndex(\n+      _ => Some(index),\n+      ScalafixReporter.default.copy(outStream = new PrintStream(out)))\n+  def onNewSemanticdb(path: AbsolutePath): Seq[ScalafixResult] =\n+    onNewSemanticdb(s.Database.parseFrom(Files.readAllBytes(path.toNIO)))\n+  def onNewSemanticdb(database: s.Database): Seq[ScalafixResult] =\n+    onNewSemanticdb(database.toDb(None))\n+  def onNewSemanticdb(database: m.Database): Seq[ScalafixResult] = {\n+    onNewSemanticdb(\n+      EagerInMemorySemanticdbIndex(database,\n+                                   m.Sourcepath(Nil),\n+                                   m.Classpath(Nil)))\n+  }\n+\n+  // Simple method to run syntactic scalafix rules on a string.\n+  def onSyntacticInput(filename: String,\n+                       contents: String): Seq[ScalafixResult] = {\n+    onNewSemanticdb(\n+      EagerInMemorySemanticdbIndex(\n+        m.Database(\n+          m.Document(\n+            m.Input.VirtualFile(filename, contents),\n+            \"scala212\",\n+            Nil,\n+            Nil,\n+            Nil,\n+            Nil\n+          ) :: Nil\n+        ),\n+        m.Sourcepath(Nil),\n+        m.Classpath(Nil)\n+      ))\n+  }\n+\n+  // NOTE throws exception on failure.\n+  def onNewSemanticdb(index: SemanticdbIndex): Seq[ScalafixResult] =\n+    configFile match {\n+      case None =>\n+        connection.showMessage(\n+          MessageType.Info,\n+          s\"Missing .scalafix.conf in working directory $cwd\")\n+        Nil\n+      case Some(configInput) =>\n+        val lazyIndex = lazySemanticdbIndex(index)\n+        val (rule, config) = ScalafixConfig\n+          .fromInput(\n+            configInput,\n+            lazyIndex,\n+            extraRules = Nil // Can pass in List(\"RemoveUnusedImports\")"
  },
  {
    "id" : "a7d7fe40-0924-49d0-925f-5808ce921d44",
    "prId" : 1,
    "comments" : [
      {
        "id" : "b4d94009-18d9-45fc-818c-306980e0e3bc",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "do we still have a use for this one?",
        "createdAt" : "2017-11-05T10:05:23Z",
        "updatedAt" : "2017-11-05T11:26:41Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6e1a9265-8a36-4661-bf4e-0ce6d023c748",
        "parentId" : "b4d94009-18d9-45fc-818c-306980e0e3bc",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I think we should keep this open since we may want to run syntactic linters it on file edit giving more rapid feedback.",
        "createdAt" : "2017-11-05T10:45:36Z",
        "updatedAt" : "2017-11-05T11:26:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7997b78c44b241641a7ac02fac3fa7eee9fbb649",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,135 @@\n+// In scalafix package to access private[scalafix] methods.\n+package scalafix.languageserver\n+\n+import java.io.PrintStream\n+import java.nio.file.Files\n+import scala.meta.internal.tokenizers.PlatformTokenizerCache\n+import scala.tools.nsc.interpreter.OutputStream\n+import scala.{meta => m}\n+import scalafix._\n+import scalafix.internal.config.LazySemanticdbIndex\n+import scalafix.internal.config.ScalafixConfig\n+import scalafix.internal.config.ScalafixReporter\n+import scalafix.internal.util.EagerInMemorySemanticdbIndex\n+import scalafix.lint.LintSeverity\n+import scalafix.patch.Patch\n+import scalafix.reflect.ScalafixReflect\n+import scalafix.rule.RuleCtx\n+import scalafix.rule.RuleName\n+import scalafix.util.SemanticdbIndex\n+import langserver.core.Connection\n+import langserver.messages.MessageType\n+import langserver.{types => l}\n+import metaconfig.ConfDecoder\n+import org.langmeta.internal.semanticdb.{schema => s}\n+import org.langmeta.io.AbsolutePath\n+import org.langmeta.io.RelativePath\n+\n+case class ScalafixResult(path: RelativePath, diagnostics: Seq[l.Diagnostic])\n+\n+class ScalafixService(cwd: AbsolutePath,\n+                      out: OutputStream,\n+                      connection: Connection) {\n+  def configFile: Option[m.Input] = ScalafixConfig.auto(cwd)\n+  def lazySemanticdbIndex(index: SemanticdbIndex): LazySemanticdbIndex =\n+    new LazySemanticdbIndex(\n+      _ => Some(index),\n+      ScalafixReporter.default.copy(outStream = new PrintStream(out)))\n+  def onNewSemanticdb(path: AbsolutePath): Seq[ScalafixResult] =\n+    onNewSemanticdb(s.Database.parseFrom(Files.readAllBytes(path.toNIO)))\n+  def onNewSemanticdb(database: s.Database): Seq[ScalafixResult] =\n+    onNewSemanticdb(database.toDb(None))\n+  def onNewSemanticdb(database: m.Database): Seq[ScalafixResult] = {\n+    onNewSemanticdb(\n+      EagerInMemorySemanticdbIndex(database,\n+                                   m.Sourcepath(Nil),\n+                                   m.Classpath(Nil)))\n+  }\n+\n+  // Simple method to run syntactic scalafix rules on a string.\n+  def onSyntacticInput(filename: String,"
  }
]