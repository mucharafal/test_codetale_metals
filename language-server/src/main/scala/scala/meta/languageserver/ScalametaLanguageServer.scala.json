[
  {
    "id" : "9940be1d-8ad8-43c0-84b1-d144d1f825c4",
    "prId" : 4,
    "comments" : [
      {
        "id" : "a8d6c2ca-0a33-4e60-80d5-c80c94552a2e",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "lol, I spent su much time trying to get this right and I didn't think of this trick 👍 ",
        "createdAt" : "2017-11-05T16:37:38Z",
        "updatedAt" : "2017-11-05T16:52:29Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fb7f2b68fd2401d20d274b55fec49292737e0614",
    "line" : 75,
    "diffHunk" : "@@ -42,27 +46,49 @@ class ScalametaLanguageServer(cwd: AbsolutePath,\n \n   override def onChangeWatchedFiles(changes: Seq[FileEvent]): Unit =\n     changes.foreach {\n-      case FileEvent(SemanticdbUri(path),\n-                     FileChangeType.Created | FileChangeType.Changed) =>\n+      case FileEvent(uri @ Uri(path),\n+                     FileChangeType.Created | FileChangeType.Changed)\n+          if uri.endsWith(\".semanticdb\") =>\n         logger.info(s\"$path changed or created. Running scalafix...\")\n         scalafixService.onSemanticdbPath(path).foreach(report)\n       case event =>\n         logger.info(s\"Unhandled file event: $event\")\n         ()\n     }\n \n-  override def documentFormattingRequest(td: TextDocumentIdentifier,\n-                                         options: FormattingOptions) = {\n-    val path = new URI(td.uri)\n-    val lines = scala.io.Source.fromFile(path).getLines.toList\n-    val totalLines = lines.length\n-    val fullDocumentRange = Range(\n-      start = Position(0, 0),\n-      end = Position(totalLines, lines.last.length)\n-    )\n-    val content = lines.mkString\n-    val formattedContent = scalafmtService.formatDocument(content)\n-    List(TextEdit(fullDocumentRange, formattedContent))\n+  override def documentFormattingRequest(\n+      td: TextDocumentIdentifier,\n+      options: FormattingOptions): List[TextEdit] = {\n+    try {\n+      val path = Uri.toPath(td.uri).get\n+      val contents = buffers.read(td.uri).getOrElse(read(path))\n+      val fullDocumentRange = Range(\n+        start = Position(0, 0),\n+        end = Position(Int.MaxValue, Int.MaxValue)"
  },
  {
    "id" : "c3c84cd9-d66f-4c4c-8590-ed14d77bac6f",
    "prId" : 4,
    "comments" : [
      {
        "id" : "246847ad-7e24-420a-8433-091acc028492",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "we may want to remove this before merging",
        "createdAt" : "2017-11-05T16:38:02Z",
        "updatedAt" : "2017-11-05T16:52:29Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "046399f6-4cad-4b71-820c-891bffb85e69",
        "parentId" : "246847ad-7e24-420a-8433-091acc028492",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Removed.",
        "createdAt" : "2017-11-05T16:50:53Z",
        "updatedAt" : "2017-11-05T16:52:44Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fb7f2b68fd2401d20d274b55fec49292737e0614",
    "line" : null,
    "diffHunk" : "@@ -42,27 +46,49 @@ class ScalametaLanguageServer(cwd: AbsolutePath,\n \n   override def onChangeWatchedFiles(changes: Seq[FileEvent]): Unit =\n     changes.foreach {\n-      case FileEvent(SemanticdbUri(path),\n-                     FileChangeType.Created | FileChangeType.Changed) =>\n+      case FileEvent(uri @ Uri(path),\n+                     FileChangeType.Created | FileChangeType.Changed)\n+          if uri.endsWith(\".semanticdb\") =>\n         logger.info(s\"$path changed or created. Running scalafix...\")\n         scalafixService.onSemanticdbPath(path).foreach(report)\n       case event =>\n         logger.info(s\"Unhandled file event: $event\")\n         ()\n     }\n \n-  override def documentFormattingRequest(td: TextDocumentIdentifier,\n-                                         options: FormattingOptions) = {\n-    val path = new URI(td.uri)\n-    val lines = scala.io.Source.fromFile(path).getLines.toList\n-    val totalLines = lines.length\n-    val fullDocumentRange = Range(\n-      start = Position(0, 0),\n-      end = Position(totalLines, lines.last.length)\n-    )\n-    val content = lines.mkString\n-    val formattedContent = scalafmtService.formatDocument(content)\n-    List(TextEdit(fullDocumentRange, formattedContent))\n+  override def documentFormattingRequest(\n+      td: TextDocumentIdentifier,\n+      options: FormattingOptions): List[TextEdit] = {\n+    try {\n+      val path = Uri.toPath(td.uri).get\n+      val contents = buffers.read(td.uri).getOrElse(read(path))\n+      val fullDocumentRange = Range(\n+        start = Position(0, 0),\n+        end = Position(Int.MaxValue, Int.MaxValue)\n+      )\n+      connection.showMessage(MessageType.Info, s\"Running scalafmt on $path...\")"
  },
  {
    "id" : "8ad10c5e-be12-432a-a496-0df2ca19f966",
    "prId" : 4,
    "comments" : [
      {
        "id" : "8707ea17-2af7-4b00-ae06-42e0891437e9",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "it should be possible to make so that all exceptions are printed by modifying the LSP implementations. I'll take a look.",
        "createdAt" : "2017-11-05T16:42:11Z",
        "updatedAt" : "2017-11-05T16:52:29Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fb7f2b68fd2401d20d274b55fec49292737e0614",
    "line" : null,
    "diffHunk" : "@@ -42,27 +46,49 @@ class ScalametaLanguageServer(cwd: AbsolutePath,\n \n   override def onChangeWatchedFiles(changes: Seq[FileEvent]): Unit =\n     changes.foreach {\n-      case FileEvent(SemanticdbUri(path),\n-                     FileChangeType.Created | FileChangeType.Changed) =>\n+      case FileEvent(uri @ Uri(path),\n+                     FileChangeType.Created | FileChangeType.Changed)\n+          if uri.endsWith(\".semanticdb\") =>\n         logger.info(s\"$path changed or created. Running scalafix...\")\n         scalafixService.onSemanticdbPath(path).foreach(report)\n       case event =>\n         logger.info(s\"Unhandled file event: $event\")\n         ()\n     }\n \n-  override def documentFormattingRequest(td: TextDocumentIdentifier,\n-                                         options: FormattingOptions) = {\n-    val path = new URI(td.uri)\n-    val lines = scala.io.Source.fromFile(path).getLines.toList\n-    val totalLines = lines.length\n-    val fullDocumentRange = Range(\n-      start = Position(0, 0),\n-      end = Position(totalLines, lines.last.length)\n-    )\n-    val content = lines.mkString\n-    val formattedContent = scalafmtService.formatDocument(content)\n-    List(TextEdit(fullDocumentRange, formattedContent))\n+  override def documentFormattingRequest(\n+      td: TextDocumentIdentifier,\n+      options: FormattingOptions): List[TextEdit] = {\n+    try {"
  },
  {
    "id" : "9aab152a-3327-4f48-a78c-faad0c75ba39",
    "prId" : 4,
    "comments" : [
      {
        "id" : "c793ebc0-9b5b-4de0-8103-71198e47ca5c",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "newline between methods? 💃 ",
        "createdAt" : "2017-11-05T16:42:20Z",
        "updatedAt" : "2017-11-05T16:52:29Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ed441791-90b6-4590-8808-56f4a561c3e3",
        "parentId" : "c793ebc0-9b5b-4de0-8103-71198e47ca5c",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I'll try to do my best 😅 ",
        "createdAt" : "2017-11-05T16:51:26Z",
        "updatedAt" : "2017-11-05T16:52:44Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fb7f2b68fd2401d20d274b55fec49292737e0614",
    "line" : null,
    "diffHunk" : "@@ -42,27 +46,49 @@ class ScalametaLanguageServer(cwd: AbsolutePath,\n \n   override def onChangeWatchedFiles(changes: Seq[FileEvent]): Unit =\n     changes.foreach {\n-      case FileEvent(SemanticdbUri(path),\n-                     FileChangeType.Created | FileChangeType.Changed) =>\n+      case FileEvent(uri @ Uri(path),\n+                     FileChangeType.Created | FileChangeType.Changed)\n+          if uri.endsWith(\".semanticdb\") =>\n         logger.info(s\"$path changed or created. Running scalafix...\")\n         scalafixService.onSemanticdbPath(path).foreach(report)\n       case event =>\n         logger.info(s\"Unhandled file event: $event\")\n         ()\n     }\n \n-  override def documentFormattingRequest(td: TextDocumentIdentifier,\n-                                         options: FormattingOptions) = {\n-    val path = new URI(td.uri)\n-    val lines = scala.io.Source.fromFile(path).getLines.toList\n-    val totalLines = lines.length\n-    val fullDocumentRange = Range(\n-      start = Position(0, 0),\n-      end = Position(totalLines, lines.last.length)\n-    )\n-    val content = lines.mkString\n-    val formattedContent = scalafmtService.formatDocument(content)\n-    List(TextEdit(fullDocumentRange, formattedContent))\n+  override def documentFormattingRequest(\n+      td: TextDocumentIdentifier,\n+      options: FormattingOptions): List[TextEdit] = {\n+    try {\n+      val path = Uri.toPath(td.uri).get\n+      val contents = buffers.read(td.uri).getOrElse(read(path))\n+      val fullDocumentRange = Range(\n+        start = Position(0, 0),\n+        end = Position(Int.MaxValue, Int.MaxValue)\n+      )\n+      connection.showMessage(MessageType.Info, s\"Running scalafmt on $path...\")\n+      val formattedContent = scalafmt.format(\n+        contents,\n+        cwd.resolve(\".scalafmt.conf\").toString(),\n+        path.toString()\n+      )\n+      List(TextEdit(fullDocumentRange, formattedContent))\n+    } catch {\n+      case NonFatal(e) =>\n+        connection.showMessage(MessageType.Error, e.getMessage)\n+        logger.error(e.getMessage, e)\n+        Nil\n+    }\n+  }\n+\n+  override def onOpenTextDocument(td: TextDocumentItem): Unit =\n+    buffers.changed(td.uri, td.text)\n+  override def onChangeTextDocument("
  },
  {
    "id" : "52e6a4c5-896f-4c42-a424-88c62b6b1e99",
    "prId" : 8,
    "comments" : [
      {
        "id" : "c0756d63-b0b8-45cc-bd7b-503867e35dd8",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I would call this `symbolIndexer`. `symbol` is a bit confusing, given the context",
        "createdAt" : "2017-11-06T09:44:20Z",
        "updatedAt" : "2017-11-06T20:58:35Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a154d42708a1a97e34a23a7c79a153d4ee52f44b",
    "line" : 46,
    "diffHunk" : "@@ -5,52 +5,87 @@ import java.io.OutputStream\n import java.io.PrintStream\n import java.nio.charset.StandardCharsets\n import java.nio.file.Files\n+import scala.collection.mutable.ListBuffer\n+import scala.meta.languageserver.ScalametaEnrichments._\n import scala.util.control.NonFatal\n-import scalafix.languageserver.ScalafixLintProvider\n import langserver.core.LanguageServer\n import langserver.messages.ClientCapabilities\n+import langserver.messages.DefinitionResult\n import langserver.messages.FileChangeType\n import langserver.messages.FileEvent\n import langserver.messages.MessageType\n import langserver.messages.ServerCapabilities\n import langserver.types._\n+import monix.execution.Cancelable\n+import monix.execution.Scheduler\n+import monix.reactive.MulticastStrategy\n+import monix.reactive.Observable\n+import monix.reactive.Observer\n+import monix.reactive.OverflowStrategy\n+import org.langmeta.internal.semanticdb.schema\n import org.langmeta.io.AbsolutePath\n+import org.langmeta.semanticdb.Database\n+import org.langmeta.semanticdb.Denotation\n \n class ScalametaLanguageServer(\n     cwd: AbsolutePath,\n-    in: InputStream,\n-    out: OutputStream,\n-    scalafmt: Formatter\n-) extends LanguageServer(in, out) {\n-  val ps = new PrintStream(out)\n-  val buffers = Buffers()\n-  val scalafixService = new ScalafixLintProvider(cwd, out, connection)\n-  def read(path: AbsolutePath): String =\n+    lspIn: InputStream,\n+    lspOut: OutputStream,\n+    stdout: PrintStream\n+)(implicit s: Scheduler)\n+    extends LanguageServer(lspIn, lspOut) {\n+  implicit val workspacePath: AbsolutePath = cwd\n+  val (semanticdbSubscriber, semanticdbPublisher) =\n+    ScalametaLanguageServer.semanticdbStream\n+  val buffers: Buffers = Buffers()\n+  val symbol: SymbolIndexer ="
  },
  {
    "id" : "2d8ca419-19b0-4fef-b4af-61b72db2635c",
    "prId" : 8,
    "comments" : [
      {
        "id" : "93e04467-ec86-4fb9-a2db-e2b3cecc9571",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Can't we just fallback to the default config? I believe that's what most plugins do, right?",
        "createdAt" : "2017-11-06T09:47:42Z",
        "updatedAt" : "2017-11-06T20:58:35Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a154d42708a1a97e34a23a7c79a153d4ee52f44b",
    "line" : 134,
    "diffHunk" : "@@ -62,17 +97,20 @@ class ScalametaLanguageServer(\n   ): List[TextEdit] = {\n     try {\n       val path = Uri.toPath(td.uri).get\n-      val contents = buffers.read(td.uri).getOrElse(read(path))\n+      val contents = buffers.read(td.uri).getOrElse(readFromDisk(path))\n       val fullDocumentRange = Range(\n         start = Position(0, 0),\n         end = Position(Int.MaxValue, Int.MaxValue)\n       )\n-      val formattedContent = scalafmt.format(\n-        contents,\n-        cwd.resolve(\".scalafmt.conf\").toString(),\n-        path.toString()\n-      )\n-      List(TextEdit(fullDocumentRange, formattedContent))\n+      val config = cwd.resolve(\".scalafmt.conf\")\n+      if (Files.isRegularFile(config.toNIO)) {\n+        val formattedContent =\n+          scalafmt.format(contents, config.toString(), path.toString())\n+        List(TextEdit(fullDocumentRange, formattedContent))\n+      } else {\n+        connection.showMessage(MessageType.Info, s\"Missing $config\")"
  },
  {
    "id" : "61791fa7-bdd5-45f7-8d69-4af256d47ec3",
    "prId" : 8,
    "comments" : [
      {
        "id" : "f2e3fb90-883c-4f53-bce3-92f4eb2aeb57",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Should we consider offloading this to a separate thread?",
        "createdAt" : "2017-11-06T19:53:00Z",
        "updatedAt" : "2017-11-06T20:58:35Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a154d42708a1a97e34a23a7c79a153d4ee52f44b",
    "line" : null,
    "diffHunk" : "@@ -66,6 +76,7 @@ class ScalametaLanguageServer(\n     logger.info(s\"Initialized with $cwd, $pid, $rootPath, $capabilities\")\n     toCancel += scalafix.linter.subscribe()\n     toCancel += symbol.indexer.subscribe()\n+    loadAllSemanticdbsInWorkspace()"
  },
  {
    "id" : "6f2fea6b-c851-4500-94fc-dfd4c8ccc493",
    "prId" : 8,
    "comments" : [
      {
        "id" : "349998f6-53ed-45a5-bdae-e552c0de14de",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "We might want to do this on parallel, could be a lot of semanticdb files.",
        "createdAt" : "2017-11-06T19:53:23Z",
        "updatedAt" : "2017-11-06T20:58:35Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ce64bd45-9451-4340-ab21-517bebff53e7",
        "parentId" : "349998f6-53ed-45a5-bdae-e552c0de14de",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "right, that makes sense -> #11 ",
        "createdAt" : "2017-11-06T21:55:58Z",
        "updatedAt" : "2017-11-06T21:55:58Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a154d42708a1a97e34a23a7c79a153d4ee52f44b",
    "line" : 73,
    "diffHunk" : "@@ -58,6 +58,16 @@ class ScalametaLanguageServer(\n \n   private val toCancel = ListBuffer.empty[Cancelable]\n \n+  private def loadAllSemanticdbsInWorkspace() = {\n+    Files\n+      .walk(workspacePath.toNIO)\n+      .filter(\n+        path =>\n+          Files.isRegularFile(path) && path.toString.endsWith(\".semanticdb\")\n+      )\n+      .forEach(path => semanticdbSubscriber.onNext(AbsolutePath(path)))"
  }
]