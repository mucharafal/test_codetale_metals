[
  {
    "id" : "3388749d-d012-47ba-895a-924cb3d20cbf",
    "prId" : 8,
    "comments" : [
      {
        "id" : "e102fbf1-53a5-4e0b-9479-c8450a4667b5",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "is this `asInstanceOf` safe?",
        "createdAt" : "2017-11-06T09:42:22Z",
        "updatedAt" : "2017-11-06T20:58:35Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a154d42708a1a97e34a23a7c79a153d4ee52f44b",
    "line" : 30,
    "diffHunk" : "@@ -0,0 +1,44 @@\n+package scala.meta.languageserver\n+\n+import scala.{meta => m}\n+import langserver.types.SymbolKind\n+import langserver.{types => l}\n+\n+// Extension methods for convenient reuse of data conversions between\n+// scala.meta._ and language.types._\n+object ScalametaEnrichments {\n+  type SymbolKind = Int\n+\n+  implicit class XtensionDenotationLSP(val denotation: m.Denotation)\n+      extends AnyVal {\n+    import denotation._\n+    // copy-pasta from metadoc!\n+    def symbolKind: SymbolKind = {\n+      if (isParam || isTypeParam) SymbolKind.Variable // ???\n+      else if (isVal || isVar) SymbolKind.Variable\n+      else if (isDef) SymbolKind.Function\n+      else if (isPrimaryCtor || isSecondaryCtor) SymbolKind.Constructor\n+      else if (isClass) SymbolKind.Class\n+      else if (isObject) SymbolKind.Module\n+      else if (isTrait) SymbolKind.Interface\n+      else if (isPackage || isPackageObject) SymbolKind.Package\n+      else if (isType) SymbolKind.Namespace\n+      else SymbolKind.Variable // ???\n+    }\n+  }\n+  implicit class XtensionInputLSP(val input: m.Input) extends AnyVal {\n+    def contents: String = input.asInstanceOf[m.Input.VirtualFile].value"
  },
  {
    "id" : "202aa639-9de0-4e7b-a9fd-67a0e21c009b",
    "prId" : 8,
    "comments" : [
      {
        "id" : "d6e7928b-7230-4b26-b0d8-84b25a98f00d",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "are these lines numbers correct? IIRC there's an off-by-one between LSP and Scala",
        "createdAt" : "2017-11-06T09:43:35Z",
        "updatedAt" : "2017-11-06T20:58:35Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a154d42708a1a97e34a23a7c79a153d4ee52f44b",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,44 @@\n+package scala.meta.languageserver\n+\n+import scala.{meta => m}\n+import langserver.types.SymbolKind\n+import langserver.{types => l}\n+\n+// Extension methods for convenient reuse of data conversions between\n+// scala.meta._ and language.types._\n+object ScalametaEnrichments {\n+  type SymbolKind = Int\n+\n+  implicit class XtensionDenotationLSP(val denotation: m.Denotation)\n+      extends AnyVal {\n+    import denotation._\n+    // copy-pasta from metadoc!\n+    def symbolKind: SymbolKind = {\n+      if (isParam || isTypeParam) SymbolKind.Variable // ???\n+      else if (isVal || isVar) SymbolKind.Variable\n+      else if (isDef) SymbolKind.Function\n+      else if (isPrimaryCtor || isSecondaryCtor) SymbolKind.Constructor\n+      else if (isClass) SymbolKind.Class\n+      else if (isObject) SymbolKind.Module\n+      else if (isTrait) SymbolKind.Interface\n+      else if (isPackage || isPackageObject) SymbolKind.Package\n+      else if (isType) SymbolKind.Namespace\n+      else SymbolKind.Variable // ???\n+    }\n+  }\n+  implicit class XtensionInputLSP(val input: m.Input) extends AnyVal {\n+    def contents: String = input.asInstanceOf[m.Input.VirtualFile].value\n+  }\n+  implicit class XtensionAbsolutePathLSP(val path: m.AbsolutePath)\n+      extends AnyVal {\n+    def toLocation(pos: m.Position): l.Location =\n+      l.Location(path.toLanguageServerUri, pos.toRange)\n+    def toLanguageServerUri: String = \"file:\" + path.toString()\n+  }\n+  implicit class XtensionPositionRangeLSP(val pos: m.Position) extends AnyVal {\n+    def toRange: l.Range = l.Range(\n+      l.Position(line = pos.startLine, character = pos.startColumn),"
  }
]