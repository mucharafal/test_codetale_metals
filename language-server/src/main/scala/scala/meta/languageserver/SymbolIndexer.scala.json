[
  {
    "id" : "c909acf6-3678-4108-8712-970b81d726b9",
    "prId" : 8,
    "comments" : [
      {
        "id" : "5ba45c3e-ad6a-46fd-9fad-90b6cb091c2c",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Why `java.util.Map`? Performance?",
        "createdAt" : "2017-11-06T09:49:43Z",
        "updatedAt" : "2017-11-06T20:58:35Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8a55d749-27a8-4b62-9b82-df749341c1ba",
        "parentId" : "5ba45c3e-ad6a-46fd-9fad-90b6cb091c2c",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "ah, I see, you're using `ConcurrentHashMap` in the implementation.",
        "createdAt" : "2017-11-06T09:53:38Z",
        "updatedAt" : "2017-11-06T20:58:35Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a154d42708a1a97e34a23a7c79a153d4ee52f44b",
    "line" : 21,
    "diffHunk" : "@@ -0,0 +1,180 @@\n+package scala.meta.languageserver\n+\n+import java.util.concurrent.ConcurrentHashMap\n+import java.util.{Map => JMap}\n+import scala.collection.mutable\n+import scala.meta._\n+import com.typesafe.scalalogging.Logger\n+import monix.execution.Scheduler\n+import monix.reactive.Observable\n+import org.langmeta.io.RelativePath\n+import ScalametaEnrichments._\n+import langserver.core.Connection\n+import langserver.messages.MessageType\n+\n+// NOTE(olafur) it would make a lot of sense to use tries where Symbol is key.\n+class SymbolIndexer(\n+    val indexer: Observable[Unit],\n+    logger: Logger,\n+    connection: Connection,\n+    buffers: Buffers,\n+    documents: JMap[RelativePath, Document],"
  },
  {
    "id" : "f0e3bc29-8aae-406c-8cd8-20f713b3b248",
    "prId" : 8,
    "comments" : [
      {
        "id" : "0df82b03-97ef-4fe5-ab3d-01022a61df38",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "does this pattern act as a filter?",
        "createdAt" : "2017-11-06T09:54:30Z",
        "updatedAt" : "2017-11-06T20:58:35Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a154d42708a1a97e34a23a7c79a153d4ee52f44b",
    "line" : 36,
    "diffHunk" : "@@ -0,0 +1,180 @@\n+package scala.meta.languageserver\n+\n+import java.util.concurrent.ConcurrentHashMap\n+import java.util.{Map => JMap}\n+import scala.collection.mutable\n+import scala.meta._\n+import com.typesafe.scalalogging.Logger\n+import monix.execution.Scheduler\n+import monix.reactive.Observable\n+import org.langmeta.io.RelativePath\n+import ScalametaEnrichments._\n+import langserver.core.Connection\n+import langserver.messages.MessageType\n+\n+// NOTE(olafur) it would make a lot of sense to use tries where Symbol is key.\n+class SymbolIndexer(\n+    val indexer: Observable[Unit],\n+    logger: Logger,\n+    connection: Connection,\n+    buffers: Buffers,\n+    documents: JMap[RelativePath, Document],\n+    definitions: JMap[Symbol, Position.Range],\n+    denotations: JMap[Symbol, Denotation],\n+    references: JMap[\n+      Symbol,\n+      Map[RelativePath, List[Position]]\n+    ]\n+) {\n+\n+  def documentSymbols(\n+      path: RelativePath\n+  ): Seq[(Position.Range, Denotation)] =\n+    for {\n+      document <- Option(documents.get(path)).toList\n+      _ <- isFreshSemanticdb(path, document).toList\n+      ResolvedName(pos: Position.Range, symbol: Symbol.Global, true) <- document.names"
  },
  {
    "id" : "c068bfea-301a-4fea-b03d-d4b3c4f30d5d",
    "prId" : 19,
    "comments" : [
      {
        "id" : "dc13f6f9-3847-462d-805b-e8cbb00888d7",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Can we move this method to the bottom? I'm trying to keep the private utilities grouped together.",
        "createdAt" : "2017-11-09T10:27:54Z",
        "updatedAt" : "2017-11-09T10:32:30Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f7973410-a0df-4a41-b94e-2cad774838e3",
        "parentId" : "dc13f6f9-3847-462d-805b-e8cbb00888d7",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "sure, that makes sense :)",
        "createdAt" : "2017-11-09T10:29:12Z",
        "updatedAt" : "2017-11-09T10:32:30Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ab526413eb88697048ab823dfaa8af564cf40cb1",
    "line" : null,
    "diffHunk" : "@@ -43,26 +43,36 @@ class SymbolIndexer(\n       } // not interesting for this service\n     } yield pos -> denotation\n \n-  def goToDefinition(\n+  private def resolvedNameAt("
  }
]