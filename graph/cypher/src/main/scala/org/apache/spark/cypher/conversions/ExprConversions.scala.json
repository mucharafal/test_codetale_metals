[{
  "comments": [{
    "author": {
      "login": "kiszk"
    },
    "body": "4-indent?",
    "commit": "3786c73442cfb5c0b1e2c475c8259cd99ac7a8a3",
    "createdAt": "2019-06-17T02:59:12Z",
    "diffHunk": "@@ -0,0 +1,347 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.spark.cypher.conversions\n+\n+import org.apache.spark.cypher.SparkCypherFunctions._\n+import org.apache.spark.cypher.conversions.TemporalConversions._\n+import org.apache.spark.cypher.conversions.TypeConversions._\n+import org.apache.spark.cypher.udfs.TemporalUdfs\n+import org.apache.spark.sql.catalyst.expressions.CaseWhen\n+import org.apache.spark.sql.functions.{array_contains => _, translate => _, _}\n+import org.apache.spark.sql.types._\n+import org.apache.spark.sql.{Column, DataFrame}\n+import org.opencypher.okapi.api.types._\n+import org.opencypher.okapi.api.value.CypherValue.CypherMap\n+import org.opencypher.okapi.impl.exception._\n+import org.opencypher.okapi.ir.api.expr._\n+import org.opencypher.okapi.relational.impl.table.RecordHeader\n+\n+object ExprConversions {\n+\n+  implicit class RichExpression(expr: Expr) {\n+\n+    /**\n+      * Converts `expr` with the `withConvertedChildren` function, which is passed the converted child expressions as its\n+      * argument.\n+      *\n+      * Iff the expression has `expr.nullInNullOut == true`, then any child being mapped to `null` will also result in\n+      * the parent expression being mapped to null.\n+      *\n+      * For these expressions the `withConvertedChildren` function is guaranteed to not receive any `null`\n+      * values from the evaluated children.\n+      */\n+    def nullSafeConversion(expr: Expr)(withConvertedChildren: Seq[Column] => Column)\n+      (implicit header: RecordHeader, df: DataFrame, parameters: CypherMap): Column = {"
  }],
  "prId": 24297
}]