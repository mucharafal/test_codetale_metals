[{
  "comments": [{
    "author": {
      "login": "kiszk"
    },
    "body": "nit: `s` is not necessary",
    "commit": "3786c73442cfb5c0b1e2c475c8259cd99ac7a8a3",
    "createdAt": "2019-06-17T02:41:39Z",
    "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.spark.cypher\n+\n+import java.util.Collections\n+\n+import org.apache.spark.cypher.SparkTable.DataFrameTable\n+import org.apache.spark.cypher.conversions.CypherValueEncoders._\n+import org.apache.spark.cypher.conversions.RowConversion\n+import org.apache.spark.cypher.conversions.TypeConversions._\n+import org.apache.spark.sql._\n+import org.opencypher.okapi.api.types._\n+import org.opencypher.okapi.api.value.CypherValue.{CypherMap, CypherValue}\n+import org.opencypher.okapi.relational.api.io.ElementTable\n+import org.opencypher.okapi.relational.api.table.{RelationalCypherRecords, RelationalCypherRecordsFactory}\n+import org.opencypher.okapi.relational.impl.table._\n+\n+import scala.collection.JavaConverters._\n+\n+case class SparkCypherRecordsFactory()(implicit caps: SparkCypherSession) extends RelationalCypherRecordsFactory[DataFrameTable] {\n+\n+  override type Records = SparkCypherRecords\n+\n+  override def unit(): SparkCypherRecords = {\n+    val initialDataFrame = caps.sparkSession.createDataFrame(Seq(EmptyRow()))\n+    SparkCypherRecords(RecordHeader.empty, initialDataFrame)\n+  }\n+\n+  override def empty(initialHeader: RecordHeader = RecordHeader.empty): SparkCypherRecords = {\n+    val initialSparkStructType = initialHeader.toStructType\n+    val initialDataFrame = caps.sparkSession.createDataFrame(Collections.emptyList[Row](), initialSparkStructType)\n+    SparkCypherRecords(initialHeader, initialDataFrame)\n+  }\n+\n+  override def fromElementTable(entityTable: ElementTable[DataFrameTable]): SparkCypherRecords = {\n+    SparkCypherRecords(entityTable.header, entityTable.table.df)\n+  }\n+\n+  override def from(\n+    header: RecordHeader,\n+    table: DataFrameTable,\n+    maybeDisplayNames: Option[Seq[String]]\n+  ): SparkCypherRecords = {\n+    val displayNames = maybeDisplayNames match {\n+      case s@Some(_) => s\n+      case None => Some(header.vars.map(_.withoutType).toSeq)\n+    }\n+    SparkCypherRecords(header, table, displayNames)\n+  }\n+\n+  private case class EmptyRow()\n+}\n+\n+case class SparkCypherRecords(\n+  header: RecordHeader,\n+  table: DataFrameTable,\n+  override val logicalColumns: Option[Seq[String]] = None\n+)(implicit session: SparkCypherSession) extends RelationalCypherRecords[DataFrameTable] with RecordBehaviour {\n+  override type Records = SparkCypherRecords\n+\n+  def df: DataFrame = table.df\n+\n+  override def cache(): SparkCypherRecords = {\n+    df.cache()\n+    this\n+  }\n+\n+  override def toString: String = {\n+    if (header.isEmpty) {\n+      s\"CAPSRecords.empty\"",
    "line": 86
  }],
  "prId": 24297
}]