[{
  "comments": [{
    "author": {
      "login": "WeichenXu123"
    },
    "body": "`xxMap.asScala`, `xxSet.asScala` will work.",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-06-26T15:19:02Z",
    "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import scala.collection.JavaConverters\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns.\n+   *\n+   * @since 3.0.0\n+   */\n+  def df: DataFrame\n+\n+  /**\n+   * Name of the column that contains the graph element identifier.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumn: String\n+\n+  /**\n+   * Name of all columns that contain graph element identifiers.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumns: Seq[String] = Seq(idColumn)\n+\n+  /**\n+   * Mapping from graph element property keys to the columns that contain the corresponding property\n+   * values.\n+   *\n+   * @since 3.0.0\n+   */\n+  def properties: Map[String, String]\n+\n+}\n+\n+object NodeFrame {\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: Set[String]): NodeFrame = {\n+    val properties = (df.columns.toSet - idColumn)\n+      .map(columnName => columnName -> columnName)\n+      .toMap\n+    create(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: Set[String],\n+      properties: Map[String, String]): NodeFrame = {\n+    NodeFrame(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: java.util.Set[String]): NodeFrame = {\n+    create(df, idColumn, JavaConverters.asScalaSet(labelSet).toSet)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: java.util.Set[String],\n+      properties: java.util.Map[String, String]): NodeFrame = {\n+    val scalaLabelSet = JavaConverters.asScalaSet(labelSet).toSet\n+    val scalaProperties = JavaConverters.mapAsScalaMap(properties).toMap"
  }, {
    "author": {
      "login": "s1ck"
    },
    "body": "Of course, don't know why I forgot about `JavaConverters._`. Unfortunately, one still has to add `asScala.[toSet|toMap]` to get the immutable version.",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-06-28T06:59:44Z",
    "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import scala.collection.JavaConverters\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns.\n+   *\n+   * @since 3.0.0\n+   */\n+  def df: DataFrame\n+\n+  /**\n+   * Name of the column that contains the graph element identifier.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumn: String\n+\n+  /**\n+   * Name of all columns that contain graph element identifiers.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumns: Seq[String] = Seq(idColumn)\n+\n+  /**\n+   * Mapping from graph element property keys to the columns that contain the corresponding property\n+   * values.\n+   *\n+   * @since 3.0.0\n+   */\n+  def properties: Map[String, String]\n+\n+}\n+\n+object NodeFrame {\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: Set[String]): NodeFrame = {\n+    val properties = (df.columns.toSet - idColumn)\n+      .map(columnName => columnName -> columnName)\n+      .toMap\n+    create(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: Set[String],\n+      properties: Map[String, String]): NodeFrame = {\n+    NodeFrame(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: java.util.Set[String]): NodeFrame = {\n+    create(df, idColumn, JavaConverters.asScalaSet(labelSet).toSet)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: java.util.Set[String],\n+      properties: java.util.Map[String, String]): NodeFrame = {\n+    val scalaLabelSet = JavaConverters.asScalaSet(labelSet).toSet\n+    val scalaProperties = JavaConverters.mapAsScalaMap(properties).toMap"
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Do you want to expose this class to users?",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-07-18T23:06:46Z",
    "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {"
  }, {
    "author": {
      "login": "s1ck"
    },
    "body": "No, but we cannot make it private. I made it sealed.",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-07-25T15:53:13Z",
    "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {"
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "A little confusing that both `idColumn` and `idColumns` exist.",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-07-18T23:08:05Z",
    "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns.\n+   *\n+   * @since 3.0.0\n+   */\n+  def df: DataFrame\n+\n+  /**\n+   * Name of the column that contains the graph element identifier.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumn: String\n+\n+  /**\n+   * Name of all columns that contain graph element identifiers."
  }, {
    "author": {
      "login": "s1ck"
    },
    "body": "A relationship has multiple identifier columns (id, source, target). It just helps the engine implementation to write generic code for node and relationship frames. See https://github.com/apache/spark/blob/be9a057bbc0b9b85346872e9815a2be7df7a6e80/graph/cypher/src/main/scala/org/apache/spark/cypher/conversions/GraphElementFrameConversions.scala#L27-L39",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-07-25T16:01:08Z",
    "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns.\n+   *\n+   * @since 3.0.0\n+   */\n+  def df: DataFrame\n+\n+  /**\n+   * Name of the column that contains the graph element identifier.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumn: String\n+\n+  /**\n+   * Name of all columns that contain graph element identifiers."
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Can the input `df` contains columns with names starting with `:`?",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-07-18T23:09:02Z",
    "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns.\n+   *\n+   * @since 3.0.0\n+   */\n+  def df: DataFrame\n+\n+  /**\n+   * Name of the column that contains the graph element identifier.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumn: String\n+\n+  /**\n+   * Name of all columns that contain graph element identifiers.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumns: Seq[String] = Seq(idColumn)\n+\n+  /**\n+   * Mapping from graph element property keys to the columns that contain the corresponding property\n+   * values.\n+   *\n+   * @since 3.0.0\n+   */\n+  def properties: Map[String, String]\n+\n+}\n+\n+object NodeFrame {\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: Set[String]): NodeFrame = {"
  }, {
    "author": {
      "login": "s1ck"
    },
    "body": "Yes, that should not make a difference for the engine.",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-07-25T16:02:47Z",
    "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns.\n+   *\n+   * @since 3.0.0\n+   */\n+  def df: DataFrame\n+\n+  /**\n+   * Name of the column that contains the graph element identifier.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumn: String\n+\n+  /**\n+   * Name of all columns that contain graph element identifiers.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumns: Seq[String] = Seq(idColumn)\n+\n+  /**\n+   * Mapping from graph element property keys to the columns that contain the corresponding property\n+   * values.\n+   *\n+   * @since 3.0.0\n+   */\n+  def properties: Map[String, String]\n+\n+}\n+\n+object NodeFrame {\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: Set[String]): NodeFrame = {"
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Should consider builder pattern to avoid many overloading methods. For example:\r\n\r\n~~~scala\r\nsess.buildNodeFrame\r\n  .dataset(...)\r\n  .id(..)\r\n  .labels(..) // <- use Array to support both Scala and Java\r\n  .props(...) // <- overload this one for Java\r\n  .build()\r\n~~~",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-07-18T23:13:43Z",
    "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns.\n+   *\n+   * @since 3.0.0\n+   */\n+  def df: DataFrame\n+\n+  /**\n+   * Name of the column that contains the graph element identifier.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumn: String\n+\n+  /**\n+   * Name of all columns that contain graph element identifiers.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumns: Seq[String] = Seq(idColumn)\n+\n+  /**\n+   * Mapping from graph element property keys to the columns that contain the corresponding property\n+   * values.\n+   *\n+   * @since 3.0.0\n+   */\n+  def properties: Map[String, String]\n+\n+}\n+\n+object NodeFrame {\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: Set[String]): NodeFrame = {\n+    val properties = (df.columns.toSet - idColumn)\n+      .map(columnName => columnName -> columnName)\n+      .toMap\n+    create(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: Set[String],\n+      properties: Map[String, String]): NodeFrame = {\n+    NodeFrame(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: java.util.Set[String]): NodeFrame = {\n+    create(df, idColumn, labelSet.asScala.toSet)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create("
  }, {
    "author": {
      "login": "s1ck"
    },
    "body": "We actually discussed that at one point as we do this in Morpheus: https://github.com/opencypher/morpheus/blob/master/okapi-api/src/main/scala/org/opencypher/okapi/api/io/conversion/NodeMappingBuilder.scala\r\n\r\nWe decided to not do it, in order to minimize the number of classes we need to map in Python.\r\n\r\nDo you think we should add it?",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-07-25T16:04:53Z",
    "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns.\n+   *\n+   * @since 3.0.0\n+   */\n+  def df: DataFrame\n+\n+  /**\n+   * Name of the column that contains the graph element identifier.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumn: String\n+\n+  /**\n+   * Name of all columns that contain graph element identifiers.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumns: Seq[String] = Seq(idColumn)\n+\n+  /**\n+   * Mapping from graph element property keys to the columns that contain the corresponding property\n+   * values.\n+   *\n+   * @since 3.0.0\n+   */\n+  def properties: Map[String, String]\n+\n+}\n+\n+object NodeFrame {\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: Set[String]): NodeFrame = {\n+    val properties = (df.columns.toSet - idColumn)\n+      .map(columnName => columnName -> columnName)\n+      .toMap\n+    create(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: Set[String],\n+      properties: Map[String, String]): NodeFrame = {\n+    NodeFrame(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: java.util.Set[String]): NodeFrame = {\n+    create(df, idColumn, labelSet.asScala.toSet)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create("
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Yep. Please follow @mengxr 's advice.",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-10-05T22:39:59Z",
    "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns.\n+   *\n+   * @since 3.0.0\n+   */\n+  def df: DataFrame\n+\n+  /**\n+   * Name of the column that contains the graph element identifier.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumn: String\n+\n+  /**\n+   * Name of all columns that contain graph element identifiers.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumns: Seq[String] = Seq(idColumn)\n+\n+  /**\n+   * Mapping from graph element property keys to the columns that contain the corresponding property\n+   * values.\n+   *\n+   * @since 3.0.0\n+   */\n+  def properties: Map[String, String]\n+\n+}\n+\n+object NodeFrame {\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: Set[String]): NodeFrame = {\n+    val properties = (df.columns.toSet - idColumn)\n+      .map(columnName => columnName -> columnName)\n+      .toMap\n+    create(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: Set[String],\n+      properties: Map[String, String]): NodeFrame = {\n+    NodeFrame(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: java.util.Set[String]): NodeFrame = {\n+    create(df, idColumn, labelSet.asScala.toSet)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create("
  }, {
    "author": {
      "login": "DarthMax"
    },
    "body": "Done in 0736618 and 779e1ff",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-10-09T14:14:59Z",
    "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns.\n+   *\n+   * @since 3.0.0\n+   */\n+  def df: DataFrame\n+\n+  /**\n+   * Name of the column that contains the graph element identifier.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumn: String\n+\n+  /**\n+   * Name of all columns that contain graph element identifiers.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumns: Seq[String] = Seq(idColumn)\n+\n+  /**\n+   * Mapping from graph element property keys to the columns that contain the corresponding property\n+   * values.\n+   *\n+   * @since 3.0.0\n+   */\n+  def properties: Map[String, String]\n+\n+}\n+\n+object NodeFrame {\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: Set[String]): NodeFrame = {\n+    val properties = (df.columns.toSet - idColumn)\n+      .map(columnName => columnName -> columnName)\n+      .toMap\n+    create(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: Set[String],\n+      properties: Map[String, String]): NodeFrame = {\n+    NodeFrame(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: java.util.Set[String]): NodeFrame = {\n+    create(df, idColumn, labelSet.asScala.toSet)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create("
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "* If this is the return type of a public method, it cannot be package private.\r\n* Once we make a case class public, we cannot add new columns to it, which breaks binary compatibility.",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-07-18T23:14:34Z",
    "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns.\n+   *\n+   * @since 3.0.0\n+   */\n+  def df: DataFrame\n+\n+  /**\n+   * Name of the column that contains the graph element identifier.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumn: String\n+\n+  /**\n+   * Name of all columns that contain graph element identifiers.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumns: Seq[String] = Seq(idColumn)\n+\n+  /**\n+   * Mapping from graph element property keys to the columns that contain the corresponding property\n+   * values.\n+   *\n+   * @since 3.0.0\n+   */\n+  def properties: Map[String, String]\n+\n+}\n+\n+object NodeFrame {\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: Set[String]): NodeFrame = {\n+    val properties = (df.columns.toSet - idColumn)\n+      .map(columnName => columnName -> columnName)\n+      .toMap\n+    create(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: Set[String],\n+      properties: Map[String, String]): NodeFrame = {\n+    NodeFrame(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: java.util.Set[String]): NodeFrame = {\n+    create(df, idColumn, labelSet.asScala.toSet)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: java.util.Set[String],\n+      properties: java.util.Map[String, String]): NodeFrame = {\n+    val scalaLabelSet = labelSet.asScala.toSet\n+    val scalaProperties = properties.asScala.toMap\n+    NodeFrame(df, idColumn, scalaLabelSet, scalaProperties)\n+  }\n+\n+}\n+\n+/**\n+ * Describes how to map a DataFrame to nodes.\n+ *\n+ * Each row in the DataFrame represents a node which has exactly the labels defined by the given\n+ * label set.\n+ *\n+ * @param df         DataFrame containing a single node in each row\n+ * @param idColumn   column that contains the node identifier\n+ * @param labelSet   labels that are assigned to all nodes\n+ * @param properties mapping from property keys to corresponding columns\n+ * @since 3.0.0\n+ */\n+case class NodeFrame private[graph] ("
  }, {
    "author": {
      "login": "s1ck"
    },
    "body": "It's just the constructor that is package private. A `NodeFrame` is supposed to be created via it's companion object.",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-07-26T06:51:38Z",
    "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns.\n+   *\n+   * @since 3.0.0\n+   */\n+  def df: DataFrame\n+\n+  /**\n+   * Name of the column that contains the graph element identifier.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumn: String\n+\n+  /**\n+   * Name of all columns that contain graph element identifiers.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumns: Seq[String] = Seq(idColumn)\n+\n+  /**\n+   * Mapping from graph element property keys to the columns that contain the corresponding property\n+   * values.\n+   *\n+   * @since 3.0.0\n+   */\n+  def properties: Map[String, String]\n+\n+}\n+\n+object NodeFrame {\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: Set[String]): NodeFrame = {\n+    val properties = (df.columns.toSet - idColumn)\n+      .map(columnName => columnName -> columnName)\n+      .toMap\n+    create(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: Set[String],\n+      properties: Map[String, String]): NodeFrame = {\n+    NodeFrame(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: java.util.Set[String]): NodeFrame = {\n+    create(df, idColumn, labelSet.asScala.toSet)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: java.util.Set[String],\n+      properties: java.util.Map[String, String]): NodeFrame = {\n+    val scalaLabelSet = labelSet.asScala.toSet\n+    val scalaProperties = properties.asScala.toMap\n+    NodeFrame(df, idColumn, scalaLabelSet, scalaProperties)\n+  }\n+\n+}\n+\n+/**\n+ * Describes how to map a DataFrame to nodes.\n+ *\n+ * Each row in the DataFrame represents a node which has exactly the labels defined by the given\n+ * label set.\n+ *\n+ * @param df         DataFrame containing a single node in each row\n+ * @param idColumn   column that contains the node identifier\n+ * @param labelSet   labels that are assigned to all nodes\n+ * @param properties mapping from property keys to corresponding columns\n+ * @since 3.0.0\n+ */\n+case class NodeFrame private[graph] ("
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "* It is hard to guess from the `properties` name that the map values are column names.\r\n* Users can use `select` and alias to drop/rename columns before creating this DataFrame. So do we still need this properties field?",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-07-18T23:16:28Z",
    "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns.\n+   *\n+   * @since 3.0.0\n+   */\n+  def df: DataFrame\n+\n+  /**\n+   * Name of the column that contains the graph element identifier.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumn: String\n+\n+  /**\n+   * Name of all columns that contain graph element identifiers.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumns: Seq[String] = Seq(idColumn)\n+\n+  /**\n+   * Mapping from graph element property keys to the columns that contain the corresponding property\n+   * values.\n+   *\n+   * @since 3.0.0\n+   */\n+  def properties: Map[String, String]\n+\n+}\n+\n+object NodeFrame {\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: Set[String]): NodeFrame = {\n+    val properties = (df.columns.toSet - idColumn)\n+      .map(columnName => columnName -> columnName)\n+      .toMap\n+    create(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: Set[String],\n+      properties: Map[String, String]): NodeFrame = {"
  }, {
    "author": {
      "login": "s1ck"
    },
    "body": "Mh, I think having convenience methods for that is actually very helpful for the user. Imho, the documentation makes the purpose of that Map clear, we could however rename the field to `propertiesToColumns` or `propertyColumns`? (I prefer the latter).",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-07-26T06:59:06Z",
    "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns.\n+   *\n+   * @since 3.0.0\n+   */\n+  def df: DataFrame\n+\n+  /**\n+   * Name of the column that contains the graph element identifier.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumn: String\n+\n+  /**\n+   * Name of all columns that contain graph element identifiers.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumns: Seq[String] = Seq(idColumn)\n+\n+  /**\n+   * Mapping from graph element property keys to the columns that contain the corresponding property\n+   * values.\n+   *\n+   * @since 3.0.0\n+   */\n+  def properties: Map[String, String]\n+\n+}\n+\n+object NodeFrame {\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: Set[String]): NodeFrame = {\n+    val properties = (df.columns.toSet - idColumn)\n+      .map(columnName => columnName -> columnName)\n+      .toMap\n+    create(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: Set[String],\n+      properties: Map[String, String]): NodeFrame = {"
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "When do we verify the `idColumn` column exists?",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-07-18T23:18:03Z",
    "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns.\n+   *\n+   * @since 3.0.0\n+   */\n+  def df: DataFrame\n+\n+  /**\n+   * Name of the column that contains the graph element identifier.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumn: String\n+\n+  /**\n+   * Name of all columns that contain graph element identifiers.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumns: Seq[String] = Seq(idColumn)\n+\n+  /**\n+   * Mapping from graph element property keys to the columns that contain the corresponding property\n+   * values.\n+   *\n+   * @since 3.0.0\n+   */\n+  def properties: Map[String, String]\n+\n+}\n+\n+object NodeFrame {\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: Set[String]): NodeFrame = {\n+    val properties = (df.columns.toSet - idColumn)\n+      .map(columnName => columnName -> columnName)\n+      .toMap\n+    create(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: Set[String],\n+      properties: Map[String, String]): NodeFrame = {\n+    NodeFrame(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: java.util.Set[String]): NodeFrame = {\n+    create(df, idColumn, labelSet.asScala.toSet)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: java.util.Set[String],\n+      properties: java.util.Map[String, String]): NodeFrame = {\n+    val scalaLabelSet = labelSet.asScala.toSet\n+    val scalaProperties = properties.asScala.toMap\n+    NodeFrame(df, idColumn, scalaLabelSet, scalaProperties)\n+  }\n+\n+}\n+\n+/**\n+ * Describes how to map a DataFrame to nodes.\n+ *\n+ * Each row in the DataFrame represents a node which has exactly the labels defined by the given\n+ * label set.\n+ *\n+ * @param df         DataFrame containing a single node in each row\n+ * @param idColumn   column that contains the node identifier\n+ * @param labelSet   labels that are assigned to all nodes\n+ * @param properties mapping from property keys to corresponding columns\n+ * @since 3.0.0\n+ */\n+case class NodeFrame private[graph] (\n+    df: DataFrame,\n+    idColumn: String,"
  }, {
    "author": {
      "login": "s1ck"
    },
    "body": "Are we supposed to check that? Catalyst logical planning will fail if we try to access a column that is not there and throw a descriptive error message. If we want to fail early, we can add this to the companion objects of NodeFrame / RelationshipFrame. wdyt?",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-07-26T07:05:29Z",
    "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns.\n+   *\n+   * @since 3.0.0\n+   */\n+  def df: DataFrame\n+\n+  /**\n+   * Name of the column that contains the graph element identifier.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumn: String\n+\n+  /**\n+   * Name of all columns that contain graph element identifiers.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumns: Seq[String] = Seq(idColumn)\n+\n+  /**\n+   * Mapping from graph element property keys to the columns that contain the corresponding property\n+   * values.\n+   *\n+   * @since 3.0.0\n+   */\n+  def properties: Map[String, String]\n+\n+}\n+\n+object NodeFrame {\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: Set[String]): NodeFrame = {\n+    val properties = (df.columns.toSet - idColumn)\n+      .map(columnName => columnName -> columnName)\n+      .toMap\n+    create(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: Set[String],\n+      properties: Map[String, String]): NodeFrame = {\n+    NodeFrame(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: java.util.Set[String]): NodeFrame = {\n+    create(df, idColumn, labelSet.asScala.toSet)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: java.util.Set[String],\n+      properties: java.util.Map[String, String]): NodeFrame = {\n+    val scalaLabelSet = labelSet.asScala.toSet\n+    val scalaProperties = properties.asScala.toMap\n+    NodeFrame(df, idColumn, scalaLabelSet, scalaProperties)\n+  }\n+\n+}\n+\n+/**\n+ * Describes how to map a DataFrame to nodes.\n+ *\n+ * Each row in the DataFrame represents a node which has exactly the labels defined by the given\n+ * label set.\n+ *\n+ * @param df         DataFrame containing a single node in each row\n+ * @param idColumn   column that contains the node identifier\n+ * @param labelSet   labels that are assigned to all nodes\n+ * @param properties mapping from property keys to corresponding columns\n+ * @since 3.0.0\n+ */\n+case class NodeFrame private[graph] (\n+    df: DataFrame,\n+    idColumn: String,"
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Ditto on many overloading methods.",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-07-18T23:19:39Z",
    "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns.\n+   *\n+   * @since 3.0.0\n+   */\n+  def df: DataFrame\n+\n+  /**\n+   * Name of the column that contains the graph element identifier.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumn: String\n+\n+  /**\n+   * Name of all columns that contain graph element identifiers.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumns: Seq[String] = Seq(idColumn)\n+\n+  /**\n+   * Mapping from graph element property keys to the columns that contain the corresponding property\n+   * values.\n+   *\n+   * @since 3.0.0\n+   */\n+  def properties: Map[String, String]\n+\n+}\n+\n+object NodeFrame {\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: Set[String]): NodeFrame = {\n+    val properties = (df.columns.toSet - idColumn)\n+      .map(columnName => columnName -> columnName)\n+      .toMap\n+    create(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: Set[String],\n+      properties: Map[String, String]): NodeFrame = {\n+    NodeFrame(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: java.util.Set[String]): NodeFrame = {\n+    create(df, idColumn, labelSet.asScala.toSet)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: java.util.Set[String],\n+      properties: java.util.Map[String, String]): NodeFrame = {\n+    val scalaLabelSet = labelSet.asScala.toSet\n+    val scalaProperties = properties.asScala.toMap\n+    NodeFrame(df, idColumn, scalaLabelSet, scalaProperties)\n+  }\n+\n+}\n+\n+/**\n+ * Describes how to map a DataFrame to nodes.\n+ *\n+ * Each row in the DataFrame represents a node which has exactly the labels defined by the given\n+ * label set.\n+ *\n+ * @param df         DataFrame containing a single node in each row\n+ * @param idColumn   column that contains the node identifier\n+ * @param labelSet   labels that are assigned to all nodes\n+ * @param properties mapping from property keys to corresponding columns\n+ * @since 3.0.0\n+ */\n+case class NodeFrame private[graph] (\n+    df: DataFrame,\n+    idColumn: String,\n+    labelSet: Set[String],\n+    properties: Map[String, String])\n+    extends GraphElementFrame\n+\n+object RelationshipFrame {\n+\n+  /**\n+   * Describes how to map a DataFrame to relationships.\n+   *\n+   * All columns apart from the given identifier columns are mapped to relationship properties.\n+   *\n+   * @param df               DataFrame containing a single relationship in each row\n+   * @param idColumn         column that contains the relationship identifier\n+   * @param sourceIdColumn   column that contains the source node identifier of the relationship\n+   * @param targetIdColumn   column that contains the target node identifier of the relationship\n+   * @param relationshipType relationship type that is assigned to all relationships\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      sourceIdColumn: String,\n+      targetIdColumn: String,\n+      relationshipType: String): RelationshipFrame = {\n+    val properties = (df.columns.toSet - idColumn - sourceIdColumn - targetIdColumn)\n+      .map(columnName => columnName -> columnName)\n+      .toMap\n+\n+    create(df, idColumn, sourceIdColumn, targetIdColumn, relationshipType, properties)\n+  }\n+\n+  /**\n+   * Describes how to map a DataFrame to relationships.\n+   *\n+   * @param df               DataFrame containing a single relationship in each row\n+   * @param idColumn         column that contains the relationship identifier\n+   * @param sourceIdColumn   column that contains the source node identifier of the relationship\n+   * @param targetIdColumn   column that contains the target node identifier of the relationship\n+   * @param relationshipType relationship type that is assigned to all relationships\n+   * @param properties       mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      sourceIdColumn: String,\n+      targetIdColumn: String,\n+      relationshipType: String,\n+      properties: Map[String, String]): RelationshipFrame = {\n+    RelationshipFrame(df, idColumn, sourceIdColumn, targetIdColumn, relationshipType, properties)\n+  }\n+\n+  /**\n+   * Describes how to map a DataFrame to relationships.\n+   *\n+   * @param df               DataFrame containing a single relationship in each row\n+   * @param idColumn         column that contains the relationship identifier\n+   * @param sourceIdColumn   column that contains the source node identifier of the relationship\n+   * @param targetIdColumn   column that contains the target node identifier of the relationship\n+   * @param relationshipType relationship type that is assigned to all relationships\n+   * @param properties       mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create("
  }, {
    "author": {
      "login": "s1ck"
    },
    "body": "See above",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-07-26T07:06:30Z",
    "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns.\n+   *\n+   * @since 3.0.0\n+   */\n+  def df: DataFrame\n+\n+  /**\n+   * Name of the column that contains the graph element identifier.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumn: String\n+\n+  /**\n+   * Name of all columns that contain graph element identifiers.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumns: Seq[String] = Seq(idColumn)\n+\n+  /**\n+   * Mapping from graph element property keys to the columns that contain the corresponding property\n+   * values.\n+   *\n+   * @since 3.0.0\n+   */\n+  def properties: Map[String, String]\n+\n+}\n+\n+object NodeFrame {\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: Set[String]): NodeFrame = {\n+    val properties = (df.columns.toSet - idColumn)\n+      .map(columnName => columnName -> columnName)\n+      .toMap\n+    create(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: Set[String],\n+      properties: Map[String, String]): NodeFrame = {\n+    NodeFrame(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: java.util.Set[String]): NodeFrame = {\n+    create(df, idColumn, labelSet.asScala.toSet)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: java.util.Set[String],\n+      properties: java.util.Map[String, String]): NodeFrame = {\n+    val scalaLabelSet = labelSet.asScala.toSet\n+    val scalaProperties = properties.asScala.toMap\n+    NodeFrame(df, idColumn, scalaLabelSet, scalaProperties)\n+  }\n+\n+}\n+\n+/**\n+ * Describes how to map a DataFrame to nodes.\n+ *\n+ * Each row in the DataFrame represents a node which has exactly the labels defined by the given\n+ * label set.\n+ *\n+ * @param df         DataFrame containing a single node in each row\n+ * @param idColumn   column that contains the node identifier\n+ * @param labelSet   labels that are assigned to all nodes\n+ * @param properties mapping from property keys to corresponding columns\n+ * @since 3.0.0\n+ */\n+case class NodeFrame private[graph] (\n+    df: DataFrame,\n+    idColumn: String,\n+    labelSet: Set[String],\n+    properties: Map[String, String])\n+    extends GraphElementFrame\n+\n+object RelationshipFrame {\n+\n+  /**\n+   * Describes how to map a DataFrame to relationships.\n+   *\n+   * All columns apart from the given identifier columns are mapped to relationship properties.\n+   *\n+   * @param df               DataFrame containing a single relationship in each row\n+   * @param idColumn         column that contains the relationship identifier\n+   * @param sourceIdColumn   column that contains the source node identifier of the relationship\n+   * @param targetIdColumn   column that contains the target node identifier of the relationship\n+   * @param relationshipType relationship type that is assigned to all relationships\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      sourceIdColumn: String,\n+      targetIdColumn: String,\n+      relationshipType: String): RelationshipFrame = {\n+    val properties = (df.columns.toSet - idColumn - sourceIdColumn - targetIdColumn)\n+      .map(columnName => columnName -> columnName)\n+      .toMap\n+\n+    create(df, idColumn, sourceIdColumn, targetIdColumn, relationshipType, properties)\n+  }\n+\n+  /**\n+   * Describes how to map a DataFrame to relationships.\n+   *\n+   * @param df               DataFrame containing a single relationship in each row\n+   * @param idColumn         column that contains the relationship identifier\n+   * @param sourceIdColumn   column that contains the source node identifier of the relationship\n+   * @param targetIdColumn   column that contains the target node identifier of the relationship\n+   * @param relationshipType relationship type that is assigned to all relationships\n+   * @param properties       mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      sourceIdColumn: String,\n+      targetIdColumn: String,\n+      relationshipType: String,\n+      properties: Map[String, String]): RelationshipFrame = {\n+    RelationshipFrame(df, idColumn, sourceIdColumn, targetIdColumn, relationshipType, properties)\n+  }\n+\n+  /**\n+   * Describes how to map a DataFrame to relationships.\n+   *\n+   * @param df               DataFrame containing a single relationship in each row\n+   * @param idColumn         column that contains the relationship identifier\n+   * @param sourceIdColumn   column that contains the source node identifier of the relationship\n+   * @param targetIdColumn   column that contains the target node identifier of the relationship\n+   * @param relationshipType relationship type that is assigned to all relationships\n+   * @param properties       mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create("
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Ditto on `private[graph]`",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-07-18T23:23:33Z",
    "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns.\n+   *\n+   * @since 3.0.0\n+   */\n+  def df: DataFrame\n+\n+  /**\n+   * Name of the column that contains the graph element identifier.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumn: String\n+\n+  /**\n+   * Name of all columns that contain graph element identifiers.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumns: Seq[String] = Seq(idColumn)\n+\n+  /**\n+   * Mapping from graph element property keys to the columns that contain the corresponding property\n+   * values.\n+   *\n+   * @since 3.0.0\n+   */\n+  def properties: Map[String, String]\n+\n+}\n+\n+object NodeFrame {\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: Set[String]): NodeFrame = {\n+    val properties = (df.columns.toSet - idColumn)\n+      .map(columnName => columnName -> columnName)\n+      .toMap\n+    create(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: Set[String],\n+      properties: Map[String, String]): NodeFrame = {\n+    NodeFrame(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: java.util.Set[String]): NodeFrame = {\n+    create(df, idColumn, labelSet.asScala.toSet)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: java.util.Set[String],\n+      properties: java.util.Map[String, String]): NodeFrame = {\n+    val scalaLabelSet = labelSet.asScala.toSet\n+    val scalaProperties = properties.asScala.toMap\n+    NodeFrame(df, idColumn, scalaLabelSet, scalaProperties)\n+  }\n+\n+}\n+\n+/**\n+ * Describes how to map a DataFrame to nodes.\n+ *\n+ * Each row in the DataFrame represents a node which has exactly the labels defined by the given\n+ * label set.\n+ *\n+ * @param df         DataFrame containing a single node in each row\n+ * @param idColumn   column that contains the node identifier\n+ * @param labelSet   labels that are assigned to all nodes\n+ * @param properties mapping from property keys to corresponding columns\n+ * @since 3.0.0\n+ */\n+case class NodeFrame private[graph] (\n+    df: DataFrame,\n+    idColumn: String,\n+    labelSet: Set[String],\n+    properties: Map[String, String])\n+    extends GraphElementFrame\n+\n+object RelationshipFrame {\n+\n+  /**\n+   * Describes how to map a DataFrame to relationships.\n+   *\n+   * All columns apart from the given identifier columns are mapped to relationship properties.\n+   *\n+   * @param df               DataFrame containing a single relationship in each row\n+   * @param idColumn         column that contains the relationship identifier\n+   * @param sourceIdColumn   column that contains the source node identifier of the relationship\n+   * @param targetIdColumn   column that contains the target node identifier of the relationship\n+   * @param relationshipType relationship type that is assigned to all relationships\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      sourceIdColumn: String,\n+      targetIdColumn: String,\n+      relationshipType: String): RelationshipFrame = {\n+    val properties = (df.columns.toSet - idColumn - sourceIdColumn - targetIdColumn)\n+      .map(columnName => columnName -> columnName)\n+      .toMap\n+\n+    create(df, idColumn, sourceIdColumn, targetIdColumn, relationshipType, properties)\n+  }\n+\n+  /**\n+   * Describes how to map a DataFrame to relationships.\n+   *\n+   * @param df               DataFrame containing a single relationship in each row\n+   * @param idColumn         column that contains the relationship identifier\n+   * @param sourceIdColumn   column that contains the source node identifier of the relationship\n+   * @param targetIdColumn   column that contains the target node identifier of the relationship\n+   * @param relationshipType relationship type that is assigned to all relationships\n+   * @param properties       mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      sourceIdColumn: String,\n+      targetIdColumn: String,\n+      relationshipType: String,\n+      properties: Map[String, String]): RelationshipFrame = {\n+    RelationshipFrame(df, idColumn, sourceIdColumn, targetIdColumn, relationshipType, properties)\n+  }\n+\n+  /**\n+   * Describes how to map a DataFrame to relationships.\n+   *\n+   * @param df               DataFrame containing a single relationship in each row\n+   * @param idColumn         column that contains the relationship identifier\n+   * @param sourceIdColumn   column that contains the source node identifier of the relationship\n+   * @param targetIdColumn   column that contains the target node identifier of the relationship\n+   * @param relationshipType relationship type that is assigned to all relationships\n+   * @param properties       mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      sourceIdColumn: String,\n+      targetIdColumn: String,\n+      relationshipType: String,\n+      properties: java.util.Map[String, String]): RelationshipFrame = {\n+    RelationshipFrame(\n+      df,\n+      idColumn,\n+      sourceIdColumn,\n+      targetIdColumn,\n+      relationshipType,\n+      properties.asScala.toMap)\n+  }\n+\n+}\n+\n+/**\n+ * Describes how to map a DataFrame to relationships.\n+ *\n+ * Each row in the DataFrame represents a relationship with the given relationship type.\n+ *\n+ * @param df               DataFrame containing a single relationship in each row\n+ * @param idColumn         column that contains the relationship identifier\n+ * @param sourceIdColumn   column that contains the source node identifier of the relationship\n+ * @param targetIdColumn   column that contains the target node identifier of the relationship\n+ * @param relationshipType relationship type that is assigned to all relationships\n+ * @param properties       mapping from property keys to corresponding columns\n+ * @since 3.0.0\n+ */\n+case class RelationshipFrame private[graph] ("
  }, {
    "author": {
      "login": "s1ck"
    },
    "body": "See above",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-07-26T07:06:40Z",
    "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns.\n+   *\n+   * @since 3.0.0\n+   */\n+  def df: DataFrame\n+\n+  /**\n+   * Name of the column that contains the graph element identifier.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumn: String\n+\n+  /**\n+   * Name of all columns that contain graph element identifiers.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumns: Seq[String] = Seq(idColumn)\n+\n+  /**\n+   * Mapping from graph element property keys to the columns that contain the corresponding property\n+   * values.\n+   *\n+   * @since 3.0.0\n+   */\n+  def properties: Map[String, String]\n+\n+}\n+\n+object NodeFrame {\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: Set[String]): NodeFrame = {\n+    val properties = (df.columns.toSet - idColumn)\n+      .map(columnName => columnName -> columnName)\n+      .toMap\n+    create(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: Set[String],\n+      properties: Map[String, String]): NodeFrame = {\n+    NodeFrame(df, idColumn, labelSet, properties)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @since 3.0.0\n+   */\n+  def create(df: DataFrame, idColumn: String, labelSet: java.util.Set[String]): NodeFrame = {\n+    create(df, idColumn, labelSet.asScala.toSet)\n+  }\n+\n+  /**\n+   * Describes how to map an initial DataFrame to nodes.\n+   *\n+   * All columns apart from the given `idColumn` are mapped to node properties.\n+   *\n+   * @param df        DataFrame containing a single node in each row\n+   * @param idColumn  column that contains the node identifier\n+   * @param labelSet  labels that are assigned to all nodes\n+   * @param properties mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      labelSet: java.util.Set[String],\n+      properties: java.util.Map[String, String]): NodeFrame = {\n+    val scalaLabelSet = labelSet.asScala.toSet\n+    val scalaProperties = properties.asScala.toMap\n+    NodeFrame(df, idColumn, scalaLabelSet, scalaProperties)\n+  }\n+\n+}\n+\n+/**\n+ * Describes how to map a DataFrame to nodes.\n+ *\n+ * Each row in the DataFrame represents a node which has exactly the labels defined by the given\n+ * label set.\n+ *\n+ * @param df         DataFrame containing a single node in each row\n+ * @param idColumn   column that contains the node identifier\n+ * @param labelSet   labels that are assigned to all nodes\n+ * @param properties mapping from property keys to corresponding columns\n+ * @since 3.0.0\n+ */\n+case class NodeFrame private[graph] (\n+    df: DataFrame,\n+    idColumn: String,\n+    labelSet: Set[String],\n+    properties: Map[String, String])\n+    extends GraphElementFrame\n+\n+object RelationshipFrame {\n+\n+  /**\n+   * Describes how to map a DataFrame to relationships.\n+   *\n+   * All columns apart from the given identifier columns are mapped to relationship properties.\n+   *\n+   * @param df               DataFrame containing a single relationship in each row\n+   * @param idColumn         column that contains the relationship identifier\n+   * @param sourceIdColumn   column that contains the source node identifier of the relationship\n+   * @param targetIdColumn   column that contains the target node identifier of the relationship\n+   * @param relationshipType relationship type that is assigned to all relationships\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      sourceIdColumn: String,\n+      targetIdColumn: String,\n+      relationshipType: String): RelationshipFrame = {\n+    val properties = (df.columns.toSet - idColumn - sourceIdColumn - targetIdColumn)\n+      .map(columnName => columnName -> columnName)\n+      .toMap\n+\n+    create(df, idColumn, sourceIdColumn, targetIdColumn, relationshipType, properties)\n+  }\n+\n+  /**\n+   * Describes how to map a DataFrame to relationships.\n+   *\n+   * @param df               DataFrame containing a single relationship in each row\n+   * @param idColumn         column that contains the relationship identifier\n+   * @param sourceIdColumn   column that contains the source node identifier of the relationship\n+   * @param targetIdColumn   column that contains the target node identifier of the relationship\n+   * @param relationshipType relationship type that is assigned to all relationships\n+   * @param properties       mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      sourceIdColumn: String,\n+      targetIdColumn: String,\n+      relationshipType: String,\n+      properties: Map[String, String]): RelationshipFrame = {\n+    RelationshipFrame(df, idColumn, sourceIdColumn, targetIdColumn, relationshipType, properties)\n+  }\n+\n+  /**\n+   * Describes how to map a DataFrame to relationships.\n+   *\n+   * @param df               DataFrame containing a single relationship in each row\n+   * @param idColumn         column that contains the relationship identifier\n+   * @param sourceIdColumn   column that contains the source node identifier of the relationship\n+   * @param targetIdColumn   column that contains the target node identifier of the relationship\n+   * @param relationshipType relationship type that is assigned to all relationships\n+   * @param properties       mapping from property keys to corresponding columns\n+   * @since 3.0.0\n+   */\n+  def create(\n+      df: DataFrame,\n+      idColumn: String,\n+      sourceIdColumn: String,\n+      targetIdColumn: String,\n+      relationshipType: String,\n+      properties: java.util.Map[String, String]): RelationshipFrame = {\n+    RelationshipFrame(\n+      df,\n+      idColumn,\n+      sourceIdColumn,\n+      targetIdColumn,\n+      relationshipType,\n+      properties.asScala.toMap)\n+  }\n+\n+}\n+\n+/**\n+ * Describes how to map a DataFrame to relationships.\n+ *\n+ * Each row in the DataFrame represents a relationship with the given relationship type.\n+ *\n+ * @param df               DataFrame containing a single relationship in each row\n+ * @param idColumn         column that contains the relationship identifier\n+ * @param sourceIdColumn   column that contains the source node identifier of the relationship\n+ * @param targetIdColumn   column that contains the target node identifier of the relationship\n+ * @param relationshipType relationship type that is assigned to all relationships\n+ * @param properties       mapping from property keys to corresponding columns\n+ * @since 3.0.0\n+ */\n+case class RelationshipFrame private[graph] ("
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Although this is not a big file with 264 lines, let's split this single file into multiple files.\r\n- `GraphElementFrame.scala`\r\n- `NodeFrameBuilder.scala`\r\n- `NodeFrame.scala`\r\n- `RelationshipFrameBuilder.scala`\r\n- `RelationshipFrame.scala`.",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-10-10T06:30:26Z",
    "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns.\n+   *\n+   * @since 3.0.0\n+   */\n+  def df: DataFrame\n+\n+  /**\n+   * Name of the column that contains the graph element identifier.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumn: String\n+\n+  /**\n+   * Name of all columns that contain graph element identifiers.\n+   *\n+   * @since 3.0.0\n+   */\n+  def idColumns: Seq[String] = Seq(idColumn)\n+\n+  /**\n+   * Mapping from graph element property keys to the columns that contain the corresponding property\n+   * values.\n+   *\n+   * @since 3.0.0\n+   */\n+  def properties: Map[String, String]\n+\n+}\n+\n+/**\n+ * Interface used to build a [[NodeFrame]].\n+ *\n+ * @param df DataFrame containing a single node in each row\n+ * @since 3.0.0\n+ */\n+final class NodeFrameBuilder(var df: DataFrame) {"
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "```scala\r\n-import org.apache.spark.sql.DataFrame\r\n+import org.apache.spark.sql.{Dataset, Row}\r\n```",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-10-11T03:36:08Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import org.apache.spark.sql.DataFrame"
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "```scala\r\n-  def df: DataFrame\r\n+  def df: Dataset[Row]\r\n```",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-10-11T03:36:19Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns.\n+   *\n+   * @since 3.0.0\n+   */\n+  def df: DataFrame"
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "`DataFrame` -> `Dataset`.",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-10-11T14:56:15Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import org.apache.spark.sql.{Dataset, Row}\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns."
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "`DataFrame` -> `Dataset`.",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-10-11T15:07:02Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import org.apache.spark.sql.{Dataset, Row}\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements."
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "`def df` -> `def ds`.",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-10-11T15:10:00Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import org.apache.spark.sql.{Dataset, Row}\n+\n+/**\n+ * A [[PropertyGraph]] is created from GraphElementFrames.\n+ *\n+ * A graph element is either a node or a relationship.\n+ * A GraphElementFrame wraps a DataFrame and describes how it maps to graph elements.\n+ *\n+ * @since 3.0.0\n+ */\n+abstract class GraphElementFrame {\n+\n+  /**\n+   * Initial DataFrame that can still contain unmapped, arbitrarily ordered columns.\n+   *\n+   * @since 3.0.0\n+   */\n+  def df: Dataset[Row]"
  }],
  "prId": 24851
}]