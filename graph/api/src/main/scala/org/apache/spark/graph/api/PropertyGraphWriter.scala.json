[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Ur, this can be wrong in case of `mode(\"overwrite\").mode(\"default\")`. Please merge `default` to the line 67. Please add a test case for this, too.",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-10-10T06:07:32Z",
    "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import java.util.Locale\n+\n+import org.apache.spark.sql.SaveMode\n+\n+abstract class PropertyGraphWriter(val graph: PropertyGraph) {\n+\n+  protected var saveMode: SaveMode = SaveMode.ErrorIfExists\n+  protected var format: String =\n+    graph.cypherSession.sparkSession.sessionState.conf.defaultDataSourceName\n+\n+  /**\n+   * Specifies the behavior when the graph already exists. Options include:\n+   * <ul>\n+   * <li>`SaveMode.Overwrite`: overwrite the existing data.</li>\n+   * <li>`SaveMode.Ignore`: ignore the operation (i.e. no-op).</li>\n+   * <li>`SaveMode.ErrorIfExists`: throw an exception at runtime.</li>\n+   * </ul>\n+   * <p>\n+   * When writing the default option is `ErrorIfExists`.\n+   *\n+   * @since 3.0.0\n+   */\n+  def mode(mode: SaveMode): PropertyGraphWriter = {\n+    mode match {\n+      case SaveMode.Append =>\n+        throw new IllegalArgumentException(s\"Unsupported save mode: $mode. \" +\n+          \"Accepted save modes are 'overwrite', 'ignore', 'error', 'errorifexists'.\")\n+      case _ =>\n+        this.saveMode = mode\n+    }\n+    this\n+  }\n+\n+  /**\n+   * Specifies the behavior when the graph already exists. Options include:\n+   * <ul>\n+   * <li>`overwrite`: overwrite the existing graph.</li>\n+   * <li>`ignore`: ignore the operation (i.e. no-op).</li>\n+   * <li>`error` or `errorifexists`: default option, throw an exception at runtime.</li>\n+   * </ul>\n+   *\n+   * @since 3.0.0\n+   */\n+  def mode(saveMode: String): PropertyGraphWriter = {\n+    saveMode.toLowerCase(Locale.ROOT) match {\n+      case \"overwrite\" => mode(SaveMode.Overwrite)\n+      case \"ignore\" => mode(SaveMode.Ignore)\n+      case \"error\" | \"errorifexists\" => mode(SaveMode.ErrorIfExists)\n+      case \"default\" => this"
  }, {
    "author": {
      "login": "s1ck"
    },
    "body": "Makes sense. It was a copy paste error from the `DataFrameWriter`: https://github.com/apache/spark/blob/c8159c7941f51caf3d420c8ad8599b869fc56a08/sql/core/src/main/scala/org/apache/spark/sql/DataFrameWriter.scala#L91\r\n\r\nMaybe somebody should fix that too ;)",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-10-10T07:49:49Z",
    "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import java.util.Locale\n+\n+import org.apache.spark.sql.SaveMode\n+\n+abstract class PropertyGraphWriter(val graph: PropertyGraph) {\n+\n+  protected var saveMode: SaveMode = SaveMode.ErrorIfExists\n+  protected var format: String =\n+    graph.cypherSession.sparkSession.sessionState.conf.defaultDataSourceName\n+\n+  /**\n+   * Specifies the behavior when the graph already exists. Options include:\n+   * <ul>\n+   * <li>`SaveMode.Overwrite`: overwrite the existing data.</li>\n+   * <li>`SaveMode.Ignore`: ignore the operation (i.e. no-op).</li>\n+   * <li>`SaveMode.ErrorIfExists`: throw an exception at runtime.</li>\n+   * </ul>\n+   * <p>\n+   * When writing the default option is `ErrorIfExists`.\n+   *\n+   * @since 3.0.0\n+   */\n+  def mode(mode: SaveMode): PropertyGraphWriter = {\n+    mode match {\n+      case SaveMode.Append =>\n+        throw new IllegalArgumentException(s\"Unsupported save mode: $mode. \" +\n+          \"Accepted save modes are 'overwrite', 'ignore', 'error', 'errorifexists'.\")\n+      case _ =>\n+        this.saveMode = mode\n+    }\n+    this\n+  }\n+\n+  /**\n+   * Specifies the behavior when the graph already exists. Options include:\n+   * <ul>\n+   * <li>`overwrite`: overwrite the existing graph.</li>\n+   * <li>`ignore`: ignore the operation (i.e. no-op).</li>\n+   * <li>`error` or `errorifexists`: default option, throw an exception at runtime.</li>\n+   * </ul>\n+   *\n+   * @since 3.0.0\n+   */\n+  def mode(saveMode: String): PropertyGraphWriter = {\n+    saveMode.toLowerCase(Locale.ROOT) match {\n+      case \"overwrite\" => mode(SaveMode.Overwrite)\n+      case \"ignore\" => mode(SaveMode.Ignore)\n+      case \"error\" | \"errorifexists\" => mode(SaveMode.ErrorIfExists)\n+      case \"default\" => this"
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Although this will eventually raise exception, let's remove this to match the line 70 and 71. That will improve the consistency in this function.",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-10-10T06:10:35Z",
    "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import java.util.Locale\n+\n+import org.apache.spark.sql.SaveMode\n+\n+abstract class PropertyGraphWriter(val graph: PropertyGraph) {\n+\n+  protected var saveMode: SaveMode = SaveMode.ErrorIfExists\n+  protected var format: String =\n+    graph.cypherSession.sparkSession.sessionState.conf.defaultDataSourceName\n+\n+  /**\n+   * Specifies the behavior when the graph already exists. Options include:\n+   * <ul>\n+   * <li>`SaveMode.Overwrite`: overwrite the existing data.</li>\n+   * <li>`SaveMode.Ignore`: ignore the operation (i.e. no-op).</li>\n+   * <li>`SaveMode.ErrorIfExists`: throw an exception at runtime.</li>\n+   * </ul>\n+   * <p>\n+   * When writing the default option is `ErrorIfExists`.\n+   *\n+   * @since 3.0.0\n+   */\n+  def mode(mode: SaveMode): PropertyGraphWriter = {\n+    mode match {\n+      case SaveMode.Append =>\n+        throw new IllegalArgumentException(s\"Unsupported save mode: $mode. \" +\n+          \"Accepted save modes are 'overwrite', 'ignore', 'error', 'errorifexists'.\")\n+      case _ =>\n+        this.saveMode = mode\n+    }\n+    this\n+  }\n+\n+  /**\n+   * Specifies the behavior when the graph already exists. Options include:\n+   * <ul>\n+   * <li>`overwrite`: overwrite the existing graph.</li>\n+   * <li>`ignore`: ignore the operation (i.e. no-op).</li>\n+   * <li>`error` or `errorifexists`: default option, throw an exception at runtime.</li>\n+   * </ul>\n+   *\n+   * @since 3.0.0\n+   */\n+  def mode(saveMode: String): PropertyGraphWriter = {\n+    saveMode.toLowerCase(Locale.ROOT) match {\n+      case \"overwrite\" => mode(SaveMode.Overwrite)\n+      case \"ignore\" => mode(SaveMode.Ignore)\n+      case \"error\" | \"errorifexists\" => mode(SaveMode.ErrorIfExists)\n+      case \"default\" => this\n+      case \"append\" => mode(SaveMode.Append)"
  }],
  "prId": 24851
}]