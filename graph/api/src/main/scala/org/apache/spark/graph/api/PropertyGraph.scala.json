[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Is it a direct link to the property graph model document?",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-07-18T23:26:31Z",
    "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import org.apache.spark.sql.{DataFrame, SaveMode}\n+\n+/**\n+ * A Property Graph as defined by the openCypher Property Graph Data Model.\n+ *\n+ * A graph is always tied to and managed by a [[CypherSession]].\n+ * The lifetime of a graph is bound by the session lifetime.\n+ *\n+ * @see <a href=\"http://www.opencypher.org/\">openCypher project</a>",
    "line": 31
  }, {
    "author": {
      "login": "s1ck"
    },
    "body": "I added one initially, but it exceeds the line length. The [Databricks Scala Style Guide](https://github.com/databricks/scala-style-guide#linelength) mentions that more than 100 chars are fine for URLs, but scalastyle still complains. Probably because it's behind an `@see` tag. I re-added it and let's see what CI says.",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-07-26T07:24:08Z",
    "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import org.apache.spark.sql.{DataFrame, SaveMode}\n+\n+/**\n+ * A Property Graph as defined by the openCypher Property Graph Data Model.\n+ *\n+ * A graph is always tied to and managed by a [[CypherSession]].\n+ * The lifetime of a graph is bound by the session lifetime.\n+ *\n+ * @see <a href=\"http://www.opencypher.org/\">openCypher project</a>",
    "line": 31
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "use `Array` for better compatibilty",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-07-18T23:28:52Z",
    "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import org.apache.spark.sql.{DataFrame, SaveMode}\n+\n+/**\n+ * A Property Graph as defined by the openCypher Property Graph Data Model.\n+ *\n+ * A graph is always tied to and managed by a [[CypherSession]].\n+ * The lifetime of a graph is bound by the session lifetime.\n+ *\n+ * @see <a href=\"http://www.opencypher.org/\">openCypher project</a>\n+ * @since 3.0.0\n+ */\n+abstract class PropertyGraph {\n+\n+  /**\n+   * The schema (graph type) describes the structure of this graph.\n+   *\n+   * @since 3.0.0\n+   */\n+  def schema: PropertyGraphType\n+\n+  /**\n+   * The session in which this graph is managed.\n+   *\n+   * @since 3.0.0\n+   */\n+  def cypherSession: CypherSession\n+\n+  /**\n+   * Executes a Cypher query in the session that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query Cypher query to execute\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String): CypherResult = cypher(query, Map.empty[String, Any])\n+\n+  /**\n+   * Executes a Cypher query in the session that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query      Cypher query to execute\n+   * @param parameters parameters used by the Cypher query\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String, parameters: Map[String, Any]): CypherResult =\n+    cypherSession.cypher(this, query, parameters)\n+\n+  /**\n+   * Executes a Cypher query in the [[CypherSession]] that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query      Cypher query to execute\n+   * @param parameters parameters used by the Cypher query\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String, parameters: java.util.Map[String, Object]): CypherResult =\n+    cypherSession.cypher(this, query, parameters)\n+\n+  /**\n+   * Returns the [[NodeFrame]] for a given node label set.\n+   *\n+   * @param labelSet Label set used for NodeFrame lookup\n+   * @return NodeFrame for the given label set\n+   * @since 3.0.0\n+   */\n+  def nodeFrame(labelSet: Set[String]): NodeFrame"
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Ditto on following `DataFrameWriter` pattern.",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-07-18T23:30:11Z",
    "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import org.apache.spark.sql.{DataFrame, SaveMode}\n+\n+/**\n+ * A Property Graph as defined by the openCypher Property Graph Data Model.\n+ *\n+ * A graph is always tied to and managed by a [[CypherSession]].\n+ * The lifetime of a graph is bound by the session lifetime.\n+ *\n+ * @see <a href=\"http://www.opencypher.org/\">openCypher project</a>\n+ * @since 3.0.0\n+ */\n+abstract class PropertyGraph {\n+\n+  /**\n+   * The schema (graph type) describes the structure of this graph.\n+   *\n+   * @since 3.0.0\n+   */\n+  def schema: PropertyGraphType\n+\n+  /**\n+   * The session in which this graph is managed.\n+   *\n+   * @since 3.0.0\n+   */\n+  def cypherSession: CypherSession\n+\n+  /**\n+   * Executes a Cypher query in the session that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query Cypher query to execute\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String): CypherResult = cypher(query, Map.empty[String, Any])\n+\n+  /**\n+   * Executes a Cypher query in the session that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query      Cypher query to execute\n+   * @param parameters parameters used by the Cypher query\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String, parameters: Map[String, Any]): CypherResult =\n+    cypherSession.cypher(this, query, parameters)\n+\n+  /**\n+   * Executes a Cypher query in the [[CypherSession]] that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query      Cypher query to execute\n+   * @param parameters parameters used by the Cypher query\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String, parameters: java.util.Map[String, Object]): CypherResult =\n+    cypherSession.cypher(this, query, parameters)\n+\n+  /**\n+   * Returns the [[NodeFrame]] for a given node label set.\n+   *\n+   * @param labelSet Label set used for NodeFrame lookup\n+   * @return NodeFrame for the given label set\n+   * @since 3.0.0\n+   */\n+  def nodeFrame(labelSet: Set[String]): NodeFrame\n+\n+  /**\n+   * Returns the [[RelationshipFrame]] for a given relationship type.\n+   *\n+   * @param relationshipType Relationship type used for RelationshipFrame lookup\n+   * @return RelationshipFrame for the given relationship type\n+   * @since 3.0.0\n+   */\n+  def relationshipFrame(relationshipType: String): RelationshipFrame\n+\n+  /**\n+   * Returns a DataFrame that contains a row for each node in this graph.\n+   *\n+   * The DataFrame adheres to the following column naming conventions:\n+   *\n+   * {{{\n+   *     Id column:        `$ID`\n+   *     Label columns:    `:{LABEL_NAME}`\n+   *     Property columns: `{Property_Key}`\n+   * }}}\n+   *\n+   * @see `org.apache.spark.graph.api.CypherSession.createGraph(nodes, relationships)`\n+   * @since 3.0.0\n+   */\n+  def nodes: DataFrame\n+\n+  /**\n+   * Returns a DataFrame that contains a row for each relationship in this\n+   * graph.\n+   *\n+   * The DataFrame adheres to column naming conventions:\n+   *\n+   * {{{\n+   *     Id column:        `$ID`\n+   *     SourceId column:  `$SOURCE_ID`\n+   *     TargetId column:  `$TARGET_ID`\n+   *     RelType columns:  `:{REL_TYPE}`\n+   *     Property columns: `{Property_Key}`\n+   * }}}\n+   *\n+   * @see `org.apache.spark.graph.api.CypherSession.createGraph(nodes, relationships)`\n+   * @since 3.0.0\n+   */\n+  def relationships: DataFrame\n+\n+  /**\n+   * Saves this graph to the given location.\n+   *\n+   * @param path      directory in which the graph should be stored\n+   * @param saveMode  specifies what happens when the destination already exists\n+   * @since 3.0.0\n+   */\n+  def save(path: String, saveMode: SaveMode = SaveMode.ErrorIfExists): Unit ="
  }, {
    "author": {
      "login": "s1ck"
    },
    "body": "See my question above",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-07-26T08:21:20Z",
    "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import org.apache.spark.sql.{DataFrame, SaveMode}\n+\n+/**\n+ * A Property Graph as defined by the openCypher Property Graph Data Model.\n+ *\n+ * A graph is always tied to and managed by a [[CypherSession]].\n+ * The lifetime of a graph is bound by the session lifetime.\n+ *\n+ * @see <a href=\"http://www.opencypher.org/\">openCypher project</a>\n+ * @since 3.0.0\n+ */\n+abstract class PropertyGraph {\n+\n+  /**\n+   * The schema (graph type) describes the structure of this graph.\n+   *\n+   * @since 3.0.0\n+   */\n+  def schema: PropertyGraphType\n+\n+  /**\n+   * The session in which this graph is managed.\n+   *\n+   * @since 3.0.0\n+   */\n+  def cypherSession: CypherSession\n+\n+  /**\n+   * Executes a Cypher query in the session that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query Cypher query to execute\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String): CypherResult = cypher(query, Map.empty[String, Any])\n+\n+  /**\n+   * Executes a Cypher query in the session that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query      Cypher query to execute\n+   * @param parameters parameters used by the Cypher query\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String, parameters: Map[String, Any]): CypherResult =\n+    cypherSession.cypher(this, query, parameters)\n+\n+  /**\n+   * Executes a Cypher query in the [[CypherSession]] that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query      Cypher query to execute\n+   * @param parameters parameters used by the Cypher query\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String, parameters: java.util.Map[String, Object]): CypherResult =\n+    cypherSession.cypher(this, query, parameters)\n+\n+  /**\n+   * Returns the [[NodeFrame]] for a given node label set.\n+   *\n+   * @param labelSet Label set used for NodeFrame lookup\n+   * @return NodeFrame for the given label set\n+   * @since 3.0.0\n+   */\n+  def nodeFrame(labelSet: Set[String]): NodeFrame\n+\n+  /**\n+   * Returns the [[RelationshipFrame]] for a given relationship type.\n+   *\n+   * @param relationshipType Relationship type used for RelationshipFrame lookup\n+   * @return RelationshipFrame for the given relationship type\n+   * @since 3.0.0\n+   */\n+  def relationshipFrame(relationshipType: String): RelationshipFrame\n+\n+  /**\n+   * Returns a DataFrame that contains a row for each node in this graph.\n+   *\n+   * The DataFrame adheres to the following column naming conventions:\n+   *\n+   * {{{\n+   *     Id column:        `$ID`\n+   *     Label columns:    `:{LABEL_NAME}`\n+   *     Property columns: `{Property_Key}`\n+   * }}}\n+   *\n+   * @see `org.apache.spark.graph.api.CypherSession.createGraph(nodes, relationships)`\n+   * @since 3.0.0\n+   */\n+  def nodes: DataFrame\n+\n+  /**\n+   * Returns a DataFrame that contains a row for each relationship in this\n+   * graph.\n+   *\n+   * The DataFrame adheres to column naming conventions:\n+   *\n+   * {{{\n+   *     Id column:        `$ID`\n+   *     SourceId column:  `$SOURCE_ID`\n+   *     TargetId column:  `$TARGET_ID`\n+   *     RelType columns:  `:{REL_TYPE}`\n+   *     Property columns: `{Property_Key}`\n+   * }}}\n+   *\n+   * @see `org.apache.spark.graph.api.CypherSession.createGraph(nodes, relationships)`\n+   * @since 3.0.0\n+   */\n+  def relationships: DataFrame\n+\n+  /**\n+   * Saves this graph to the given location.\n+   *\n+   * @param path      directory in which the graph should be stored\n+   * @param saveMode  specifies what happens when the destination already exists\n+   * @since 3.0.0\n+   */\n+  def save(path: String, saveMode: SaveMode = SaveMode.ErrorIfExists): Unit ="
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "```scala\r\n-import org.apache.spark.sql.DataFrame\r\n+import org.apache.spark.sql.{Dataset, Row}\r\n```",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-10-11T03:37:37Z",
    "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import org.apache.spark.sql.DataFrame"
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "```scala\r\n-  def nodes: DataFrame\r\n+  def nodes: Dataset[Row]\r\n```",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-10-11T03:37:56Z",
    "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A Property Graph as defined by the openCypher Property Graph Data Model.\n+ *\n+ * A graph is always tied to and managed by a [[CypherSession]].\n+ * The lifetime of a graph is bound by the session lifetime.\n+ *\n+ * @see <a href=\"http://www.opencypher.org/\">openCypher project</a>\n+ * @see <a href=\"https://dl.acm.org/citation.cfm?id=3183713.3190657\">Property Graph Model</a>\n+ * @since 3.0.0\n+ */\n+abstract class PropertyGraph {\n+\n+  /**\n+   * The schema (graph type) describes the structure of this graph.\n+   *\n+   * @since 3.0.0\n+   */\n+  def schema: PropertyGraphType\n+\n+  /**\n+   * The session in which this graph is managed.\n+   *\n+   * @since 3.0.0\n+   */\n+  def cypherSession: CypherSession\n+\n+  /**\n+   * Executes a Cypher query in the session that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query Cypher query to execute\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String): CypherResult = cypher(query, Map.empty[String, Any])\n+\n+  /**\n+   * Executes a Cypher query in the session that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query      Cypher query to execute\n+   * @param parameters parameters used by the Cypher query\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String, parameters: Map[String, Any]): CypherResult =\n+    cypherSession.cypher(this, query, parameters)\n+\n+  /**\n+   * Executes a Cypher query in the [[CypherSession]] that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query      Cypher query to execute\n+   * @param parameters parameters used by the Cypher query\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String, parameters: java.util.Map[String, Object]): CypherResult =\n+    cypherSession.cypher(this, query, parameters)\n+\n+  /**\n+   * Returns the [[NodeFrame]] for a given node label set.\n+   *\n+   * @param labelSet Label set used for NodeFrame lookup\n+   * @return NodeFrame for the given label set\n+   * @since 3.0.0\n+   */\n+  def nodeFrame(labelSet: Array[String]): NodeFrame\n+\n+  /**\n+   * Returns the [[RelationshipFrame]] for a given relationship type.\n+   *\n+   * @param relationshipType Relationship type used for RelationshipFrame lookup\n+   * @return RelationshipFrame for the given relationship type\n+   * @since 3.0.0\n+   */\n+  def relationshipFrame(relationshipType: String): RelationshipFrame\n+\n+  /**\n+   * Returns a DataFrame that contains a row for each node in this graph.\n+   *\n+   * The DataFrame adheres to the following column naming conventions:\n+   *\n+   * {{{\n+   *     Id column:        `$ID`\n+   *     Label columns:    `:{LABEL_NAME}`\n+   *     Property columns: `{Property_Key}`\n+   * }}}\n+   *\n+   * @see `org.apache.spark.graph.api.CypherSession.createGraph(nodes, relationships)`\n+   * @since 3.0.0\n+   */\n+  def nodes: DataFrame"
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "```scala\r\n-  def relationships: DataFrame\r\n+  def relationships: Dataset[Row]\r\n```",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-10-11T03:38:09Z",
    "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import org.apache.spark.sql.DataFrame\n+\n+/**\n+ * A Property Graph as defined by the openCypher Property Graph Data Model.\n+ *\n+ * A graph is always tied to and managed by a [[CypherSession]].\n+ * The lifetime of a graph is bound by the session lifetime.\n+ *\n+ * @see <a href=\"http://www.opencypher.org/\">openCypher project</a>\n+ * @see <a href=\"https://dl.acm.org/citation.cfm?id=3183713.3190657\">Property Graph Model</a>\n+ * @since 3.0.0\n+ */\n+abstract class PropertyGraph {\n+\n+  /**\n+   * The schema (graph type) describes the structure of this graph.\n+   *\n+   * @since 3.0.0\n+   */\n+  def schema: PropertyGraphType\n+\n+  /**\n+   * The session in which this graph is managed.\n+   *\n+   * @since 3.0.0\n+   */\n+  def cypherSession: CypherSession\n+\n+  /**\n+   * Executes a Cypher query in the session that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query Cypher query to execute\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String): CypherResult = cypher(query, Map.empty[String, Any])\n+\n+  /**\n+   * Executes a Cypher query in the session that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query      Cypher query to execute\n+   * @param parameters parameters used by the Cypher query\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String, parameters: Map[String, Any]): CypherResult =\n+    cypherSession.cypher(this, query, parameters)\n+\n+  /**\n+   * Executes a Cypher query in the [[CypherSession]] that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query      Cypher query to execute\n+   * @param parameters parameters used by the Cypher query\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String, parameters: java.util.Map[String, Object]): CypherResult =\n+    cypherSession.cypher(this, query, parameters)\n+\n+  /**\n+   * Returns the [[NodeFrame]] for a given node label set.\n+   *\n+   * @param labelSet Label set used for NodeFrame lookup\n+   * @return NodeFrame for the given label set\n+   * @since 3.0.0\n+   */\n+  def nodeFrame(labelSet: Array[String]): NodeFrame\n+\n+  /**\n+   * Returns the [[RelationshipFrame]] for a given relationship type.\n+   *\n+   * @param relationshipType Relationship type used for RelationshipFrame lookup\n+   * @return RelationshipFrame for the given relationship type\n+   * @since 3.0.0\n+   */\n+  def relationshipFrame(relationshipType: String): RelationshipFrame\n+\n+  /**\n+   * Returns a DataFrame that contains a row for each node in this graph.\n+   *\n+   * The DataFrame adheres to the following column naming conventions:\n+   *\n+   * {{{\n+   *     Id column:        `$ID`\n+   *     Label columns:    `:{LABEL_NAME}`\n+   *     Property columns: `{Property_Key}`\n+   * }}}\n+   *\n+   * @see `org.apache.spark.graph.api.CypherSession.createGraph(nodes, relationships)`\n+   * @since 3.0.0\n+   */\n+  def nodes: DataFrame\n+\n+  /**\n+   * Returns a DataFrame that contains a row for each relationship in this\n+   * graph.\n+   *\n+   * The DataFrame adheres to column naming conventions:\n+   *\n+   * {{{\n+   *     Id column:        `$ID`\n+   *     SourceId column:  `$SOURCE_ID`\n+   *     TargetId column:  `$TARGET_ID`\n+   *     RelType columns:  `:{REL_TYPE}`\n+   *     Property columns: `{Property_Key}`\n+   * }}}\n+   *\n+   * @see `org.apache.spark.graph.api.CypherSession.createGraph(nodes, relationships)`\n+   * @since 3.0.0\n+   */\n+  def relationships: DataFrame"
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Hmm. I don't know the history, but it seems that the site itself announces a false news.\r\nAccording to the our dev mailing list, there is no evidence for the followings. AFAIK, Apache Spark community decided by VOTE.\r\n> Databricks and Neo4j contributors have proposed to integrate the openCypher language into Apache Spark 3.0 to become a central piece of a new graph module in Apache Spark 3.0, driven through the openCypher project Cypher for Apache Spark\r\n\r\nEspecially, @mengxr already told us that he is an individual to work on this. So, if you want to keep this link, you must remove the announce on the site. In general, I know that it's beyond of this PR scope, so, you can remove this link from the PR for now.",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-10-11T15:01:07Z",
    "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import org.apache.spark.sql.{Dataset, Row}\n+\n+/**\n+ * A Property Graph as defined by the openCypher Property Graph Data Model.\n+ *\n+ * A graph is always tied to and managed by a [[CypherSession]].\n+ * The lifetime of a graph is bound by the session lifetime.\n+ *\n+ * @see <a href=\"http://www.opencypher.org/\">openCypher project</a>",
    "line": 31
  }, {
    "author": {
      "login": "Mats-SX"
    },
    "body": "~~I will also make a note of changing the message on that webpage.~~\r\n\r\nThe website has now been updated and the claim removed. Are you still skeptical to keeping this link?",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-10-11T15:45:07Z",
    "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import org.apache.spark.sql.{Dataset, Row}\n+\n+/**\n+ * A Property Graph as defined by the openCypher Property Graph Data Model.\n+ *\n+ * A graph is always tied to and managed by a [[CypherSession]].\n+ * The lifetime of a graph is bound by the session lifetime.\n+ *\n+ * @see <a href=\"http://www.opencypher.org/\">openCypher project</a>",
    "line": 31
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Thanks. Than, it's okay! We can keep it.",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-10-11T16:10:30Z",
    "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import org.apache.spark.sql.{Dataset, Row}\n+\n+/**\n+ * A Property Graph as defined by the openCypher Property Graph Data Model.\n+ *\n+ * A graph is always tied to and managed by a [[CypherSession]].\n+ * The lifetime of a graph is bound by the session lifetime.\n+ *\n+ * @see <a href=\"http://www.opencypher.org/\">openCypher project</a>",
    "line": 31
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "`DataFrame` -> `Dataset`.",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-10-11T15:03:06Z",
    "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import org.apache.spark.sql.{Dataset, Row}\n+\n+/**\n+ * A Property Graph as defined by the openCypher Property Graph Data Model.\n+ *\n+ * A graph is always tied to and managed by a [[CypherSession]].\n+ * The lifetime of a graph is bound by the session lifetime.\n+ *\n+ * @see <a href=\"http://www.opencypher.org/\">openCypher project</a>\n+ * @see <a href=\"https://dl.acm.org/citation.cfm?id=3183713.3190657\">Property Graph Model</a>\n+ * @since 3.0.0\n+ */\n+abstract class PropertyGraph {\n+\n+  /**\n+   * The schema (graph type) describes the structure of this graph.\n+   *\n+   * @since 3.0.0\n+   */\n+  def schema: PropertyGraphType\n+\n+  /**\n+   * The session in which this graph is managed.\n+   *\n+   * @since 3.0.0\n+   */\n+  def cypherSession: CypherSession\n+\n+  /**\n+   * Executes a Cypher query in the session that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query Cypher query to execute\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String): CypherResult = cypher(query, Map.empty[String, Any])\n+\n+  /**\n+   * Executes a Cypher query in the session that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query      Cypher query to execute\n+   * @param parameters parameters used by the Cypher query\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String, parameters: Map[String, Any]): CypherResult =\n+    cypherSession.cypher(this, query, parameters)\n+\n+  /**\n+   * Executes a Cypher query in the [[CypherSession]] that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query      Cypher query to execute\n+   * @param parameters parameters used by the Cypher query\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String, parameters: java.util.Map[String, Object]): CypherResult =\n+    cypherSession.cypher(this, query, parameters)\n+\n+  /**\n+   * Returns the [[NodeFrame]] for a given node label set.\n+   *\n+   * @param labelSet Label set used for NodeFrame lookup\n+   * @return NodeFrame for the given label set\n+   * @since 3.0.0\n+   */\n+  def nodeFrame(labelSet: Array[String]): NodeFrame\n+\n+  /**\n+   * Returns the [[RelationshipFrame]] for a given relationship type.\n+   *\n+   * @param relationshipType Relationship type used for RelationshipFrame lookup\n+   * @return RelationshipFrame for the given relationship type\n+   * @since 3.0.0\n+   */\n+  def relationshipFrame(relationshipType: String): RelationshipFrame\n+\n+  /**\n+   * Returns a DataFrame that contains a row for each node in this graph."
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "`DataFrame` -> `Dataset`.",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-10-11T15:03:17Z",
    "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import org.apache.spark.sql.{Dataset, Row}\n+\n+/**\n+ * A Property Graph as defined by the openCypher Property Graph Data Model.\n+ *\n+ * A graph is always tied to and managed by a [[CypherSession]].\n+ * The lifetime of a graph is bound by the session lifetime.\n+ *\n+ * @see <a href=\"http://www.opencypher.org/\">openCypher project</a>\n+ * @see <a href=\"https://dl.acm.org/citation.cfm?id=3183713.3190657\">Property Graph Model</a>\n+ * @since 3.0.0\n+ */\n+abstract class PropertyGraph {\n+\n+  /**\n+   * The schema (graph type) describes the structure of this graph.\n+   *\n+   * @since 3.0.0\n+   */\n+  def schema: PropertyGraphType\n+\n+  /**\n+   * The session in which this graph is managed.\n+   *\n+   * @since 3.0.0\n+   */\n+  def cypherSession: CypherSession\n+\n+  /**\n+   * Executes a Cypher query in the session that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query Cypher query to execute\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String): CypherResult = cypher(query, Map.empty[String, Any])\n+\n+  /**\n+   * Executes a Cypher query in the session that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query      Cypher query to execute\n+   * @param parameters parameters used by the Cypher query\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String, parameters: Map[String, Any]): CypherResult =\n+    cypherSession.cypher(this, query, parameters)\n+\n+  /**\n+   * Executes a Cypher query in the [[CypherSession]] that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query      Cypher query to execute\n+   * @param parameters parameters used by the Cypher query\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String, parameters: java.util.Map[String, Object]): CypherResult =\n+    cypherSession.cypher(this, query, parameters)\n+\n+  /**\n+   * Returns the [[NodeFrame]] for a given node label set.\n+   *\n+   * @param labelSet Label set used for NodeFrame lookup\n+   * @return NodeFrame for the given label set\n+   * @since 3.0.0\n+   */\n+  def nodeFrame(labelSet: Array[String]): NodeFrame\n+\n+  /**\n+   * Returns the [[RelationshipFrame]] for a given relationship type.\n+   *\n+   * @param relationshipType Relationship type used for RelationshipFrame lookup\n+   * @return RelationshipFrame for the given relationship type\n+   * @since 3.0.0\n+   */\n+  def relationshipFrame(relationshipType: String): RelationshipFrame\n+\n+  /**\n+   * Returns a DataFrame that contains a row for each node in this graph.\n+   *\n+   * The DataFrame adheres to the following column naming conventions:"
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "`DataFrame` -> `Dataset`.",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-10-11T15:03:30Z",
    "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import org.apache.spark.sql.{Dataset, Row}\n+\n+/**\n+ * A Property Graph as defined by the openCypher Property Graph Data Model.\n+ *\n+ * A graph is always tied to and managed by a [[CypherSession]].\n+ * The lifetime of a graph is bound by the session lifetime.\n+ *\n+ * @see <a href=\"http://www.opencypher.org/\">openCypher project</a>\n+ * @see <a href=\"https://dl.acm.org/citation.cfm?id=3183713.3190657\">Property Graph Model</a>\n+ * @since 3.0.0\n+ */\n+abstract class PropertyGraph {\n+\n+  /**\n+   * The schema (graph type) describes the structure of this graph.\n+   *\n+   * @since 3.0.0\n+   */\n+  def schema: PropertyGraphType\n+\n+  /**\n+   * The session in which this graph is managed.\n+   *\n+   * @since 3.0.0\n+   */\n+  def cypherSession: CypherSession\n+\n+  /**\n+   * Executes a Cypher query in the session that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query Cypher query to execute\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String): CypherResult = cypher(query, Map.empty[String, Any])\n+\n+  /**\n+   * Executes a Cypher query in the session that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query      Cypher query to execute\n+   * @param parameters parameters used by the Cypher query\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String, parameters: Map[String, Any]): CypherResult =\n+    cypherSession.cypher(this, query, parameters)\n+\n+  /**\n+   * Executes a Cypher query in the [[CypherSession]] that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query      Cypher query to execute\n+   * @param parameters parameters used by the Cypher query\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String, parameters: java.util.Map[String, Object]): CypherResult =\n+    cypherSession.cypher(this, query, parameters)\n+\n+  /**\n+   * Returns the [[NodeFrame]] for a given node label set.\n+   *\n+   * @param labelSet Label set used for NodeFrame lookup\n+   * @return NodeFrame for the given label set\n+   * @since 3.0.0\n+   */\n+  def nodeFrame(labelSet: Array[String]): NodeFrame\n+\n+  /**\n+   * Returns the [[RelationshipFrame]] for a given relationship type.\n+   *\n+   * @param relationshipType Relationship type used for RelationshipFrame lookup\n+   * @return RelationshipFrame for the given relationship type\n+   * @since 3.0.0\n+   */\n+  def relationshipFrame(relationshipType: String): RelationshipFrame\n+\n+  /**\n+   * Returns a DataFrame that contains a row for each node in this graph.\n+   *\n+   * The DataFrame adheres to the following column naming conventions:\n+   *\n+   * {{{\n+   *     Id column:        `$ID`\n+   *     Label columns:    `:{LABEL_NAME}`\n+   *     Property columns: `{Property_Key}`\n+   * }}}\n+   *\n+   * @see `org.apache.spark.graph.api.CypherSession.createGraph(nodes, relationships)`\n+   * @since 3.0.0\n+   */\n+  def nodes: Dataset[Row]\n+\n+  /**\n+   * Returns a DataFrame that contains a row for each relationship in this"
  }],
  "prId": 24851
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "`DataFrame` -> `Dataset`.",
    "commit": "44a955bdbe7f9ef88b69193635e1678668584ea3",
    "createdAt": "2019-10-11T15:03:40Z",
    "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.graph.api\n+\n+import org.apache.spark.sql.{Dataset, Row}\n+\n+/**\n+ * A Property Graph as defined by the openCypher Property Graph Data Model.\n+ *\n+ * A graph is always tied to and managed by a [[CypherSession]].\n+ * The lifetime of a graph is bound by the session lifetime.\n+ *\n+ * @see <a href=\"http://www.opencypher.org/\">openCypher project</a>\n+ * @see <a href=\"https://dl.acm.org/citation.cfm?id=3183713.3190657\">Property Graph Model</a>\n+ * @since 3.0.0\n+ */\n+abstract class PropertyGraph {\n+\n+  /**\n+   * The schema (graph type) describes the structure of this graph.\n+   *\n+   * @since 3.0.0\n+   */\n+  def schema: PropertyGraphType\n+\n+  /**\n+   * The session in which this graph is managed.\n+   *\n+   * @since 3.0.0\n+   */\n+  def cypherSession: CypherSession\n+\n+  /**\n+   * Executes a Cypher query in the session that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query Cypher query to execute\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String): CypherResult = cypher(query, Map.empty[String, Any])\n+\n+  /**\n+   * Executes a Cypher query in the session that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query      Cypher query to execute\n+   * @param parameters parameters used by the Cypher query\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String, parameters: Map[String, Any]): CypherResult =\n+    cypherSession.cypher(this, query, parameters)\n+\n+  /**\n+   * Executes a Cypher query in the [[CypherSession]] that manages this graph, using this graph as\n+   * the input graph.\n+   *\n+   * @param query      Cypher query to execute\n+   * @param parameters parameters used by the Cypher query\n+   * @since 3.0.0\n+   */\n+  def cypher(query: String, parameters: java.util.Map[String, Object]): CypherResult =\n+    cypherSession.cypher(this, query, parameters)\n+\n+  /**\n+   * Returns the [[NodeFrame]] for a given node label set.\n+   *\n+   * @param labelSet Label set used for NodeFrame lookup\n+   * @return NodeFrame for the given label set\n+   * @since 3.0.0\n+   */\n+  def nodeFrame(labelSet: Array[String]): NodeFrame\n+\n+  /**\n+   * Returns the [[RelationshipFrame]] for a given relationship type.\n+   *\n+   * @param relationshipType Relationship type used for RelationshipFrame lookup\n+   * @return RelationshipFrame for the given relationship type\n+   * @since 3.0.0\n+   */\n+  def relationshipFrame(relationshipType: String): RelationshipFrame\n+\n+  /**\n+   * Returns a DataFrame that contains a row for each node in this graph.\n+   *\n+   * The DataFrame adheres to the following column naming conventions:\n+   *\n+   * {{{\n+   *     Id column:        `$ID`\n+   *     Label columns:    `:{LABEL_NAME}`\n+   *     Property columns: `{Property_Key}`\n+   * }}}\n+   *\n+   * @see `org.apache.spark.graph.api.CypherSession.createGraph(nodes, relationships)`\n+   * @since 3.0.0\n+   */\n+  def nodes: Dataset[Row]\n+\n+  /**\n+   * Returns a DataFrame that contains a row for each relationship in this\n+   * graph.\n+   *\n+   * The DataFrame adheres to column naming conventions:"
  }],
  "prId": 24851
}]