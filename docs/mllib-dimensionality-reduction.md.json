[{
  "comments": [{
    "author": {
      "login": "dusenberrymw"
    },
    "body": "Minor: This import isn't needed.\n",
    "commit": "0bc6a3caf25c5c5a3cfcc661432890aff2293584",
    "createdAt": "2015-08-07T19:17:33Z",
    "diffHunk": "@@ -128,6 +128,26 @@ quick-start guide. Be sure to also include *spark-mllib* to your build file as\n a dependency.\n \n </div>\n+<div data-lang=\"python\" markdown=\"1\">\n+{% highlight python %}\n+from pyspark.mllib.linalg import Matrix"
  }],
  "prId": 7963
}, {
  "comments": [{
    "author": {
      "login": "dusenberrymw"
    },
    "body": "Minor: Same as above, this import isn't needed.\n",
    "commit": "0bc6a3caf25c5c5a3cfcc661432890aff2293584",
    "createdAt": "2015-08-07T19:17:51Z",
    "diffHunk": "@@ -218,6 +238,30 @@ public class PCA {\n {% endhighlight %}\n \n </div>\n+\n+<div data-lang=\"python\" markdown=\"1\">\n+\n+The following code demonstrates how to compute principal components on a `RowMatrix`\n+and use them to project the vectors into a low-dimensional space.\n+\n+{% highlight python %}\n+from pyspark.mllib.linalg import Matrix"
  }],
  "prId": 7963
}, {
  "comments": [{
    "author": {
      "login": "dusenberrymw"
    },
    "body": "Minor: I might change `mat` here to `data`, and then change `rm` to `mat` just to be consistent.\n",
    "commit": "0bc6a3caf25c5c5a3cfcc661432890aff2293584",
    "createdAt": "2015-08-07T19:18:01Z",
    "diffHunk": "@@ -218,6 +238,30 @@ public class PCA {\n {% endhighlight %}\n \n </div>\n+\n+<div data-lang=\"python\" markdown=\"1\">\n+\n+The following code demonstrates how to compute principal components on a `RowMatrix`\n+and use them to project the vectors into a low-dimensional space.\n+\n+{% highlight python %}\n+from pyspark.mllib.linalg import Matrix\n+from pyspark.mllib.linalg.distributed import RowMatrix\n+from numpy.random import RandomState\n+\n+# Generate random data with 50 samples and 30 features.\n+rng = RandomState(0)\n+mat = sc.parallelize(rng.randn(50, 30))\n+rm = RowMatrix(mat)"
  }],
  "prId": 7963
}, {
  "comments": [{
    "author": {
      "login": "holdenk"
    },
    "body": "Now days we tend write new examples separately and then use the include example syntax to bring them\n",
    "commit": "0bc6a3caf25c5c5a3cfcc661432890aff2293584",
    "createdAt": "2016-10-07T21:19:36Z",
    "diffHunk": "@@ -84,6 +84,25 @@ quick-start guide. Be sure to also include *spark-mllib* to your build file as\n a dependency.\n \n </div>\n+<div data-lang=\"python\" markdown=\"1\">\n+{% highlight python %}\n+from pyspark.mllib.linalg.distributed import RowMatrix",
    "line": 6
  }],
  "prId": 7963
}, {
  "comments": [{
    "author": {
      "login": "holdenk"
    },
    "body": "Same as above\n",
    "commit": "0bc6a3caf25c5c5a3cfcc661432890aff2293584",
    "createdAt": "2016-10-07T21:19:56Z",
    "diffHunk": "@@ -125,6 +144,29 @@ Refer to the [`RowMatrix` Java docs](api/java/org/apache/spark/mllib/linalg/dist\n {% include_example java/org/apache/spark/examples/mllib/JavaPCAExample.java %}\n \n </div>\n+\n+<div data-lang=\"python\" markdown=\"1\">\n+\n+The following code demonstrates how to compute principal components on a `RowMatrix`\n+and use them to project the vectors into a low-dimensional space.\n+\n+{% highlight python %}",
    "line": 36
  }],
  "prId": 7963
}]