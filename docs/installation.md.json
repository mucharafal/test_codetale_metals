[
  {
    "id" : "1bddb0c8-a755-4692-911a-003f4a959b28",
    "prId" : 226,
    "comments" : [
      {
        "id" : "63cbbbcc-b710-4dcf-a01f-6adf1b1b1cff",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "This will conflict with #218 (`vscode-metals-0.0.1` -> `metals-0.1.0`)",
        "createdAt" : "2018-04-02T15:08:36Z",
        "updatedAt" : "2018-04-02T21:54:11Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8f49aa15-dd75-461a-9bd9-7cb435bdd058",
        "parentId" : "63cbbbcc-b710-4dcf-a01f-6adf1b1b1cff",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Done.",
        "createdAt" : "2018-04-02T15:44:59Z",
        "updatedAt" : "2018-04-02T21:54:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "774cbf430ac6829db5d40bd97995fc3a6d38bab0",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,98 @@\n+> ⚠️ This project is very alpha stage. Expect bugs and incomplete documentation.\n+\n+The following instructions are intended for contributors who want to try Metals\n+on a real-world project.\n+\n+# Global setup\n+\n+These steps are required once per machine.\n+\n+## Step 1 - sbt plugin\n+\n+The server needs to access some metadata about the build configuration. This\n+data are produced by an sbt plugin. This plugin is currently not published, so\n+you will need to copy paste it on your machine.\n+\n+Here's the source of the plugin:\n+https://github.com/scalameta/metals/blob/master/project/MetalsPlugin.scala\n+\n+Copy the source to either (depending on your sbt version):\n+\n+* (sbt 0.13) `~/.sbt/0.13/plugins/MetalsPlugin.scala`\n+* (sbt 1.0) `~/.sbt/1.0/plugins/MetalsPlugin.scala`\n+\n+## Step 2 - build the VSCode extension\n+\n+The VSCode extension is not yet published on the Marketplace, so you'll need to\n+build it locally.\n+\n+* Make sure you have installed `node`, `npm` and VS Code.\n+* Install the\n+  [\"Scala Syntax\"](https://marketplace.visualstudio.com/items?itemName=daltonjorge.scala)\n+  plugin in VS Code.\n+* `cd vscode-extension`\n+* `npm install`\n+* `npm run build`\n+* `code --install-extension vscode-metals-0.0.1.vsix`"
  },
  {
    "id" : "441f8bf7-e776-46e0-9485-5c59875739e1",
    "prId" : 226,
    "comments" : [
      {
        "id" : "70db7a14-627c-4033-b427-06761a5b9774",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "This will conflict with #218 (removed this step)",
        "createdAt" : "2018-04-02T15:09:03Z",
        "updatedAt" : "2018-04-02T21:54:11Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5a6441f7-009d-4c85-9570-d50fb9a0eced",
        "parentId" : "70db7a14-627c-4033-b427-06761a5b9774",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Removed.",
        "createdAt" : "2018-04-02T15:44:41Z",
        "updatedAt" : "2018-04-02T21:54:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "774cbf430ac6829db5d40bd97995fc3a6d38bab0",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,98 @@\n+> ⚠️ This project is very alpha stage. Expect bugs and incomplete documentation.\n+\n+The following instructions are intended for contributors who want to try Metals\n+on a real-world project.\n+\n+# Global setup\n+\n+These steps are required once per machine.\n+\n+## Step 1 - sbt plugin\n+\n+The server needs to access some metadata about the build configuration. This\n+data are produced by an sbt plugin. This plugin is currently not published, so\n+you will need to copy paste it on your machine.\n+\n+Here's the source of the plugin:\n+https://github.com/scalameta/metals/blob/master/project/MetalsPlugin.scala\n+\n+Copy the source to either (depending on your sbt version):\n+\n+* (sbt 0.13) `~/.sbt/0.13/plugins/MetalsPlugin.scala`\n+* (sbt 1.0) `~/.sbt/1.0/plugins/MetalsPlugin.scala`\n+\n+## Step 2 - build the VSCode extension\n+\n+The VSCode extension is not yet published on the Marketplace, so you'll need to\n+build it locally.\n+\n+* Make sure you have installed `node`, `npm` and VS Code.\n+* Install the\n+  [\"Scala Syntax\"](https://marketplace.visualstudio.com/items?itemName=daltonjorge.scala)\n+  plugin in VS Code."
  },
  {
    "id" : "e1a73f95-91fd-484e-8cf4-e4895237c043",
    "prId" : 226,
    "comments" : [
      {
        "id" : "eaf22161-9bea-458f-b417-6f6efe6dd0b2",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "when #222 is in, this won't be true anymore",
        "createdAt" : "2018-04-02T15:10:04Z",
        "updatedAt" : "2018-04-02T21:54:11Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b2bbef32-6f88-49ae-9dcf-ad5373e08c01",
        "parentId" : "eaf22161-9bea-458f-b417-6f6efe6dd0b2",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I'll remove this part in the PR that fixes #222",
        "createdAt" : "2018-04-02T15:45:18Z",
        "updatedAt" : "2018-04-02T21:54:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "774cbf430ac6829db5d40bd97995fc3a6d38bab0",
    "line" : 77,
    "diffHunk" : "@@ -0,0 +1,98 @@\n+> ⚠️ This project is very alpha stage. Expect bugs and incomplete documentation.\n+\n+The following instructions are intended for contributors who want to try Metals\n+on a real-world project.\n+\n+# Global setup\n+\n+These steps are required once per machine.\n+\n+## Step 1 - sbt plugin\n+\n+The server needs to access some metadata about the build configuration. This\n+data are produced by an sbt plugin. This plugin is currently not published, so\n+you will need to copy paste it on your machine.\n+\n+Here's the source of the plugin:\n+https://github.com/scalameta/metals/blob/master/project/MetalsPlugin.scala\n+\n+Copy the source to either (depending on your sbt version):\n+\n+* (sbt 0.13) `~/.sbt/0.13/plugins/MetalsPlugin.scala`\n+* (sbt 1.0) `~/.sbt/1.0/plugins/MetalsPlugin.scala`\n+\n+## Step 2 - build the VSCode extension\n+\n+The VSCode extension is not yet published on the Marketplace, so you'll need to\n+build it locally.\n+\n+* Make sure you have installed `node`, `npm` and VS Code.\n+* Install the\n+  [\"Scala Syntax\"](https://marketplace.visualstudio.com/items?itemName=daltonjorge.scala)\n+  plugin in VS Code.\n+* `cd vscode-extension`\n+* `npm install`\n+* `npm run build`\n+* `code --install-extension vscode-metals-0.0.1.vsix`\n+\n+## Step 3 - publish the server locally\n+\n+From the repo root run `sbt publishLocal`\n+\n+# Per-project setup\n+\n+These steps are required on each project.\n+\n+## Step 1 - add semanticdb-scalac compiler plugin to your project\n+\n+Some features like definition/references/hover rely on artifacts produced by a\n+compiler plugin called `semanticdb-scalac`. There are two alternative ways to\n+install `semanticdb-scalac`.\n+\n+The first option is to enable `semanticdb-scalac` permanently for your project\n+in `build.sbt` with:\n+\n+```scala\n+ addCompilerPlugin(\"org.scalameta\" % \"semanticdb-scalac\" % \"2.1.8\" cross CrossVersion.full)\n+scalacOptions += \"-Yrangepos\"\n+```\n+\n+The second option is to enable `semanticdb-scalac` only for an active sbt\n+session by running `semanticdbEnable` from the sbt shell.\n+\n+```scala\n+$ sbt\n+> semanticdbEnable // automatically runs libraryDependencies += compilerPlugin(...)\n+> compile // re-compile project with semanticdb-scalac compiler plugin\n+> ...\n+```\n+\n+As soon as you exit the sbt shell you need to re-run `semanticdbEnable` next\n+time you open sbt.\n+\n+## Step 2 - produce the build metadata\n+\n+In your project of choice, open `sbt` and run `*:metalsSetup`. Running the task\n+produces the necessary metadata for the server to support features like\n+completions and goto definition in dependency sources.\n+\n+> **NOTE**: you will need to repeat this step every time you add a new\n+> dependency in your build or when you run `sbt clean`."
  },
  {
    "id" : "9cc613b1-bcb8-4b02-a303-4ea618bac5c5",
    "prId" : 226,
    "comments" : [
      {
        "id" : "fc2728f9-f3c5-4328-a704-6a0231e92649",
        "parentId" : null,
        "author" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "body" : "\"...project. We do not currently provide support for day-to-day usage of Metals.\"?",
        "createdAt" : "2018-04-02T16:05:47Z",
        "updatedAt" : "2018-04-02T21:54:11Z",
        "lastEditedBy" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "849d04fc-b823-4388-baa2-4c734531fb31",
        "parentId" : "fc2728f9-f3c5-4328-a704-6a0231e92649",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Done.",
        "createdAt" : "2018-04-02T17:01:52Z",
        "updatedAt" : "2018-04-02T21:54:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4b232fe4-e111-47c0-9d5c-b8e238881660",
        "parentId" : "fc2728f9-f3c5-4328-a704-6a0231e92649",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "NB. these instructions are copy-pasted from the old BETA.md, they will need to be mostly rewritten soon ",
        "createdAt" : "2018-04-02T17:02:32Z",
        "updatedAt" : "2018-04-02T21:54:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "774cbf430ac6829db5d40bd97995fc3a6d38bab0",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,95 @@\n+> ⚠️ This project is very alpha stage. Expect bugs and incomplete documentation.\n+\n+The following instructions are intended for contributors who want to try Metals\n+on a real-world project."
  },
  {
    "id" : "9130b3a6-ae29-4ed7-a9b9-e73d0864f1c2",
    "prId" : 226,
    "comments" : [
      {
        "id" : "c7dc85b0-762a-4d1d-b400-51312d0da0e8",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "I minor thing: some sbt users get confused about 1.+ versions. It's not very obvious that things for sbt 1.1 go to `~/.sbt/1.0/` instead of `~/.sbt/1.1/`. So I suggest to write here\r\n\r\n```\r\n* (sbt 1.+) `~/.sbt/1.0/plugins/MetalsPlugin.scala`\r\n```\r\n\r\nOr `1.x` or `1.*`.",
        "createdAt" : "2018-04-02T18:02:52Z",
        "updatedAt" : "2018-04-02T21:54:11Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bee3da47-cf19-4292-97b3-7538452ba179",
        "parentId" : "c7dc85b0-762a-4d1d-b400-51312d0da0e8",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Updated. This step should become obsolete however once sbt-metals is out.",
        "createdAt" : "2018-04-02T18:52:39Z",
        "updatedAt" : "2018-04-02T21:54:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "774cbf430ac6829db5d40bd97995fc3a6d38bab0",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,95 @@\n+> ⚠️ This project is very alpha stage. Expect bugs and incomplete documentation.\n+\n+The following instructions are intended for contributors who want to try Metals\n+and provide feedback. We do not provide support for day-to-day usage of Metals.\n+\n+# Global setup\n+\n+These steps are required once per machine.\n+\n+## Step 1 - sbt plugin\n+\n+The server needs to access some metadata about the build configuration. This\n+data are produced by an sbt plugin. This plugin is currently not published, so\n+you will need to copy paste it on your machine.\n+\n+Here's the source of the plugin:\n+https://github.com/scalameta/metals/blob/master/project/MetalsPlugin.scala\n+\n+Copy the source to either (depending on your sbt version):\n+\n+* (sbt 0.13) `~/.sbt/0.13/plugins/MetalsPlugin.scala`\n+* (sbt 1.0) `~/.sbt/1.0/plugins/MetalsPlugin.scala`"
  },
  {
    "id" : "9f954b27-c94a-4968-85c6-0fdf796e444a",
    "prId" : 226,
    "comments" : [
      {
        "id" : "04112292-91c5-4d5c-8e6b-6a82af5a492f",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Probably mention that it can be automated with the sbt 1.1 integration here? Or just link to the roadmap's sbt section?",
        "createdAt" : "2018-04-02T18:07:01Z",
        "updatedAt" : "2018-04-02T21:54:11Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "aa16eff1-cf79-4e54-a9d3-bfb0f7ef2961",
        "parentId" : "04112292-91c5-4d5c-8e6b-6a82af5a492f",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "The sbt integration is still fairly undocumented. I think it's best to rewrite the installation steps once everything is released because so many steps in the current document will be removed.",
        "createdAt" : "2018-04-02T18:53:48Z",
        "updatedAt" : "2018-04-02T21:54:11Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "774cbf430ac6829db5d40bd97995fc3a6d38bab0",
    "line" : 95,
    "diffHunk" : "@@ -0,0 +1,95 @@\n+> ⚠️ This project is very alpha stage. Expect bugs and incomplete documentation.\n+\n+The following instructions are intended for contributors who want to try Metals\n+and provide feedback. We do not provide support for day-to-day usage of Metals.\n+\n+# Global setup\n+\n+These steps are required once per machine.\n+\n+## Step 1 - sbt plugin\n+\n+The server needs to access some metadata about the build configuration. This\n+data are produced by an sbt plugin. This plugin is currently not published, so\n+you will need to copy paste it on your machine.\n+\n+Here's the source of the plugin:\n+https://github.com/scalameta/metals/blob/master/project/MetalsPlugin.scala\n+\n+Copy the source to either (depending on your sbt version):\n+\n+* (sbt 0.13) `~/.sbt/0.13/plugins/MetalsPlugin.scala`\n+* (sbt 1.0) `~/.sbt/1.0/plugins/MetalsPlugin.scala`\n+\n+## Step 2 - build the VSCode extension\n+\n+The VSCode extension is not yet published on the Marketplace, so you'll need to\n+build it locally.\n+\n+* Make sure you have installed `node`, `npm` and VS Code.\n+* `cd vscode-extension`\n+* `npm install`\n+* `npm run build`\n+* `code --install-extension metals-0.1.0.vsix`\n+\n+## Step 3 - publish the server locally\n+\n+From the repo root run `sbt publishLocal`\n+\n+# Per-project setup\n+\n+These steps are required on each project.\n+\n+## Step 1 - add semanticdb-scalac compiler plugin to your project\n+\n+Some features like definition/references/hover rely on artifacts produced by a\n+compiler plugin called `semanticdb-scalac`. There are two alternative ways to\n+install `semanticdb-scalac`.\n+\n+The first option is to enable `semanticdb-scalac` permanently for your project\n+in `build.sbt` with:\n+\n+```scala\n+ addCompilerPlugin(\"org.scalameta\" % \"semanticdb-scalac\" % \"2.1.8\" cross CrossVersion.full)\n+scalacOptions += \"-Yrangepos\"\n+```\n+\n+The second option is to enable `semanticdb-scalac` only for an active sbt\n+session by running `semanticdbEnable` from the sbt shell.\n+\n+```scala\n+$ sbt\n+> semanticdbEnable // automatically runs libraryDependencies += compilerPlugin(...)\n+> compile // re-compile project with semanticdb-scalac compiler plugin\n+> ...\n+```\n+\n+As soon as you exit the sbt shell you need to re-run `semanticdbEnable` next\n+time you open sbt.\n+\n+## Step 2 - produce the build metadata\n+\n+In your project of choice, open `sbt` and run `*:metalsSetup`. Running the task\n+produces the necessary metadata for the server to support features like\n+completions and goto definition in dependency sources.\n+\n+> **NOTE**: you will need to repeat this step every time you add a new\n+> dependency in your build or when you run `sbt clean`.\n+\n+> **NOTE**: `metalsSetup` previously used to be called\n+> `metalsEnableCompletions`.\n+\n+## Step 3 - start editing\n+\n+Open your project in VSCode (`code .` from your terminal) and open a Scala file;\n+the server will now start.\n+\n+Please note that it may take a few seconds for the server to start and there's\n+currently no explicit indication that the server has started (other than\n+features starting to work). To monitor the server activity, we suggest to watch\n+the log file in your project's target directory, for instance:\n+`tail -f .metals/metals.log`. Alternatively, you can watch this log in the\n+VSCode output panel (selecting Metals on the right).\n+\n+Finally, since most features currently rely on a successful compilation step,\n+make sure you incrementally compile your project by running `~compile` in `sbt`."
  },
  {
    "id" : "65b844ea-158b-476a-83a0-31a19f233889",
    "prId" : 254,
    "comments" : [
      {
        "id" : "94f7e526-2565-4b8d-b950-0051be85c85d",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Link https://marketplace.visualstudio.com/items?itemName=scalameta.metals ?",
        "createdAt" : "2018-04-05T22:00:18Z",
        "updatedAt" : "2018-04-06T14:20:48Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e78b861e-638c-4789-a528-021c2e0c2ecb",
        "parentId" : "94f7e526-2565-4b8d-b950-0051be85c85d",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "A direct vscode [<vscode:extension/scalameta.metals>](vscode:extension/scalameta.metals) link? If it will be rendered as a link, it should lead right into VSCode, asking if you want to install the plugin.",
        "createdAt" : "2018-04-05T22:55:50Z",
        "updatedAt" : "2018-04-06T14:20:48Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0ef699a957a5f3df25728c93719c936848a33cb4",
    "line" : null,
    "diffHunk" : "@@ -10,74 +10,53 @@ These steps are required once per machine.\n ## Step 1 - sbt plugin\n \n The server needs to access some metadata about the build configuration. This\n-data are produced by an sbt plugin. This plugin is currently not published, so\n-you will need to copy paste it on your machine.\n+data are produced by an sbt plugin.\n \n-Here's the source of the plugin:\n-https://github.com/scalameta/metals/blob/master/project/MetalsPlugin.scala\n+You can install the plugin with\n \n-Copy the source to either (depending on your sbt version):\n-\n-* (sbt 0.13) `~/.sbt/0.13/plugins/MetalsPlugin.scala`\n-* (sbt 1.+) `~/.sbt/1.0/plugins/MetalsPlugin.scala`\n-\n-## Step 2 - build the VSCode extension\n-\n-The VSCode extension is not yet published on the Marketplace, so you'll need to\n-build it locally.\n-\n-* Make sure you have installed `node`, `npm` and VS Code.\n-* `cd vscode-extension`\n-* `npm install`\n-* `npm run build`\n-* `code --install-extension metals-0.1.0.vsix`\n-\n-## Step 3 - publish the server locally\n+```\n+addSbtPlugin(\"org.scalameta\" % \"sbt-metals\" % \"<version>\")\n+```\n \n-From the repo root run `sbt publishLocal`\n+## Step 2 - VSCode extension\n+The VSCode extension is published on the Marketplace. You can open VSCode and search for it."
  },
  {
    "id" : "274ac0d6-2107-412c-814b-0148d6ca3426",
    "prId" : 254,
    "comments" : [
      {
        "id" : "5c84a4b1-f9f2-4f38-80ec-b9e14ef229a2",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "How about adding copy-paste friendly entry to .gitignore?\r\n\r\n```\r\necho \".metals/\" >> .gitignore\r\n```",
        "createdAt" : "2018-04-05T22:02:17Z",
        "updatedAt" : "2018-04-06T14:20:48Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e968e9ae-38a2-459b-aa2d-e03289076d22",
        "parentId" : "5c84a4b1-f9f2-4f38-80ec-b9e14ef229a2",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Global gitignore?",
        "createdAt" : "2018-04-05T22:57:55Z",
        "updatedAt" : "2018-04-06T14:20:48Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0ef699a957a5f3df25728c93719c936848a33cb4",
    "line" : null,
    "diffHunk" : "@@ -10,74 +10,53 @@ These steps are required once per machine.\n ## Step 1 - sbt plugin\n \n The server needs to access some metadata about the build configuration. This\n-data are produced by an sbt plugin. This plugin is currently not published, so\n-you will need to copy paste it on your machine.\n+data are produced by an sbt plugin.\n \n-Here's the source of the plugin:\n-https://github.com/scalameta/metals/blob/master/project/MetalsPlugin.scala\n+You can install the plugin with\n \n-Copy the source to either (depending on your sbt version):\n-\n-* (sbt 0.13) `~/.sbt/0.13/plugins/MetalsPlugin.scala`\n-* (sbt 1.+) `~/.sbt/1.0/plugins/MetalsPlugin.scala`\n-\n-## Step 2 - build the VSCode extension\n-\n-The VSCode extension is not yet published on the Marketplace, so you'll need to\n-build it locally.\n-\n-* Make sure you have installed `node`, `npm` and VS Code.\n-* `cd vscode-extension`\n-* `npm install`\n-* `npm run build`\n-* `code --install-extension metals-0.1.0.vsix`\n-\n-## Step 3 - publish the server locally\n+```\n+addSbtPlugin(\"org.scalameta\" % \"sbt-metals\" % \"<version>\")\n+```\n \n-From the repo root run `sbt publishLocal`\n+## Step 2 - VSCode extension\n+The VSCode extension is published on the Marketplace. You can open VSCode and search for it.\n \n # Per-project setup\n \n These steps are required on each project.\n \n-## Step 1 - add semanticdb-scalac compiler plugin to your project\n+## Quick-start\n+The quickest way to get started with Metals is to use the `metalsSetup` command in sbt.\n+\n+```\n+sbt\n+> metalsSetup\n+```\n \n-Some features like definition/references/hover rely on artifacts produced by a\n-compiler plugin called `semanticdb-scalac`. There are two alternative ways to\n-install `semanticdb-scalac`.\n+The command will create the necessary metadata in the `.metals` directory\n+(which you should not checkout into version control) and setup the `semanticdb-scalac` compiler"
  },
  {
    "id" : "c29a4398-5d58-4a3a-919d-9db9662bc72c",
    "prId" : 254,
    "comments" : [
      {
        "id" : "8bf9acff-ce67-47b6-b697-7585cd5eaa97",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "sbt-metals exposes `semanticdbSettings`, I'm wondering if we should encourage using that instead?\r\n\r\nI'm a bit torn which approach is the best, on one hand I think it's good that users are aware what scalameta version they're on but on the other hand it's more to document and users need to update the dependency with new releases.",
        "createdAt" : "2018-04-05T22:04:36Z",
        "updatedAt" : "2018-04-06T14:20:48Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "820395ef-7c8e-498a-8956-43adca5157e5",
        "parentId" : "8bf9acff-ce67-47b6-b697-7585cd5eaa97",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "sbt-scalafix v0.6 will no longer automatically enable semanticdb-scalac because I've found automatic installation is fragile. `semanticdbSettings` only works if it appears after `libraryDependencies +=` and `scalacOptions +=`\r\n\r\nOne alternative is to expose \r\n\r\n```scala\r\nval semanticdbScalac = \"org.scalameta\" % \"semanticdb-scalac\" % \"2.1.8\" cross CrossVersion.full\r\n```\r\n\r\nand tell users to \r\n```\r\naddCompilerPlugin(semanticdbScalac)\r\n```\r\n\r\nThis has the benefit of being clear to the user while avoiding the need for users to upgrade scalameta.",
        "createdAt" : "2018-04-05T22:07:27Z",
        "updatedAt" : "2018-04-06T14:20:48Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d41102be-e7c9-4c63-b5a9-0943bd264f6d",
        "parentId" : "8bf9acff-ce67-47b6-b697-7585cd5eaa97",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "How about using sbt's [`onLoad`](https://www.scala-sbt.org/1.0/docs/Howto-Startup.html)? Something like\r\n\r\n```scala\r\nonLoad in Global ~= {\r\n  { st: State => semanticdbEnableCommand.key.label :: st } compose _\r\n}\r\n```\r\n\r\n(just an idea)",
        "createdAt" : "2018-04-05T23:12:41Z",
        "updatedAt" : "2018-04-06T14:20:48Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "211ba275-501f-4eed-bc68-938141e26922",
        "parentId" : "8bf9acff-ce67-47b6-b697-7585cd5eaa97",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I like the \r\n\r\n```\r\naddCompilerPlugin(semanticdbScalac)\r\n```\r\n\r\napproach. It's explicit and it's not a burden for the user.\r\n\r\nThe `onLoad` is interesting, but it looks really scary if you're not a sbt guru :O ",
        "createdAt" : "2018-04-06T11:36:27Z",
        "updatedAt" : "2018-04-06T14:20:48Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f967a5c4-edaa-48db-a802-e617364f7a7f",
        "parentId" : "8bf9acff-ce67-47b6-b697-7585cd5eaa97",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Is `addCompilerPlugin(semanticdbScalac)` enough on its own? or is `semanticdbSettings` still needed in addition to it?",
        "createdAt" : "2018-04-06T12:09:27Z",
        "updatedAt" : "2018-04-06T14:20:48Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0ef699a957a5f3df25728c93719c936848a33cb4",
    "line" : null,
    "diffHunk" : "@@ -10,74 +10,53 @@ These steps are required once per machine.\n ## Step 1 - sbt plugin\n \n The server needs to access some metadata about the build configuration. This\n-data are produced by an sbt plugin. This plugin is currently not published, so\n-you will need to copy paste it on your machine.\n+data are produced by an sbt plugin.\n \n-Here's the source of the plugin:\n-https://github.com/scalameta/metals/blob/master/project/MetalsPlugin.scala\n+You can install the plugin with\n \n-Copy the source to either (depending on your sbt version):\n-\n-* (sbt 0.13) `~/.sbt/0.13/plugins/MetalsPlugin.scala`\n-* (sbt 1.+) `~/.sbt/1.0/plugins/MetalsPlugin.scala`\n-\n-## Step 2 - build the VSCode extension\n-\n-The VSCode extension is not yet published on the Marketplace, so you'll need to\n-build it locally.\n-\n-* Make sure you have installed `node`, `npm` and VS Code.\n-* `cd vscode-extension`\n-* `npm install`\n-* `npm run build`\n-* `code --install-extension metals-0.1.0.vsix`\n-\n-## Step 3 - publish the server locally\n+```\n+addSbtPlugin(\"org.scalameta\" % \"sbt-metals\" % \"<version>\")\n+```\n \n-From the repo root run `sbt publishLocal`\n+## Step 2 - VSCode extension\n+The VSCode extension is published on the Marketplace. You can open VSCode and search for it.\n \n # Per-project setup\n \n These steps are required on each project.\n \n-## Step 1 - add semanticdb-scalac compiler plugin to your project\n+## Quick-start\n+The quickest way to get started with Metals is to use the `metalsSetup` command in sbt.\n+\n+```\n+sbt\n+> metalsSetup\n+```\n \n-Some features like definition/references/hover rely on artifacts produced by a\n-compiler plugin called `semanticdb-scalac`. There are two alternative ways to\n-install `semanticdb-scalac`.\n+The command will create the necessary metadata in the `.metals` directory\n+(which you should not checkout into version control) and setup the `semanticdb-scalac` compiler\n+plugin for the current sbt ession.\n \n-The first option is to enable `semanticdb-scalac` permanently for your project\n-in `build.sbt` with:\n+Note that you will need to invoke `metalsSetup` (or `semanticdbEnable`) whenevery you close and\n+re-open sbt. For a more persistent setup, keep reading.\n \n-```scala\n- addCompilerPlugin(\"org.scalameta\" % \"semanticdb-scalac\" % \"2.1.8\" cross CrossVersion.full)\n-scalacOptions += \"-Yrangepos\"\n-```\n+## Persisting the semanticdb-scalac compiler plugin\n+Some features like definition/references/hover rely on artifacts produced by a compiler plugin\n+called `semanticdb-scalac`.\n \n-The second option is to enable `semanticdb-scalac` only for an active sbt\n-session by running `semanticdbEnable` from the sbt shell.\n+`metalsSetup` enables the plugin on the current session (by invoking `semanticdbEnable`), but you\n+can choose to enable it permanently on your project by adding these two settings in your sbt build\n+definition:\n \n ```scala\n-$ sbt\n-> semanticdbEnable // automatically runs libraryDependencies += compilerPlugin(...)\n-> compile // re-compile project with semanticdb-scalac compiler plugin\n-> ...\n+addCompilerPlugin(\"org.scalameta\" % \"semanticdb-scalac\" % \"2.1.8\" cross CrossVersion.full)"
  },
  {
    "id" : "f2c10898-e9a5-4499-8170-ba903dac6d51",
    "prId" : 254,
    "comments" : [
      {
        "id" : "f125af81-1e9b-44d2-abcf-f53b1099f5fa",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Link to the Bintray repo for the available versions?\r\n\r\nhttps://bintray.com/scalameta/sbt-plugins/sbt-metals\r\n\r\nThere's even a badge, but I think it doesn't work well: [ ![Download](https://api.bintray.com/packages/scalameta/sbt-plugins/sbt-metals/images/download.svg) ](https://bintray.com/scalameta/sbt-plugins/sbt-metals/_latestVersion)",
        "createdAt" : "2018-04-05T22:51:01Z",
        "updatedAt" : "2018-04-06T14:20:48Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "395dbaa8-8970-4e44-be34-d870e67e0579",
        "parentId" : "f125af81-1e9b-44d2-abcf-f53b1099f5fa",
        "author" : {
          "login" : "ivanopagano",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1067461?v=4"
        },
        "body" : "would it be worth to mention that the plugin should best be added into the global `~/.sbt/1.0/plugins/` path?",
        "createdAt" : "2018-04-05T23:43:10Z",
        "updatedAt" : "2018-04-06T14:20:48Z",
        "lastEditedBy" : {
          "login" : "ivanopagano",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1067461?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0ef699a957a5f3df25728c93719c936848a33cb4",
    "line" : null,
    "diffHunk" : "@@ -10,74 +10,53 @@ These steps are required once per machine.\n ## Step 1 - sbt plugin\n \n The server needs to access some metadata about the build configuration. This\n-data are produced by an sbt plugin. This plugin is currently not published, so\n-you will need to copy paste it on your machine.\n+data are produced by an sbt plugin.\n \n-Here's the source of the plugin:\n-https://github.com/scalameta/metals/blob/master/project/MetalsPlugin.scala\n+You can install the plugin with\n \n-Copy the source to either (depending on your sbt version):\n-\n-* (sbt 0.13) `~/.sbt/0.13/plugins/MetalsPlugin.scala`\n-* (sbt 1.+) `~/.sbt/1.0/plugins/MetalsPlugin.scala`\n-\n-## Step 2 - build the VSCode extension\n-\n-The VSCode extension is not yet published on the Marketplace, so you'll need to\n-build it locally.\n-\n-* Make sure you have installed `node`, `npm` and VS Code.\n-* `cd vscode-extension`\n-* `npm install`\n-* `npm run build`\n-* `code --install-extension metals-0.1.0.vsix`\n-\n-## Step 3 - publish the server locally\n+```\n+addSbtPlugin(\"org.scalameta\" % \"sbt-metals\" % \"<version>\")\n+```"
  },
  {
    "id" : "e3418190-80a3-45a3-ae6a-a83f9acb827b",
    "prId" : 254,
    "comments" : [
      {
        "id" : "3ea45f06-4009-4ada-8fc2-4ed87c70cbbe",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "**s**ession",
        "createdAt" : "2018-04-05T22:58:15Z",
        "updatedAt" : "2018-04-06T14:20:48Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0ef699a957a5f3df25728c93719c936848a33cb4",
    "line" : null,
    "diffHunk" : "@@ -10,74 +10,53 @@ These steps are required once per machine.\n ## Step 1 - sbt plugin\n \n The server needs to access some metadata about the build configuration. This\n-data are produced by an sbt plugin. This plugin is currently not published, so\n-you will need to copy paste it on your machine.\n+data are produced by an sbt plugin.\n \n-Here's the source of the plugin:\n-https://github.com/scalameta/metals/blob/master/project/MetalsPlugin.scala\n+You can install the plugin with\n \n-Copy the source to either (depending on your sbt version):\n-\n-* (sbt 0.13) `~/.sbt/0.13/plugins/MetalsPlugin.scala`\n-* (sbt 1.+) `~/.sbt/1.0/plugins/MetalsPlugin.scala`\n-\n-## Step 2 - build the VSCode extension\n-\n-The VSCode extension is not yet published on the Marketplace, so you'll need to\n-build it locally.\n-\n-* Make sure you have installed `node`, `npm` and VS Code.\n-* `cd vscode-extension`\n-* `npm install`\n-* `npm run build`\n-* `code --install-extension metals-0.1.0.vsix`\n-\n-## Step 3 - publish the server locally\n+```\n+addSbtPlugin(\"org.scalameta\" % \"sbt-metals\" % \"<version>\")\n+```\n \n-From the repo root run `sbt publishLocal`\n+## Step 2 - VSCode extension\n+The VSCode extension is published on the Marketplace. You can open VSCode and search for it.\n \n # Per-project setup\n \n These steps are required on each project.\n \n-## Step 1 - add semanticdb-scalac compiler plugin to your project\n+## Quick-start\n+The quickest way to get started with Metals is to use the `metalsSetup` command in sbt.\n+\n+```\n+sbt\n+> metalsSetup\n+```\n \n-Some features like definition/references/hover rely on artifacts produced by a\n-compiler plugin called `semanticdb-scalac`. There are two alternative ways to\n-install `semanticdb-scalac`.\n+The command will create the necessary metadata in the `.metals` directory\n+(which you should not checkout into version control) and setup the `semanticdb-scalac` compiler\n+plugin for the current sbt ession."
  },
  {
    "id" : "4b11af4b-2951-4718-b298-4d47d67aad75",
    "prId" : 254,
    "comments" : [
      {
        "id" : "b662c77a-226c-41d3-9363-69ee49e17eab",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "whenever~~y~~",
        "createdAt" : "2018-04-05T22:58:54Z",
        "updatedAt" : "2018-04-06T14:20:48Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0ef699a957a5f3df25728c93719c936848a33cb4",
    "line" : null,
    "diffHunk" : "@@ -10,74 +10,53 @@ These steps are required once per machine.\n ## Step 1 - sbt plugin\n \n The server needs to access some metadata about the build configuration. This\n-data are produced by an sbt plugin. This plugin is currently not published, so\n-you will need to copy paste it on your machine.\n+data are produced by an sbt plugin.\n \n-Here's the source of the plugin:\n-https://github.com/scalameta/metals/blob/master/project/MetalsPlugin.scala\n+You can install the plugin with\n \n-Copy the source to either (depending on your sbt version):\n-\n-* (sbt 0.13) `~/.sbt/0.13/plugins/MetalsPlugin.scala`\n-* (sbt 1.+) `~/.sbt/1.0/plugins/MetalsPlugin.scala`\n-\n-## Step 2 - build the VSCode extension\n-\n-The VSCode extension is not yet published on the Marketplace, so you'll need to\n-build it locally.\n-\n-* Make sure you have installed `node`, `npm` and VS Code.\n-* `cd vscode-extension`\n-* `npm install`\n-* `npm run build`\n-* `code --install-extension metals-0.1.0.vsix`\n-\n-## Step 3 - publish the server locally\n+```\n+addSbtPlugin(\"org.scalameta\" % \"sbt-metals\" % \"<version>\")\n+```\n \n-From the repo root run `sbt publishLocal`\n+## Step 2 - VSCode extension\n+The VSCode extension is published on the Marketplace. You can open VSCode and search for it.\n \n # Per-project setup\n \n These steps are required on each project.\n \n-## Step 1 - add semanticdb-scalac compiler plugin to your project\n+## Quick-start\n+The quickest way to get started with Metals is to use the `metalsSetup` command in sbt.\n+\n+```\n+sbt\n+> metalsSetup\n+```\n \n-Some features like definition/references/hover rely on artifacts produced by a\n-compiler plugin called `semanticdb-scalac`. There are two alternative ways to\n-install `semanticdb-scalac`.\n+The command will create the necessary metadata in the `.metals` directory\n+(which you should not checkout into version control) and setup the `semanticdb-scalac` compiler\n+plugin for the current sbt ession.\n \n-The first option is to enable `semanticdb-scalac` permanently for your project\n-in `build.sbt` with:\n+Note that you will need to invoke `metalsSetup` (or `semanticdbEnable`) whenevery you close and"
  },
  {
    "id" : "bee923c2-51cb-4acb-b40b-a321d5f01894",
    "prId" : 254,
    "comments" : [
      {
        "id" : "489c6b55-b469-41c3-9624-4356f22497c8",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "In the very end of this doc (can't attach a review comment there), it says about manually running `~compile` in sbt. I suggested it before and I think now it's better time: let's mention there sbt integration, not to promote it (yes, it's still experimental), but to make the user aware of this feature.",
        "createdAt" : "2018-04-05T23:16:10Z",
        "updatedAt" : "2018-04-06T14:20:48Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0ef699a957a5f3df25728c93719c936848a33cb4",
    "line" : null,
    "diffHunk" : "@@ -10,74 +10,53 @@ These steps are required once per machine.\n ## Step 1 - sbt plugin\n \n The server needs to access some metadata about the build configuration. This\n-data are produced by an sbt plugin. This plugin is currently not published, so\n-you will need to copy paste it on your machine.\n+data are produced by an sbt plugin.\n \n-Here's the source of the plugin:\n-https://github.com/scalameta/metals/blob/master/project/MetalsPlugin.scala\n+You can install the plugin with\n \n-Copy the source to either (depending on your sbt version):\n-\n-* (sbt 0.13) `~/.sbt/0.13/plugins/MetalsPlugin.scala`\n-* (sbt 1.+) `~/.sbt/1.0/plugins/MetalsPlugin.scala`\n-\n-## Step 2 - build the VSCode extension\n-\n-The VSCode extension is not yet published on the Marketplace, so you'll need to\n-build it locally.\n-\n-* Make sure you have installed `node`, `npm` and VS Code.\n-* `cd vscode-extension`\n-* `npm install`\n-* `npm run build`\n-* `code --install-extension metals-0.1.0.vsix`\n-\n-## Step 3 - publish the server locally\n+```\n+addSbtPlugin(\"org.scalameta\" % \"sbt-metals\" % \"<version>\")\n+```\n \n-From the repo root run `sbt publishLocal`\n+## Step 2 - VSCode extension\n+The VSCode extension is published on the Marketplace. You can open VSCode and search for it.\n \n # Per-project setup\n \n These steps are required on each project.\n \n-## Step 1 - add semanticdb-scalac compiler plugin to your project\n+## Quick-start\n+The quickest way to get started with Metals is to use the `metalsSetup` command in sbt.\n+\n+```\n+sbt\n+> metalsSetup\n+```\n \n-Some features like definition/references/hover rely on artifacts produced by a\n-compiler plugin called `semanticdb-scalac`. There are two alternative ways to\n-install `semanticdb-scalac`.\n+The command will create the necessary metadata in the `.metals` directory\n+(which you should not checkout into version control) and setup the `semanticdb-scalac` compiler\n+plugin for the current sbt ession.\n \n-The first option is to enable `semanticdb-scalac` permanently for your project\n-in `build.sbt` with:\n+Note that you will need to invoke `metalsSetup` (or `semanticdbEnable`) whenevery you close and\n+re-open sbt. For a more persistent setup, keep reading.\n \n-```scala\n- addCompilerPlugin(\"org.scalameta\" % \"semanticdb-scalac\" % \"2.1.8\" cross CrossVersion.full)\n-scalacOptions += \"-Yrangepos\"\n-```\n+## Persisting the semanticdb-scalac compiler plugin\n+Some features like definition/references/hover rely on artifacts produced by a compiler plugin\n+called `semanticdb-scalac`.\n \n-The second option is to enable `semanticdb-scalac` only for an active sbt\n-session by running `semanticdbEnable` from the sbt shell.\n+`metalsSetup` enables the plugin on the current session (by invoking `semanticdbEnable`), but you\n+can choose to enable it permanently on your project by adding these two settings in your sbt build\n+definition:\n \n ```scala\n-$ sbt\n-> semanticdbEnable // automatically runs libraryDependencies += compilerPlugin(...)\n-> compile // re-compile project with semanticdb-scalac compiler plugin\n-> ...\n+addCompilerPlugin(\"org.scalameta\" % \"semanticdb-scalac\" % \"2.1.8\" cross CrossVersion.full)\n+scalacOptions += \"-Yrangepos\"\n ```\n \n As soon as you exit the sbt shell you need to re-run `semanticdbEnable` next\n time you open sbt.\n \n-## Step 2 - produce the build metadata\n-\n-In your project of choice, open `sbt` and run `metalsSetup`. Running the task\n-produces the necessary metadata for the server to support features like\n-completions and goto definition in dependency sources.\n-\n-> **NOTE**: you will need to repeat this step every time you add a new\n-> dependency in your build or when you run `sbt clean`.\n-\n-## Step 3 - start editing\n-\n+## Start editing\n Open your project in VSCode (`code .` from your terminal) and open a Scala file;\n the server will now start.\n "
  },
  {
    "id" : "dd3b9d7c-9141-46cd-9581-15621b302471",
    "prId" : 254,
    "comments" : [
      {
        "id" : "72f6cc37-0b1d-4d4c-b939-5a7b30ade728",
        "parentId" : null,
        "author" : {
          "login" : "ivanopagano",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1067461?v=4"
        },
        "body" : "isn't this in contrast with the rest of the section, as it stands now?",
        "createdAt" : "2018-04-05T23:47:32Z",
        "updatedAt" : "2018-04-06T14:20:48Z",
        "lastEditedBy" : {
          "login" : "ivanopagano",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1067461?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "83d6cb68-3978-4c06-9d36-93501090e612",
        "parentId" : "72f6cc37-0b1d-4d4c-b939-5a7b30ade728",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Nice catch, I've missed it while copy-pasting stuff around.",
        "createdAt" : "2018-04-06T11:58:25Z",
        "updatedAt" : "2018-04-06T14:20:48Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0ef699a957a5f3df25728c93719c936848a33cb4",
    "line" : null,
    "diffHunk" : "@@ -10,74 +10,53 @@ These steps are required once per machine.\n ## Step 1 - sbt plugin\n \n The server needs to access some metadata about the build configuration. This\n-data are produced by an sbt plugin. This plugin is currently not published, so\n-you will need to copy paste it on your machine.\n+data are produced by an sbt plugin.\n \n-Here's the source of the plugin:\n-https://github.com/scalameta/metals/blob/master/project/MetalsPlugin.scala\n+You can install the plugin with\n \n-Copy the source to either (depending on your sbt version):\n-\n-* (sbt 0.13) `~/.sbt/0.13/plugins/MetalsPlugin.scala`\n-* (sbt 1.+) `~/.sbt/1.0/plugins/MetalsPlugin.scala`\n-\n-## Step 2 - build the VSCode extension\n-\n-The VSCode extension is not yet published on the Marketplace, so you'll need to\n-build it locally.\n-\n-* Make sure you have installed `node`, `npm` and VS Code.\n-* `cd vscode-extension`\n-* `npm install`\n-* `npm run build`\n-* `code --install-extension metals-0.1.0.vsix`\n-\n-## Step 3 - publish the server locally\n+```\n+addSbtPlugin(\"org.scalameta\" % \"sbt-metals\" % \"<version>\")\n+```\n \n-From the repo root run `sbt publishLocal`\n+## Step 2 - VSCode extension\n+The VSCode extension is published on the Marketplace. You can open VSCode and search for it.\n \n # Per-project setup\n \n These steps are required on each project.\n \n-## Step 1 - add semanticdb-scalac compiler plugin to your project\n+## Quick-start\n+The quickest way to get started with Metals is to use the `metalsSetup` command in sbt.\n+\n+```\n+sbt\n+> metalsSetup\n+```\n \n-Some features like definition/references/hover rely on artifacts produced by a\n-compiler plugin called `semanticdb-scalac`. There are two alternative ways to\n-install `semanticdb-scalac`.\n+The command will create the necessary metadata in the `.metals` directory\n+(which you should not checkout into version control) and setup the `semanticdb-scalac` compiler\n+plugin for the current sbt ession.\n \n-The first option is to enable `semanticdb-scalac` permanently for your project\n-in `build.sbt` with:\n+Note that you will need to invoke `metalsSetup` (or `semanticdbEnable`) whenevery you close and\n+re-open sbt. For a more persistent setup, keep reading.\n \n-```scala\n- addCompilerPlugin(\"org.scalameta\" % \"semanticdb-scalac\" % \"2.1.8\" cross CrossVersion.full)\n-scalacOptions += \"-Yrangepos\"\n-```\n+## Persisting the semanticdb-scalac compiler plugin\n+Some features like definition/references/hover rely on artifacts produced by a compiler plugin\n+called `semanticdb-scalac`.\n \n-The second option is to enable `semanticdb-scalac` only for an active sbt\n-session by running `semanticdbEnable` from the sbt shell.\n+`metalsSetup` enables the plugin on the current session (by invoking `semanticdbEnable`), but you\n+can choose to enable it permanently on your project by adding these two settings in your sbt build\n+definition:\n \n ```scala\n-$ sbt\n-> semanticdbEnable // automatically runs libraryDependencies += compilerPlugin(...)\n-> compile // re-compile project with semanticdb-scalac compiler plugin\n-> ...\n+addCompilerPlugin(\"org.scalameta\" % \"semanticdb-scalac\" % \"2.1.8\" cross CrossVersion.full)\n+scalacOptions += \"-Yrangepos\"\n ```\n \n As soon as you exit the sbt shell you need to re-run `semanticdbEnable` next"
  },
  {
    "id" : "51b60158-436a-443b-8c89-b7a1a8f4e73a",
    "prId" : 254,
    "comments" : [
      {
        "id" : "5b56e89f-dceb-4573-8d9d-0405c20bc793",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Let's add\r\n\r\n```\r\nval semanticdbScalac = \"org.scalameta\" % \"semanticdb-scalac\" % \"2.1.8\" cross CrossVersion.full\r\n```\r\n\r\nto the `autoImport` section of MetalsPlugin and recommend users to install instead\r\n\r\n```\r\naddCompilerPlugin(semanticdbScalac)\r\n```\r\n\r\nThis means when users upgrade metals they automatically upgrade scalameta as well.",
        "createdAt" : "2018-04-06T12:27:57Z",
        "updatedAt" : "2018-04-06T14:20:48Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3da700a5-facc-4b2b-82fb-1dc8ea0ffa7e",
        "parentId" : "5b56e89f-dceb-4573-8d9d-0405c20bc793",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Done, take a look!",
        "createdAt" : "2018-04-06T14:20:51Z",
        "updatedAt" : "2018-04-06T14:20:51Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0ef699a957a5f3df25728c93719c936848a33cb4",
    "line" : null,
    "diffHunk" : "@@ -7,77 +7,69 @@ and provide feedback. We do not provide support for day-to-day usage of Metals.\n \n These steps are required once per machine.\n \n-## Step 1 - sbt plugin\n+## sbt plugin\n \n The server needs to access some metadata about the build configuration. This\n-data are produced by an sbt plugin. This plugin is currently not published, so\n-you will need to copy paste it on your machine.\n+data are produced by an sbt plugin.\n \n-Here's the source of the plugin:\n-https://github.com/scalameta/metals/blob/master/project/MetalsPlugin.scala\n+You can install the plugin with (replace `<version>` with the latest available version)\n \n-Copy the source to either (depending on your sbt version):\n+[![Download](https://api.bintray.com/packages/scalameta/sbt-plugins/sbt-metals/images/download.svg)](https://bintray.com/scalameta/sbt-plugins/sbt-metals/_latestVersion)\n \n-* (sbt 0.13) `~/.sbt/0.13/plugins/MetalsPlugin.scala`\n-* (sbt 1.+) `~/.sbt/1.0/plugins/MetalsPlugin.scala`\n-\n-## Step 2 - build the VSCode extension\n-\n-The VSCode extension is not yet published on the Marketplace, so you'll need to\n-build it locally.\n+```scala\n+addSbtPlugin(\"org.scalameta\" % \"sbt-metals\" % \"<version>\")\n+```\n \n-* Make sure you have installed `node`, `npm` and VS Code.\n-* `cd vscode-extension`\n-* `npm install`\n-* `npm run build`\n-* `code --install-extension metals-0.1.0.vsix`\n+You can add the plugin to a specific project (adding it to `project/plugins.sbt`) or globally adding it to:\n \n-## Step 3 - publish the server locally\n+- (sbt 1) `~/.sbt/1.0/plugins/plugins.sbt`\n+- (sbt 0.13) `~/.sbt/0.13/plugins/plugins.sbt`\n \n-From the repo root run `sbt publishLocal`\n+## VSCode extension\n+The VSCode extension is [published on the Marketplace](https://marketplace.visualstudio.com/items?itemName=scalameta.metals).\n+You can open VSCode and search for it or click [here](vscode:extension/scalameta.metals) to install\n+it directly.\n \n # Per-project setup\n \n These steps are required on each project.\n \n-## Step 1 - add semanticdb-scalac compiler plugin to your project\n+## Quick-start\n+The quickest way to get started with Metals is to use the `metalsSetup` command in sbt.\n \n-Some features like definition/references/hover rely on artifacts produced by a\n-compiler plugin called `semanticdb-scalac`. There are two alternative ways to\n-install `semanticdb-scalac`.\n-\n-The first option is to enable `semanticdb-scalac` permanently for your project\n-in `build.sbt` with:\n-\n-```scala\n- addCompilerPlugin(\"org.scalameta\" % \"semanticdb-scalac\" % \"2.1.8\" cross CrossVersion.full)\n-scalacOptions += \"-Yrangepos\"\n+```\n+sbt\n+> metalsSetup\n ```\n \n-The second option is to enable `semanticdb-scalac` only for an active sbt\n-session by running `semanticdbEnable` from the sbt shell.\n+The command will create the necessary metadata in the `.metals` directory\n+(which you should not checkout into version control) and setup the `semanticdb-scalac` compiler\n+plugin for the current sbt ession.\n \n-```scala\n-$ sbt\n-> semanticdbEnable // automatically runs libraryDependencies += compilerPlugin(...)\n-> compile // re-compile project with semanticdb-scalac compiler plugin\n-> ...\n-```\n+You should not checkout the `.metals` directory into version control. We recommend to add it to your\n+project's `.gitignore` or/and to your global `.gitignore`:\n \n-As soon as you exit the sbt shell you need to re-run `semanticdbEnable` next\n-time you open sbt.\n+```\n+echo \".metals/\" >> .gitignore\n+```\n \n-## Step 2 - produce the build metadata\n+Note that you will need to invoke `metalsSetup` (or `semanticdbEnable`) whenever you close and\n+re-open sbt. For a more persistent setup, keep reading.\n \n-In your project of choice, open `sbt` and run `metalsSetup`. Running the task\n-produces the necessary metadata for the server to support features like\n-completions and goto definition in dependency sources.\n+## Persisting the semanticdb-scalac compiler plugin\n+Some features like definition/references/hover rely on artifacts produced by a compiler plugin\n+called `semanticdb-scalac`.\n \n-> **NOTE**: you will need to repeat this step every time you add a new\n-> dependency in your build or when you run `sbt clean`.\n+`metalsSetup` enables the plugin on the current session (by invoking `semanticdbEnable`), but you\n+can choose to enable it permanently on your project by adding these two settings in your sbt build\n+definition:\n \n-## Step 3 - start editing\n+```scala\n+addCompilerPlugin(\"org.scalameta\" % \"semanticdb-scalac\" % \"2.1.8\" cross CrossVersion.full)"
  },
  {
    "id" : "e70bf879-319d-43e0-bfff-5745cfa2058e",
    "prId" : 272,
    "comments" : [
      {
        "id" : "04b71aac-7bdc-4784-a971-919730ec40f8",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "This is now outdated",
        "createdAt" : "2018-04-09T13:50:42Z",
        "updatedAt" : "2018-04-09T14:06:28Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "20e3706a-75bd-457d-940c-7e256959c6a1",
        "parentId" : "04b71aac-7bdc-4784-a971-919730ec40f8",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Good catch! Fixed",
        "createdAt" : "2018-04-09T14:03:41Z",
        "updatedAt" : "2018-04-09T14:06:28Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "81a5bc98dbe50a21209e0a5e774579e72d8ebad5",
    "line" : null,
    "diffHunk" : "@@ -65,7 +65,7 @@ can choose to enable it permanently on your project by adding these two settings\n definition:\n \n ```scala\n-addCompilerPlugin(semanticdbScalac)\n+addCompilerPlugin(Metals.semanticdbScalac)"
  },
  {
    "id" : "9cff4b1e-6eb8-4af7-bdc9-79cd53d17dce",
    "prId" : 287,
    "comments" : [
      {
        "id" : "fb79e1eb-feee-4a3b-ab2b-3634af1c97ce",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Is it possible to disable this behavior sbt 1? For example if `sbt.diagnostics=false` and `command=\"\"`. ",
        "createdAt" : "2018-04-21T18:05:29Z",
        "updatedAt" : "2018-04-21T18:06:55Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e833be0b-c6b7-4ce0-8d9d-7457bca8bfec",
        "parentId" : "fb79e1eb-feee-4a3b-ab2b-3634af1c97ce",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "I think this combination is a bit confusing. I'm hesitant to suggest adding another setting again after we removed `sbt.enabled`, but without it automatic connection to sbt server is currently unconditional.",
        "createdAt" : "2018-04-21T21:30:58Z",
        "updatedAt" : "2018-04-21T21:30:58Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "39ffe6f8c879a0972623c0e0dbd7282caf2314c6",
    "line" : 17,
    "diffHunk" : "@@ -53,8 +53,9 @@ project's `.gitignore` or/and to your global `.gitignore`:\n echo \".metals/\" >> .gitignore\n ```\n \n-Note that you will need to invoke `metalsSetup` (or `semanticdbEnable`) whenever you close and\n-re-open sbt. For a more persistent setup, keep reading.\n+Note that in sbt 0.13 you will need to invoke `metalsSetup` (or `semanticdbEnable`) whenever you close and\n+re-open sbt. For a more persistent setup, keep reading. In sbt 1 you don't need to do it because Metals will\n+automatically invoke `semanticdbEnable` every time it connects to the sbt server."
  }
]