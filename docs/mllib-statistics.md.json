[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Let's keep the random data generation examples here without substitution, since the example is quite simple. Same for `JavaRandomDataGenerationExample` and `random_data_generation_example`\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T18:37:30Z",
    "diffHunk": "@@ -562,18 +277,7 @@ distribution `N(0, 1)`, and then map it to `N(1, 4)`.\n \n Refer to the [`RandomRDDs` Scala docs](api/scala/index.html#org.apache.spark.mllib.random.RandomRDDs) for details on the API.\n \n-{% highlight scala %}\n-import org.apache.spark.SparkContext\n-import org.apache.spark.mllib.random.RandomRDDs._\n-\n-val sc: SparkContext = ...\n-\n-// Generate a random double RDD that contains 1 million i.i.d. values drawn from the\n-// standard normal distribution `N(0, 1)`, evenly distributed in 10 partitions.\n-val u = normalRDD(sc, 1000000L, 10)\n-// Apply a transform to get a random double RDD following `N(1, 4)`.\n-val v = u.map(x => 1.0 + 2.0 * x)\n-{% endhighlight %}\n+{% include_example scala/org/apache/spark/examples/mllib/RandomDataGenerationExample.scala %}"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Remove those \"-\"\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-07T20:35:08Z",
    "diffHunk": "@@ -562,18 +277,18 @@ distribution `N(0, 1)`, and then map it to `N(1, 4)`.\n \n Refer to the [`RandomRDDs` Scala docs](api/scala/index.html#org.apache.spark.mllib.random.RandomRDDs) for details on the API.\n \n-{% highlight scala %}\n-import org.apache.spark.SparkContext\n-import org.apache.spark.mllib.random.RandomRDDs._\n-\n-val sc: SparkContext = ...\n-\n-// Generate a random double RDD that contains 1 million i.i.d. values drawn from the\n-// standard normal distribution `N(0, 1)`, evenly distributed in 10 partitions.\n-val u = normalRDD(sc, 1000000L, 10)\n-// Apply a transform to get a random double RDD following `N(1, 4)`.\n-val v = u.map(x => 1.0 + 2.0 * x)\n-{% endhighlight %}\n+-{% highlight scala %}"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "ditto\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-07T20:35:16Z",
    "diffHunk": "@@ -584,24 +299,24 @@ distribution `N(0, 1)`, and then map it to `N(1, 4)`.\n \n Refer to the [`RandomRDDs` Java docs](api/java/org/apache/spark/mllib/random/RandomRDDs) for details on the API.\n \n-{% highlight java %}\n-import org.apache.spark.SparkContext;\n-import org.apache.spark.api.JavaDoubleRDD;\n-import static org.apache.spark.mllib.random.RandomRDDs.*;\n-\n-JavaSparkContext jsc = ...\n-\n-// Generate a random double RDD that contains 1 million i.i.d. values drawn from the\n-// standard normal distribution `N(0, 1)`, evenly distributed in 10 partitions.\n-JavaDoubleRDD u = normalJavaRDD(jsc, 1000000L, 10);\n-// Apply a transform to get a random double RDD following `N(1, 4)`.\n-JavaDoubleRDD v = u.map(\n-  new Function<Double, Double>() {\n-    public Double call(Double x) {\n-      return 1.0 + 2.0 * x;\n-    }\n-  });\n-{% endhighlight %}\n+-{% highlight java %}"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "ditto\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-07T20:35:23Z",
    "diffHunk": "@@ -612,17 +327,17 @@ distribution `N(0, 1)`, and then map it to `N(1, 4)`.\n \n Refer to the [`RandomRDDs` Python docs](api/python/pyspark.mllib.html#pyspark.mllib.random.RandomRDDs) for more details on the API.\n \n-{% highlight python %}\n-from pyspark.mllib.random import RandomRDDs\n-\n-sc = ... # SparkContext\n-\n-# Generate a random double RDD that contains 1 million i.i.d. values drawn from the\n-# standard normal distribution `N(0, 1)`, evenly distributed in 10 partitions.\n-u = RandomRDDs.normalRDD(sc, 1000000L, 10)\n-# Apply a transform to get a random double RDD following `N(1, 4)`.\n-v = u.map(lambda x: 1.0 + 2.0 * x)\n-{% endhighlight %}\n+-{% highlight python %}"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Put comment here makes it more clear. :)\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-07T20:36:30Z",
    "diffHunk": "@@ -584,24 +299,24 @@ distribution `N(0, 1)`, and then map it to `N(1, 4)`.\n \n Refer to the [`RandomRDDs` Java docs](api/java/org/apache/spark/mllib/random/RandomRDDs) for details on the API.\n \n-{% highlight java %}\n-import org.apache.spark.SparkContext;\n-import org.apache.spark.api.JavaDoubleRDD;\n-import static org.apache.spark.mllib.random.RandomRDDs.*;\n-\n-JavaSparkContext jsc = ...\n-\n-// Generate a random double RDD that contains 1 million i.i.d. values drawn from the\n-// standard normal distribution `N(0, 1)`, evenly distributed in 10 partitions.\n-JavaDoubleRDD u = normalJavaRDD(jsc, 1000000L, 10);\n-// Apply a transform to get a random double RDD following `N(1, 4)`.\n-JavaDoubleRDD v = u.map(\n-  new Function<Double, Double>() {\n-    public Double call(Double x) {\n-      return 1.0 + 2.0 * x;\n-    }\n-  });\n-{% endhighlight %}\n+-{% highlight java %}\n+ -import org.apache.spark.SparkContext;\n+ -import org.apache.spark.api.JavaDoubleRDD;\n+ -import static org.apache.spark.mllib.random.RandomRDDs.*;\n+ -\n+ -JavaSparkContext jsc = ...\n+ -\n+ -// Generate a random double RDD that contains 1 million i.i.d. values drawn from the\n+ -// standard normal distribution `N(0, 1)`, evenly distributed in 10 partitions.\n+ -JavaDoubleRDD u = normalJavaRDD(jsc, 1000000L, 10);\n+ -// Apply a transform to get a random double RDD following `N(1, 4)`.\n+ -JavaDoubleRDD v = u.map(\n+ -  new Function<Double, Double>() {\n+ -    public Double call(Double x) {\n+ -      return 1.0 + 2.0 * x;\n+ -    }\n+ -  });\n+ -{% endhighlight %}"
  }, {
    "author": {
      "login": "keypointt"
    },
    "body": "you mean putting a comment here, explaining why didn't create a separate example file?\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-07T21:09:02Z",
    "diffHunk": "@@ -584,24 +299,24 @@ distribution `N(0, 1)`, and then map it to `N(1, 4)`.\n \n Refer to the [`RandomRDDs` Java docs](api/java/org/apache/spark/mllib/random/RandomRDDs) for details on the API.\n \n-{% highlight java %}\n-import org.apache.spark.SparkContext;\n-import org.apache.spark.api.JavaDoubleRDD;\n-import static org.apache.spark.mllib.random.RandomRDDs.*;\n-\n-JavaSparkContext jsc = ...\n-\n-// Generate a random double RDD that contains 1 million i.i.d. values drawn from the\n-// standard normal distribution `N(0, 1)`, evenly distributed in 10 partitions.\n-JavaDoubleRDD u = normalJavaRDD(jsc, 1000000L, 10);\n-// Apply a transform to get a random double RDD following `N(1, 4)`.\n-JavaDoubleRDD v = u.map(\n-  new Function<Double, Double>() {\n-    public Double call(Double x) {\n-      return 1.0 + 2.0 * x;\n-    }\n-  });\n-{% endhighlight %}\n+-{% highlight java %}\n+ -import org.apache.spark.SparkContext;\n+ -import org.apache.spark.api.JavaDoubleRDD;\n+ -import static org.apache.spark.mllib.random.RandomRDDs.*;\n+ -\n+ -JavaSparkContext jsc = ...\n+ -\n+ -// Generate a random double RDD that contains 1 million i.i.d. values drawn from the\n+ -// standard normal distribution `N(0, 1)`, evenly distributed in 10 partitions.\n+ -JavaDoubleRDD u = normalJavaRDD(jsc, 1000000L, 10);\n+ -// Apply a transform to get a random double RDD following `N(1, 4)`.\n+ -JavaDoubleRDD v = u.map(\n+ -  new Function<Double, Double>() {\n+ -    public Double call(Double x) {\n+ -      return 1.0 + 2.0 * x;\n+ -    }\n+ -  });\n+ -{% endhighlight %}"
  }, {
    "author": {
      "login": "yinxusen"
    },
    "body": "No I mean you need to remove those minus signs in the front of each line.\n\nOn Monday, March 7, 2016, Xin Ren notifications@github.com wrote:\n\n> In docs/mllib-statistics.md\n> https://github.com/apache/spark/pull/11108#discussion_r55272379:\n> \n> > - -import org.apache.spark.api.JavaDoubleRDD;\n> > - -import static org.apache.spark.mllib.random.RandomRDDs.*;\n> > - -\n> > - -JavaSparkContext jsc = ...\n> > - -\n> > - -// Generate a random double RDD that contains 1 million i.i.d. values drawn from the\n> > - -// standard normal distribution `N(0, 1)`, evenly distributed in 10 partitions.\n> > - -JavaDoubleRDD u = normalJavaRDD(jsc, 1000000L, 10);\n> > - -// Apply a transform to get a random double RDD following `N(1, 4)`.\n> > - -JavaDoubleRDD v = u.map(\n> > - \\-  new Function<Double, Double>() {\n> > - \\-    public Double call(Double x) {\n> > - \\-      return 1.0 + 2.0 \\* x;\n> > - \\-    }\n> > - \\-  });\n> > - -{% endhighlight %}\n> \n> you mean putting a comment here, explaining why didn't create a separate\n> example file?\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/spark/pull/11108/files#r55272379.\n\n## \n\nCheers,\nXusen Yin\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-07T21:19:38Z",
    "diffHunk": "@@ -584,24 +299,24 @@ distribution `N(0, 1)`, and then map it to `N(1, 4)`.\n \n Refer to the [`RandomRDDs` Java docs](api/java/org/apache/spark/mllib/random/RandomRDDs) for details on the API.\n \n-{% highlight java %}\n-import org.apache.spark.SparkContext;\n-import org.apache.spark.api.JavaDoubleRDD;\n-import static org.apache.spark.mllib.random.RandomRDDs.*;\n-\n-JavaSparkContext jsc = ...\n-\n-// Generate a random double RDD that contains 1 million i.i.d. values drawn from the\n-// standard normal distribution `N(0, 1)`, evenly distributed in 10 partitions.\n-JavaDoubleRDD u = normalJavaRDD(jsc, 1000000L, 10);\n-// Apply a transform to get a random double RDD following `N(1, 4)`.\n-JavaDoubleRDD v = u.map(\n-  new Function<Double, Double>() {\n-    public Double call(Double x) {\n-      return 1.0 + 2.0 * x;\n-    }\n-  });\n-{% endhighlight %}\n+-{% highlight java %}\n+ -import org.apache.spark.SparkContext;\n+ -import org.apache.spark.api.JavaDoubleRDD;\n+ -import static org.apache.spark.mllib.random.RandomRDDs.*;\n+ -\n+ -JavaSparkContext jsc = ...\n+ -\n+ -// Generate a random double RDD that contains 1 million i.i.d. values drawn from the\n+ -// standard normal distribution `N(0, 1)`, evenly distributed in 10 partitions.\n+ -JavaDoubleRDD u = normalJavaRDD(jsc, 1000000L, 10);\n+ -// Apply a transform to get a random double RDD following `N(1, 4)`.\n+ -JavaDoubleRDD v = u.map(\n+ -  new Function<Double, Double>() {\n+ -    public Double call(Double x) {\n+ -      return 1.0 + 2.0 * x;\n+ -    }\n+ -  });\n+ -{% endhighlight %}"
  }, {
    "author": {
      "login": "keypointt"
    },
    "body": "got it, fixing them now :p\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-07T21:23:12Z",
    "diffHunk": "@@ -584,24 +299,24 @@ distribution `N(0, 1)`, and then map it to `N(1, 4)`.\n \n Refer to the [`RandomRDDs` Java docs](api/java/org/apache/spark/mllib/random/RandomRDDs) for details on the API.\n \n-{% highlight java %}\n-import org.apache.spark.SparkContext;\n-import org.apache.spark.api.JavaDoubleRDD;\n-import static org.apache.spark.mllib.random.RandomRDDs.*;\n-\n-JavaSparkContext jsc = ...\n-\n-// Generate a random double RDD that contains 1 million i.i.d. values drawn from the\n-// standard normal distribution `N(0, 1)`, evenly distributed in 10 partitions.\n-JavaDoubleRDD u = normalJavaRDD(jsc, 1000000L, 10);\n-// Apply a transform to get a random double RDD following `N(1, 4)`.\n-JavaDoubleRDD v = u.map(\n-  new Function<Double, Double>() {\n-    public Double call(Double x) {\n-      return 1.0 + 2.0 * x;\n-    }\n-  });\n-{% endhighlight %}\n+-{% highlight java %}\n+ -import org.apache.spark.SparkContext;\n+ -import org.apache.spark.api.JavaDoubleRDD;\n+ -import static org.apache.spark.mllib.random.RandomRDDs.*;\n+ -\n+ -JavaSparkContext jsc = ...\n+ -\n+ -// Generate a random double RDD that contains 1 million i.i.d. values drawn from the\n+ -// standard normal distribution `N(0, 1)`, evenly distributed in 10 partitions.\n+ -JavaDoubleRDD u = normalJavaRDD(jsc, 1000000L, 10);\n+ -// Apply a transform to get a random double RDD following `N(1, 4)`.\n+ -JavaDoubleRDD v = u.map(\n+ -  new Function<Double, Double>() {\n+ -    public Double call(Double x) {\n+ -      return 1.0 + 2.0 * x;\n+ -    }\n+ -  });\n+ -{% endhighlight %}"
  }],
  "prId": 11108
}]