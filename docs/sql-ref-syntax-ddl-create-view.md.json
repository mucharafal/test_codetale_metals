[{
  "comments": [{
    "author": {
      "login": "dilipbiswal"
    },
    "body": "@amanomer Can we make this example be a little real-world like ? Like a view that contains customers for state CA or sales for month of january .. IMHO select * from t1 probably wouldn't require a view , right ?",
    "commit": "a3ea519f8400982ce85c88deb45dfab1afd99188",
    "createdAt": "2019-08-23T17:45:31Z",
    "diffHunk": "@@ -19,4 +19,53 @@ license: |\n   limitations under the License.\n ---\n \n-**This page is under construction**\n+### Description\n+A view is a virtual table based on the result set of base query. The base query\n+can involve joins, expressions, reordered columns, column aliases, and other SQL\n+features that can make a query hard to understand or maintain.\n+A view is purely a logical construct (an alias for a query) with no physical\n+data behind it.\n+\n+### Syntax\n+{% highlight sql %}\n+CREATE [OR REPLACE] [[GLOBAL] TEMPORARY] VIEW [IF NOT EXISTS] [db_name.]view_name\n+    [(column_name [COMMENT column_comment], ...) ]\n+    create_view_clauses\n+    AS SELECT ...;\n+    \n+    create_view_clauses (order insensitive):\n+        [COMMENT view_comment]\n+        [TBLPROPERTIES (property_name = property_value, ...)]\n+{% endhighlight %}\n+\n+### Examples\n+{% highlight sql %}\n+-- Create a global temporary view `v1` if it does not exist.\n+CREATE GLOBAL TEMPORARY VIEW IF NOT EXISTS v1 AS SELECT * FROM t1;"
  }, {
    "author": {
      "login": "amanomer"
    },
    "body": "You are definitely right. I am re-writing this. \r\nThanks for your review.",
    "commit": "a3ea519f8400982ce85c88deb45dfab1afd99188",
    "createdAt": "2019-08-23T17:49:01Z",
    "diffHunk": "@@ -19,4 +19,53 @@ license: |\n   limitations under the License.\n ---\n \n-**This page is under construction**\n+### Description\n+A view is a virtual table based on the result set of base query. The base query\n+can involve joins, expressions, reordered columns, column aliases, and other SQL\n+features that can make a query hard to understand or maintain.\n+A view is purely a logical construct (an alias for a query) with no physical\n+data behind it.\n+\n+### Syntax\n+{% highlight sql %}\n+CREATE [OR REPLACE] [[GLOBAL] TEMPORARY] VIEW [IF NOT EXISTS] [db_name.]view_name\n+    [(column_name [COMMENT column_comment], ...) ]\n+    create_view_clauses\n+    AS SELECT ...;\n+    \n+    create_view_clauses (order insensitive):\n+        [COMMENT view_comment]\n+        [TBLPROPERTIES (property_name = property_value, ...)]\n+{% endhighlight %}\n+\n+### Examples\n+{% highlight sql %}\n+-- Create a global temporary view `v1` if it does not exist.\n+CREATE GLOBAL TEMPORARY VIEW IF NOT EXISTS v1 AS SELECT * FROM t1;"
  }],
  "prId": 25543
}, {
  "comments": [{
    "author": {
      "login": "dilipbiswal"
    },
    "body": "back tick CREATE VIEW and SQL ?",
    "commit": "a3ea519f8400982ce85c88deb45dfab1afd99188",
    "createdAt": "2019-08-23T20:32:41Z",
    "diffHunk": "@@ -19,4 +19,55 @@ license: |\n   limitations under the License.\n ---\n \n-**This page is under construction**\n+### Description\n+Views are based on result-set of complex base SQL queries that are hard to\n+maintain or understand. CREATE VIEW constructs a virtual table that have no"
  }],
  "prId": 25543
}, {
  "comments": [{
    "author": {
      "login": "dilipbiswal"
    },
    "body": "have -> has ?",
    "commit": "a3ea519f8400982ce85c88deb45dfab1afd99188",
    "createdAt": "2019-08-23T20:34:48Z",
    "diffHunk": "@@ -19,4 +19,55 @@ license: |\n   limitations under the License.\n ---\n \n-**This page is under construction**\n+### Description\n+Views are based on result-set of complex base SQL queries that are hard to\n+maintain or understand. CREATE VIEW constructs a virtual table that have no"
  }],
  "prId": 25543
}, {
  "comments": [{
    "author": {
      "login": "dilipbiswal"
    },
    "body": "is is table-level or view level ?",
    "commit": "a3ea519f8400982ce85c88deb45dfab1afd99188",
    "createdAt": "2019-08-23T20:37:29Z",
    "diffHunk": "@@ -19,4 +19,55 @@ license: |\n   limitations under the License.\n ---\n \n-**This page is under construction**\n+### Description\n+Views are based on result-set of complex base SQL queries that are hard to\n+maintain or understand. CREATE VIEW constructs a virtual table that have no\n+physical data therefore other operations like ALTER VIEW and DROP VIEW \n+only change metadata. \n+\n+### Syntax\n+{% highlight sql %}\n+CREATE [OR REPLACE] [[GLOBAL] TEMPORARY] VIEW [IF NOT EXISTS] [db_name.]view_name\n+    [(column_name [COMMENT column_comment], ...) ]\n+    create_view_clauses\n+    AS SELECT ...;\n+    \n+    create_view_clauses (order insensitive):\n+        [COMMENT view_comment]\n+        [TBLPROPERTIES (property_name = property_value, ...)]\n+{% endhighlight %}\n+\n+### Examples\n+{% highlight sql %}\n+-- Create a global temporary view `subscribed_movies` if it does not exist.\n+CREATE GLOBAL TEMPORARY VIEW IF NOT EXISTS subscribed_movies \n+    AS SELECT mo.member_id, mb.full_name, mo.movie_title\n+     FROM movies AS mo INNER JOIN members AS mb \n+     ON mo.member_id = mb.id;\n+-- Create or replace view for `experienced_employee` with comments.\n+CREATE OR REPLACE VIEW experienced_employee \n+    (ID COMMENT 'Unique identification number', Name) \n+    COMMENT 'View for experienced employees' \n+    AS SELECT id, name FROM all_employee \n+        WHERE working_years > 5;\n+{% endhighlight %}\n+\n+### Parameters\n+#### OR REPLACE\n+If a view of same name already exists, it will be replaced.\n+#### [GLOBAL] TEMPORARY\n+TEMPORARY views are session-scoped and will be dropped when session ends \n+because it skips persisting the definition in the underlying metastore, if any.\n+GLOBAL TEMPORARY views are tied to a system preserved temporary database `global_temp`.\n+#### IF NOT EXISTS\n+Creates a view if it does not exists.\n+#### COMMENT\n+Table-level and column-level comments can be specified in CREATE VIEW statement."
  }],
  "prId": 25543
}, {
  "comments": [{
    "author": {
      "login": "dilipbiswal"
    },
    "body": "Can we treat `create_view_clauses` a parameter ? \r\nAlso the query portion can be made a parameter as well ..\r\nCould we please check some of the earlier prs that went in for format ? For example: the INSERT pr has the format for how to describe the query parameter.",
    "commit": "a3ea519f8400982ce85c88deb45dfab1afd99188",
    "createdAt": "2019-09-06T21:11:15Z",
    "diffHunk": "@@ -19,4 +19,69 @@ license: |\n   limitations under the License.\n ---\n \n-**This page is under construction**\n+### Description\n+Views are based on result-set of complex base `SQL` queries that are hard to\n+maintain or understand. `CREATE VIEW` constructs a virtual table that has no\n+physical data therefore other operations like `ALTER VIEW` and `DROP VIEW` \n+only change metadata. \n+\n+### Syntax\n+{% highlight sql %}\n+CREATE [OR REPLACE] [[GLOBAL] TEMPORARY] VIEW [IF NOT EXISTS] [db_name.]view_name\n+    [(column_name [COMMENT column_comment], ...) ]\n+    create_view_clauses\n+    AS SELECT ...;\n+    \n+    create_view_clauses (order insensitive):"
  }],
  "prId": 25543
}]