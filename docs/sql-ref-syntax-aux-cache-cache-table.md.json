[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Lazy here means \"the first time it's used\" rather than immediately right? that might be worth clarifying.",
    "commit": "d0a3dbd718bdc59c8ed6bc3205f7d2d1bf8c6fec",
    "createdAt": "2019-08-21T18:19:32Z",
    "diffHunk": "@@ -19,4 +19,34 @@ license: |\n   limitations under the License.\n ---\n \n-**This page is under construction**\n+### Description\n+CACHE TABLE statement can be used to cache the contents of the table in memory using the RDD cache. This enables subsequent queries to avoid scanning the original files as much as possible.\n+\n+### Syntax\n+{% highlight sql %}\n+CACHE [LAZY] TABLE [db_name.]table_name\n+  [OPTIONS (table_property_list)] [[AS] query]\n+\n+table_property_list:\n+    : (table_property_key1 [[=]table_property_value1], table_property_key2 [[=]table_property_value2], ...)\n+\n+{% endhighlight %}\n+\n+### Example\n+{% highlight sql %}\n+CACHE TABLE testCache OPTIONS ('storageLevel' 'DISK_ONLY') SELECT * FROM testData\n+{% endhighlight %}\n+\n+### Parameters\n+\n+#### ***LAZY***:\n+Cache the table lazily instead of eagerly scanning the entire table."
  }],
  "prId": 25532
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "memory or disk, right?",
    "commit": "d0a3dbd718bdc59c8ed6bc3205f7d2d1bf8c6fec",
    "createdAt": "2019-08-22T01:40:55Z",
    "diffHunk": "@@ -19,4 +19,34 @@ license: |\n   limitations under the License.\n ---\n \n-**This page is under construction**\n+### Description\n+`CACHE TABLE` caches the table's contents in the RDD cache within memory. This reduces scanning of the original files in future queries."
  }],
  "prId": 25532
}, {
  "comments": [{
    "author": {
      "login": "dilipbiswal"
    },
    "body": "@huaxingao Do we need to detail the exact warning message ? We could say \"An warning is issued when .... event occurs\" ?",
    "commit": "d0a3dbd718bdc59c8ed6bc3205f7d2d1bf8c6fec",
    "createdAt": "2019-09-01T05:19:57Z",
    "diffHunk": "@@ -19,4 +19,65 @@ license: |\n   limitations under the License.\n ---\n \n-**This page is under construction**\n+### Description\n+`CACHE TABLE` statement caches the table's contents with the given storage level. This reduces scanning of the original files in future queries.\n+\n+### Syntax\n+{% highlight sql %}\n+CACHE [ LAZY ] TABLE table_name\n+    [ OPTIONS ( 'storageLevel' [ = ] value ) ] [ [ AS ] query ]\n+{% endhighlight %}\n+\n+### Parameters\n+<dl>\n+  <dt><code><em>LAZY</em></code></dt>\n+  <dd>Only cache the table when it is first used, instead of immediately.</dd>\n+</dl>\n+\n+<dl>\n+  <dt><code><em>table_name</em></code></dt>\n+  <dd>The name of the table to be cached.</dd>\n+</dl>\n+\n+<dl>\n+  <dt><code><em>OPTIONS ( 'storageLevel' [ = ] value )</em></code></dt>\n+  <dd>\n+  <code>OPTIONS</code> clause with <code>storageLevel</code> key and value pair. If a key other than <code>storageLevel</code> is used, a WARN with message \"org.apache.spark.sql.execution.command.CacheTableCommand: Invalid options: XXXX -> XXXX\" will be issued. The valid options for <code>storageLevel</code> are:"
  }],
  "prId": 25532
}, {
  "comments": [{
    "author": {
      "login": "dilipbiswal"
    },
    "body": "@huaxingao you meant \"to be cached\" ?",
    "commit": "d0a3dbd718bdc59c8ed6bc3205f7d2d1bf8c6fec",
    "createdAt": "2019-09-01T05:20:55Z",
    "diffHunk": "@@ -19,4 +19,65 @@ license: |\n   limitations under the License.\n ---\n \n-**This page is under construction**\n+### Description\n+`CACHE TABLE` statement caches the table's contents with the given storage level. This reduces scanning of the original files in future queries.\n+\n+### Syntax\n+{% highlight sql %}\n+CACHE [ LAZY ] TABLE table_name\n+    [ OPTIONS ( 'storageLevel' [ = ] value ) ] [ [ AS ] query ]\n+{% endhighlight %}\n+\n+### Parameters\n+<dl>\n+  <dt><code><em>LAZY</em></code></dt>\n+  <dd>Only cache the table when it is first used, instead of immediately.</dd>\n+</dl>\n+\n+<dl>\n+  <dt><code><em>table_name</em></code></dt>\n+  <dd>The name of the table to be cached.</dd>\n+</dl>\n+\n+<dl>\n+  <dt><code><em>OPTIONS ( 'storageLevel' [ = ] value )</em></code></dt>\n+  <dd>\n+  <code>OPTIONS</code> clause with <code>storageLevel</code> key and value pair. If a key other than <code>storageLevel</code> is used, a WARN with message \"org.apache.spark.sql.execution.command.CacheTableCommand: Invalid options: XXXX -> XXXX\" will be issued. The valid options for <code>storageLevel</code> are:\n+    <ul>\n+      <li><code>NONE</code></li>\n+      <li><code>DISK_ONLY</code></li>\n+      <li><code>DISK_ONLY_2</code></li>\n+      <li><code>MEMORY_ONLY</code></li>\n+      <li><code>MEMORY_ONLY_2</code></li>\n+      <li><code>MEMORY_ONLY_SER</code></li>\n+      <li><code>MEMORY_ONLY_SER_2</code></li>\n+      <li><code>MEMORY_AND_DISK</code></li>\n+      <li><code>MEMORY_AND_DISK_2</code></li>\n+      <li><code>MEMORY_AND_DISK_SER</code></li>\n+      <li><code>MEMORY_AND_DISK_SER_2</code></li>\n+      <li><code>OFF_HEAP</code></li>\n+    </ul>\n+    If invalid value is set for <code>storageLevel</code>, \"java.lang.IllegalArgumentException: Invalid StorageLevel: XXXX\" will be issued. If <code>storageLevel</code> is not explicitly set using <code>OPTIONS</code> clause,the default <code>storageLevel</code> is set to <code>MEMORY_AND_DISK</code>.\n+  </dd>\n+</dl>\n+\n+<dl>\n+  <dt><code><em>query</em></code></dt>\n+  <dd>A query that produces the rows to be inserted. It can be in one of following formats:"
  }],
  "prId": 25532
}, {
  "comments": [{
    "author": {
      "login": "dilipbiswal"
    },
    "body": "@huaxingao caches contents of a given table or output of a query ...",
    "commit": "d0a3dbd718bdc59c8ed6bc3205f7d2d1bf8c6fec",
    "createdAt": "2019-09-01T05:25:14Z",
    "diffHunk": "@@ -19,4 +19,65 @@ license: |\n   limitations under the License.\n ---\n \n-**This page is under construction**\n+### Description\n+`CACHE TABLE` statement caches the table's contents with the given storage level. This reduces scanning of the original files in future queries."
  }],
  "prId": 25532
}]