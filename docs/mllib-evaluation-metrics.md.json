[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Rename it to `JavaRegressionMetricsExample`.\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T08:52:56Z",
    "diffHunk": "@@ -1350,163 +582,21 @@ and evaluate the performance of the algorithm by several regression metrics.\n <div data-lang=\"scala\" markdown=\"1\">\n Refer to the [`RegressionMetrics` Scala docs](api/scala/index.html#org.apache.spark.mllib.evaluation.RegressionMetrics) for details on the API.\n \n-{% highlight scala %}\n-import org.apache.spark.mllib.regression.LabeledPoint\n-import org.apache.spark.mllib.regression.LinearRegressionModel\n-import org.apache.spark.mllib.regression.LinearRegressionWithSGD\n-import org.apache.spark.mllib.linalg.Vectors\n-import org.apache.spark.mllib.evaluation.RegressionMetrics\n-import org.apache.spark.mllib.util.MLUtils\n-\n-// Load the data\n-val data = MLUtils.loadLibSVMFile(sc, \"data/mllib/sample_linear_regression_data.txt\").cache()\n-\n-// Build the model\n-val numIterations = 100\n-val model = LinearRegressionWithSGD.train(data, numIterations)\n-\n-// Get predictions\n-val valuesAndPreds = data.map{ point =>\n-  val prediction = model.predict(point.features)\n-  (prediction, point.label)\n-}\n-\n-// Instantiate metrics object\n-val metrics = new RegressionMetrics(valuesAndPreds)\n-\n-// Squared error\n-println(s\"MSE = ${metrics.meanSquaredError}\")\n-println(s\"RMSE = ${metrics.rootMeanSquaredError}\")\n-\n-// R-squared\n-println(s\"R-squared = ${metrics.r2}\")\n-\n-// Mean absolute error\n-println(s\"MAE = ${metrics.meanAbsoluteError}\")\n-\n-// Explained variance\n-println(s\"Explained variance = ${metrics.explainedVariance}\")\n-\n-{% endhighlight %}\n+{% include_example scala/org/apache/spark/examples/mllib/RegressionMetricsExample.scala %}\n \n </div>\n \n <div data-lang=\"java\" markdown=\"1\">\n Refer to the [`RegressionMetrics` Java docs](api/java/org/apache/spark/mllib/evaluation/RegressionMetrics.html) for details on the API.\n \n-{% highlight java %}\n-import scala.Tuple2;\n-\n-import org.apache.spark.api.java.*;\n-import org.apache.spark.api.java.function.Function;\n-import org.apache.spark.mllib.linalg.Vectors;\n-import org.apache.spark.mllib.regression.LabeledPoint;\n-import org.apache.spark.mllib.regression.LinearRegressionModel;\n-import org.apache.spark.mllib.regression.LinearRegressionWithSGD;\n-import org.apache.spark.mllib.evaluation.RegressionMetrics;\n-import org.apache.spark.SparkConf;\n-\n-public class LinearRegression {\n-  public static void main(String[] args) {\n-    SparkConf conf = new SparkConf().setAppName(\"Linear Regression Example\");\n-    JavaSparkContext sc = new JavaSparkContext(conf);\n-\n-    // Load and parse the data\n-    String path = \"data/mllib/sample_linear_regression_data.txt\";\n-    JavaRDD<String> data = sc.textFile(path);\n-    JavaRDD<LabeledPoint> parsedData = data.map(\n-      new Function<String, LabeledPoint>() {\n-        public LabeledPoint call(String line) {\n-          String[] parts = line.split(\" \");\n-          double[] v = new double[parts.length - 1];\n-          for (int i = 1; i < parts.length - 1; i++)\n-            v[i - 1] = Double.parseDouble(parts[i].split(\":\")[1]);\n-          return new LabeledPoint(Double.parseDouble(parts[0]), Vectors.dense(v));\n-        }\n-      }\n-    );\n-    parsedData.cache();\n-\n-    // Building the model\n-    int numIterations = 100;\n-    final LinearRegressionModel model =\n-      LinearRegressionWithSGD.train(JavaRDD.toRDD(parsedData), numIterations);\n-\n-    // Evaluate model on training examples and compute training error\n-    JavaRDD<Tuple2<Object, Object>> valuesAndPreds = parsedData.map(\n-      new Function<LabeledPoint, Tuple2<Object, Object>>() {\n-        public Tuple2<Object, Object> call(LabeledPoint point) {\n-          double prediction = model.predict(point.features());\n-          return new Tuple2<Object, Object>(prediction, point.label());\n-        }\n-      }\n-    );\n-\n-    // Instantiate metrics object\n-    RegressionMetrics metrics = new RegressionMetrics(valuesAndPreds.rdd());\n-\n-    // Squared error\n-    System.out.format(\"MSE = %f\\n\", metrics.meanSquaredError());\n-    System.out.format(\"RMSE = %f\\n\", metrics.rootMeanSquaredError());\n-\n-    // R-squared\n-    System.out.format(\"R Squared = %f\\n\", metrics.r2());\n-\n-    // Mean absolute error\n-    System.out.format(\"MAE = %f\\n\", metrics.meanAbsoluteError());\n-\n-    // Explained variance\n-    System.out.format(\"Explained Variance = %f\\n\", metrics.explainedVariance());\n-\n-    // Save and load model\n-    model.save(sc.sc(), \"myModelPath\");\n-    LinearRegressionModel sameModel = LinearRegressionModel.load(sc.sc(), \"myModelPath\");\n-  }\n-}\n-\n-{% endhighlight %}\n+{% include_example java/org/apache/spark/examples/mllib/JavaLinearRegressionExample.java %}"
  }],
  "prId": 9689
}]