[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "nit: I think it needs `\\` for each line.",
    "commit": "f3f0348ef4cce81fee62c7a390c465dd66a54ed2",
    "createdAt": "2019-02-16T06:14:00Z",
    "diffHunk": "@@ -137,6 +137,37 @@ StreamingQuery query = output\n   .option(\"topic\", \"topic2\")\n   .start();\n \n+{% endhighlight %}\n+</div>\n+<div data-lang=\"python\" markdown=\"1\">\n+{% highlight python %}\n+from pyspark.sql.functions import from_avro, to_avro\n+\n+# `from_avro` requires Avro schema in JSON string format.\n+jsonFormatSchema = open(\"examples/src/main/resources/user.avsc\", \"r\").read()\n+\n+df = spark\n+  .readStream"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Fixed.",
    "commit": "f3f0348ef4cce81fee62c7a390c465dd66a54ed2",
    "createdAt": "2019-02-18T21:51:33Z",
    "diffHunk": "@@ -137,6 +137,37 @@ StreamingQuery query = output\n   .option(\"topic\", \"topic2\")\n   .start();\n \n+{% endhighlight %}\n+</div>\n+<div data-lang=\"python\" markdown=\"1\">\n+{% highlight python %}\n+from pyspark.sql.functions import from_avro, to_avro\n+\n+# `from_avro` requires Avro schema in JSON string format.\n+jsonFormatSchema = open(\"examples/src/main/resources/user.avsc\", \"r\").read()\n+\n+df = spark\n+  .readStream"
  }],
  "prId": 23797
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "not a big deal but maybe `'user.favorite_color == \"red\"'`",
    "commit": "f3f0348ef4cce81fee62c7a390c465dd66a54ed2",
    "createdAt": "2019-02-16T06:14:36Z",
    "diffHunk": "@@ -137,6 +137,37 @@ StreamingQuery query = output\n   .option(\"topic\", \"topic2\")\n   .start();\n \n+{% endhighlight %}\n+</div>\n+<div data-lang=\"python\" markdown=\"1\">\n+{% highlight python %}\n+from pyspark.sql.functions import from_avro, to_avro\n+\n+# `from_avro` requires Avro schema in JSON string format.\n+jsonFormatSchema = open(\"examples/src/main/resources/user.avsc\", \"r\").read()\n+\n+df = spark\n+  .readStream\n+  .format(\"kafka\")\n+  .option(\"kafka.bootstrap.servers\", \"host1:port1,host2:port2\")\n+  .option(\"subscribe\", \"topic1\")\n+  .load()\n+\n+# 1. Decode the Avro data into a struct;\n+# 2. Filter by column `favorite_color`;\n+# 3. Encode the column `name` in Avro format.\n+output = df\n+  .select(from_avro(\"value\", jsonFormatSchema).alias(\"user\"))\n+  .where(\"user.favorite_color == \\\"red\\\"\")"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Fixed.",
    "commit": "f3f0348ef4cce81fee62c7a390c465dd66a54ed2",
    "createdAt": "2019-02-18T21:51:25Z",
    "diffHunk": "@@ -137,6 +137,37 @@ StreamingQuery query = output\n   .option(\"topic\", \"topic2\")\n   .start();\n \n+{% endhighlight %}\n+</div>\n+<div data-lang=\"python\" markdown=\"1\">\n+{% highlight python %}\n+from pyspark.sql.functions import from_avro, to_avro\n+\n+# `from_avro` requires Avro schema in JSON string format.\n+jsonFormatSchema = open(\"examples/src/main/resources/user.avsc\", \"r\").read()\n+\n+df = spark\n+  .readStream\n+  .format(\"kafka\")\n+  .option(\"kafka.bootstrap.servers\", \"host1:port1,host2:port2\")\n+  .option(\"subscribe\", \"topic1\")\n+  .load()\n+\n+# 1. Decode the Avro data into a struct;\n+# 2. Filter by column `favorite_color`;\n+# 3. Encode the column `name` in Avro format.\n+output = df\n+  .select(from_avro(\"value\", jsonFormatSchema).alias(\"user\"))\n+  .where(\"user.favorite_color == \\\"red\\\"\")"
  }],
  "prId": 23797
}]