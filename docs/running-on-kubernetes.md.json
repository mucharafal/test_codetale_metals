[{
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "instead of a fixed number, should this be expressed as a factor on the total number of executors?",
    "commit": "9df84e87a36bd6b43b0f74c26ad3bf70a67bb467",
    "createdAt": "2018-05-05T04:55:31Z",
    "diffHunk": "@@ -561,6 +561,13 @@ specific to Spark on Kubernetes.\n     This is distinct from <code>spark.executor.cores</code>: it is only used and takes precedence over <code>spark.executor.cores</code> for specifying the executor pod cpu request if set. Task \n     parallelism, e.g., number of tasks an executor can run concurrently is not affected by this.\n </tr>\n+<tr>\n+  <td><code>spark.kubernetes.executor.maxInitFailures</code></td>\n+  <td>10</td>",
    "line": 6
  }],
  "prId": 21241
}, {
  "comments": [{
    "author": {
      "login": "foxish"
    },
    "body": "This is very specific and covering exactly one kind of error. I'd like this property to cover all initialization errors.",
    "commit": "9df84e87a36bd6b43b0f74c26ad3bf70a67bb467",
    "createdAt": "2018-05-08T07:43:18Z",
    "diffHunk": "@@ -561,6 +561,13 @@ specific to Spark on Kubernetes.\n     This is distinct from <code>spark.executor.cores</code>: it is only used and takes precedence over <code>spark.executor.cores</code> for specifying the executor pod cpu request if set. Task \n     parallelism, e.g., number of tasks an executor can run concurrently is not affected by this.\n </tr>\n+<tr>\n+  <td><code>spark.kubernetes.executor.maxInitFailures</code></td>\n+  <td>10</td>\n+  <td>\n+    Maximum number of times executors are allowed to fail with an Init:Error state before failing the application. Note that Init:Error failures should not be caused by Spark itself because Spark does not attach init-containers to pods. Init-containers can be attached by the cluster itself. Users should check with their cluster administrator if these kinds of failures to start the executor pod occur frequently.",
    "line": 8
  }, {
    "author": {
      "login": "foxish"
    },
    "body": "Also, I would change the description here, because using init containers for injecting init-containers through mutable webhooks is not something that's all that common. Also should be linked to https://kubernetes.io/docs/admin/extensible-admission-controllers/",
    "commit": "9df84e87a36bd6b43b0f74c26ad3bf70a67bb467",
    "createdAt": "2018-05-08T07:47:08Z",
    "diffHunk": "@@ -561,6 +561,13 @@ specific to Spark on Kubernetes.\n     This is distinct from <code>spark.executor.cores</code>: it is only used and takes precedence over <code>spark.executor.cores</code> for specifying the executor pod cpu request if set. Task \n     parallelism, e.g., number of tasks an executor can run concurrently is not affected by this.\n </tr>\n+<tr>\n+  <td><code>spark.kubernetes.executor.maxInitFailures</code></td>\n+  <td>10</td>\n+  <td>\n+    Maximum number of times executors are allowed to fail with an Init:Error state before failing the application. Note that Init:Error failures should not be caused by Spark itself because Spark does not attach init-containers to pods. Init-containers can be attached by the cluster itself. Users should check with their cluster administrator if these kinds of failures to start the executor pod occur frequently.",
    "line": 8
  }, {
    "author": {
      "login": "erikerlandson"
    },
    "body": "I'm in agreement w/ @foxish about designing for wider categories of error, which can be future-proofed",
    "commit": "9df84e87a36bd6b43b0f74c26ad3bf70a67bb467",
    "createdAt": "2018-05-08T19:49:22Z",
    "diffHunk": "@@ -561,6 +561,13 @@ specific to Spark on Kubernetes.\n     This is distinct from <code>spark.executor.cores</code>: it is only used and takes precedence over <code>spark.executor.cores</code> for specifying the executor pod cpu request if set. Task \n     parallelism, e.g., number of tasks an executor can run concurrently is not affected by this.\n </tr>\n+<tr>\n+  <td><code>spark.kubernetes.executor.maxInitFailures</code></td>\n+  <td>10</td>\n+  <td>\n+    Maximum number of times executors are allowed to fail with an Init:Error state before failing the application. Note that Init:Error failures should not be caused by Spark itself because Spark does not attach init-containers to pods. Init-containers can be attached by the cluster itself. Users should check with their cluster administrator if these kinds of failures to start the executor pod occur frequently.",
    "line": 8
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "As per https://github.com/apache/spark/pull/21241#discussion_r186789848 I think it's important to define what that full set of error types is. Do we have a comprehensive list we can follow?",
    "commit": "9df84e87a36bd6b43b0f74c26ad3bf70a67bb467",
    "createdAt": "2018-05-08T20:14:52Z",
    "diffHunk": "@@ -561,6 +561,13 @@ specific to Spark on Kubernetes.\n     This is distinct from <code>spark.executor.cores</code>: it is only used and takes precedence over <code>spark.executor.cores</code> for specifying the executor pod cpu request if set. Task \n     parallelism, e.g., number of tasks an executor can run concurrently is not affected by this.\n </tr>\n+<tr>\n+  <td><code>spark.kubernetes.executor.maxInitFailures</code></td>\n+  <td>10</td>\n+  <td>\n+    Maximum number of times executors are allowed to fail with an Init:Error state before failing the application. Note that Init:Error failures should not be caused by Spark itself because Spark does not attach init-containers to pods. Init-containers can be attached by the cluster itself. Users should check with their cluster administrator if these kinds of failures to start the executor pod occur frequently.",
    "line": 8
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "We can also just start with a minimal set and just keep adding them as we find more root causes.",
    "commit": "9df84e87a36bd6b43b0f74c26ad3bf70a67bb467",
    "createdAt": "2018-05-08T20:15:12Z",
    "diffHunk": "@@ -561,6 +561,13 @@ specific to Spark on Kubernetes.\n     This is distinct from <code>spark.executor.cores</code>: it is only used and takes precedence over <code>spark.executor.cores</code> for specifying the executor pod cpu request if set. Task \n     parallelism, e.g., number of tasks an executor can run concurrently is not affected by this.\n </tr>\n+<tr>\n+  <td><code>spark.kubernetes.executor.maxInitFailures</code></td>\n+  <td>10</td>\n+  <td>\n+    Maximum number of times executors are allowed to fail with an Init:Error state before failing the application. Note that Init:Error failures should not be caused by Spark itself because Spark does not attach init-containers to pods. Init-containers can be attached by the cluster itself. Users should check with their cluster administrator if these kinds of failures to start the executor pod occur frequently.",
    "line": 8
  }, {
    "author": {
      "login": "erikerlandson"
    },
    "body": "As long as it's relatively easy to extend, generalizing on a case by case basis should be OK",
    "commit": "9df84e87a36bd6b43b0f74c26ad3bf70a67bb467",
    "createdAt": "2018-05-08T20:23:11Z",
    "diffHunk": "@@ -561,6 +561,13 @@ specific to Spark on Kubernetes.\n     This is distinct from <code>spark.executor.cores</code>: it is only used and takes precedence over <code>spark.executor.cores</code> for specifying the executor pod cpu request if set. Task \n     parallelism, e.g., number of tasks an executor can run concurrently is not affected by this.\n </tr>\n+<tr>\n+  <td><code>spark.kubernetes.executor.maxInitFailures</code></td>\n+  <td>10</td>\n+  <td>\n+    Maximum number of times executors are allowed to fail with an Init:Error state before failing the application. Note that Init:Error failures should not be caused by Spark itself because Spark does not attach init-containers to pods. Init-containers can be attached by the cluster itself. Users should check with their cluster administrator if these kinds of failures to start the executor pod occur frequently.",
    "line": 8
  }],
  "prId": 21241
}]