[
  {
    "id" : "9f8eabb7-8678-4e6d-9631-2ab62beacf83",
    "prId" : 257,
    "comments" : [
      {
        "id" : "cedf9bf8-5034-44fc-92b1-072d3fdfa23e",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Only 2.12.x is supported at the moment -> link to https://github.com/scalameta/metals/issues/201?",
        "createdAt" : "2018-04-06T11:16:10Z",
        "updatedAt" : "2018-04-06T13:05:22Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d0bb8a1a174782ae44cebc0b3cd2a082efb54562",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,52 @@\n+# Integrating a new build tool\n+\n+Metals currently supports only sbt through the sbt-metals plugins and\n+`metalsSetup` task. However, metals does not require sbt and can be integrated\n+with other build tools.\n+\n+The long-term strategy for integrating with build tools is to support the\n+[Build Server Protocol](https://github.com/scalacenter/bsp/blob/master/docs/bsp.md).\n+Until the Build Server Protocol gains more traction and becomes more mature,\n+metals can import build metadata through a custom property file format. Property\n+files are generated by the build tool in the location\n+`<workspace-root>/.metals/buildinfo/**/*.properties`.\n+\n+Metals expects one property file to correspond to one build\n+target/module/artifact. For example in sbt, one property file corresponds to one\n+project+configuration combination. An sbt build with two projects, where one\n+project has main+test configurations and the other project has\n+main+test+integration-test configuration, metals expects a total of 5 property\n+files.\n+\n+## Build properties\n+\n+The keys of the build property file format are:\n+\n+* `sources`: String containing path separated ( `java.io.File.pathSeparator`)\n+  list of source files for this target.\n+* `unmanagedSourceDirectories`: String containing path separated list of\n+  directories where all nested source files belong to this target. Can be empty\n+  if `sources` is comprehensive, but note that the property file must be\n+  re-generated whenever a new file is created.\n+* `managedSourceDirectories`: Same as `unmanagedSourceDirectories`, except for\n+  automatically generated source files.\n+* `scalacOptions`: String containing space separated list of compiler options to\n+  be passed to the Scala presentation compiler. Must not include dependencies.\n+  It should be valid to pass this value verbatim to the `scalac` command-line\n+  interface.\n+* `classDirectory`: String path for a single directory where artifacts for this\n+  target are output. Compilation artifacts from compiling `sources` should\n+  appear in `classDirectory`.\n+* `dependencyClasspath`: String of path separated list of either jar files or\n+  directories for dependencies of this module.\n+* `scalaVersion`: String of the Scala compiler version used to compile this\n+  target. Only 2.12.x is supported."
  },
  {
    "id" : "541efd7b-9c1d-4b30-b693-ba9ef7b98218",
    "prId" : 257,
    "comments" : [
      {
        "id" : "b1a77ade-3681-404e-aa6a-976148cb8092",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "double support ",
        "createdAt" : "2018-04-06T12:34:38Z",
        "updatedAt" : "2018-04-06T13:05:22Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "05feedaf-1f22-483b-bfa3-1eb4ea4e55d8",
        "parentId" : "b1a77ade-3681-404e-aa6a-976148cb8092",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Good catch!",
        "createdAt" : "2018-04-06T13:05:08Z",
        "updatedAt" : "2018-04-06T13:05:34Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d0bb8a1a174782ae44cebc0b3cd2a082efb54562",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,55 @@\n+# Integrating a new build tool\n+\n+Metals currently supports only sbt through the sbt-metals plugins and\n+`metalsSetup` task. However, metals does not require sbt and can be integrated\n+with other build tools.\n+\n+The long-term strategy to integrate metals with build tools is to support some\n+standard LSP-inspired protocol. An example of how such a protocol might look\n+like is the draft for a potential\n+[\"Build Server Protocol\"](https://github.com/scalacenter/bsp/blob/master/docs/bsp.md).\n+Until such a protocol becomes more standard, metals can import build metadata\n+through a custom property file format. Property files are generated by the build\n+tool in the location `<workspace-root>/.metals/buildinfo/**/*.properties`.\n+\n+Metals expects one property file to correspond to one build\n+target/module/artifact. For example in sbt, one property file corresponds to one\n+project+configuration combination. An sbt build with two projects, where one\n+project has main+test configurations and the other project has\n+main+test+integration-test configuration, metals expects a total of 5 property\n+files.\n+\n+## Build properties\n+\n+The keys of the build property file format are:\n+\n+* `sources`: String containing path separated ( `java.io.File.pathSeparator`)\n+  list of source files for this target.\n+* `unmanagedSourceDirectories`: String containing path separated list of\n+  directories where all nested source files belong to this target. Can be empty\n+  if `sources` is comprehensive, but note that the property file must be\n+  re-generated whenever a new file is created.\n+* `managedSourceDirectories`: Same as `unmanagedSourceDirectories`, except for\n+  automatically generated source files.\n+* `scalacOptions`: String containing space separated list of compiler options to\n+  be passed to the Scala presentation compiler. Must not include dependencies.\n+  It should be valid to pass this value verbatim to the `scalac` command-line\n+  interface.\n+* `classDirectory`: String path for a single directory where artifacts for this\n+  target are output. Compilation artifacts from compiling `sources` should\n+  appear in `classDirectory`.\n+* `dependencyClasspath`: String of path separated list of either jar files or\n+  directories for dependencies of this module.\n+* `scalaVersion`: String of the Scala compiler version used to compile this\n+  target. Only 2.12 is supported, consider contributing to\n+  [#201](https://github.com/scalameta/metals/issues/201) if you would like to\n+  add support 2.11 support."
  }
]