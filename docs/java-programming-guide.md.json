[{
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "Nit, but maybe say: \"This lambda syntax can be applied to all anonymous classes in Java 8\".\n",
    "commit": "95850e6e58b83b59e1f679c7b1cd8aaa7df854dc",
    "createdAt": "2014-03-01T19:40:07Z",
    "diffHunk": "@@ -127,11 +132,20 @@ class Split extends FlatMapFunction<String, String> {\n JavaRDD<String> words = lines.flatMap(new Split());\n {% endhighlight %}\n \n+Java 8+ users can also possibly write the above `FlatMapFunction` in a more concise way using \n+lambda expression as follows:\n+\n+{% highlight java %}\n+JavaRDD<String> words = lines.flatMap(s -> Arrays.asList(s.split(\" \")));\n+{% endhighlight %}\n+\n+Same possibility applies to all passed in anonymous classes in java 8."
  }],
  "prId": 17
}, {
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "\"To support Java 8 lambda expressions, methods...\"  (it won't be \"upcoming\" any more pretty soon!)\n",
    "commit": "95850e6e58b83b59e1f679c7b1cd8aaa7df854dc",
    "createdAt": "2014-03-01T20:14:46Z",
    "diffHunk": "@@ -30,6 +30,12 @@ There are a few key differences between the Java and Scala APIs:\n   classes for key-value pairs and doubles. For example, \n   [`JavaPairRDD`](api/core/index.html#org.apache.spark.api.java.JavaPairRDD)\n   stores key-value pairs.\n+* To support upcoming java 8 lambda expression, methods are defined on the basis of "
  }],
  "prId": 17
}]