[
  {
    "id" : "630c6e4f-1a49-4615-8e72-514884e13236",
    "prId" : 883,
    "comments" : [
      {
        "id" : "f2dda41a-9c4c-4736-80cf-80887d5bbc9d",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "```suggestion\r\n`java` executable. Metals works with Java 8 or 11 so this executable cannot point\r\n```",
        "createdAt" : "2019-08-28T13:59:09Z",
        "updatedAt" : "2019-08-28T15:25:00Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "45de3ebf0f2472b789f9ab25a598a3e7eeb00256",
    "line" : null,
    "diffHunk" : "@@ -44,8 +44,8 @@ variables.\n \n The VS Code plugin uses by default the `JAVA_HOME` environment variable (via\n [`find-java-home`](https://www.npmjs.com/package/find-java-home)) to locate the\n-`java` executable. Metals only works with Java 8 so this executable cannot point\n-to another version such as Java 11.\n+`java` executable. Metals only works with Java 8 or 11 so this executable cannot point"
  },
  {
    "id" : "6321aa43-8927-4687-9f70-4d62403026ca",
    "prId" : 1934,
    "comments" : [
      {
        "id" : "21af243e-b01b-48ed-a9c8-e2ba8404ef86",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Added better gifs, because the previous ones were bother me quite a bit :sweat_smile: ",
        "createdAt" : "2020-07-20T13:04:12Z",
        "updatedAt" : "2020-07-21T07:58:00Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1f9f20c530b2152a24fddd4618793dbec859f696",
    "line" : 55,
    "diffHunk" : "@@ -120,29 +124,36 @@ without opening the sidebar.\n As you type, the symbol outline is also visible at the top of the file.\n ![Document Symbols Outline](https://i.imgur.com/L217n4q.png)\n \n-## Enable on type formatting for multiline string formatting\n+```scala mdoc:parent-lenses:vscode\n \n-![pipes](https://i.imgur.com/iXGYOf0.gif)\n+```\n \n-To properly support adding `|` in multiline strings we are using the\n-`onTypeFormatting` method. To enable the functionality you need to enable\n-`onTypeFormatting` inside Visual Studio Code.\n+```scala mdoc:new-project:vscode\n+\n+```\n \n-This needs to be done in settings by checking `Editor: Format On Type`:\n+## On type formatting for multiline string formatting\n+\n+![on-type](https://imgur.com/a0O2vCs.gif)\n+\n+To properly support adding `|` in multiline strings we are using the\n+`onTypeFormatting` method. The functionality is enabled by default, but you can\n+disable/enable `onTypeFormatting` inside Visual Studio Code settings by checking\n+`Editor: Format On Type`:\n \n-![on-type](https://i.imgur.com/4eVvSP5.gif)\n+![on-type-setting](https://i.imgur.com/s6nT9rC.png)\n \n-## Enable formatting on paste for multiline strings\n+## Formatting on paste for multiline strings\n \n Whenever text is paste into a multiline string with `|` it will be properly\n formatted by Metals:\n \n-![format-on-paste](https://i.imgur.com/yJLAIxQ.gif)\n+![format-on-paste](https://i.imgur.com/fF0XWYC.gif)"
  },
  {
    "id" : "61112fd5-fdd5-4e5b-a2b9-2e4baa0d5a39",
    "prId" : 2005,
    "comments" : [
      {
        "id" : "cf19b76c-8354-42a4-9fb7-7d35964443f9",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nMetals supports running and debugging tests and main methods via the \r\n[Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/).\r\nThis is used to communicate between the editor and debugger. When using Metals \r\nthe debugger is [Bloop](https://scalacenter.github.io/bloop/), which is responsible for starting the actual process. This means that applications can be run the same as for any\r\nother language in the natively supported `Run` view.\r\n```",
        "createdAt" : "2020-08-17T19:22:21Z",
        "updatedAt" : "2020-08-18T15:31:49Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "655caf5f-bd0c-4273-9e06-1575a40623c2",
        "parentId" : "cf19b76c-8354-42a4-9fb7-7d35964443f9",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Applied some of the suggestions, but I switched it up a bit still.",
        "createdAt" : "2020-08-18T09:48:09Z",
        "updatedAt" : "2020-08-18T15:31:49Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a3ac6339a1e66b6ad62b64c6e84e3c0aa7ade47d",
    "line" : null,
    "diffHunk" : "@@ -132,6 +132,65 @@ As you type, the symbol outline is also visible at the top of the file.\n \n ```\n \n+## Running and debugging your code\n+\n+Metals supports running or debugging tests and main methods via\n+[Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/),\n+used to communicate with the editor, and\n+[Bloop](https://scalacenter.github.io/bloop/), which is responsible for starting\n+the actual process. This means that applications can be run the same as for any\n+other language in the natively supported `Run` view."
  },
  {
    "id" : "7a26bb3e-eaca-4e15-92dd-2aed2c4a01a7",
    "prId" : 2005,
    "comments" : [
      {
        "id" : "de93ac37-d095-4b56-b047-a16f79c6baf9",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\n### via code lenses\r\n```\r\nI normally don't like breaking up bullet points with large chunks of text. I think it might be better to just make these headers. What do you think?",
        "createdAt" : "2020-08-17T19:23:40Z",
        "updatedAt" : "2020-08-18T15:31:49Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a3ac6339a1e66b6ad62b64c6e84e3c0aa7ade47d",
    "line" : null,
    "diffHunk" : "@@ -132,6 +132,65 @@ As you type, the symbol outline is also visible at the top of the file.\n \n ```\n \n+## Running and debugging your code\n+\n+Metals supports running or debugging tests and main methods via\n+[Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/),\n+used to communicate with the editor, and\n+[Bloop](https://scalacenter.github.io/bloop/), which is responsible for starting\n+the actual process. This means that applications can be run the same as for any\n+other language in the natively supported `Run` view.\n+\n+Users can begin the debugging session in two ways:\n+\n+- via code lenses"
  },
  {
    "id" : "767fe559-9a6b-4b9d-8843-88c294d148ba",
    "prId" : 2005,
    "comments" : [
      {
        "id" : "48cce8a1-13ec-483d-ae9a-45e7b93e43a3",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nshow up above the definition as a kind of virtual text. Clicking `run` will\r\n```",
        "createdAt" : "2020-08-17T19:24:08Z",
        "updatedAt" : "2020-08-18T15:31:49Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a3ac6339a1e66b6ad62b64c6e84e3c0aa7ade47d",
    "line" : null,
    "diffHunk" : "@@ -132,6 +132,65 @@ As you type, the symbol outline is also visible at the top of the file.\n \n ```\n \n+## Running and debugging your code\n+\n+Metals supports running or debugging tests and main methods via\n+[Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/),\n+used to communicate with the editor, and\n+[Bloop](https://scalacenter.github.io/bloop/), which is responsible for starting\n+the actual process. This means that applications can be run the same as for any\n+other language in the natively supported `Run` view.\n+\n+Users can begin the debugging session in two ways:\n+\n+- via code lenses\n+\n+For each main or test class Metals shows two code lenses `run | debug`, which\n+shows up above the definition as a kind of virtual text. Clicking `run` will"
  },
  {
    "id" : "2e5164f9-0596-4acd-b410-813feafaa4f1",
    "prId" : 2005,
    "comments" : [
      {
        "id" : "07c96a21-5cfe-45f6-af9b-17c0402a6e7e",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nclicking `debug` will pause once any of them are hit. It's not possible to add\r\n```",
        "createdAt" : "2020-08-17T19:24:34Z",
        "updatedAt" : "2020-08-18T15:31:49Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a3ac6339a1e66b6ad62b64c6e84e3c0aa7ade47d",
    "line" : null,
    "diffHunk" : "@@ -132,6 +132,65 @@ As you type, the symbol outline is also visible at the top of the file.\n \n ```\n \n+## Running and debugging your code\n+\n+Metals supports running or debugging tests and main methods via\n+[Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/),\n+used to communicate with the editor, and\n+[Bloop](https://scalacenter.github.io/bloop/), which is responsible for starting\n+the actual process. This means that applications can be run the same as for any\n+other language in the natively supported `Run` view.\n+\n+Users can begin the debugging session in two ways:\n+\n+- via code lenses\n+\n+For each main or test class Metals shows two code lenses `run | debug`, which\n+shows up above the definition as a kind of virtual text. Clicking `run` will\n+start running the test or main class without stopping at any breakpoints, while\n+clicking `debug` will pause once any of them is hit. It's not possible to add"
  },
  {
    "id" : "d46df046-709f-49c7-aceb-1a05378d40b6",
    "prId" : 2005,
    "comments" : [
      {
        "id" : "371a4683-1216-4536-bc06-23b6d2b62d39",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\n### via a `launch.json` configuration\r\n```",
        "createdAt" : "2020-08-17T19:24:54Z",
        "updatedAt" : "2020-08-18T15:31:49Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a3ac6339a1e66b6ad62b64c6e84e3c0aa7ade47d",
    "line" : null,
    "diffHunk" : "@@ -132,6 +132,65 @@ As you type, the symbol outline is also visible at the top of the file.\n \n ```\n \n+## Running and debugging your code\n+\n+Metals supports running or debugging tests and main methods via\n+[Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/),\n+used to communicate with the editor, and\n+[Bloop](https://scalacenter.github.io/bloop/), which is responsible for starting\n+the actual process. This means that applications can be run the same as for any\n+other language in the natively supported `Run` view.\n+\n+Users can begin the debugging session in two ways:\n+\n+- via code lenses\n+\n+For each main or test class Metals shows two code lenses `run | debug`, which\n+shows up above the definition as a kind of virtual text. Clicking `run` will\n+start running the test or main class without stopping at any breakpoints, while\n+clicking `debug` will pause once any of them is hit. It's not possible to add\n+any arguments or java properties when running using this method.\n+\n+- via `launch.json` configuration"
  },
  {
    "id" : "2a671241-aee0-4785-9bb2-3de7854f3d8a",
    "prId" : 2005,
    "comments" : [
      {
        "id" : "dc20713f-77a8-4512-9973-3eeceeddbb28",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\n- The `Run -> Start Debugging` or `workbench.action.debug.start` shortcuts.\r\n```",
        "createdAt" : "2020-08-17T19:25:26Z",
        "updatedAt" : "2020-08-18T15:31:49Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a3ac6339a1e66b6ad62b64c6e84e3c0aa7ade47d",
    "line" : null,
    "diffHunk" : "@@ -132,6 +132,65 @@ As you type, the symbol outline is also visible at the top of the file.\n \n ```\n \n+## Running and debugging your code\n+\n+Metals supports running or debugging tests and main methods via\n+[Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/),\n+used to communicate with the editor, and\n+[Bloop](https://scalacenter.github.io/bloop/), which is responsible for starting\n+the actual process. This means that applications can be run the same as for any\n+other language in the natively supported `Run` view.\n+\n+Users can begin the debugging session in two ways:\n+\n+- via code lenses\n+\n+For each main or test class Metals shows two code lenses `run | debug`, which\n+shows up above the definition as a kind of virtual text. Clicking `run` will\n+start running the test or main class without stopping at any breakpoints, while\n+clicking `debug` will pause once any of them is hit. It's not possible to add\n+any arguments or java properties when running using this method.\n+\n+- via `launch.json` configuration\n+\n+Visual Studio Code uses `.vscode/launch.json` to store user defined\n+configurations, which can be run using:\n+\n+- `Run -> Start Debugging` or `workbench.action.debug.start` shortcut."
  },
  {
    "id" : "3091b1cf-72fd-4645-99d7-108d4479db5b",
    "prId" : 2005,
    "comments" : [
      {
        "id" : "28252dc1-6672-44ac-9a41-9002c6e9950f",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\n- The `Run -> Run Without Debugging` or `workbench.action.debug.run` shortcuts.\r\n```",
        "createdAt" : "2020-08-17T19:25:39Z",
        "updatedAt" : "2020-08-18T15:31:49Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a3ac6339a1e66b6ad62b64c6e84e3c0aa7ade47d",
    "line" : null,
    "diffHunk" : "@@ -132,6 +132,65 @@ As you type, the symbol outline is also visible at the top of the file.\n \n ```\n \n+## Running and debugging your code\n+\n+Metals supports running or debugging tests and main methods via\n+[Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/),\n+used to communicate with the editor, and\n+[Bloop](https://scalacenter.github.io/bloop/), which is responsible for starting\n+the actual process. This means that applications can be run the same as for any\n+other language in the natively supported `Run` view.\n+\n+Users can begin the debugging session in two ways:\n+\n+- via code lenses\n+\n+For each main or test class Metals shows two code lenses `run | debug`, which\n+shows up above the definition as a kind of virtual text. Clicking `run` will\n+start running the test or main class without stopping at any breakpoints, while\n+clicking `debug` will pause once any of them is hit. It's not possible to add\n+any arguments or java properties when running using this method.\n+\n+- via `launch.json` configuration\n+\n+Visual Studio Code uses `.vscode/launch.json` to store user defined\n+configurations, which can be run using:\n+\n+- `Run -> Start Debugging` or `workbench.action.debug.start` shortcut.\n+- `Run -> Run Without Debugging` or `workbench.action.debug.run` shortcut."
  },
  {
    "id" : "39f49c5e-845e-4d45-9baf-d80eeda5deb8",
    "prId" : 2005,
    "comments" : [
      {
        "id" : "e6fbc64f-ee2c-4297-9903-bc1e4e0459b5",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nMultiple configurations can be stored in that file and can be chosen either\r\n```",
        "createdAt" : "2020-08-17T19:26:16Z",
        "updatedAt" : "2020-08-18T15:31:49Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "90ef17b3-5528-466e-be66-5da2ceed9462",
        "parentId" : "e6fbc64f-ee2c-4297-9903-bc1e4e0459b5",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed!",
        "createdAt" : "2020-08-18T09:47:11Z",
        "updatedAt" : "2020-08-18T15:31:49Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a3ac6339a1e66b6ad62b64c6e84e3c0aa7ade47d",
    "line" : null,
    "diffHunk" : "@@ -132,6 +132,65 @@ As you type, the symbol outline is also visible at the top of the file.\n \n ```\n \n+## Running and debugging your code\n+\n+Metals supports running or debugging tests and main methods via\n+[Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/),\n+used to communicate with the editor, and\n+[Bloop](https://scalacenter.github.io/bloop/), which is responsible for starting\n+the actual process. This means that applications can be run the same as for any\n+other language in the natively supported `Run` view.\n+\n+Users can begin the debugging session in two ways:\n+\n+- via code lenses\n+\n+For each main or test class Metals shows two code lenses `run | debug`, which\n+shows up above the definition as a kind of virtual text. Clicking `run` will\n+start running the test or main class without stopping at any breakpoints, while\n+clicking `debug` will pause once any of them is hit. It's not possible to add\n+any arguments or java properties when running using this method.\n+\n+- via `launch.json` configuration\n+\n+Visual Studio Code uses `.vscode/launch.json` to store user defined\n+configurations, which can be run using:\n+\n+- `Run -> Start Debugging` or `workbench.action.debug.start` shortcut.\n+- `Run -> Run Without Debugging` or `workbench.action.debug.run` shortcut.\n+\n+If a user doesn't have anything yet saved, a configuration wizard will pop up to\n+guide them. In the end users should end up with something like this:\n+\n+```json\n+{\n+  \"version\": \"0.2.0\",\n+  \"configurations\": [\n+    {\n+      \"type\": \"scala\",\n+      \"request\": \"launch\",\n+      // configuration name visible for the user\n+      \"name\": \"Main class\",\n+      // full name of the class to run, not compatible with testClass\n+      \"mainClass\": \"com.example.Main\",\n+      // full name of the test class to run, not compatible with mainClass\n+      \"testClass\": \"\",\n+      // optional arguments for the main class, not avaiable with testClass\n+      \"args\": [],\n+      // optional jvm properties to use\n+      \"jvmOptions\": [],\n+      // optional build target name in case there more than one\n+      // class with the same name\n+      \"buildTarget\": \"root\"\n+    }\n+  ]\n+}\n+```\n+\n+Multiple configuration can be stored in that file and can be chosen either"
  },
  {
    "id" : "f2cf6064-773d-47a8-b0b5-13ce31ed94bc",
    "prId" : 2005,
    "comments" : [
      {
        "id" : "91b06760-bdf9-4e66-a619-2ec3947ca032",
        "parentId" : null,
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "will this syntax be coloured correctly? there are no '//' comments in json.",
        "createdAt" : "2020-08-17T20:27:14Z",
        "updatedAt" : "2020-08-18T15:31:49Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6a616d66-b6fa-49a8-bb64-88c6ec716932",
        "parentId" : "91b06760-bdf9-4e66-a619-2ec3947ca032",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "It looks ok, VS Code does allow for comments.",
        "createdAt" : "2020-08-18T09:34:25Z",
        "updatedAt" : "2020-08-18T15:31:49Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b6e1a3b0-bcea-455e-9f7e-b38a98a1c0c4",
        "parentId" : "91b06760-bdf9-4e66-a619-2ec3947ca032",
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "I think it will also be displayed here: https://scalameta.org/metals/docs/editors/vscode.html\r\n\r\nWe can see how it looks like after merge and quickly update if something will not be right.",
        "createdAt" : "2020-08-18T12:35:06Z",
        "updatedAt" : "2020-08-18T15:31:49Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "763a91f6-e87c-43f4-9ca5-2835bb225163",
        "parentId" : "91b06760-bdf9-4e66-a619-2ec3947ca032",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "For rendering it correctly, I think you can use the good old trick of changing the code block language to `js` (same syntax, and it allows comments)",
        "createdAt" : "2020-08-18T12:38:57Z",
        "updatedAt" : "2020-08-18T15:31:49Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a3ac6339a1e66b6ad62b64c6e84e3c0aa7ade47d",
    "line" : 48,
    "diffHunk" : "@@ -132,6 +132,65 @@ As you type, the symbol outline is also visible at the top of the file.\n \n ```\n \n+## Running and debugging your code\n+\n+Metals supports running or debugging tests and main methods via\n+[Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/),\n+used to communicate with the editor, and\n+[Bloop](https://scalacenter.github.io/bloop/), which is responsible for starting\n+the actual process. This means that applications can be run the same as for any\n+other language in the natively supported `Run` view.\n+\n+Users can begin the debugging session in two ways:\n+\n+- via code lenses\n+\n+For each main or test class Metals shows two code lenses `run | debug`, which\n+shows up above the definition as a kind of virtual text. Clicking `run` will\n+start running the test or main class without stopping at any breakpoints, while\n+clicking `debug` will pause once any of them is hit. It's not possible to add\n+any arguments or java properties when running using this method.\n+\n+- via `launch.json` configuration\n+\n+Visual Studio Code uses `.vscode/launch.json` to store user defined\n+configurations, which can be run using:\n+\n+- `Run -> Start Debugging` or `workbench.action.debug.start` shortcut.\n+- `Run -> Run Without Debugging` or `workbench.action.debug.run` shortcut.\n+\n+If a user doesn't have anything yet saved, a configuration wizard will pop up to\n+guide them. In the end users should end up with something like this:\n+\n+```json\n+{\n+  \"version\": \"0.2.0\",\n+  \"configurations\": [\n+    {\n+      \"type\": \"scala\",\n+      \"request\": \"launch\",\n+      // configuration name visible for the user"
  },
  {
    "id" : "a9c30263-637f-4a0f-850d-a6e666dbec04",
    "prId" : 2005,
    "comments" : [
      {
        "id" : "7e577b44-c952-41cb-a624-63c2d1f508f2",
        "parentId" : null,
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "for test class there is `test | debug test` lens",
        "createdAt" : "2020-08-18T07:07:48Z",
        "updatedAt" : "2020-08-18T15:31:49Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a0973c9f-9106-4032-8946-4b92b5e11c3b",
        "parentId" : "7e577b44-c952-41cb-a624-63c2d1f508f2",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Forgot about it, it's added.",
        "createdAt" : "2020-08-18T09:45:54Z",
        "updatedAt" : "2020-08-18T15:31:49Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a3ac6339a1e66b6ad62b64c6e84e3c0aa7ade47d",
    "line" : null,
    "diffHunk" : "@@ -132,6 +132,65 @@ As you type, the symbol outline is also visible at the top of the file.\n \n ```\n \n+## Running and debugging your code\n+\n+Metals supports running or debugging tests and main methods via\n+[Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/),\n+used to communicate with the editor, and\n+[Bloop](https://scalacenter.github.io/bloop/), which is responsible for starting\n+the actual process. This means that applications can be run the same as for any\n+other language in the natively supported `Run` view.\n+\n+Users can begin the debugging session in two ways:\n+\n+- via code lenses\n+\n+For each main or test class Metals shows two code lenses `run | debug`, which"
  },
  {
    "id" : "3125ffc4-2e6e-4688-a3dd-46911ab93bd8",
    "prId" : 2005,
    "comments" : [
      {
        "id" : "d8293401-06c8-476e-8f7d-59f7e3dc4ea7",
        "parentId" : null,
        "author" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "body" : "can we attach second position like 'Test class' showing that in test config we specify 'testClass' and not 'mainClass' and how 2 configurations would look like here",
        "createdAt" : "2020-08-18T07:10:21Z",
        "updatedAt" : "2020-08-18T15:31:49Z",
        "lastEditedBy" : {
          "login" : "kpbochenek",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/10478402?u=7a7840d3f5ce4047a19639e6b7977d43e3557158&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c5d98c36-e25e-4187-98ea-d6060e6fc193",
        "parentId" : "d8293401-06c8-476e-8f7d-59f7e3dc4ea7",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Added! Good idea!",
        "createdAt" : "2020-08-18T09:45:39Z",
        "updatedAt" : "2020-08-18T15:31:49Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a3ac6339a1e66b6ad62b64c6e84e3c0aa7ade47d",
    "line" : 73,
    "diffHunk" : "@@ -132,6 +132,65 @@ As you type, the symbol outline is also visible at the top of the file.\n \n ```\n \n+## Running and debugging your code\n+\n+Metals supports running or debugging tests and main methods via\n+[Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/),\n+used to communicate with the editor, and\n+[Bloop](https://scalacenter.github.io/bloop/), which is responsible for starting\n+the actual process. This means that applications can be run the same as for any\n+other language in the natively supported `Run` view.\n+\n+Users can begin the debugging session in two ways:\n+\n+- via code lenses\n+\n+For each main or test class Metals shows two code lenses `run | debug`, which\n+shows up above the definition as a kind of virtual text. Clicking `run` will\n+start running the test or main class without stopping at any breakpoints, while\n+clicking `debug` will pause once any of them is hit. It's not possible to add\n+any arguments or java properties when running using this method.\n+\n+- via `launch.json` configuration\n+\n+Visual Studio Code uses `.vscode/launch.json` to store user defined\n+configurations, which can be run using:\n+\n+- `Run -> Start Debugging` or `workbench.action.debug.start` shortcut.\n+- `Run -> Run Without Debugging` or `workbench.action.debug.run` shortcut.\n+\n+If a user doesn't have anything yet saved, a configuration wizard will pop up to\n+guide them. In the end users should end up with something like this:\n+\n+```json\n+{\n+  \"version\": \"0.2.0\",\n+  \"configurations\": [\n+    {\n+      \"type\": \"scala\",\n+      \"request\": \"launch\",\n+      // configuration name visible for the user\n+      \"name\": \"Main class\",\n+      // full name of the class to run, not compatible with testClass\n+      \"mainClass\": \"com.example.Main\",\n+      // full name of the test class to run, not compatible with mainClass\n+      \"testClass\": \"\",\n+      // optional arguments for the main class, not avaiable with testClass\n+      \"args\": [],\n+      // optional jvm properties to use\n+      \"jvmOptions\": [],\n+      // optional build target name in case there more than one\n+      // class with the same name\n+      \"buildTarget\": \"root\"\n+    }"
  },
  {
    "id" : "7fcbe47d-3cd7-4af0-b3a6-d77f00f8fb58",
    "prId" : 2008,
    "comments" : [
      {
        "id" : "5882b0ee-4ba5-4d4b-a6d7-8005ef3608f5",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "This was actually not true, there is nothing we can customize about test yet.",
        "createdAt" : "2020-08-19T11:30:58Z",
        "updatedAt" : "2020-08-19T17:04:38Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7fd5b61ccb3d7e97c5e9199d0be9c74b36148eca",
    "line" : 4,
    "diffHunk" : "@@ -196,8 +196,6 @@ guide them. In the end users should end up with something like this:\n       \"name\": \"Test class\",\n       // full name of the class to run\n       \"testClass\": \"com.example.Test\",\n-      // optional jvm properties to use"
  }
]