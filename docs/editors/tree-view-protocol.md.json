[
  {
    "id" : "174d8bff-2665-49e3-9272-712dfbd27679",
    "prId" : 797,
    "comments" : [
      {
        "id" : "f1eb33fb-b539-41ec-9469-7e6161f93aa5",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "I am not sure if this line adds anything except noise. this section is already called \"base data structures\", so one can expect there to be some ;)",
        "createdAt" : "2019-06-27T06:19:53Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b56dc8fe-98d8-4f10-85a0-d5e35b62cb36",
        "parentId" : "f1eb33fb-b539-41ec-9469-7e6161f93aa5",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Agreed",
        "createdAt" : "2019-06-27T08:48:41Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,209 @@\n+---\n+id: tree-view-protocol\n+title: Tree View Protocol\n+---\n+\n+Metals implements a Language Server Protocol extension called the \"Tree View\n+Protocol\" to render tree views in the editor client.\n+\n+## Base data structures\n+\n+The Tree View Protocol defines several basic data structures."
  },
  {
    "id" : "80659a84-7a0d-49cf-a42f-18b03a6ac474",
    "prId" : 797,
    "comments" : [
      {
        "id" : "21f4ae51-e20d-493c-823e-8cd94b4002bf",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "\"Single\" sounds to me like a better counterpart of \"Multiple\" than \"One\" ;)\r\n\r\n```suggestion\r\nSingle \"tree view\" represents a single tree. Multiple tree views can be displayed\r\n```",
        "createdAt" : "2019-06-27T06:27:09Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3655029d-1ed3-4811-8f41-d3e625d575bb",
        "parentId" : "21f4ae51-e20d-493c-823e-8cd94b4002bf",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I clarified a bit differently",
        "createdAt" : "2019-06-27T08:49:51Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,209 @@\n+---\n+id: tree-view-protocol\n+title: Tree View Protocol\n+---\n+\n+Metals implements a Language Server Protocol extension called the \"Tree View\n+Protocol\" to render tree views in the editor client.\n+\n+## Base data structures\n+\n+The Tree View Protocol defines several basic data structures.\n+\n+### Tree View\n+\n+One \"tree view\" represents a single tree. Multiple tree views can be displayed"
  },
  {
    "id" : "e9431fba-186a-4532-a796-07c61262256f",
    "prId" : 797,
    "comments" : [
      {
        "id" : "e004e50e-2a0f-4b52-a49a-90a9ee1df9b9",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "```suggestion\r\n  /** The URI of this node, or undefined if node is a root of the tree. */\r\n```",
        "createdAt" : "2019-06-27T06:29:47Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1a4a2dbe-5552-44cf-a8c0-08f5c3925ced",
        "parentId" : "e004e50e-2a0f-4b52-a49a-90a9ee1df9b9",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-06-27T08:50:23Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,209 @@\n+---\n+id: tree-view-protocol\n+title: Tree View Protocol\n+---\n+\n+Metals implements a Language Server Protocol extension called the \"Tree View\n+Protocol\" to render tree views in the editor client.\n+\n+## Base data structures\n+\n+The Tree View Protocol defines several basic data structures.\n+\n+### Tree View\n+\n+One \"tree view\" represents a single tree. Multiple tree views can be displayed\n+at the same time in an editor client.\n+\n+![Example tree views](https://i.imgur.com/FRWL3Aq.png)\n+\n+A tree view is uniquely identified by a `viewId: string` field in other data\n+structures.\n+\n+### Tree View Node\n+\n+A tree view can contain multiple tree view nodes. A tree view node can have the\n+following metadata.\n+\n+```ts\n+export interface TreeViewNode {\n+  /** The ID of the view that this node is associated with. */\n+  viewId: string;\n+  /** The URI of this node, or undefined if root node of the view. */"
  },
  {
    "id" : "d71d923b-58d6-4ab6-8f99-960bea1cf18f",
    "prId" : 797,
    "comments" : [
      {
        "id" : "6909a34f-1ebe-4958-a409-0ad1758d7161",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Let's keep it consistent. Not only we are in the context of TreeViewNode but also other comments here use the unqualified name \"node\"\r\n\r\n```suggestion\r\n  /** An optional command to trigger when the user clicks on this node. */\r\n```",
        "createdAt" : "2019-06-27T06:32:32Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,209 @@\n+---\n+id: tree-view-protocol\n+title: Tree View Protocol\n+---\n+\n+Metals implements a Language Server Protocol extension called the \"Tree View\n+Protocol\" to render tree views in the editor client.\n+\n+## Base data structures\n+\n+The Tree View Protocol defines several basic data structures.\n+\n+### Tree View\n+\n+One \"tree view\" represents a single tree. Multiple tree views can be displayed\n+at the same time in an editor client.\n+\n+![Example tree views](https://i.imgur.com/FRWL3Aq.png)\n+\n+A tree view is uniquely identified by a `viewId: string` field in other data\n+structures.\n+\n+### Tree View Node\n+\n+A tree view can contain multiple tree view nodes. A tree view node can have the\n+following metadata.\n+\n+```ts\n+export interface TreeViewNode {\n+  /** The ID of the view that this node is associated with. */\n+  viewId: string;\n+  /** The URI of this node, or undefined if root node of the view. */\n+  nodeUri?: string;\n+  /** The title to display for this node. */\n+  label: string;\n+  /** An optional command to trigger when the user clicks on this tree view node. */"
  },
  {
    "id" : "1439ac18-a0e2-419f-8a25-216851205efa",
    "prId" : 797,
    "comments" : [
      {
        "id" : "57159cee-8708-41fe-b995-ae9524dcf95b",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "```suggestion\r\n  /** An optional SVG icon to display next to the label of this node. */\r\n```",
        "createdAt" : "2019-06-27T06:32:46Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,209 @@\n+---\n+id: tree-view-protocol\n+title: Tree View Protocol\n+---\n+\n+Metals implements a Language Server Protocol extension called the \"Tree View\n+Protocol\" to render tree views in the editor client.\n+\n+## Base data structures\n+\n+The Tree View Protocol defines several basic data structures.\n+\n+### Tree View\n+\n+One \"tree view\" represents a single tree. Multiple tree views can be displayed\n+at the same time in an editor client.\n+\n+![Example tree views](https://i.imgur.com/FRWL3Aq.png)\n+\n+A tree view is uniquely identified by a `viewId: string` field in other data\n+structures.\n+\n+### Tree View Node\n+\n+A tree view can contain multiple tree view nodes. A tree view node can have the\n+following metadata.\n+\n+```ts\n+export interface TreeViewNode {\n+  /** The ID of the view that this node is associated with. */\n+  viewId: string;\n+  /** The URI of this node, or undefined if root node of the view. */\n+  nodeUri?: string;\n+  /** The title to display for this node. */\n+  label: string;\n+  /** An optional command to trigger when the user clicks on this tree view node. */\n+  command?: Command;\n+  /** An optional SVG icon to display next to the label of this tree node. */"
  },
  {
    "id" : "4b079d55-c205-430a-a32c-058235f67fbd",
    "prId" : 797,
    "comments" : [
      {
        "id" : "86c0bac0-9bbd-43cf-b707-7f7eea6b6ea1",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "```suggestion\r\n  /** An optional description of this node that is displayed when the user hovers over this node. */\r\n```",
        "createdAt" : "2019-06-27T06:33:01Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,209 @@\n+---\n+id: tree-view-protocol\n+title: Tree View Protocol\n+---\n+\n+Metals implements a Language Server Protocol extension called the \"Tree View\n+Protocol\" to render tree views in the editor client.\n+\n+## Base data structures\n+\n+The Tree View Protocol defines several basic data structures.\n+\n+### Tree View\n+\n+One \"tree view\" represents a single tree. Multiple tree views can be displayed\n+at the same time in an editor client.\n+\n+![Example tree views](https://i.imgur.com/FRWL3Aq.png)\n+\n+A tree view is uniquely identified by a `viewId: string` field in other data\n+structures.\n+\n+### Tree View Node\n+\n+A tree view can contain multiple tree view nodes. A tree view node can have the\n+following metadata.\n+\n+```ts\n+export interface TreeViewNode {\n+  /** The ID of the view that this node is associated with. */\n+  viewId: string;\n+  /** The URI of this node, or undefined if root node of the view. */\n+  nodeUri?: string;\n+  /** The title to display for this node. */\n+  label: string;\n+  /** An optional command to trigger when the user clicks on this tree view node. */\n+  command?: Command;\n+  /** An optional SVG icon to display next to the label of this tree node. */\n+  icon?: string;\n+  /** An optional description of this tree node that is displayed when the user hovers over this node. */"
  },
  {
    "id" : "e89a71a4-3866-4127-8d7d-8cf8c689e6bf",
    "prId" : 797,
    "comments" : [
      {
        "id" : "d5782bc4-bc04-4d97-aff1-27376a3cd17b",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "```suggestion\r\n   * Whether this node should be collapsed, expanded or if it has no children.\r\n```",
        "createdAt" : "2019-06-27T06:33:30Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : 42,
    "diffHunk" : "@@ -0,0 +1,209 @@\n+---\n+id: tree-view-protocol\n+title: Tree View Protocol\n+---\n+\n+Metals implements a Language Server Protocol extension called the \"Tree View\n+Protocol\" to render tree views in the editor client.\n+\n+## Base data structures\n+\n+The Tree View Protocol defines several basic data structures.\n+\n+### Tree View\n+\n+One \"tree view\" represents a single tree. Multiple tree views can be displayed\n+at the same time in an editor client.\n+\n+![Example tree views](https://i.imgur.com/FRWL3Aq.png)\n+\n+A tree view is uniquely identified by a `viewId: string` field in other data\n+structures.\n+\n+### Tree View Node\n+\n+A tree view can contain multiple tree view nodes. A tree view node can have the\n+following metadata.\n+\n+```ts\n+export interface TreeViewNode {\n+  /** The ID of the view that this node is associated with. */\n+  viewId: string;\n+  /** The URI of this node, or undefined if root node of the view. */\n+  nodeUri?: string;\n+  /** The title to display for this node. */\n+  label: string;\n+  /** An optional command to trigger when the user clicks on this tree view node. */\n+  command?: Command;\n+  /** An optional SVG icon to display next to the label of this tree node. */\n+  icon?: string;\n+  /** An optional description of this tree node that is displayed when the user hovers over this node. */\n+  tooltip?: string;\n+  /**\n+   * Whether this tree node should be collapsed, expanded or if it has no children."
  },
  {
    "id" : "85b28dd7-a9af-4243-8ca0-25d428da9ed8",
    "prId" : 797,
    "comments" : [
      {
        "id" : "523d4a9a-01f0-46fa-99fd-8930e5f11259",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "```suggestion\r\n   * - expanded: this node has children and this node should be auto-expanded\r\n```",
        "createdAt" : "2019-06-27T06:34:33Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9d8788f6-a350-40a6-a44e-17fb975faa69",
        "parentId" : "523d4a9a-01f0-46fa-99fd-8930e5f11259",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Good catch!",
        "createdAt" : "2019-06-27T08:51:20Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : 45,
    "diffHunk" : "@@ -0,0 +1,209 @@\n+---\n+id: tree-view-protocol\n+title: Tree View Protocol\n+---\n+\n+Metals implements a Language Server Protocol extension called the \"Tree View\n+Protocol\" to render tree views in the editor client.\n+\n+## Base data structures\n+\n+The Tree View Protocol defines several basic data structures.\n+\n+### Tree View\n+\n+One \"tree view\" represents a single tree. Multiple tree views can be displayed\n+at the same time in an editor client.\n+\n+![Example tree views](https://i.imgur.com/FRWL3Aq.png)\n+\n+A tree view is uniquely identified by a `viewId: string` field in other data\n+structures.\n+\n+### Tree View Node\n+\n+A tree view can contain multiple tree view nodes. A tree view node can have the\n+following metadata.\n+\n+```ts\n+export interface TreeViewNode {\n+  /** The ID of the view that this node is associated with. */\n+  viewId: string;\n+  /** The URI of this node, or undefined if root node of the view. */\n+  nodeUri?: string;\n+  /** The title to display for this node. */\n+  label: string;\n+  /** An optional command to trigger when the user clicks on this tree view node. */\n+  command?: Command;\n+  /** An optional SVG icon to display next to the label of this tree node. */\n+  icon?: string;\n+  /** An optional description of this tree node that is displayed when the user hovers over this node. */\n+  tooltip?: string;\n+  /**\n+   * Whether this tree node should be collapsed, expanded or if it has no children.\n+   *\n+   * - undefined: this node has no children.\n+   * - collapsed: this node has children and this node should be auto-expanded"
  },
  {
    "id" : "b4878969-e010-4856-bba9-c871dcc93ba4",
    "prId" : 797,
    "comments" : [
      {
        "id" : "02b0e2cd-4fe6-4d5e-9364-c6c6d917dd13",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Let's keep the order from the comment\r\n\r\n```suggestion\r\n  collapseState?: \"expanded\" | \"collapsed\";\r\n```",
        "createdAt" : "2019-06-27T06:35:39Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,209 @@\n+---\n+id: tree-view-protocol\n+title: Tree View Protocol\n+---\n+\n+Metals implements a Language Server Protocol extension called the \"Tree View\n+Protocol\" to render tree views in the editor client.\n+\n+## Base data structures\n+\n+The Tree View Protocol defines several basic data structures.\n+\n+### Tree View\n+\n+One \"tree view\" represents a single tree. Multiple tree views can be displayed\n+at the same time in an editor client.\n+\n+![Example tree views](https://i.imgur.com/FRWL3Aq.png)\n+\n+A tree view is uniquely identified by a `viewId: string` field in other data\n+structures.\n+\n+### Tree View Node\n+\n+A tree view can contain multiple tree view nodes. A tree view node can have the\n+following metadata.\n+\n+```ts\n+export interface TreeViewNode {\n+  /** The ID of the view that this node is associated with. */\n+  viewId: string;\n+  /** The URI of this node, or undefined if root node of the view. */\n+  nodeUri?: string;\n+  /** The title to display for this node. */\n+  label: string;\n+  /** An optional command to trigger when the user clicks on this tree view node. */\n+  command?: Command;\n+  /** An optional SVG icon to display next to the label of this tree node. */\n+  icon?: string;\n+  /** An optional description of this tree node that is displayed when the user hovers over this node. */\n+  tooltip?: string;\n+  /**\n+   * Whether this tree node should be collapsed, expanded or if it has no children.\n+   *\n+   * - undefined: this node has no children.\n+   * - collapsed: this node has children and this node should be auto-expanded\n+   *   on the first load.\n+   * - collapsed: this node has children and the user should manually expand\n+   *   this node to see the children.\n+   */\n+  collapseState?: \"collapsed\" | \"expanded\";"
  },
  {
    "id" : "53d5387b-58b7-4b7c-979e-0d200e23767b",
    "prId" : 797,
    "comments" : [
      {
        "id" : "3244dfcc-df36-4844-b023-971bf088fb32",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "> **does not need**\r\n\r\nIt means that it can be, right? To me \"does not need to be displayed\" means \"you, the implementer, don't have to display it\"",
        "createdAt" : "2019-06-27T06:37:58Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "35f7d5e3-b6bf-4571-9ced-dba82725f515",
        "parentId" : "3244dfcc-df36-4844-b023-971bf088fb32",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Clarified it's up to the client to display the title or not. This protocol mirrors the VS Code `Command` datatype which has a `title` field but from the tree view the command title is not displayed, only the title of the tree view node. I'm inclined to keep the command title field however just to for consistency reasons (we mirror the VS Code API as much as possible even if it means including fields we don't use yet).",
        "createdAt" : "2019-06-27T14:16:36Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,209 @@\n+---\n+id: tree-view-protocol\n+title: Tree View Protocol\n+---\n+\n+Metals implements a Language Server Protocol extension called the \"Tree View\n+Protocol\" to render tree views in the editor client.\n+\n+## Base data structures\n+\n+The Tree View Protocol defines several basic data structures.\n+\n+### Tree View\n+\n+One \"tree view\" represents a single tree. Multiple tree views can be displayed\n+at the same time in an editor client.\n+\n+![Example tree views](https://i.imgur.com/FRWL3Aq.png)\n+\n+A tree view is uniquely identified by a `viewId: string` field in other data\n+structures.\n+\n+### Tree View Node\n+\n+A tree view can contain multiple tree view nodes. A tree view node can have the\n+following metadata.\n+\n+```ts\n+export interface TreeViewNode {\n+  /** The ID of the view that this node is associated with. */\n+  viewId: string;\n+  /** The URI of this node, or undefined if root node of the view. */\n+  nodeUri?: string;\n+  /** The title to display for this node. */\n+  label: string;\n+  /** An optional command to trigger when the user clicks on this tree view node. */\n+  command?: Command;\n+  /** An optional SVG icon to display next to the label of this tree node. */\n+  icon?: string;\n+  /** An optional description of this tree node that is displayed when the user hovers over this node. */\n+  tooltip?: string;\n+  /**\n+   * Whether this tree node should be collapsed, expanded or if it has no children.\n+   *\n+   * - undefined: this node has no children.\n+   * - collapsed: this node has children and this node should be auto-expanded\n+   *   on the first load.\n+   * - collapsed: this node has children and the user should manually expand\n+   *   this node to see the children.\n+   */\n+  collapseState?: \"collapsed\" | \"expanded\";\n+}\n+\n+interface TreeViewCommand {\n+  /** The title of the command, does not need to be displayed in the UI. */"
  },
  {
    "id" : "5e4d1847-aa09-43a3-a244-85585ab3b0c4",
    "prId" : 797,
    "comments" : [
      {
        "id" : "6556ff5e-57b1-4ab6-b922-cc7a64b1c169",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "```suggestion\r\n  /** The identifier of the command that should be executed by the client. */\r\n```",
        "createdAt" : "2019-06-27T06:38:37Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,209 @@\n+---\n+id: tree-view-protocol\n+title: Tree View Protocol\n+---\n+\n+Metals implements a Language Server Protocol extension called the \"Tree View\n+Protocol\" to render tree views in the editor client.\n+\n+## Base data structures\n+\n+The Tree View Protocol defines several basic data structures.\n+\n+### Tree View\n+\n+One \"tree view\" represents a single tree. Multiple tree views can be displayed\n+at the same time in an editor client.\n+\n+![Example tree views](https://i.imgur.com/FRWL3Aq.png)\n+\n+A tree view is uniquely identified by a `viewId: string` field in other data\n+structures.\n+\n+### Tree View Node\n+\n+A tree view can contain multiple tree view nodes. A tree view node can have the\n+following metadata.\n+\n+```ts\n+export interface TreeViewNode {\n+  /** The ID of the view that this node is associated with. */\n+  viewId: string;\n+  /** The URI of this node, or undefined if root node of the view. */\n+  nodeUri?: string;\n+  /** The title to display for this node. */\n+  label: string;\n+  /** An optional command to trigger when the user clicks on this tree view node. */\n+  command?: Command;\n+  /** An optional SVG icon to display next to the label of this tree node. */\n+  icon?: string;\n+  /** An optional description of this tree node that is displayed when the user hovers over this node. */\n+  tooltip?: string;\n+  /**\n+   * Whether this tree node should be collapsed, expanded or if it has no children.\n+   *\n+   * - undefined: this node has no children.\n+   * - collapsed: this node has children and this node should be auto-expanded\n+   *   on the first load.\n+   * - collapsed: this node has children and the user should manually expand\n+   *   this node to see the children.\n+   */\n+  collapseState?: \"collapsed\" | \"expanded\";\n+}\n+\n+interface TreeViewCommand {\n+  /** The title of the command, does not need to be displayed in the UI. */\n+  title: string;\n+  /** The identifier of the command that should executed by the client. */"
  },
  {
    "id" : "8223e2e6-81fe-4a4a-bd48-ee71dc35dcc0",
    "prId" : 797,
    "comments" : [
      {
        "id" : "f00c2263-d1da-4d1f-82c6-d648741b4e60",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Why is it here? How is it connected to the TreeViewCommand beside being one of them? \r\nI believe it is just a duplication of the endpoint entry and it should be either removed or moved closer to the TreeViewNode to which it bears closer relation",
        "createdAt" : "2019-06-27T06:42:07Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "742946c3-9d8a-4799-b2ff-041514f02073",
        "parentId" : "f00c2263-d1da-4d1f-82c6-d648741b4e60",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Good point, I separated `TreeViewCommand` into a separate header.",
        "createdAt" : "2019-06-27T08:53:33Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,209 @@\n+---\n+id: tree-view-protocol\n+title: Tree View Protocol\n+---\n+\n+Metals implements a Language Server Protocol extension called the \"Tree View\n+Protocol\" to render tree views in the editor client.\n+\n+## Base data structures\n+\n+The Tree View Protocol defines several basic data structures.\n+\n+### Tree View\n+\n+One \"tree view\" represents a single tree. Multiple tree views can be displayed\n+at the same time in an editor client.\n+\n+![Example tree views](https://i.imgur.com/FRWL3Aq.png)\n+\n+A tree view is uniquely identified by a `viewId: string` field in other data\n+structures.\n+\n+### Tree View Node\n+\n+A tree view can contain multiple tree view nodes. A tree view node can have the\n+following metadata.\n+\n+```ts\n+export interface TreeViewNode {\n+  /** The ID of the view that this node is associated with. */\n+  viewId: string;\n+  /** The URI of this node, or undefined if root node of the view. */\n+  nodeUri?: string;\n+  /** The title to display for this node. */\n+  label: string;\n+  /** An optional command to trigger when the user clicks on this tree view node. */\n+  command?: Command;\n+  /** An optional SVG icon to display next to the label of this tree node. */\n+  icon?: string;\n+  /** An optional description of this tree node that is displayed when the user hovers over this node. */\n+  tooltip?: string;\n+  /**\n+   * Whether this tree node should be collapsed, expanded or if it has no children.\n+   *\n+   * - undefined: this node has no children.\n+   * - collapsed: this node has children and this node should be auto-expanded\n+   *   on the first load.\n+   * - collapsed: this node has children and the user should manually expand\n+   *   this node to see the children.\n+   */\n+  collapseState?: \"collapsed\" | \"expanded\";\n+}\n+\n+interface TreeViewCommand {\n+  /** The title of the command, does not need to be displayed in the UI. */\n+  title: string;\n+  /** The identifier of the command that should executed by the client. */\n+  command: string;\n+  /** A description of what this command does. */\n+  tooltip?: string;\n+  /** Optional arguments to invoke the command with. */\n+  arguments?: any[];\n+}\n+```\n+\n+The children of a tree view node can be obtained through the"
  },
  {
    "id" : "8e1893b3-5911-456b-a806-dd45a13df334",
    "prId" : 797,
    "comments" : [
      {
        "id" : "2505f12e-6711-4d35-a479-942e251801f9",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "```suggestion\r\nThe tree view children request is sent from the client to the server to get the\r\n```",
        "createdAt" : "2019-06-27T06:43:23Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,209 @@\n+---\n+id: tree-view-protocol\n+title: Tree View Protocol\n+---\n+\n+Metals implements a Language Server Protocol extension called the \"Tree View\n+Protocol\" to render tree views in the editor client.\n+\n+## Base data structures\n+\n+The Tree View Protocol defines several basic data structures.\n+\n+### Tree View\n+\n+One \"tree view\" represents a single tree. Multiple tree views can be displayed\n+at the same time in an editor client.\n+\n+![Example tree views](https://i.imgur.com/FRWL3Aq.png)\n+\n+A tree view is uniquely identified by a `viewId: string` field in other data\n+structures.\n+\n+### Tree View Node\n+\n+A tree view can contain multiple tree view nodes. A tree view node can have the\n+following metadata.\n+\n+```ts\n+export interface TreeViewNode {\n+  /** The ID of the view that this node is associated with. */\n+  viewId: string;\n+  /** The URI of this node, or undefined if root node of the view. */\n+  nodeUri?: string;\n+  /** The title to display for this node. */\n+  label: string;\n+  /** An optional command to trigger when the user clicks on this tree view node. */\n+  command?: Command;\n+  /** An optional SVG icon to display next to the label of this tree node. */\n+  icon?: string;\n+  /** An optional description of this tree node that is displayed when the user hovers over this node. */\n+  tooltip?: string;\n+  /**\n+   * Whether this tree node should be collapsed, expanded or if it has no children.\n+   *\n+   * - undefined: this node has no children.\n+   * - collapsed: this node has children and this node should be auto-expanded\n+   *   on the first load.\n+   * - collapsed: this node has children and the user should manually expand\n+   *   this node to see the children.\n+   */\n+  collapseState?: \"collapsed\" | \"expanded\";\n+}\n+\n+interface TreeViewCommand {\n+  /** The title of the command, does not need to be displayed in the UI. */\n+  title: string;\n+  /** The identifier of the command that should executed by the client. */\n+  command: string;\n+  /** A description of what this command does. */\n+  tooltip?: string;\n+  /** Optional arguments to invoke the command with. */\n+  arguments?: any[];\n+}\n+```\n+\n+The children of a tree view node can be obtained through the\n+`metals/treeViewChildren` request.\n+\n+## Endpoints\n+\n+The Tree View Protocol (TVP) consists of several JSON-RPC requests and\n+endpoints.\n+\n+### `initialize`\n+\n+The Tree View Protocol is only enabled when both the client and server declare\n+support for the protocol by adding an `treeViewProvider: true` field to the\n+experimental section of the server and client capabilities in the `initialize`\n+response.\n+\n+```json\n+{\n+  \"capabilities\": {\n+    \"experimental\": {\n+      \"treeViewProvider\": true\n+    }\n+  }\n+}\n+```\n+\n+### `metals/treeViewChildren`\n+\n+The tree view children request is sent from the client to the server to list the"
  },
  {
    "id" : "7dc8745b-0a83-46be-b884-f0e20d846dc1",
    "prId" : 797,
    "comments" : [
      {
        "id" : "ff9cf2f9-3834-4b47-b7f6-3ff4a7763663",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "```suggestion\r\n  /** The ID of the view that this node is associated with. */\r\n```",
        "createdAt" : "2019-06-27T06:43:58Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,209 @@\n+---\n+id: tree-view-protocol\n+title: Tree View Protocol\n+---\n+\n+Metals implements a Language Server Protocol extension called the \"Tree View\n+Protocol\" to render tree views in the editor client.\n+\n+## Base data structures\n+\n+The Tree View Protocol defines several basic data structures.\n+\n+### Tree View\n+\n+One \"tree view\" represents a single tree. Multiple tree views can be displayed\n+at the same time in an editor client.\n+\n+![Example tree views](https://i.imgur.com/FRWL3Aq.png)\n+\n+A tree view is uniquely identified by a `viewId: string` field in other data\n+structures.\n+\n+### Tree View Node\n+\n+A tree view can contain multiple tree view nodes. A tree view node can have the\n+following metadata.\n+\n+```ts\n+export interface TreeViewNode {\n+  /** The ID of the view that this node is associated with. */\n+  viewId: string;\n+  /** The URI of this node, or undefined if root node of the view. */\n+  nodeUri?: string;\n+  /** The title to display for this node. */\n+  label: string;\n+  /** An optional command to trigger when the user clicks on this tree view node. */\n+  command?: Command;\n+  /** An optional SVG icon to display next to the label of this tree node. */\n+  icon?: string;\n+  /** An optional description of this tree node that is displayed when the user hovers over this node. */\n+  tooltip?: string;\n+  /**\n+   * Whether this tree node should be collapsed, expanded or if it has no children.\n+   *\n+   * - undefined: this node has no children.\n+   * - collapsed: this node has children and this node should be auto-expanded\n+   *   on the first load.\n+   * - collapsed: this node has children and the user should manually expand\n+   *   this node to see the children.\n+   */\n+  collapseState?: \"collapsed\" | \"expanded\";\n+}\n+\n+interface TreeViewCommand {\n+  /** The title of the command, does not need to be displayed in the UI. */\n+  title: string;\n+  /** The identifier of the command that should executed by the client. */\n+  command: string;\n+  /** A description of what this command does. */\n+  tooltip?: string;\n+  /** Optional arguments to invoke the command with. */\n+  arguments?: any[];\n+}\n+```\n+\n+The children of a tree view node can be obtained through the\n+`metals/treeViewChildren` request.\n+\n+## Endpoints\n+\n+The Tree View Protocol (TVP) consists of several JSON-RPC requests and\n+endpoints.\n+\n+### `initialize`\n+\n+The Tree View Protocol is only enabled when both the client and server declare\n+support for the protocol by adding an `treeViewProvider: true` field to the\n+experimental section of the server and client capabilities in the `initialize`\n+response.\n+\n+```json\n+{\n+  \"capabilities\": {\n+    \"experimental\": {\n+      \"treeViewProvider\": true\n+    }\n+  }\n+}\n+```\n+\n+### `metals/treeViewChildren`\n+\n+The tree view children request is sent from the client to the server to list the\n+children nodes of a tree view node. The client is safe to cache the response of\n+the children until server sends a `metals/treeViewDidChange` notification for\n+the parent node or one of its ancestor nodes.\n+\n+_Request_:\n+\n+- method: `metals/treeViewChildren`\n+- params: `TreeViewChildrenParams` defined as follows.\n+\n+```ts\n+interface TreeViewChildrenParams {\n+  /** The ID of the view that is node is associated with. */"
  },
  {
    "id" : "69aeefd7-8594-4fab-abe0-0f1bf9af651b",
    "prId" : 797,
    "comments" : [
      {
        "id" : "f7f6e519-4fe1-4189-b55f-51cd04d4ace3",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "```suggestion\r\nThe tree view parent request is sent from the client to the server to obtain\r\n```",
        "createdAt" : "2019-06-27T06:44:52Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,209 @@\n+---\n+id: tree-view-protocol\n+title: Tree View Protocol\n+---\n+\n+Metals implements a Language Server Protocol extension called the \"Tree View\n+Protocol\" to render tree views in the editor client.\n+\n+## Base data structures\n+\n+The Tree View Protocol defines several basic data structures.\n+\n+### Tree View\n+\n+One \"tree view\" represents a single tree. Multiple tree views can be displayed\n+at the same time in an editor client.\n+\n+![Example tree views](https://i.imgur.com/FRWL3Aq.png)\n+\n+A tree view is uniquely identified by a `viewId: string` field in other data\n+structures.\n+\n+### Tree View Node\n+\n+A tree view can contain multiple tree view nodes. A tree view node can have the\n+following metadata.\n+\n+```ts\n+export interface TreeViewNode {\n+  /** The ID of the view that this node is associated with. */\n+  viewId: string;\n+  /** The URI of this node, or undefined if root node of the view. */\n+  nodeUri?: string;\n+  /** The title to display for this node. */\n+  label: string;\n+  /** An optional command to trigger when the user clicks on this tree view node. */\n+  command?: Command;\n+  /** An optional SVG icon to display next to the label of this tree node. */\n+  icon?: string;\n+  /** An optional description of this tree node that is displayed when the user hovers over this node. */\n+  tooltip?: string;\n+  /**\n+   * Whether this tree node should be collapsed, expanded or if it has no children.\n+   *\n+   * - undefined: this node has no children.\n+   * - collapsed: this node has children and this node should be auto-expanded\n+   *   on the first load.\n+   * - collapsed: this node has children and the user should manually expand\n+   *   this node to see the children.\n+   */\n+  collapseState?: \"collapsed\" | \"expanded\";\n+}\n+\n+interface TreeViewCommand {\n+  /** The title of the command, does not need to be displayed in the UI. */\n+  title: string;\n+  /** The identifier of the command that should executed by the client. */\n+  command: string;\n+  /** A description of what this command does. */\n+  tooltip?: string;\n+  /** Optional arguments to invoke the command with. */\n+  arguments?: any[];\n+}\n+```\n+\n+The children of a tree view node can be obtained through the\n+`metals/treeViewChildren` request.\n+\n+## Endpoints\n+\n+The Tree View Protocol (TVP) consists of several JSON-RPC requests and\n+endpoints.\n+\n+### `initialize`\n+\n+The Tree View Protocol is only enabled when both the client and server declare\n+support for the protocol by adding an `treeViewProvider: true` field to the\n+experimental section of the server and client capabilities in the `initialize`\n+response.\n+\n+```json\n+{\n+  \"capabilities\": {\n+    \"experimental\": {\n+      \"treeViewProvider\": true\n+    }\n+  }\n+}\n+```\n+\n+### `metals/treeViewChildren`\n+\n+The tree view children request is sent from the client to the server to list the\n+children nodes of a tree view node. The client is safe to cache the response of\n+the children until server sends a `metals/treeViewDidChange` notification for\n+the parent node or one of its ancestor nodes.\n+\n+_Request_:\n+\n+- method: `metals/treeViewChildren`\n+- params: `TreeViewChildrenParams` defined as follows.\n+\n+```ts\n+interface TreeViewChildrenParams {\n+  /** The ID of the view that is node is associated with. */\n+  viewId: string;\n+  /** The URI of the parent node or undefined when listing the root node. */\n+  nodeUri?: string;\n+}\n+```\n+\n+_Response_:\n+\n+- result: `TreeViewChildrenResult` defined as follows.\n+\n+```ts\n+interface TreeViewChildrenResult {\n+  /** The child nodes of the requested parent node. */\n+  nodes: TreeViewNode[];\n+}\n+```\n+\n+### `metals/treeViewParent`\n+\n+The tree view children parent is sent from the client to the server to obtain"
  },
  {
    "id" : "447e5bba-1e65-4e89-b294-fb0a61765483",
    "prId" : 797,
    "comments" : [
      {
        "id" : "9e09562d-7f1b-4dfa-aa92-c2f03ad41202",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "```suggestion\r\nthe parent node of a child node. This endpoint is only needed to implement the\r\n```",
        "createdAt" : "2019-06-27T06:45:38Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3a4b67da-7b50-4bbe-a55d-77abe3b05bc4",
        "parentId" : "9e09562d-7f1b-4dfa-aa92-c2f03ad41202",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I removed this sentence.",
        "createdAt" : "2019-06-27T08:57:00Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,209 @@\n+---\n+id: tree-view-protocol\n+title: Tree View Protocol\n+---\n+\n+Metals implements a Language Server Protocol extension called the \"Tree View\n+Protocol\" to render tree views in the editor client.\n+\n+## Base data structures\n+\n+The Tree View Protocol defines several basic data structures.\n+\n+### Tree View\n+\n+One \"tree view\" represents a single tree. Multiple tree views can be displayed\n+at the same time in an editor client.\n+\n+![Example tree views](https://i.imgur.com/FRWL3Aq.png)\n+\n+A tree view is uniquely identified by a `viewId: string` field in other data\n+structures.\n+\n+### Tree View Node\n+\n+A tree view can contain multiple tree view nodes. A tree view node can have the\n+following metadata.\n+\n+```ts\n+export interface TreeViewNode {\n+  /** The ID of the view that this node is associated with. */\n+  viewId: string;\n+  /** The URI of this node, or undefined if root node of the view. */\n+  nodeUri?: string;\n+  /** The title to display for this node. */\n+  label: string;\n+  /** An optional command to trigger when the user clicks on this tree view node. */\n+  command?: Command;\n+  /** An optional SVG icon to display next to the label of this tree node. */\n+  icon?: string;\n+  /** An optional description of this tree node that is displayed when the user hovers over this node. */\n+  tooltip?: string;\n+  /**\n+   * Whether this tree node should be collapsed, expanded or if it has no children.\n+   *\n+   * - undefined: this node has no children.\n+   * - collapsed: this node has children and this node should be auto-expanded\n+   *   on the first load.\n+   * - collapsed: this node has children and the user should manually expand\n+   *   this node to see the children.\n+   */\n+  collapseState?: \"collapsed\" | \"expanded\";\n+}\n+\n+interface TreeViewCommand {\n+  /** The title of the command, does not need to be displayed in the UI. */\n+  title: string;\n+  /** The identifier of the command that should executed by the client. */\n+  command: string;\n+  /** A description of what this command does. */\n+  tooltip?: string;\n+  /** Optional arguments to invoke the command with. */\n+  arguments?: any[];\n+}\n+```\n+\n+The children of a tree view node can be obtained through the\n+`metals/treeViewChildren` request.\n+\n+## Endpoints\n+\n+The Tree View Protocol (TVP) consists of several JSON-RPC requests and\n+endpoints.\n+\n+### `initialize`\n+\n+The Tree View Protocol is only enabled when both the client and server declare\n+support for the protocol by adding an `treeViewProvider: true` field to the\n+experimental section of the server and client capabilities in the `initialize`\n+response.\n+\n+```json\n+{\n+  \"capabilities\": {\n+    \"experimental\": {\n+      \"treeViewProvider\": true\n+    }\n+  }\n+}\n+```\n+\n+### `metals/treeViewChildren`\n+\n+The tree view children request is sent from the client to the server to list the\n+children nodes of a tree view node. The client is safe to cache the response of\n+the children until server sends a `metals/treeViewDidChange` notification for\n+the parent node or one of its ancestor nodes.\n+\n+_Request_:\n+\n+- method: `metals/treeViewChildren`\n+- params: `TreeViewChildrenParams` defined as follows.\n+\n+```ts\n+interface TreeViewChildrenParams {\n+  /** The ID of the view that is node is associated with. */\n+  viewId: string;\n+  /** The URI of the parent node or undefined when listing the root node. */\n+  nodeUri?: string;\n+}\n+```\n+\n+_Response_:\n+\n+- result: `TreeViewChildrenResult` defined as follows.\n+\n+```ts\n+interface TreeViewChildrenResult {\n+  /** The child nodes of the requested parent node. */\n+  nodes: TreeViewNode[];\n+}\n+```\n+\n+### `metals/treeViewParent`\n+\n+The tree view children parent is sent from the client to the server to obtain\n+the parent node of a child node. This method is only needed to implement the"
  },
  {
    "id" : "39c16564-4302-42e4-af8e-4c7595257d77",
    "prId" : 797,
    "comments" : [
      {
        "id" : "2fa4eacd-55c2-4b78-91fd-02fa1dcd9e4b",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "```suggestion\r\n  /** The ID of the view that this node is associated with. */\r\n```\r\n\r\nmaybe also reverse the order?\r\n- nodeUri\r\n- viewId\r\n\r\nthen the comment on viewId: \"(...) that the node is (...)\" makes more sense as the node is already in scope",
        "createdAt" : "2019-06-27T06:46:00Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "970db8a3-dedc-4e5f-9bed-2cef60c01683",
        "parentId" : "2fa4eacd-55c2-4b78-91fd-02fa1dcd9e4b",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "It's a good point 🤔 I'm still unsure because all the other data structures consistently use `viewId` as the first argument, which prevents accidentally passing in a node URI in fields where a view ID is expected, or vice versa. I renamed \"this node\" to \"the nodeUri\"",
        "createdAt" : "2019-06-27T08:58:49Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,209 @@\n+---\n+id: tree-view-protocol\n+title: Tree View Protocol\n+---\n+\n+Metals implements a Language Server Protocol extension called the \"Tree View\n+Protocol\" to render tree views in the editor client.\n+\n+## Base data structures\n+\n+The Tree View Protocol defines several basic data structures.\n+\n+### Tree View\n+\n+One \"tree view\" represents a single tree. Multiple tree views can be displayed\n+at the same time in an editor client.\n+\n+![Example tree views](https://i.imgur.com/FRWL3Aq.png)\n+\n+A tree view is uniquely identified by a `viewId: string` field in other data\n+structures.\n+\n+### Tree View Node\n+\n+A tree view can contain multiple tree view nodes. A tree view node can have the\n+following metadata.\n+\n+```ts\n+export interface TreeViewNode {\n+  /** The ID of the view that this node is associated with. */\n+  viewId: string;\n+  /** The URI of this node, or undefined if root node of the view. */\n+  nodeUri?: string;\n+  /** The title to display for this node. */\n+  label: string;\n+  /** An optional command to trigger when the user clicks on this tree view node. */\n+  command?: Command;\n+  /** An optional SVG icon to display next to the label of this tree node. */\n+  icon?: string;\n+  /** An optional description of this tree node that is displayed when the user hovers over this node. */\n+  tooltip?: string;\n+  /**\n+   * Whether this tree node should be collapsed, expanded or if it has no children.\n+   *\n+   * - undefined: this node has no children.\n+   * - collapsed: this node has children and this node should be auto-expanded\n+   *   on the first load.\n+   * - collapsed: this node has children and the user should manually expand\n+   *   this node to see the children.\n+   */\n+  collapseState?: \"collapsed\" | \"expanded\";\n+}\n+\n+interface TreeViewCommand {\n+  /** The title of the command, does not need to be displayed in the UI. */\n+  title: string;\n+  /** The identifier of the command that should executed by the client. */\n+  command: string;\n+  /** A description of what this command does. */\n+  tooltip?: string;\n+  /** Optional arguments to invoke the command with. */\n+  arguments?: any[];\n+}\n+```\n+\n+The children of a tree view node can be obtained through the\n+`metals/treeViewChildren` request.\n+\n+## Endpoints\n+\n+The Tree View Protocol (TVP) consists of several JSON-RPC requests and\n+endpoints.\n+\n+### `initialize`\n+\n+The Tree View Protocol is only enabled when both the client and server declare\n+support for the protocol by adding an `treeViewProvider: true` field to the\n+experimental section of the server and client capabilities in the `initialize`\n+response.\n+\n+```json\n+{\n+  \"capabilities\": {\n+    \"experimental\": {\n+      \"treeViewProvider\": true\n+    }\n+  }\n+}\n+```\n+\n+### `metals/treeViewChildren`\n+\n+The tree view children request is sent from the client to the server to list the\n+children nodes of a tree view node. The client is safe to cache the response of\n+the children until server sends a `metals/treeViewDidChange` notification for\n+the parent node or one of its ancestor nodes.\n+\n+_Request_:\n+\n+- method: `metals/treeViewChildren`\n+- params: `TreeViewChildrenParams` defined as follows.\n+\n+```ts\n+interface TreeViewChildrenParams {\n+  /** The ID of the view that is node is associated with. */\n+  viewId: string;\n+  /** The URI of the parent node or undefined when listing the root node. */\n+  nodeUri?: string;\n+}\n+```\n+\n+_Response_:\n+\n+- result: `TreeViewChildrenResult` defined as follows.\n+\n+```ts\n+interface TreeViewChildrenResult {\n+  /** The child nodes of the requested parent node. */\n+  nodes: TreeViewNode[];\n+}\n+```\n+\n+### `metals/treeViewParent`\n+\n+The tree view children parent is sent from the client to the server to obtain\n+the parent node of a child node. This method is only needed to implement the\n+[`reveal-tree-view-node`](#reveal-tree-view-node) client command.\n+\n+_Request_:\n+\n+- method: `metals/treeViewParent`\n+- params: `TreeViewParentParams` defined as follows.\n+\n+```ts\n+interface TreeViewParentParams {\n+  /** The ID of the view that is node is associated with. */"
  },
  {
    "id" : "1bf5ce9b-128d-4b65-96b8-e7d917fe2ffd",
    "prId" : 797,
    "comments" : [
      {
        "id" : "e756ec24-d65d-40a7-a1f6-87a6d478afdc",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "I am not sure if every fields needs a comment. \r\n\r\n```suggestion\r\n```",
        "createdAt" : "2019-06-27T06:49:57Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,209 @@\n+---\n+id: tree-view-protocol\n+title: Tree View Protocol\n+---\n+\n+Metals implements a Language Server Protocol extension called the \"Tree View\n+Protocol\" to render tree views in the editor client.\n+\n+## Base data structures\n+\n+The Tree View Protocol defines several basic data structures.\n+\n+### Tree View\n+\n+One \"tree view\" represents a single tree. Multiple tree views can be displayed\n+at the same time in an editor client.\n+\n+![Example tree views](https://i.imgur.com/FRWL3Aq.png)\n+\n+A tree view is uniquely identified by a `viewId: string` field in other data\n+structures.\n+\n+### Tree View Node\n+\n+A tree view can contain multiple tree view nodes. A tree view node can have the\n+following metadata.\n+\n+```ts\n+export interface TreeViewNode {\n+  /** The ID of the view that this node is associated with. */\n+  viewId: string;\n+  /** The URI of this node, or undefined if root node of the view. */\n+  nodeUri?: string;\n+  /** The title to display for this node. */\n+  label: string;\n+  /** An optional command to trigger when the user clicks on this tree view node. */\n+  command?: Command;\n+  /** An optional SVG icon to display next to the label of this tree node. */\n+  icon?: string;\n+  /** An optional description of this tree node that is displayed when the user hovers over this node. */\n+  tooltip?: string;\n+  /**\n+   * Whether this tree node should be collapsed, expanded or if it has no children.\n+   *\n+   * - undefined: this node has no children.\n+   * - collapsed: this node has children and this node should be auto-expanded\n+   *   on the first load.\n+   * - collapsed: this node has children and the user should manually expand\n+   *   this node to see the children.\n+   */\n+  collapseState?: \"collapsed\" | \"expanded\";\n+}\n+\n+interface TreeViewCommand {\n+  /** The title of the command, does not need to be displayed in the UI. */\n+  title: string;\n+  /** The identifier of the command that should executed by the client. */\n+  command: string;\n+  /** A description of what this command does. */\n+  tooltip?: string;\n+  /** Optional arguments to invoke the command with. */\n+  arguments?: any[];\n+}\n+```\n+\n+The children of a tree view node can be obtained through the\n+`metals/treeViewChildren` request.\n+\n+## Endpoints\n+\n+The Tree View Protocol (TVP) consists of several JSON-RPC requests and\n+endpoints.\n+\n+### `initialize`\n+\n+The Tree View Protocol is only enabled when both the client and server declare\n+support for the protocol by adding an `treeViewProvider: true` field to the\n+experimental section of the server and client capabilities in the `initialize`\n+response.\n+\n+```json\n+{\n+  \"capabilities\": {\n+    \"experimental\": {\n+      \"treeViewProvider\": true\n+    }\n+  }\n+}\n+```\n+\n+### `metals/treeViewChildren`\n+\n+The tree view children request is sent from the client to the server to list the\n+children nodes of a tree view node. The client is safe to cache the response of\n+the children until server sends a `metals/treeViewDidChange` notification for\n+the parent node or one of its ancestor nodes.\n+\n+_Request_:\n+\n+- method: `metals/treeViewChildren`\n+- params: `TreeViewChildrenParams` defined as follows.\n+\n+```ts\n+interface TreeViewChildrenParams {\n+  /** The ID of the view that is node is associated with. */\n+  viewId: string;\n+  /** The URI of the parent node or undefined when listing the root node. */\n+  nodeUri?: string;\n+}\n+```\n+\n+_Response_:\n+\n+- result: `TreeViewChildrenResult` defined as follows.\n+\n+```ts\n+interface TreeViewChildrenResult {\n+  /** The child nodes of the requested parent node. */\n+  nodes: TreeViewNode[];\n+}\n+```\n+\n+### `metals/treeViewParent`\n+\n+The tree view children parent is sent from the client to the server to obtain\n+the parent node of a child node. This method is only needed to implement the\n+[`reveal-tree-view-node`](#reveal-tree-view-node) client command.\n+\n+_Request_:\n+\n+- method: `metals/treeViewParent`\n+- params: `TreeViewParentParams` defined as follows.\n+\n+```ts\n+interface TreeViewParentParams {\n+  /** The ID of the view that is node is associated with. */\n+  viewId: string;\n+  /** The URI of the child node. */\n+  nodeUri: string;\n+}\n+```\n+\n+_Response_:\n+\n+- result: `TreeViewParentResult` defined as follows.\n+\n+```ts\n+interface TreeViewParentResult {\n+  /** The parent node URI or undefined when the parent is the root node. */\n+  uri?: string;\n+}\n+```\n+\n+### `metals/treeViewDidChange`\n+\n+The tree view did change notification is sent from the server to the client to\n+notify that the the metadata about a given tree view node has changed.\n+\n+_Notification_:\n+\n+- method: `metals/treeViewVisibilityDidChange`\n+- params: `TreeViewDidChangeParams` defined as follows:\n+\n+```ts\n+interface TreeViewDidChangeParams {\n+  /** The nodes that have changed. */\n+  nodes: TreeViewNode[];\n+}\n+```\n+\n+### `metals/treeViewVisibilityDidChange`\n+\n+The tree view visibility did change notification is sent from the client to the\n+server to notify that the visibility of a tree view has changed.\n+\n+_Notification_:\n+\n+- method: `metals/treeViewVisibilityDidChange`\n+- params: `TreeViewVisibilityDidChangeParams` defined as follows:\n+\n+```ts\n+interface TreeViewVisibilityDidChangeParams {\n+  /** The ID of the view that this node is associated with. */\n+  viewId: string;\n+  /** True if the node is visible, false otherwise. */"
  },
  {
    "id" : "f957d3a9-3df9-4506-9444-c01e491f1b26",
    "prId" : 797,
    "comments" : [
      {
        "id" : "9fd342a7-ff8d-4e73-9e0e-8fd401636e8f",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : ">tree view node collapse change\r\n\r\nthose names are getting longer and longer. Maybe we could replace them by \"This notification\" or \"This request\". The name is already present above",
        "createdAt" : "2019-06-27T06:51:07Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "80f39e12-647f-4ff9-b4af-80ce8d1028d9",
        "parentId" : "9fd342a7-ff8d-4e73-9e0e-8fd401636e8f",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I keep the verbose description to keep it consistent with the LSP spec\r\n\r\n<img width=\"755\" alt=\"Screenshot 2019-06-27 at 11 00 06\" src=\"https://user-images.githubusercontent.com/1408093/60252589-c6f0db00-98ca-11e9-866f-ea71a89e23d6.png\">\r\n",
        "createdAt" : "2019-06-27T09:00:39Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cf163154-6213-469d-8925-b8c593f60507",
        "parentId" : "9fd342a7-ff8d-4e73-9e0e-8fd401636e8f",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I removed \"tree view node\" so it's only \"The collapse did change notification\". Made the same change to  \"The visibility did change notification ...\".",
        "createdAt" : "2019-06-27T09:02:02Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,209 @@\n+---\n+id: tree-view-protocol\n+title: Tree View Protocol\n+---\n+\n+Metals implements a Language Server Protocol extension called the \"Tree View\n+Protocol\" to render tree views in the editor client.\n+\n+## Base data structures\n+\n+The Tree View Protocol defines several basic data structures.\n+\n+### Tree View\n+\n+One \"tree view\" represents a single tree. Multiple tree views can be displayed\n+at the same time in an editor client.\n+\n+![Example tree views](https://i.imgur.com/FRWL3Aq.png)\n+\n+A tree view is uniquely identified by a `viewId: string` field in other data\n+structures.\n+\n+### Tree View Node\n+\n+A tree view can contain multiple tree view nodes. A tree view node can have the\n+following metadata.\n+\n+```ts\n+export interface TreeViewNode {\n+  /** The ID of the view that this node is associated with. */\n+  viewId: string;\n+  /** The URI of this node, or undefined if root node of the view. */\n+  nodeUri?: string;\n+  /** The title to display for this node. */\n+  label: string;\n+  /** An optional command to trigger when the user clicks on this tree view node. */\n+  command?: Command;\n+  /** An optional SVG icon to display next to the label of this tree node. */\n+  icon?: string;\n+  /** An optional description of this tree node that is displayed when the user hovers over this node. */\n+  tooltip?: string;\n+  /**\n+   * Whether this tree node should be collapsed, expanded or if it has no children.\n+   *\n+   * - undefined: this node has no children.\n+   * - collapsed: this node has children and this node should be auto-expanded\n+   *   on the first load.\n+   * - collapsed: this node has children and the user should manually expand\n+   *   this node to see the children.\n+   */\n+  collapseState?: \"collapsed\" | \"expanded\";\n+}\n+\n+interface TreeViewCommand {\n+  /** The title of the command, does not need to be displayed in the UI. */\n+  title: string;\n+  /** The identifier of the command that should executed by the client. */\n+  command: string;\n+  /** A description of what this command does. */\n+  tooltip?: string;\n+  /** Optional arguments to invoke the command with. */\n+  arguments?: any[];\n+}\n+```\n+\n+The children of a tree view node can be obtained through the\n+`metals/treeViewChildren` request.\n+\n+## Endpoints\n+\n+The Tree View Protocol (TVP) consists of several JSON-RPC requests and\n+endpoints.\n+\n+### `initialize`\n+\n+The Tree View Protocol is only enabled when both the client and server declare\n+support for the protocol by adding an `treeViewProvider: true` field to the\n+experimental section of the server and client capabilities in the `initialize`\n+response.\n+\n+```json\n+{\n+  \"capabilities\": {\n+    \"experimental\": {\n+      \"treeViewProvider\": true\n+    }\n+  }\n+}\n+```\n+\n+### `metals/treeViewChildren`\n+\n+The tree view children request is sent from the client to the server to list the\n+children nodes of a tree view node. The client is safe to cache the response of\n+the children until server sends a `metals/treeViewDidChange` notification for\n+the parent node or one of its ancestor nodes.\n+\n+_Request_:\n+\n+- method: `metals/treeViewChildren`\n+- params: `TreeViewChildrenParams` defined as follows.\n+\n+```ts\n+interface TreeViewChildrenParams {\n+  /** The ID of the view that is node is associated with. */\n+  viewId: string;\n+  /** The URI of the parent node or undefined when listing the root node. */\n+  nodeUri?: string;\n+}\n+```\n+\n+_Response_:\n+\n+- result: `TreeViewChildrenResult` defined as follows.\n+\n+```ts\n+interface TreeViewChildrenResult {\n+  /** The child nodes of the requested parent node. */\n+  nodes: TreeViewNode[];\n+}\n+```\n+\n+### `metals/treeViewParent`\n+\n+The tree view children parent is sent from the client to the server to obtain\n+the parent node of a child node. This method is only needed to implement the\n+[`reveal-tree-view-node`](#reveal-tree-view-node) client command.\n+\n+_Request_:\n+\n+- method: `metals/treeViewParent`\n+- params: `TreeViewParentParams` defined as follows.\n+\n+```ts\n+interface TreeViewParentParams {\n+  /** The ID of the view that is node is associated with. */\n+  viewId: string;\n+  /** The URI of the child node. */\n+  nodeUri: string;\n+}\n+```\n+\n+_Response_:\n+\n+- result: `TreeViewParentResult` defined as follows.\n+\n+```ts\n+interface TreeViewParentResult {\n+  /** The parent node URI or undefined when the parent is the root node. */\n+  uri?: string;\n+}\n+```\n+\n+### `metals/treeViewDidChange`\n+\n+The tree view did change notification is sent from the server to the client to\n+notify that the the metadata about a given tree view node has changed.\n+\n+_Notification_:\n+\n+- method: `metals/treeViewVisibilityDidChange`\n+- params: `TreeViewDidChangeParams` defined as follows:\n+\n+```ts\n+interface TreeViewDidChangeParams {\n+  /** The nodes that have changed. */\n+  nodes: TreeViewNode[];\n+}\n+```\n+\n+### `metals/treeViewVisibilityDidChange`\n+\n+The tree view visibility did change notification is sent from the client to the\n+server to notify that the visibility of a tree view has changed.\n+\n+_Notification_:\n+\n+- method: `metals/treeViewVisibilityDidChange`\n+- params: `TreeViewVisibilityDidChangeParams` defined as follows:\n+\n+```ts\n+interface TreeViewVisibilityDidChangeParams {\n+  /** The ID of the view that this node is associated with. */\n+  viewId: string;\n+  /** True if the node is visible, false otherwise. */\n+  visible: boolean;\n+}\n+```\n+\n+### `metals/treeViewNodeCollapseDidChange`\n+\n+The tree view node collapse change notification is sent from the client to the"
  },
  {
    "id" : "b6c33aba-0a6b-4945-8d88-b3e9dbfc12fe",
    "prId" : 797,
    "comments" : [
      {
        "id" : "0f0a0d7f-64bc-4c32-ae4d-cdb84abacea1",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2019-06-27T06:52:09Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "602b4f3b-c47b-4f98-afe1-e464a7bb9523",
        "parentId" : "0f0a0d7f-64bc-4c32-ae4d-cdb84abacea1",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I agree it feels a bit redundant but I think it's helpful to establish the terminology that `collapsed=false` means the node is \"expanded\".",
        "createdAt" : "2019-06-27T09:02:57Z",
        "updatedAt" : "2019-06-28T12:28:04Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a43e250d79a91a6cadd98f502fb91b0993c3b5d8",
    "line" : 212,
    "diffHunk" : "@@ -0,0 +1,209 @@\n+---\n+id: tree-view-protocol\n+title: Tree View Protocol\n+---\n+\n+Metals implements a Language Server Protocol extension called the \"Tree View\n+Protocol\" to render tree views in the editor client.\n+\n+## Base data structures\n+\n+The Tree View Protocol defines several basic data structures.\n+\n+### Tree View\n+\n+One \"tree view\" represents a single tree. Multiple tree views can be displayed\n+at the same time in an editor client.\n+\n+![Example tree views](https://i.imgur.com/FRWL3Aq.png)\n+\n+A tree view is uniquely identified by a `viewId: string` field in other data\n+structures.\n+\n+### Tree View Node\n+\n+A tree view can contain multiple tree view nodes. A tree view node can have the\n+following metadata.\n+\n+```ts\n+export interface TreeViewNode {\n+  /** The ID of the view that this node is associated with. */\n+  viewId: string;\n+  /** The URI of this node, or undefined if root node of the view. */\n+  nodeUri?: string;\n+  /** The title to display for this node. */\n+  label: string;\n+  /** An optional command to trigger when the user clicks on this tree view node. */\n+  command?: Command;\n+  /** An optional SVG icon to display next to the label of this tree node. */\n+  icon?: string;\n+  /** An optional description of this tree node that is displayed when the user hovers over this node. */\n+  tooltip?: string;\n+  /**\n+   * Whether this tree node should be collapsed, expanded or if it has no children.\n+   *\n+   * - undefined: this node has no children.\n+   * - collapsed: this node has children and this node should be auto-expanded\n+   *   on the first load.\n+   * - collapsed: this node has children and the user should manually expand\n+   *   this node to see the children.\n+   */\n+  collapseState?: \"collapsed\" | \"expanded\";\n+}\n+\n+interface TreeViewCommand {\n+  /** The title of the command, does not need to be displayed in the UI. */\n+  title: string;\n+  /** The identifier of the command that should executed by the client. */\n+  command: string;\n+  /** A description of what this command does. */\n+  tooltip?: string;\n+  /** Optional arguments to invoke the command with. */\n+  arguments?: any[];\n+}\n+```\n+\n+The children of a tree view node can be obtained through the\n+`metals/treeViewChildren` request.\n+\n+## Endpoints\n+\n+The Tree View Protocol (TVP) consists of several JSON-RPC requests and\n+endpoints.\n+\n+### `initialize`\n+\n+The Tree View Protocol is only enabled when both the client and server declare\n+support for the protocol by adding an `treeViewProvider: true` field to the\n+experimental section of the server and client capabilities in the `initialize`\n+response.\n+\n+```json\n+{\n+  \"capabilities\": {\n+    \"experimental\": {\n+      \"treeViewProvider\": true\n+    }\n+  }\n+}\n+```\n+\n+### `metals/treeViewChildren`\n+\n+The tree view children request is sent from the client to the server to list the\n+children nodes of a tree view node. The client is safe to cache the response of\n+the children until server sends a `metals/treeViewDidChange` notification for\n+the parent node or one of its ancestor nodes.\n+\n+_Request_:\n+\n+- method: `metals/treeViewChildren`\n+- params: `TreeViewChildrenParams` defined as follows.\n+\n+```ts\n+interface TreeViewChildrenParams {\n+  /** The ID of the view that is node is associated with. */\n+  viewId: string;\n+  /** The URI of the parent node or undefined when listing the root node. */\n+  nodeUri?: string;\n+}\n+```\n+\n+_Response_:\n+\n+- result: `TreeViewChildrenResult` defined as follows.\n+\n+```ts\n+interface TreeViewChildrenResult {\n+  /** The child nodes of the requested parent node. */\n+  nodes: TreeViewNode[];\n+}\n+```\n+\n+### `metals/treeViewParent`\n+\n+The tree view children parent is sent from the client to the server to obtain\n+the parent node of a child node. This method is only needed to implement the\n+[`reveal-tree-view-node`](#reveal-tree-view-node) client command.\n+\n+_Request_:\n+\n+- method: `metals/treeViewParent`\n+- params: `TreeViewParentParams` defined as follows.\n+\n+```ts\n+interface TreeViewParentParams {\n+  /** The ID of the view that is node is associated with. */\n+  viewId: string;\n+  /** The URI of the child node. */\n+  nodeUri: string;\n+}\n+```\n+\n+_Response_:\n+\n+- result: `TreeViewParentResult` defined as follows.\n+\n+```ts\n+interface TreeViewParentResult {\n+  /** The parent node URI or undefined when the parent is the root node. */\n+  uri?: string;\n+}\n+```\n+\n+### `metals/treeViewDidChange`\n+\n+The tree view did change notification is sent from the server to the client to\n+notify that the the metadata about a given tree view node has changed.\n+\n+_Notification_:\n+\n+- method: `metals/treeViewVisibilityDidChange`\n+- params: `TreeViewDidChangeParams` defined as follows:\n+\n+```ts\n+interface TreeViewDidChangeParams {\n+  /** The nodes that have changed. */\n+  nodes: TreeViewNode[];\n+}\n+```\n+\n+### `metals/treeViewVisibilityDidChange`\n+\n+The tree view visibility did change notification is sent from the client to the\n+server to notify that the visibility of a tree view has changed.\n+\n+_Notification_:\n+\n+- method: `metals/treeViewVisibilityDidChange`\n+- params: `TreeViewVisibilityDidChangeParams` defined as follows:\n+\n+```ts\n+interface TreeViewVisibilityDidChangeParams {\n+  /** The ID of the view that this node is associated with. */\n+  viewId: string;\n+  /** True if the node is visible, false otherwise. */\n+  visible: boolean;\n+}\n+```\n+\n+### `metals/treeViewNodeCollapseDidChange`\n+\n+The tree view node collapse change notification is sent from the client to the\n+server to notify that a tree node has either been collapsed or expanded.\n+\n+_Notification_:\n+\n+- method: `metals/treeViewNodeCollapseDidChange`\n+- params: `TreeViewNodeCollapseDidChangeParams` defined as follows:\n+\n+```ts\n+interface TreeViewNodeCollapseDidChangeParams {\n+  /** The ID of the view that this node is associated with. */\n+  viewId: string;\n+  /** The URI of the node that was collapsed or expanded. */\n+  nodeUri: string;\n+  /** True if the node is collapsed, false if the node was expanded. */"
  }
]