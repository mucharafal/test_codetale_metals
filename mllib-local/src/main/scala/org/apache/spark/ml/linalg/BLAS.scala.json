[{
  "comments": [{
    "author": {
      "login": "yanboliang"
    },
    "body": "Actually BLAS DSPMV performs matrix-vector operation `y := alpha*A*x + beta*y`, should we provide the same function as original BLAS? Since it would be used by other MLlib function in the future. \n",
    "commit": "28f8c2f51638f69a1c1bc43f3ccc80c6dca296ac",
    "createdAt": "2016-10-08T15:03:45Z",
    "diffHunk": "@@ -244,6 +244,15 @@ private[spark] object BLAS extends Serializable {\n   }\n \n   /**\n+   * y += alpha * A * x\n+   *\n+   * @param A The upper triangular part of A in a [[DenseVector]] (column major)\n+   */\n+  def dspmv(n: Int, alpha: Double, A: DenseVector, x: DenseVector, y: DenseVector): Unit = {"
  }, {
    "author": {
      "login": "sethah"
    },
    "body": "I exposed it in this simplified form for now since it's all I needed. I think it's ok to leave it and add the other functionality when we need it in the future. But I can change it if you think it's best.\n",
    "commit": "28f8c2f51638f69a1c1bc43f3ccc80c6dca296ac",
    "createdAt": "2016-10-10T17:27:31Z",
    "diffHunk": "@@ -244,6 +244,15 @@ private[spark] object BLAS extends Serializable {\n   }\n \n   /**\n+   * y += alpha * A * x\n+   *\n+   * @param A The upper triangular part of A in a [[DenseVector]] (column major)\n+   */\n+  def dspmv(n: Int, alpha: Double, A: DenseVector, x: DenseVector, y: DenseVector): Unit = {"
  }, {
    "author": {
      "login": "yanboliang"
    },
    "body": "Yeah, I think developers will check linalg.BLAS to find functions satisfy their requirements. The annotation will tell them how these functions can do, so they may overlook this function if they need to calculate `y := alpha*A*x + beta*y`. So I think it's better to use the complete formula.\n",
    "commit": "28f8c2f51638f69a1c1bc43f3ccc80c6dca296ac",
    "createdAt": "2016-10-12T14:45:20Z",
    "diffHunk": "@@ -244,6 +244,15 @@ private[spark] object BLAS extends Serializable {\n   }\n \n   /**\n+   * y += alpha * A * x\n+   *\n+   * @param A The upper triangular part of A in a [[DenseVector]] (column major)\n+   */\n+  def dspmv(n: Int, alpha: Double, A: DenseVector, x: DenseVector, y: DenseVector): Unit = {"
  }, {
    "author": {
      "login": "sethah"
    },
    "body": "updated it and added some tests\n",
    "commit": "28f8c2f51638f69a1c1bc43f3ccc80c6dca296ac",
    "createdAt": "2016-10-12T20:16:37Z",
    "diffHunk": "@@ -244,6 +244,15 @@ private[spark] object BLAS extends Serializable {\n   }\n \n   /**\n+   * y += alpha * A * x\n+   *\n+   * @param A The upper triangular part of A in a [[DenseVector]] (column major)\n+   */\n+  def dspmv(n: Int, alpha: Double, A: DenseVector, x: DenseVector, y: DenseVector): Unit = {"
  }],
  "prId": 15394
}, {
  "comments": [{
    "author": {
      "login": "yanboliang"
    },
    "body": "Add annotation for `n`: `the order of the matrix A`.\n",
    "commit": "28f8c2f51638f69a1c1bc43f3ccc80c6dca296ac",
    "createdAt": "2016-10-14T13:52:31Z",
    "diffHunk": "@@ -244,6 +244,23 @@ private[spark] object BLAS extends Serializable {\n   }\n \n   /**\n+   * y := alpha*A*x + beta*y\n+   *\n+   * @param A The upper triangular part of A in a [[DenseVector]] (column major).\n+   * @param x The [[DenseVector]] transformed by A.\n+   * @param y The [[DenseVector]] to be modified in place."
  }, {
    "author": {
      "login": "sethah"
    },
    "body": "Done\n",
    "commit": "28f8c2f51638f69a1c1bc43f3ccc80c6dca296ac",
    "createdAt": "2016-10-20T23:42:57Z",
    "diffHunk": "@@ -244,6 +244,23 @@ private[spark] object BLAS extends Serializable {\n   }\n \n   /**\n+   * y := alpha*A*x + beta*y\n+   *\n+   * @param A The upper triangular part of A in a [[DenseVector]] (column major).\n+   * @param x The [[DenseVector]] transformed by A.\n+   * @param y The [[DenseVector]] to be modified in place."
  }],
  "prId": 15394
}]