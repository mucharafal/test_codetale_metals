[
  {
    "id" : "0ee10756-c16c-44e5-8eb2-e228f84fbf24",
    "prId" : 75,
    "comments" : [
      {
        "id" : "f6c849df-80d3-4ce8-916a-65c67c413352",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "I think `Decl.Type` and `Defn.Type` are missing. \r\nBtw, what are other cases of `Decl.Type` besides abstract type members?",
        "createdAt" : "2017-11-29T09:39:16Z",
        "updatedAt" : "2017-11-29T10:44:00Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "37bb3084-b29c-45e7-846f-420782b66e39",
        "parentId" : "f6c849df-80d3-4ce8-916a-65c67c413352",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Another thing I forgot to mention: I think this doesn't handle things like `val (x, y) = ...`, because you restrict to a single `Pat.Var` name. How about changing it to something like\r\n\r\n```scala\r\ncase Decl.Var(_, patvars, _) =>\r\n  patvars.collect { case Pat.Var(name) => term(name, VAR) }; stop()\r\n```",
        "createdAt" : "2017-11-29T09:52:50Z",
        "updatedAt" : "2017-11-29T10:44:00Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "95c050b1ad5a2c0096b27ebcb54d8fb486badf76",
    "line" : null,
    "diffHunk" : "@@ -10,26 +10,29 @@ object ScalaMtags {\n       override def language: String =\n         \"Scala212\" // TODO(olafur) more accurate dialect\n       override def indexRoot(): Unit = apply(root)\n-      override def apply(tree: Tree): Unit = {\n-        val old = currentOwner\n-        val next = tree match {\n-          case t: Source => Continue\n-          case t: Template => Continue\n-          case t: Pkg => pkg(t.ref); Continue\n-          case t: Pkg.Object => term(t.name, PACKAGEOBJECT); Continue\n-          case t: Defn.Class => tpe(t.name, CLASS); Continue\n-          case t: Defn.Trait => tpe(t.name, TRAIT); Continue\n-          case t: Defn.Object => term(t.name, OBJECT); Continue\n-          case t: Defn.Def => term(t.name, DEF); Stop\n-          case Defn.Val(_, Pat.Var(name) :: Nil, _, _) => term(name, DEF); Stop\n-          case Defn.Var(_, Pat.Var(name) :: Nil, _, _) => term(name, DEF); Stop\n-          case _ => Stop\n+      override def apply(tree: Tree): Unit = withOwner() {\n+        def continue(): Unit = super.apply(tree)\n+        def stop(): Unit = ()\n+        tree match {\n+          case t: Source => continue()\n+          case t: Template => continue()\n+          case t: Pkg => pkg(t.ref); continue()\n+          case t: Pkg.Object => term(t.name, PACKAGEOBJECT); continue()\n+          case t: Defn.Class => tpe(t.name, CLASS); continue()\n+          case t: Defn.Trait => tpe(t.name, TRAIT); continue()\n+          case t: Defn.Object => term(t.name, OBJECT); continue()\n+          case t: Defn.Def => term(t.name, DEF); stop()\n+          case t: Decl.Def => term(t.name, DEF); stop()\n+          case Defn.Val(_, Pat.Var(name) :: Nil, _, _) =>\n+            term(name, VAL); stop()\n+          case Decl.Val(_, Pat.Var(name) :: Nil, _) =>\n+            term(name, VAL); stop()\n+          case Defn.Var(_, Pat.Var(name) :: Nil, _, _) =>\n+            term(name, VAR); stop()\n+          case Decl.Var(_, Pat.Var(name) :: Nil, _) =>\n+            term(name, VAR); stop()"
  },
  {
    "id" : "86083f54-2d06-4a36-adca-d56bc46cbacc",
    "prId" : 141,
    "comments" : [
      {
        "id" : "917daba3-049e-4990-8ef5-7d89bbcb9a31",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "I noticed that there is `PARAM` flag, would it fit better here or is it for something else?",
        "createdAt" : "2017-12-19T15:02:08Z",
        "updatedAt" : "2017-12-19T21:49:40Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "555bca60-8729-48b7-a0a7-5b387cf9f282",
        "parentId" : "917daba3-049e-4990-8ef5-7d89bbcb9a31",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Done! I'm not sure how it we can use it in the language server, but adding one more bit of information is free :)",
        "createdAt" : "2017-12-19T21:42:53Z",
        "updatedAt" : "2017-12-19T21:49:40Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5174a6ee-3da5-44c6-9860-a68fb7e6585a",
        "parentId" : "917daba3-049e-4990-8ef5-7d89bbcb9a31",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I'm actually being lazy here by adding `VAL` blindly to everything even for non-val parameter. I added a note!",
        "createdAt" : "2017-12-19T21:49:48Z",
        "updatedAt" : "2017-12-19T21:49:48Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c74e1b505c0ca3379eab58c57be4423a801b3b25",
    "line" : null,
    "diffHunk" : "@@ -27,7 +27,13 @@ object ScalaMtags {\n             term(t.name, PACKAGEOBJECT);\n             term(\"package\", t.name.pos, OBJECT);\n             continue()\n-          case t: Defn.Class => tpe(t.name, CLASS); continue()\n+          case t: Defn.Class =>\n+            tpe(t.name, CLASS)\n+            for {\n+              params <- t.ctor.paramss\n+              param <- params\n+            } withOwner() { super.param(param.name, VAL) }"
  }
]