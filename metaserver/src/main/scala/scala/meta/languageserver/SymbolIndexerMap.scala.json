[
  {
    "id" : "9f09da5b-f3bd-4d15-8ae3-faba1b9300fe",
    "prId" : 37,
    "comments" : [
      {
        "id" : "aa207ad7-78a5-4727-b6a2-6ff8af90f2df",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "This too can be a SAM, I think.\r\n\r\nI haven't tried, but this may actually be as simple as:\r\n\r\n```scala\r\nvalue.getAndUpdate(f)\r\n```",
        "createdAt" : "2017-11-19T05:05:10Z",
        "updatedAt" : "2017-11-20T07:50:41Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4b4d9982-1594-4c53-bc3b-7a54a9014c01",
        "parentId" : "aa207ad7-78a5-4727-b6a2-6ff8af90f2df",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I can make the SAM conversion happen to the call to `updated`, however that makes IJ unhappy even if it compiles ðŸ˜¢ \r\n![screen shot 2017-11-19 at 13 17 40](https://user-images.githubusercontent.com/1408093/32990576-1ee70ce2-cd2c-11e7-8f80-32e532a9ad5f.png)\r\nProblem seems to be caused by the type parameter.\r\n\r\nI think my reluctance to use SAM is caused by fairly bad IJ support (and need to cross-build against 2.11 in other projects). I haven't yet made the switch to LSP+vscode/vim\r\n",
        "createdAt" : "2017-11-19T12:21:38Z",
        "updatedAt" : "2017-11-20T07:50:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ed0e859accacbeb45baa83cfdbb1650efaa932da",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,87 @@\n+package scala.meta.languageserver\n+\n+import java.util.concurrent.atomic.AtomicReference\n+import java.util.function.UnaryOperator\n+import scala.collection.concurrent.TrieMap\n+import scala.meta.languageserver.index.Position\n+import scala.meta.languageserver.index.Range\n+import scala.meta.languageserver.index.Ranges\n+import scala.meta.languageserver.index.SymbolIndex\n+import com.typesafe.scalalogging.LazyLogging\n+import org.langmeta.semanticdb.Symbol\n+\n+class SymbolIndexerMap(\n+    symbols: TrieMap[String, AtomicReference[SymbolIndex]] = TrieMap.empty\n+) extends LazyLogging { self =>\n+  private def newValue(symbol: String) = {\n+    new AtomicReference(SymbolIndex(symbol = symbol))\n+  }\n+\n+  def index: Traversable[SymbolIndex] = new Traversable[SymbolIndex] {\n+    override def foreach[U](f: SymbolIndex => U): Unit =\n+      symbols.values.foreach(s => f(s.get))\n+  }\n+\n+  def updated(symbol: String)(f: SymbolIndex => SymbolIndex): Unit = {\n+    val value = symbols.getOrElseUpdate(symbol, newValue(symbol))\n+    value.getAndUpdate(new UnaryOperator[SymbolIndex] {"
  },
  {
    "id" : "d2777337-2570-4b5d-8e10-1c90b978a2b5",
    "prId" : 37,
    "comments" : [
      {
        "id" : "a3069a57-fa05-47c6-83a4-70ae2ef5f7f8",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "```scala\r\ndef index: Traversable[SymbolIndex] = f => symbols.values.foreach(s => f(s.get))\r\n```",
        "createdAt" : "2017-11-19T05:06:52Z",
        "updatedAt" : "2017-11-20T07:50:41Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4f59f87e-3a21-480f-a2bf-03952eadaf0c",
        "parentId" : "a3069a57-fa05-47c6-83a4-70ae2ef5f7f8",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "The `foreach` signature is polymorphic `[U](f: SymbolIndex => U)` which makes SAM conversion fail ðŸ˜¢ ",
        "createdAt" : "2017-11-19T12:15:46Z",
        "updatedAt" : "2017-11-20T07:50:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ed0e859accacbeb45baa83cfdbb1650efaa932da",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,87 @@\n+package scala.meta.languageserver\n+\n+import java.util.concurrent.atomic.AtomicReference\n+import java.util.function.UnaryOperator\n+import scala.collection.concurrent.TrieMap\n+import scala.meta.languageserver.index.Position\n+import scala.meta.languageserver.index.Range\n+import scala.meta.languageserver.index.Ranges\n+import scala.meta.languageserver.index.SymbolIndex\n+import com.typesafe.scalalogging.LazyLogging\n+import org.langmeta.semanticdb.Symbol\n+\n+class SymbolIndexerMap(\n+    symbols: TrieMap[String, AtomicReference[SymbolIndex]] = TrieMap.empty\n+) extends LazyLogging { self =>\n+  private def newValue(symbol: String) = {\n+    new AtomicReference(SymbolIndex(symbol = symbol))\n+  }\n+\n+  def index: Traversable[SymbolIndex] = new Traversable[SymbolIndex] {"
  }
]