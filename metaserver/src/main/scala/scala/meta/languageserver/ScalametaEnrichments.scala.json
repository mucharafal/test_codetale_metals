[
  {
    "id" : "84082fd5-f9a5-4ffb-b100-724707cb365e",
    "prId" : 23,
    "comments" : [
      {
        "id" : "3487b844-c09f-48ce-b910-fc393e0fdeff",
        "parentId" : null,
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "Accidental new line?",
        "createdAt" : "2017-11-11T18:30:11Z",
        "updatedAt" : "2017-11-14T20:08:40Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0d25a1c7-5e03-439e-b599-b915fe354243",
        "parentId" : "3487b844-c09f-48ce-b910-fc393e0fdeff",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Removed.",
        "createdAt" : "2017-11-11T21:47:28Z",
        "updatedAt" : "2017-11-14T20:08:40Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e9272f240feb4f00bdea5ee50e2808699cd0d0e",
    "line" : null,
    "diffHunk" : "@@ -27,6 +27,7 @@ object ScalametaEnrichments {\n     }\n   }\n   implicit class XtensionInputLSP(val input: m.Input) extends AnyVal {\n+"
  },
  {
    "id" : "1fac8073-4f71-4b4a-9b2f-3ae5d6a29469",
    "prId" : 34,
    "comments" : [
      {
        "id" : "a6de9501-3ead-4e05-a12b-9d2bbe2a1f78",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Strictly speaking, package object are modules like regular objects. But having a different icon in the UI to distinguish package objects from objects makes sense.",
        "createdAt" : "2017-11-19T16:32:25Z",
        "updatedAt" : "2017-11-19T16:32:59Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "59f83e57-702f-4163-954a-e5cb235f9ea1",
        "parentId" : "a6de9501-3ead-4e05-a12b-9d2bbe2a1f78",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Yep, that's what I thought",
        "createdAt" : "2017-11-19T16:34:28Z",
        "updatedAt" : "2017-11-19T16:34:28Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f22b970a071cd204e5269d09dea51d6223971e22",
    "line" : null,
    "diffHunk" : "@@ -36,8 +35,8 @@ object ScalametaEnrichments {\n       case Defn.Macro(_)  => SymbolKind.Constructor\n       case Defn.Class(_)  => SymbolKind.Class\n       case Defn.Trait(_)  => SymbolKind.Interface\n-      case Defn.Object(_) => SymbolKind.Namespace\n-      case Pkg.Object(_)  => SymbolKind.Module\n+      case Defn.Object(_) => SymbolKind.Module\n+      case Pkg.Object(_)  => SymbolKind.Namespace"
  },
  {
    "id" : "d3f67c12-70d4-460d-bc9e-de6a701bef35",
    "prId" : 78,
    "comments" : [
      {
        "id" : "bbc841a8-25ad-4c38-8722-cbee9a5bfd87",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "üëç ",
        "createdAt" : "2017-12-01T20:32:17Z",
        "updatedAt" : "2017-12-02T23:22:47Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "71da2fa975b8fb36cd888c23d0a8b0214a68e679",
    "line" : 43,
    "diffHunk" : "@@ -53,16 +53,26 @@ object ScalametaEnrichments {\n   }\n   implicit class XtensionIndexPosition(val pos: i.Position) extends AnyVal {\n     def toLocation(implicit cwd: m.AbsolutePath): l.Location = {\n-      val range = pos.range.get\n       l.Location(\n         pos.uri,\n-        l.Range(\n-          l.Position(line = range.startLine, character = range.startColumn),\n-          l.Position(line = range.endLine, character = range.endColumn)\n-        )\n+        pos.range.get.toRange\n       )\n     }\n   }\n+  implicit class XtensionIndexRange(val range: i.Range) extends AnyVal {\n+    def pretty: String =\n+      f\"${range.startLine}%2d:${range.startColumn}%2d|${range.endLine}%2d:${range.endColumn}%2d\"\n+    def toRange: l.Range = l.Range(\n+      l.Position(line = range.startLine, character = range.startColumn),\n+      l.Position(line = range.endLine, character = range.endColumn)\n+    )\n+    def contains(line: Int, column: Int): Boolean = {"
  },
  {
    "id" : "9bea3535-62c9-4b45-a2ee-b671cc4489ae",
    "prId" : 93,
    "comments" : [
      {
        "id" : "2c72dfe0-f1bb-4b2c-971f-238f4a10a2d2",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "You will actually need additional logic to handle `val (a, b)`, it currently handles only `val a, b` which is different. I think we may produce weird/local symbols for `val (a, b)` because of desugarings in scalac so that can be left to be fixed in the future.",
        "createdAt" : "2017-12-04T07:02:06Z",
        "updatedAt" : "2017-12-04T23:49:22Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "83170c1e-5b19-426a-b182-50daf674d98c",
        "parentId" : "2c72dfe0-f1bb-4b2c-971f-238f4a10a2d2",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Thanks for pointing it out. I'll check it ü§î ",
        "createdAt" : "2017-12-04T20:17:41Z",
        "updatedAt" : "2017-12-04T23:49:22Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c800b025-2c52-4469-8e9b-2cfa90ea575d",
        "parentId" : "2c72dfe0-f1bb-4b2c-971f-238f4a10a2d2",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "No need to do it here, I think `val (a, b)` will need special treatment in scalameta similar to other patterns like `val Foo(a, b) = `",
        "createdAt" : "2017-12-04T21:55:21Z",
        "updatedAt" : "2017-12-04T23:49:22Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bad74d33-176c-4d3a-a439-45c17a77d92c",
        "parentId" : "2c72dfe0-f1bb-4b2c-971f-238f4a10a2d2",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "OK. I'll just use this one simple change. Does it solve the problem or is it still more complicated?\r\n\r\n```scala\r\n@ q\"val (x, y) = (1, 2)\".pats.flatMap { _.collect { case Pat.Var(name) => name.value } }\r\nres4: List[String] = List(\"x\", \"y\")\r\n\r\n@ q\"val Foo(x, y) = (1, 'a')\".pats.flatMap { _.collect { case Pat.Var(name) => name.value } }\r\nres8: List[String] = List(\"x\", \"y\")\r\n```\r\n",
        "createdAt" : "2017-12-04T22:45:33Z",
        "updatedAt" : "2017-12-04T23:49:22Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "98ef0056-039b-4b40-b1a6-2e3f80b8e333",
        "parentId" : "2c72dfe0-f1bb-4b2c-971f-238f4a10a2d2",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "For outline I think that solution is fine üëç ",
        "createdAt" : "2017-12-04T22:49:00Z",
        "updatedAt" : "2017-12-04T23:49:22Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "315c38f7-7222-4060-96dc-1ba94e5f1593",
        "parentId" : "2c72dfe0-f1bb-4b2c-971f-238f4a10a2d2",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Done in cb484756b5b01b25bfcbfdde90df436667cbd6fe",
        "createdAt" : "2017-12-04T23:40:34Z",
        "updatedAt" : "2017-12-04T23:49:22Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7b17cbf33208eb27890af0e9b1a6a7b9016afbcb",
    "line" : 19,
    "diffHunk" : "@@ -52,6 +52,33 @@ object ScalametaEnrichments {\n       // case ??? => SymbolKind.Array\n       case _ => SymbolKind.Field\n     }\n+\n+    /** Fully qualified name for packages, normal name for everything else */\n+    def qualifiedName: Option[String] = tree match {\n+      case Term.Name(name) => Some(name)\n+      case Term.Select(qual, name) =>\n+        qual.qualifiedName.map { prefix =>\n+          s\"${prefix}.${name}\"\n+        }\n+      case Pkg(sel: Term.Select, _) => sel.qualifiedName\n+      case m: Member => Some(m.name.value)\n+      case _ => None\n+    }\n+\n+    /** All names within the node.\n+     * - if it's a package, it will have its qualified name: `package foo.bar.buh`\n+     * - if it's a val/var, it may contain several names in the pattern: `val (x, y, z) = ...`"
  }
]