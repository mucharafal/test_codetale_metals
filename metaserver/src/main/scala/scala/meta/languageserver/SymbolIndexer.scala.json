[
  {
    "id" : "1797b373-5928-432e-b280-43b5a5075d4a",
    "prId" : 23,
    "comments" : [
      {
        "id" : "cd9ea4f1-d7a4-42ff-8b61-7a69c56d531d",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Just as a comparison, the Java LSP jumps to a `.class` file containing the source.\r\nI'm not sure I understand the implementation, but here's the relevant bit https://github.com/eclipse/eclipse.jdt.ls/blob/2127f12fb3700dd783b75d973e4f2ecc134b9ddf/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/NavigateToDefinitionHandler.java#L52",
        "createdAt" : "2017-11-14T09:56:58Z",
        "updatedAt" : "2017-11-14T20:08:40Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2db3d55a-a747-4477-89ae-c60bc45a0ce8",
        "parentId" : "cd9ea4f1-d7a4-42ff-8b61-7a69c56d531d",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Nice find! I opened https://github.com/scalameta/language-server/issues/36 to track this.",
        "createdAt" : "2017-11-14T19:38:24Z",
        "updatedAt" : "2017-11-14T20:08:40Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7d89742d-2429-48f3-829e-0380045f7ba0",
        "parentId" : "cd9ea4f1-d7a4-42ff-8b61-7a69c56d531d",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Added note in code.",
        "createdAt" : "2017-11-14T19:39:24Z",
        "updatedAt" : "2017-11-14T20:08:40Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e9272f240feb4f00bdea5ee50e2808699cd0d0e",
    "line" : null,
    "diffHunk" : "@@ -66,7 +68,32 @@ class SymbolIndexer(\n   }\n \n   private def definition(symbol: Symbol): Option[Position.Range] =\n-    Option(definitions.get(symbol))\n+    Option(definitions.get(symbol)).map {\n+      case Position.Range(input @ Input.VirtualFile(path, _), start, end)\n+          if path.contains(\"jar\") =>\n+        Position.Range(createFileInWorkspaceTarget(input), start, end)\n+      case pos => pos\n+    }\n+\n+  // Writes the contents from in-memory source file to a file in the target/source/*\n+  // directory of the workspace. vscode has support for TextDocumentContentProvider\n+  // which can provide hooks to open readonly views for custom uri schemes:\n+  // https://code.visualstudio.com/docs/extensionAPI/vscode-api#TextDocumentContentProvider\n+  // However, that is a vscode only solution and we'd like this work for all\n+  // text editors. Therefore, we write instead the file contents to disk in order to\n+  // return a file: uri.\n+  private def createFileInWorkspaceTarget("
  },
  {
    "id" : "6bd1e0fe-bb4b-42c7-b507-15764bd39b3c",
    "prId" : 34,
    "comments" : [
      {
        "id" : "63d30383-5334-4778-9028-0264da545e3e",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "üëç ",
        "createdAt" : "2017-11-12T22:42:17Z",
        "updatedAt" : "2017-11-19T16:29:37Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f22b970a071cd204e5269d09dea51d6223971e22",
    "line" : null,
    "diffHunk" : "@@ -29,19 +30,25 @@ class SymbolIndexer(\n \n   def documentSymbols(\n       path: RelativePath\n-  ): Seq[(Position.Range, Denotation)] =\n+  ): Seq[SymbolInformation] = {"
  },
  {
    "id" : "c2868624-74ae-4fd0-8eba-ad34b6173e2d",
    "prId" : 34,
    "comments" : [
      {
        "id" : "b2db5c9d-0a2f-43b1-99cd-677e9f404f3b",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "How about using `symbol.owner.syntax`? `.owner` is likely a `Symbol.Global` which has a `.signature.name` we can use",
        "createdAt" : "2017-11-12T22:44:24Z",
        "updatedAt" : "2017-11-19T16:29:37Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a7566fef-36c4-430a-a700-96ffc6051021",
        "parentId" : "b2db5c9d-0a2f-43b1-99cd-677e9f404f3b",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "See https://github.com/scalameta/language-server/issues/33#issuecomment-343774428. Also I didn't get you about `.signature.name`.",
        "createdAt" : "2017-11-12T22:47:44Z",
        "updatedAt" : "2017-11-19T16:29:37Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f22b970a071cd204e5269d09dea51d6223971e22",
    "line" : null,
    "diffHunk" : "@@ -29,19 +30,25 @@ class SymbolIndexer(\n \n   def documentSymbols(\n       path: RelativePath\n-  ): Seq[(Position.Range, Denotation)] =\n+  ): Seq[SymbolInformation] = {\n     for {\n       document <- Option(documents.get(path)).toList\n       _ <- isFreshSemanticdb(path, document).toList\n-      ResolvedName(pos: Position.Range, symbol: Symbol.Global, true) <- document.names\n+      ResolvedName(position: Position.Range, symbol: Symbol.Global, true) <- document.names\n       denotation <- Option(denotations.get(symbol))\n       if ! {\n         import denotation._\n         isPrimaryCtor ||\n         isTypeParam ||\n         isParam\n       } // not interesting for this service\n-    } yield pos -> denotation\n+    } yield SymbolInformation(\n+      denotation.name,\n+      denotation.symbolKind,\n+      path.toAbsolute.toLocation(position),\n+      Option(denotations.get(symbol.owner)).map(_.name)"
  },
  {
    "id" : "b268488e-27cd-4869-bbe5-10a116e976a6",
    "prId" : 37,
    "comments" : [
      {
        "id" : "ef2070a9-9a0f-414c-957d-0b614816039d",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Converted to SAM!",
        "createdAt" : "2017-11-19T12:12:09Z",
        "updatedAt" : "2017-11-20T07:50:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ed0e859accacbeb45baa83cfdbb1650efaa932da",
    "line" : null,
    "diffHunk" : "@@ -122,159 +147,71 @@ class SymbolIndexer(\n           Symbol.Global(owner, Signature.Type(signature.name)),\n           param\n         ) :: Nil\n-      case Symbol.Global(owner, Signature.Term(name)) =>\n-        // If `case class A(a: Int)` and there is no companion object, resolve\n-        // `A` in `A(1)` to the class definition.\n-        Symbol.Global(owner, Signature.Type(name)) :: Nil\n-      case Symbol.Multi(symbols) =>\n-        // If `import a.B` where `case class B()`, then\n-        // resolve to either symbol, whichever has a definition.\n-        symbols\n-      case Symbol.Global(owner, Signature.Method(name, _)) =>\n-        Symbol.Global(owner, Signature.Term(name)) :: Nil\n       case _ =>\n-        logger.trace(s\"Found no alternative for ${symbol.structure}\")\n+        logger.info(s\"Found no alternative for ${symbol.structure}\")\n         Nil\n     }\n \n-  private def companionClass(symbol: Symbol): Option[Symbol] =\n-    symbol match {\n-      case Symbol.Global(owner, Signature.Term(name)) =>\n-        Some(Symbol.Global(owner, Signature.Type(name)))\n-      case _ => None\n-    }\n+  def indexDatabase(document: s.Database): Unit = {\n+    document.documents.foreach(indexDocument)\n+  }\n \n-  private def isFreshSemanticdb(\n-      path: RelativePath,\n-      document: Document\n-  ): Option[Unit] = {\n-    val ok = Option(())\n-    val s = buffers.read(path)\n-    if (s == document.input.contents) ok\n-    else {\n-      // NOTE(olafur) it may be a bit annoying to bail on a single character\n-      // edit in the file. In the future, we can try more to make sense of\n-      // partially fresh files using something like edit distance.\n-      connection.showMessage(\n-        MessageType.Warning,\n-        \"Please recompile for up-to-date information\"\n-      )\n-      None\n+  /**\n+   * Index definitions, denotations and references in this document.\n+   * @param document Must respect the following conventions:\n+   *                 - filename must be a URI\n+   *                 - names must be sorted\n+   */\n+  def indexDocument(document: s.Document): Unit = {\n+    val input = Input.VirtualFile(document.filename, document.contents)\n+    // what do we put as the uri?\n+    val uri = URI.create(document.filename)\n+    documents.putDocument(uri, document)\n+    document.names.foreach {\n+      // TODO(olafur) handle local symbols on the fly from a `Document` in go-to-definition\n+      // local symbols don't need to be indexed globally, by skipping them we should\n+      // be able to minimize the size of the global index significantly.\n+//      case s.ResolvedName(_, sym, _) if isLocalSymbol(sym) => // Do nothing, local symbol.\n+      case s.ResolvedName(Some(s.Position(start, end)), sym, true) =>\n+        symbols.addDefinition(\n+          sym,\n+          i.Position(document.filename, Some(input.toIndexRange(start, end)))\n+        )\n+      case s.ResolvedName(Some(s.Position(start, end)), sym, false) =>\n+        symbols.addReference(\n+          document.filename,\n+          input.toIndexRange(start, end),\n+          sym\n+        )\n+      case _ =>\n+    }\n+    document.symbols.foreach {\n+      case s.ResolvedSymbol(sym, Some(denot)) =>\n+        symbols.addDenotation(sym, denot.flags, denot.name, denot.signature)\n+      case _ =>\n     }\n   }\n \n-  private def resolvedNameAt(\n-      path: RelativePath,\n-      line: Int,\n-      column: Int\n-  ): Option[ResolvedName] =\n-    for {\n-      document <- Option(documents.get(path))\n-      _ <- isFreshSemanticdb(path, document)\n-      _ = logger.info(s\"Database for $path\")\n-      name <- document.names.collectFirst {\n-        case name @ ResolvedName(pos, sym, _) if {\n-              logger.info(s\"$sym at ${pos.location}\")\n-              pos.startLine <= line &&\n-              pos.startColumn <= column &&\n-              pos.endLine >= line &&\n-              pos.endColumn >= column\n-            } =>\n-          name\n-      }\n-    } yield name\n+  def isLocalSymbol(sym: String): Boolean =\n+    !sym.endsWith(\".\") &&\n+      !sym.endsWith(\"#\") &&\n+      !sym.endsWith(\")\")\n \n }\n \n object SymbolIndexer {\n-  val emptyDocument: Document = Document(Input.None, \"\", Nil, Nil, Nil, Nil)\n+  def empty(cwd: AbsolutePath): SymbolIndexer = apply(\n+    new Notifications {"
  }
]