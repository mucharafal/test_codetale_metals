[
  {
    "id" : "6abf4b8d-b1d7-455d-b4e2-9b4ba3921f07",
    "prId" : 31,
    "comments" : [
      {
        "id" : "881d8f1f-76fa-47d9-aeb2-a688267f3de6",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "A question not related to lsp4j itself, but more in the context of rewriting this:\r\nWould it be hard to get rid of this mechanism of passing `cwd` through a var? I think that in LSP supposes that you can launch a server independently and then tell it where your project is through the initialization parameters (`rootUri`). ",
        "createdAt" : "2017-11-11T17:27:29Z",
        "updatedAt" : "2017-11-12T22:22:41Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "33f14501-a06c-4c57-bce5-192d87d59586",
        "parentId" : "881d8f1f-76fa-47d9-aeb2-a688267f3de6",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Yes, I think that's the way to do it. I wanted to take on that, as soon as I get it up and running",
        "createdAt" : "2017-11-11T17:28:45Z",
        "updatedAt" : "2017-11-12T22:22:41Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "107a984d4b9d927220b914774dfd9eb859b399c2",
    "line" : null,
    "diffHunk" : "@@ -26,7 +26,11 @@ object Main extends LazyLogging {\n       System.setErr(err)\n       logger.info(s\"Starting server in $workspace\")\n       logger.info(s\"Classpath: ${Properties.javaClassPath}\")\n-      server.start()\n+      val server = new ScalametaLanguageServer(cwd, out)\n+      val launcher = LSPLauncher.createServerLauncher(server, System.in, out)"
  },
  {
    "id" : "d8a48151-6399-4202-96e5-05781f0c6077",
    "prId" : 37,
    "comments" : [
      {
        "id" : "1d0399e1-ed6f-44c2-af37-f7007195617e",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "isn't `indexJDK = true` already the default?",
        "createdAt" : "2017-11-19T04:59:30Z",
        "updatedAt" : "2017-11-20T07:50:41Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "853b25d0-104c-4c87-8d0b-f29b4745eb5e",
        "parentId" : "1d0399e1-ed6f-44c2-af37-f7007195617e",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "It is, removed!",
        "createdAt" : "2017-11-19T12:09:29Z",
        "updatedAt" : "2017-11-20T07:50:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ed0e859accacbeb45baa83cfdbb1650efaa932da",
    "line" : null,
    "diffHunk" : "@@ -15,6 +15,7 @@ object Main extends LazyLogging {\n     val out = new PrintStream(new FileOutputStream(logPath))\n     val err = new PrintStream(new FileOutputStream(logPath))\n     val cwd = AbsolutePath(workspace)\n+    val config = ServerConfig(cwd, indexJDK = true)"
  },
  {
    "id" : "7db74609-5b9d-4aea-862d-ed0f5f926863",
    "prId" : 94,
    "comments" : [
      {
        "id" : "9bef3f27-abef-4772-b4bd-639594f5c3fd",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "s/java.io/java.nio.file/",
        "createdAt" : "2017-12-04T06:27:06Z",
        "updatedAt" : "2017-12-04T07:14:00Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a7ced027393b3dfbcf886dacedbf8d6c1f6df97b",
    "line" : 12,
    "diffHunk" : "@@ -11,7 +12,9 @@ object Main extends LazyLogging {\n   def main(args: Array[String]): Unit = {\n     // FIXME(gabro): this is vscode specific (at least the name)\n     val workspace = System.getProperty(\"vscode.workspace\")\n-    val logPath = s\"$workspace/target/metaserver.log\"\n+    val logDir = new File(s\"$workspace/.metaserver\")"
  },
  {
    "id" : "185ec305-5e9e-4f90-bd02-e3e348f4308c",
    "prId" : 158,
    "comments" : [
      {
        "id" : "05a1a407-9629-4ea9-9bc4-3d4a17c966c2",
        "parentId" : null,
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "Is this ok to have two streams to the same file?  I have never tried it,  but would have expected err and out to point to the same stream, instead of having two streams point to the same file.",
        "createdAt" : "2017-12-23T16:08:40Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "19d44cb5-00eb-490e-97f7-54b035f15115",
        "parentId" : "05a1a407-9629-4ea9-9bc4-3d4a17c966c2",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "This was already here, but it's a good question. I guess it's ok since it never gave us problems.",
        "createdAt" : "2017-12-23T16:10:09Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "affa2ea127de9483cd4eeda3dfcfcb3bb80a4322",
    "line" : 12,
    "diffHunk" : "@@ -13,10 +13,11 @@ import org.langmeta.internal.io.PathIO\n object Main extends LazyLogging {\n   def main(args: Array[String]): Unit = {\n     val cwd = PathIO.workingDirectory\n-    val config = ServerConfig(cwd)\n-    Files.createDirectories(config.configDir.toNIO)\n-    val out = new PrintStream(new FileOutputStream(config.logFile))\n-    val err = new PrintStream(new FileOutputStream(config.logFile))\n+    val configDir = cwd.resolve(\".metaserver\").toNIO\n+    val logFile = configDir.resolve(\"metaserver.log\").toFile\n+    Files.createDirectories(configDir)\n+    val out = new PrintStream(new FileOutputStream(logFile))\n+    val err = new PrintStream(new FileOutputStream(logFile))"
  },
  {
    "id" : "d15477b5-b185-43d0-b867-dffb4a5c8d59",
    "prId" : 164,
    "comments" : [
      {
        "id" : "ec40d7e2-a42e-4a9c-9255-49c72cefb40e",
        "parentId" : null,
        "author" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "body" : "Is this a standalone LSP client or merely a proxy that allows the server to talk back to the LSP client that spawned it? If it's the latter, maybe you could call it `LanguageClientProxy` or something like that?",
        "createdAt" : "2018-01-04T04:30:02Z",
        "updatedAt" : "2018-01-04T21:40:31Z",
        "lastEditedBy" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1a842789-96e9-4d60-912f-552d6cca5e43",
        "parentId" : "ec40d7e2-a42e-4a9c-9255-49c72cefb40e",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I think it's the latter (the ownership of client/server is reversed, i.e. the client spawns the server). In lsp4j this is called `client`, in the previous implementation we called it `connection`. How about `clientConnection`? ðŸ˜› ",
        "createdAt" : "2018-01-04T09:27:49Z",
        "updatedAt" : "2018-01-04T21:40:31Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9c6a3197-3692-4520-8ed0-9c2130860b47",
        "parentId" : "ec40d7e2-a42e-4a9c-9255-49c72cefb40e",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I kept it identical to the lsp4j name, which is `LanguageClient`. \r\n\r\nIt's a true \"client\" in the sense that you can send any generic json rpc requests to a server and get responses back. I don't think a proxy or clientConnection improve readability.",
        "createdAt" : "2018-01-04T20:27:06Z",
        "updatedAt" : "2018-01-04T21:41:50Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "91848703d00af951b1f55d62236ec4f5ae50851b",
    "line" : null,
    "diffHunk" : "@@ -29,11 +32,17 @@ object Main extends LazyLogging {\n       // messes up with the client, since stdout is used for the language server protocol\n       System.setOut(out)\n       System.setErr(err)\n+      val client = new LanguageClient(stdout)"
  },
  {
    "id" : "bdcdac3c-f53a-4c2b-9380-a56e7b385ca1",
    "prId" : 164,
    "comments" : [
      {
        "id" : "9410d70f-cdad-4b2f-814d-9ee2dd17aae1",
        "parentId" : null,
        "author" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "body" : "Maybe it would make sense to make `s` an explicit parameter of `ScalametaLanguageServer`, much like it is an explicit parameter of `LanguageServer`?",
        "createdAt" : "2018-01-04T04:35:07Z",
        "updatedAt" : "2018-01-04T21:40:31Z",
        "lastEditedBy" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f9c32a37-9199-4d0b-ad9f-3441079126fa",
        "parentId" : "9410d70f-cdad-4b2f-814d-9ee2dd17aae1",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Done.",
        "createdAt" : "2018-01-04T20:27:46Z",
        "updatedAt" : "2018-01-04T21:41:50Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "91848703d00af951b1f55d62236ec4f5ae50851b",
    "line" : null,
    "diffHunk" : "@@ -29,11 +32,17 @@ object Main extends LazyLogging {\n       // messes up with the client, since stdout is used for the language server protocol\n       System.setOut(out)\n       System.setErr(err)\n+      val client = new LanguageClient(stdout)\n       logger.info(s\"Starting server in $cwd\")\n       logger.info(s\"Classpath: ${Properties.javaClassPath}\")\n-      val server = new ScalametaLanguageServer(cwd, stdin, stdout, out)\n-      LSPLogger.connection = Some(server.connection)\n-      server.start()\n+      val metaserver = new ScalametaLanguageServer(cwd, client)(s)"
  }
]