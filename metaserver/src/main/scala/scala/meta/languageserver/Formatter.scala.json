[
  {
    "id" : "495b0dfc-1471-43b3-bab7-1c4c773b1938",
    "prId" : 23,
    "comments" : [
      {
        "id" : "b078a999-d55e-4650-826f-233cc9d20a12",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "why are you printing to `out` instead of using the logger?",
        "createdAt" : "2017-11-14T09:10:25Z",
        "updatedAt" : "2017-11-14T20:08:40Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1ca0121e-594d-4e25-90ef-3968f3bfd6c6",
        "parentId" : "b078a999-d55e-4650-826f-233cc9d20a12",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Because this is actually run before we redirect stdout, so if we use logger we it crashes the vscode client. However, I clearly should just redirect stdout before loading scalafmt ðŸ˜… ",
        "createdAt" : "2017-11-14T18:46:20Z",
        "updatedAt" : "2017-11-14T20:08:40Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "13242fd3-2c3b-4d36-8f8a-dda81cf70af5",
        "parentId" : "b078a999-d55e-4650-826f-233cc9d20a12",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Fixed, removed `out` parameter.",
        "createdAt" : "2017-11-14T19:20:58Z",
        "updatedAt" : "2017-11-14T20:08:40Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e9272f240feb4f00bdea5ee50e2808699cd0d0e",
    "line" : null,
    "diffHunk" : "@@ -2,20 +2,21 @@ package scala.meta.languageserver\n \n import scala.language.reflectiveCalls\n \n-import java.io.File\n import java.io.PrintStream\n import scala.reflect.internal.util.ScalaClassLoader.URLClassLoader\n+import com.typesafe.scalalogging.LazyLogging\n \n abstract class Formatter {\n   def format(code: String, configFile: String, filename: String): String\n }\n-object Formatter {\n+object Formatter extends LazyLogging {\n   def classloadScalafmt(version: String, out: PrintStream): Formatter = {\n     val urls = Jars\n       .fetch(\"com.geirsson\", \"scalafmt-cli_2.12\", version, out)\n       .iterator\n       .map(_.toURI.toURL)\n       .toArray\n+    out.println(s\"Classloading scalafmt with ${urls.length} downloaded jars\")"
  },
  {
    "id" : "f59d29ab-055b-49e4-9dd9-c742ada6cb7c",
    "prId" : 37,
    "comments" : [
      {
        "id" : "e2e6d461-fbce-4edb-8820-89d2fe7505d6",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "micro-optimization, but this could be a SAM\r\n\r\n```scala\r\ndef empty: Formatter = (code, _, _) => code\r\n```",
        "createdAt" : "2017-11-19T04:57:44Z",
        "updatedAt" : "2017-11-20T07:50:41Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2a230aa9-a472-4910-96d0-7dda6a36e5fa",
        "parentId" : "e2e6d461-fbce-4edb-8820-89d2fe7505d6",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "also maybe `noop` instead of `empty`?",
        "createdAt" : "2017-11-19T05:00:41Z",
        "updatedAt" : "2017-11-20T07:50:41Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9dfe6972-c7db-4aab-a113-1e09d0fb8552",
        "parentId" : "e2e6d461-fbce-4edb-8820-89d2fe7505d6",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Renamed to noop, realized there is actually another method to format using the default config so I added that one instead of converting to SAM. To double check it worked as expected I added `FormatterTest`",
        "createdAt" : "2017-11-19T12:09:05Z",
        "updatedAt" : "2017-11-20T07:50:41Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ed0e859accacbeb45baa83cfdbb1650efaa932da",
    "line" : null,
    "diffHunk" : "@@ -10,6 +10,13 @@ abstract class Formatter {\n   def format(code: String, configFile: String, filename: String): String\n }\n object Formatter extends LazyLogging {\n+  def empty: Formatter = new Formatter {"
  },
  {
    "id" : "739c7155-6111-462a-8718-cc4396fed2b6",
    "prId" : 158,
    "comments" : [
      {
        "id" : "b9daf84a-346e-47b6-bc52-1043b3102c8d",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "this isn't strictly related to this PR, but I think it makes sense to save some allocations",
        "createdAt" : "2017-12-23T15:55:48Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "affa2ea127de9483cd4eeda3dfcfcb3bb80a4322",
    "line" : 5,
    "diffHunk" : "@@ -19,7 +19,7 @@ abstract class Formatter {\n object Formatter extends LazyLogging {\n \n   /** Returns formatter that does nothing */\n-  def noop: Formatter = new Formatter {\n+  lazy val noop: Formatter = new Formatter {"
  }
]