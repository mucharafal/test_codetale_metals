[
  {
    "id" : "7d5eca4e-35fa-4ba3-a0ec-65fb6835efd2",
    "prId" : 67,
    "comments" : [
      {
        "id" : "b4ba97ff-a0b8-41d3-80f4-4b363a63395c",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Note that `CompletionItemKind` and `SymbolKind` are different things and even same names correspond to different numbers ðŸ’£  I think you should use `CompletionItemKind` here. It's already defined [here](https://github.com/scalameta/language-server/blob/master/languageserver/src/main/scala/langserver/types/types.scala#L89), but is by the way incomplete in respect to the v3 of the LSP spec.",
        "createdAt" : "2017-11-27T13:00:51Z",
        "updatedAt" : "2017-11-28T10:19:34Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4f2c238e-2dc4-4b22-b46d-2a60ffd4a726",
        "parentId" : "b4ba97ff-a0b8-41d3-80f4-4b363a63395c",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Argh, thanks, that's a huge mistake I've made. A newtype would've prevented this :(",
        "createdAt" : "2017-11-27T14:30:06Z",
        "updatedAt" : "2017-11-28T10:19:34Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "840b83de-2e72-415f-a2ec-eb9c15c3597f",
        "parentId" : "b4ba97ff-a0b8-41d3-80f4-4b363a63395c",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "And I think this is one thing we should change in that code: there's no point to copy the untyped spec style with \"named number\" if we can have something more Scala-idiomatic (I wanted to say enums, but ðŸ˜…  you know..)",
        "createdAt" : "2017-11-27T14:34:35Z",
        "updatedAt" : "2017-11-28T10:19:34Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1d584f6c-bb54-42e4-81f8-7ddd50cf1315",
        "parentId" : "b4ba97ff-a0b8-41d3-80f4-4b363a63395c",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Also, I found https://github.com/Microsoft/language-server-protocol/commit/05e3af34464671a788679080f06558db52d1097b\r\n\r\nIn version 4 of the protocol we'll be able to specify which symbols we support :)",
        "createdAt" : "2017-11-27T14:39:59Z",
        "updatedAt" : "2017-11-28T10:19:34Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fc27caea-5089-4dc8-842f-816059f425c0",
        "parentId" : "b4ba97ff-a0b8-41d3-80f4-4b363a63395c",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "> And I think this is one thing we should change in that code: there's no point to copy the untyped spec style with \"named number\" if we can have something more Scala-idiomatic\r\n\r\nYes, and ADT could be a better choice here, or even just a value class.",
        "createdAt" : "2017-11-27T14:40:37Z",
        "updatedAt" : "2017-11-28T10:19:34Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "39f36028-8ccd-44ba-b269-71cb1d3d0d1a",
        "parentId" : "b4ba97ff-a0b8-41d3-80f4-4b363a63395c",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "> In version 4 of the protocol we'll be able to specify which symbols we support :)\r\n\r\n~~I thought it's included in v3 (not released yet), isn't it?~~ I'm confused about its versions now ðŸ˜• ",
        "createdAt" : "2017-11-27T14:46:17Z",
        "updatedAt" : "2017-11-28T10:19:34Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ea4414fb-1c96-42a4-98d2-24b21a708ded",
        "parentId" : "b4ba97ff-a0b8-41d3-80f4-4b363a63395c",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Btw, in that referred commit, a special symbol kind for `null` made me laugh :rofl: ",
        "createdAt" : "2017-11-27T14:51:00Z",
        "updatedAt" : "2017-11-28T10:19:34Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1362e9fe8ce917113c7fe81b6e219c678ab423ae",
    "line" : null,
    "diffHunk" : "@@ -32,11 +33,25 @@ object CompletionProvider extends LazyLogging {\n         isUsedLabel += label\n         items += CompletionItem(\n           label = label,\n-          detail = Some(r.sym.signatureString)\n+          detail = Some(r.sym.signatureString),\n+          kind = symbolKind(compiler)(r)\n         )\n       }\n     }\n     CompletionList(isIncomplete = false, items = items.result())\n   }\n \n+  private def symbolKind(c: Global)(r: c.CompletionResult#M): Option[Int] = {\n+    if (r.sym.isConstructor) Some(SymbolKind.Constructor)\n+    else if (r.sym.isModuleOrModuleClass) Some(SymbolKind.Module)\n+    else if (r.sym.isTraitOrInterface) Some(SymbolKind.Interface)\n+    else if (r.sym.isClass) Some(SymbolKind.Class)\n+    else if (r.sym.isPackageObject) Some(SymbolKind.Namespace)\n+    else if (r.sym.isPackage) Some(SymbolKind.Package)\n+    else if (r.sym.isMethod) Some(SymbolKind.Method)\n+    else if (r.sym.isVal) Some(SymbolKind.Constant)\n+    else if (r.sym.isVar) Some(SymbolKind.Variable)"
  },
  {
    "id" : "c57b9ac3-7e2e-4bcc-b7cc-845313ddc831",
    "prId" : 67,
    "comments" : [
      {
        "id" : "e63b47c7-83c0-4eb7-bec2-2e09b1b5a87e",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Similarly to this special case, how about using `CompletionItemKind.Property` for vals whose owner is not an object?",
        "createdAt" : "2017-11-27T15:26:16Z",
        "updatedAt" : "2017-11-28T10:19:34Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0bacd439-b32f-458f-b8be-c8f88e0551b7",
        "parentId" : "e63b47c7-83c0-4eb7-bec2-2e09b1b5a87e",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Alternatively, `Field` could be used for type members (projections) and `Property` for this case.",
        "createdAt" : "2017-11-27T15:28:47Z",
        "updatedAt" : "2017-11-28T10:19:34Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8c27af8a-bd5f-4bdc-a906-bf9b48fcab22",
        "parentId" : "e63b47c7-83c0-4eb7-bec2-2e09b1b5a87e",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I honestly like `Field` for case classes fields. It's quite natural and consistent with my TypeScript experience with VSCode. Can you elaborate on this\r\n\r\n> how about using CompletionItemKind.Property for vals whose owner is not an object?\r\n\r\n?",
        "createdAt" : "2017-11-28T10:20:49Z",
        "updatedAt" : "2017-11-28T10:20:49Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1362e9fe8ce917113c7fe81b6e219c678ab423ae",
    "line" : null,
    "diffHunk" : "@@ -34,23 +34,23 @@ object CompletionProvider extends LazyLogging {\n         items += CompletionItem(\n           label = label,\n           detail = Some(r.sym.signatureString),\n-          kind = symbolKind(compiler)(r)\n+          kind = completionItemKind(compiler)(r)\n         )\n       }\n     }\n     CompletionList(isIncomplete = false, items = items.result())\n   }\n \n-  private def symbolKind(c: Global)(r: c.CompletionResult#M): Option[Int] = {\n-    if (r.sym.isConstructor) Some(SymbolKind.Constructor)\n-    else if (r.sym.isModuleOrModuleClass) Some(SymbolKind.Module)\n-    else if (r.sym.isTraitOrInterface) Some(SymbolKind.Interface)\n-    else if (r.sym.isClass) Some(SymbolKind.Class)\n-    else if (r.sym.isPackageObject) Some(SymbolKind.Namespace)\n-    else if (r.sym.isPackage) Some(SymbolKind.Package)\n-    else if (r.sym.isMethod) Some(SymbolKind.Method)\n-    else if (r.sym.isVal) Some(SymbolKind.Constant)\n-    else if (r.sym.isVar) Some(SymbolKind.Variable)\n+  private def completionItemKind(c: Global)(r: c.CompletionResult#M): Option[Int] = {\n+    if (r.sym.isPackage) Some(CompletionItemKind.Module)\n+    else if (r.sym.isModuleOrModuleClass) Some(CompletionItemKind.Module)\n+    else if (r.sym.isTraitOrInterface) Some(CompletionItemKind.Interface)\n+    else if (r.sym.isClass) Some(CompletionItemKind.Class)\n+    else if (r.sym.isPackageObject) Some(CompletionItemKind.Module)\n+    else if (r.sym.isMethod) Some(CompletionItemKind.Method)\n+    else if (r.sym.isField && r.sym.owner != null && r.sym.owner.isCaseClass) Some(CompletionItemKind.Field)"
  },
  {
    "id" : "9773ef8b-a257-4f60-8289-125137e72cbe",
    "prId" : 67,
    "comments" : [
      {
        "id" : "219a4c19-d0b1-47a4-86d8-cec9d3b5f2ea",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Did you try `.isCaseAccessor` or `sym.isCase && sym.isVal`?",
        "createdAt" : "2017-11-27T21:00:24Z",
        "updatedAt" : "2017-11-28T10:19:34Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cc339380-9c35-4b12-8981-765869c713e3",
        "parentId" : "219a4c19-d0b1-47a4-86d8-cec9d3b5f2ea",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "ah, no, I haven't tried. Still many `isXXX` methods I'm missing :D ",
        "createdAt" : "2017-11-28T01:09:15Z",
        "updatedAt" : "2017-11-28T10:19:34Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9fb99d6f-ba4f-4e4e-a3b7-bbf33cb2f958",
        "parentId" : "219a4c19-d0b1-47a4-86d8-cec9d3b5f2ea",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "`isCaseAccessor` seems to work!",
        "createdAt" : "2017-11-28T10:15:21Z",
        "updatedAt" : "2017-11-28T10:19:34Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1362e9fe8ce917113c7fe81b6e219c678ab423ae",
    "line" : null,
    "diffHunk" : "@@ -32,11 +33,28 @@ object CompletionProvider extends LazyLogging {\n         isUsedLabel += label\n         items += CompletionItem(\n           label = label,\n-          detail = Some(r.sym.signatureString)\n+          detail = Some(r.sym.signatureString),\n+          kind = completionItemKind(compiler)(r)\n         )\n       }\n     }\n     CompletionList(isIncomplete = false, items = items.result())\n   }\n \n+  private def completionItemKind(\n+      c: Global\n+  )(r: c.CompletionResult#M): Option[Int] = {\n+    if (r.sym.isPackage) Some(CompletionItemKind.Module)\n+    else if (r.sym.isModuleOrModuleClass) Some(CompletionItemKind.Module)\n+    else if (r.sym.isTraitOrInterface) Some(CompletionItemKind.Interface)\n+    else if (r.sym.isClass) Some(CompletionItemKind.Class)\n+    else if (r.sym.isPackageObject) Some(CompletionItemKind.Module)\n+    else if (r.sym.isMethod) Some(CompletionItemKind.Method)\n+    else if (r.sym.isField && r.sym.owner != null && r.sym.owner.isCaseClass)"
  },
  {
    "id" : "822f4836-4bcb-4f7a-a9ff-36c9c7a3109c",
    "prId" : 67,
    "comments" : [
      {
        "id" : "97739099-20cd-4d9b-80ab-c052e06b7dc2",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Would it make sense to use something else like `Reference` just to distinguish it from objects? Seems like `Namespace` is missing :/ ",
        "createdAt" : "2017-11-27T21:02:45Z",
        "updatedAt" : "2017-11-28T10:19:34Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c66f8186-8cf9-4c09-a0cc-c28fbc9e105c",
        "parentId" : "97739099-20cd-4d9b-80ab-c052e06b7dc2",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "`Reference` looks very strange on vscode, but I was thinking to simply fallback to `Value` for everything that doesn't have a proper fit in `CompletionItemKind`",
        "createdAt" : "2017-11-28T01:08:03Z",
        "updatedAt" : "2017-11-28T10:19:34Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "877ed046-53c2-47fd-b979-8f044bb0d2ce",
        "parentId" : "97739099-20cd-4d9b-80ab-c052e06b7dc2",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I think I'll just \"copy\" the Java LSP implementation: https://github.com/eclipse/eclipse.jdt.ls/blob/3f0b5c700f971ec19aaee722b6d89f4f225090bc/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/contentassist/CompletionProposalRequestor.java#L94",
        "createdAt" : "2017-11-28T10:15:29Z",
        "updatedAt" : "2017-11-28T10:19:34Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "565e0ca0-e33f-4974-b7b9-800bcd82bebd",
        "parentId" : "97739099-20cd-4d9b-80ab-c052e06b7dc2",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I also wouldn't worry too much for now, I'm sure the LSP will evolve in this sense and v4 may include more symbols.",
        "createdAt" : "2017-11-28T10:19:00Z",
        "updatedAt" : "2017-11-28T10:19:34Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1362e9fe8ce917113c7fe81b6e219c678ab423ae",
    "line" : null,
    "diffHunk" : "@@ -32,11 +33,28 @@ object CompletionProvider extends LazyLogging {\n         isUsedLabel += label\n         items += CompletionItem(\n           label = label,\n-          detail = Some(r.sym.signatureString)\n+          detail = Some(r.sym.signatureString),\n+          kind = completionItemKind(compiler)(r)\n         )\n       }\n     }\n     CompletionList(isIncomplete = false, items = items.result())\n   }\n \n+  private def completionItemKind(\n+      c: Global\n+  )(r: c.CompletionResult#M): Option[Int] = {\n+    if (r.sym.isPackage) Some(CompletionItemKind.Module)"
  },
  {
    "id" : "eab26b68-7828-4d83-8d6b-304bfb7e7c9c",
    "prId" : 67,
    "comments" : [
      {
        "id" : "907f6f6f-76ab-4520-af46-04b1dccb846a",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "If you inline this method to `completions` then you avoid the hairy path dependent signature. scala-compiler has lots of nested methods in inside methods.",
        "createdAt" : "2017-11-27T21:05:49Z",
        "updatedAt" : "2017-11-28T10:19:34Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1362e9fe8ce917113c7fe81b6e219c678ab423ae",
    "line" : null,
    "diffHunk" : "@@ -32,11 +33,28 @@ object CompletionProvider extends LazyLogging {\n         isUsedLabel += label\n         items += CompletionItem(\n           label = label,\n-          detail = Some(r.sym.signatureString)\n+          detail = Some(r.sym.signatureString),\n+          kind = completionItemKind(compiler)(r)\n         )\n       }\n     }\n     CompletionList(isIncomplete = false, items = items.result())\n   }\n \n+  private def completionItemKind("
  },
  {
    "id" : "9f4d137e-1f8e-4501-9432-e23a3fbc4fee",
    "prId" : 67,
    "comments" : [
      {
        "id" : "753e2b35-cd96-441d-a762-197c688f6413",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Would be nice if we could to get rid of that `Option[Int]` in favor of a wrapper class \r\n\r\n```scala\r\ncase class CompletionItemKind(id: Int)\r\nobject CompletionItemKind {\r\n  implicit val writes: Writes[CompletionItemKind] = new Writes[CompletionItemKind] {\r\n    override def writes(o: CompletionItemKind) = JsNumber(o.id)\r\n  }\r\n```\r\n\r\nNot blocking in this PR, but maybe in the future.",
        "createdAt" : "2017-11-27T21:11:15Z",
        "updatedAt" : "2017-11-28T10:19:34Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1362e9fe8ce917113c7fe81b6e219c678ab423ae",
    "line" : null,
    "diffHunk" : "@@ -32,11 +33,28 @@ object CompletionProvider extends LazyLogging {\n         isUsedLabel += label\n         items += CompletionItem(\n           label = label,\n-          detail = Some(r.sym.signatureString)\n+          detail = Some(r.sym.signatureString),\n+          kind = completionItemKind(compiler)(r)\n         )\n       }\n     }\n     CompletionList(isIncomplete = false, items = items.result())\n   }\n \n+  private def completionItemKind(\n+      c: Global\n+  )(r: c.CompletionResult#M): Option[Int] = {"
  },
  {
    "id" : "963412a7-3099-4c49-b09a-6d7147c2b8b9",
    "prId" : 76,
    "comments" : [
      {
        "id" : "46a12a01-c02b-4b17-8da2-2ed4d508b24a",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "here I'm penalizying `copy` on case classes since I want it after user-defined methods/vals.\r\nAny other similar cases that you guys can think of?\r\nDoes somebody know a way to check whether a symbol is synthesized by the compiler?",
        "createdAt" : "2017-11-29T11:07:04Z",
        "updatedAt" : "2017-11-29T14:16:21Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c8a10ea0-5801-4e31-bf77-0064354963be",
        "parentId" : "46a12a01-c02b-4b17-8da2-2ed4d508b24a",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "`.isSynthetic` may do the trick, I think that will also catch synthetic productArity,productIterator,productPrefix,productElement methods.",
        "createdAt" : "2017-11-29T11:53:08Z",
        "updatedAt" : "2017-11-29T14:16:21Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8fc44ad0-21c1-4ee1-807b-977413f8167b",
        "parentId" : "46a12a01-c02b-4b17-8da2-2ed4d508b24a",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Could you add this as a comment? Also it's not obvious to me at the first sight why the increment is different for some cases. I think adding some comments for special cases would help a lot in reading this code later.",
        "createdAt" : "2017-11-29T12:03:37Z",
        "updatedAt" : "2017-11-29T14:16:21Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "576b7f08-54d9-428a-918a-6eca9cfce4ef",
        "parentId" : "46a12a01-c02b-4b17-8da2-2ed4d508b24a",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Thank you @olafurpg, `.isSynthetic` seems to be working :)\r\n\r\n@laughedelic I'll add some comments, also specifying that I've essentially ported https://github.com/scala-ide/scala-ide/blob/a17ace0ee1be1875b8992664069d8ad26162eeee/org.scala-ide.sdt.core/src/org/scalaide/core/completion/ProposalRelevanceCalculator.scala plus some tweaks. I've respected the weights of the original implementation, but I don't think it's an exact science.\r\n\r\nThe only weight that I blindly ported without really understanding why is `hasPackageFlag`. I have a vague understanding of what it means, but maybe @olafurpg can shed some light?",
        "createdAt" : "2017-11-29T14:00:27Z",
        "updatedAt" : "2017-11-29T14:16:21Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e196215ed27745a3c27cb7aa1eb6a3d77d34a7e",
    "line" : null,
    "diffHunk" : "@@ -32,6 +32,27 @@ object CompletionProvider extends LazyLogging {\n       else CompletionItemKind.Value\n     }\n \n+    def computeRelevance(\n+        sym: Symbol,\n+        viaView: Symbol,\n+        inherited: Boolean\n+    ): Int = {\n+      var relevance = 0\n+      if (sym.isLocalToBlock) relevance += 10\n+      if (sym.hasGetter) relevance += 5\n+      if (!inherited) relevance += 10\n+      if (viaView == NoSymbol) relevance += 20\n+      if (!sym.hasPackageFlag) relevance += 30\n+      if (sym.isCaseAccessor) relevance += 10\n+      if (sym.isPublic) relevance += 10\n+      if (sym.owner != definitions.AnyClass && sym.owner != definitions.AnyRefClass && sym.owner != definitions.ObjectClass)\n+        relevance += 40\n+      if (sym.owner != null && sym.owner.isCaseClass && sym.nameString == \"copy\") {"
  },
  {
    "id" : "d1344218-482f-4691-96e7-1a055b32a1fe",
    "prId" : 76,
    "comments" : [
      {
        "id" : "057f347e-83fc-4e77-8e6f-346f29057ebf",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "sorting is lexicographic, so we can't just do `idx.toString` because that would lead to `0, 1, 10, 2...`.",
        "createdAt" : "2017-11-29T11:42:59Z",
        "updatedAt" : "2017-11-29T14:16:21Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e196215ed27745a3c27cb7aa1eb6a3d77d34a7e",
    "line" : null,
    "diffHunk" : "@@ -41,17 +62,28 @@ object CompletionProvider extends LazyLogging {\n     val position = unit.position(cursor.offset)\n     val isUsedLabel = mutable.Set.empty[String]\n     val items = List.newBuilder[CompletionItem]\n-    safeCompletionsAt(compiler, position).foreach { r =>\n-      val label = r.symNameDropLocal.decoded\n-      if (!isUsedLabel(label)) {\n-        isUsedLabel += label\n-        items += CompletionItem(\n-          label = label,\n-          detail = Some(r.sym.signatureString),\n-          kind = Some(completionItemKind(r))\n-        )\n+    safeCompletionsAt(compiler, position)\n+      .sortBy {\n+        case TypeMember(sym, _, true, inherited, viaView) =>\n+          // logger.debug(s\"Relevance of ${sym.name}: ${computeRelevance(sym, viaView, inherited)}\")\n+          (-computeRelevance(sym, viaView, inherited), sym.nameString)\n+        case ScopeMember(sym, _, true, _) =>\n+          (-computeRelevance(sym, NoSymbol, false), sym.nameString)\n+        case r => (0, r.sym.nameString)\n+      }\n+      .zipWithIndex\n+      .foreach { case (r, idx) =>\n+        val label = r.symNameDropLocal.decoded\n+        if (!isUsedLabel(label)) {\n+          isUsedLabel += label\n+          items += CompletionItem(\n+            label = label,\n+            detail = Some(r.sym.signatureString),\n+            kind = Some(completionItemKind(r)),\n+            sortText = Some(f\"${idx}%05d\")"
  }
]