[
  {
    "id" : "3b7fd227-c3fd-4410-8f88-496887bec032",
    "prId" : 93,
    "comments" : [
      {
        "id" : "5604945b-ea54-401b-b585-3ca99974f19a",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I was gonna propose that we convert this into some `Observable[Source]` for the active open buffer but I don't think that will work since we don't receive a notification when the active/focused buffer changes. We only receive notifications didChange and documentSymbols. \r\n\r\nI think keeping this in `Buffers` is actually not as bad as it seems at first sight. Can we maybe hook into the `didClose` event to remove stale sources?",
        "createdAt" : "2017-12-04T06:58:00Z",
        "updatedAt" : "2017-12-04T23:49:22Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "75666cad-a852-4138-b7f2-f0416b8ca991",
        "parentId" : "5604945b-ea54-401b-b585-3ca99974f19a",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "> I think keeping this in Buffers is actually not as bad as it seems at first sight.\r\n\r\nIs the parsed `Source` per buffer useful anywhere else?\r\n\r\n> Can we maybe hook into the didClose event to remove stale sources?\r\n\r\nGood idea, I will add it.",
        "createdAt" : "2017-12-04T20:10:35Z",
        "updatedAt" : "2017-12-04T23:49:22Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8f8e495b-3fa8-4549-9d4c-3ee33ed55be6",
        "parentId" : "5604945b-ea54-401b-b585-3ca99974f19a",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "> Is the parsed Source per buffer useful anywhere else?\r\n\r\nYes, in scalafix. We should share the pipeline between the two, putting it in Buffers is a good start.",
        "createdAt" : "2017-12-04T21:52:38Z",
        "updatedAt" : "2017-12-04T23:49:22Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "490e3e85-bd03-4604-b38f-9d91d336f088",
        "parentId" : "5604945b-ea54-401b-b585-3ca99974f19a",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Added hook for `didClose` event in d890af94d4d84e3e2267a08f8b92ce761fa4a7a7. Should it also remove from the `contents` map?",
        "createdAt" : "2017-12-04T23:43:25Z",
        "updatedAt" : "2017-12-04T23:49:22Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7b17cbf33208eb27890af0e9b1a6a7b9016afbcb",
    "line" : 25,
    "diffHunk" : "@@ -38,6 +39,18 @@ class Buffers private (\n     read(cwd.resolve(path))\n   def read(path: AbsolutePath): String =\n     Option(contents.get(path)).getOrElse(readFromDisk(path))\n+\n+  private val sources: JMap[AbsolutePath, Source] = new ConcurrentHashMap()"
  },
  {
    "id" : "69fa9c5a-a877-428e-a8af-7c2dcc3d0e7a",
    "prId" : 93,
    "comments" : [
      {
        "id" : "c1988158-d96e-4580-9202-171d5675c818",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I propose we move the parsing logic to `Parser` https://github.com/scalameta/language-server/blob/dafe6bcab6e8f29cd145aba645320d92b982091d/metaserver/src/main/scala/scala/meta/languageserver/Parser.scala#L12 and remove `import scala.meta._` (it brings a lot into scope). \r\n\r\nIn `Parser` I think we can also use a more lenient dialect than the default like scalafix does https://github.com/scalacenter/scalafix/blob/bb0edd04fa59c291e4174f3900314b5f56e37e91/scalafix-core/shared/src/main/scala/scalafix/internal/config/ScalafixConfig.scala#L74-L101 this allows us to parse as much syntax as possible.",
        "createdAt" : "2017-12-04T07:07:02Z",
        "updatedAt" : "2017-12-04T23:49:22Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c29f8e9f-7ac0-4a7c-ab86-897411b844a7",
        "parentId" : "c1988158-d96e-4580-9202-171d5675c818",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "I'm not sure I'm following you here. I'll check the linked code a bit later.",
        "createdAt" : "2017-12-04T20:13:32Z",
        "updatedAt" : "2017-12-04T23:49:22Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b9734a57-fb0b-4624-b5f3-42e840014ba2",
        "parentId" : "c1988158-d96e-4580-9202-171d5675c818",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "`DefaultDialect(String).parse[Source]` will parse a String with `DefaultDialect`. The dialect indicates what syntax is allowed like trailing commas, literal types, etc",
        "createdAt" : "2017-12-04T21:53:32Z",
        "updatedAt" : "2017-12-04T23:49:22Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a712a08b-f746-476b-b7cc-3041e5135fb8",
        "parentId" : "c1988158-d96e-4580-9202-171d5675c818",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Check a0b0164e7d17a84e644a6a46fa846681c5a5a273, I'm not sure it's what you meant. I just used `ScalafixConfig.DefaultDialect` for parsing.",
        "createdAt" : "2017-12-04T23:42:14Z",
        "updatedAt" : "2017-12-04T23:49:22Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7b17cbf33208eb27890af0e9b1a6a7b9016afbcb",
    "line" : null,
    "diffHunk" : "@@ -38,6 +39,18 @@ class Buffers private (\n     read(cwd.resolve(path))\n   def read(path: AbsolutePath): String =\n     Option(contents.get(path)).getOrElse(readFromDisk(path))\n+\n+  private val sources: JMap[AbsolutePath, Source] = new ConcurrentHashMap()\n+  // Tries to parse and record it or fallback to an old source if it existed\n+  def source(path: AbsolutePath): Option[Source] =\n+    read(path)\n+      .parse[Source]"
  }
]