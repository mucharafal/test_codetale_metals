[
  {
    "id" : "0e7ed1a2-eaa2-4bc4-b72d-8558f900e22f",
    "prId" : 23,
    "comments" : [
      {
        "id" : "2f2ea455-05d0-4058-bfe4-d98640f0de99",
        "parentId" : null,
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "Why are we using IO and NIO?",
        "createdAt" : "2017-11-11T16:42:11Z",
        "updatedAt" : "2017-11-14T20:08:40Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6f8d9acf-4448-45f1-bb9b-d1af3a521d3f",
        "parentId" : "2f2ea455-05d0-4058-bfe4-d98640f0de99",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "java.io is only for `File.pathSeparator`, otherwise we use nio for I/O work",
        "createdAt" : "2017-11-11T16:46:34Z",
        "updatedAt" : "2017-11-14T20:08:40Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3d4eb762-a684-46f4-8604-3642a20a9156",
        "parentId" : "2f2ea455-05d0-4058-bfe4-d98640f0de99",
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "NIO Filesystem has a platform independent separator if you want to stick with the NIO api.",
        "createdAt" : "2017-11-11T16:59:42Z",
        "updatedAt" : "2017-11-14T20:08:40Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "595b366b-1acc-4e6a-b16c-659368f7b86f",
        "parentId" : "2f2ea455-05d0-4058-bfe4-d98640f0de99",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I think I prefer java.io.File.pathSeparator over FileSystems.getDefault.getSeparator",
        "createdAt" : "2017-11-11T17:03:46Z",
        "updatedAt" : "2017-11-14T20:08:40Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5e9272f240feb4f00bdea5ee50e2808699cd0d0e",
    "line" : 4,
    "diffHunk" : "@@ -0,0 +1,51 @@\n+package scala.meta.languageserver\n+\n+import java.io.File\n+import java.nio.file.Files"
  },
  {
    "id" : "eff09b7e-9583-4260-8a01-8df3293bd47a",
    "prId" : 23,
    "comments" : [
      {
        "id" : "4ca857ad-bf65-4fa3-b87a-a96cdc43bd72",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "since we have pprint as a dependency, you can probably just do `pprint.stringify(this)`",
        "createdAt" : "2017-11-14T09:36:04Z",
        "updatedAt" : "2017-11-14T20:08:40Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9c1ec3b0-10a6-4da6-8d92-d5df10dd3732",
        "parentId" : "4ca857ad-bf65-4fa3-b87a-a96cdc43bd72",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I can't find `pprint.stringify`, it seems to have been removed in 0.5. I don't think pprint includes the names of the fields. This string appears in the logs whenever a new presentation compiler is loaded so I customized it to make it compact and readable (full classpath can be huge).",
        "createdAt" : "2017-11-14T18:43:57Z",
        "updatedAt" : "2017-11-14T20:08:40Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5e9272f240feb4f00bdea5ee50e2808699cd0d0e",
    "line" : 35,
    "diffHunk" : "@@ -0,0 +1,94 @@\n+package scala.meta.languageserver\n+\n+import java.io.File\n+import java.nio.file.Files\n+import java.nio.file.Paths\n+import java.util.Properties\n+import com.typesafe.scalalogging.LazyLogging\n+import org.langmeta.io.AbsolutePath\n+import org.langmeta.io.Classpath\n+\n+/**\n+ * Configuration to load up a presentation compiler.\n+ *\n+ * In sbt, one compiler config typically corresponds to one project+config.\n+ * For example one sbt project with test/main/it configurations has three\n+ * CompilerConfig.\n+ *\n+ * @param sources list of source files for this project\n+ * @param scalacOptions space separated list of flags to pass to the Scala compiler\n+ * @param dependencyClasspath File.pathSeparated list of *.jar and classDirectories.\n+ *                  Includes both dependencyClasspath and classDirectory.\n+ * @param classDirectory The output directory where *.class files are emitted\n+ *                       for this project.\n+ * @param sourceJars File.pathSeparated list of *-sources.jar from the\n+ *                   dependencyClasspath.\n+ */\n+case class CompilerConfig(\n+    sources: List[AbsolutePath],\n+    scalacOptions: List[String],\n+    classDirectory: AbsolutePath,\n+    dependencyClasspath: List[AbsolutePath],\n+    sourceJars: List[AbsolutePath]\n+) {\n+  override def toString: String =\n+    s\"CompilerConfig(\" +"
  }
]