[
  {
    "id" : "9360bde6-fb42-4b9f-b1b3-991ee0ffa93a",
    "prId" : 188,
    "comments" : [
      {
        "id" : "bf841035-c51f-4218-8cda-2523e66a1c52",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "I'm not sure what is happening here and why this huge if-else chain is necessary ðŸ¤” ",
        "createdAt" : "2018-02-04T01:18:44Z",
        "updatedAt" : "2018-02-05T23:19:55Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a7d6d979e9a1d925c6c6b8a0472ab8ece80c41b8",
    "line" : 62,
    "diffHunk" : "@@ -50,7 +53,37 @@ object HoverProvider extends LazyLogging {\n       symbol: m.Symbol,\n       data: SymbolData\n   ): Option[m.Tree] = {\n-    val denotation = m.Denotation(data.flags, data.name, data.signature, Nil)\n+    val flags = {\n+      var flags = 0L\n+      def mflip(dbit: Long) = flags ^= dbit\n+      if (data.kind == k.VAL.value) mflip(m.VAL)\n+      else if (data.kind == k.VAR.value) mflip(m.VAR)\n+      else if (data.kind == k.DEF.value) mflip(m.DEF)\n+      else if (data.kind == k.PRIMARY_CONSTRUCTOR.value) mflip(m.PRIMARYCTOR)\n+      else if (data.kind == k.SECONDARY_CONSTRUCTOR.value) mflip(m.SECONDARYCTOR)\n+      else if (data.kind == k.MACRO.value) mflip(m.MACRO)\n+      else if (data.kind == k.TYPE.value) mflip(m.TYPE)\n+      else if (data.kind == k.PARAMETER.value) mflip(m.PARAM)\n+      else if (data.kind == k.TYPE_PARAMETER.value) mflip(m.TYPEPARAM)\n+      else if (data.kind == k.OBJECT.value) mflip(m.OBJECT)\n+      else if (data.kind == k.PACKAGE.value) mflip(m.PACKAGE)\n+      else if (data.kind == k.PACKAGE_OBJECT.value) mflip(m.PACKAGEOBJECT)\n+      else if (data.kind == k.CLASS.value) mflip(m.CLASS)\n+      else if (data.kind == k.TRAIT.value) mflip(m.TRAIT)\n+      def ptest(bit: Long) = (data.properties & bit) == bit\n+      if (ptest(p.PRIVATE.value)) mflip(m.PRIVATE)\n+      if (ptest(p.PROTECTED.value)) mflip(m.PROTECTED)\n+      if (ptest(p.ABSTRACT.value)) mflip(m.ABSTRACT)\n+      if (ptest(p.FINAL.value)) mflip(m.FINAL)\n+      if (ptest(p.SEALED.value)) mflip(m.SEALED)\n+      if (ptest(p.IMPLICIT.value)) mflip(m.IMPLICIT)\n+      if (ptest(p.LAZY.value)) mflip(m.LAZY)\n+      if (ptest(p.CASE.value)) mflip(m.CASE)\n+      if (ptest(p.COVARIANT.value)) mflip(m.COVARIANT)\n+      if (ptest(p.CONTRAVARIANT.value)) mflip(m.CONTRAVARIANT)\n+      flags\n+    }"
  }
]