[
  {
    "id" : "9a5ed79d-e701-4fa9-b717-5d8b386a1b46",
    "prId" : 158,
    "comments" : [
      {
        "id" : "634dbfb6-c729-4813-9083-56b03ffe0556",
        "parentId" : null,
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "This is just fine, but for general code review feedback, I would prefer to keep concepts together than are not useful separately. It feels to me like the missing concept here is that we just want a stream of format functions so we can always use the most recent.  That might be more clear if we just supplied an Observable[Formatter] or even Observable[FormattingFunction]\r\n\r\n```scala\r\nclass DocumentFormattingProvider(configuration: Observable[Configuration], cwd: AbsolutePath) extends LazyLogging {\r\n\r\n  private lazy val scalafmt = Formatter.classloadScalafmt(\"1.3.0\")\r\n  \r\n  type FormatFunction = (String, String) => String\r\n  val noFormat: FormatFunction = (str, _) => str\r\n  val configuredFormatters: Observable[FormatFunction] = configuration.map{ conf =>\r\n    if (conf.scalafmt.enable) {\r\n      val fmtConf = cwd.resolve(conf.scalafmt.confPath)\r\n      scalafmt.format(_, _, fmtConf)\r\n    }\r\n    else noFormat\r\n  }\r\n  \r\n  def format(\r\n      input: Input.VirtualFile\r\n  ): Task[DocumentFormattingResult] =\r\n    configuredFormatters.lastL.map{ fmt =>\r\n          val fullDocumentRange = Range(\r\n            start = Position(0, 0),\r\n            end = Position(Int.MaxValue, Int.MaxValue)\r\n          )\r\n          val edits = {\r\n            val formattedContent = fmt(input.value, input.path)\r\n            List(TextEdit(fullDocumentRange, formattedContent))\r\n          }\r\n          DocumentFormattingResult(edits)\r\n    }\r\n}\r\n```",
        "createdAt" : "2017-12-23T17:09:06Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f10d918e-9cc2-44e7-8d17-2479b176da83",
        "parentId" : "634dbfb6-c729-4813-9083-56b03ffe0556",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "ah, I see. That's a very good point, and I actually had some doubts while making this refactor.\r\nIt's admittedly biased by the previous implementation, so I opted for the \"minimum distance\" change.\r\nI'll give your feedback more thoughts later today, as I'm currently heading out right now.",
        "createdAt" : "2017-12-23T17:29:45Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "254d0256-ec0e-43c7-b5af-9cd3e604ab0c",
        "parentId" : "634dbfb6-c729-4813-9083-56b03ffe0556",
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "I like small step refactors as well and as long as it is an improvement (which I say this is) I like to pull it in, we can always do another round of refactorings later.",
        "createdAt" : "2017-12-23T17:39:23Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fb2999c0-86f6-4074-9320-1752b9ce78a7",
        "parentId" : "634dbfb6-c729-4813-9083-56b03ffe0556",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "@ShaneDelmore `Formatter` is your `FormatFunction` 😜 I personally prefer methods + named parameters over higher-order functions on tuples. The former are easier to read, debug, use in the IDE, ...",
        "createdAt" : "2017-12-23T20:19:06Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a435a074-f7b0-40b3-82ca-f7bfc6a71f5f",
        "parentId" : "634dbfb6-c729-4813-9083-56b03ffe0556",
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "I tend to prefer streams with functions applied to them (especially over callbacks), but I will keep try to keep your preferences in mind.",
        "createdAt" : "2017-12-24T01:26:09Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fed5ab81-522c-4411-85bf-cd00950f7bd9",
        "parentId" : "634dbfb6-c729-4813-9083-56b03ffe0556",
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "@olafurpg FWIW the most important thing to me usually is dealing in whole concepts when possible, position vs (line, column) and here my preferences is not a formatter function in general, but to get an observable of formatter, vs an unconfigured formatter and a format conf that need to be assembled before use when all anyone really wants is the thing you call to format the text.",
        "createdAt" : "2017-12-24T01:29:38Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "affa2ea127de9483cd4eeda3dfcfcb3bb80a4322",
    "line" : null,
    "diffHunk" : "@@ -2,25 +2,40 @@ package scala.meta.languageserver.providers\n \n import java.nio.file.Files\n import scala.meta.languageserver.Formatter\n+import scala.meta.languageserver.Configuration\n import com.typesafe.scalalogging.LazyLogging\n import langserver.messages.DocumentFormattingResult\n import langserver.types.Position\n import langserver.types.Range\n import langserver.types.TextEdit\n import org.langmeta.inputs.Input\n import org.langmeta.io.AbsolutePath\n+import monix.reactive.Observable\n+import monix.eval.Task\n+\n+class DocumentFormattingProvider(configuration: Observable[Configuration], cwd: AbsolutePath) extends LazyLogging {\n+\n+  private lazy val scalafmt = Formatter.classloadScalafmt(\"1.3.0\")\n+\n+  private def formatterFromConfiguration: Task[Formatter] = configuration.lastL.map { conf =>\n+    if (conf.scalafmt.enable) scalafmt\n+    else Formatter.noop\n+  }\n+\n+  private def scalafmtConfigFromConfiguration: Task[AbsolutePath] = configuration.lastL.map { conf =>"
  },
  {
    "id" : "0144dc5d-b0e6-4e5d-ad44-6e1872e99829",
    "prId" : 158,
    "comments" : [
      {
        "id" : "652cd9b0-1144-44ad-af2f-61e6802a135f",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "`Task[A].zip(Task[B])`?",
        "createdAt" : "2017-12-23T20:19:48Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7652fe8b-de23-4251-850c-44e4dcb5df4f",
        "parentId" : "652cd9b0-1144-44ad-af2f-61e6802a135f",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I find forcomprehension more readable and scalable than tupling things up. Unless there's a strong penalty in flatMapping over tasks",
        "createdAt" : "2017-12-23T21:27:38Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "49c856ad-5e23-4698-8a71-6ebb6ac3f294",
        "parentId" : "652cd9b0-1144-44ad-af2f-61e6802a135f",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "for comprehension is fine, I agree it's more readable, wish we had ApplicativeDo in Scala 😏 https://www.microsoft.com/en-us/research/publication/desugaring-haskells-do-notation-into-applicative-operations/",
        "createdAt" : "2017-12-23T22:00:18Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "103e0421-96c8-4661-96a9-05127b259549",
        "parentId" : "652cd9b0-1144-44ad-af2f-61e6802a135f",
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "I agree it more easily conveys the fact that I want to call A, then once A has returned call B.  But given that’s not what we want here, I think @olafurpg  version does convey the fact that these two things have no dependency on each other well.  So....sort of agree 🤷‍♂️   ",
        "createdAt" : "2017-12-24T01:35:48Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ebd48b59-7a1b-419b-959f-05e42f6fca4a",
        "parentId" : "652cd9b0-1144-44ad-af2f-61e6802a135f",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Done, I've used zip.",
        "createdAt" : "2017-12-29T15:32:48Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "affa2ea127de9483cd4eeda3dfcfcb3bb80a4322",
    "line" : null,
    "diffHunk" : "@@ -2,25 +2,40 @@ package scala.meta.languageserver.providers\n \n import java.nio.file.Files\n import scala.meta.languageserver.Formatter\n+import scala.meta.languageserver.Configuration\n import com.typesafe.scalalogging.LazyLogging\n import langserver.messages.DocumentFormattingResult\n import langserver.types.Position\n import langserver.types.Range\n import langserver.types.TextEdit\n import org.langmeta.inputs.Input\n import org.langmeta.io.AbsolutePath\n+import monix.reactive.Observable\n+import monix.eval.Task\n+\n+class DocumentFormattingProvider(configuration: Observable[Configuration], cwd: AbsolutePath) extends LazyLogging {\n+\n+  private lazy val scalafmt = Formatter.classloadScalafmt(\"1.3.0\")\n+\n+  private def formatterFromConfiguration: Task[Formatter] = configuration.lastL.map { conf =>\n+    if (conf.scalafmt.enable) scalafmt\n+    else Formatter.noop\n+  }\n+\n+  private def scalafmtConfigFromConfiguration: Task[AbsolutePath] = configuration.lastL.map { conf =>\n+    cwd.resolve(conf.scalafmt.confPath)\n+  }\n \n-object DocumentFormattingProvider extends LazyLogging {\n   def format(\n-      input: Input.VirtualFile,\n-      scalafmt: Formatter,\n-      cwd: AbsolutePath\n-  ): DocumentFormattingResult = {\n+      input: Input.VirtualFile\n+  ): Task[DocumentFormattingResult] = for {\n+    formatter <- formatterFromConfiguration\n+    config <- scalafmtConfigFromConfiguration"
  },
  {
    "id" : "39399c8b-5122-4b1d-b78d-599ace781dfd",
    "prId" : 158,
    "comments" : [
      {
        "id" : "fb462290-8261-40e1-b857-99b629f164a3",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I opened https://github.com/scalameta/language-server/issues/159 to track making the scalafmt version configurable. With `configuration.distinctByKey(_.scalafmt)` we can avoid re-classloading on every config change.",
        "createdAt" : "2017-12-23T22:05:00Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "affa2ea127de9483cd4eeda3dfcfcb3bb80a4322",
    "line" : null,
    "diffHunk" : "@@ -2,25 +2,40 @@ package scala.meta.languageserver.providers\n \n import java.nio.file.Files\n import scala.meta.languageserver.Formatter\n+import scala.meta.languageserver.Configuration\n import com.typesafe.scalalogging.LazyLogging\n import langserver.messages.DocumentFormattingResult\n import langserver.types.Position\n import langserver.types.Range\n import langserver.types.TextEdit\n import org.langmeta.inputs.Input\n import org.langmeta.io.AbsolutePath\n+import monix.reactive.Observable\n+import monix.eval.Task\n+\n+class DocumentFormattingProvider(configuration: Observable[Configuration], cwd: AbsolutePath) extends LazyLogging {\n+\n+  private lazy val scalafmt = Formatter.classloadScalafmt(\"1.3.0\")\n+\n+  private def formatterFromConfiguration: Task[Formatter] = configuration.lastL.map { conf =>\n+    if (conf.scalafmt.enable) scalafmt"
  },
  {
    "id" : "f1850cba-e97f-406a-9709-b25ffb679812",
    "prId" : 158,
    "comments" : [
      {
        "id" : "8791211c-1d46-44c2-8c9a-df6b6b336ad3",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I don't think `lastL` works as we expect it to 🤔 It seems to wait until the Observable completes before completing the Task.\r\n\r\n```scala\r\n    import monix.execution.Scheduler.Implicits.global\r\n    import scala.concurrent.duration._\r\n    val o = Observable\r\n      .fromIterable(1.to(10))\r\n      .delayOnNext(500.milliseconds)\r\n    println(\"STARTING\")\r\n    val c = global.scheduleAtFixedRate(Duration.Zero, 1.second) {\r\n      println(\"Tick\")\r\n      o.lastF.foreach(i => println(s\"LAST: $i\"))\r\n    }\r\n    o.dump(\"\").subscribe()\r\n    Thread.sleep(1000 * 10)\r\n    c.cancel()\r\n```\r\n\r\nprints out\r\n```\r\nSTARTING\r\nTick\r\n0: -->1\r\nTick\r\n1: -->2\r\n2: -->3\r\nTick\r\n3: -->4\r\n4: -->5\r\nTick\r\n5: -->6\r\n6: -->7\r\nTick\r\n7: -->8\r\n8: -->9\r\nTick\r\n9: -->10\r\n10:  completed\r\nLAST: 10\r\nTick\r\nLAST: 10\r\nTick\r\nLAST: 10\r\nTick\r\nLAST: 10\r\nTick\r\nLAST: 10\r\nLAST: 10\r\n```\r\n\r\nI digged a bit into the monix sources and it seems we need to use MulticastStrategy.Behavior and use `.take(1).lastL`\r\n\r\n```scala\r\n    import monix.execution.Scheduler.Implicits.global\r\n    import scala.concurrent.duration._\r\n    val (sub, pub2) = Observable.multicast[Int](MulticastStrategy.behavior(1))\r\n    val pub = pub2.delayOnNext(500.milliseconds)\r\n\r\n    var i = 0\r\n    global.scheduleAtFixedRate(Duration.Zero, 500.milliseconds) {\r\n      sub.onNext(i)\r\n      i += 1\r\n    }\r\n    val c = global.scheduleAtFixedRate(Duration.Zero, 1.second) {\r\n      println(\"Tick\")\r\n      pub.take(1).lastL.foreach(i => println(s\"LAST: $i\"))\r\n    }\r\n    pub.dump(\"\").subscribe()\r\n    Thread.sleep(1000 * 10)\r\n    c.cancel()\r\n```\r\n\r\nProduces\r\n```\r\nTick\r\n0: -->0\r\nLAST: 0\r\nTick\r\n1: -->1\r\nLAST: 1\r\n2: -->2\r\nTick\r\n3: -->3\r\nLAST: 3\r\n4: -->4\r\nTick\r\n5: -->5\r\nLAST: 5\r\n6: -->6\r\nTick\r\n7: -->7\r\nLAST: 7\r\n8: -->8\r\nTick\r\n9: -->9\r\nLAST: 9\r\n10: -->10\r\nTick\r\n11: -->11\r\nLAST: 11\r\n12: -->12\r\nTick\r\n13: -->13\r\nLAST: 13\r\n14: -->14\r\nTick\r\n15: -->15\r\nLAST: 15\r\n16: -->16\r\nTick\r\n17: -->17\r\nLAST: 17\r\n18: -->18\r\n19: -->19\r\n```\r\n\r\nBehavior takes an initial value which makes the initial `onNext` unnecessary. This reproduces \"reactive variables\" according to https://monix.io/docs/2x/reactive/observable-comparisons.html",
        "createdAt" : "2017-12-30T16:17:50Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dcb162d8-695c-40fb-bc2a-7ac7f1ddd99e",
        "parentId" : "8791211c-1d46-44c2-8c9a-df6b6b336ad3",
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "Monix has built-ins for watching files in their monix-nio package.  https://github.com/monix/monix-nio/tree/master/src/main/scala/monix/nio/file",
        "createdAt" : "2017-12-30T17:54:56Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "75210079-c451-4a52-a164-c555a5f85a79",
        "parentId" : "8791211c-1d46-44c2-8c9a-df6b6b336ad3",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "@olafurpg thanks for digging into it. I've refactored it to use a `Behavior` strategy. I definitely need to study Monix a bit more to fully grasp these variants.\r\n\r\n",
        "createdAt" : "2017-12-30T22:21:17Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "affa2ea127de9483cd4eeda3dfcfcb3bb80a4322",
    "line" : null,
    "diffHunk" : "@@ -2,31 +2,52 @@ package scala.meta.languageserver.providers\n \n import java.nio.file.Files\n import scala.meta.languageserver.Formatter\n+import scala.meta.languageserver.Configuration\n import com.typesafe.scalalogging.LazyLogging\n import langserver.messages.DocumentFormattingResult\n import langserver.types.Position\n import langserver.types.Range\n import langserver.types.TextEdit\n import org.langmeta.inputs.Input\n import org.langmeta.io.AbsolutePath\n+import monix.reactive.Observable\n+import monix.eval.Task\n+\n+class DocumentFormattingProvider(\n+    configuration: Observable[Configuration],\n+    cwd: AbsolutePath\n+) extends LazyLogging {\n+\n+  private lazy val scalafmt = Formatter.classloadScalafmt(\"1.3.0\")\n+\n+  private def formatterFromConfiguration: Task[Formatter] =\n+    configuration.lastL.map { conf =>"
  },
  {
    "id" : "34380fa5-e033-42b5-a0f0-18a24b291aeb",
    "prId" : 158,
    "comments" : [
      {
        "id" : "f5913e94-c45e-448c-8ed7-9efc246fc362",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "this seems to work, but forgetting `take(1)` it's a very easy mistake to make. I wonder whether we're missing something more obvious.",
        "createdAt" : "2017-12-30T22:32:24Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "affa2ea127de9483cd4eeda3dfcfcb3bb80a4322",
    "line" : null,
    "diffHunk" : "@@ -2,31 +2,52 @@ package scala.meta.languageserver.providers\n \n import java.nio.file.Files\n import scala.meta.languageserver.Formatter\n+import scala.meta.languageserver.Configuration\n import com.typesafe.scalalogging.LazyLogging\n import langserver.messages.DocumentFormattingResult\n import langserver.types.Position\n import langserver.types.Range\n import langserver.types.TextEdit\n import org.langmeta.inputs.Input\n import org.langmeta.io.AbsolutePath\n+import monix.reactive.Observable\n+import monix.eval.Task\n+\n+class DocumentFormattingProvider(\n+    configuration: Observable[Configuration],\n+    cwd: AbsolutePath\n+) extends LazyLogging {\n+\n+  private lazy val scalafmt = Formatter.classloadScalafmt(\"1.3.0\")\n+\n+  private def formatterFromConfiguration: Task[Formatter] =\n+    configuration.take(1).lastL.map { conf =>"
  },
  {
    "id" : "afa5007b-5123-4b14-b136-ffa8e2c2a9d5",
    "prId" : 158,
    "comments" : [
      {
        "id" : "976f5eac-2bf5-4e2f-b6d2-c9aa9ba3e8ef",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "We can replace the nested `match` using a for-comprehension and the `valueOr` from cats.\r\n\r\n```scala\r\nimport cats.syntax.either._\r\n\r\n(for {\r\n  scalafmt <- formatter()\r\n  configPath <- config()\r\n} yield configPath match {\r\n  case None => formatted(scalafmt.format(input.value, input.path))\r\n  case Some(path) => formatted(scalafmt.format(input.value, input.path, path))\r\n}).valueOr { error =>\r\n  notifications.showMessage(MessageType.Error, error)\r\n  Nil\r\n}\r\n```\r\n\r\n",
        "createdAt" : "2018-01-02T13:54:48Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "affa2ea127de9483cd4eeda3dfcfcb3bb80a4322",
    "line" : null,
    "diffHunk" : "@@ -1,52 +1,91 @@\n package scala.meta.languageserver.providers\n \n import java.nio.file.Files\n-import scala.meta.languageserver.Formatter\n import scala.meta.languageserver.Configuration\n+import scala.meta.languageserver.Configuration.Scalafmt\n+import scala.meta.languageserver.Formatter\n+import scala.meta.languageserver.MonixEnrichments._\n+import scala.util.control.NonFatal\n import com.typesafe.scalalogging.LazyLogging\n+import langserver.core.Notifications\n import langserver.messages.DocumentFormattingResult\n+import langserver.types.MessageType\n import langserver.types.Position\n import langserver.types.Range\n import langserver.types.TextEdit\n+import monix.eval.Task\n+import monix.execution.Scheduler\n+import monix.reactive.Observable\n import org.langmeta.inputs.Input\n import org.langmeta.io.AbsolutePath\n-import monix.eval.Task\n \n class DocumentFormattingProvider(\n-    configuration: Task[Configuration],\n-    cwd: AbsolutePath\n-) extends LazyLogging {\n+    configuration: Observable[Configuration],\n+    cwd: AbsolutePath,\n+    notifications: Notifications\n+)(implicit s: Scheduler)\n+    extends LazyLogging {\n \n-  private lazy val scalafmt = Formatter.classloadScalafmt(\"1.3.0\")\n+  private val formatter: () => Either[String, Formatter] =\n+    configuration\n+      .focus(_.scalafmt.version)\n+      .map[Either[String, Formatter]] { version =>\n+        try {\n+          // TODO(olafur) convert Jars.fetch to use monix.Task to avoid blocking\n+          Right(Formatter.classloadScalafmt(version))\n+        } catch {\n+          case NonFatal(e) =>\n+            val msg =\n+              s\"Unable to install scalafmt version $version, cause: ${e.getMessage}\"\n+            Left(msg)\n+        }\n+      }\n+      .toFunction0()\n \n-  private def formatterFromConfiguration: Task[Formatter] =\n-    configuration.map { conf =>\n-      if (conf.scalafmt.enabled) scalafmt\n-      else Formatter.noop\n-    }\n+  private val config: () => Either[String, Option[AbsolutePath]] =\n+    configuration\n+      .focus(_.scalafmt.confPath)\n+      .map[Either[String, Option[AbsolutePath]]] {\n+        case None =>\n+          val default = cwd.resolve(Scalafmt.DefaultConf)\n+          if (Files.isRegularFile(default.toNIO)) Right(Some(default))\n+          else Right(None)\n+        case Some(relpath) =>\n+          val custom = cwd.resolve(relpath)\n+          if (Files.isRegularFile(custom.toNIO)) Right(Some(custom))\n+          else {\n+            Left(s\"scalameta.scalafmt.confPath=$relpath is not a file\")\n+          }\n+      }\n+      .toFunction0()\n \n-  private def scalafmtConfigFromConfiguration: Task[AbsolutePath] =\n-    configuration.map { conf =>\n-      cwd.resolve(conf.scalafmt.confPath)\n-    }\n+  private val fullDocumentRange = Range(\n+    start = Position(0, 0),\n+    end = Position(Int.MaxValue, Int.MaxValue)\n+  )\n+\n+  private def formatted(newText: String) =\n+    List(TextEdit(fullDocumentRange, newText))\n \n   def format(\n       input: Input.VirtualFile\n-  ): Task[DocumentFormattingResult] =\n-    formatterFromConfiguration.zip(scalafmtConfigFromConfiguration).map {\n-      case (formatter, config) =>\n-        val fullDocumentRange = Range(\n-          start = Position(0, 0),\n-          end = Position(Int.MaxValue, Int.MaxValue)\n-        )\n-        val edits = if (Files.isRegularFile(config.toNIO)) {\n-          val formattedContent =\n-            formatter.format(input.value, input.path, config)\n-          List(TextEdit(fullDocumentRange, formattedContent))\n-        } else {\n-          Nil\n+  ): Task[DocumentFormattingResult] = Task.eval {\n+    val edits: List[TextEdit] = formatter() match {\n+      case Left(error) =>"
  },
  {
    "id" : "33f5366e-ce59-458a-821c-04e66c44a49c",
    "prId" : 158,
    "comments" : [
      {
        "id" : "14e15dc7-9b12-4827-8c61-8832ca467141",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "This can probably be a shared utility function:\r\n\r\n```scala\r\ndef pathIfExists(path: AbsolutePath): Option[AbsolutePath] =\r\n  Option(path).filter(p => Files.isRegularFile(p.toNIO))\r\n```",
        "createdAt" : "2018-01-02T14:03:36Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "affa2ea127de9483cd4eeda3dfcfcb3bb80a4322",
    "line" : null,
    "diffHunk" : "@@ -1,52 +1,91 @@\n package scala.meta.languageserver.providers\n \n import java.nio.file.Files\n-import scala.meta.languageserver.Formatter\n import scala.meta.languageserver.Configuration\n+import scala.meta.languageserver.Configuration.Scalafmt\n+import scala.meta.languageserver.Formatter\n+import scala.meta.languageserver.MonixEnrichments._\n+import scala.util.control.NonFatal\n import com.typesafe.scalalogging.LazyLogging\n+import langserver.core.Notifications\n import langserver.messages.DocumentFormattingResult\n+import langserver.types.MessageType\n import langserver.types.Position\n import langserver.types.Range\n import langserver.types.TextEdit\n+import monix.eval.Task\n+import monix.execution.Scheduler\n+import monix.reactive.Observable\n import org.langmeta.inputs.Input\n import org.langmeta.io.AbsolutePath\n-import monix.eval.Task\n \n class DocumentFormattingProvider(\n-    configuration: Task[Configuration],\n-    cwd: AbsolutePath\n-) extends LazyLogging {\n+    configuration: Observable[Configuration],\n+    cwd: AbsolutePath,\n+    notifications: Notifications\n+)(implicit s: Scheduler)\n+    extends LazyLogging {\n \n-  private lazy val scalafmt = Formatter.classloadScalafmt(\"1.3.0\")\n+  private val formatter: () => Either[String, Formatter] =\n+    configuration\n+      .focus(_.scalafmt.version)\n+      .map[Either[String, Formatter]] { version =>\n+        try {\n+          // TODO(olafur) convert Jars.fetch to use monix.Task to avoid blocking\n+          Right(Formatter.classloadScalafmt(version))\n+        } catch {\n+          case NonFatal(e) =>\n+            val msg =\n+              s\"Unable to install scalafmt version $version, cause: ${e.getMessage}\"\n+            Left(msg)\n+        }\n+      }\n+      .toFunction0()\n \n-  private def formatterFromConfiguration: Task[Formatter] =\n-    configuration.map { conf =>\n-      if (conf.scalafmt.enabled) scalafmt\n-      else Formatter.noop\n-    }\n+  private val config: () => Either[String, Option[AbsolutePath]] =\n+    configuration\n+      .focus(_.scalafmt.confPath)\n+      .map[Either[String, Option[AbsolutePath]]] {\n+        case None =>\n+          val default = cwd.resolve(Scalafmt.DefaultConf)\n+          if (Files.isRegularFile(default.toNIO)) Right(Some(default))"
  },
  {
    "id" : "1269bfa4-3268-4df9-9f87-b423f5492c67",
    "prId" : 164,
    "comments" : [
      {
        "id" : "a895895b-5f93-4f6a-9e3a-f6b263523e90",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "😇 \r\n\r\n```scala\r\nimport cats.syntax.bifunctor._\r\nimport cats.instances.either._\r\n\r\nformatResult.bimap(\r\n  Response.invalidParams,\r\n  formatted => List(TextEdit(fullDocumentRange, formatted))\r\n)\r\n```",
        "createdAt" : "2018-01-04T11:42:38Z",
        "updatedAt" : "2018-01-04T21:40:31Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b43ce46d-1a37-4bfa-b3e1-9dd434f945c8",
        "parentId" : "a895895b-5f93-4f6a-9e3a-f6b263523e90",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "TIL! Done.",
        "createdAt" : "2018-01-04T21:11:17Z",
        "updatedAt" : "2018-01-04T21:41:51Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "62ac5fe2-ab5d-4dff-8aa0-a76a00de7791",
        "parentId" : "a895895b-5f93-4f6a-9e3a-f6b263523e90",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "It's a shame the stdlib `Either` does not have a signature like that, it's so close to `fold` but different enough",
        "createdAt" : "2018-01-04T21:12:22Z",
        "updatedAt" : "2018-01-04T21:41:51Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "91848703d00af951b1f55d62236ec4f5ae50851b",
    "line" : null,
    "diffHunk" : "@@ -79,14 +78,11 @@ class DocumentFormattingProvider(\n       }\n     }\n     formatResult match {"
  }
]