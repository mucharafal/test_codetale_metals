[
  {
    "id" : "2bc865fe-43b3-4378-9036-4d7a6e13a576",
    "prId" : 23,
    "comments" : [
      {
        "id" : "b74aaa5e-af2d-4130-90b2-6f971d633dd8",
        "parentId" : null,
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "Lines 13-24 import various bits of scala.meta, then here you import all.  Why?  Is the style no wildcards allowed at top of file?",
        "createdAt" : "2017-11-11T16:30:52Z",
        "updatedAt" : "2017-11-14T20:08:40Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e9272f240feb4f00bdea5ee50e2808699cd0d0e",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,238 @@\n+package scala.meta.languageserver\n+\n+import java.io.IOException\n+import java.nio.charset.StandardCharsets\n+import java.nio.file.FileVisitResult\n+import java.nio.file.Files\n+import java.nio.file.Path\n+import java.nio.file.SimpleFileVisitor\n+import java.nio.file.attribute.BasicFileAttributes\n+import java.util.zip.ZipInputStream\n+import scala.collection.GenSeq\n+import scala.collection.parallel.mutable.ParArray\n+import scala.meta.Defn\n+import scala.meta.Defn\n+import scala.meta.Name\n+import scala.meta.Pat\n+import scala.meta.Pkg\n+import scala.meta.Source\n+import scala.meta.Template\n+import scala.meta.Term\n+import scala.meta.Tree\n+import scala.meta.Type\n+import scala.meta.parsers.ParseException\n+import scala.meta.transversers.Traverser\n+import scala.util.control.NonFatal\n+import com.typesafe.scalalogging.LazyLogging\n+import org.langmeta.inputs.Input\n+import org.langmeta.inputs.Position\n+import org.langmeta.internal.io.FileIO\n+import org.langmeta.internal.io.PathIO\n+import org.langmeta.io.AbsolutePath\n+import org.langmeta.io.Fragment\n+import org.langmeta.io.RelativePath\n+import org.langmeta.semanticdb._\n+\n+/**\n+ * Syntactically build a semanticdb containing only global symbol definition.\n+ *\n+ * The purpose of this module is to provide \"Go to definition\" from\n+ * project sources to dependency sources without indexing classfiles or\n+ * requiring dependencies to publish semanticdbs alongside their artifacts.\n+ *\n+ * One other use-case for this module is to implement \"Workspace symbol provider\"\n+ * without any build-tool or compiler integration. Essentially, ctags.\n+ */\n+object Ctags extends LazyLogging {\n+\n+  /**\n+   * Build an index from a classpath of -sources.jar\n+   *\n+   * @param shouldIndex An optional filter to skip particular relative filenames.\n+   * @param inParallel If true, use parallel collection to index using all\n+   *                   available CPU power. If false, uses single-threaded\n+   *                   collection.\n+   * @param callback A callback that is called as soon as a document has been\n+   *                 indexed.\n+   */\n+  def index(\n+      classpath: List[AbsolutePath],\n+      shouldIndex: RelativePath => Boolean = _ => true,\n+      inParallel: Boolean = true\n+  )(callback: Document => Unit): Unit = {\n+    val fragments = allClasspathFragments(classpath, inParallel)\n+    fragments.foreach { fragment =>\n+      try {\n+        if (PathIO.extension(fragment.name.toNIO) == \"scala\" &&\n+          shouldIndex(fragment.name)) {\n+          callback(index(fragment))\n+        }\n+      } catch {\n+        case _: ParseException => // nothing\n+        case NonFatal(e) =>\n+          logger.error(e.getMessage, e)\n+      }\n+    }\n+  }\n+\n+  /** Build a Database for a single source file. */\n+  def index(filename: String, contents: String): Document = {\n+    val input = Input.VirtualFile(filename, contents)\n+    val tree = {\n+      import scala.meta._"
  }
]