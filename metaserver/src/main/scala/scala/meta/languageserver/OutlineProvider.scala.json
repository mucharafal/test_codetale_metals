[
  {
    "id" : "08791966-185f-47ec-8d24-534078874f1f",
    "prId" : 93,
    "comments" : [
      {
        "id" : "2409a750-e77d-4839-9ae1-1060f2079f97",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I agree it's not clear exactly where to put this. I've been thinking that the compiler/search distinction for *Provider classes is not buying us much. What do you think about moving all *Provider classes to the `providers` package? We can do that in a separate PR, in which case it's fine to keep OutlineProvider here for now.",
        "createdAt" : "2017-12-04T06:59:31Z",
        "updatedAt" : "2017-12-04T23:49:22Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "29a5980b-11f5-4366-bcf1-d01f181bf6bc",
        "parentId" : "2409a750-e77d-4839-9ae1-1060f2079f97",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Shouldn't this be called `DocumentSymbolProvider`?",
        "createdAt" : "2017-12-04T07:00:27Z",
        "updatedAt" : "2017-12-04T23:49:22Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8b44f5d9-248e-4d11-a7c8-1887e270af71",
        "parentId" : "2409a750-e77d-4839-9ae1-1060f2079f97",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "> What do you think about moving all *Provider classes to the providers package? We can do that in a separate PR, in which case it's fine to keep OutlineProvider here for now.\r\n\r\nI think it will be an improvement. But In general it's not clear to me what a provider is supposed to be: a thing to implement related features with common context or just a per-feature implementation. I would vote for the former. \r\n\r\n> Shouldn't this be called DocumentSymbolProvider?\r\n\r\nFor this reason I did it call it this way. I thought it could also provide `workspace/symbol` functionality in the future. It could be called `SymbolProvider` then, but I think it's a bit confusing.",
        "createdAt" : "2017-12-04T20:16:37Z",
        "updatedAt" : "2017-12-04T23:49:22Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ece1a966-4676-44af-840f-692ccb29f01d",
        "parentId" : "2409a750-e77d-4839-9ae1-1060f2079f97",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "> I think it will be an improvement. But In general it's not clear to me what a provider is supposed to be: a thing to implement related features with common context or just a per-feature implementation. I would vote for the former.\r\n\r\nI vote for one *Provider per LSP message, so `DocumentSymbolProvider` and `WorkspaceSymbolProvider`. We might actually want to highlight different kinds of symbols in workspaces, for example prioritize global class/object/trait.\r\n",
        "createdAt" : "2017-12-04T21:54:55Z",
        "updatedAt" : "2017-12-04T23:49:22Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4854c82d-7209-49b3-9f6f-6d1b47d7a910",
        "parentId" : "2409a750-e77d-4839-9ae1-1060f2079f97",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "OK, I will rename it to `DocumentSymbolProvider` for now. \r\nBut in general, what about context sharing? For example here, we could maintain a `Map[AbsolutePath, List[SymbolInformation]]` instead of `Map[AbsolutePath, Source]` to avoid traversal in case the buffer doesn't parse. This is something that could be reused for document or workspace symbols outline. Same with `ReferenceProvider` and `DefinitionProvider` sharing `SymbolIndex`.",
        "createdAt" : "2017-12-04T22:57:48Z",
        "updatedAt" : "2017-12-04T23:49:22Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "73809033-c87b-4588-b080-d36e3bb16d10",
        "parentId" : "2409a750-e77d-4839-9ae1-1060f2079f97",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "> But in general, what about context sharing?\r\n\r\nI think context/state should be isolated to ScalametaLanguageServer as much as possible. The *Provider objects should contain only simple stateless methods, so those should accept the dependencies (Source/List[SymbolInformation]/..) as arguments. I'm still learning about Monix but I feel like we should be able to hide away a lot of the state with Observable[T], just need more time to wrap my head around it.",
        "createdAt" : "2017-12-04T23:05:31Z",
        "updatedAt" : "2017-12-04T23:49:22Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "37d380b8-3e7a-4527-b6a4-5acc03356330",
        "parentId" : "2409a750-e77d-4839-9ae1-1060f2079f97",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Renamed and moved in 8712ca28169ffa181df2f08cc0b1d71aefadec14",
        "createdAt" : "2017-12-04T23:40:54Z",
        "updatedAt" : "2017-12-04T23:49:22Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "61cbc9e7-99e8-413d-8448-f242787076ed",
        "parentId" : "2409a750-e77d-4839-9ae1-1060f2079f97",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "> I think context/state should be isolated to ScalametaLanguageServer as much as possible. The *Provider objects should contain only simple stateless methods, so those should accept the dependencies (Source/List[SymbolInformation]/..) as arguments.\r\n\r\nMissed this comment. I see your point 👍 Let's keep it simple now then and see how it can be improved with Monix.",
        "createdAt" : "2017-12-05T01:04:40Z",
        "updatedAt" : "2017-12-05T01:04:40Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7b17cbf33208eb27890af0e9b1a6a7b9016afbcb",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,64 @@\n+package scala.meta.languageserver\n+\n+import scala.collection.mutable\n+import com.typesafe.scalalogging.LazyLogging\n+import org.langmeta.io.AbsolutePath\n+import langserver.{types => l}\n+import langserver.messages.DefinitionResult\n+import scala.meta.languageserver.ScalametaEnrichments._\n+import scala.meta._\n+\n+object OutlineProvider extends LazyLogging {"
  }
]