[
  {
    "id" : "85588649-9592-426c-9ed4-1633a3cef4bc",
    "prId" : 100,
    "comments" : [
      {
        "id" : "d2e1748c-bf1f-4066-b3b0-f3d39465da13",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "SemanticdbIndex is not needed here. You can do `mdb.documents.map...` directly.",
        "createdAt" : "2017-12-09T10:56:32Z",
        "updatedAt" : "2017-12-09T10:57:50Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c31555716bcfd52dabfb0b643423e255d5a5badd",
    "line" : 24,
    "diffHunk" : "@@ -0,0 +1,50 @@\n+package scala.meta.languageserver\n+\n+import scala.meta.languageserver.ScalametaEnrichments._\n+import scala.{meta => m}\n+import scala.meta.semanticdb\n+import scalafix.internal.util.EagerInMemorySemanticdbIndex\n+import scalafix.util.SemanticdbIndex\n+import langserver.core.Connection\n+import langserver.messages.PublishDiagnostics\n+import langserver.{types => l}\n+\n+class ScalacErrorReporter(\n+    connection: Connection,\n+) {\n+\n+  def reportErrors(\n+      mdb: m.Database\n+  ): Effects.PublishScalacDiagnostics = {\n+    val messages = analyzeIndex(mdb)\n+    messages.foreach(connection.sendNotification)\n+    Effects.PublishScalacDiagnostics\n+  }\n+  private def analyzeIndex(mdb: m.Database): Seq[PublishDiagnostics] =\n+    analyzeIndex("
  },
  {
    "id" : "4ad5388f-31a4-42ce-9478-3ba5031e213a",
    "prId" : 100,
    "comments" : [
      {
        "id" : "3a8d0d69-e182-4455-ab38-ec3f4843ccaf",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "So many enums of info/err/warning :joy:\r\n",
        "createdAt" : "2017-12-09T10:56:57Z",
        "updatedAt" : "2017-12-09T10:57:50Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c31555716bcfd52dabfb0b643423e255d5a5badd",
    "line" : 45,
    "diffHunk" : "@@ -0,0 +1,50 @@\n+package scala.meta.languageserver\n+\n+import scala.meta.languageserver.ScalametaEnrichments._\n+import scala.{meta => m}\n+import scala.meta.semanticdb\n+import scalafix.internal.util.EagerInMemorySemanticdbIndex\n+import scalafix.util.SemanticdbIndex\n+import langserver.core.Connection\n+import langserver.messages.PublishDiagnostics\n+import langserver.{types => l}\n+\n+class ScalacErrorReporter(\n+    connection: Connection,\n+) {\n+\n+  def reportErrors(\n+      mdb: m.Database\n+  ): Effects.PublishScalacDiagnostics = {\n+    val messages = analyzeIndex(mdb)\n+    messages.foreach(connection.sendNotification)\n+    Effects.PublishScalacDiagnostics\n+  }\n+  private def analyzeIndex(mdb: m.Database): Seq[PublishDiagnostics] =\n+    analyzeIndex(\n+      EagerInMemorySemanticdbIndex(mdb, m.Sourcepath(Nil), m.Classpath(Nil))\n+    )\n+  private def analyzeIndex(index: SemanticdbIndex): Seq[PublishDiagnostics] =\n+    index.database.documents.map { d =>\n+      val uri = d.input.syntax\n+      PublishDiagnostics(uri, d.messages.map(toDiagnostic))\n+    }\n+\n+  private def toDiagnostic(msg: semanticdb.Message): l.Diagnostic = {\n+    l.Diagnostic(\n+      range = msg.position.toRange,\n+      severity = Some(toSeverity(msg.severity)),\n+      code = None,\n+      source = Some(\"scalac\"),\n+      message = msg.text\n+    )\n+  }\n+\n+  private def toSeverity(s: semanticdb.Severity): l.DiagnosticSeverity =\n+    s match {\n+      case semanticdb.Severity.Error => l.DiagnosticSeverity.Error"
  }
]