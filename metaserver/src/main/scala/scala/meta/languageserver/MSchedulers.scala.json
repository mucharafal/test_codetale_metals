[
  {
    "id" : "83d40ba8-1064-4bab-9b0a-3dd22ab8e941",
    "prId" : 184,
    "comments" : [
      {
        "id" : "e637ff0c-7650-4a5f-81c1-76c2c000bee5",
        "parentId" : null,
        "author" : {
          "login" : "jvican",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/2462974?u=247f9a0cfd142440687595dce462fabed087e912&v=4"
        },
        "body" : "Rename `lsp` to `client` and `sbt` to `server`?",
        "createdAt" : "2018-01-18T21:24:42Z",
        "updatedAt" : "2018-01-19T09:27:18Z",
        "lastEditedBy" : {
          "login" : "jvican",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/2462974?u=247f9a0cfd142440687595dce462fabed087e912&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "24ee4cd8-8e0e-4e29-a0f2-af283e7a6468",
        "parentId" : "e637ff0c-7650-4a5f-81c1-76c2c000bee5",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "My OCD liked having three characters acronyms based on the protocol that each scheduler handles :) \"client\" and \"server\" are not so self-documenting because when connecting to bsp/sbt as a \"client\" we still need to spin up a \"server\". ",
        "createdAt" : "2018-01-19T09:47:24Z",
        "updatedAt" : "2018-01-19T09:47:24Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e8f46f9f766b796b4404ccf47a66c79f4474d83f",
    "line" : 21,
    "diffHunk" : "@@ -0,0 +1,23 @@\n+package scala.meta.languageserver\n+\n+import java.util.concurrent.Executors\n+import monix.execution.Scheduler\n+import monix.execution.schedulers.SchedulerService\n+\n+/**\n+ * Utility to manage monix schedulers.\n+ *\n+ * @param global The default scheduler when you are unsure which one to use.\n+ * @param lsp to communicate with LSP editor client.\n+ * @param sbt to communicate with sbt server.\n+ */\n+case class MSchedulers(global: Scheduler, lsp: Scheduler, sbt: Scheduler)\n+object MSchedulers {\n+  def apply(): MSchedulers = new MSchedulers(main, lsp, sbt)\n+  lazy val main: SchedulerService =\n+    Scheduler(Executors.newFixedThreadPool(4))\n+  lazy val lsp: SchedulerService =\n+    Scheduler(Executors.newFixedThreadPool(1))\n+  lazy val sbt: SchedulerService ="
  }
]