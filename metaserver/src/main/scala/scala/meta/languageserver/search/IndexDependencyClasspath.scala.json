[
  {
    "id" : "150e7851-2761-46af-b502-0bf759f1a77b",
    "prId" : 69,
    "comments" : [
      {
        "id" : "fd7e1641-f51f-4a0a-a901-bb42c7b5eb7e",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Remove?",
        "createdAt" : "2017-11-28T19:44:11Z",
        "updatedAt" : "2017-11-28T20:54:40Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e534cf44-70e6-440e-a3a5-fc3a73fa55a7",
        "parentId" : "fd7e1641-f51f-4a0a-a901-bb42c7b5eb7e",
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "Oops, thanks",
        "createdAt" : "2017-11-28T20:04:23Z",
        "updatedAt" : "2017-11-28T20:54:40Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "350f277d4a3c10275ce544e998c1ca5945b48490",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,49 @@\n+package scala.meta.languageserver.search\n+import java.util.concurrent.ConcurrentHashMap\n+import scala.meta.languageserver.ScalametaLanguageServer.cacheDirectory\n+import scala.meta.languageserver.compiler.CompilerConfig\n+import scala.meta.languageserver.{Effects, ServerConfig, ctags}\n+import scala.meta.languageserver.storage.LevelDBMap\n+import com.typesafe.scalalogging.Logger\n+import monix.reactive.Observer\n+import org.langmeta.internal.semanticdb.schema.{Database, Document}\n+import org.langmeta.io.AbsolutePath\n+\n+object IndexDependencyClasspath {\n+  // NOTE(olafur) this probably belongs somewhere else than Compiler, see"
  },
  {
    "id" : "96a6148b-76c7-48d4-a410-efb38b056617",
    "prId" : 69,
    "comments" : [
      {
        "id" : "8538e86f-eac5-4fbc-b8bc-b110e6786506",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Replace with extends LazyLogging ",
        "createdAt" : "2017-11-28T19:44:43Z",
        "updatedAt" : "2017-11-28T20:54:40Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8881b3bb-8ff0-4960-b368-9c1ba66ce717",
        "parentId" : "8538e86f-eac5-4fbc-b8bc-b110e6786506",
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "Does this mean we allow stateful objects in general, or only for logging?",
        "createdAt" : "2017-11-28T20:03:29Z",
        "updatedAt" : "2017-11-28T20:54:40Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fb121654-6f5b-4b29-91e5-61fbd2130630",
        "parentId" : "8538e86f-eac5-4fbc-b8bc-b110e6786506",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Logging is fine imo, but otherwise no stateful objects ",
        "createdAt" : "2017-11-28T20:11:15Z",
        "updatedAt" : "2017-11-28T20:54:40Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "350f277d4a3c10275ce544e998c1ca5945b48490",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,49 @@\n+package scala.meta.languageserver.search\n+import java.util.concurrent.ConcurrentHashMap\n+import scala.meta.languageserver.ScalametaLanguageServer.cacheDirectory\n+import scala.meta.languageserver.compiler.CompilerConfig\n+import scala.meta.languageserver.{Effects, ServerConfig, ctags}\n+import scala.meta.languageserver.storage.LevelDBMap\n+import com.typesafe.scalalogging.Logger\n+import monix.reactive.Observer\n+import org.langmeta.internal.semanticdb.schema.{Database, Document}\n+import org.langmeta.io.AbsolutePath\n+\n+object IndexDependencyClasspath {\n+  // NOTE(olafur) this probably belongs somewhere else than Compiler, see\n+  // https://github.com/scalameta/language-server/issues/48\n+  def apply(\n+      serverConfig: ServerConfig,\n+      indexedJars: ConcurrentHashMap[AbsolutePath, Unit],\n+      documentSubscriber: Observer.Sync[Document],\n+      logger: Logger,"
  },
  {
    "id" : "11d65685-05dc-488a-8973-9c84e1c66bf7",
    "prId" : 69,
    "comments" : [
      {
        "id" : "8db9ebc2-85a6-4a57-999d-c3810d53c6db",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Can we avoid passing in serverConfig by delegating this to the call site?",
        "createdAt" : "2017-11-28T19:46:21Z",
        "updatedAt" : "2017-11-28T20:54:40Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "478d0f1c-a566-48fa-af3c-a1dddbd3cb21",
        "parentId" : "8db9ebc2-85a6-4a57-999d-c3810d53c6db",
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "Do you mean check if serverConfig.indexClasspath is false, and if so just return Effects.IndexSourcesClasspath from ScalacProvider directly instead of calling IndexDependencyClasspath?",
        "createdAt" : "2017-11-28T20:21:05Z",
        "updatedAt" : "2017-11-28T20:54:40Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "350f277d4a3c10275ce544e998c1ca5945b48490",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,49 @@\n+package scala.meta.languageserver.search\n+import java.util.concurrent.ConcurrentHashMap\n+import scala.meta.languageserver.ScalametaLanguageServer.cacheDirectory\n+import scala.meta.languageserver.compiler.CompilerConfig\n+import scala.meta.languageserver.{Effects, ServerConfig, ctags}\n+import scala.meta.languageserver.storage.LevelDBMap\n+import com.typesafe.scalalogging.Logger\n+import monix.reactive.Observer\n+import org.langmeta.internal.semanticdb.schema.{Database, Document}\n+import org.langmeta.io.AbsolutePath\n+\n+object IndexDependencyClasspath {\n+  // NOTE(olafur) this probably belongs somewhere else than Compiler, see\n+  // https://github.com/scalameta/language-server/issues/48\n+  def apply(\n+      serverConfig: ServerConfig,\n+      indexedJars: ConcurrentHashMap[AbsolutePath, Unit],\n+      documentSubscriber: Observer.Sync[Document],\n+      logger: Logger,\n+      sourceJars: List[AbsolutePath]\n+  ): Effects.IndexSourcesClasspath = {\n+    if (!serverConfig.indexClasspath) return Effects.IndexSourcesClasspath"
  },
  {
    "id" : "24809ca6-94a3-465d-8a4f-778f58e3666b",
    "prId" : 69,
    "comments" : [
      {
        "id" : "0bffc1a8-9de8-4fd8-80d6-e1d27cde6dcd",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Same, delegate to call site ",
        "createdAt" : "2017-11-28T19:46:41Z",
        "updatedAt" : "2017-11-28T20:54:40Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "350f277d4a3c10275ce544e998c1ca5945b48490",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,49 @@\n+package scala.meta.languageserver.search\n+import java.util.concurrent.ConcurrentHashMap\n+import scala.meta.languageserver.ScalametaLanguageServer.cacheDirectory\n+import scala.meta.languageserver.compiler.CompilerConfig\n+import scala.meta.languageserver.{Effects, ServerConfig, ctags}\n+import scala.meta.languageserver.storage.LevelDBMap\n+import com.typesafe.scalalogging.Logger\n+import monix.reactive.Observer\n+import org.langmeta.internal.semanticdb.schema.{Database, Document}\n+import org.langmeta.io.AbsolutePath\n+\n+object IndexDependencyClasspath {\n+  // NOTE(olafur) this probably belongs somewhere else than Compiler, see\n+  // https://github.com/scalameta/language-server/issues/48\n+  def apply(\n+      serverConfig: ServerConfig,\n+      indexedJars: ConcurrentHashMap[AbsolutePath, Unit],\n+      documentSubscriber: Observer.Sync[Document],\n+      logger: Logger,\n+      sourceJars: List[AbsolutePath]\n+  ): Effects.IndexSourcesClasspath = {\n+    if (!serverConfig.indexClasspath) return Effects.IndexSourcesClasspath\n+    val sourceJarsWithJDK ="
  },
  {
    "id" : "3c6ea0ea-699f-45bc-a909-f3a2898a420f",
    "prId" : 69,
    "comments" : [
      {
        "id" : "464db367-0690-4c44-8a59-55f426478dab",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "We can also delegate this to the call site ",
        "createdAt" : "2017-11-28T19:46:58Z",
        "updatedAt" : "2017-11-28T20:54:40Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "350f277d4a3c10275ce544e998c1ca5945b48490",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,49 @@\n+package scala.meta.languageserver.search\n+import java.util.concurrent.ConcurrentHashMap\n+import scala.meta.languageserver.ScalametaLanguageServer.cacheDirectory\n+import scala.meta.languageserver.compiler.CompilerConfig\n+import scala.meta.languageserver.{Effects, ServerConfig, ctags}\n+import scala.meta.languageserver.storage.LevelDBMap\n+import com.typesafe.scalalogging.Logger\n+import monix.reactive.Observer\n+import org.langmeta.internal.semanticdb.schema.{Database, Document}\n+import org.langmeta.io.AbsolutePath\n+\n+object IndexDependencyClasspath {\n+  // NOTE(olafur) this probably belongs somewhere else than Compiler, see\n+  // https://github.com/scalameta/language-server/issues/48\n+  def apply(\n+      serverConfig: ServerConfig,\n+      indexedJars: ConcurrentHashMap[AbsolutePath, Unit],\n+      documentSubscriber: Observer.Sync[Document],\n+      logger: Logger,\n+      sourceJars: List[AbsolutePath]\n+  ): Effects.IndexSourcesClasspath = {\n+    if (!serverConfig.indexClasspath) return Effects.IndexSourcesClasspath\n+    val sourceJarsWithJDK =\n+      if (serverConfig.indexJDK)\n+        CompilerConfig.jdkSources.fold(sourceJars)(_ :: sourceJars)\n+      else sourceJars\n+    val buf = List.newBuilder[AbsolutePath]"
  },
  {
    "id" : "befedf81-2726-446d-905a-8be386f266bc",
    "prId" : 69,
    "comments" : [
      {
        "id" : "adecc222-b989-42a0-bea1-07e315484239",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Can we replace this with a regular function callback?",
        "createdAt" : "2017-11-28T19:48:32Z",
        "updatedAt" : "2017-11-28T20:54:40Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "69b5c7a8-3caa-4c21-96e0-43bf0de61408",
        "parentId" : "adecc222-b989-42a0-bea1-07e315484239",
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "Yep",
        "createdAt" : "2017-11-28T20:15:12Z",
        "updatedAt" : "2017-11-28T20:54:40Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "350f277d4a3c10275ce544e998c1ca5945b48490",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,49 @@\n+package scala.meta.languageserver.search\n+import java.util.concurrent.ConcurrentHashMap\n+import scala.meta.languageserver.ScalametaLanguageServer.cacheDirectory\n+import scala.meta.languageserver.compiler.CompilerConfig\n+import scala.meta.languageserver.{Effects, ServerConfig, ctags}\n+import scala.meta.languageserver.storage.LevelDBMap\n+import com.typesafe.scalalogging.Logger\n+import monix.reactive.Observer\n+import org.langmeta.internal.semanticdb.schema.{Database, Document}\n+import org.langmeta.io.AbsolutePath\n+\n+object IndexDependencyClasspath {\n+  // NOTE(olafur) this probably belongs somewhere else than Compiler, see\n+  // https://github.com/scalameta/language-server/issues/48\n+  def apply(\n+      serverConfig: ServerConfig,\n+      indexedJars: ConcurrentHashMap[AbsolutePath, Unit],\n+      documentSubscriber: Observer.Sync[Document],"
  }
]