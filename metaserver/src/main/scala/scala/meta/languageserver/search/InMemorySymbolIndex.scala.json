[
  {
    "id" : "429d81cf-53b9-4562-8109-091c8d1e8115",
    "prId" : 94,
    "comments" : [
      {
        "id" : "3a90ef0b-fa36-4c3f-a8f7-a27b62a14f80",
        "parentId" : null,
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "This is odd.  The naming convension says it should return a Boolean, the doc comment says it returns a bool, yet it returns Option[Unit] and performs side effects.  ",
        "createdAt" : "2017-12-04T04:20:52Z",
        "updatedAt" : "2017-12-04T04:20:52Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "df9155af-284d-439a-b789-419b02e0a458",
        "parentId" : "3a90ef0b-fa36-4c3f-a8f7-a27b62a14f80",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Agreed, this should have a different name but it's unrelated to this PR, this is copy-paste from my code ;)",
        "createdAt" : "2017-12-04T06:29:03Z",
        "updatedAt" : "2017-12-04T07:14:00Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a7ced027393b3dfbcf886dacedbf8d6c1f6df97b",
    "line" : 58,
    "diffHunk" : "@@ -0,0 +1,226 @@\n+package scala.meta.languageserver.search\n+\n+import java.net.URI\n+import java.nio.charset.StandardCharsets\n+import java.nio.file.Files\n+import java.nio.file.Paths\n+import java.util.concurrent.ConcurrentHashMap\n+import scala.meta.languageserver.Buffers\n+import scala.meta.languageserver.Effects\n+import scala.meta.languageserver.ScalametaEnrichments._\n+import scala.meta.languageserver.ServerConfig\n+import scala.meta.languageserver.compiler.CompilerConfig\n+import scala.meta.languageserver.mtags.Mtags\n+import scala.meta.languageserver.ScalametaLanguageServer.cacheDirectory\n+import scala.meta.languageserver.storage.LevelDBMap\n+import scala.meta.languageserver.{index => i}\n+import `scala`.meta.languageserver.index.Position\n+import `scala`.meta.languageserver.index.SymbolData\n+import com.typesafe.scalalogging.LazyLogging\n+import langserver.{types => l}\n+import langserver.core.Notifications\n+import langserver.messages.DefinitionResult\n+import langserver.messages.ReferencesResult\n+import langserver.messages.DocumentSymbolResult\n+import org.langmeta.inputs.Input\n+import org.langmeta.internal.io.FileIO\n+import org.langmeta.internal.semanticdb.schema.Database\n+import org.langmeta.internal.semanticdb.schema.Document\n+import org.langmeta.internal.semanticdb.schema.ResolvedName\n+import org.langmeta.internal.semanticdb.{schema => s}\n+import org.langmeta.io.AbsolutePath\n+import org.langmeta.io.RelativePath\n+import org.langmeta.languageserver.InputEnrichments._\n+import org.langmeta.semanticdb.Signature\n+import org.langmeta.semanticdb.Symbol\n+\n+class InMemorySymbolIndex(\n+    val symbolIndexer: SymbolIndexer,\n+    val documentIndex: DocumentIndex,\n+    cwd: AbsolutePath,\n+    notifications: Notifications,\n+    buffers: Buffers,\n+    serverConfig: ServerConfig,\n+) extends SymbolIndex with LazyLogging {\n+  private val indexedJars: ConcurrentHashMap[AbsolutePath, Unit] =\n+    new ConcurrentHashMap[AbsolutePath, Unit]()\n+\n+  /** Returns a ResolvedName at the given location */\n+  def resolveName(\n+      path: AbsolutePath,\n+      line: Int,\n+      column: Int\n+  ): Option[ResolvedName] = {\n+    logger.info(s\"resolveName at $path:$line:$column\")\n+    for {\n+      document <- documentIndex.getDocument(path.toNIO.toUri)\n+      _ = logger.info(s\"Found document for $path\")\n+      _ <- isFreshSemanticdb(path, document)"
  },
  {
    "id" : "6159d277-8549-4ffe-8b25-412d316997b4",
    "prId" : 94,
    "comments" : [
      {
        "id" : "3636f482-d82d-4158-bb5c-e30aaa17396e",
        "parentId" : null,
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "This sounds like the correct signature, but it actually returns Option[Unit]",
        "createdAt" : "2017-12-04T04:32:15Z",
        "updatedAt" : "2017-12-04T04:32:15Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "22263908-d879-4a5c-ab5d-caa8a2a78cdf",
        "parentId" : "3636f482-d82d-4158-bb5c-e30aaa17396e",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Unrelated to this PR.",
        "createdAt" : "2017-12-04T06:31:21Z",
        "updatedAt" : "2017-12-04T07:14:00Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a7ced027393b3dfbcf886dacedbf8d6c1f6df97b",
    "line" : 203,
    "diffHunk" : "@@ -0,0 +1,226 @@\n+package scala.meta.languageserver.search\n+\n+import java.net.URI\n+import java.nio.charset.StandardCharsets\n+import java.nio.file.Files\n+import java.nio.file.Paths\n+import java.util.concurrent.ConcurrentHashMap\n+import scala.meta.languageserver.Buffers\n+import scala.meta.languageserver.Effects\n+import scala.meta.languageserver.ScalametaEnrichments._\n+import scala.meta.languageserver.ServerConfig\n+import scala.meta.languageserver.compiler.CompilerConfig\n+import scala.meta.languageserver.mtags.Mtags\n+import scala.meta.languageserver.ScalametaLanguageServer.cacheDirectory\n+import scala.meta.languageserver.storage.LevelDBMap\n+import scala.meta.languageserver.{index => i}\n+import `scala`.meta.languageserver.index.Position\n+import `scala`.meta.languageserver.index.SymbolData\n+import com.typesafe.scalalogging.LazyLogging\n+import langserver.{types => l}\n+import langserver.core.Notifications\n+import langserver.messages.DefinitionResult\n+import langserver.messages.ReferencesResult\n+import langserver.messages.DocumentSymbolResult\n+import org.langmeta.inputs.Input\n+import org.langmeta.internal.io.FileIO\n+import org.langmeta.internal.semanticdb.schema.Database\n+import org.langmeta.internal.semanticdb.schema.Document\n+import org.langmeta.internal.semanticdb.schema.ResolvedName\n+import org.langmeta.internal.semanticdb.{schema => s}\n+import org.langmeta.io.AbsolutePath\n+import org.langmeta.io.RelativePath\n+import org.langmeta.languageserver.InputEnrichments._\n+import org.langmeta.semanticdb.Signature\n+import org.langmeta.semanticdb.Symbol\n+\n+class InMemorySymbolIndex(\n+    val symbolIndexer: SymbolIndexer,\n+    val documentIndex: DocumentIndex,\n+    cwd: AbsolutePath,\n+    notifications: Notifications,\n+    buffers: Buffers,\n+    serverConfig: ServerConfig,\n+) extends SymbolIndex with LazyLogging {\n+  private val indexedJars: ConcurrentHashMap[AbsolutePath, Unit] =\n+    new ConcurrentHashMap[AbsolutePath, Unit]()\n+\n+  /** Returns a ResolvedName at the given location */\n+  def resolveName(\n+      path: AbsolutePath,\n+      line: Int,\n+      column: Int\n+  ): Option[ResolvedName] = {\n+    logger.info(s\"resolveName at $path:$line:$column\")\n+    for {\n+      document <- documentIndex.getDocument(path.toNIO.toUri)\n+      _ = logger.info(s\"Found document for $path\")\n+      _ <- isFreshSemanticdb(path, document)\n+      input = Input.VirtualFile(document.filename, document.contents)\n+      _ = logger.info(s\"Document for $path is fresh\")\n+      name <- document.names.collectFirst {\n+        case name @ ResolvedName(Some(position), symbol, _) if {\n+              val range = input.toIndexRange(position.start, position.end)\n+              logger.debug(\n+                s\"${document.filename.replaceFirst(\".*/\", \"\")} [${range.pretty}] ${symbol}\"\n+              )\n+              range.contains(line, column)\n+            } =>\n+          name\n+      }\n+    } yield name\n+  }\n+\n+  /** Returns a symbol at the given location */\n+  def findSymbol(\n+      path: AbsolutePath,\n+      line: Int,\n+      column: Int\n+  ): Option[Symbol] = {\n+    for {\n+      name <- resolveName(path, line, column)\n+      symbol = Symbol(name.symbol)\n+      _ = logger.info(s\"Matching symbol ${symbol}\")\n+    } yield symbol\n+  }\n+\n+  /** Returns symbol definition data from the index taking into account relevant alternatives */\n+  def definitionData(\n+      symbol: Symbol\n+  ): Option[SymbolData] = {\n+    (symbol :: symbol.definitionAlternative)\n+      .collectFirst {\n+        case symbolIndexer(data) if data.definition.nonEmpty =>\n+          logger.info(s\"Found definition symbol ${data.symbol}\")\n+          data\n+      }\n+  }\n+\n+  /** Returns symbol references data from the index taking into account relevant alternatives */\n+  def referencesData(\n+      symbol: Symbol\n+  ): List[SymbolData] = {\n+    (symbol :: symbol.referenceAlternatives)\n+      .collect {\n+        case symbolIndexer(data) =>\n+          if (data.symbol != symbol.syntax)\n+            logger.info(s\"Adding alternative references ${data.symbol}\")\n+          data\n+      }\n+  }\n+\n+  def indexDependencyClasspath(\n+      sourceJars: List[AbsolutePath]\n+  ): Effects.IndexSourcesClasspath = {\n+    if (!serverConfig.indexClasspath) Effects.IndexSourcesClasspath\n+    else {\n+      val sourceJarsWithJDK =\n+        if (serverConfig.indexJDK)\n+          CompilerConfig.jdkSources.fold(sourceJars)(_ :: sourceJars)\n+        else sourceJars\n+      val buf = List.newBuilder[AbsolutePath]\n+      sourceJarsWithJDK.foreach { jar =>\n+        // ensure we only index each jar once even under race conditions.\n+        // race conditions are not unlikely since multiple .compilerconfig\n+        // are typically created at the same time for each project/configuration\n+        // combination. Duplicate tasks are expensive, for example we don't want\n+        // to index the JDK twice on first startup.\n+        indexedJars.computeIfAbsent(jar, _ => buf += jar)\n+      }\n+      val sourceJarsToIndex = buf.result()\n+      // Acquire a lock on the leveldb cache only during indexing.\n+      LevelDBMap.withDB(cacheDirectory.resolve(\"leveldb\").toFile) { db =>\n+        sourceJarsToIndex.foreach { path =>\n+          logger.info(s\"Indexing classpath entry $path...\")\n+          val database = db.getOrElseUpdate[AbsolutePath, Database](path, {\n+            () =>\n+              Mtags.indexDatabase(path :: Nil)\n+          })\n+          indexDatabase(database)\n+        }\n+      }\n+      Effects.IndexSourcesClasspath\n+    }\n+  }\n+\n+  /** Register this Database to symbol indexer. */\n+  def indexDatabase(document: s.Database): Effects.IndexSemanticdb = {\n+    document.documents.foreach(indexDocument)\n+    Effects.IndexSemanticdb\n+  }\n+\n+  /**\n+   *\n+   * Register this Document to symbol indexer.\n+   *\n+   * Indexes definitions, denotations and references in this document.\n+   *\n+   * @param document Must respect the following conventions:\n+   *                 - filename must be a URI\n+   *                 - names must be sorted\n+   */\n+  def indexDocument(document: s.Document): Effects.IndexSemanticdb = {\n+    val input = Input.VirtualFile(document.filename, document.contents)\n+    // what do we put as the uri?\n+    val uri = URI.create(document.filename)\n+    documentIndex.putDocument(uri, document)\n+    document.names.foreach {\n+      // TODO(olafur) handle local symbols on the fly from a `Document` in go-to-definition\n+      // local symbols don't need to be indexed globally, by skipping them we should\n+      // def isLocalSymbol(sym: String): Boolean =\n+      // !sym.endsWith(\".\") &&\n+      //     !sym.endsWith(\"#\") &&\n+      //     !sym.endsWith(\")\")\n+      // be able to minimize the size of the global index significantly.\n+      //      case s.ResolvedName(_, sym, _) if isLocalSymbol(sym) => // Do nothing, local symbol.\n+      case s.ResolvedName(Some(s.Position(start, end)), sym, true) =>\n+        symbolIndexer.addDefinition(\n+          sym,\n+          i.Position(document.filename, Some(input.toIndexRange(start, end)))\n+        )\n+      case s.ResolvedName(Some(s.Position(start, end)), sym, false) =>\n+        symbolIndexer.addReference(\n+          document.filename,\n+          input.toIndexRange(start, end),\n+          sym\n+        )\n+      case _ =>\n+    }\n+    document.symbols.foreach {\n+      case s.ResolvedSymbol(sym, Some(denot)) =>\n+        symbolIndexer.addDenotation(\n+          sym,\n+          denot.flags,\n+          denot.name,\n+          denot.signature\n+        )\n+      case _ =>\n+    }\n+    Effects.IndexSemanticdb\n+  }\n+\n+  /**\n+   * Returns false this this document is stale."
  },
  {
    "id" : "26fb4ae7-092d-40df-8881-280a5bb02d8a",
    "prId" : 94,
    "comments" : [
      {
        "id" : "c11e2d33-6e71-4ca7-8e72-4f588a3595db",
        "parentId" : null,
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "Is this an expensive check?",
        "createdAt" : "2017-12-04T04:32:16Z",
        "updatedAt" : "2017-12-04T04:32:17Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "13845266-21b6-4239-8fc5-6b0920be8210",
        "parentId" : "c11e2d33-6e71-4ca7-8e72-4f588a3595db",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Unrelated to this PR. This is not on a critical path so it's not a problem, we should be doing edit distance here",
        "createdAt" : "2017-12-04T06:31:07Z",
        "updatedAt" : "2017-12-04T07:14:00Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a7ced027393b3dfbcf886dacedbf8d6c1f6df97b",
    "line" : 213,
    "diffHunk" : "@@ -0,0 +1,226 @@\n+package scala.meta.languageserver.search\n+\n+import java.net.URI\n+import java.nio.charset.StandardCharsets\n+import java.nio.file.Files\n+import java.nio.file.Paths\n+import java.util.concurrent.ConcurrentHashMap\n+import scala.meta.languageserver.Buffers\n+import scala.meta.languageserver.Effects\n+import scala.meta.languageserver.ScalametaEnrichments._\n+import scala.meta.languageserver.ServerConfig\n+import scala.meta.languageserver.compiler.CompilerConfig\n+import scala.meta.languageserver.mtags.Mtags\n+import scala.meta.languageserver.ScalametaLanguageServer.cacheDirectory\n+import scala.meta.languageserver.storage.LevelDBMap\n+import scala.meta.languageserver.{index => i}\n+import `scala`.meta.languageserver.index.Position\n+import `scala`.meta.languageserver.index.SymbolData\n+import com.typesafe.scalalogging.LazyLogging\n+import langserver.{types => l}\n+import langserver.core.Notifications\n+import langserver.messages.DefinitionResult\n+import langserver.messages.ReferencesResult\n+import langserver.messages.DocumentSymbolResult\n+import org.langmeta.inputs.Input\n+import org.langmeta.internal.io.FileIO\n+import org.langmeta.internal.semanticdb.schema.Database\n+import org.langmeta.internal.semanticdb.schema.Document\n+import org.langmeta.internal.semanticdb.schema.ResolvedName\n+import org.langmeta.internal.semanticdb.{schema => s}\n+import org.langmeta.io.AbsolutePath\n+import org.langmeta.io.RelativePath\n+import org.langmeta.languageserver.InputEnrichments._\n+import org.langmeta.semanticdb.Signature\n+import org.langmeta.semanticdb.Symbol\n+\n+class InMemorySymbolIndex(\n+    val symbolIndexer: SymbolIndexer,\n+    val documentIndex: DocumentIndex,\n+    cwd: AbsolutePath,\n+    notifications: Notifications,\n+    buffers: Buffers,\n+    serverConfig: ServerConfig,\n+) extends SymbolIndex with LazyLogging {\n+  private val indexedJars: ConcurrentHashMap[AbsolutePath, Unit] =\n+    new ConcurrentHashMap[AbsolutePath, Unit]()\n+\n+  /** Returns a ResolvedName at the given location */\n+  def resolveName(\n+      path: AbsolutePath,\n+      line: Int,\n+      column: Int\n+  ): Option[ResolvedName] = {\n+    logger.info(s\"resolveName at $path:$line:$column\")\n+    for {\n+      document <- documentIndex.getDocument(path.toNIO.toUri)\n+      _ = logger.info(s\"Found document for $path\")\n+      _ <- isFreshSemanticdb(path, document)\n+      input = Input.VirtualFile(document.filename, document.contents)\n+      _ = logger.info(s\"Document for $path is fresh\")\n+      name <- document.names.collectFirst {\n+        case name @ ResolvedName(Some(position), symbol, _) if {\n+              val range = input.toIndexRange(position.start, position.end)\n+              logger.debug(\n+                s\"${document.filename.replaceFirst(\".*/\", \"\")} [${range.pretty}] ${symbol}\"\n+              )\n+              range.contains(line, column)\n+            } =>\n+          name\n+      }\n+    } yield name\n+  }\n+\n+  /** Returns a symbol at the given location */\n+  def findSymbol(\n+      path: AbsolutePath,\n+      line: Int,\n+      column: Int\n+  ): Option[Symbol] = {\n+    for {\n+      name <- resolveName(path, line, column)\n+      symbol = Symbol(name.symbol)\n+      _ = logger.info(s\"Matching symbol ${symbol}\")\n+    } yield symbol\n+  }\n+\n+  /** Returns symbol definition data from the index taking into account relevant alternatives */\n+  def definitionData(\n+      symbol: Symbol\n+  ): Option[SymbolData] = {\n+    (symbol :: symbol.definitionAlternative)\n+      .collectFirst {\n+        case symbolIndexer(data) if data.definition.nonEmpty =>\n+          logger.info(s\"Found definition symbol ${data.symbol}\")\n+          data\n+      }\n+  }\n+\n+  /** Returns symbol references data from the index taking into account relevant alternatives */\n+  def referencesData(\n+      symbol: Symbol\n+  ): List[SymbolData] = {\n+    (symbol :: symbol.referenceAlternatives)\n+      .collect {\n+        case symbolIndexer(data) =>\n+          if (data.symbol != symbol.syntax)\n+            logger.info(s\"Adding alternative references ${data.symbol}\")\n+          data\n+      }\n+  }\n+\n+  def indexDependencyClasspath(\n+      sourceJars: List[AbsolutePath]\n+  ): Effects.IndexSourcesClasspath = {\n+    if (!serverConfig.indexClasspath) Effects.IndexSourcesClasspath\n+    else {\n+      val sourceJarsWithJDK =\n+        if (serverConfig.indexJDK)\n+          CompilerConfig.jdkSources.fold(sourceJars)(_ :: sourceJars)\n+        else sourceJars\n+      val buf = List.newBuilder[AbsolutePath]\n+      sourceJarsWithJDK.foreach { jar =>\n+        // ensure we only index each jar once even under race conditions.\n+        // race conditions are not unlikely since multiple .compilerconfig\n+        // are typically created at the same time for each project/configuration\n+        // combination. Duplicate tasks are expensive, for example we don't want\n+        // to index the JDK twice on first startup.\n+        indexedJars.computeIfAbsent(jar, _ => buf += jar)\n+      }\n+      val sourceJarsToIndex = buf.result()\n+      // Acquire a lock on the leveldb cache only during indexing.\n+      LevelDBMap.withDB(cacheDirectory.resolve(\"leveldb\").toFile) { db =>\n+        sourceJarsToIndex.foreach { path =>\n+          logger.info(s\"Indexing classpath entry $path...\")\n+          val database = db.getOrElseUpdate[AbsolutePath, Database](path, {\n+            () =>\n+              Mtags.indexDatabase(path :: Nil)\n+          })\n+          indexDatabase(database)\n+        }\n+      }\n+      Effects.IndexSourcesClasspath\n+    }\n+  }\n+\n+  /** Register this Database to symbol indexer. */\n+  def indexDatabase(document: s.Database): Effects.IndexSemanticdb = {\n+    document.documents.foreach(indexDocument)\n+    Effects.IndexSemanticdb\n+  }\n+\n+  /**\n+   *\n+   * Register this Document to symbol indexer.\n+   *\n+   * Indexes definitions, denotations and references in this document.\n+   *\n+   * @param document Must respect the following conventions:\n+   *                 - filename must be a URI\n+   *                 - names must be sorted\n+   */\n+  def indexDocument(document: s.Document): Effects.IndexSemanticdb = {\n+    val input = Input.VirtualFile(document.filename, document.contents)\n+    // what do we put as the uri?\n+    val uri = URI.create(document.filename)\n+    documentIndex.putDocument(uri, document)\n+    document.names.foreach {\n+      // TODO(olafur) handle local symbols on the fly from a `Document` in go-to-definition\n+      // local symbols don't need to be indexed globally, by skipping them we should\n+      // def isLocalSymbol(sym: String): Boolean =\n+      // !sym.endsWith(\".\") &&\n+      //     !sym.endsWith(\"#\") &&\n+      //     !sym.endsWith(\")\")\n+      // be able to minimize the size of the global index significantly.\n+      //      case s.ResolvedName(_, sym, _) if isLocalSymbol(sym) => // Do nothing, local symbol.\n+      case s.ResolvedName(Some(s.Position(start, end)), sym, true) =>\n+        symbolIndexer.addDefinition(\n+          sym,\n+          i.Position(document.filename, Some(input.toIndexRange(start, end)))\n+        )\n+      case s.ResolvedName(Some(s.Position(start, end)), sym, false) =>\n+        symbolIndexer.addReference(\n+          document.filename,\n+          input.toIndexRange(start, end),\n+          sym\n+        )\n+      case _ =>\n+    }\n+    document.symbols.foreach {\n+      case s.ResolvedSymbol(sym, Some(denot)) =>\n+        symbolIndexer.addDenotation(\n+          sym,\n+          denot.flags,\n+          denot.name,\n+          denot.signature\n+        )\n+      case _ =>\n+    }\n+    Effects.IndexSemanticdb\n+  }\n+\n+  /**\n+   * Returns false this this document is stale.\n+   *\n+   * A document is considered stale if it's off-sync with the contents in [[buffers]].\n+   */\n+  private def isFreshSemanticdb(\n+      path: AbsolutePath,\n+      document: Document\n+  ): Option[Unit] = {\n+    val ok = Option(())\n+    val s = buffers.read(path)\n+    if (s == document.contents) ok"
  },
  {
    "id" : "fe95db4e-6260-47d1-bbd6-7d9df92e704a",
    "prId" : 132,
    "comments" : [
      {
        "id" : "261b4b78-8985-4756-922b-317a020fcb14",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Out-dated comment, can be removed.",
        "createdAt" : "2017-12-16T09:22:00Z",
        "updatedAt" : "2017-12-17T08:08:35Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "80f32b60-09c2-4672-8b22-cfcb61d85e40",
        "parentId" : "261b4b78-8985-4756-922b-317a020fcb14",
        "author" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2017-12-17T02:30:12Z",
        "updatedAt" : "2017-12-17T08:08:35Z",
        "lastEditedBy" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a1110f2f43ba9c63cdfb6ee4e3a2d756c6f2b37b",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,206 @@\n+package scala.meta.languageserver.search\n+\n+import java.net.URI\n+import java.nio.charset.StandardCharsets\n+import java.nio.file.Files\n+import java.nio.file.Paths\n+import java.util.concurrent.ConcurrentHashMap\n+import scala.meta.languageserver.Buffers\n+import scala.meta.languageserver.Effects\n+import scala.meta.languageserver.ScalametaEnrichments._\n+import scala.meta.languageserver.ServerConfig\n+import scala.meta.languageserver.compiler.CompilerConfig\n+import scala.meta.languageserver.mtags.Mtags\n+import scala.meta.languageserver.ScalametaLanguageServer.cacheDirectory\n+import scala.meta.languageserver.storage.LevelDBMap\n+import scala.meta.languageserver.{index => i}\n+import `scala`.meta.languageserver.index.Position\n+import `scala`.meta.languageserver.index.SymbolData\n+import com.typesafe.scalalogging.LazyLogging\n+import langserver.{types => l}\n+import langserver.core.Notifications\n+import langserver.messages.DefinitionResult\n+import langserver.messages.ReferencesResult\n+import langserver.messages.DocumentSymbolResult\n+import org.langmeta.inputs.Input\n+import org.langmeta.internal.io.FileIO\n+import org.langmeta.internal.semanticdb.schema.Database\n+import org.langmeta.internal.semanticdb.schema.Document\n+import org.langmeta.internal.semanticdb.schema.ResolvedName\n+import org.langmeta.internal.semanticdb.{schema => s}\n+import org.langmeta.io.AbsolutePath\n+import org.langmeta.io.RelativePath\n+import org.langmeta.languageserver.InputEnrichments._\n+import org.langmeta.semanticdb.Signature\n+import org.langmeta.semanticdb.Symbol\n+\n+/**\n+ * A high-level wrapper around [[DocumentIndex]] and [[SymbolIndexer]]."
  },
  {
    "id" : "dc51a97d-a746-4a2b-9395-03cf31c90880",
    "prId" : 140,
    "comments" : [
      {
        "id" : "25d16ea6-7479-4911-9a9f-9f53ffc07b3b",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I expected this to be prohibitively expensive but for scalameta/language-server it's still quite snappy. I'm sure for larger projects it may lag a bit. However, once we move to a sql-based index this should return instantly even for massive projects.",
        "createdAt" : "2017-12-19T09:33:33Z",
        "updatedAt" : "2017-12-19T21:36:09Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "28696a19cbb11842df7832a26479e11a1a8cb4a5",
    "line" : null,
    "diffHunk" : "@@ -185,4 +188,38 @@ class InMemorySymbolIndex(\n     Effects.IndexSemanticdb\n   }\n \n+  private def hasOneOfFlag(flags: Long, flag: Long): Boolean =\n+    (flags & flag) != 0L\n+\n+  override def workspaceSymbols(query: String): List[SymbolInformation] = {\n+    import scala.meta.semanticdb._\n+    import scala.meta.languageserver.ScalametaEnrichments._\n+    val result = symbolIndexer.allSymbols.toIterator"
  },
  {
    "id" : "d8959640-0f4d-4c1f-8fa1-2966876627a7",
    "prId" : 140,
    "comments" : [
      {
        "id" : "02aa86a9-7c38-4f95-b372-56b4eb35d294",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Can you move this logic to private method for consistency to other places where we do `A -> SymbolKind` conversions?",
        "createdAt" : "2017-12-19T10:16:13Z",
        "updatedAt" : "2017-12-19T21:36:09Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "32044c85-d1d4-4073-8965-9de9344608b7",
        "parentId" : "02aa86a9-7c38-4f95-b372-56b4eb35d294",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Good idea. I created a new `org.langmeta.semanticdb.SemanticdbEnrichments` to access the package private `HasFlags` trait",
        "createdAt" : "2017-12-19T21:36:38Z",
        "updatedAt" : "2017-12-19T21:36:38Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "28696a19cbb11842df7832a26479e11a1a8cb4a5",
    "line" : null,
    "diffHunk" : "@@ -185,4 +188,38 @@ class InMemorySymbolIndex(\n     Effects.IndexSemanticdb\n   }\n \n+  private def hasOneOfFlag(flags: Long, flag: Long): Boolean =\n+    (flags & flag) != 0L\n+\n+  override def workspaceSymbols(query: String): List[SymbolInformation] = {\n+    import scala.meta.semanticdb._\n+    import scala.meta.languageserver.ScalametaEnrichments._\n+    val result = symbolIndexer.allSymbols.toIterator\n+      .withFilter { symbol =>\n+        symbol.definition.isDefined && symbol.definition.get.uri\n+          .startsWith(\"file:\")\n+      }\n+      .collect {\n+        case i.SymbolData(sym, Some(pos), _, flags, name, _)\n+            if hasOneOfFlag(flags, CLASS | TRAIT | OBJECT) && {\n+              // NOTE(olafur) fuzzy-wuzzy doesn't seem to do a great job\n+              // for camelcase searches like \"DocSymPr\" when looking for\n+              // \"DocumentSymbolProvider. We should try and port something\n+              // like https://blog.forrestthewoods.com/reverse-engineering-sublime-text-s-fuzzy-match-4cffeed33fdb\n+              // instead.\n+              FuzzySearch.partialRatio(query, name) >= 90\n+            } =>\n+          val symbolKind ="
  },
  {
    "id" : "ad279ade-9dc8-4de3-9ade-e3d0b89c29ec",
    "prId" : 188,
    "comments" : [
      {
        "id" : "e6d6eeb2-3661-4387-a6af-0d81c33d3990",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "The changes for local symbols will require us to implement this TODO. Local symbols must now either use reference equality or include the original document in their syntax because two local symbols from different source files can have identical structures.",
        "createdAt" : "2018-02-02T15:41:49Z",
        "updatedAt" : "2018-02-05T23:19:55Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a7d6d979e9a1d925c6c6b8a0472ab8ece80c41b8",
    "line" : 105,
    "diffHunk" : "@@ -162,39 +163,40 @@ class InMemorySymbolIndex(\n    *                 - filename must be formatted as a URI\n    *                 - names must be sorted\n    */\n-  def indexDocument(document: s.Document): Effects.IndexSemanticdb = {\n-    val uri = Uri(document.filename)\n-    val input = Input.VirtualFile(document.filename, document.contents)\n+  def indexDocument(document: s.TextDocument): Effects.IndexSemanticdb = {\n+    val uri = Uri(document.uri)\n+    val input = Input.VirtualFile(document.uri, document.text)\n     documentIndex.putDocument(uri, document)\n-    document.names.foreach {\n+    document.occurrences.foreach {\n       // TODO(olafur) handle local symbols on the fly from a `Document` in go-to-definition\n       // local symbols don't need to be indexed globally, by skipping them we should\n       // def isLocalSymbol(sym: String): Boolean =\n       // !sym.endsWith(\".\") &&\n       //     !sym.endsWith(\"#\") &&\n       //     !sym.endsWith(\")\")\n       // be able to minimize the size of the global index significantly.\n-      //      case s.ResolvedName(_, sym, _) if isLocalSymbol(sym) => // Do nothing, local symbol.\n-      case s.ResolvedName(Some(s.Position(start, end)), sym, true) =>\n+      //      case s.SymbolOccurrence(_, sym, _) if isLocalSymbol(sym) => // Do nothing, local symbol."
  }
]