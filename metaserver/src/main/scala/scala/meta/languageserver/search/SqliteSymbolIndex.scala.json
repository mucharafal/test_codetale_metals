[
  {
    "id" : "84308575-4d6d-44e8-9106-da45a5ed855f",
    "prId" : 94,
    "comments" : [
      {
        "id" : "8d07a73e-70ba-4a05-9503-0d50b5b2ffde",
        "parentId" : null,
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "conn.map",
        "createdAt" : "2017-12-04T04:39:08Z",
        "updatedAt" : "2017-12-04T04:39:08Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a7ced027393b3dfbcf886dacedbf8d6c1f6df97b",
    "line" : null,
    "diffHunk" : "@@ -19,16 +20,45 @@ class SqliteSymbolIndex(\n     buffers: Buffers,\n     serverConfig: ServerConfig,\n ) extends SymbolIndex with LazyLogging {\n+  private val conn: Option[Connection] = {\n+    val connPath = cwd.resolve(\".metaserver\").resolve(\"semanticdb.sqlite\")\n+    val connString = s\"jdbc:sqlite:$connPath\"\n+    try {\n+      val conn = DriverManager.getConnection(connString)\n+      logger.info(s\"Successfully initialized connection to $connString\")\n+      Some(conn)\n+    } catch {\n+      case ex: Throwable =>\n+        logger.error(s\"Failed to initialize connection to $connString\", ex)\n+        None\n+    }\n+  }\n+\n   def findSymbol(path: AbsolutePath, line: Int, column: Int): Option[Symbol] = {\n-    ???\n+    conn match {"
  },
  {
    "id" : "eab88fab-887a-4f18-a6b7-3e04b62c4d71",
    "prId" : 94,
    "comments" : [
      {
        "id" : "1064f6a8-de46-407e-a149-212be1fa133f",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "For longer-term maintainability, I think we should consider using a higher-level API like Quill http://getquill.io/  ",
        "createdAt" : "2017-12-04T06:38:23Z",
        "updatedAt" : "2017-12-04T07:14:00Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e05d547c-3ed4-431b-866a-4e3ce3723c75",
        "parentId" : "1064f6a8-de46-407e-a149-212be1fa133f",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I can vouch for quill: extremely pleasant to work with! That said, I would make sure it works reliably with sqlite, which is often a bit \"strange\" compared to other dbs. I've had problems with slick and sqlite too in the past.",
        "createdAt" : "2017-12-04T08:33:31Z",
        "updatedAt" : "2017-12-04T08:33:31Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "acbbb4d0-6bd2-458c-99c6-9ae399054c91",
        "parentId" : "1064f6a8-de46-407e-a149-212be1fa133f",
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "One more vote for quill, it has been my favorite db lib to use so far.",
        "createdAt" : "2017-12-04T14:37:49Z",
        "updatedAt" : "2017-12-04T14:37:49Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6c101789-cbf0-498e-9dc4-2381f6d9201a",
        "parentId" : "1064f6a8-de46-407e-a149-212be1fa133f",
        "author" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "body" : "@fwbrasil Can you comment on Quill's compatibility with SQLite?",
        "createdAt" : "2017-12-04T16:10:08Z",
        "updatedAt" : "2017-12-04T16:10:08Z",
        "lastEditedBy" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8bfc9183-17c8-4fff-97fb-546a712a6d07",
        "parentId" : "1064f6a8-de46-407e-a149-212be1fa133f",
        "author" : {
          "login" : "fwbrasil",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/831175?v=4"
        },
        "body" : "Quill has the dialect implementation for SQLite but I've seen a complaint on Twitter that it has bugs. I guess not many people use Quill with SQLite since there are no open bugs for it. I can review the dialect later this week if you're planning to use it.\r\n\r\nAnother alternative is H2. It has better performance, can be used in a client-server setup if necessary, and at least supports standard SQL.",
        "createdAt" : "2017-12-04T17:35:53Z",
        "updatedAt" : "2017-12-04T17:35:53Z",
        "lastEditedBy" : {
          "login" : "fwbrasil",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/831175?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ff673105-731a-4f6c-a80f-57fd05ab7833",
        "parentId" : "1064f6a8-de46-407e-a149-212be1fa133f",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I have no personal attachment nor preference for sqlite over h2. It sounds like we should consider using h2, could you check how h2 impacts performance/space @xeno-by ?\r\n\r\n@fwbrasil Perhaps unrelated, but maybe you have some insights on a problem we're facing: how do we compose indices from different sources? I imagine this could impact the choice of a db, but I'm quite a noob in this space ðŸ˜…. For example, we want to be able to query for all references of a symbol across library1.jar:library2.jar:test-classes/\r\n\r\n- We could store everything in a single database per user, but that would mean concurrent writes since indexing independent libraries can be done in parallel.\r\n- We could store everything in a single database per workspace, but that could mean a lot of wasted disk space for machines with many projects. I personally have 587 projects in my `~/dev` directory, so this is a no-go for me.\r\n- We could separate each index by its source (`library1.jar.db`), and for each configuration we open connections to each database per entry in the classpath. I'm not sure how practical this approach is for large classpaths or evolving projects with moving modules.\r\n\r\nI'm personally leaning towards option 1 if we can take advantage of concurrent writes. I had previously outruled this option because sqlite doesn't seem to support concurrent writes.",
        "createdAt" : "2017-12-04T23:38:15Z",
        "updatedAt" : "2017-12-04T23:45:13Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "985dd0ef-0c2c-45b0-a954-6cf42999732e",
        "parentId" : "1064f6a8-de46-407e-a149-212be1fa133f",
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "Both H2 and HSQLDB embedded dbs support multiple writers using mvcc.",
        "createdAt" : "2017-12-05T01:00:27Z",
        "updatedAt" : "2017-12-05T01:00:27Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fd12f3ed-bd1c-47a2-a6bc-4021fec9cd79",
        "parentId" : "1064f6a8-de46-407e-a149-212be1fa133f",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I didn't know about sqlite's WAL, nice find! \r\n\r\nReading up a bit, it seems we should also consider performance of deletions. We will need to regularly clean up semanticdb indices from stale snapshots of source files. It would be good to investigate difference between h2/sqlite with regards to deletions @xeno-by ",
        "createdAt" : "2017-12-05T14:47:30Z",
        "updatedAt" : "2017-12-05T14:47:31Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a7ced027393b3dfbcf886dacedbf8d6c1f6df97b",
    "line" : 88,
    "diffHunk" : "@@ -0,0 +1,178 @@\n+package scala.meta.languageserver.search\n+\n+import java.sql._\n+import scala.meta.languageserver.Buffers\n+import scala.meta.languageserver.Effects\n+import scala.meta.languageserver.InMemory\n+import scala.meta.languageserver.ServerConfig\n+import scala.meta.languageserver.Sqlite\n+import scala.meta.languageserver.{index => i}\n+import scala.meta.languageserver.index.SymbolData\n+import com.typesafe.scalalogging.LazyLogging\n+import langserver.core.Notifications\n+import langserver.{types => l}\n+import org.langmeta.internal.semanticdb.{schema => s}\n+import org.langmeta.io.AbsolutePath\n+import org.langmeta.semanticdb.Symbol\n+\n+class SqliteSymbolIndex(\n+    cwd: AbsolutePath,\n+    notifications: Notifications,\n+    buffers: Buffers,\n+    serverConfig: ServerConfig,\n+) extends SymbolIndex with LazyLogging {\n+  private val conn: Option[Connection] = {\n+    val connPath = cwd.resolve(\".metaserver\").resolve(\"semanticdb.sqlite\")\n+    val connString = s\"jdbc:sqlite:$connPath\"\n+    try {\n+      val conn = DriverManager.getConnection(connString)\n+      logger.info(s\"Successfully initialized connection to $connString\")\n+      Some(conn)\n+    } catch {\n+      case ex: Throwable =>\n+        logger.error(s\"Failed to initialize connection to $connString\", ex)\n+        None\n+    }\n+  }\n+\n+  private val findSymbolSql =\n+    \"\"\"|select s.symbol\n+       |from document as d, name as n, symbol as s\n+       |where d.filename == ?\n+       |and n.document == d.id\n+       |and n.start_line <= ?\n+       |and n.start_character <= ?\n+       |and n.end_line >= ?\n+       |and n.end_character >= ?\n+       |and s.id=n.symbol\"\"\".stripMargin\n+  private val findSymbolStmt = conn.map(_.prepareStatement(findSymbolSql))\n+\n+  def findSymbol(path: AbsolutePath, line: Int, column: Int): Option[Symbol] = {\n+    findSymbolStmt match {\n+      case Some(findSymbolStmt) =>\n+        findSymbolStmt.setString(1, path.toRelative(cwd).toString)\n+        findSymbolStmt.setInt(2, line)\n+        findSymbolStmt.setInt(3, column)\n+        findSymbolStmt.setInt(4, line)\n+        findSymbolStmt.setInt(5, column)\n+        val findSymbolRs = findSymbolStmt.executeQuery()\n+        try {\n+          while (findSymbolRs.next()) {\n+            val s_symbol = findSymbolRs.getString(1)\n+            return Some(Symbol(s_symbol))\n+          }\n+          None\n+        } finally {\n+          findSymbolRs.close()\n+        }\n+      case _ =>\n+        None\n+    }\n+  }\n+\n+  private val symbolIdSql = \"select s.id from symbol as s where s.symbol == ?\"\n+  private val definitionDataSql =\n+    \"\"\"|select d.filename, n.start_line, n.start_character, n.end_line, n.end_character\n+       |from name as n, document as d\n+       |where n.symbol == ?\n+       |and n.is_definition == 1\n+       |and d.id == n.document\"\"\".stripMargin\n+  private val symbolIdStmt = conn.map(_.prepareStatement(symbolIdSql))\n+  private val definitionDataStmt = conn.map(_.prepareStatement(definitionDataSql))\n+\n+  def definitionData(symbol: Symbol): Option[SymbolData] = {\n+    (symbolIdStmt, definitionDataStmt) match {\n+      case (Some(symbolIdStmt), Some(definitionDataStmt)) =>\n+        // TODO: Take into account symbol.definitionAlternative.\n+        symbolIdStmt.setString(1, symbol.toString)\n+        val symbolIdRs = symbolIdStmt.executeQuery()"
  }
]