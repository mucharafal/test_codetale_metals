[
  {
    "id" : "e9c8ac66-ec17-4637-8299-7a1c8f49e1e7",
    "prId" : 78,
    "comments" : [
      {
        "id" : "d8a7514a-eadc-44a7-bafa-678abce8f388",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I keep the names here short so I can `testOnly tests.search.SymbolIndexTest.fallback`, we can add a comment if think it's unclear ",
        "createdAt" : "2017-12-02T13:08:31Z",
        "updatedAt" : "2017-12-02T23:22:47Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cbe903cb-8a3d-426a-ab8c-301aa3802b3b",
        "parentId" : "d8a7514a-eadc-44a7-bafa-678abce8f388",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Fixed in 3548ab933e71621b13af599261d5da2f16e65567",
        "createdAt" : "2017-12-02T23:25:20Z",
        "updatedAt" : "2017-12-02T23:25:20Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "71da2fa975b8fb36cd888c23d0a8b0214a68e679",
    "line" : null,
    "diffHunk" : "@@ -51,28 +52,70 @@ object SymbolIndexTest extends MegaSuite {\n         line: Int,\n         column: Int,\n         expected: String\n-    ): Unit = {\n-      val term = indexer.findSymbol(path, line, column)\n+    ): Option[Symbol] = {\n+      val symbol = indexer.findSymbol(path, line, column)\n+      Predef.assert(\n+        symbol.isDefined,\n+        s\"Symbol not found at $path:$line:$column.\"\n+      )\n+      assertNoDiff(symbol.get.syntax, expected)\n       Predef.assert(\n-        term.isDefined,\n-        s\"Symbol not found at $path:$line:$column. Did you run scalametaEnableCompletions from sbt?\"\n+        indexer.symbolIndexer.get(symbol.get).isDefined,\n+        s\"Symbol ${symbol} is not found in the index. Did you run scalametaEnableCompletions from sbt?\"\n       )\n-      assertNoDiff(term.get.symbol, expected)\n+      symbol\n+    }\n+\n+    def assertSymbolDefinition(\n+        expected: String\n+    )(\n+        symbol: Symbol\n+    ): Unit = {\n+      val data = indexer.definitionData(symbol)\n       Predef.assert(\n-        term.get.definition.isDefined,\n-        s\"Definition not found for term $term\"\n+        data.isDefined,\n+        s\"Definition not found for term ${symbol}\"\n       )\n+      assertNoDiff(data.get.symbol, expected)\n     }\n \n-    \"fallback\" - {\n+    \"find symbol and its definition\" - {"
  },
  {
    "id" : "731424ee-bb63-49d4-904b-2ed519195bf7",
    "prId" : 78,
    "comments" : [
      {
        "id" : "6e0fd03e-7a81-44e9-88cd-ff7c8b234bc0",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "can we create a `assertDefinition` with 4 params that does both symbolFound and definition? I prefer to keep logic to a single check/assertion statement in every unit test",
        "createdAt" : "2017-12-02T13:11:27Z",
        "updatedAt" : "2017-12-02T23:22:47Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2f54eab1-8f0a-44b1-86f7-33e3693a046a",
        "parentId" : "6e0fd03e-7a81-44e9-88cd-ff7c8b234bc0",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "OK. I just thought you may want to test these things separately. I'll make it into one `assertDefinition`. What about checking result definition location, is it worth checking or the symbol name is enough?",
        "createdAt" : "2017-12-02T17:27:03Z",
        "updatedAt" : "2017-12-02T23:22:47Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "10d24307-b9fe-4885-ad06-119c0b20bf03",
        "parentId" : "6e0fd03e-7a81-44e9-88cd-ff7c8b234bc0",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "We can keep the current methods, just add one more that does both assertSymbolFound and assertSymbolDefinition to avoid the duplication in every unit test.",
        "createdAt" : "2017-12-02T17:31:24Z",
        "updatedAt" : "2017-12-02T23:22:47Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "288d024d-b468-4829-9f8e-24f0041ae2f7",
        "parentId" : "6e0fd03e-7a81-44e9-88cd-ff7c8b234bc0",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "One utest question here: what is the proper way of failing in tests? Is it just throwing exceptions?\r\n\r\nI'd like to rewrite \r\n\r\n```scala\r\nval foo = somethingReturningOption()\r\nPredef.assert(\r\n  foo.isDefined,\r\n  s\"foo is not defined\"\r\n)\r\n```\r\n\r\nto \r\n\r\n```scala\r\nval foo = somethingReturningOption().getOrElse(\r\n  fail(s\"foo is not defined\")\r\n)\r\n```\r\n\r\nSo that I don't need to write `foo.get` in the following code.",
        "createdAt" : "2017-12-02T17:41:25Z",
        "updatedAt" : "2017-12-02T23:22:47Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "faeee67d-87f2-431a-9fd2-f7c0e845625c",
        "parentId" : "6e0fd03e-7a81-44e9-88cd-ff7c8b234bc0",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "add a `fail(msg: String): Nothing` method in MegaSuite and throw exception with empty stack trace",
        "createdAt" : "2017-12-02T17:42:26Z",
        "updatedAt" : "2017-12-02T23:22:47Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "553bc1b1-5192-4f63-b2b8-6e81e3dc6d68",
        "parentId" : "6e0fd03e-7a81-44e9-88cd-ff7c8b234bc0",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "the method already exists it seems!",
        "createdAt" : "2017-12-02T17:42:46Z",
        "updatedAt" : "2017-12-02T23:22:47Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7125f865-ea76-4980-873b-25037cfa6477",
        "parentId" : "6e0fd03e-7a81-44e9-88cd-ff7c8b234bc0",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Oh, right! I missed it.",
        "createdAt" : "2017-12-02T17:44:04Z",
        "updatedAt" : "2017-12-02T23:22:47Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a408ee6c-9aca-43a4-bf33-213d9bf0d2d1",
        "parentId" : "6e0fd03e-7a81-44e9-88cd-ff7c8b234bc0",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Addressed in 3548ab933e71621b13af599261d5da2f16e65567",
        "createdAt" : "2017-12-02T23:25:03Z",
        "updatedAt" : "2017-12-02T23:25:04Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "71da2fa975b8fb36cd888c23d0a8b0214a68e679",
    "line" : null,
    "diffHunk" : "@@ -51,28 +52,70 @@ object SymbolIndexTest extends MegaSuite {\n         line: Int,\n         column: Int,\n         expected: String\n-    ): Unit = {\n-      val term = indexer.findSymbol(path, line, column)\n+    ): Option[Symbol] = {\n+      val symbol = indexer.findSymbol(path, line, column)\n+      Predef.assert(\n+        symbol.isDefined,\n+        s\"Symbol not found at $path:$line:$column.\"\n+      )\n+      assertNoDiff(symbol.get.syntax, expected)\n       Predef.assert(\n-        term.isDefined,\n-        s\"Symbol not found at $path:$line:$column. Did you run scalametaEnableCompletions from sbt?\"\n+        indexer.symbolIndexer.get(symbol.get).isDefined,\n+        s\"Symbol ${symbol} is not found in the index. Did you run scalametaEnableCompletions from sbt?\"\n       )\n-      assertNoDiff(term.get.symbol, expected)\n+      symbol\n+    }\n+\n+    def assertSymbolDefinition(\n+        expected: String\n+    )(\n+        symbol: Symbol\n+    ): Unit = {\n+      val data = indexer.definitionData(symbol)\n       Predef.assert(\n-        term.get.definition.isDefined,\n-        s\"Definition not found for term $term\"\n+        data.isDefined,\n+        s\"Definition not found for term ${symbol}\"\n       )\n+      assertNoDiff(data.get.symbol, expected)\n     }\n \n-    \"fallback\" - {\n+    \"find symbol and its definition\" - {\n       \"<<User>>(...)\" -\n-        assertSymbolFound(3, 17, \"_root_.a.User#\")\n+        assertSymbolFound(3, 17, \"_root_.a.User.\").map(\n+          assertSymbolDefinition(\"_root_.a.User#\")\n+        )\n       \"User.<<apply>>(...)\" -\n-        assertSymbolFound(3, 22, \"_root_.a.User#\")\n+        assertSymbolFound(\n+          3,\n+          22,\n+          \"_root_.a.User.apply(Ljava/lang/String;I)La/User;.\"\n+        ).map(\n+          assertSymbolDefinition(\"_root_.a.User#\")\n+        )\n+      \"User.<<copy>>(...)\" -\n+        assertSymbolFound("
  },
  {
    "id" : "4ae340be-e10c-4c0d-8044-31b01d715deb",
    "prId" : 78,
    "comments" : [
      {
        "id" : "2d7dab01-2f4b-4559-b30a-4d1d2494834c",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I think we can add \"Did you run scalametaEnableCompletions from sbt?\" here too, just in case.",
        "createdAt" : "2017-12-02T13:14:31Z",
        "updatedAt" : "2017-12-02T23:22:47Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6954b4f6-eaf0-4976-92e3-3040323b0081",
        "parentId" : "2d7dab01-2f4b-4559-b30a-4d1d2494834c",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Fixed in 3548ab933e71621b13af599261d5da2f16e65567",
        "createdAt" : "2017-12-02T23:25:34Z",
        "updatedAt" : "2017-12-02T23:25:34Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "71da2fa975b8fb36cd888c23d0a8b0214a68e679",
    "line" : null,
    "diffHunk" : "@@ -51,28 +52,70 @@ object SymbolIndexTest extends MegaSuite {\n         line: Int,\n         column: Int,\n         expected: String\n-    ): Unit = {\n-      val term = indexer.findSymbol(path, line, column)\n+    ): Option[Symbol] = {\n+      val symbol = indexer.findSymbol(path, line, column)\n+      Predef.assert(\n+        symbol.isDefined,\n+        s\"Symbol not found at $path:$line:$column.\""
  },
  {
    "id" : "04838a4e-0251-447c-9d65-01b9f0f2cc95",
    "prId" : 78,
    "comments" : [
      {
        "id" : "8f5382ba-d89c-4e97-8f0d-f019376cd214",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "👍 ",
        "createdAt" : "2017-12-02T22:40:18Z",
        "updatedAt" : "2017-12-02T23:22:47Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "71da2fa975b8fb36cd888c23d0a8b0214a68e679",
    "line" : 199,
    "diffHunk" : "@@ -45,41 +63,143 @@ object SymbolIndexTest extends MegaSuite {\n   server.initialize(0L, cwd.toString(), ClientCapabilities())\n   while (s.tickOne()) () // Trigger indexing\n   val indexer: SymbolIndex = server.symbolIndexer\n+  val reminderMsg = \"Did you run scalametaEnableCompletions from sbt?\"\n   override val tests = Tests {\n \n-    def assertSymbolFound(\n+    /** Checks that there is a symbol at given position, it's in the index and has expected name */\n+    def assertSymbolFound(line: Int, column: Int)(\n+        expected: String\n+    ): Symbol = {\n+      val symbol = indexer\n+        .findSymbol(path.UserTest, line, column)\n+        .getOrElse(\n+          fail(\n+            s\"Symbol not found at $path.UserTest:$line:$column. ${reminderMsg}\"\n+          )\n+        )\n+      assertNoDiff(symbol.syntax, expected)\n+      val symbolData = indexer.symbolIndexer\n+        .get(symbol)\n+        .getOrElse(\n+          fail(s\"Symbol ${symbol} is not found in the index. ${reminderMsg}\")\n+        )\n+      assertNoDiff(symbolData.symbol, expected)\n+      symbol\n+    }\n+\n+    /** Checks that given symbol has a definition with expected name */\n+    def assertSymbolDefinition(line: Int, column: Int)(\n+        expectedSymbol: String,\n+        expectedDefn: String\n+    ): Unit = {\n+      val symbol = assertSymbolFound(line, column)(expectedSymbol)\n+      val data = indexer\n+        .definitionData(symbol)\n+        .getOrElse(\n+          fail(s\"Definition not found for term ${symbol}\")\n+        )\n+      assertNoDiff(data.symbol, expectedDefn)\n+    }\n+\n+    /** Checks that given symbol has a definition with expected name */\n+    def assertSymbolReferences(\n         line: Int,\n         column: Int,\n-        expected: String\n+        withDefinition: Boolean\n+    )(\n+        expected: l.Location*\n     ): Unit = {\n-      val term = indexer.findSymbol(path, line, column)\n-      Predef.assert(\n-        term.isDefined,\n-        s\"Symbol not found at $path:$line:$column. Did you run scalametaEnableCompletions from sbt?\"\n-      )\n-      assertNoDiff(term.get.symbol, expected)\n-      Predef.assert(\n-        term.get.definition.isDefined,\n-        s\"Definition not found for term $term\"\n-      )\n+      val symbol = indexer\n+        .findSymbol(path.UserTest, line, column)\n+        .getOrElse(\n+          fail(\n+            s\"Symbol not found at $path.UserTest:$line:$column. ${reminderMsg}\"\n+          )\n+        )\n+      val dataList = indexer.referencesData(symbol)\n+      if (dataList.isEmpty) fail(s\"References not found for term ${symbol}\")\n+      // TODO: use `dataList` to test expected alternatives\n+\n+      val found = dataList.flatMap {\n+        indexer.referencesLocations(_, withDefinition)\n+      }\n+      val missingLocations = found.toSet diff expected.toSet\n+      assert(missingLocations.isEmpty)\n+      val unexpectedLocations = expected.toSet diff found.toSet\n+      assert(unexpectedLocations.isEmpty)\n     }\n \n-    \"fallback\" - {\n+    def ref(\n+        path: AbsolutePath,\n+        start: (Int, Int),\n+        end: (Int, Int)\n+    ): l.Location =\n+      l.Location(\n+        s\"file:${path.toString}\",\n+        l.Range(\n+          l.Position(start._1, start._2),\n+          l.Position(end._1, end._2)\n+        )\n+      )\n+\n+    \"definition\" - {\n       \"<<User>>(...)\" -\n-        assertSymbolFound(3, 17, \"_root_.a.User#\")\n+        assertSymbolDefinition(3, 17)(\n+          \"_root_.a.User.\",\n+          \"_root_.a.User#\"\n+        )\n       \"User.<<apply>>(...)\" -\n-        assertSymbolFound(3, 22, \"_root_.a.User#\")\n+        assertSymbolDefinition(3, 22)(\n+          \"_root_.a.User.apply(Ljava/lang/String;I)La/User;.\",\n+          \"_root_.a.User#\"\n+        )\n+      \"User.<<copy>>(...)\" -\n+        assertSymbolDefinition(4, 9)(\n+          \"_root_.a.User#copy(Ljava/lang/String;I)La/User;.\",\n+          \"_root_.a.User#\"\n+        )\n       \"User.apply(<<name>> ...)\" -\n-        assertSymbolFound(3, 28, \"_root_.a.User#(name)\")\n+        assertSymbolDefinition(3, 28)(\n+          \"_root_.a.User.apply(Ljava/lang/String;I)La/User;.(name)\",\n+          \"_root_.a.User#(name)\"\n+        )\n       \"user.copy(<<age>> = ...)\" -\n-        assertSymbolFound(4, 14, \"_root_.a.User#(age)\")\n+        assertSymbolDefinition(4, 14)(\n+          \"_root_.a.User#copy(Ljava/lang/String;I)La/User;.(age)\",\n+          \"_root_.a.User#(age)\"\n+        )\n     }\n \n     \"classpath\" - {\n       \"<<List>>(...)\" - // ScalaMtags\n-        assertSymbolFound(5, 5, \"_root_.scala.collection.immutable.List.\")\n+        assertSymbolFound(5, 5)(\"_root_.scala.collection.immutable.List.\")\n       \"<<CharRef>>.create(...)\" - // JavaMtags\n-        assertSymbolFound(8, 19, \"_root_.scala.runtime.CharRef.\")\n+        assertSymbolFound(8, 19)(\"_root_.scala.runtime.CharRef.\")\n+    }\n+\n+    \"references\" - {\n+      \"<<User>>(...)\" -\n+        assertSymbolReferences(3, 17, withDefinition = true)("
  },
  {
    "id" : "fc4f09d6-5547-48f9-9adc-a5b2c30de52e",
    "prId" : 94,
    "comments" : [
      {
        "id" : "bc1430b4-21d8-4584-860c-9b571a4d33cf",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This can be turned into a test against in-memory db.",
        "createdAt" : "2017-12-04T06:32:44Z",
        "updatedAt" : "2017-12-04T07:14:00Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a7ced027393b3dfbcf886dacedbf8d6c1f6df97b",
    "line" : 46,
    "diffHunk" : "@@ -205,36 +205,38 @@ object SymbolIndexTest extends MegaSuite {\n     }\n \n     \"bijection\" - {\n-      val target = cwd.resolve(\"target\").resolve(\"scala-2.12\")\n-      val originalDatabase = {\n-        val complete = m.Database.load(\n-          Classpath(\n-            target.resolve(\"classes\") ::\n-              target.resolve(\"test-classes\") ::\n-              Nil\n-          )\n-        )\n-        val slimDocuments = complete.documents.map { d =>\n-          d.copy(messages = Nil, synthetics = Nil, symbols = Nil)\n-        }\n-        m.Database(slimDocuments)\n-      }\n-      val reconstructedDatabase = InverseSymbolIndexer.reconstructDatabase(\n-        cwd,\n-        index.documentIndex,\n-        index.symbolIndexer.allSymbols\n-      )\n-      val filenames = reconstructedDatabase.documents.toIterator.map { d =>\n-        Paths.get(d.input.syntax).getFileName.toString\n-      }.toList\n-      assert(filenames.nonEmpty)\n-      assert(\n-        filenames == List(\n-          \"User.scala\",\n-          \"UserTest.scala\"\n-        )\n-      )\n-      assertNoDiff(reconstructedDatabase.syntax, originalDatabase.syntax)\n+      ???\n+      // TODO: No idea how important this test is."
  },
  {
    "id" : "8dc837f2-5870-4eef-93f9-db7b6c2a2609",
    "prId" : 105,
    "comments" : [
      {
        "id" : "641848af-64e1-43aa-85b9-63ecf8181307",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "The expected symbol should be\r\n```\r\n_root_.scala.`package`.Either#\r\n```\r\nwhich is a type alias. However, I think we index that symbol as `_root_.scala.Either` in scalamtags. We need to add `package` to the owner when entering package objects in https://github.com/scalameta/language-server/blob/1299a44633f5f36f757ad26a08a52f53bc712b6c/metaserver/src/main/scala/scala/meta/languageserver/mtags/ScalaMtags.scala#L26",
        "createdAt" : "2017-12-09T16:35:32Z",
        "updatedAt" : "2017-12-10T10:49:47Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5eb83868-e226-4d68-ad4a-f5f8552b8520",
        "parentId" : "641848af-64e1-43aa-85b9-63ecf8181307",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "A better way to test this is to update this line here \r\nhttps://github.com/scalameta/language-server/blob/1299a44633f5f36f757ad26a08a52f53bc712b6c/metaserver/src/test/scala/tests/mtags/ScalaMtagsTest.scala#L42\r\nto expect `_root_.a.b.c.K.package.l.`",
        "createdAt" : "2017-12-09T16:37:07Z",
        "updatedAt" : "2017-12-10T10:49:47Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "934c4112fb2285f24db94b32d24af4214089e940",
    "line" : null,
    "diffHunk" : "@@ -177,6 +177,8 @@ object SymbolIndexTest extends MegaSuite {\n         assertSymbolFound(5, 5)(\"_root_.scala.collection.immutable.List.\")\n       \"<<CharRef>>.create(...)\" - // JavaMtags\n         assertSymbolFound(8, 19)(\"_root_.scala.runtime.CharRef.\")\n+      \"<<Either>>[...]\" -\n+        assertSymbolFound(10, 15)(\"_root_.scala.util.Either#\")"
  }
]