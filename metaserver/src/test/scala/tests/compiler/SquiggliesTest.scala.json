[
  {
    "id" : "ddadfd65-b86e-4c82-b3ef-e308b05f9a78",
    "prId" : 158,
    "comments" : [
      {
        "id" : "2b90b3d7-b421-40bc-9b0c-10253a77356c",
        "parentId" : null,
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "Test helpers would be nice here so we didn't have to encode patterns in our tests that we wouldn't use in our code like .right.get.\r\n\r\nFor example:\r\n```scala\r\n  def assertNoDiffRight(task: Task[String], expected: String) = {\r\n    val taskResult = task.runSyncMaybe\r\n    taskResult match {\r\n      case Left(cause) => fail(\"task failed...wtf?\")\r\n      case Right(value) => assertNoDiff(value, expected)\r\n    }\r\n  }\r\n\r\n  def check(name: String, original: String, expected: String): Unit = {\r\n    test(name) {\r\n      val input = Input.VirtualFile(name, original)\r\n      val doc = Semanticdbs.toSemanticdb(input, compiler)\r\n      val obtained = squiggliesProvider.squigglies(doc)\r\n        .map{ pubDiag =>\r\n          val diags = pubDiag.flatMap(_.diagnostics)\r\n          diags.map { d: =>\r\n            val pos = input.toPosition(d.range)\r\n            pos.formatMessage(d.severity.getOrElse(???).toString, d.message)\r\n          }\r\n        }\r\n\r\n      assertNoDiffRight(obtained.map(_.mkString(\"\\n\")), expected)\r\n    }\r\n  }\r\n```",
        "createdAt" : "2017-12-23T17:37:45Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "24cd8c09-ba0e-4965-9d81-c779e6b30607",
        "parentId" : "2b90b3d7-b421-40bc-9b0c-10253a77356c",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "For me it's most important that errors don't get lost, `Try[T].get` is better than `Either[Err, T].right.get` in this regard. For Either I typically do `val Right(foo) = blah` instead of `right.get` for this exact reason, at least you get the left value on match error",
        "createdAt" : "2017-12-23T20:13:50Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2cd5eb93-a115-4f52-92dd-31b41b3a312f",
        "parentId" : "2b90b3d7-b421-40bc-9b0c-10253a77356c",
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "Agreed.  Thatâ€™s why rightTest or something like it is nice, it lets you make sure you always fail a test when you donâ€™t get the right you want.  An anti-pattern I have seen (but not in this codebase) is developers doing SomeMonad.map(aTest) and having it fail silently.",
        "createdAt" : "2017-12-24T01:31:44Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "affa2ea127de9483cd4eeda3dfcfcb3bb80a4322",
    "line" : null,
    "diffHunk" : "@@ -25,7 +34,7 @@ object SquiggliesTest extends CompilerSuite {\n       val input = Input.VirtualFile(name, original)\n       val doc = Semanticdbs.toSemanticdb(input, compiler)\n       val PublishDiagnostics(_, diagnostics) :: Nil =\n-        SquiggliesProvider.squigglies(doc, linter)\n+        squiggliesProvider.squigglies(doc).runSyncMaybe.right.get"
  },
  {
    "id" : "576b5d9c-f28e-4a63-871e-f7383a26f7c4",
    "prId" : 158,
    "comments" : [
      {
        "id" : "4c75ccd5-071e-4744-ac6d-54d0e10c3bc8",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "BTW there is a TestScheduler() which can run in sync mode with `tickOne()`, see how it's used in SymbolIndexTest",
        "createdAt" : "2017-12-23T20:22:45Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e27d61fd-c248-4895-81fa-159a5e4a9a55",
        "parentId" : "4c75ccd5-071e-4744-ac6d-54d0e10c3bc8",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I remembered you mentioning something like this a few days back, but I got lazy :D\r\nThanks for the pointer, I'll refactor this into something more appropriate",
        "createdAt" : "2017-12-23T21:28:42Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "56b7bf44-eb27-49e8-aa51-91eee39ca25f",
        "parentId" : "4c75ccd5-071e-4744-ac6d-54d0e10c3bc8",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "but `runSyncMaybe` is fine too ðŸ˜¸ ",
        "createdAt" : "2017-12-23T21:59:08Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "13ff60d4-0dc8-476c-bae1-e106073d8c62",
        "parentId" : "4c75ccd5-071e-4744-ac6d-54d0e10c3bc8",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I've kept `runSyncMaybe` but matched over `Right` on the lhs. I'm not sure I understand how the `TestScheduler` would help in this case, tbh.",
        "createdAt" : "2017-12-29T15:33:49Z",
        "updatedAt" : "2018-01-02T19:54:18Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "affa2ea127de9483cd4eeda3dfcfcb3bb80a4322",
    "line" : null,
    "diffHunk" : "@@ -25,7 +34,7 @@ object SquiggliesTest extends CompilerSuite {\n       val input = Input.VirtualFile(name, original)\n       val doc = Semanticdbs.toSemanticdb(input, compiler)\n       val PublishDiagnostics(_, diagnostics) :: Nil =\n-        SquiggliesProvider.squigglies(doc, linter)\n+        squiggliesProvider.squigglies(doc).runSyncMaybe.right.get"
  }
]