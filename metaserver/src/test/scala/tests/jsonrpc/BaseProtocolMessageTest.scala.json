[
  {
    "id" : "3295958d-6b4f-47cb-b459-fe10ecb8fc2e",
    "prId" : 184,
    "comments" : [
      {
        "id" : "064c5f9a-2737-4f76-95cf-6f758ce6df96",
        "parentId" : null,
        "author" : {
          "login" : "jvican",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/2462974?u=247f9a0cfd142440687595dce462fabed087e912&v=4"
        },
        "body" : "The test should check not only two messages, but what happens when you receive two split up bytebuffers (the first with only the header, and the second one with the body of the first one + the header of the next message).\r\n  \r\nThe previous scenario can happen according to the spec, since it's only the order of buffering what you're testing. ",
        "createdAt" : "2018-01-18T21:27:08Z",
        "updatedAt" : "2018-01-19T09:27:18Z",
        "lastEditedBy" : {
          "login" : "jvican",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/2462974?u=247f9a0cfd142440687595dce462fabed087e912&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0caacd5c-c60c-4e55-866b-54845b826934",
        "parentId" : "064c5f9a-2737-4f76-95cf-6f758ce6df96",
        "author" : {
          "login" : "jvican",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/2462974?u=247f9a0cfd142440687595dce462fabed087e912&v=4"
        },
        "body" : "Ok, ðŸ‘Œ re reading this now and it seems that youâ€™re handling the scenario.",
        "createdAt" : "2018-01-19T08:37:42Z",
        "updatedAt" : "2018-01-19T09:27:18Z",
        "lastEditedBy" : {
          "login" : "jvican",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/2462974?u=247f9a0cfd142440687595dce462fabed087e912&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "363ee6a0-9dd3-44a7-8294-3162a0094845",
        "parentId" : "064c5f9a-2737-4f76-95cf-6f758ce6df96",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I added a property test that checks that messages can come chunked at any offset, this should hopefully catch any off-by-one errors.",
        "createdAt" : "2018-01-19T09:48:00Z",
        "updatedAt" : "2018-01-19T09:48:00Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e8f46f9f766b796b4404ccf47a66c79f4474d83f",
    "line" : 91,
    "diffHunk" : "@@ -0,0 +1,91 @@\n+package tests.jsonrpc\n+\n+import java.nio.ByteBuffer\n+import scala.concurrent.Await\n+import scala.concurrent.duration.Duration\n+import com.typesafe.scalalogging.LazyLogging\n+import io.circe.syntax._\n+import monix.eval.Task\n+import monix.execution.schedulers.TestScheduler\n+import monix.reactive.Observable\n+import org.langmeta.jsonrpc._\n+import tests.MegaSuite\n+\n+object BaseProtocolMessageTest extends MegaSuite with LazyLogging {\n+  val request = Request(\"method\", Some(\"params\".asJson), RequestId(1))\n+  val message = BaseProtocolMessage(request)\n+  def bytes: ByteBuffer = MessageWriter.write(message)\n+\n+  test(\"toString\") {\n+    assertNoDiff(\n+      message.toString,\n+      \"\"\"|Content-Length: 62\n+         |\n+         |{\"method\":\"method\",\"params\":\"params\",\"id\":\"1\",\"jsonrpc\":\"2.0\"}\"\"\".stripMargin\n+    )\n+  }\n+\n+  val s = TestScheduler()\n+\n+  def await[T](f: Task[T]): T = {\n+    val a = f.runAsync(s)\n+    while (s.tickOne()) ()\n+    Await.result(a, Duration(\"5s\"))\n+  }\n+\n+  def parse(buffers: List[ByteBuffer]): List[BaseProtocolMessage] = {\n+    val buf = List.newBuilder[BaseProtocolMessage]\n+    val t = BaseProtocolMessage\n+      .fromByteBuffers(Observable(buffers: _*), logger)\n+      // NOTE(olafur) toListL will not work as expected here, it will send onComplete\n+      // for the first onNext, even when a single ByteBuffer can contain multiple\n+      // messages\n+      .foreachL(buf += _)\n+    await(t)\n+    buf.result()\n+  }\n+\n+  def pairs(n: Int): List[(ByteBuffer, BaseProtocolMessage)] =\n+    1.to(n).toList.map(_ => bytes -> message)\n+\n+  0.to(4).foreach { i =>\n+    test(s\"parse-$i\") {\n+      val (buffers, messages) = pairs(i).unzip\n+      assertEquals(parse(buffers), messages)\n+    }\n+  }\n+\n+  def checkTwoMessages(name: String, buffers: List[ByteBuffer]): Unit = {\n+    test(name) {\n+      val obtained = parse(buffers)\n+      val expected = List(message, message)\n+      assertEquals(obtained, expected)\n+    }\n+  }\n+  def array: ByteBuffer = ByteBuffer.wrap(bytes.array())\n+  def take(n: Int): ByteBuffer = ByteBuffer.wrap(bytes.array().take(n))\n+  def drop(n: Int): ByteBuffer = ByteBuffer.wrap(bytes.array().drop(n))\n+\n+  checkTwoMessages(\n+    \"combined\",\n+    ByteBuffer.wrap(bytes.array() ++ bytes.array()) ::\n+      Nil\n+  )\n+\n+  checkTwoMessages(\n+    \"chunked\",\n+    take(10) ::\n+      drop(10) ::\n+      array ::\n+      Nil\n+  )\n+\n+  checkTwoMessages(\n+    \"chunked2\",\n+    take(10) ::\n+      ByteBuffer.wrap(drop(10).array() ++ take(10).array()) ::\n+      drop(10) ::\n+      Nil\n+  )"
  }
]