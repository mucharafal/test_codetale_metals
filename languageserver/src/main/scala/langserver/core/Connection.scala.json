[
  {
    "id" : "b2e1e310-b0e0-4d2c-8563-213d046b12bf",
    "prId" : 103,
    "comments" : [
      {
        "id" : "84fcd51f-955d-40c6-b2fd-8db5bf432ee7",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "How about making this a `trait`? TBH I never understood the `abstract class` vs `trait` thing in Scala, hence I always used traits.",
        "createdAt" : "2017-12-09T13:38:09Z",
        "updatedAt" : "2017-12-09T13:43:06Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d4b5e31f-ac00-406c-86d4-755b87982f2e",
        "parentId" : "84fcd51f-955d-40c6-b2fd-8db5bf432ee7",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I prefer abstract class unless I expect it to be mixed into another class. abstract classes can accept parameters (traits get that ability too in dotty) and they also make it easier to keep compatibility pre-2.12 (although that's irrelevant here). I think it's best to keep this as a class here, I can make it non-abstract by implementing commandHandler, but it doesn't really matter for us much here.",
        "createdAt" : "2017-12-09T13:47:51Z",
        "updatedAt" : "2017-12-09T13:47:51Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b806662917cd1a44afa64fabbb83717dd0bbefe5",
    "line" : 28,
    "diffHunk" : "@@ -16,23 +14,25 @@ import langserver.messages._\n import langserver.types._\n import play.api.libs.json._\n import com.dhpcs.jsonrpc.JsonRpcMessage._\n+import monix.eval.Task\n+import monix.execution.Scheduler\n \n /**\n  * A connection that reads and writes Language Server Protocol messages.\n  *\n+ * @param s thread pool to run tasks with.\n  * @note Commands are executed asynchronously via a thread pool\n  * @note Notifications are executed synchronously on the calling thread\n  * @note The command handler returns Any because sometimes response objects can't be part\n  *       of a sealed hierarchy. For instance, goto definition returns a {{{Seq[Location]}}}\n  *       and that can't subclass anything other than Any\n  */\n-class Connection(inStream: InputStream, outStream: OutputStream)(val commandHandler: (String, ServerCommand) => Any)\n+abstract class Connection(inStream: InputStream, outStream: OutputStream)(implicit s: Scheduler)"
  },
  {
    "id" : "1ba71beb-1dc7-4fd4-8953-3bcd30956d5b",
    "prId" : 128,
    "comments" : [
      {
        "id" : "19a62cd6-144e-49b1-b50e-a25481cb3e0a",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I'll report the comment as a review comment, so it's easier to see.\r\nUnder what circumstances is this a `StringCorrelationId`? Should we ignore it?",
        "createdAt" : "2017-12-15T14:46:56Z",
        "updatedAt" : "2017-12-15T21:25:34Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f7807140-58cc-4497-82e8-a6371f8920b3",
        "parentId" : "19a62cd6-144e-49b1-b50e-a25481cb3e0a",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I've seen https://github.com/scalameta/language-server/pull/128#commitcomment-26300800, that makes sense.",
        "createdAt" : "2017-12-15T14:48:49Z",
        "updatedAt" : "2017-12-15T21:25:34Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "baa275778ef3f4f47fbd5cf8309f788fb8829473",
    "line" : 72,
    "diffHunk" : "@@ -153,12 +171,21 @@ abstract class Connection(inStream: InputStream, outStream: OutputStream)(implic\n   }\n \n   private def handleCommand(method: String, id: CorrelationId, command: ServerCommand): Future[Unit] = {\n-    commandHandler(method, command).map { result =>\n+    val future = commandHandler(method, command).map { result =>\n       val rJson = ResultResponse.write(result, id)\n       msgWriter.write(rJson)\n     }.onErrorRecover {\n       case NonFatal(e) =>\n         logger.error(e.getMessage, e)\n     }.runAsync\n+    id match {\n+      case NumericCorrelationId(value) =>"
  },
  {
    "id" : "c04eebb1-48c6-48ae-bf47-5c8506f1320d",
    "prId" : 154,
    "comments" : [
      {
        "id" : "c7e31ab5-1dec-48fa-b317-73ec28a3c350",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Should it be private?",
        "createdAt" : "2017-12-26T01:31:17Z",
        "updatedAt" : "2017-12-29T12:34:28Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "26fd6b7f-ca41-45d1-b210-fc6e53b34ca1",
        "parentId" : "c7e31ab5-1dec-48fa-b317-73ec28a3c350",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Yes! And it can also be a val ",
        "createdAt" : "2017-12-29T12:24:31Z",
        "updatedAt" : "2017-12-29T12:34:28Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fdc9c838e9c14f4d811f77cd7768c91f492170e0",
    "line" : null,
    "diffHunk" : "@@ -58,6 +59,13 @@ abstract class Connection(inStream: InputStream, outStream: OutputStream)(implic\n     }\n   }\n \n+  var i = new AtomicInteger()"
  }
]