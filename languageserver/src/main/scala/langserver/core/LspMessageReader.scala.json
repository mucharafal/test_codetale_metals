[
  {
    "id" : "bf253d12-6455-4050-a553-78a756ecbb29",
    "prId" : 160,
    "comments" : [
      {
        "id" : "801fd6fd-4443-4e23-9486-d5f6b50abc2e",
        "parentId" : null,
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "Call encode to encode RawLspMessage to bytes for sending over the wire",
        "createdAt" : "2018-01-02T02:18:14Z",
        "updatedAt" : "2018-01-02T02:18:14Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fdfaabdedafe21bb43375518f71a14495fb71c23",
    "line" : 17,
    "diffHunk" : "@@ -0,0 +1,23 @@\n+package langserver.core\n+\n+import langserver.messages.RawLspMessage\n+import monix.reactive.Observable\n+import scodec.DecodeResult\n+import scodec.bits.BitVector\n+\n+/*\n+  Splits incoming bytes into unparsed RawLspMessages\n+ */\n+object LspMessageReader {\n+  def lspMessageExtractor: Observable[Array[Byte]] => Observable[List[RawLspMessage]] = obsBytes => {\n+    //Start with am empty decoderesult and pass along decoded messages plus remainder bits as needed\n+    val emptyDecodeResult: DecodeResult[List[RawLspMessage]] = DecodeResult(List[RawLspMessage](), BitVector.empty)\n+    obsBytes\n+      .scan(emptyDecodeResult) { case (DecodeResult(messages, buf), newBytes) =>\n+        RawLspMessage.listCodec.decode(buf ++ BitVector(newBytes))//Decode if we can"
  }
]