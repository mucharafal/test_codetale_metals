[
  {
    "id" : "c5bf9b54-a60c-4885-a6ee-888797009ad2",
    "prId" : 22,
    "comments" : [
      {
        "id" : "d342650c-ebca-4a7d-b1fa-7b3c93cb20f7",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I hadn't noticed this was implemented, we should use it instead of the buggy implementation I added on monday.",
        "createdAt" : "2017-11-09T18:40:56Z",
        "updatedAt" : "2017-11-09T18:47:55Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cf9b8714-b9f8-4ced-be92-f88f18b77760",
        "parentId" : "d342650c-ebca-4a7d-b1fa-7b3c93cb20f7",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Ah nice, it's the first time I notice it too!",
        "createdAt" : "2017-11-09T18:51:08Z",
        "updatedAt" : "2017-11-09T18:51:08Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f5a08cec9d466f68f9b683a3fae08d09b2b1025b",
    "line" : 58,
    "diffHunk" : "@@ -0,0 +1,88 @@\n+package langserver.core\n+\n+import langserver.types.TextDocumentIdentifier\n+import langserver.types.TextDocumentContentChangeEvent\n+import langserver.types.Position\n+import java.io.File\n+import java.net.URI\n+\n+case class TextDocument(uri: String, contents: Array[Char]) {\n+  def applyChanges(changes: Seq[TextDocumentContentChangeEvent]): TextDocument = {\n+    // we assume full text sync\n+    assert(changes.size == 1)\n+    val change = changes.head\n+    assert(change.range.isEmpty)\n+    assert(change.rangeLength.isEmpty)\n+\n+    copy(contents = change.text.toArray)\n+  }\n+\n+  private def peek(idx: Int) =\n+    if (idx < contents.size) contents(idx) else -1\n+\n+  def toFile: File =\n+    new File(URI.create(uri))\n+\n+  /**\n+   * Return the corresponding position in this text document as 0-based line and column.\n+   */\n+  def offsetToPosition(offset: Int): Position = {\n+    if (offset >= contents.size)\n+      throw new IndexOutOfBoundsException(s\"$uri: asked position at offset $offset, but contents is only ${contents.size} characters long.\")\n+\n+    var i, line, col = 0\n+\n+    while (i < offset) {\n+      contents(i) match {\n+        case '\\r' =>\n+          line += 1\n+          col = 0\n+          if (peek(i + 1) == '\\n') i += 1\n+\n+        case '\\n' =>\n+          line += 1\n+          col = 0\n+\n+        case _ =>\n+          col += 1\n+      }\n+      i += 1\n+    }\n+\n+    Position(line, col)\n+  }\n+\n+  /**\n+   * Return the offset in the current document, for a given 0-based line/col position.\n+   */\n+  def positionToOffset(pos: Position): Int = {"
  }
]