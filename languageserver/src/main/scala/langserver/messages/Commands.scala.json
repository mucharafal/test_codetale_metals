[
  {
    "id" : "d76f2415-4f7c-47ab-b92f-0053dbf38a21",
    "prId" : 73,
    "comments" : [
      {
        "id" : "fec734ab-2a1f-4fb2-a7c0-a93d39079718",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Will s/`type`/tpe/ produce the same JSON?",
        "createdAt" : "2017-11-29T07:04:44Z",
        "updatedAt" : "2017-11-29T09:13:44Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d17d50d1-3c13-43d7-9fd1-55290c97ce9c",
        "parentId" : "fec734ab-2a1f-4fb2-a7c0-a93d39079718",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Good catch! I changed for consistency with `ShowMessageParams` and `LogMessageParams` above, not realizing that this one is actually serialized. I will change it back and move to `types.scala`",
        "createdAt" : "2017-11-29T08:23:36Z",
        "updatedAt" : "2017-11-29T09:13:44Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "782607e2-9028-461d-aa03-776a227aeadd",
        "parentId" : "fec734ab-2a1f-4fb2-a7c0-a93d39079718",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "By the way, those mentioned `...Params` should also have `type` field. I think this was the reason that the warning messages were shown as info-type notifications in Atom (I think in VSCode as well).. So it's a really good catch 👌 ",
        "createdAt" : "2017-11-29T08:31:55Z",
        "updatedAt" : "2017-11-29T09:13:44Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f0984ffba258f1c27392fee995757c63a71755eb",
    "line" : null,
    "diffHunk" : "@@ -247,15 +247,9 @@ object Initialized {\n \n case class CancelRequest(id: Int) extends Notification\n \n-case class FileEvent(uri: String, `type`: Int)\n+case class FileEvent(uri: String, tpe: FileChangeType)"
  },
  {
    "id" : "f775368a-ffb1-4c86-8b7e-5d61146bc6ff",
    "prId" : 73,
    "comments" : [
      {
        "id" : "dcaa1154-d9d4-4a56-b0a9-db3b36164b6e",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I think this fixes a bug for which all messages where displayed as Info",
        "createdAt" : "2017-11-29T09:30:57Z",
        "updatedAt" : "2017-11-29T09:32:44Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "915dfd11-7004-494e-8edf-4f1b4ec43dcc",
        "parentId" : "dcaa1154-d9d4-4a56-b0a9-db3b36164b6e",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "It's strange, but I don't get any of those messages now.. 🤔 how do I break it to get one of those warnings? 😄 ",
        "createdAt" : "2017-11-29T10:04:06Z",
        "updatedAt" : "2017-11-29T10:04:06Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c1be328d-036a-4742-97de-50981db5a239",
        "parentId" : "dcaa1154-d9d4-4a56-b0a9-db3b36164b6e",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Editing a file, and try jumping to a definition without compiling it. It should prompt a message.",
        "createdAt" : "2017-11-29T10:38:15Z",
        "updatedAt" : "2017-11-29T10:38:15Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b7714dfd-329e-4b2c-a7c5-16b0767c6c49",
        "parentId" : "dcaa1154-d9d4-4a56-b0a9-db3b36164b6e",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "I guess, I can't do it now because go-to-definition is broken for me.. Thanks anyway.",
        "createdAt" : "2017-11-29T13:00:42Z",
        "updatedAt" : "2017-11-29T13:00:42Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f0984ffba258f1c27392fee995757c63a71755eb",
    "line" : 31,
    "diffHunk" : "@@ -149,21 +149,20 @@ object ShutdownResult {\n     OWrites[ShutdownResult](s => Json.obj()))\n }\n \n+/**\n+  * The show message request is sent from a server to a client to ask the client to display a\n+  * particular message in the user interface. In addition to the show message notification the\n+  * request allows to pass actions and to wait for an answer from the client.\n+  *\n+  * @param `type` The message type. @see [[MessageType]]\n+  * @param message The actual message\n+  * @param actions The message action items to present.\n+  */\n case class ShowMessageRequestParams(\n-  /**\n-   * The message type. @see MessageType\n-   */\n-  tpe: Long,\n-\n-  /**\n-   * The actual message\n-   */\n+  `type`: MessageType,"
  },
  {
    "id" : "f388f007-b077-45e5-849c-97f2903595a8",
    "prId" : 160,
    "comments" : [
      {
        "id" : "d9c81ce0-411b-4b18-ae68-ffddc7fe7d29",
        "parentId" : null,
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "Grab content-length, optionally content-type, then Final newline header delimeter",
        "createdAt" : "2018-01-02T02:21:11Z",
        "updatedAt" : "2018-01-02T02:21:11Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fdfaabdedafe21bb43375518f71a14495fb71c23",
    "line" : 16,
    "diffHunk" : "@@ -5,14 +5,24 @@ import play.api.libs.json._\n import langserver.types._\n import langserver.utils.JsonRpcUtils\n import play.api.libs.json.OFormat\n-\n-//an unparsed LspMessage\n-case class UnparsedLspMessage(headers: Map[String, String], content: Array[Byte]) {\n-  override def toString: String = {\n-    //I am using standard unix newlines, on the wire lsp messages should use windows newlines\n-    val header = headers.map { case (k, v) => k + \": \" + v }.mkString(\"\\n\")\n-    header + \"\\n\" + new String(content, \"UTF-8\")\n-  }\n+import scodec.Codec\n+import scodec.codecs._\n+import langserver.utils.ScodecUtils._\n+import scodec.bits.ByteVector\n+\n+case class RawLspMessage(mimeType: Option[String], body: ByteVector)\n+object RawLspMessage {\n+  val CONTENT_LENGTH_KEY = \"Content-Length\"\n+  val CONTENT_TYPE_KEY = \"Content-Type\"\n+  val codec: Codec[RawLspMessage] =\n+    (bracketedBy(\"Content-Length:\", \"\\r\\n\").xmap[Int](_.trim.toInt, _.toString)\n+      ~ optional(lookaheadIssue98Patch(constant('C')), bracketedBy(\"Content-Type:\", \"\\r\\n\"))\n+      ).dropRight(constant(ByteVector('\\r', '\\n')))"
  },
  {
    "id" : "57f6b8c0-fa18-482c-a7a8-79dc5c3bfee9",
    "prId" : 160,
    "comments" : [
      {
        "id" : "475687b7-2b2a-4bf4-8880-7e2927c1e823",
        "parentId" : null,
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "Use the length and mime type to pull the correct number of bytes, then construct a RawLspMessage",
        "createdAt" : "2018-01-02T02:21:59Z",
        "updatedAt" : "2018-01-02T02:21:59Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fdfaabdedafe21bb43375518f71a14495fb71c23",
    "line" : 18,
    "diffHunk" : "@@ -5,14 +5,24 @@ import play.api.libs.json._\n import langserver.types._\n import langserver.utils.JsonRpcUtils\n import play.api.libs.json.OFormat\n-\n-//an unparsed LspMessage\n-case class UnparsedLspMessage(headers: Map[String, String], content: Array[Byte]) {\n-  override def toString: String = {\n-    //I am using standard unix newlines, on the wire lsp messages should use windows newlines\n-    val header = headers.map { case (k, v) => k + \": \" + v }.mkString(\"\\n\")\n-    header + \"\\n\" + new String(content, \"UTF-8\")\n-  }\n+import scodec.Codec\n+import scodec.codecs._\n+import langserver.utils.ScodecUtils._\n+import scodec.bits.ByteVector\n+\n+case class RawLspMessage(mimeType: Option[String], body: ByteVector)\n+object RawLspMessage {\n+  val CONTENT_LENGTH_KEY = \"Content-Length\"\n+  val CONTENT_TYPE_KEY = \"Content-Type\"\n+  val codec: Codec[RawLspMessage] =\n+    (bracketedBy(\"Content-Length:\", \"\\r\\n\").xmap[Int](_.trim.toInt, _.toString)\n+      ~ optional(lookaheadIssue98Patch(constant('C')), bracketedBy(\"Content-Type:\", \"\\r\\n\"))\n+      ).dropRight(constant(ByteVector('\\r', '\\n')))\n+      .consume { case (len, mime) =>\n+        bytes(len).xmap[RawLspMessage](bytes => RawLspMessage(mime, bytes), lsp => lsp.body)"
  },
  {
    "id" : "05060446-6fea-4e74-8fe4-0b26ba7002ba",
    "prId" : 160,
    "comments" : [
      {
        "id" : "fdbc14f4-db69-41a6-a023-554a3609b437",
        "parentId" : null,
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "To go the other way read length and mime type from RawLspMessage and pass to encoders",
        "createdAt" : "2018-01-02T02:23:10Z",
        "updatedAt" : "2018-01-02T02:23:10Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fdfaabdedafe21bb43375518f71a14495fb71c23",
    "line" : 19,
    "diffHunk" : "@@ -5,14 +5,24 @@ import play.api.libs.json._\n import langserver.types._\n import langserver.utils.JsonRpcUtils\n import play.api.libs.json.OFormat\n-\n-//an unparsed LspMessage\n-case class UnparsedLspMessage(headers: Map[String, String], content: Array[Byte]) {\n-  override def toString: String = {\n-    //I am using standard unix newlines, on the wire lsp messages should use windows newlines\n-    val header = headers.map { case (k, v) => k + \": \" + v }.mkString(\"\\n\")\n-    header + \"\\n\" + new String(content, \"UTF-8\")\n-  }\n+import scodec.Codec\n+import scodec.codecs._\n+import langserver.utils.ScodecUtils._\n+import scodec.bits.ByteVector\n+\n+case class RawLspMessage(mimeType: Option[String], body: ByteVector)\n+object RawLspMessage {\n+  val CONTENT_LENGTH_KEY = \"Content-Length\"\n+  val CONTENT_TYPE_KEY = \"Content-Type\"\n+  val codec: Codec[RawLspMessage] =\n+    (bracketedBy(\"Content-Length:\", \"\\r\\n\").xmap[Int](_.trim.toInt, _.toString)\n+      ~ optional(lookaheadIssue98Patch(constant('C')), bracketedBy(\"Content-Type:\", \"\\r\\n\"))\n+      ).dropRight(constant(ByteVector('\\r', '\\n')))\n+      .consume { case (len, mime) =>\n+        bytes(len).xmap[RawLspMessage](bytes => RawLspMessage(mime, bytes), lsp => lsp.body)\n+      }(lsp => (lsp.body.length.toInt, lsp.mimeType))"
  },
  {
    "id" : "e76bb8db-914e-4e4c-a440-4cf583c48845",
    "prId" : 160,
    "comments" : [
      {
        "id" : "5c2a5acc-3f5d-4628-8f2e-ba647900b1b5",
        "parentId" : null,
        "author" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "body" : "Use to pull as many messages out of a frame as possible ",
        "createdAt" : "2018-01-02T02:23:55Z",
        "updatedAt" : "2018-01-02T02:23:55Z",
        "lastEditedBy" : {
          "login" : "ShaneDelmore",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/4604933?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fdfaabdedafe21bb43375518f71a14495fb71c23",
    "line" : 21,
    "diffHunk" : "@@ -5,14 +5,24 @@ import play.api.libs.json._\n import langserver.types._\n import langserver.utils.JsonRpcUtils\n import play.api.libs.json.OFormat\n-\n-//an unparsed LspMessage\n-case class UnparsedLspMessage(headers: Map[String, String], content: Array[Byte]) {\n-  override def toString: String = {\n-    //I am using standard unix newlines, on the wire lsp messages should use windows newlines\n-    val header = headers.map { case (k, v) => k + \": \" + v }.mkString(\"\\n\")\n-    header + \"\\n\" + new String(content, \"UTF-8\")\n-  }\n+import scodec.Codec\n+import scodec.codecs._\n+import langserver.utils.ScodecUtils._\n+import scodec.bits.ByteVector\n+\n+case class RawLspMessage(mimeType: Option[String], body: ByteVector)\n+object RawLspMessage {\n+  val CONTENT_LENGTH_KEY = \"Content-Length\"\n+  val CONTENT_TYPE_KEY = \"Content-Type\"\n+  val codec: Codec[RawLspMessage] =\n+    (bracketedBy(\"Content-Length:\", \"\\r\\n\").xmap[Int](_.trim.toInt, _.toString)\n+      ~ optional(lookaheadIssue98Patch(constant('C')), bracketedBy(\"Content-Type:\", \"\\r\\n\"))\n+      ).dropRight(constant(ByteVector('\\r', '\\n')))\n+      .consume { case (len, mime) =>\n+        bytes(len).xmap[RawLspMessage](bytes => RawLspMessage(mime, bytes), lsp => lsp.body)\n+      }(lsp => (lsp.body.length.toInt, lsp.mimeType))\n+\n+  val listCodec: Codec[List[RawLspMessage]] = list(codec)"
  },
  {
    "id" : "56f44fb4-cd01-4a1f-ae3e-0d5c86c9b8d7",
    "prId" : 164,
    "comments" : [
      {
        "id" : "c4bffe00-4f63-47fd-b319-1341ce36921a",
        "parentId" : null,
        "author" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "body" : "Is it possible to auto-derive this boilerplate? The necessity to explicitly spell out the serializers for every request/response was one of the biggest annoyances personally to me when I was writing my own simple language server.\r\n  ",
        "createdAt" : "2018-01-04T04:15:26Z",
        "updatedAt" : "2018-01-04T21:40:31Z",
        "lastEditedBy" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2fbb6ec1-0df1-42c2-babd-e5a0b30bd552",
        "parentId" : "c4bffe00-4f63-47fd-b319-1341ce36921a",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Yep, it's going away soon. The next thing I want to work on (unless someone beats me to it) is to replace play-json with circe and use the `@JsonCodec` macro annotation to make this boilerplate (and other, see Configuration) go away.",
        "createdAt" : "2018-01-04T09:22:15Z",
        "updatedAt" : "2018-01-04T21:40:31Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2d85926b-64e8-45fa-854f-499c2cd5dc3e",
        "parentId" : "c4bffe00-4f63-47fd-b319-1341ce36921a",
        "author" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "body" : "❤️ ",
        "createdAt" : "2018-01-04T16:14:00Z",
        "updatedAt" : "2018-01-04T21:40:31Z",
        "lastEditedBy" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "37b50a28-2082-4355-8379-3c88b3a26159",
        "parentId" : "c4bffe00-4f63-47fd-b319-1341ce36921a",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Fixed in #165 🎉 ",
        "createdAt" : "2018-01-04T20:23:37Z",
        "updatedAt" : "2018-01-04T21:41:50Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2280d4f4-a79b-4369-88ee-9095cf3f63d9",
        "parentId" : "c4bffe00-4f63-47fd-b319-1341ce36921a",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I didn't want to change the json library in this PR as it was doing enough already",
        "createdAt" : "2018-01-04T20:24:01Z",
        "updatedAt" : "2018-01-04T21:41:50Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "91848703d00af951b1f55d62236ec4f5ae50851b",
    "line" : null,
    "diffHunk" : "@@ -34,7 +24,10 @@ case class InitializeParams(\n   /**\n    * The capabilities provided by the client (editor)\n    */\n-  capabilities: ClientCapabilities) extends ServerCommand\n+  capabilities: ClientCapabilities)\n+object InitializeParams {\n+  implicit val format: OFormat[InitializeParams] = Json.format[InitializeParams]\n+}"
  },
  {
    "id" : "05316d2a-fc5d-481e-87ac-a726730c5402",
    "prId" : 164,
    "comments" : [
      {
        "id" : "fbdfc08a-f54e-47d5-9233-0f8221525784",
        "parentId" : null,
        "author" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "body" : "👍 ",
        "createdAt" : "2018-01-04T04:15:41Z",
        "updatedAt" : "2018-01-04T21:40:31Z",
        "lastEditedBy" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "91848703d00af951b1f55d62236ec4f5ae50851b",
    "line" : 16,
    "diffHunk" : "@@ -1,19 +1,9 @@\n package langserver.messages\n \n-import com.dhpcs.jsonrpc._\n-import play.api.libs.json._\n import langserver.types._\n-import langserver.utils.JsonRpcUtils\n import play.api.libs.json.OFormat\n+import play.api.libs.json._\n \n-sealed trait Message\n-sealed trait ServerCommand extends Message\n-sealed trait ClientCommand extends Message\n-\n-sealed trait Response extends Message\n-sealed trait ResultResponse extends Response\n-\n-sealed trait Notification extends Message"
  },
  {
    "id" : "b99b7ab5-9dba-4fd2-a229-f6e37b3fe6e6",
    "prId" : 164,
    "comments" : [
      {
        "id" : "3e946ba8-5e4b-4209-b1f9-56df5510c3a3",
        "parentId" : null,
        "author" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "body" : "How do you figure out which classes to call `XxxRequest` and which classes to call `XxxParams`? This is the problem that I faced myself when writing a language server, and I haven't figured out a consistent naming strategy yet.",
        "createdAt" : "2018-01-04T04:16:35Z",
        "updatedAt" : "2018-01-04T21:40:31Z",
        "lastEditedBy" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b5531cdf-9943-4eb8-964d-dcd1e9268f30",
        "parentId" : "3e946ba8-5e4b-4209-b1f9-56df5510c3a3",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "My understanding is that each Request has (optionally) Params.\r\n\r\nThe names of the Params classes are taken as-is from the names of the TypeScript interfaces in https://microsoft.github.io/language-server-protocol/specification.\r\n\r\nThe names of the Requests are essentially transformed from `<scope>/<requestType>` to `<Scope><RequestType>Request`, e.g. `textDocument/rename` -> `TextDocumentRenameRequest`\r\n\r\nIf something doesn't follow this rules, I think we should change it.",
        "createdAt" : "2018-01-04T09:25:30Z",
        "updatedAt" : "2018-01-04T21:40:31Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4b5268f5-a706-482e-a7b9-238f562aee29",
        "parentId" : "3e946ba8-5e4b-4209-b1f9-56df5510c3a3",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Ditto, the names should match the interfaces in the lsp spec.",
        "createdAt" : "2018-01-04T20:24:25Z",
        "updatedAt" : "2018-01-04T21:41:50Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "91848703d00af951b1f55d62236ec4f5ae50851b",
    "line" : null,
    "diffHunk" : "@@ -209,175 +211,127 @@ object CodeActionParams {\n   implicit val format: OFormat[CodeActionParams] = Json.format[CodeActionParams]\n }\n \n-case class CodeActionRequest(params: CodeActionParams) extends ServerCommand\n+case class CodeActionRequest(params: CodeActionParams)\n object CodeActionRequest {\n   implicit val format: OFormat[CodeActionRequest] = Json.format[CodeActionRequest]\n }\n-case class DocumentSymbolParams(textDocument: TextDocumentIdentifier) extends ServerCommand\n-case class TextDocumentRenameRequest(params: RenameParams) extends ServerCommand\n+case class DocumentSymbolParams(textDocument: TextDocumentIdentifier)\n+object DocumentSymbolParams {\n+  implicit val format: OFormat[DocumentSymbolParams] = Json.format[DocumentSymbolParams]\n+}\n+case class TextDocumentRenameRequest(params: RenameParams)"
  }
]