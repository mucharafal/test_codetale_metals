[
  {
    "id" : "b23934b6-0411-45da-ad83-9772f5e264bc",
    "prId" : 229,
    "comments" : [
      {
        "id" : "82718f88-75ee-4513-8bad-7f2c3a30eebb",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "This conflicts with `semanticdbSettings` defined in `build.sbt` (just remove it there)",
        "createdAt" : "2018-04-03T02:40:15Z",
        "updatedAt" : "2018-04-03T23:23:39Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d78b2e041f5b5d77e2502faaf1eb7c932f20e6e4",
    "line" : 30,
    "diffHunk" : "@@ -1,85 +1,112 @@\n import sbt._\n import sbt.Keys._\n import java.io._\n+import sbt.Def\n \n object MetalsPlugin extends AutoPlugin {\n   override def trigger = allRequirements\n   override def requires = sbt.plugins.JvmPlugin\n-  val metalsCompilerConfig =\n-    taskKey[String](\"Configuration parameters for autocompletion.\")\n-  val metalsSetup =\n-    taskKey[Unit](\n-      \"Generate build metadata for completions and indexing dependency sources\"\n+  object autoImport {\n+\n+    val metalsCompilerConfig =\n+      taskKey[String](\n+        \"String containing build metadata in properties file format.\"\n+      )\n+    val metalsWriteCompilerConfig =\n+      taskKey[Unit](\n+        \"Generate build metadata for completions and indexing dependency sources\"\n+      )\n+\n+    lazy val semanticdbSettings = List(\n+      addCompilerPlugin(\n+        \"org.scalameta\" % \"semanticdb-scalac\" % SemanticdbEnable.semanticdbVersion cross CrossVersion.full\n+      ),\n+      scalacOptions += \"-Yrangepos\"\n+    )"
  },
  {
    "id" : "fa2a305f-9a2f-484c-8d96-327bd34b81a5",
    "prId" : 229,
    "comments" : [
      {
        "id" : "c930280b-43fa-496a-820d-4c3989509c4b",
        "parentId" : null,
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "I suggest to change subdirectory name to avoid confusion with the server LSP config. I can imagine that some users after reading that they can turn on experimental features in _some configuration_ may miss that it's in their editor, stumble upon some files in `.metals/config/` ðŸ’£ and try editing them ðŸ’¥ ðŸ˜„ \r\n\r\nI suggest `.metals/buildinfo/`, but I don't care about particular name, just not `config`.\r\n\r\nAlso how about changing to nested structure: `.metals/buildinfo/subproject/configuration.properties`? It nicely corresponds to the new sbt slash-notation for scoping.",
        "createdAt" : "2018-04-03T02:49:12Z",
        "updatedAt" : "2018-04-03T23:23:39Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0154f7cc-b987-4119-a19e-22effa01189d",
        "parentId" : "c930280b-43fa-496a-820d-4c3989509c4b",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Good point, I also like the nested structure. `buildinfo` is clearer than `config`",
        "createdAt" : "2018-04-03T21:09:23Z",
        "updatedAt" : "2018-04-03T23:23:39Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9cf3a161-d9fd-4708-86aa-0c50c8dc1f14",
        "parentId" : "c930280b-43fa-496a-820d-4c3989509c4b",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I like it too. It's also what mill does and I find it very intuitive ",
        "createdAt" : "2018-04-03T21:15:23Z",
        "updatedAt" : "2018-04-03T23:23:39Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7af73ef8-c4be-4a1c-8f48-fab859ce68d9",
        "parentId" : "c930280b-43fa-496a-820d-4c3989509c4b",
        "author" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "body" : "Cool. I'm going to change it in #230 then.",
        "createdAt" : "2018-04-03T22:04:38Z",
        "updatedAt" : "2018-04-03T23:23:39Z",
        "lastEditedBy" : {
          "login" : "laughedelic",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/766656?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d78b2e041f5b5d77e2502faaf1eb7c932f20e6e4",
    "line" : null,
    "diffHunk" : "@@ -1,85 +1,112 @@\n import sbt._\n import sbt.Keys._\n import java.io._\n+import sbt.Def\n \n object MetalsPlugin extends AutoPlugin {\n   override def trigger = allRequirements\n   override def requires = sbt.plugins.JvmPlugin\n-  val metalsCompilerConfig =\n-    taskKey[String](\"Configuration parameters for autocompletion.\")\n-  val metalsSetup =\n-    taskKey[Unit](\n-      \"Generate build metadata for completions and indexing dependency sources\"\n+  object autoImport {\n+\n+    val metalsCompilerConfig =\n+      taskKey[String](\n+        \"String containing build metadata in properties file format.\"\n+      )\n+    val metalsWriteCompilerConfig =\n+      taskKey[Unit](\n+        \"Generate build metadata for completions and indexing dependency sources\"\n+      )\n+\n+    lazy val semanticdbSettings = List(\n+      addCompilerPlugin(\n+        \"org.scalameta\" % \"semanticdb-scalac\" % SemanticdbEnable.semanticdbVersion cross CrossVersion.full\n+      ),\n+      scalacOptions += \"-Yrangepos\"\n+    )\n+\n+    def metalsConfig(c: Configuration) = Seq(\n+      metalsCompilerConfig := {\n+        val props = new java.util.Properties()\n+        props.setProperty(\n+          \"sources\",\n+          sources.value.distinct.mkString(File.pathSeparator)\n+        )\n+        props.setProperty(\n+          \"unmanagedSourceDirectories\",\n+          unmanagedSourceDirectories.value.distinct\n+            .mkString(File.pathSeparator)\n+        )\n+        props.setProperty(\n+          \"managedSourceDirectories\",\n+          managedSourceDirectories.value.distinct\n+            .mkString(File.pathSeparator)\n+        )\n+        props.setProperty(\n+          \"scalacOptions\",\n+          scalacOptions.value.mkString(\" \")\n+        )\n+        props.setProperty(\n+          \"classDirectory\",\n+          classDirectory.value.getAbsolutePath\n+        )\n+        props.setProperty(\n+          \"dependencyClasspath\",\n+          dependencyClasspath.value\n+            .map(_.data.toString)\n+            .mkString(File.pathSeparator)\n+        )\n+        props.setProperty(\n+          \"scalaVersion\",\n+          scalaVersion.value\n+        )\n+        val sourceJars = for {\n+          configurationReport <- updateClassifiers.value.configurations\n+          moduleReport <- configurationReport.modules\n+          (artifact, file) <- moduleReport.artifacts\n+          if artifact.classifier.exists(_ == \"sources\")\n+        } yield file\n+        props.setProperty(\n+          \"sourceJars\",\n+          sourceJars.mkString(File.pathSeparator)\n+        )\n+        val out = new ByteArrayOutputStream()\n+        props.store(out, null)\n+        out.toString()\n+      },\n+      metalsWriteCompilerConfig := {\n+        val filename = s\"${thisProject.value.id}-${c.name}.properties\"\n+        val basedir = baseDirectory.in(ThisBuild).value / \".metals\" / \"config\""
  }
]