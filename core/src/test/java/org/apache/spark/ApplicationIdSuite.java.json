[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "need new line\n",
    "commit": "3288b2bb44a81b605ddc26f2772baebbaf1ad38e",
    "createdAt": "2014-10-01T22:56:07Z",
    "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import static org.hamcrest.CoreMatchers.*;\n+import static org.junit.Assert.assertThat;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.spark.ApplicationId;\n+\n+public class ApplicationIdSuite {\n+\n+  private ApplicationId appId1_1, appId1_2, appId1_3, appId2, appIdNull_1, appIdNull_2;\n+\n+  @Before\n+  public void setUp() {\n+    appId1_1 = new ApplicationId(\"appId1\");\n+    appId1_2 = new ApplicationId(\"appId1\");\n+    appId1_3 = new ApplicationId(new String(\"appId1\"));\n+    appId2 = new ApplicationId(\"appId2\");\n+    appIdNull_1 = new ApplicationId(null);\n+    appIdNull_2 = new ApplicationId(null);\n+  }\n+\n+  @Test\n+  public void testEquality() {\n+    // When ID strings are same object, ApplicationIds are equivalent\n+    assertThat(appId1_1.toString(), is(sameInstance(appId1_2.toString())));\n+    assertThat(appId1_1.equals(appId1_2), is(true));\n+\n+    // When ID strings are not same object but equivalent, ApplicationIds are equivalent\n+    assertThat(appId1_1.toString(), is(not(sameInstance(appId1_3.toString()))));\n+    assertThat(appId1_1.toString(), is(appId1_3.toString()));\n+    assertThat(appId1_1.equals(appId1_3), is(true));\n+\n+    // When ID strings are not equivalent, ApplicationIds are not equivalent\n+    assertThat(appId1_1.toString(), is(not(appId2.toString())));\n+    assertThat(appId1_1.equals(appId2), is(false));\n+\n+    // When one of ApplicationIds has null ID, ApplicationIds are not equivalent\n+    assertThat(appIdNull_1.toString(), is(nullValue()));\n+    assertThat(appIdNull_2.toString(), is(nullValue()));\n+    assertThat(appId1_1.equals(appIdNull_1), is(false));\n+    assertThat(appIdNull_1.equals(appIdNull_2), is(false));\n+  }\n+\n+  @Test\n+  public void testEqualsMethodSpecification() {\n+    // Test reflexivity rule\n+    assertThat(appId1_1.equals(appId1_1), is(true));\n+\n+    // Test transitivity rule\n+    assertThat(appId1_1.equals(appId1_2), is(true));\n+    assertThat(appId1_2.equals(appId1_3), is(true));\n+    assertThat(appId1_1.equals(appId1_3), is(true));\n+\n+    // Test symmetric rule\n+    assertThat(appId1_2.equals(appId1_1), is(true));\n+    assertThat(appId1_3.equals(appId1_2), is(true));\n+    assertThat(appId1_3.equals(appId1_1), is(true));\n+\n+    // Test consistency rule\n+    assertThat(appId1_1.equals(appId1_2), is(appId1_1.equals(appId1_2)));\n+    assertThat(appId1_3.equals(appId2), is(appId1_3.equals(appId2)));\n+\n+    // Test comparision with null\n+    assertThat(appId1_1.equals(null), is(false));\n+  }\n+\n+}"
  }, {
    "author": {
      "login": "sarutak"
    },
    "body": "I've removed this file.\n",
    "commit": "3288b2bb44a81b605ddc26f2772baebbaf1ad38e",
    "createdAt": "2014-10-02T08:40:57Z",
    "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import static org.hamcrest.CoreMatchers.*;\n+import static org.junit.Assert.assertThat;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.spark.ApplicationId;\n+\n+public class ApplicationIdSuite {\n+\n+  private ApplicationId appId1_1, appId1_2, appId1_3, appId2, appIdNull_1, appIdNull_2;\n+\n+  @Before\n+  public void setUp() {\n+    appId1_1 = new ApplicationId(\"appId1\");\n+    appId1_2 = new ApplicationId(\"appId1\");\n+    appId1_3 = new ApplicationId(new String(\"appId1\"));\n+    appId2 = new ApplicationId(\"appId2\");\n+    appIdNull_1 = new ApplicationId(null);\n+    appIdNull_2 = new ApplicationId(null);\n+  }\n+\n+  @Test\n+  public void testEquality() {\n+    // When ID strings are same object, ApplicationIds are equivalent\n+    assertThat(appId1_1.toString(), is(sameInstance(appId1_2.toString())));\n+    assertThat(appId1_1.equals(appId1_2), is(true));\n+\n+    // When ID strings are not same object but equivalent, ApplicationIds are equivalent\n+    assertThat(appId1_1.toString(), is(not(sameInstance(appId1_3.toString()))));\n+    assertThat(appId1_1.toString(), is(appId1_3.toString()));\n+    assertThat(appId1_1.equals(appId1_3), is(true));\n+\n+    // When ID strings are not equivalent, ApplicationIds are not equivalent\n+    assertThat(appId1_1.toString(), is(not(appId2.toString())));\n+    assertThat(appId1_1.equals(appId2), is(false));\n+\n+    // When one of ApplicationIds has null ID, ApplicationIds are not equivalent\n+    assertThat(appIdNull_1.toString(), is(nullValue()));\n+    assertThat(appIdNull_2.toString(), is(nullValue()));\n+    assertThat(appId1_1.equals(appIdNull_1), is(false));\n+    assertThat(appIdNull_1.equals(appIdNull_2), is(false));\n+  }\n+\n+  @Test\n+  public void testEqualsMethodSpecification() {\n+    // Test reflexivity rule\n+    assertThat(appId1_1.equals(appId1_1), is(true));\n+\n+    // Test transitivity rule\n+    assertThat(appId1_1.equals(appId1_2), is(true));\n+    assertThat(appId1_2.equals(appId1_3), is(true));\n+    assertThat(appId1_1.equals(appId1_3), is(true));\n+\n+    // Test symmetric rule\n+    assertThat(appId1_2.equals(appId1_1), is(true));\n+    assertThat(appId1_3.equals(appId1_2), is(true));\n+    assertThat(appId1_3.equals(appId1_1), is(true));\n+\n+    // Test consistency rule\n+    assertThat(appId1_1.equals(appId1_2), is(appId1_1.equals(appId1_2)));\n+    assertThat(appId1_3.equals(appId2), is(appId1_3.equals(appId2)));\n+\n+    // Test comparision with null\n+    assertThat(appId1_1.equals(null), is(false));\n+  }\n+\n+}"
  }],
  "prId": 2432
}]