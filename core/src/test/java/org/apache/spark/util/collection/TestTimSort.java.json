[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "i think you still need to include the apache license header here.\n",
    "commit": "3421b6c8649d5de676090defb70f6a58596659c6",
    "createdAt": "2015-02-27T04:42:57Z",
    "diffHunk": "@@ -0,0 +1,111 @@\n+package org.apache.spark.util.collection;",
    "line": 17
  }],
  "prId": 4804
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "borrowed -> obtained\n",
    "commit": "3421b6c8649d5de676090defb70f6a58596659c6",
    "createdAt": "2015-02-27T04:43:15Z",
    "diffHunk": "@@ -0,0 +1,111 @@\n+package org.apache.spark.util.collection;\n+\n+import java.util.*;\n+\n+/**\n+ * This codes generates a int array which fails the standard TimSort, Borrowed from"
  }],
  "prId": 4804
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "we should also link to the github repository with an explicit license https://github.com/abstools/java-timsort-bug\n",
    "commit": "3421b6c8649d5de676090defb70f6a58596659c6",
    "createdAt": "2015-02-27T04:44:47Z",
    "diffHunk": "@@ -0,0 +1,111 @@\n+package org.apache.spark.util.collection;\n+\n+import java.util.*;\n+\n+/**\n+ * This codes generates a int array which fails the standard TimSort, Borrowed from\n+ * the reporter of this bug.\n+ *\n+ * http://www.envisage-project.eu/timsort-specification-and-verification/"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Yes that's good practice. For completeness, because this AL2 and because there is no additional NOTICE file, we don't need to do anything else to our LICENSE or NOTICE file.\n",
    "commit": "3421b6c8649d5de676090defb70f6a58596659c6",
    "createdAt": "2015-02-27T09:51:17Z",
    "diffHunk": "@@ -0,0 +1,111 @@\n+package org.apache.spark.util.collection;\n+\n+import java.util.*;\n+\n+/**\n+ * This codes generates a int array which fails the standard TimSort, Borrowed from\n+ * the reporter of this bug.\n+ *\n+ * http://www.envisage-project.eu/timsort-specification-and-verification/"
  }],
  "prId": 4804
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "you need to put this in the beginning of the file, i.e. before the package definition\n",
    "commit": "3421b6c8649d5de676090defb70f6a58596659c6",
    "createdAt": "2015-02-28T02:19:21Z",
    "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.spark.util.collection;\n+\n+import java.util.*;\n+\n+/*"
  }],
  "prId": 4804
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "If this test code is your own work, then this statement is redundant with the license header, so would be removed.\n\nBut it's copied from the project above right? then you can't write a license header here that says it was licensed to the ASF. If anything we would reproduce the plain vanilla AL2 stanza from the plain AL2 license text up above in the file's license header.\n\nThat or not copy this test code. This Java code needs a bit more style work to match coding practices here.\n",
    "commit": "3421b6c8649d5de676090defb70f6a58596659c6",
    "createdAt": "2015-02-28T02:24:54Z",
    "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.util.collection;\n+\n+import java.util.*;\n+\n+/**\n+ * This codes generates a int array which fails the standard TimSort.\n+ *\n+ * The blog that reported the bug\n+ * http://www.envisage-project.eu/timsort-specification-and-verification/\n+ *\n+ * The algorithms to reproduce the bug is obtained from the reporter of the bug\n+ * https://github.com/abstools/java-timsort-bug\n+ *\n+ * Licensed under Apache License 2.0\n+ * https://github.com/abstools/java-timsort-bug/blob/master/LICENSE"
  }, {
    "author": {
      "login": "hotou"
    },
    "body": "Well, it's not a exact copy, I made changes to the original codes. \n\nDo you guys have a IntelliJ style that I can import ?\n",
    "commit": "3421b6c8649d5de676090defb70f6a58596659c6",
    "createdAt": "2015-02-28T02:28:36Z",
    "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.util.collection;\n+\n+import java.util.*;\n+\n+/**\n+ * This codes generates a int array which fails the standard TimSort.\n+ *\n+ * The blog that reported the bug\n+ * http://www.envisage-project.eu/timsort-specification-and-verification/\n+ *\n+ * The algorithms to reproduce the bug is obtained from the reporter of the bug\n+ * https://github.com/abstools/java-timsort-bug\n+ *\n+ * Licensed under Apache License 2.0\n+ * https://github.com/abstools/java-timsort-bug/blob/master/LICENSE"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "It looks like it's almost entirely the code from the third party site. The right-est thing to do is actually begin this file with the standard AL2 stanza:\n\n```\nCopyright 2015 [the author's name]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n... since that is substantially the license of the work in the file. I believe the build's check for this stuff will accept this, or should. It can be followed with a comment that the work has been modified from its original form.\n\nI don't think it's crazy to omit this either, though always nice to have tests.\n\nTHere's no standard IJ config but I'll point out some things that could be touched up.\n",
    "commit": "3421b6c8649d5de676090defb70f6a58596659c6",
    "createdAt": "2015-02-28T02:42:06Z",
    "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.util.collection;\n+\n+import java.util.*;\n+\n+/**\n+ * This codes generates a int array which fails the standard TimSort.\n+ *\n+ * The blog that reported the bug\n+ * http://www.envisage-project.eu/timsort-specification-and-verification/\n+ *\n+ * The algorithms to reproduce the bug is obtained from the reporter of the bug\n+ * https://github.com/abstools/java-timsort-bug\n+ *\n+ * Licensed under Apache License 2.0\n+ * https://github.com/abstools/java-timsort-bug/blob/master/LICENSE"
  }],
  "prId": 4804
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Most importantly, this file doesn't contain tests that JUnit will run. Have a look at how other files declare test code with `@Test` annotations.\n",
    "commit": "3421b6c8649d5de676090defb70f6a58596659c6",
    "createdAt": "2015-02-28T02:43:28Z",
    "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.util.collection;\n+\n+import java.util.*;\n+\n+/**\n+ * This codes generates a int array which fails the standard TimSort.\n+ *\n+ * The blog that reported the bug\n+ * http://www.envisage-project.eu/timsort-specification-and-verification/\n+ *\n+ * The algorithms to reproduce the bug is obtained from the reporter of the bug\n+ * https://github.com/abstools/java-timsort-bug\n+ *\n+ * Licensed under Apache License 2.0\n+ * https://github.com/abstools/java-timsort-bug/blob/master/LICENSE\n+ */\n+public class TestTimSort {\n+\n+  private static final int MIN_MERGE = 32;\n+\n+  /**\n+   * Returns an array of integers that demonstrate the bug in TimSort\n+   */\n+  public static int[] getTimSortBugTestSet(int length) {\n+    int minRun = minRunLength(length);\n+    List<Long> runs = runsJDKWorstCase(minRun, length);\n+    return createArray(runs, length);\n+  }\n+\n+  private static int minRunLength(int n) {\n+    int r = 0; // Becomes 1 if any 1 bits are shifted off\n+    while (n >= MIN_MERGE) {\n+      r |= (n & 1);\n+      n >>= 1;\n+    }\n+    return n + r;\n+  }\n+\n+  private static int[] createArray(List<Long> runs, int length) {\n+    int[] a = new int[length];\n+    Arrays.fill(a, 0);\n+    int endRun = -1;\n+    for (long len : runs)\n+      a[endRun += len] = 1;\n+    a[length - 1] = 0;\n+    return a;\n+  }\n+\n+  /**\n+   * Fills <code>runs</code> with a sequence of run lengths of the form<br>\n+   * Y_n     x_{n,1}   x_{n,2}   ... x_{n,l_n} <br>\n+   * Y_{n-1} x_{n-1,1} x_{n-1,2} ... x_{n-1,l_{n-1}} <br>\n+   * ... <br>\n+   * Y_1     x_{1,1}   x_{1,2}   ... x_{1,l_1}<br>\n+   * The Y_i's are chosen to satisfy the invariant throughout execution,\n+   * but the x_{i,j}'s are merged (by <code>TimSort.mergeCollapse</code>)\n+   * into an X_i that violates the invariant.\n+   *\n+   * @param length The sum of all run lengths that will be added to <code>runs</code>.\n+   */\n+  private static List<Long> runsJDKWorstCase(int minRun, int length) {",
    "line": 78
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "Sean - I think this is used in the scalatest.\n",
    "commit": "3421b6c8649d5de676090defb70f6a58596659c6",
    "createdAt": "2015-02-28T02:45:30Z",
    "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.util.collection;\n+\n+import java.util.*;\n+\n+/**\n+ * This codes generates a int array which fails the standard TimSort.\n+ *\n+ * The blog that reported the bug\n+ * http://www.envisage-project.eu/timsort-specification-and-verification/\n+ *\n+ * The algorithms to reproduce the bug is obtained from the reporter of the bug\n+ * https://github.com/abstools/java-timsort-bug\n+ *\n+ * Licensed under Apache License 2.0\n+ * https://github.com/abstools/java-timsort-bug/blob/master/LICENSE\n+ */\n+public class TestTimSort {\n+\n+  private static final int MIN_MERGE = 32;\n+\n+  /**\n+   * Returns an array of integers that demonstrate the bug in TimSort\n+   */\n+  public static int[] getTimSortBugTestSet(int length) {\n+    int minRun = minRunLength(length);\n+    List<Long> runs = runsJDKWorstCase(minRun, length);\n+    return createArray(runs, length);\n+  }\n+\n+  private static int minRunLength(int n) {\n+    int r = 0; // Becomes 1 if any 1 bits are shifted off\n+    while (n >= MIN_MERGE) {\n+      r |= (n & 1);\n+      n >>= 1;\n+    }\n+    return n + r;\n+  }\n+\n+  private static int[] createArray(List<Long> runs, int length) {\n+    int[] a = new int[length];\n+    Arrays.fill(a, 0);\n+    int endRun = -1;\n+    for (long len : runs)\n+      a[endRun += len] = 1;\n+    a[length - 1] = 0;\n+    return a;\n+  }\n+\n+  /**\n+   * Fills <code>runs</code> with a sequence of run lengths of the form<br>\n+   * Y_n     x_{n,1}   x_{n,2}   ... x_{n,l_n} <br>\n+   * Y_{n-1} x_{n-1,1} x_{n-1,2} ... x_{n-1,l_{n-1}} <br>\n+   * ... <br>\n+   * Y_1     x_{1,1}   x_{1,2}   ... x_{1,l_1}<br>\n+   * The Y_i's are chosen to satisfy the invariant throughout execution,\n+   * but the x_{i,j}'s are merged (by <code>TimSort.mergeCollapse</code>)\n+   * into an X_i that violates the invariant.\n+   *\n+   * @param length The sum of all run lengths that will be added to <code>runs</code>.\n+   */\n+  private static List<Long> runsJDKWorstCase(int minRun, int length) {",
    "line": 78
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Oh! can't believe I missed the file at the end here. OK. I see that the test case that gets generated is really big, not something you can paste into the source. Hm, OK well I suggest fixing the license situation here at a minimum\n",
    "commit": "3421b6c8649d5de676090defb70f6a58596659c6",
    "createdAt": "2015-02-28T02:49:30Z",
    "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.util.collection;\n+\n+import java.util.*;\n+\n+/**\n+ * This codes generates a int array which fails the standard TimSort.\n+ *\n+ * The blog that reported the bug\n+ * http://www.envisage-project.eu/timsort-specification-and-verification/\n+ *\n+ * The algorithms to reproduce the bug is obtained from the reporter of the bug\n+ * https://github.com/abstools/java-timsort-bug\n+ *\n+ * Licensed under Apache License 2.0\n+ * https://github.com/abstools/java-timsort-bug/blob/master/LICENSE\n+ */\n+public class TestTimSort {\n+\n+  private static final int MIN_MERGE = 32;\n+\n+  /**\n+   * Returns an array of integers that demonstrate the bug in TimSort\n+   */\n+  public static int[] getTimSortBugTestSet(int length) {\n+    int minRun = minRunLength(length);\n+    List<Long> runs = runsJDKWorstCase(minRun, length);\n+    return createArray(runs, length);\n+  }\n+\n+  private static int minRunLength(int n) {\n+    int r = 0; // Becomes 1 if any 1 bits are shifted off\n+    while (n >= MIN_MERGE) {\n+      r |= (n & 1);\n+      n >>= 1;\n+    }\n+    return n + r;\n+  }\n+\n+  private static int[] createArray(List<Long> runs, int length) {\n+    int[] a = new int[length];\n+    Arrays.fill(a, 0);\n+    int endRun = -1;\n+    for (long len : runs)\n+      a[endRun += len] = 1;\n+    a[length - 1] = 0;\n+    return a;\n+  }\n+\n+  /**\n+   * Fills <code>runs</code> with a sequence of run lengths of the form<br>\n+   * Y_n     x_{n,1}   x_{n,2}   ... x_{n,l_n} <br>\n+   * Y_{n-1} x_{n-1,1} x_{n-1,2} ... x_{n-1,l_{n-1}} <br>\n+   * ... <br>\n+   * Y_1     x_{1,1}   x_{1,2}   ... x_{1,l_1}<br>\n+   * The Y_i's are chosen to satisfy the invariant throughout execution,\n+   * but the x_{i,j}'s are merged (by <code>TimSort.mergeCollapse</code>)\n+   * into an X_i that violates the invariant.\n+   *\n+   * @param length The sum of all run lengths that will be added to <code>runs</code>.\n+   */\n+  private static List<Long> runsJDKWorstCase(int minRun, int length) {",
    "line": 78
  }],
  "prId": 4804
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Actually, is there any test at all in this file? it seems like it just generates the problem test case.\n\nMaybe you can use it to generate a short test exposing the bug, and create a new, actual test that shows the sort works on it.\n\nThen this code need not exist in Spark.\n",
    "commit": "3421b6c8649d5de676090defb70f6a58596659c6",
    "createdAt": "2015-02-28T02:45:04Z",
    "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.util.collection;\n+\n+import java.util.*;\n+\n+/**\n+ * This codes generates a int array which fails the standard TimSort.\n+ *\n+ * The blog that reported the bug\n+ * http://www.envisage-project.eu/timsort-specification-and-verification/\n+ *\n+ * The algorithms to reproduce the bug is obtained from the reporter of the bug\n+ * https://github.com/abstools/java-timsort-bug\n+ *\n+ * Licensed under Apache License 2.0\n+ * https://github.com/abstools/java-timsort-bug/blob/master/LICENSE\n+ */\n+public class TestTimSort {\n+\n+  private static final int MIN_MERGE = 32;\n+\n+  /**\n+   * Returns an array of integers that demonstrate the bug in TimSort\n+   */\n+  public static int[] getTimSortBugTestSet(int length) {\n+    int minRun = minRunLength(length);\n+    List<Long> runs = runsJDKWorstCase(minRun, length);\n+    return createArray(runs, length);\n+  }\n+\n+  private static int minRunLength(int n) {\n+    int r = 0; // Becomes 1 if any 1 bits are shifted off\n+    while (n >= MIN_MERGE) {\n+      r |= (n & 1);\n+      n >>= 1;\n+    }\n+    return n + r;\n+  }\n+\n+  private static int[] createArray(List<Long> runs, int length) {\n+    int[] a = new int[length];\n+    Arrays.fill(a, 0);\n+    int endRun = -1;\n+    for (long len : runs)\n+      a[endRun += len] = 1;\n+    a[length - 1] = 0;\n+    return a;\n+  }\n+\n+  /**\n+   * Fills <code>runs</code> with a sequence of run lengths of the form<br>\n+   * Y_n     x_{n,1}   x_{n,2}   ... x_{n,l_n} <br>\n+   * Y_{n-1} x_{n-1,1} x_{n-1,2} ... x_{n-1,l_{n-1}} <br>\n+   * ... <br>\n+   * Y_1     x_{1,1}   x_{1,2}   ... x_{1,l_1}<br>\n+   * The Y_i's are chosen to satisfy the invariant throughout execution,\n+   * but the x_{i,j}'s are merged (by <code>TimSort.mergeCollapse</code>)\n+   * into an X_i that violates the invariant.\n+   *\n+   * @param length The sum of all run lengths that will be added to <code>runs</code>.\n+   */\n+  private static List<Long> runsJDKWorstCase(int minRun, int length) {\n+    List<Long> runs = new ArrayList<Long>();\n+\n+    long runningTotal = 0, Y = minRun + 4, X = minRun;\n+\n+    while (runningTotal + Y + X <= length) {\n+      runningTotal += X + Y;\n+      generateJDKWrongElem(runs, minRun, X);\n+      runs.add(0, Y);\n+      // X_{i+1} = Y_i + x_{i,1} + 1, since runs.get(1) = x_{i,1}\n+      X = Y + runs.get(1) + 1;\n+      // Y_{i+1} = X_{i+1} + Y_i + 1\n+      Y += X + 1;\n+    }\n+\n+    if (runningTotal + X <= length) {\n+      runningTotal += X;\n+      generateJDKWrongElem(runs, minRun, X);\n+    }\n+\n+    runs.add(length - runningTotal);\n+    return runs;",
    "line": 99
  }, {
    "author": {
      "login": "hotou"
    },
    "body": "In SorterSuite I added a test that uses TestTimSort.java\n\nYes TestTimSort just generate a int[], but the the array has to be at least 67108864 long, so I thought just posting a huge int[] is not as useful as knowing how the array is generated.\n\nThe original codes was written to demonstrate the bug so it had a main(), and some other stuffs, I get rid of those.\n\nI am fine with fixing the license here, if you guys bear with me a bit. I am not that experienced with open source licenses\n",
    "commit": "3421b6c8649d5de676090defb70f6a58596659c6",
    "createdAt": "2015-02-28T02:57:18Z",
    "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.util.collection;\n+\n+import java.util.*;\n+\n+/**\n+ * This codes generates a int array which fails the standard TimSort.\n+ *\n+ * The blog that reported the bug\n+ * http://www.envisage-project.eu/timsort-specification-and-verification/\n+ *\n+ * The algorithms to reproduce the bug is obtained from the reporter of the bug\n+ * https://github.com/abstools/java-timsort-bug\n+ *\n+ * Licensed under Apache License 2.0\n+ * https://github.com/abstools/java-timsort-bug/blob/master/LICENSE\n+ */\n+public class TestTimSort {\n+\n+  private static final int MIN_MERGE = 32;\n+\n+  /**\n+   * Returns an array of integers that demonstrate the bug in TimSort\n+   */\n+  public static int[] getTimSortBugTestSet(int length) {\n+    int minRun = minRunLength(length);\n+    List<Long> runs = runsJDKWorstCase(minRun, length);\n+    return createArray(runs, length);\n+  }\n+\n+  private static int minRunLength(int n) {\n+    int r = 0; // Becomes 1 if any 1 bits are shifted off\n+    while (n >= MIN_MERGE) {\n+      r |= (n & 1);\n+      n >>= 1;\n+    }\n+    return n + r;\n+  }\n+\n+  private static int[] createArray(List<Long> runs, int length) {\n+    int[] a = new int[length];\n+    Arrays.fill(a, 0);\n+    int endRun = -1;\n+    for (long len : runs)\n+      a[endRun += len] = 1;\n+    a[length - 1] = 0;\n+    return a;\n+  }\n+\n+  /**\n+   * Fills <code>runs</code> with a sequence of run lengths of the form<br>\n+   * Y_n     x_{n,1}   x_{n,2}   ... x_{n,l_n} <br>\n+   * Y_{n-1} x_{n-1,1} x_{n-1,2} ... x_{n-1,l_{n-1}} <br>\n+   * ... <br>\n+   * Y_1     x_{1,1}   x_{1,2}   ... x_{1,l_1}<br>\n+   * The Y_i's are chosen to satisfy the invariant throughout execution,\n+   * but the x_{i,j}'s are merged (by <code>TimSort.mergeCollapse</code>)\n+   * into an X_i that violates the invariant.\n+   *\n+   * @param length The sum of all run lengths that will be added to <code>runs</code>.\n+   */\n+  private static List<Long> runsJDKWorstCase(int minRun, int length) {\n+    List<Long> runs = new ArrayList<Long>();\n+\n+    long runningTotal = 0, Y = minRun + 4, X = minRun;\n+\n+    while (runningTotal + Y + X <= length) {\n+      runningTotal += X + Y;\n+      generateJDKWrongElem(runs, minRun, X);\n+      runs.add(0, Y);\n+      // X_{i+1} = Y_i + x_{i,1} + 1, since runs.get(1) = x_{i,1}\n+      X = Y + runs.get(1) + 1;\n+      // Y_{i+1} = X_{i+1} + Y_i + 1\n+      Y += X + 1;\n+    }\n+\n+    if (runningTotal + X <= length) {\n+      runningTotal += X;\n+      generateJDKWrongElem(runs, minRun, X);\n+    }\n+\n+    runs.add(length - runningTotal);\n+    return runs;",
    "line": 99
  }],
  "prId": 4804
}]