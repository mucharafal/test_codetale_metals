[{
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "Since you use `assertFalse` here, it won't throw  `AssertionError`.\n",
    "commit": "ef0a86e41e9b390e6c0d60a6ed2105dbc54431f7",
    "createdAt": "2015-05-12T22:32:41Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.unsafe;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+\n+import org.apache.spark.unsafe.memory.ExecutorMemoryManager;\n+import org.apache.spark.unsafe.memory.MemoryAllocator;\n+import org.apache.spark.unsafe.memory.MemoryBlock;\n+import org.apache.spark.unsafe.memory.TaskMemoryManager;\n+import static org.apache.spark.shuffle.unsafe.PackedRecordPointer.*;\n+\n+public class PackedRecordPointerSuite {\n+\n+  @Test\n+  public void heap() {\n+    final TaskMemoryManager memoryManager =\n+      new TaskMemoryManager(new ExecutorMemoryManager(MemoryAllocator.HEAP));\n+    final MemoryBlock page0 = memoryManager.allocatePage(100);\n+    final MemoryBlock page1 = memoryManager.allocatePage(100);\n+    final long addressInPage1 = memoryManager.encodePageNumberAndOffset(page1, 42);\n+    PackedRecordPointer packedPointer = new PackedRecordPointer();\n+    packedPointer.set(PackedRecordPointer.packPointer(addressInPage1, 360));\n+    assertEquals(360, packedPointer.getPartitionId());\n+    assertEquals(addressInPage1, packedPointer.getRecordPointer());\n+    memoryManager.cleanUpAllAllocatedMemory();\n+  }\n+\n+  @Test\n+  public void offHeap() {\n+    final TaskMemoryManager memoryManager =\n+      new TaskMemoryManager(new ExecutorMemoryManager(MemoryAllocator.UNSAFE));\n+    final MemoryBlock page0 = memoryManager.allocatePage(100);\n+    final MemoryBlock page1 = memoryManager.allocatePage(100);\n+    final long addressInPage1 = memoryManager.encodePageNumberAndOffset(page1, 42);\n+    PackedRecordPointer packedPointer = new PackedRecordPointer();\n+    packedPointer.set(PackedRecordPointer.packPointer(addressInPage1, 360));\n+    assertEquals(360, packedPointer.getPartitionId());\n+    assertEquals(addressInPage1, packedPointer.getRecordPointer());\n+    memoryManager.cleanUpAllAllocatedMemory();\n+  }\n+\n+  @Test\n+  public void maximumPartitionIdCanBeEncoded() {\n+    PackedRecordPointer packedPointer = new PackedRecordPointer();\n+    packedPointer.set(PackedRecordPointer.packPointer(0, MAXIMUM_PARTITION_ID));\n+    assertEquals(MAXIMUM_PARTITION_ID, packedPointer.getPartitionId());\n+  }\n+\n+  @Test\n+  public void partitionIdsGreaterThanMaximumPartitionIdWillOverflowOrTriggerError() {\n+    PackedRecordPointer packedPointer = new PackedRecordPointer();\n+    try {\n+      // Pointers greater than the maximum partition ID will overflow or trigger an assertion error\n+      packedPointer.set(PackedRecordPointer.packPointer(0, MAXIMUM_PARTITION_ID + 1));\n+      assertFalse(MAXIMUM_PARTITION_ID  + 1 == packedPointer.getPartitionId());\n+    } catch (AssertionError e ) {",
    "line": 81
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "`PackedPointer.set` has an assertion inside of it in its current implementation; this is testing that the assert fires.\n",
    "commit": "ef0a86e41e9b390e6c0d60a6ed2105dbc54431f7",
    "createdAt": "2015-05-12T22:50:11Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.unsafe;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+\n+import org.apache.spark.unsafe.memory.ExecutorMemoryManager;\n+import org.apache.spark.unsafe.memory.MemoryAllocator;\n+import org.apache.spark.unsafe.memory.MemoryBlock;\n+import org.apache.spark.unsafe.memory.TaskMemoryManager;\n+import static org.apache.spark.shuffle.unsafe.PackedRecordPointer.*;\n+\n+public class PackedRecordPointerSuite {\n+\n+  @Test\n+  public void heap() {\n+    final TaskMemoryManager memoryManager =\n+      new TaskMemoryManager(new ExecutorMemoryManager(MemoryAllocator.HEAP));\n+    final MemoryBlock page0 = memoryManager.allocatePage(100);\n+    final MemoryBlock page1 = memoryManager.allocatePage(100);\n+    final long addressInPage1 = memoryManager.encodePageNumberAndOffset(page1, 42);\n+    PackedRecordPointer packedPointer = new PackedRecordPointer();\n+    packedPointer.set(PackedRecordPointer.packPointer(addressInPage1, 360));\n+    assertEquals(360, packedPointer.getPartitionId());\n+    assertEquals(addressInPage1, packedPointer.getRecordPointer());\n+    memoryManager.cleanUpAllAllocatedMemory();\n+  }\n+\n+  @Test\n+  public void offHeap() {\n+    final TaskMemoryManager memoryManager =\n+      new TaskMemoryManager(new ExecutorMemoryManager(MemoryAllocator.UNSAFE));\n+    final MemoryBlock page0 = memoryManager.allocatePage(100);\n+    final MemoryBlock page1 = memoryManager.allocatePage(100);\n+    final long addressInPage1 = memoryManager.encodePageNumberAndOffset(page1, 42);\n+    PackedRecordPointer packedPointer = new PackedRecordPointer();\n+    packedPointer.set(PackedRecordPointer.packPointer(addressInPage1, 360));\n+    assertEquals(360, packedPointer.getPartitionId());\n+    assertEquals(addressInPage1, packedPointer.getRecordPointer());\n+    memoryManager.cleanUpAllAllocatedMemory();\n+  }\n+\n+  @Test\n+  public void maximumPartitionIdCanBeEncoded() {\n+    PackedRecordPointer packedPointer = new PackedRecordPointer();\n+    packedPointer.set(PackedRecordPointer.packPointer(0, MAXIMUM_PARTITION_ID));\n+    assertEquals(MAXIMUM_PARTITION_ID, packedPointer.getPartitionId());\n+  }\n+\n+  @Test\n+  public void partitionIdsGreaterThanMaximumPartitionIdWillOverflowOrTriggerError() {\n+    PackedRecordPointer packedPointer = new PackedRecordPointer();\n+    try {\n+      // Pointers greater than the maximum partition ID will overflow or trigger an assertion error\n+      packedPointer.set(PackedRecordPointer.packPointer(0, MAXIMUM_PARTITION_ID + 1));\n+      assertFalse(MAXIMUM_PARTITION_ID  + 1 == packedPointer.getPartitionId());\n+    } catch (AssertionError e ) {",
    "line": 81
  }],
  "prId": 5868
}]