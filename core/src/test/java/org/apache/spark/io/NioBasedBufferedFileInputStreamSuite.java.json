[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "can we add a test case for negative skips?\n",
    "commit": "5306fb097ecef7ff69c3281f33f221826879ef04",
    "createdAt": "2016-10-10T07:44:06Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang3.RandomUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Tests functionality of {@link NioBasedBufferedFileInputStream}\n+ */\n+public class NioBasedBufferedFileInputStreamSuite {\n+\n+  byte[] randomBytes;\n+\n+  File inputFile;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    // Create a byte array of size 2 MB with random bytes\n+    randomBytes =  RandomUtils.nextBytes(2 * 1024 * 1024);\n+    inputFile = File.createTempFile(\"temp-file\", \".tmp\");\n+    FileUtils.writeByteArrayToFile(inputFile, randomBytes);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    inputFile.delete();\n+  }\n+\n+  @Test\n+  public void testReadOneByte() throws IOException {\n+    InputStream inputStream = new NioBasedBufferedFileInputStream(inputFile);\n+    for (int i = 0; i < randomBytes.length; i++) {\n+      assertEquals(randomBytes[i], (byte) inputStream.read());\n+    }\n+  }\n+\n+  @Test\n+  public void testReadMultipleBytes() throws IOException {\n+    InputStream inputStream = new NioBasedBufferedFileInputStream(inputFile);\n+    byte[] readBytes = new byte[8 * 1024];\n+    int i = 0;\n+    while (i < randomBytes.length) {\n+      int read = inputStream.read(readBytes, 0, 8 * 1024);\n+      for (int j = 0; j < read; j++) {\n+        assertEquals(randomBytes[i], readBytes[j]);\n+        i++;\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testBytesSkipped() throws IOException {"
  }, {
    "author": {
      "login": "sitalkedia"
    },
    "body": "done.\n",
    "commit": "5306fb097ecef7ff69c3281f33f221826879ef04",
    "createdAt": "2016-10-10T17:28:56Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang3.RandomUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Tests functionality of {@link NioBasedBufferedFileInputStream}\n+ */\n+public class NioBasedBufferedFileInputStreamSuite {\n+\n+  byte[] randomBytes;\n+\n+  File inputFile;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    // Create a byte array of size 2 MB with random bytes\n+    randomBytes =  RandomUtils.nextBytes(2 * 1024 * 1024);\n+    inputFile = File.createTempFile(\"temp-file\", \".tmp\");\n+    FileUtils.writeByteArrayToFile(inputFile, randomBytes);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    inputFile.delete();\n+  }\n+\n+  @Test\n+  public void testReadOneByte() throws IOException {\n+    InputStream inputStream = new NioBasedBufferedFileInputStream(inputFile);\n+    for (int i = 0; i < randomBytes.length; i++) {\n+      assertEquals(randomBytes[i], (byte) inputStream.read());\n+    }\n+  }\n+\n+  @Test\n+  public void testReadMultipleBytes() throws IOException {\n+    InputStream inputStream = new NioBasedBufferedFileInputStream(inputFile);\n+    byte[] readBytes = new byte[8 * 1024];\n+    int i = 0;\n+    while (i < randomBytes.length) {\n+      int read = inputStream.read(readBytes, 0, 8 * 1024);\n+      for (int j = 0; j < read; j++) {\n+        assertEquals(randomBytes[i], readBytes[j]);\n+        i++;\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testBytesSkipped() throws IOException {"
  }],
  "prId": 15408
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "we should construct a test case that triggers the code path in skipFromFileChannel very explicitly\n",
    "commit": "5306fb097ecef7ff69c3281f33f221826879ef04",
    "createdAt": "2016-10-10T07:44:37Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang3.RandomUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Tests functionality of {@link NioBasedBufferedFileInputStream}\n+ */\n+public class NioBasedBufferedFileInputStreamSuite {\n+\n+  byte[] randomBytes;\n+\n+  File inputFile;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    // Create a byte array of size 2 MB with random bytes\n+    randomBytes =  RandomUtils.nextBytes(2 * 1024 * 1024);\n+    inputFile = File.createTempFile(\"temp-file\", \".tmp\");\n+    FileUtils.writeByteArrayToFile(inputFile, randomBytes);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    inputFile.delete();\n+  }\n+\n+  @Test\n+  public void testReadOneByte() throws IOException {\n+    InputStream inputStream = new NioBasedBufferedFileInputStream(inputFile);\n+    for (int i = 0; i < randomBytes.length; i++) {\n+      assertEquals(randomBytes[i], (byte) inputStream.read());\n+    }\n+  }\n+\n+  @Test\n+  public void testReadMultipleBytes() throws IOException {"
  }, {
    "author": {
      "login": "sitalkedia"
    },
    "body": "Good idea. Actually I discovered a bug with my previous implementation after adding this test case, which I have fixed. \n",
    "commit": "5306fb097ecef7ff69c3281f33f221826879ef04",
    "createdAt": "2016-10-10T17:28:50Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang3.RandomUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Tests functionality of {@link NioBasedBufferedFileInputStream}\n+ */\n+public class NioBasedBufferedFileInputStreamSuite {\n+\n+  byte[] randomBytes;\n+\n+  File inputFile;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    // Create a byte array of size 2 MB with random bytes\n+    randomBytes =  RandomUtils.nextBytes(2 * 1024 * 1024);\n+    inputFile = File.createTempFile(\"temp-file\", \".tmp\");\n+    FileUtils.writeByteArrayToFile(inputFile, randomBytes);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    inputFile.delete();\n+  }\n+\n+  @Test\n+  public void testReadOneByte() throws IOException {\n+    InputStream inputStream = new NioBasedBufferedFileInputStream(inputFile);\n+    for (int i = 0; i < randomBytes.length; i++) {\n+      assertEquals(randomBytes[i], (byte) inputStream.read());\n+    }\n+  }\n+\n+  @Test\n+  public void testReadMultipleBytes() throws IOException {"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "This reminds me --- we should add test coverage reporting to Spark so it becomes obvious what branches are not tested sufficiently.\n",
    "commit": "5306fb097ecef7ff69c3281f33f221826879ef04",
    "createdAt": "2016-10-10T17:57:48Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang3.RandomUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Tests functionality of {@link NioBasedBufferedFileInputStream}\n+ */\n+public class NioBasedBufferedFileInputStreamSuite {\n+\n+  byte[] randomBytes;\n+\n+  File inputFile;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    // Create a byte array of size 2 MB with random bytes\n+    randomBytes =  RandomUtils.nextBytes(2 * 1024 * 1024);\n+    inputFile = File.createTempFile(\"temp-file\", \".tmp\");\n+    FileUtils.writeByteArrayToFile(inputFile, randomBytes);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    inputFile.delete();\n+  }\n+\n+  @Test\n+  public void testReadOneByte() throws IOException {\n+    InputStream inputStream = new NioBasedBufferedFileInputStream(inputFile);\n+    for (int i = 0; i < randomBytes.length; i++) {\n+      assertEquals(randomBytes[i], (byte) inputStream.read());\n+    }\n+  }\n+\n+  @Test\n+  public void testReadMultipleBytes() throws IOException {"
  }],
  "prId": 15408
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Nit: `private` should always be the default\n",
    "commit": "5306fb097ecef7ff69c3281f33f221826879ef04",
    "createdAt": "2016-10-10T07:49:40Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang3.RandomUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Tests functionality of {@link NioBasedBufferedFileInputStream}\n+ */\n+public class NioBasedBufferedFileInputStreamSuite {\n+\n+  byte[] randomBytes;"
  }, {
    "author": {
      "login": "sitalkedia"
    },
    "body": "done.\n",
    "commit": "5306fb097ecef7ff69c3281f33f221826879ef04",
    "createdAt": "2016-10-10T17:26:01Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang3.RandomUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Tests functionality of {@link NioBasedBufferedFileInputStream}\n+ */\n+public class NioBasedBufferedFileInputStreamSuite {\n+\n+  byte[] randomBytes;"
  }],
  "prId": 15408
}]