[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "It took me a while to understand why this one is still `1000L`. The situation is as follows:\n1. Put a 1000-byte block\n2. Put a 1-byte block, this should have evicted the first block\n3. Storage memory used is still 1000 bytes somehow (I expected 1 byte)\n\nBecause of the way the test is set up, however, as of step (2) we actually treat the 1000-byte block inserted in step (1) as 1000 1-byte blocks. When we call `evictBlocksToFreeSpace` here we actually evicted a 1-byte block to put another 1-byte block back in, so the storage memory usage remains at 1000 bytes.\n\nSince this deviates from actual block manager behavior I think this line warrants a short comment, maybe something like:\n\n```\n// Note: We evicted 1 byte to put another 1-byte block in, so the storage memory used remains\n// at 1000 bytes. This is different from real behavior, where the 1-byte block would have evicted\n// the 1000-byte block entirely. This is set up differently so we can write finer-grained tests.\n```\n",
    "commit": "7e9e191c76992813d9a0bdbb1de590776c4875a1",
    "createdAt": "2015-12-08T21:31:37Z",
    "diffHunk": "@@ -85,33 +82,33 @@ class StaticMemoryManagerSuite extends MemoryManagerSuite {\n     val (mm, ms) = makeThings(Long.MaxValue, maxStorageMem)\n     assert(mm.storageMemoryUsed === 0L)\n     assert(mm.acquireStorageMemory(dummyBlock, 10L, evictedBlocks))\n-    // `ensureFreeSpace` should be called with the number of bytes requested\n-    assertEnsureFreeSpaceCalled(ms, 10L)\n+    assertEvictBlocksToFreeSpaceNotCalled(ms)\n     assert(mm.storageMemoryUsed === 10L)\n+\n     assert(mm.acquireStorageMemory(dummyBlock, 100L, evictedBlocks))\n-    assertEnsureFreeSpaceCalled(ms, 100L)\n+    assertEvictBlocksToFreeSpaceNotCalled(ms)\n     assert(mm.storageMemoryUsed === 110L)\n     // Acquire more than the max, not granted\n     assert(!mm.acquireStorageMemory(dummyBlock, maxStorageMem + 1L, evictedBlocks))\n-    assertEnsureFreeSpaceCalled(ms, maxStorageMem + 1L)\n+    assertEvictBlocksToFreeSpaceNotCalled(ms)\n     assert(mm.storageMemoryUsed === 110L)\n     // Acquire up to the max, requests after this are still granted due to LRU eviction\n     assert(mm.acquireStorageMemory(dummyBlock, maxStorageMem, evictedBlocks))\n-    assertEnsureFreeSpaceCalled(ms, 1000L)\n+    assertEvictBlocksToFreeSpaceCalled(ms, 110L)\n     assert(mm.storageMemoryUsed === 1000L)\n     assert(mm.acquireStorageMemory(dummyBlock, 1L, evictedBlocks))\n-    assertEnsureFreeSpaceCalled(ms, 1L)\n+    assertEvictBlocksToFreeSpaceCalled(ms, 1L)\n     assert(mm.storageMemoryUsed === 1000L)"
  }],
  "prId": 10170
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "outdated comment\n",
    "commit": "7e9e191c76992813d9a0bdbb1de590776c4875a1",
    "createdAt": "2015-12-08T21:38:20Z",
    "diffHunk": "@@ -159,13 +156,13 @@ class StaticMemoryManagerSuite extends MemoryManagerSuite {\n     assert(mm.acquireUnrollMemory(dummyBlock, 500L, evictedBlocks))\n     // `spark.storage.unrollFraction` is 0.4, so the max unroll space is 400 bytes.\n     // Since we already occupy 60 bytes, we will try to ensure only 400 - 60 = 340 bytes."
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "actually, this whole test should be rewritten to trigger the case where unroll evicts part of existing storage. I have some changes here https://github.com/andrewor14/spark/commit/b82ee149e2f13c4cebe5e2ecc46ad115aa7115bc that are passing tests. I'll submit a PR against your branch shortly.\n",
    "commit": "7e9e191c76992813d9a0bdbb1de590776c4875a1",
    "createdAt": "2015-12-08T22:00:36Z",
    "diffHunk": "@@ -159,13 +156,13 @@ class StaticMemoryManagerSuite extends MemoryManagerSuite {\n     assert(mm.acquireUnrollMemory(dummyBlock, 500L, evictedBlocks))\n     // `spark.storage.unrollFraction` is 0.4, so the max unroll space is 400 bytes.\n     // Since we already occupy 60 bytes, we will try to ensure only 400 - 60 = 340 bytes."
  }],
  "prId": 10170
}]