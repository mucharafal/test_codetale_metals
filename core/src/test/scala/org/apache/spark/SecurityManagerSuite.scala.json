[{
  "comments": [{
    "author": {
      "login": "jiangxb1987"
    },
    "body": "nit: `local[1,2]` -> `local[1, 2]`",
    "commit": "e01feeff30ed226d638055fed0238ef0e1c0c69e",
    "createdAt": "2018-02-22T15:35:54Z",
    "diffHunk": "@@ -440,23 +440,41 @@ class SecurityManagerSuite extends SparkFunSuite with ResetSystemProperties {\n     assert(keyFromEnv === new SecurityManager(conf2).getSecretKey())\n   }\n \n-  test(\"secret key generation in yarn mode\") {\n-    val conf = new SparkConf()\n-      .set(NETWORK_AUTH_ENABLED, true)\n-      .set(SparkLauncher.SPARK_MASTER, \"yarn\")\n-    val mgr = new SecurityManager(conf)\n-\n-    UserGroupInformation.createUserForTesting(\"authTest\", Array()).doAs(\n-      new PrivilegedExceptionAction[Unit]() {\n-        override def run(): Unit = {\n-          mgr.initializeAuth()\n-          val creds = UserGroupInformation.getCurrentUser().getCredentials()\n-          val secret = creds.getSecretKey(SecurityManager.SECRET_LOOKUP_KEY)\n-          assert(secret != null)\n-          assert(new String(secret, UTF_8) === mgr.getSecretKey())\n+  test(\"secret key generation\") {\n+    Seq(\n+      (\"yarn\", true),\n+      (\"local\", true),\n+      (\"local[*]\", true),\n+      (\"local[1,2]\", true),"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Fixed.",
    "commit": "e01feeff30ed226d638055fed0238ef0e1c0c69e",
    "createdAt": "2018-02-22T15:56:52Z",
    "diffHunk": "@@ -440,23 +440,41 @@ class SecurityManagerSuite extends SparkFunSuite with ResetSystemProperties {\n     assert(keyFromEnv === new SecurityManager(conf2).getSecretKey())\n   }\n \n-  test(\"secret key generation in yarn mode\") {\n-    val conf = new SparkConf()\n-      .set(NETWORK_AUTH_ENABLED, true)\n-      .set(SparkLauncher.SPARK_MASTER, \"yarn\")\n-    val mgr = new SecurityManager(conf)\n-\n-    UserGroupInformation.createUserForTesting(\"authTest\", Array()).doAs(\n-      new PrivilegedExceptionAction[Unit]() {\n-        override def run(): Unit = {\n-          mgr.initializeAuth()\n-          val creds = UserGroupInformation.getCurrentUser().getCredentials()\n-          val secret = creds.getSecretKey(SecurityManager.SECRET_LOOKUP_KEY)\n-          assert(secret != null)\n-          assert(new String(secret, UTF_8) === mgr.getSecretKey())\n+  test(\"secret key generation\") {\n+    Seq(\n+      (\"yarn\", true),\n+      (\"local\", true),\n+      (\"local[*]\", true),\n+      (\"local[1,2]\", true),"
  }],
  "prId": 20652
}]