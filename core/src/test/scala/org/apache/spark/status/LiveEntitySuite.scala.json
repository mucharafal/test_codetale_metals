[{
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "whats the scenario where you'd get another update for the same block, without a removal event in the middle?  Just if there is a dropped event?",
    "commit": "b95baec2297254707fecf6a819ecd86b088a68d9",
    "createdAt": "2019-09-27T19:39:09Z",
    "diffHunk": "@@ -51,6 +52,61 @@ class LiveEntitySuite extends SparkFunSuite {\n     assert(!seq.exists(_.blockName == items(5).blockName))\n   }\n \n+  test(\"rdd tracking in live executor\") {\n+    val exec = new LiveExecutor(\"1\", 0L)\n+    exec.totalOnHeap = 42L\n+\n+    assert(!exec.hasRDDData(1))\n+\n+    exec.addBlock(RDDBlockId(1, 1), 1L, 1L, false)\n+    assert(exec.hasRDDData(1))\n+    assert(exec.diskUsed === 1)\n+    assert(exec.memoryUsed === 1)\n+    assert(exec.usedOnHeap === 1)\n+    assert(exec.usedOffHeap === 0)\n+\n+    exec.addBlock(RDDBlockId(1, 2), 2L, 2L, false)\n+    assert(exec.hasRDDData(1))\n+    assert(exec.diskUsed === 3)\n+    assert(exec.memoryUsed === 3)\n+    assert(exec.usedOnHeap === 3)\n+    assert(exec.usedOffHeap === 0)\n+\n+    val old2 = exec.removeBlock(RDDBlockId(1, 2), false)\n+    assert(old2 != null)\n+    assert(old2.diskSize === 2)\n+    assert(old2.memSize === 2)\n+    assert(exec.hasRDDData(1))\n+    assert(exec.diskUsed === 1)\n+    assert(exec.memoryUsed === 1)\n+    assert(exec.usedOnHeap === 1)\n+    assert(exec.usedOffHeap === 0)\n+\n+    val old1 = exec.addBlock(RDDBlockId(1, 1), 3L, 3L, false)"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "IIRC, if a block is evicted from memory to disk, for example; and later if it's loaded back into memory.",
    "commit": "b95baec2297254707fecf6a819ecd86b088a68d9",
    "createdAt": "2019-09-27T23:54:06Z",
    "diffHunk": "@@ -51,6 +52,61 @@ class LiveEntitySuite extends SparkFunSuite {\n     assert(!seq.exists(_.blockName == items(5).blockName))\n   }\n \n+  test(\"rdd tracking in live executor\") {\n+    val exec = new LiveExecutor(\"1\", 0L)\n+    exec.totalOnHeap = 42L\n+\n+    assert(!exec.hasRDDData(1))\n+\n+    exec.addBlock(RDDBlockId(1, 1), 1L, 1L, false)\n+    assert(exec.hasRDDData(1))\n+    assert(exec.diskUsed === 1)\n+    assert(exec.memoryUsed === 1)\n+    assert(exec.usedOnHeap === 1)\n+    assert(exec.usedOffHeap === 0)\n+\n+    exec.addBlock(RDDBlockId(1, 2), 2L, 2L, false)\n+    assert(exec.hasRDDData(1))\n+    assert(exec.diskUsed === 3)\n+    assert(exec.memoryUsed === 3)\n+    assert(exec.usedOnHeap === 3)\n+    assert(exec.usedOffHeap === 0)\n+\n+    val old2 = exec.removeBlock(RDDBlockId(1, 2), false)\n+    assert(old2 != null)\n+    assert(old2.diskSize === 2)\n+    assert(old2.memSize === 2)\n+    assert(exec.hasRDDData(1))\n+    assert(exec.diskUsed === 1)\n+    assert(exec.memoryUsed === 1)\n+    assert(exec.usedOnHeap === 1)\n+    assert(exec.usedOffHeap === 0)\n+\n+    val old1 = exec.addBlock(RDDBlockId(1, 1), 3L, 3L, false)"
  }, {
    "author": {
      "login": "squito"
    },
    "body": "ah good point.  worth a comment?  that case usually slips my mind, anyway",
    "commit": "b95baec2297254707fecf6a819ecd86b088a68d9",
    "createdAt": "2019-09-30T19:26:30Z",
    "diffHunk": "@@ -51,6 +52,61 @@ class LiveEntitySuite extends SparkFunSuite {\n     assert(!seq.exists(_.blockName == items(5).blockName))\n   }\n \n+  test(\"rdd tracking in live executor\") {\n+    val exec = new LiveExecutor(\"1\", 0L)\n+    exec.totalOnHeap = 42L\n+\n+    assert(!exec.hasRDDData(1))\n+\n+    exec.addBlock(RDDBlockId(1, 1), 1L, 1L, false)\n+    assert(exec.hasRDDData(1))\n+    assert(exec.diskUsed === 1)\n+    assert(exec.memoryUsed === 1)\n+    assert(exec.usedOnHeap === 1)\n+    assert(exec.usedOffHeap === 0)\n+\n+    exec.addBlock(RDDBlockId(1, 2), 2L, 2L, false)\n+    assert(exec.hasRDDData(1))\n+    assert(exec.diskUsed === 3)\n+    assert(exec.memoryUsed === 3)\n+    assert(exec.usedOnHeap === 3)\n+    assert(exec.usedOffHeap === 0)\n+\n+    val old2 = exec.removeBlock(RDDBlockId(1, 2), false)\n+    assert(old2 != null)\n+    assert(old2.diskSize === 2)\n+    assert(old2.memSize === 2)\n+    assert(exec.hasRDDData(1))\n+    assert(exec.diskUsed === 1)\n+    assert(exec.memoryUsed === 1)\n+    assert(exec.usedOnHeap === 1)\n+    assert(exec.usedOffHeap === 0)\n+\n+    val old1 = exec.addBlock(RDDBlockId(1, 1), 3L, 3L, false)"
  }],
  "prId": 25779
}]