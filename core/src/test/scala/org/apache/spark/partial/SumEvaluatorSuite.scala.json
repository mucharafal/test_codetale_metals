[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "While you're here throw in a basic test for count == 0 too, and ideally some normal-path case for completeness\n",
    "commit": "4040e0ec2421d5abe9b89785955e1e3d2215676e",
    "createdAt": "2016-03-29T13:39:34Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.partial\n+\n+\n+import org.apache.spark._\n+import org.apache.spark.util.StatCounter\n+\n+class SumEvaluatorSuite extends SparkFunSuite with SharedSparkContext {\n+\n+  test(\"correct handling of count 1\") {",
    "line": 25
  }, {
    "author": {
      "login": "mtustin-handy"
    },
    "body": "Done.\n",
    "commit": "4040e0ec2421d5abe9b89785955e1e3d2215676e",
    "createdAt": "2016-03-30T23:42:59Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.partial\n+\n+\n+import org.apache.spark._\n+import org.apache.spark.util.StatCounter\n+\n+class SumEvaluatorSuite extends SparkFunSuite with SharedSparkContext {\n+\n+  test(\"correct handling of count 1\") {",
    "line": 25
  }],
  "prId": 12016
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "I don't see a reason to round to the nearest integer. You can assert approximate equality in a test. But I think you can assert exact equality in this case since it's deterministic\n",
    "commit": "4040e0ec2421d5abe9b89785955e1e3d2215676e",
    "createdAt": "2016-03-29T13:40:37Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.partial\n+\n+\n+import org.apache.spark._\n+import org.apache.spark.util.StatCounter\n+\n+class SumEvaluatorSuite extends SparkFunSuite with SharedSparkContext {\n+\n+  test(\"correct handling of count 1\") {\n+\n+    //setup\n+    val counter = new StatCounter(List(2.0))\n+    // count of 10 because it's larger than 1,\n+    // and 0.95 because that's the default\n+    val evaluator = new SumEvaluator(10, 0.95)\n+    // arbitrarily assign id 1\n+    evaluator.merge(1, counter)\n+\n+    //execute\n+    val res = evaluator.currentResult()\n+    // Build version with known precisions for equality check\n+    val round_res = new BoundedDouble(res.mean.round.toDouble, res.confidence, res.low, res.high)"
  }, {
    "author": {
      "login": "mtustin-handy"
    },
    "body": "Unfortunately, the exact value being returned doesn't have an exact decimal representation. I'll think about the best course here. \n",
    "commit": "4040e0ec2421d5abe9b89785955e1e3d2215676e",
    "createdAt": "2016-03-29T14:26:36Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.partial\n+\n+\n+import org.apache.spark._\n+import org.apache.spark.util.StatCounter\n+\n+class SumEvaluatorSuite extends SparkFunSuite with SharedSparkContext {\n+\n+  test(\"correct handling of count 1\") {\n+\n+    //setup\n+    val counter = new StatCounter(List(2.0))\n+    // count of 10 because it's larger than 1,\n+    // and 0.95 because that's the default\n+    val evaluator = new SumEvaluator(10, 0.95)\n+    // arbitrarily assign id 1\n+    evaluator.merge(1, counter)\n+\n+    //execute\n+    val res = evaluator.currentResult()\n+    // Build version with known precisions for equality check\n+    val round_res = new BoundedDouble(res.mean.round.toDouble, res.confidence, res.low, res.high)"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "By that logic lots of things returning floating point values would be untestable, but they are. You are asserting that the value returned is the expected closest-possible double. This is the best course. This test asserts anything that rounds to the same int is fine, but that's unnecessarily coarse, and we have clearer syntax for it. If it's really called for, asserting approximate equality is better.\n\nThis should be a conceptually simple fix plus tests, so I'd prefer to head straight at the simple solution and wrap this up, or else it may be simpler to merge https://github.com/apache/spark/pull/11981 with a test instead.\n",
    "commit": "4040e0ec2421d5abe9b89785955e1e3d2215676e",
    "createdAt": "2016-03-30T11:48:05Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.partial\n+\n+\n+import org.apache.spark._\n+import org.apache.spark.util.StatCounter\n+\n+class SumEvaluatorSuite extends SparkFunSuite with SharedSparkContext {\n+\n+  test(\"correct handling of count 1\") {\n+\n+    //setup\n+    val counter = new StatCounter(List(2.0))\n+    // count of 10 because it's larger than 1,\n+    // and 0.95 because that's the default\n+    val evaluator = new SumEvaluator(10, 0.95)\n+    // arbitrarily assign id 1\n+    evaluator.merge(1, counter)\n+\n+    //execute\n+    val res = evaluator.currentResult()\n+    // Build version with known precisions for equality check\n+    val round_res = new BoundedDouble(res.mean.round.toDouble, res.confidence, res.low, res.high)"
  }, {
    "author": {
      "login": "mtustin-handy"
    },
    "body": "@srowen Update me then if you change your mind. In the mean time I'll make changes here.\n",
    "commit": "4040e0ec2421d5abe9b89785955e1e3d2215676e",
    "createdAt": "2016-03-30T13:41:30Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.partial\n+\n+\n+import org.apache.spark._\n+import org.apache.spark.util.StatCounter\n+\n+class SumEvaluatorSuite extends SparkFunSuite with SharedSparkContext {\n+\n+  test(\"correct handling of count 1\") {\n+\n+    //setup\n+    val counter = new StatCounter(List(2.0))\n+    // count of 10 because it's larger than 1,\n+    // and 0.95 because that's the default\n+    val evaluator = new SumEvaluator(10, 0.95)\n+    // arbitrarily assign id 1\n+    evaluator.merge(1, counter)\n+\n+    //execute\n+    val res = evaluator.currentResult()\n+    // Build version with known precisions for equality check\n+    val round_res = new BoundedDouble(res.mean.round.toDouble, res.confidence, res.low, res.high)"
  }],
  "prId": 12016
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Looking good, now into nits. var names should be camelCase instead of with_underscores.\n",
    "commit": "4040e0ec2421d5abe9b89785955e1e3d2215676e",
    "createdAt": "2016-03-31T23:15:58Z",
    "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.partial\n+\n+\n+import org.apache.spark._\n+import org.apache.spark.util.StatCounter\n+\n+class SumEvaluatorSuite extends SparkFunSuite with SharedSparkContext {\n+\n+  test(\"correct handling of count 1\") {\n+\n+    //setup\n+    val counter = new StatCounter(List(2.0))\n+    // count of 10 because it's larger than 1,\n+    // and 0.95 because that's the default\n+    val evaluator = new SumEvaluator(10, 0.95)\n+    // arbitrarily assign id 1\n+    evaluator.merge(1, counter)\n+\n+    //execute\n+    val res = evaluator.currentResult()\n+    // 38.0 - 7.1E-15 because that's how the maths shakes out\n+    val target_mean =  38.0 - 7.1E-15"
  }, {
    "author": {
      "login": "mtustin-handy"
    },
    "body": "My python is showing 😬\n\nOn Thursday, March 31, 2016, Sean Owen notifications@github.com wrote:\n\n> In core/src/test/scala/org/apache/spark/partial/SumEvaluatorSuite.scala\n> https://github.com/apache/spark/pull/12016#discussion_r58143122:\n> \n> > +class SumEvaluatorSuite extends SparkFunSuite with SharedSparkContext {\n> > +\n> > -  test(\"correct handling of count 1\") {\n> >   +\n> > -    //setup\n> > -    val counter = new StatCounter(List(2.0))\n> > -    // count of 10 because it's larger than 1,\n> > -    // and 0.95 because that's the default\n> > -    val evaluator = new SumEvaluator(10, 0.95)\n> > -    // arbitrarily assign id 1\n> > -    evaluator.merge(1, counter)\n> >   +\n> > -    //execute\n> > -    val res = evaluator.currentResult()\n> > -    // 38.0 - 7.1E-15 because that's how the maths shakes out\n> > -    val target_mean =  38.0 - 7.1E-15\n> \n> Looking good, now into nits. var names should be camelCase instead of\n> with_underscores.\n> \n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/spark/pull/12016/files/93bcd99b11e0c914053cb1cfbe37fe0df4ba1a38#r58143122\n\n## \n\nWant to work at Handy? Check out our culture deck and open roles \nhttp://www.handy.com/careers\nLatest news http://www.handy.com/press at Handy\nHandy just raised $50m \nhttp://venturebeat.com/2015/11/02/on-demand-home-service-handy-raises-50m-in-round-led-by-fidelity/ led \nby Fidelity\n",
    "commit": "4040e0ec2421d5abe9b89785955e1e3d2215676e",
    "createdAt": "2016-03-31T23:17:50Z",
    "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.partial\n+\n+\n+import org.apache.spark._\n+import org.apache.spark.util.StatCounter\n+\n+class SumEvaluatorSuite extends SparkFunSuite with SharedSparkContext {\n+\n+  test(\"correct handling of count 1\") {\n+\n+    //setup\n+    val counter = new StatCounter(List(2.0))\n+    // count of 10 because it's larger than 1,\n+    // and 0.95 because that's the default\n+    val evaluator = new SumEvaluator(10, 0.95)\n+    // arbitrarily assign id 1\n+    evaluator.merge(1, counter)\n+\n+    //execute\n+    val res = evaluator.currentResult()\n+    // 38.0 - 7.1E-15 because that's how the maths shakes out\n+    val target_mean =  38.0 - 7.1E-15"
  }],
  "prId": 12016
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "This is almost like just asserting equality. If we're this sure about the result then I assume we're actually sure of exact equality, and so would be fine to assert that directly for clarity.\n\nTo assert approximate equality you can see the other tests that use syntax like `assert(a ~== b absTol 1e-7)`. Approximate equality assertions are likely to involve asserting some more possible variance than the smallest possible double. Where it's necessary I'd expect you need wider tolerance; where it's not necessary, it should just be an exact equality assertion.\n",
    "commit": "4040e0ec2421d5abe9b89785955e1e3d2215676e",
    "createdAt": "2016-03-31T23:18:52Z",
    "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.partial\n+\n+\n+import org.apache.spark._\n+import org.apache.spark.util.StatCounter\n+\n+class SumEvaluatorSuite extends SparkFunSuite with SharedSparkContext {\n+\n+  test(\"correct handling of count 1\") {\n+\n+    //setup\n+    val counter = new StatCounter(List(2.0))\n+    // count of 10 because it's larger than 1,\n+    // and 0.95 because that's the default\n+    val evaluator = new SumEvaluator(10, 0.95)\n+    // arbitrarily assign id 1\n+    evaluator.merge(1, counter)\n+\n+    //execute\n+    val res = evaluator.currentResult()\n+    // 38.0 - 7.1E-15 because that's how the maths shakes out\n+    val target_mean =  38.0 - 7.1E-15\n+    // Version to test everything except mean\n+    val ancillary_res = new BoundedDouble(target_mean, res.confidence, res.low, res.high)\n+    // mean result to test\n+    val mean_diff = (res.mean - target_mean).abs\n+    \n+\n+    //Sanity check that equality works on BoundedDouble\n+    assert(new BoundedDouble(2.0, 0.95, 1.1, 1.2) == new BoundedDouble(2.0, 0.95, 1.1, 1.2))\n+    // actual test\n+\n+    // Use ancillary_res as the result to check everything except the mean\n+    assert(ancillary_res == new BoundedDouble(target_mean, 0.950, Double.NegativeInfinity, Double.PositiveInfinity))\n+\n+    // check that mean is within expected tolerance of expectation\n+    assert(mean_diff < Double.MinPositiveValue)"
  }, {
    "author": {
      "login": "mtustin-handy"
    },
    "body": "TIL.\n\nStyle errors are all fixed according to local scalastyle. \n",
    "commit": "4040e0ec2421d5abe9b89785955e1e3d2215676e",
    "createdAt": "2016-04-01T15:59:07Z",
    "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.partial\n+\n+\n+import org.apache.spark._\n+import org.apache.spark.util.StatCounter\n+\n+class SumEvaluatorSuite extends SparkFunSuite with SharedSparkContext {\n+\n+  test(\"correct handling of count 1\") {\n+\n+    //setup\n+    val counter = new StatCounter(List(2.0))\n+    // count of 10 because it's larger than 1,\n+    // and 0.95 because that's the default\n+    val evaluator = new SumEvaluator(10, 0.95)\n+    // arbitrarily assign id 1\n+    evaluator.merge(1, counter)\n+\n+    //execute\n+    val res = evaluator.currentResult()\n+    // 38.0 - 7.1E-15 because that's how the maths shakes out\n+    val target_mean =  38.0 - 7.1E-15\n+    // Version to test everything except mean\n+    val ancillary_res = new BoundedDouble(target_mean, res.confidence, res.low, res.high)\n+    // mean result to test\n+    val mean_diff = (res.mean - target_mean).abs\n+    \n+\n+    //Sanity check that equality works on BoundedDouble\n+    assert(new BoundedDouble(2.0, 0.95, 1.1, 1.2) == new BoundedDouble(2.0, 0.95, 1.1, 1.2))\n+    // actual test\n+\n+    // Use ancillary_res as the result to check everything except the mean\n+    assert(ancillary_res == new BoundedDouble(target_mean, 0.950, Double.NegativeInfinity, Double.PositiveInfinity))\n+\n+    // check that mean is within expected tolerance of expectation\n+    assert(mean_diff < Double.MinPositiveValue)"
  }, {
    "author": {
      "login": "mtustin-handy"
    },
    "body": "And, these tests are much nicer now they're equality checks, if I do say so myself. \n",
    "commit": "4040e0ec2421d5abe9b89785955e1e3d2215676e",
    "createdAt": "2016-04-01T15:59:51Z",
    "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.partial\n+\n+\n+import org.apache.spark._\n+import org.apache.spark.util.StatCounter\n+\n+class SumEvaluatorSuite extends SparkFunSuite with SharedSparkContext {\n+\n+  test(\"correct handling of count 1\") {\n+\n+    //setup\n+    val counter = new StatCounter(List(2.0))\n+    // count of 10 because it's larger than 1,\n+    // and 0.95 because that's the default\n+    val evaluator = new SumEvaluator(10, 0.95)\n+    // arbitrarily assign id 1\n+    evaluator.merge(1, counter)\n+\n+    //execute\n+    val res = evaluator.currentResult()\n+    // 38.0 - 7.1E-15 because that's how the maths shakes out\n+    val target_mean =  38.0 - 7.1E-15\n+    // Version to test everything except mean\n+    val ancillary_res = new BoundedDouble(target_mean, res.confidence, res.low, res.high)\n+    // mean result to test\n+    val mean_diff = (res.mean - target_mean).abs\n+    \n+\n+    //Sanity check that equality works on BoundedDouble\n+    assert(new BoundedDouble(2.0, 0.95, 1.1, 1.2) == new BoundedDouble(2.0, 0.95, 1.1, 1.2))\n+    // actual test\n+\n+    // Use ancillary_res as the result to check everything except the mean\n+    assert(ancillary_res == new BoundedDouble(target_mean, 0.950, Double.NegativeInfinity, Double.PositiveInfinity))\n+\n+    // check that mean is within expected tolerance of expectation\n+    assert(mean_diff < Double.MinPositiveValue)"
  }],
  "prId": 12016
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Close now. It doesn't like the whitespace at ends of lines, and commas everywhere need a spaceafter\n",
    "commit": "4040e0ec2421d5abe9b89785955e1e3d2215676e",
    "createdAt": "2016-04-01T23:13:33Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.partial\n+\n+\n+import org.apache.spark._\n+import org.apache.spark.util.StatCounter\n+\n+class SumEvaluatorSuite extends SparkFunSuite with SharedSparkContext {\n+\n+  test(\"correct handling of count 1\") {\n+\n+    //setup\n+    val counter = new StatCounter(List(2.0))\n+    // count of 10 because it's larger than 1,\n+    // and 0.95 because that's the default\n+    val evaluator = new SumEvaluator(10, 0.95)\n+    // arbitrarily assign id 1\n+    evaluator.merge(1, counter)\n+\n+    //execute\n+    val res = evaluator.currentResult()\n+    // 38.0 - 7.1E-15 because that's how the maths shakes out\n+    val targetMean =  38.0 - 7.1E-15\n+ \n+    //Sanity check that equality works on BoundedDouble\n+    assert(new BoundedDouble(2.0, 0.95, 1.1, 1.2) == new BoundedDouble(2.0, 0.95, 1.1, 1.2))\n+\n+    // actual test\n+    assert(res == new BoundedDouble(targetMean, 0.950, Double.NegativeInfinity, Double.PositiveInfinity))\n+  }\n+\n+  test(\"correct handling of count 0\") {\n+\n+    //setup\n+    val counter = new StatCounter(List())\n+    // count of 10 because it's larger than 0,\n+    // and 0.95 because that's the default\n+    val evaluator = new SumEvaluator(10, 0.95)\n+    // arbitrarily assign id 1\n+    evaluator.merge(1, counter)\n+\n+    //execute\n+    val res = evaluator.currentResult()\n+    //assert\n+    assert(res == new BoundedDouble(0, 0.0, Double.NegativeInfinity, Double.PositiveInfinity))\n+  }\n+\n+  test(\"correct handling of NaN\") {\n+\n+    //setup\n+    val counter = new StatCounter(List(1,Double.NaN,2))"
  }, {
    "author": {
      "login": "mtustin-handy"
    },
    "body": "Yeah, for some reason `sbt scalastyle` isn't checking my test code. I'll try to retrigger jenkins in a second. \n",
    "commit": "4040e0ec2421d5abe9b89785955e1e3d2215676e",
    "createdAt": "2016-04-01T23:28:16Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.partial\n+\n+\n+import org.apache.spark._\n+import org.apache.spark.util.StatCounter\n+\n+class SumEvaluatorSuite extends SparkFunSuite with SharedSparkContext {\n+\n+  test(\"correct handling of count 1\") {\n+\n+    //setup\n+    val counter = new StatCounter(List(2.0))\n+    // count of 10 because it's larger than 1,\n+    // and 0.95 because that's the default\n+    val evaluator = new SumEvaluator(10, 0.95)\n+    // arbitrarily assign id 1\n+    evaluator.merge(1, counter)\n+\n+    //execute\n+    val res = evaluator.currentResult()\n+    // 38.0 - 7.1E-15 because that's how the maths shakes out\n+    val targetMean =  38.0 - 7.1E-15\n+ \n+    //Sanity check that equality works on BoundedDouble\n+    assert(new BoundedDouble(2.0, 0.95, 1.1, 1.2) == new BoundedDouble(2.0, 0.95, 1.1, 1.2))\n+\n+    // actual test\n+    assert(res == new BoundedDouble(targetMean, 0.950, Double.NegativeInfinity, Double.PositiveInfinity))\n+  }\n+\n+  test(\"correct handling of count 0\") {\n+\n+    //setup\n+    val counter = new StatCounter(List())\n+    // count of 10 because it's larger than 0,\n+    // and 0.95 because that's the default\n+    val evaluator = new SumEvaluator(10, 0.95)\n+    // arbitrarily assign id 1\n+    evaluator.merge(1, counter)\n+\n+    //execute\n+    val res = evaluator.currentResult()\n+    //assert\n+    assert(res == new BoundedDouble(0, 0.0, Double.NegativeInfinity, Double.PositiveInfinity))\n+  }\n+\n+  test(\"correct handling of NaN\") {\n+\n+    //setup\n+    val counter = new StatCounter(List(1,Double.NaN,2))"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Try `./dev/lint-scala`\n",
    "commit": "4040e0ec2421d5abe9b89785955e1e3d2215676e",
    "createdAt": "2016-04-01T23:33:15Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.partial\n+\n+\n+import org.apache.spark._\n+import org.apache.spark.util.StatCounter\n+\n+class SumEvaluatorSuite extends SparkFunSuite with SharedSparkContext {\n+\n+  test(\"correct handling of count 1\") {\n+\n+    //setup\n+    val counter = new StatCounter(List(2.0))\n+    // count of 10 because it's larger than 1,\n+    // and 0.95 because that's the default\n+    val evaluator = new SumEvaluator(10, 0.95)\n+    // arbitrarily assign id 1\n+    evaluator.merge(1, counter)\n+\n+    //execute\n+    val res = evaluator.currentResult()\n+    // 38.0 - 7.1E-15 because that's how the maths shakes out\n+    val targetMean =  38.0 - 7.1E-15\n+ \n+    //Sanity check that equality works on BoundedDouble\n+    assert(new BoundedDouble(2.0, 0.95, 1.1, 1.2) == new BoundedDouble(2.0, 0.95, 1.1, 1.2))\n+\n+    // actual test\n+    assert(res == new BoundedDouble(targetMean, 0.950, Double.NegativeInfinity, Double.PositiveInfinity))\n+  }\n+\n+  test(\"correct handling of count 0\") {\n+\n+    //setup\n+    val counter = new StatCounter(List())\n+    // count of 10 because it's larger than 0,\n+    // and 0.95 because that's the default\n+    val evaluator = new SumEvaluator(10, 0.95)\n+    // arbitrarily assign id 1\n+    evaluator.merge(1, counter)\n+\n+    //execute\n+    val res = evaluator.currentResult()\n+    //assert\n+    assert(res == new BoundedDouble(0, 0.0, Double.NegativeInfinity, Double.PositiveInfinity))\n+  }\n+\n+  test(\"correct handling of NaN\") {\n+\n+    //setup\n+    val counter = new StatCounter(List(1,Double.NaN,2))"
  }],
  "prId": 12016
}]