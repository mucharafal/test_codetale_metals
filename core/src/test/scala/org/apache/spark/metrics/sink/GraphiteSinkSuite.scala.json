[{
  "comments": [{
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "It would be ideal to have regex pattern on test case, as we support regex.",
    "commit": "768777aefb588b52b227d7254c6f46a5e55a1d5f",
    "createdAt": "2019-07-24T03:52:52Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.metrics.sink\n+\n+import java.util.Properties\n+\n+import scala.collection.JavaConverters._\n+\n+import com.codahale.metrics._\n+\n+import org.apache.spark.{SecurityManager, SparkConf, SparkFunSuite}\n+\n+class GraphiteSinkSuite extends SparkFunSuite {\n+\n+  test(\"GraphiteSink with default MetricsFilter\") {\n+    val props = new Properties\n+    props.put(\"host\", \"127.0.0.1\")\n+    props.put(\"port\", \"54321\")\n+    val registry = new MetricRegistry\n+    val securityMgr = new SecurityManager(new SparkConf(false))\n+\n+    val sink = new GraphiteSink(props, registry, securityMgr)\n+\n+    val gauge = new Gauge[Double] {\n+      override def getValue: Double = 1.23\n+    }\n+    sink.registry.register(\"gauge\", gauge)\n+    sink.registry.register(\"anothergauge\", gauge)\n+    sink.registry.register(\"streaminggauge\", gauge)\n+\n+    val metricKeys = sink.registry.getGauges(sink.filter).keySet.asScala\n+\n+    assert(metricKeys.equals(Set(\"gauge\", \"anothergauge\", \"streaminggauge\")),\n+      \"Should contain all metrics registered\")\n+  }\n+\n+  test(\"GraphiteSink with regex MetricsFilter\") {\n+    val props = new Properties\n+    props.put(\"host\", \"127.0.0.1\")\n+    props.put(\"port\", \"54321\")\n+    props.put(\"regex\", \"streaming\")"
  }, {
    "author": {
      "login": "nkarpov"
    },
    "body": "Done!",
    "commit": "768777aefb588b52b227d7254c6f46a5e55a1d5f",
    "createdAt": "2019-07-24T15:56:04Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.metrics.sink\n+\n+import java.util.Properties\n+\n+import scala.collection.JavaConverters._\n+\n+import com.codahale.metrics._\n+\n+import org.apache.spark.{SecurityManager, SparkConf, SparkFunSuite}\n+\n+class GraphiteSinkSuite extends SparkFunSuite {\n+\n+  test(\"GraphiteSink with default MetricsFilter\") {\n+    val props = new Properties\n+    props.put(\"host\", \"127.0.0.1\")\n+    props.put(\"port\", \"54321\")\n+    val registry = new MetricRegistry\n+    val securityMgr = new SecurityManager(new SparkConf(false))\n+\n+    val sink = new GraphiteSink(props, registry, securityMgr)\n+\n+    val gauge = new Gauge[Double] {\n+      override def getValue: Double = 1.23\n+    }\n+    sink.registry.register(\"gauge\", gauge)\n+    sink.registry.register(\"anothergauge\", gauge)\n+    sink.registry.register(\"streaminggauge\", gauge)\n+\n+    val metricKeys = sink.registry.getGauges(sink.filter).keySet.asScala\n+\n+    assert(metricKeys.equals(Set(\"gauge\", \"anothergauge\", \"streaminggauge\")),\n+      \"Should contain all metrics registered\")\n+  }\n+\n+  test(\"GraphiteSink with regex MetricsFilter\") {\n+    val props = new Properties\n+    props.put(\"host\", \"127.0.0.1\")\n+    props.put(\"port\", \"54321\")\n+    props.put(\"regex\", \"streaming\")"
  }],
  "prId": 25232
}]