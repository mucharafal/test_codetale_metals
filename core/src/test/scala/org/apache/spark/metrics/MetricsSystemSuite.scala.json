[{
  "comments": [{
    "author": {
      "login": "szhem"
    },
    "body": "I'd suggest to pay an attention to how the other test cases in this test suite are organised by grouping the related blocks of code with the empty lines.\r\n",
    "commit": "38cf244a68e1b5a0c1bca401b5f718e63cd45022",
    "createdAt": "2019-05-12T18:21:05Z",
    "diffHunk": "@@ -65,6 +66,32 @@ class MetricsSystemSuite extends SparkFunSuite with BeforeAndAfter with PrivateM\n     assert(metricsSystem.invokePrivate(sources()).length === StaticSources.allSources.length + 1)\n   }\n \n+  test(\"MetricsSystem with sources remove\") {\n+    val metricsSystem = MetricsSystem.createMetricsSystem(\"test\", conf, securityMgr)\n+    metricsSystem.start()\n+    val mockContext = mock(classOf[SparkContext])\n+    val mockEnvironment = mock(classOf[SparkEnv])\n+    when(mockEnvironment.metricsSystem) thenReturn (metricsSystem)\n+    when(mockContext.env) thenReturn (mockEnvironment)\n+    val sources = PrivateMethod[ArrayBuffer[Source]]('sources)\n+    val registry = PrivateMethod[MetricRegistry]('registry)\n+    val laFirst = mockContext.longAccumulator\n+    val laSecond = mockContext.longAccumulator\n+    val laThird = mockContext.longAccumulator\n+    val laSource =\n+      LongAccumulatorSource.register(mockContext, Map(\"laF\" -> laFirst, \"laS\" -> laSecond))\n+    LongAccumulatorSource.register(mockContext, Map(\"laT\" -> laThird))\n+    assert(metricsSystem.invokePrivate(sources()).length === StaticSources.allSources.length + 2)\n+    val notRegisteredSource = new LongAccumulatorSource\n+    metricsSystem.removeSource(notRegisteredSource)\n+    assert(metricsSystem.invokePrivate(sources()).length === StaticSources.allSources.length + 2)\n+    metricsSystem.removeSource(laSource)\n+    assert(metricsSystem.invokePrivate(sources()).length === StaticSources.allSources.length + 1)\n+    assert(metricsSystem.invokePrivate(registry()).getNames.contains(\"AccumulatorSource.laT\"))\n+    assert(!metricsSystem.invokePrivate(registry()).getNames.contains(\"AccumulatorSource.laF\"))\n+    assert(!metricsSystem.invokePrivate(registry()).getNames.contains(\"AccumulatorSource.laS\"))\n+  }",
    "line": 44
  }],
  "prId": 24556
}]