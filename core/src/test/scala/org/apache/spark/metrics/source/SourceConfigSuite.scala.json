[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Thank you for adding this. Could you update like the following?\r\n```scala\r\nimport org.apache.spark.internal.config.METRICS_STATIC_SOURCES_ENABLED\r\n```\r\n```scala\r\n  test(\"Test configuration for static sources registration\") {\r\n    val conf = new SparkConf()\r\n    conf.set(METRICS_STATIC_SOURCES_ENABLED, true)\r\n    val sc = new SparkContext(\"local\", \"test\", conf)\r\n    try {\r\n      val metricsSystem = sc.env.metricsSystem\r\n\r\n      // Static sources should be registered\r\n      assert (metricsSystem.getSourcesByName(\"CodeGenerator\").nonEmpty)\r\n      assert (metricsSystem.getSourcesByName(\"HiveExternalCatalog\").nonEmpty)\r\n    } finally {\r\n      sc.stop()\r\n    }\r\n  }\r\n```",
    "commit": "564ec07907a4135aa4a2e9e68d3e825e9ad37c60",
    "createdAt": "2019-11-08T19:28:45Z",
    "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.metrics.source\n+\n+import org.apache.spark.{LocalSparkContext, SparkConf, SparkContext, SparkFunSuite}\n+\n+class SourceConfigSuite extends SparkFunSuite with LocalSparkContext {\n+\n+  test(\"Test configuration for static sources registration\") {\n+    val conf = new SparkConf()\n+    conf.set(\"spark.metrics.static.sources.enabled\", \"true\")\n+    val sc = new SparkContext(\"local\", \"test\", conf)\n+    val metricsSystem = sc.env.metricsSystem\n+\n+    // Static sources should be registered\n+    assert (metricsSystem.getSourcesByName(\"CodeGenerator\").nonEmpty)\n+    assert (metricsSystem.getSourcesByName(\"HiveExternalCatalog\").nonEmpty)\n+\n+    sc.stop()\n+  }",
    "line": 38
  }],
  "prId": 26320
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "this one too.",
    "commit": "564ec07907a4135aa4a2e9e68d3e825e9ad37c60",
    "createdAt": "2019-11-08T19:28:58Z",
    "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.metrics.source\n+\n+import org.apache.spark.{LocalSparkContext, SparkConf, SparkContext, SparkFunSuite}\n+\n+class SourceConfigSuite extends SparkFunSuite with LocalSparkContext {\n+\n+  test(\"Test configuration for static sources registration\") {\n+    val conf = new SparkConf()\n+    conf.set(\"spark.metrics.static.sources.enabled\", \"true\")\n+    val sc = new SparkContext(\"local\", \"test\", conf)\n+    val metricsSystem = sc.env.metricsSystem\n+\n+    // Static sources should be registered\n+    assert (metricsSystem.getSourcesByName(\"CodeGenerator\").nonEmpty)\n+    assert (metricsSystem.getSourcesByName(\"HiveExternalCatalog\").nonEmpty)\n+\n+    sc.stop()\n+  }\n+\n+  test(\"Test configuration for skipping static sources registration\") {\n+    val conf = new SparkConf()\n+    conf.set(\"spark.metrics.static.sources.enabled\", \"false\")\n+    val sc = new SparkContext(\"local\", \"test\", conf)\n+    val metricsSystem = sc.env.metricsSystem\n+\n+    // Static sources should be registered\n+    assert (metricsSystem.getSourcesByName(\"CodeGenerator\").isEmpty)\n+    assert (metricsSystem.getSourcesByName(\"HiveExternalCatalog\").isEmpty)\n+\n+    sc.stop()"
  }],
  "prId": 26320
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "`should be` -> `should not be`.",
    "commit": "564ec07907a4135aa4a2e9e68d3e825e9ad37c60",
    "createdAt": "2019-11-08T19:37:04Z",
    "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.metrics.source\n+\n+import org.apache.spark.{LocalSparkContext, SparkConf, SparkContext, SparkFunSuite}\n+\n+class SourceConfigSuite extends SparkFunSuite with LocalSparkContext {\n+\n+  test(\"Test configuration for static sources registration\") {\n+    val conf = new SparkConf()\n+    conf.set(\"spark.metrics.static.sources.enabled\", \"true\")\n+    val sc = new SparkContext(\"local\", \"test\", conf)\n+    val metricsSystem = sc.env.metricsSystem\n+\n+    // Static sources should be registered\n+    assert (metricsSystem.getSourcesByName(\"CodeGenerator\").nonEmpty)\n+    assert (metricsSystem.getSourcesByName(\"HiveExternalCatalog\").nonEmpty)\n+\n+    sc.stop()\n+  }\n+\n+  test(\"Test configuration for skipping static sources registration\") {\n+    val conf = new SparkConf()\n+    conf.set(\"spark.metrics.static.sources.enabled\", \"false\")\n+    val sc = new SparkContext(\"local\", \"test\", conf)\n+    val metricsSystem = sc.env.metricsSystem\n+\n+    // Static sources should be registered"
  }],
  "prId": 26320
}]