[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "indentation\n",
    "commit": "9f6862ed579cf4edc965e1a9835a79d6aa4c6d0b",
    "createdAt": "2016-08-17T19:03:23Z",
    "diffHunk": "@@ -190,6 +193,42 @@ class UISuite extends SparkFunSuite {\n     }\n   }\n \n+  test(\"verify proxy rewrittenURI\") {\n+    val prefix = \"/proxy/worker-id\"\n+    val target = \"http://localhost:8081\"\n+    val path = \"/proxy/worker-id/json\"\n+    var rewrittenURI = JettyUtils.createProxyURI(prefix, target, path, null)\n+    assert(rewrittenURI.toString().equals(\"http://localhost:8081/json\"))\n+    rewrittenURI = JettyUtils.createProxyURI(prefix, target, path, \"test=done\")\n+    assert(rewrittenURI.toString().equals(\"http://localhost:8081/json?test=done\"))\n+    rewrittenURI = JettyUtils.createProxyURI(prefix, target, \"/proxy/worker-id\", null)\n+    assert(rewrittenURI.toString().equals(\"http://localhost:8081\"))\n+    rewrittenURI = JettyUtils.createProxyURI(prefix, target, \"/proxy/worker-noid/json\", null)\n+    assert(rewrittenURI == null)\n+  }\n+\n+  test(\"verify rewriting location header for reverse proxy\") {\n+    val clientRequest = mock(classOf[HttpServletRequest])\n+    var headerValue = \"http://localhost:4040/jobs\"\n+    val prefix = \"/proxy/worker-id\"\n+    val targetUri = URI.create(\"http://localhost:4040\")\n+    when(clientRequest.getScheme()).thenReturn(\"http\")\n+    when(clientRequest.getHeader(\"host\")).thenReturn(\"localhost:8080\")\n+    var newHeader = JettyUtils.createProxyLocationHeader(\n+                                  prefix,"
  }],
  "prId": 13950
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "indentation\n",
    "commit": "9f6862ed579cf4edc965e1a9835a79d6aa4c6d0b",
    "createdAt": "2016-08-17T19:03:28Z",
    "diffHunk": "@@ -190,6 +193,42 @@ class UISuite extends SparkFunSuite {\n     }\n   }\n \n+  test(\"verify proxy rewrittenURI\") {\n+    val prefix = \"/proxy/worker-id\"\n+    val target = \"http://localhost:8081\"\n+    val path = \"/proxy/worker-id/json\"\n+    var rewrittenURI = JettyUtils.createProxyURI(prefix, target, path, null)\n+    assert(rewrittenURI.toString().equals(\"http://localhost:8081/json\"))\n+    rewrittenURI = JettyUtils.createProxyURI(prefix, target, path, \"test=done\")\n+    assert(rewrittenURI.toString().equals(\"http://localhost:8081/json?test=done\"))\n+    rewrittenURI = JettyUtils.createProxyURI(prefix, target, \"/proxy/worker-id\", null)\n+    assert(rewrittenURI.toString().equals(\"http://localhost:8081\"))\n+    rewrittenURI = JettyUtils.createProxyURI(prefix, target, \"/proxy/worker-noid/json\", null)\n+    assert(rewrittenURI == null)\n+  }\n+\n+  test(\"verify rewriting location header for reverse proxy\") {\n+    val clientRequest = mock(classOf[HttpServletRequest])\n+    var headerValue = \"http://localhost:4040/jobs\"\n+    val prefix = \"/proxy/worker-id\"\n+    val targetUri = URI.create(\"http://localhost:4040\")\n+    when(clientRequest.getScheme()).thenReturn(\"http\")\n+    when(clientRequest.getHeader(\"host\")).thenReturn(\"localhost:8080\")\n+    var newHeader = JettyUtils.createProxyLocationHeader(\n+                                  prefix,\n+                                  headerValue,\n+                                  clientRequest,\n+                                  targetUri)\n+    assert(newHeader.toString().equals(\"http://localhost:8080/proxy/worker-id/jobs\"))\n+    headerValue = \"http://localhost:4041/jobs\"\n+    newHeader = JettyUtils.createProxyLocationHeader(\n+                                  prefix,"
  }],
  "prId": 13950
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "use `===` instead of `equals`\n",
    "commit": "9f6862ed579cf4edc965e1a9835a79d6aa4c6d0b",
    "createdAt": "2016-09-07T23:10:35Z",
    "diffHunk": "@@ -190,6 +193,36 @@ class UISuite extends SparkFunSuite {\n     }\n   }\n \n+  test(\"verify proxy rewrittenURI\") {\n+    val prefix = \"/proxy/worker-id\"\n+    val target = \"http://localhost:8081\"\n+    val path = \"/proxy/worker-id/json\"\n+    var rewrittenURI = JettyUtils.createProxyURI(prefix, target, path, null)\n+    assert(rewrittenURI.toString().equals(\"http://localhost:8081/json\"))"
  }],
  "prId": 13950
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "`===`\n",
    "commit": "9f6862ed579cf4edc965e1a9835a79d6aa4c6d0b",
    "createdAt": "2016-09-07T23:10:40Z",
    "diffHunk": "@@ -190,6 +193,36 @@ class UISuite extends SparkFunSuite {\n     }\n   }\n \n+  test(\"verify proxy rewrittenURI\") {\n+    val prefix = \"/proxy/worker-id\"\n+    val target = \"http://localhost:8081\"\n+    val path = \"/proxy/worker-id/json\"\n+    var rewrittenURI = JettyUtils.createProxyURI(prefix, target, path, null)\n+    assert(rewrittenURI.toString().equals(\"http://localhost:8081/json\"))\n+    rewrittenURI = JettyUtils.createProxyURI(prefix, target, path, \"test=done\")\n+    assert(rewrittenURI.toString().equals(\"http://localhost:8081/json?test=done\"))\n+    rewrittenURI = JettyUtils.createProxyURI(prefix, target, \"/proxy/worker-id\", null)\n+    assert(rewrittenURI.toString().equals(\"http://localhost:8081\"))\n+    rewrittenURI = JettyUtils.createProxyURI(prefix, target, \"/proxy/worker-noid/json\", null)\n+    assert(rewrittenURI == null)"
  }],
  "prId": 13950
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "Could you add a test for encoded string in the url, such as `%2F`, `%F0%9F%98%84` (the ðŸ˜„ emoji) ?\n",
    "commit": "9f6862ed579cf4edc965e1a9835a79d6aa4c6d0b",
    "createdAt": "2016-09-08T00:39:45Z",
    "diffHunk": "@@ -190,6 +193,36 @@ class UISuite extends SparkFunSuite {\n     }\n   }\n \n+  test(\"verify proxy rewrittenURI\") {",
    "line": 18
  }],
  "prId": 13950
}]