[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Was this a incorrect test before?\n",
    "commit": "729600f83072422824689fb22e5148ccccd211cf",
    "createdAt": "2015-08-02T02:01:13Z",
    "diffHunk": "@@ -221,23 +221,26 @@ class ContextCleanerSuite extends ContextCleanerSuiteBase {\n     var rddId = rdd.id\n \n     // Confirm the checkpoint directory exists\n-    assert(RDDCheckpointData.rddCheckpointDataPath(sc, rddId).isDefined)\n-    val path = RDDCheckpointData.rddCheckpointDataPath(sc, rddId).get\n+    assert(ReliableRDDCheckpointData.checkpointPath(sc, rddId).isDefined)\n+    val path = ReliableRDDCheckpointData.checkpointPath(sc, rddId).get\n     val fs = path.getFileSystem(sc.hadoopConfiguration)\n     assert(fs.exists(path))\n \n     // the checkpoint is not cleaned by default (without the configuration set)\n-    var postGCTester = new CleanerTester(sc, Seq(rddId), Nil, Nil, Nil)\n+    var postGCTester = new CleanerTester(sc, Seq(rddId), Nil, Nil, Seq(rddId))\n     rdd = null // Make RDD out of scope, ok if collected earlier\n     runGC()\n     postGCTester.assertCleanup()\n-    assert(fs.exists(RDDCheckpointData.rddCheckpointDataPath(sc, rddId).get))\n+    assert(!fs.exists(ReliableRDDCheckpointData.checkpointPath(sc, rddId).get))",
    "line": 55
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "Aah, you reverse the test, first test with checkpoint cleaning enabled (as it was added to global conf), then test without checkpoint cleaning enabled. But why? Why was the global conf changed?\n",
    "commit": "729600f83072422824689fb22e5148ccccd211cf",
    "createdAt": "2015-08-02T02:03:11Z",
    "diffHunk": "@@ -221,23 +221,26 @@ class ContextCleanerSuite extends ContextCleanerSuiteBase {\n     var rddId = rdd.id\n \n     // Confirm the checkpoint directory exists\n-    assert(RDDCheckpointData.rddCheckpointDataPath(sc, rddId).isDefined)\n-    val path = RDDCheckpointData.rddCheckpointDataPath(sc, rddId).get\n+    assert(ReliableRDDCheckpointData.checkpointPath(sc, rddId).isDefined)\n+    val path = ReliableRDDCheckpointData.checkpointPath(sc, rddId).get\n     val fs = path.getFileSystem(sc.hadoopConfiguration)\n     assert(fs.exists(path))\n \n     // the checkpoint is not cleaned by default (without the configuration set)\n-    var postGCTester = new CleanerTester(sc, Seq(rddId), Nil, Nil, Nil)\n+    var postGCTester = new CleanerTester(sc, Seq(rddId), Nil, Nil, Seq(rddId))\n     rdd = null // Make RDD out of scope, ok if collected earlier\n     runGC()\n     postGCTester.assertCleanup()\n-    assert(fs.exists(RDDCheckpointData.rddCheckpointDataPath(sc, rddId).get))\n+    assert(!fs.exists(ReliableRDDCheckpointData.checkpointPath(sc, rddId).get))",
    "line": 55
  }],
  "prId": 7279
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Why was this global conf for the test changed?\n",
    "commit": "729600f83072422824689fb22e5148ccccd211cf",
    "createdAt": "2015-08-02T02:03:38Z",
    "diffHunk": "@@ -52,6 +51,7 @@ abstract class ContextCleanerSuiteBase(val shuffleManager: Class[_] = classOf[Ha\n     .setAppName(\"ContextCleanerSuite\")\n     .set(\"spark.cleaner.referenceTracking.blocking\", \"true\")\n     .set(\"spark.cleaner.referenceTracking.blocking.shuffle\", \"true\")\n+    .set(\"spark.cleaner.referenceTracking.cleanCheckpoints\", \"true\")",
    "line": 19
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "I dont like the fact that the this PR touches a configuration that may affect all the tests in an unrelated testsuite. May be it is fine that there is not regression, but then one has to go through all the tests in this TestSuite to be sure. \n",
    "commit": "729600f83072422824689fb22e5148ccccd211cf",
    "createdAt": "2015-08-02T02:05:11Z",
    "diffHunk": "@@ -52,6 +51,7 @@ abstract class ContextCleanerSuiteBase(val shuffleManager: Class[_] = classOf[Ha\n     .setAppName(\"ContextCleanerSuite\")\n     .set(\"spark.cleaner.referenceTracking.blocking\", \"true\")\n     .set(\"spark.cleaner.referenceTracking.blocking.shuffle\", \"true\")\n+    .set(\"spark.cleaner.referenceTracking.cleanCheckpoints\", \"true\")",
    "line": 19
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "This is a context cleaner suite, and its purpose is exactly to test cleaning up of various things including checkpoints. It's natural to turn this one on here since we use it in multiple tests in the suite. It's a minor point, but I really think we should just enable this here, but if you feel strongly about this I'll revert the changes.\n",
    "commit": "729600f83072422824689fb22e5148ccccd211cf",
    "createdAt": "2015-08-02T05:02:14Z",
    "diffHunk": "@@ -52,6 +51,7 @@ abstract class ContextCleanerSuiteBase(val shuffleManager: Class[_] = classOf[Ha\n     .setAppName(\"ContextCleanerSuite\")\n     .set(\"spark.cleaner.referenceTracking.blocking\", \"true\")\n     .set(\"spark.cleaner.referenceTracking.blocking.shuffle\", \"true\")\n+    .set(\"spark.cleaner.referenceTracking.cleanCheckpoints\", \"true\")",
    "line": 19
  }],
  "prId": 7279
}]