[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "Could we merge these into 1 test that tests all 4 combinations of the two configs?\n",
    "commit": "1921cf683b6460a1c31d1694eb5b26f46a90125f",
    "createdAt": "2014-10-22T07:12:31Z",
    "diffHunk": "@@ -242,6 +242,28 @@ abstract class ShuffleSuite extends FunSuite with Matchers with LocalSparkContex\n     assert(thrown.getClass === classOf[SparkException])\n     assert(thrown.getMessage.toLowerCase.contains(\"serializable\"))\n   }\n+\n+  test(\"shuffle with shuffle.spill.compress=true, shuffle.compress=false (SPARK-3426)\") {\n+    val conf = new SparkConf()\n+      .setAppName(\"test\")\n+      .setMaster(\"local\")\n+      .set(\"spark.shuffle.spill.compress\", \"true\")\n+      .set(\"spark.shuffle.compress\", \"false\")\n+      .set(\"spark.shuffle.memoryFraction\", \"0.001\")\n+    sc = new SparkContext(conf)\n+    sc.parallelize(0 until 100000).map(i => (i/4, i)).groupByKey().collect()\n+  }\n+\n+  test(\"shuffle with shuffle.spill.compress=false, shuffle.compress=true (SPARK-3426)\") {\n+    val conf = new SparkConf()\n+      .setAppName(\"test\")\n+      .setMaster(\"local\")\n+      .set(\"spark.shuffle.spill.compress\", \"false\")\n+      .set(\"spark.shuffle.compress\", \"true\")\n+      .set(\"spark.shuffle.memoryFraction\", \"0.001\")\n+    sc = new SparkContext(conf)\n+    sc.parallelize(0 until 100000).map(i => (i/4, i)).groupByKey().collect()\n+  }"
  }],
  "prId": 2890
}]