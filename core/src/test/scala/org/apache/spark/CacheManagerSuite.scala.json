[{
  "comments": [{
    "author": {
      "login": "mateiz"
    },
    "body": "Kind of weird, how can the result of toArray be equal to a List? I guess it compares Seqs? Maybe it's better to say toList here\n",
    "commit": "e77f45165079bbbecb0513c70c64d26c0b84df7d",
    "createdAt": "2014-07-25T01:56:51Z",
    "diffHunk": "@@ -52,22 +50,21 @@ class CacheManagerSuite extends FunSuite with BeforeAndAfter with EasyMockSugar\n   }\n \n   test(\"get uncached rdd\") {\n-    expecting {\n-      blockManager.get(RDDBlockId(0, 0)).andReturn(None)\n-      blockManager.put(RDDBlockId(0, 0), ArrayBuffer[Any](1, 2, 3, 4), StorageLevel.MEMORY_ONLY,\n-        true).andStubReturn(Seq[(BlockId, BlockStatus)]())\n-    }\n-\n-    whenExecuting(blockManager) {\n-      val context = new TaskContext(0, 0, 0)\n-      val value = cacheManager.getOrCompute(rdd, split, context, StorageLevel.MEMORY_ONLY)\n-      assert(value.toList === List(1, 2, 3, 4))\n-    }\n+    // Do not mock this test, because attempting to match Array[Any], which is not covariant,\n+    // in blockManager.put is a losing battle. You have been warned.\n+    blockManager = sc.env.blockManager\n+    cacheManager = sc.env.cacheManager\n+    val context = new TaskContext(0, 0, 0)\n+    val computeValue = cacheManager.getOrCompute(rdd, split, context, StorageLevel.MEMORY_ONLY)\n+    val getValue = blockManager.get(RDDBlockId(rdd.id, split.index))\n+    assert(computeValue.toList === List(1, 2, 3, 4))\n+    assert(getValue.isDefined, \"Block cached from getOrCompute is not found!\")\n+    assert(getValue.get.data.toArray === List(1, 2, 3, 4))"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "Weird...\n",
    "commit": "e77f45165079bbbecb0513c70c64d26c0b84df7d",
    "createdAt": "2014-07-25T17:22:14Z",
    "diffHunk": "@@ -52,22 +50,21 @@ class CacheManagerSuite extends FunSuite with BeforeAndAfter with EasyMockSugar\n   }\n \n   test(\"get uncached rdd\") {\n-    expecting {\n-      blockManager.get(RDDBlockId(0, 0)).andReturn(None)\n-      blockManager.put(RDDBlockId(0, 0), ArrayBuffer[Any](1, 2, 3, 4), StorageLevel.MEMORY_ONLY,\n-        true).andStubReturn(Seq[(BlockId, BlockStatus)]())\n-    }\n-\n-    whenExecuting(blockManager) {\n-      val context = new TaskContext(0, 0, 0)\n-      val value = cacheManager.getOrCompute(rdd, split, context, StorageLevel.MEMORY_ONLY)\n-      assert(value.toList === List(1, 2, 3, 4))\n-    }\n+    // Do not mock this test, because attempting to match Array[Any], which is not covariant,\n+    // in blockManager.put is a losing battle. You have been warned.\n+    blockManager = sc.env.blockManager\n+    cacheManager = sc.env.cacheManager\n+    val context = new TaskContext(0, 0, 0)\n+    val computeValue = cacheManager.getOrCompute(rdd, split, context, StorageLevel.MEMORY_ONLY)\n+    val getValue = blockManager.get(RDDBlockId(rdd.id, split.index))\n+    assert(computeValue.toList === List(1, 2, 3, 4))\n+    assert(getValue.isDefined, \"Block cached from getOrCompute is not found!\")\n+    assert(getValue.get.data.toArray === List(1, 2, 3, 4))"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "When I do `==` it fails. Apparently there's some scalatest magic going on under the hood\n",
    "commit": "e77f45165079bbbecb0513c70c64d26c0b84df7d",
    "createdAt": "2014-07-25T17:29:13Z",
    "diffHunk": "@@ -52,22 +50,21 @@ class CacheManagerSuite extends FunSuite with BeforeAndAfter with EasyMockSugar\n   }\n \n   test(\"get uncached rdd\") {\n-    expecting {\n-      blockManager.get(RDDBlockId(0, 0)).andReturn(None)\n-      blockManager.put(RDDBlockId(0, 0), ArrayBuffer[Any](1, 2, 3, 4), StorageLevel.MEMORY_ONLY,\n-        true).andStubReturn(Seq[(BlockId, BlockStatus)]())\n-    }\n-\n-    whenExecuting(blockManager) {\n-      val context = new TaskContext(0, 0, 0)\n-      val value = cacheManager.getOrCompute(rdd, split, context, StorageLevel.MEMORY_ONLY)\n-      assert(value.toList === List(1, 2, 3, 4))\n-    }\n+    // Do not mock this test, because attempting to match Array[Any], which is not covariant,\n+    // in blockManager.put is a losing battle. You have been warned.\n+    blockManager = sc.env.blockManager\n+    cacheManager = sc.env.cacheManager\n+    val context = new TaskContext(0, 0, 0)\n+    val computeValue = cacheManager.getOrCompute(rdd, split, context, StorageLevel.MEMORY_ONLY)\n+    val getValue = blockManager.get(RDDBlockId(rdd.id, split.index))\n+    assert(computeValue.toList === List(1, 2, 3, 4))\n+    assert(getValue.isDefined, \"Block cached from getOrCompute is not found!\")\n+    assert(getValue.get.data.toArray === List(1, 2, 3, 4))"
  }],
  "prId": 1165
}]