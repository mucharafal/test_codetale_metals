[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "(Was this intentional?)\n",
    "commit": "e4d8452f540140b7ade22a472b5334dae88df559",
    "createdAt": "2016-07-29T22:14:39Z",
    "diffHunk": "@@ -61,29 +60,29 @@ class StatusTrackerSuite extends SparkFunSuite with Matchers with LocalSparkCont\n     sc = new SparkContext(\"local\", \"test\", new SparkConf(false))\n     // Passing `null` should return jobs that were not run in a job group:\n     val defaultJobGroupFuture = sc.parallelize(1 to 1000).countAsync()\n-    val defaultJobGroupJobId = eventually(timeout(10 seconds)) {\n+    val defaultJobGroupJobId = eventually(timeout(10.seconds)) {\n       defaultJobGroupFuture.jobIds.head\n     }\n-    eventually(timeout(10 seconds)) {\n+    eventually(timeout(10.seconds)) {\n       sc.statusTracker.getJobIdsForGroup(null).toSet should be (Set(defaultJobGroupJobId))\n     }\n     // Test jobs submitted in job groups:\n     sc.setJobGroup(\"my-job-group\", \"description\")\n     sc.statusTracker.getJobIdsForGroup(\"my-job-group\") should be (Seq.empty)\n     val firstJobFuture = sc.parallelize(1 to 1000).countAsync()\n-    val firstJobId = eventually(timeout(10 seconds)) {\n+    val firstJobId = eventually(timeout(10.seconds)) {\n       firstJobFuture.jobIds.head\n     }\n-    eventually(timeout(10 seconds)) {\n+    eventually(timeout(10.seconds)) {\n       sc.statusTracker.getJobIdsForGroup(\"my-job-group\") should be (Seq(firstJobId))\n     }\n-    val secondJobFuture = sc.parallelize(1 to 1000).countAsync()\n-    val secondJobId = eventually(timeout(10 seconds)) {\n-      secondJobFuture.jobIds.head\n+    val.secondJobFuture = sc.parallelize(1 to 1000).countAsync()\n+    val.secondJobId = eventually(timeout(10.seconds)) {\n+     .secondJobFuture.jobIds.head\n     }\n-    eventually(timeout(10 seconds)) {\n+    eventually(timeout(10.seconds)) {\n       sc.statusTracker.getJobIdsForGroup(\"my-job-group\").toSet should be (\n-        Set(firstJobId, secondJobId))\n+        Set(firstJobId,.secondJobId))"
  }, {
    "author": {
      "login": "holdenk"
    },
    "body": "oops - sorry grepping local build for errors skipped some - will fix shortly\n",
    "commit": "e4d8452f540140b7ade22a472b5334dae88df559",
    "createdAt": "2016-07-29T22:18:07Z",
    "diffHunk": "@@ -61,29 +60,29 @@ class StatusTrackerSuite extends SparkFunSuite with Matchers with LocalSparkCont\n     sc = new SparkContext(\"local\", \"test\", new SparkConf(false))\n     // Passing `null` should return jobs that were not run in a job group:\n     val defaultJobGroupFuture = sc.parallelize(1 to 1000).countAsync()\n-    val defaultJobGroupJobId = eventually(timeout(10 seconds)) {\n+    val defaultJobGroupJobId = eventually(timeout(10.seconds)) {\n       defaultJobGroupFuture.jobIds.head\n     }\n-    eventually(timeout(10 seconds)) {\n+    eventually(timeout(10.seconds)) {\n       sc.statusTracker.getJobIdsForGroup(null).toSet should be (Set(defaultJobGroupJobId))\n     }\n     // Test jobs submitted in job groups:\n     sc.setJobGroup(\"my-job-group\", \"description\")\n     sc.statusTracker.getJobIdsForGroup(\"my-job-group\") should be (Seq.empty)\n     val firstJobFuture = sc.parallelize(1 to 1000).countAsync()\n-    val firstJobId = eventually(timeout(10 seconds)) {\n+    val firstJobId = eventually(timeout(10.seconds)) {\n       firstJobFuture.jobIds.head\n     }\n-    eventually(timeout(10 seconds)) {\n+    eventually(timeout(10.seconds)) {\n       sc.statusTracker.getJobIdsForGroup(\"my-job-group\") should be (Seq(firstJobId))\n     }\n-    val secondJobFuture = sc.parallelize(1 to 1000).countAsync()\n-    val secondJobId = eventually(timeout(10 seconds)) {\n-      secondJobFuture.jobIds.head\n+    val.secondJobFuture = sc.parallelize(1 to 1000).countAsync()\n+    val.secondJobId = eventually(timeout(10.seconds)) {\n+     .secondJobFuture.jobIds.head\n     }\n-    eventually(timeout(10 seconds)) {\n+    eventually(timeout(10.seconds)) {\n       sc.statusTracker.getJobIdsForGroup(\"my-job-group\").toSet should be (\n-        Set(firstJobId, secondJobId))\n+        Set(firstJobId,.secondJobId))"
  }],
  "prId": 14407
}]