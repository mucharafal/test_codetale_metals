[{
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "remove extra line",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-15T13:58:56Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.executor\n+\n+import java.io.File\n+import java.nio.charset.StandardCharsets\n+import java.nio.file.{Files => JavaFiles}\n+import java.nio.file.attribute.PosixFilePermission._\n+import java.util.EnumSet\n+\n+import com.google.common.io.Files\n+\n+import org.apache.spark._\n+import org.apache.spark.internal.config._\n+\n+class ResourceDiscovererSuite extends SparkFunSuite\n+  with LocalSparkContext {\n+\n+  test(\"Resource discoverer no gpus\") {\n+    val sparkconf = new SparkConf\n+    val resources = ResourceDiscoverer.findResources(sparkconf, false)\n+    assert(resources.get(\"gpu\").isEmpty,\n+      \"Should have a gpus entry that is empty\")\n+  }\n+\n+  test(\"Resource discoverer multiple gpus\") {\n+    val sparkconf = new SparkConf\n+\n+    val file1 = File.createTempFile(\"test\", \"resourceDiscoverScript1\")\n+    try {\n+      Files.write(\"echo 0,1\", file1, StandardCharsets.UTF_8)\n+      JavaFiles.setPosixFilePermissions(file1.toPath(),\n+        EnumSet.of(OWNER_READ, OWNER_EXECUTE, OWNER_WRITE))\n+      sparkconf.set(EXECUTOR_GPU_DISCOVERY_SCRIPT, file1.getPath())\n+      val resources = ResourceDiscoverer.findResources(sparkconf, false)\n+      val gpuValue = resources.get(ResourceInformation.GPU)\n+      assert(gpuValue.nonEmpty, \"Should have a gpu entry\")\n+      assert(gpuValue.get.getCount() == 2, \"Should have 2\")\n+      assert(gpuValue.get.getName() == ResourceInformation.GPU, \"name should be gpu\")\n+      assert(gpuValue.get.getUnits() == \"\", \"units should be empty\")\n+      assert(gpuValue.get.getAddresses().size == 2, \"Should have 2 indexes\")\n+      assert(gpuValue.get.getAddresses().deep == Array(\"0\", \"1\").deep, \"should have 0,1 entries\")\n+    } finally {\n+      JavaFiles.deleteIfExists(file1.toPath())\n+    }\n+  }\n+\n+  test(\"Resource discoverer multiple gpus driver\") {\n+    val sparkconf = new SparkConf\n+\n+    val file1 = File.createTempFile(\"test\", \"resourceDiscoverScript1\")\n+    try {\n+      Files.write(\"echo 0,1\", file1, StandardCharsets.UTF_8)\n+      JavaFiles.setPosixFilePermissions(file1.toPath(),\n+        EnumSet.of(OWNER_READ, OWNER_EXECUTE, OWNER_WRITE))\n+      sparkconf.set(DRIVER_GPU_DISCOVERY_SCRIPT, file1.getPath())\n+      sparkconf.set(EXECUTOR_GPU_DISCOVERY_SCRIPT, \"boguspath\")\n+      // make sure it reads from correct config, here it should use driver\n+      val resources = ResourceDiscoverer.findResources(sparkconf, true)\n+      val gpuValue = resources.get(ResourceInformation.GPU)\n+      assert(gpuValue.nonEmpty, \"Should have a gpu entry\")\n+      assert(gpuValue.get.getCount() == 2, \"Should have 2\")\n+      assert(gpuValue.get.getName() == ResourceInformation.GPU, \"name should be gpu\")\n+      assert(gpuValue.get.getUnits() == \"\", \"units should be empty\")\n+      assert(gpuValue.get.getAddresses().size == 2, \"Should have 2 indexes\")\n+      assert(gpuValue.get.getAddresses().deep == Array(\"0\", \"1\").deep, \"should have 0,1 entries\")\n+    } finally {\n+      JavaFiles.deleteIfExists(file1.toPath())\n+    }\n+  }\n+\n+"
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "This might not work on Windows, but whatever. At worst we might have to skip it on Windows",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-15T14:06:04Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.executor\n+\n+import java.io.File\n+import java.nio.charset.StandardCharsets\n+import java.nio.file.{Files => JavaFiles}\n+import java.nio.file.attribute.PosixFilePermission._\n+import java.util.EnumSet\n+\n+import com.google.common.io.Files\n+\n+import org.apache.spark._\n+import org.apache.spark.internal.config._\n+\n+class ResourceDiscovererSuite extends SparkFunSuite\n+  with LocalSparkContext {\n+\n+  test(\"Resource discoverer no gpus\") {\n+    val sparkconf = new SparkConf\n+    val resources = ResourceDiscoverer.findResources(sparkconf, false)\n+    assert(resources.get(\"gpu\").isEmpty,\n+      \"Should have a gpus entry that is empty\")\n+  }\n+\n+  test(\"Resource discoverer multiple gpus\") {\n+    val sparkconf = new SparkConf\n+\n+    val file1 = File.createTempFile(\"test\", \"resourceDiscoverScript1\")\n+    try {\n+      Files.write(\"echo 0,1\", file1, StandardCharsets.UTF_8)\n+      JavaFiles.setPosixFilePermissions(file1.toPath(),"
  }, {
    "author": {
      "login": "tgravescs"
    },
    "body": "Is the preferred way to just use the Utils.isWindows and skip the test here?",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-16T14:50:47Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.executor\n+\n+import java.io.File\n+import java.nio.charset.StandardCharsets\n+import java.nio.file.{Files => JavaFiles}\n+import java.nio.file.attribute.PosixFilePermission._\n+import java.util.EnumSet\n+\n+import com.google.common.io.Files\n+\n+import org.apache.spark._\n+import org.apache.spark.internal.config._\n+\n+class ResourceDiscovererSuite extends SparkFunSuite\n+  with LocalSparkContext {\n+\n+  test(\"Resource discoverer no gpus\") {\n+    val sparkconf = new SparkConf\n+    val resources = ResourceDiscoverer.findResources(sparkconf, false)\n+    assert(resources.get(\"gpu\").isEmpty,\n+      \"Should have a gpus entry that is empty\")\n+  }\n+\n+  test(\"Resource discoverer multiple gpus\") {\n+    val sparkconf = new SparkConf\n+\n+    val file1 = File.createTempFile(\"test\", \"resourceDiscoverScript1\")\n+    try {\n+      Files.write(\"echo 0,1\", file1, StandardCharsets.UTF_8)\n+      JavaFiles.setPosixFilePermissions(file1.toPath(),"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "I think you can do that, with assume or whatever the other tests do. I'm pretty sure this won't work, for the stronger reason that the bash script you will create here won't run on Windows anyway (?)",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-16T15:07:15Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.executor\n+\n+import java.io.File\n+import java.nio.charset.StandardCharsets\n+import java.nio.file.{Files => JavaFiles}\n+import java.nio.file.attribute.PosixFilePermission._\n+import java.util.EnumSet\n+\n+import com.google.common.io.Files\n+\n+import org.apache.spark._\n+import org.apache.spark.internal.config._\n+\n+class ResourceDiscovererSuite extends SparkFunSuite\n+  with LocalSparkContext {\n+\n+  test(\"Resource discoverer no gpus\") {\n+    val sparkconf = new SparkConf\n+    val resources = ResourceDiscoverer.findResources(sparkconf, false)\n+    assert(resources.get(\"gpu\").isEmpty,\n+      \"Should have a gpus entry that is empty\")\n+  }\n+\n+  test(\"Resource discoverer multiple gpus\") {\n+    val sparkconf = new SparkConf\n+\n+    val file1 = File.createTempFile(\"test\", \"resourceDiscoverScript1\")\n+    try {\n+      Files.write(\"echo 0,1\", file1, StandardCharsets.UTF_8)\n+      JavaFiles.setPosixFilePermissions(file1.toPath(),"
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Utils.withTempFile (forget its name)?",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-15T14:06:27Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.executor\n+\n+import java.io.File\n+import java.nio.charset.StandardCharsets\n+import java.nio.file.{Files => JavaFiles}\n+import java.nio.file.attribute.PosixFilePermission._\n+import java.util.EnumSet\n+\n+import com.google.common.io.Files\n+\n+import org.apache.spark._\n+import org.apache.spark.internal.config._\n+\n+class ResourceDiscovererSuite extends SparkFunSuite\n+  with LocalSparkContext {\n+\n+  test(\"Resource discoverer no gpus\") {\n+    val sparkconf = new SparkConf\n+    val resources = ResourceDiscoverer.findResources(sparkconf, false)\n+    assert(resources.get(\"gpu\").isEmpty,\n+      \"Should have a gpus entry that is empty\")\n+  }\n+\n+  test(\"Resource discoverer multiple gpus\") {\n+    val sparkconf = new SparkConf\n+\n+    val file1 = File.createTempFile(\"test\", \"resourceDiscoverScript1\")\n+    try {\n+      Files.write(\"echo 0,1\", file1, StandardCharsets.UTF_8)\n+      JavaFiles.setPosixFilePermissions(file1.toPath(),\n+        EnumSet.of(OWNER_READ, OWNER_EXECUTE, OWNER_WRITE))\n+      sparkconf.set(EXECUTOR_GPU_DISCOVERY_SCRIPT, file1.getPath())\n+      val resources = ResourceDiscoverer.findResources(sparkconf, false)\n+      val gpuValue = resources.get(ResourceInformation.GPU)\n+      assert(gpuValue.nonEmpty, \"Should have a gpu entry\")\n+      assert(gpuValue.get.getCount() == 2, \"Should have 2\")\n+      assert(gpuValue.get.getName() == ResourceInformation.GPU, \"name should be gpu\")\n+      assert(gpuValue.get.getUnits() == \"\", \"units should be empty\")\n+      assert(gpuValue.get.getAddresses().size == 2, \"Should have 2 indexes\")\n+      assert(gpuValue.get.getAddresses().deep == Array(\"0\", \"1\").deep, \"should have 0,1 entries\")\n+    } finally {\n+      JavaFiles.deleteIfExists(file1.toPath())\n+    }\n+  }\n+\n+  test(\"Resource discoverer multiple gpus driver\") {\n+    val sparkconf = new SparkConf\n+\n+    val file1 = File.createTempFile(\"test\", \"resourceDiscoverScript1\")\n+    try {\n+      Files.write(\"echo 0,1\", file1, StandardCharsets.UTF_8)\n+      JavaFiles.setPosixFilePermissions(file1.toPath(),\n+        EnumSet.of(OWNER_READ, OWNER_EXECUTE, OWNER_WRITE))\n+      sparkconf.set(DRIVER_GPU_DISCOVERY_SCRIPT, file1.getPath())\n+      sparkconf.set(EXECUTOR_GPU_DISCOVERY_SCRIPT, \"boguspath\")\n+      // make sure it reads from correct config, here it should use driver\n+      val resources = ResourceDiscoverer.findResources(sparkconf, true)\n+      val gpuValue = resources.get(ResourceInformation.GPU)\n+      assert(gpuValue.nonEmpty, \"Should have a gpu entry\")\n+      assert(gpuValue.get.getCount() == 2, \"Should have 2\")\n+      assert(gpuValue.get.getName() == ResourceInformation.GPU, \"name should be gpu\")\n+      assert(gpuValue.get.getUnits() == \"\", \"units should be empty\")\n+      assert(gpuValue.get.getAddresses().size == 2, \"Should have 2 indexes\")\n+      assert(gpuValue.get.getAddresses().deep == Array(\"0\", \"1\").deep, \"should have 0,1 entries\")\n+    } finally {\n+      JavaFiles.deleteIfExists(file1.toPath())\n+    }\n+  }\n+\n+\n+  test(\"Resource discoverer script returns invalid number\") {\n+    val sparkconf = new SparkConf\n+\n+    val file1 = File.createTempFile(\"test\", \"resourceDiscoverScript1\")\n+    try {\n+      Files.write(\"echo foo1\", file1, StandardCharsets.UTF_8)\n+      JavaFiles.setPosixFilePermissions(file1.toPath(),\n+        EnumSet.of(OWNER_READ, OWNER_EXECUTE, OWNER_WRITE))\n+      sparkconf.set(EXECUTOR_GPU_DISCOVERY_SCRIPT, file1.getPath())\n+\n+      val error = intercept[SparkException] {\n+        ResourceDiscoverer.findResources(sparkconf, false)\n+      }.getMessage()\n+\n+      assert(error.contains(\"The gpu discover script threw exception\"))\n+    } finally {\n+      JavaFiles.deleteIfExists(file1.toPath())\n+    }\n+  }\n+\n+  test(\"Resource discoverer script doesn't exist\") {\n+    val sparkconf = new SparkConf\n+\n+    val file1 = new File(\"/tmp/bogus\")"
  }, {
    "author": {
      "login": "tgravescs"
    },
    "body": "there is a withTempDir, but don't see a withTempfile. In this particular case the file doesn't exist on purpose as it tests a non-existent file but could use in the above function.",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-16T14:54:34Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.executor\n+\n+import java.io.File\n+import java.nio.charset.StandardCharsets\n+import java.nio.file.{Files => JavaFiles}\n+import java.nio.file.attribute.PosixFilePermission._\n+import java.util.EnumSet\n+\n+import com.google.common.io.Files\n+\n+import org.apache.spark._\n+import org.apache.spark.internal.config._\n+\n+class ResourceDiscovererSuite extends SparkFunSuite\n+  with LocalSparkContext {\n+\n+  test(\"Resource discoverer no gpus\") {\n+    val sparkconf = new SparkConf\n+    val resources = ResourceDiscoverer.findResources(sparkconf, false)\n+    assert(resources.get(\"gpu\").isEmpty,\n+      \"Should have a gpus entry that is empty\")\n+  }\n+\n+  test(\"Resource discoverer multiple gpus\") {\n+    val sparkconf = new SparkConf\n+\n+    val file1 = File.createTempFile(\"test\", \"resourceDiscoverScript1\")\n+    try {\n+      Files.write(\"echo 0,1\", file1, StandardCharsets.UTF_8)\n+      JavaFiles.setPosixFilePermissions(file1.toPath(),\n+        EnumSet.of(OWNER_READ, OWNER_EXECUTE, OWNER_WRITE))\n+      sparkconf.set(EXECUTOR_GPU_DISCOVERY_SCRIPT, file1.getPath())\n+      val resources = ResourceDiscoverer.findResources(sparkconf, false)\n+      val gpuValue = resources.get(ResourceInformation.GPU)\n+      assert(gpuValue.nonEmpty, \"Should have a gpu entry\")\n+      assert(gpuValue.get.getCount() == 2, \"Should have 2\")\n+      assert(gpuValue.get.getName() == ResourceInformation.GPU, \"name should be gpu\")\n+      assert(gpuValue.get.getUnits() == \"\", \"units should be empty\")\n+      assert(gpuValue.get.getAddresses().size == 2, \"Should have 2 indexes\")\n+      assert(gpuValue.get.getAddresses().deep == Array(\"0\", \"1\").deep, \"should have 0,1 entries\")\n+    } finally {\n+      JavaFiles.deleteIfExists(file1.toPath())\n+    }\n+  }\n+\n+  test(\"Resource discoverer multiple gpus driver\") {\n+    val sparkconf = new SparkConf\n+\n+    val file1 = File.createTempFile(\"test\", \"resourceDiscoverScript1\")\n+    try {\n+      Files.write(\"echo 0,1\", file1, StandardCharsets.UTF_8)\n+      JavaFiles.setPosixFilePermissions(file1.toPath(),\n+        EnumSet.of(OWNER_READ, OWNER_EXECUTE, OWNER_WRITE))\n+      sparkconf.set(DRIVER_GPU_DISCOVERY_SCRIPT, file1.getPath())\n+      sparkconf.set(EXECUTOR_GPU_DISCOVERY_SCRIPT, \"boguspath\")\n+      // make sure it reads from correct config, here it should use driver\n+      val resources = ResourceDiscoverer.findResources(sparkconf, true)\n+      val gpuValue = resources.get(ResourceInformation.GPU)\n+      assert(gpuValue.nonEmpty, \"Should have a gpu entry\")\n+      assert(gpuValue.get.getCount() == 2, \"Should have 2\")\n+      assert(gpuValue.get.getName() == ResourceInformation.GPU, \"name should be gpu\")\n+      assert(gpuValue.get.getUnits() == \"\", \"units should be empty\")\n+      assert(gpuValue.get.getAddresses().size == 2, \"Should have 2 indexes\")\n+      assert(gpuValue.get.getAddresses().deep == Array(\"0\", \"1\").deep, \"should have 0,1 entries\")\n+    } finally {\n+      JavaFiles.deleteIfExists(file1.toPath())\n+    }\n+  }\n+\n+\n+  test(\"Resource discoverer script returns invalid number\") {\n+    val sparkconf = new SparkConf\n+\n+    val file1 = File.createTempFile(\"test\", \"resourceDiscoverScript1\")\n+    try {\n+      Files.write(\"echo foo1\", file1, StandardCharsets.UTF_8)\n+      JavaFiles.setPosixFilePermissions(file1.toPath(),\n+        EnumSet.of(OWNER_READ, OWNER_EXECUTE, OWNER_WRITE))\n+      sparkconf.set(EXECUTOR_GPU_DISCOVERY_SCRIPT, file1.getPath())\n+\n+      val error = intercept[SparkException] {\n+        ResourceDiscoverer.findResources(sparkconf, false)\n+      }.getMessage()\n+\n+      assert(error.contains(\"The gpu discover script threw exception\"))\n+    } finally {\n+      JavaFiles.deleteIfExists(file1.toPath())\n+    }\n+  }\n+\n+  test(\"Resource discoverer script doesn't exist\") {\n+    val sparkconf = new SparkConf\n+\n+    val file1 = new File(\"/tmp/bogus\")"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "OK, that's fine, yeah. For other cases where you need a temp file I'd use Utils.withTempDir and make a file inside that dir",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-16T15:11:14Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.executor\n+\n+import java.io.File\n+import java.nio.charset.StandardCharsets\n+import java.nio.file.{Files => JavaFiles}\n+import java.nio.file.attribute.PosixFilePermission._\n+import java.util.EnumSet\n+\n+import com.google.common.io.Files\n+\n+import org.apache.spark._\n+import org.apache.spark.internal.config._\n+\n+class ResourceDiscovererSuite extends SparkFunSuite\n+  with LocalSparkContext {\n+\n+  test(\"Resource discoverer no gpus\") {\n+    val sparkconf = new SparkConf\n+    val resources = ResourceDiscoverer.findResources(sparkconf, false)\n+    assert(resources.get(\"gpu\").isEmpty,\n+      \"Should have a gpus entry that is empty\")\n+  }\n+\n+  test(\"Resource discoverer multiple gpus\") {\n+    val sparkconf = new SparkConf\n+\n+    val file1 = File.createTempFile(\"test\", \"resourceDiscoverScript1\")\n+    try {\n+      Files.write(\"echo 0,1\", file1, StandardCharsets.UTF_8)\n+      JavaFiles.setPosixFilePermissions(file1.toPath(),\n+        EnumSet.of(OWNER_READ, OWNER_EXECUTE, OWNER_WRITE))\n+      sparkconf.set(EXECUTOR_GPU_DISCOVERY_SCRIPT, file1.getPath())\n+      val resources = ResourceDiscoverer.findResources(sparkconf, false)\n+      val gpuValue = resources.get(ResourceInformation.GPU)\n+      assert(gpuValue.nonEmpty, \"Should have a gpu entry\")\n+      assert(gpuValue.get.getCount() == 2, \"Should have 2\")\n+      assert(gpuValue.get.getName() == ResourceInformation.GPU, \"name should be gpu\")\n+      assert(gpuValue.get.getUnits() == \"\", \"units should be empty\")\n+      assert(gpuValue.get.getAddresses().size == 2, \"Should have 2 indexes\")\n+      assert(gpuValue.get.getAddresses().deep == Array(\"0\", \"1\").deep, \"should have 0,1 entries\")\n+    } finally {\n+      JavaFiles.deleteIfExists(file1.toPath())\n+    }\n+  }\n+\n+  test(\"Resource discoverer multiple gpus driver\") {\n+    val sparkconf = new SparkConf\n+\n+    val file1 = File.createTempFile(\"test\", \"resourceDiscoverScript1\")\n+    try {\n+      Files.write(\"echo 0,1\", file1, StandardCharsets.UTF_8)\n+      JavaFiles.setPosixFilePermissions(file1.toPath(),\n+        EnumSet.of(OWNER_READ, OWNER_EXECUTE, OWNER_WRITE))\n+      sparkconf.set(DRIVER_GPU_DISCOVERY_SCRIPT, file1.getPath())\n+      sparkconf.set(EXECUTOR_GPU_DISCOVERY_SCRIPT, \"boguspath\")\n+      // make sure it reads from correct config, here it should use driver\n+      val resources = ResourceDiscoverer.findResources(sparkconf, true)\n+      val gpuValue = resources.get(ResourceInformation.GPU)\n+      assert(gpuValue.nonEmpty, \"Should have a gpu entry\")\n+      assert(gpuValue.get.getCount() == 2, \"Should have 2\")\n+      assert(gpuValue.get.getName() == ResourceInformation.GPU, \"name should be gpu\")\n+      assert(gpuValue.get.getUnits() == \"\", \"units should be empty\")\n+      assert(gpuValue.get.getAddresses().size == 2, \"Should have 2 indexes\")\n+      assert(gpuValue.get.getAddresses().deep == Array(\"0\", \"1\").deep, \"should have 0,1 entries\")\n+    } finally {\n+      JavaFiles.deleteIfExists(file1.toPath())\n+    }\n+  }\n+\n+\n+  test(\"Resource discoverer script returns invalid number\") {\n+    val sparkconf = new SparkConf\n+\n+    val file1 = File.createTempFile(\"test\", \"resourceDiscoverScript1\")\n+    try {\n+      Files.write(\"echo foo1\", file1, StandardCharsets.UTF_8)\n+      JavaFiles.setPosixFilePermissions(file1.toPath(),\n+        EnumSet.of(OWNER_READ, OWNER_EXECUTE, OWNER_WRITE))\n+      sparkconf.set(EXECUTOR_GPU_DISCOVERY_SCRIPT, file1.getPath())\n+\n+      val error = intercept[SparkException] {\n+        ResourceDiscoverer.findResources(sparkconf, false)\n+      }.getMessage()\n+\n+      assert(error.contains(\"The gpu discover script threw exception\"))\n+    } finally {\n+      JavaFiles.deleteIfExists(file1.toPath())\n+    }\n+  }\n+\n+  test(\"Resource discoverer script doesn't exist\") {\n+    val sparkconf = new SparkConf\n+\n+    val file1 = new File(\"/tmp/bogus\")"
  }],
  "prId": 24374
}]