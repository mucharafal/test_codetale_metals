[{
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "not needed here",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-15T14:02:11Z",
    "diffHunk": "@@ -184,3 +278,49 @@ class CoarseGrainedSchedulerBackendSuite extends SparkFunSuite with LocalSparkCo\n     )\n   }\n }\n+\n+/** Simple cluster manager that wires up our mock backend for the gpu resource tests. */\n+private class CSMockExternalClusterManager extends ExternalClusterManager {\n+\n+  var ts: TaskSchedulerImpl = _\n+\n+  val MOCK_REGEX = \"\"\"coarseclustermanager\\[(.*)\\]\"\"\".r\n+  def canCreate(masterURL: String): Boolean = MOCK_REGEX.findFirstIn(masterURL).isDefined\n+\n+  def createTaskScheduler(\n+      sc: SparkContext,\n+      masterURL: String): TaskScheduler = {\n+    ts = mock[TaskSchedulerImpl]\n+    when(ts.sc).thenReturn(sc)\n+    when(ts.applicationId()).thenReturn(\"appid1\")\n+    when(ts.applicationAttemptId()).thenReturn(Some(\"attempt1\"))\n+    when(ts.schedulingMode).thenReturn(SchedulingMode.FIFO)\n+    when(ts.nodeBlacklist()).thenReturn(Set.empty[String])\n+    val frameSize = RpcUtils.maxMessageSizeBytes(sc.conf)"
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "not needed",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-15T14:02:19Z",
    "diffHunk": "@@ -184,3 +278,49 @@ class CoarseGrainedSchedulerBackendSuite extends SparkFunSuite with LocalSparkCo\n     )\n   }\n }\n+\n+/** Simple cluster manager that wires up our mock backend for the gpu resource tests. */\n+private class CSMockExternalClusterManager extends ExternalClusterManager {\n+\n+  var ts: TaskSchedulerImpl = _\n+\n+  val MOCK_REGEX = \"\"\"coarseclustermanager\\[(.*)\\]\"\"\".r\n+  def canCreate(masterURL: String): Boolean = MOCK_REGEX.findFirstIn(masterURL).isDefined\n+\n+  def createTaskScheduler(\n+      sc: SparkContext,\n+      masterURL: String): TaskScheduler = {\n+    ts = mock[TaskSchedulerImpl]\n+    when(ts.sc).thenReturn(sc)\n+    when(ts.applicationId()).thenReturn(\"appid1\")\n+    when(ts.applicationAttemptId()).thenReturn(Some(\"attempt1\"))\n+    when(ts.schedulingMode).thenReturn(SchedulingMode.FIFO)\n+    when(ts.nodeBlacklist()).thenReturn(Set.empty[String])\n+    val frameSize = RpcUtils.maxMessageSizeBytes(sc.conf)\n+    val buffer = java.nio.ByteBuffer.allocate(frameSize/2)"
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Use a continuation indent",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-15T14:06:50Z",
    "diffHunk": "@@ -164,16 +170,104 @@ class CoarseGrainedSchedulerBackendSuite extends SparkFunSuite with LocalSparkCo\n     sc.addSparkListener(listener)\n \n     backend.driverEndpoint.askSync[Boolean](\n-      RegisterExecutor(\"1\", mockEndpointRef, mockAddress.host, 1, logUrls, attributes))\n+      RegisterExecutor(\"1\", mockEndpointRef, mockAddress.host, 1, logUrls, attributes, Map.empty))\n     backend.driverEndpoint.askSync[Boolean](\n-      RegisterExecutor(\"2\", mockEndpointRef, mockAddress.host, 1, logUrls, attributes))\n+      RegisterExecutor(\"2\", mockEndpointRef, mockAddress.host, 1, logUrls, attributes, Map.empty))\n     backend.driverEndpoint.askSync[Boolean](\n-      RegisterExecutor(\"3\", mockEndpointRef, mockAddress.host, 1, logUrls, attributes))\n+      RegisterExecutor(\"3\", mockEndpointRef, mockAddress.host, 1, logUrls, attributes, Map.empty))\n \n     sc.listenerBus.waitUntilEmpty(executorUpTimeout.toMillis)\n     assert(executorAddedCount === 3)\n   }\n \n+  test(\"extra gpu resources from executor\") {\n+    val conf = new SparkConf()\n+      .set(GPUS_PER_TASK.key, \"3\")\n+      .set(EXECUTOR_GPUS.key, \"3\")\n+      .set(SCHEDULER_REVIVE_INTERVAL, 60000L) // don't let it auto revive during test\n+      .setMaster(\"coarseclustermanager[\" +\n+      \"org.apache.spark.scheduler.TestCoarseGrainedSchedulerBackend]\")"
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Does this one take value like \"1m\"?",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-15T14:06:58Z",
    "diffHunk": "@@ -164,16 +170,104 @@ class CoarseGrainedSchedulerBackendSuite extends SparkFunSuite with LocalSparkCo\n     sc.addSparkListener(listener)\n \n     backend.driverEndpoint.askSync[Boolean](\n-      RegisterExecutor(\"1\", mockEndpointRef, mockAddress.host, 1, logUrls, attributes))\n+      RegisterExecutor(\"1\", mockEndpointRef, mockAddress.host, 1, logUrls, attributes, Map.empty))\n     backend.driverEndpoint.askSync[Boolean](\n-      RegisterExecutor(\"2\", mockEndpointRef, mockAddress.host, 1, logUrls, attributes))\n+      RegisterExecutor(\"2\", mockEndpointRef, mockAddress.host, 1, logUrls, attributes, Map.empty))\n     backend.driverEndpoint.askSync[Boolean](\n-      RegisterExecutor(\"3\", mockEndpointRef, mockAddress.host, 1, logUrls, attributes))\n+      RegisterExecutor(\"3\", mockEndpointRef, mockAddress.host, 1, logUrls, attributes, Map.empty))\n \n     sc.listenerBus.waitUntilEmpty(executorUpTimeout.toMillis)\n     assert(executorAddedCount === 3)\n   }\n \n+  test(\"extra gpu resources from executor\") {\n+    val conf = new SparkConf()\n+      .set(GPUS_PER_TASK.key, \"3\")\n+      .set(EXECUTOR_GPUS.key, \"3\")\n+      .set(SCHEDULER_REVIVE_INTERVAL, 60000L) // don't let it auto revive during test"
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Just to be tidy, can the members here be private? or use override if they override superclass methods",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-15T14:07:42Z",
    "diffHunk": "@@ -184,3 +278,49 @@ class CoarseGrainedSchedulerBackendSuite extends SparkFunSuite with LocalSparkCo\n     )\n   }\n }\n+\n+/** Simple cluster manager that wires up our mock backend for the gpu resource tests. */\n+private class CSMockExternalClusterManager extends ExternalClusterManager {\n+\n+  var ts: TaskSchedulerImpl = _\n+\n+  val MOCK_REGEX = \"\"\"coarseclustermanager\\[(.*)\\]\"\"\".r"
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "It looks like the actual tests that were using this are now gone, we should either add the test back or remove this.  Preferably I think we add it back since I don't think anything else is testing the SchedulerBackend changes.",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-23T21:28:34Z",
    "diffHunk": "@@ -184,3 +191,47 @@ class CoarseGrainedSchedulerBackendSuite extends SparkFunSuite with LocalSparkCo\n     )\n   }\n }\n+\n+/** Simple cluster manager that wires up our mock backend for the gpu resource tests. */\n+private class CSMockExternalClusterManager extends ExternalClusterManager {",
    "line": 119
  }, {
    "author": {
      "login": "jiangxb1987"
    },
    "body": "Will add back test case later",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-23T23:43:12Z",
    "diffHunk": "@@ -184,3 +191,47 @@ class CoarseGrainedSchedulerBackendSuite extends SparkFunSuite with LocalSparkCo\n     )\n   }\n }\n+\n+/** Simple cluster manager that wires up our mock backend for the gpu resource tests. */\n+private class CSMockExternalClusterManager extends ExternalClusterManager {",
    "line": 119
  }, {
    "author": {
      "login": "jiangxb1987"
    },
    "body": "updated",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-30T00:44:38Z",
    "diffHunk": "@@ -184,3 +191,47 @@ class CoarseGrainedSchedulerBackendSuite extends SparkFunSuite with LocalSparkCo\n     )\n   }\n }\n+\n+/** Simple cluster manager that wires up our mock backend for the gpu resource tests. */\n+private class CSMockExternalClusterManager extends ExternalClusterManager {",
    "line": 119
  }],
  "prId": 24374
}]