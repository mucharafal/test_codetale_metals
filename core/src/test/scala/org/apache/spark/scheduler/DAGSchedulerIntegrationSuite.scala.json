[{
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "nit: indentation does not match style.",
    "commit": "5cb86d57a7e3fcba573f319b470f0d84d26c10b1",
    "createdAt": "2019-05-01T18:27:26Z",
    "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import java.util.concurrent.{ConcurrentHashMap, Executors}\n+\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.concurrent.duration._\n+\n+import org.scalatest.concurrent.Eventually._\n+\n+import org.apache.spark._\n+import org.apache.spark.rdd.RDD\n+\n+class DAGSchedulerIntegrationSuite extends SparkFunSuite with LocalSparkContext {\n+ implicit val submissionPool =\n+   ExecutionContext.fromExecutor(Executors.newFixedThreadPool(3))\n+\n+  test(\"blocking of DAGEventQueue due to a heavy pause job\") {\n+    sc = new SparkContext(\"local\", \"DAGSchedulerIntegrationSuite\")\n+\n+    // form 3 rdds (2 quick and 1 with heavy dependency calculation)\n+    val simpleRDD1 = new DelegateRDD(sc, new PauseRDD(sc, 100))\n+    val heavyRDD = new DelegateRDD(sc, new PauseRDD(sc, 1000000))\n+    val simpleRDD2 = new DelegateRDD(sc, new PauseRDD(sc, 100))\n+\n+    // submit all concurrently\n+    val finishedRDDs = new ConcurrentHashMap[DelegateRDD, String]()\n+    List(simpleRDD1, heavyRDD, simpleRDD2).foreach( rdd => Future {\n+      rdd.collect\n+      finishedRDDs.put(rdd, rdd.toString)\n+    })\n+\n+    // wait for certain time and see if quick jobs can finish\n+    eventually(timeout(10.seconds)) {\n+      assert(finishedRDDs.size() == 2)\n+      assert(finishedRDDs.contains(simpleRDD1.toString) &&\n+      finishedRDDs.contains(simpleRDD2.toString))\n+    }\n+  }\n+}\n+\n+class DelegateRDD(\n+                 sc: SparkContext,\n+                 var dependency: PauseRDD\n+                 ) extends RDD[(Int, Int)](sc, List(new OneToOneDependency(dependency)))"
  }],
  "prId": 24438
}]