[{
  "comments": [{
    "author": {
      "login": "xuanyuanking"
    },
    "body": "```\r\nSo you don't have to launch a SparkContext for the test. Could you please check whether this is feasible?\r\n```\r\nThanks for Xingbo's guidance and sorry for misunderstand at first. That's feasible. But maybe this is the last thing not clear cause we still need a real BarrierCoordinator. Because a mock one will cause the `timer` NPE. Thanks @jiangxb1987 \r\nhttps://github.com/apache/spark/blob/2eaf0587883ac3c65e77d01ffbb39f64c6152f87/core/src/main/scala/org/apache/spark/BarrierCoordinator.scala#L152",
    "commit": "aea2fa0b7c3dbda1ff7b652fcb9e7232013840d7",
    "createdAt": "2018-10-13T10:13:11Z",
    "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.concurrent.duration._\n+import scala.language.postfixOps\n+\n+import org.mockito.ArgumentMatcher\n+import org.mockito.Matchers._\n+import org.mockito.Mockito._\n+import org.scalatest.concurrent.Eventually\n+\n+import org.apache.spark._\n+import org.apache.spark.rpc.{RpcAddress, RpcCallContext, RpcEnv}\n+\n+class ContextBarrierStateSuite extends SparkFunSuite with LocalSparkContext with Eventually {\n+\n+  private def mockRpcCallContext() = {\n+    val rpcAddress = mock(classOf[RpcAddress])\n+    val rpcCallContext = mock(classOf[RpcCallContext])\n+    when(rpcCallContext.senderAddress).thenReturn(rpcAddress)\n+    rpcCallContext\n+  }\n+\n+  test(\"normal test for single task\") {\n+    val barrierCoordinator = new BarrierCoordinator(",
    "line": 41
  }],
  "prId": 22165
}]