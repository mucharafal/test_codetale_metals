[{
  "comments": [{
    "author": {
      "login": "skonto"
    },
    "body": "Pls fix indentation for method parameters (4 spaces, first parameter in a new line). \n",
    "commit": "1824d63c04b63c8392708746bd22f4a8662b5e78",
    "createdAt": "2016-07-14T22:08:31Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import java.util.Collections\n+\n+import org.apache.mesos.Protos._\n+import org.apache.mesos.Protos.Value.Scalar\n+import org.apache.mesos.SchedulerDriver\n+import org.mockito.{ArgumentCaptor, Matchers}\n+import org.mockito.Mockito._\n+import scala.collection.JavaConverters._\n+\n+object Utils {\n+  def createOffer(offerId: String, slaveId: String, mem: Int, cpu: Int): Offer = {\n+    val builder = Offer.newBuilder()\n+    builder.addResourcesBuilder()\n+      .setName(\"mem\")\n+      .setType(Value.Type.SCALAR)\n+      .setScalar(Scalar.newBuilder().setValue(mem))\n+    builder.addResourcesBuilder()\n+      .setName(\"cpus\")\n+      .setType(Value.Type.SCALAR)\n+      .setScalar(Scalar.newBuilder().setValue(cpu))\n+    builder.setId(createOfferId(offerId))\n+      .setFrameworkId(FrameworkID.newBuilder()\n+        .setValue(\"f1\"))\n+      .setSlaveId(SlaveID.newBuilder().setValue(slaveId))\n+      .setHostname(s\"host${slaveId}\")\n+      .build()\n+  }\n+\n+  def verifyTaskLaunched(driver: SchedulerDriver,\n+                         offerId: String): List[TaskInfo] = {"
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "fixed\n",
    "commit": "1824d63c04b63c8392708746bd22f4a8662b5e78",
    "createdAt": "2016-07-15T22:05:54Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import java.util.Collections\n+\n+import org.apache.mesos.Protos._\n+import org.apache.mesos.Protos.Value.Scalar\n+import org.apache.mesos.SchedulerDriver\n+import org.mockito.{ArgumentCaptor, Matchers}\n+import org.mockito.Mockito._\n+import scala.collection.JavaConverters._\n+\n+object Utils {\n+  def createOffer(offerId: String, slaveId: String, mem: Int, cpu: Int): Offer = {\n+    val builder = Offer.newBuilder()\n+    builder.addResourcesBuilder()\n+      .setName(\"mem\")\n+      .setType(Value.Type.SCALAR)\n+      .setScalar(Scalar.newBuilder().setValue(mem))\n+    builder.addResourcesBuilder()\n+      .setName(\"cpus\")\n+      .setType(Value.Type.SCALAR)\n+      .setScalar(Scalar.newBuilder().setValue(cpu))\n+    builder.setId(createOfferId(offerId))\n+      .setFrameworkId(FrameworkID.newBuilder()\n+        .setValue(\"f1\"))\n+      .setSlaveId(SlaveID.newBuilder().setValue(slaveId))\n+      .setHostname(s\"host${slaveId}\")\n+      .build()\n+  }\n+\n+  def verifyTaskLaunched(driver: SchedulerDriver,\n+                         offerId: String): List[TaskInfo] = {"
  }],
  "prId": 14167
}, {
  "comments": [{
    "author": {
      "login": "skonto"
    },
    "body": "{} redundant\n",
    "commit": "1824d63c04b63c8392708746bd22f4a8662b5e78",
    "createdAt": "2016-07-15T10:54:46Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import java.util.Collections\n+\n+import org.apache.mesos.Protos._\n+import org.apache.mesos.Protos.Value.Scalar\n+import org.apache.mesos.SchedulerDriver\n+import org.mockito.{ArgumentCaptor, Matchers}\n+import org.mockito.Mockito._\n+import scala.collection.JavaConverters._\n+\n+object Utils {\n+  def createOffer(offerId: String, slaveId: String, mem: Int, cpu: Int): Offer = {\n+    val builder = Offer.newBuilder()\n+    builder.addResourcesBuilder()\n+      .setName(\"mem\")\n+      .setType(Value.Type.SCALAR)\n+      .setScalar(Scalar.newBuilder().setValue(mem))\n+    builder.addResourcesBuilder()\n+      .setName(\"cpus\")\n+      .setType(Value.Type.SCALAR)\n+      .setScalar(Scalar.newBuilder().setValue(cpu))\n+    builder.setId(createOfferId(offerId))\n+      .setFrameworkId(FrameworkID.newBuilder()\n+        .setValue(\"f1\"))\n+      .setSlaveId(SlaveID.newBuilder().setValue(slaveId))\n+      .setHostname(s\"host${slaveId}\")",
    "line": 44
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "This also isn't a change from this PR.  Though generally I do like to encase all interpolated expressions in braces just so the parsing is unambiguous \n",
    "commit": "1824d63c04b63c8392708746bd22f4a8662b5e78",
    "createdAt": "2016-07-15T22:05:43Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import java.util.Collections\n+\n+import org.apache.mesos.Protos._\n+import org.apache.mesos.Protos.Value.Scalar\n+import org.apache.mesos.SchedulerDriver\n+import org.mockito.{ArgumentCaptor, Matchers}\n+import org.mockito.Mockito._\n+import scala.collection.JavaConverters._\n+\n+object Utils {\n+  def createOffer(offerId: String, slaveId: String, mem: Int, cpu: Int): Offer = {\n+    val builder = Offer.newBuilder()\n+    builder.addResourcesBuilder()\n+      .setName(\"mem\")\n+      .setType(Value.Type.SCALAR)\n+      .setScalar(Scalar.newBuilder().setValue(mem))\n+    builder.addResourcesBuilder()\n+      .setName(\"cpus\")\n+      .setType(Value.Type.SCALAR)\n+      .setScalar(Scalar.newBuilder().setValue(cpu))\n+    builder.setId(createOfferId(offerId))\n+      .setFrameworkId(FrameworkID.newBuilder()\n+        .setValue(\"f1\"))\n+      .setSlaveId(SlaveID.newBuilder().setValue(slaveId))\n+      .setHostname(s\"host${slaveId}\")",
    "line": 44
  }, {
    "author": {
      "login": "skonto"
    },
    "body": "same\n",
    "commit": "1824d63c04b63c8392708746bd22f4a8662b5e78",
    "createdAt": "2016-07-21T09:11:53Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import java.util.Collections\n+\n+import org.apache.mesos.Protos._\n+import org.apache.mesos.Protos.Value.Scalar\n+import org.apache.mesos.SchedulerDriver\n+import org.mockito.{ArgumentCaptor, Matchers}\n+import org.mockito.Mockito._\n+import scala.collection.JavaConverters._\n+\n+object Utils {\n+  def createOffer(offerId: String, slaveId: String, mem: Int, cpu: Int): Offer = {\n+    val builder = Offer.newBuilder()\n+    builder.addResourcesBuilder()\n+      .setName(\"mem\")\n+      .setType(Value.Type.SCALAR)\n+      .setScalar(Scalar.newBuilder().setValue(mem))\n+    builder.addResourcesBuilder()\n+      .setName(\"cpus\")\n+      .setType(Value.Type.SCALAR)\n+      .setScalar(Scalar.newBuilder().setValue(cpu))\n+    builder.setId(createOfferId(offerId))\n+      .setFrameworkId(FrameworkID.newBuilder()\n+        .setValue(\"f1\"))\n+      .setSlaveId(SlaveID.newBuilder().setValue(slaveId))\n+      .setHostname(s\"host${slaveId}\")",
    "line": 44
  }],
  "prId": 14167
}]