[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "looks like this can be abstracted in some common util method.\n",
    "commit": "0f9f03e2ccd822aaa8939b8f7d5828e72ba88f11",
    "createdAt": "2015-07-01T23:20:19Z",
    "diffHunk": "@@ -42,6 +43,14 @@ import org.apache.spark.{LocalSparkContext, SparkConf, SparkContext}\n class MesosSchedulerBackendSuite extends FunSuite with LocalSparkContext with MockitoSugar {\n \n   test(\"check spark-class location correctly\") {\n+    def createResource(name: String, value: Double): Resource = {\n+      Resource.newBuilder()\n+        .setName(name)\n+        .setScalar(Scalar.newBuilder().setValue(value).build())\n+        .setType(Value.Type.SCALAR)\n+        .build()"
  }],
  "prId": 4960
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "`===`, here and other places\n",
    "commit": "0f9f03e2ccd822aaa8939b8f7d5828e72ba88f11",
    "createdAt": "2015-07-01T23:21:01Z",
    "diffHunk": "@@ -169,4 +179,97 @@ class MesosSchedulerBackendSuite extends FunSuite with LocalSparkContext with Mo\n     backend.resourceOffers(driver, mesosOffers2)\n     verify(driver, times(1)).declineOffer(mesosOffers2.get(0).getId)\n   }\n+\n+  test(\"can handle multiple roles\") {\n+    val driver = mock[SchedulerDriver]\n+    val taskScheduler = mock[TaskSchedulerImpl]\n+\n+    val listenerBus = mock[LiveListenerBus]\n+    listenerBus.post(\n+      SparkListenerExecutorAdded(anyLong, \"s1\", new ExecutorInfo(\"host1\", 2, Map.empty)))\n+\n+    val sc = mock[SparkContext]\n+    when(sc.executorMemory).thenReturn(100)\n+    when(sc.getSparkHome()).thenReturn(Option(\"/path\"))\n+    when(sc.executorEnvs).thenReturn(new mutable.HashMap[String, String])\n+    when(sc.conf).thenReturn(new SparkConf)\n+    when(sc.listenerBus).thenReturn(listenerBus)\n+\n+    val id = 1\n+    val builder = Offer.newBuilder()\n+    builder.addResourcesBuilder()\n+      .setName(\"mem\")\n+      .setType(Value.Type.SCALAR)\n+      .setRole(\"prod\")\n+      .setScalar(Scalar.newBuilder().setValue(500))\n+    builder.addResourcesBuilder()\n+      .setName(\"cpus\")\n+      .setRole(\"prod\")\n+      .setType(Value.Type.SCALAR)\n+      .setScalar(Scalar.newBuilder().setValue(1))\n+    builder.addResourcesBuilder()\n+      .setName(\"mem\")\n+      .setRole(\"dev\")\n+      .setType(Value.Type.SCALAR)\n+      .setScalar(Scalar.newBuilder().setValue(600))\n+    builder.addResourcesBuilder()\n+      .setName(\"cpus\")\n+      .setRole(\"dev\")\n+      .setType(Value.Type.SCALAR)\n+      .setScalar(Scalar.newBuilder().setValue(2))\n+    val offer = builder.setId(OfferID.newBuilder().setValue(s\"o${id.toString}\").build())\n+      .setFrameworkId(FrameworkID.newBuilder().setValue(\"f1\"))\n+      .setSlaveId(SlaveID.newBuilder().setValue(s\"s${id.toString}\"))\n+      .setHostname(s\"host${id.toString}\").build()\n+\n+\n+    val mesosOffers = new java.util.ArrayList[Offer]\n+    mesosOffers.add(offer)\n+\n+    val backend = new MesosSchedulerBackend(taskScheduler, sc, \"master\")\n+\n+    val expectedWorkerOffers = new ArrayBuffer[WorkerOffer](1)\n+    expectedWorkerOffers.append(new WorkerOffer(\n+      mesosOffers.get(0).getSlaveId.getValue,\n+      mesosOffers.get(0).getHostname,\n+      2 // Deducting 1 for executor\n+    ))\n+\n+    val taskDesc = new TaskDescription(1L, 0, \"s1\", \"n1\", 0, ByteBuffer.wrap(new Array[Byte](0)))\n+    when(taskScheduler.resourceOffers(expectedWorkerOffers)).thenReturn(Seq(Seq(taskDesc)))\n+    when(taskScheduler.CPUS_PER_TASK).thenReturn(1)\n+\n+    val capture = ArgumentCaptor.forClass(classOf[util.Collection[TaskInfo]])\n+    when(\n+      driver.launchTasks(\n+        Matchers.eq(Collections.singleton(mesosOffers.get(0).getId)),\n+        capture.capture(),\n+        any(classOf[Filters])\n+      )\n+    ).thenReturn(Status.valueOf(1))\n+\n+    backend.resourceOffers(driver, mesosOffers)\n+\n+    verify(driver, times(1)).launchTasks(\n+      Matchers.eq(Collections.singleton(mesosOffers.get(0).getId)),\n+      capture.capture(),\n+      any(classOf[Filters])\n+    )\n+\n+    assert(capture.getValue.size() == 1)"
  }],
  "prId": 4960
}]