[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "we usually wrap this in a try finally. In this case I don't think setting a var to null will ever throw an exception, but in the future people might add more stuff here and forget to wrap it in try finally, so it's prob better to just do it now.\n",
    "commit": "9becde3d94ea41bba9e275b9108c61b91074f035",
    "createdAt": "2016-02-22T23:09:01Z",
    "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.concurrent.{Await, ExecutionContext, Future}\n+import scala.language.implicitConversions\n+\n+import org.scalatest.BeforeAndAfterEach\n+import org.scalatest.time.SpanSugar._\n+\n+import org.apache.spark.{SparkFunSuite, TaskContext, TaskContextImpl}\n+\n+\n+class BlockInfoManagerSuite extends SparkFunSuite with BeforeAndAfterEach {\n+\n+  private implicit val ec = ExecutionContext.global\n+  private var blockInfoManager: BlockInfoManager = _\n+\n+  override protected def beforeEach(): Unit = {\n+    super.beforeEach()\n+    blockInfoManager = new BlockInfoManager()\n+  }\n+\n+  override protected def afterEach(): Unit = {\n+    blockInfoManager = null\n+    super.afterEach()"
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "Sure; done.\n",
    "commit": "9becde3d94ea41bba9e275b9108c61b91074f035",
    "createdAt": "2016-02-23T08:05:51Z",
    "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.concurrent.{Await, ExecutionContext, Future}\n+import scala.language.implicitConversions\n+\n+import org.scalatest.BeforeAndAfterEach\n+import org.scalatest.time.SpanSugar._\n+\n+import org.apache.spark.{SparkFunSuite, TaskContext, TaskContextImpl}\n+\n+\n+class BlockInfoManagerSuite extends SparkFunSuite with BeforeAndAfterEach {\n+\n+  private implicit val ec = ExecutionContext.global\n+  private var blockInfoManager: BlockInfoManager = _\n+\n+  override protected def beforeEach(): Unit = {\n+    super.beforeEach()\n+    blockInfoManager = new BlockInfoManager()\n+  }\n+\n+  override protected def afterEach(): Unit = {\n+    blockInfoManager = null\n+    super.afterEach()"
  }],
  "prId": 10705
}]