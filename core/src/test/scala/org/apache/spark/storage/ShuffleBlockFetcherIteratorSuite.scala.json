[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Nit: I think this needs to be indented further",
    "commit": "be18ba7fe303e1d6a0101a2df1e2c84a48fc9d39",
    "createdAt": "2019-01-25T00:57:40Z",
    "diffHunk": "@@ -217,6 +217,65 @@ class ShuffleBlockFetcherIteratorSuite extends SparkFunSuite with PrivateMethodT\n     verify(blocks(ShuffleBlockId(0, 2, 0)), times(0)).release()\n   }\n \n+  test(\"iterator is all consumed if task completes early\") {\n+    val blockManager = mock(classOf[BlockManager])\n+    val localBmId = BlockManagerId(\"test-client\", \"test-client\", 1)\n+    doReturn(localBmId).when(blockManager).blockManagerId\n+\n+    // Make sure remote blocks would return\n+    val remoteBmId = BlockManagerId(\"test-client-1\", \"test-client-1\", 2)\n+    val blocks = Map[BlockId, ManagedBuffer](\n+      ShuffleBlockId(0, 0, 0) -> createMockManagedBuffer(),\n+      ShuffleBlockId(0, 1, 0) -> createMockManagedBuffer(),\n+      ShuffleBlockId(0, 2, 0) -> createMockManagedBuffer())\n+\n+    // Semaphore to coordinate event sequence in two different threads.\n+    val sem = new Semaphore(0)\n+\n+    val transfer = mock(classOf[BlockTransferService])\n+    when(transfer.fetchBlocks(any(), any(), any(), any(), any(), any()))\n+      .thenAnswer(new Answer[Unit] {\n+      override def answer(invocation: InvocationOnMock): Unit = {"
  }, {
    "author": {
      "login": "advancedxy"
    },
    "body": "OK.\r\n\r\nThis block of code is copy & pasted. Will fix that.",
    "commit": "be18ba7fe303e1d6a0101a2df1e2c84a48fc9d39",
    "createdAt": "2019-01-25T03:12:23Z",
    "diffHunk": "@@ -217,6 +217,65 @@ class ShuffleBlockFetcherIteratorSuite extends SparkFunSuite with PrivateMethodT\n     verify(blocks(ShuffleBlockId(0, 2, 0)), times(0)).release()\n   }\n \n+  test(\"iterator is all consumed if task completes early\") {\n+    val blockManager = mock(classOf[BlockManager])\n+    val localBmId = BlockManagerId(\"test-client\", \"test-client\", 1)\n+    doReturn(localBmId).when(blockManager).blockManagerId\n+\n+    // Make sure remote blocks would return\n+    val remoteBmId = BlockManagerId(\"test-client-1\", \"test-client-1\", 2)\n+    val blocks = Map[BlockId, ManagedBuffer](\n+      ShuffleBlockId(0, 0, 0) -> createMockManagedBuffer(),\n+      ShuffleBlockId(0, 1, 0) -> createMockManagedBuffer(),\n+      ShuffleBlockId(0, 2, 0) -> createMockManagedBuffer())\n+\n+    // Semaphore to coordinate event sequence in two different threads.\n+    val sem = new Semaphore(0)\n+\n+    val transfer = mock(classOf[BlockTransferService])\n+    when(transfer.fetchBlocks(any(), any(), any(), any(), any(), any()))\n+      .thenAnswer(new Answer[Unit] {\n+      override def answer(invocation: InvocationOnMock): Unit = {"
  }],
  "prId": 23638
}]