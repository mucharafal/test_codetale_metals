[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "I would only suggest not testing the exact message here, but it's not a big deal. Maybe testing for the existence of the paths. ",
    "commit": "751f161c292b364b3d6cc3fb270208c16662226c",
    "createdAt": "2017-04-26T08:58:53Z",
    "diffHunk": "@@ -35,20 +35,31 @@ class LocalDirsSuite extends SparkFunSuite with BeforeAndAfter {\n \n   test(\"Utils.getLocalDir() returns a valid directory, even if some local dirs are missing\") {\n     // Regression test for SPARK-2974\n-    assert(!new File(\"/NONEXISTENT_DIR\").exists())\n+    assert(!new File(\"/NONEXISTENT_PATH\").exists())\n     val conf = new SparkConf(false)\n       .set(\"spark.local.dir\", s\"/NONEXISTENT_PATH,${System.getProperty(\"java.io.tmpdir\")}\")\n     assert(new File(Utils.getLocalDir(conf)).exists())\n   }\n \n   test(\"SPARK_LOCAL_DIRS override also affects driver\") {\n     // Regression test for SPARK-2975\n-    assert(!new File(\"/NONEXISTENT_DIR\").exists())\n+    assert(!new File(\"/NONEXISTENT_PATH\").exists())\n     // spark.local.dir only contains invalid directories, but that's not a problem since\n     // SPARK_LOCAL_DIRS will override it on both the driver and workers:\n     val conf = new SparkConfWithEnv(Map(\"SPARK_LOCAL_DIRS\" -> System.getProperty(\"java.io.tmpdir\")))\n       .set(\"spark.local.dir\", \"/NONEXISTENT_PATH\")\n     assert(new File(Utils.getLocalDir(conf)).exists())\n   }\n \n+  test(\"Utils.getLocalDir() throws an exception if any temporary directory cannot be retrieved\") {\n+    assert(!new File(\"/NONEXISTENT_PATH_ONE\").exists())\n+    assert(!new File(\"/NONEXISTENT_PATH_TWO\").exists())\n+    val conf = new SparkConf(false)\n+      .set(\"spark.local.dir\", \"/NONEXISTENT_PATH_ONE,/NONEXISTENT_PATH_TWO\")\n+    val message = intercept[IOException] {\n+      Utils.getLocalDir(conf)\n+    }.getMessage\n+    assert(message ==="
  }],
  "prId": 17768
}]