[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "it would be great to add a test case that covers when len(bitsx) > len(bitsY) to cover your other while branch\n",
    "commit": "451f28b2ae9cea490befb214e47045459fdff191",
    "createdAt": "2014-03-18T18:32:36Z",
    "diffHunk": "@@ -69,4 +69,45 @@ class BitSetSuite extends FunSuite {\n     assert(bitset.nextSetBit(96) === 96)\n     assert(bitset.nextSetBit(97) === -1)\n   }\n+\n+  test( \"xor\" ) {\n+    val setBitsX = Seq( 0, 2, 3, 37, 41 )"
  }],
  "prId": 172
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "here too - make the test case symmetric by covering the other test case\n",
    "commit": "451f28b2ae9cea490befb214e47045459fdff191",
    "createdAt": "2014-03-18T18:32:51Z",
    "diffHunk": "@@ -69,4 +69,45 @@ class BitSetSuite extends FunSuite {\n     assert(bitset.nextSetBit(96) === 96)\n     assert(bitset.nextSetBit(97) === -1)\n   }\n+\n+  test( \"xor\" ) {\n+    val setBitsX = Seq( 0, 2, 3, 37, 41 )\n+    val setBitsY = Seq( 0, 1, 3, 37, 38, 41, 85)\n+    val bitsetX = new BitSet(60)\n+    setBitsX.foreach( i => bitsetX.set(i))\n+    val bitsetY = new BitSet(100)\n+    setBitsY.foreach( i => bitsetY.set(i))\n+\n+    val bitsetXor = bitsetX ^ bitsetY\n+\n+    assert(bitsetXor.nextSetBit(0) === 1)\n+    assert(bitsetXor.nextSetBit(1) === 1)\n+    assert(bitsetXor.nextSetBit(2) === 2)\n+    assert(bitsetXor.nextSetBit(3) === 38)\n+    assert(bitsetXor.nextSetBit(38) === 38)\n+    assert(bitsetXor.nextSetBit(39) === 85)\n+    assert(bitsetXor.nextSetBit(42) === 85)\n+    assert(bitsetXor.nextSetBit(85) === 85)\n+    assert(bitsetXor.nextSetBit(86) === -1)\n+\n+  }\n+\n+  test( \"and-not\" ) {\n+    val setBitsX = Seq( 0, 2, 3, 37, 41, 48 )"
  }],
  "prId": 172
}]