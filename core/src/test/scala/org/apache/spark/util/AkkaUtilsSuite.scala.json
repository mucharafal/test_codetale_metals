[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "you can just do `assert(result.isFailure)`\n",
    "commit": "0e199b695d59fd43f2274753b3a6cdad6f10d394",
    "createdAt": "2015-02-18T18:37:25Z",
    "diffHunk": "@@ -370,9 +371,13 @@ class AkkaUtilsSuite extends FunSuite with LocalSparkContext with ResetSystemPro\n     val selection = slaveSystem.actorSelection(\n       AkkaUtils.address(AkkaUtils.protocol(slaveSystem), \"spark\", \"localhost\", boundPort, \"MapOutputTracker\"))\n     val timeout = AkkaUtils.lookupTimeout(conf)\n-    intercept[TimeoutException] {\n-      slaveTracker.trackerActor = Await.result(selection.resolveOne(timeout * 2), timeout)\n+    val result = Try(Await.result(selection.resolveOne(timeout * 2), timeout))\n+\n+    assert(result.isFailure === true)"
  }],
  "prId": 4653
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "this will create a lot of warnings complaining that the match is not exhaustive. I thin you'll need to add a `case _ => fail(...)` to fix this\n",
    "commit": "0e199b695d59fd43f2274753b3a6cdad6f10d394",
    "createdAt": "2015-02-18T18:38:13Z",
    "diffHunk": "@@ -370,9 +371,13 @@ class AkkaUtilsSuite extends FunSuite with LocalSparkContext with ResetSystemPro\n     val selection = slaveSystem.actorSelection(\n       AkkaUtils.address(AkkaUtils.protocol(slaveSystem), \"spark\", \"localhost\", boundPort, \"MapOutputTracker\"))\n     val timeout = AkkaUtils.lookupTimeout(conf)\n-    intercept[TimeoutException] {\n-      slaveTracker.trackerActor = Await.result(selection.resolveOne(timeout * 2), timeout)\n+    val result = Try(Await.result(selection.resolveOne(timeout * 2), timeout))\n+\n+    assert(result.isFailure === true)\n+    val exception = result match {\n+      case Failure(ex) => ex\n     }"
  }],
  "prId": 4653
}]