[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "nit: need `Unit` return type here and other places\n",
    "commit": "2f43ff3c6d1a4a428e5cbe8f4a4e4347274fc95c",
    "createdAt": "2015-07-06T19:03:49Z",
    "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+import java.io.File\n+\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.fs.Path\n+\n+import org.apache.spark._\n+import org.apache.spark.rdd.CheckpointRDD\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkFunSuite\n+\n+class CheckpointingIteratorSuite extends SparkFunSuite with LocalSparkContext with Logging {\n+  var checkpointDir: File = _\n+  val partitioner = new HashPartitioner(2)\n+\n+  override def beforeEach() {\n+    super.beforeEach()\n+    checkpointDir = File.createTempFile(\"temp\", \"\", Utils.createTempDir())\n+    checkpointDir.delete()\n+    sc = new SparkContext(\"local\", \"test\")\n+    sc.setCheckpointDir(checkpointDir.toString)\n+  }\n+\n+  override def afterEach() {",
    "line": 42
  }],
  "prId": 7021
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "could you add a test that verifies the input data is only read once? i.e. a test that verifies SPARK-8582 is actually fixed?\n",
    "commit": "2f43ff3c6d1a4a428e5cbe8f4a4e4347274fc95c",
    "createdAt": "2015-07-06T19:04:20Z",
    "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+import java.io.File\n+\n+import org.apache.hadoop.fs.FileSystem\n+import org.apache.hadoop.fs.Path\n+\n+import org.apache.spark._\n+import org.apache.spark.rdd.CheckpointRDD\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.SparkFunSuite\n+\n+class CheckpointingIteratorSuite extends SparkFunSuite with LocalSparkContext with Logging {\n+  var checkpointDir: File = _\n+  val partitioner = new HashPartitioner(2)\n+\n+  override def beforeEach() {\n+    super.beforeEach()\n+    checkpointDir = File.createTempFile(\"temp\", \"\", Utils.createTempDir())\n+    checkpointDir.delete()\n+    sc = new SparkContext(\"local\", \"test\")\n+    sc.setCheckpointDir(checkpointDir.toString)\n+  }\n+\n+  override def afterEach() {\n+    super.afterEach()\n+    Utils.deleteRecursively(checkpointDir)\n+  }\n+",
    "line": 46
  }],
  "prId": 7021
}]