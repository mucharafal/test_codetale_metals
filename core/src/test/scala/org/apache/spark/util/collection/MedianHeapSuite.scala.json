[{
  "comments": [{
    "author": {
      "login": "mridulm"
    },
    "body": "ord -> odd",
    "commit": "b9bdf443d8fc8124fc5b8e30f471fe8b0067264f",
    "createdAt": "2017-03-06T04:16:21Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.collection\n+\n+import java.util\n+import java.util.NoSuchElementException\n+\n+import scala.collection.mutable.ArrayBuffer\n+import scala.util.Random\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class MedianHeapSuite extends SparkFunSuite {\n+\n+  test(\"If no numbers in MedianHeap, NoSuchElementException is thrown.\") {\n+    val medianHeap = new MedianHeap()\n+    var valid = false\n+    try {\n+      medianHeap.findMedian()\n+    } catch {\n+      case e: NoSuchElementException =>\n+        valid = true\n+    }\n+\n+    assert(valid)\n+  }\n+\n+  test(\"Median should be correct when size of MedianHeap is ord or even\") {"
  }],
  "prId": 16867
}, {
  "comments": [{
    "author": {
      "login": "mridulm"
    },
    "body": "Also add/enhance this to ensure median is correct even if duplicates exist. In test above, that is not gauranteed (it can be duplicate if random ends up generating duplicates).",
    "commit": "b9bdf443d8fc8124fc5b8e30f471fe8b0067264f",
    "createdAt": "2017-03-06T04:19:10Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.collection\n+\n+import java.util\n+import java.util.NoSuchElementException\n+\n+import scala.collection.mutable.ArrayBuffer\n+import scala.util.Random\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class MedianHeapSuite extends SparkFunSuite {\n+\n+  test(\"If no numbers in MedianHeap, NoSuchElementException is thrown.\") {\n+    val medianHeap = new MedianHeap()\n+    var valid = false\n+    try {\n+      medianHeap.findMedian()\n+    } catch {\n+      case e: NoSuchElementException =>\n+        valid = true\n+    }\n+\n+    assert(valid)\n+  }\n+\n+  test(\"Median should be correct when size of MedianHeap is ord or even\") {\n+    val random = new Random()\n+    val medianHeap1 = new MedianHeap()\n+    val array1 = new Array[Int](100)\n+    (0 until 100).foreach {\n+      case i =>\n+        val randomNumber = random.nextInt(1000)\n+        medianHeap1.insert(randomNumber)\n+        array1(i) += randomNumber\n+    }\n+    util.Arrays.sort(array1)\n+    assert(medianHeap1.findMedian() === ((array1(49) + array1(50)) / 2.0))\n+\n+    val medianHeap2 = new MedianHeap()\n+    val array2 = new Array[Int](101)\n+    (0 until 101).foreach {\n+      case i =>\n+        val randomNumber = random.nextInt(1000)\n+        medianHeap2.insert(randomNumber)\n+        array2(i) += randomNumber\n+    }\n+    util.Arrays.sort(array2)\n+    assert(medianHeap2.findMedian() === array2(50))\n+  }\n+\n+  test(\"Size of Median should be correct though there are duplicated numbers inside.\") {"
  }, {
    "author": {
      "login": "jinxing64"
    },
    "body": "random.nextInt(100) returns value between 0(inclusive) and the specified value(exclusive). If I call it 1000 times, there must be duplicates.",
    "commit": "b9bdf443d8fc8124fc5b8e30f471fe8b0067264f",
    "createdAt": "2017-03-06T04:56:42Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.collection\n+\n+import java.util\n+import java.util.NoSuchElementException\n+\n+import scala.collection.mutable.ArrayBuffer\n+import scala.util.Random\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class MedianHeapSuite extends SparkFunSuite {\n+\n+  test(\"If no numbers in MedianHeap, NoSuchElementException is thrown.\") {\n+    val medianHeap = new MedianHeap()\n+    var valid = false\n+    try {\n+      medianHeap.findMedian()\n+    } catch {\n+      case e: NoSuchElementException =>\n+        valid = true\n+    }\n+\n+    assert(valid)\n+  }\n+\n+  test(\"Median should be correct when size of MedianHeap is ord or even\") {\n+    val random = new Random()\n+    val medianHeap1 = new MedianHeap()\n+    val array1 = new Array[Int](100)\n+    (0 until 100).foreach {\n+      case i =>\n+        val randomNumber = random.nextInt(1000)\n+        medianHeap1.insert(randomNumber)\n+        array1(i) += randomNumber\n+    }\n+    util.Arrays.sort(array1)\n+    assert(medianHeap1.findMedian() === ((array1(49) + array1(50)) / 2.0))\n+\n+    val medianHeap2 = new MedianHeap()\n+    val array2 = new Array[Int](101)\n+    (0 until 101).foreach {\n+      case i =>\n+        val randomNumber = random.nextInt(1000)\n+        medianHeap2.insert(randomNumber)\n+        array2(i) += randomNumber\n+    }\n+    util.Arrays.sort(array2)\n+    assert(medianHeap2.findMedian() === array2(50))\n+  }\n+\n+  test(\"Size of Median should be correct though there are duplicated numbers inside.\") {"
  }, {
    "author": {
      "login": "mridulm"
    },
    "body": "Yes, but no validation of the median is being done.\r\nEither enhance this test to validate the media, or add a new test to do so (if this is to test only duplicated size)",
    "commit": "b9bdf443d8fc8124fc5b8e30f471fe8b0067264f",
    "createdAt": "2017-03-06T06:51:08Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.collection\n+\n+import java.util\n+import java.util.NoSuchElementException\n+\n+import scala.collection.mutable.ArrayBuffer\n+import scala.util.Random\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class MedianHeapSuite extends SparkFunSuite {\n+\n+  test(\"If no numbers in MedianHeap, NoSuchElementException is thrown.\") {\n+    val medianHeap = new MedianHeap()\n+    var valid = false\n+    try {\n+      medianHeap.findMedian()\n+    } catch {\n+      case e: NoSuchElementException =>\n+        valid = true\n+    }\n+\n+    assert(valid)\n+  }\n+\n+  test(\"Median should be correct when size of MedianHeap is ord or even\") {\n+    val random = new Random()\n+    val medianHeap1 = new MedianHeap()\n+    val array1 = new Array[Int](100)\n+    (0 until 100).foreach {\n+      case i =>\n+        val randomNumber = random.nextInt(1000)\n+        medianHeap1.insert(randomNumber)\n+        array1(i) += randomNumber\n+    }\n+    util.Arrays.sort(array1)\n+    assert(medianHeap1.findMedian() === ((array1(49) + array1(50)) / 2.0))\n+\n+    val medianHeap2 = new MedianHeap()\n+    val array2 = new Array[Int](101)\n+    (0 until 101).foreach {\n+      case i =>\n+        val randomNumber = random.nextInt(1000)\n+        medianHeap2.insert(randomNumber)\n+        array2(i) += randomNumber\n+    }\n+    util.Arrays.sort(array2)\n+    assert(medianHeap2.findMedian() === array2(50))\n+  }\n+\n+  test(\"Size of Median should be correct though there are duplicated numbers inside.\") {"
  }, {
    "author": {
      "login": "kayousterhout"
    },
    "body": "Similar to my comment above, can you just pass in a manually created list of durations here (e.g., (1, 1, 2)) where it's very obvious that there are duplicates, and what the median is?",
    "commit": "b9bdf443d8fc8124fc5b8e30f471fe8b0067264f",
    "createdAt": "2017-03-15T17:56:37Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.collection\n+\n+import java.util\n+import java.util.NoSuchElementException\n+\n+import scala.collection.mutable.ArrayBuffer\n+import scala.util.Random\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class MedianHeapSuite extends SparkFunSuite {\n+\n+  test(\"If no numbers in MedianHeap, NoSuchElementException is thrown.\") {\n+    val medianHeap = new MedianHeap()\n+    var valid = false\n+    try {\n+      medianHeap.findMedian()\n+    } catch {\n+      case e: NoSuchElementException =>\n+        valid = true\n+    }\n+\n+    assert(valid)\n+  }\n+\n+  test(\"Median should be correct when size of MedianHeap is ord or even\") {\n+    val random = new Random()\n+    val medianHeap1 = new MedianHeap()\n+    val array1 = new Array[Int](100)\n+    (0 until 100).foreach {\n+      case i =>\n+        val randomNumber = random.nextInt(1000)\n+        medianHeap1.insert(randomNumber)\n+        array1(i) += randomNumber\n+    }\n+    util.Arrays.sort(array1)\n+    assert(medianHeap1.findMedian() === ((array1(49) + array1(50)) / 2.0))\n+\n+    val medianHeap2 = new MedianHeap()\n+    val array2 = new Array[Int](101)\n+    (0 until 101).foreach {\n+      case i =>\n+        val randomNumber = random.nextInt(1000)\n+        medianHeap2.insert(randomNumber)\n+        array2(i) += randomNumber\n+    }\n+    util.Arrays.sort(array2)\n+    assert(medianHeap2.findMedian() === array2(50))\n+  }\n+\n+  test(\"Size of Median should be correct though there are duplicated numbers inside.\") {"
  }],
  "prId": 16867
}, {
  "comments": [{
    "author": {
      "login": "kayousterhout"
    },
    "body": "import Arrays rather than the more general util",
    "commit": "b9bdf443d8fc8124fc5b8e30f471fe8b0067264f",
    "createdAt": "2017-03-15T17:52:46Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.collection\n+\n+import java.util"
  }],
  "prId": 16867
}, {
  "comments": [{
    "author": {
      "login": "kayousterhout"
    },
    "body": "Can you break this into two tests -- one for when even and one for when odd?\r\n\r\nAlso, can you manually pass in a small list of numbers, rather than using random?  I don't see a big benefit of using random here and the test is easier to debug when it's deterministic.",
    "commit": "b9bdf443d8fc8124fc5b8e30f471fe8b0067264f",
    "createdAt": "2017-03-15T17:55:48Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.collection\n+\n+import java.util\n+import java.util.NoSuchElementException\n+\n+import scala.collection.mutable.ArrayBuffer\n+import scala.util.Random\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class MedianHeapSuite extends SparkFunSuite {\n+\n+  test(\"If no numbers in MedianHeap, NoSuchElementException is thrown.\") {\n+    val medianHeap = new MedianHeap()\n+    var valid = false\n+    try {\n+      medianHeap.findMedian()\n+    } catch {\n+      case e: NoSuchElementException =>\n+        valid = true\n+    }\n+\n+    assert(valid)\n+  }\n+\n+  test(\"Median should be correct when size of MedianHeap is even or odd\") {\n+    val random = new Random()\n+    val medianHeap1 = new MedianHeap()\n+    val array1 = new Array[Int](100)\n+    (0 until 100).foreach {\n+      case i =>\n+        val randomNumber = random.nextInt(1000)\n+        medianHeap1.insert(randomNumber)\n+        array1(i) += randomNumber\n+    }\n+    util.Arrays.sort(array1)"
  }],
  "prId": 16867
}, {
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "scalatest has a simpler pattern for this:\r\n\r\n```scala\r\nintercept[NoSuchElementException] {\r\n  medianHeap.median\r\n}\r\n```\r\n\r\nhttp://www.scalatest.org/user_guide/using_assertions\r\n\r\n(I guess you could use `assertThrows` in this case, but I tend to always use `intercept` since it also lets you inspect the thrown exception.)",
    "commit": "b9bdf443d8fc8124fc5b8e30f471fe8b0067264f",
    "createdAt": "2017-03-16T14:36:37Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.collection\n+\n+import java.util.Arrays\n+import java.util.NoSuchElementException\n+\n+import scala.collection.mutable.ArrayBuffer\n+import scala.util.Random\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class MedianHeapSuite extends SparkFunSuite {\n+\n+  test(\"If no numbers in MedianHeap, NoSuchElementException is thrown.\") {\n+    val medianHeap = new MedianHeap()\n+    var valid = false\n+    try {\n+      medianHeap.median\n+    } catch {\n+      case e: NoSuchElementException =>\n+        valid = true\n+    }"
  }, {
    "author": {
      "login": "jinxing64"
    },
    "body": "Thanks a lot for the recommendation :)",
    "commit": "b9bdf443d8fc8124fc5b8e30f471fe8b0067264f",
    "createdAt": "2017-03-16T15:42:37Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.collection\n+\n+import java.util.Arrays\n+import java.util.NoSuchElementException\n+\n+import scala.collection.mutable.ArrayBuffer\n+import scala.util.Random\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class MedianHeapSuite extends SparkFunSuite {\n+\n+  test(\"If no numbers in MedianHeap, NoSuchElementException is thrown.\") {\n+    val medianHeap = new MedianHeap()\n+    var valid = false\n+    try {\n+      medianHeap.median\n+    } catch {\n+      case e: NoSuchElementException =>\n+        valid = true\n+    }"
  }],
  "prId": 16867
}, {
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "I'd remove \"Size of\" from the name, this is testing more than the size.",
    "commit": "b9bdf443d8fc8124fc5b8e30f471fe8b0067264f",
    "createdAt": "2017-03-16T14:42:50Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.collection\n+\n+import java.util.Arrays\n+import java.util.NoSuchElementException\n+\n+import scala.collection.mutable.ArrayBuffer\n+import scala.util.Random\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class MedianHeapSuite extends SparkFunSuite {\n+\n+  test(\"If no numbers in MedianHeap, NoSuchElementException is thrown.\") {\n+    val medianHeap = new MedianHeap()\n+    var valid = false\n+    try {\n+      medianHeap.median\n+    } catch {\n+      case e: NoSuchElementException =>\n+        valid = true\n+    }\n+\n+    assert(valid)\n+  }\n+\n+  test(\"Median should be correct when size of MedianHeap is even\") {\n+    val array = Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n+    val medianHeap = new MedianHeap()\n+    array.foreach(medianHeap.insert(_))\n+    assert(medianHeap.size() === 10)\n+    assert(medianHeap.median === ((array(4) + array(5)) / 2.0))\n+  }\n+\n+  test(\"Median should be correct when size of MedianHeap is odd\") {\n+    val array = Array(0, 1, 2, 3, 4, 5, 6, 7, 8)\n+    val medianHeap = new MedianHeap()\n+    array.foreach(medianHeap.insert(_))\n+    assert(medianHeap.size() === 9)\n+    assert(medianHeap.median === (array(4)))\n+  }\n+\n+  test(\"Size of Median should be correct though there are duplicated numbers inside.\") {"
  }],
  "prId": 16867
}, {
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "I know Kay asked for tests with a some hardcoded data, but I think these tests are too simplistic.  All of these tests insert data in order, and none have significant skew.\r\n\r\nCan you add a test case which does something like:\r\n1) inserts 10 elements with the same value (eg. 5), check the median\r\n2) insert 100 elements with a larger value (eg 10) check the median\r\n3) insert 1000 elements with an even smaller value (eg 0), check the median\r\n",
    "commit": "b9bdf443d8fc8124fc5b8e30f471fe8b0067264f",
    "createdAt": "2017-03-16T14:49:24Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.collection\n+\n+import java.util.Arrays\n+import java.util.NoSuchElementException\n+\n+import scala.collection.mutable.ArrayBuffer\n+import scala.util.Random\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class MedianHeapSuite extends SparkFunSuite {\n+\n+  test(\"If no numbers in MedianHeap, NoSuchElementException is thrown.\") {\n+    val medianHeap = new MedianHeap()\n+    var valid = false\n+    try {\n+      medianHeap.median\n+    } catch {\n+      case e: NoSuchElementException =>\n+        valid = true\n+    }\n+\n+    assert(valid)\n+  }\n+\n+  test(\"Median should be correct when size of MedianHeap is even\") {\n+    val array = Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n+    val medianHeap = new MedianHeap()\n+    array.foreach(medianHeap.insert(_))\n+    assert(medianHeap.size() === 10)\n+    assert(medianHeap.median === ((array(4) + array(5)) / 2.0))\n+  }\n+\n+  test(\"Median should be correct when size of MedianHeap is odd\") {\n+    val array = Array(0, 1, 2, 3, 4, 5, 6, 7, 8)\n+    val medianHeap = new MedianHeap()\n+    array.foreach(medianHeap.insert(_))\n+    assert(medianHeap.size() === 9)\n+    assert(medianHeap.median === (array(4)))\n+  }\n+\n+  test(\"Size of Median should be correct though there are duplicated numbers inside.\") {\n+    val array = Array(0, 0, 1, 1, 2, 2, 3, 3, 4, 4)\n+    val medianHeap = new MedianHeap()\n+    array.foreach(medianHeap.insert(_))\n+    Arrays.sort(array)\n+    assert(medianHeap.size === 10)\n+    assert(medianHeap.median === ((array(4) + array(5)) / 2.0))\n+  }"
  }, {
    "author": {
      "login": "jinxing64"
    },
    "body": "Yes, I added this change.",
    "commit": "b9bdf443d8fc8124fc5b8e30f471fe8b0067264f",
    "createdAt": "2017-03-16T15:43:35Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.collection\n+\n+import java.util.Arrays\n+import java.util.NoSuchElementException\n+\n+import scala.collection.mutable.ArrayBuffer\n+import scala.util.Random\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class MedianHeapSuite extends SparkFunSuite {\n+\n+  test(\"If no numbers in MedianHeap, NoSuchElementException is thrown.\") {\n+    val medianHeap = new MedianHeap()\n+    var valid = false\n+    try {\n+      medianHeap.median\n+    } catch {\n+      case e: NoSuchElementException =>\n+        valid = true\n+    }\n+\n+    assert(valid)\n+  }\n+\n+  test(\"Median should be correct when size of MedianHeap is even\") {\n+    val array = Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n+    val medianHeap = new MedianHeap()\n+    array.foreach(medianHeap.insert(_))\n+    assert(medianHeap.size() === 10)\n+    assert(medianHeap.median === ((array(4) + array(5)) / 2.0))\n+  }\n+\n+  test(\"Median should be correct when size of MedianHeap is odd\") {\n+    val array = Array(0, 1, 2, 3, 4, 5, 6, 7, 8)\n+    val medianHeap = new MedianHeap()\n+    array.foreach(medianHeap.insert(_))\n+    assert(medianHeap.size() === 9)\n+    assert(medianHeap.median === (array(4)))\n+  }\n+\n+  test(\"Size of Median should be correct though there are duplicated numbers inside.\") {\n+    val array = Array(0, 0, 1, 1, 2, 2, 3, 3, 4, 4)\n+    val medianHeap = new MedianHeap()\n+    array.foreach(medianHeap.insert(_))\n+    Arrays.sort(array)\n+    assert(medianHeap.size === 10)\n+    assert(medianHeap.median === ((array(4) + array(5)) / 2.0))\n+  }"
  }],
  "prId": 16867
}, {
  "comments": [{
    "author": {
      "login": "kayousterhout"
    },
    "body": "Can you change this to something like:\r\n\r\nArray(0, 0, 1, 1, 2, 3, 4)?\r\n\r\nOtherwise the median heap could be handling the duplicates wrong (e.g., by not actually inserting duplicates), and the assertion at the bottom would still old. Then the check at the end can be `medianHeap.median === 1`.",
    "commit": "b9bdf443d8fc8124fc5b8e30f471fe8b0067264f",
    "createdAt": "2017-03-24T00:11:17Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.collection\n+\n+import java.util.Arrays\n+import java.util.NoSuchElementException\n+\n+import scala.collection.mutable.ArrayBuffer\n+import scala.util.Random\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class MedianHeapSuite extends SparkFunSuite {\n+\n+  test(\"If no numbers in MedianHeap, NoSuchElementException is thrown.\") {\n+    val medianHeap = new MedianHeap()\n+    intercept[NoSuchElementException] {\n+      medianHeap.median\n+    }\n+  }\n+\n+  test(\"Median should be correct when size of MedianHeap is even\") {\n+    val array = Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n+    val medianHeap = new MedianHeap()\n+    array.foreach(medianHeap.insert(_))\n+    assert(medianHeap.size() === 10)\n+    assert(medianHeap.median === ((array(4) + array(5)) / 2.0))\n+  }\n+\n+  test(\"Median should be correct when size of MedianHeap is odd\") {\n+    val array = Array(0, 1, 2, 3, 4, 5, 6, 7, 8)\n+    val medianHeap = new MedianHeap()\n+    array.foreach(medianHeap.insert(_))\n+    assert(medianHeap.size() === 9)\n+    assert(medianHeap.median === (array(4)))\n+  }\n+\n+  test(\"Median should be correct though there are duplicated numbers inside.\") {\n+    val array = Array(0, 0, 1, 1, 2, 2, 3, 3, 4, 4)"
  }],
  "prId": 16867
}, {
  "comments": [{
    "author": {
      "login": "kayousterhout"
    },
    "body": "instead of indexing into the array, I think it would be clearer here to just hard-code 4.5 (it's easier to see that the median is 4.5 than to reason about the indices in the array)",
    "commit": "b9bdf443d8fc8124fc5b8e30f471fe8b0067264f",
    "createdAt": "2017-03-24T00:11:56Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.collection\n+\n+import java.util.Arrays\n+import java.util.NoSuchElementException\n+\n+import scala.collection.mutable.ArrayBuffer\n+import scala.util.Random\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class MedianHeapSuite extends SparkFunSuite {\n+\n+  test(\"If no numbers in MedianHeap, NoSuchElementException is thrown.\") {\n+    val medianHeap = new MedianHeap()\n+    intercept[NoSuchElementException] {\n+      medianHeap.median\n+    }\n+  }\n+\n+  test(\"Median should be correct when size of MedianHeap is even\") {\n+    val array = Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n+    val medianHeap = new MedianHeap()\n+    array.foreach(medianHeap.insert(_))\n+    assert(medianHeap.size() === 10)\n+    assert(medianHeap.median === ((array(4) + array(5)) / 2.0))"
  }],
  "prId": 16867
}, {
  "comments": [{
    "author": {
      "login": "kayousterhout"
    },
    "body": "super nit: can you combine these into one import (import java.util.{Arrays, NoSuchElementException})",
    "commit": "b9bdf443d8fc8124fc5b8e30f471fe8b0067264f",
    "createdAt": "2017-03-24T00:12:14Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.collection\n+\n+import java.util.Arrays"
  }],
  "prId": 16867
}, {
  "comments": [{
    "author": {
      "login": "kayousterhout"
    },
    "body": "similarly here -- just `medianHeap.median === 4`",
    "commit": "b9bdf443d8fc8124fc5b8e30f471fe8b0067264f",
    "createdAt": "2017-03-24T00:12:28Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.collection\n+\n+import java.util.Arrays\n+import java.util.NoSuchElementException\n+\n+import scala.collection.mutable.ArrayBuffer\n+import scala.util.Random\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class MedianHeapSuite extends SparkFunSuite {\n+\n+  test(\"If no numbers in MedianHeap, NoSuchElementException is thrown.\") {\n+    val medianHeap = new MedianHeap()\n+    intercept[NoSuchElementException] {\n+      medianHeap.median\n+    }\n+  }\n+\n+  test(\"Median should be correct when size of MedianHeap is even\") {\n+    val array = Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n+    val medianHeap = new MedianHeap()\n+    array.foreach(medianHeap.insert(_))\n+    assert(medianHeap.size() === 10)\n+    assert(medianHeap.median === ((array(4) + array(5)) / 2.0))\n+  }\n+\n+  test(\"Median should be correct when size of MedianHeap is odd\") {\n+    val array = Array(0, 1, 2, 3, 4, 5, 6, 7, 8)\n+    val medianHeap = new MedianHeap()\n+    array.foreach(medianHeap.insert(_))\n+    assert(medianHeap.size() === 9)\n+    assert(medianHeap.median === (array(4)))"
  }],
  "prId": 16867
}, {
  "comments": [{
    "author": {
      "login": "kayousterhout"
    },
    "body": "\"when skew situations\" --> \"when input data is skewed\"",
    "commit": "b9bdf443d8fc8124fc5b8e30f471fe8b0067264f",
    "createdAt": "2017-03-24T00:12:58Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.collection\n+\n+import java.util.Arrays\n+import java.util.NoSuchElementException\n+\n+import scala.collection.mutable.ArrayBuffer\n+import scala.util.Random\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class MedianHeapSuite extends SparkFunSuite {\n+\n+  test(\"If no numbers in MedianHeap, NoSuchElementException is thrown.\") {\n+    val medianHeap = new MedianHeap()\n+    intercept[NoSuchElementException] {\n+      medianHeap.median\n+    }\n+  }\n+\n+  test(\"Median should be correct when size of MedianHeap is even\") {\n+    val array = Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n+    val medianHeap = new MedianHeap()\n+    array.foreach(medianHeap.insert(_))\n+    assert(medianHeap.size() === 10)\n+    assert(medianHeap.median === ((array(4) + array(5)) / 2.0))\n+  }\n+\n+  test(\"Median should be correct when size of MedianHeap is odd\") {\n+    val array = Array(0, 1, 2, 3, 4, 5, 6, 7, 8)\n+    val medianHeap = new MedianHeap()\n+    array.foreach(medianHeap.insert(_))\n+    assert(medianHeap.size() === 9)\n+    assert(medianHeap.median === (array(4)))\n+  }\n+\n+  test(\"Median should be correct though there are duplicated numbers inside.\") {\n+    val array = Array(0, 0, 1, 1, 2, 2, 3, 3, 4, 4)\n+    val medianHeap = new MedianHeap()\n+    array.foreach(medianHeap.insert(_))\n+    assert(medianHeap.size === 10)\n+    assert(medianHeap.median === ((array(4) + array(5)) / 2.0))\n+  }\n+\n+  test(\"Median should be correct when skew situations.\") {"
  }],
  "prId": 16867
}]