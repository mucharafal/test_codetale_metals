[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "cc @JoshRosen \n\nI made the randomized tester to be stricter. Previously it would still pass if prefix always return 0.\n",
    "commit": "e4908cc4fe20b99238144da348a31ecfc59ade72",
    "createdAt": "2015-07-30T02:05:00Z",
    "diffHunk": "@@ -17,22 +17,29 @@\n \n package org.apache.spark.util.collection.unsafe.sort\n \n+import com.google.common.primitives.UnsignedBytes\n import org.scalatest.prop.PropertyChecks\n-\n import org.apache.spark.SparkFunSuite\n+import org.apache.spark.unsafe.types.UTF8String\n \n class PrefixComparatorsSuite extends SparkFunSuite with PropertyChecks {\n \n   test(\"String prefix comparator\") {\n \n     def testPrefixComparison(s1: String, s2: String): Unit = {\n-      val s1Prefix = PrefixComparators.STRING.computePrefix(s1)\n-      val s2Prefix = PrefixComparators.STRING.computePrefix(s2)\n+      val utf8string1 = UTF8String.fromString(s1)\n+      val utf8string2 = UTF8String.fromString(s2)\n+      val s1Prefix = PrefixComparators.STRING.computePrefix(utf8string1)\n+      val s2Prefix = PrefixComparators.STRING.computePrefix(utf8string2)\n       val prefixComparisonResult = PrefixComparators.STRING.compare(s1Prefix, s2Prefix)\n+\n+      val cmp = UnsignedBytes.lexicographicalComparator().compare(\n+        utf8string1.getBytes.take(8), utf8string2.getBytes.take(8))\n+\n       assert(\n-        (prefixComparisonResult == 0) ||\n-        (prefixComparisonResult < 0 && s1 < s2) ||\n-        (prefixComparisonResult > 0 && s1 > s2))\n+        (prefixComparisonResult == 0 && cmp == 0) ||",
    "line": 30
  }],
  "prId": 7765
}]