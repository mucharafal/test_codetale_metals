[{
  "comments": [{
    "author": {
      "login": "ConeyLiu"
    },
    "body": "Hi, @MaxGekk @zsxwing Could you tell me why this can be interrupted? while `(1 to 10).par` can't.",
    "commit": "610154c7a127628d6bb4d30c790d27db474fbf65",
    "createdAt": "2019-02-19T13:34:28Z",
    "diffHunk": "@@ -133,4 +133,37 @@ class ThreadUtilsSuite extends SparkFunSuite {\n       \"stack trace contains unexpected references to ThreadUtils\"\n     )\n   }\n+\n+  test(\"parmap should be interruptible\") {\n+    val t = new Thread() {\n+      setDaemon(true)\n+\n+      override def run() {\n+        try {\n+          // \"par\" is uninterruptible. The following will keep running even if the thread is\n+          // interrupted. We should prefer to use \"ThreadUtils.parmap\".\n+          //\n+          // (1 to 10).par.flatMap { i =>\n+          //   Thread.sleep(100000)\n+          //   1 to i\n+          // }\n+          //\n+          ThreadUtils.parmap(1 to 10, \"test\", 2) { i =>\n+            Thread.sleep(100000)\n+            1 to i\n+          }.flatten\n+        } catch {\n+          case _: InterruptedException => // excepted\n+        }\n+      }\n+    }\n+    t.start()\n+    eventually(timeout(10.seconds)) {\n+      assert(t.isAlive)\n+    }\n+    t.interrupt()\n+    eventually(timeout(10.seconds)) {\n+      assert(!t.isAlive)\n+    }\n+  }",
    "line": 36
  }],
  "prId": 21913
}]