[{
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "What do these tests mean? Tests for different type comparisons? e.g.,\r\n```\r\n    assert(!Some(specializedMap1(\"a\")).contains(0.0))\r\n    assert(!Some(specializedMap1(\"b\")).contains(0.toShort))\r\n```",
    "commit": "9346112c8e94b4755ae07ea926997acc7b595937",
    "createdAt": "2018-08-27T07:55:46Z",
    "diffHunk": "@@ -194,4 +194,42 @@ class OpenHashMapSuite extends SparkFunSuite with Matchers {\n     val numInvalidValues = map.iterator.count(_._2 == 0)\n     assertResult(0)(numInvalidValues)\n   }\n+\n+  test(\"distinguish between the 0/0.0/0L and null\") {\n+    val specializedMap1 = new OpenHashMap[String, Long]\n+    specializedMap1(\"a\") = null.asInstanceOf[Long]\n+    specializedMap1(\"b\") = 0L\n+    assert(specializedMap1.contains(\"a\"))\n+    assert(!specializedMap1.contains(\"c\"))\n+    assert(Some(specializedMap1(\"a\")).contains(0L))\n+    assert(Some(specializedMap1(\"b\")).contains(0L))\n+    assert(Some(specializedMap1(\"c\")).contains(0L))"
  }, {
    "author": {
      "login": "10110346"
    },
    "body": "if the data type is in `@specialized annotation`  , and the `key` is not be contained ,the `map(key)` will  return 0\r\nif the data type is not  in `@specialized annotation`  , and the `key` is  not be contained ,the `map(key)` will  return null",
    "commit": "9346112c8e94b4755ae07ea926997acc7b595937",
    "createdAt": "2018-08-27T08:08:11Z",
    "diffHunk": "@@ -194,4 +194,42 @@ class OpenHashMapSuite extends SparkFunSuite with Matchers {\n     val numInvalidValues = map.iterator.count(_._2 == 0)\n     assertResult(0)(numInvalidValues)\n   }\n+\n+  test(\"distinguish between the 0/0.0/0L and null\") {\n+    val specializedMap1 = new OpenHashMap[String, Long]\n+    specializedMap1(\"a\") = null.asInstanceOf[Long]\n+    specializedMap1(\"b\") = 0L\n+    assert(specializedMap1.contains(\"a\"))\n+    assert(!specializedMap1.contains(\"c\"))\n+    assert(Some(specializedMap1(\"a\")).contains(0L))\n+    assert(Some(specializedMap1(\"b\")).contains(0L))\n+    assert(Some(specializedMap1(\"c\")).contains(0L))"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "ah, I see. So, can you describe more in the description?",
    "commit": "9346112c8e94b4755ae07ea926997acc7b595937",
    "createdAt": "2018-08-27T08:24:45Z",
    "diffHunk": "@@ -194,4 +194,42 @@ class OpenHashMapSuite extends SparkFunSuite with Matchers {\n     val numInvalidValues = map.iterator.count(_._2 == 0)\n     assertResult(0)(numInvalidValues)\n   }\n+\n+  test(\"distinguish between the 0/0.0/0L and null\") {\n+    val specializedMap1 = new OpenHashMap[String, Long]\n+    specializedMap1(\"a\") = null.asInstanceOf[Long]\n+    specializedMap1(\"b\") = 0L\n+    assert(specializedMap1.contains(\"a\"))\n+    assert(!specializedMap1.contains(\"c\"))\n+    assert(Some(specializedMap1(\"a\")).contains(0L))\n+    assert(Some(specializedMap1(\"b\")).contains(0L))\n+    assert(Some(specializedMap1(\"c\")).contains(0L))"
  }, {
    "author": {
      "login": "10110346"
    },
    "body": "ok , i will add it",
    "commit": "9346112c8e94b4755ae07ea926997acc7b595937",
    "createdAt": "2018-08-27T08:31:51Z",
    "diffHunk": "@@ -194,4 +194,42 @@ class OpenHashMapSuite extends SparkFunSuite with Matchers {\n     val numInvalidValues = map.iterator.count(_._2 == 0)\n     assertResult(0)(numInvalidValues)\n   }\n+\n+  test(\"distinguish between the 0/0.0/0L and null\") {\n+    val specializedMap1 = new OpenHashMap[String, Long]\n+    specializedMap1(\"a\") = null.asInstanceOf[Long]\n+    specializedMap1(\"b\") = 0L\n+    assert(specializedMap1.contains(\"a\"))\n+    assert(!specializedMap1.contains(\"c\"))\n+    assert(Some(specializedMap1(\"a\")).contains(0L))\n+    assert(Some(specializedMap1(\"b\")).contains(0L))\n+    assert(Some(specializedMap1(\"c\")).contains(0L))"
  }],
  "prId": 22241
}]