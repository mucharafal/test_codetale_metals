[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: spaces around `{`\n",
    "commit": "3447bb995b53c4d93154328c7c7c06e08a5ec9b9",
    "createdAt": "2015-04-07T21:45:58Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.util\n+\n+import scala.util.Random\n+\n+import org.scalatest.{FunSuite, Matchers}\n+\n+import org.apache.spark.network.buffer.WrappedLargeByteBuffer\n+\n+class LargeByteBufferOutputStreamSuite extends FunSuite with Matchers {\n+\n+  test(\"merged buffers for < 2GB\") {\n+    val out = new LargeByteBufferOutputStream(10)\n+    val bytes = new Array[Byte](100)\n+    Random.nextBytes(bytes)\n+    out.write(bytes)\n+\n+    val buffer = out.largeBuffer\n+    buffer.position() should be (0)\n+    buffer.size() should be (100)\n+    val nioBuffer = buffer.asByteBuffer()\n+    nioBuffer.position() should be (0)\n+    nioBuffer.capacity() should be (100)\n+    nioBuffer.limit() should be (100)\n+\n+    val read = new Array[Byte](100)\n+    buffer.get(read, 0, 100)\n+    read should be (bytes)\n+\n+    buffer.rewind()\n+    nioBuffer.get(read)\n+    read should be (bytes)\n+  }\n+\n+  test(\"chunking\") {\n+    val out = new LargeByteBufferOutputStream(10)\n+    val bytes = new Array[Byte](100)\n+    Random.nextBytes(bytes)\n+    out.write(bytes)\n+\n+    (10 to 100 by 10).foreach{chunkSize =>"
  }],
  "prId": 5400
}]