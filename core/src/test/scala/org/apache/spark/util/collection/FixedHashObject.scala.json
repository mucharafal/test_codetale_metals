[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Although this very technically changes semantics, given the clear and specific purpose of this class, I don't think it hurts to define reasonable equality semantics instead of leaving it to reference equality.\n",
    "commit": "ba5633c6ad42f110428540e0a4f1de9eb67b35aa",
    "createdAt": "2016-04-18T16:54:21Z",
    "diffHunk": "@@ -22,4 +22,8 @@ package org.apache.spark.util.collection\n  */\n case class FixedHashObject(v: Int, h: Int) extends Serializable {\n   override def hashCode(): Int = h\n+  override def equals(other: Any): Boolean = other match {",
    "line": 4
  }, {
    "author": {
      "login": "joan38"
    },
    "body": "Actually if we do call `super.equals()` it fails tests as case classes have there implementation of equals so we need to rewrite the same equals back again.\n",
    "commit": "ba5633c6ad42f110428540e0a4f1de9eb67b35aa",
    "createdAt": "2016-04-18T17:02:52Z",
    "diffHunk": "@@ -22,4 +22,8 @@ package org.apache.spark.util.collection\n  */\n case class FixedHashObject(v: Int, h: Int) extends Serializable {\n   override def hashCode(): Int = h\n+  override def equals(other: Any): Boolean = other match {",
    "line": 4
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Aha you're right about that. Right, this actually represents no behavior change.\n",
    "commit": "ba5633c6ad42f110428540e0a4f1de9eb67b35aa",
    "createdAt": "2016-04-18T17:09:37Z",
    "diffHunk": "@@ -22,4 +22,8 @@ package org.apache.spark.util.collection\n  */\n case class FixedHashObject(v: Int, h: Int) extends Serializable {\n   override def hashCode(): Int = h\n+  override def equals(other: Any): Boolean = other match {",
    "line": 4
  }],
  "prId": 12157
}]