[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Currently, this adds the new value at the end. Can we move this to `Best/Avg Time(ms)` group? For example, `Best/Avg/Stdev Time(ms)`?\r\n```\r\nLimiting:                    Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative    Stdev (ms)\r\n--------------------------------------------------------------------------------------------------\r\nTop-level column                   231 /  240          4.3         230.7       1.0X            11\r\nNested column                     1833 / 1957          0.5        1833.1       0.1X            68\r\n```",
    "commit": "47990f47113b016005e6f2e9f858d9d96ec9cbf9",
    "createdAt": "2019-02-28T05:42:46Z",
    "diffHunk": "@@ -111,16 +111,17 @@ private[spark] class Benchmark(\n     // The results are going to be processor specific so it is useful to include that.\n     out.println(Benchmark.getJVMOSInfo())\n     out.println(Benchmark.getProcessorName())\n-    out.printf(\"%-40s %16s %12s %13s %10s\\n\", name + \":\", \"Best/Avg Time(ms)\", \"Rate(M/s)\",\n-      \"Per Row(ns)\", \"Relative\")\n-    out.println(\"-\" * 96)\n+    out.printf(\"%-40s %16s %12s %13s %10s %13s\\n\", name + \":\", \"Best/Avg Time(ms)\", \"Rate(M/s)\",\n+      \"Per Row(ns)\", \"Relative\", \"Stdev (ms)\")"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "I guess `Best/Avg/Stdev (ms)` will be enough because we use `Per Row(ns)` already.",
    "commit": "47990f47113b016005e6f2e9f858d9d96ec9cbf9",
    "createdAt": "2019-02-28T05:43:57Z",
    "diffHunk": "@@ -111,16 +111,17 @@ private[spark] class Benchmark(\n     // The results are going to be processor specific so it is useful to include that.\n     out.println(Benchmark.getJVMOSInfo())\n     out.println(Benchmark.getProcessorName())\n-    out.printf(\"%-40s %16s %12s %13s %10s\\n\", name + \":\", \"Best/Avg Time(ms)\", \"Rate(M/s)\",\n-      \"Per Row(ns)\", \"Relative\")\n-    out.println(\"-\" * 96)\n+    out.printf(\"%-40s %16s %12s %13s %10s %13s\\n\", name + \":\", \"Best/Avg Time(ms)\", \"Rate(M/s)\",\n+      \"Per Row(ns)\", \"Relative\", \"Stdev (ms)\")"
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "@dongjoon-hyun I thought about this. But then the readability of the numbers might be worse.\r\nHow about make each of them a single column? E.g. \r\n`Best Time(ms)    Avg Time(ms)    Stdev Time(ms) `\r\nI don't have a strong preference here.",
    "commit": "47990f47113b016005e6f2e9f858d9d96ec9cbf9",
    "createdAt": "2019-02-28T10:20:14Z",
    "diffHunk": "@@ -111,16 +111,17 @@ private[spark] class Benchmark(\n     // The results are going to be processor specific so it is useful to include that.\n     out.println(Benchmark.getJVMOSInfo())\n     out.println(Benchmark.getProcessorName())\n-    out.printf(\"%-40s %16s %12s %13s %10s\\n\", name + \":\", \"Best/Avg Time(ms)\", \"Rate(M/s)\",\n-      \"Per Row(ns)\", \"Relative\")\n-    out.println(\"-\" * 96)\n+    out.printf(\"%-40s %16s %12s %13s %10s %13s\\n\", name + \":\", \"Best/Avg Time(ms)\", \"Rate(M/s)\",\n+      \"Per Row(ns)\", \"Relative\", \"Stdev (ms)\")"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "If we're going to add it, it doesn't make sense to do it separately at the end. I think best, avg, and stdev should be their own columns now.",
    "commit": "47990f47113b016005e6f2e9f858d9d96ec9cbf9",
    "createdAt": "2019-02-28T14:59:11Z",
    "diffHunk": "@@ -111,16 +111,17 @@ private[spark] class Benchmark(\n     // The results are going to be processor specific so it is useful to include that.\n     out.println(Benchmark.getJVMOSInfo())\n     out.println(Benchmark.getProcessorName())\n-    out.printf(\"%-40s %16s %12s %13s %10s\\n\", name + \":\", \"Best/Avg Time(ms)\", \"Rate(M/s)\",\n-      \"Per Row(ns)\", \"Relative\")\n-    out.println(\"-\" * 96)\n+    out.printf(\"%-40s %16s %12s %13s %10s %13s\\n\", name + \":\", \"Best/Avg Time(ms)\", \"Rate(M/s)\",\n+      \"Per Row(ns)\", \"Relative\", \"Stdev (ms)\")"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "I got it, @srowen .",
    "commit": "47990f47113b016005e6f2e9f858d9d96ec9cbf9",
    "createdAt": "2019-02-28T17:22:06Z",
    "diffHunk": "@@ -111,16 +111,17 @@ private[spark] class Benchmark(\n     // The results are going to be processor specific so it is useful to include that.\n     out.println(Benchmark.getJVMOSInfo())\n     out.println(Benchmark.getProcessorName())\n-    out.printf(\"%-40s %16s %12s %13s %10s\\n\", name + \":\", \"Best/Avg Time(ms)\", \"Rate(M/s)\",\n-      \"Per Row(ns)\", \"Relative\")\n-    out.println(\"-\" * 96)\n+    out.printf(\"%-40s %16s %12s %13s %10s %13s\\n\", name + \":\", \"Best/Avg Time(ms)\", \"Rate(M/s)\",\n+      \"Per Row(ns)\", \"Relative\", \"Stdev (ms)\")"
  }, {
    "author": {
      "login": "yifeih"
    },
    "body": "Yup, I can separate it and place it after \"avg\" and before \"rate\"",
    "commit": "47990f47113b016005e6f2e9f858d9d96ec9cbf9",
    "createdAt": "2019-02-28T20:29:55Z",
    "diffHunk": "@@ -111,16 +111,17 @@ private[spark] class Benchmark(\n     // The results are going to be processor specific so it is useful to include that.\n     out.println(Benchmark.getJVMOSInfo())\n     out.println(Benchmark.getProcessorName())\n-    out.printf(\"%-40s %16s %12s %13s %10s\\n\", name + \":\", \"Best/Avg Time(ms)\", \"Rate(M/s)\",\n-      \"Per Row(ns)\", \"Relative\")\n-    out.println(\"-\" * 96)\n+    out.printf(\"%-40s %16s %12s %13s %10s %13s\\n\", name + \":\", \"Best/Avg Time(ms)\", \"Rate(M/s)\",\n+      \"Per Row(ns)\", \"Relative\", \"Stdev (ms)\")"
  }, {
    "author": {
      "login": "yifeih"
    },
    "body": "ok it looks like this now:\r\n```\r\n[info] agg w/o group:                            Best Time(ms)   Avg Time(ms)   Stdev(ms)    Rate(M/s)   Per Row(ns)   Relative\r\n[info] ------------------------------------------------------------------------------------------------------------------------\r\n[info] agg w/o group wholestage off                      43309          43591         283         48.4          20.7       1.0X\r\n[info] agg w/o group wholestage on                        1032           1111         111       2032.4           0.5      42.0X\r\n```",
    "commit": "47990f47113b016005e6f2e9f858d9d96ec9cbf9",
    "createdAt": "2019-02-28T21:35:00Z",
    "diffHunk": "@@ -111,16 +111,17 @@ private[spark] class Benchmark(\n     // The results are going to be processor specific so it is useful to include that.\n     out.println(Benchmark.getJVMOSInfo())\n     out.println(Benchmark.getProcessorName())\n-    out.printf(\"%-40s %16s %12s %13s %10s\\n\", name + \":\", \"Best/Avg Time(ms)\", \"Rate(M/s)\",\n-      \"Per Row(ns)\", \"Relative\")\n-    out.println(\"-\" * 96)\n+    out.printf(\"%-40s %16s %12s %13s %10s %13s\\n\", name + \":\", \"Best/Avg Time(ms)\", \"Rate(M/s)\",\n+      \"Per Row(ns)\", \"Relative\", \"Stdev (ms)\")"
  }],
  "prId": 23914
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Not that it really matters, but `(time - avg) * (time - avg)` is fine here and faster than pow.\r\nSuper nit but I'd suggest it's more reasonable to use the sample rather than population stdev: divide by `runTimes.size - 1`. I suppose this means also checking that there are at least 2 runs.",
    "commit": "47990f47113b016005e6f2e9f858d9d96ec9cbf9",
    "createdAt": "2019-02-28T14:58:26Z",
    "diffHunk": "@@ -158,7 +159,8 @@ private[spark] class Benchmark(\n     // scalastyle:on\n     val best = runTimes.min\n     val avg = runTimes.sum / runTimes.size\n-    Result(avg / 1000000.0, num / (best / 1000.0), best / 1000000.0)\n+    val stdev = math.sqrt(runTimes.map(time => math.pow(time - avg, 2)).sum / runTimes.size)"
  }, {
    "author": {
      "login": "yifeih"
    },
    "body": "Ah ok, I agree with you on both. If there aren't enough runs, should we just put \"N/A\" then? ",
    "commit": "47990f47113b016005e6f2e9f858d9d96ec9cbf9",
    "createdAt": "2019-02-28T20:24:46Z",
    "diffHunk": "@@ -158,7 +159,8 @@ private[spark] class Benchmark(\n     // scalastyle:on\n     val best = runTimes.min\n     val avg = runTimes.sum / runTimes.size\n-    Result(avg / 1000000.0, num / (best / 1000.0), best / 1000000.0)\n+    val stdev = math.sqrt(runTimes.map(time => math.pow(time - avg, 2)).sum / runTimes.size)"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "You can assume (or assert) that there was at least 1 benchmarking run, or none of the metrics mean anything. (maybe it's already asserted)\r\n\r\nWhile the sample stdev is not really defined for 1 run, \"0\" is fine.",
    "commit": "47990f47113b016005e6f2e9f858d9d96ec9cbf9",
    "createdAt": "2019-02-28T20:58:10Z",
    "diffHunk": "@@ -158,7 +159,8 @@ private[spark] class Benchmark(\n     // scalastyle:on\n     val best = runTimes.min\n     val avg = runTimes.sum / runTimes.size\n-    Result(avg / 1000000.0, num / (best / 1000.0), best / 1000000.0)\n+    val stdev = math.sqrt(runTimes.map(time => math.pow(time - avg, 2)).sum / runTimes.size)"
  }, {
    "author": {
      "login": "yifeih"
    },
    "body": "I don't think it's asserted anywhere. i'll add it",
    "commit": "47990f47113b016005e6f2e9f858d9d96ec9cbf9",
    "createdAt": "2019-02-28T21:45:11Z",
    "diffHunk": "@@ -158,7 +159,8 @@ private[spark] class Benchmark(\n     // scalastyle:on\n     val best = runTimes.min\n     val avg = runTimes.sum / runTimes.size\n-    Result(avg / 1000000.0, num / (best / 1000.0), best / 1000000.0)\n+    val stdev = math.sqrt(runTimes.map(time => math.pow(time - avg, 2)).sum / runTimes.size)"
  }],
  "prId": 23914
}]