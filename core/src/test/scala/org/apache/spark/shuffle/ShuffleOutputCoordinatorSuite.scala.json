[{
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "`id` -> `mapId`?\n",
    "commit": "80e037dcb731a918d516eb02c12440d8ba3e71a7",
    "createdAt": "2015-11-04T22:54:48Z",
    "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.shuffle\n+\n+import java.io.{File, FileInputStream, FileOutputStream}\n+\n+import org.scalatest.BeforeAndAfterEach\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.scheduler.MapStatus\n+import org.apache.spark.serializer.{JavaSerializer, SerializerInstance}\n+import org.apache.spark.storage.BlockManagerId\n+import org.apache.spark.util.Utils\n+\n+class ShuffleOutputCoordinatorSuite extends SparkFunSuite with BeforeAndAfterEach {\n+\n+  var tempDir: File = _\n+  var mapStatusFile: File = _\n+  // use the \"port\" as a way to distinguish mapstatuses, just for the test\n+  def mapStatus(id: Int): MapStatus = MapStatus(BlockManagerId(\"1\", \"a.b.c\", id), Array(0L, 1L))\n+  def ser: SerializerInstance = new JavaSerializer(new SparkConf()).newInstance()\n+\n+  override def beforeEach(): Unit = {\n+    tempDir = Utils.createTempDir()\n+    mapStatusFile = File.createTempFile(\"shuffle\", \".mapstatus\", tempDir)\n+    mapStatusFile.delete()\n+  }\n+\n+  override def afterEach(): Unit = {\n+    Utils.deleteRecursively(tempDir)\n+  }\n+\n+  private def writeFile(filename: String, data: Int): File = {\n+    val f = new File(tempDir, filename)\n+    val out = new FileOutputStream(f)\n+    out.write(data)\n+    out.close()\n+    f\n+  }\n+\n+  private def verifyFiles(successfulAttempt: Int): Unit = {\n+    (0 until 3).foreach { idx =>\n+      val exp = successfulAttempt* 3 + idx\n+      val file = new File(tempDir, s\"d$idx\")\n+      withClue(s\"checking dest file $file\") {\n+        assert(file.length === 1)\n+        val in = new FileInputStream(file)\n+        assert(in.read() === exp)\n+        in.close()\n+\n+      }\n+    }\n+  }\n+\n+  private def generateAttempt(attempt: Int): Seq[TmpDestShuffleFile] = {\n+    (0 until 3).map { idx =>\n+      val j = attempt * 3 + idx\n+      TmpDestShuffleFile(writeFile(s\"t$j\", j), new File(tempDir, s\"d$idx\"))\n+    }\n+  }\n+\n+  private def commit(files: Seq[TmpDestShuffleFile], id: Int): (Boolean, MapStatus) = {"
  }],
  "prId": 9214
}]