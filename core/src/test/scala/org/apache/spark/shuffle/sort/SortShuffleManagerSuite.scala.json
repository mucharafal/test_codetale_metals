[{
  "comments": [{
    "author": {
      "login": "Ngone51"
    },
    "body": "Under what scenario will ```mapSideCombine``` be ```false```, but an ```aggregator ```  set ?",
    "commit": "e409c4fecc6c80ed33b6dd8d3ac69bf7edbe0cb2",
    "createdAt": "2018-03-01T02:49:30Z",
    "diffHunk": "@@ -85,6 +85,14 @@ class SortShuffleManagerSuite extends SparkFunSuite with Matchers {\n       mapSideCombine = false\n     )))\n \n+    // We support serialized shuffle if we do not need to do map-side aggregation\n+    assert(canUseSerializedShuffle(shuffleDep(\n+      partitioner = new HashPartitioner(2),\n+      serializer = kryo,\n+      keyOrdering = None,\n+      aggregator = Some(mock(classOf[Aggregator[Any, Any, Any]])),\n+      mapSideCombine = false",
    "line": 10
  }, {
    "author": {
      "login": "10110346"
    },
    "body": "You can see this code: `def groupByKey(partitioner: Partitioner): RDD[(K, Iterable[V])]`",
    "commit": "e409c4fecc6c80ed33b6dd8d3ac69bf7edbe0cb2",
    "createdAt": "2018-03-01T03:07:44Z",
    "diffHunk": "@@ -85,6 +85,14 @@ class SortShuffleManagerSuite extends SparkFunSuite with Matchers {\n       mapSideCombine = false\n     )))\n \n+    // We support serialized shuffle if we do not need to do map-side aggregation\n+    assert(canUseSerializedShuffle(shuffleDep(\n+      partitioner = new HashPartitioner(2),\n+      serializer = kryo,\n+      keyOrdering = None,\n+      aggregator = Some(mock(classOf[Aggregator[Any, Any, Any]])),\n+      mapSideCombine = false",
    "line": 10
  }],
  "prId": 20576
}]