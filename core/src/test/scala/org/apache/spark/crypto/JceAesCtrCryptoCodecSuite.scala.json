[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: sort\n",
    "commit": "3f8927fe1bae322fa2e5dbcf35ffdda111245d18",
    "createdAt": "2015-04-07T23:25:20Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import java.io.{ByteArrayInputStream, BufferedOutputStream, ByteArrayOutputStream}"
  }],
  "prId": 5307
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: need empty line at end of file (scalastyle will complain about this)\n",
    "commit": "3f8927fe1bae322fa2e5dbcf35ffdda111245d18",
    "createdAt": "2015-04-07T23:25:51Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import java.io.{ByteArrayInputStream, BufferedOutputStream, ByteArrayOutputStream}\n+import java.security.SecureRandom\n+\n+import org.apache.spark.{SparkConf, Logging}\n+import org.scalatest.FunSuite\n+import com.intel.chimera.{CryptoInputStream, CryptoOutputStream, JceAesCtrCryptoCodec, CryptoCodec}\n+\n+/**\n+ * test JceAesCtrCryptoCodec\n+ */\n+class JceAesCtrCryptoCodecSuite extends FunSuite with Logging {\n+\n+  test(\"TestCryptoCodecSuite\"){\n+    val random: SecureRandom = new SecureRandom\n+    val dataLen: Int = 10000000\n+    val inputData: Array[Byte] = new Array[Byte](dataLen)\n+    val outputData: Array[Byte] = new Array[Byte](dataLen)\n+    random.nextBytes(inputData)\n+    // encrypt\n+    val sparkConf:SparkConf = new SparkConf()\n+    val codec: CryptoCodec =  new JceAesCtrCryptoCodec()\n+    val aos: ByteArrayOutputStream = new ByteArrayOutputStream\n+    val bos: BufferedOutputStream = new BufferedOutputStream(aos)\n+    val key: Array[Byte] = new Array[Byte](16)\n+    val iv: Array[Byte] = new Array[Byte](16)\n+    random.nextBytes(key)\n+    random.nextBytes(iv)\n+\n+    val cos: CryptoOutputStream = new CryptoOutputStream(bos, codec, 1024, key, iv)\n+    cos.write(inputData, 0, inputData.length)\n+    cos.flush\n+    // decrypt\n+    val cis: CryptoInputStream = new CryptoInputStream(new ByteArrayInputStream(aos.toByteArray),\n+      codec, 1024, key, iv)\n+    var readLen: Int = 0\n+    var outOffset: Int = 0\n+    while (readLen < dataLen) {\n+      val n: Int = cis.read(outputData, outOffset, outputData.length - outOffset)\n+      if (n >= 0) {\n+        readLen += n\n+        outOffset += n\n+      }\n+    }\n+    var i: Int = 0\n+    for(i <- 0 until dataLen )\n+    {\n+      if (inputData(i) != outputData(i)) {\n+        logInfo(s\"decrypt failed:$i\")\n+      }\n+    }\n+  }\n+}",
    "line": 69
  }],
  "prId": 5307
}]