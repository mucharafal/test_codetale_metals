[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "just do `!sc.killExecutor`\n",
    "commit": "030581501f54f4d1052f673f2e4a25f94fb61455",
    "createdAt": "2015-11-18T23:15:36Z",
    "diffHunk": "@@ -395,8 +395,8 @@ class StandaloneDynamicAllocationSuite\n     }\n \n     var apps = getApplications()\n-    // kill executor 1\n-    assert(sc.killExecutor(executors.head))\n+    // kill executor 1, and actually nothing to kill\n+    assert(sc.killExecutor(executors.head) === false)"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "why is there actually nothing to kill?\n",
    "commit": "030581501f54f4d1052f673f2e4a25f94fb61455",
    "createdAt": "2015-11-18T23:15:59Z",
    "diffHunk": "@@ -395,8 +395,8 @@ class StandaloneDynamicAllocationSuite\n     }\n \n     var apps = getApplications()\n-    // kill executor 1\n-    assert(sc.killExecutor(executors.head))\n+    // kill executor 1, and actually nothing to kill\n+    assert(sc.killExecutor(executors.head) === false)"
  }, {
    "author": {
      "login": "GraceH"
    },
    "body": "because this one is killed in replacement part. \n\n``` java\nassert(executors.size === 2)\n    // kill executor 1, and replace it\n    assert(sc.killAndReplaceExecutor(executors.head)) //executors.head is killed here with replace = true.\n```\n",
    "commit": "030581501f54f4d1052f673f2e4a25f94fb61455",
    "createdAt": "2015-11-19T00:36:43Z",
    "diffHunk": "@@ -395,8 +395,8 @@ class StandaloneDynamicAllocationSuite\n     }\n \n     var apps = getApplications()\n-    // kill executor 1\n-    assert(sc.killExecutor(executors.head))\n+    // kill executor 1, and actually nothing to kill\n+    assert(sc.killExecutor(executors.head) === false)"
  }],
  "prId": 9796
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "I think this may be a bigger problem. This is supposed to be `true` because it's a new executor so we should be able to kill it. I think it's the way this test is set up that makes this `false`, because the driver doesn't wait for new executors to come up. We might need to do some more mocking here to simulate the new executor coming up.\n",
    "commit": "030581501f54f4d1052f673f2e4a25f94fb61455",
    "createdAt": "2015-11-19T19:00:45Z",
    "diffHunk": "@@ -395,8 +395,8 @@ class StandaloneDynamicAllocationSuite\n     }\n \n     var apps = getApplications()\n-    // kill executor 1\n-    assert(sc.killExecutor(executors.head))\n+    // kill executor 1, and actually nothing to kill\n+    assert(!sc.killExecutor(executors.head))"
  }, {
    "author": {
      "login": "GraceH"
    },
    "body": "@andrewor14  The executors.head is assigned beforehand. for example, you have two executor ID {27,28}. Then, the first one(id 27) is killed with replacement. But I guess the newly created executor cannot be with the same ID. After that, you try to kill the header executor (id 27), it should return empty list (since 27 has been in the pendingToRemove list). Am I right?\n",
    "commit": "030581501f54f4d1052f673f2e4a25f94fb61455",
    "createdAt": "2015-11-19T22:47:53Z",
    "diffHunk": "@@ -395,8 +395,8 @@ class StandaloneDynamicAllocationSuite\n     }\n \n     var apps = getApplications()\n-    // kill executor 1\n-    assert(sc.killExecutor(executors.head))\n+    // kill executor 1, and actually nothing to kill\n+    assert(!sc.killExecutor(executors.head))"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "no, the idea is more like the following:\n- you start with executors {27, 28}\n- you kill and replace 27, so you end up with executors {28, 29}\n- now you want to kill 28, this should succeed (but currently it doesn't in the tests)\n",
    "commit": "030581501f54f4d1052f673f2e4a25f94fb61455",
    "createdAt": "2015-11-19T22:58:51Z",
    "diffHunk": "@@ -395,8 +395,8 @@ class StandaloneDynamicAllocationSuite\n     }\n \n     var apps = getApplications()\n-    // kill executor 1\n-    assert(sc.killExecutor(executors.head))\n+    // kill executor 1, and actually nothing to kill\n+    assert(!sc.killExecutor(executors.head))"
  }, {
    "author": {
      "login": "GraceH"
    },
    "body": "if so, we should not kill excutors.head(27). it should be excutor(1). am I right?\n",
    "commit": "030581501f54f4d1052f673f2e4a25f94fb61455",
    "createdAt": "2015-11-19T23:42:52Z",
    "diffHunk": "@@ -395,8 +395,8 @@ class StandaloneDynamicAllocationSuite\n     }\n \n     var apps = getApplications()\n-    // kill executor 1\n-    assert(sc.killExecutor(executors.head))\n+    // kill executor 1, and actually nothing to kill\n+    assert(!sc.killExecutor(executors.head))"
  }, {
    "author": {
      "login": "GraceH"
    },
    "body": "according to my understanding, the 1st case tries to kill 27. the 2nd one is to kill 28. that is why the first one causes nothing to happen. the latter case actually kills the executor successfully.\n\nbtw, we donot change the 'val executors' after the first assignment.\n",
    "commit": "030581501f54f4d1052f673f2e4a25f94fb61455",
    "createdAt": "2015-11-19T23:51:25Z",
    "diffHunk": "@@ -395,8 +395,8 @@ class StandaloneDynamicAllocationSuite\n     }\n \n     var apps = getApplications()\n-    // kill executor 1\n-    assert(sc.killExecutor(executors.head))\n+    // kill executor 1, and actually nothing to kill\n+    assert(!sc.killExecutor(executors.head))"
  }, {
    "author": {
      "login": "GraceH"
    },
    "body": "@andrewor14 you can find there are two test cases.  I guess the second one is that you want.\n",
    "commit": "030581501f54f4d1052f673f2e4a25f94fb61455",
    "createdAt": "2015-11-24T01:04:22Z",
    "diffHunk": "@@ -395,8 +395,8 @@ class StandaloneDynamicAllocationSuite\n     }\n \n     var apps = getApplications()\n-    // kill executor 1\n-    assert(sc.killExecutor(executors.head))\n+    // kill executor 1, and actually nothing to kill\n+    assert(!sc.killExecutor(executors.head))"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "let's move the discussion to the main thread\n",
    "commit": "030581501f54f4d1052f673f2e4a25f94fb61455",
    "createdAt": "2015-11-25T20:06:30Z",
    "diffHunk": "@@ -395,8 +395,8 @@ class StandaloneDynamicAllocationSuite\n     }\n \n     var apps = getApplications()\n-    // kill executor 1\n-    assert(sc.killExecutor(executors.head))\n+    // kill executor 1, and actually nothing to kill\n+    assert(!sc.killExecutor(executors.head))"
  }],
  "prId": 9796
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "why not just compare the `Seq`? E.g. `val executorIdsAfter = getExecutorIds(sc)`\n",
    "commit": "030581501f54f4d1052f673f2e4a25f94fb61455",
    "createdAt": "2015-11-26T01:47:31Z",
    "diffHunk": "@@ -386,17 +386,21 @@ class StandaloneDynamicAllocationSuite\n     // the driver refuses to kill executors it does not know about\n     syncExecutors(sc)\n     val executors = getExecutorIds(sc)\n+    val executorIdsBefore = executors.head\n     assert(executors.size === 2)\n     // kill executor 1, and replace it\n     assert(sc.killAndReplaceExecutor(executors.head))\n     eventually(timeout(10.seconds), interval(10.millis)) {\n       val apps = getApplications()\n       assert(apps.head.executors.size === 2)\n+      val executorIdsAfter = getExecutorIds(sc).head"
  }],
  "prId": 9796
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "this may need to change. I think after killing an executor here the size should be 1, not 2.\n",
    "commit": "030581501f54f4d1052f673f2e4a25f94fb61455",
    "createdAt": "2015-11-26T01:48:03Z",
    "diffHunk": "@@ -386,17 +386,21 @@ class StandaloneDynamicAllocationSuite\n     // the driver refuses to kill executors it does not know about\n     syncExecutors(sc)\n     val executors = getExecutorIds(sc)\n+    val executorIdsBefore = executors.head\n     assert(executors.size === 2)\n     // kill executor 1, and replace it\n     assert(sc.killAndReplaceExecutor(executors.head))\n     eventually(timeout(10.seconds), interval(10.millis)) {\n       val apps = getApplications()\n       assert(apps.head.executors.size === 2)\n+      val executorIdsAfter = getExecutorIds(sc).head\n+      // make sure the old executors head has been killedAndReplaced.\n+      assert(executorIdsBefore != executorIdsAfter)\n     }\n \n     var apps = getApplications()\n-    // kill executor 1\n-    assert(sc.killExecutor(executors.head))\n+    // kill executor 1, and actually nothing to kill\n+    assert(!sc.killExecutor(executors.head))\n     apps = getApplications()\n     assert(apps.head.executors.size === 2)"
  }, {
    "author": {
      "login": "GraceH"
    },
    "body": "since the first attempt is to kill {27}, nothing happens. The executors.size should be fine with 2. \n",
    "commit": "030581501f54f4d1052f673f2e4a25f94fb61455",
    "createdAt": "2015-11-26T01:51:16Z",
    "diffHunk": "@@ -386,17 +386,21 @@ class StandaloneDynamicAllocationSuite\n     // the driver refuses to kill executors it does not know about\n     syncExecutors(sc)\n     val executors = getExecutorIds(sc)\n+    val executorIdsBefore = executors.head\n     assert(executors.size === 2)\n     // kill executor 1, and replace it\n     assert(sc.killAndReplaceExecutor(executors.head))\n     eventually(timeout(10.seconds), interval(10.millis)) {\n       val apps = getApplications()\n       assert(apps.head.executors.size === 2)\n+      val executorIdsAfter = getExecutorIds(sc).head\n+      // make sure the old executors head has been killedAndReplaced.\n+      assert(executorIdsBefore != executorIdsAfter)\n     }\n \n     var apps = getApplications()\n-    // kill executor 1\n-    assert(sc.killExecutor(executors.head))\n+    // kill executor 1, and actually nothing to kill\n+    assert(!sc.killExecutor(executors.head))\n     apps = getApplications()\n     assert(apps.head.executors.size === 2)"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "what? I thought we want to kill 28 here. We already killed (and replaced) 27.\n",
    "commit": "030581501f54f4d1052f673f2e4a25f94fb61455",
    "createdAt": "2015-11-26T02:16:31Z",
    "diffHunk": "@@ -386,17 +386,21 @@ class StandaloneDynamicAllocationSuite\n     // the driver refuses to kill executors it does not know about\n     syncExecutors(sc)\n     val executors = getExecutorIds(sc)\n+    val executorIdsBefore = executors.head\n     assert(executors.size === 2)\n     // kill executor 1, and replace it\n     assert(sc.killAndReplaceExecutor(executors.head))\n     eventually(timeout(10.seconds), interval(10.millis)) {\n       val apps = getApplications()\n       assert(apps.head.executors.size === 2)\n+      val executorIdsAfter = getExecutorIds(sc).head\n+      // make sure the old executors head has been killedAndReplaced.\n+      assert(executorIdsBefore != executorIdsAfter)\n     }\n \n     var apps = getApplications()\n-    // kill executor 1\n-    assert(sc.killExecutor(executors.head))\n+    // kill executor 1, and actually nothing to kill\n+    assert(!sc.killExecutor(executors.head))\n     apps = getApplications()\n     assert(apps.head.executors.size === 2)"
  }, {
    "author": {
      "login": "GraceH"
    },
    "body": "since we didn't change the `executors` (essentially it is the `executorIdsBefore`)  after the previous assignment. it is still {27}.  `executors(1) == 28`.\n",
    "commit": "030581501f54f4d1052f673f2e4a25f94fb61455",
    "createdAt": "2015-11-26T02:20:37Z",
    "diffHunk": "@@ -386,17 +386,21 @@ class StandaloneDynamicAllocationSuite\n     // the driver refuses to kill executors it does not know about\n     syncExecutors(sc)\n     val executors = getExecutorIds(sc)\n+    val executorIdsBefore = executors.head\n     assert(executors.size === 2)\n     // kill executor 1, and replace it\n     assert(sc.killAndReplaceExecutor(executors.head))\n     eventually(timeout(10.seconds), interval(10.millis)) {\n       val apps = getApplications()\n       assert(apps.head.executors.size === 2)\n+      val executorIdsAfter = getExecutorIds(sc).head\n+      // make sure the old executors head has been killedAndReplaced.\n+      assert(executorIdsBefore != executorIdsAfter)\n     }\n \n     var apps = getApplications()\n-    // kill executor 1\n-    assert(sc.killExecutor(executors.head))\n+    // kill executor 1, and actually nothing to kill\n+    assert(!sc.killExecutor(executors.head))\n     apps = getApplications()\n     assert(apps.head.executors.size === 2)"
  }, {
    "author": {
      "login": "GraceH"
    },
    "body": "That is why killing nothing, and executors.size == 2. Since the previous 27 was killed. \nThe real kill ({28}) is tested in the following case.\n",
    "commit": "030581501f54f4d1052f673f2e4a25f94fb61455",
    "createdAt": "2015-11-26T02:22:34Z",
    "diffHunk": "@@ -386,17 +386,21 @@ class StandaloneDynamicAllocationSuite\n     // the driver refuses to kill executors it does not know about\n     syncExecutors(sc)\n     val executors = getExecutorIds(sc)\n+    val executorIdsBefore = executors.head\n     assert(executors.size === 2)\n     // kill executor 1, and replace it\n     assert(sc.killAndReplaceExecutor(executors.head))\n     eventually(timeout(10.seconds), interval(10.millis)) {\n       val apps = getApplications()\n       assert(apps.head.executors.size === 2)\n+      val executorIdsAfter = getExecutorIds(sc).head\n+      // make sure the old executors head has been killedAndReplaced.\n+      assert(executorIdsBefore != executorIdsAfter)\n     }\n \n     var apps = getApplications()\n-    // kill executor 1\n-    assert(sc.killExecutor(executors.head))\n+    // kill executor 1, and actually nothing to kill\n+    assert(!sc.killExecutor(executors.head))\n     apps = getApplications()\n     assert(apps.head.executors.size === 2)"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "we should find a way to change the `executors` list. Right now it's totally arbitrary that we kill the second executor but not the first. Anyone else other than us will be confused when he/she reads this code\n",
    "commit": "030581501f54f4d1052f673f2e4a25f94fb61455",
    "createdAt": "2015-12-16T02:44:01Z",
    "diffHunk": "@@ -386,17 +386,21 @@ class StandaloneDynamicAllocationSuite\n     // the driver refuses to kill executors it does not know about\n     syncExecutors(sc)\n     val executors = getExecutorIds(sc)\n+    val executorIdsBefore = executors.head\n     assert(executors.size === 2)\n     // kill executor 1, and replace it\n     assert(sc.killAndReplaceExecutor(executors.head))\n     eventually(timeout(10.seconds), interval(10.millis)) {\n       val apps = getApplications()\n       assert(apps.head.executors.size === 2)\n+      val executorIdsAfter = getExecutorIds(sc).head\n+      // make sure the old executors head has been killedAndReplaced.\n+      assert(executorIdsBefore != executorIdsAfter)\n     }\n \n     var apps = getApplications()\n-    // kill executor 1\n-    assert(sc.killExecutor(executors.head))\n+    // kill executor 1, and actually nothing to kill\n+    assert(!sc.killExecutor(executors.head))\n     apps = getApplications()\n     assert(apps.head.executors.size === 2)"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "in other words, the goal here is to kill `executors.head` but have that be 28, and still have all the asserts passing.\n",
    "commit": "030581501f54f4d1052f673f2e4a25f94fb61455",
    "createdAt": "2015-12-16T02:44:32Z",
    "diffHunk": "@@ -386,17 +386,21 @@ class StandaloneDynamicAllocationSuite\n     // the driver refuses to kill executors it does not know about\n     syncExecutors(sc)\n     val executors = getExecutorIds(sc)\n+    val executorIdsBefore = executors.head\n     assert(executors.size === 2)\n     // kill executor 1, and replace it\n     assert(sc.killAndReplaceExecutor(executors.head))\n     eventually(timeout(10.seconds), interval(10.millis)) {\n       val apps = getApplications()\n       assert(apps.head.executors.size === 2)\n+      val executorIdsAfter = getExecutorIds(sc).head\n+      // make sure the old executors head has been killedAndReplaced.\n+      assert(executorIdsBefore != executorIdsAfter)\n     }\n \n     var apps = getApplications()\n-    // kill executor 1\n-    assert(sc.killExecutor(executors.head))\n+    // kill executor 1, and actually nothing to kill\n+    assert(!sc.killExecutor(executors.head))\n     apps = getApplications()\n     assert(apps.head.executors.size === 2)"
  }, {
    "author": {
      "login": "GraceH"
    },
    "body": "how about this?\n\n``` java\n  val executorKilledAndReplaced = executors.head // The previous head which is killed and replaced.\n  assert(!sc.killExecutor(executorKilledAndReplaced))\n  val executorToKill = executors(1) // The valid executor which is still working\n  assert(sc.killExecutor(executorToKill))\n  val executorAppended = executors(2) // The newly added executor (replacement)\n  assert(sc.killExecutor(executorAppended))\n```\n",
    "commit": "030581501f54f4d1052f673f2e4a25f94fb61455",
    "createdAt": "2015-12-16T03:16:51Z",
    "diffHunk": "@@ -386,17 +386,21 @@ class StandaloneDynamicAllocationSuite\n     // the driver refuses to kill executors it does not know about\n     syncExecutors(sc)\n     val executors = getExecutorIds(sc)\n+    val executorIdsBefore = executors.head\n     assert(executors.size === 2)\n     // kill executor 1, and replace it\n     assert(sc.killAndReplaceExecutor(executors.head))\n     eventually(timeout(10.seconds), interval(10.millis)) {\n       val apps = getApplications()\n       assert(apps.head.executors.size === 2)\n+      val executorIdsAfter = getExecutorIds(sc).head\n+      // make sure the old executors head has been killedAndReplaced.\n+      assert(executorIdsBefore != executorIdsAfter)\n     }\n \n     var apps = getApplications()\n-    // kill executor 1\n-    assert(sc.killExecutor(executors.head))\n+    // kill executor 1, and actually nothing to kill\n+    assert(!sc.killExecutor(executors.head))\n     apps = getApplications()\n     assert(apps.head.executors.size === 2)"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "That still uses the old `executors` list. All we need to do is refresh it from `sc`: https://github.com/GraceH/spark/pull/2\n",
    "commit": "030581501f54f4d1052f673f2e4a25f94fb61455",
    "createdAt": "2015-12-16T03:44:26Z",
    "diffHunk": "@@ -386,17 +386,21 @@ class StandaloneDynamicAllocationSuite\n     // the driver refuses to kill executors it does not know about\n     syncExecutors(sc)\n     val executors = getExecutorIds(sc)\n+    val executorIdsBefore = executors.head\n     assert(executors.size === 2)\n     // kill executor 1, and replace it\n     assert(sc.killAndReplaceExecutor(executors.head))\n     eventually(timeout(10.seconds), interval(10.millis)) {\n       val apps = getApplications()\n       assert(apps.head.executors.size === 2)\n+      val executorIdsAfter = getExecutorIds(sc).head\n+      // make sure the old executors head has been killedAndReplaced.\n+      assert(executorIdsBefore != executorIdsAfter)\n     }\n \n     var apps = getApplications()\n-    // kill executor 1\n-    assert(sc.killExecutor(executors.head))\n+    // kill executor 1, and actually nothing to kill\n+    assert(!sc.killExecutor(executors.head))\n     apps = getApplications()\n     assert(apps.head.executors.size === 2)"
  }],
  "prId": 9796
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "why not just kill `newExecutors.head`? It should still pass. Right now it's kind of arbitrary why we pick the second one.\n",
    "commit": "030581501f54f4d1052f673f2e4a25f94fb61455",
    "createdAt": "2015-12-18T21:11:40Z",
    "diffHunk": "@@ -386,23 +386,28 @@ class StandaloneDynamicAllocationSuite\n     // the driver refuses to kill executors it does not know about\n     syncExecutors(sc)\n     val executors = getExecutorIds(sc)\n+    val executorIdsBefore = executors.toSet\n     assert(executors.size === 2)\n-    // kill executor 1, and replace it\n+    // kill and replace an executor\n     assert(sc.killAndReplaceExecutor(executors.head))\n     eventually(timeout(10.seconds), interval(10.millis)) {\n       val apps = getApplications()\n       assert(apps.head.executors.size === 2)\n+      val executorIdsAfter = getExecutorIds(sc).toSet\n+      // make sure the executor was killed and replaced\n+      assert(executorIdsBefore != executorIdsAfter)\n     }\n \n-    var apps = getApplications()\n-    // kill executor 1\n-    assert(sc.killExecutor(executors.head))\n-    apps = getApplications()\n-    assert(apps.head.executors.size === 2)\n-    assert(apps.head.getExecutorLimit === 2)\n-    // kill executor 2\n-    assert(sc.killExecutor(executors(1)))\n-    apps = getApplications()\n+    // kill old executor (which is killedAndReplaced) should fail\n+    assert(!sc.killExecutor(executors.head))\n+\n+    // refresh executors list\n+    val newExecutors = getExecutorIds(sc)\n+    syncExecutors(sc)\n+\n+    // kill newly created executor and do not replace it\n+    assert(sc.killExecutor(newExecutors(1)))",
    "line": 43
  }],
  "prId": 9796
}]