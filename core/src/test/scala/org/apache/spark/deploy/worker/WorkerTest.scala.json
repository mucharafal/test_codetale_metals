[{
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "I think we should name this `WorkerSuite`, since that's more consistent with the naming convention in the rest of our tests.\n",
    "commit": "9ef4ed13bdbee4363ba27d2e6bf5abad15ab7c84",
    "createdAt": "2015-01-19T00:11:34Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.worker\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.Command\n+import org.scalatest.{Matchers, FunSuite}\n+\n+class WorkerTest extends FunSuite with Matchers {"
  }],
  "prId": 3571
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Just curious, but was there a reason why you used `theSameElementsInOrderAs` instead of `should be Seq(..)`?  I had to look up the former to confirm what it did.\n",
    "commit": "9ef4ed13bdbee4363ba27d2e6bf5abad15ab7c84",
    "createdAt": "2015-01-19T00:19:06Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.worker\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.Command\n+import org.scalatest.{Matchers, FunSuite}\n+\n+class WorkerTest extends FunSuite with Matchers {\n+\n+  def cmd(javaOpts: String*) = Command(\"\", Seq.empty, Map.empty, Seq.empty, Seq.empty, Seq(javaOpts:_*))\n+  def conf(opts: (String, String)*) = new SparkConf(loadDefaults = false).setAll(opts)\n+\n+  test(\"test isUseLocalNodeSSLConfig\") {\n+    Worker.isUseLocalNodeSSLConfig(cmd(\"-Dasdf=dfgh\")) shouldBe false\n+    Worker.isUseLocalNodeSSLConfig(cmd(\"-Dspark.ssl.useNodeLocalConf=true\")) shouldBe true\n+    Worker.isUseLocalNodeSSLConfig(cmd(\"-Dspark.ssl.useNodeLocalConf=false\")) shouldBe false\n+    Worker.isUseLocalNodeSSLConfig(cmd(\"-Dspark.ssl.useNodeLocalConf=\")) shouldBe false\n+  }\n+\n+  test(\"test maybeUpdateSSLSettings\") {\n+    Worker.maybeUpdateSSLSettings(\n+      cmd(\"-Dasdf=dfgh\", \"-Dspark.ssl.opt1=x\"),\n+      conf(\"spark.ssl.opt1\" -> \"y\", \"spark.ssl.opt2\" -> \"z\"))\n+        .javaOpts should contain theSameElementsInOrderAs Seq(\n+          \"-Dasdf=dfgh\", \"-Dspark.ssl.opt1=x\")\n+\n+    Worker.maybeUpdateSSLSettings(\n+      cmd(\"-Dspark.ssl.useNodeLocalConf=false\", \"-Dspark.ssl.opt1=x\"),\n+      conf(\"spark.ssl.opt1\" -> \"y\", \"spark.ssl.opt2\" -> \"z\"))\n+        .javaOpts should contain theSameElementsInOrderAs Seq("
  }, {
    "author": {
      "login": "jacek-lewandowski"
    },
    "body": "It is just more generic - in this test i'm interested only whether the elements in the resulting collection are the same and are in the same order - not what exact collection implementation is used.\n",
    "commit": "9ef4ed13bdbee4363ba27d2e6bf5abad15ab7c84",
    "createdAt": "2015-01-22T22:53:20Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.worker\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.Command\n+import org.scalatest.{Matchers, FunSuite}\n+\n+class WorkerTest extends FunSuite with Matchers {\n+\n+  def cmd(javaOpts: String*) = Command(\"\", Seq.empty, Map.empty, Seq.empty, Seq.empty, Seq(javaOpts:_*))\n+  def conf(opts: (String, String)*) = new SparkConf(loadDefaults = false).setAll(opts)\n+\n+  test(\"test isUseLocalNodeSSLConfig\") {\n+    Worker.isUseLocalNodeSSLConfig(cmd(\"-Dasdf=dfgh\")) shouldBe false\n+    Worker.isUseLocalNodeSSLConfig(cmd(\"-Dspark.ssl.useNodeLocalConf=true\")) shouldBe true\n+    Worker.isUseLocalNodeSSLConfig(cmd(\"-Dspark.ssl.useNodeLocalConf=false\")) shouldBe false\n+    Worker.isUseLocalNodeSSLConfig(cmd(\"-Dspark.ssl.useNodeLocalConf=\")) shouldBe false\n+  }\n+\n+  test(\"test maybeUpdateSSLSettings\") {\n+    Worker.maybeUpdateSSLSettings(\n+      cmd(\"-Dasdf=dfgh\", \"-Dspark.ssl.opt1=x\"),\n+      conf(\"spark.ssl.opt1\" -> \"y\", \"spark.ssl.opt2\" -> \"z\"))\n+        .javaOpts should contain theSameElementsInOrderAs Seq(\n+          \"-Dasdf=dfgh\", \"-Dspark.ssl.opt1=x\")\n+\n+    Worker.maybeUpdateSSLSettings(\n+      cmd(\"-Dspark.ssl.useNodeLocalConf=false\", \"-Dspark.ssl.opt1=x\"),\n+      conf(\"spark.ssl.opt1\" -> \"y\", \"spark.ssl.opt2\" -> \"z\"))\n+        .javaOpts should contain theSameElementsInOrderAs Seq("
  }, {
    "author": {
      "login": "jacek-lewandowski"
    },
    "body": "of course... I can change it if it doesn't conform the requirements of Spark test suites\n",
    "commit": "9ef4ed13bdbee4363ba27d2e6bf5abad15ab7c84",
    "createdAt": "2015-01-22T22:53:54Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.worker\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.Command\n+import org.scalatest.{Matchers, FunSuite}\n+\n+class WorkerTest extends FunSuite with Matchers {\n+\n+  def cmd(javaOpts: String*) = Command(\"\", Seq.empty, Map.empty, Seq.empty, Seq.empty, Seq(javaOpts:_*))\n+  def conf(opts: (String, String)*) = new SparkConf(loadDefaults = false).setAll(opts)\n+\n+  test(\"test isUseLocalNodeSSLConfig\") {\n+    Worker.isUseLocalNodeSSLConfig(cmd(\"-Dasdf=dfgh\")) shouldBe false\n+    Worker.isUseLocalNodeSSLConfig(cmd(\"-Dspark.ssl.useNodeLocalConf=true\")) shouldBe true\n+    Worker.isUseLocalNodeSSLConfig(cmd(\"-Dspark.ssl.useNodeLocalConf=false\")) shouldBe false\n+    Worker.isUseLocalNodeSSLConfig(cmd(\"-Dspark.ssl.useNodeLocalConf=\")) shouldBe false\n+  }\n+\n+  test(\"test maybeUpdateSSLSettings\") {\n+    Worker.maybeUpdateSSLSettings(\n+      cmd(\"-Dasdf=dfgh\", \"-Dspark.ssl.opt1=x\"),\n+      conf(\"spark.ssl.opt1\" -> \"y\", \"spark.ssl.opt2\" -> \"z\"))\n+        .javaOpts should contain theSameElementsInOrderAs Seq(\n+          \"-Dasdf=dfgh\", \"-Dspark.ssl.opt1=x\")\n+\n+    Worker.maybeUpdateSSLSettings(\n+      cmd(\"-Dspark.ssl.useNodeLocalConf=false\", \"-Dspark.ssl.opt1=x\"),\n+      conf(\"spark.ssl.opt1\" -> \"y\", \"spark.ssl.opt2\" -> \"z\"))\n+        .javaOpts should contain theSameElementsInOrderAs Seq("
  }],
  "prId": 3571
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Similarly, can this just be `.javaOpts.toSet should be Set(...` ?\n",
    "commit": "9ef4ed13bdbee4363ba27d2e6bf5abad15ab7c84",
    "createdAt": "2015-01-19T00:19:26Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.worker\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.Command\n+import org.scalatest.{Matchers, FunSuite}\n+\n+class WorkerTest extends FunSuite with Matchers {\n+\n+  def cmd(javaOpts: String*) = Command(\"\", Seq.empty, Map.empty, Seq.empty, Seq.empty, Seq(javaOpts:_*))\n+  def conf(opts: (String, String)*) = new SparkConf(loadDefaults = false).setAll(opts)\n+\n+  test(\"test isUseLocalNodeSSLConfig\") {\n+    Worker.isUseLocalNodeSSLConfig(cmd(\"-Dasdf=dfgh\")) shouldBe false\n+    Worker.isUseLocalNodeSSLConfig(cmd(\"-Dspark.ssl.useNodeLocalConf=true\")) shouldBe true\n+    Worker.isUseLocalNodeSSLConfig(cmd(\"-Dspark.ssl.useNodeLocalConf=false\")) shouldBe false\n+    Worker.isUseLocalNodeSSLConfig(cmd(\"-Dspark.ssl.useNodeLocalConf=\")) shouldBe false\n+  }\n+\n+  test(\"test maybeUpdateSSLSettings\") {\n+    Worker.maybeUpdateSSLSettings(\n+      cmd(\"-Dasdf=dfgh\", \"-Dspark.ssl.opt1=x\"),\n+      conf(\"spark.ssl.opt1\" -> \"y\", \"spark.ssl.opt2\" -> \"z\"))\n+        .javaOpts should contain theSameElementsInOrderAs Seq(\n+          \"-Dasdf=dfgh\", \"-Dspark.ssl.opt1=x\")\n+\n+    Worker.maybeUpdateSSLSettings(\n+      cmd(\"-Dspark.ssl.useNodeLocalConf=false\", \"-Dspark.ssl.opt1=x\"),\n+      conf(\"spark.ssl.opt1\" -> \"y\", \"spark.ssl.opt2\" -> \"z\"))\n+        .javaOpts should contain theSameElementsInOrderAs Seq(\n+          \"-Dspark.ssl.useNodeLocalConf=false\", \"-Dspark.ssl.opt1=x\")\n+\n+    Worker.maybeUpdateSSLSettings(\n+      cmd(\"-Dspark.ssl.useNodeLocalConf=true\", \"-Dspark.ssl.opt1=x\"),\n+      conf(\"spark.ssl.opt1\" -> \"y\", \"spark.ssl.opt2\" -> \"z\"))\n+        .javaOpts should contain theSameElementsAs Seq("
  }],
  "prId": 3571
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Nit: put the Scalatest import in its own section.\n",
    "commit": "9ef4ed13bdbee4363ba27d2e6bf5abad15ab7c84",
    "createdAt": "2015-01-19T00:20:42Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.worker\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.deploy.Command\n+import org.scalatest.{Matchers, FunSuite}"
  }],
  "prId": 3571
}]