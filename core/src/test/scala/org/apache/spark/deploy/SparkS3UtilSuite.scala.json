[{
  "comments": [{
    "author": {
      "login": "steveloughran"
    },
    "body": "go on, spell Splittable correctly, even if the mis-spelling is hard coded in the Hadoop API\n",
    "commit": "5bdd92443c33fc2ec72fabb141c878cf3488d1f4",
    "createdAt": "2015-12-09T11:52:53Z",
    "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy\n+\n+import java.util.Date\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.hadoop.fs.{FileStatus, Path}\n+import org.apache.hadoop.mapred.{InputSplit, FileInputFormat, JobConf}\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class SparkS3UtilSuite extends SparkFunSuite {\n+  test(\"s3ListingEnabled function\") {\n+    val jobConf = new JobConf()\n+\n+    // Disabled by user\n+    SparkS3Util.sparkConf.set(\"spark.s3.bulk.listing.enabled\", \"false\")\n+    FileInputFormat.setInputPaths(jobConf, \"s3://bucket/dir/file\")\n+    assert(SparkS3Util.s3BulkListingEnabled(jobConf) == false)\n+\n+    // Input paths contain wildcards\n+    SparkS3Util.sparkConf.set(\"spark.s3.bulk.listing.enabled\", \"true\")\n+    FileInputFormat.setInputPaths(jobConf, \"s3://bucket/dir/*\")\n+    assert(SparkS3Util.s3BulkListingEnabled(jobConf) == false)\n+\n+    // Input paths copntain non-S3 files\n+    SparkS3Util.sparkConf.set(\"spark.s3.bulk.listing.enabled\", \"true\")\n+    FileInputFormat.setInputPaths(jobConf, \"file://dir/file\")\n+    assert(SparkS3Util.s3BulkListingEnabled(jobConf) == false)\n+  }\n+\n+  test(\"isSplitable function\") {",
    "line": 49
  }],
  "prId": 8512
}]