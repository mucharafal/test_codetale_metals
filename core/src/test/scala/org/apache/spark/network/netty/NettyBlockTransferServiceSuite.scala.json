[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "This seems flaky. Isn't the previous check enough? Otherwise, instead of `10` I'd use `1024` which is the actual limit in the code.\n",
    "commit": "3c2d6edfeb02488e176703e712373f88c2ba1037",
    "createdAt": "2015-04-20T17:49:08Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty\n+\n+import org.apache.spark.network.BlockDataManager\n+import org.apache.spark.{SecurityManager, SparkConf}\n+import org.mockito.Mockito.mock\n+import org.scalatest._\n+\n+class NettyBlockTransferServiceSuite extends FunSuite with BeforeAndAfterEach with ShouldMatchers {\n+  private var service0: NettyBlockTransferService = _\n+  private var service1: NettyBlockTransferService = _\n+\n+  override def afterEach() {\n+    if (service0 != null) {\n+      service0.close()\n+      service0 = null\n+    }\n+\n+    if (service1 != null) {\n+      service1.close()\n+      service1 = null\n+    }\n+  }\n+\n+  test(\"can bind to a random port\") {\n+    service0 = createService(port = 0)\n+    service0.port should not be 0\n+  }\n+\n+  test(\"can bind to two random ports\") {\n+    service0 = createService(port = 0)\n+    service1 = createService(port = 0)\n+    service0.port should not be service1.port\n+  }\n+\n+  test(\"can bind to a specific port\") {\n+    val port = 17634\n+    service0 = createService(port)\n+    service0.port should be >= port\n+    service0.port should be <= (port + 10) // avoid testing equality in case of simultaneous tests",
    "line": 56
  }, {
    "author": {
      "login": "aarondav"
    },
    "body": "I can increase the number no problem, though I guess we should use `Utils.portMaxRetries` instead. However, note that even 10 should be very unlikely to be hit, that would mean there's 5-10 concurrently running tests at this exact part of the build, or else we're very, very unlucky.\n",
    "commit": "3c2d6edfeb02488e176703e712373f88c2ba1037",
    "createdAt": "2015-04-20T19:38:12Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty\n+\n+import org.apache.spark.network.BlockDataManager\n+import org.apache.spark.{SecurityManager, SparkConf}\n+import org.mockito.Mockito.mock\n+import org.scalatest._\n+\n+class NettyBlockTransferServiceSuite extends FunSuite with BeforeAndAfterEach with ShouldMatchers {\n+  private var service0: NettyBlockTransferService = _\n+  private var service1: NettyBlockTransferService = _\n+\n+  override def afterEach() {\n+    if (service0 != null) {\n+      service0.close()\n+      service0 = null\n+    }\n+\n+    if (service1 != null) {\n+      service1.close()\n+      service1 = null\n+    }\n+  }\n+\n+  test(\"can bind to a random port\") {\n+    service0 = createService(port = 0)\n+    service0.port should not be 0\n+  }\n+\n+  test(\"can bind to two random ports\") {\n+    service0 = createService(port = 0)\n+    service1 = createService(port = 0)\n+    service0.port should not be service1.port\n+  }\n+\n+  test(\"can bind to a specific port\") {\n+    val port = 17634\n+    service0 = createService(port)\n+    service0.port should be >= port\n+    service0.port should be <= (port + 10) // avoid testing equality in case of simultaneous tests",
    "line": 56
  }],
  "prId": 5575
}]