[{
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "This regression test demonstrates the problem that this patch aims to fix.  This test has a client attempt to fetch from a block transfer service which has been configured to stall for a long period of time. The block fetch should fail with a read timeout exception, which has been configured to be relatively short.\n",
    "commit": "04da09c085764349ca618eb543627570da3775fe",
    "createdAt": "2015-07-24T22:51:14Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty\n+\n+import scala.concurrent.duration._\n+\n+import io.netty.handler.timeout.ReadTimeoutException\n+import org.mockito.Mockito._\n+import org.mockito.Matchers.any\n+import org.mockito.invocation.InvocationOnMock\n+import org.mockito.stubbing.Answer\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.{SparkConf, SecurityManager}\n+import org.apache.spark.network.BlockDataManager\n+import org.apache.spark.network.buffer.ManagedBuffer\n+import org.apache.spark.storage.ShuffleBlockId\n+import org.scalatest.concurrent.Timeouts\n+\n+class NettyBlockTransferTimeoutSuite extends FunSuite with Timeouts {\n+  test(\"read timeout\") {",
    "line": 36
  }],
  "prId": 7653
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "This shouldn't be so huge; minor typo.\n",
    "commit": "04da09c085764349ca618eb543627570da3775fe",
    "createdAt": "2015-07-24T22:51:23Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty\n+\n+import scala.concurrent.duration._\n+\n+import io.netty.handler.timeout.ReadTimeoutException\n+import org.mockito.Mockito._\n+import org.mockito.Matchers.any\n+import org.mockito.invocation.InvocationOnMock\n+import org.mockito.stubbing.Answer\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.{SparkConf, SecurityManager}\n+import org.apache.spark.network.BlockDataManager\n+import org.apache.spark.network.buffer.ManagedBuffer\n+import org.apache.spark.storage.ShuffleBlockId\n+import org.scalatest.concurrent.Timeouts\n+\n+class NettyBlockTransferTimeoutSuite extends FunSuite with Timeouts {\n+  test(\"read timeout\") {\n+    val conf = new SparkConf()\n+      .set(\"spark.app.id\", \"appId\")\n+      .set(\"spark.shuffle.io.readTimeout\", \"5\")\n+    val securityManager = new SecurityManager(conf)\n+    val bts = new NettyBlockTransferService(conf, securityManager, numCores = 1)\n+    val blockDataManager = mock(classOf[BlockDataManager], RETURNS_SMART_NULLS)\n+    when(blockDataManager.getBlockData(any())).thenAnswer(new Answer[ManagedBuffer] {\n+      override def answer(invocation: InvocationOnMock): ManagedBuffer = {\n+        Thread.sleep(30 * 10000)",
    "line": 45
  }],
  "prId": 7653
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Maybe bring this all the way down to 1s?\n",
    "commit": "04da09c085764349ca618eb543627570da3775fe",
    "createdAt": "2015-09-02T02:18:39Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty\n+\n+import scala.concurrent.duration._\n+\n+import io.netty.handler.timeout.ReadTimeoutException\n+import org.mockito.Mockito._\n+import org.mockito.Matchers.any\n+import org.mockito.invocation.InvocationOnMock\n+import org.mockito.stubbing.Answer\n+import org.scalatest.FunSuite\n+\n+import org.apache.spark.{SparkConf, SecurityManager}\n+import org.apache.spark.network.BlockDataManager\n+import org.apache.spark.network.buffer.ManagedBuffer\n+import org.apache.spark.storage.ShuffleBlockId\n+import org.scalatest.concurrent.Timeouts\n+\n+class NettyBlockTransferTimeoutSuite extends FunSuite with Timeouts {\n+  test(\"read timeout\") {\n+    val conf = new SparkConf()\n+      .set(\"spark.app.id\", \"appId\")\n+      .set(\"spark.shuffle.io.readTimeout\", \"5\")",
    "line": 39
  }],
  "prId": 7653
}]