[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "why do we create a thread here?",
    "commit": "da1aaac7cb1b0687ec2e19c5049b96e216f9dce2",
    "createdAt": "2019-01-21T09:21:15Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network\n+\n+import java.io.InputStream\n+import java.nio.ByteBuffer\n+\n+import scala.concurrent.Future\n+import scala.concurrent.duration._\n+import scala.reflect.ClassTag\n+\n+import org.scalatest.concurrent._\n+\n+import org.apache.spark.{SparkException, SparkFunSuite}\n+import org.apache.spark.network.buffer.ManagedBuffer\n+import org.apache.spark.network.shuffle.{BlockFetchingListener, DownloadFileManager}\n+import org.apache.spark.storage.{BlockId, StorageLevel}\n+\n+class BlockTransferServiceSuite extends SparkFunSuite with TimeLimits {\n+\n+  implicit val defaultSignaler: Signaler = ThreadSignaler\n+\n+  test(\"fetchBlockSync should not hang when BlockFetchingListener.onBlockFetchSuccess fails\") {\n+    // Create a mocked `BlockTransferService` to call `BlockFetchingListener.onBlockFetchSuccess`\n+    // with a bad `ManagedBuffer` which will trigger an exception in `onBlockFetchSuccess`.\n+    val blockTransferService = new BlockTransferService {\n+      override def init(blockDataManager: BlockDataManager): Unit = {}\n+\n+      override def close(): Unit = {}\n+\n+      override def port: Int = 0\n+\n+      override def hostName: String = \"localhost-unused\"\n+\n+      override def fetchBlocks(\n+          host: String,\n+          port: Int,\n+          execId: String,\n+          blockIds: Array[String],\n+          listener: BlockFetchingListener,\n+          tempFileManager: DownloadFileManager): Unit = {\n+        // Notify BlockFetchingListener with a bad ManagedBuffer asynchronously\n+        new Thread() {",
    "line": 58
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "Otherwise, BlockFetchingListener will be called in the same thread and fail at once before `Thread.awaitResult` is called. Then the test won't be able to reproduce the issue.",
    "commit": "da1aaac7cb1b0687ec2e19c5049b96e216f9dce2",
    "createdAt": "2019-01-22T04:16:42Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network\n+\n+import java.io.InputStream\n+import java.nio.ByteBuffer\n+\n+import scala.concurrent.Future\n+import scala.concurrent.duration._\n+import scala.reflect.ClassTag\n+\n+import org.scalatest.concurrent._\n+\n+import org.apache.spark.{SparkException, SparkFunSuite}\n+import org.apache.spark.network.buffer.ManagedBuffer\n+import org.apache.spark.network.shuffle.{BlockFetchingListener, DownloadFileManager}\n+import org.apache.spark.storage.{BlockId, StorageLevel}\n+\n+class BlockTransferServiceSuite extends SparkFunSuite with TimeLimits {\n+\n+  implicit val defaultSignaler: Signaler = ThreadSignaler\n+\n+  test(\"fetchBlockSync should not hang when BlockFetchingListener.onBlockFetchSuccess fails\") {\n+    // Create a mocked `BlockTransferService` to call `BlockFetchingListener.onBlockFetchSuccess`\n+    // with a bad `ManagedBuffer` which will trigger an exception in `onBlockFetchSuccess`.\n+    val blockTransferService = new BlockTransferService {\n+      override def init(blockDataManager: BlockDataManager): Unit = {}\n+\n+      override def close(): Unit = {}\n+\n+      override def port: Int = 0\n+\n+      override def hostName: String = \"localhost-unused\"\n+\n+      override def fetchBlocks(\n+          host: String,\n+          port: Int,\n+          execId: String,\n+          blockIds: Array[String],\n+          listener: BlockFetchingListener,\n+          tempFileManager: DownloadFileManager): Unit = {\n+        // Notify BlockFetchingListener with a bad ManagedBuffer asynchronously\n+        new Thread() {",
    "line": 58
  }],
  "prId": 23590
}]