[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "space before `{`\r\n\r\nAlso we prefer not to use `Matchers` anymore and instead just use `assert`s.",
    "commit": "6bdfe6d07b1ea155a51896dddcad2f0b13e115b1",
    "createdAt": "2019-04-30T16:50:16Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty\n+\n+import org.scalatest.Matchers\n+import org.scalatest.mockito.MockitoSugar\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.network.util.NettyUtils\n+\n+class SparkTransportConfSuite extends SparkFunSuite with MockitoSugar with Matchers{"
  }, {
    "author": {
      "login": "zjf2012"
    },
    "body": "@vanzin , updated, please check.",
    "commit": "6bdfe6d07b1ea155a51896dddcad2f0b13e115b1",
    "createdAt": "2019-05-06T03:10:10Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty\n+\n+import org.scalatest.Matchers\n+import org.scalatest.mockito.MockitoSugar\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.network.util.NettyUtils\n+\n+class SparkTransportConfSuite extends SparkFunSuite with MockitoSugar with Matchers{"
  }],
  "prId": 23560
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "You could merge this test with the above, since the setup is the same.",
    "commit": "6bdfe6d07b1ea155a51896dddcad2f0b13e115b1",
    "createdAt": "2019-04-30T16:52:51Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty\n+\n+import org.scalatest.Matchers\n+import org.scalatest.mockito.MockitoSugar\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.network.util.NettyUtils\n+\n+class SparkTransportConfSuite extends SparkFunSuite with MockitoSugar with Matchers{\n+  val module = \"rpc\"\n+  val serThreads = \"serverThreads\"\n+  val cliThreads = \"clientThreads\"\n+\n+  test(\"default value is get when neither role nor module is set\") {\n+    val numUsableCores = 4\n+    val conf = new SparkConf()\n+    val sparkTransportConf = SparkTransportConf.fromSparkConf(conf, module, numUsableCores, None)\n+    val expected = NettyUtils.defaultNumThreads(numUsableCores)\n+    val serActual = sparkTransportConf.get(s\"spark.$module.io.$serThreads\", \"\")\n+    val cliActual = sparkTransportConf.get(s\"spark.$module.io.$cliThreads\", \"\")\n+    serActual should equal(expected.toString)\n+    cliActual should equal(expected.toString)\n+  }\n+\n+  test(\"module value is get when role is not set\") {\n+    val numUsableCores = 3\n+    val serExpected = \"7\"\n+    val cliExpected = \"5\"\n+    val conf = new SparkConf()\n+      .set(s\"spark.$module.io.$serThreads\", serExpected)\n+      .set(s\"spark.$module.io.$cliThreads\", cliExpected)\n+    val sparkTransportConf = SparkTransportConf.fromSparkConf(conf, module, numUsableCores, None)\n+    val serActual = sparkTransportConf.get(s\"spark.$module.io.$serThreads\", \"\")\n+    val cliActual = sparkTransportConf.get(s\"spark.$module.io.$cliThreads\", \"\")\n+    serActual should equal(serExpected)\n+    cliActual should equal(cliExpected)\n+  }\n+\n+  test(\"role value is get when role is set\") {\n+    val role = Some(\"driver\")\n+    val numUsableCores = 10\n+    val serModule = \"7\"\n+    val cliModule = \"5\"\n+    val serExpected = \"8\"\n+    val cliExpected = \"6\"\n+    val conf = new SparkConf()\n+      .set(s\"spark.$module.io.$serThreads\", serModule)\n+      .set(s\"spark.$module.io.$cliThreads\", cliModule)\n+      .set(s\"spark.${role.get}.$module.io.$serThreads\", serExpected)\n+      .set(s\"spark.${role.get}.$module.io.$cliThreads\", cliExpected)\n+    val sparkTransportConf = SparkTransportConf.fromSparkConf(conf, module, numUsableCores, role)\n+    val serActual = sparkTransportConf.get(s\"spark.$module.io.$serThreads\", \"\")\n+    val cliActual = sparkTransportConf.get(s\"spark.$module.io.$cliThreads\", \"\")\n+    serActual should equal(serExpected)\n+    cliActual should equal(cliExpected)\n+  }\n+\n+  test(\"module value is get when role other than mine is set\") {"
  }, {
    "author": {
      "login": "zjf2012"
    },
    "body": "@vanzin , updated, please check.",
    "commit": "6bdfe6d07b1ea155a51896dddcad2f0b13e115b1",
    "createdAt": "2019-05-06T03:09:59Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty\n+\n+import org.scalatest.Matchers\n+import org.scalatest.mockito.MockitoSugar\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.network.util.NettyUtils\n+\n+class SparkTransportConfSuite extends SparkFunSuite with MockitoSugar with Matchers{\n+  val module = \"rpc\"\n+  val serThreads = \"serverThreads\"\n+  val cliThreads = \"clientThreads\"\n+\n+  test(\"default value is get when neither role nor module is set\") {\n+    val numUsableCores = 4\n+    val conf = new SparkConf()\n+    val sparkTransportConf = SparkTransportConf.fromSparkConf(conf, module, numUsableCores, None)\n+    val expected = NettyUtils.defaultNumThreads(numUsableCores)\n+    val serActual = sparkTransportConf.get(s\"spark.$module.io.$serThreads\", \"\")\n+    val cliActual = sparkTransportConf.get(s\"spark.$module.io.$cliThreads\", \"\")\n+    serActual should equal(expected.toString)\n+    cliActual should equal(expected.toString)\n+  }\n+\n+  test(\"module value is get when role is not set\") {\n+    val numUsableCores = 3\n+    val serExpected = \"7\"\n+    val cliExpected = \"5\"\n+    val conf = new SparkConf()\n+      .set(s\"spark.$module.io.$serThreads\", serExpected)\n+      .set(s\"spark.$module.io.$cliThreads\", cliExpected)\n+    val sparkTransportConf = SparkTransportConf.fromSparkConf(conf, module, numUsableCores, None)\n+    val serActual = sparkTransportConf.get(s\"spark.$module.io.$serThreads\", \"\")\n+    val cliActual = sparkTransportConf.get(s\"spark.$module.io.$cliThreads\", \"\")\n+    serActual should equal(serExpected)\n+    cliActual should equal(cliExpected)\n+  }\n+\n+  test(\"role value is get when role is set\") {\n+    val role = Some(\"driver\")\n+    val numUsableCores = 10\n+    val serModule = \"7\"\n+    val cliModule = \"5\"\n+    val serExpected = \"8\"\n+    val cliExpected = \"6\"\n+    val conf = new SparkConf()\n+      .set(s\"spark.$module.io.$serThreads\", serModule)\n+      .set(s\"spark.$module.io.$cliThreads\", cliModule)\n+      .set(s\"spark.${role.get}.$module.io.$serThreads\", serExpected)\n+      .set(s\"spark.${role.get}.$module.io.$cliThreads\", cliExpected)\n+    val sparkTransportConf = SparkTransportConf.fromSparkConf(conf, module, numUsableCores, role)\n+    val serActual = sparkTransportConf.get(s\"spark.$module.io.$serThreads\", \"\")\n+    val cliActual = sparkTransportConf.get(s\"spark.$module.io.$cliThreads\", \"\")\n+    serActual should equal(serExpected)\n+    cliActual should equal(cliExpected)\n+  }\n+\n+  test(\"module value is get when role other than mine is set\") {"
  }],
  "prId": 23560
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Test name is too long. Better:\r\n\r\n\"use correct configuration when both module and role configs are present\"",
    "commit": "6bdfe6d07b1ea155a51896dddcad2f0b13e115b1",
    "createdAt": "2019-05-06T18:08:54Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty\n+\n+import org.scalatest.Matchers\n+import org.scalatest.mockito.MockitoSugar\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.network.util.NettyUtils\n+\n+class SparkTransportConfSuite extends SparkFunSuite with MockitoSugar {\n+  val module = \"rpc\"\n+  val serThreads = \"serverThreads\"\n+  val cliThreads = \"clientThreads\"\n+\n+  test(\"default value is get when neither role nor module is set\") {\n+    val numUsableCores = 4\n+    val conf = new SparkConf()\n+    val sparkTransportConf = SparkTransportConf.fromSparkConf(conf, module, numUsableCores, None)\n+    val expected = NettyUtils.defaultNumThreads(numUsableCores)\n+    val serActual = sparkTransportConf.get(s\"spark.$module.io.$serThreads\", \"\")\n+    val cliActual = sparkTransportConf.get(s\"spark.$module.io.$cliThreads\", \"\")\n+    assert(serActual == expected.toString)\n+    assert(cliActual == expected.toString)\n+  }\n+\n+  test(\"module value is get when role is not set\") {\n+    val numUsableCores = 3\n+    val serExpected = \"7\"\n+    val cliExpected = \"5\"\n+    val conf = new SparkConf()\n+      .set(s\"spark.$module.io.$serThreads\", serExpected)\n+      .set(s\"spark.$module.io.$cliThreads\", cliExpected)\n+    val sparkTransportConf = SparkTransportConf.fromSparkConf(conf, module, numUsableCores, None)\n+    val serActual = sparkTransportConf.get(s\"spark.$module.io.$serThreads\", \"\")\n+    val cliActual = sparkTransportConf.get(s\"spark.$module.io.$cliThreads\", \"\")\n+    assert(serActual == serExpected)\n+    assert(cliActual == cliExpected)\n+  }\n+\n+  test(\"role value is get when role is set. \" +"
  }, {
    "author": {
      "login": "zjf2012"
    },
    "body": "@vanzin , updated. please check.",
    "commit": "6bdfe6d07b1ea155a51896dddcad2f0b13e115b1",
    "createdAt": "2019-05-07T01:29:09Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty\n+\n+import org.scalatest.Matchers\n+import org.scalatest.mockito.MockitoSugar\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.network.util.NettyUtils\n+\n+class SparkTransportConfSuite extends SparkFunSuite with MockitoSugar {\n+  val module = \"rpc\"\n+  val serThreads = \"serverThreads\"\n+  val cliThreads = \"clientThreads\"\n+\n+  test(\"default value is get when neither role nor module is set\") {\n+    val numUsableCores = 4\n+    val conf = new SparkConf()\n+    val sparkTransportConf = SparkTransportConf.fromSparkConf(conf, module, numUsableCores, None)\n+    val expected = NettyUtils.defaultNumThreads(numUsableCores)\n+    val serActual = sparkTransportConf.get(s\"spark.$module.io.$serThreads\", \"\")\n+    val cliActual = sparkTransportConf.get(s\"spark.$module.io.$cliThreads\", \"\")\n+    assert(serActual == expected.toString)\n+    assert(cliActual == expected.toString)\n+  }\n+\n+  test(\"module value is get when role is not set\") {\n+    val numUsableCores = 3\n+    val serExpected = \"7\"\n+    val cliExpected = \"5\"\n+    val conf = new SparkConf()\n+      .set(s\"spark.$module.io.$serThreads\", serExpected)\n+      .set(s\"spark.$module.io.$cliThreads\", cliExpected)\n+    val sparkTransportConf = SparkTransportConf.fromSparkConf(conf, module, numUsableCores, None)\n+    val serActual = sparkTransportConf.get(s\"spark.$module.io.$serThreads\", \"\")\n+    val cliActual = sparkTransportConf.get(s\"spark.$module.io.$cliThreads\", \"\")\n+    assert(serActual == serExpected)\n+    assert(cliActual == cliExpected)\n+  }\n+\n+  test(\"role value is get when role is set. \" +"
  }],
  "prId": 23560
}]