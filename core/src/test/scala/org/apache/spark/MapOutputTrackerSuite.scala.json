[{
  "comments": [{
    "author": {
      "login": "kayousterhout"
    },
    "body": "Can you do 2, 2, 3 as the sizes here? Otherwise this seems non-deterministic, since the two machines have equal sizes of data?\n",
    "commit": "492e25eec1722fc44d33166d7aa4fa55b7390e3d",
    "createdAt": "2015-06-04T23:55:22Z",
    "diffHunk": "@@ -205,4 +205,29 @@ class MapOutputTrackerSuite extends SparkFunSuite {\n //    masterTracker.stop() // this throws an exception\n     rpcEnv.shutdown()\n   }\n+\n+  test(\"getLocationsWithLargestOutputs with multiple outputs in same machine\") {\n+    val rpcEnv = createRpcEnv(\"test\")\n+    val tracker = new MapOutputTrackerMaster(conf)\n+    tracker.trackerEndpoint = rpcEnv.setupEndpoint(MapOutputTracker.ENDPOINT_NAME,\n+      new MapOutputTrackerMasterEndpoint(rpcEnv, tracker, conf))\n+    // Setup 3 map tasks\n+    // on hostA with output size 1\n+    // on hostA with output size 1\n+    // on hostB with output size 2"
  }, {
    "author": {
      "login": "shivaram"
    },
    "body": "Oh yes - sorry this should have been 2,2,3. Made it now\n",
    "commit": "492e25eec1722fc44d33166d7aa4fa55b7390e3d",
    "createdAt": "2015-06-05T01:37:15Z",
    "diffHunk": "@@ -205,4 +205,29 @@ class MapOutputTrackerSuite extends SparkFunSuite {\n //    masterTracker.stop() // this throws an exception\n     rpcEnv.shutdown()\n   }\n+\n+  test(\"getLocationsWithLargestOutputs with multiple outputs in same machine\") {\n+    val rpcEnv = createRpcEnv(\"test\")\n+    val tracker = new MapOutputTrackerMaster(conf)\n+    tracker.trackerEndpoint = rpcEnv.setupEndpoint(MapOutputTracker.ENDPOINT_NAME,\n+      new MapOutputTrackerMasterEndpoint(rpcEnv, tracker, conf))\n+    // Setup 3 map tasks\n+    // on hostA with output size 1\n+    // on hostA with output size 1\n+    // on hostB with output size 2"
  }],
  "prId": 6652
}, {
  "comments": [{
    "author": {
      "login": "kayousterhout"
    },
    "body": "Can you add comments to this test -- just one here saying \"When the threshold is 50%, only host A should be returned a preferred location\" and then below, \"When the threshold is only 20%, both hosts should be returned\"\n",
    "commit": "492e25eec1722fc44d33166d7aa4fa55b7390e3d",
    "createdAt": "2015-06-09T01:01:20Z",
    "diffHunk": "@@ -205,4 +205,36 @@ class MapOutputTrackerSuite extends SparkFunSuite {\n //    masterTracker.stop() // this throws an exception\n     rpcEnv.shutdown()\n   }\n+\n+  test(\"getLocationsWithLargestOutputs with multiple outputs in same machine\") {\n+    val rpcEnv = createRpcEnv(\"test\")\n+    val tracker = new MapOutputTrackerMaster(conf)\n+    tracker.trackerEndpoint = rpcEnv.setupEndpoint(MapOutputTracker.ENDPOINT_NAME,\n+      new MapOutputTrackerMasterEndpoint(rpcEnv, tracker, conf))\n+    // Setup 3 map tasks\n+    // on hostA with output size 2\n+    // on hostA with output size 2\n+    // on hostB with output size 3\n+    tracker.registerShuffle(10, 3)\n+    tracker.registerMapOutput(10, 0, MapStatus(BlockManagerId(\"a\", \"hostA\", 1000),\n+        Array(2L)))\n+    tracker.registerMapOutput(10, 1, MapStatus(BlockManagerId(\"a\", \"hostA\", 1000),\n+        Array(2L)))\n+    tracker.registerMapOutput(10, 2, MapStatus(BlockManagerId(\"b\", \"hostB\", 1000),\n+        Array(3L)))\n+\n+    val topLocs50 = tracker.getLocationsWithLargestOutputs(10, 0, 1, 0.5)"
  }, {
    "author": {
      "login": "shivaram"
    },
    "body": "Done\n",
    "commit": "492e25eec1722fc44d33166d7aa4fa55b7390e3d",
    "createdAt": "2015-06-09T01:11:29Z",
    "diffHunk": "@@ -205,4 +205,36 @@ class MapOutputTrackerSuite extends SparkFunSuite {\n //    masterTracker.stop() // this throws an exception\n     rpcEnv.shutdown()\n   }\n+\n+  test(\"getLocationsWithLargestOutputs with multiple outputs in same machine\") {\n+    val rpcEnv = createRpcEnv(\"test\")\n+    val tracker = new MapOutputTrackerMaster(conf)\n+    tracker.trackerEndpoint = rpcEnv.setupEndpoint(MapOutputTracker.ENDPOINT_NAME,\n+      new MapOutputTrackerMasterEndpoint(rpcEnv, tracker, conf))\n+    // Setup 3 map tasks\n+    // on hostA with output size 2\n+    // on hostA with output size 2\n+    // on hostB with output size 3\n+    tracker.registerShuffle(10, 3)\n+    tracker.registerMapOutput(10, 0, MapStatus(BlockManagerId(\"a\", \"hostA\", 1000),\n+        Array(2L)))\n+    tracker.registerMapOutput(10, 1, MapStatus(BlockManagerId(\"a\", \"hostA\", 1000),\n+        Array(2L)))\n+    tracker.registerMapOutput(10, 2, MapStatus(BlockManagerId(\"b\", \"hostB\", 1000),\n+        Array(3L)))\n+\n+    val topLocs50 = tracker.getLocationsWithLargestOutputs(10, 0, 1, 0.5)"
  }],
  "prId": 6652
}]