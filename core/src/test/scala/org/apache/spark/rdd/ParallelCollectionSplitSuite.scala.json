[{
  "comments": [{
    "author": {
      "login": "mateiz"
    },
    "body": "Space after ,\n",
    "commit": "e48f0187b03fbec34050a516c20be90487f5b6ce",
    "createdAt": "2014-06-02T00:31:58Z",
    "diffHunk": "@@ -111,6 +111,24 @@ class ParallelCollectionSplitSuite extends FunSuite with Checkers {\n     assert(slices.forall(_.isInstanceOf[Range]))\n   }\n \n+  test(\"identical slice sizes between Range and NumericRange\") {\n+    val r = ParallelCollectionRDD.slice(1 to 7, 4)\n+    val nr = ParallelCollectionRDD.slice(1L to 7L, 4)\n+    assert(r.size === 4)\n+    for (i <- 0 until r.size) {\n+      assert(r(i).size === nr(i).size)\n+    }\n+  }\n+\n+  test(\"identical slice sizes between List and NumericRange\") {\n+    val r = ParallelCollectionRDD.slice(List(1,2), 4)"
  }, {
    "author": {
      "login": "kanzhang"
    },
    "body": "Sure.\n",
    "commit": "e48f0187b03fbec34050a516c20be90487f5b6ce",
    "createdAt": "2014-06-02T00:35:23Z",
    "diffHunk": "@@ -111,6 +111,24 @@ class ParallelCollectionSplitSuite extends FunSuite with Checkers {\n     assert(slices.forall(_.isInstanceOf[Range]))\n   }\n \n+  test(\"identical slice sizes between Range and NumericRange\") {\n+    val r = ParallelCollectionRDD.slice(1 to 7, 4)\n+    val nr = ParallelCollectionRDD.slice(1L to 7L, 4)\n+    assert(r.size === 4)\n+    for (i <- 0 until r.size) {\n+      assert(r(i).size === nr(i).size)\n+    }\n+  }\n+\n+  test(\"identical slice sizes between List and NumericRange\") {\n+    val r = ParallelCollectionRDD.slice(List(1,2), 4)"
  }],
  "prId": 776
}]