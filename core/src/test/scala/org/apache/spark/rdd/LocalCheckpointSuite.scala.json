[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Use isEmpty or ===",
    "commit": "4c792b9cd09e8e41792a5c066d8a40fca6e17183",
    "createdAt": "2017-06-15T09:15:44Z",
    "diffHunk": "@@ -168,6 +172,10 @@ class LocalCheckpointSuite extends SparkFunSuite with LocalSparkContext {\n     // Collecting the RDD should now fail with an informative exception\n     val blockId = RDDBlockId(rdd.id, numPartitions - 1)\n     bmm.removeBlock(blockId)\n+    // Wait until the block has been removed successfully.\n+    eventually(timeout(1 seconds), interval(100 milliseconds)) {\n+      assert(bmm.getBlockStatus(blockId).size == 0)"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "@srowen, actually, do you maybe know why `===` is preferred over `==`? Up to my knowledge, `===` is preferred as it gives a better error message and I saw several comments saying so by few committers before.\r\n\r\nHowever, it seems some do not think so. I raised an issue about a year ago - https://github.com/databricks/scala-style-guide/issues/36 but I am still confused.",
    "commit": "4c792b9cd09e8e41792a5c066d8a40fca6e17183",
    "createdAt": "2017-06-15T12:46:25Z",
    "diffHunk": "@@ -168,6 +172,10 @@ class LocalCheckpointSuite extends SparkFunSuite with LocalSparkContext {\n     // Collecting the RDD should now fail with an informative exception\n     val blockId = RDDBlockId(rdd.id, numPartitions - 1)\n     bmm.removeBlock(blockId)\n+    // Wait until the block has been removed successfully.\n+    eventually(timeout(1 seconds), interval(100 milliseconds)) {\n+      assert(bmm.getBlockStatus(blockId).size == 0)"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I was just curious. `===` might be still preferred per the documentation.",
    "commit": "4c792b9cd09e8e41792a5c066d8a40fca6e17183",
    "createdAt": "2017-06-15T12:49:45Z",
    "diffHunk": "@@ -168,6 +172,10 @@ class LocalCheckpointSuite extends SparkFunSuite with LocalSparkContext {\n     // Collecting the RDD should now fail with an informative exception\n     val blockId = RDDBlockId(rdd.id, numPartitions - 1)\n     bmm.removeBlock(blockId)\n+    // Wait until the block has been removed successfully.\n+    eventually(timeout(1 seconds), interval(100 milliseconds)) {\n+      assert(bmm.getBlockStatus(blockId).size == 0)"
  }],
  "prId": 18314
}]