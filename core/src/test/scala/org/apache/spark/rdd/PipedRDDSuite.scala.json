[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Nit: `new Object()`",
    "commit": "be18ba7fe303e1d6a0101a2df1e2c84a48fc9d39",
    "createdAt": "2019-01-25T01:00:51Z",
    "diffHunk": "@@ -83,6 +84,29 @@ class PipedRDDSuite extends SparkFunSuite with SharedSparkContext {\n     }\n   }\n \n+  test(\"stdin writer thread should be exited when task is finished\") {\n+    assume(TestUtils.testCommandAvailable(\"cat\"))\n+    val nums = sc.makeRDD(Array(1, 2, 3, 4), 1).map { x =>\n+      val obj = new Object"
  }, {
    "author": {
      "login": "advancedxy"
    },
    "body": "Will fix",
    "commit": "be18ba7fe303e1d6a0101a2df1e2c84a48fc9d39",
    "createdAt": "2019-01-25T03:11:46Z",
    "diffHunk": "@@ -83,6 +84,29 @@ class PipedRDDSuite extends SparkFunSuite with SharedSparkContext {\n     }\n   }\n \n+  test(\"stdin writer thread should be exited when task is finished\") {\n+    assume(TestUtils.testCommandAvailable(\"cat\"))\n+    val nums = sc.makeRDD(Array(1, 2, 3, 4), 1).map { x =>\n+      val obj = new Object"
  }],
  "prId": 23638
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "nit: `val stderrWriterThread = find { _.getname ...` and `assert(stderrWriterThread.isEmpty)`",
    "commit": "be18ba7fe303e1d6a0101a2df1e2c84a48fc9d39",
    "createdAt": "2019-01-25T09:13:46Z",
    "diffHunk": "@@ -83,6 +84,29 @@ class PipedRDDSuite extends SparkFunSuite with SharedSparkContext {\n     }\n   }\n \n+  test(\"stdin writer thread should be exited when task is finished\") {\n+    assume(TestUtils.testCommandAvailable(\"cat\"))\n+    val nums = sc.makeRDD(Array(1, 2, 3, 4), 1).map { x =>\n+      val obj = new Object()\n+      obj.synchronized {\n+        obj.wait() // make the thread waits here.\n+      }\n+      x\n+    }\n+\n+    val piped = nums.pipe(Seq(\"cat\"))\n+\n+    val result = piped.mapPartitions(_ => Array.emptyIntArray.iterator)\n+\n+    assert(result.collect().length === 0)\n+\n+    // collect stderr writer threads\n+    val stderrWriterThreads = Thread.getAllStackTraces.keySet().asScala\n+      .filter { _.getName.startsWith(PipedRDD.STDIN_WRITER_THREAD_PREFIX) }"
  }, {
    "author": {
      "login": "advancedxy"
    },
    "body": "Will fix.",
    "commit": "be18ba7fe303e1d6a0101a2df1e2c84a48fc9d39",
    "createdAt": "2019-01-25T09:32:24Z",
    "diffHunk": "@@ -83,6 +84,29 @@ class PipedRDDSuite extends SparkFunSuite with SharedSparkContext {\n     }\n   }\n \n+  test(\"stdin writer thread should be exited when task is finished\") {\n+    assume(TestUtils.testCommandAvailable(\"cat\"))\n+    val nums = sc.makeRDD(Array(1, 2, 3, 4), 1).map { x =>\n+      val obj = new Object()\n+      obj.synchronized {\n+        obj.wait() // make the thread waits here.\n+      }\n+      x\n+    }\n+\n+    val piped = nums.pipe(Seq(\"cat\"))\n+\n+    val result = piped.mapPartitions(_ => Array.emptyIntArray.iterator)\n+\n+    assert(result.collect().length === 0)\n+\n+    // collect stderr writer threads\n+    val stderrWriterThreads = Thread.getAllStackTraces.keySet().asScala\n+      .filter { _.getName.startsWith(PipedRDD.STDIN_WRITER_THREAD_PREFIX) }"
  }],
  "prId": 23638
}]