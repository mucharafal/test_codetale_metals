[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Were these changes accidental?\n",
    "commit": "9e038d1b36798b4502581ffdef1d83782685725e",
    "createdAt": "2015-02-20T13:20:31Z",
    "diffHunk": "@@ -29,22 +29,42 @@ class JdbcRDDSuite extends FunSuite with BeforeAndAfter with LocalSparkContext {\n     Class.forName(\"org.apache.derby.jdbc.EmbeddedDriver\")\n     val conn = DriverManager.getConnection(\"jdbc:derby:target/JdbcRDDSuiteDb;create=true\")\n     try {\n-      val create = conn.createStatement\n-      create.execute(\"\"\"\n-        CREATE TABLE FOO(\n-          ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),\n-          DATA INTEGER\n-        )\"\"\")\n-      create.close()\n-      val insert = conn.prepareStatement(\"INSERT INTO FOO(DATA) VALUES(?)\")\n-      (1 to 100).foreach { i =>\n-        insert.setInt(1, i * 2)\n-        insert.executeUpdate\n+",
    "line": 15
  }, {
    "author": {
      "login": "hotou"
    },
    "body": "I just want to add a new test for this bug, is this not the right place to put it ?\n",
    "commit": "9e038d1b36798b4502581ffdef1d83782685725e",
    "createdAt": "2015-02-20T14:12:11Z",
    "diffHunk": "@@ -29,22 +29,42 @@ class JdbcRDDSuite extends FunSuite with BeforeAndAfter with LocalSparkContext {\n     Class.forName(\"org.apache.derby.jdbc.EmbeddedDriver\")\n     val conn = DriverManager.getConnection(\"jdbc:derby:target/JdbcRDDSuiteDb;create=true\")\n     try {\n-      val create = conn.createStatement\n-      create.execute(\"\"\"\n-        CREATE TABLE FOO(\n-          ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),\n-          DATA INTEGER\n-        )\"\"\")\n-      create.close()\n-      val insert = conn.prepareStatement(\"INSERT INTO FOO(DATA) VALUES(?)\")\n-      (1 to 100).foreach { i =>\n-        insert.setInt(1, i * 2)\n-        insert.executeUpdate\n+",
    "line": 15
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Yes but here it looks like you just indented existing code or something. The new test below looks right.\n",
    "commit": "9e038d1b36798b4502581ffdef1d83782685725e",
    "createdAt": "2015-02-20T14:47:56Z",
    "diffHunk": "@@ -29,22 +29,42 @@ class JdbcRDDSuite extends FunSuite with BeforeAndAfter with LocalSparkContext {\n     Class.forName(\"org.apache.derby.jdbc.EmbeddedDriver\")\n     val conn = DriverManager.getConnection(\"jdbc:derby:target/JdbcRDDSuiteDb;create=true\")\n     try {\n-      val create = conn.createStatement\n-      create.execute(\"\"\"\n-        CREATE TABLE FOO(\n-          ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),\n-          DATA INTEGER\n-        )\"\"\")\n-      create.close()\n-      val insert = conn.prepareStatement(\"INSERT INTO FOO(DATA) VALUES(?)\")\n-      (1 to 100).foreach { i =>\n-        insert.setInt(1, i * 2)\n-        insert.executeUpdate\n+",
    "line": 15
  }, {
    "author": {
      "login": "hotou"
    },
    "body": "Oh.. that's because I need to create a new table, and I put that and the old table creation in one single\ntry {\n ...\n} finally {\n   conn.close()\n}\n",
    "commit": "9e038d1b36798b4502581ffdef1d83782685725e",
    "createdAt": "2015-02-20T14:51:00Z",
    "diffHunk": "@@ -29,22 +29,42 @@ class JdbcRDDSuite extends FunSuite with BeforeAndAfter with LocalSparkContext {\n     Class.forName(\"org.apache.derby.jdbc.EmbeddedDriver\")\n     val conn = DriverManager.getConnection(\"jdbc:derby:target/JdbcRDDSuiteDb;create=true\")\n     try {\n-      val create = conn.createStatement\n-      create.execute(\"\"\"\n-        CREATE TABLE FOO(\n-          ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),\n-          DATA INTEGER\n-        )\"\"\")\n-      create.close()\n-      val insert = conn.prepareStatement(\"INSERT INTO FOO(DATA) VALUES(?)\")\n-      (1 to 100).foreach { i =>\n-        insert.setInt(1, i * 2)\n-        insert.executeUpdate\n+",
    "line": 15
  }],
  "prId": 4701
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "LGTM except can't we keep this catch block in common in the outer try block? I realize it would mean changing some of the variable names in the second block.\n",
    "commit": "9e038d1b36798b4502581ffdef1d83782685725e",
    "createdAt": "2015-02-21T13:34:06Z",
    "diffHunk": "@@ -29,22 +29,42 @@ class JdbcRDDSuite extends FunSuite with BeforeAndAfter with LocalSparkContext {\n     Class.forName(\"org.apache.derby.jdbc.EmbeddedDriver\")\n     val conn = DriverManager.getConnection(\"jdbc:derby:target/JdbcRDDSuiteDb;create=true\")\n     try {\n-      val create = conn.createStatement\n-      create.execute(\"\"\"\n-        CREATE TABLE FOO(\n-          ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),\n-          DATA INTEGER\n-        )\"\"\")\n-      create.close()\n-      val insert = conn.prepareStatement(\"INSERT INTO FOO(DATA) VALUES(?)\")\n-      (1 to 100).foreach { i =>\n-        insert.setInt(1, i * 2)\n-        insert.executeUpdate\n+\n+      try {\n+        val create = conn.createStatement\n+        create.execute(\"\"\"\n+          CREATE TABLE FOO(\n+            ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),\n+            DATA INTEGER\n+          )\"\"\")\n+        create.close()\n+        val insert = conn.prepareStatement(\"INSERT INTO FOO(DATA) VALUES(?)\")\n+        (1 to 100).foreach { i =>\n+          insert.setInt(1, i * 2)\n+          insert.executeUpdate\n+        }\n+        insert.close()\n+      } catch {\n+        case e: SQLException if e.getSQLState == \"X0Y32\" =>\n+        // table exists\n       }\n-      insert.close()\n-    } catch {\n-      case e: SQLException if e.getSQLState == \"X0Y32\" =>\n+\n+      try {\n+        val create = conn.createStatement\n+        create.execute(\"CREATE TABLE BIGINT_TEST(ID BIGINT NOT NULL, DATA INTEGER)\")\n+        create.close()\n+        val insert = conn.prepareStatement(\"INSERT INTO BIGINT_TEST VALUES(?,?)\")\n+        (1 to 100).foreach { i =>\n+          insert.setLong(1, 100000000000000000L +  4000000000000000L * i)\n+          insert.setInt(2, i)\n+          insert.executeUpdate\n+        }\n+        insert.close()\n+      } catch {",
    "line": 49
  }, {
    "author": {
      "login": "hotou"
    },
    "body": "There was a problem when I tried to to that. The original writer uses the inner catch block to prevent re-creating the table. \n\ncatch {\n  case e: SQLException if e.getSQLState == \"X0Y32\" =>\n  // table exists\n}\n\nWhich means it has to exist for each table to be created. I was simply following that pattern. \n\nAn alternative would be is to drop and re-create the table each time, which produce cleaner codes, but may slow down the test suite a little bit\n",
    "commit": "9e038d1b36798b4502581ffdef1d83782685725e",
    "createdAt": "2015-02-21T15:56:51Z",
    "diffHunk": "@@ -29,22 +29,42 @@ class JdbcRDDSuite extends FunSuite with BeforeAndAfter with LocalSparkContext {\n     Class.forName(\"org.apache.derby.jdbc.EmbeddedDriver\")\n     val conn = DriverManager.getConnection(\"jdbc:derby:target/JdbcRDDSuiteDb;create=true\")\n     try {\n-      val create = conn.createStatement\n-      create.execute(\"\"\"\n-        CREATE TABLE FOO(\n-          ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),\n-          DATA INTEGER\n-        )\"\"\")\n-      create.close()\n-      val insert = conn.prepareStatement(\"INSERT INTO FOO(DATA) VALUES(?)\")\n-      (1 to 100).foreach { i =>\n-        insert.setInt(1, i * 2)\n-        insert.executeUpdate\n+\n+      try {\n+        val create = conn.createStatement\n+        create.execute(\"\"\"\n+          CREATE TABLE FOO(\n+            ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),\n+            DATA INTEGER\n+          )\"\"\")\n+        create.close()\n+        val insert = conn.prepareStatement(\"INSERT INTO FOO(DATA) VALUES(?)\")\n+        (1 to 100).foreach { i =>\n+          insert.setInt(1, i * 2)\n+          insert.executeUpdate\n+        }\n+        insert.close()\n+      } catch {\n+        case e: SQLException if e.getSQLState == \"X0Y32\" =>\n+        // table exists\n       }\n-      insert.close()\n-    } catch {\n-      case e: SQLException if e.getSQLState == \"X0Y32\" =>\n+\n+      try {\n+        val create = conn.createStatement\n+        create.execute(\"CREATE TABLE BIGINT_TEST(ID BIGINT NOT NULL, DATA INTEGER)\")\n+        create.close()\n+        val insert = conn.prepareStatement(\"INSERT INTO BIGINT_TEST VALUES(?,?)\")\n+        (1 to 100).foreach { i =>\n+          insert.setLong(1, 100000000000000000L +  4000000000000000L * i)\n+          insert.setInt(2, i)\n+          insert.executeUpdate\n+        }\n+        insert.close()\n+      } catch {",
    "line": 49
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Oh right I get it, never mind. LGTM. I can merge in a bit if there are no further comments.\n",
    "commit": "9e038d1b36798b4502581ffdef1d83782685725e",
    "createdAt": "2015-02-21T15:58:55Z",
    "diffHunk": "@@ -29,22 +29,42 @@ class JdbcRDDSuite extends FunSuite with BeforeAndAfter with LocalSparkContext {\n     Class.forName(\"org.apache.derby.jdbc.EmbeddedDriver\")\n     val conn = DriverManager.getConnection(\"jdbc:derby:target/JdbcRDDSuiteDb;create=true\")\n     try {\n-      val create = conn.createStatement\n-      create.execute(\"\"\"\n-        CREATE TABLE FOO(\n-          ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),\n-          DATA INTEGER\n-        )\"\"\")\n-      create.close()\n-      val insert = conn.prepareStatement(\"INSERT INTO FOO(DATA) VALUES(?)\")\n-      (1 to 100).foreach { i =>\n-        insert.setInt(1, i * 2)\n-        insert.executeUpdate\n+\n+      try {\n+        val create = conn.createStatement\n+        create.execute(\"\"\"\n+          CREATE TABLE FOO(\n+            ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),\n+            DATA INTEGER\n+          )\"\"\")\n+        create.close()\n+        val insert = conn.prepareStatement(\"INSERT INTO FOO(DATA) VALUES(?)\")\n+        (1 to 100).foreach { i =>\n+          insert.setInt(1, i * 2)\n+          insert.executeUpdate\n+        }\n+        insert.close()\n+      } catch {\n+        case e: SQLException if e.getSQLState == \"X0Y32\" =>\n+        // table exists\n       }\n-      insert.close()\n-    } catch {\n-      case e: SQLException if e.getSQLState == \"X0Y32\" =>\n+\n+      try {\n+        val create = conn.createStatement\n+        create.execute(\"CREATE TABLE BIGINT_TEST(ID BIGINT NOT NULL, DATA INTEGER)\")\n+        create.close()\n+        val insert = conn.prepareStatement(\"INSERT INTO BIGINT_TEST VALUES(?,?)\")\n+        (1 to 100).foreach { i =>\n+          insert.setLong(1, 100000000000000000L +  4000000000000000L * i)\n+          insert.setInt(2, i)\n+          insert.executeUpdate\n+        }\n+        insert.close()\n+      } catch {",
    "line": 49
  }],
  "prId": 4701
}]