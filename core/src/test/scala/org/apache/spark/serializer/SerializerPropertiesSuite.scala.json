[{
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "I tested this manually and have verified that this test fails if you leave out the check for the auto-reset flag.\n",
    "commit": "50a68ca42058da46caff93ed1af925810555d994",
    "createdAt": "2015-05-05T22:04:28Z",
    "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.serializer\n+\n+import java.io.{ByteArrayInputStream, ByteArrayOutputStream}\n+\n+import scala.util.Random\n+\n+import org.scalatest.{Assertions, FunSuite}\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.serializer.KryoTest.RegistratorWithoutAutoReset\n+\n+/**\n+ * Tests to ensure that [[Serializer]] implementations obey the API contracts for methods that\n+ * describe properties of the serialized stream, such as\n+ * [[Serializer.supportsRelocationOfSerializedObjects]].\n+ */\n+class SerializerPropertiesSuite extends FunSuite {\n+\n+  import SerializerPropertiesSuite._\n+\n+  test(\"JavaSerializer does not support relocation\") {\n+    // Per a comment on the SPARK-4550 JIRA ticket, Java serialization appears to write out the\n+    // full class name the first time an object is written to an output stream, but subsequent\n+    // references to the class write a more compact identifier; this prevents relocation.\n+    val ser = new JavaSerializer(new SparkConf())\n+    testSupportsRelocationOfSerializedObjects(ser, generateRandomItem)\n+  }\n+\n+  test(\"KryoSerializer supports relocation when auto-reset is enabled\") {\n+    val ser = new KryoSerializer(new SparkConf)\n+    assert(ser.newInstance().asInstanceOf[KryoSerializerInstance].getAutoReset())\n+    testSupportsRelocationOfSerializedObjects(ser, generateRandomItem)\n+  }\n+\n+  test(\"KryoSerializer does not support relocation when auto-reset is disabled\") {",
    "line": 52
  }],
  "prId": 5924
}]