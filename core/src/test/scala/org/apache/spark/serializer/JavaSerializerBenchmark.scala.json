[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "Do you mean the java serializer in Spark calls `Class.forName` every time when it serializes an object?",
    "commit": "0a15c24a4c689b06028c51d52afade9b7b9559ba",
    "createdAt": "2019-08-16T02:40:29Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.serializer\n+\n+import java.nio.ByteBuffer\n+\n+import scala.reflect.ClassTag\n+import scala.util.Random\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.benchmark.{Benchmark, BenchmarkBase}\n+import org.apache.spark.internal.config._\n+\n+/**\n+ * Benchmark for Java Serializer Deserialization use vs not use Class Resolve Cache.\n+ * To run this benchmark:\n+ * {{{\n+ *   1. without sbt:\n+ *      bin/spark-submit --class <this class> --jars <spark core test jar>\n+ *   2. build/sbt \"core/test:runMain <this class>\"\n+ *   3. generate result:\n+ *      SPARK_GENERATE_BENCHMARK_FILES=1 build/sbt \"core/test:runMain <this class>\"\n+ *      Results will be written to \"benchmarks/JavaSerializerBenchmark-results.txt\".\n+ * }}}\n+ */\n+object JavaSerializerBenchmark extends BenchmarkBase {\n+\n+  val N = 100000\n+  override def runBenchmarkSuite(mainArgs: Array[String]): Unit = {\n+    val name = \"Benchmark Java Serializer Deserialization use vs not use Class Resolve Cache\"\n+    runBenchmark(name) {\n+      val benchmark = new Benchmark(name, N, 10, output = output)\n+      Seq(true, false).foreach(useUnsafe => run(useUnsafe, benchmark))\n+      benchmark.run()\n+    }\n+  }\n+\n+  private def run(useCache: Boolean, benchmark: Benchmark): Unit = {\n+    def createCase[T: ClassTag](name: String, size: Int, gen: () => T): Unit = {\n+      lazy val ser = createSerializer(useCache)\n+      val data: Array[ByteBuffer] = Array.fill(size)(ser.serialize(gen()))\n+\n+      benchmark.addCase(s\"$name with cache:$useCache\") { _ =>\n+        var i = 0\n+        var s: ByteBuffer = null\n+        while (i < size) {\n+          s = data(i)\n+          s.rewind()\n+          ser.deserialize(s)",
    "line": 64
  }, {
    "author": {
      "login": "ConeyLiu"
    },
    "body": "I'm not sure. This is what I saw from the profiling tool.",
    "commit": "0a15c24a4c689b06028c51d52afade9b7b9559ba",
    "createdAt": "2019-08-16T02:45:25Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.serializer\n+\n+import java.nio.ByteBuffer\n+\n+import scala.reflect.ClassTag\n+import scala.util.Random\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.benchmark.{Benchmark, BenchmarkBase}\n+import org.apache.spark.internal.config._\n+\n+/**\n+ * Benchmark for Java Serializer Deserialization use vs not use Class Resolve Cache.\n+ * To run this benchmark:\n+ * {{{\n+ *   1. without sbt:\n+ *      bin/spark-submit --class <this class> --jars <spark core test jar>\n+ *   2. build/sbt \"core/test:runMain <this class>\"\n+ *   3. generate result:\n+ *      SPARK_GENERATE_BENCHMARK_FILES=1 build/sbt \"core/test:runMain <this class>\"\n+ *      Results will be written to \"benchmarks/JavaSerializerBenchmark-results.txt\".\n+ * }}}\n+ */\n+object JavaSerializerBenchmark extends BenchmarkBase {\n+\n+  val N = 100000\n+  override def runBenchmarkSuite(mainArgs: Array[String]): Unit = {\n+    val name = \"Benchmark Java Serializer Deserialization use vs not use Class Resolve Cache\"\n+    runBenchmark(name) {\n+      val benchmark = new Benchmark(name, N, 10, output = output)\n+      Seq(true, false).foreach(useUnsafe => run(useUnsafe, benchmark))\n+      benchmark.run()\n+    }\n+  }\n+\n+  private def run(useCache: Boolean, benchmark: Benchmark): Unit = {\n+    def createCase[T: ClassTag](name: String, size: Int, gen: () => T): Unit = {\n+      lazy val ser = createSerializer(useCache)\n+      val data: Array[ByteBuffer] = Array.fill(size)(ser.serialize(gen()))\n+\n+      benchmark.addCase(s\"$name with cache:$useCache\") { _ =>\n+        var i = 0\n+        var s: ByteBuffer = null\n+        while (i < size) {\n+          s = data(i)\n+          s.rewind()\n+          ser.deserialize(s)",
    "line": 64
  }, {
    "author": {
      "login": "ConeyLiu"
    },
    "body": "From the `resolveClass` doc\r\n```\r\nThis method will be invoked only once for each unique class in the stream. ..\r\n```",
    "commit": "0a15c24a4c689b06028c51d52afade9b7b9559ba",
    "createdAt": "2019-08-16T02:55:19Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.serializer\n+\n+import java.nio.ByteBuffer\n+\n+import scala.reflect.ClassTag\n+import scala.util.Random\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.benchmark.{Benchmark, BenchmarkBase}\n+import org.apache.spark.internal.config._\n+\n+/**\n+ * Benchmark for Java Serializer Deserialization use vs not use Class Resolve Cache.\n+ * To run this benchmark:\n+ * {{{\n+ *   1. without sbt:\n+ *      bin/spark-submit --class <this class> --jars <spark core test jar>\n+ *   2. build/sbt \"core/test:runMain <this class>\"\n+ *   3. generate result:\n+ *      SPARK_GENERATE_BENCHMARK_FILES=1 build/sbt \"core/test:runMain <this class>\"\n+ *      Results will be written to \"benchmarks/JavaSerializerBenchmark-results.txt\".\n+ * }}}\n+ */\n+object JavaSerializerBenchmark extends BenchmarkBase {\n+\n+  val N = 100000\n+  override def runBenchmarkSuite(mainArgs: Array[String]): Unit = {\n+    val name = \"Benchmark Java Serializer Deserialization use vs not use Class Resolve Cache\"\n+    runBenchmark(name) {\n+      val benchmark = new Benchmark(name, N, 10, output = output)\n+      Seq(true, false).foreach(useUnsafe => run(useUnsafe, benchmark))\n+      benchmark.run()\n+    }\n+  }\n+\n+  private def run(useCache: Boolean, benchmark: Benchmark): Unit = {\n+    def createCase[T: ClassTag](name: String, size: Int, gen: () => T): Unit = {\n+      lazy val ser = createSerializer(useCache)\n+      val data: Array[ByteBuffer] = Array.fill(size)(ser.serialize(gen()))\n+\n+      benchmark.addCase(s\"$name with cache:$useCache\") { _ =>\n+        var i = 0\n+        var s: ByteBuffer = null\n+        while (i < size) {\n+          s = data(i)\n+          s.rewind()\n+          ser.deserialize(s)",
    "line": 64
  }, {
    "author": {
      "login": "ConeyLiu"
    },
    "body": "We need to create a new `ObjectInputStream` for each `deserialize` call.",
    "commit": "0a15c24a4c689b06028c51d52afade9b7b9559ba",
    "createdAt": "2019-08-16T02:56:12Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.serializer\n+\n+import java.nio.ByteBuffer\n+\n+import scala.reflect.ClassTag\n+import scala.util.Random\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.benchmark.{Benchmark, BenchmarkBase}\n+import org.apache.spark.internal.config._\n+\n+/**\n+ * Benchmark for Java Serializer Deserialization use vs not use Class Resolve Cache.\n+ * To run this benchmark:\n+ * {{{\n+ *   1. without sbt:\n+ *      bin/spark-submit --class <this class> --jars <spark core test jar>\n+ *   2. build/sbt \"core/test:runMain <this class>\"\n+ *   3. generate result:\n+ *      SPARK_GENERATE_BENCHMARK_FILES=1 build/sbt \"core/test:runMain <this class>\"\n+ *      Results will be written to \"benchmarks/JavaSerializerBenchmark-results.txt\".\n+ * }}}\n+ */\n+object JavaSerializerBenchmark extends BenchmarkBase {\n+\n+  val N = 100000\n+  override def runBenchmarkSuite(mainArgs: Array[String]): Unit = {\n+    val name = \"Benchmark Java Serializer Deserialization use vs not use Class Resolve Cache\"\n+    runBenchmark(name) {\n+      val benchmark = new Benchmark(name, N, 10, output = output)\n+      Seq(true, false).foreach(useUnsafe => run(useUnsafe, benchmark))\n+      benchmark.run()\n+    }\n+  }\n+\n+  private def run(useCache: Boolean, benchmark: Benchmark): Unit = {\n+    def createCase[T: ClassTag](name: String, size: Int, gen: () => T): Unit = {\n+      lazy val ser = createSerializer(useCache)\n+      val data: Array[ByteBuffer] = Array.fill(size)(ser.serialize(gen()))\n+\n+      benchmark.addCase(s\"$name with cache:$useCache\") { _ =>\n+        var i = 0\n+        var s: ByteBuffer = null\n+        while (i < size) {\n+          s = data(i)\n+          s.rewind()\n+          ser.deserialize(s)",
    "line": 64
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "is it possible to reuse the `InputStream` instance?",
    "commit": "0a15c24a4c689b06028c51d52afade9b7b9559ba",
    "createdAt": "2019-08-16T03:10:04Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.serializer\n+\n+import java.nio.ByteBuffer\n+\n+import scala.reflect.ClassTag\n+import scala.util.Random\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.benchmark.{Benchmark, BenchmarkBase}\n+import org.apache.spark.internal.config._\n+\n+/**\n+ * Benchmark for Java Serializer Deserialization use vs not use Class Resolve Cache.\n+ * To run this benchmark:\n+ * {{{\n+ *   1. without sbt:\n+ *      bin/spark-submit --class <this class> --jars <spark core test jar>\n+ *   2. build/sbt \"core/test:runMain <this class>\"\n+ *   3. generate result:\n+ *      SPARK_GENERATE_BENCHMARK_FILES=1 build/sbt \"core/test:runMain <this class>\"\n+ *      Results will be written to \"benchmarks/JavaSerializerBenchmark-results.txt\".\n+ * }}}\n+ */\n+object JavaSerializerBenchmark extends BenchmarkBase {\n+\n+  val N = 100000\n+  override def runBenchmarkSuite(mainArgs: Array[String]): Unit = {\n+    val name = \"Benchmark Java Serializer Deserialization use vs not use Class Resolve Cache\"\n+    runBenchmark(name) {\n+      val benchmark = new Benchmark(name, N, 10, output = output)\n+      Seq(true, false).foreach(useUnsafe => run(useUnsafe, benchmark))\n+      benchmark.run()\n+    }\n+  }\n+\n+  private def run(useCache: Boolean, benchmark: Benchmark): Unit = {\n+    def createCase[T: ClassTag](name: String, size: Int, gen: () => T): Unit = {\n+      lazy val ser = createSerializer(useCache)\n+      val data: Array[ByteBuffer] = Array.fill(size)(ser.serialize(gen()))\n+\n+      benchmark.addCase(s\"$name with cache:$useCache\") { _ =>\n+        var i = 0\n+        var s: ByteBuffer = null\n+        while (i < size) {\n+          s = data(i)\n+          s.rewind()\n+          ser.deserialize(s)",
    "line": 64
  }, {
    "author": {
      "login": "ConeyLiu"
    },
    "body": "The `JavaSerializer` can provide threadsafe. I think that's why we use it in closure, RPC, and others. To reuse `InputStream` may need to do some threadsafe protection, such as `ThreadLocal`.",
    "commit": "0a15c24a4c689b06028c51d52afade9b7b9559ba",
    "createdAt": "2019-08-16T03:17:50Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.serializer\n+\n+import java.nio.ByteBuffer\n+\n+import scala.reflect.ClassTag\n+import scala.util.Random\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.benchmark.{Benchmark, BenchmarkBase}\n+import org.apache.spark.internal.config._\n+\n+/**\n+ * Benchmark for Java Serializer Deserialization use vs not use Class Resolve Cache.\n+ * To run this benchmark:\n+ * {{{\n+ *   1. without sbt:\n+ *      bin/spark-submit --class <this class> --jars <spark core test jar>\n+ *   2. build/sbt \"core/test:runMain <this class>\"\n+ *   3. generate result:\n+ *      SPARK_GENERATE_BENCHMARK_FILES=1 build/sbt \"core/test:runMain <this class>\"\n+ *      Results will be written to \"benchmarks/JavaSerializerBenchmark-results.txt\".\n+ * }}}\n+ */\n+object JavaSerializerBenchmark extends BenchmarkBase {\n+\n+  val N = 100000\n+  override def runBenchmarkSuite(mainArgs: Array[String]): Unit = {\n+    val name = \"Benchmark Java Serializer Deserialization use vs not use Class Resolve Cache\"\n+    runBenchmark(name) {\n+      val benchmark = new Benchmark(name, N, 10, output = output)\n+      Seq(true, false).foreach(useUnsafe => run(useUnsafe, benchmark))\n+      benchmark.run()\n+    }\n+  }\n+\n+  private def run(useCache: Boolean, benchmark: Benchmark): Unit = {\n+    def createCase[T: ClassTag](name: String, size: Int, gen: () => T): Unit = {\n+      lazy val ser = createSerializer(useCache)\n+      val data: Array[ByteBuffer] = Array.fill(size)(ser.serialize(gen()))\n+\n+      benchmark.addCase(s\"$name with cache:$useCache\") { _ =>\n+        var i = 0\n+        var s: ByteBuffer = null\n+        while (i < size) {\n+          s = data(i)\n+          s.rewind()\n+          ser.deserialize(s)",
    "line": 64
  }, {
    "author": {
      "login": "ConeyLiu"
    },
    "body": "Maybe we can do something like `KryoPool`?",
    "commit": "0a15c24a4c689b06028c51d52afade9b7b9559ba",
    "createdAt": "2019-08-16T04:14:33Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.serializer\n+\n+import java.nio.ByteBuffer\n+\n+import scala.reflect.ClassTag\n+import scala.util.Random\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.benchmark.{Benchmark, BenchmarkBase}\n+import org.apache.spark.internal.config._\n+\n+/**\n+ * Benchmark for Java Serializer Deserialization use vs not use Class Resolve Cache.\n+ * To run this benchmark:\n+ * {{{\n+ *   1. without sbt:\n+ *      bin/spark-submit --class <this class> --jars <spark core test jar>\n+ *   2. build/sbt \"core/test:runMain <this class>\"\n+ *   3. generate result:\n+ *      SPARK_GENERATE_BENCHMARK_FILES=1 build/sbt \"core/test:runMain <this class>\"\n+ *      Results will be written to \"benchmarks/JavaSerializerBenchmark-results.txt\".\n+ * }}}\n+ */\n+object JavaSerializerBenchmark extends BenchmarkBase {\n+\n+  val N = 100000\n+  override def runBenchmarkSuite(mainArgs: Array[String]): Unit = {\n+    val name = \"Benchmark Java Serializer Deserialization use vs not use Class Resolve Cache\"\n+    runBenchmark(name) {\n+      val benchmark = new Benchmark(name, N, 10, output = output)\n+      Seq(true, false).foreach(useUnsafe => run(useUnsafe, benchmark))\n+      benchmark.run()\n+    }\n+  }\n+\n+  private def run(useCache: Boolean, benchmark: Benchmark): Unit = {\n+    def createCase[T: ClassTag](name: String, size: Int, gen: () => T): Unit = {\n+      lazy val ser = createSerializer(useCache)\n+      val data: Array[ByteBuffer] = Array.fill(size)(ser.serialize(gen()))\n+\n+      benchmark.addCase(s\"$name with cache:$useCache\") { _ =>\n+        var i = 0\n+        var s: ByteBuffer = null\n+        while (i < size) {\n+          s = data(i)\n+          s.rewind()\n+          ser.deserialize(s)",
    "line": 64
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "`JavaSerializer` is thread-safe, does `JavaSerializerInstance` also need to be?",
    "commit": "0a15c24a4c689b06028c51d52afade9b7b9559ba",
    "createdAt": "2019-08-16T06:17:13Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.serializer\n+\n+import java.nio.ByteBuffer\n+\n+import scala.reflect.ClassTag\n+import scala.util.Random\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.benchmark.{Benchmark, BenchmarkBase}\n+import org.apache.spark.internal.config._\n+\n+/**\n+ * Benchmark for Java Serializer Deserialization use vs not use Class Resolve Cache.\n+ * To run this benchmark:\n+ * {{{\n+ *   1. without sbt:\n+ *      bin/spark-submit --class <this class> --jars <spark core test jar>\n+ *   2. build/sbt \"core/test:runMain <this class>\"\n+ *   3. generate result:\n+ *      SPARK_GENERATE_BENCHMARK_FILES=1 build/sbt \"core/test:runMain <this class>\"\n+ *      Results will be written to \"benchmarks/JavaSerializerBenchmark-results.txt\".\n+ * }}}\n+ */\n+object JavaSerializerBenchmark extends BenchmarkBase {\n+\n+  val N = 100000\n+  override def runBenchmarkSuite(mainArgs: Array[String]): Unit = {\n+    val name = \"Benchmark Java Serializer Deserialization use vs not use Class Resolve Cache\"\n+    runBenchmark(name) {\n+      val benchmark = new Benchmark(name, N, 10, output = output)\n+      Seq(true, false).foreach(useUnsafe => run(useUnsafe, benchmark))\n+      benchmark.run()\n+    }\n+  }\n+\n+  private def run(useCache: Boolean, benchmark: Benchmark): Unit = {\n+    def createCase[T: ClassTag](name: String, size: Int, gen: () => T): Unit = {\n+      lazy val ser = createSerializer(useCache)\n+      val data: Array[ByteBuffer] = Array.fill(size)(ser.serialize(gen()))\n+\n+      benchmark.addCase(s\"$name with cache:$useCache\") { _ =>\n+        var i = 0\n+        var s: ByteBuffer = null\n+        while (i < size) {\n+          s = data(i)\n+          s.rewind()\n+          ser.deserialize(s)",
    "line": 64
  }, {
    "author": {
      "login": "ConeyLiu"
    },
    "body": "Yes, it needs to be. You can refer to the `NettyRpcEnv.javaSerializerInstance` which could be used with multithread.",
    "commit": "0a15c24a4c689b06028c51d52afade9b7b9559ba",
    "createdAt": "2019-08-16T06:41:30Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.serializer\n+\n+import java.nio.ByteBuffer\n+\n+import scala.reflect.ClassTag\n+import scala.util.Random\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.benchmark.{Benchmark, BenchmarkBase}\n+import org.apache.spark.internal.config._\n+\n+/**\n+ * Benchmark for Java Serializer Deserialization use vs not use Class Resolve Cache.\n+ * To run this benchmark:\n+ * {{{\n+ *   1. without sbt:\n+ *      bin/spark-submit --class <this class> --jars <spark core test jar>\n+ *   2. build/sbt \"core/test:runMain <this class>\"\n+ *   3. generate result:\n+ *      SPARK_GENERATE_BENCHMARK_FILES=1 build/sbt \"core/test:runMain <this class>\"\n+ *      Results will be written to \"benchmarks/JavaSerializerBenchmark-results.txt\".\n+ * }}}\n+ */\n+object JavaSerializerBenchmark extends BenchmarkBase {\n+\n+  val N = 100000\n+  override def runBenchmarkSuite(mainArgs: Array[String]): Unit = {\n+    val name = \"Benchmark Java Serializer Deserialization use vs not use Class Resolve Cache\"\n+    runBenchmark(name) {\n+      val benchmark = new Benchmark(name, N, 10, output = output)\n+      Seq(true, false).foreach(useUnsafe => run(useUnsafe, benchmark))\n+      benchmark.run()\n+    }\n+  }\n+\n+  private def run(useCache: Boolean, benchmark: Benchmark): Unit = {\n+    def createCase[T: ClassTag](name: String, size: Int, gen: () => T): Unit = {\n+      lazy val ser = createSerializer(useCache)\n+      val data: Array[ByteBuffer] = Array.fill(size)(ser.serialize(gen()))\n+\n+      benchmark.addCase(s\"$name with cache:$useCache\") { _ =>\n+        var i = 0\n+        var s: ByteBuffer = null\n+        while (i < size) {\n+          s = data(i)\n+          s.rewind()\n+          ser.deserialize(s)",
    "line": 64
  }],
  "prId": 25470
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "useUnsafe -> useCache?",
    "commit": "0a15c24a4c689b06028c51d52afade9b7b9559ba",
    "createdAt": "2019-08-16T22:01:22Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.serializer\n+\n+import java.nio.ByteBuffer\n+\n+import scala.reflect.ClassTag\n+import scala.util.Random\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.benchmark.{Benchmark, BenchmarkBase}\n+import org.apache.spark.internal.config._\n+\n+/**\n+ * Benchmark for Java Serializer Deserialization use vs not use Class Resolve Cache.\n+ * To run this benchmark:\n+ * {{{\n+ *   1. without sbt:\n+ *      bin/spark-submit --class <this class> --jars <spark core test jar>\n+ *   2. build/sbt \"core/test:runMain <this class>\"\n+ *   3. generate result:\n+ *      SPARK_GENERATE_BENCHMARK_FILES=1 build/sbt \"core/test:runMain <this class>\"\n+ *      Results will be written to \"benchmarks/JavaSerializerBenchmark-results.txt\".\n+ * }}}\n+ */\n+object JavaSerializerBenchmark extends BenchmarkBase {\n+\n+  val N = 100000\n+  override def runBenchmarkSuite(mainArgs: Array[String]): Unit = {\n+    val name = \"Benchmark Java Serializer Deserialization use vs not use Class Resolve Cache\"\n+    runBenchmark(name) {\n+      val benchmark = new Benchmark(name, N, 10, output = output)\n+      Seq(true, false).foreach(useUnsafe => run(useUnsafe, benchmark))"
  }, {
    "author": {
      "login": "ConeyLiu"
    },
    "body": "updated",
    "commit": "0a15c24a4c689b06028c51d52afade9b7b9559ba",
    "createdAt": "2019-08-19T06:29:56Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.serializer\n+\n+import java.nio.ByteBuffer\n+\n+import scala.reflect.ClassTag\n+import scala.util.Random\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.benchmark.{Benchmark, BenchmarkBase}\n+import org.apache.spark.internal.config._\n+\n+/**\n+ * Benchmark for Java Serializer Deserialization use vs not use Class Resolve Cache.\n+ * To run this benchmark:\n+ * {{{\n+ *   1. without sbt:\n+ *      bin/spark-submit --class <this class> --jars <spark core test jar>\n+ *   2. build/sbt \"core/test:runMain <this class>\"\n+ *   3. generate result:\n+ *      SPARK_GENERATE_BENCHMARK_FILES=1 build/sbt \"core/test:runMain <this class>\"\n+ *      Results will be written to \"benchmarks/JavaSerializerBenchmark-results.txt\".\n+ * }}}\n+ */\n+object JavaSerializerBenchmark extends BenchmarkBase {\n+\n+  val N = 100000\n+  override def runBenchmarkSuite(mainArgs: Array[String]): Unit = {\n+    val name = \"Benchmark Java Serializer Deserialization use vs not use Class Resolve Cache\"\n+    runBenchmark(name) {\n+      val benchmark = new Benchmark(name, N, 10, output = output)\n+      Seq(true, false).foreach(useUnsafe => run(useUnsafe, benchmark))"
  }],
  "prId": 25470
}]