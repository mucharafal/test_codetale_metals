[{
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "if you switch to varargs this could just be `conf.registerAvroSchema(schema)`\n",
    "commit": "8158d5113a9084e44482ebfe0fbb73fe3d7bddd8",
    "createdAt": "2015-07-14T16:07:22Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.serializer\n+\n+import java.io.{ByteArrayInputStream, ByteArrayOutputStream, OutputStream}\n+import java.nio.ByteBuffer\n+\n+import com.esotericsoftware.kryo.io.{Output, Input}\n+import org.apache.avro.generic.GenericData.Record\n+import org.apache.avro.{SchemaBuilder, Schema}\n+import org.apache.spark.{SparkFunSuite, SharedSparkContext}\n+\n+class GenericAvroSerializerSuite extends SparkFunSuite with SharedSparkContext {\n+  conf.set(\"spark.serializer\", \"org.apache.spark.serializer.KryoSerializer\")\n+\n+  val schema : Schema = SchemaBuilder\n+    .record(\"testRecord\").fields()\n+    .requiredString(\"data\")\n+    .endRecord()\n+  val record = new Record(schema)\n+  record.put(\"data\", \"test data\")\n+\n+  test(\"schema compression and decompression\") {\n+    val genericSer = new GenericAvroSerializer(conf.getAvroSchema)\n+    assert(schema === genericSer.decompress(ByteBuffer.wrap(genericSer.compress(schema))))\n+  }\n+\n+  test(\"record serialization and deserialization\") {\n+    val genericSer = new GenericAvroSerializer(conf.getAvroSchema)\n+\n+    val outputStream = new ByteArrayOutputStream()\n+    val output = new Output(outputStream)\n+    genericSer.serializeDatum(record, output)\n+    output.flush()\n+    output.close()\n+\n+    val input = new Input(new ByteArrayInputStream(outputStream.toByteArray))\n+    assert(genericSer.deserializeDatum(input) === record)\n+  }\n+\n+  test(\"uses schema fingerprint to decrease message size\") {\n+    val genericSerFull = new GenericAvroSerializer(conf.getAvroSchema)\n+\n+    val output = new Output(new ByteArrayOutputStream())\n+\n+    val beginningNormalPosition = output.total()\n+    genericSerFull.serializeDatum(record, output)\n+    output.flush()\n+    val normalLength = output.total - beginningNormalPosition\n+\n+    conf.registerAvroSchema(Array(schema))"
  }],
  "prId": 7004
}, {
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "nit: empty line between other imports and spark imports\nand the ordering should have class imports ahead of package imports, not just alphabetic, so:\n\n```\nimport com.esotericsoftware.kryo.io.{Output, Input}\nimport org.apache.avro.{SchemaBuilder, Schema}\nimport org.apache.avro.generic.GenericData.Record\n\nimport org.apache.spark.{SparkFunSuite, SharedSparkContext}\nimport org.apache.spark.io.CompressionCodec\n```\n",
    "commit": "8158d5113a9084e44482ebfe0fbb73fe3d7bddd8",
    "createdAt": "2015-07-15T02:58:29Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.serializer\n+\n+import java.io.{ByteArrayInputStream, ByteArrayOutputStream, OutputStream}\n+import java.nio.ByteBuffer\n+\n+import com.esotericsoftware.kryo.io.{Output, Input}\n+import org.apache.avro.generic.GenericData.Record\n+import org.apache.avro.{SchemaBuilder, Schema}\n+import org.apache.spark.io.CompressionCodec\n+import org.apache.spark.{SparkFunSuite, SharedSparkContext}"
  }],
  "prId": 7004
}]