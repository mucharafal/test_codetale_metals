[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "in the test it's more conventional to write `assert(ex.toString.contains(\"Dynamic Partition Overwrite\"))`",
    "commit": "64602ae97a5318c674d09238f36ff1fec073c97e",
    "createdAt": "2018-03-14T20:01:38Z",
    "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.internal.io\n+\n+import org.apache.spark.SparkFunSuite\n+\n+/**\n+ * Unit tests for instantiation of FileCommitProtocol implementations.\n+ */\n+class FileCommitProtocolInstantiationSuite extends SparkFunSuite {\n+\n+  test(\"Dynamic partitions require appropriate constructor\") {\n+\n+    // you cannot instantiate a two-arg client with dynamic partitions\n+    // enabled.\n+    val ex = intercept[IllegalArgumentException] {\n+      instantiateClassic(true)\n+    }\n+    // check the contents of the message and rethrow if unexpected\n+    if (!ex.toString.contains(\"Dynamic Partition Overwrite\")) {"
  }, {
    "author": {
      "login": "steveloughran"
    },
    "body": "yes, but that loses the stack trace. And if there's one thing everyone hates is a jenkins build which says \"you got the wrong exception but we won't say what\", especially when you click through to the logs & see they've already been deleted.\r\n\r\nThis is why when I reimplemented `intercept` for java8 [intercept/5](https://github.com/apache/hadoop/blob/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/test/LambdaTestUtils.java#L483)\r\n\r\n* added the ability to specify a string which was contained\r\n* if the evaluated closure doesn't raise and exception, and doesn't return void or null, call toString() on the output (robustly) and include it in the message. \r\n\r\nWhat I could do here is use fail(message, throwable) and make clear what the failure was? That way, the fact it's an assertion failure is visible, but the stack is retained?",
    "commit": "64602ae97a5318c674d09238f36ff1fec073c97e",
    "createdAt": "2018-03-14T22:27:16Z",
    "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.internal.io\n+\n+import org.apache.spark.SparkFunSuite\n+\n+/**\n+ * Unit tests for instantiation of FileCommitProtocol implementations.\n+ */\n+class FileCommitProtocolInstantiationSuite extends SparkFunSuite {\n+\n+  test(\"Dynamic partitions require appropriate constructor\") {\n+\n+    // you cannot instantiate a two-arg client with dynamic partitions\n+    // enabled.\n+    val ex = intercept[IllegalArgumentException] {\n+      instantiateClassic(true)\n+    }\n+    // check the contents of the message and rethrow if unexpected\n+    if (!ex.toString.contains(\"Dynamic Partition Overwrite\")) {"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "How about leaving a small comment here in order to prevent that someone fixes it without noticing that? I would wonder why `assert(ex.toString.contains(...))` is not used here too.",
    "commit": "64602ae97a5318c674d09238f36ff1fec073c97e",
    "createdAt": "2018-03-15T02:24:36Z",
    "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.internal.io\n+\n+import org.apache.spark.SparkFunSuite\n+\n+/**\n+ * Unit tests for instantiation of FileCommitProtocol implementations.\n+ */\n+class FileCommitProtocolInstantiationSuite extends SparkFunSuite {\n+\n+  test(\"Dynamic partitions require appropriate constructor\") {\n+\n+    // you cannot instantiate a two-arg client with dynamic partitions\n+    // enabled.\n+    val ex = intercept[IllegalArgumentException] {\n+      instantiateClassic(true)\n+    }\n+    // check the contents of the message and rethrow if unexpected\n+    if (!ex.toString.contains(\"Dynamic Partition Overwrite\")) {"
  }, {
    "author": {
      "login": "steveloughran"
    },
    "body": "done",
    "commit": "64602ae97a5318c674d09238f36ff1fec073c97e",
    "createdAt": "2018-03-15T10:44:56Z",
    "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.internal.io\n+\n+import org.apache.spark.SparkFunSuite\n+\n+/**\n+ * Unit tests for instantiation of FileCommitProtocol implementations.\n+ */\n+class FileCommitProtocolInstantiationSuite extends SparkFunSuite {\n+\n+  test(\"Dynamic partitions require appropriate constructor\") {\n+\n+    // you cannot instantiate a two-arg client with dynamic partitions\n+    // enabled.\n+    val ex = intercept[IllegalArgumentException] {\n+      instantiateClassic(true)\n+    }\n+    // check the contents of the message and rethrow if unexpected\n+    if (!ex.toString.contains(\"Dynamic Partition Overwrite\")) {"
  }],
  "prId": 20824
}]