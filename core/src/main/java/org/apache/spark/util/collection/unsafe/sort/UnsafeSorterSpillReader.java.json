[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "`package$.MODULE$.UNSAFE_SORTER_SPILL_READER_BUFFER_SIZE()` is used below too. Extract it and reuse it?",
    "commit": "66f9ef054d8214539d09b340844bbc84f02d9d8d",
    "createdAt": "2018-12-30T15:54:48Z",
    "diffHunk": "@@ -61,19 +62,19 @@ public UnsafeSorterSpillReader(\n     assert (file.length() > 0);\n     long bufferSizeBytes =\n         SparkEnv.get() == null ?\n-            DEFAULT_BUFFER_SIZE_BYTES:\n-            SparkEnv.get().conf().getSizeAsBytes(\"spark.unsafe.sorter.spill.reader.buffer.size\",\n-                                                 DEFAULT_BUFFER_SIZE_BYTES);\n+            DEFAULT_BUFFER_SIZE_BYTES:(long)SparkEnv.get().conf().get(\n+                package$.MODULE$.UNSAFE_SORTER_SPILL_READER_BUFFER_SIZE());"
  }, {
    "author": {
      "login": "kiszk"
    },
    "body": "Sure, done",
    "commit": "66f9ef054d8214539d09b340844bbc84f02d9d8d",
    "createdAt": "2018-12-31T06:53:48Z",
    "diffHunk": "@@ -61,19 +62,19 @@ public UnsafeSorterSpillReader(\n     assert (file.length() > 0);\n     long bufferSizeBytes =\n         SparkEnv.get() == null ?\n-            DEFAULT_BUFFER_SIZE_BYTES:\n-            SparkEnv.get().conf().getSizeAsBytes(\"spark.unsafe.sorter.spill.reader.buffer.size\",\n-                                                 DEFAULT_BUFFER_SIZE_BYTES);\n+            DEFAULT_BUFFER_SIZE_BYTES:(long)SparkEnv.get().conf().get(\n+                package$.MODULE$.UNSAFE_SORTER_SPILL_READER_BUFFER_SIZE());"
  }],
  "prId": 23412
}, {
  "comments": [{
    "author": {
      "login": "mgaido91"
    },
    "body": "nit: better naming?",
    "commit": "66f9ef054d8214539d09b340844bbc84f02d9d8d",
    "createdAt": "2018-12-31T08:53:46Z",
    "diffHunk": "@@ -59,21 +61,20 @@ public UnsafeSorterSpillReader(\n       File file,\n       BlockId blockId) throws IOException {\n     assert (file.length() > 0);\n+    ConfigEntry<Object> configEntry = package$.MODULE$.UNSAFE_SORTER_SPILL_READER_BUFFER_SIZE();"
  }],
  "prId": 23412
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Oh, I didn't consider that this is Java file.",
    "commit": "66f9ef054d8214539d09b340844bbc84f02d9d8d",
    "createdAt": "2019-01-08T17:38:58Z",
    "diffHunk": "@@ -59,21 +60,22 @@ public UnsafeSorterSpillReader(\n       File file,\n       BlockId blockId) throws IOException {\n     assert (file.length() > 0);\n+    final ConfigEntry<Object> bufferSizeConfigEntry =\n+        package$.MODULE$.UNSAFE_SORTER_SPILL_READER_BUFFER_SIZE();",
    "line": 44
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "This can't be `ConfigEntry<Long>` because the Scala side has the generic type as a `long`? It seems like it ends up a `Long` anyway as you're able to `.get()` and cast it to `long`.",
    "commit": "66f9ef054d8214539d09b340844bbc84f02d9d8d",
    "createdAt": "2019-01-14T15:32:30Z",
    "diffHunk": "@@ -59,21 +60,22 @@ public UnsafeSorterSpillReader(\n       File file,\n       BlockId blockId) throws IOException {\n     assert (file.length() > 0);\n+    final ConfigEntry<Object> bufferSizeConfigEntry =\n+        package$.MODULE$.UNSAFE_SORTER_SPILL_READER_BUFFER_SIZE();",
    "line": 44
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Yes. It looks like that to me, too.",
    "commit": "66f9ef054d8214539d09b340844bbc84f02d9d8d",
    "createdAt": "2019-01-16T08:43:18Z",
    "diffHunk": "@@ -59,21 +60,22 @@ public UnsafeSorterSpillReader(\n       File file,\n       BlockId blockId) throws IOException {\n     assert (file.length() > 0);\n+    final ConfigEntry<Object> bufferSizeConfigEntry =\n+        package$.MODULE$.UNSAFE_SORTER_SPILL_READER_BUFFER_SIZE();",
    "line": 44
  }],
  "prId": 23412
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Spaces around colon?\r\n```java\r\n- DEFAULT_BUFFER_SIZE_BYTES:(long)SparkEnv.get().conf().get(bufferSizeConfigEntry);\r\n+ DEFAULT_BUFFER_SIZE_BYTES : (long)SparkEnv.get().conf().get(bufferSizeConfigEntry);\r\n```",
    "commit": "66f9ef054d8214539d09b340844bbc84f02d9d8d",
    "createdAt": "2019-01-13T06:54:49Z",
    "diffHunk": "@@ -59,21 +60,22 @@ public UnsafeSorterSpillReader(\n       File file,\n       BlockId blockId) throws IOException {\n     assert (file.length() > 0);\n+    final ConfigEntry<Object> bufferSizeConfigEntry =\n+        package$.MODULE$.UNSAFE_SORTER_SPILL_READER_BUFFER_SIZE();\n+    final long DEFAULT_BUFFER_SIZE_BYTES = (long)bufferSizeConfigEntry.defaultValue().get();\n     long bufferSizeBytes =\n         SparkEnv.get() == null ?\n-            DEFAULT_BUFFER_SIZE_BYTES:\n-            SparkEnv.get().conf().getSizeAsBytes(\"spark.unsafe.sorter.spill.reader.buffer.size\",\n-                                                 DEFAULT_BUFFER_SIZE_BYTES);\n+            DEFAULT_BUFFER_SIZE_BYTES:(long)SparkEnv.get().conf().get(bufferSizeConfigEntry);"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "... and after the cast, but see my other comment",
    "commit": "66f9ef054d8214539d09b340844bbc84f02d9d8d",
    "createdAt": "2019-01-14T15:33:18Z",
    "diffHunk": "@@ -59,21 +60,22 @@ public UnsafeSorterSpillReader(\n       File file,\n       BlockId blockId) throws IOException {\n     assert (file.length() > 0);\n+    final ConfigEntry<Object> bufferSizeConfigEntry =\n+        package$.MODULE$.UNSAFE_SORTER_SPILL_READER_BUFFER_SIZE();\n+    final long DEFAULT_BUFFER_SIZE_BYTES = (long)bufferSizeConfigEntry.defaultValue().get();\n     long bufferSizeBytes =\n         SparkEnv.get() == null ?\n-            DEFAULT_BUFFER_SIZE_BYTES:\n-            SparkEnv.get().conf().getSizeAsBytes(\"spark.unsafe.sorter.spill.reader.buffer.size\",\n-                                                 DEFAULT_BUFFER_SIZE_BYTES);\n+            DEFAULT_BUFFER_SIZE_BYTES:(long)SparkEnv.get().conf().get(bufferSizeConfigEntry);"
  }],
  "prId": 23412
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Hi, @kiszk .\r\n`MAX_BUFFER_SIZE_BYTES` is `int` at line 42. And, we are casting this `bufferSizeBytes` back to `int` later. How about changing the type to `int`?\r\n```scala\r\n-    final long DEFAULT_BUFFER_SIZE_BYTES = (long)bufferSizeConfigEntry.defaultValue().get();\r\n-    long bufferSizeBytes =\r\n+    final int DEFAULT_BUFFER_SIZE_BYTES = (int)bufferSizeConfigEntry.defaultValue().get();\r\n+    int bufferSizeBytes =\r\n         SparkEnv.get() == null ?\r\n-            DEFAULT_BUFFER_SIZE_BYTES : (long)SparkEnv.get().conf().get(bufferSizeConfigEntry);\r\n+            DEFAULT_BUFFER_SIZE_BYTES : (int)SparkEnv.get().conf().get(bufferSizeConfigEntry);\r\n \r\n     final boolean readAheadEnabled = SparkEnv.get() != null && (boolean)SparkEnv.get().conf().get(\r\n         package$.MODULE$.UNSAFE_SORTER_SPILL_READ_AHEAD_ENABLED());\r\n \r\n     final InputStream bs =\r\n-        new NioBufferedFileInputStream(file, (int) bufferSizeBytes);\r\n+        new NioBufferedFileInputStream(file, bufferSizeBytes);\r\n     try {\r\n       if (readAheadEnabled) {\r\n         this.in = new ReadAheadInputStream(serializerManager.wrapStream(blockId, bs),\r\n-                (int) bufferSizeBytes);\r\n+                bufferSizeBytes);\r\n```",
    "commit": "66f9ef054d8214539d09b340844bbc84f02d9d8d",
    "createdAt": "2019-01-16T08:50:31Z",
    "diffHunk": "@@ -59,21 +60,15 @@ public UnsafeSorterSpillReader(\n       File file,\n       BlockId blockId) throws IOException {\n     assert (file.length() > 0);\n+    final ConfigEntry<Object> bufferSizeConfigEntry =\n+        package$.MODULE$.UNSAFE_SORTER_SPILL_READER_BUFFER_SIZE();\n+    final long DEFAULT_BUFFER_SIZE_BYTES = (long)bufferSizeConfigEntry.defaultValue().get();\n     long bufferSizeBytes ="
  }],
  "prId": 23412
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Since we remove `warn` here, shall we remove the unused lines together?\r\n```java\r\n-import org.slf4j.Logger;\r\n-import org.slf4j.LoggerFactory;\r\n```\r\n```java\r\n-  private static final Logger logger = LoggerFactory.getLogger(UnsafeSorterSpillReader.class);\r\n```",
    "commit": "66f9ef054d8214539d09b340844bbc84f02d9d8d",
    "createdAt": "2019-01-16T08:53:13Z",
    "diffHunk": "@@ -37,8 +39,7 @@\n  */\n public final class UnsafeSorterSpillReader extends UnsafeSorterIterator implements Closeable {\n   private static final Logger logger = LoggerFactory.getLogger(UnsafeSorterSpillReader.class);"
  }],
  "prId": 23412
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "My bad. Please change like this, @kiszk .\r\n```scala\r\n-    final int DEFAULT_BUFFER_SIZE_BYTES = (int)(long)bufferSizeConfigEntry.defaultValue().get();\r\n+    final int DEFAULT_BUFFER_SIZE_BYTES = ((Long)bufferSizeConfigEntry.defaultValue().get()).intValue();\r\n     int bufferSizeBytes =\r\n         SparkEnv.get() == null ?\r\n-            DEFAULT_BUFFER_SIZE_BYTES : (int)SparkEnv.get().conf().get(bufferSizeConfigEntry);\r\n+            DEFAULT_BUFFER_SIZE_BYTES : ((Long)SparkEnv.get().conf().get(bufferSizeConfigEntry)).intValue();\r\n```",
    "commit": "66f9ef054d8214539d09b340844bbc84f02d9d8d",
    "createdAt": "2019-01-18T06:51:24Z",
    "diffHunk": "@@ -59,28 +57,23 @@ public UnsafeSorterSpillReader(\n       File file,\n       BlockId blockId) throws IOException {\n     assert (file.length() > 0);\n-    long bufferSizeBytes =\n+    final ConfigEntry<Object> bufferSizeConfigEntry =\n+        package$.MODULE$.UNSAFE_SORTER_SPILL_READER_BUFFER_SIZE();\n+    // This value must be less than or equal to MAX_BUFFER_SIZE_BYTES. Cast to int is always safe.\n+    final int DEFAULT_BUFFER_SIZE_BYTES = (int)(long)bufferSizeConfigEntry.defaultValue().get();"
  }, {
    "author": {
      "login": "kiszk"
    },
    "body": "It is OK with me.  \r\nNot a big deal. Why do you want to keep `Long` object instead of `long` primitive?",
    "commit": "66f9ef054d8214539d09b340844bbc84f02d9d8d",
    "createdAt": "2019-01-18T14:41:55Z",
    "diffHunk": "@@ -59,28 +57,23 @@ public UnsafeSorterSpillReader(\n       File file,\n       BlockId blockId) throws IOException {\n     assert (file.length() > 0);\n-    long bufferSizeBytes =\n+    final ConfigEntry<Object> bufferSizeConfigEntry =\n+        package$.MODULE$.UNSAFE_SORTER_SPILL_READER_BUFFER_SIZE();\n+    // This value must be less than or equal to MAX_BUFFER_SIZE_BYTES. Cast to int is always safe.\n+    final int DEFAULT_BUFFER_SIZE_BYTES = (int)(long)bufferSizeConfigEntry.defaultValue().get();"
  }],
  "prId": 23412
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Could you fix the Java coding style issue?",
    "commit": "66f9ef054d8214539d09b340844bbc84f02d9d8d",
    "createdAt": "2019-01-18T18:19:30Z",
    "diffHunk": "@@ -60,10 +60,9 @@ public UnsafeSorterSpillReader(\n     final ConfigEntry<Object> bufferSizeConfigEntry =\n         package$.MODULE$.UNSAFE_SORTER_SPILL_READER_BUFFER_SIZE();\n     // This value must be less than or equal to MAX_BUFFER_SIZE_BYTES. Cast to int is always safe.\n-    final int DEFAULT_BUFFER_SIZE_BYTES = (int)(long)bufferSizeConfigEntry.defaultValue().get();\n-    int bufferSizeBytes =\n-        SparkEnv.get() == null ?\n-            DEFAULT_BUFFER_SIZE_BYTES : (int)SparkEnv.get().conf().get(bufferSizeConfigEntry);\n+    final int DEFAULT_BUFFER_SIZE_BYTES = ((Long)bufferSizeConfigEntry.defaultValue().get()).intValue();"
  }],
  "prId": 23412
}]