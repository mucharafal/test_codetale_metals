[{
  "comments": [{
    "author": {
      "login": "tedyu"
    },
    "body": "If !spillReader.hasNext(), can the addition be skipped ?\nThat seems to be what line 70 does.\n",
    "commit": "6beb4674999820126861fdac99fb84f8ea5d57ff",
    "createdAt": "2015-07-16T23:26:32Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.collection.unsafe.sort;\n+\n+import java.io.IOException;\n+import java.util.Comparator;\n+import java.util.PriorityQueue;\n+\n+final class UnsafeSorterSpillMerger {\n+\n+  private final PriorityQueue<UnsafeSorterIterator> priorityQueue;\n+\n+  public UnsafeSorterSpillMerger(\n+      final RecordComparator recordComparator,\n+      final PrefixComparator prefixComparator,\n+      final int numSpills) {\n+    final Comparator<UnsafeSorterIterator> comparator = new Comparator<UnsafeSorterIterator>() {\n+\n+      @Override\n+      public int compare(UnsafeSorterIterator left, UnsafeSorterIterator right) {\n+        final int prefixComparisonResult =\n+          prefixComparator.compare(left.getKeyPrefix(), right.getKeyPrefix());\n+        if (prefixComparisonResult == 0) {\n+          return recordComparator.compare(\n+            left.getBaseObject(), left.getBaseOffset(),\n+            right.getBaseObject(), right.getBaseOffset());\n+        } else {\n+          return prefixComparisonResult;\n+        }\n+      }\n+    };\n+    priorityQueue = new PriorityQueue<UnsafeSorterIterator>(numSpills, comparator);\n+  }\n+\n+  public void addSpill(UnsafeSorterIterator spillReader) throws IOException {\n+    if (spillReader.hasNext()) {\n+      spillReader.loadNext();\n+    }\n+    priorityQueue.add(spillReader);",
    "line": 54
  }],
  "prId": 6444
}]