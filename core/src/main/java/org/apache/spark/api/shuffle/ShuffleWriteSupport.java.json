[{
  "comments": [{
    "author": {
      "login": "mccheah"
    },
    "body": "I think this also needs the `attemptId`, right?",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-06-28T18:21:21Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.shuffle;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * :: Experimental ::\n+ * An interface for deploying a shuffle map output writer\n+ *\n+ * @since 3.0.0\n+ */\n+@Experimental\n+public interface ShuffleWriteSupport {\n+  ShuffleMapOutputWriter createMapOutputWriter(\n+    int shuffleId,\n+    int mapId,"
  }, {
    "author": {
      "login": "ifilonenko"
    },
    "body": "~Yeah, it seems to be failing on the multiple simultaneous attempts.~\r\nIt might be useful to surface attemptID but after discussing offline, the problem actually seems to be in the `TaskContext` being `null`",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-06-28T20:09:10Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.shuffle;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * :: Experimental ::\n+ * An interface for deploying a shuffle map output writer\n+ *\n+ * @since 3.0.0\n+ */\n+@Experimental\n+public interface ShuffleWriteSupport {\n+  ShuffleMapOutputWriter createMapOutputWriter(\n+    int shuffleId,\n+    int mapId,"
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "I added said attempt id below.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-08T21:59:30Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.shuffle;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * :: Experimental ::\n+ * An interface for deploying a shuffle map output writer\n+ *\n+ * @since 3.0.0\n+ */\n+@Experimental\n+public interface ShuffleWriteSupport {\n+  ShuffleMapOutputWriter createMapOutputWriter(\n+    int shuffleId,\n+    int mapId,"
  }],
  "prId": 25007
}, {
  "comments": [{
    "author": {
      "login": "gczsjdy"
    },
    "body": "Since `ShuffleWriteSupport` only contains 1 function, why do we add this layer(Also, `xxSupport` is ambiguous)?\r\nCould we make `ShuffleExecutorComponents.writes` return a `ShuffleMapOutputWriter` directly?",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-08T03:05:46Z",
    "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.shuffle;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * :: Experimental ::\n+ * An interface for deploying a shuffle map output writer\n+ *\n+ * @since 3.0.0\n+ */\n+@Experimental\n+public interface ShuffleWriteSupport {"
  }, {
    "author": {
      "login": "gczsjdy"
    },
    "body": "Found another reason to remove this `Write/ReadSupport` layer, in `ReadSupport`, although not proposed yet : P, it straightway contains partition level functions: https://github.com/palantir/spark/blob/62c2664f1f298889357c6ebeb9b6f08962c94ceb/core/src/main/java/org/apache/spark/api/shuffle/ShuffleReadSupport.java#L31-L38. However for `WriteSupport` path this is what 1-level-lower layer would do(partition-level writer).",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-08T03:25:39Z",
    "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.shuffle;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * :: Experimental ::\n+ * An interface for deploying a shuffle map output writer\n+ *\n+ * @since 3.0.0\n+ */\n+@Experimental\n+public interface ShuffleWriteSupport {"
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "It's important to keep interfaces minimal, and to keep each interface responsible for a single set of functionality. Since `ShuffleExecutorComponents` is eventually also going to support lifecycle operations - particularly `stopExecutor` - I'd like to keep that method separate from the methods that create the writers.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-08T20:35:22Z",
    "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.shuffle;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * :: Experimental ::\n+ * An interface for deploying a shuffle map output writer\n+ *\n+ * @since 3.0.0\n+ */\n+@Experimental\n+public interface ShuffleWriteSupport {"
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "I think there might be a world where we can coalesce `ShuffleWriteSupport` and `ShuffleReadSupport` into a more generic `ShuffleIO` - although we'd probably want to reconsider the naming of the interface at the root of the plugin tree, which is currently `ShuffleDataIO`.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-08T21:56:46Z",
    "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.shuffle;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * :: Experimental ::\n+ * An interface for deploying a shuffle map output writer\n+ *\n+ * @since 3.0.0\n+ */\n+@Experimental\n+public interface ShuffleWriteSupport {"
  }, {
    "author": {
      "login": "gczsjdy"
    },
    "body": "Do you mean that `ShuffleWriteSupport` can contain more semantics/fields than `ShuffleMapOutputWriter`? Can you name some of them? Maybe because the name `xxSupport` is ambiguous I think all in `xxSupport` can be put in `xxer`",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-12T07:03:35Z",
    "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.shuffle;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * :: Experimental ::\n+ * An interface for deploying a shuffle map output writer\n+ *\n+ * @since 3.0.0\n+ */\n+@Experimental\n+public interface ShuffleWriteSupport {"
  }, {
    "author": {
      "login": "gczsjdy"
    },
    "body": "Sorry but could you elaborate on coalescing these 2 to 1? Because `InputStream` and `OutputStream` are completely different so I don't understand how to do that.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-12T07:05:18Z",
    "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.shuffle;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * :: Experimental ::\n+ * An interface for deploying a shuffle map output writer\n+ *\n+ * @since 3.0.0\n+ */\n+@Experimental\n+public interface ShuffleWriteSupport {"
  }, {
    "author": {
      "login": "squito"
    },
    "body": "I think I agree with @gczsjdy .  I don't see a good reason to separate ShuffleWriteSupport from ShuffleMapOutputWriter.  I think the extra separation just makes things more confusing.  (is there a time when you have one of these but not the other?  or 1 of (a) but N of (b)?  does it help with testing?  etc. etc.)  Unless you have a use case which takes advantage of the extra layers?",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-15T21:28:01Z",
    "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.shuffle;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * :: Experimental ::\n+ * An interface for deploying a shuffle map output writer\n+ *\n+ * @since 3.0.0\n+ */\n+@Experimental\n+public interface ShuffleWriteSupport {"
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "I thought about this a bit more. One motivation to separation write APIs from read APIs is to pass in only the subsection of the plugin tree that is applicable in each case. So I only want to pass write-specific functionality to SortShuffleWriter, and only pass read-specific shuffle functionality to the reader side.\r\n\r\nBut I hold this conviction pretty loosely. We can change this - let me know.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-18T00:58:50Z",
    "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.shuffle;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * :: Experimental ::\n+ * An interface for deploying a shuffle map output writer\n+ *\n+ * @since 3.0.0\n+ */\n+@Experimental\n+public interface ShuffleWriteSupport {"
  }, {
    "author": {
      "login": "gczsjdy"
    },
    "body": "@mccheah Yeah seperating write from read is pretty natural. Here we think maybe remove the `WriteSupport` layer, only the `ShuffleMapOutputWriter` is enough, and on read side, the current `ReadSupport` can be replaced with `ShuffleBlockReader`",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-19T08:56:37Z",
    "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.shuffle;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * :: Experimental ::\n+ * An interface for deploying a shuffle map output writer\n+ *\n+ * @since 3.0.0\n+ */\n+@Experimental\n+public interface ShuffleWriteSupport {"
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "That doesn't separate the concerns as I described. The only layer above `ShuffleWriteSupport` is `ShuffleExecutorComponents`. If we remove `ShuffleWriteSupport`, we make `ShuffleExecutorComponents` responsible for `createMapOutputWriter`. But presumably `ShuffleExecutorComponents` would also have `createPartitionReader`, meaning now `ShuffleExecutorComponents` passed to `BypassMergeSortShuffleWriter` will now have both read and write methods accessible in the writer code.\r\n\r\nI would like `BypassMergeSortShuffleWriter` to only be able to call `createShuffleMapOutputWriter`, and nothing else.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-19T18:33:25Z",
    "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.shuffle;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * :: Experimental ::\n+ * An interface for deploying a shuffle map output writer\n+ *\n+ * @since 3.0.0\n+ */\n+@Experimental\n+public interface ShuffleWriteSupport {"
  }, {
    "author": {
      "login": "gczsjdy"
    },
    "body": "Can the `MapOutputWriter` be created before passing to `BypassMergeSortShuffleWriter`(`MapOutputWriter` as a construction parameter)?",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-22T06:36:27Z",
    "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.shuffle;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * :: Experimental ::\n+ * An interface for deploying a shuffle map output writer\n+ *\n+ * @since 3.0.0\n+ */\n+@Experimental\n+public interface ShuffleWriteSupport {"
  }, {
    "author": {
      "login": "gczsjdy"
    },
    "body": "A comment left here @mccheah ",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-24T02:17:49Z",
    "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.shuffle;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * :: Experimental ::\n+ * An interface for deploying a shuffle map output writer\n+ *\n+ * @since 3.0.0\n+ */\n+@Experimental\n+public interface ShuffleWriteSupport {"
  }],
  "prId": 25007
}]