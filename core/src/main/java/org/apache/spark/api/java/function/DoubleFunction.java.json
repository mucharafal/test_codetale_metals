[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "For those looking at this change, FYI most of the apparent visibility changes in this PR are not changes. For example, `enum` constructor visibility is irrelevant, inner `enum`s and `interface`s are inherently `static`, a `public` constructor in a package-private class is effectively package-private, and interface methods are inherently `public` for example.\n\nI support all the changes here in that it's how I write Java. I'm not sure how people feel about some of the changes here though. On the one hand, I'd definitely remove `public` from a `public` constructor in a package-private class since the visibility modifier is misleading. For interface methods, I'm of two minds, since `public` is suspiciously redundant, but, it also correctly states its visibility.\n\nI personally would still make all these changes but some of these changes are up for debate and wondering if others have an opinion.\n",
    "commit": "70b41c86983485c2eb34b82566c4100ed6b28570",
    "createdAt": "2016-03-20T09:04:33Z",
    "diffHunk": "@@ -23,5 +23,5 @@\n  *  A function that returns Doubles, and can be used to construct DoubleRDDs.\n  */\n public interface DoubleFunction<T> extends Serializable {\n-  public double call(T t) throws Exception;\n+  double call(T t) throws Exception;",
    "line": 5
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Thank you for you review. Yes, this PR removes unnecessary keywords due to their default meaning in Java language. Also, I agree with you that sometimes _explicitly_ written code (e.g. _interface method_) also is good for emphasizing the meaning.\n",
    "commit": "70b41c86983485c2eb34b82566c4100ed6b28570",
    "createdAt": "2016-03-20T10:45:28Z",
    "diffHunk": "@@ -23,5 +23,5 @@\n  *  A function that returns Doubles, and can be used to construct DoubleRDDs.\n  */\n public interface DoubleFunction<T> extends Serializable {\n-  public double call(T t) throws Exception;\n+  double call(T t) throws Exception;",
    "line": 5
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "I will willingly exclude any changes (including the interface methods) here if needed.\n",
    "commit": "70b41c86983485c2eb34b82566c4100ed6b28570",
    "createdAt": "2016-03-20T10:52:07Z",
    "diffHunk": "@@ -23,5 +23,5 @@\n  *  A function that returns Doubles, and can be used to construct DoubleRDDs.\n  */\n public interface DoubleFunction<T> extends Serializable {\n-  public double call(T t) throws Exception;\n+  double call(T t) throws Exception;",
    "line": 5
  }],
  "prId": 11831
}]