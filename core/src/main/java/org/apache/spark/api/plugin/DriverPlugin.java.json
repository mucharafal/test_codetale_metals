[{
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "before it is submitted?  I assume that is client mode and not yarn cluster mode for instance?",
    "commit": "37ad680ec33ec6afac9d031897a549321e782d9c",
    "createdAt": "2019-10-22T12:49:49Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.plugin;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.apache.spark.SparkContext;\n+import org.apache.spark.annotation.DeveloperApi;\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Driver component of a {@link SparkPlugin}.\n+ *\n+ * @since 3.0.0\n+ */\n+@DeveloperApi\n+public interface DriverPlugin {\n+\n+  /**\n+   * Initialize the plugin.\n+   * <p>\n+   * This method is called early in the initialization of the Spark driver. Explicitly, it is\n+   * called before the application is submitted to the cluster manager. This means that a lot"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "I'll change; \"before the task scheduler is initialized\".",
    "commit": "37ad680ec33ec6afac9d031897a549321e782d9c",
    "createdAt": "2019-10-23T15:55:42Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.plugin;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.apache.spark.SparkContext;\n+import org.apache.spark.annotation.DeveloperApi;\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Driver component of a {@link SparkPlugin}.\n+ *\n+ * @since 3.0.0\n+ */\n+@DeveloperApi\n+public interface DriverPlugin {\n+\n+  /**\n+   * Initialize the plugin.\n+   * <p>\n+   * This method is called early in the initialization of the Spark driver. Explicitly, it is\n+   * called before the application is submitted to the cluster manager. This means that a lot"
  }],
  "prId": 26170
}, {
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "its not clear to me what is returned? do these need to be spark confs?  I'm guessing not but would be good to clarify.",
    "commit": "37ad680ec33ec6afac9d031897a549321e782d9c",
    "createdAt": "2019-10-22T12:50:44Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.plugin;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.apache.spark.SparkContext;\n+import org.apache.spark.annotation.DeveloperApi;\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Driver component of a {@link SparkPlugin}.\n+ *\n+ * @since 3.0.0\n+ */\n+@DeveloperApi\n+public interface DriverPlugin {\n+\n+  /**\n+   * Initialize the plugin.\n+   * <p>\n+   * This method is called early in the initialization of the Spark driver. Explicitly, it is\n+   * called before the application is submitted to the cluster manager. This means that a lot\n+   * of Spark subsystems may yet not have been initialized. This call also blocks driver\n+   * initialization.\n+   * <p>\n+   * It's recommended that plugins be careful about what operations are performed in this call,\n+   * preferrably performing expensive operations in a separate thread, or postponing them until\n+   * the application has fully started.\n+   *\n+   * @param sc The SparkContext loading the plugin.\n+   * @param pluginContext Additional plugin-specific about the Spark application where the plugin\n+   *                      is running.\n+   * @return A map containing configuration data for the executor-side component of the plugin."
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Can you suggest something? It already says this exact map is provided to the executor plugin's init method. I don't know how can I be clearer.",
    "commit": "37ad680ec33ec6afac9d031897a549321e782d9c",
    "createdAt": "2019-10-23T15:57:35Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.plugin;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.apache.spark.SparkContext;\n+import org.apache.spark.annotation.DeveloperApi;\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Driver component of a {@link SparkPlugin}.\n+ *\n+ * @since 3.0.0\n+ */\n+@DeveloperApi\n+public interface DriverPlugin {\n+\n+  /**\n+   * Initialize the plugin.\n+   * <p>\n+   * This method is called early in the initialization of the Spark driver. Explicitly, it is\n+   * called before the application is submitted to the cluster manager. This means that a lot\n+   * of Spark subsystems may yet not have been initialized. This call also blocks driver\n+   * initialization.\n+   * <p>\n+   * It's recommended that plugins be careful about what operations are performed in this call,\n+   * preferrably performing expensive operations in a separate thread, or postponing them until\n+   * the application has fully started.\n+   *\n+   * @param sc The SparkContext loading the plugin.\n+   * @param pluginContext Additional plugin-specific about the Spark application where the plugin\n+   *                      is running.\n+   * @return A map containing configuration data for the executor-side component of the plugin."
  }, {
    "author": {
      "login": "tgravescs"
    },
    "body": "Perhaps just say the configuration keys are user defined.  Are there any other formatting restrictions?   like they shouldn't use spark.  or special characters, etc.",
    "commit": "37ad680ec33ec6afac9d031897a549321e782d9c",
    "createdAt": "2019-10-23T19:19:14Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.plugin;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.apache.spark.SparkContext;\n+import org.apache.spark.annotation.DeveloperApi;\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Driver component of a {@link SparkPlugin}.\n+ *\n+ * @since 3.0.0\n+ */\n+@DeveloperApi\n+public interface DriverPlugin {\n+\n+  /**\n+   * Initialize the plugin.\n+   * <p>\n+   * This method is called early in the initialization of the Spark driver. Explicitly, it is\n+   * called before the application is submitted to the cluster manager. This means that a lot\n+   * of Spark subsystems may yet not have been initialized. This call also blocks driver\n+   * initialization.\n+   * <p>\n+   * It's recommended that plugins be careful about what operations are performed in this call,\n+   * preferrably performing expensive operations in a separate thread, or postponing them until\n+   * the application has fully started.\n+   *\n+   * @param sc The SparkContext loading the plugin.\n+   * @param pluginContext Additional plugin-specific about the Spark application where the plugin\n+   *                      is running.\n+   * @return A map containing configuration data for the executor-side component of the plugin."
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "I feel like trying to explain more just makes it more confusing.\r\n\r\nYou return a map. The map magically appears as an argument to the executor side's init method, with the exact contents you returned. Simple. Whatever you can put in that map will show up on the other side.",
    "commit": "37ad680ec33ec6afac9d031897a549321e782d9c",
    "createdAt": "2019-10-23T19:23:18Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.plugin;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.apache.spark.SparkContext;\n+import org.apache.spark.annotation.DeveloperApi;\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Driver component of a {@link SparkPlugin}.\n+ *\n+ * @since 3.0.0\n+ */\n+@DeveloperApi\n+public interface DriverPlugin {\n+\n+  /**\n+   * Initialize the plugin.\n+   * <p>\n+   * This method is called early in the initialization of the Spark driver. Explicitly, it is\n+   * called before the application is submitted to the cluster manager. This means that a lot\n+   * of Spark subsystems may yet not have been initialized. This call also blocks driver\n+   * initialization.\n+   * <p>\n+   * It's recommended that plugins be careful about what operations are performed in this call,\n+   * preferrably performing expensive operations in a separate thread, or postponing them until\n+   * the application has fully started.\n+   *\n+   * @param sc The SparkContext loading the plugin.\n+   * @param pluginContext Additional plugin-specific about the Spark application where the plugin\n+   *                      is running.\n+   * @return A map containing configuration data for the executor-side component of the plugin."
  }],
  "prId": 26170
}, {
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "how does this function know if executor requested reply?  I assume its up to them to infer from message type?",
    "commit": "37ad680ec33ec6afac9d031897a549321e782d9c",
    "createdAt": "2019-10-22T13:33:12Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.plugin;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.apache.spark.SparkContext;\n+import org.apache.spark.annotation.DeveloperApi;\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Driver component of a {@link SparkPlugin}.\n+ *\n+ * @since 3.0.0\n+ */\n+@DeveloperApi\n+public interface DriverPlugin {\n+\n+  /**\n+   * Initialize the plugin.\n+   * <p>\n+   * This method is called early in the initialization of the Spark driver. Explicitly, it is\n+   * called before the application is submitted to the cluster manager. This means that a lot\n+   * of Spark subsystems may yet not have been initialized. This call also blocks driver\n+   * initialization.\n+   * <p>\n+   * It's recommended that plugins be careful about what operations are performed in this call,\n+   * preferrably performing expensive operations in a separate thread, or postponing them until\n+   * the application has fully started.\n+   *\n+   * @param sc The SparkContext loading the plugin.\n+   * @param pluginContext Additional plugin-specific about the Spark application where the plugin\n+   *                      is running.\n+   * @return A map containing configuration data for the executor-side component of the plugin.\n+   *         This map will be provided to the {@link ExecutorPlugin}'s initialization method.\n+   */\n+  default Map<String, String> init(SparkContext sc, PluginContext pluginContext) {\n+    return Collections.emptyMap();\n+  }\n+\n+  /**\n+   * RPC message handler.\n+   * <p>\n+   * Plugins can use Spark's RPC system to send messages from executors to the driver (but not\n+   * the other way around, currently). Messages sent by the executor component of the plugin will\n+   * be delivered to this method, and the returned value will be sent back to the executor as\n+   * the reply, if the executor has requested one.",
    "line": 81
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "It's up to the plugin code. I'm trying to avoid exposing two methods to handle RPC messages.",
    "commit": "37ad680ec33ec6afac9d031897a549321e782d9c",
    "createdAt": "2019-10-23T16:01:54Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.plugin;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.apache.spark.SparkContext;\n+import org.apache.spark.annotation.DeveloperApi;\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Driver component of a {@link SparkPlugin}.\n+ *\n+ * @since 3.0.0\n+ */\n+@DeveloperApi\n+public interface DriverPlugin {\n+\n+  /**\n+   * Initialize the plugin.\n+   * <p>\n+   * This method is called early in the initialization of the Spark driver. Explicitly, it is\n+   * called before the application is submitted to the cluster manager. This means that a lot\n+   * of Spark subsystems may yet not have been initialized. This call also blocks driver\n+   * initialization.\n+   * <p>\n+   * It's recommended that plugins be careful about what operations are performed in this call,\n+   * preferrably performing expensive operations in a separate thread, or postponing them until\n+   * the application has fully started.\n+   *\n+   * @param sc The SparkContext loading the plugin.\n+   * @param pluginContext Additional plugin-specific about the Spark application where the plugin\n+   *                      is running.\n+   * @return A map containing configuration data for the executor-side component of the plugin.\n+   *         This map will be provided to the {@link ExecutorPlugin}'s initialization method.\n+   */\n+  default Map<String, String> init(SparkContext sc, PluginContext pluginContext) {\n+    return Collections.emptyMap();\n+  }\n+\n+  /**\n+   * RPC message handler.\n+   * <p>\n+   * Plugins can use Spark's RPC system to send messages from executors to the driver (but not\n+   * the other way around, currently). Messages sent by the executor component of the plugin will\n+   * be delivered to this method, and the returned value will be sent back to the executor as\n+   * the reply, if the executor has requested one.",
    "line": 81
  }, {
    "author": {
      "login": "tgravescs"
    },
    "body": "ok",
    "commit": "37ad680ec33ec6afac9d031897a549321e782d9c",
    "createdAt": "2019-10-23T19:12:16Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.plugin;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.apache.spark.SparkContext;\n+import org.apache.spark.annotation.DeveloperApi;\n+\n+/**\n+ * :: DeveloperApi ::\n+ * Driver component of a {@link SparkPlugin}.\n+ *\n+ * @since 3.0.0\n+ */\n+@DeveloperApi\n+public interface DriverPlugin {\n+\n+  /**\n+   * Initialize the plugin.\n+   * <p>\n+   * This method is called early in the initialization of the Spark driver. Explicitly, it is\n+   * called before the application is submitted to the cluster manager. This means that a lot\n+   * of Spark subsystems may yet not have been initialized. This call also blocks driver\n+   * initialization.\n+   * <p>\n+   * It's recommended that plugins be careful about what operations are performed in this call,\n+   * preferrably performing expensive operations in a separate thread, or postponing them until\n+   * the application has fully started.\n+   *\n+   * @param sc The SparkContext loading the plugin.\n+   * @param pluginContext Additional plugin-specific about the Spark application where the plugin\n+   *                      is running.\n+   * @return A map containing configuration data for the executor-side component of the plugin.\n+   *         This map will be provided to the {@link ExecutorPlugin}'s initialization method.\n+   */\n+  default Map<String, String> init(SparkContext sc, PluginContext pluginContext) {\n+    return Collections.emptyMap();\n+  }\n+\n+  /**\n+   * RPC message handler.\n+   * <p>\n+   * Plugins can use Spark's RPC system to send messages from executors to the driver (but not\n+   * the other way around, currently). Messages sent by the executor component of the plugin will\n+   * be delivered to this method, and the returned value will be sent back to the executor as\n+   * the reply, if the executor has requested one.",
    "line": 81
  }],
  "prId": 26170
}]