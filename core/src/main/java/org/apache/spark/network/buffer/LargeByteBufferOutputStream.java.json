[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "indentation, @VisibleForTesting\n",
    "commit": "3447bb995b53c4d93154328c7c7c06e08a5ec9b9",
    "createdAt": "2015-06-02T16:20:31Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.buffer;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+\n+import org.apache.spark.util.io.ByteArrayChunkOutputStream;\n+\n+public class LargeByteBufferOutputStream extends OutputStream {\n+\n+  private final int chunkSize;\n+  final ByteArrayChunkOutputStream output;\n+\n+  public LargeByteBufferOutputStream(int chunkSize) {\n+    this.chunkSize = chunkSize;\n+    output = new ByteArrayChunkOutputStream(chunkSize);\n+  }\n+\n+  public void write(int b) {\n+    output.write(b);\n+  }\n+\n+  public void write(byte[] bytes, int off, int len) {\n+    output.write(bytes, off, len);\n+  }\n+\n+  public LargeByteBuffer largeBuffer() {\n+    return largeBuffer(LargeByteBufferHelper.MAX_CHUNK_SIZE);\n+  }\n+\n+/**"
  }],
  "prId": 5400
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "It feels like all these fields (not just in this class) should be either private or annotated with `@VisibleForTesting`.\n",
    "commit": "3447bb995b53c4d93154328c7c7c06e08a5ec9b9",
    "createdAt": "2015-06-02T16:21:02Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.buffer;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+\n+import org.apache.spark.util.io.ByteArrayChunkOutputStream;\n+\n+public class LargeByteBufferOutputStream extends OutputStream {\n+\n+  private final int chunkSize;\n+  final ByteArrayChunkOutputStream output;"
  }],
  "prId": 5400
}, {
  "comments": [{
    "author": {
      "login": "chenghao-intel"
    },
    "body": "long?\n",
    "commit": "3447bb995b53c4d93154328c7c7c06e08a5ec9b9",
    "createdAt": "2015-06-03T14:16:10Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.buffer;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.spark.util.io.ByteArrayChunkOutputStream;\n+\n+public class LargeByteBufferOutputStream extends OutputStream {\n+\n+  private final ByteArrayChunkOutputStream output;\n+\n+  public LargeByteBufferOutputStream(int chunkSize) {"
  }, {
    "author": {
      "login": "squito"
    },
    "body": "`chunkSize` does need to be an int.  its used to determine the size of each of the `Array[Byte]` it builds.\n\nI'll add some docs to this class, it isn't very clear right now.\n",
    "commit": "3447bb995b53c4d93154328c7c7c06e08a5ec9b9",
    "createdAt": "2015-06-03T18:58:38Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.buffer;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.spark.util.io.ByteArrayChunkOutputStream;\n+\n+public class LargeByteBufferOutputStream extends OutputStream {\n+\n+  private final ByteArrayChunkOutputStream output;\n+\n+  public LargeByteBufferOutputStream(int chunkSize) {"
  }],
  "prId": 5400
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "\"exposed for testing.\" is redundant.\n",
    "commit": "3447bb995b53c4d93154328c7c7c06e08a5ec9b9",
    "createdAt": "2015-11-02T19:53:23Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.buffer;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.spark.util.io.ByteArrayChunkOutputStream;\n+\n+/**\n+ * An OutputStream that will write all data to memory.  It supports writing over 2GB\n+ * and the resulting data can be retrieved as a\n+ * {@link org.apache.spark.network.buffer.LargeByteBuffer}\n+ */\n+public class LargeByteBufferOutputStream extends OutputStream {\n+\n+  private final ByteArrayChunkOutputStream output;\n+\n+  /**\n+   * Create a new LargeByteBufferOutputStream which writes to byte arrays of the given size.  Note\n+   * that <code>chunkSize</code> has <b>no effect</b> on the LargeByteBuffer returned by\n+   * {@link #largeBuffer()}.\n+   *\n+   * @param chunkSize size of the byte arrays used by this output stream, in bytes\n+   */\n+  public LargeByteBufferOutputStream(int chunkSize) {\n+    output = new ByteArrayChunkOutputStream(chunkSize);\n+  }\n+\n+  @Override\n+  public void write(int b) {\n+    output.write(b);\n+  }\n+\n+  @Override\n+  public void write(byte[] bytes, int off, int len) {\n+    output.write(bytes, off, len);\n+  }\n+\n+  /**\n+   * Get all of the data written to the stream so far as a LargeByteBuffer.  This method can be\n+   * called multiple times, and each returned buffer will be completely independent (the data\n+   * is copied for each returned buffer).  It does not close the stream.\n+   *\n+   * @return the data written to the stream as a LargeByteBuffer\n+   */\n+  public LargeByteBuffer largeBuffer() {\n+    return largeBuffer(LargeByteBufferHelper.MAX_CHUNK_SIZE);\n+  }\n+\n+  /**\n+   * exposed for testing.  You don't really ever want to call this method -- the returned"
  }],
  "prId": 5400
}]