[{
  "comments": [{
    "author": {
      "login": "jodersky"
    },
    "body": "this field is never used\n",
    "commit": "209640029c3d18329dbd9a8a9fdcaec9b3babc8c",
    "createdAt": "2016-05-19T23:16:04Z",
    "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Properties;\n+\n+public class VersionInfo {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(VersionInfo.class);",
    "line": 30
  }],
  "prId": 12152
}, {
  "comments": [{
    "author": {
      "login": "jodersky"
    },
    "body": "Is the main method in this utility class ever used?\n",
    "commit": "209640029c3d18329dbd9a8a9fdcaec9b3babc8c",
    "createdAt": "2016-05-19T23:18:28Z",
    "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Properties;\n+\n+public class VersionInfo {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(VersionInfo.class);\n+  private Properties info;\n+\n+  protected VersionInfo(String component) {\n+    info = new Properties();\n+    String versionInfoFile = component + \"-version-info.properties\";\n+    InputStream is = null;\n+    try {\n+      is = Thread.currentThread().getContextClassLoader()\n+              .getResourceAsStream(versionInfoFile);\n+      if (is == null) {\n+        throw new IOException(\"Resource not found\");\n+      }\n+      info.load(is);\n+    } catch (IOException ex) {\n+    } finally {\n+      if (is != null) {\n+        try {\n+          is.close();\n+        } catch (IOException ioex) {\n+        }\n+      }\n+    }\n+  }\n+\n+  protected String _getVersion() {\n+    return info.getProperty(\"version\", \"Unknown\");\n+  }\n+\n+  protected String _getRevision() {\n+    return info.getProperty(\"revision\", \"Unknown\");\n+  }\n+\n+  protected String _getBranch() {\n+    return info.getProperty(\"branch\", \"Unknown\");\n+  }\n+\n+  protected String _getDate() {\n+    return info.getProperty(\"date\", \"Unknown\");\n+  }\n+\n+  protected String _getUser() {\n+    return info.getProperty(\"user\", \"Unknown\");\n+  }\n+\n+  protected String _getUrl() {\n+    return info.getProperty(\"url\", \"Unknown\");\n+  }\n+\n+  protected String _getSrcChecksum() {\n+    return info.getProperty(\"srcChecksum\", \"Unknown\");\n+  }\n+\n+  protected String _getBuildVersion(){\n+    return getVersion() +\n+            \" from \" + _getRevision() +\n+            \" by \" + _getUser() +\n+            \" source checksum \" + _getSrcChecksum();\n+  }\n+\n+  private static VersionInfo COMMON_VERSION_INFO = new VersionInfo(\"spark\");\n+\n+  public static String getVersion() {\n+    return COMMON_VERSION_INFO._getVersion();\n+  }\n+\n+  public static String getRevision() {\n+    return COMMON_VERSION_INFO._getRevision();\n+  }\n+\n+  public static String getBranch() {\n+    return COMMON_VERSION_INFO._getBranch();\n+  }\n+\n+  public static String getDate() {\n+    return COMMON_VERSION_INFO._getDate();\n+  }\n+\n+  public static String getUser() {\n+    return COMMON_VERSION_INFO._getUser();\n+  }\n+\n+  public static String getUrl() {\n+    return COMMON_VERSION_INFO._getUrl();\n+  }\n+\n+  public static String getSrcChecksum() {\n+    return COMMON_VERSION_INFO._getSrcChecksum();\n+  }\n+\n+  public static String getBuildVersion(){\n+    return COMMON_VERSION_INFO._getBuildVersion();\n+  }\n+\n+  public static void main(String[] args) {",
    "line": 124
  }],
  "prId": 12152
}, {
  "comments": [{
    "author": {
      "login": "jodersky"
    },
    "body": "This whole class seems pretty complex. Why are the accessors protected but exposed through static methods? Would it not be simpler to just have a static getter to a single instance and make all member accessors public? In that case I would also recommend looking into implementing this as a class/singleton object.\n",
    "commit": "209640029c3d18329dbd9a8a9fdcaec9b3babc8c",
    "createdAt": "2016-05-19T23:26:10Z",
    "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Properties;\n+\n+public class VersionInfo {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(VersionInfo.class);\n+  private Properties info;\n+\n+  protected VersionInfo(String component) {\n+    info = new Properties();\n+    String versionInfoFile = component + \"-version-info.properties\";\n+    InputStream is = null;\n+    try {\n+      is = Thread.currentThread().getContextClassLoader()\n+              .getResourceAsStream(versionInfoFile);\n+      if (is == null) {\n+        throw new IOException(\"Resource not found\");\n+      }\n+      info.load(is);\n+    } catch (IOException ex) {\n+    } finally {\n+      if (is != null) {\n+        try {\n+          is.close();\n+        } catch (IOException ioex) {\n+        }\n+      }\n+    }\n+  }\n+\n+  protected String _getVersion() {\n+    return info.getProperty(\"version\", \"Unknown\");\n+  }\n+\n+  protected String _getRevision() {\n+    return info.getProperty(\"revision\", \"Unknown\");\n+  }\n+\n+  protected String _getBranch() {\n+    return info.getProperty(\"branch\", \"Unknown\");\n+  }\n+\n+  protected String _getDate() {\n+    return info.getProperty(\"date\", \"Unknown\");\n+  }\n+\n+  protected String _getUser() {\n+    return info.getProperty(\"user\", \"Unknown\");\n+  }\n+\n+  protected String _getUrl() {\n+    return info.getProperty(\"url\", \"Unknown\");\n+  }\n+\n+  protected String _getSrcChecksum() {\n+    return info.getProperty(\"srcChecksum\", \"Unknown\");\n+  }\n+\n+  protected String _getBuildVersion(){\n+    return getVersion() +\n+            \" from \" + _getRevision() +\n+            \" by \" + _getUser() +\n+            \" source checksum \" + _getSrcChecksum();\n+  }\n+\n+  private static VersionInfo COMMON_VERSION_INFO = new VersionInfo(\"spark\");",
    "line": 90
  }],
  "prId": 12152
}]