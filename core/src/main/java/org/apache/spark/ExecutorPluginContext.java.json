[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "This should not be a mutable field. You'll need a constructor. Also, the name is unnecessarily long. The class name already tells you this refers to an \"executor ]lugin\", so there is no need in repeating that here (or in new fields added later).\r\n\r\nThe constructor should also be private, but then it becomes complicated, because `Executor` is in a different package. So probably ok for the constructor to be public (annotated with `@Private`). The alternative would be an interface...\r\n\r\nI also slightly dislike that we're adding more public APIs to the `org.apache.spark` package. Using an interface would help because then you could nest it inside `ExecutorPlugin`. But otherwise, there doesn't seem to be a good package to add arbitrary new APIs, so this should be ok.",
    "commit": "ea7a5df22e66ae618f70bd48965a9c179b64f366",
    "createdAt": "2019-09-04T17:49:51Z",
    "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.apache.spark.annotation.DeveloperApi;\n+\n+/**\n+ * This class encapsulates the input for the ExecutorPlugin interface. It provides a\n+ * layer of indirection to ease future extensions of executor plugins, without breaking the API.\n+ */\n+@DeveloperApi\n+public class ExecutorPluginContext {\n+\n+  public MetricRegistry executorPluginMetricRegistry;"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Also, on a separate comment: instead of exposing a shared registry, how about a method `registerMetricsSource` that returns a new metrics registry just for the plugin?\r\n\r\nThen, internally, the implementation of the context could avoid clashes in metric names from different plugins by using the plugin name as the source name.",
    "commit": "ea7a5df22e66ae618f70bd48965a9c179b64f366",
    "createdAt": "2019-09-04T17:57:34Z",
    "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.apache.spark.annotation.DeveloperApi;\n+\n+/**\n+ * This class encapsulates the input for the ExecutorPlugin interface. It provides a\n+ * layer of indirection to ease future extensions of executor plugins, without breaking the API.\n+ */\n+@DeveloperApi\n+public class ExecutorPluginContext {\n+\n+  public MetricRegistry executorPluginMetricRegistry;"
  }, {
    "author": {
      "login": "LucaCanali"
    },
    "body": "I have restructed ExecutorPluginContext, let me know if it has improved.\r\n\r\nThe idea of using the plugin name as source name is interesting and worth further discussing.  At present the code blocks the namespace=executorPlugin, which is more rigid, but easier to track. I see pros and cons to both approaches. I guess the preferred solution depends on how we expect users to make use of this functionality.",
    "commit": "ea7a5df22e66ae618f70bd48965a9c179b64f366",
    "createdAt": "2019-09-04T21:12:15Z",
    "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.apache.spark.annotation.DeveloperApi;\n+\n+/**\n+ * This class encapsulates the input for the ExecutorPlugin interface. It provides a\n+ * layer of indirection to ease future extensions of executor plugins, without breaking the API.\n+ */\n+@DeveloperApi\n+public class ExecutorPluginContext {\n+\n+  public MetricRegistry executorPluginMetricRegistry;"
  }, {
    "author": {
      "login": "squito"
    },
    "body": "I also feel like letting plugins choose their own namespace seems better, though I don't feel too strongly about this.",
    "commit": "ea7a5df22e66ae618f70bd48965a9c179b64f366",
    "createdAt": "2019-09-09T15:34:16Z",
    "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.apache.spark.annotation.DeveloperApi;\n+\n+/**\n+ * This class encapsulates the input for the ExecutorPlugin interface. It provides a\n+ * layer of indirection to ease future extensions of executor plugins, without breaking the API.\n+ */\n+@DeveloperApi\n+public class ExecutorPluginContext {\n+\n+  public MetricRegistry executorPluginMetricRegistry;"
  }, {
    "author": {
      "login": "LucaCanali"
    },
    "body": "OK. I can see multiple options, for example:\r\n\r\n- fixed namespace/sourceName, user defines only metric name (current code)\r\n- user/plugin allowed to specify sourceName too\r\n- sourceName is set to plugin name\r\n- sourceName is built by composing a fixed prefix + a user_specified part\r\n\r\nAny preferences and/or other ideas?",
    "commit": "ea7a5df22e66ae618f70bd48965a9c179b64f366",
    "createdAt": "2019-09-09T16:00:49Z",
    "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.apache.spark.annotation.DeveloperApi;\n+\n+/**\n+ * This class encapsulates the input for the ExecutorPlugin interface. It provides a\n+ * layer of indirection to ease future extensions of executor plugins, without breaking the API.\n+ */\n+@DeveloperApi\n+public class ExecutorPluginContext {\n+\n+  public MetricRegistry executorPluginMetricRegistry;"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "My preference would be either 3 or 4. 3 has the advantage that you can keep the current API and do that later without having to change the API (it would only change how the metrics are reported). 4 needs 3 (the prefix should be the plugin name) and would only be useful for plugins that want to register multiple sources, for whatever reason.",
    "commit": "ea7a5df22e66ae618f70bd48965a9c179b64f366",
    "createdAt": "2019-09-09T17:38:07Z",
    "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.apache.spark.annotation.DeveloperApi;\n+\n+/**\n+ * This class encapsulates the input for the ExecutorPlugin interface. It provides a\n+ * layer of indirection to ease future extensions of executor plugins, without breaking the API.\n+ */\n+@DeveloperApi\n+public class ExecutorPluginContext {\n+\n+  public MetricRegistry executorPluginMetricRegistry;"
  }, {
    "author": {
      "login": "LucaCanali"
    },
    "body": "OK for option 3 (sourceName is set to plugin name).",
    "commit": "ea7a5df22e66ae618f70bd48965a9c179b64f366",
    "createdAt": "2019-09-09T19:30:23Z",
    "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.apache.spark.annotation.DeveloperApi;\n+\n+/**\n+ * This class encapsulates the input for the ExecutorPlugin interface. It provides a\n+ * layer of indirection to ease future extensions of executor plugins, without breaking the API.\n+ */\n+@DeveloperApi\n+public class ExecutorPluginContext {\n+\n+  public MetricRegistry executorPluginMetricRegistry;"
  }],
  "prId": 24901
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "It would be helpful to expose some other useful info here (e.g. the executor ID and the `SparkConf`).",
    "commit": "ea7a5df22e66ae618f70bd48965a9c179b64f366",
    "createdAt": "2019-09-04T18:00:23Z",
    "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.apache.spark.annotation.DeveloperApi;\n+\n+/**\n+ * This class encapsulates the input for the ExecutorPlugin interface. It provides a\n+ * layer of indirection to ease future extensions of executor plugins, without breaking the API.\n+ */\n+@DeveloperApi\n+public class ExecutorPluginContext {",
    "line": 28
  }, {
    "author": {
      "login": "LucaCanali"
    },
    "body": "I have now added also \"executorHostName\" and \"isLocal\"",
    "commit": "ea7a5df22e66ae618f70bd48965a9c179b64f366",
    "createdAt": "2019-09-09T07:55:06Z",
    "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.apache.spark.annotation.DeveloperApi;\n+\n+/**\n+ * This class encapsulates the input for the ExecutorPlugin interface. It provides a\n+ * layer of indirection to ease future extensions of executor plugins, without breaking the API.\n+ */\n+@DeveloperApi\n+public class ExecutorPluginContext {",
    "line": 28
  }],
  "prId": 24901
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "The comment about a layer of indirection is not really useful as API documentation.",
    "commit": "ea7a5df22e66ae618f70bd48965a9c179b64f366",
    "createdAt": "2019-09-04T18:01:37Z",
    "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.apache.spark.annotation.DeveloperApi;\n+\n+/**\n+ * This class encapsulates the input for the ExecutorPlugin interface. It provides a"
  }],
  "prId": 24901
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "These should be `private final`.\r\n\r\nAt that point the getters are a little redundant, also, and the fields could just be public.",
    "commit": "ea7a5df22e66ae618f70bd48965a9c179b64f366",
    "createdAt": "2019-09-06T20:36:43Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.apache.spark.annotation.DeveloperApi;\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * This class encapsulates the input parameters for the init\n+ * method of the ExecutorPlugin interface.\n+ */\n+@DeveloperApi\n+public class ExecutorPluginContext {\n+\n+  MetricRegistry metricRegistry;"
  }],
  "prId": 24901
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "\"Encapsulates information about the executor when initializing {@link ExecutorPlugin} instances.\"",
    "commit": "ea7a5df22e66ae618f70bd48965a9c179b64f366",
    "createdAt": "2019-09-06T20:37:47Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.apache.spark.annotation.DeveloperApi;\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * This class encapsulates the input parameters for the init"
  }],
  "prId": 24901
}, {
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "one arg per lline",
    "commit": "ea7a5df22e66ae618f70bd48965a9c179b64f366",
    "createdAt": "2019-09-09T15:28:47Z",
    "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.apache.spark.annotation.DeveloperApi;\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * Encapsulates information about the executor when initializing {@link ExecutorPlugin} instances.\n+ */\n+@DeveloperApi\n+public class ExecutorPluginContext {\n+\n+  public final MetricRegistry metricRegistry;\n+  public final SparkConf sparkConf;\n+  public final String executorId;\n+  public final String executorHostName;\n+  public final Boolean isLocal;\n+\n+  @Private\n+  public ExecutorPluginContext(MetricRegistry registry, SparkConf conf,\n+                               String id, String hostName, Boolean local) {"
  }],
  "prId": 24901
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: please follow the multi-line arg style (plenty of examples in the repo)",
    "commit": "ea7a5df22e66ae618f70bd48965a9c179b64f366",
    "createdAt": "2019-09-16T18:31:40Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.apache.spark.annotation.DeveloperApi;\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * Encapsulates information about the executor when initializing {@link ExecutorPlugin} instances.\n+ */\n+@DeveloperApi\n+public class ExecutorPluginContext {\n+\n+  public final MetricRegistry metricRegistry;\n+  public final SparkConf sparkConf;\n+  public final String executorId;\n+  public final String executorHostName;\n+  public final Boolean isLocal;\n+\n+  @Private\n+  public ExecutorPluginContext(MetricRegistry registry,"
  }],
  "prId": 24901
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "`boolean`, also in the field.",
    "commit": "ea7a5df22e66ae618f70bd48965a9c179b64f366",
    "createdAt": "2019-09-17T18:00:18Z",
    "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.apache.spark.annotation.DeveloperApi;\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * Encapsulates information about the executor when initializing {@link ExecutorPlugin} instances.\n+ */\n+@DeveloperApi\n+public class ExecutorPluginContext {\n+\n+  public final MetricRegistry metricRegistry;\n+  public final SparkConf sparkConf;\n+  public final String executorId;\n+  public final String executorHostName;\n+  public final Boolean isLocal;\n+\n+  @Private\n+  public ExecutorPluginContext(\n+      MetricRegistry registry,\n+      SparkConf conf,\n+      String id,\n+      String hostName,\n+      Boolean local) {"
  }],
  "prId": 24901
}]