[{
  "comments": [{
    "author": {
      "login": "punya"
    },
    "body": "This should say that callers shouldn't rely on this value being unchanged after a subsequent call to `fetchNext`. Also, you should write `{@link #fetchNext}` rather than `[[fetchNext]]` for javadoc compatibility.\n",
    "commit": "2a2f2139b254fd754a3881dee872e652dfdde3cd",
    "createdAt": "2015-04-22T01:52:02Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.io;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * A reader that reads records in one by one.\n+ */\n+@Experimental\n+public abstract class RecordReader<T> implements Closeable {\n+\n+  /**\n+   * Fetches the next record.\n+   *\n+   * @return true if we read a record.\n+   */\n+  public abstract boolean fetchNext() throws InterruptedException, IOException;\n+\n+  /**\n+   * Returns the current record. [[fetchNext]] must have been called before this.",
    "line": 39
  }],
  "prId": 5603
}]