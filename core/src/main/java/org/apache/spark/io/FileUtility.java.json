[{
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "don't do this - why is IOException catch and ignore here? also, the text should use a logger",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-06-25T04:35:47Z",
    "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.compress.archivers.ArchiveException;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+import java.io.*;\n+\n+public class FileUtility {\n+\n+    /**\n+     * Untar an input file into an output file.\n+     *\n+     * The output file is created in the output folder, having the same name as\n+     * the input file, minus the '.tar' extension.\n+     *\n+     * @param inputFile the input .tar file\n+     * @throws IOException\n+     *\n+     * @throws ArchiveException\n+     */\n+    public static void unTar(final File inputFile)\n+            throws IOException, ArchiveException {\n+\n+        String outputDir = inputFile.getAbsolutePath().split(\".tar\")[0];\n+        File outputTarDir = new File(outputDir);\n+        outputTarDir.mkdir();\n+        final InputStream is = new FileInputStream(inputFile);\n+        final TarArchiveInputStream debInputStream = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(\n+                \"tar\", is);\n+        TarArchiveEntry entry = null;\n+        while ((entry = (TarArchiveEntry) debInputStream.getNextEntry()) != null) {\n+            final File outputFile = new File(outputDir, entry.getName());\n+            if (entry.isDirectory()) {\n+                if (!outputFile.exists()) {\n+                    if (!outputFile.mkdirs()) {\n+                        throw new IllegalStateException(String.format(\n+                                \"Couldn't create directory %s.\", outputFile.getAbsolutePath()));\n+                    }\n+                }\n+            } else {\n+                final OutputStream outputFileStream = new FileOutputStream(outputFile);\n+                IOUtils.copy(debInputStream, outputFileStream);\n+                outputFileStream.close();\n+            }\n+        }\n+        debInputStream.close();\n+    }\n+\n+    public static void createTarFile(String source, String destFileName) throws Exception {\n+        TarArchiveOutputStream tarOs = null;\n+        File f = new File(destFileName);\n+        if (f.exists()) {\n+            f.delete();\n+        }\n+        try {\n+            FileOutputStream fos = new FileOutputStream(destFileName);\n+            tarOs = (TarArchiveOutputStream) new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", fos);\n+            tarOs = new TarArchiveOutputStream(fos);\n+            File folder = new File(source);\n+            File[] fileNames = folder.listFiles();\n+            for(File file : fileNames){\n+                TarArchiveEntry tar_file = new TarArchiveEntry(file.getName());\n+                tar_file.setSize(file.length());\n+                tarOs.putArchiveEntry(tar_file);\n+                BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file));\n+                IOUtils.copy(bis, tarOs);\n+                bis.close();\n+                tarOs.closeArchiveEntry();\n+            }\n+        } catch (IOException e) {\n+            throw new IllegalStateException(String.format(\n+                    \"createTarFile failed with exception %s.\", e.getMessage()));\n+        } finally {\n+            try {\n+                tarOs.finish();\n+                tarOs.close();\n+            } catch (IOException e) {\n+                e.printStackTrace();"
  }],
  "prId": 24922
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "what's the reason for this to be .java?",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-06-25T04:36:00Z",
    "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.compress.archivers.ArchiveException;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+import java.io.*;\n+\n+public class FileUtility {",
    "line": 23
  }, {
    "author": {
      "login": "itsvikramagr"
    },
    "body": "This is a generic util class which can be used anywhere in other Java or Scala modules. Hence chose Java for writing it. Let me know if I need to move it to Scala. ",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-06-25T06:01:03Z",
    "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.compress.archivers.ArchiveException;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+import java.io.*;\n+\n+public class FileUtility {",
    "line": 23
  }],
  "prId": 24922
}, {
  "comments": [{
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "What if `mkdir` returns false?",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-07-02T13:07:10Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.compress.archivers.ArchiveException;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+import java.io.*;\n+\n+public class FileUtility {\n+\n+    /**\n+     * Untar an input file into an output file.\n+     *\n+     * The output file is created in the output folder, having the same name as\n+     * the input file, minus the '.tar' extension.\n+     *\n+     * @param inputFile the input .tar file\n+     * @throws IOException\n+     *\n+     * @throws ArchiveException\n+     */\n+    public static void unTar(final File inputFile)\n+            throws IOException, ArchiveException {\n+\n+        String outputDir = inputFile.getAbsolutePath().split(\".tar\")[0];\n+        File outputTarDir = new File(outputDir);\n+        outputTarDir.mkdir();"
  }],
  "prId": 24922
}, {
  "comments": [{
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "What if `inputFile` is not ending with `tar`?",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-07-02T13:11:10Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.compress.archivers.ArchiveException;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+import java.io.*;\n+\n+public class FileUtility {\n+\n+    /**\n+     * Untar an input file into an output file.\n+     *\n+     * The output file is created in the output folder, having the same name as\n+     * the input file, minus the '.tar' extension.\n+     *\n+     * @param inputFile the input .tar file\n+     * @throws IOException\n+     *\n+     * @throws ArchiveException\n+     */\n+    public static void unTar(final File inputFile)\n+            throws IOException, ArchiveException {\n+\n+        String outputDir = inputFile.getAbsolutePath().split(\".tar\")[0];"
  }, {
    "author": {
      "login": "itsvikramagr"
    },
    "body": "I have made the changes to consider all failure scenarios. Will commit them after running basic sanity tests. ",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-07-08T06:00:05Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.compress.archivers.ArchiveException;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+import java.io.*;\n+\n+public class FileUtility {\n+\n+    /**\n+     * Untar an input file into an output file.\n+     *\n+     * The output file is created in the output folder, having the same name as\n+     * the input file, minus the '.tar' extension.\n+     *\n+     * @param inputFile the input .tar file\n+     * @throws IOException\n+     *\n+     * @throws ArchiveException\n+     */\n+    public static void unTar(final File inputFile)\n+            throws IOException, ArchiveException {\n+\n+        String outputDir = inputFile.getAbsolutePath().split(\".tar\")[0];"
  }],
  "prId": 24922
}, {
  "comments": [{
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Does this overwrite output if already exists?",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-07-02T13:12:03Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.compress.archivers.ArchiveException;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+import java.io.*;\n+\n+public class FileUtility {\n+\n+    /**\n+     * Untar an input file into an output file.\n+     *\n+     * The output file is created in the output folder, having the same name as\n+     * the input file, minus the '.tar' extension.\n+     *\n+     * @param inputFile the input .tar file\n+     * @throws IOException\n+     *\n+     * @throws ArchiveException\n+     */\n+    public static void unTar(final File inputFile)\n+            throws IOException, ArchiveException {\n+\n+        String outputDir = inputFile.getAbsolutePath().split(\".tar\")[0];\n+        File outputTarDir = new File(outputDir);"
  }],
  "prId": 24922
}, {
  "comments": [{
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "These 3 ifs can be maybe simplified.",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-07-02T13:14:14Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.compress.archivers.ArchiveException;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+import java.io.*;\n+\n+public class FileUtility {\n+\n+    /**\n+     * Untar an input file into an output file.\n+     *\n+     * The output file is created in the output folder, having the same name as\n+     * the input file, minus the '.tar' extension.\n+     *\n+     * @param inputFile the input .tar file\n+     * @throws IOException\n+     *\n+     * @throws ArchiveException\n+     */\n+    public static void unTar(final File inputFile)\n+            throws IOException, ArchiveException {\n+\n+        String outputDir = inputFile.getAbsolutePath().split(\".tar\")[0];\n+        File outputTarDir = new File(outputDir);\n+        outputTarDir.mkdir();\n+        final InputStream is = new FileInputStream(inputFile);\n+        final TarArchiveInputStream debInputStream = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(\n+                \"tar\", is);\n+        TarArchiveEntry entry = null;\n+        while ((entry = (TarArchiveEntry) debInputStream.getNextEntry()) != null) {\n+            final File outputFile = new File(outputDir, entry.getName());\n+            if (entry.isDirectory()) {"
  }],
  "prId": 24922
}, {
  "comments": [{
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "I think close should be in finally (there are many other places where I suggest the same).\r\nA streaming app can easily blow up by consuming all the open file descriptors. We must make sure it's not happening.",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-07-02T13:15:42Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.compress.archivers.ArchiveException;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+import java.io.*;\n+\n+public class FileUtility {\n+\n+    /**\n+     * Untar an input file into an output file.\n+     *\n+     * The output file is created in the output folder, having the same name as\n+     * the input file, minus the '.tar' extension.\n+     *\n+     * @param inputFile the input .tar file\n+     * @throws IOException\n+     *\n+     * @throws ArchiveException\n+     */\n+    public static void unTar(final File inputFile)\n+            throws IOException, ArchiveException {\n+\n+        String outputDir = inputFile.getAbsolutePath().split(\".tar\")[0];\n+        File outputTarDir = new File(outputDir);\n+        outputTarDir.mkdir();\n+        final InputStream is = new FileInputStream(inputFile);\n+        final TarArchiveInputStream debInputStream = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(\n+                \"tar\", is);\n+        TarArchiveEntry entry = null;\n+        while ((entry = (TarArchiveEntry) debInputStream.getNextEntry()) != null) {\n+            final File outputFile = new File(outputDir, entry.getName());\n+            if (entry.isDirectory()) {\n+                if (!outputFile.exists()) {\n+                    if (!outputFile.mkdirs()) {\n+                        throw new IllegalStateException(String.format(\n+                                \"Couldn't create directory %s.\", outputFile.getAbsolutePath()));\n+                    }\n+                }\n+            } else {\n+                final OutputStream outputFileStream = new FileOutputStream(outputFile);\n+                IOUtils.copy(debInputStream, outputFileStream);\n+                outputFileStream.close();\n+            }\n+        }\n+        debInputStream.close();"
  }, {
    "author": {
      "login": "itsvikramagr"
    },
    "body": "Sure. I have made the changes.",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-07-08T06:00:36Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.compress.archivers.ArchiveException;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+import java.io.*;\n+\n+public class FileUtility {\n+\n+    /**\n+     * Untar an input file into an output file.\n+     *\n+     * The output file is created in the output folder, having the same name as\n+     * the input file, minus the '.tar' extension.\n+     *\n+     * @param inputFile the input .tar file\n+     * @throws IOException\n+     *\n+     * @throws ArchiveException\n+     */\n+    public static void unTar(final File inputFile)\n+            throws IOException, ArchiveException {\n+\n+        String outputDir = inputFile.getAbsolutePath().split(\".tar\")[0];\n+        File outputTarDir = new File(outputDir);\n+        outputTarDir.mkdir();\n+        final InputStream is = new FileInputStream(inputFile);\n+        final TarArchiveInputStream debInputStream = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(\n+                \"tar\", is);\n+        TarArchiveEntry entry = null;\n+        while ((entry = (TarArchiveEntry) debInputStream.getNextEntry()) != null) {\n+            final File outputFile = new File(outputDir, entry.getName());\n+            if (entry.isDirectory()) {\n+                if (!outputFile.exists()) {\n+                    if (!outputFile.mkdirs()) {\n+                        throw new IllegalStateException(String.format(\n+                                \"Couldn't create directory %s.\", outputFile.getAbsolutePath()));\n+                    }\n+                }\n+            } else {\n+                final OutputStream outputFileStream = new FileOutputStream(outputFile);\n+                IOUtils.copy(debInputStream, outputFileStream);\n+                outputFileStream.close();\n+            }\n+        }\n+        debInputStream.close();"
  }],
  "prId": 24922
}, {
  "comments": [{
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Nit: A bit odd that this function receives `String` as tar filename and `Untar` receives `File`.",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-07-02T13:18:25Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.compress.archivers.ArchiveException;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+import java.io.*;\n+\n+public class FileUtility {\n+\n+    /**\n+     * Untar an input file into an output file.\n+     *\n+     * The output file is created in the output folder, having the same name as\n+     * the input file, minus the '.tar' extension.\n+     *\n+     * @param inputFile the input .tar file\n+     * @throws IOException\n+     *\n+     * @throws ArchiveException\n+     */\n+    public static void unTar(final File inputFile)\n+            throws IOException, ArchiveException {\n+\n+        String outputDir = inputFile.getAbsolutePath().split(\".tar\")[0];\n+        File outputTarDir = new File(outputDir);\n+        outputTarDir.mkdir();\n+        final InputStream is = new FileInputStream(inputFile);\n+        final TarArchiveInputStream debInputStream = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(\n+                \"tar\", is);\n+        TarArchiveEntry entry = null;\n+        while ((entry = (TarArchiveEntry) debInputStream.getNextEntry()) != null) {\n+            final File outputFile = new File(outputDir, entry.getName());\n+            if (entry.isDirectory()) {\n+                if (!outputFile.exists()) {\n+                    if (!outputFile.mkdirs()) {\n+                        throw new IllegalStateException(String.format(\n+                                \"Couldn't create directory %s.\", outputFile.getAbsolutePath()));\n+                    }\n+                }\n+            } else {\n+                final OutputStream outputFileStream = new FileOutputStream(outputFile);\n+                IOUtils.copy(debInputStream, outputFileStream);\n+                outputFileStream.close();\n+            }\n+        }\n+        debInputStream.close();\n+    }\n+\n+    public static void createTarFile(String source, String destFileName) throws Exception {"
  }, {
    "author": {
      "login": "itsvikramagr"
    },
    "body": "Used String in both createTarFile and ExtractTarFile(unTar previously)",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-07-08T06:01:18Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.compress.archivers.ArchiveException;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+import java.io.*;\n+\n+public class FileUtility {\n+\n+    /**\n+     * Untar an input file into an output file.\n+     *\n+     * The output file is created in the output folder, having the same name as\n+     * the input file, minus the '.tar' extension.\n+     *\n+     * @param inputFile the input .tar file\n+     * @throws IOException\n+     *\n+     * @throws ArchiveException\n+     */\n+    public static void unTar(final File inputFile)\n+            throws IOException, ArchiveException {\n+\n+        String outputDir = inputFile.getAbsolutePath().split(\".tar\")[0];\n+        File outputTarDir = new File(outputDir);\n+        outputTarDir.mkdir();\n+        final InputStream is = new FileInputStream(inputFile);\n+        final TarArchiveInputStream debInputStream = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(\n+                \"tar\", is);\n+        TarArchiveEntry entry = null;\n+        while ((entry = (TarArchiveEntry) debInputStream.getNextEntry()) != null) {\n+            final File outputFile = new File(outputDir, entry.getName());\n+            if (entry.isDirectory()) {\n+                if (!outputFile.exists()) {\n+                    if (!outputFile.mkdirs()) {\n+                        throw new IllegalStateException(String.format(\n+                                \"Couldn't create directory %s.\", outputFile.getAbsolutePath()));\n+                    }\n+                }\n+            } else {\n+                final OutputStream outputFileStream = new FileOutputStream(outputFile);\n+                IOUtils.copy(debInputStream, outputFileStream);\n+                outputFileStream.close();\n+            }\n+        }\n+        debInputStream.close();\n+    }\n+\n+    public static void createTarFile(String source, String destFileName) throws Exception {"
  }],
  "prId": 24922
}, {
  "comments": [{
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "What if `false` returned?",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-07-02T13:18:51Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.compress.archivers.ArchiveException;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+import java.io.*;\n+\n+public class FileUtility {\n+\n+    /**\n+     * Untar an input file into an output file.\n+     *\n+     * The output file is created in the output folder, having the same name as\n+     * the input file, minus the '.tar' extension.\n+     *\n+     * @param inputFile the input .tar file\n+     * @throws IOException\n+     *\n+     * @throws ArchiveException\n+     */\n+    public static void unTar(final File inputFile)\n+            throws IOException, ArchiveException {\n+\n+        String outputDir = inputFile.getAbsolutePath().split(\".tar\")[0];\n+        File outputTarDir = new File(outputDir);\n+        outputTarDir.mkdir();\n+        final InputStream is = new FileInputStream(inputFile);\n+        final TarArchiveInputStream debInputStream = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(\n+                \"tar\", is);\n+        TarArchiveEntry entry = null;\n+        while ((entry = (TarArchiveEntry) debInputStream.getNextEntry()) != null) {\n+            final File outputFile = new File(outputDir, entry.getName());\n+            if (entry.isDirectory()) {\n+                if (!outputFile.exists()) {\n+                    if (!outputFile.mkdirs()) {\n+                        throw new IllegalStateException(String.format(\n+                                \"Couldn't create directory %s.\", outputFile.getAbsolutePath()));\n+                    }\n+                }\n+            } else {\n+                final OutputStream outputFileStream = new FileOutputStream(outputFile);\n+                IOUtils.copy(debInputStream, outputFileStream);\n+                outputFileStream.close();\n+            }\n+        }\n+        debInputStream.close();\n+    }\n+\n+    public static void createTarFile(String source, String destFileName) throws Exception {\n+        TarArchiveOutputStream tarOs = null;\n+        File f = new File(destFileName);\n+        if (f.exists()) {\n+            f.delete();"
  }],
  "prId": 24922
}, {
  "comments": [{
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "What happens if `folder` not exists?",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-07-02T13:21:57Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.compress.archivers.ArchiveException;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+import java.io.*;\n+\n+public class FileUtility {\n+\n+    /**\n+     * Untar an input file into an output file.\n+     *\n+     * The output file is created in the output folder, having the same name as\n+     * the input file, minus the '.tar' extension.\n+     *\n+     * @param inputFile the input .tar file\n+     * @throws IOException\n+     *\n+     * @throws ArchiveException\n+     */\n+    public static void unTar(final File inputFile)\n+            throws IOException, ArchiveException {\n+\n+        String outputDir = inputFile.getAbsolutePath().split(\".tar\")[0];\n+        File outputTarDir = new File(outputDir);\n+        outputTarDir.mkdir();\n+        final InputStream is = new FileInputStream(inputFile);\n+        final TarArchiveInputStream debInputStream = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(\n+                \"tar\", is);\n+        TarArchiveEntry entry = null;\n+        while ((entry = (TarArchiveEntry) debInputStream.getNextEntry()) != null) {\n+            final File outputFile = new File(outputDir, entry.getName());\n+            if (entry.isDirectory()) {\n+                if (!outputFile.exists()) {\n+                    if (!outputFile.mkdirs()) {\n+                        throw new IllegalStateException(String.format(\n+                                \"Couldn't create directory %s.\", outputFile.getAbsolutePath()));\n+                    }\n+                }\n+            } else {\n+                final OutputStream outputFileStream = new FileOutputStream(outputFile);\n+                IOUtils.copy(debInputStream, outputFileStream);\n+                outputFileStream.close();\n+            }\n+        }\n+        debInputStream.close();\n+    }\n+\n+    public static void createTarFile(String source, String destFileName) throws Exception {\n+        TarArchiveOutputStream tarOs = null;\n+        File f = new File(destFileName);\n+        if (f.exists()) {\n+            f.delete();\n+        }\n+        try {\n+            FileOutputStream fos = new FileOutputStream(destFileName);\n+            tarOs = (TarArchiveOutputStream) new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", fos);\n+            tarOs = new TarArchiveOutputStream(fos);\n+            File folder = new File(source);\n+            File[] fileNames = folder.listFiles();"
  }],
  "prId": 24922
}, {
  "comments": [{
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "As I see `finish` is inside `close`.",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-07-02T13:26:31Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.compress.archivers.ArchiveException;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+import java.io.*;\n+\n+public class FileUtility {\n+\n+    /**\n+     * Untar an input file into an output file.\n+     *\n+     * The output file is created in the output folder, having the same name as\n+     * the input file, minus the '.tar' extension.\n+     *\n+     * @param inputFile the input .tar file\n+     * @throws IOException\n+     *\n+     * @throws ArchiveException\n+     */\n+    public static void unTar(final File inputFile)\n+            throws IOException, ArchiveException {\n+\n+        String outputDir = inputFile.getAbsolutePath().split(\".tar\")[0];\n+        File outputTarDir = new File(outputDir);\n+        outputTarDir.mkdir();\n+        final InputStream is = new FileInputStream(inputFile);\n+        final TarArchiveInputStream debInputStream = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(\n+                \"tar\", is);\n+        TarArchiveEntry entry = null;\n+        while ((entry = (TarArchiveEntry) debInputStream.getNextEntry()) != null) {\n+            final File outputFile = new File(outputDir, entry.getName());\n+            if (entry.isDirectory()) {\n+                if (!outputFile.exists()) {\n+                    if (!outputFile.mkdirs()) {\n+                        throw new IllegalStateException(String.format(\n+                                \"Couldn't create directory %s.\", outputFile.getAbsolutePath()));\n+                    }\n+                }\n+            } else {\n+                final OutputStream outputFileStream = new FileOutputStream(outputFile);\n+                IOUtils.copy(debInputStream, outputFileStream);\n+                outputFileStream.close();\n+            }\n+        }\n+        debInputStream.close();\n+    }\n+\n+    public static void createTarFile(String source, String destFileName) throws Exception {\n+        TarArchiveOutputStream tarOs = null;\n+        File f = new File(destFileName);\n+        if (f.exists()) {\n+            f.delete();\n+        }\n+        try {\n+            FileOutputStream fos = new FileOutputStream(destFileName);\n+            tarOs = (TarArchiveOutputStream) new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", fos);\n+            tarOs = new TarArchiveOutputStream(fos);\n+            File folder = new File(source);\n+            File[] fileNames = folder.listFiles();\n+            for(File file : fileNames){\n+                TarArchiveEntry tar_file = new TarArchiveEntry(file.getName());\n+                tar_file.setSize(file.length());\n+                tarOs.putArchiveEntry(tar_file);\n+                BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file));\n+                IOUtils.copy(bis, tarOs);\n+                bis.close();\n+                tarOs.closeArchiveEntry();\n+            }\n+        } catch (IOException e) {\n+            throw new IllegalStateException(String.format(\n+                    \"createTarFile failed with exception %s.\", e.getMessage()));\n+        } finally {\n+            try {\n+                tarOs.finish();"
  }],
  "prId": 24922
}, {
  "comments": [{
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Why 2 times construction needed?",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-07-02T13:28:05Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.compress.archivers.ArchiveException;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+import java.io.*;\n+\n+public class FileUtility {\n+\n+    /**\n+     * Untar an input file into an output file.\n+     *\n+     * The output file is created in the output folder, having the same name as\n+     * the input file, minus the '.tar' extension.\n+     *\n+     * @param inputFile the input .tar file\n+     * @throws IOException\n+     *\n+     * @throws ArchiveException\n+     */\n+    public static void unTar(final File inputFile)\n+            throws IOException, ArchiveException {\n+\n+        String outputDir = inputFile.getAbsolutePath().split(\".tar\")[0];\n+        File outputTarDir = new File(outputDir);\n+        outputTarDir.mkdir();\n+        final InputStream is = new FileInputStream(inputFile);\n+        final TarArchiveInputStream debInputStream = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(\n+                \"tar\", is);\n+        TarArchiveEntry entry = null;\n+        while ((entry = (TarArchiveEntry) debInputStream.getNextEntry()) != null) {\n+            final File outputFile = new File(outputDir, entry.getName());\n+            if (entry.isDirectory()) {\n+                if (!outputFile.exists()) {\n+                    if (!outputFile.mkdirs()) {\n+                        throw new IllegalStateException(String.format(\n+                                \"Couldn't create directory %s.\", outputFile.getAbsolutePath()));\n+                    }\n+                }\n+            } else {\n+                final OutputStream outputFileStream = new FileOutputStream(outputFile);\n+                IOUtils.copy(debInputStream, outputFileStream);\n+                outputFileStream.close();\n+            }\n+        }\n+        debInputStream.close();\n+    }\n+\n+    public static void createTarFile(String source, String destFileName) throws Exception {\n+        TarArchiveOutputStream tarOs = null;\n+        File f = new File(destFileName);\n+        if (f.exists()) {\n+            f.delete();\n+        }\n+        try {\n+            FileOutputStream fos = new FileOutputStream(destFileName);\n+            tarOs = (TarArchiveOutputStream) new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", fos);"
  }],
  "prId": 24922
}, {
  "comments": [{
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Maybe a roundtrip test would be good.",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-07-02T13:30:00Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*",
    "line": 1
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "I don't see it's solved.",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-08-21T14:24:41Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*",
    "line": 1
  }, {
    "author": {
      "login": "itsvikramagr"
    },
    "body": "Missed it. Let me add the tests and update the PR.",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-08-23T04:55:11Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*",
    "line": 1
  }],
  "prId": 24922
}, {
  "comments": [{
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Since the tar file will be uploaded to the checkpoint location I've checked what kind of compression algorithm is used (to minimize network traffic). I've found `FallbackZipEncoding` with the following documentation.\r\n```\r\n * <p>This implementation acts as a last resort implementation, when\r\n * neither {@link Simple8BitZipEnoding} nor {@link NioZipEncoding} is\r\n * available.</p>\r\n```\r\nWhat was the consideration here?\r\n",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-07-03T08:54:41Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.compress.archivers.ArchiveException;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+import java.io.*;\n+\n+public class FileUtility {\n+\n+    /**\n+     * Untar an input file into an output file.\n+     *\n+     * The output file is created in the output folder, having the same name as\n+     * the input file, minus the '.tar' extension.\n+     *\n+     * @param inputFile the input .tar file\n+     * @throws IOException\n+     *\n+     * @throws ArchiveException\n+     */\n+    public static void unTar(final File inputFile)"
  }, {
    "author": {
      "login": "itsvikramagr"
    },
    "body": "I have used the default encoding. If you look at the ZipEncodingHelper, you will find that \r\n\r\n```    \r\n static final ZipEncoding UTF8_ZIP_ENCODING = new FallbackZipEncoding(UTF8); \r\n    /*\r\n     * Instantiates a zip encoding.\r\n     * \r\n     * @param name The name of the zip encoding. Specify {@code null} for\r\n     *             the platform's default encoding.\r\n     * @return A zip encoding for the given encoding name.\r\n     */\r\n\r\n    public static ZipEncoding getZipEncoding(String name) {\r\n \r\n        // fallback encoding is good enough for UTF-8.\r\n        if (isUTF8(name)) {\r\n            return UTF8_ZIP_ENCODING;\r\n        }\r\n        if (name == null) {\r\n            return new FallbackZipEncoding();\r\n        }\r\n```\r\nUTF-8 is the default encoding in spark (see [here](https://github.com/apache/spark/blob/master/pom.xml#L116))\r\n\r\nI will make changes to pass `utf-8` explicitly while creating the TarArchiveInputStream object instead of relying on platform default encoding.",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-07-05T06:08:59Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.io;\n+\n+import org.apache.commons.compress.archivers.ArchiveException;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+import java.io.*;\n+\n+public class FileUtility {\n+\n+    /**\n+     * Untar an input file into an output file.\n+     *\n+     * The output file is created in the output folder, having the same name as\n+     * the input file, minus the '.tar' extension.\n+     *\n+     * @param inputFile the input .tar file\n+     * @throws IOException\n+     *\n+     * @throws ArchiveException\n+     */\n+    public static void unTar(final File inputFile)"
  }],
  "prId": 24922
}, {
  "comments": [{
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "I'd rather add `.` in string to have strict check.",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-07-09T12:40:02Z",
    "diffHunk": "@@ -24,79 +22,104 @@\n \n public class FileUtility {\n \n-    /**\n-     * Untar an input file into an output file.\n-     *\n-     * The output file is created in the output folder, having the same name as\n-     * the input file, minus the '.tar' extension.\n-     *\n-     * @param inputFile the input .tar file\n-     * @throws IOException\n-     *\n-     * @throws ArchiveException\n-     */\n-    public static void unTar(final File inputFile)\n-            throws IOException, ArchiveException {\n+  /**\n+   * Extract an input tar file into an output files and directories.\n+   * @param inputTarFileLoc the input file location for the tar file\n+   * @param destDirLoc destination for the extracted files\n+   *\n+   * @throws IOException\n+   * @throws IllegalStateException\n+   */\n+  public static final String ENCODING = \"utf-8\";\n \n-        String outputDir = inputFile.getAbsolutePath().split(\".tar\")[0];\n-        File outputTarDir = new File(outputDir);\n-        outputTarDir.mkdir();\n-        final InputStream is = new FileInputStream(inputFile);\n-        final TarArchiveInputStream debInputStream = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(\n-                \"tar\", is);\n-        TarArchiveEntry entry = null;\n-        while ((entry = (TarArchiveEntry) debInputStream.getNextEntry()) != null) {\n-            final File outputFile = new File(outputDir, entry.getName());\n-            if (entry.isDirectory()) {\n-                if (!outputFile.exists()) {\n-                    if (!outputFile.mkdirs()) {\n-                        throw new IllegalStateException(String.format(\n-                                \"Couldn't create directory %s.\", outputFile.getAbsolutePath()));\n-                    }\n-                }\n-            } else {\n-                final OutputStream outputFileStream = new FileOutputStream(outputFile);\n-                IOUtils.copy(debInputStream, outputFileStream);\n-                outputFileStream.close();\n-            }\n-        }\n-        debInputStream.close();\n+  public static void extractTarFile(String inputTarFileLoc, String destDirLoc)\n+          throws IOException, IllegalStateException {\n+    File inputFile = new File(inputTarFileLoc);\n+    if (!inputTarFileLoc.endsWith(\"tar\")) {"
  }],
  "prId": 24922
}, {
  "comments": [{
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Let's use try-with-resource whenever possible - it would ensure resource is guaranteed to be released, and it would also help readability.",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-07-09T12:46:16Z",
    "diffHunk": "@@ -24,79 +22,104 @@\n \n public class FileUtility {\n \n-    /**\n-     * Untar an input file into an output file.\n-     *\n-     * The output file is created in the output folder, having the same name as\n-     * the input file, minus the '.tar' extension.\n-     *\n-     * @param inputFile the input .tar file\n-     * @throws IOException\n-     *\n-     * @throws ArchiveException\n-     */\n-    public static void unTar(final File inputFile)\n-            throws IOException, ArchiveException {\n+  /**\n+   * Extract an input tar file into an output files and directories.\n+   * @param inputTarFileLoc the input file location for the tar file\n+   * @param destDirLoc destination for the extracted files\n+   *\n+   * @throws IOException\n+   * @throws IllegalStateException\n+   */\n+  public static final String ENCODING = \"utf-8\";\n \n-        String outputDir = inputFile.getAbsolutePath().split(\".tar\")[0];\n-        File outputTarDir = new File(outputDir);\n-        outputTarDir.mkdir();\n-        final InputStream is = new FileInputStream(inputFile);\n-        final TarArchiveInputStream debInputStream = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(\n-                \"tar\", is);\n-        TarArchiveEntry entry = null;\n-        while ((entry = (TarArchiveEntry) debInputStream.getNextEntry()) != null) {\n-            final File outputFile = new File(outputDir, entry.getName());\n-            if (entry.isDirectory()) {\n-                if (!outputFile.exists()) {\n-                    if (!outputFile.mkdirs()) {\n-                        throw new IllegalStateException(String.format(\n-                                \"Couldn't create directory %s.\", outputFile.getAbsolutePath()));\n-                    }\n-                }\n-            } else {\n-                final OutputStream outputFileStream = new FileOutputStream(outputFile);\n-                IOUtils.copy(debInputStream, outputFileStream);\n-                outputFileStream.close();\n-            }\n-        }\n-        debInputStream.close();\n+  public static void extractTarFile(String inputTarFileLoc, String destDirLoc)\n+          throws IOException, IllegalStateException {\n+    File inputFile = new File(inputTarFileLoc);\n+    if (!inputTarFileLoc.endsWith(\"tar\")) {\n+      throw new IllegalStateException(String.format(\n+              \"Input File %s should end with tar extension.\", inputTarFileLoc));\n+    }\n+    File destDir = new File(destDirLoc);\n+    if (destDir.exists() && !destDir.delete()) {\n+      throw new IllegalStateException(String.format(\n+              \"Couldn't delete the existing destination directory  %s \", destDirLoc));\n+    } else if (!destDir.mkdir()) {\n+      throw new IllegalStateException(String.format(\n+              \"Couldn't create directory  %s \", destDirLoc));\n     }\n \n-    public static void createTarFile(String source, String destFileName) throws Exception {\n-        TarArchiveOutputStream tarOs = null;\n-        File f = new File(destFileName);\n-        if (f.exists()) {\n-            f.delete();\n-        }\n-        try {\n-            FileOutputStream fos = new FileOutputStream(destFileName);\n-            tarOs = (TarArchiveOutputStream) new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", fos);\n-            tarOs = new TarArchiveOutputStream(fos);\n-            File folder = new File(source);\n-            File[] fileNames = folder.listFiles();\n-            for(File file : fileNames){\n-                TarArchiveEntry tar_file = new TarArchiveEntry(file.getName());\n-                tar_file.setSize(file.length());\n-                tarOs.putArchiveEntry(tar_file);\n-                BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file));\n-                IOUtils.copy(bis, tarOs);\n-                bis.close();\n-                tarOs.closeArchiveEntry();\n-            }\n-        } catch (IOException e) {\n+    final InputStream is = new FileInputStream(inputFile);"
  }],
  "prId": 24922
}, {
  "comments": [{
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "This method catches IOException to IllegalSstateException, so no need to have IOException here if my understanding is right.",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-07-09T12:48:23Z",
    "diffHunk": "@@ -24,79 +22,104 @@\n \n public class FileUtility {\n \n-    /**\n-     * Untar an input file into an output file.\n-     *\n-     * The output file is created in the output folder, having the same name as\n-     * the input file, minus the '.tar' extension.\n-     *\n-     * @param inputFile the input .tar file\n-     * @throws IOException\n-     *\n-     * @throws ArchiveException\n-     */\n-    public static void unTar(final File inputFile)\n-            throws IOException, ArchiveException {\n+  /**\n+   * Extract an input tar file into an output files and directories.\n+   * @param inputTarFileLoc the input file location for the tar file\n+   * @param destDirLoc destination for the extracted files\n+   *\n+   * @throws IOException\n+   * @throws IllegalStateException\n+   */\n+  public static final String ENCODING = \"utf-8\";\n \n-        String outputDir = inputFile.getAbsolutePath().split(\".tar\")[0];\n-        File outputTarDir = new File(outputDir);\n-        outputTarDir.mkdir();\n-        final InputStream is = new FileInputStream(inputFile);\n-        final TarArchiveInputStream debInputStream = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(\n-                \"tar\", is);\n-        TarArchiveEntry entry = null;\n-        while ((entry = (TarArchiveEntry) debInputStream.getNextEntry()) != null) {\n-            final File outputFile = new File(outputDir, entry.getName());\n-            if (entry.isDirectory()) {\n-                if (!outputFile.exists()) {\n-                    if (!outputFile.mkdirs()) {\n-                        throw new IllegalStateException(String.format(\n-                                \"Couldn't create directory %s.\", outputFile.getAbsolutePath()));\n-                    }\n-                }\n-            } else {\n-                final OutputStream outputFileStream = new FileOutputStream(outputFile);\n-                IOUtils.copy(debInputStream, outputFileStream);\n-                outputFileStream.close();\n-            }\n-        }\n-        debInputStream.close();\n+  public static void extractTarFile(String inputTarFileLoc, String destDirLoc)",
    "line": 34
  }],
  "prId": 24922
}, {
  "comments": [{
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Same here: this method catches IOException to IllegalSstateException, so no need to have IOException here if my understanding is right.",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-07-09T12:48:37Z",
    "diffHunk": "@@ -24,79 +22,104 @@\n \n public class FileUtility {\n \n-    /**\n-     * Untar an input file into an output file.\n-     *\n-     * The output file is created in the output folder, having the same name as\n-     * the input file, minus the '.tar' extension.\n-     *\n-     * @param inputFile the input .tar file\n-     * @throws IOException\n-     *\n-     * @throws ArchiveException\n-     */\n-    public static void unTar(final File inputFile)\n-            throws IOException, ArchiveException {\n+  /**\n+   * Extract an input tar file into an output files and directories.\n+   * @param inputTarFileLoc the input file location for the tar file\n+   * @param destDirLoc destination for the extracted files\n+   *\n+   * @throws IOException\n+   * @throws IllegalStateException\n+   */\n+  public static final String ENCODING = \"utf-8\";\n \n-        String outputDir = inputFile.getAbsolutePath().split(\".tar\")[0];\n-        File outputTarDir = new File(outputDir);\n-        outputTarDir.mkdir();\n-        final InputStream is = new FileInputStream(inputFile);\n-        final TarArchiveInputStream debInputStream = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(\n-                \"tar\", is);\n-        TarArchiveEntry entry = null;\n-        while ((entry = (TarArchiveEntry) debInputStream.getNextEntry()) != null) {\n-            final File outputFile = new File(outputDir, entry.getName());\n-            if (entry.isDirectory()) {\n-                if (!outputFile.exists()) {\n-                    if (!outputFile.mkdirs()) {\n-                        throw new IllegalStateException(String.format(\n-                                \"Couldn't create directory %s.\", outputFile.getAbsolutePath()));\n-                    }\n-                }\n-            } else {\n-                final OutputStream outputFileStream = new FileOutputStream(outputFile);\n-                IOUtils.copy(debInputStream, outputFileStream);\n-                outputFileStream.close();\n-            }\n-        }\n-        debInputStream.close();\n+  public static void extractTarFile(String inputTarFileLoc, String destDirLoc)\n+          throws IOException, IllegalStateException {\n+    File inputFile = new File(inputTarFileLoc);\n+    if (!inputTarFileLoc.endsWith(\"tar\")) {\n+      throw new IllegalStateException(String.format(\n+              \"Input File %s should end with tar extension.\", inputTarFileLoc));\n+    }\n+    File destDir = new File(destDirLoc);\n+    if (destDir.exists() && !destDir.delete()) {\n+      throw new IllegalStateException(String.format(\n+              \"Couldn't delete the existing destination directory  %s \", destDirLoc));\n+    } else if (!destDir.mkdir()) {\n+      throw new IllegalStateException(String.format(\n+              \"Couldn't create directory  %s \", destDirLoc));\n     }\n \n-    public static void createTarFile(String source, String destFileName) throws Exception {\n-        TarArchiveOutputStream tarOs = null;\n-        File f = new File(destFileName);\n-        if (f.exists()) {\n-            f.delete();\n-        }\n-        try {\n-            FileOutputStream fos = new FileOutputStream(destFileName);\n-            tarOs = (TarArchiveOutputStream) new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", fos);\n-            tarOs = new TarArchiveOutputStream(fos);\n-            File folder = new File(source);\n-            File[] fileNames = folder.listFiles();\n-            for(File file : fileNames){\n-                TarArchiveEntry tar_file = new TarArchiveEntry(file.getName());\n-                tar_file.setSize(file.length());\n-                tarOs.putArchiveEntry(tar_file);\n-                BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file));\n-                IOUtils.copy(bis, tarOs);\n-                bis.close();\n-                tarOs.closeArchiveEntry();\n-            }\n-        } catch (IOException e) {\n+    final InputStream is = new FileInputStream(inputFile);\n+    final TarArchiveInputStream debInputStream = new TarArchiveInputStream(is, ENCODING);\n+    OutputStream outputFileStream = null;\n+    try {\n+      TarArchiveEntry entry;\n+      while ((entry = (TarArchiveEntry) debInputStream.getNextEntry()) != null) {\n+        final File outputFile = new File(destDirLoc, entry.getName());\n+        if (entry.isDirectory()) {\n+          if (!outputFile.exists() && !outputFile.mkdirs()) {\n             throw new IllegalStateException(String.format(\n-                    \"createTarFile failed with exception %s.\", e.getMessage()));\n-        } finally {\n-            try {\n-                tarOs.finish();\n-                tarOs.close();\n-            } catch (IOException e) {\n-                throw new IllegalStateException(String.format(\n-                        \"createTarFile failed with exception %s.\", e.getMessage()));\n-            }\n+                    \"Couldn't create directory %s.\", outputFile.getAbsolutePath()));\n+          }\n+        } else {\n+          outputFileStream = new FileOutputStream(outputFile);\n+          IOUtils.copy(debInputStream, outputFileStream);\n+          outputFileStream.close();\n+          outputFileStream = null;\n         }\n+      }\n+    } catch (IOException e){\n+      throw new IllegalStateException(String.format(\n+              \"extractTarFile failed with exception %s.\", e.getMessage()));\n+    } finally {\n+      debInputStream.close();\n+      if (outputFileStream != null) {\n+        outputFileStream.close();\n+      }\n     }\n+  }\n \n+  /**\n+   * create a tar file for input source directory location .\n+   * @param source the source directory location\n+   * @param destFileLoc destination of the created tarball\n+   *\n+   * @throws IOException\n+   * @throws IllegalStateException\n+   */\n+  public static void createTarFile(String source, String destFileLoc)",
    "line": 80
  }],
  "prId": 24922
}, {
  "comments": [{
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Same here: try-with-resource.",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-07-09T12:49:00Z",
    "diffHunk": "@@ -24,79 +22,104 @@\n \n public class FileUtility {\n \n-    /**\n-     * Untar an input file into an output file.\n-     *\n-     * The output file is created in the output folder, having the same name as\n-     * the input file, minus the '.tar' extension.\n-     *\n-     * @param inputFile the input .tar file\n-     * @throws IOException\n-     *\n-     * @throws ArchiveException\n-     */\n-    public static void unTar(final File inputFile)\n-            throws IOException, ArchiveException {\n+  /**\n+   * Extract an input tar file into an output files and directories.\n+   * @param inputTarFileLoc the input file location for the tar file\n+   * @param destDirLoc destination for the extracted files\n+   *\n+   * @throws IOException\n+   * @throws IllegalStateException\n+   */\n+  public static final String ENCODING = \"utf-8\";\n \n-        String outputDir = inputFile.getAbsolutePath().split(\".tar\")[0];\n-        File outputTarDir = new File(outputDir);\n-        outputTarDir.mkdir();\n-        final InputStream is = new FileInputStream(inputFile);\n-        final TarArchiveInputStream debInputStream = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(\n-                \"tar\", is);\n-        TarArchiveEntry entry = null;\n-        while ((entry = (TarArchiveEntry) debInputStream.getNextEntry()) != null) {\n-            final File outputFile = new File(outputDir, entry.getName());\n-            if (entry.isDirectory()) {\n-                if (!outputFile.exists()) {\n-                    if (!outputFile.mkdirs()) {\n-                        throw new IllegalStateException(String.format(\n-                                \"Couldn't create directory %s.\", outputFile.getAbsolutePath()));\n-                    }\n-                }\n-            } else {\n-                final OutputStream outputFileStream = new FileOutputStream(outputFile);\n-                IOUtils.copy(debInputStream, outputFileStream);\n-                outputFileStream.close();\n-            }\n-        }\n-        debInputStream.close();\n+  public static void extractTarFile(String inputTarFileLoc, String destDirLoc)\n+          throws IOException, IllegalStateException {\n+    File inputFile = new File(inputTarFileLoc);\n+    if (!inputTarFileLoc.endsWith(\"tar\")) {\n+      throw new IllegalStateException(String.format(\n+              \"Input File %s should end with tar extension.\", inputTarFileLoc));\n+    }\n+    File destDir = new File(destDirLoc);\n+    if (destDir.exists() && !destDir.delete()) {\n+      throw new IllegalStateException(String.format(\n+              \"Couldn't delete the existing destination directory  %s \", destDirLoc));\n+    } else if (!destDir.mkdir()) {\n+      throw new IllegalStateException(String.format(\n+              \"Couldn't create directory  %s \", destDirLoc));\n     }\n \n-    public static void createTarFile(String source, String destFileName) throws Exception {\n-        TarArchiveOutputStream tarOs = null;\n-        File f = new File(destFileName);\n-        if (f.exists()) {\n-            f.delete();\n-        }\n-        try {\n-            FileOutputStream fos = new FileOutputStream(destFileName);\n-            tarOs = (TarArchiveOutputStream) new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", fos);\n-            tarOs = new TarArchiveOutputStream(fos);\n-            File folder = new File(source);\n-            File[] fileNames = folder.listFiles();\n-            for(File file : fileNames){\n-                TarArchiveEntry tar_file = new TarArchiveEntry(file.getName());\n-                tar_file.setSize(file.length());\n-                tarOs.putArchiveEntry(tar_file);\n-                BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file));\n-                IOUtils.copy(bis, tarOs);\n-                bis.close();\n-                tarOs.closeArchiveEntry();\n-            }\n-        } catch (IOException e) {\n+    final InputStream is = new FileInputStream(inputFile);\n+    final TarArchiveInputStream debInputStream = new TarArchiveInputStream(is, ENCODING);\n+    OutputStream outputFileStream = null;\n+    try {\n+      TarArchiveEntry entry;\n+      while ((entry = (TarArchiveEntry) debInputStream.getNextEntry()) != null) {\n+        final File outputFile = new File(destDirLoc, entry.getName());\n+        if (entry.isDirectory()) {\n+          if (!outputFile.exists() && !outputFile.mkdirs()) {\n             throw new IllegalStateException(String.format(\n-                    \"createTarFile failed with exception %s.\", e.getMessage()));\n-        } finally {\n-            try {\n-                tarOs.finish();\n-                tarOs.close();\n-            } catch (IOException e) {\n-                throw new IllegalStateException(String.format(\n-                        \"createTarFile failed with exception %s.\", e.getMessage()));\n-            }\n+                    \"Couldn't create directory %s.\", outputFile.getAbsolutePath()));\n+          }\n+        } else {\n+          outputFileStream = new FileOutputStream(outputFile);\n+          IOUtils.copy(debInputStream, outputFileStream);\n+          outputFileStream.close();\n+          outputFileStream = null;\n         }\n+      }\n+    } catch (IOException e){\n+      throw new IllegalStateException(String.format(\n+              \"extractTarFile failed with exception %s.\", e.getMessage()));\n+    } finally {\n+      debInputStream.close();\n+      if (outputFileStream != null) {\n+        outputFileStream.close();\n+      }\n     }\n+  }\n \n+  /**\n+   * create a tar file for input source directory location .\n+   * @param source the source directory location\n+   * @param destFileLoc destination of the created tarball\n+   *\n+   * @throws IOException\n+   * @throws IllegalStateException\n+   */\n+  public static void createTarFile(String source, String destFileLoc)\n+          throws IllegalStateException, IOException {\n+    TarArchiveOutputStream tarOs = null;"
  }],
  "prId": 24922
}, {
  "comments": [{
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "If somehow this line throws exception, NPE would be occurred in `finally`. Let's use `try-with-resource` and avoid all cases.",
    "commit": "45e0d054a38958ac9e1b7c6a9429a3a3df9b8ff1",
    "createdAt": "2019-07-09T12:53:12Z",
    "diffHunk": "@@ -24,79 +22,104 @@\n \n public class FileUtility {\n \n-    /**\n-     * Untar an input file into an output file.\n-     *\n-     * The output file is created in the output folder, having the same name as\n-     * the input file, minus the '.tar' extension.\n-     *\n-     * @param inputFile the input .tar file\n-     * @throws IOException\n-     *\n-     * @throws ArchiveException\n-     */\n-    public static void unTar(final File inputFile)\n-            throws IOException, ArchiveException {\n+  /**\n+   * Extract an input tar file into an output files and directories.\n+   * @param inputTarFileLoc the input file location for the tar file\n+   * @param destDirLoc destination for the extracted files\n+   *\n+   * @throws IOException\n+   * @throws IllegalStateException\n+   */\n+  public static final String ENCODING = \"utf-8\";\n \n-        String outputDir = inputFile.getAbsolutePath().split(\".tar\")[0];\n-        File outputTarDir = new File(outputDir);\n-        outputTarDir.mkdir();\n-        final InputStream is = new FileInputStream(inputFile);\n-        final TarArchiveInputStream debInputStream = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(\n-                \"tar\", is);\n-        TarArchiveEntry entry = null;\n-        while ((entry = (TarArchiveEntry) debInputStream.getNextEntry()) != null) {\n-            final File outputFile = new File(outputDir, entry.getName());\n-            if (entry.isDirectory()) {\n-                if (!outputFile.exists()) {\n-                    if (!outputFile.mkdirs()) {\n-                        throw new IllegalStateException(String.format(\n-                                \"Couldn't create directory %s.\", outputFile.getAbsolutePath()));\n-                    }\n-                }\n-            } else {\n-                final OutputStream outputFileStream = new FileOutputStream(outputFile);\n-                IOUtils.copy(debInputStream, outputFileStream);\n-                outputFileStream.close();\n-            }\n-        }\n-        debInputStream.close();\n+  public static void extractTarFile(String inputTarFileLoc, String destDirLoc)\n+          throws IOException, IllegalStateException {\n+    File inputFile = new File(inputTarFileLoc);\n+    if (!inputTarFileLoc.endsWith(\"tar\")) {\n+      throw new IllegalStateException(String.format(\n+              \"Input File %s should end with tar extension.\", inputTarFileLoc));\n+    }\n+    File destDir = new File(destDirLoc);\n+    if (destDir.exists() && !destDir.delete()) {\n+      throw new IllegalStateException(String.format(\n+              \"Couldn't delete the existing destination directory  %s \", destDirLoc));\n+    } else if (!destDir.mkdir()) {\n+      throw new IllegalStateException(String.format(\n+              \"Couldn't create directory  %s \", destDirLoc));\n     }\n \n-    public static void createTarFile(String source, String destFileName) throws Exception {\n-        TarArchiveOutputStream tarOs = null;\n-        File f = new File(destFileName);\n-        if (f.exists()) {\n-            f.delete();\n-        }\n-        try {\n-            FileOutputStream fos = new FileOutputStream(destFileName);\n-            tarOs = (TarArchiveOutputStream) new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", fos);\n-            tarOs = new TarArchiveOutputStream(fos);\n-            File folder = new File(source);\n-            File[] fileNames = folder.listFiles();\n-            for(File file : fileNames){\n-                TarArchiveEntry tar_file = new TarArchiveEntry(file.getName());\n-                tar_file.setSize(file.length());\n-                tarOs.putArchiveEntry(tar_file);\n-                BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file));\n-                IOUtils.copy(bis, tarOs);\n-                bis.close();\n-                tarOs.closeArchiveEntry();\n-            }\n-        } catch (IOException e) {\n+    final InputStream is = new FileInputStream(inputFile);\n+    final TarArchiveInputStream debInputStream = new TarArchiveInputStream(is, ENCODING);\n+    OutputStream outputFileStream = null;\n+    try {\n+      TarArchiveEntry entry;\n+      while ((entry = (TarArchiveEntry) debInputStream.getNextEntry()) != null) {\n+        final File outputFile = new File(destDirLoc, entry.getName());\n+        if (entry.isDirectory()) {\n+          if (!outputFile.exists() && !outputFile.mkdirs()) {\n             throw new IllegalStateException(String.format(\n-                    \"createTarFile failed with exception %s.\", e.getMessage()));\n-        } finally {\n-            try {\n-                tarOs.finish();\n-                tarOs.close();\n-            } catch (IOException e) {\n-                throw new IllegalStateException(String.format(\n-                        \"createTarFile failed with exception %s.\", e.getMessage()));\n-            }\n+                    \"Couldn't create directory %s.\", outputFile.getAbsolutePath()));\n+          }\n+        } else {\n+          outputFileStream = new FileOutputStream(outputFile);\n+          IOUtils.copy(debInputStream, outputFileStream);\n+          outputFileStream.close();\n+          outputFileStream = null;\n         }\n+      }\n+    } catch (IOException e){\n+      throw new IllegalStateException(String.format(\n+              \"extractTarFile failed with exception %s.\", e.getMessage()));\n+    } finally {\n+      debInputStream.close();\n+      if (outputFileStream != null) {\n+        outputFileStream.close();\n+      }\n     }\n+  }\n \n+  /**\n+   * create a tar file for input source directory location .\n+   * @param source the source directory location\n+   * @param destFileLoc destination of the created tarball\n+   *\n+   * @throws IOException\n+   * @throws IllegalStateException\n+   */\n+  public static void createTarFile(String source, String destFileLoc)\n+          throws IllegalStateException, IOException {\n+    TarArchiveOutputStream tarOs = null;\n+    File f = new File(destFileLoc);\n+    if (f.exists() && !f.delete()) {\n+      throw new IllegalStateException(String.format(\n+              \"Couldn't delete the destination file location %s\", destFileLoc));\n+    }\n+    BufferedInputStream bis = null;\n+    try {\n+      FileOutputStream fos = new FileOutputStream(destFileLoc);"
  }],
  "prId": 24922
}]