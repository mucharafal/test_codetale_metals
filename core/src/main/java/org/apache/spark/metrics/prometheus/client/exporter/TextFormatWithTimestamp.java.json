[{
  "comments": [{
    "author": {
      "login": "smurakozi"
    },
    "body": "No doc.",
    "commit": "344c4647fc84da8f265d9b8d66f0e9424b41359f",
    "createdAt": "2018-02-08T10:04:14Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.metrics.prometheus.client.exporter;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Enumeration;\n+\n+import io.prometheus.client.Collector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TextFormatWithTimestamp {"
  }, {
    "author": {
      "login": "stoader"
    },
    "body": "Added doc.",
    "commit": "344c4647fc84da8f265d9b8d66f0e9424b41359f",
    "createdAt": "2018-02-09T22:09:36Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.metrics.prometheus.client.exporter;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Enumeration;\n+\n+import io.prometheus.client.Collector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TextFormatWithTimestamp {"
  }],
  "prId": 19775
}, {
  "comments": [{
    "author": {
      "login": "smurakozi"
    },
    "body": "No doc",
    "commit": "344c4647fc84da8f265d9b8d66f0e9424b41359f",
    "createdAt": "2018-02-08T10:05:12Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.metrics.prometheus.client.exporter;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Enumeration;\n+\n+import io.prometheus.client.Collector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TextFormatWithTimestamp {\n+    private static final Logger logger = LoggerFactory.getLogger(TextFormatWithTimestamp.class);\n+\n+    /**\n+     * Content-type for text version 0.0.4.\n+     */\n+    public static final String CONTENT_TYPE_004 = \"text/plain; version=0.0.4; charset=utf-8\";\n+\n+    private static StringBuilder jsonMessageLogBuilder = new StringBuilder();\n+\n+    public static void write004(Writer writer,"
  }, {
    "author": {
      "login": "stoader"
    },
    "body": "Added doc.",
    "commit": "344c4647fc84da8f265d9b8d66f0e9424b41359f",
    "createdAt": "2018-02-09T22:09:32Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.metrics.prometheus.client.exporter;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Enumeration;\n+\n+import io.prometheus.client.Collector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TextFormatWithTimestamp {\n+    private static final Logger logger = LoggerFactory.getLogger(TextFormatWithTimestamp.class);\n+\n+    /**\n+     * Content-type for text version 0.0.4.\n+     */\n+    public static final String CONTENT_TYPE_004 = \"text/plain; version=0.0.4; charset=utf-8\";\n+\n+    private static StringBuilder jsonMessageLogBuilder = new StringBuilder();\n+\n+    public static void write004(Writer writer,"
  }],
  "prId": 19775
}, {
  "comments": [{
    "author": {
      "login": "smurakozi"
    },
    "body": "I think `for(Collector.MetricFamilySamples s: Collections.list(mfs)) {`  would be nicer.\r\n",
    "commit": "344c4647fc84da8f265d9b8d66f0e9424b41359f",
    "createdAt": "2018-02-08T10:15:08Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.metrics.prometheus.client.exporter;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Enumeration;\n+\n+import io.prometheus.client.Collector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TextFormatWithTimestamp {\n+    private static final Logger logger = LoggerFactory.getLogger(TextFormatWithTimestamp.class);\n+\n+    /**\n+     * Content-type for text version 0.0.4.\n+     */\n+    public static final String CONTENT_TYPE_004 = \"text/plain; version=0.0.4; charset=utf-8\";\n+\n+    private static StringBuilder jsonMessageLogBuilder = new StringBuilder();\n+\n+    public static void write004(Writer writer,\n+                                Enumeration<Collector.MetricFamilySamples> mfs)throws IOException {\n+        write004(writer, mfs, null);\n+    }\n+\n+    /**\n+     * Write out the text version 0.0.4 of the given MetricFamilySamples.\n+     */\n+    public static void write004(Writer writer,Enumeration<Collector.MetricFamilySamples> mfs,\n+                                String timestamp) throws IOException {\n+    /* See http://prometheus.io/docs/instrumenting/exposition_formats/\n+     * for the output format specification. */\n+    while(mfs.hasMoreElements()) {\n+        Collector.MetricFamilySamples metricFamilySamples = mfs.nextElement();"
  }, {
    "author": {
      "login": "smurakozi"
    },
    "body": "Also, method body is not indented well.",
    "commit": "344c4647fc84da8f265d9b8d66f0e9424b41359f",
    "createdAt": "2018-02-08T10:16:19Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.metrics.prometheus.client.exporter;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Enumeration;\n+\n+import io.prometheus.client.Collector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TextFormatWithTimestamp {\n+    private static final Logger logger = LoggerFactory.getLogger(TextFormatWithTimestamp.class);\n+\n+    /**\n+     * Content-type for text version 0.0.4.\n+     */\n+    public static final String CONTENT_TYPE_004 = \"text/plain; version=0.0.4; charset=utf-8\";\n+\n+    private static StringBuilder jsonMessageLogBuilder = new StringBuilder();\n+\n+    public static void write004(Writer writer,\n+                                Enumeration<Collector.MetricFamilySamples> mfs)throws IOException {\n+        write004(writer, mfs, null);\n+    }\n+\n+    /**\n+     * Write out the text version 0.0.4 of the given MetricFamilySamples.\n+     */\n+    public static void write004(Writer writer,Enumeration<Collector.MetricFamilySamples> mfs,\n+                                String timestamp) throws IOException {\n+    /* See http://prometheus.io/docs/instrumenting/exposition_formats/\n+     * for the output format specification. */\n+    while(mfs.hasMoreElements()) {\n+        Collector.MetricFamilySamples metricFamilySamples = mfs.nextElement();"
  }, {
    "author": {
      "login": "stoader"
    },
    "body": "This class has been refactored.",
    "commit": "344c4647fc84da8f265d9b8d66f0e9424b41359f",
    "createdAt": "2018-02-09T22:09:30Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.metrics.prometheus.client.exporter;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Enumeration;\n+\n+import io.prometheus.client.Collector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TextFormatWithTimestamp {\n+    private static final Logger logger = LoggerFactory.getLogger(TextFormatWithTimestamp.class);\n+\n+    /**\n+     * Content-type for text version 0.0.4.\n+     */\n+    public static final String CONTENT_TYPE_004 = \"text/plain; version=0.0.4; charset=utf-8\";\n+\n+    private static StringBuilder jsonMessageLogBuilder = new StringBuilder();\n+\n+    public static void write004(Writer writer,\n+                                Enumeration<Collector.MetricFamilySamples> mfs)throws IOException {\n+        write004(writer, mfs, null);\n+    }\n+\n+    /**\n+     * Write out the text version 0.0.4 of the given MetricFamilySamples.\n+     */\n+    public static void write004(Writer writer,Enumeration<Collector.MetricFamilySamples> mfs,\n+                                String timestamp) throws IOException {\n+    /* See http://prometheus.io/docs/instrumenting/exposition_formats/\n+     * for the output format specification. */\n+    while(mfs.hasMoreElements()) {\n+        Collector.MetricFamilySamples metricFamilySamples = mfs.nextElement();"
  }],
  "prId": 19775
}, {
  "comments": [{
    "author": {
      "login": "smurakozi"
    },
    "body": "Nit: empty line",
    "commit": "344c4647fc84da8f265d9b8d66f0e9424b41359f",
    "createdAt": "2018-02-08T10:17:34Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.metrics.prometheus.client.exporter;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Enumeration;\n+\n+import io.prometheus.client.Collector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TextFormatWithTimestamp {\n+    private static final Logger logger = LoggerFactory.getLogger(TextFormatWithTimestamp.class);\n+\n+    /**\n+     * Content-type for text version 0.0.4.\n+     */\n+    public static final String CONTENT_TYPE_004 = \"text/plain; version=0.0.4; charset=utf-8\";\n+\n+    private static StringBuilder jsonMessageLogBuilder = new StringBuilder();\n+\n+    public static void write004(Writer writer,\n+                                Enumeration<Collector.MetricFamilySamples> mfs)throws IOException {\n+        write004(writer, mfs, null);\n+    }\n+\n+    /**\n+     * Write out the text version 0.0.4 of the given MetricFamilySamples.\n+     */\n+    public static void write004(Writer writer,Enumeration<Collector.MetricFamilySamples> mfs,\n+                                String timestamp) throws IOException {\n+    /* See http://prometheus.io/docs/instrumenting/exposition_formats/\n+     * for the output format specification. */\n+    while(mfs.hasMoreElements()) {\n+        Collector.MetricFamilySamples metricFamilySamples = mfs.nextElement();\n+\n+        logger.debug(\"Metrics data\");\n+        logger.debug(metricFamilySamples.toString());\n+        logger.debug(\"Logging metrics as a json format:\");\n+\n+\n+        writer.write(\"# HELP \");\n+        appendToJsonMessageLogBuilder(\"# HELP \");\n+        writer.write(metricFamilySamples.name);\n+        appendToJsonMessageLogBuilder(metricFamilySamples.name);\n+        writer.write(' ');\n+        appendToJsonMessageLogBuilder(' ');\n+        writeEscapedHelp(writer, metricFamilySamples.help);\n+        writer.write('\\n');\n+        appendToJsonMessageLogBuilder('\\n');\n+\n+        writer.write(\"# TYPE \");\n+        appendToJsonMessageLogBuilder(\"# TYPE \");\n+        writer.write(metricFamilySamples.name);\n+        appendToJsonMessageLogBuilder(metricFamilySamples.name);\n+        writer.write(' ');\n+        appendToJsonMessageLogBuilder(' ');\n+        writer.write(typeString(metricFamilySamples.type));\n+        appendToJsonMessageLogBuilder(typeString(metricFamilySamples.type));\n+        writer.write('\\n');\n+        appendToJsonMessageLogBuilder('\\n');\n+\n+        for (Collector.MetricFamilySamples.Sample sample: metricFamilySamples.samples) {\n+            writer.write(sample.name);\n+            appendToJsonMessageLogBuilder(sample.name);\n+            if (sample.labelNames.size() > 0) {\n+                writer.write('{');\n+                appendToJsonMessageLogBuilder('{');\n+                for (int i = 0; i < sample.labelNames.size(); ++i) {\n+                    writer.write(sample.labelNames.get(i));\n+                    appendToJsonMessageLogBuilder(sample.labelNames.get(i));\n+                    writer.write(\"=\\\"\");\n+                    appendToJsonMessageLogBuilder(\"=\\\"\");\n+                    writeEscapedLabelValue(writer, sample.labelValues.get(i));\n+                    writer.write(\"\\\",\");\n+                    appendToJsonMessageLogBuilder(\"\\\",\");\n+                }\n+                writer.write('}');\n+                appendToJsonMessageLogBuilder('}');\n+            }\n+            writer.write(' ');\n+            appendToJsonMessageLogBuilder(' ');\n+            writer.write(Collector.doubleToGoString(sample.value));\n+            appendToJsonMessageLogBuilder(Collector.doubleToGoString(sample.value));\n+            if(timestamp != null && !timestamp.isEmpty()) {\n+                writer.write(\" \" + timestamp);\n+                appendToJsonMessageLogBuilder(\" \" + timestamp);\n+            }\n+            writer.write('\\n');\n+            appendToJsonMessageLogBuilder('\\n');\n+        }\n+        logger.debug(\"JSON: \"+ jsonMessageLogBuilder);\n+        }\n+    }\n+\n+    private static void writeEscapedHelp(Writer writer, String s) throws IOException {\n+        for (int i = 0; i < s.length(); i++) {\n+            char c = s.charAt(i);\n+            switch (c) {\n+                case '\\\\':\n+"
  }, {
    "author": {
      "login": "stoader"
    },
    "body": "Empty line removed.",
    "commit": "344c4647fc84da8f265d9b8d66f0e9424b41359f",
    "createdAt": "2018-02-09T22:09:28Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.metrics.prometheus.client.exporter;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Enumeration;\n+\n+import io.prometheus.client.Collector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TextFormatWithTimestamp {\n+    private static final Logger logger = LoggerFactory.getLogger(TextFormatWithTimestamp.class);\n+\n+    /**\n+     * Content-type for text version 0.0.4.\n+     */\n+    public static final String CONTENT_TYPE_004 = \"text/plain; version=0.0.4; charset=utf-8\";\n+\n+    private static StringBuilder jsonMessageLogBuilder = new StringBuilder();\n+\n+    public static void write004(Writer writer,\n+                                Enumeration<Collector.MetricFamilySamples> mfs)throws IOException {\n+        write004(writer, mfs, null);\n+    }\n+\n+    /**\n+     * Write out the text version 0.0.4 of the given MetricFamilySamples.\n+     */\n+    public static void write004(Writer writer,Enumeration<Collector.MetricFamilySamples> mfs,\n+                                String timestamp) throws IOException {\n+    /* See http://prometheus.io/docs/instrumenting/exposition_formats/\n+     * for the output format specification. */\n+    while(mfs.hasMoreElements()) {\n+        Collector.MetricFamilySamples metricFamilySamples = mfs.nextElement();\n+\n+        logger.debug(\"Metrics data\");\n+        logger.debug(metricFamilySamples.toString());\n+        logger.debug(\"Logging metrics as a json format:\");\n+\n+\n+        writer.write(\"# HELP \");\n+        appendToJsonMessageLogBuilder(\"# HELP \");\n+        writer.write(metricFamilySamples.name);\n+        appendToJsonMessageLogBuilder(metricFamilySamples.name);\n+        writer.write(' ');\n+        appendToJsonMessageLogBuilder(' ');\n+        writeEscapedHelp(writer, metricFamilySamples.help);\n+        writer.write('\\n');\n+        appendToJsonMessageLogBuilder('\\n');\n+\n+        writer.write(\"# TYPE \");\n+        appendToJsonMessageLogBuilder(\"# TYPE \");\n+        writer.write(metricFamilySamples.name);\n+        appendToJsonMessageLogBuilder(metricFamilySamples.name);\n+        writer.write(' ');\n+        appendToJsonMessageLogBuilder(' ');\n+        writer.write(typeString(metricFamilySamples.type));\n+        appendToJsonMessageLogBuilder(typeString(metricFamilySamples.type));\n+        writer.write('\\n');\n+        appendToJsonMessageLogBuilder('\\n');\n+\n+        for (Collector.MetricFamilySamples.Sample sample: metricFamilySamples.samples) {\n+            writer.write(sample.name);\n+            appendToJsonMessageLogBuilder(sample.name);\n+            if (sample.labelNames.size() > 0) {\n+                writer.write('{');\n+                appendToJsonMessageLogBuilder('{');\n+                for (int i = 0; i < sample.labelNames.size(); ++i) {\n+                    writer.write(sample.labelNames.get(i));\n+                    appendToJsonMessageLogBuilder(sample.labelNames.get(i));\n+                    writer.write(\"=\\\"\");\n+                    appendToJsonMessageLogBuilder(\"=\\\"\");\n+                    writeEscapedLabelValue(writer, sample.labelValues.get(i));\n+                    writer.write(\"\\\",\");\n+                    appendToJsonMessageLogBuilder(\"\\\",\");\n+                }\n+                writer.write('}');\n+                appendToJsonMessageLogBuilder('}');\n+            }\n+            writer.write(' ');\n+            appendToJsonMessageLogBuilder(' ');\n+            writer.write(Collector.doubleToGoString(sample.value));\n+            appendToJsonMessageLogBuilder(Collector.doubleToGoString(sample.value));\n+            if(timestamp != null && !timestamp.isEmpty()) {\n+                writer.write(\" \" + timestamp);\n+                appendToJsonMessageLogBuilder(\" \" + timestamp);\n+            }\n+            writer.write('\\n');\n+            appendToJsonMessageLogBuilder('\\n');\n+        }\n+        logger.debug(\"JSON: \"+ jsonMessageLogBuilder);\n+        }\n+    }\n+\n+    private static void writeEscapedHelp(Writer writer, String s) throws IOException {\n+        for (int i = 0; i < s.length(); i++) {\n+            char c = s.charAt(i);\n+            switch (c) {\n+                case '\\\\':\n+"
  }],
  "prId": 19775
}, {
  "comments": [{
    "author": {
      "login": "smurakozi"
    },
    "body": "Usage of this variable is questionable for a couple of reasons:\r\n- it just keeps growing, it's never cleared or re-initialized. As a consequence from the second call of write it will have invalid content + it acts as a memory leak.\r\n- its usage pattern (`writer.write(blah);appendToJsonMessageLogBuilder(\"blah\")`) is pretty verbose, it should be factored out. \r\n- it's not thread safe (and it's not documented)\r\n- I don't think accessing it as a static member everywhere is a good design. It should either\r\n  - be passed around as method parameter\r\n  - or changed to an instance method. The static write004 could instantiate a new `TextFormatWithTimestamp` and call write on that. \r\n\r\n",
    "commit": "344c4647fc84da8f265d9b8d66f0e9424b41359f",
    "createdAt": "2018-02-08T10:26:37Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.metrics.prometheus.client.exporter;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Enumeration;\n+\n+import io.prometheus.client.Collector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TextFormatWithTimestamp {\n+    private static final Logger logger = LoggerFactory.getLogger(TextFormatWithTimestamp.class);\n+\n+    /**\n+     * Content-type for text version 0.0.4.\n+     */\n+    public static final String CONTENT_TYPE_004 = \"text/plain; version=0.0.4; charset=utf-8\";\n+\n+    private static StringBuilder jsonMessageLogBuilder = new StringBuilder();"
  }, {
    "author": {
      "login": "stoader"
    },
    "body": "This class has been refactored.",
    "commit": "344c4647fc84da8f265d9b8d66f0e9424b41359f",
    "createdAt": "2018-02-09T22:09:34Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.metrics.prometheus.client.exporter;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Enumeration;\n+\n+import io.prometheus.client.Collector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TextFormatWithTimestamp {\n+    private static final Logger logger = LoggerFactory.getLogger(TextFormatWithTimestamp.class);\n+\n+    /**\n+     * Content-type for text version 0.0.4.\n+     */\n+    public static final String CONTENT_TYPE_004 = \"text/plain; version=0.0.4; charset=utf-8\";\n+\n+    private static StringBuilder jsonMessageLogBuilder = new StringBuilder();"
  }],
  "prId": 19775
}]