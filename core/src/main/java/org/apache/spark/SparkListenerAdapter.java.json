[{
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "What about calling this `JavaSparkListener` - that's what we've tended to use in the past for things that were supposed to be \"drop in\" substitutes for Scala classes.\n",
    "commit": "946d2c52f0e1db32c4a041b2f62e8b0a71fd9fec",
    "createdAt": "2015-01-05T22:33:47Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import org.apache.spark.scheduler.SparkListener;\n+import org.apache.spark.scheduler.SparkListenerApplicationEnd;\n+import org.apache.spark.scheduler.SparkListenerApplicationStart;\n+import org.apache.spark.scheduler.SparkListenerBlockManagerAdded;\n+import org.apache.spark.scheduler.SparkListenerBlockManagerRemoved;\n+import org.apache.spark.scheduler.SparkListenerEnvironmentUpdate;\n+import org.apache.spark.scheduler.SparkListenerExecutorAdded;\n+import org.apache.spark.scheduler.SparkListenerExecutorMetricsUpdate;\n+import org.apache.spark.scheduler.SparkListenerExecutorRemoved;\n+import org.apache.spark.scheduler.SparkListenerJobEnd;\n+import org.apache.spark.scheduler.SparkListenerJobStart;\n+import org.apache.spark.scheduler.SparkListenerStageCompleted;\n+import org.apache.spark.scheduler.SparkListenerStageSubmitted;\n+import org.apache.spark.scheduler.SparkListenerTaskEnd;\n+import org.apache.spark.scheduler.SparkListenerTaskGettingResult;\n+import org.apache.spark.scheduler.SparkListenerTaskStart;\n+import org.apache.spark.scheduler.SparkListenerUnpersistRDD;\n+\n+/**\n+ * Java clients should extend this class instead of implementing\n+ * SparkListener directly. This is to prevent java clients\n+ * from breaking when new events are added to the SparkListener\n+ * trait.\n+ *\n+ * This is a concrete class instead of abstract to enforce\n+ * new events get added to both the SparkListener and this adapter\n+ * in lockstep.\n+ */\n+public class SparkListenerAdapter implements SparkListener {"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "+1 on `JavaSparkListener`. It's weird for the user to extend an \"adapter\"\n",
    "commit": "946d2c52f0e1db32c4a041b2f62e8b0a71fd9fec",
    "createdAt": "2015-01-07T23:05:52Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import org.apache.spark.scheduler.SparkListener;\n+import org.apache.spark.scheduler.SparkListenerApplicationEnd;\n+import org.apache.spark.scheduler.SparkListenerApplicationStart;\n+import org.apache.spark.scheduler.SparkListenerBlockManagerAdded;\n+import org.apache.spark.scheduler.SparkListenerBlockManagerRemoved;\n+import org.apache.spark.scheduler.SparkListenerEnvironmentUpdate;\n+import org.apache.spark.scheduler.SparkListenerExecutorAdded;\n+import org.apache.spark.scheduler.SparkListenerExecutorMetricsUpdate;\n+import org.apache.spark.scheduler.SparkListenerExecutorRemoved;\n+import org.apache.spark.scheduler.SparkListenerJobEnd;\n+import org.apache.spark.scheduler.SparkListenerJobStart;\n+import org.apache.spark.scheduler.SparkListenerStageCompleted;\n+import org.apache.spark.scheduler.SparkListenerStageSubmitted;\n+import org.apache.spark.scheduler.SparkListenerTaskEnd;\n+import org.apache.spark.scheduler.SparkListenerTaskGettingResult;\n+import org.apache.spark.scheduler.SparkListenerTaskStart;\n+import org.apache.spark.scheduler.SparkListenerUnpersistRDD;\n+\n+/**\n+ * Java clients should extend this class instead of implementing\n+ * SparkListener directly. This is to prevent java clients\n+ * from breaking when new events are added to the SparkListener\n+ * trait.\n+ *\n+ * This is a concrete class instead of abstract to enforce\n+ * new events get added to both the SparkListener and this adapter\n+ * in lockstep.\n+ */\n+public class SparkListenerAdapter implements SparkListener {"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Just for completeness (since I suggested the original name), listener/adapter is used extensively in the Java API (see `java.awt.event`, for example). An adapter is just a default implementation of a listener in Java-ese.\n",
    "commit": "946d2c52f0e1db32c4a041b2f62e8b0a71fd9fec",
    "createdAt": "2015-01-08T03:16:48Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import org.apache.spark.scheduler.SparkListener;\n+import org.apache.spark.scheduler.SparkListenerApplicationEnd;\n+import org.apache.spark.scheduler.SparkListenerApplicationStart;\n+import org.apache.spark.scheduler.SparkListenerBlockManagerAdded;\n+import org.apache.spark.scheduler.SparkListenerBlockManagerRemoved;\n+import org.apache.spark.scheduler.SparkListenerEnvironmentUpdate;\n+import org.apache.spark.scheduler.SparkListenerExecutorAdded;\n+import org.apache.spark.scheduler.SparkListenerExecutorMetricsUpdate;\n+import org.apache.spark.scheduler.SparkListenerExecutorRemoved;\n+import org.apache.spark.scheduler.SparkListenerJobEnd;\n+import org.apache.spark.scheduler.SparkListenerJobStart;\n+import org.apache.spark.scheduler.SparkListenerStageCompleted;\n+import org.apache.spark.scheduler.SparkListenerStageSubmitted;\n+import org.apache.spark.scheduler.SparkListenerTaskEnd;\n+import org.apache.spark.scheduler.SparkListenerTaskGettingResult;\n+import org.apache.spark.scheduler.SparkListenerTaskStart;\n+import org.apache.spark.scheduler.SparkListenerUnpersistRDD;\n+\n+/**\n+ * Java clients should extend this class instead of implementing\n+ * SparkListener directly. This is to prevent java clients\n+ * from breaking when new events are added to the SparkListener\n+ * trait.\n+ *\n+ * This is a concrete class instead of abstract to enforce\n+ * new events get added to both the SparkListener and this adapter\n+ * in lockstep.\n+ */\n+public class SparkListenerAdapter implements SparkListener {"
  }],
  "prId": 3711
}]