[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "should add more documentation about addressing space\n",
    "commit": "ef0a86e41e9b390e6c0d60a6ed2105dbc54431f7",
    "createdAt": "2015-05-07T00:16:31Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.unsafe;\n+\n+/**\n+ * Wrapper around an 8-byte word that holds a 24-bit partition number and 40-bit record pointer.",
    "line": 21
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "I did this in my most recent commits and added some tests for writing records _at_ the maximum record size and greater than it.\n",
    "commit": "ef0a86e41e9b390e6c0d60a6ed2105dbc54431f7",
    "createdAt": "2015-05-10T23:17:17Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.unsafe;\n+\n+/**\n+ * Wrapper around an 8-byte word that holds a 24-bit partition number and 40-bit record pointer.",
    "line": 21
  }],
  "prId": 5868
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "I prefer to use `(1L << 40) - 1` to improve the readability. \n",
    "commit": "ef0a86e41e9b390e6c0d60a6ed2105dbc54431f7",
    "createdAt": "2015-05-11T21:55:28Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.unsafe;\n+\n+/**\n+ * Wrapper around an 8-byte word that holds a 24-bit partition number and 40-bit record pointer.\n+ * <p>\n+ * Within the long, the data is laid out as follows:\n+ * <pre>\n+ *   [24 bit partition number][13 bit memory page number][27 bit offset in page]\n+ * </pre>\n+ * This implies that the maximum addressable page size is 2^27 bits = 128 megabytes, assuming that\n+ * our offsets in pages are not 8-byte-word-aligned. Since we have 2^13 pages (based off the\n+ * 13-bit page numbers assigned by {@link org.apache.spark.unsafe.memory.TaskMemoryManager}), this\n+ * implies that we can address 2^13 * 128 megabytes = 1 terabyte of RAM per task.\n+ * <p>\n+ * Assuming word-alignment would allow for a 1 gigabyte maximum page size, but we leave this\n+ * optimization to future work as it will require more careful design to ensure that addresses are\n+ * properly aligned (e.g. by padding records).\n+ */\n+final class PackedRecordPointer {\n+\n+  static final int MAXIMUM_PAGE_SIZE_BYTES = 1 << 27;  // 128 megabytes\n+\n+  static final int MAXIMUM_PARTITION_ID = 1 << 24;  // 16777216\n+\n+  /** Bit mask for the lower 40 bits of a long. */\n+  private static final long MASK_LONG_LOWER_40_BITS = 0xFFFFFFFFFFL;"
  }],
  "prId": 5868
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "prefer `(1L << 27) - 1`\n",
    "commit": "ef0a86e41e9b390e6c0d60a6ed2105dbc54431f7",
    "createdAt": "2015-05-11T21:55:44Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.unsafe;\n+\n+/**\n+ * Wrapper around an 8-byte word that holds a 24-bit partition number and 40-bit record pointer.\n+ * <p>\n+ * Within the long, the data is laid out as follows:\n+ * <pre>\n+ *   [24 bit partition number][13 bit memory page number][27 bit offset in page]\n+ * </pre>\n+ * This implies that the maximum addressable page size is 2^27 bits = 128 megabytes, assuming that\n+ * our offsets in pages are not 8-byte-word-aligned. Since we have 2^13 pages (based off the\n+ * 13-bit page numbers assigned by {@link org.apache.spark.unsafe.memory.TaskMemoryManager}), this\n+ * implies that we can address 2^13 * 128 megabytes = 1 terabyte of RAM per task.\n+ * <p>\n+ * Assuming word-alignment would allow for a 1 gigabyte maximum page size, but we leave this\n+ * optimization to future work as it will require more careful design to ensure that addresses are\n+ * properly aligned (e.g. by padding records).\n+ */\n+final class PackedRecordPointer {\n+\n+  static final int MAXIMUM_PAGE_SIZE_BYTES = 1 << 27;  // 128 megabytes\n+\n+  static final int MAXIMUM_PARTITION_ID = 1 << 24;  // 16777216\n+\n+  /** Bit mask for the lower 40 bits of a long. */\n+  private static final long MASK_LONG_LOWER_40_BITS = 0xFFFFFFFFFFL;\n+\n+  /** Bit mask for the upper 24 bits of a long */\n+  private static final long MASK_LONG_UPPER_24_BITS = ~MASK_LONG_LOWER_40_BITS;\n+\n+  /** Bit mask for the lower 27 bits of a long. */\n+  private static final long MASK_LONG_LOWER_27_BITS = 0x7FFFFFFL;"
  }],
  "prId": 5868
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "prefer `(1L << 51) - 1`\n",
    "commit": "ef0a86e41e9b390e6c0d60a6ed2105dbc54431f7",
    "createdAt": "2015-05-11T21:55:54Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.unsafe;\n+\n+/**\n+ * Wrapper around an 8-byte word that holds a 24-bit partition number and 40-bit record pointer.\n+ * <p>\n+ * Within the long, the data is laid out as follows:\n+ * <pre>\n+ *   [24 bit partition number][13 bit memory page number][27 bit offset in page]\n+ * </pre>\n+ * This implies that the maximum addressable page size is 2^27 bits = 128 megabytes, assuming that\n+ * our offsets in pages are not 8-byte-word-aligned. Since we have 2^13 pages (based off the\n+ * 13-bit page numbers assigned by {@link org.apache.spark.unsafe.memory.TaskMemoryManager}), this\n+ * implies that we can address 2^13 * 128 megabytes = 1 terabyte of RAM per task.\n+ * <p>\n+ * Assuming word-alignment would allow for a 1 gigabyte maximum page size, but we leave this\n+ * optimization to future work as it will require more careful design to ensure that addresses are\n+ * properly aligned (e.g. by padding records).\n+ */\n+final class PackedRecordPointer {\n+\n+  static final int MAXIMUM_PAGE_SIZE_BYTES = 1 << 27;  // 128 megabytes\n+\n+  static final int MAXIMUM_PARTITION_ID = 1 << 24;  // 16777216\n+\n+  /** Bit mask for the lower 40 bits of a long. */\n+  private static final long MASK_LONG_LOWER_40_BITS = 0xFFFFFFFFFFL;\n+\n+  /** Bit mask for the upper 24 bits of a long */\n+  private static final long MASK_LONG_UPPER_24_BITS = ~MASK_LONG_LOWER_40_BITS;\n+\n+  /** Bit mask for the lower 27 bits of a long. */\n+  private static final long MASK_LONG_LOWER_27_BITS = 0x7FFFFFFL;\n+\n+  /** Bit mask for the lower 51 bits of a long. */\n+  private static final long MASK_LONG_LOWER_51_BITS = 0x7FFFFFFFFFFFFL;"
  }],
  "prId": 5868
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "`MAXIMUM_PARTITION_ID` should be \"(1 << 24) - 1\", since it's 24-bit.\n",
    "commit": "ef0a86e41e9b390e6c0d60a6ed2105dbc54431f7",
    "createdAt": "2015-05-11T22:02:23Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.unsafe;\n+\n+/**\n+ * Wrapper around an 8-byte word that holds a 24-bit partition number and 40-bit record pointer.\n+ * <p>\n+ * Within the long, the data is laid out as follows:\n+ * <pre>\n+ *   [24 bit partition number][13 bit memory page number][27 bit offset in page]\n+ * </pre>\n+ * This implies that the maximum addressable page size is 2^27 bits = 128 megabytes, assuming that\n+ * our offsets in pages are not 8-byte-word-aligned. Since we have 2^13 pages (based off the\n+ * 13-bit page numbers assigned by {@link org.apache.spark.unsafe.memory.TaskMemoryManager}), this\n+ * implies that we can address 2^13 * 128 megabytes = 1 terabyte of RAM per task.\n+ * <p>\n+ * Assuming word-alignment would allow for a 1 gigabyte maximum page size, but we leave this\n+ * optimization to future work as it will require more careful design to ensure that addresses are\n+ * properly aligned (e.g. by padding records).\n+ */\n+final class PackedRecordPointer {\n+\n+  static final int MAXIMUM_PAGE_SIZE_BYTES = 1 << 27;  // 128 megabytes\n+\n+  static final int MAXIMUM_PARTITION_ID = 1 << 24;  // 16777216"
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "Yep, good catch.\n",
    "commit": "ef0a86e41e9b390e6c0d60a6ed2105dbc54431f7",
    "createdAt": "2015-05-11T23:53:32Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.unsafe;\n+\n+/**\n+ * Wrapper around an 8-byte word that holds a 24-bit partition number and 40-bit record pointer.\n+ * <p>\n+ * Within the long, the data is laid out as follows:\n+ * <pre>\n+ *   [24 bit partition number][13 bit memory page number][27 bit offset in page]\n+ * </pre>\n+ * This implies that the maximum addressable page size is 2^27 bits = 128 megabytes, assuming that\n+ * our offsets in pages are not 8-byte-word-aligned. Since we have 2^13 pages (based off the\n+ * 13-bit page numbers assigned by {@link org.apache.spark.unsafe.memory.TaskMemoryManager}), this\n+ * implies that we can address 2^13 * 128 megabytes = 1 terabyte of RAM per task.\n+ * <p>\n+ * Assuming word-alignment would allow for a 1 gigabyte maximum page size, but we leave this\n+ * optimization to future work as it will require more careful design to ensure that addresses are\n+ * properly aligned (e.g. by padding records).\n+ */\n+final class PackedRecordPointer {\n+\n+  static final int MAXIMUM_PAGE_SIZE_BYTES = 1 << 27;  // 128 megabytes\n+\n+  static final int MAXIMUM_PARTITION_ID = 1 << 24;  // 16777216"
  }],
  "prId": 5868
}]