[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Paragraph seems unnecessary, since this is explained in the docs for `ShuffleMapOutputWriter`.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-11T21:48:48Z",
    "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * :: Experimental ::\n+ * A module that returns shuffle writers to persist data that is written by shuffle map tasks.\n+ *\n+ * @since 3.0.0\n+ */\n+@Experimental\n+public interface ShuffleWriteSupport {\n+\n+  /**\n+   * Called once per map task to create a writer that will be responsible for persisting all the\n+   * partitioned bytes written by that map task.\n+   * <p>\n+   * The caller of this method will also call either"
  }],
  "prId": 25007
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Actually an identifier of the shuffle itself, not the stage, right? If you reuse a shuffle, you get the same shuffle id, but different stage id.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-24T17:21:42Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+import org.apache.spark.shuffle.ShuffleWriteMetricsReporter;\n+\n+/**\n+ * :: Private ::\n+ * A module that returns shuffle writers to persist data that is written by shuffle map tasks.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleWriteSupport {\n+\n+  /**\n+   * Called once per map task to create a writer that will be responsible for persisting all the\n+   * partitioned bytes written by that map task.\n+   *\n+   * @param shuffleId Unique identifier for the shuffle stage of the map task"
  }],
  "prId": 25007
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "There are two problems here:\r\n\r\n- `ShuffleWriteMetricsReporter` is `private[spark]`\r\n- as I mentioned, the package it's on is not publicly documented, so is not considered a public API.\r\n\r\nIf this will be exposed it needs to be moved inside the api package.\r\n\r\nBut on a separate note, is this needed? I remember some discussion about this but don't remember what metrics the plugin is expected to update... it seems to me all metrics are already updated by the shuffle code itself (e.g. `BypassMergeSortShuffleWriter`, `ShuffleExternalSorter`, etc).",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-24T17:24:28Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+import org.apache.spark.shuffle.ShuffleWriteMetricsReporter;\n+\n+/**\n+ * :: Private ::\n+ * A module that returns shuffle writers to persist data that is written by shuffle map tasks.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleWriteSupport {\n+\n+  /**\n+   * Called once per map task to create a writer that will be responsible for persisting all the\n+   * partitioned bytes written by that map task.\n+   *\n+   * @param shuffleId Unique identifier for the shuffle stage of the map task\n+   * @param mapId Within the shuffle stage, the identifier of the map task\n+   * @param mapTaskAttemptId Identifier of the task attempt. Multiple attempts of the same map task\n+   *                         with the same (shuffleId, mapId) pair can be distinguished by the\n+   *                         different values of mapTaskAttemptId.\n+   * @param numPartitions The number of partitions that will be written by the map task. Some of\n+   *                      these partitions may be empty.\n+   * @param mapTaskWriteMetrics The map task's write metrics, which can be updated by the returned\n+   *                            writer. The updates that are posted to this reporter are listed in\n+   *                            the Spark UI. Note that the caller will update the total write time\n+   *                            at the end of the map task, so implementations should not call\n+   *                            {@link ShuffleWriteMetricsReporter#incWriteTime(long)}.\n+   */\n+  ShuffleMapOutputWriter createMapOutputWriter(\n+      int shuffleId,\n+      int mapId,\n+      long mapTaskAttemptId,\n+      int numPartitions,\n+      ShuffleWriteMetricsReporter mapTaskWriteMetrics) throws IOException;"
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "This is in response to this thread: https://github.com/apache/spark/pull/25007#discussion_r304943320. I'd much rather not have this be part of the API and would rather have implementations call `TaskContext.get()` to get the metrics reporter for the task.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-24T21:18:37Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+import org.apache.spark.shuffle.ShuffleWriteMetricsReporter;\n+\n+/**\n+ * :: Private ::\n+ * A module that returns shuffle writers to persist data that is written by shuffle map tasks.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleWriteSupport {\n+\n+  /**\n+   * Called once per map task to create a writer that will be responsible for persisting all the\n+   * partitioned bytes written by that map task.\n+   *\n+   * @param shuffleId Unique identifier for the shuffle stage of the map task\n+   * @param mapId Within the shuffle stage, the identifier of the map task\n+   * @param mapTaskAttemptId Identifier of the task attempt. Multiple attempts of the same map task\n+   *                         with the same (shuffleId, mapId) pair can be distinguished by the\n+   *                         different values of mapTaskAttemptId.\n+   * @param numPartitions The number of partitions that will be written by the map task. Some of\n+   *                      these partitions may be empty.\n+   * @param mapTaskWriteMetrics The map task's write metrics, which can be updated by the returned\n+   *                            writer. The updates that are posted to this reporter are listed in\n+   *                            the Spark UI. Note that the caller will update the total write time\n+   *                            at the end of the map task, so implementations should not call\n+   *                            {@link ShuffleWriteMetricsReporter#incWriteTime(long)}.\n+   */\n+  ShuffleMapOutputWriter createMapOutputWriter(\n+      int shuffleId,\n+      int mapId,\n+      long mapTaskAttemptId,\n+      int numPartitions,\n+      ShuffleWriteMetricsReporter mapTaskWriteMetrics) throws IOException;"
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "@squito for further thoughts.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-24T21:18:52Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+import org.apache.spark.shuffle.ShuffleWriteMetricsReporter;\n+\n+/**\n+ * :: Private ::\n+ * A module that returns shuffle writers to persist data that is written by shuffle map tasks.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleWriteSupport {\n+\n+  /**\n+   * Called once per map task to create a writer that will be responsible for persisting all the\n+   * partitioned bytes written by that map task.\n+   *\n+   * @param shuffleId Unique identifier for the shuffle stage of the map task\n+   * @param mapId Within the shuffle stage, the identifier of the map task\n+   * @param mapTaskAttemptId Identifier of the task attempt. Multiple attempts of the same map task\n+   *                         with the same (shuffleId, mapId) pair can be distinguished by the\n+   *                         different values of mapTaskAttemptId.\n+   * @param numPartitions The number of partitions that will be written by the map task. Some of\n+   *                      these partitions may be empty.\n+   * @param mapTaskWriteMetrics The map task's write metrics, which can be updated by the returned\n+   *                            writer. The updates that are posted to this reporter are listed in\n+   *                            the Spark UI. Note that the caller will update the total write time\n+   *                            at the end of the map task, so implementations should not call\n+   *                            {@link ShuffleWriteMetricsReporter#incWriteTime(long)}.\n+   */\n+  ShuffleMapOutputWriter createMapOutputWriter(\n+      int shuffleId,\n+      int mapId,\n+      long mapTaskAttemptId,\n+      int numPartitions,\n+      ShuffleWriteMetricsReporter mapTaskWriteMetrics) throws IOException;"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Imran IIRC will only be back next week, so unless you're ok with waiting, probably should remove this and re-add it later after we figure out exactly what's needed.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-25T18:27:30Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+import org.apache.spark.shuffle.ShuffleWriteMetricsReporter;\n+\n+/**\n+ * :: Private ::\n+ * A module that returns shuffle writers to persist data that is written by shuffle map tasks.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleWriteSupport {\n+\n+  /**\n+   * Called once per map task to create a writer that will be responsible for persisting all the\n+   * partitioned bytes written by that map task.\n+   *\n+   * @param shuffleId Unique identifier for the shuffle stage of the map task\n+   * @param mapId Within the shuffle stage, the identifier of the map task\n+   * @param mapTaskAttemptId Identifier of the task attempt. Multiple attempts of the same map task\n+   *                         with the same (shuffleId, mapId) pair can be distinguished by the\n+   *                         different values of mapTaskAttemptId.\n+   * @param numPartitions The number of partitions that will be written by the map task. Some of\n+   *                      these partitions may be empty.\n+   * @param mapTaskWriteMetrics The map task's write metrics, which can be updated by the returned\n+   *                            writer. The updates that are posted to this reporter are listed in\n+   *                            the Spark UI. Note that the caller will update the total write time\n+   *                            at the end of the map task, so implementations should not call\n+   *                            {@link ShuffleWriteMetricsReporter#incWriteTime(long)}.\n+   */\n+  ShuffleMapOutputWriter createMapOutputWriter(\n+      int shuffleId,\n+      int mapId,\n+      long mapTaskAttemptId,\n+      int numPartitions,\n+      ShuffleWriteMetricsReporter mapTaskWriteMetrics) throws IOException;"
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "I also was out Thursday and Friday or last week, so now we can coordinate on this together.\r\n\r\nping @squito for thoughts on this matter.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-29T18:03:57Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+import org.apache.spark.shuffle.ShuffleWriteMetricsReporter;\n+\n+/**\n+ * :: Private ::\n+ * A module that returns shuffle writers to persist data that is written by shuffle map tasks.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleWriteSupport {\n+\n+  /**\n+   * Called once per map task to create a writer that will be responsible for persisting all the\n+   * partitioned bytes written by that map task.\n+   *\n+   * @param shuffleId Unique identifier for the shuffle stage of the map task\n+   * @param mapId Within the shuffle stage, the identifier of the map task\n+   * @param mapTaskAttemptId Identifier of the task attempt. Multiple attempts of the same map task\n+   *                         with the same (shuffleId, mapId) pair can be distinguished by the\n+   *                         different values of mapTaskAttemptId.\n+   * @param numPartitions The number of partitions that will be written by the map task. Some of\n+   *                      these partitions may be empty.\n+   * @param mapTaskWriteMetrics The map task's write metrics, which can be updated by the returned\n+   *                            writer. The updates that are posted to this reporter are listed in\n+   *                            the Spark UI. Note that the caller will update the total write time\n+   *                            at the end of the map task, so implementations should not call\n+   *                            {@link ShuffleWriteMetricsReporter#incWriteTime(long)}.\n+   */\n+  ShuffleMapOutputWriter createMapOutputWriter(\n+      int shuffleId,\n+      int mapId,\n+      long mapTaskAttemptId,\n+      int numPartitions,\n+      ShuffleWriteMetricsReporter mapTaskWriteMetrics) throws IOException;"
  }, {
    "author": {
      "login": "squito"
    },
    "body": "sorry for the delays from me.  So after a closer look, I actually am pretty sure we should remove this from the api, and also any use of it from `LocalDiskShuffleMapOutputWriter`.  That also means that test change I was originally commenting on, which sets the TaskContext, could also be removed.\r\n\r\nI think the current code in this patch is wrong, its double counting the write time for the final merged file.  The original code did *not* create a TimeTrackingOutputStream for the merged file -- it just counted the time for the total creation of that file.\r\n\r\nhttps://github.com/apache/spark/blob/master/core/src/main/java/org/apache/spark/shuffle/sort/BypassMergeSortShuffleWriter.java#L190-L213\r\n\r\nand it seems like we'd have to do that, as we might be using a channel there, and then we wouldn't have an equivalent way of doing it for the channel.\r\n\r\nThe current code in this pr does something similar here in `BypassMergeSortShuffleWriter.writePartitionedData()`: https://github.com/apache/spark/pull/25007/files#diff-8b6b7a5dadc0d8e97307d0f8e8378d8fR247\r\n\r\nBut its also passing that to the `LocalDiskShuffleMapOutputWriter` in a `TimeTrackingOutputStream`: https://github.com/apache/spark/pull/25007/files#diff-17636cf695d4c63ea3e15c3d71d63707R133\r\n\r\nSorry I should have looked at the use of those metrics more closely in the first place.  But I think this means we can remove that metrics object from the api entirely.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-29T19:39:26Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+import org.apache.spark.shuffle.ShuffleWriteMetricsReporter;\n+\n+/**\n+ * :: Private ::\n+ * A module that returns shuffle writers to persist data that is written by shuffle map tasks.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleWriteSupport {\n+\n+  /**\n+   * Called once per map task to create a writer that will be responsible for persisting all the\n+   * partitioned bytes written by that map task.\n+   *\n+   * @param shuffleId Unique identifier for the shuffle stage of the map task\n+   * @param mapId Within the shuffle stage, the identifier of the map task\n+   * @param mapTaskAttemptId Identifier of the task attempt. Multiple attempts of the same map task\n+   *                         with the same (shuffleId, mapId) pair can be distinguished by the\n+   *                         different values of mapTaskAttemptId.\n+   * @param numPartitions The number of partitions that will be written by the map task. Some of\n+   *                      these partitions may be empty.\n+   * @param mapTaskWriteMetrics The map task's write metrics, which can be updated by the returned\n+   *                            writer. The updates that are posted to this reporter are listed in\n+   *                            the Spark UI. Note that the caller will update the total write time\n+   *                            at the end of the map task, so implementations should not call\n+   *                            {@link ShuffleWriteMetricsReporter#incWriteTime(long)}.\n+   */\n+  ShuffleMapOutputWriter createMapOutputWriter(\n+      int shuffleId,\n+      int mapId,\n+      long mapTaskAttemptId,\n+      int numPartitions,\n+      ShuffleWriteMetricsReporter mapTaskWriteMetrics) throws IOException;"
  }],
  "prId": 25007
}, {
  "comments": [{
    "author": {
      "login": "gczsjdy"
    },
    "body": "This layer has already been removed. : )",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-25T11:57:42Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+import org.apache.spark.shuffle.ShuffleWriteMetricsReporter;\n+\n+/**\n+ * :: Private ::\n+ * A module that returns shuffle writers to persist data that is written by shuffle map tasks.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleWriteSupport {"
  }],
  "prId": 25007
}]