[{
  "comments": [{
    "author": {
      "login": "gczsjdy"
    },
    "body": "Shouldn't this return `Optional<MapShuffleLocations>`?",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-12T05:10:48Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * :: Experimental ::\n+ * A top-level writer that returns child writers for persisting the output of a map task,\n+ * and then commits all of the writes as one atomic operation.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleMapOutputWriter {\n+\n+  /**\n+   * Creates a writer that can open an output stream to persist bytes for a given chunk of\n+   * a map task.\n+   * <p>\n+   * The chunk corresponds to bytes in a partition that all share the same reduce id, hence\n+   * the given argument. This will not be called twice for the same partition identifier.\n+   * The partition identifier will be in the range of precisely 0 (inclusive) to numPartitions\n+   * (exclusive), where numPartitions was provided upon the creation of this map output writer via\n+   * {@link ShuffleWriteSupport#createMapOutputWriter(int, int, long, int)}.\n+   */\n+  ShufflePartitionWriter getPartitionWriter(int partitionId) throws IOException;\n+\n+  /**\n+   * Commits the writes done by all partition writers returned by all calls to this object's\n+   * {@link #getPartitionWriter(int)}.\n+   * <p>\n+   * This should ensure that the writes conducted by this module's partition writers are\n+   * available to downstream reduce tasks. If this method throws any exception, this module's\n+   * {@link #abort(Throwable)} method will be invoked before propagating the exception.\n+   * <p>\n+   * This can also close any resources and clean up temporary state if necessary.\n+   */\n+  void commitAllPartitions() throws IOException;",
    "line": 62
  }, {
    "author": {
      "login": "jerryshao"
    },
    "body": "@gczsjdy any reason to return `Optional<MapShuffleLocations>`?",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-17T06:52:34Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * :: Experimental ::\n+ * A top-level writer that returns child writers for persisting the output of a map task,\n+ * and then commits all of the writes as one atomic operation.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleMapOutputWriter {\n+\n+  /**\n+   * Creates a writer that can open an output stream to persist bytes for a given chunk of\n+   * a map task.\n+   * <p>\n+   * The chunk corresponds to bytes in a partition that all share the same reduce id, hence\n+   * the given argument. This will not be called twice for the same partition identifier.\n+   * The partition identifier will be in the range of precisely 0 (inclusive) to numPartitions\n+   * (exclusive), where numPartitions was provided upon the creation of this map output writer via\n+   * {@link ShuffleWriteSupport#createMapOutputWriter(int, int, long, int)}.\n+   */\n+  ShufflePartitionWriter getPartitionWriter(int partitionId) throws IOException;\n+\n+  /**\n+   * Commits the writes done by all partition writers returned by all calls to this object's\n+   * {@link #getPartitionWriter(int)}.\n+   * <p>\n+   * This should ensure that the writes conducted by this module's partition writers are\n+   * available to downstream reduce tasks. If this method throws any exception, this module's\n+   * {@link #abort(Throwable)} method will be invoked before propagating the exception.\n+   * <p>\n+   * This can also close any resources and clean up temporary state if necessary.\n+   */\n+  void commitAllPartitions() throws IOException;",
    "line": 62
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "We ended up adjusting the API for shuffle locations. This will come later.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-18T00:48:14Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * :: Experimental ::\n+ * A top-level writer that returns child writers for persisting the output of a map task,\n+ * and then commits all of the writes as one atomic operation.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleMapOutputWriter {\n+\n+  /**\n+   * Creates a writer that can open an output stream to persist bytes for a given chunk of\n+   * a map task.\n+   * <p>\n+   * The chunk corresponds to bytes in a partition that all share the same reduce id, hence\n+   * the given argument. This will not be called twice for the same partition identifier.\n+   * The partition identifier will be in the range of precisely 0 (inclusive) to numPartitions\n+   * (exclusive), where numPartitions was provided upon the creation of this map output writer via\n+   * {@link ShuffleWriteSupport#createMapOutputWriter(int, int, long, int)}.\n+   */\n+  ShufflePartitionWriter getPartitionWriter(int partitionId) throws IOException;\n+\n+  /**\n+   * Commits the writes done by all partition writers returned by all calls to this object's\n+   * {@link #getPartitionWriter(int)}.\n+   * <p>\n+   * This should ensure that the writes conducted by this module's partition writers are\n+   * available to downstream reduce tasks. If this method throws any exception, this module's\n+   * {@link #abort(Throwable)} method will be invoked before propagating the exception.\n+   * <p>\n+   * This can also close any resources and clean up temporary state if necessary.\n+   */\n+  void commitAllPartitions() throws IOException;",
    "line": 62
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "I believe the SPIP has the latest API.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-18T00:48:31Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * :: Experimental ::\n+ * A top-level writer that returns child writers for persisting the output of a map task,\n+ * and then commits all of the writes as one atomic operation.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleMapOutputWriter {\n+\n+  /**\n+   * Creates a writer that can open an output stream to persist bytes for a given chunk of\n+   * a map task.\n+   * <p>\n+   * The chunk corresponds to bytes in a partition that all share the same reduce id, hence\n+   * the given argument. This will not be called twice for the same partition identifier.\n+   * The partition identifier will be in the range of precisely 0 (inclusive) to numPartitions\n+   * (exclusive), where numPartitions was provided upon the creation of this map output writer via\n+   * {@link ShuffleWriteSupport#createMapOutputWriter(int, int, long, int)}.\n+   */\n+  ShufflePartitionWriter getPartitionWriter(int partitionId) throws IOException;\n+\n+  /**\n+   * Commits the writes done by all partition writers returned by all calls to this object's\n+   * {@link #getPartitionWriter(int)}.\n+   * <p>\n+   * This should ensure that the writes conducted by this module's partition writers are\n+   * available to downstream reduce tasks. If this method throws any exception, this module's\n+   * {@link #abort(Throwable)} method will be invoked before propagating the exception.\n+   * <p>\n+   * This can also close any resources and clean up temporary state if necessary.\n+   */\n+  void commitAllPartitions() throws IOException;",
    "line": 62
  }, {
    "author": {
      "login": "gczsjdy"
    },
    "body": "@jerryshao @mccheah has explained well, because `Optional<MapShuffleLocations>` make implementers customize locations recorded in Driver. @mccheah This will be in driver lifecycle subissue?",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-18T02:28:24Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * :: Experimental ::\n+ * A top-level writer that returns child writers for persisting the output of a map task,\n+ * and then commits all of the writes as one atomic operation.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleMapOutputWriter {\n+\n+  /**\n+   * Creates a writer that can open an output stream to persist bytes for a given chunk of\n+   * a map task.\n+   * <p>\n+   * The chunk corresponds to bytes in a partition that all share the same reduce id, hence\n+   * the given argument. This will not be called twice for the same partition identifier.\n+   * The partition identifier will be in the range of precisely 0 (inclusive) to numPartitions\n+   * (exclusive), where numPartitions was provided upon the creation of this map output writer via\n+   * {@link ShuffleWriteSupport#createMapOutputWriter(int, int, long, int)}.\n+   */\n+  ShufflePartitionWriter getPartitionWriter(int partitionId) throws IOException;\n+\n+  /**\n+   * Commits the writes done by all partition writers returned by all calls to this object's\n+   * {@link #getPartitionWriter(int)}.\n+   * <p>\n+   * This should ensure that the writes conducted by this module's partition writers are\n+   * available to downstream reduce tasks. If this method throws any exception, this module's\n+   * {@link #abort(Throwable)} method will be invoked before propagating the exception.\n+   * <p>\n+   * This can also close any resources and clean up temporary state if necessary.\n+   */\n+  void commitAllPartitions() throws IOException;",
    "line": 62
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "Something to that effect yeah - it also has implications on the reader API, but these are concerns to be addressed in subsequent patches.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-18T02:38:22Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * :: Experimental ::\n+ * A top-level writer that returns child writers for persisting the output of a map task,\n+ * and then commits all of the writes as one atomic operation.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleMapOutputWriter {\n+\n+  /**\n+   * Creates a writer that can open an output stream to persist bytes for a given chunk of\n+   * a map task.\n+   * <p>\n+   * The chunk corresponds to bytes in a partition that all share the same reduce id, hence\n+   * the given argument. This will not be called twice for the same partition identifier.\n+   * The partition identifier will be in the range of precisely 0 (inclusive) to numPartitions\n+   * (exclusive), where numPartitions was provided upon the creation of this map output writer via\n+   * {@link ShuffleWriteSupport#createMapOutputWriter(int, int, long, int)}.\n+   */\n+  ShufflePartitionWriter getPartitionWriter(int partitionId) throws IOException;\n+\n+  /**\n+   * Commits the writes done by all partition writers returned by all calls to this object's\n+   * {@link #getPartitionWriter(int)}.\n+   * <p>\n+   * This should ensure that the writes conducted by this module's partition writers are\n+   * available to downstream reduce tasks. If this method throws any exception, this module's\n+   * {@link #abort(Throwable)} method will be invoked before propagating the exception.\n+   * <p>\n+   * This can also close any resources and clean up temporary state if necessary.\n+   */\n+  void commitAllPartitions() throws IOException;",
    "line": 62
  }, {
    "author": {
      "login": "gczsjdy"
    },
    "body": "Got it. : )",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-19T08:40:24Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * :: Experimental ::\n+ * A top-level writer that returns child writers for persisting the output of a map task,\n+ * and then commits all of the writes as one atomic operation.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleMapOutputWriter {\n+\n+  /**\n+   * Creates a writer that can open an output stream to persist bytes for a given chunk of\n+   * a map task.\n+   * <p>\n+   * The chunk corresponds to bytes in a partition that all share the same reduce id, hence\n+   * the given argument. This will not be called twice for the same partition identifier.\n+   * The partition identifier will be in the range of precisely 0 (inclusive) to numPartitions\n+   * (exclusive), where numPartitions was provided upon the creation of this map output writer via\n+   * {@link ShuffleWriteSupport#createMapOutputWriter(int, int, long, int)}.\n+   */\n+  ShufflePartitionWriter getPartitionWriter(int partitionId) throws IOException;\n+\n+  /**\n+   * Commits the writes done by all partition writers returned by all calls to this object's\n+   * {@link #getPartitionWriter(int)}.\n+   * <p>\n+   * This should ensure that the writes conducted by this module's partition writers are\n+   * available to downstream reduce tasks. If this method throws any exception, this module's\n+   * {@link #abort(Throwable)} method will be invoked before propagating the exception.\n+   * <p>\n+   * This can also close any resources and clean up temporary state if necessary.\n+   */\n+  void commitAllPartitions() throws IOException;",
    "line": 62
  }],
  "prId": 25007
}, {
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "This will not be called twice _within a single task_ (right?)  In other words, it will be called multiple times if there are task retries, speculative attempts, stage retries, etc.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-15T21:48:28Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * :: Experimental ::\n+ * A top-level writer that returns child writers for persisting the output of a map task,\n+ * and then commits all of the writes as one atomic operation.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleMapOutputWriter {\n+\n+  /**\n+   * Creates a writer that can open an output stream to persist bytes for a given chunk of\n+   * a map task.\n+   * <p>\n+   * The chunk corresponds to bytes in a partition that all share the same reduce id, hence\n+   * the given argument. This will not be called twice for the same partition identifier."
  }],
  "prId": 25007
}, {
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "how about: to persist bytes targeted for a given reduce partition id.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-15T21:51:06Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * :: Experimental ::\n+ * A top-level writer that returns child writers for persisting the output of a map task,\n+ * and then commits all of the writes as one atomic operation.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleMapOutputWriter {\n+\n+  /**\n+   * Creates a writer that can open an output stream to persist bytes for a given chunk of\n+   * a map task."
  }],
  "prId": 25007
}, {
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "instead of this sentence, how about just changing the argument name to `reducePartitionId`?  I know its verbose, but seems worth it here.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-15T21:51:54Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * :: Experimental ::\n+ * A top-level writer that returns child writers for persisting the output of a map task,\n+ * and then commits all of the writes as one atomic operation.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleMapOutputWriter {\n+\n+  /**\n+   * Creates a writer that can open an output stream to persist bytes for a given chunk of\n+   * a map task.\n+   * <p>\n+   * The chunk corresponds to bytes in a partition that all share the same reduce id, hence"
  }],
  "prId": 25007
}, {
  "comments": [{
    "author": {
      "login": "gczsjdy"
    },
    "body": ":nit remove `<p>`s?",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-17T02:08:01Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * :: Experimental ::\n+ * A top-level writer that returns child writers for persisting the output of a map task,\n+ * and then commits all of the writes as one atomic operation.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleMapOutputWriter {\n+\n+  /**\n+   * Creates a writer that can open an output stream to persist bytes for a given chunk of\n+   * a map task.\n+   * <p>",
    "line": 37
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "I think we want these to have line breaks in the generated HTML. But I'm not sure what the stance is across the rest of the codebase - we can remove these if pretty-formatting with line breaks isn't necessary.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-18T00:49:20Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * :: Experimental ::\n+ * A top-level writer that returns child writers for persisting the output of a map task,\n+ * and then commits all of the writes as one atomic operation.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleMapOutputWriter {\n+\n+  /**\n+   * Creates a writer that can open an output stream to persist bytes for a given chunk of\n+   * a map task.\n+   * <p>",
    "line": 37
  }, {
    "author": {
      "login": "squito"
    },
    "body": "yeah, I think it is needed for javadoc, though its not needed for scaladoc.  IMO its worth keeping them.\r\n\r\nhttps://www.oracle.com/technetwork/java/javase/documentation/index-137868.html#format",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-18T13:55:48Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * :: Experimental ::\n+ * A top-level writer that returns child writers for persisting the output of a map task,\n+ * and then commits all of the writes as one atomic operation.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleMapOutputWriter {\n+\n+  /**\n+   * Creates a writer that can open an output stream to persist bytes for a given chunk of\n+   * a map task.\n+   * <p>",
    "line": 37
  }],
  "prId": 25007
}, {
  "comments": [{
    "author": {
      "login": "jerryshao"
    },
    "body": "I think here and other places should also change to `:: Private ::`",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-17T04:02:48Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * :: Experimental ::"
  }],
  "prId": 25007
}, {
  "comments": [{
    "author": {
      "login": "gczsjdy"
    },
    "body": "Should we mention `in order`?",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-19T08:31:13Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * :: Private ::\n+ * A top-level writer that returns child writers for persisting the output of a map task,\n+ * and then commits all of the writes as one atomic operation.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleMapOutputWriter {\n+\n+  /**\n+   * Creates a writer that can open an output stream to persist bytes targeted for a given reduce\n+   * partition id.\n+   * <p>\n+   * The chunk corresponds to bytes in the given reduce partition. This will not be called twice\n+   * for the same partition within any given map task. The partition identifier will be in the\n+   * range of precisely 0 (inclusive) to numPartitions (exclusive), where numPartitions was",
    "line": 40
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "I made the docs more thorough, indicating ordering and also indicating how there's no guarantee that this will be called for an empty partition.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-19T19:06:55Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * :: Private ::\n+ * A top-level writer that returns child writers for persisting the output of a map task,\n+ * and then commits all of the writes as one atomic operation.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleMapOutputWriter {\n+\n+  /**\n+   * Creates a writer that can open an output stream to persist bytes targeted for a given reduce\n+   * partition id.\n+   * <p>\n+   * The chunk corresponds to bytes in the given reduce partition. This will not be called twice\n+   * for the same partition within any given map task. The partition identifier will be in the\n+   * range of precisely 0 (inclusive) to numPartitions (exclusive), where numPartitions was",
    "line": 40
  }],
  "prId": 25007
}, {
  "comments": [{
    "author": {
      "login": "boy-uber"
    },
    "body": "Why \"calls to this method will be invoked with monotonically increasing reducePartitionIds\"? This may cause potential issues in future and cause burden on implementation. for example, if people want to implement multiple partition writers and write shuffle data in parallel. It cannot guarantee monotonically increasing reducePartitionIds.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-29T18:33:15Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+import org.apache.spark.shuffle.ShuffleWriteMetricsReporter;\n+\n+/**\n+ * :: Private ::\n+ * A top-level writer that returns child writers for persisting the output of a map task,\n+ * and then commits all of the writes as one atomic operation.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleMapOutputWriter {\n+\n+  /**\n+   * Creates a writer that can open an output stream to persist bytes targeted for a given reduce\n+   * partition id.\n+   * <p>\n+   * The chunk corresponds to bytes in the given reduce partition. This will not be called twice\n+   * for the same partition within any given map task. The partition identifier will be in the\n+   * range of precisely 0 (inclusive) to numPartitions (exclusive), where numPartitions was\n+   * provided upon the creation of this map output writer via\n+   * {@link ShuffleWriteSupport#createMapOutputWriter(\n+   * int, int, long, int, ShuffleWriteMetricsReporter)}.\n+   * <p>\n+   * Calls to this method will be invoked with monotonically increasing reducePartitionIds; each\n+   * call to this method will be called with a reducePartitionId that is strictly greater than\n+   * the reducePartitionIds given to any previous call to this method. This method is not\n+   * guaranteed to be called for every partition id in the above described range. In particular,\n+   * no guarantees are made as to whether or not this method will be called for empty partitions.\n+   */\n+  ShufflePartitionWriter getPartitionWriter(int reducePartitionId) throws IOException;",
    "line": 50
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "People using this will be using it with `SortShuffleManager` which has a specific algorithm that won't open streams in parallel. If these invariants are broken, it implies the algorithm has changed, in which case we'd need to reconsider these APIs.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-29T19:27:22Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+import org.apache.spark.shuffle.ShuffleWriteMetricsReporter;\n+\n+/**\n+ * :: Private ::\n+ * A top-level writer that returns child writers for persisting the output of a map task,\n+ * and then commits all of the writes as one atomic operation.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleMapOutputWriter {\n+\n+  /**\n+   * Creates a writer that can open an output stream to persist bytes targeted for a given reduce\n+   * partition id.\n+   * <p>\n+   * The chunk corresponds to bytes in the given reduce partition. This will not be called twice\n+   * for the same partition within any given map task. The partition identifier will be in the\n+   * range of precisely 0 (inclusive) to numPartitions (exclusive), where numPartitions was\n+   * provided upon the creation of this map output writer via\n+   * {@link ShuffleWriteSupport#createMapOutputWriter(\n+   * int, int, long, int, ShuffleWriteMetricsReporter)}.\n+   * <p>\n+   * Calls to this method will be invoked with monotonically increasing reducePartitionIds; each\n+   * call to this method will be called with a reducePartitionId that is strictly greater than\n+   * the reducePartitionIds given to any previous call to this method. This method is not\n+   * guaranteed to be called for every partition id in the above described range. In particular,\n+   * no guarantees are made as to whether or not this method will be called for empty partitions.\n+   */\n+  ShufflePartitionWriter getPartitionWriter(int reducePartitionId) throws IOException;",
    "line": 50
  }],
  "prId": 25007
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "How useful is this? I think we can make Spark shuffle more flexible if we don't guarantee this. Do you have a concrete example of how an implementation can leverage this guarantee?",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-08-02T17:15:11Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * :: Private ::\n+ * A top-level writer that returns child writers for persisting the output of a map task,\n+ * and then commits all of the writes as one atomic operation.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleMapOutputWriter {\n+\n+  /**\n+   * Creates a writer that can open an output stream to persist bytes targeted for a given reduce\n+   * partition id.\n+   * <p>\n+   * The chunk corresponds to bytes in the given reduce partition. This will not be called twice\n+   * for the same partition within any given map task. The partition identifier will be in the\n+   * range of precisely 0 (inclusive) to numPartitions (exclusive), where numPartitions was\n+   * provided upon the creation of this map output writer via\n+   * {@link ShuffleExecutorComponents#createMapOutputWriter(int, int, long, int)}.\n+   * <p>\n+   * Calls to this method will be invoked with monotonically increasing reducePartitionIds; each",
    "line": 44
  }, {
    "author": {
      "login": "squito"
    },
    "body": "spark's existing implementation makes this assumption.  The index & data file assume they are in sequential order.  \r\n\r\nthough it would be really easy to change the index format to allow for the order to random (just need to include a start and end, rather having the end be implicit).",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-08-02T21:38:07Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * :: Private ::\n+ * A top-level writer that returns child writers for persisting the output of a map task,\n+ * and then commits all of the writes as one atomic operation.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface ShuffleMapOutputWriter {\n+\n+  /**\n+   * Creates a writer that can open an output stream to persist bytes targeted for a given reduce\n+   * partition id.\n+   * <p>\n+   * The chunk corresponds to bytes in the given reduce partition. This will not be called twice\n+   * for the same partition within any given map task. The partition identifier will be in the\n+   * range of precisely 0 (inclusive) to numPartitions (exclusive), where numPartitions was\n+   * provided upon the creation of this map output writer via\n+   * {@link ShuffleExecutorComponents#createMapOutputWriter(int, int, long, int)}.\n+   * <p>\n+   * Calls to this method will be invoked with monotonically increasing reducePartitionIds; each",
    "line": 44
  }],
  "prId": 25007
}]