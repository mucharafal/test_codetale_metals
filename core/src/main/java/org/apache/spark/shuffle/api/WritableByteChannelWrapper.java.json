[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "why do we only need a wrapper for `WritableByteChannel`, but not `OutputStream`?",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-08-02T15:54:45Z",
    "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.Closeable;\n+import java.nio.channels.WritableByteChannel;\n+\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * :: Private ::\n+ *\n+ * A thin wrapper around a {@link WritableByteChannel}.\n+ * <p>\n+ * This is primarily provided for the local disk shuffle implementation to provide a\n+ * {@link java.nio.channels.FileChannel} that keeps the channel open across partition writes.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface WritableByteChannelWrapper extends Closeable {",
    "line": 36
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "We need to return the `FileChannel` object directly to the caller, because `FileChannel#transfer[from|to]` checks `instanceof` on the argument channel to transfer to/from in order to decide to optimize via zero-memory copy. Extending `FileChannel` is nearly impossible since it's an internal JDK abstract class with a lot of methods. But if we return the `FileChannel`, we have no way to shield the channel from being closed so that we can share the same channel resource across partitions.\r\n\r\nThis has come up in https://github.com/apache/spark/pull/25007#discussion_r306936154 and https://github.com/palantir/spark/pull/535 and especially https://github.com/palantir/spark/pull/535#discussion_r280193123. Given that this has come up as a question a number of times, I wonder if there's a better way we can make the semantics more accessible. I don't see a way to improve the architecture itself, but perhaps better documentation in the right places explaining why we went about this the way we did is warranted.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-08-02T23:17:23Z",
    "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.Closeable;\n+import java.nio.channels.WritableByteChannel;\n+\n+import org.apache.spark.annotation.Private;\n+\n+/**\n+ * :: Private ::\n+ *\n+ * A thin wrapper around a {@link WritableByteChannel}.\n+ * <p>\n+ * This is primarily provided for the local disk shuffle implementation to provide a\n+ * {@link java.nio.channels.FileChannel} that keeps the channel open across partition writes.\n+ *\n+ * @since 3.0.0\n+ */\n+@Private\n+public interface WritableByteChannelWrapper extends Closeable {",
    "line": 36
  }],
  "prId": 25007
}]