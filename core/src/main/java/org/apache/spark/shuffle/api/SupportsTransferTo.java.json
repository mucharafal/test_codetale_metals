[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Not a fan of the name.\r\n\r\nHow about making this part of `ShufflePartitionWriter` itself? Have a default implementation for `openTransferrableChannel()` that returns `null`, and if a write supports the fast path, it just needs to override that.\r\n\r\nI was actually going to suggest only having the method that returns the channel, but there's code that uses streams depending on the value of `spark.file.transferTo`. I think it's worth mentioning that in the javadocs somewhere.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-11T21:53:33Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * :: Experimental ::\n+ * Indicates that partition writers can transfer bytes directly from input byte channels to\n+ * output channels that stream data to the underlying shuffle partition storage medium.\n+ * <p>\n+ * This API is separated out for advanced users because it only needs to be used for\n+ * specific low-level optimizations. The idea is that the returned channel can transfer bytes\n+ * from the input file channel out to the backing storage system without copying data into\n+ * memory.\n+ * <p>\n+ * Most shuffle plugin implementations should use {@link ShufflePartitionWriter} instead.\n+ *\n+ * @since 3.0.0\n+ */\n+@Experimental\n+public interface SupportsTransferTo extends ShufflePartitionWriter {"
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "We originally put it here so that anyone who looks at the interface - documentation, or just looking at the source code in general - could be isolated from this functionality entirely. Basically people don't have to worry about whether or not they have to implement this. But I'm not sure - is this too rigorous?",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-12T00:21:34Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * :: Experimental ::\n+ * Indicates that partition writers can transfer bytes directly from input byte channels to\n+ * output channels that stream data to the underlying shuffle partition storage medium.\n+ * <p>\n+ * This API is separated out for advanced users because it only needs to be used for\n+ * specific low-level optimizations. The idea is that the returned channel can transfer bytes\n+ * from the input file channel out to the backing storage system without copying data into\n+ * memory.\n+ * <p>\n+ * Most shuffle plugin implementations should use {@link ShufflePartitionWriter} instead.\n+ *\n+ * @since 3.0.0\n+ */\n+@Experimental\n+public interface SupportsTransferTo extends ShufflePartitionWriter {"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Mostly I think this interface is weird the way it's currently defined.\r\n\r\nThe name is awkward. It sounds like the name of a mix-in interface (e.g. `extends ShufflePartitionWriter with SupportsTransferTo` in scala, except I'd call it `TransferToSupport` in that case). But Java can't enforce at compile time that the mix-in is applied to a `ShufflePartitionWriter`, so that's why you'd need inheritance.\r\n\r\nBut given that you can have default implementations in Java interfaces, is the extra interface really helping? The javadoc for the method with the default implementation will already make it clear that sub-classes don't necessarily need to worry about it, no?",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-12T21:53:02Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * :: Experimental ::\n+ * Indicates that partition writers can transfer bytes directly from input byte channels to\n+ * output channels that stream data to the underlying shuffle partition storage medium.\n+ * <p>\n+ * This API is separated out for advanced users because it only needs to be used for\n+ * specific low-level optimizations. The idea is that the returned channel can transfer bytes\n+ * from the input file channel out to the backing storage system without copying data into\n+ * memory.\n+ * <p>\n+ * Most shuffle plugin implementations should use {@link ShufflePartitionWriter} instead.\n+ *\n+ * @since 3.0.0\n+ */\n+@Experimental\n+public interface SupportsTransferTo extends ShufflePartitionWriter {"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "(Another option is to hide this completely inside Spark-private classes, so that the local version can implement it, but the optimization is not exposed outside of Spark.)",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-12T22:33:42Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * :: Experimental ::\n+ * Indicates that partition writers can transfer bytes directly from input byte channels to\n+ * output channels that stream data to the underlying shuffle partition storage medium.\n+ * <p>\n+ * This API is separated out for advanced users because it only needs to be used for\n+ * specific low-level optimizations. The idea is that the returned channel can transfer bytes\n+ * from the input file channel out to the backing storage system without copying data into\n+ * memory.\n+ * <p>\n+ * Most shuffle plugin implementations should use {@link ShufflePartitionWriter} instead.\n+ *\n+ * @since 3.0.0\n+ */\n+@Experimental\n+public interface SupportsTransferTo extends ShufflePartitionWriter {"
  }, {
    "author": {
      "login": "jerryshao"
    },
    "body": "I tend to agree with @vanzin , at least we could change to `TransferToSupport`. The mix-in semantics here is a little strange for Java, and actually we use it more like inheritance.",
    "commit": "7dceec971784049442ec3d4cb71ddaa225e1e21f",
    "createdAt": "2019-07-17T06:58:10Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle.api;\n+\n+import java.io.IOException;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * :: Experimental ::\n+ * Indicates that partition writers can transfer bytes directly from input byte channels to\n+ * output channels that stream data to the underlying shuffle partition storage medium.\n+ * <p>\n+ * This API is separated out for advanced users because it only needs to be used for\n+ * specific low-level optimizations. The idea is that the returned channel can transfer bytes\n+ * from the input file channel out to the backing storage system without copying data into\n+ * memory.\n+ * <p>\n+ * Most shuffle plugin implementations should use {@link ShufflePartitionWriter} instead.\n+ *\n+ * @since 3.0.0\n+ */\n+@Experimental\n+public interface SupportsTransferTo extends ShufflePartitionWriter {"
  }],
  "prId": 25007
}]