[{
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "I don't think that we should have this field in `ApplicationId`.  This will always return the same application id, violating our uniqueness requirements.\n",
    "commit": "3288b2bb44a81b605ddc26f2772baebbaf1ad38e",
    "createdAt": "2014-09-29T23:41:14Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * This class represents unique application id for identifying each application\n+ */\n+public class ApplicationId implements Serializable {\n+\n+  private String appId;\n+\n+  public ApplicationId(String appId) {\n+    this.appId = appId;\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (!(other instanceof ApplicationId)) {\n+      return false;\n+    } else if (other == this) {\n+      return true;\n+    } else if (appId != null) {\n+      return appId.equals(((ApplicationId)other).appId);\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return appId.hashCode();\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return appId;\n+  }\n+\n+\n+  private static ApplicationId defaultAppId =\n+    new ApplicationId(String.valueOf(System.currentTimeMillis()));"
  }, {
    "author": {
      "login": "sarutak"
    },
    "body": "O.K. I've modified that.\n",
    "commit": "3288b2bb44a81b605ddc26f2772baebbaf1ad38e",
    "createdAt": "2014-09-30T06:38:50Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * This class represents unique application id for identifying each application\n+ */\n+public class ApplicationId implements Serializable {\n+\n+  private String appId;\n+\n+  public ApplicationId(String appId) {\n+    this.appId = appId;\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (!(other instanceof ApplicationId)) {\n+      return false;\n+    } else if (other == this) {\n+      return true;\n+    } else if (appId != null) {\n+      return appId.equals(((ApplicationId)other).appId);\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return appId.hashCode();\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return appId;\n+  }\n+\n+\n+  private static ApplicationId defaultAppId =\n+    new ApplicationId(String.valueOf(System.currentTimeMillis()));"
  }],
  "prId": 2432
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Same here; I don't think we need this method.\n",
    "commit": "3288b2bb44a81b605ddc26f2772baebbaf1ad38e",
    "createdAt": "2014-09-29T23:45:02Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * This class represents unique application id for identifying each application\n+ */\n+public class ApplicationId implements Serializable {\n+\n+  private String appId;\n+\n+  public ApplicationId(String appId) {\n+    this.appId = appId;\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (!(other instanceof ApplicationId)) {\n+      return false;\n+    } else if (other == this) {\n+      return true;\n+    } else if (appId != null) {\n+      return appId.equals(((ApplicationId)other).appId);\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return appId.hashCode();\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return appId;\n+  }\n+\n+\n+  private static ApplicationId defaultAppId =\n+    new ApplicationId(String.valueOf(System.currentTimeMillis()));\n+\n+  /**\n+   *  Default implementation of Application Id\n+   *\n+   *  @return Default implementation of Application id based on System.currentTimeMillis\n+   */\n+  public static ApplicationId getApplicationId() {\n+    return defaultAppId;"
  }],
  "prId": 2432
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "I don't see much of a purpose in this class. From what I can gather it's just a wrapper around a string. I buy the type-safety argument, but there's little we can guarantee about the content of the string (to solve SPARK-3610, for instance) anyway. We can keep it, but if we decide to, then shouldn't we also have a Scala equivalent?\n",
    "commit": "3288b2bb44a81b605ddc26f2772baebbaf1ad38e",
    "createdAt": "2014-10-01T22:06:43Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * This class represents unique application id for identifying each application\n+ */\n+public class ApplicationId implements Serializable {\n+\n+  private String appId;\n+\n+  public ApplicationId(String appId) {\n+    this.appId = appId;\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (!(other instanceof ApplicationId)) {\n+      return false;\n+    } else if (other == this) {\n+      return true;\n+    } else if (appId != null) {\n+      return appId.equals(((ApplicationId)other).appId);\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return appId.hashCode();\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return appId;\n+  }\n+\n+}"
  }, {
    "author": {
      "login": "sarutak"
    },
    "body": "I've removed ApplicationId.java.\n",
    "commit": "3288b2bb44a81b605ddc26f2772baebbaf1ad38e",
    "createdAt": "2014-10-02T08:35:01Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * This class represents unique application id for identifying each application\n+ */\n+public class ApplicationId implements Serializable {\n+\n+  private String appId;\n+\n+  public ApplicationId(String appId) {\n+    this.appId = appId;\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (!(other instanceof ApplicationId)) {\n+      return false;\n+    } else if (other == this) {\n+      return true;\n+    } else if (appId != null) {\n+      return appId.equals(((ApplicationId)other).appId);\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return appId.hashCode();\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return appId;\n+  }\n+\n+}"
  }],
  "prId": 2432
}]