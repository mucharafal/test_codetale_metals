[{
  "comments": [{
    "author": {
      "login": "jiangxb1987"
    },
    "body": "maybe use case match instead ?",
    "commit": "5cdbab3659edd219bff462ce4d004724cff68e10",
    "createdAt": "2019-07-30T23:25:59Z",
    "diffHunk": "@@ -58,8 +59,19 @@ private[spark] class BroadcastManager(\n     new ReferenceMap(AbstractReferenceMap.HARD, AbstractReferenceMap.WEAK)\n   }\n \n+  private def attachBroadcastIdForPython[T: ClassTag](value_ : T, bid: Long): Unit = {"
  }],
  "prId": 25262
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Seems not used.",
    "commit": "5cdbab3659edd219bff462ce4d004724cff68e10",
    "createdAt": "2019-07-31T00:51:16Z",
    "diffHunk": "@@ -19,11 +19,12 @@ package org.apache.spark.broadcast\n \n import java.util.concurrent.atomic.AtomicLong\n \n-import scala.reflect.ClassTag\n+import scala.reflect.{classTag, ClassTag}"
  }],
  "prId": 25262
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "and can we add some comments, as a proper method doc, here about how it works? TBH, looks kind of error-prone.",
    "commit": "5cdbab3659edd219bff462ce4d004724cff68e10",
    "createdAt": "2019-07-31T01:29:08Z",
    "diffHunk": "@@ -58,8 +59,19 @@ private[spark] class BroadcastManager(\n     new ReferenceMap(AbstractReferenceMap.HARD, AbstractReferenceMap.WEAK)\n   }\n \n+  private def attachBroadcastIdForPython[T: ClassTag](value_ : T, bid: Long): Unit = {"
  }],
  "prId": 25262
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "match directly PythonBroadcast instead of try-catch?",
    "commit": "5cdbab3659edd219bff462ce4d004724cff68e10",
    "createdAt": "2019-07-31T03:31:53Z",
    "diffHunk": "@@ -58,8 +59,19 @@ private[spark] class BroadcastManager(\n     new ReferenceMap(AbstractReferenceMap.HARD, AbstractReferenceMap.WEAK)\n   }\n \n+  private def attachBroadcastIdForPython[T: ClassTag](value_ : T, bid: Long): Unit = {\n+    try {\n+      value_.asInstanceOf[PythonBroadcast].setBroadcastId(bid)\n+    } catch {\n+      case e: ClassCastException =>\n+        // is not a PythonBroadcast"
  }],
  "prId": 25262
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "attachBroadcastIdForPython is short, maybe just inline?",
    "commit": "5cdbab3659edd219bff462ce4d004724cff68e10",
    "createdAt": "2019-07-31T03:32:33Z",
    "diffHunk": "@@ -58,8 +59,19 @@ private[spark] class BroadcastManager(\n     new ReferenceMap(AbstractReferenceMap.HARD, AbstractReferenceMap.WEAK)\n   }\n \n+  private def attachBroadcastIdForPython[T: ClassTag](value_ : T, bid: Long): Unit = {\n+    try {\n+      value_.asInstanceOf[PythonBroadcast].setBroadcastId(bid)\n+    } catch {\n+      case e: ClassCastException =>\n+        // is not a PythonBroadcast\n+    }\n+  }\n+\n   def newBroadcast[T: ClassTag](value_ : T, isLocal: Boolean): Broadcast[T] = {\n-    broadcastFactory.newBroadcast[T](value_, isLocal, nextBroadcastId.getAndIncrement())\n+    val bid = nextBroadcastId.getAndIncrement()\n+    attachBroadcastIdForPython(value_, bid)"
  }],
  "prId": 25262
}]