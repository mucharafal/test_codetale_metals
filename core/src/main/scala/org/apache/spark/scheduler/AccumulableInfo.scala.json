[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "no space before &&\n",
    "commit": "3822bd3def3757d348024d51003c74f9bc094617",
    "createdAt": "2015-09-03T06:50:40Z",
    "diffHunk": "@@ -34,9 +34,15 @@ class AccumulableInfo private[spark] (\n   override def equals(other: Any): Boolean = other match {\n     case acc: AccumulableInfo =>\n       this.id == acc.id && this.name == acc.name &&\n-        this.update == acc.update && this.value == acc.value\n+        this.update == acc.update && this.value == acc.value  &&"
  }],
  "prId": 8581
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Ah, something just occurred to me: you've been using `reduce` here but the operation isn't associative or commutative. I think it has to be `reduceLeft` to guarantee the output you want. Maybe update other instances of this in the code (from other PRs) here too?\n",
    "commit": "3822bd3def3757d348024d51003c74f9bc094617",
    "createdAt": "2015-09-03T10:38:14Z",
    "diffHunk": "@@ -34,9 +34,15 @@ class AccumulableInfo private[spark] (\n   override def equals(other: Any): Boolean = other match {\n     case acc: AccumulableInfo =>\n       this.id == acc.id && this.name == acc.name &&\n-        this.update == acc.update && this.value == acc.value\n+        this.update == acc.update && this.value == acc.value &&\n+        this.internal == acc.internal\n     case _ => false\n   }\n+\n+  override def hashCode(): Int = {\n+    val state = Seq(id, name, update, value, internal)\n+    state.map(_.hashCode).reduce(31 * _ + _)"
  }],
  "prId": 8581
}]