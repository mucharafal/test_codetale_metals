[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "put override for all the defs here\n",
    "commit": "811718492e7b93af3b1c857829a687a7ba2cae39",
    "createdAt": "2016-04-23T20:52:25Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import org.apache.spark.{SparkContext, SparkException}\n+import org.apache.spark.scheduler.cluster.CoarseGrainedSchedulerBackend\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * Cluster Manager for creation of Yarn scheduler and backend\n+ */\n+class YarnClusterManager extends ExternalClusterManager {\n+\n+  def canCreate(masterURL: String): Boolean = {"
  }],
  "prId": 12641
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "move to the previous line?\n",
    "commit": "811718492e7b93af3b1c857829a687a7ba2cae39",
    "createdAt": "2016-04-23T21:12:47Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import org.apache.spark.{SparkContext, SparkException}\n+import org.apache.spark.scheduler.cluster.CoarseGrainedSchedulerBackend\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * Cluster Manager for creation of Yarn scheduler and backend\n+ */\n+class YarnClusterManager extends ExternalClusterManager {\n+\n+  def canCreate(masterURL: String): Boolean = {\n+    masterURL == \"yarn\"\n+  }\n+\n+  def createTaskScheduler(sc: SparkContext, masterURL: String): TaskScheduler = {\n+\n+    val className = if (sc.deployMode == \"cluster\") {\n+      \"org.apache.spark.scheduler.cluster.YarnClusterScheduler\"\n+    } else if (sc.deployMode == \"client\") {\n+      \"org.apache.spark.scheduler.cluster.YarnScheduler\"\n+    } else {\n+      throw new SparkException(s\"Unknown deploy mode '${sc.deployMode}' for Yarn\")\n+    }\n+    try {\n+      val clazz = Utils.classForName(className)\n+      val cons = clazz.getConstructor(classOf[SparkContext])\n+      cons.newInstance(sc).asInstanceOf[TaskSchedulerImpl]\n+    } catch {\n+      // TODO: Enumerate the exact reasons why it can fail\n+      // But irrespective of it, it means we cannot proceed !\n+      case e: Exception =>\n+        throw new SparkException(\"YARN mode not available ?\", e)\n+    }\n+\n+  }\n+\n+  def createSchedulerBackend(sc: SparkContext,\n+      masterURL: String,\n+      scheduler: TaskScheduler): SchedulerBackend = {\n+\n+    val className = if (sc.deployMode == \"cluster\") {\n+      \"org.apache.spark.scheduler.cluster.YarnClusterSchedulerBackend\"\n+    } else if (sc.deployMode == \"client\") {\n+      \"org.apache.spark.scheduler.cluster.YarnClientSchedulerBackend\"\n+    } else {\n+      throw new SparkException(s\"Unknown deploy mode '${sc.deployMode}' for Yarn\")\n+    }\n+    try {\n+      val clazz =\n+        Utils.classForName(className)"
  }],
  "prId": 12641
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "would it be possible for this to live in the YARN module?\n",
    "commit": "811718492e7b93af3b1c857829a687a7ba2cae39",
    "createdAt": "2016-04-23T21:13:27Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import org.apache.spark.{SparkContext, SparkException}\n+import org.apache.spark.scheduler.cluster.CoarseGrainedSchedulerBackend\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * Cluster Manager for creation of Yarn scheduler and backend\n+ */\n+class YarnClusterManager extends ExternalClusterManager {"
  }],
  "prId": 12641
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "if we can move this to the yarn module than we don't need reflection here\n",
    "commit": "811718492e7b93af3b1c857829a687a7ba2cae39",
    "createdAt": "2016-04-23T21:14:27Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import org.apache.spark.{SparkContext, SparkException}\n+import org.apache.spark.scheduler.cluster.CoarseGrainedSchedulerBackend\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * Cluster Manager for creation of Yarn scheduler and backend\n+ */\n+class YarnClusterManager extends ExternalClusterManager {\n+\n+  def canCreate(masterURL: String): Boolean = {\n+    masterURL == \"yarn\"\n+  }\n+\n+  def createTaskScheduler(sc: SparkContext, masterURL: String): TaskScheduler = {\n+\n+    val className = if (sc.deployMode == \"cluster\") {\n+      \"org.apache.spark.scheduler.cluster.YarnClusterScheduler\""
  }],
  "prId": 12641
}]