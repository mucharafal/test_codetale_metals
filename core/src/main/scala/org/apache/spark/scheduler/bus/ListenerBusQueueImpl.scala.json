[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "First, the name of this file is weird. But more importantly, why are these classes even necessary?\r\n\r\nWhy can't you have a single queue implementation that manages a group of listeners? Whether the group has a single listener or multiple shouldn't matter - the implementation can be the same.",
    "commit": "441af9b75027f447e94814a8bf3eba1852d6947d",
    "createdAt": "2017-07-17T18:52:45Z",
    "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.bus\n+\n+import com.codahale.metrics.Timer\n+import scala.reflect.ClassTag\n+\n+import org.apache.spark.scheduler.{SparkListenerEvent, SparkListenerEventDispatcher, SparkListenerInterface}\n+import org.apache.spark.scheduler.bus.ListenerBusQueue.{FixGroupOfListener, ModifiableGroupOfListener}\n+\n+// For generic message processor (like event logging)\n+private[scheduler] class ProcessorListenerBusQueue("
  }, {
    "author": {
      "login": "bOOm-X"
    },
    "body": "For the name of the file, I can change it ! Do you have a better name ? I can even put the content of the file (the 2 concrete implementations)  in the BusQueue.scala file.\r\n\r\nI refactored a bit this file. Now I have only 2 implementations: \r\n - `ProcessorBusQueue`: This is the implementation for generic processor (In which we do not do the dispatch by  event type)\r\n-  `ListenerBusQueue`: This is the implementation for listener (with the dispatch by event type) \r\n\r\n",
    "commit": "441af9b75027f447e94814a8bf3eba1852d6947d",
    "createdAt": "2017-07-31T15:47:48Z",
    "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.bus\n+\n+import com.codahale.metrics.Timer\n+import scala.reflect.ClassTag\n+\n+import org.apache.spark.scheduler.{SparkListenerEvent, SparkListenerEventDispatcher, SparkListenerInterface}\n+import org.apache.spark.scheduler.bus.ListenerBusQueue.{FixGroupOfListener, ModifiableGroupOfListener}\n+\n+// For generic message processor (like event logging)\n+private[scheduler] class ProcessorListenerBusQueue("
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "I'm still confused about why you need 2 implementations. Why doesn't `ListenerBusQueue` work for everybody? And why shouldn't it?\r\n\r\nI need more time to actually grok all this code, but like Wenchen suggested before, this is a big change and it would benefit from a more detailed explanation of exactly how you're organizing the hierarchy of listener, groups, etc. Your PR description only explains which queues you created, but not any of the changes that were needed to achieve that.\r\n\r\nIf it makes it easier, you can create a `README.md` file with a longer explanation for how things are organized. (for example, check `ommon/network-common/src/main/java/org/apache/spark/network/crypto` where I added a README to explain details of what that whole body of code is doing).",
    "commit": "441af9b75027f447e94814a8bf3eba1852d6947d",
    "createdAt": "2017-08-02T00:13:19Z",
    "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.bus\n+\n+import com.codahale.metrics.Timer\n+import scala.reflect.ClassTag\n+\n+import org.apache.spark.scheduler.{SparkListenerEvent, SparkListenerEventDispatcher, SparkListenerInterface}\n+import org.apache.spark.scheduler.bus.ListenerBusQueue.{FixGroupOfListener, ModifiableGroupOfListener}\n+\n+// For generic message processor (like event logging)\n+private[scheduler] class ProcessorListenerBusQueue("
  }],
  "prId": 18253
}]