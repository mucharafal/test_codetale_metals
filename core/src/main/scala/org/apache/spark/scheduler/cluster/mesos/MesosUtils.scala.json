[{
  "comments": [{
    "author": {
      "login": "tnachen"
    },
    "body": "We've recently added MesosSchedulerUtils and i think even another helper class, can you rebase and put this in existing shared util class?\n",
    "commit": "902535b1d9a8e5e8b11428bbdde5994c15b83223",
    "createdAt": "2015-05-15T08:00:53Z",
    "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos"
  }],
  "prId": 5563
}, {
  "comments": [{
    "author": {
      "login": "tnachen"
    },
    "body": "Organize imports as mentioned above.\n",
    "commit": "902535b1d9a8e5e8b11428bbdde5994c15b83223",
    "createdAt": "2015-05-15T08:01:04Z",
    "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import java.util.{List => JList}\n+\n+import com.google.common.base.Splitter"
  }],
  "prId": 5563
}, {
  "comments": [{
    "author": {
      "login": "tnachen"
    },
    "body": "All methods according to spark style guide needs to specify return type.\n",
    "commit": "902535b1d9a8e5e8b11428bbdde5994c15b83223",
    "createdAt": "2015-05-15T08:01:31Z",
    "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import java.util.{List => JList}\n+\n+import com.google.common.base.Splitter\n+import org.apache.mesos.Protos\n+import org.apache.mesos.Protos._\n+\n+import scala.collection.JavaConversions._\n+import scala.collection.mutable\n+\n+\n+object MesosUtils {\n+\n+  /** Helper method to get the key,value-set pair for a Mesos Attribute protobuf */\n+  private[mesos] def getAttribute(attr: Attribute) ="
  }],
  "prId": 5563
}, {
  "comments": [{
    "author": {
      "login": "tnachen"
    },
    "body": "This is already added in another shared class\n",
    "commit": "902535b1d9a8e5e8b11428bbdde5994c15b83223",
    "createdAt": "2015-05-15T08:01:43Z",
    "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import java.util.{List => JList}\n+\n+import com.google.common.base.Splitter\n+import org.apache.mesos.Protos\n+import org.apache.mesos.Protos._\n+\n+import scala.collection.JavaConversions._\n+import scala.collection.mutable\n+\n+\n+object MesosUtils {\n+\n+  /** Helper method to get the key,value-set pair for a Mesos Attribute protobuf */\n+  private[mesos] def getAttribute(attr: Attribute) =\n+    (attr.getName, attr.getText.getValue.split(',').toSet)\n+\n+  /** Helper function to pull out a resource from a Mesos Resources protobuf */\n+  private[mesos] def getResource(res: JList[Resource], name: String): Double = {"
  }],
  "prId": 5563
}, {
  "comments": [{
    "author": {
      "login": "tnachen"
    },
    "body": "Return type\n",
    "commit": "902535b1d9a8e5e8b11428bbdde5994c15b83223",
    "createdAt": "2015-05-15T08:01:54Z",
    "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import java.util.{List => JList}\n+\n+import com.google.common.base.Splitter\n+import org.apache.mesos.Protos\n+import org.apache.mesos.Protos._\n+\n+import scala.collection.JavaConversions._\n+import scala.collection.mutable\n+\n+\n+object MesosUtils {\n+\n+  /** Helper method to get the key,value-set pair for a Mesos Attribute protobuf */\n+  private[mesos] def getAttribute(attr: Attribute) =\n+    (attr.getName, attr.getText.getValue.split(',').toSet)\n+\n+  /** Helper function to pull out a resource from a Mesos Resources protobuf */\n+  private[mesos] def getResource(res: JList[Resource], name: String): Double = {\n+    for (r <- res if r.getName == name) {\n+      return r.getScalar.getValue\n+    }\n+    0\n+  }\n+\n+  /** Build a Mesos resource protobuf object */\n+  private[mesos] def createResource(resourceName: String, quantity: Double): Protos.Resource = {\n+    Resource.newBuilder()\n+      .setName(resourceName)\n+      .setType(Value.Type.SCALAR)\n+      .setScalar(Value.Scalar.newBuilder().setValue(quantity).build())\n+      .build()\n+  }\n+\n+\n+  /**\n+   * Match the requirements (if any) to the offer attributes.\n+   * if attribute requirements are not specified - return true\n+   * else if attribute is defined and no values are given, simple attribute presence is preformed\n+   * else if attribute name and value is specified, subset match is performed on slave attributes\n+   */\n+  private[mesos] def matchesAttributeRequirements(\n+    slaveOfferConstraints: Map[String, Set[String]],\n+    offerAttributes: Map[String, Set[String]]) ="
  }],
  "prId": 5563
}, {
  "comments": [{
    "author": {
      "login": "tnachen"
    },
    "body": "This can still be private[mesos]\n",
    "commit": "902535b1d9a8e5e8b11428bbdde5994c15b83223",
    "createdAt": "2015-05-15T08:02:40Z",
    "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import java.util.{List => JList}\n+\n+import com.google.common.base.Splitter\n+import org.apache.mesos.Protos\n+import org.apache.mesos.Protos._\n+\n+import scala.collection.JavaConversions._\n+import scala.collection.mutable\n+\n+\n+object MesosUtils {\n+\n+  /** Helper method to get the key,value-set pair for a Mesos Attribute protobuf */\n+  private[mesos] def getAttribute(attr: Attribute) =\n+    (attr.getName, attr.getText.getValue.split(',').toSet)\n+\n+  /** Helper function to pull out a resource from a Mesos Resources protobuf */\n+  private[mesos] def getResource(res: JList[Resource], name: String): Double = {\n+    for (r <- res if r.getName == name) {\n+      return r.getScalar.getValue\n+    }\n+    0\n+  }\n+\n+  /** Build a Mesos resource protobuf object */\n+  private[mesos] def createResource(resourceName: String, quantity: Double): Protos.Resource = {\n+    Resource.newBuilder()\n+      .setName(resourceName)\n+      .setType(Value.Type.SCALAR)\n+      .setScalar(Value.Scalar.newBuilder().setValue(quantity).build())\n+      .build()\n+  }\n+\n+\n+  /**\n+   * Match the requirements (if any) to the offer attributes.\n+   * if attribute requirements are not specified - return true\n+   * else if attribute is defined and no values are given, simple attribute presence is preformed\n+   * else if attribute name and value is specified, subset match is performed on slave attributes\n+   */\n+  private[mesos] def matchesAttributeRequirements(\n+    slaveOfferConstraints: Map[String, Set[String]],\n+    offerAttributes: Map[String, Set[String]]) =\n+    if (slaveOfferConstraints.isEmpty) {\n+      true\n+    } else {\n+      slaveOfferConstraints.forall {\n+        // offer has the required attribute and subsumes the required values for that attribute\n+        case (name, requiredValues) =>\n+          offerAttributes.contains(name) &&\n+            // The attributes and their values are case sensitive during comparison\n+            // i.e tachyon -> true != Tachyon -> true != tachyon -> True\n+            (requiredValues.size == 0 ||\n+              requiredValues.forall((v) => offerAttributes(name).contains(v)))\n+      }\n+    }\n+\n+  /** Helper method to parse the constraint string */\n+  private[mesos] def parseConstraintString(constraintsVal: String): Map[String, Set[String]] = {\n+    /*\n+      Based on mesos docs:\n+      attributes : attribute ( \";\" attribute )*\n+      attribute : labelString \":\" ( labelString | \",\" )+\n+      labelString : [a-zA-Z0-9_/.-]\n+    */\n+    val splitter = Splitter.on(';').trimResults().withKeyValueSeparator(':')\n+    // kv splitter\n+    if (constraintsVal.isEmpty) {\n+      Map()\n+    } else {\n+      Map() ++ mapAsScalaMap(splitter.split(constraintsVal)).map {\n+        case (k, v) =>\n+          if (v == null) {\n+            (k, Set[String]())\n+          } else {\n+            (k, v.split(',').toSet)\n+          }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * For the list of offers received, find the ones that match the offer constraints (if specified)\n+   * @param offers set of all offers received\n+   * @return Offers that match the constraints\n+   */\n+  def filterOffersByConstraints("
  }],
  "prId": 5563
}, {
  "comments": [{
    "author": {
      "login": "tnachen"
    },
    "body": "This seems like hard constraints, I think eventually we might want to add soft constraints as well, means we prefer offers that matches x constraint. Also it might make sense to have a richer set of constraint operators, so we can support larger/smaller, etc. Just sharing some thoughts here.\n",
    "commit": "902535b1d9a8e5e8b11428bbdde5994c15b83223",
    "createdAt": "2015-05-15T08:06:08Z",
    "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import java.util.{List => JList}\n+\n+import com.google.common.base.Splitter\n+import org.apache.mesos.Protos\n+import org.apache.mesos.Protos._\n+\n+import scala.collection.JavaConversions._\n+import scala.collection.mutable\n+\n+\n+object MesosUtils {\n+\n+  /** Helper method to get the key,value-set pair for a Mesos Attribute protobuf */\n+  private[mesos] def getAttribute(attr: Attribute) =\n+    (attr.getName, attr.getText.getValue.split(',').toSet)\n+\n+  /** Helper function to pull out a resource from a Mesos Resources protobuf */\n+  private[mesos] def getResource(res: JList[Resource], name: String): Double = {\n+    for (r <- res if r.getName == name) {\n+      return r.getScalar.getValue\n+    }\n+    0\n+  }\n+\n+  /** Build a Mesos resource protobuf object */\n+  private[mesos] def createResource(resourceName: String, quantity: Double): Protos.Resource = {\n+    Resource.newBuilder()\n+      .setName(resourceName)\n+      .setType(Value.Type.SCALAR)\n+      .setScalar(Value.Scalar.newBuilder().setValue(quantity).build())\n+      .build()\n+  }\n+\n+\n+  /**\n+   * Match the requirements (if any) to the offer attributes.\n+   * if attribute requirements are not specified - return true\n+   * else if attribute is defined and no values are given, simple attribute presence is preformed\n+   * else if attribute name and value is specified, subset match is performed on slave attributes\n+   */\n+  private[mesos] def matchesAttributeRequirements(\n+    slaveOfferConstraints: Map[String, Set[String]],\n+    offerAttributes: Map[String, Set[String]]) =\n+    if (slaveOfferConstraints.isEmpty) {\n+      true\n+    } else {\n+      slaveOfferConstraints.forall {"
  }, {
    "author": {
      "login": "ankurcha"
    },
    "body": "Yes, that is true. I just don't know of a good way to say \"prefer matches\" in a constraint string. Hard constraints seemed like a good way to start the feature and open the conversation.\n",
    "commit": "902535b1d9a8e5e8b11428bbdde5994c15b83223",
    "createdAt": "2015-05-15T18:10:22Z",
    "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import java.util.{List => JList}\n+\n+import com.google.common.base.Splitter\n+import org.apache.mesos.Protos\n+import org.apache.mesos.Protos._\n+\n+import scala.collection.JavaConversions._\n+import scala.collection.mutable\n+\n+\n+object MesosUtils {\n+\n+  /** Helper method to get the key,value-set pair for a Mesos Attribute protobuf */\n+  private[mesos] def getAttribute(attr: Attribute) =\n+    (attr.getName, attr.getText.getValue.split(',').toSet)\n+\n+  /** Helper function to pull out a resource from a Mesos Resources protobuf */\n+  private[mesos] def getResource(res: JList[Resource], name: String): Double = {\n+    for (r <- res if r.getName == name) {\n+      return r.getScalar.getValue\n+    }\n+    0\n+  }\n+\n+  /** Build a Mesos resource protobuf object */\n+  private[mesos] def createResource(resourceName: String, quantity: Double): Protos.Resource = {\n+    Resource.newBuilder()\n+      .setName(resourceName)\n+      .setType(Value.Type.SCALAR)\n+      .setScalar(Value.Scalar.newBuilder().setValue(quantity).build())\n+      .build()\n+  }\n+\n+\n+  /**\n+   * Match the requirements (if any) to the offer attributes.\n+   * if attribute requirements are not specified - return true\n+   * else if attribute is defined and no values are given, simple attribute presence is preformed\n+   * else if attribute name and value is specified, subset match is performed on slave attributes\n+   */\n+  private[mesos] def matchesAttributeRequirements(\n+    slaveOfferConstraints: Map[String, Set[String]],\n+    offerAttributes: Map[String, Set[String]]) =\n+    if (slaveOfferConstraints.isEmpty) {\n+      true\n+    } else {\n+      slaveOfferConstraints.forall {"
  }],
  "prId": 5563
}, {
  "comments": [{
    "author": {
      "login": "dragos"
    },
    "body": "`forall` returns `true` for an empty collection, so you don't need to test for `size == 0`.\n",
    "commit": "902535b1d9a8e5e8b11428bbdde5994c15b83223",
    "createdAt": "2015-05-15T13:06:30Z",
    "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import java.util.{List => JList}\n+\n+import com.google.common.base.Splitter\n+import org.apache.mesos.Protos\n+import org.apache.mesos.Protos._\n+\n+import scala.collection.JavaConversions._\n+import scala.collection.mutable\n+\n+\n+object MesosUtils {\n+\n+  /** Helper method to get the key,value-set pair for a Mesos Attribute protobuf */\n+  private[mesos] def getAttribute(attr: Attribute) =\n+    (attr.getName, attr.getText.getValue.split(',').toSet)\n+\n+  /** Helper function to pull out a resource from a Mesos Resources protobuf */\n+  private[mesos] def getResource(res: JList[Resource], name: String): Double = {\n+    for (r <- res if r.getName == name) {\n+      return r.getScalar.getValue\n+    }\n+    0\n+  }\n+\n+  /** Build a Mesos resource protobuf object */\n+  private[mesos] def createResource(resourceName: String, quantity: Double): Protos.Resource = {\n+    Resource.newBuilder()\n+      .setName(resourceName)\n+      .setType(Value.Type.SCALAR)\n+      .setScalar(Value.Scalar.newBuilder().setValue(quantity).build())\n+      .build()\n+  }\n+\n+\n+  /**\n+   * Match the requirements (if any) to the offer attributes.\n+   * if attribute requirements are not specified - return true\n+   * else if attribute is defined and no values are given, simple attribute presence is preformed\n+   * else if attribute name and value is specified, subset match is performed on slave attributes\n+   */\n+  private[mesos] def matchesAttributeRequirements(\n+    slaveOfferConstraints: Map[String, Set[String]],\n+    offerAttributes: Map[String, Set[String]]) =\n+    if (slaveOfferConstraints.isEmpty) {\n+      true\n+    } else {\n+      slaveOfferConstraints.forall {\n+        // offer has the required attribute and subsumes the required values for that attribute\n+        case (name, requiredValues) =>\n+          offerAttributes.contains(name) &&\n+            // The attributes and their values are case sensitive during comparison\n+            // i.e tachyon -> true != Tachyon -> true != tachyon -> True\n+            (requiredValues.size == 0 ||\n+              requiredValues.forall((v) => offerAttributes(name).contains(v)))"
  }, {
    "author": {
      "login": "dragos"
    },
    "body": "In fact, since you are testing for set inclusion, you could use `requiredValues.subsetOf(offerAttributes(name))`\n",
    "commit": "902535b1d9a8e5e8b11428bbdde5994c15b83223",
    "createdAt": "2015-05-15T13:09:04Z",
    "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import java.util.{List => JList}\n+\n+import com.google.common.base.Splitter\n+import org.apache.mesos.Protos\n+import org.apache.mesos.Protos._\n+\n+import scala.collection.JavaConversions._\n+import scala.collection.mutable\n+\n+\n+object MesosUtils {\n+\n+  /** Helper method to get the key,value-set pair for a Mesos Attribute protobuf */\n+  private[mesos] def getAttribute(attr: Attribute) =\n+    (attr.getName, attr.getText.getValue.split(',').toSet)\n+\n+  /** Helper function to pull out a resource from a Mesos Resources protobuf */\n+  private[mesos] def getResource(res: JList[Resource], name: String): Double = {\n+    for (r <- res if r.getName == name) {\n+      return r.getScalar.getValue\n+    }\n+    0\n+  }\n+\n+  /** Build a Mesos resource protobuf object */\n+  private[mesos] def createResource(resourceName: String, quantity: Double): Protos.Resource = {\n+    Resource.newBuilder()\n+      .setName(resourceName)\n+      .setType(Value.Type.SCALAR)\n+      .setScalar(Value.Scalar.newBuilder().setValue(quantity).build())\n+      .build()\n+  }\n+\n+\n+  /**\n+   * Match the requirements (if any) to the offer attributes.\n+   * if attribute requirements are not specified - return true\n+   * else if attribute is defined and no values are given, simple attribute presence is preformed\n+   * else if attribute name and value is specified, subset match is performed on slave attributes\n+   */\n+  private[mesos] def matchesAttributeRequirements(\n+    slaveOfferConstraints: Map[String, Set[String]],\n+    offerAttributes: Map[String, Set[String]]) =\n+    if (slaveOfferConstraints.isEmpty) {\n+      true\n+    } else {\n+      slaveOfferConstraints.forall {\n+        // offer has the required attribute and subsumes the required values for that attribute\n+        case (name, requiredValues) =>\n+          offerAttributes.contains(name) &&\n+            // The attributes and their values are case sensitive during comparison\n+            // i.e tachyon -> true != Tachyon -> true != tachyon -> True\n+            (requiredValues.size == 0 ||\n+              requiredValues.forall((v) => offerAttributes(name).contains(v)))"
  }],
  "prId": 5563
}, {
  "comments": [{
    "author": {
      "login": "dragos"
    },
    "body": "I think it would be good to put this in the scaladoc for this method, since it's not clear that the constraints string is the Mesos format of attributes.\n",
    "commit": "902535b1d9a8e5e8b11428bbdde5994c15b83223",
    "createdAt": "2015-05-15T13:13:00Z",
    "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import java.util.{List => JList}\n+\n+import com.google.common.base.Splitter\n+import org.apache.mesos.Protos\n+import org.apache.mesos.Protos._\n+\n+import scala.collection.JavaConversions._\n+import scala.collection.mutable\n+\n+\n+object MesosUtils {\n+\n+  /** Helper method to get the key,value-set pair for a Mesos Attribute protobuf */\n+  private[mesos] def getAttribute(attr: Attribute) =\n+    (attr.getName, attr.getText.getValue.split(',').toSet)\n+\n+  /** Helper function to pull out a resource from a Mesos Resources protobuf */\n+  private[mesos] def getResource(res: JList[Resource], name: String): Double = {\n+    for (r <- res if r.getName == name) {\n+      return r.getScalar.getValue\n+    }\n+    0\n+  }\n+\n+  /** Build a Mesos resource protobuf object */\n+  private[mesos] def createResource(resourceName: String, quantity: Double): Protos.Resource = {\n+    Resource.newBuilder()\n+      .setName(resourceName)\n+      .setType(Value.Type.SCALAR)\n+      .setScalar(Value.Scalar.newBuilder().setValue(quantity).build())\n+      .build()\n+  }\n+\n+\n+  /**\n+   * Match the requirements (if any) to the offer attributes.\n+   * if attribute requirements are not specified - return true\n+   * else if attribute is defined and no values are given, simple attribute presence is preformed\n+   * else if attribute name and value is specified, subset match is performed on slave attributes\n+   */\n+  private[mesos] def matchesAttributeRequirements(\n+    slaveOfferConstraints: Map[String, Set[String]],\n+    offerAttributes: Map[String, Set[String]]) =\n+    if (slaveOfferConstraints.isEmpty) {\n+      true\n+    } else {\n+      slaveOfferConstraints.forall {\n+        // offer has the required attribute and subsumes the required values for that attribute\n+        case (name, requiredValues) =>\n+          offerAttributes.contains(name) &&\n+            // The attributes and their values are case sensitive during comparison\n+            // i.e tachyon -> true != Tachyon -> true != tachyon -> True\n+            (requiredValues.size == 0 ||\n+              requiredValues.forall((v) => offerAttributes(name).contains(v)))\n+      }\n+    }\n+\n+  /** Helper method to parse the constraint string */\n+  private[mesos] def parseConstraintString(constraintsVal: String): Map[String, Set[String]] = {\n+    /*\n+      Based on mesos docs:\n+      attributes : attribute ( \";\" attribute )*\n+      attribute : labelString \":\" ( labelString | \",\" )+\n+      labelString : [a-zA-Z0-9_/.-]\n+    */\n+    val splitter = Splitter.on(';').trimResults().withKeyValueSeparator(':')"
  }],
  "prId": 5563
}]