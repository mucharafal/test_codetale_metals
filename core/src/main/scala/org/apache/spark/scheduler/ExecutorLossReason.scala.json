[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "I don't know, I find `ExecutorExitedAbnormally` and `ExecutorExitedNormally` a little confusing, since internally they hold exactly the same data (even the same reason message). What if there was only `ExecutorExited` with a parameter saying whether it should be treated as an error or not?\n",
    "commit": "ee6fffa9d088271aafe13d15f4db326ed2a0c0c4",
    "createdAt": "2015-08-18T21:02:55Z",
    "diffHunk": "@@ -23,13 +23,29 @@ import org.apache.spark.executor.ExecutorExitCode\n  * Represents an explanation for a executor or whole slave failing or exiting.\n  */\n private[spark]\n-class ExecutorLossReason(val message: String) {\n+class ExecutorLossReason(val message: String) extends Serializable {\n   override def toString: String = message\n }\n \n+private[spark] case class ExecutorExitedAbnormally(val exitCode: Int, reason: String)\n+  extends ExecutorLossReason(reason) {\n+}\n+\n+private[spark] object ExecutorExitedAbnormally {\n+  def apply(exitCode: Int): ExecutorExitedAbnormally = {\n+    ExecutorExitedAbnormally(exitCode, ExecutorExitCode.explainExitCode(exitCode))\n+  }\n+}\n+\n private[spark]\n-case class ExecutorExited(val exitCode: Int)\n-  extends ExecutorLossReason(ExecutorExitCode.explainExitCode(exitCode)) {\n+case class ExecutorExitedNormally(val exitCode: Int, reason: String)\n+  extends ExecutorLossReason(reason) {\n+}\n+\n+private[spark] object ExecutorExitedNormally {"
  }],
  "prId": 8007
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "no need `{ }`\n",
    "commit": "ee6fffa9d088271aafe13d15f4db326ed2a0c0c4",
    "createdAt": "2015-09-02T23:50:05Z",
    "diffHunk": "@@ -23,13 +23,19 @@ import org.apache.spark.executor.ExecutorExitCode\n  * Represents an explanation for a executor or whole slave failing or exiting.\n  */\n private[spark]\n-class ExecutorLossReason(val message: String) {\n+class ExecutorLossReason(val message: String) extends Serializable {\n   override def toString: String = message\n }\n \n private[spark]\n-case class ExecutorExited(val exitCode: Int)\n-  extends ExecutorLossReason(ExecutorExitCode.explainExitCode(exitCode)) {\n+case class ExecutorExited(val exitCode: Int, isNormalExit: Boolean, reason: String)\n+  extends ExecutorLossReason(reason) {\n+}"
  }],
  "prId": 8007
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "not your code, but since this is a case class you don't need the `val` here\n",
    "commit": "ee6fffa9d088271aafe13d15f4db326ed2a0c0c4",
    "createdAt": "2015-09-02T23:50:49Z",
    "diffHunk": "@@ -23,13 +23,19 @@ import org.apache.spark.executor.ExecutorExitCode\n  * Represents an explanation for a executor or whole slave failing or exiting.\n  */\n private[spark]\n-class ExecutorLossReason(val message: String) {\n+class ExecutorLossReason(val message: String) extends Serializable {\n   override def toString: String = message\n }\n \n private[spark]\n-case class ExecutorExited(val exitCode: Int)\n-  extends ExecutorLossReason(ExecutorExitCode.explainExitCode(exitCode)) {\n+case class ExecutorExited(val exitCode: Int, isNormalExit: Boolean, reason: String)"
  }],
  "prId": 8007
}]