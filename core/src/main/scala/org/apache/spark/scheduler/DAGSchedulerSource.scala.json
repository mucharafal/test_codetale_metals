[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "Why this change? I'd say we want at least some relationship with the application here. Since we rely on the application ID we can solve SPARK-3377, but as a backup it's still not a bad idea to use the app name.\n",
    "commit": "3288b2bb44a81b605ddc26f2772baebbaf1ad38e",
    "createdAt": "2014-10-01T22:45:29Z",
    "diffHunk": "@@ -22,10 +22,10 @@ import com.codahale.metrics.{Gauge,MetricRegistry}\n import org.apache.spark.SparkContext\n import org.apache.spark.metrics.source.Source\n \n-private[spark] class DAGSchedulerSource(val dagScheduler: DAGScheduler, sc: SparkContext)\n+private[spark] class DAGSchedulerSource(val dagScheduler: DAGScheduler)\n     extends Source {\n   override val metricRegistry = new MetricRegistry()\n-  override val sourceName = \"%s.DAGScheduler\".format(sc.appName)\n+  override val sourceName = \"DAGScheduler\"",
    "line": 9
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "After this patch, I don't think that this `sourceName` is the full name of the source.  If you look at Spark's MetricsSystem.registerSource() method, it takes the source name and prepends a bunch of app-specific information, including the appId, appName, executorId, etc.  \n",
    "commit": "3288b2bb44a81b605ddc26f2772baebbaf1ad38e",
    "createdAt": "2014-10-01T22:51:22Z",
    "diffHunk": "@@ -22,10 +22,10 @@ import com.codahale.metrics.{Gauge,MetricRegistry}\n import org.apache.spark.SparkContext\n import org.apache.spark.metrics.source.Source\n \n-private[spark] class DAGSchedulerSource(val dagScheduler: DAGScheduler, sc: SparkContext)\n+private[spark] class DAGSchedulerSource(val dagScheduler: DAGScheduler)\n     extends Source {\n   override val metricRegistry = new MetricRegistry()\n-  override val sourceName = \"%s.DAGScheduler\".format(sc.appName)\n+  override val sourceName = \"DAGScheduler\"",
    "line": 9
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "I see. So really this is the `sourceSuffix` rather than the name. If there is a failure condition in the `MetricsSystem` then we just use the raw suffix. That sounds fine.\n",
    "commit": "3288b2bb44a81b605ddc26f2772baebbaf1ad38e",
    "createdAt": "2014-10-01T23:32:46Z",
    "diffHunk": "@@ -22,10 +22,10 @@ import com.codahale.metrics.{Gauge,MetricRegistry}\n import org.apache.spark.SparkContext\n import org.apache.spark.metrics.source.Source\n \n-private[spark] class DAGSchedulerSource(val dagScheduler: DAGScheduler, sc: SparkContext)\n+private[spark] class DAGSchedulerSource(val dagScheduler: DAGScheduler)\n     extends Source {\n   override val metricRegistry = new MetricRegistry()\n-  override val sourceName = \"%s.DAGScheduler\".format(sc.appName)\n+  override val sourceName = \"DAGScheduler\"",
    "line": 9
  }],
  "prId": 2432
}]