[{
  "comments": [{
    "author": {
      "login": "ash211"
    },
    "body": "Should this be + 1.0 instead of \\* 1.0?  As written the *1.0 is essentially a no-op\n",
    "commit": "4abaa5d442d0c4224f8455df397c660a9c09441f",
    "createdAt": "2014-09-27T07:45:07Z",
    "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import org.apache.spark.SparkContext\n+\n+object MemoryUtils {\n+  val OVERHEAD_FRACTION = 0.15\n+  val OVERHEAD_MINIMUM = 384\n+\n+  private[spark] def calculateTotalMemory(sc: SparkContext) = {\n+    Math.max(\n+      sc.conf.getOption(\"spark.mesos.executor.memoryOverhead\")\n+        .getOrElse(OVERHEAD_FRACTION.toString)\n+        .toDouble * 1.0 * sc.executorMemory,"
  }, {
    "author": {
      "login": "brndnmtthws"
    },
    "body": "Ah yes good catch.  I'll update the PR.\n",
    "commit": "4abaa5d442d0c4224f8455df397c660a9c09441f",
    "createdAt": "2014-09-27T07:48:26Z",
    "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import org.apache.spark.SparkContext\n+\n+object MemoryUtils {\n+  val OVERHEAD_FRACTION = 0.15\n+  val OVERHEAD_MINIMUM = 384\n+\n+  private[spark] def calculateTotalMemory(sc: SparkContext) = {\n+    Math.max(\n+      sc.conf.getOption(\"spark.mesos.executor.memoryOverhead\")\n+        .getOrElse(OVERHEAD_FRACTION.toString)\n+        .toDouble * 1.0 * sc.executorMemory,"
  }],
  "prId": 2401
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "I would just make this object `private[spark]` altogether\n",
    "commit": "4abaa5d442d0c4224f8455df397c660a9c09441f",
    "createdAt": "2014-10-03T17:19:21Z",
    "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import org.apache.spark.SparkContext\n+\n+object MemoryUtils {"
  }],
  "prId": 2401
}]