[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "need explicit return type\n",
    "commit": "069e9463b377d1a0c7e4c35619e06213eae07fc2",
    "createdAt": "2015-03-25T21:20:28Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import org.apache.mesos.{Scheduler, MesosSchedulerDriver, SchedulerDriver}\n+import org.apache.mesos.Protos.{TaskState, Resource, FrameworkInfo}\n+import org.apache.spark.Logging\n+\n+import java.util.concurrent.CountDownLatch\n+import java.util.List\n+\n+import scala.collection.JavaConversions._\n+\n+private[spark] trait MesosSchedulerHelper extends Logging {\n+  // Lock used to wait for scheduler to be registered\n+  final val registerLatch = new CountDownLatch(1)\n+\n+  // Driver for talking to Mesos\n+  var driver: SchedulerDriver = null\n+\n+  def startScheduler(name: String, masterUrl: String, scheduler: Scheduler, fwInfo: FrameworkInfo) {\n+    synchronized {\n+      if (driver != null) {\n+        waitForRegister()\n+        return\n+      }\n+\n+      new Thread(name + \" driver\") {\n+        setDaemon(true)\n+\n+        override def run() {\n+          driver = new MesosSchedulerDriver(scheduler, fwInfo, masterUrl)\n+          try {\n+            val ret = driver.run()\n+            logInfo(\"driver.run() returned with code \" + ret)\n+          } catch {\n+            case e: Exception => logError(\"driver.run() failed\", e)\n+          }\n+        }\n+      }.start()\n+\n+      waitForRegister()\n+    }\n+  }\n+\n+  private def waitForRegister() {\n+    registerLatch.await()\n+  }\n+\n+  def markRegistered() {\n+    registerLatch.countDown()\n+  }\n+\n+  def getResource(res: List[Resource], name: String): Double = {\n+    for (r <- res if r.getName == name) {\n+      return r.getScalar.getValue\n+    }\n+    0.0\n+  }\n+\n+  /** Check whether a Mesos task state represents a finished task */\n+  def isFinished(state: TaskState) = {"
  }],
  "prId": 5144
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "return type `: Unit`, here and everywhere else\n",
    "commit": "069e9463b377d1a0c7e4c35619e06213eae07fc2",
    "createdAt": "2015-03-25T21:20:44Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler.cluster.mesos\n+\n+import org.apache.mesos.{Scheduler, MesosSchedulerDriver, SchedulerDriver}\n+import org.apache.mesos.Protos.{TaskState, Resource, FrameworkInfo}\n+import org.apache.spark.Logging\n+\n+import java.util.concurrent.CountDownLatch\n+import java.util.List\n+\n+import scala.collection.JavaConversions._\n+\n+private[spark] trait MesosSchedulerHelper extends Logging {\n+  // Lock used to wait for scheduler to be registered\n+  final val registerLatch = new CountDownLatch(1)\n+\n+  // Driver for talking to Mesos\n+  var driver: SchedulerDriver = null\n+\n+  def startScheduler(name: String, masterUrl: String, scheduler: Scheduler, fwInfo: FrameworkInfo) {\n+    synchronized {\n+      if (driver != null) {\n+        waitForRegister()\n+        return\n+      }\n+\n+      new Thread(name + \" driver\") {\n+        setDaemon(true)\n+\n+        override def run() {\n+          driver = new MesosSchedulerDriver(scheduler, fwInfo, masterUrl)\n+          try {\n+            val ret = driver.run()\n+            logInfo(\"driver.run() returned with code \" + ret)\n+          } catch {\n+            case e: Exception => logError(\"driver.run() failed\", e)\n+          }\n+        }\n+      }.start()\n+\n+      waitForRegister()\n+    }\n+  }\n+\n+  private def waitForRegister() {\n+    registerLatch.await()\n+  }\n+\n+  def markRegistered() {"
  }],
  "prId": 5144
}]