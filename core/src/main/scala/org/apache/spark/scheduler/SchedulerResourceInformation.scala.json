[{
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "remove the extra logInfo messages here and below",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-15T13:47:50Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.ResourceInformation\n+import org.apache.spark.annotation.Evolving\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * Class to hold information about a type of Resource used by the scheduler. This\n+ * is a separate class from the ResourceInformation because here its mutable because the\n+ * scheduler has to update the count and addresses based on what its assigned and\n+ * what is available.\n+ */\n+@Evolving\n+private[spark] class SchedulerResourceInformation(\n+    private val name: String,\n+    private val units: String,\n+    private var count: Long,\n+    private val addresses: ArrayBuffer[String] = ArrayBuffer.empty) extends Logging {\n+\n+  def getName(): String = name\n+  def getUnits(): String = units\n+  def getCount(): Long = count\n+\n+  def decCount(cnt: Long): Unit = {\n+    count -= cnt\n+  }\n+\n+  def incCount(cnt: Long): Unit = {\n+    count += cnt\n+  }\n+\n+  def getAddresses(): ArrayBuffer[String] = addresses\n+\n+  def addAddresses(addrs: Array[String]): Unit = {\n+    logInfo(\"in add addresses: \" + addrs.deep.mkString(\",\"))"
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "No big deal but how about just one method that can change the count by a positive or negative amount?",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-15T13:59:42Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.ResourceInformation\n+import org.apache.spark.annotation.Evolving\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * Class to hold information about a type of Resource used by the scheduler. This\n+ * is a separate class from the ResourceInformation because here its mutable because the\n+ * scheduler has to update the count and addresses based on what its assigned and\n+ * what is available.\n+ */\n+@Evolving\n+private[spark] class SchedulerResourceInformation(\n+    private val name: String,\n+    private val units: String,\n+    private var count: Long,\n+    private val addresses: ArrayBuffer[String] = ArrayBuffer.empty) extends Logging {\n+\n+  def getName(): String = name\n+  def getUnits(): String = units\n+  def getCount(): Long = count\n+\n+  def decCount(cnt: Long): Unit = {\n+    count -= cnt\n+  }\n+\n+  def incCount(cnt: Long): Unit = {"
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "`Seq`? as in, do you want to let callers modify this thing directly?",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-15T14:00:15Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.ResourceInformation\n+import org.apache.spark.annotation.Evolving\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * Class to hold information about a type of Resource used by the scheduler. This\n+ * is a separate class from the ResourceInformation because here its mutable because the\n+ * scheduler has to update the count and addresses based on what its assigned and\n+ * what is available.\n+ */\n+@Evolving\n+private[spark] class SchedulerResourceInformation(\n+    private val name: String,\n+    private val units: String,\n+    private var count: Long,\n+    private val addresses: ArrayBuffer[String] = ArrayBuffer.empty) extends Logging {\n+\n+  def getName(): String = name\n+  def getUnits(): String = units\n+  def getCount(): Long = count\n+\n+  def decCount(cnt: Long): Unit = {\n+    count -= cnt\n+  }\n+\n+  def incCount(cnt: Long): Unit = {\n+    count += cnt\n+  }\n+\n+  def getAddresses(): ArrayBuffer[String] = addresses"
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Probably debug level, and use interpolation",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-15T14:00:27Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.ResourceInformation\n+import org.apache.spark.annotation.Evolving\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * Class to hold information about a type of Resource used by the scheduler. This\n+ * is a separate class from the ResourceInformation because here its mutable because the\n+ * scheduler has to update the count and addresses based on what its assigned and\n+ * what is available.\n+ */\n+@Evolving\n+private[spark] class SchedulerResourceInformation(\n+    private val name: String,\n+    private val units: String,\n+    private var count: Long,\n+    private val addresses: ArrayBuffer[String] = ArrayBuffer.empty) extends Logging {\n+\n+  def getName(): String = name\n+  def getUnits(): String = units\n+  def getCount(): Long = count\n+\n+  def decCount(cnt: Long): Unit = {\n+    count -= cnt\n+  }\n+\n+  def incCount(cnt: Long): Unit = {\n+    count += cnt\n+  }\n+\n+  def getAddresses(): ArrayBuffer[String] = addresses\n+\n+  def addAddresses(addrs: Array[String]): Unit = {\n+    logInfo(\"in add addresses: \" + addrs.deep.mkString(\",\"))"
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`availableAddresses`",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-07T22:40:17Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.ResourceInformation\n+import org.apache.spark.annotation.Evolving\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * Class to hold information about a type of Resource used by the scheduler. This\n+ * is a separate class from the ResourceInformation because here its mutable because the\n+ * scheduler has to update the count and addresses based on what its assigned and\n+ * what is available.\n+ */\n+@Evolving\n+private[spark] class SchedulerResourceInformation(\n+    private val name: String,\n+    private val units: String,\n+    private var count: Long,\n+    private val addresses: ArrayBuffer[String] = ArrayBuffer.empty) extends Logging {"
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "* The public interface should only offer `acquire(num: Int): Option[Seq[String]]`.\r\n* When the task finishes, it should call `release(addresses: Seq[String])`, where you should verify the addresses are valid.\r\n",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-07T22:44:35Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.ResourceInformation\n+import org.apache.spark.annotation.Evolving\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * Class to hold information about a type of Resource used by the scheduler. This\n+ * is a separate class from the ResourceInformation because here its mutable because the\n+ * scheduler has to update the count and addresses based on what its assigned and\n+ * what is available.\n+ */\n+@Evolving\n+private[spark] class SchedulerResourceInformation(\n+    private val name: String,\n+    private val units: String,\n+    private var count: Long,\n+    private val addresses: ArrayBuffer[String] = ArrayBuffer.empty) extends Logging {\n+\n+  def getName(): String = name\n+  def getUnits(): String = units\n+  def getCount(): Long = count\n+\n+  def decCount(cnt: Long): Unit = {\n+    count -= cnt\n+  }\n+\n+  def incCount(cnt: Long): Unit = {\n+    count += cnt\n+  }\n+\n+  def getAddresses(): ArrayBuffer[String] = addresses\n+\n+  def addAddresses(addrs: Array[String]): Unit = {"
  }, {
    "author": {
      "login": "tgravescs"
    },
    "body": "that api would work for now when we only have addresses but I don't think will be as nice if we add in count and the addresses are optional. Since its private we could have this and change later if needed but just thinking ahead perhaps we call them acquireAddresses and releaseAddresses",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-15T13:36:14Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.ResourceInformation\n+import org.apache.spark.annotation.Evolving\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * Class to hold information about a type of Resource used by the scheduler. This\n+ * is a separate class from the ResourceInformation because here its mutable because the\n+ * scheduler has to update the count and addresses based on what its assigned and\n+ * what is available.\n+ */\n+@Evolving\n+private[spark] class SchedulerResourceInformation(\n+    private val name: String,\n+    private val units: String,\n+    private var count: Long,\n+    private val addresses: ArrayBuffer[String] = ArrayBuffer.empty) extends Logging {\n+\n+  def getName(): String = name\n+  def getUnits(): String = units\n+  def getCount(): Long = count\n+\n+  def decCount(cnt: Long): Unit = {\n+    count -= cnt\n+  }\n+\n+  def incCount(cnt: Long): Unit = {\n+    count += cnt\n+  }\n+\n+  def getAddresses(): ArrayBuffer[String] = addresses\n+\n+  def addAddresses(addrs: Array[String]): Unit = {"
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "I don't see this being used anymore, we can probably remove unless I missed it.  Then I htink we can remove the UNKNOWN def as well.",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-23T21:07:35Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.ResourceInformation.UNKNOWN\n+import org.apache.spark.annotation.Evolving\n+\n+/**\n+ * Class to hold information about a type of Resource used by the scheduler. This is a separate\n+ * class from the ResourceInformation because here its mutable because the scheduler has to update\n+ * the addresses based on what its assigned and what is available.\n+ */\n+@Evolving\n+private[spark] class SchedulerResourceInformation(\n+    private val name: String,\n+    private val availableAddresses: ArrayBuffer[String] = ArrayBuffer.empty) extends Serializable {\n+\n+  private val allocatedAddresses: ArrayBuffer[String] = ArrayBuffer.empty\n+\n+  def getName(): String = name\n+\n+  def getAvailableAddresses(): ArrayBuffer[String] = availableAddresses\n+\n+  def acquireAddresses(num: Int): Seq[String] = {\n+    assert(num <= availableAddresses.size, s\"Required to take $num $name addresses but only \" +\n+      s\"${availableAddresses.size} available.\")\n+    val addrs = availableAddresses.take(num)\n+    availableAddresses --= addrs\n+    allocatedAddresses ++= addrs\n+    addrs\n+  }\n+\n+  def releaseAddresses(addrs: Array[String]): Unit = {\n+    addrs.foreach { address =>\n+      assert(allocatedAddresses.contains(address), s\"Try to release $name address $address, but \" +\n+        \"it is not allocated.\")\n+      availableAddresses += address\n+      allocatedAddresses -= address\n+    }\n+  }\n+}\n+\n+private[spark] object SchedulerResourceInformation {\n+  def empty: SchedulerResourceInformation ="
  }, {
    "author": {
      "login": "jiangxb1987"
    },
    "body": "updated",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-23T23:42:39Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.ResourceInformation.UNKNOWN\n+import org.apache.spark.annotation.Evolving\n+\n+/**\n+ * Class to hold information about a type of Resource used by the scheduler. This is a separate\n+ * class from the ResourceInformation because here its mutable because the scheduler has to update\n+ * the addresses based on what its assigned and what is available.\n+ */\n+@Evolving\n+private[spark] class SchedulerResourceInformation(\n+    private val name: String,\n+    private val availableAddresses: ArrayBuffer[String] = ArrayBuffer.empty) extends Serializable {\n+\n+  private val allocatedAddresses: ArrayBuffer[String] = ArrayBuffer.empty\n+\n+  def getName(): String = name\n+\n+  def getAvailableAddresses(): ArrayBuffer[String] = availableAddresses\n+\n+  def acquireAddresses(num: Int): Seq[String] = {\n+    assert(num <= availableAddresses.size, s\"Required to take $num $name addresses but only \" +\n+      s\"${availableAddresses.size} available.\")\n+    val addrs = availableAddresses.take(num)\n+    availableAddresses --= addrs\n+    allocatedAddresses ++= addrs\n+    addrs\n+  }\n+\n+  def releaseAddresses(addrs: Array[String]): Unit = {\n+    addrs.foreach { address =>\n+      assert(allocatedAddresses.contains(address), s\"Try to release $name address $address, but \" +\n+        \"it is not allocated.\")\n+      availableAddresses += address\n+      allocatedAddresses -= address\n+    }\n+  }\n+}\n+\n+private[spark] object SchedulerResourceInformation {\n+  def empty: SchedulerResourceInformation ="
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "The class name is a little confusing. It is not `SchedulerResource`. How about `ExecutorResourceAllocationInfo`?",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-24T06:04:34Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.annotation.Evolving\n+\n+/**\n+ * Class to hold information about a type of Resource used by the scheduler. This is a separate\n+ * class from the ResourceInformation because here its mutable because the scheduler has to update\n+ * the addresses based on what its assigned and what is available.\n+ */\n+@Evolving\n+private[spark] class SchedulerResourceInformation("
  }, {
    "author": {
      "login": "jiangxb1987"
    },
    "body": "updated",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-29T01:12:51Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.annotation.Evolving\n+\n+/**\n+ * Class to hold information about a type of Resource used by the scheduler. This is a separate\n+ * class from the ResourceInformation because here its mutable because the scheduler has to update\n+ * the addresses based on what its assigned and what is available.\n+ */\n+@Evolving\n+private[spark] class SchedulerResourceInformation("
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "This is a private class.",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-24T06:05:07Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.annotation.Evolving\n+\n+/**\n+ * Class to hold information about a type of Resource used by the scheduler. This is a separate\n+ * class from the ResourceInformation because here its mutable because the scheduler has to update\n+ * the addresses based on what its assigned and what is available.\n+ */\n+@Evolving"
  }, {
    "author": {
      "login": "jiangxb1987"
    },
    "body": "removed",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-29T01:12:57Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.annotation.Evolving\n+\n+/**\n+ * Class to hold information about a type of Resource used by the scheduler. This is a separate\n+ * class from the ResourceInformation because here its mutable because the scheduler has to update\n+ * the addresses based on what its assigned and what is available.\n+ */\n+@Evolving"
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Do we need to handle thread safety in this class?",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-24T06:08:42Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.annotation.Evolving\n+\n+/**\n+ * Class to hold information about a type of Resource used by the scheduler. This is a separate\n+ * class from the ResourceInformation because here its mutable because the scheduler has to update\n+ * the addresses based on what its assigned and what is available.\n+ */\n+@Evolving\n+private[spark] class SchedulerResourceInformation(\n+    private val name: String,\n+    private val availableAddresses: ArrayBuffer[String] = ArrayBuffer.empty) extends Serializable {\n+\n+  private val allocatedAddresses: ArrayBuffer[String] = ArrayBuffer.empty\n+\n+  def getName(): String = name\n+\n+  def getAvailableAddresses(): ArrayBuffer[String] = availableAddresses\n+\n+  def acquireAddresses(num: Int): Seq[String] = {"
  }, {
    "author": {
      "login": "jiangxb1987"
    },
    "body": "IIUC this is only called inside `resourceOffers()`, which is synchronized.",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-29T01:13:48Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.annotation.Evolving\n+\n+/**\n+ * Class to hold information about a type of Resource used by the scheduler. This is a separate\n+ * class from the ResourceInformation because here its mutable because the scheduler has to update\n+ * the addresses based on what its assigned and what is available.\n+ */\n+@Evolving\n+private[spark] class SchedulerResourceInformation(\n+    private val name: String,\n+    private val availableAddresses: ArrayBuffer[String] = ArrayBuffer.empty) extends Serializable {\n+\n+  private val allocatedAddresses: ArrayBuffer[String] = ArrayBuffer.empty\n+\n+  def getName(): String = name\n+\n+  def getAvailableAddresses(): ArrayBuffer[String] = availableAddresses\n+\n+  def acquireAddresses(num: Int): Seq[String] = {"
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "It might be better to take `Seq` and internally make it mutable.",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-24T06:09:21Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.annotation.Evolving\n+\n+/**\n+ * Class to hold information about a type of Resource used by the scheduler. This is a separate\n+ * class from the ResourceInformation because here its mutable because the scheduler has to update\n+ * the addresses based on what its assigned and what is available.\n+ */\n+@Evolving\n+private[spark] class SchedulerResourceInformation(\n+    private val name: String,\n+    private val availableAddresses: ArrayBuffer[String] = ArrayBuffer.empty) extends Serializable {"
  }, {
    "author": {
      "login": "jiangxb1987"
    },
    "body": "updated",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-29T01:14:03Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.annotation.Evolving\n+\n+/**\n+ * Class to hold information about a type of Resource used by the scheduler. This is a separate\n+ * class from the ResourceInformation because here its mutable because the scheduler has to update\n+ * the addresses based on what its assigned and what is available.\n+ */\n+@Evolving\n+private[spark] class SchedulerResourceInformation(\n+    private val name: String,\n+    private val availableAddresses: ArrayBuffer[String] = ArrayBuffer.empty) extends Serializable {"
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "The only use of it is with `.size()`. Do we need to return the internal mutable array?",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-24T06:09:48Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.annotation.Evolving\n+\n+/**\n+ * Class to hold information about a type of Resource used by the scheduler. This is a separate\n+ * class from the ResourceInformation because here its mutable because the scheduler has to update\n+ * the addresses based on what its assigned and what is available.\n+ */\n+@Evolving\n+private[spark] class SchedulerResourceInformation(\n+    private val name: String,\n+    private val availableAddresses: ArrayBuffer[String] = ArrayBuffer.empty) extends Serializable {\n+\n+  private val allocatedAddresses: ArrayBuffer[String] = ArrayBuffer.empty\n+\n+  def getName(): String = name\n+\n+  def getAvailableAddresses(): ArrayBuffer[String] = availableAddresses"
  }, {
    "author": {
      "login": "jiangxb1987"
    },
    "body": "updated",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-29T01:14:09Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.annotation.Evolving\n+\n+/**\n+ * Class to hold information about a type of Resource used by the scheduler. This is a separate\n+ * class from the ResourceInformation because here its mutable because the scheduler has to update\n+ * the addresses based on what its assigned and what is available.\n+ */\n+@Evolving\n+private[spark] class SchedulerResourceInformation(\n+    private val name: String,\n+    private val availableAddresses: ArrayBuffer[String] = ArrayBuffer.empty) extends Serializable {\n+\n+  private val allocatedAddresses: ArrayBuffer[String] = ArrayBuffer.empty\n+\n+  def getName(): String = name\n+\n+  def getAvailableAddresses(): ArrayBuffer[String] = availableAddresses"
  }],
  "prId": 24374
}]