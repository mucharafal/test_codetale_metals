[{
  "comments": [{
    "author": {
      "login": "skonto"
    },
    "body": "I think this should be: spark.mesos.containerizer. Otherwise its confusing. I guess you mean what is the containerizer for the docker image. \n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-21T09:30:44Z",
    "diffHunk": "@@ -131,9 +140,18 @@ private[mesos] object MesosSchedulerBackendUtil extends Logging {\n     val portmaps = conf\n       .getOption(\"spark.mesos.executor.docker.portmaps\")\n       .map(parsePortMappingsSpec)\n+\n+    val containerizer = conf.get(\"spark.mesos.docker.containerizer\", \"docker\")"
  }],
  "prId": 14275
}, {
  "comments": [{
    "author": {
      "login": "skonto"
    },
    "body": "{}\n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-21T11:18:20Z",
    "diffHunk": "@@ -131,9 +140,18 @@ private[mesos] object MesosSchedulerBackendUtil extends Logging {\n     val portmaps = conf\n       .getOption(\"spark.mesos.executor.docker.portmaps\")\n       .map(parsePortMappingsSpec)\n+\n+    val containerizer = conf.get(\"spark.mesos.docker.containerizer\", \"docker\")\n+    if (!List(\"docker\", \"mesos\").contains(containerizer)) {\n+      throw new IllegalArgumentException(\n+        \"\"\"spark.mesos.docker.containerizer must be one of {\"docker\", \"mesos\"}.\"\"\" +\n+          s\"  You provided ${containerizer}\")"
  }],
  "prId": 14275
}, {
  "comments": [{
    "author": {
      "login": "skonto"
    },
    "body": "Bridge mode is not supported right? Why we need that?\nI read in the docs  spark.mesos.executor.docker.portmaps is used for that. I think docs need update.\nThere was a question here in the user list (we should answer i think): \nhttps://mail-archives.apache.org/mod_mbox/spark-user/201604.mbox/%3CCAKOFcwroULK_b2RajeAO3v_DZ2qS8uN86HekxUJejQA4=FspSw@mail.gmail.com%3E\n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-21T11:43:35Z",
    "diffHunk": "@@ -105,16 +105,25 @@ private[mesos] object MesosSchedulerBackendUtil extends Logging {\n   def addDockerInfo(\n       container: ContainerInfo.Builder,\n       image: String,\n+      containerizer: String,\n       volumes: Option[List[Volume]] = None,\n-      network: Option[ContainerInfo.DockerInfo.Network] = None,\n       portmaps: Option[List[ContainerInfo.DockerInfo.PortMapping]] = None): Unit = {"
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "Yea, this is effectively dead.  I'll leave it to a future PR to remove.\n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-21T17:29:49Z",
    "diffHunk": "@@ -105,16 +105,25 @@ private[mesos] object MesosSchedulerBackendUtil extends Logging {\n   def addDockerInfo(\n       container: ContainerInfo.Builder,\n       image: String,\n+      containerizer: String,\n       volumes: Option[List[Volume]] = None,\n-      network: Option[ContainerInfo.DockerInfo.Network] = None,\n       portmaps: Option[List[ContainerInfo.DockerInfo.PortMapping]] = None): Unit = {"
  }, {
    "author": {
      "login": "skonto"
    },
    "body": "Ok cool we clarified that, there is a lot of confusion out there. How about the image is there one i can use to test it quickly? I really want to do that before reporting its good.\n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-21T21:01:45Z",
    "diffHunk": "@@ -105,16 +105,25 @@ private[mesos] object MesosSchedulerBackendUtil extends Logging {\n   def addDockerInfo(\n       container: ContainerInfo.Builder,\n       image: String,\n+      containerizer: String,\n       volumes: Option[List[Volume]] = None,\n-      network: Option[ContainerInfo.DockerInfo.Network] = None,\n       portmaps: Option[List[ContainerInfo.DockerInfo.PortMapping]] = None): Unit = {"
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "You can use ours: https://github.com/mesosphere/universe/blob/version-3.x/repo/packages/S/spark/14/resource.json#L5\n\nThe Spark dist is located at /opt/spark/dist\n\nI've also already tested this manually.\n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-21T21:05:35Z",
    "diffHunk": "@@ -105,16 +105,25 @@ private[mesos] object MesosSchedulerBackendUtil extends Logging {\n   def addDockerInfo(\n       container: ContainerInfo.Builder,\n       image: String,\n+      containerizer: String,\n       volumes: Option[List[Volume]] = None,\n-      network: Option[ContainerInfo.DockerInfo.Network] = None,\n       portmaps: Option[List[ContainerInfo.DockerInfo.PortMapping]] = None): Unit = {"
  }, {
    "author": {
      "login": "skonto"
    },
    "body": ":+1:  ok just a quick check i will do (a ritual for me) and will be fine from my side and then i will invite the committers for inspection and merge (tom).\n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-22T00:08:36Z",
    "diffHunk": "@@ -105,16 +105,25 @@ private[mesos] object MesosSchedulerBackendUtil extends Logging {\n   def addDockerInfo(\n       container: ContainerInfo.Builder,\n       image: String,\n+      containerizer: String,\n       volumes: Option[List[Volume]] = None,\n-      network: Option[ContainerInfo.DockerInfo.Network] = None,\n       portmaps: Option[List[ContainerInfo.DockerInfo.PortMapping]] = None): Unit = {"
  }],
  "prId": 14275
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "`containerizer match { ...` is another way to write this, which might at least let you easily throw a no-match exception if it's an unsupported value. No big deal\n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-22T12:13:50Z",
    "diffHunk": "@@ -105,16 +105,25 @@ private[mesos] object MesosSchedulerBackendUtil extends Logging {\n   def addDockerInfo(\n       container: ContainerInfo.Builder,\n       image: String,\n+      containerizer: String,\n       volumes: Option[List[Volume]] = None,\n-      network: Option[ContainerInfo.DockerInfo.Network] = None,\n       portmaps: Option[List[ContainerInfo.DockerInfo.PortMapping]] = None): Unit = {\n-\n-    val docker = ContainerInfo.DockerInfo.newBuilder().setImage(image)\n-\n-    network.foreach(docker.setNetwork)\n-    portmaps.foreach(_.foreach(docker.addPortMappings))\n-    container.setType(ContainerInfo.Type.DOCKER)\n-    container.setDocker(docker.build())\n+    val dockerContainerizer = containerizer == \"docker\"\n+    if (dockerContainerizer) {"
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "good idea. fixed.\n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-22T17:33:31Z",
    "diffHunk": "@@ -105,16 +105,25 @@ private[mesos] object MesosSchedulerBackendUtil extends Logging {\n   def addDockerInfo(\n       container: ContainerInfo.Builder,\n       image: String,\n+      containerizer: String,\n       volumes: Option[List[Volume]] = None,\n-      network: Option[ContainerInfo.DockerInfo.Network] = None,\n       portmaps: Option[List[ContainerInfo.DockerInfo.PortMapping]] = None): Unit = {\n-\n-    val docker = ContainerInfo.DockerInfo.newBuilder().setImage(image)\n-\n-    network.foreach(docker.setNetwork)\n-    portmaps.foreach(_.foreach(docker.addPortMappings))\n-    container.setType(ContainerInfo.Type.DOCKER)\n-    container.setDocker(docker.build())\n+    val dockerContainerizer = containerizer == \"docker\"\n+    if (dockerContainerizer) {"
  }],
  "prId": 14275
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "This might become obsolete then, not sure. But consider using `require` in any event\n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-22T12:14:26Z",
    "diffHunk": "@@ -131,9 +140,18 @@ private[mesos] object MesosSchedulerBackendUtil extends Logging {\n     val portmaps = conf\n       .getOption(\"spark.mesos.executor.docker.portmaps\")\n       .map(parsePortMappingsSpec)\n+\n+    val containerizer = conf.get(\"spark.mesos.containerizer\", \"docker\")\n+    if (!List(\"docker\", \"mesos\").contains(containerizer)) {"
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "removed in favor of the `match` above\n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-22T17:33:50Z",
    "diffHunk": "@@ -131,9 +140,18 @@ private[mesos] object MesosSchedulerBackendUtil extends Logging {\n     val portmaps = conf\n       .getOption(\"spark.mesos.executor.docker.portmaps\")\n       .map(parsePortMappingsSpec)\n+\n+    val containerizer = conf.get(\"spark.mesos.containerizer\", \"docker\")\n+    if (!List(\"docker\", \"mesos\").contains(containerizer)) {"
  }],
  "prId": 14275
}, {
  "comments": [{
    "author": {
      "login": "tnachen"
    },
    "body": "Can we have a sensible message/exception when we pass in a unknown containerizer? \n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-25T02:37:47Z",
    "diffHunk": "@@ -105,16 +105,27 @@ private[mesos] object MesosSchedulerBackendUtil extends Logging {\n   def addDockerInfo(\n       container: ContainerInfo.Builder,\n       image: String,\n+      containerizer: String,\n       volumes: Option[List[Volume]] = None,\n-      network: Option[ContainerInfo.DockerInfo.Network] = None,\n       portmaps: Option[List[ContainerInfo.DockerInfo.PortMapping]] = None): Unit = {\n \n-    val docker = ContainerInfo.DockerInfo.newBuilder().setImage(image)\n+    containerizer match {"
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "done\n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-25T20:46:21Z",
    "diffHunk": "@@ -105,16 +105,27 @@ private[mesos] object MesosSchedulerBackendUtil extends Logging {\n   def addDockerInfo(\n       container: ContainerInfo.Builder,\n       image: String,\n+      containerizer: String,\n       volumes: Option[List[Volume]] = None,\n-      network: Option[ContainerInfo.DockerInfo.Network] = None,\n       portmaps: Option[List[ContainerInfo.DockerInfo.PortMapping]] = None): Unit = {\n \n-    val docker = ContainerInfo.DockerInfo.newBuilder().setImage(image)\n+    containerizer match {"
  }],
  "prId": 14275
}]