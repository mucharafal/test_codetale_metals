[{
  "comments": [{
    "author": {
      "login": "witgo"
    },
    "body": "@vanzin What are your thoughts about this?\n",
    "commit": "9f3a2cdaa8e8800270433bc85b780c3ca99fbb37",
    "createdAt": "2014-07-15T18:25:29Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.scheduler\n+\n+import java.io.IOException\n+import org.apache.spark.{ExceptionFailure, ContextCleaner, Logging, SparkConf}\n+\n+private[spark] class TaskEventListener(appName: String, sparkConf: SparkConf)\n+  extends SparkListener with Logging {\n+\n+  val MAX_PROPORTION = 0.7D\n+\n+  override def onTaskEnd(taskEnd: SparkListenerTaskEnd) {\n+    val SparkListenerTaskEnd(stageId, taskType, reason, taskInfo, taskMetrics) = taskEnd\n+    if (reason.isInstanceOf[ExceptionFailure]) {\n+      val ef = reason.asInstanceOf[ExceptionFailure]\n+      if ((ef.className == classOf[OutOfMemoryError].getName) || ef.className ==\n+        classOf[IOException].getName && ef.description.startsWith(\"No space left on device\")) {\n+        ContextCleaner.runGC()\n+      }\n+    } else if ((taskMetrics != null) && (taskMetrics.jvmGCTime.toDouble /\n+      taskMetrics.executorRunTime > MAX_PROPORTION)) {\n+      // TODO: Such logic is too rough?"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "I don't know. It's still not clear to me what it is that you're trying to fix. See my question in https://github.com/apache/spark/pull/1387#issuecomment-49070018; you pasted a bunch of logs but you haven't explained what the problem is. Is it something that causes the spark job to do something it shouldn't? Or is it just an ugly log message you're trying to get rid of?\n",
    "commit": "9f3a2cdaa8e8800270433bc85b780c3ca99fbb37",
    "createdAt": "2014-07-15T18:29:51Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.scheduler\n+\n+import java.io.IOException\n+import org.apache.spark.{ExceptionFailure, ContextCleaner, Logging, SparkConf}\n+\n+private[spark] class TaskEventListener(appName: String, sparkConf: SparkConf)\n+  extends SparkListener with Logging {\n+\n+  val MAX_PROPORTION = 0.7D\n+\n+  override def onTaskEnd(taskEnd: SparkListenerTaskEnd) {\n+    val SparkListenerTaskEnd(stageId, taskType, reason, taskInfo, taskMetrics) = taskEnd\n+    if (reason.isInstanceOf[ExceptionFailure]) {\n+      val ef = reason.asInstanceOf[ExceptionFailure]\n+      if ((ef.className == classOf[OutOfMemoryError].getName) || ef.className ==\n+        classOf[IOException].getName && ef.description.startsWith(\"No space left on device\")) {\n+        ContextCleaner.runGC()\n+      }\n+    } else if ((taskMetrics != null) && (taskMetrics.jvmGCTime.toDouble /\n+      taskMetrics.executorRunTime > MAX_PROPORTION)) {\n+      // TODO: Such logic is too rough?"
  }],
  "prId": 1387
}]