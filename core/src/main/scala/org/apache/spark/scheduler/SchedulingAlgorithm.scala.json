[{
  "comments": [{
    "author": {
      "login": "markhamstra"
    },
    "body": "This `if..else` doesn't actually do anything.  This whole comparator is needlessly complex.  If the intent is lexicographical ordering with higher priority ahead of lower priority, lower jobId ahead of higher jobId, and lower stageId ahead of higher stageId, then this should be sufficient:\n\n``` scala\nprivate[spark] class FIFOSchedulingAlgorithm extends SchedulingAlgorithm {\n  override def comparator(s1: Schedulable, s2: Schedulable): Boolean = {\n    import scala.math.Ordering.Implicits._\n    (s1.priority, s2.jobId, s2.stageId) > (s2.priority, s1.jobId, s1.stageId)\n  }\n}\n```\n",
    "commit": "d1eae883a448ca4ff0d347b4b925a80240e8ec78",
    "createdAt": "2014-07-22T19:00:53Z",
    "diffHunk": "@@ -32,11 +32,21 @@ private[spark] class FIFOSchedulingAlgorithm extends SchedulingAlgorithm {\n     val priority2 = s2.priority\n     var res = math.signum(priority1 - priority2)\n     if (res == 0) {\n-      val stageId1 = s1.stageId\n-      val stageId2 = s2.stageId\n-      res = math.signum(stageId1 - stageId2)\n+      val jobId1 = s1.jobId\n+      val jobId2 = s2.jobId\n+      res = math.signum(jobId1 - jobId2)\n+      if (res == 0) {\n+        val stageId1 = s1.stageId\n+        val stageId2 = s2.stageId\n+        res = math.signum(stageId1 - stageId2)\n+      }\n+      if (res < 0) {\n+        true\n+      } else {\n+        false\n+      }"
  }],
  "prId": 1528
}, {
  "comments": [{
    "author": {
      "login": "markhamstra"
    },
    "body": "Pulling in these implicits can have unintended consequences; that's why in my previous comment I kept the scope of the import as small as possible.\n",
    "commit": "d1eae883a448ca4ff0d347b4b925a80240e8ec78",
    "createdAt": "2014-07-23T03:54:56Z",
    "diffHunk": "@@ -17,6 +17,8 @@\n \n package org.apache.spark.scheduler\n \n+import scala.math.Ordering.Implicits._"
  }],
  "prId": 1528
}]