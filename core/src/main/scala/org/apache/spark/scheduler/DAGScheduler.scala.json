[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Super minor but should this use string interpolation? as a general principle for speed and conciseness, though it won't matter here.\n",
    "commit": "8416b7f83c86aa17ed2d7ffdf4a6aea40e48416a",
    "createdAt": "2015-08-25T07:42:20Z",
    "diffHunk": "@@ -732,7 +732,8 @@ class DAGScheduler(\n         job.jobId, callSite.shortForm, partitions.length))\n       logInfo(\"Final stage: \" + finalStage + \"(\" + finalStage.name + \")\")\n       logInfo(\"Parents of final stage: \" + finalStage.parents)\n-      logInfo(\"Missing parents: \" + getMissingParentStages(finalStage))\n+      val missingStages = getMissingParentStages(finalStage)\n+      logInfo(\"Missing parents: \" + missingStages)",
    "line": 6
  }],
  "prId": 8269
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "There are a number of recursive calls that then don't get this value then and recompute anyway? To avoid complication, is it simpler to just have all callers provide this info? I don't think it's but one more change.\n",
    "commit": "8416b7f83c86aa17ed2d7ffdf4a6aea40e48416a",
    "createdAt": "2015-08-25T07:44:10Z",
    "diffHunk": "@@ -741,18 +742,18 @@ class DAGScheduler(\n       val stageInfos = stageIds.flatMap(id => stageIdToStage.get(id).map(_.latestInfo))\n       listenerBus.post(\n         SparkListenerJobStart(job.jobId, jobSubmissionTime, stageInfos, properties))\n-      submitStage(finalStage)\n+      submitStage(finalStage, Some(missingStages))\n     }\n     submitWaitingStages()\n   }\n \n   /** Submits stage, but first recursively submits any missing parents. */\n-  private def submitStage(stage: Stage) {\n+  private def submitStage(stage: Stage, missingStages: Option[List[Stage]] = None) {",
    "line": 22
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "+1, it actually simplifies the code down there because now you don't need the `getOrElse` in L756 anymore\n",
    "commit": "8416b7f83c86aa17ed2d7ffdf4a6aea40e48416a",
    "createdAt": "2015-09-01T20:35:11Z",
    "diffHunk": "@@ -741,18 +742,18 @@ class DAGScheduler(\n       val stageInfos = stageIds.flatMap(id => stageIdToStage.get(id).map(_.latestInfo))\n       listenerBus.post(\n         SparkListenerJobStart(job.jobId, jobSubmissionTime, stageInfos, properties))\n-      submitStage(finalStage)\n+      submitStage(finalStage, Some(missingStages))\n     }\n     submitWaitingStages()\n   }\n \n   /** Submits stage, but first recursively submits any missing parents. */\n-  private def submitStage(stage: Stage) {\n+  private def submitStage(stage: Stage, missingStages: Option[List[Stage]] = None) {",
    "line": 22
  }],
  "prId": 8269
}]