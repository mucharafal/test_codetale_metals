[{
  "comments": [{
    "author": {
      "login": "Ngone51"
    },
    "body": "Do we really need this class? It seems `ExecutorMetrics` can already do the same work.",
    "commit": "571285beace1a0c1df92d9f5127828ed8955c93f",
    "createdAt": "2018-05-10T06:08:16Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import org.apache.spark.executor.ExecutorMetrics\n+import org.apache.spark.status.api.v1.PeakMemoryMetrics\n+\n+/**\n+ * Records the peak values for executor level metrics. If jvmUsedHeapMemory is -1, then no\n+ * values have been recorded yet.\n+ */\n+private[spark] class PeakExecutorMetrics {"
  }, {
    "author": {
      "login": "edwinalu"
    },
    "body": "I got some errors when trying to add methods to ExecutorMetrics. I don't remember the details, but can try this again.",
    "commit": "571285beace1a0c1df92d9f5127828ed8955c93f",
    "createdAt": "2018-05-11T02:28:43Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import org.apache.spark.executor.ExecutorMetrics\n+import org.apache.spark.status.api.v1.PeakMemoryMetrics\n+\n+/**\n+ * Records the peak values for executor level metrics. If jvmUsedHeapMemory is -1, then no\n+ * values have been recorded yet.\n+ */\n+private[spark] class PeakExecutorMetrics {"
  }, {
    "author": {
      "login": "squito"
    },
    "body": "can you revisit this given the other refactoring that has taken place?\r\n\r\nand if you do need this extra class, please include a comment here explaining the `metrics` array and referencing `MetricGetter`.",
    "commit": "571285beace1a0c1df92d9f5127828ed8955c93f",
    "createdAt": "2018-06-15T15:06:23Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import org.apache.spark.executor.ExecutorMetrics\n+import org.apache.spark.status.api.v1.PeakMemoryMetrics\n+\n+/**\n+ * Records the peak values for executor level metrics. If jvmUsedHeapMemory is -1, then no\n+ * values have been recorded yet.\n+ */\n+private[spark] class PeakExecutorMetrics {"
  }, {
    "author": {
      "login": "squito"
    },
    "body": "ping",
    "commit": "571285beace1a0c1df92d9f5127828ed8955c93f",
    "createdAt": "2018-06-27T19:20:45Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import org.apache.spark.executor.ExecutorMetrics\n+import org.apache.spark.status.api.v1.PeakMemoryMetrics\n+\n+/**\n+ * Records the peak values for executor level metrics. If jvmUsedHeapMemory is -1, then no\n+ * values have been recorded yet.\n+ */\n+private[spark] class PeakExecutorMetrics {"
  }, {
    "author": {
      "login": "edwinalu"
    },
    "body": "With ExecutorMetrics removed, it seems useful to have a class for tracking and setting peak metric values, that can be used by both EventLoggingListener and AppStatusListener.",
    "commit": "571285beace1a0c1df92d9f5127828ed8955c93f",
    "createdAt": "2018-06-28T12:06:41Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import org.apache.spark.executor.ExecutorMetrics\n+import org.apache.spark.status.api.v1.PeakMemoryMetrics\n+\n+/**\n+ * Records the peak values for executor level metrics. If jvmUsedHeapMemory is -1, then no\n+ * values have been recorded yet.\n+ */\n+private[spark] class PeakExecutorMetrics {"
  }],
  "prId": 21221
}, {
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "I know spark has this kind of code all over the place already, but I really hate how error prone it is -- way too easy for a copy paste error to result in comparing the wrong two metrics, or updating the wrong value, or forgetting to update this when another metric is added, etc.\r\n\r\nI just opened this https://github.com/edwinalu/spark/pull/1 as another way to do this that would eliminate a ton of boilerplate IMO.",
    "commit": "571285beace1a0c1df92d9f5127828ed8955c93f",
    "createdAt": "2018-05-23T21:30:35Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import org.apache.spark.executor.ExecutorMetrics\n+import org.apache.spark.status.api.v1.PeakMemoryMetrics\n+\n+/**\n+ * Records the peak values for executor level metrics. If jvmUsedHeapMemory is -1, then no\n+ * values have been recorded yet.\n+ */\n+private[spark] class PeakExecutorMetrics {\n+  private var _jvmUsedHeapMemory = -1L;\n+  private var _jvmUsedNonHeapMemory = 0L;\n+  private var _onHeapExecutionMemory = 0L\n+  private var _offHeapExecutionMemory = 0L\n+  private var _onHeapStorageMemory = 0L\n+  private var _offHeapStorageMemory = 0L\n+  private var _onHeapUnifiedMemory = 0L\n+  private var _offHeapUnifiedMemory = 0L\n+  private var _directMemory = 0L\n+  private var _mappedMemory = 0L\n+\n+  def jvmUsedHeapMemory: Long = _jvmUsedHeapMemory\n+\n+  def jvmUsedNonHeapMemory: Long = _jvmUsedNonHeapMemory\n+\n+  def onHeapExecutionMemory: Long = _onHeapExecutionMemory\n+\n+  def offHeapExecutionMemory: Long = _offHeapExecutionMemory\n+\n+  def onHeapStorageMemory: Long = _onHeapStorageMemory\n+\n+  def offHeapStorageMemory: Long = _offHeapStorageMemory\n+\n+  def onHeapUnifiedMemory: Long = _onHeapUnifiedMemory\n+\n+  def offHeapUnifiedMemory: Long = _offHeapUnifiedMemory\n+\n+  def directMemory: Long = _directMemory\n+\n+  def mappedMemory: Long = _mappedMemory\n+\n+  /**\n+   * Compare the specified memory values with the saved peak executor memory\n+   * values, and update if there is a new peak value.\n+   *\n+   * @param executorMetrics the executor metrics to compare\n+   * @return if there is a new peak value for any metric\n+   */\n+  def compareAndUpdate(executorMetrics: ExecutorMetrics): Boolean = {\n+    var updated: Boolean = false\n+\n+    if (executorMetrics.jvmUsedHeapMemory > _jvmUsedHeapMemory) {\n+      _jvmUsedHeapMemory = executorMetrics.jvmUsedHeapMemory\n+      updated = true\n+    }\n+    if (executorMetrics.jvmUsedNonHeapMemory > _jvmUsedNonHeapMemory) {\n+      _jvmUsedNonHeapMemory = executorMetrics.jvmUsedNonHeapMemory\n+      updated = true\n+    }\n+    if (executorMetrics.onHeapExecutionMemory > _onHeapExecutionMemory) {\n+      _onHeapExecutionMemory = executorMetrics.onHeapExecutionMemory\n+      updated = true\n+    }\n+    if (executorMetrics.offHeapExecutionMemory > _offHeapExecutionMemory) {\n+      _offHeapExecutionMemory = executorMetrics.offHeapExecutionMemory\n+      updated = true\n+    }\n+    if (executorMetrics.onHeapStorageMemory > _onHeapStorageMemory) {\n+      _onHeapStorageMemory = executorMetrics.onHeapStorageMemory\n+      updated = true\n+    }\n+    if (executorMetrics.offHeapStorageMemory > _offHeapStorageMemory) {\n+      _offHeapStorageMemory = executorMetrics.offHeapStorageMemory"
  }, {
    "author": {
      "login": "edwinalu"
    },
    "body": "Thanks! This is cleaner, and will make it easier to add new metrics. It is very easy to have a copy/paste error. I can merge and make the test changes -- let me know if that sounds good, or if you'd like to make some more changes first. ",
    "commit": "571285beace1a0c1df92d9f5127828ed8955c93f",
    "createdAt": "2018-05-25T21:24:35Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import org.apache.spark.executor.ExecutorMetrics\n+import org.apache.spark.status.api.v1.PeakMemoryMetrics\n+\n+/**\n+ * Records the peak values for executor level metrics. If jvmUsedHeapMemory is -1, then no\n+ * values have been recorded yet.\n+ */\n+private[spark] class PeakExecutorMetrics {\n+  private var _jvmUsedHeapMemory = -1L;\n+  private var _jvmUsedNonHeapMemory = 0L;\n+  private var _onHeapExecutionMemory = 0L\n+  private var _offHeapExecutionMemory = 0L\n+  private var _onHeapStorageMemory = 0L\n+  private var _offHeapStorageMemory = 0L\n+  private var _onHeapUnifiedMemory = 0L\n+  private var _offHeapUnifiedMemory = 0L\n+  private var _directMemory = 0L\n+  private var _mappedMemory = 0L\n+\n+  def jvmUsedHeapMemory: Long = _jvmUsedHeapMemory\n+\n+  def jvmUsedNonHeapMemory: Long = _jvmUsedNonHeapMemory\n+\n+  def onHeapExecutionMemory: Long = _onHeapExecutionMemory\n+\n+  def offHeapExecutionMemory: Long = _offHeapExecutionMemory\n+\n+  def onHeapStorageMemory: Long = _onHeapStorageMemory\n+\n+  def offHeapStorageMemory: Long = _offHeapStorageMemory\n+\n+  def onHeapUnifiedMemory: Long = _onHeapUnifiedMemory\n+\n+  def offHeapUnifiedMemory: Long = _offHeapUnifiedMemory\n+\n+  def directMemory: Long = _directMemory\n+\n+  def mappedMemory: Long = _mappedMemory\n+\n+  /**\n+   * Compare the specified memory values with the saved peak executor memory\n+   * values, and update if there is a new peak value.\n+   *\n+   * @param executorMetrics the executor metrics to compare\n+   * @return if there is a new peak value for any metric\n+   */\n+  def compareAndUpdate(executorMetrics: ExecutorMetrics): Boolean = {\n+    var updated: Boolean = false\n+\n+    if (executorMetrics.jvmUsedHeapMemory > _jvmUsedHeapMemory) {\n+      _jvmUsedHeapMemory = executorMetrics.jvmUsedHeapMemory\n+      updated = true\n+    }\n+    if (executorMetrics.jvmUsedNonHeapMemory > _jvmUsedNonHeapMemory) {\n+      _jvmUsedNonHeapMemory = executorMetrics.jvmUsedNonHeapMemory\n+      updated = true\n+    }\n+    if (executorMetrics.onHeapExecutionMemory > _onHeapExecutionMemory) {\n+      _onHeapExecutionMemory = executorMetrics.onHeapExecutionMemory\n+      updated = true\n+    }\n+    if (executorMetrics.offHeapExecutionMemory > _offHeapExecutionMemory) {\n+      _offHeapExecutionMemory = executorMetrics.offHeapExecutionMemory\n+      updated = true\n+    }\n+    if (executorMetrics.onHeapStorageMemory > _onHeapStorageMemory) {\n+      _onHeapStorageMemory = executorMetrics.onHeapStorageMemory\n+      updated = true\n+    }\n+    if (executorMetrics.offHeapStorageMemory > _offHeapStorageMemory) {\n+      _offHeapStorageMemory = executorMetrics.offHeapStorageMemory"
  }, {
    "author": {
      "login": "squito"
    },
    "body": "The more you can take it over from here, the better :) But let me know if there is anything which is confusing, or if the TODOs that I've left actually don't seem possible etc. and I can take a closer look.",
    "commit": "571285beace1a0c1df92d9f5127828ed8955c93f",
    "createdAt": "2018-05-29T16:27:03Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import org.apache.spark.executor.ExecutorMetrics\n+import org.apache.spark.status.api.v1.PeakMemoryMetrics\n+\n+/**\n+ * Records the peak values for executor level metrics. If jvmUsedHeapMemory is -1, then no\n+ * values have been recorded yet.\n+ */\n+private[spark] class PeakExecutorMetrics {\n+  private var _jvmUsedHeapMemory = -1L;\n+  private var _jvmUsedNonHeapMemory = 0L;\n+  private var _onHeapExecutionMemory = 0L\n+  private var _offHeapExecutionMemory = 0L\n+  private var _onHeapStorageMemory = 0L\n+  private var _offHeapStorageMemory = 0L\n+  private var _onHeapUnifiedMemory = 0L\n+  private var _offHeapUnifiedMemory = 0L\n+  private var _directMemory = 0L\n+  private var _mappedMemory = 0L\n+\n+  def jvmUsedHeapMemory: Long = _jvmUsedHeapMemory\n+\n+  def jvmUsedNonHeapMemory: Long = _jvmUsedNonHeapMemory\n+\n+  def onHeapExecutionMemory: Long = _onHeapExecutionMemory\n+\n+  def offHeapExecutionMemory: Long = _offHeapExecutionMemory\n+\n+  def onHeapStorageMemory: Long = _onHeapStorageMemory\n+\n+  def offHeapStorageMemory: Long = _offHeapStorageMemory\n+\n+  def onHeapUnifiedMemory: Long = _onHeapUnifiedMemory\n+\n+  def offHeapUnifiedMemory: Long = _offHeapUnifiedMemory\n+\n+  def directMemory: Long = _directMemory\n+\n+  def mappedMemory: Long = _mappedMemory\n+\n+  /**\n+   * Compare the specified memory values with the saved peak executor memory\n+   * values, and update if there is a new peak value.\n+   *\n+   * @param executorMetrics the executor metrics to compare\n+   * @return if there is a new peak value for any metric\n+   */\n+  def compareAndUpdate(executorMetrics: ExecutorMetrics): Boolean = {\n+    var updated: Boolean = false\n+\n+    if (executorMetrics.jvmUsedHeapMemory > _jvmUsedHeapMemory) {\n+      _jvmUsedHeapMemory = executorMetrics.jvmUsedHeapMemory\n+      updated = true\n+    }\n+    if (executorMetrics.jvmUsedNonHeapMemory > _jvmUsedNonHeapMemory) {\n+      _jvmUsedNonHeapMemory = executorMetrics.jvmUsedNonHeapMemory\n+      updated = true\n+    }\n+    if (executorMetrics.onHeapExecutionMemory > _onHeapExecutionMemory) {\n+      _onHeapExecutionMemory = executorMetrics.onHeapExecutionMemory\n+      updated = true\n+    }\n+    if (executorMetrics.offHeapExecutionMemory > _offHeapExecutionMemory) {\n+      _offHeapExecutionMemory = executorMetrics.offHeapExecutionMemory\n+      updated = true\n+    }\n+    if (executorMetrics.onHeapStorageMemory > _onHeapStorageMemory) {\n+      _onHeapStorageMemory = executorMetrics.onHeapStorageMemory\n+      updated = true\n+    }\n+    if (executorMetrics.offHeapStorageMemory > _offHeapStorageMemory) {\n+      _offHeapStorageMemory = executorMetrics.offHeapStorageMemory"
  }, {
    "author": {
      "login": "edwinalu"
    },
    "body": "Will do. Thanks!",
    "commit": "571285beace1a0c1df92d9f5127828ed8955c93f",
    "createdAt": "2018-05-29T16:44:39Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import org.apache.spark.executor.ExecutorMetrics\n+import org.apache.spark.status.api.v1.PeakMemoryMetrics\n+\n+/**\n+ * Records the peak values for executor level metrics. If jvmUsedHeapMemory is -1, then no\n+ * values have been recorded yet.\n+ */\n+private[spark] class PeakExecutorMetrics {\n+  private var _jvmUsedHeapMemory = -1L;\n+  private var _jvmUsedNonHeapMemory = 0L;\n+  private var _onHeapExecutionMemory = 0L\n+  private var _offHeapExecutionMemory = 0L\n+  private var _onHeapStorageMemory = 0L\n+  private var _offHeapStorageMemory = 0L\n+  private var _onHeapUnifiedMemory = 0L\n+  private var _offHeapUnifiedMemory = 0L\n+  private var _directMemory = 0L\n+  private var _mappedMemory = 0L\n+\n+  def jvmUsedHeapMemory: Long = _jvmUsedHeapMemory\n+\n+  def jvmUsedNonHeapMemory: Long = _jvmUsedNonHeapMemory\n+\n+  def onHeapExecutionMemory: Long = _onHeapExecutionMemory\n+\n+  def offHeapExecutionMemory: Long = _offHeapExecutionMemory\n+\n+  def onHeapStorageMemory: Long = _onHeapStorageMemory\n+\n+  def offHeapStorageMemory: Long = _offHeapStorageMemory\n+\n+  def onHeapUnifiedMemory: Long = _onHeapUnifiedMemory\n+\n+  def offHeapUnifiedMemory: Long = _offHeapUnifiedMemory\n+\n+  def directMemory: Long = _directMemory\n+\n+  def mappedMemory: Long = _mappedMemory\n+\n+  /**\n+   * Compare the specified memory values with the saved peak executor memory\n+   * values, and update if there is a new peak value.\n+   *\n+   * @param executorMetrics the executor metrics to compare\n+   * @return if there is a new peak value for any metric\n+   */\n+  def compareAndUpdate(executorMetrics: ExecutorMetrics): Boolean = {\n+    var updated: Boolean = false\n+\n+    if (executorMetrics.jvmUsedHeapMemory > _jvmUsedHeapMemory) {\n+      _jvmUsedHeapMemory = executorMetrics.jvmUsedHeapMemory\n+      updated = true\n+    }\n+    if (executorMetrics.jvmUsedNonHeapMemory > _jvmUsedNonHeapMemory) {\n+      _jvmUsedNonHeapMemory = executorMetrics.jvmUsedNonHeapMemory\n+      updated = true\n+    }\n+    if (executorMetrics.onHeapExecutionMemory > _onHeapExecutionMemory) {\n+      _onHeapExecutionMemory = executorMetrics.onHeapExecutionMemory\n+      updated = true\n+    }\n+    if (executorMetrics.offHeapExecutionMemory > _offHeapExecutionMemory) {\n+      _offHeapExecutionMemory = executorMetrics.offHeapExecutionMemory\n+      updated = true\n+    }\n+    if (executorMetrics.onHeapStorageMemory > _onHeapStorageMemory) {\n+      _onHeapStorageMemory = executorMetrics.onHeapStorageMemory\n+      updated = true\n+    }\n+    if (executorMetrics.offHeapStorageMemory > _offHeapStorageMemory) {\n+      _offHeapStorageMemory = executorMetrics.offHeapStorageMemory"
  }],
  "prId": 21221
}]