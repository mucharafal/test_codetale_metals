[{
  "comments": [{
    "author": {
      "login": "jaceklaskowski"
    },
    "body": "Mind introducing a constant for `spark.mesos.driver.webui.url`?\n",
    "commit": "263aaa42cf677184398ffa688cee2d2348682035",
    "createdAt": "2016-08-01T18:57:11Z",
    "diffHunk": "@@ -152,8 +152,13 @@ private[spark] class MesosCoarseGrainedSchedulerBackend(\n       sc.sparkUser,\n       sc.appName,\n       sc.conf,\n-      sc.conf.getOption(\"spark.mesos.driver.webui.url\").orElse(sc.ui.map(_.appUIAddress))\n+      sc.conf.getOption(\"spark.mesos.driver.webui.url\").orElse(sc.ui.map(_.appUIAddress)),",
    "line": 5
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "I agree, but I also want to make this change consistently, so let's make this part of https://issues.apache.org/jira/browse/SPARK-16881\n",
    "commit": "263aaa42cf677184398ffa688cee2d2348682035",
    "createdAt": "2016-08-03T18:00:28Z",
    "diffHunk": "@@ -152,8 +152,13 @@ private[spark] class MesosCoarseGrainedSchedulerBackend(\n       sc.sparkUser,\n       sc.appName,\n       sc.conf,\n-      sc.conf.getOption(\"spark.mesos.driver.webui.url\").orElse(sc.ui.map(_.appUIAddress))\n+      sc.conf.getOption(\"spark.mesos.driver.webui.url\").orElse(sc.ui.map(_.appUIAddress)),",
    "line": 5
  }],
  "prId": 14414
}, {
  "comments": [{
    "author": {
      "login": "jaceklaskowski"
    },
    "body": "`None`?\n",
    "commit": "263aaa42cf677184398ffa688cee2d2348682035",
    "createdAt": "2016-08-01T18:57:26Z",
    "diffHunk": "@@ -152,8 +152,13 @@ private[spark] class MesosCoarseGrainedSchedulerBackend(\n       sc.sparkUser,\n       sc.appName,\n       sc.conf,\n-      sc.conf.getOption(\"spark.mesos.driver.webui.url\").orElse(sc.ui.map(_.appUIAddress))\n+      sc.conf.getOption(\"spark.mesos.driver.webui.url\").orElse(sc.ui.map(_.appUIAddress)),\n+      Option.empty,"
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "fixed\n",
    "commit": "263aaa42cf677184398ffa688cee2d2348682035",
    "createdAt": "2016-08-03T18:01:19Z",
    "diffHunk": "@@ -152,8 +152,13 @@ private[spark] class MesosCoarseGrainedSchedulerBackend(\n       sc.sparkUser,\n       sc.appName,\n       sc.conf,\n-      sc.conf.getOption(\"spark.mesos.driver.webui.url\").orElse(sc.ui.map(_.appUIAddress))\n+      sc.conf.getOption(\"spark.mesos.driver.webui.url\").orElse(sc.ui.map(_.appUIAddress)),\n+      Option.empty,"
  }],
  "prId": 14414
}, {
  "comments": [{
    "author": {
      "login": "jaceklaskowski"
    },
    "body": "Mind introducing a constant for `spark.mesos.driver.frameworkId`?\n",
    "commit": "263aaa42cf677184398ffa688cee2d2348682035",
    "createdAt": "2016-08-01T18:57:45Z",
    "diffHunk": "@@ -152,8 +152,13 @@ private[spark] class MesosCoarseGrainedSchedulerBackend(\n       sc.sparkUser,\n       sc.appName,\n       sc.conf,\n-      sc.conf.getOption(\"spark.mesos.driver.webui.url\").orElse(sc.ui.map(_.appUIAddress))\n+      sc.conf.getOption(\"spark.mesos.driver.webui.url\").orElse(sc.ui.map(_.appUIAddress)),\n+      Option.empty,\n+      Option.empty,\n+      sc.conf.getOption(\"spark.mesos.driver.frameworkId\")"
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "see above\n",
    "commit": "263aaa42cf677184398ffa688cee2d2348682035",
    "createdAt": "2016-08-03T18:01:30Z",
    "diffHunk": "@@ -152,8 +152,13 @@ private[spark] class MesosCoarseGrainedSchedulerBackend(\n       sc.sparkUser,\n       sc.appName,\n       sc.conf,\n-      sc.conf.getOption(\"spark.mesos.driver.webui.url\").orElse(sc.ui.map(_.appUIAddress))\n+      sc.conf.getOption(\"spark.mesos.driver.webui.url\").orElse(sc.ui.map(_.appUIAddress)),\n+      Option.empty,\n+      Option.empty,\n+      sc.conf.getOption(\"spark.mesos.driver.frameworkId\")"
  }],
  "prId": 14414
}, {
  "comments": [{
    "author": {
      "login": "skonto"
    },
    "body": "If the driver creates two spark contexts shouldnt it use two different spark confs with that property set up differently?\nIf no id is specified what will happen? I guess the dispatcher will not know anything. What if you could use a unique id as aframeworkId plus an increment, so the scheduler can detect all frameworks even the ones coming from multiple contexts? \n",
    "commit": "263aaa42cf677184398ffa688cee2d2348682035",
    "createdAt": "2016-08-08T13:28:34Z",
    "diffHunk": "@@ -152,8 +152,13 @@ private[spark] class MesosCoarseGrainedSchedulerBackend(\n       sc.sparkUser,\n       sc.appName,\n       sc.conf,\n-      sc.conf.getOption(\"spark.mesos.driver.webui.url\").orElse(sc.ui.map(_.appUIAddress))\n+      sc.conf.getOption(\"spark.mesos.driver.webui.url\").orElse(sc.ui.map(_.appUIAddress)),\n+      None,\n+      None,\n+      sc.conf.getOption(\"spark.mesos.driver.frameworkId\")\n     )\n+\n+    unsetFrameworkID(sc)",
    "line": 11
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "> If no id is specified what will happen?\n\nMesos generates a unique framework ID when none is specified.  This PR only sets the framework ID on the first spark context created by the driver.\n\n> What if you could use a unique id as aframeworkId plus an increment, so the scheduler can detect all frameworks even the ones coming from multiple contexts? \n\nWe can't guarantee no collisions with that approach.  It would also be difficult for the dispatcher to determine how many frameworks have been started. \n",
    "commit": "263aaa42cf677184398ffa688cee2d2348682035",
    "createdAt": "2016-08-08T20:38:03Z",
    "diffHunk": "@@ -152,8 +152,13 @@ private[spark] class MesosCoarseGrainedSchedulerBackend(\n       sc.sparkUser,\n       sc.appName,\n       sc.conf,\n-      sc.conf.getOption(\"spark.mesos.driver.webui.url\").orElse(sc.ui.map(_.appUIAddress))\n+      sc.conf.getOption(\"spark.mesos.driver.webui.url\").orElse(sc.ui.map(_.appUIAddress)),\n+      None,\n+      None,\n+      sc.conf.getOption(\"spark.mesos.driver.frameworkId\")\n     )\n+\n+    unsetFrameworkID(sc)",
    "line": 11
  }],
  "prId": 14414
}]