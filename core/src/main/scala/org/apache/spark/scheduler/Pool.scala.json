[{
  "comments": [{
    "author": {
      "login": "aarondav"
    },
    "body": "I think \".iterator\" might work here and below, which would be a bit nicer since the documentation specifically provides guarantees about it.\n",
    "commit": "383e73987205f193a2a11a610f462c7cfeacb960",
    "createdAt": "2014-05-14T05:05:57Z",
    "diffHunk": "@@ -60,21 +59,21 @@ private[spark] class Pool(\n   }\n \n   override def addSchedulable(schedulable: Schedulable) {\n-    schedulableQueue += schedulable\n-    schedulableNameToSchedulable(schedulable.name) = schedulable\n+    schedulableQueue.offer(schedulable)\n+    schedulableNameToSchedulable.put(schedulable.name, schedulable)\n     schedulable.parent = this\n   }\n \n   override def removeSchedulable(schedulable: Schedulable) {\n-    schedulableQueue -= schedulable\n-    schedulableNameToSchedulable -= schedulable.name\n+    schedulableQueue.remove(schedulable)\n+    schedulableNameToSchedulable.remove(schedulable.name)\n   }\n \n   override def getSchedulableByName(schedulableName: String): Schedulable = {\n-    if (schedulableNameToSchedulable.contains(schedulableName)) {\n-      return schedulableNameToSchedulable(schedulableName)\n+    if (schedulableNameToSchedulable.containsKey(schedulableName)) {\n+      return schedulableNameToSchedulable.get(schedulableName)\n     }\n-    for (schedulable <- schedulableQueue) {\n+    for (schedulable <- schedulableQueue.asScala) {"
  }, {
    "author": {
      "login": "aarondav"
    },
    "body": "ah, actually I think you actually just imported JavaConverters instead of JavaConversions. Probably don't need this stuff if you do that.\n",
    "commit": "383e73987205f193a2a11a610f462c7cfeacb960",
    "createdAt": "2014-05-14T05:09:30Z",
    "diffHunk": "@@ -60,21 +59,21 @@ private[spark] class Pool(\n   }\n \n   override def addSchedulable(schedulable: Schedulable) {\n-    schedulableQueue += schedulable\n-    schedulableNameToSchedulable(schedulable.name) = schedulable\n+    schedulableQueue.offer(schedulable)\n+    schedulableNameToSchedulable.put(schedulable.name, schedulable)\n     schedulable.parent = this\n   }\n \n   override def removeSchedulable(schedulable: Schedulable) {\n-    schedulableQueue -= schedulable\n-    schedulableNameToSchedulable -= schedulable.name\n+    schedulableQueue.remove(schedulable)\n+    schedulableNameToSchedulable.remove(schedulable.name)\n   }\n \n   override def getSchedulableByName(schedulableName: String): Schedulable = {\n-    if (schedulableNameToSchedulable.contains(schedulableName)) {\n-      return schedulableNameToSchedulable(schedulableName)\n+    if (schedulableNameToSchedulable.containsKey(schedulableName)) {\n+      return schedulableNameToSchedulable.get(schedulableName)\n     }\n-    for (schedulable <- schedulableQueue) {\n+    for (schedulable <- schedulableQueue.asScala) {"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "that would be good\n",
    "commit": "383e73987205f193a2a11a610f462c7cfeacb960",
    "createdAt": "2014-05-14T05:53:54Z",
    "diffHunk": "@@ -60,21 +59,21 @@ private[spark] class Pool(\n   }\n \n   override def addSchedulable(schedulable: Schedulable) {\n-    schedulableQueue += schedulable\n-    schedulableNameToSchedulable(schedulable.name) = schedulable\n+    schedulableQueue.offer(schedulable)\n+    schedulableNameToSchedulable.put(schedulable.name, schedulable)\n     schedulable.parent = this\n   }\n \n   override def removeSchedulable(schedulable: Schedulable) {\n-    schedulableQueue -= schedulable\n-    schedulableNameToSchedulable -= schedulable.name\n+    schedulableQueue.remove(schedulable)\n+    schedulableNameToSchedulable.remove(schedulable.name)\n   }\n \n   override def getSchedulableByName(schedulableName: String): Schedulable = {\n-    if (schedulableNameToSchedulable.contains(schedulableName)) {\n-      return schedulableNameToSchedulable(schedulableName)\n+    if (schedulableNameToSchedulable.containsKey(schedulableName)) {\n+      return schedulableNameToSchedulable.get(schedulableName)\n     }\n-    for (schedulable <- schedulableQueue) {\n+    for (schedulable <- schedulableQueue.asScala) {"
  }],
  "prId": 762
}, {
  "comments": [{
    "author": {
      "login": "aarondav"
    },
    "body": "oh, man, good catch\n",
    "commit": "383e73987205f193a2a11a610f462c7cfeacb960",
    "createdAt": "2014-05-14T05:06:32Z",
    "diffHunk": "@@ -60,21 +59,21 @@ private[spark] class Pool(\n   }\n \n   override def addSchedulable(schedulable: Schedulable) {\n-    schedulableQueue += schedulable\n-    schedulableNameToSchedulable(schedulable.name) = schedulable\n+    schedulableQueue.offer(schedulable)\n+    schedulableNameToSchedulable.put(schedulable.name, schedulable)\n     schedulable.parent = this\n   }\n \n   override def removeSchedulable(schedulable: Schedulable) {\n-    schedulableQueue -= schedulable\n-    schedulableNameToSchedulable -= schedulable.name\n+    schedulableQueue.remove(schedulable)\n+    schedulableNameToSchedulable.remove(schedulable.name)\n   }\n \n   override def getSchedulableByName(schedulableName: String): Schedulable = {\n-    if (schedulableNameToSchedulable.contains(schedulableName)) {\n-      return schedulableNameToSchedulable(schedulableName)\n+    if (schedulableNameToSchedulable.containsKey(schedulableName)) {",
    "line": 55
  }],
  "prId": 762
}, {
  "comments": [{
    "author": {
      "login": "aarondav"
    },
    "body": "nit: ConurrentLinkedQueue is a more suitable data structure for this type of access -- it provides a very efficient linked list, and it uses \"add()\" instead of \"offer()\". Also no blocking stuff.\n",
    "commit": "383e73987205f193a2a11a610f462c7cfeacb960",
    "createdAt": "2014-05-14T05:10:52Z",
    "diffHunk": "@@ -35,18 +37,15 @@ private[spark] class Pool(\n   extends Schedulable\n   with Logging {\n \n-  var schedulableQueue = new ArrayBuffer[Schedulable]\n-  var schedulableNameToSchedulable = new HashMap[String, Schedulable]\n-\n+  val schedulableQueue = new LinkedBlockingQueue[Schedulable]"
  }],
  "prId": 762
}, {
  "comments": [{
    "author": {
      "login": "aarondav"
    },
    "body": "nit: Could we add a require(schedule != null) here? It would cause a NPE anyway, I think this would just make it clearer. It also makes our use of `Option(schedulableNameToSchedulable.get(...))` more clearly correct.\n",
    "commit": "383e73987205f193a2a11a610f462c7cfeacb960",
    "createdAt": "2014-05-14T05:14:44Z",
    "diffHunk": "@@ -60,21 +59,21 @@ private[spark] class Pool(\n   }\n \n   override def addSchedulable(schedulable: Schedulable) {\n-    schedulableQueue += schedulable\n-    schedulableNameToSchedulable(schedulable.name) = schedulable\n+    schedulableQueue.offer(schedulable)"
  }],
  "prId": 762
}]