[{
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "based on the changes to get rid of count from the ResourceInformation I don't think it makes senese to allow empty addresses anymore. We also have checks in place to make sure  that doesn't happen, so I think we should remove the = Seq.empty.",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-29T13:17:47Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+/**\n+ * Class to hold information about a type of Resource on an Executor. This information is managed\n+ * by SchedulerBackend, and TaskScheduler shall schedule tasks on idle Executors based on the\n+ * information.\n+ */\n+private[spark] class ExecutorResourceInfo(\n+    private val name: String,\n+    private val addresses: Seq[String] = Seq.empty) extends Serializable {"
  }, {
    "author": {
      "login": "jiangxb1987"
    },
    "body": "updated",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-30T00:17:55Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+/**\n+ * Class to hold information about a type of Resource on an Executor. This information is managed\n+ * by SchedulerBackend, and TaskScheduler shall schedule tasks on idle Executors based on the\n+ * information.\n+ */\n+private[spark] class ExecutorResourceInfo(\n+    private val name: String,\n+    private val addresses: Seq[String] = Seq.empty) extends Serializable {"
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "Tried to acquire",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-31T15:43:12Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+/**\n+ * Class to hold information about a type of Resource on an Executor. This information is managed\n+ * by SchedulerBackend, and TaskScheduler shall schedule tasks on idle Executors based on the\n+ * information.\n+ */\n+private[spark] class ExecutorResourceInfo(\n+    private val name: String,\n+    private[scheduler] val addresses: ArrayBuffer[String]) extends Serializable {\n+\n+  // Addresses of resource that has not been acquired.\n+  // Exposed for testing only.\n+  private[scheduler] var idleAddresses: ArrayBuffer[String] = addresses.clone()\n+\n+  // Addresses of resource that has been assigned to running tasks.\n+  // Exposed for testing only.\n+  private[scheduler] val allocatedAddresses: ArrayBuffer[String] = ArrayBuffer.empty\n+\n+  def getName(): String = name\n+\n+  // Number of resource addresses that can be acquired.\n+  def getNumOfIdleResources(): Int = idleAddresses.size\n+\n+  // Reserve given number of resource addresses, these addresses can be assigned to a future\n+  // launched task.\n+  def acquireAddresses(num: Int): Seq[String] = {\n+    assert(num <= idleAddresses.size, \"Required to take more addresses than available. \" +"
  }, {
    "author": {
      "login": "jiangxb1987"
    },
    "body": "updated",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-06-01T00:37:15Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+/**\n+ * Class to hold information about a type of Resource on an Executor. This information is managed\n+ * by SchedulerBackend, and TaskScheduler shall schedule tasks on idle Executors based on the\n+ * information.\n+ */\n+private[spark] class ExecutorResourceInfo(\n+    private val name: String,\n+    private[scheduler] val addresses: ArrayBuffer[String]) extends Serializable {\n+\n+  // Addresses of resource that has not been acquired.\n+  // Exposed for testing only.\n+  private[scheduler] var idleAddresses: ArrayBuffer[String] = addresses.clone()\n+\n+  // Addresses of resource that has been assigned to running tasks.\n+  // Exposed for testing only.\n+  private[scheduler] val allocatedAddresses: ArrayBuffer[String] = ArrayBuffer.empty\n+\n+  def getName(): String = name\n+\n+  // Number of resource addresses that can be acquired.\n+  def getNumOfIdleResources(): Int = idleAddresses.size\n+\n+  // Reserve given number of resource addresses, these addresses can be assigned to a future\n+  // launched task.\n+  def acquireAddresses(num: Int): Seq[String] = {\n+    assert(num <= idleAddresses.size, \"Required to take more addresses than available. \" +"
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Could you add ScalaDoc and document the params? It is not very clear what `addresses` holds by its name.",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-31T16:10:17Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+/**\n+ * Class to hold information about a type of Resource on an Executor. This information is managed\n+ * by SchedulerBackend, and TaskScheduler shall schedule tasks on idle Executors based on the\n+ * information.\n+ */\n+private[spark] class ExecutorResourceInfo(\n+    private val name: String,\n+    private[scheduler] val addresses: ArrayBuffer[String]) extends Serializable {"
  }, {
    "author": {
      "login": "jiangxb1987"
    },
    "body": "updated",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-06-01T00:33:05Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+/**\n+ * Class to hold information about a type of Resource on an Executor. This information is managed\n+ * by SchedulerBackend, and TaskScheduler shall schedule tasks on idle Executors based on the\n+ * information.\n+ */\n+private[spark] class ExecutorResourceInfo(\n+    private val name: String,\n+    private[scheduler] val addresses: ArrayBuffer[String]) extends Serializable {"
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Why not making `name` a public val?",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-31T16:12:04Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+/**\n+ * Class to hold information about a type of Resource on an Executor. This information is managed\n+ * by SchedulerBackend, and TaskScheduler shall schedule tasks on idle Executors based on the\n+ * information.\n+ */\n+private[spark] class ExecutorResourceInfo(\n+    private val name: String,\n+    private[scheduler] val addresses: ArrayBuffer[String]) extends Serializable {\n+\n+  // Addresses of resource that has not been acquired.\n+  // Exposed for testing only.\n+  private[scheduler] var idleAddresses: ArrayBuffer[String] = addresses.clone()\n+\n+  // Addresses of resource that has been assigned to running tasks.\n+  // Exposed for testing only.\n+  private[scheduler] val allocatedAddresses: ArrayBuffer[String] = ArrayBuffer.empty\n+\n+  def getName(): String = name"
  }, {
    "author": {
      "login": "jiangxb1987"
    },
    "body": "updated",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-06-01T00:33:11Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.scheduler\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+/**\n+ * Class to hold information about a type of Resource on an Executor. This information is managed\n+ * by SchedulerBackend, and TaskScheduler shall schedule tasks on idle Executors based on the\n+ * information.\n+ */\n+private[spark] class ExecutorResourceInfo(\n+    private val name: String,\n+    private[scheduler] val addresses: ArrayBuffer[String]) extends Serializable {\n+\n+  // Addresses of resource that has not been acquired.\n+  // Exposed for testing only.\n+  private[scheduler] var idleAddresses: ArrayBuffer[String] = addresses.clone()\n+\n+  // Addresses of resource that has been assigned to running tasks.\n+  // Exposed for testing only.\n+  private[scheduler] val allocatedAddresses: ArrayBuffer[String] = ArrayBuffer.empty\n+\n+  def getName(): String = name"
  }],
  "prId": 24374
}]