[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Is it always ordered by partitionId? If true, we should mention it in the doc.",
    "commit": "c7600c24221d29fde31dca921d9d5863af2666e9",
    "createdAt": "2018-07-16T23:04:28Z",
    "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+/** A [[TaskContext]] with extra info and tooling for a barrier stage. */\n+trait BarrierTaskContext extends TaskContext {\n+\n+  /** Sets a global barrier and waits until all tasks in this stage hit this barrier. */\n+  def barrier(): Unit\n+\n+  /** Returns the all task infos in this barrier stage. */"
  }],
  "prId": 21758
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "It would be nice to provide more documentation because it is easy to make mistakes here. We could address it in the context.barrier() PR.",
    "commit": "c7600c24221d29fde31dca921d9d5863af2666e9",
    "createdAt": "2018-07-16T23:36:32Z",
    "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+/** A [[TaskContext]] with extra info and tooling for a barrier stage. */\n+trait BarrierTaskContext extends TaskContext {\n+\n+  /** Sets a global barrier and waits until all tasks in this stage hit this barrier. */"
  }],
  "prId": 21758
}, {
  "comments": [{
    "author": {
      "login": "mgaido91"
    },
    "body": "is there a particular reason why they must be ordered by partitionId?",
    "commit": "c7600c24221d29fde31dca921d9d5863af2666e9",
    "createdAt": "2018-07-23T07:48:57Z",
    "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+\n+/** A [[TaskContext]] with extra info and tooling for a barrier stage. */\n+trait BarrierTaskContext extends TaskContext {\n+\n+  /**\n+   * :: Experimental ::\n+   * Sets a global barrier and waits until all tasks in this stage hit this barrier. Similar to\n+   * MPI_Barrier function in MPI, the barrier() function call blocks until all tasks in the same\n+   * stage have reached this routine.\n+   */\n+  @Experimental\n+  @Since(\"2.4.0\")\n+  def barrier(): Unit\n+\n+  /**\n+   * :: Experimental ::\n+   * Returns the all task infos in this barrier stage, the task infos are ordered by partitionId.",
    "line": 37
  }, {
    "author": {
      "login": "jiangxb1987"
    },
    "body": "The major reason is that each tasks within the same barrier stage may need to communicate with each other, we order the task infos by partitionId so a task can find its peer tasks by index.",
    "commit": "c7600c24221d29fde31dca921d9d5863af2666e9",
    "createdAt": "2018-07-23T12:58:41Z",
    "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+\n+/** A [[TaskContext]] with extra info and tooling for a barrier stage. */\n+trait BarrierTaskContext extends TaskContext {\n+\n+  /**\n+   * :: Experimental ::\n+   * Sets a global barrier and waits until all tasks in this stage hit this barrier. Similar to\n+   * MPI_Barrier function in MPI, the barrier() function call blocks until all tasks in the same\n+   * stage have reached this routine.\n+   */\n+  @Experimental\n+  @Since(\"2.4.0\")\n+  def barrier(): Unit\n+\n+  /**\n+   * :: Experimental ::\n+   * Returns the all task infos in this barrier stage, the task infos are ordered by partitionId.",
    "line": 37
  }],
  "prId": 21758
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "what other things do you expect to be included in the future in BarrierTaskInfo? It seems overkill to have a new class for a single field (address).\r\n",
    "commit": "c7600c24221d29fde31dca921d9d5863af2666e9",
    "createdAt": "2018-07-25T20:22:01Z",
    "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+\n+/** A [[TaskContext]] with extra info and tooling for a barrier stage. */\n+trait BarrierTaskContext extends TaskContext {\n+\n+  /**\n+   * :: Experimental ::\n+   * Sets a global barrier and waits until all tasks in this stage hit this barrier. Similar to\n+   * MPI_Barrier function in MPI, the barrier() function call blocks until all tasks in the same\n+   * stage have reached this routine.\n+   */\n+  @Experimental\n+  @Since(\"2.4.0\")\n+  def barrier(): Unit\n+\n+  /**\n+   * :: Experimental ::\n+   * Returns the all task infos in this barrier stage, the task infos are ordered by partitionId.\n+   */\n+  @Experimental\n+  @Since(\"2.4.0\")\n+  def getTaskInfos(): Array[BarrierTaskInfo]",
    "line": 41
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "+1",
    "commit": "c7600c24221d29fde31dca921d9d5863af2666e9",
    "createdAt": "2018-07-26T13:16:30Z",
    "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+\n+/** A [[TaskContext]] with extra info and tooling for a barrier stage. */\n+trait BarrierTaskContext extends TaskContext {\n+\n+  /**\n+   * :: Experimental ::\n+   * Sets a global barrier and waits until all tasks in this stage hit this barrier. Similar to\n+   * MPI_Barrier function in MPI, the barrier() function call blocks until all tasks in the same\n+   * stage have reached this routine.\n+   */\n+  @Experimental\n+  @Since(\"2.4.0\")\n+  def barrier(): Unit\n+\n+  /**\n+   * :: Experimental ::\n+   * Returns the all task infos in this barrier stage, the task infos are ordered by partitionId.\n+   */\n+  @Experimental\n+  @Since(\"2.4.0\")\n+  def getTaskInfos(): Array[BarrierTaskInfo]",
    "line": 41
  }],
  "prId": 21758
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Please check the generated JavaDoc. I think it becomes a Java interface with only two methods defined here. We might want to define `class BarrierTaskContext` directly.",
    "commit": "c7600c24221d29fde31dca921d9d5863af2666e9",
    "createdAt": "2018-08-01T03:36:53Z",
    "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import org.apache.spark.annotation.{Experimental, Since}\n+\n+/** A [[TaskContext]] with extra info and tooling for a barrier stage. */\n+trait BarrierTaskContext extends TaskContext {",
    "line": 23
  }],
  "prId": 21758
}]