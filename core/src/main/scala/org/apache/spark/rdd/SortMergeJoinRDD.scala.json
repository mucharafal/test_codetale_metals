[{
  "comments": [{
    "author": {
      "login": "redbaron"
    },
    "body": "Not saying that it is wrong, just curious, is it any different from ziping iterators?\n",
    "commit": "e7369551596a99ec931cb83266a3907759fc8074",
    "createdAt": "2015-03-24T15:22:51Z",
    "diffHunk": "@@ -0,0 +1,281 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.rdd\n+\n+import scala.reflect.ClassTag\n+\n+import org.apache.spark._\n+import org.apache.spark.serializer.Serializer\n+import org.apache.spark.shuffle.ShuffleHandle\n+import org.apache.spark.util.collection.CompactBuffer\n+\n+private[spark] case class ShuffleJoinSplitDep(handle: ShuffleHandle) extends Serializable\n+\n+private[spark] class JoinPartition(\n+    idx: Int,\n+    val left: ShuffleJoinSplitDep,\n+    val right: ShuffleJoinSplitDep)\n+  extends Partition with Serializable {\n+  override val index: Int = idx\n+  override def hashCode(): Int = idx\n+}\n+\n+private[spark] abstract class JoinType[K: ClassTag,\n+                                          L: ClassTag,\n+                                          R: ClassTag,\n+                                          PAIR <: Product2[_, _]]\n+    extends Serializable {\n+\n+  private[spark] var joinType: Int = 0\n+\n+  def flatten(iterators: Iterator[(K, (Iterator[L], Iterator[R]))]): Iterator[(K, PAIR)]\n+\n+  def mergeIterators(leftIter: Iterator[L], rightIter: Iterator[R]): Iterator[(L, R)] = {",
    "line": 48
  }],
  "prId": 5168
}]