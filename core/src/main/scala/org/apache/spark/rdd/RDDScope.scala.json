[{
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "Sometimes this is using the terminology \"RDD Scope\" and at other time just \"Scope\" - I wonder if we should just have this be a generic scoping concept. It doesn't seem really tied to RDD's. For example maybe the SparkContext thing should be `withScope`.\n",
    "commit": "666c03b1176b44368de8dcf1810b19e64717d2cc",
    "createdAt": "2015-05-03T03:44:22Z",
    "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.rdd\n+\n+import java.util.concurrent.atomic.AtomicInteger\n+import org.apache.spark.SparkContext\n+\n+/**\n+ * A collection of utility methods to construct a hierarchical representation of RDD scopes.\n+ * An RDD scope tracks the series of operations that created a given RDD.\n+ */\n+private[spark] object RDDScope {"
  }, {
    "author": {
      "login": "pwendell"
    },
    "body": "Actually on second thought it's correct as-is. RDD's are pretty baked into the scoping concept, since scopes are ultimately captured when an RDD is defined.\n",
    "commit": "666c03b1176b44368de8dcf1810b19e64717d2cc",
    "createdAt": "2015-05-03T03:49:37Z",
    "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.rdd\n+\n+import java.util.concurrent.atomic.AtomicInteger\n+import org.apache.spark.SparkContext\n+\n+/**\n+ * A collection of utility methods to construct a hierarchical representation of RDD scopes.\n+ * An RDD scope tracks the series of operations that created a given RDD.\n+ */\n+private[spark] object RDDScope {"
  }],
  "prId": 5729
}, {
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "It seems a bit awkward to be defining our own string serialization format for scopes. This is actually a public API (right?) because we will be writing this out to the event logs and reading it back. What if instead you just had:\n1. A programmatic representation of a scope.\n2. A JSON serializer for that representation.\n\nThe JSON output would likely be a list of enclosing scopes. You would set the local property to the value of the JSON string.\n",
    "commit": "666c03b1176b44368de8dcf1810b19e64717d2cc",
    "createdAt": "2015-05-03T03:54:57Z",
    "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.rdd\n+\n+import java.util.concurrent.atomic.AtomicInteger\n+import org.apache.spark.SparkContext\n+\n+/**\n+ * A collection of utility methods to construct a hierarchical representation of RDD scopes.\n+ * An RDD scope tracks the series of operations that created a given RDD.\n+ */\n+private[spark] object RDDScope {\n+\n+  // Symbol for delimiting each level of the hierarchy\n+  // e.g. grandparent;parent;child\n+  val SCOPE_NESTING_DELIMITER = \";\""
  }],
  "prId": 5729
}]