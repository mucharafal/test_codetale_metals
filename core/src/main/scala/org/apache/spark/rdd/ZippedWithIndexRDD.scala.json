[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "we should add a line of comment saying we don't use Scala's zipWithIndex to avoid overflowing.\n",
    "commit": "b83a60671e5ab1df4a5b5602db125b5da18d3bd6",
    "createdAt": "2016-10-19T05:18:40Z",
    "diffHunk": "@@ -64,8 +64,14 @@ class ZippedWithIndexRDD[T: ClassTag](prev: RDD[T]) extends RDD[(T, Long)](prev)\n \n   override def compute(splitIn: Partition, context: TaskContext): Iterator[(T, Long)] = {\n     val split = splitIn.asInstanceOf[ZippedWithIndexRDDPartition]\n-    firstParent[T].iterator(split.prev, context).zipWithIndex.map { x =>\n-      (x._1, split.startIndex + x._2)\n+    val parentIter = firstParent[T].iterator(split.prev, context)"
  }],
  "prId": 15550
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "private[this]\n",
    "commit": "b83a60671e5ab1df4a5b5602db125b5da18d3bd6",
    "createdAt": "2016-10-19T05:18:58Z",
    "diffHunk": "@@ -64,8 +64,14 @@ class ZippedWithIndexRDD[T: ClassTag](prev: RDD[T]) extends RDD[(T, Long)](prev)\n \n   override def compute(splitIn: Partition, context: TaskContext): Iterator[(T, Long)] = {\n     val split = splitIn.asInstanceOf[ZippedWithIndexRDDPartition]\n-    firstParent[T].iterator(split.prev, context).zipWithIndex.map { x =>\n-      (x._1, split.startIndex + x._2)\n+    val parentIter = firstParent[T].iterator(split.prev, context)\n+    new Iterator[(T, Long)] {\n+      var idxAcc: Long = -1L"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "also why don't we initialize this to split.startIndex?\n\nI'd also rename this just \"index\"\n",
    "commit": "b83a60671e5ab1df4a5b5602db125b5da18d3bd6",
    "createdAt": "2016-10-19T05:19:35Z",
    "diffHunk": "@@ -64,8 +64,14 @@ class ZippedWithIndexRDD[T: ClassTag](prev: RDD[T]) extends RDD[(T, Long)](prev)\n \n   override def compute(splitIn: Partition, context: TaskContext): Iterator[(T, Long)] = {\n     val split = splitIn.asInstanceOf[ZippedWithIndexRDDPartition]\n-    firstParent[T].iterator(split.prev, context).zipWithIndex.map { x =>\n-      (x._1, split.startIndex + x._2)\n+    val parentIter = firstParent[T].iterator(split.prev, context)\n+    new Iterator[(T, Long)] {\n+      var idxAcc: Long = -1L"
  }, {
    "author": {
      "login": "mridulm"
    },
    "body": "or rather split.startIndex - 1 given the current code for idxAcc.\n",
    "commit": "b83a60671e5ab1df4a5b5602db125b5da18d3bd6",
    "createdAt": "2016-10-19T06:39:32Z",
    "diffHunk": "@@ -64,8 +64,14 @@ class ZippedWithIndexRDD[T: ClassTag](prev: RDD[T]) extends RDD[(T, Long)](prev)\n \n   override def compute(splitIn: Partition, context: TaskContext): Iterator[(T, Long)] = {\n     val split = splitIn.asInstanceOf[ZippedWithIndexRDDPartition]\n-    firstParent[T].iterator(split.prev, context).zipWithIndex.map { x =>\n-      (x._1, split.startIndex + x._2)\n+    val parentIter = firstParent[T].iterator(split.prev, context)\n+    new Iterator[(T, Long)] {\n+      var idxAcc: Long = -1L"
  }],
  "prId": 15550
}]