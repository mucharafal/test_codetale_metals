[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "nit: this comment can be updated too.",
    "commit": "097bfecd989f3686f93cc93b7628f929806b36d4",
    "createdAt": "2016-12-05T02:30:44Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.rdd\n+\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+/**\n+ * This holds file names of the current Spark task. This is used in HadoopRDD,\n+ * FileScanRDD, NewHadoopRDD and InputFileName function in Spark SQL.\n+ */\n+private[spark] object InputFileBlockHolder {\n+  /**\n+   * A wrapper around some input file information.\n+   *\n+   * @param filePath path of the file read, or empty string if not available.\n+   * @param startOffset starting offset, in bytes, or -1 if not available.\n+   * @param length size of the block, in bytes, or -1 if not available.\n+   */\n+  private class FileBlock(val filePath: UTF8String, val startOffset: Long, val length: Long) {\n+    def this() {\n+      this(UTF8String.fromString(\"\"), -1, -1)\n+    }\n+  }\n+\n+  /**\n+   * The thread variable for the name of the current file being read. This is used by",
    "line": 41
  }],
  "prId": 16133
}]