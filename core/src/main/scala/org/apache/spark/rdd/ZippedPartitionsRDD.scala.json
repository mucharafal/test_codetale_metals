[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "`Unit` return type. Also can you add a java doc to this:\n\n```\n/**\n * Call the prepare method of every children that has one.\n * This is needed for reserving execution memory in advance.\n */\n```\n",
    "commit": "544f175b4b88c91becf3d6bf5e81d559812410b3",
    "createdAt": "2015-08-30T06:53:32Z",
    "diffHunk": "@@ -73,6 +73,13 @@ private[spark] abstract class ZippedPartitionsBaseRDD[V: ClassTag](\n     super.clearDependencies()\n     rdds = null\n   }\n+\n+  protected def tryPrepareChildren() {"
  }],
  "prId": 8511
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "this could just be\n\n```\nrdds.collect { case rdd: MapPartitionsWithPreparationRDD[_, _, _] => rdd.prepare() }\n```\n",
    "commit": "544f175b4b88c91becf3d6bf5e81d559812410b3",
    "createdAt": "2015-08-30T06:54:10Z",
    "diffHunk": "@@ -73,6 +73,13 @@ private[spark] abstract class ZippedPartitionsBaseRDD[V: ClassTag](\n     super.clearDependencies()\n     rdds = null\n   }\n+\n+  protected def tryPrepareChildren() {\n+    rdds.foreach {\n+      case rdd: MapPartitionsWithPreparationRDD[_, _, _] => rdd.prepare()\n+      case _ =>\n+    }"
  }],
  "prId": 8511
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "instead of duplicating this 3 times, can we make `compute` in the base class `final`, and have it call a `protected def doCompute` that the subclasses override?\n",
    "commit": "544f175b4b88c91becf3d6bf5e81d559812410b3",
    "createdAt": "2015-08-30T06:55:14Z",
    "diffHunk": "@@ -134,6 +143,7 @@ private[spark] class ZippedPartitionsRDD4\n   extends ZippedPartitionsBaseRDD[V](sc, List(rdd1, rdd2, rdd3, rdd4), preservesPartitioning) {\n \n   override def compute(s: Partition, context: TaskContext): Iterator[V] = {\n+    tryPrepareChildren()"
  }],
  "prId": 8511
}]