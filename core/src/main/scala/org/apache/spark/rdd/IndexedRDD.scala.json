[{
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "Could you add the @experimental annotation here too?\n",
    "commit": "02a9bde62102facfd5f9146039a2d68cdc0f180b",
    "createdAt": "2014-07-10T23:23:34Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.rdd\n+\n+import scala.language.higherKinds\n+import scala.reflect.{classTag, ClassTag}\n+\n+import org.apache.spark._\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.storage.StorageLevel\n+\n+import IndexedRDD.Id\n+\n+/**\n+ * :: Experimental ::\n+ * An RDD of key-value `(Id, V)` pairs that enforces key uniqueness and pre-indexes the entries for\n+ * efficient joins and point lookups/updates. Two IndexedRDDs with the same index can be joined\n+ * efficiently. All operations except [[reindex]] preserve the index. To construct an `IndexedRDD`,\n+ * use the [[org.apache.spark.rdd.IndexedRDD$ IndexedRDD object]].\n+ *\n+ * @tparam V the value associated with each entry in the set.\n+ */\n+class IndexedRDD[@specialized(Long, Int, Double) V: ClassTag]"
  }],
  "prId": 1297
}]