[{
  "comments": [{
    "author": {
      "login": "nezihyigitbasi"
    },
    "body": "I followed the naming convention for other classes, let me know if you still want lower-case.\n",
    "commit": "5a125864785bfba8cfe80432fe7c162f62a6b769",
    "createdAt": "2016-04-18T22:30:38Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "Yea actually many of the naming in spark core is wrong but we never bothered changing them. Usually SomeWord.scala means there is a class named SomeWord. The scala style guide actually recommends when there are multiple classes that are part of a coherent group, start with lowercase (similar to a lot of c++ naming guides).\n",
    "commit": "5a125864785bfba8cfe80432fe7c162f62a6b769",
    "createdAt": "2016-04-18T23:23:48Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*"
  }],
  "prId": 11865
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "We would need to add the label here. something like `::DeveloperApi`. look up other classes to confirm.\n",
    "commit": "5a125864785bfba8cfe80432fe7c162f62a6b769",
    "createdAt": "2016-04-18T23:24:12Z",
    "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.rdd\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.Partition\n+\n+/**\n+ * A PartitionCoalescer defines how to coalesce the partitions of a given RDD."
  }],
  "prId": 11865
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "here too\n",
    "commit": "5a125864785bfba8cfe80432fe7c162f62a6b769",
    "createdAt": "2016-04-18T23:24:15Z",
    "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.rdd\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.Partition\n+\n+/**\n+ * A PartitionCoalescer defines how to coalesce the partitions of a given RDD.\n+ */\n+@DeveloperApi\n+trait PartitionCoalescer {\n+\n+  /**\n+   * Coalesce the partitions of the given RDD.\n+   *\n+   * @param maxPartitions the maximum number of partitions to have after coalescing\n+   * @param parent the parent RDD whose partitions to coalesce\n+   * @return an array of [[PartitionGroup]]s, where each element is itself an array of\n+   * [[Partition]]s and represents a partition after coalescing is performed.\n+   */\n+  def coalesce(maxPartitions: Int, parent: RDD[_]): Array[PartitionGroup]\n+}\n+\n+/**\n+ * A group of [[Partition]]s"
  }],
  "prId": 11865
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "arr -> partitions\n\nalso can this be a val?\n",
    "commit": "5a125864785bfba8cfe80432fe7c162f62a6b769",
    "createdAt": "2016-04-18T23:24:42Z",
    "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.rdd\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.Partition\n+\n+/**\n+ * A PartitionCoalescer defines how to coalesce the partitions of a given RDD.\n+ */\n+@DeveloperApi\n+trait PartitionCoalescer {\n+\n+  /**\n+   * Coalesce the partitions of the given RDD.\n+   *\n+   * @param maxPartitions the maximum number of partitions to have after coalescing\n+   * @param parent the parent RDD whose partitions to coalesce\n+   * @return an array of [[PartitionGroup]]s, where each element is itself an array of\n+   * [[Partition]]s and represents a partition after coalescing is performed.\n+   */\n+  def coalesce(maxPartitions: Int, parent: RDD[_]): Array[PartitionGroup]\n+}\n+\n+/**\n+ * A group of [[Partition]]s\n+ * @param prefLoc preferred location for the partition group\n+ */\n+@DeveloperApi\n+class PartitionGroup(val prefLoc: Option[String] = None) {\n+  var arr = mutable.ArrayBuffer[Partition]()"
  }],
  "prId": 11865
}]