[{
  "comments": [{
    "author": {
      "login": "yhuai"
    },
    "body": "Based on this comment, it is not clear what need to be removed (remove this class or remove changes of this PR). Can you add a comment in SPARK-10342 about what need to be removed?\n",
    "commit": "544f175b4b88c91becf3d6bf5e81d559812410b3",
    "createdAt": "2015-08-29T20:36:51Z",
    "diffHunk": "@@ -24,6 +24,8 @@ import org.apache.spark.{Partition, Partitioner, TaskContext}\n /**\n  * An RDD that applies a user provided function to every partition of the parent RDD, and\n  * additionally allows the user to prepare each partition before computing the parent partition.\n+ *\n+ * TODO(davies): remove this once SPARK-10342 is fixed"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "It is also unclear we want to remove this even with better memory\nmanagement. You might still want this with those. I would just remove this\ncomment.\n\nOn Aug 29, 2015, at 1:37 PM, Yin Huai notifications@github.com wrote:\n\nIn\ncore/src/main/scala/org/apache/spark/rdd/MapPartitionsWithPreparationRDD.scala\nhttps://github.com/apache/spark/pull/8511#discussion_r38265746:\n\n> @@ -24,6 +24,8 @@ import org.apache.spark.{Partition, Partitioner, TaskContext}\n>  /**\n> - An RDD that applies a user provided function to every partition of the parent RDD, and\n> - additionally allows the user to prepare each partition before computing the parent partition.\n>   - *\n>   - \\* TODO(davies): remove this once SPARK-10342 is fixed\n\nBased on this comment, it is not clear what need to be removed (remove this\nclass or remove changes of this PR). Can you add a comment in SPARK-10342\nabout what need to be removed?\n\nâ€”\nReply to this email directly or view it on GitHub\nhttps://github.com/apache/spark/pull/8511/files#r38265746.\n",
    "commit": "544f175b4b88c91becf3d6bf5e81d559812410b3",
    "createdAt": "2015-08-29T21:00:46Z",
    "diffHunk": "@@ -24,6 +24,8 @@ import org.apache.spark.{Partition, Partitioner, TaskContext}\n /**\n  * An RDD that applies a user provided function to every partition of the parent RDD, and\n  * additionally allows the user to prepare each partition before computing the parent partition.\n+ *\n+ * TODO(davies): remove this once SPARK-10342 is fixed"
  }],
  "prId": 8511
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Incomplete comment?\n",
    "commit": "544f175b4b88c91becf3d6bf5e81d559812410b3",
    "createdAt": "2015-08-29T23:30:07Z",
    "diffHunk": "@@ -38,12 +40,25 @@ private[spark] class MapPartitionsWithPreparationRDD[U: ClassTag, T: ClassTag, M\n \n   override def getPartitions: Array[Partition] = firstParent[T].partitions\n \n+  private[this] var preparedArgument: Option[M] = None\n+\n+  def prepare(): Unit = {\n+    // This could be called multiple times\n+    if (preparedArgument.isEmpty) {\n+      preparedArgument = Some(preparePartition())\n+    }\n+  }\n+\n   /**\n    * Prepare a partition before computing it from its parent.\n    */\n   override def compute(partition: Partition, context: TaskContext): Iterator[U] = {\n-    val preparedArgument = preparePartition()\n+    prepare()\n+    // The same RDD could be called multiple times in one task, each call of compute() should\n+    // have sep"
  }],
  "prId": 8511
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "Is the idea here that if someone explicitly called `prepare()` before, then the `compute` should not `prepare` again? When will `compute` be called multiple times in the same task?\n",
    "commit": "544f175b4b88c91becf3d6bf5e81d559812410b3",
    "createdAt": "2015-08-30T07:01:00Z",
    "diffHunk": "@@ -38,12 +38,25 @@ private[spark] class MapPartitionsWithPreparationRDD[U: ClassTag, T: ClassTag, M\n \n   override def getPartitions: Array[Partition] = firstParent[T].partitions\n \n+  private[this] var preparedArgument: Option[M] = None\n+\n+  def prepare(): Unit = {\n+    // This could be called multiple times\n+    if (preparedArgument.isEmpty) {\n+      preparedArgument = Some(preparePartition())\n+    }\n+  }\n+\n   /**\n    * Prepare a partition before computing it from its parent.\n    */\n   override def compute(partition: Partition, context: TaskContext): Iterator[U] = {\n-    val preparedArgument = preparePartition()\n+    prepare()\n+    // The same RDD could be called multiple times in one task, each call of compute() should\n+    // have separate prepared argument.\n+    val prepared = preparedArgument.get\n+    preparedArgument = None"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "By the way, you can rewrite this without the `get` if you make `prepare()` return the argument:\n\n```\nval preparedArg = prepare()\n// The same RDD could be called multiple times [...]\npreparedArgument = None\n```\n\nthough I still find it a little strange that we need to reset `preparedArgument` after every call to compute.\n",
    "commit": "544f175b4b88c91becf3d6bf5e81d559812410b3",
    "createdAt": "2015-08-30T07:01:54Z",
    "diffHunk": "@@ -38,12 +38,25 @@ private[spark] class MapPartitionsWithPreparationRDD[U: ClassTag, T: ClassTag, M\n \n   override def getPartitions: Array[Partition] = firstParent[T].partitions\n \n+  private[this] var preparedArgument: Option[M] = None\n+\n+  def prepare(): Unit = {\n+    // This could be called multiple times\n+    if (preparedArgument.isEmpty) {\n+      preparedArgument = Some(preparePartition())\n+    }\n+  }\n+\n   /**\n    * Prepare a partition before computing it from its parent.\n    */\n   override def compute(partition: Partition, context: TaskContext): Iterator[U] = {\n-    val preparedArgument = preparePartition()\n+    prepare()\n+    // The same RDD could be called multiple times in one task, each call of compute() should\n+    // have separate prepared argument.\n+    val prepared = preparedArgument.get\n+    preparedArgument = None"
  }, {
    "author": {
      "login": "davies"
    },
    "body": "It's necessary when the same RDD is used more than once in a task.\n",
    "commit": "544f175b4b88c91becf3d6bf5e81d559812410b3",
    "createdAt": "2015-08-30T08:10:35Z",
    "diffHunk": "@@ -38,12 +38,25 @@ private[spark] class MapPartitionsWithPreparationRDD[U: ClassTag, T: ClassTag, M\n \n   override def getPartitions: Array[Partition] = firstParent[T].partitions\n \n+  private[this] var preparedArgument: Option[M] = None\n+\n+  def prepare(): Unit = {\n+    // This could be called multiple times\n+    if (preparedArgument.isEmpty) {\n+      preparedArgument = Some(preparePartition())\n+    }\n+  }\n+\n   /**\n    * Prepare a partition before computing it from its parent.\n    */\n   override def compute(partition: Partition, context: TaskContext): Iterator[U] = {\n-    val preparedArgument = preparePartition()\n+    prepare()\n+    // The same RDD could be called multiple times in one task, each call of compute() should\n+    // have separate prepared argument.\n+    val prepared = preparedArgument.get\n+    preparedArgument = None"
  }],
  "prId": 8511
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "I just noticed this can be a val. We can fix this in a follow-up patch.\n",
    "commit": "544f175b4b88c91becf3d6bf5e81d559812410b3",
    "createdAt": "2015-08-31T23:05:15Z",
    "diffHunk": "@@ -38,12 +39,28 @@ private[spark] class MapPartitionsWithPreparationRDD[U: ClassTag, T: ClassTag, M\n \n   override def getPartitions: Array[Partition] = firstParent[T].partitions\n \n+  // In certain join operations, prepare can be called on the same partition multiple times.\n+  // In this case, we need to ensure that each call to compute gets a separate prepare argument.\n+  private[this] var preparedArguments: ArrayBuffer[M] = new ArrayBuffer[M]",
    "line": 14
  }, {
    "author": {
      "login": "davies"
    },
    "body": "Will fix this a follow up PR.\n",
    "commit": "544f175b4b88c91becf3d6bf5e81d559812410b3",
    "createdAt": "2015-08-31T23:44:19Z",
    "diffHunk": "@@ -38,12 +39,28 @@ private[spark] class MapPartitionsWithPreparationRDD[U: ClassTag, T: ClassTag, M\n \n   override def getPartitions: Array[Partition] = firstParent[T].partitions\n \n+  // In certain join operations, prepare can be called on the same partition multiple times.\n+  // In this case, we need to ensure that each call to compute gets a separate prepare argument.\n+  private[this] var preparedArguments: ArrayBuffer[M] = new ArrayBuffer[M]",
    "line": 14
  }],
  "prId": 8511
}]