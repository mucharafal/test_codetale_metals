[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "we need documentation for all the methods\n",
    "commit": "439def9e5fd46f0650cba24c9232c3f62349023e",
    "createdAt": "2016-10-28T08:21:35Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.rdd\n+\n+import scala.reflect.ClassTag\n+\n+object ZipPartitionsRDDUtils {\n+\n+  /**\n+   * The zipPartitionsWithPreferredLocation helper function is similar to RDD.zipPartitions, but\n+   * it can be used to specify the zipPartitions task preferred locations to be consistent with\n+   * the fisrt zipped RDD. If the fisrt zipped RDD do not have preferred location,\n+   * it will fallback to the default `zipPartition` preferred location strategy.\n+   * This helper function can be used when one large RDD zipped with other small RDDs, we can set\n+   * the first zipped RDD (the `majorRdd` parameter) to be the large RDD to improve data locality.\n+   *\n+   * `preservesPartitioner` indicates whether the input function preserves the partitioner, which\n+   * should be `false` unless this is a pair RDD and the input function doesn't modify the keys.\n+   */\n+  def zipPartitionsWithPreferredLocation[A: ClassTag, B: ClassTag, V: ClassTag]\n+      (majorRdd: RDD[A], rdd2: RDD[B], preservesPartitioner: Boolean)\n+      (f: (Iterator[A], Iterator[B]) => Iterator[V]): RDD[V] = {\n+    val sc = majorRdd.sparkContext\n+    majorRdd.withScope {\n+      new ZippedPartitionsRDD2(sc, sc.clean(f), majorRdd, rdd2, preservesPartitioner,\n+        useFirstParentPreferredLocations = true)\n+    }\n+  }\n+\n+  def zipPartitionsWithPreferredLocation[A: ClassTag, B: ClassTag, V: ClassTag]"
  }],
  "prId": 15612
}]