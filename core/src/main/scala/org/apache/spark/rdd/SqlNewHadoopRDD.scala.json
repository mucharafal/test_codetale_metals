[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "We should probably get this from `SQLConf`.  The Spark conf is immutable which makes it harder to A/B test.\n",
    "commit": "b6a3b62bb32b414c5243e640c69a5482da78bfd6",
    "createdAt": "2015-11-18T17:58:09Z",
    "diffHunk": "@@ -96,6 +96,11 @@ private[spark] class SqlNewHadoopRDD[V: ClassTag](\n \n   @transient protected val jobId = new JobID(jobTrackerId, id)\n \n+  // If true, enable using the custom RecordReader for parquet. This only works for\n+  // a subset of the types (no complex types).\n+  protected val enableUnsafeRowParquetReader: Boolean =\n+      sc.conf.getBoolean(\"spark.parquet.enableUnsafeRowRecordReader\", true)",
    "line": 31
  }, {
    "author": {
      "login": "nongli"
    },
    "body": "Yea, reynold suggested the same thing. It requires moving this entire class to that package. I was going to do it in the next PR.\n",
    "commit": "b6a3b62bb32b414c5243e640c69a5482da78bfd6",
    "createdAt": "2015-11-18T19:33:53Z",
    "diffHunk": "@@ -96,6 +96,11 @@ private[spark] class SqlNewHadoopRDD[V: ClassTag](\n \n   @transient protected val jobId = new JobID(jobTrackerId, id)\n \n+  // If true, enable using the custom RecordReader for parquet. This only works for\n+  // a subset of the types (no complex types).\n+  protected val enableUnsafeRowParquetReader: Boolean =\n+      sc.conf.getBoolean(\"spark.parquet.enableUnsafeRowRecordReader\", true)",
    "line": 31
  }],
  "prId": 9801
}]