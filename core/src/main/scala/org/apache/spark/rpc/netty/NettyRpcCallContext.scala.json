[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: import ordering.\n",
    "commit": "90de09594195b9b23a4994b062eaaef10a6a61e5",
    "createdAt": "2015-07-23T17:31:52Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.rpc.netty\n+\n+import org.apache.spark.network.client.RpcResponseCallback\n+import org.apache.spark.rpc.{RpcAddress, RpcCallContext}\n+\n+import scala.concurrent.{Promise, Future}"
  }],
  "prId": 6457
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "This one looks a little weird because `e` is not the cause of the `IllegalStateException`. Maybe log `e` separately?\n",
    "commit": "90de09594195b9b23a4994b062eaaef10a6a61e5",
    "createdAt": "2015-07-23T17:35:29Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.rpc.netty\n+\n+import org.apache.spark.network.client.RpcResponseCallback\n+import org.apache.spark.rpc.{RpcAddress, RpcCallContext}\n+\n+import scala.concurrent.{Promise, Future}\n+\n+private[netty] abstract class NettyRpcCallContext(\n+    endpointRef: NettyRpcEndpointRef,\n+    override val senderAddress: RpcAddress,\n+    needReply: Boolean) extends RpcCallContext{\n+\n+  protected def send(message: Any): Unit\n+\n+  override def reply(response: Any): Unit = {\n+    if (needReply) {\n+      send(AskResponse(endpointRef, response))\n+    } else {\n+      throw new IllegalStateException(\n+        s\"Cannot send $response to the sender because the sender won't handle it\")\n+    }\n+  }\n+\n+  override def sendFailure(e: Throwable): Unit = {\n+    if (needReply) {\n+      send(AskResponse(endpointRef, RpcFailure(e)))\n+    } else {\n+      throw new IllegalStateException("
  }],
  "prId": 6457
}]