[{
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "nit just use () and cleanup spacing.",
    "commit": "77cd72695432b3602d9dbbc12ac97fa5a1f5507c",
    "createdAt": "2019-08-15T14:56:49Z",
    "diffHunk": "@@ -345,4 +345,27 @@ private[spark] object StandaloneResourceUtils extends Logging {\n   def needCoordinate(conf: SparkConf): Boolean = {\n     conf.get(SPARK_RESOURCES_COORDINATE)\n   }\n+\n+  // used for UI\n+  def formatResourcesAddresses(resources: Map[String, ResourceInformation]): String = {\n+    resources.map { case (rName, rInfo) =>\n+      s\"$rName: ${rInfo.addresses.mkString(\"[\", \", \", \"]\")}\"\n+    }.mkString(\", \")\n+  }\n+\n+  // used for UI\n+  def formatResourcesUsed(\n+      resources: Map[String, ResourceInformation],\n+      resourcesUsed: Map[String, ResourceInformation]): String = {\n+    resources.map { case (rName, rInfo) =>\n+      val used = resourcesUsed(rName).addresses.length\n+      val total = rInfo.addresses.length\n+      s\"$used / $total $rName\"\n+    }.mkString(\", \")\n+  }\n+\n+  // used for UI\n+  def formatResourceRequirements(requirements: Seq[ResourceRequirement]): String = {\n+    requirements.map { req => s\"${req.amount} ${req.resourceName}\"}.mkString(\", \")"
  }, {
    "author": {
      "login": "Ngone51"
    },
    "body": "like `(5gpu, 10fpga)` ?",
    "commit": "77cd72695432b3602d9dbbc12ac97fa5a1f5507c",
    "createdAt": "2019-08-17T10:41:56Z",
    "diffHunk": "@@ -345,4 +345,27 @@ private[spark] object StandaloneResourceUtils extends Logging {\n   def needCoordinate(conf: SparkConf): Boolean = {\n     conf.get(SPARK_RESOURCES_COORDINATE)\n   }\n+\n+  // used for UI\n+  def formatResourcesAddresses(resources: Map[String, ResourceInformation]): String = {\n+    resources.map { case (rName, rInfo) =>\n+      s\"$rName: ${rInfo.addresses.mkString(\"[\", \", \", \"]\")}\"\n+    }.mkString(\", \")\n+  }\n+\n+  // used for UI\n+  def formatResourcesUsed(\n+      resources: Map[String, ResourceInformation],\n+      resourcesUsed: Map[String, ResourceInformation]): String = {\n+    resources.map { case (rName, rInfo) =>\n+      val used = resourcesUsed(rName).addresses.length\n+      val total = rInfo.addresses.length\n+      s\"$used / $total $rName\"\n+    }.mkString(\", \")\n+  }\n+\n+  // used for UI\n+  def formatResourceRequirements(requirements: Seq[ResourceRequirement]): String = {\n+    requirements.map { req => s\"${req.amount} ${req.resourceName}\"}.mkString(\", \")"
  }, {
    "author": {
      "login": "tgravescs"
    },
    "body": "sorry I wasn't clear I meant replace {} in the map with ().\r\nrequirements.map(req => ..) since it all fits on one line",
    "commit": "77cd72695432b3602d9dbbc12ac97fa5a1f5507c",
    "createdAt": "2019-08-19T13:27:59Z",
    "diffHunk": "@@ -345,4 +345,27 @@ private[spark] object StandaloneResourceUtils extends Logging {\n   def needCoordinate(conf: SparkConf): Boolean = {\n     conf.get(SPARK_RESOURCES_COORDINATE)\n   }\n+\n+  // used for UI\n+  def formatResourcesAddresses(resources: Map[String, ResourceInformation]): String = {\n+    resources.map { case (rName, rInfo) =>\n+      s\"$rName: ${rInfo.addresses.mkString(\"[\", \", \", \"]\")}\"\n+    }.mkString(\", \")\n+  }\n+\n+  // used for UI\n+  def formatResourcesUsed(\n+      resources: Map[String, ResourceInformation],\n+      resourcesUsed: Map[String, ResourceInformation]): String = {\n+    resources.map { case (rName, rInfo) =>\n+      val used = resourcesUsed(rName).addresses.length\n+      val total = rInfo.addresses.length\n+      s\"$used / $total $rName\"\n+    }.mkString(\", \")\n+  }\n+\n+  // used for UI\n+  def formatResourceRequirements(requirements: Seq[ResourceRequirement]): String = {\n+    requirements.map { req => s\"${req.amount} ${req.resourceName}\"}.mkString(\", \")"
  }, {
    "author": {
      "login": "Ngone51"
    },
    "body": "Ok, I see.",
    "commit": "77cd72695432b3602d9dbbc12ac97fa5a1f5507c",
    "createdAt": "2019-08-21T08:55:58Z",
    "diffHunk": "@@ -345,4 +345,27 @@ private[spark] object StandaloneResourceUtils extends Logging {\n   def needCoordinate(conf: SparkConf): Boolean = {\n     conf.get(SPARK_RESOURCES_COORDINATE)\n   }\n+\n+  // used for UI\n+  def formatResourcesAddresses(resources: Map[String, ResourceInformation]): String = {\n+    resources.map { case (rName, rInfo) =>\n+      s\"$rName: ${rInfo.addresses.mkString(\"[\", \", \", \"]\")}\"\n+    }.mkString(\", \")\n+  }\n+\n+  // used for UI\n+  def formatResourcesUsed(\n+      resources: Map[String, ResourceInformation],\n+      resourcesUsed: Map[String, ResourceInformation]): String = {\n+    resources.map { case (rName, rInfo) =>\n+      val used = resourcesUsed(rName).addresses.length\n+      val total = rInfo.addresses.length\n+      s\"$used / $total $rName\"\n+    }.mkString(\", \")\n+  }\n+\n+  // used for UI\n+  def formatResourceRequirements(requirements: Seq[ResourceRequirement]): String = {\n+    requirements.map { req => s\"${req.amount} ${req.resourceName}\"}.mkString(\", \")"
  }],
  "prId": 25409
}, {
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "this can just be:       mutableAddress ++= rInfo.addresses\r\n",
    "commit": "77cd72695432b3602d9dbbc12ac97fa5a1f5507c",
    "createdAt": "2019-08-26T15:12:36Z",
    "diffHunk": "@@ -345,4 +376,47 @@ private[spark] object StandaloneResourceUtils extends Logging {\n   def needCoordinate(conf: SparkConf): Boolean = {\n     conf.get(SPARK_RESOURCES_COORDINATE)\n   }\n+\n+  def toMutable(immutableResources: Map[String, ResourceInformation])\n+    : Map[String, MutableResourceInfo] = {\n+    immutableResources.map { case (rName, rInfo) =>\n+      val mutableAddress = new mutable.HashSet[String]()\n+      rInfo.addresses.foreach(mutableAddress.add)"
  }],
  "prId": 25409
}]