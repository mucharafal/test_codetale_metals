[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "I think it would look cleaner if these are just abstract `val`s that subclasses need to override instead of constructor arguments.\n",
    "commit": "069e9463b377d1a0c7e4c35619e06213eae07fc2",
    "createdAt": "2015-03-25T21:16:42Z",
    "diffHunk": "@@ -0,0 +1,325 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import java.net.InetSocketAddress\n+import javax.servlet.http.{HttpServlet, HttpServletRequest, HttpServletResponse}\n+\n+import scala.io.Source\n+import com.fasterxml.jackson.core.JsonProcessingException\n+import org.eclipse.jetty.server.Server\n+import org.eclipse.jetty.servlet.{ServletHolder, ServletContextHandler}\n+import org.eclipse.jetty.util.thread.QueuedThreadPool\n+import org.json4s._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.{Logging, SparkConf, SPARK_VERSION => sparkVersion}\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * A server that responds to requests submitted by the [[RestClient]].\n+ *\n+ * This server responds with different HTTP codes depending on the situation:\n+ *   200 OK - Request was processed successfully\n+ *   400 BAD REQUEST - Request was malformed, not successfully validated, or of unexpected type\n+ *   468 UNKNOWN PROTOCOL VERSION - Request specified a protocol this server does not understand\n+ *   500 INTERNAL SERVER ERROR - Server throws an exception internally while processing the request\n+ *\n+ * The server always includes a JSON representation of the relevant [[SubmitRestProtocolResponse]]\n+ * in the HTTP body. If an error occurs, however, the server will include an [[ErrorResponse]]\n+ * instead of the one expected by the client. If the construction of this error response itself\n+ * fails, the response will consist of an empty body with a response code that indicates internal\n+ * server error.\n+ *\n+ * @param host the address this server should bind to\n+ * @param requestedPort the port this server will attempt to bind to\n+ */\n+private[spark] abstract class RestServer(\n+    host: String,\n+    requestedPort: Int,\n+    masterConf: SparkConf,\n+    submitRequestServlet: SubmitRequestServlet,\n+    killRequestServlet: KillRequestServlet,\n+    statusRequestServlet: StatusRequestServlet)"
  }],
  "prId": 5144
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "this should be just `RestServer`. There are a lot of links like these that need to be fixed.\n",
    "commit": "069e9463b377d1a0c7e4c35619e06213eae07fc2",
    "createdAt": "2015-03-25T22:03:55Z",
    "diffHunk": "@@ -0,0 +1,325 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import java.net.InetSocketAddress\n+import javax.servlet.http.{HttpServlet, HttpServletRequest, HttpServletResponse}\n+\n+import scala.io.Source\n+import com.fasterxml.jackson.core.JsonProcessingException\n+import org.eclipse.jetty.server.Server\n+import org.eclipse.jetty.servlet.{ServletHolder, ServletContextHandler}\n+import org.eclipse.jetty.util.thread.QueuedThreadPool\n+import org.json4s._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.{Logging, SparkConf, SPARK_VERSION => sparkVersion}\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * A server that responds to requests submitted by the [[RestClient]].\n+ *\n+ * This server responds with different HTTP codes depending on the situation:\n+ *   200 OK - Request was processed successfully\n+ *   400 BAD REQUEST - Request was malformed, not successfully validated, or of unexpected type\n+ *   468 UNKNOWN PROTOCOL VERSION - Request specified a protocol this server does not understand\n+ *   500 INTERNAL SERVER ERROR - Server throws an exception internally while processing the request\n+ *\n+ * The server always includes a JSON representation of the relevant [[SubmitRestProtocolResponse]]\n+ * in the HTTP body. If an error occurs, however, the server will include an [[ErrorResponse]]\n+ * instead of the one expected by the client. If the construction of this error response itself\n+ * fails, the response will consist of an empty body with a response code that indicates internal\n+ * server error.\n+ *\n+ * @param host the address this server should bind to\n+ * @param requestedPort the port this server will attempt to bind to\n+ */\n+private[spark] abstract class RestServer(\n+    host: String,\n+    requestedPort: Int,\n+    masterConf: SparkConf,\n+    submitRequestServlet: SubmitRequestServlet,\n+    killRequestServlet: KillRequestServlet,\n+    statusRequestServlet: StatusRequestServlet)\n+  extends Logging {\n+\n+  import RestServer._\n+\n+  private var _server: Option[Server] = None\n+\n+  // A mapping from URL prefixes to servlets that serve them. Exposed for testing.\n+  protected val baseContext = s\"/$PROTOCOL_VERSION/submissions\"\n+  protected val contextToServlet = Map[String, RestServlet](\n+    s\"$baseContext/create/*\" -> submitRequestServlet,\n+    s\"$baseContext/kill/*\" -> killRequestServlet,\n+    s\"$baseContext/status/*\" -> statusRequestServlet,\n+    \"/*\" -> new ErrorServlet // default handler\n+  )\n+\n+  /** Start the server and return the bound port. */\n+  def start(): Int = {\n+    val (server, boundPort) = Utils.startServiceOnPort[Server](requestedPort, doStart, masterConf)\n+    _server = Some(server)\n+    logInfo(s\"Started REST server for submitting applications on port $boundPort\")\n+    boundPort\n+  }\n+\n+  /**\n+   * Map the servlets to their corresponding contexts and attach them to a server.\n+   * Return a 2-tuple of the started server and the bound port.\n+   */\n+  private def doStart(startPort: Int): (Server, Int) = {\n+    val server = new Server(new InetSocketAddress(host, startPort))\n+    val threadPool = new QueuedThreadPool\n+    threadPool.setDaemon(true)\n+    server.setThreadPool(threadPool)\n+    val mainHandler = new ServletContextHandler\n+    mainHandler.setContextPath(\"/\")\n+    contextToServlet.foreach { case (prefix, servlet) =>\n+      mainHandler.addServlet(new ServletHolder(servlet), prefix)\n+    }\n+    server.setHandler(mainHandler)\n+    server.start()\n+    val boundPort = server.getConnectors()(0).getLocalPort\n+    (server, boundPort)\n+  }\n+\n+  def stop(): Unit = {\n+    _server.foreach(_.stop())\n+  }\n+}\n+\n+private[rest] object RestServer {\n+  val PROTOCOL_VERSION = RestClient.PROTOCOL_VERSION\n+  val SC_UNKNOWN_PROTOCOL_VERSION = 468\n+}\n+\n+/**\n+ * An abstract servlet for handling requests passed to the [[StandaloneRestServer]]."
  }],
  "prId": 5144
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "minor: can you remove this blank line\n",
    "commit": "069e9463b377d1a0c7e4c35619e06213eae07fc2",
    "createdAt": "2015-04-08T22:01:14Z",
    "diffHunk": "@@ -0,0 +1,320 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import java.net.InetSocketAddress\n+import javax.servlet.http.{HttpServlet, HttpServletRequest, HttpServletResponse}\n+\n+import scala.io.Source\n+import com.fasterxml.jackson.core.JsonProcessingException\n+import org.eclipse.jetty.server.Server\n+import org.eclipse.jetty.servlet.{ServletHolder, ServletContextHandler}\n+import org.eclipse.jetty.util.thread.QueuedThreadPool\n+import org.json4s._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.{Logging, SparkConf, SPARK_VERSION => sparkVersion}\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * A server that responds to requests submitted by the [[RestClient]].\n+ *\n+ * This server responds with different HTTP codes depending on the situation:\n+ *   200 OK - Request was processed successfully\n+ *   400 BAD REQUEST - Request was malformed, not successfully validated, or of unexpected type\n+ *   468 UNKNOWN PROTOCOL VERSION - Request specified a protocol this server does not understand\n+ *   500 INTERNAL SERVER ERROR - Server throws an exception internally while processing the request\n+ *\n+ * The server always includes a JSON representation of the relevant [[SubmitRestProtocolResponse]]\n+ * in the HTTP body. If an error occurs, however, the server will include an [[ErrorResponse]]\n+ * instead of the one expected by the client. If the construction of this error response itself\n+ * fails, the response will consist of an empty body with a response code that indicates internal\n+ * server error.\n+ *"
  }],
  "prId": 5144
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "should these (not the servlets) just be constructor arguments?\n",
    "commit": "069e9463b377d1a0c7e4c35619e06213eae07fc2",
    "createdAt": "2015-04-08T22:02:09Z",
    "diffHunk": "@@ -0,0 +1,320 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import java.net.InetSocketAddress\n+import javax.servlet.http.{HttpServlet, HttpServletRequest, HttpServletResponse}\n+\n+import scala.io.Source\n+import com.fasterxml.jackson.core.JsonProcessingException\n+import org.eclipse.jetty.server.Server\n+import org.eclipse.jetty.servlet.{ServletHolder, ServletContextHandler}\n+import org.eclipse.jetty.util.thread.QueuedThreadPool\n+import org.json4s._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.{Logging, SparkConf, SPARK_VERSION => sparkVersion}\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * A server that responds to requests submitted by the [[RestClient]].\n+ *\n+ * This server responds with different HTTP codes depending on the situation:\n+ *   200 OK - Request was processed successfully\n+ *   400 BAD REQUEST - Request was malformed, not successfully validated, or of unexpected type\n+ *   468 UNKNOWN PROTOCOL VERSION - Request specified a protocol this server does not understand\n+ *   500 INTERNAL SERVER ERROR - Server throws an exception internally while processing the request\n+ *\n+ * The server always includes a JSON representation of the relevant [[SubmitRestProtocolResponse]]\n+ * in the HTTP body. If an error occurs, however, the server will include an [[ErrorResponse]]\n+ * instead of the one expected by the client. If the construction of this error response itself\n+ * fails, the response will consist of an empty body with a response code that indicates internal\n+ * server error.\n+ *\n+ */\n+private[spark] abstract class RestServer extends Logging {\n+  val host: String\n+  val requestedPort: Int\n+  val masterConf: SparkConf"
  }],
  "prId": 5144
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "these should be `protected val`, otherwise you create a servlet every time you reference it\n",
    "commit": "069e9463b377d1a0c7e4c35619e06213eae07fc2",
    "createdAt": "2015-04-08T22:02:49Z",
    "diffHunk": "@@ -0,0 +1,320 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import java.net.InetSocketAddress\n+import javax.servlet.http.{HttpServlet, HttpServletRequest, HttpServletResponse}\n+\n+import scala.io.Source\n+import com.fasterxml.jackson.core.JsonProcessingException\n+import org.eclipse.jetty.server.Server\n+import org.eclipse.jetty.servlet.{ServletHolder, ServletContextHandler}\n+import org.eclipse.jetty.util.thread.QueuedThreadPool\n+import org.json4s._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.{Logging, SparkConf, SPARK_VERSION => sparkVersion}\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * A server that responds to requests submitted by the [[RestClient]].\n+ *\n+ * This server responds with different HTTP codes depending on the situation:\n+ *   200 OK - Request was processed successfully\n+ *   400 BAD REQUEST - Request was malformed, not successfully validated, or of unexpected type\n+ *   468 UNKNOWN PROTOCOL VERSION - Request specified a protocol this server does not understand\n+ *   500 INTERNAL SERVER ERROR - Server throws an exception internally while processing the request\n+ *\n+ * The server always includes a JSON representation of the relevant [[SubmitRestProtocolResponse]]\n+ * in the HTTP body. If an error occurs, however, the server will include an [[ErrorResponse]]\n+ * instead of the one expected by the client. If the construction of this error response itself\n+ * fails, the response will consist of an empty body with a response code that indicates internal\n+ * server error.\n+ *\n+ */\n+private[spark] abstract class RestServer extends Logging {\n+  val host: String\n+  val requestedPort: Int\n+  val masterConf: SparkConf\n+  def submitRequestServlet: SubmitRequestServlet\n+  def killRequestServlet: KillRequestServlet\n+  def statusRequestServlet: StatusRequestServlet"
  }],
  "prId": 5144
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "With these changes maybe it makes sense to rename this to `RestSubmissionServer` and the client to `RestSubmissionClient` so it's clearer. The reason why I didn't do that before is that `StandaloneRestSubmissionServer` seemed a little verbose, but now we don't have that problem.\n",
    "commit": "069e9463b377d1a0c7e4c35619e06213eae07fc2",
    "createdAt": "2015-04-08T22:04:30Z",
    "diffHunk": "@@ -0,0 +1,320 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import java.net.InetSocketAddress\n+import javax.servlet.http.{HttpServlet, HttpServletRequest, HttpServletResponse}\n+\n+import scala.io.Source\n+import com.fasterxml.jackson.core.JsonProcessingException\n+import org.eclipse.jetty.server.Server\n+import org.eclipse.jetty.servlet.{ServletHolder, ServletContextHandler}\n+import org.eclipse.jetty.util.thread.QueuedThreadPool\n+import org.json4s._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.{Logging, SparkConf, SPARK_VERSION => sparkVersion}\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * A server that responds to requests submitted by the [[RestClient]].\n+ *\n+ * This server responds with different HTTP codes depending on the situation:\n+ *   200 OK - Request was processed successfully\n+ *   400 BAD REQUEST - Request was malformed, not successfully validated, or of unexpected type\n+ *   468 UNKNOWN PROTOCOL VERSION - Request specified a protocol this server does not understand\n+ *   500 INTERNAL SERVER ERROR - Server throws an exception internally while processing the request\n+ *\n+ * The server always includes a JSON representation of the relevant [[SubmitRestProtocolResponse]]\n+ * in the HTTP body. If an error occurs, however, the server will include an [[ErrorResponse]]\n+ * instead of the one expected by the client. If the construction of this error response itself\n+ * fails, the response will consist of an empty body with a response code that indicates internal\n+ * server error.\n+ *\n+ */\n+private[spark] abstract class RestServer extends Logging {"
  }],
  "prId": 5144
}]