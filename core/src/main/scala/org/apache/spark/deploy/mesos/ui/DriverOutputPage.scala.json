[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "`private[something]`\n",
    "commit": "069e9463b377d1a0c7e4c35619e06213eae07fc2",
    "createdAt": "2015-03-25T21:12:49Z",
    "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.mesos.ui\n+\n+import org.apache.spark.ui.{UIUtils, WebUIPage}\n+import javax.servlet.http.HttpServletRequest\n+import scala.xml.Node\n+import org.apache.spark.scheduler.cluster.mesos.{RetryState, ClusterTaskState, DriverSubmission}\n+import org.apache.mesos.Protos.TaskStatus\n+\n+class DriverOutputPage(parent: MesosClusterUI) extends WebUIPage(\"\") {"
  }],
  "prId": 5144
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "can you remove all these blank lines\n",
    "commit": "069e9463b377d1a0c7e4c35619e06213eae07fc2",
    "createdAt": "2015-03-25T21:36:51Z",
    "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.mesos.ui\n+\n+import org.apache.spark.ui.{UIUtils, WebUIPage}\n+import javax.servlet.http.HttpServletRequest\n+import scala.xml.Node\n+import org.apache.spark.scheduler.cluster.mesos.{RetryState, ClusterTaskState, DriverSubmission}\n+import org.apache.mesos.Protos.TaskStatus\n+\n+class DriverOutputPage(parent: MesosClusterUI) extends WebUIPage(\"\") {\n+\n+  def render(request: HttpServletRequest): Seq[Node] = {\n+    val state = parent.scheduler.getState()\n+\n+    val queuedHeaders = Seq(\"DriverID\", \"Submit Date\", \"Description\")\n+    val driverHeaders = queuedHeaders ++\n+      Seq(\"Start Date\", \"Mesos Slave ID\", \"State\")\n+    val retryHeaders = Seq(\"DriverID\", \"Submit Date\", \"Description\") ++\n+      Seq(\"Last Failed Status\", \"Next Retry Time\", \"Attempt Count\")\n+\n+    val queuedTable = UIUtils.listingTable(queuedHeaders, queuedRow, state.queuedDrivers)\n+    val launchedTable = UIUtils.listingTable(driverHeaders, driverRow, state.launchedDrivers)\n+    val finishedTable = UIUtils.listingTable(driverHeaders, driverRow, state.finishedDrivers)\n+    val retryTable = UIUtils.listingTable(retryHeaders, retryRow, state.retryList)\n+    val content =\n+      <p>Mesos Framework ID: {state.appId}</p>\n+      <div class=\"row-fluid\">\n+        <div class=\"span12\">\n+          <h4>Queued Drivers:</h4>\n+          {queuedTable}\n+          <h4>Launched Drivers:</h4>\n+          {launchedTable}\n+          <h4>Finished Drivers:</h4>\n+          {finishedTable}\n+          <h4>Supervise drivers waiting for retry:</h4>\n+          {retryTable}\n+        </div>\n+      </div>;\n+    UIUtils.basicSparkPage(content, \"Spark Drivers for Mesos cluster\")\n+  }\n+\n+  def queuedRow(submission: DriverSubmission): Seq[Node] = {\n+    <tr>\n+      <td>{submission.submissionId}</td>\n+      <td>{submission.submitDate}</td>\n+      <td>{submission.desc.desc.command.mainClass}</td>\n+    </tr>\n+  }\n+\n+  def driverRow(state: ClusterTaskState): Seq[Node] = {\n+    <tr>\n+      <td>{state.submission.submissionId}</td>\n+      <td>{state.submission.submitDate}</td>\n+      <td>{state.submission.desc.desc.command.mainClass}</td>\n+      <td>{state.startDate}</td>\n+      <td>{state.slaveId.getValue}</td>\n+      <td>{stateString(state.taskState)}</td>\n+    </tr>\n+  }\n+\n+  def retryRow(state: RetryState): Seq[Node] = {\n+    <tr>\n+      <td>{state.submission.submissionId}</td>\n+      <td>{state.submission.submitDate}</td>\n+      <td>{state.submission.desc.desc.command.mainClass}</td>\n+      <td>{state.lastFailureStatus}</td>\n+      <td>{state.nextRetry}</td>\n+      <td>{state.retries}</td>\n+    </tr>\n+  }\n+\n+  def stateString(status: Option[TaskStatus]): String = {\n+    if (status.isEmpty) {\n+      return \"\"\n+    }\n+\n+    val sb = new StringBuilder\n+    sb.append(s\"State: ${status.get.getState}\")\n+\n+    if (status.get.hasMessage) {\n+      sb.append(s\", Message: ${status.get.getMessage}\")\n+    }\n+\n+    if (status.get.hasHealthy) {\n+      sb.append(s\", Healthy: ${status.get.getHealthy}\")\n+    }\n+"
  }],
  "prId": 5144
}]