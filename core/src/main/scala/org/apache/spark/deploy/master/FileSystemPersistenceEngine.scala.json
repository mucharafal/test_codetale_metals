[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Although the buffering in `ExternalSorter` makes sense, I don't know if this helps anything, since only one write is being done. Another buffer at this level doesn't do anything but introduce a copy and memory allocation\n",
    "commit": "c7a739e5575098736247f1c42d07fb5fa110e22b",
    "createdAt": "2015-03-03T18:55:42Z",
    "diffHunk": "@@ -58,7 +58,7 @@ private[spark] class FileSystemPersistenceEngine(\n     if (!created) { throw new IllegalStateException(\"Could not create file: \" + file) }\n     val serializer = serialization.findSerializerFor(value)\n     val serialized = serializer.toBinary(value)\n-    val out = new FileOutputStream(file)\n+    val out = new BufferedOutputStream(new FileOutputStream(file))",
    "line": 5
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "I agree. This doesn't help but doesn't really hurt either since we're only allocating 8K. Not a huge deal but I might leave this one out.\n",
    "commit": "c7a739e5575098736247f1c42d07fb5fa110e22b",
    "createdAt": "2015-03-04T02:09:07Z",
    "diffHunk": "@@ -58,7 +58,7 @@ private[spark] class FileSystemPersistenceEngine(\n     if (!created) { throw new IllegalStateException(\"Could not create file: \" + file) }\n     val serializer = serialization.findSerializerFor(value)\n     val serialized = serializer.toBinary(value)\n-    val out = new FileOutputStream(file)\n+    val out = new BufferedOutputStream(new FileOutputStream(file))",
    "line": 5
  }],
  "prId": 4878
}, {
  "comments": [{
    "author": {
      "login": "kayousterhout"
    },
    "body": "Since we use readFully below, why do we need buffering?\n",
    "commit": "c7a739e5575098736247f1c42d07fb5fa110e22b",
    "createdAt": "2015-03-04T22:31:42Z",
    "diffHunk": "@@ -68,7 +68,7 @@ private[spark] class FileSystemPersistenceEngine(\n \n   private def deserializeFromFile[T](file: File)(implicit m: ClassTag[T]): T = {\n     val fileData = new Array[Byte](file.length().asInstanceOf[Int])\n-    val dis = new DataInputStream(new FileInputStream(file))\n+    val dis = new DataInputStream(new BufferedInputStream(new FileInputStream(file)))",
    "line": 14
  }],
  "prId": 4878
}]