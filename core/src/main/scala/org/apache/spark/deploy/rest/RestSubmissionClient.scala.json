[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "please make this private\n",
    "commit": "539988ce1399ec3b677ba96f5a3654e5068f0645",
    "createdAt": "2015-09-03T04:49:35Z",
    "diffHunk": "@@ -413,6 +412,15 @@ private[spark] object RestSubmissionClient {\n     val mainClass = args(1)\n     val appArgs = args.slice(2, args.size)\n     val conf = new SparkConf\n-    run(appResource, mainClass, appArgs, conf)\n+    val env = filterSystemEnvironment(sys.env)\n+    run(appResource, mainClass, appArgs, conf, env)\n+  }\n+\n+  /**\n+   * Filter non-spark environment variables from any environment.\n+   */\n+  def filterSystemEnvironment(env: Map[String, String]): Map[String, String] = {"
  }, {
    "author": {
      "login": "pashields"
    },
    "body": "There is a test for it, so I'd need to make it visible to the test somehow or remove the test.\n\nI've changed it to protected[rest]. LMK if you have an alternate solution or would like me to make it private and remove the test.\n",
    "commit": "539988ce1399ec3b677ba96f5a3654e5068f0645",
    "createdAt": "2015-09-03T12:39:18Z",
    "diffHunk": "@@ -413,6 +412,15 @@ private[spark] object RestSubmissionClient {\n     val mainClass = args(1)\n     val appArgs = args.slice(2, args.size)\n     val conf = new SparkConf\n-    run(appResource, mainClass, appArgs, conf)\n+    val env = filterSystemEnvironment(sys.env)\n+    run(appResource, mainClass, appArgs, conf, env)\n+  }\n+\n+  /**\n+   * Filter non-spark environment variables from any environment.\n+   */\n+  def filterSystemEnvironment(env: Map[String, String]): Map[String, String] = {"
  }],
  "prId": 7979
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "this makes a copy of the map, can you just push this into the filter to avoid the copy?\n\n```\nenv.filter { case (k, _) =>\n  (k.startsWith(\"SPARK_\") && k != \"SPARK_ENV_LOADED) || k.startsWith(\"MESOS_\")\n}\n```\n",
    "commit": "539988ce1399ec3b677ba96f5a3654e5068f0645",
    "createdAt": "2015-09-03T04:50:34Z",
    "diffHunk": "@@ -413,6 +412,15 @@ private[spark] object RestSubmissionClient {\n     val mainClass = args(1)\n     val appArgs = args.slice(2, args.size)\n     val conf = new SparkConf\n-    run(appResource, mainClass, appArgs, conf)\n+    val env = filterSystemEnvironment(sys.env)\n+    run(appResource, mainClass, appArgs, conf, env)\n+  }\n+\n+  /**\n+   * Filter non-spark environment variables from any environment.\n+   */\n+  def filterSystemEnvironment(env: Map[String, String]): Map[String, String] = {\n+    val sparkVars = env.filter { case (k, _) => k.startsWith(\"SPARK_\") || k.startsWith(\"MESOS_\") }\n+    sparkVars - \"SPARK_ENV_LOADED\""
  }, {
    "author": {
      "login": "pashields"
    },
    "body": "Done\n",
    "commit": "539988ce1399ec3b677ba96f5a3654e5068f0645",
    "createdAt": "2015-09-03T12:37:59Z",
    "diffHunk": "@@ -413,6 +412,15 @@ private[spark] object RestSubmissionClient {\n     val mainClass = args(1)\n     val appArgs = args.slice(2, args.size)\n     val conf = new SparkConf\n-    run(appResource, mainClass, appArgs, conf)\n+    val env = filterSystemEnvironment(sys.env)\n+    run(appResource, mainClass, appArgs, conf, env)\n+  }\n+\n+  /**\n+   * Filter non-spark environment variables from any environment.\n+   */\n+  def filterSystemEnvironment(env: Map[String, String]): Map[String, String] = {\n+    val sparkVars = env.filter { case (k, _) => k.startsWith(\"SPARK_\") || k.startsWith(\"MESOS_\") }\n+    sparkVars - \"SPARK_ENV_LOADED\""
  }],
  "prId": 7979
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "this can be `private[rest]`, I've fixed that on merge.\n",
    "commit": "539988ce1399ec3b677ba96f5a3654e5068f0645",
    "createdAt": "2015-09-03T20:51:48Z",
    "diffHunk": "@@ -413,6 +412,16 @@ private[spark] object RestSubmissionClient {\n     val mainClass = args(1)\n     val appArgs = args.slice(2, args.size)\n     val conf = new SparkConf\n-    run(appResource, mainClass, appArgs, conf)\n+    val env = filterSystemEnvironment(sys.env)\n+    run(appResource, mainClass, appArgs, conf, env)\n+  }\n+\n+  /**\n+   * Filter non-spark environment variables from any environment.\n+   */\n+  protected[rest] def filterSystemEnvironment(env: Map[String, String]): Map[String, String] = {",
    "line": 30
  }, {
    "author": {
      "login": "pashields"
    },
    "body": "Thanks for helping to guide this through. Apologies for lack of Scala knowledge.\n",
    "commit": "539988ce1399ec3b677ba96f5a3654e5068f0645",
    "createdAt": "2015-09-03T20:56:09Z",
    "diffHunk": "@@ -413,6 +412,16 @@ private[spark] object RestSubmissionClient {\n     val mainClass = args(1)\n     val appArgs = args.slice(2, args.size)\n     val conf = new SparkConf\n-    run(appResource, mainClass, appArgs, conf)\n+    val env = filterSystemEnvironment(sys.env)\n+    run(appResource, mainClass, appArgs, conf, env)\n+  }\n+\n+  /**\n+   * Filter non-spark environment variables from any environment.\n+   */\n+  protected[rest] def filterSystemEnvironment(env: Map[String, String]): Map[String, String] = {",
    "line": 30
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "no worries, hope to see more patches from you!\n",
    "commit": "539988ce1399ec3b677ba96f5a3654e5068f0645",
    "createdAt": "2015-09-03T21:19:05Z",
    "diffHunk": "@@ -413,6 +412,16 @@ private[spark] object RestSubmissionClient {\n     val mainClass = args(1)\n     val appArgs = args.slice(2, args.size)\n     val conf = new SparkConf\n-    run(appResource, mainClass, appArgs, conf)\n+    val env = filterSystemEnvironment(sys.env)\n+    run(appResource, mainClass, appArgs, conf, env)\n+  }\n+\n+  /**\n+   * Filter non-spark environment variables from any environment.\n+   */\n+  protected[rest] def filterSystemEnvironment(env: Map[String, String]): Map[String, String] = {",
    "line": 30
  }],
  "prId": 7979
}]