[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "This should be a conf. Look at how other confs are implemented in the Worker. Probably Env variables.\n",
    "commit": "1e3302dd5bcc335c819e08a0b93c0788a2969f79",
    "createdAt": "2016-10-13T18:52:38Z",
    "diffHunk": "@@ -115,6 +117,17 @@ private[ui] class LogPage(parent: WorkerWebUI) extends WebUIPage(\"logPage\") with\n     UIUtils.basicSparkPage(content, logType + \" log page for \" + pageName)\n   }\n \n+  private val UNCOMPRESSED_FILE_LENGTH_CACHE_SIZE = 100\n+  // Cache the file size, since it is expensive to compute the uncompressed file size.\n+  private val uncompressedFileLengthCache = CacheBuilder.newBuilder()\n+    .maximumSize(UNCOMPRESSED_FILE_LENGTH_CACHE_SIZE)"
  }],
  "prId": 15285
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "nit: uncompressedFileLength sounds like it is only for uncompressed files. how about fileUncompressedSizeCache?\n",
    "commit": "1e3302dd5bcc335c819e08a0b93c0788a2969f79",
    "createdAt": "2016-10-13T18:55:59Z",
    "diffHunk": "@@ -115,6 +117,17 @@ private[ui] class LogPage(parent: WorkerWebUI) extends WebUIPage(\"logPage\") with\n     UIUtils.basicSparkPage(content, logType + \" log page for \" + pageName)\n   }\n \n+  private val UNCOMPRESSED_FILE_LENGTH_CACHE_SIZE = 100\n+  // Cache the file size, since it is expensive to compute the uncompressed file size.\n+  private val uncompressedFileLengthCache = CacheBuilder.newBuilder()"
  }],
  "prId": 15285
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "I just learnt that CacheLoad.load has issues with obfuscating exception. So I think what may happen is that if Utils.getFileLength throws any exception, it will be wrapped and rethrown by Guava with a different stack trace, thus making it very confusing. I strongly suggest adding try catch here to log stuff (as warning) before rethrowing the same exception.\n",
    "commit": "1e3302dd5bcc335c819e08a0b93c0788a2969f79",
    "createdAt": "2016-10-17T21:50:20Z",
    "diffHunk": "@@ -115,6 +117,19 @@ private[ui] class LogPage(parent: WorkerWebUI) extends WebUIPage(\"logPage\") with\n     UIUtils.basicSparkPage(content, logType + \" log page for \" + pageName)\n   }\n \n+  private val fileUncompressedLengthCacheSize = parent.worker.conf.getInt(\n+      RollingFileAppender.FILE_UNCOMPRESSED_LENGTH_CACHE_SIZE,\n+      RollingFileAppender.DEFAULT_FILE_UNCOMPRESSED_LENGTH_CACHE_SIZE)\n+  // Cache the file size, since it is expensive to compute the uncompressed file size.\n+  private val fileUncompressedLengthCache = CacheBuilder.newBuilder()\n+    .maximumSize(fileUncompressedLengthCacheSize)\n+    .build[String, java.lang.Long](new CacheLoader[String, java.lang.Long]() {\n+      override def load(path: String): java.lang.Long = {\n+        Utils.getFileLength(new File(path))"
  }],
  "prId": 15285
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "I thought about the organization of the code, I dont like this. LogPage should not be aware of the details of compressing uncompressing, when Utils is doing the heavy lifting handling gzip files in a special manner. Its spreading the gzip support of log viewing between two classes unnecessary. Rather a cleaner approach is \n- Utils has the cache, and the cacheloader calls private util function to get gzip file size.\n- LogPage calls public method called `Utils.getFileSize(file, conf)`, which transparently handle compressed and non-compressed files.\n\nIn the Utils, the cache should be called `compressedLogFileLengthCache`. It is initialized when `Utils.getFileSize(file, conf)` is called for the first time, using the configurations in `conf`.\n",
    "commit": "1e3302dd5bcc335c819e08a0b93c0788a2969f79",
    "createdAt": "2016-10-17T22:48:49Z",
    "diffHunk": "@@ -115,6 +117,19 @@ private[ui] class LogPage(parent: WorkerWebUI) extends WebUIPage(\"logPage\") with\n     UIUtils.basicSparkPage(content, logType + \" log page for \" + pageName)\n   }\n \n+  private val fileUncompressedLengthCacheSize = parent.worker.conf.getInt("
  }],
  "prId": 15285
}]