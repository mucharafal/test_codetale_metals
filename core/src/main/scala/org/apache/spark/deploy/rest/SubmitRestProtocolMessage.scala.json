[{
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "why not just use POJOs for each of the message, with normal fields, and just let jackson take care of the conversion to & from json?  Eg. `case class SubmitDriverMessage(action: Action, message: Option[String], ...)`.  I don't see the advantage you get from putting everything into `fields` and doing your own manual type checking, maybe I am missing something fundamental?\n",
    "commit": "8d7ce0790b0e7b025fe553fa091e3b3f681fe829",
    "createdAt": "2015-01-28T21:17:38Z",
    "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import scala.collection.Map\n+import scala.collection.JavaConversions._\n+\n+import org.json4s.jackson.JsonMethods._\n+import org.json4s.JsonAST._\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * A general message exchanged in the stable application submission REST protocol.\n+ *\n+ * The message is represented by a set of fields in the form of key value pairs.\n+ * Each message must contain an ACTION field, which fully specifies the type of the message.\n+ * For compatibility with older versions of Spark, existing fields must not be removed or\n+ * modified, though new fields can be added as necessary.\n+ */\n+private[spark] abstract class SubmitRestProtocolMessage(\n+    action: SubmitRestProtocolAction,\n+    actionField: ActionField,\n+    requiredFields: Seq[SubmitRestProtocolField]) {\n+\n+  // Maintain the insert order for converting to JSON later\n+  private val fields = new java.util.LinkedHashMap[SubmitRestProtocolField, String]\n+  val className = Utils.getFormattedClassName(this)\n+\n+  // Set the action field\n+  fields.put(actionField, action.toString)\n+\n+  /** Return all fields currently set in this message. */\n+  def getFields: Map[SubmitRestProtocolField, String] = fields.toMap"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "I'd go one step further. Why implement your own REST server instead of using a JAX-RS implementation like Jersey?\n\nThat means that not only a lot of the protocol handling is \"automagic\", but it also means that you can define the protocol using public classes or interfaces and have MIMA check those for backwards compatibility.\n",
    "commit": "8d7ce0790b0e7b025fe553fa091e3b3f681fe829",
    "createdAt": "2015-01-28T21:31:11Z",
    "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import scala.collection.Map\n+import scala.collection.JavaConversions._\n+\n+import org.json4s.jackson.JsonMethods._\n+import org.json4s.JsonAST._\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * A general message exchanged in the stable application submission REST protocol.\n+ *\n+ * The message is represented by a set of fields in the form of key value pairs.\n+ * Each message must contain an ACTION field, which fully specifies the type of the message.\n+ * For compatibility with older versions of Spark, existing fields must not be removed or\n+ * modified, though new fields can be added as necessary.\n+ */\n+private[spark] abstract class SubmitRestProtocolMessage(\n+    action: SubmitRestProtocolAction,\n+    actionField: ActionField,\n+    requiredFields: Seq[SubmitRestProtocolField]) {\n+\n+  // Maintain the insert order for converting to JSON later\n+  private val fields = new java.util.LinkedHashMap[SubmitRestProtocolField, String]\n+  val className = Utils.getFormattedClassName(this)\n+\n+  // Set the action field\n+  fields.put(actionField, action.toString)\n+\n+  /** Return all fields currently set in this message. */\n+  def getFields: Map[SubmitRestProtocolField, String] = fields.toMap"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "That is potentially a good alternative and it might simplify the code quite significantly. However I am somewhat against using case classes for stable interfaces in general because they don't handle adding or rearranging fields elegantly. We've been using case classes for the `SparkListener` interface and have had to deal with nightmares with providing compatibility. That said I will experiment with using jackson's auto conversion.\n",
    "commit": "8d7ce0790b0e7b025fe553fa091e3b3f681fe829",
    "createdAt": "2015-01-28T23:06:01Z",
    "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import scala.collection.Map\n+import scala.collection.JavaConversions._\n+\n+import org.json4s.jackson.JsonMethods._\n+import org.json4s.JsonAST._\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * A general message exchanged in the stable application submission REST protocol.\n+ *\n+ * The message is represented by a set of fields in the form of key value pairs.\n+ * Each message must contain an ACTION field, which fully specifies the type of the message.\n+ * For compatibility with older versions of Spark, existing fields must not be removed or\n+ * modified, though new fields can be added as necessary.\n+ */\n+private[spark] abstract class SubmitRestProtocolMessage(\n+    action: SubmitRestProtocolAction,\n+    actionField: ActionField,\n+    requiredFields: Seq[SubmitRestProtocolField]) {\n+\n+  // Maintain the insert order for converting to JSON later\n+  private val fields = new java.util.LinkedHashMap[SubmitRestProtocolField, String]\n+  val className = Utils.getFormattedClassName(this)\n+\n+  // Set the action field\n+  fields.put(actionField, action.toString)\n+\n+  /** Return all fields currently set in this message. */\n+  def getFields: Map[SubmitRestProtocolField, String] = fields.toMap"
  }, {
    "author": {
      "login": "squito"
    },
    "body": "are you referring to using java serialization on case classes?  Thats totally different from going to & from json.  Even if you need to use some more advanced api from jackson, eg. adding annotations or something, it still seems like it would make the code a lot simpler.\n\nI'm not familiar w/ jersey but sounds like it might be an even better alternative\n",
    "commit": "8d7ce0790b0e7b025fe553fa091e3b3f681fe829",
    "createdAt": "2015-01-28T23:54:25Z",
    "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import scala.collection.Map\n+import scala.collection.JavaConversions._\n+\n+import org.json4s.jackson.JsonMethods._\n+import org.json4s.JsonAST._\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * A general message exchanged in the stable application submission REST protocol.\n+ *\n+ * The message is represented by a set of fields in the form of key value pairs.\n+ * Each message must contain an ACTION field, which fully specifies the type of the message.\n+ * For compatibility with older versions of Spark, existing fields must not be removed or\n+ * modified, though new fields can be added as necessary.\n+ */\n+private[spark] abstract class SubmitRestProtocolMessage(\n+    action: SubmitRestProtocolAction,\n+    actionField: ActionField,\n+    requiredFields: Seq[SubmitRestProtocolField]) {\n+\n+  // Maintain the insert order for converting to JSON later\n+  private val fields = new java.util.LinkedHashMap[SubmitRestProtocolField, String]\n+  val className = Utils.getFormattedClassName(this)\n+\n+  // Set the action field\n+  fields.put(actionField, action.toString)\n+\n+  /** Return all fields currently set in this message. */\n+  def getFields: Map[SubmitRestProtocolField, String] = fields.toMap"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Just to clarify, Jersey and Jackson are not mutually exclusive.\n\nYou'd define your API using Jersey (e.g. `class Foo { void submitMyApp(AppDetails app); }` but with JAX-RS annotations) and then register Jackson as the serializer / deserializer, so that `AppDetails` is \"magically\" converted to and from JSON.\n",
    "commit": "8d7ce0790b0e7b025fe553fa091e3b3f681fe829",
    "createdAt": "2015-01-28T23:57:22Z",
    "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import scala.collection.Map\n+import scala.collection.JavaConversions._\n+\n+import org.json4s.jackson.JsonMethods._\n+import org.json4s.JsonAST._\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * A general message exchanged in the stable application submission REST protocol.\n+ *\n+ * The message is represented by a set of fields in the form of key value pairs.\n+ * Each message must contain an ACTION field, which fully specifies the type of the message.\n+ * For compatibility with older versions of Spark, existing fields must not be removed or\n+ * modified, though new fields can be added as necessary.\n+ */\n+private[spark] abstract class SubmitRestProtocolMessage(\n+    action: SubmitRestProtocolAction,\n+    actionField: ActionField,\n+    requiredFields: Seq[SubmitRestProtocolField]) {\n+\n+  // Maintain the insert order for converting to JSON later\n+  private val fields = new java.util.LinkedHashMap[SubmitRestProtocolField, String]\n+  val className = Utils.getFormattedClassName(this)\n+\n+  // Set the action field\n+  fields.put(actionField, action.toString)\n+\n+  /** Return all fields currently set in this message. */\n+  def getFields: Map[SubmitRestProtocolField, String] = fields.toMap"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "No I wasn't referring to java serialization on case classes. I was referring exactly to using jackson with annotations and stuff.\n",
    "commit": "8d7ce0790b0e7b025fe553fa091e3b3f681fe829",
    "createdAt": "2015-01-29T17:39:29Z",
    "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import scala.collection.Map\n+import scala.collection.JavaConversions._\n+\n+import org.json4s.jackson.JsonMethods._\n+import org.json4s.JsonAST._\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * A general message exchanged in the stable application submission REST protocol.\n+ *\n+ * The message is represented by a set of fields in the form of key value pairs.\n+ * Each message must contain an ACTION field, which fully specifies the type of the message.\n+ * For compatibility with older versions of Spark, existing fields must not be removed or\n+ * modified, though new fields can be added as necessary.\n+ */\n+private[spark] abstract class SubmitRestProtocolMessage(\n+    action: SubmitRestProtocolAction,\n+    actionField: ActionField,\n+    requiredFields: Seq[SubmitRestProtocolField]) {\n+\n+  // Maintain the insert order for converting to JSON later\n+  private val fields = new java.util.LinkedHashMap[SubmitRestProtocolField, String]\n+  val className = Utils.getFormattedClassName(this)\n+\n+  // Set the action field\n+  fields.put(actionField, action.toString)\n+\n+  /** Return all fields currently set in this message. */\n+  def getFields: Map[SubmitRestProtocolField, String] = fields.toMap"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "The problem with magical conversion is long term compatibility. It is too easy to actually cause incompatible changes. We have a lot of painful experience with that in the past.\n",
    "commit": "8d7ce0790b0e7b025fe553fa091e3b3f681fe829",
    "createdAt": "2015-01-29T19:21:46Z",
    "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import scala.collection.Map\n+import scala.collection.JavaConversions._\n+\n+import org.json4s.jackson.JsonMethods._\n+import org.json4s.JsonAST._\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * A general message exchanged in the stable application submission REST protocol.\n+ *\n+ * The message is represented by a set of fields in the form of key value pairs.\n+ * Each message must contain an ACTION field, which fully specifies the type of the message.\n+ * For compatibility with older versions of Spark, existing fields must not be removed or\n+ * modified, though new fields can be added as necessary.\n+ */\n+private[spark] abstract class SubmitRestProtocolMessage(\n+    action: SubmitRestProtocolAction,\n+    actionField: ActionField,\n+    requiredFields: Seq[SubmitRestProtocolField]) {\n+\n+  // Maintain the insert order for converting to JSON later\n+  private val fields = new java.util.LinkedHashMap[SubmitRestProtocolField, String]\n+  val className = Utils.getFormattedClassName(this)\n+\n+  // Set the action field\n+  fields.put(actionField, action.toString)\n+\n+  /** Return all fields currently set in this message. */\n+  def getFields: Map[SubmitRestProtocolField, String] = fields.toMap"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "BTW that is almost always the problem with these magic conversions (including a lot of scala magic itself). In the short term they typically provide more concise code, but for something that'd require stability across releases, it is very hard to maintain because it is too easy to break the magic or change the magic.\n",
    "commit": "8d7ce0790b0e7b025fe553fa091e3b3f681fe829",
    "createdAt": "2015-01-29T19:23:13Z",
    "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import scala.collection.Map\n+import scala.collection.JavaConversions._\n+\n+import org.json4s.jackson.JsonMethods._\n+import org.json4s.JsonAST._\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * A general message exchanged in the stable application submission REST protocol.\n+ *\n+ * The message is represented by a set of fields in the form of key value pairs.\n+ * Each message must contain an ACTION field, which fully specifies the type of the message.\n+ * For compatibility with older versions of Spark, existing fields must not be removed or\n+ * modified, though new fields can be added as necessary.\n+ */\n+private[spark] abstract class SubmitRestProtocolMessage(\n+    action: SubmitRestProtocolAction,\n+    actionField: ActionField,\n+    requiredFields: Seq[SubmitRestProtocolField]) {\n+\n+  // Maintain the insert order for converting to JSON later\n+  private val fields = new java.util.LinkedHashMap[SubmitRestProtocolField, String]\n+  val className = Utils.getFormattedClassName(this)\n+\n+  // Set the action field\n+  fields.put(actionField, action.toString)\n+\n+  /** Return all fields currently set in this message. */\n+  def getFields: Map[SubmitRestProtocolField, String] = fields.toMap"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "We have a product that uses these \"magical tools\" and has gone through 10 API revisions with no compatibility issues... so, not convinced, sorry. Manually-written code is _much_ more prone to compatibility problems.\n",
    "commit": "8d7ce0790b0e7b025fe553fa091e3b3f681fe829",
    "createdAt": "2015-01-29T19:39:18Z",
    "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import scala.collection.Map\n+import scala.collection.JavaConversions._\n+\n+import org.json4s.jackson.JsonMethods._\n+import org.json4s.JsonAST._\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * A general message exchanged in the stable application submission REST protocol.\n+ *\n+ * The message is represented by a set of fields in the form of key value pairs.\n+ * Each message must contain an ACTION field, which fully specifies the type of the message.\n+ * For compatibility with older versions of Spark, existing fields must not be removed or\n+ * modified, though new fields can be added as necessary.\n+ */\n+private[spark] abstract class SubmitRestProtocolMessage(\n+    action: SubmitRestProtocolAction,\n+    actionField: ActionField,\n+    requiredFields: Seq[SubmitRestProtocolField]) {\n+\n+  // Maintain the insert order for converting to JSON later\n+  private val fields = new java.util.LinkedHashMap[SubmitRestProtocolField, String]\n+  val className = Utils.getFormattedClassName(this)\n+\n+  // Set the action field\n+  fields.put(actionField, action.toString)\n+\n+  /** Return all fields currently set in this message. */\n+  def getFields: Map[SubmitRestProtocolField, String] = fields.toMap"
  }, {
    "author": {
      "login": "squito"
    },
    "body": "I'm with @vanzin on this ... yes I'll agree \"magical tools\" often don't work as simply as advertised, but thats normally because you're trying to do something complicated, and its only more likely your home grown solution will also have an issue.  Its probably worth writing some unit tests to verify things work as expected, but you've got to do that with anything home grown in any case.\n\nEven say it doesn't work well with scala case classes, and we need to use plain java classes, thats still a lot better than something totally homegrown.\n\nJust as one tiny example of how this is worse than converting normal java objects: because you're trying to do manual type checking at runtime, you've converted a little typo like `message.setField(SUCCESS,\"tru\")` from a compile time error to a runtime error.  \n",
    "commit": "8d7ce0790b0e7b025fe553fa091e3b3f681fe829",
    "createdAt": "2015-01-29T20:18:44Z",
    "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import scala.collection.Map\n+import scala.collection.JavaConversions._\n+\n+import org.json4s.jackson.JsonMethods._\n+import org.json4s.JsonAST._\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * A general message exchanged in the stable application submission REST protocol.\n+ *\n+ * The message is represented by a set of fields in the form of key value pairs.\n+ * Each message must contain an ACTION field, which fully specifies the type of the message.\n+ * For compatibility with older versions of Spark, existing fields must not be removed or\n+ * modified, though new fields can be added as necessary.\n+ */\n+private[spark] abstract class SubmitRestProtocolMessage(\n+    action: SubmitRestProtocolAction,\n+    actionField: ActionField,\n+    requiredFields: Seq[SubmitRestProtocolField]) {\n+\n+  // Maintain the insert order for converting to JSON later\n+  private val fields = new java.util.LinkedHashMap[SubmitRestProtocolField, String]\n+  val className = Utils.getFormattedClassName(this)\n+\n+  // Set the action field\n+  fields.put(actionField, action.toString)\n+\n+  /** Return all fields currently set in this message. */\n+  def getFields: Map[SubmitRestProtocolField, String] = fields.toMap"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "Is that how we have been doing it in Spark for all json serialization? Are you suggesting we should change all of them?\n",
    "commit": "8d7ce0790b0e7b025fe553fa091e3b3f681fe829",
    "createdAt": "2015-01-29T21:09:52Z",
    "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import scala.collection.Map\n+import scala.collection.JavaConversions._\n+\n+import org.json4s.jackson.JsonMethods._\n+import org.json4s.JsonAST._\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * A general message exchanged in the stable application submission REST protocol.\n+ *\n+ * The message is represented by a set of fields in the form of key value pairs.\n+ * Each message must contain an ACTION field, which fully specifies the type of the message.\n+ * For compatibility with older versions of Spark, existing fields must not be removed or\n+ * modified, though new fields can be added as necessary.\n+ */\n+private[spark] abstract class SubmitRestProtocolMessage(\n+    action: SubmitRestProtocolAction,\n+    actionField: ActionField,\n+    requiredFields: Seq[SubmitRestProtocolField]) {\n+\n+  // Maintain the insert order for converting to JSON later\n+  private val fields = new java.util.LinkedHashMap[SubmitRestProtocolField, String]\n+  val className = Utils.getFormattedClassName(this)\n+\n+  // Set the action field\n+  fields.put(actionField, action.toString)\n+\n+  /** Return all fields currently set in this message. */\n+  def getFields: Map[SubmitRestProtocolField, String] = fields.toMap"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "BTW I'm not sure why we are arguing about this. The most important part is the protocol itself, less so about how the protocol is implemented. Implementation changes all the time, and can be changed easily. \n",
    "commit": "8d7ce0790b0e7b025fe553fa091e3b3f681fe829",
    "createdAt": "2015-01-29T21:10:35Z",
    "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import scala.collection.Map\n+import scala.collection.JavaConversions._\n+\n+import org.json4s.jackson.JsonMethods._\n+import org.json4s.JsonAST._\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * A general message exchanged in the stable application submission REST protocol.\n+ *\n+ * The message is represented by a set of fields in the form of key value pairs.\n+ * Each message must contain an ACTION field, which fully specifies the type of the message.\n+ * For compatibility with older versions of Spark, existing fields must not be removed or\n+ * modified, though new fields can be added as necessary.\n+ */\n+private[spark] abstract class SubmitRestProtocolMessage(\n+    action: SubmitRestProtocolAction,\n+    actionField: ActionField,\n+    requiredFields: Seq[SubmitRestProtocolField]) {\n+\n+  // Maintain the insert order for converting to JSON later\n+  private val fields = new java.util.LinkedHashMap[SubmitRestProtocolField, String]\n+  val className = Utils.getFormattedClassName(this)\n+\n+  // Set the action field\n+  fields.put(actionField, action.toString)\n+\n+  /** Return all fields currently set in this message. */\n+  def getFields: Map[SubmitRestProtocolField, String] = fields.toMap"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "> Is that how we have been doing it in Spark for all json serialization? Are you suggesting we should change all of them?\n\nI'd love to have the existing JSON serializers in Spark use something like Jackson. `JsonProtocol.scala` is an abomination and a maintenance nightmare. (/imho)\n\nBTW, as Matei requested, we should discuss the protocol in the bug. We're reviewing the code here.\n",
    "commit": "8d7ce0790b0e7b025fe553fa091e3b3f681fe829",
    "createdAt": "2015-01-29T21:12:31Z",
    "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import scala.collection.Map\n+import scala.collection.JavaConversions._\n+\n+import org.json4s.jackson.JsonMethods._\n+import org.json4s.JsonAST._\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * A general message exchanged in the stable application submission REST protocol.\n+ *\n+ * The message is represented by a set of fields in the form of key value pairs.\n+ * Each message must contain an ACTION field, which fully specifies the type of the message.\n+ * For compatibility with older versions of Spark, existing fields must not be removed or\n+ * modified, though new fields can be added as necessary.\n+ */\n+private[spark] abstract class SubmitRestProtocolMessage(\n+    action: SubmitRestProtocolAction,\n+    actionField: ActionField,\n+    requiredFields: Seq[SubmitRestProtocolField]) {\n+\n+  // Maintain the insert order for converting to JSON later\n+  private val fields = new java.util.LinkedHashMap[SubmitRestProtocolField, String]\n+  val className = Utils.getFormattedClassName(this)\n+\n+  // Set the action field\n+  fields.put(actionField, action.toString)\n+\n+  /** Return all fields currently set in this message. */\n+  def getFields: Map[SubmitRestProtocolField, String] = fields.toMap"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "> I'd love to have the existing JSON serializers in Spark use something like Jackson. JsonProtocol.scala is an abomination and a maintenance nightmare. (/imho)\n\n@vanzin I agree 100%. That's why I went with a more automatic approach in constructing the JSON here. Though I'd argue that the biggest reason why it's a maintenance nightmare is because we're exposing the listener events as public case classes, which really don't support adding new fields without breaking compatibility one way or the other.\n",
    "commit": "8d7ce0790b0e7b025fe553fa091e3b3f681fe829",
    "createdAt": "2015-01-29T23:32:38Z",
    "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import scala.collection.Map\n+import scala.collection.JavaConversions._\n+\n+import org.json4s.jackson.JsonMethods._\n+import org.json4s.JsonAST._\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * A general message exchanged in the stable application submission REST protocol.\n+ *\n+ * The message is represented by a set of fields in the form of key value pairs.\n+ * Each message must contain an ACTION field, which fully specifies the type of the message.\n+ * For compatibility with older versions of Spark, existing fields must not be removed or\n+ * modified, though new fields can be added as necessary.\n+ */\n+private[spark] abstract class SubmitRestProtocolMessage(\n+    action: SubmitRestProtocolAction,\n+    actionField: ActionField,\n+    requiredFields: Seq[SubmitRestProtocolField]) {\n+\n+  // Maintain the insert order for converting to JSON later\n+  private val fields = new java.util.LinkedHashMap[SubmitRestProtocolField, String]\n+  val className = Utils.getFormattedClassName(this)\n+\n+  // Set the action field\n+  fields.put(actionField, action.toString)\n+\n+  /** Return all fields currently set in this message. */\n+  def getFields: Map[SubmitRestProtocolField, String] = fields.toMap"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "By the way as of the latest commit I went with the jackson approach, which simplifies the code considerably as expected since we no longer have to rely on all the scala class hierarchy magic. Please have a look.\n",
    "commit": "8d7ce0790b0e7b025fe553fa091e3b3f681fe829",
    "createdAt": "2015-01-29T23:35:11Z",
    "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import scala.collection.Map\n+import scala.collection.JavaConversions._\n+\n+import org.json4s.jackson.JsonMethods._\n+import org.json4s.JsonAST._\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * A general message exchanged in the stable application submission REST protocol.\n+ *\n+ * The message is represented by a set of fields in the form of key value pairs.\n+ * Each message must contain an ACTION field, which fully specifies the type of the message.\n+ * For compatibility with older versions of Spark, existing fields must not be removed or\n+ * modified, though new fields can be added as necessary.\n+ */\n+private[spark] abstract class SubmitRestProtocolMessage(\n+    action: SubmitRestProtocolAction,\n+    actionField: ActionField,\n+    requiredFields: Seq[SubmitRestProtocolField]) {\n+\n+  // Maintain the insert order for converting to JSON later\n+  private val fields = new java.util.LinkedHashMap[SubmitRestProtocolField, String]\n+  val className = Utils.getFormattedClassName(this)\n+\n+  // Set the action field\n+  fields.put(actionField, action.toString)\n+\n+  /** Return all fields currently set in this message. */\n+  def getFields: Map[SubmitRestProtocolField, String] = fields.toMap"
  }],
  "prId": 4216
}, {
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "is the extra `pretty(parse` to get indentation?  You can do that by configuring the jackson mapper with: `mapper.enable(SerializationFeature.INDENT_OUTPUT)`, so you don't need to reparse the json\n",
    "commit": "8d7ce0790b0e7b025fe553fa091e3b3f681fe829",
    "createdAt": "2015-01-30T22:03:58Z",
    "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import com.fasterxml.jackson.annotation._\n+import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility\n+import com.fasterxml.jackson.annotation.JsonInclude.Include\n+import com.fasterxml.jackson.databind.ObjectMapper\n+import org.json4s.JsonAST._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * An abstract message exchanged in the REST application submission protocol.\n+ *\n+ * This message is intended to be serialized to and deserialized from JSON in the exchange.\n+ * Each message can either be a request or a response and consists of three common fields:\n+ *   (1) the action, which fully specifies the type of the message\n+ *   (2) the Spark version of the client / server\n+ *   (3) an optional message\n+ */\n+@JsonInclude(Include.NON_NULL)\n+@JsonAutoDetect(getterVisibility = Visibility.ANY, setterVisibility = Visibility.ANY)\n+@JsonPropertyOrder(alphabetic = true)\n+abstract class SubmitRestProtocolMessage {\n+  private val messageType = Utils.getFormattedClassName(this)\n+  protected val action: String = messageType\n+  protected val sparkVersion: SubmitRestProtocolField[String]\n+  protected val message = new SubmitRestProtocolField[String](\"message\")\n+\n+  // Required for JSON de/serialization and not explicitly used\n+  private def getAction: String = action\n+  private def setAction(s: String): this.type = this\n+\n+  // Intended for the user and not for JSON de/serialization, which expects more specific keys\n+  @JsonIgnore\n+  def getSparkVersion: String\n+  @JsonIgnore\n+  def setSparkVersion(s: String): this.type\n+\n+  def getMessage: String = message.toString\n+  def setMessage(s: String): this.type = setField(message, s)\n+\n+  /**\n+   * Serialize the message to JSON.\n+   * This also ensures that the message is valid and its fields are in the expected format.\n+   */\n+  def toJson: String = {\n+    validate()\n+    val mapper = new ObjectMapper\n+    pretty(parse(mapper.writeValueAsString(this)))"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "great\n",
    "commit": "8d7ce0790b0e7b025fe553fa091e3b3f681fe829",
    "createdAt": "2015-01-30T22:19:13Z",
    "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import com.fasterxml.jackson.annotation._\n+import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility\n+import com.fasterxml.jackson.annotation.JsonInclude.Include\n+import com.fasterxml.jackson.databind.ObjectMapper\n+import org.json4s.JsonAST._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * An abstract message exchanged in the REST application submission protocol.\n+ *\n+ * This message is intended to be serialized to and deserialized from JSON in the exchange.\n+ * Each message can either be a request or a response and consists of three common fields:\n+ *   (1) the action, which fully specifies the type of the message\n+ *   (2) the Spark version of the client / server\n+ *   (3) an optional message\n+ */\n+@JsonInclude(Include.NON_NULL)\n+@JsonAutoDetect(getterVisibility = Visibility.ANY, setterVisibility = Visibility.ANY)\n+@JsonPropertyOrder(alphabetic = true)\n+abstract class SubmitRestProtocolMessage {\n+  private val messageType = Utils.getFormattedClassName(this)\n+  protected val action: String = messageType\n+  protected val sparkVersion: SubmitRestProtocolField[String]\n+  protected val message = new SubmitRestProtocolField[String](\"message\")\n+\n+  // Required for JSON de/serialization and not explicitly used\n+  private def getAction: String = action\n+  private def setAction(s: String): this.type = this\n+\n+  // Intended for the user and not for JSON de/serialization, which expects more specific keys\n+  @JsonIgnore\n+  def getSparkVersion: String\n+  @JsonIgnore\n+  def setSparkVersion(s: String): this.type\n+\n+  def getMessage: String = message.toString\n+  def setMessage(s: String): this.type = setField(message, s)\n+\n+  /**\n+   * Serialize the message to JSON.\n+   * This also ensures that the message is valid and its fields are in the expected format.\n+   */\n+  def toJson: String = {\n+    validate()\n+    val mapper = new ObjectMapper\n+    pretty(parse(mapper.writeValueAsString(this)))"
  }],
  "prId": 4216
}]