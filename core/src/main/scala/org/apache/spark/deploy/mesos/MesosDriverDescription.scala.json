[{
  "comments": [{
    "author": {
      "login": "mgummelt"
    },
    "body": "This is more semantically correct, and helps with some consistency issues in the docker methods\n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-20T01:19:50Z",
    "diffHunk": "@@ -40,24 +41,28 @@ private[spark] class MesosDriverDescription(\n     val cores: Double,\n     val supervise: Boolean,\n     val command: Command,\n-    val schedulerProperties: Map[String, String],\n+    _schedulerProperties: Map[String, String],\n     val submissionId: String,\n     val submissionDate: Date,\n     val retryState: Option[MesosClusterRetryState] = None)\n   extends Serializable {\n \n+  val sc = new SparkConf(false)\n+  _schedulerProperties.foreach {case (k, v) => sc.set(k, v)}\n+\n   def copy(\n       name: String = name,\n       jarUrl: String = jarUrl,\n       mem: Int = mem,\n       cores: Double = cores,\n       supervise: Boolean = supervise,\n       command: Command = command,\n-      schedulerProperties: Map[String, String] = schedulerProperties,\n+      schedulerProperties: SparkConf = sc,"
  }, {
    "author": {
      "login": "skonto"
    },
    "body": "Can you point me there? sc reminds me of spark conentext i would use sparkConf or something.\n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-21T10:52:52Z",
    "diffHunk": "@@ -40,24 +41,28 @@ private[spark] class MesosDriverDescription(\n     val cores: Double,\n     val supervise: Boolean,\n     val command: Command,\n-    val schedulerProperties: Map[String, String],\n+    _schedulerProperties: Map[String, String],\n     val submissionId: String,\n     val submissionDate: Date,\n     val retryState: Option[MesosClusterRetryState] = None)\n   extends Serializable {\n \n+  val sc = new SparkConf(false)\n+  _schedulerProperties.foreach {case (k, v) => sc.set(k, v)}\n+\n   def copy(\n       name: String = name,\n       jarUrl: String = jarUrl,\n       mem: Int = mem,\n       cores: Double = cores,\n       supervise: Boolean = supervise,\n       command: Command = command,\n-      schedulerProperties: Map[String, String] = schedulerProperties,\n+      schedulerProperties: SparkConf = sc,"
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "Ah that's right.  I'll rename to `conf`\n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-21T17:10:04Z",
    "diffHunk": "@@ -40,24 +41,28 @@ private[spark] class MesosDriverDescription(\n     val cores: Double,\n     val supervise: Boolean,\n     val command: Command,\n-    val schedulerProperties: Map[String, String],\n+    _schedulerProperties: Map[String, String],\n     val submissionId: String,\n     val submissionDate: Date,\n     val retryState: Option[MesosClusterRetryState] = None)\n   extends Serializable {\n \n+  val sc = new SparkConf(false)\n+  _schedulerProperties.foreach {case (k, v) => sc.set(k, v)}\n+\n   def copy(\n       name: String = name,\n       jarUrl: String = jarUrl,\n       mem: Int = mem,\n       cores: Double = cores,\n       supervise: Boolean = supervise,\n       command: Command = command,\n-      schedulerProperties: Map[String, String] = schedulerProperties,\n+      schedulerProperties: SparkConf = sc,"
  }],
  "prId": 14275
}, {
  "comments": [{
    "author": {
      "login": "skonto"
    },
    "body": "Update tag parameter.\n@param schedulerProperties Extra properties to pass the Mesos scheduler\n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-21T10:51:22Z",
    "diffHunk": "@@ -40,24 +41,28 @@ private[spark] class MesosDriverDescription(\n     val cores: Double,\n     val supervise: Boolean,\n     val command: Command,\n-    val schedulerProperties: Map[String, String],\n+    _schedulerProperties: Map[String, String],"
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "I removed the underscore.  I was thinking python for some reason.\n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-21T17:09:47Z",
    "diffHunk": "@@ -40,24 +41,28 @@ private[spark] class MesosDriverDescription(\n     val cores: Double,\n     val supervise: Boolean,\n     val command: Command,\n-    val schedulerProperties: Map[String, String],\n+    _schedulerProperties: Map[String, String],"
  }],
  "prId": 14275
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Why can't this be `val` BTW?\n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-22T12:05:17Z",
    "diffHunk": "@@ -40,24 +41,28 @@ private[spark] class MesosDriverDescription(\n     val cores: Double,\n     val supervise: Boolean,\n     val command: Command,\n-    val schedulerProperties: Map[String, String],\n+    schedulerProperties: Map[String, String],",
    "line": 13
  }, {
    "author": {
      "login": "skonto"
    },
    "body": "probably because its not used outside the class from what i recall. There is no reason why it cant bw.\n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-22T12:25:01Z",
    "diffHunk": "@@ -40,24 +41,28 @@ private[spark] class MesosDriverDescription(\n     val cores: Double,\n     val supervise: Boolean,\n     val command: Command,\n-    val schedulerProperties: Map[String, String],\n+    schedulerProperties: Map[String, String],",
    "line": 13
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "I'm probably missing your point but would that affect `val`? it might be `private` too but this change just removes `val`.\n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-22T12:27:23Z",
    "diffHunk": "@@ -40,24 +41,28 @@ private[spark] class MesosDriverDescription(\n     val cores: Double,\n     val supervise: Boolean,\n     val command: Command,\n-    val schedulerProperties: Map[String, String],\n+    schedulerProperties: Map[String, String],",
    "line": 13
  }, {
    "author": {
      "login": "mgummelt"
    },
    "body": "Removing `val` means `schedulerProperties` is not saved as a field of the class.  It's just used during construction.  I could also make this `private val` if that's more standard in this project.  \n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-22T17:30:35Z",
    "diffHunk": "@@ -40,24 +41,28 @@ private[spark] class MesosDriverDescription(\n     val cores: Double,\n     val supervise: Boolean,\n     val command: Command,\n-    val schedulerProperties: Map[String, String],\n+    schedulerProperties: Map[String, String],",
    "line": 13
  }, {
    "author": {
      "login": "skonto"
    },
    "body": "That was my point too above. No public getters generated if no val is used and this can be justified if the field is not used in general outside of the class. I would choose for example private val if I need access to the private val of an instance of a class T within some other instance of T. The latter is not possible if I just use the field without val.\n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-23T21:25:36Z",
    "diffHunk": "@@ -40,24 +41,28 @@ private[spark] class MesosDriverDescription(\n     val cores: Double,\n     val supervise: Boolean,\n     val command: Command,\n-    val schedulerProperties: Map[String, String],\n+    schedulerProperties: Map[String, String],",
    "line": 13
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Oh right, this is what causes it to become a field. Yeah I suspect lots and lots of things in the code should not even be `val`.\n",
    "commit": "ec6707e35784113896063f5b5aec042e2e54ecb1",
    "createdAt": "2016-07-24T10:13:42Z",
    "diffHunk": "@@ -40,24 +41,28 @@ private[spark] class MesosDriverDescription(\n     val cores: Double,\n     val supervise: Boolean,\n     val command: Command,\n-    val schedulerProperties: Map[String, String],\n+    schedulerProperties: Map[String, String],",
    "line": 13
  }],
  "prId": 14275
}]