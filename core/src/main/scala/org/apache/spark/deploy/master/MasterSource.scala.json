[{
  "comments": [{
    "author": {
      "login": "jerryshao"
    },
    "body": "Do you always see these two values are different, from my understanding they should be same, perhaps there's some race condition which makes them different.\n",
    "commit": "f040710d51e82817c0f9f08f5449c229b7883615",
    "createdAt": "2016-01-28T08:33:42Z",
    "diffHunk": "@@ -42,6 +42,6 @@ private[spark] class MasterSource(val master: Master) extends Source {\n \n   // Gauge for waiting application numbers in cluster\n   metricRegistry.register(MetricRegistry.name(\"waitingApps\"), new Gauge[Int] {\n-    override def getValue: Int = master.waitingApps.size\n+    override def getValue: Int = master.apps.filter(_.state == ApplicationState.WAITING).size",
    "line": 5
  }, {
    "author": {
      "login": "RaafatAkkad"
    },
    "body": "@jerryshao In all my tests using multiple Spark versions, the \"apps\" and \"waitingApps\" metrics have been the same. Do you know if the \"waitingApps\" metric is intended to refer to something other than the number of apps that are currently in the waiting state?\nThanks\n",
    "commit": "f040710d51e82817c0f9f08f5449c229b7883615",
    "createdAt": "2016-01-29T22:38:48Z",
    "diffHunk": "@@ -42,6 +42,6 @@ private[spark] class MasterSource(val master: Master) extends Source {\n \n   // Gauge for waiting application numbers in cluster\n   metricRegistry.register(MetricRegistry.name(\"waitingApps\"), new Gauge[Int] {\n-    override def getValue: Int = master.waitingApps.size\n+    override def getValue: Int = master.apps.filter(_.state == ApplicationState.WAITING).size",
    "line": 5
  }, {
    "author": {
      "login": "jerryshao"
    },
    "body": "\"waitingApps\" suppose to refer to the number of waiting applications in the Master, and `apps` includes all the uncompleted applications including `waitingApps`. If there's any inconsistent meaning, I think we should find out what actual `waitingApps` usage in `Master`, to see if there's any bug in it.\n",
    "commit": "f040710d51e82817c0f9f08f5449c229b7883615",
    "createdAt": "2016-01-30T02:10:25Z",
    "diffHunk": "@@ -42,6 +42,6 @@ private[spark] class MasterSource(val master: Master) extends Source {\n \n   // Gauge for waiting application numbers in cluster\n   metricRegistry.register(MetricRegistry.name(\"waitingApps\"), new Gauge[Int] {\n-    override def getValue: Int = master.waitingApps.size\n+    override def getValue: Int = master.apps.filter(_.state == ApplicationState.WAITING).size",
    "line": 5
  }, {
    "author": {
      "login": "jerryshao"
    },
    "body": "Digging a bit about current usage of `waitingApps`, I think it cannot well reflect the actual meaning of waiting applications, even RUNNING applications are still in the `waitingApps` list. So I think your fix is simple and effective.\n",
    "commit": "f040710d51e82817c0f9f08f5449c229b7883615",
    "createdAt": "2016-02-01T07:06:14Z",
    "diffHunk": "@@ -42,6 +42,6 @@ private[spark] class MasterSource(val master: Master) extends Source {\n \n   // Gauge for waiting application numbers in cluster\n   metricRegistry.register(MetricRegistry.name(\"waitingApps\"), new Gauge[Int] {\n-    override def getValue: Int = master.waitingApps.size\n+    override def getValue: Int = master.apps.filter(_.state == ApplicationState.WAITING).size",
    "line": 5
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "ok, I agree\n",
    "commit": "f040710d51e82817c0f9f08f5449c229b7883615",
    "createdAt": "2016-02-02T00:10:42Z",
    "diffHunk": "@@ -42,6 +42,6 @@ private[spark] class MasterSource(val master: Master) extends Source {\n \n   // Gauge for waiting application numbers in cluster\n   metricRegistry.register(MetricRegistry.name(\"waitingApps\"), new Gauge[Int] {\n-    override def getValue: Int = master.waitingApps.size\n+    override def getValue: Int = master.apps.filter(_.state == ApplicationState.WAITING).size",
    "line": 5
  }],
  "prId": 10959
}]