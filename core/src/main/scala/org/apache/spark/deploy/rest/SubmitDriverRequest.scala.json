[{
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "I think you're still doing a lot more work to futz with the json than need you to.  I dug into a little bit, and I think the problem is that the json4s wrapper around jackson is lacking a lot of features.  And to use jackson well, you need to add in the [scala module](http://search.maven.org/#artifactdetails%7Ccom.fasterxml.jackson.module%7Cjackson-module-scala_2.10%7C2.3.1%7Cbundle) (or just define these simple bean classes in java).  Eg.:\n\n```\nclass FooBar{\n  var blah: String = _\n  var ooga: Array[String] = _\n  var wakka: Map[String,String] = _\n}\nval f = new FooBar\nf.blah = \"hi\"\nf.ooga = Array(\"flim\", \"flam\", \"floop\")\nf.wakka = Map(\"bip\" -> \"bop\", \"beep\" -> \"boop\")\nval mapper = new ObjectMapper()\nmapper.registerModule(com.fasterxml.jackson.module.scala.DefaultScalaModule)\nprintln(mapper.writeValueAsString(f))\n```\n\nprints out `{\"blah\":\"hi\",\"ooga\":[\"flim\",\"flam\",\"floop\"],\"wakka\":{\"bip\":\"bop\",\"beep\":\"boop\"}}`\n(it throws an exception w/out the scala module)\n",
    "commit": "8d7ce0790b0e7b025fe553fa091e3b3f681fe829",
    "createdAt": "2015-01-30T23:18:37Z",
    "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import scala.collection.mutable\n+import scala.collection.mutable.ArrayBuffer\n+\n+import com.fasterxml.jackson.annotation.{JsonIgnore, JsonProperty}\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.util.JsonProtocol\n+\n+/**\n+ * A request to submit a driver in the REST application submission protocol.\n+ */\n+class SubmitDriverRequest extends SubmitRestProtocolRequest {\n+  private val appName = new SubmitRestProtocolField[String](\"appName\")\n+  private val appResource = new SubmitRestProtocolField[String](\"appResource\")\n+  private val mainClass = new SubmitRestProtocolField[String](\"mainClass\")\n+  private val jars = new SubmitRestProtocolField[String](\"jars\")\n+  private val files = new SubmitRestProtocolField[String](\"files\")\n+  private val pyFiles = new SubmitRestProtocolField[String](\"pyFiles\")\n+  private val driverMemory = new SubmitRestProtocolField[String](\"driverMemory\")\n+  private val driverCores = new SubmitRestProtocolField[Int](\"driverCores\")\n+  private val driverExtraJavaOptions = new SubmitRestProtocolField[String](\"driverExtraJavaOptions\")\n+  private val driverExtraClassPath = new SubmitRestProtocolField[String](\"driverExtraClassPath\")\n+  private val driverExtraLibraryPath = new SubmitRestProtocolField[String](\"driverExtraLibraryPath\")\n+  private val superviseDriver = new SubmitRestProtocolField[Boolean](\"superviseDriver\")\n+  private val executorMemory = new SubmitRestProtocolField[String](\"executorMemory\")\n+  private val totalExecutorCores = new SubmitRestProtocolField[Int](\"totalExecutorCores\")\n+\n+  // Special fields\n+  private val appArgs = new ArrayBuffer[String]\n+  private val sparkProperties = new mutable.HashMap[String, String]\n+  private val envVars = new mutable.HashMap[String, String]\n+\n+  def getAppName: String = appName.toString\n+  def getAppResource: String = appResource.toString\n+  def getMainClass: String = mainClass.toString\n+  def getJars: String = jars.toString\n+  def getFiles: String = files.toString\n+  def getPyFiles: String = pyFiles.toString\n+  def getDriverMemory: String = driverMemory.toString\n+  def getDriverCores: String = driverCores.toString\n+  def getDriverExtraJavaOptions: String = driverExtraJavaOptions.toString\n+  def getDriverExtraClassPath: String = driverExtraClassPath.toString\n+  def getDriverExtraLibraryPath: String = driverExtraLibraryPath.toString\n+  def getSuperviseDriver: String = superviseDriver.toString\n+  def getExecutorMemory: String = executorMemory.toString\n+  def getTotalExecutorCores: String = totalExecutorCores.toString\n+\n+  // Special getters required for JSON serialization\n+  @JsonProperty(\"appArgs\")\n+  private def getAppArgsJson: String = arrayToJson(getAppArgs)"
  }],
  "prId": 4216
}]