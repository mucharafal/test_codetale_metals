[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "This comment is being too specific. Just say\n\n```\nA client that submits applications to a the [[RestServer]].\n```\n",
    "commit": "069e9463b377d1a0c7e4c35619e06213eae07fc2",
    "createdAt": "2015-04-08T21:48:44Z",
    "diffHunk": "@@ -30,8 +30,10 @@ import org.apache.spark.{Logging, SparkConf, SPARK_VERSION => sparkVersion}\n import org.apache.spark.util.Utils\n \n /**\n- * A client that submits applications to the standalone Master using a REST protocol.\n- * This client is intended to communicate with the [[StandaloneRestServer]] and is\n+ * A client that submits applications to the standalone Master and Mesos dispatcher\n+ * using a REST protocol.\n+ * This client is intended to communicate with the [[StandaloneRestServer]] or\n+ * [[org.apache.spark.deploy.mesos.MesosClusterDispatcher]] and is"
  }],
  "prId": 5144
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "This logic is duplicated here and in Spark submit. Maybe it makes sense to have\n\n```\nprivate val supportedMasterPrefixes = Seq(\"spark://\", \"mesos://\")\n\nprivate def getBaseUrl(master: String): String = {\n  var masterUrl = master\n  supportedMasterPrefixes.foreach { prefix =>\n    if (master.startsWith(prefix)) {\n      masterUrl = master.stripPrefix(prefix)\n    }\n  }\n  masterUrl = masterUrl.stripSuffix(\"/\")\n  s\"http://$masterUrl/...\"\n}\n\ndef validateMaster(master: String): Unit = {\n  val valid = supportedMasterPrefixes.exists { prefix => master.startsWith(prefix) }\n  if (!valid) {\n    throw new IllegalArgumentException(\n       \"This REST client only supports master URLs that start with \" +\n       \"one of the following: \" + supportedMasterPrefixes.mkString(\",\"))\n  }\n}\n```\n\nThen Spark submit can just call `validateMaster`. For that you might need to make this method static.\n",
    "commit": "069e9463b377d1a0c7e4c35619e06213eae07fc2",
    "createdAt": "2015-04-08T22:00:37Z",
    "diffHunk": "@@ -219,14 +221,20 @@ private[deploy] class StandaloneRestClient extends Logging {\n \n   /** Return the base URL for communicating with the server, including the protocol version. */\n   private def getBaseUrl(master: String): String = {\n-    val masterUrl = master.stripPrefix(\"spark://\").stripSuffix(\"/\")\n+    val masterUrl = if (master.startsWith(\"spark://\")) {\n+      master.stripPrefix(\"spark://\").stripSuffix(\"/\")\n+    } else {\n+      master.stripPrefix(\"mesos://\").stripSuffix(\"/\")\n+    }"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "(update: as discussed offline we'll just remove the check in `SparkSubmitArguments`, which is somewhat redundant with the checks here)\n",
    "commit": "069e9463b377d1a0c7e4c35619e06213eae07fc2",
    "createdAt": "2015-04-09T16:46:12Z",
    "diffHunk": "@@ -219,14 +221,20 @@ private[deploy] class StandaloneRestClient extends Logging {\n \n   /** Return the base URL for communicating with the server, including the protocol version. */\n   private def getBaseUrl(master: String): String = {\n-    val masterUrl = master.stripPrefix(\"spark://\").stripSuffix(\"/\")\n+    val masterUrl = if (master.startsWith(\"spark://\")) {\n+      master.stripPrefix(\"spark://\").stripSuffix(\"/\")\n+    } else {\n+      master.stripPrefix(\"mesos://\").stripSuffix(\"/\")\n+    }"
  }],
  "prId": 5144
}]