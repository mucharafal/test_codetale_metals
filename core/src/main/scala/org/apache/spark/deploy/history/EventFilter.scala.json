[{
  "comments": [{
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "So the result can have three kind of values: Some(true), Some(false), None.\r\n\r\nSome(true) means \"yes the event should be retained\", and Some(false) means \"no the event can be dropped\", and None means \"I'm not aware of this event, I don't care.\".\r\n\r\nThe event will be filtered \"out\" only when all filters except ones returning None return Some(false).",
    "commit": "e5d925025a606cbb5c365303149272900f255e33",
    "createdAt": "2019-11-06T21:47:26Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.history\n+\n+import org.apache.spark.scheduler._\n+\n+trait EventFilterBuilder extends SparkListenerInterface {\n+  def createFilter(): EventFilter\n+}\n+\n+trait EventFilter {\n+  def filterStageCompleted(event: SparkListenerStageCompleted): Option[Boolean] = None",
    "line": 76
  }],
  "prId": 26416
}, {
  "comments": [{
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Do we want to expose it to the users? Shouldn't this be `private[spark]`?",
    "commit": "e5d925025a606cbb5c365303149272900f255e33",
    "createdAt": "2019-11-11T10:49:57Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.history\n+\n+import org.apache.spark.scheduler._\n+\n+trait EventFilterBuilder extends SparkListenerInterface {"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "No. I also changed the scope for them in my non-pushed commits, but thanks for suggestion!",
    "commit": "e5d925025a606cbb5c365303149272900f255e33",
    "createdAt": "2019-11-13T00:33:52Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.history\n+\n+import org.apache.spark.scheduler._\n+\n+trait EventFilterBuilder extends SparkListenerInterface {"
  }],
  "prId": 26416
}, {
  "comments": [{
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Would be good to mention what happens when all the filters vote with `None`.",
    "commit": "e5d925025a606cbb5c365303149272900f255e33",
    "createdAt": "2019-11-14T16:01:38Z",
    "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.history\n+\n+import org.apache.spark.scheduler._\n+\n+/**\n+ * EventFilterBuilder provides the interface to gather the information from events being received\n+ * by [[SparkListenerInterface]], and create a new [[EventFilter]] instance which leverages\n+ * information gathered to decide whether the event should be filtered or not.\n+ */\n+private[spark] trait EventFilterBuilder extends SparkListenerInterface {\n+  def createFilter(): EventFilter\n+}\n+\n+/**\n+ * [[EventFilter]] decides whether the given event should be filtered in, or filtered out when\n+ * compacting event log files.\n+ *\n+ * The meaning of return values of each filterXXX method are following:\n+ * - Some(true): Filter in this event.\n+ * - Some(false): Filter out this event.\n+ * - None: Don't mind about this event. No problem even other filters decide to filter out.",
    "line": 71
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "I guess FilteredEventLogFileRewriter scaladoc covers it, but please let me know if it doesn't seem to be sufficient.",
    "commit": "e5d925025a606cbb5c365303149272900f255e33",
    "createdAt": "2019-11-15T03:05:12Z",
    "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.history\n+\n+import org.apache.spark.scheduler._\n+\n+/**\n+ * EventFilterBuilder provides the interface to gather the information from events being received\n+ * by [[SparkListenerInterface]], and create a new [[EventFilter]] instance which leverages\n+ * information gathered to decide whether the event should be filtered or not.\n+ */\n+private[spark] trait EventFilterBuilder extends SparkListenerInterface {\n+  def createFilter(): EventFilter\n+}\n+\n+/**\n+ * [[EventFilter]] decides whether the given event should be filtered in, or filtered out when\n+ * compacting event log files.\n+ *\n+ * The meaning of return values of each filterXXX method are following:\n+ * - Some(true): Filter in this event.\n+ * - Some(false): Filter out this event.\n+ * - None: Don't mind about this event. No problem even other filters decide to filter out.",
    "line": 71
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Reading it together makes it clear + there is a reference so I'm fine with it.",
    "commit": "e5d925025a606cbb5c365303149272900f255e33",
    "createdAt": "2019-11-15T11:49:09Z",
    "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.history\n+\n+import org.apache.spark.scheduler._\n+\n+/**\n+ * EventFilterBuilder provides the interface to gather the information from events being received\n+ * by [[SparkListenerInterface]], and create a new [[EventFilter]] instance which leverages\n+ * information gathered to decide whether the event should be filtered or not.\n+ */\n+private[spark] trait EventFilterBuilder extends SparkListenerInterface {\n+  def createFilter(): EventFilter\n+}\n+\n+/**\n+ * [[EventFilter]] decides whether the given event should be filtered in, or filtered out when\n+ * compacting event log files.\n+ *\n+ * The meaning of return values of each filterXXX method are following:\n+ * - Some(true): Filter in this event.\n+ * - Some(false): Filter out this event.\n+ * - None: Don't mind about this event. No problem even other filters decide to filter out.",
    "line": 71
  }],
  "prId": 26416
}]