[{
  "comments": [{
    "author": {
      "login": "aarondav"
    },
    "body": "Please add documentation to these three methods to make the requirements clear.\n",
    "commit": "29ba440ead3d5880125e0d5a010ee876606511fd",
    "createdAt": "2014-10-21T17:06:03Z",
    "diffHunk": "@@ -26,35 +30,58 @@ package org.apache.spark.deploy.master\n  * we might not have yet deleted apps or workers that finished (so their liveness must be verified\n  * during recovery).\n  */\n-private[spark] trait PersistenceEngine {\n-  def addApplication(app: ApplicationInfo)\n+@DeveloperApi\n+trait PersistenceEngine {\n+\n+  def persist(name: String, obj: Object)"
  }],
  "prId": 771
}, {
  "comments": [{
    "author": {
      "login": "aarondav"
    },
    "body": "maybe make these final so no one tries to override them (since the *Info classes will be private to spark)\n",
    "commit": "29ba440ead3d5880125e0d5a010ee876606511fd",
    "createdAt": "2014-10-21T17:06:34Z",
    "diffHunk": "@@ -26,35 +30,58 @@ package org.apache.spark.deploy.master\n  * we might not have yet deleted apps or workers that finished (so their liveness must be verified\n  * during recovery).\n  */\n-private[spark] trait PersistenceEngine {\n-  def addApplication(app: ApplicationInfo)\n+@DeveloperApi\n+trait PersistenceEngine {\n+\n+  def persist(name: String, obj: Object)\n+\n+  def unpersist(name: String)\n+\n+  def read[T: ClassTag](name: String): Seq[T]\n \n-  def removeApplication(app: ApplicationInfo)\n+  def addApplication(app: ApplicationInfo): Unit = {"
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "I agree; only the `persist()`, `unpersist()`, `read()`, and `close()`methods are designed for extensibility; everything else should be `final`.\n",
    "commit": "29ba440ead3d5880125e0d5a010ee876606511fd",
    "createdAt": "2014-10-21T17:18:14Z",
    "diffHunk": "@@ -26,35 +30,58 @@ package org.apache.spark.deploy.master\n  * we might not have yet deleted apps or workers that finished (so their liveness must be verified\n  * during recovery).\n  */\n-private[spark] trait PersistenceEngine {\n-  def addApplication(app: ApplicationInfo)\n+@DeveloperApi\n+trait PersistenceEngine {\n+\n+  def persist(name: String, obj: Object)\n+\n+  def unpersist(name: String)\n+\n+  def read[T: ClassTag](name: String): Seq[T]\n \n-  def removeApplication(app: ApplicationInfo)\n+  def addApplication(app: ApplicationInfo): Unit = {"
  }],
  "prId": 771
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Why does this need to accept a `ClassTag`?  Is this so that we can allocate unboxed primitive arrays?\n",
    "commit": "29ba440ead3d5880125e0d5a010ee876606511fd",
    "createdAt": "2014-10-21T17:21:41Z",
    "diffHunk": "@@ -26,35 +30,58 @@ package org.apache.spark.deploy.master\n  * we might not have yet deleted apps or workers that finished (so their liveness must be verified\n  * during recovery).\n  */\n-private[spark] trait PersistenceEngine {\n-  def addApplication(app: ApplicationInfo)\n+@DeveloperApi\n+trait PersistenceEngine {\n+\n+  def persist(name: String, obj: Object)\n+\n+  def unpersist(name: String)\n+\n+  def read[T: ClassTag](name: String): Seq[T]"
  }, {
    "author": {
      "login": "ScrapCodes"
    },
    "body": "I kept ClassTag so that if someone extends this method he can control how read behaves based on Whether its ApplicationInfo/WorkerInfo/ etc... . Such a thing would be impossible otherwise - since we are making other methods as final. I am not sure if that would be absolutely necessary.  Thoughts? \n",
    "commit": "29ba440ead3d5880125e0d5a010ee876606511fd",
    "createdAt": "2014-10-22T07:09:15Z",
    "diffHunk": "@@ -26,35 +30,58 @@ package org.apache.spark.deploy.master\n  * we might not have yet deleted apps or workers that finished (so their liveness must be verified\n  * during recovery).\n  */\n-private[spark] trait PersistenceEngine {\n-  def addApplication(app: ApplicationInfo)\n+@DeveloperApi\n+trait PersistenceEngine {\n+\n+  def persist(name: String, obj: Object)\n+\n+  def unpersist(name: String)\n+\n+  def read[T: ClassTag](name: String): Seq[T]"
  }],
  "prId": 771
}]