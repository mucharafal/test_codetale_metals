[{
  "comments": [{
    "author": {
      "login": "aarondav"
    },
    "body": "Could you add a class comment to this? Do note that user implementations will be instantiated with the conf as the sole constructor parameter.\n",
    "commit": "29ba440ead3d5880125e0d5a010ee876606511fd",
    "createdAt": "2014-09-22T16:10:22Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.master\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.serializer.JavaSerializer\n+\n+@DeveloperApi\n+abstract class StandaloneRecoveryModeFactory(conf: SparkConf) {"
  }],
  "prId": 771
}, {
  "comments": [{
    "author": {
      "login": "aarondav"
    },
    "body": "Maybe add a comment here explaining that the election agent is still a no-op for this recovery mode.\n",
    "commit": "29ba440ead3d5880125e0d5a010ee876606511fd",
    "createdAt": "2014-09-22T16:10:23Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.master\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.serializer.JavaSerializer\n+\n+@DeveloperApi\n+abstract class StandaloneRecoveryModeFactory(conf: SparkConf) {\n+  def createPersistenceEngine(): PersistenceEngine\n+\n+  def createLeaderElectionAgent(master: LeaderElectable): LeaderElectionAgent\n+}\n+\n+private[spark] class FileSystemRecoveryModeFactory(conf: SparkConf)"
  }],
  "prId": 771
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "I don't think we need this line.\n",
    "commit": "29ba440ead3d5880125e0d5a010ee876606511fd",
    "createdAt": "2014-10-21T17:23:26Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.master\n+\n+import org.apache.spark.{Logging, SparkConf}\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.serializer.JavaSerializer\n+\n+/**\n+ * ::DeveloperApi::\n+ *\n+ * Implementation of this class can be plugged in as recovery mode alternative for Spark's\n+ * Standalone mode.\n+ *\n+ * @param conf SparkConf"
  }],
  "prId": 771
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Similarly, we can get rid of this `@return`; we don't need to use scaladoc to document the return value here and the blank documentation is ugly looking.\n",
    "commit": "29ba440ead3d5880125e0d5a010ee876606511fd",
    "createdAt": "2014-10-21T17:24:32Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.master\n+\n+import org.apache.spark.{Logging, SparkConf}\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.serializer.JavaSerializer\n+\n+/**\n+ * ::DeveloperApi::\n+ *\n+ * Implementation of this class can be plugged in as recovery mode alternative for Spark's\n+ * Standalone mode.\n+ *\n+ * @param conf SparkConf\n+ */\n+@DeveloperApi\n+abstract class StandaloneRecoveryModeFactory(conf: SparkConf) {\n+\n+  /**\n+   * PersistenceEngine defines how the persistent data(Information about worker, driver etc..)\n+   * is handled for recovery.\n+   *\n+   * @return"
  }],
  "prId": 771
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Same here.\n",
    "commit": "29ba440ead3d5880125e0d5a010ee876606511fd",
    "createdAt": "2014-10-21T17:24:39Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.master\n+\n+import org.apache.spark.{Logging, SparkConf}\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.serializer.JavaSerializer\n+\n+/**\n+ * ::DeveloperApi::\n+ *\n+ * Implementation of this class can be plugged in as recovery mode alternative for Spark's\n+ * Standalone mode.\n+ *\n+ * @param conf SparkConf\n+ */\n+@DeveloperApi\n+abstract class StandaloneRecoveryModeFactory(conf: SparkConf) {\n+\n+  /**\n+   * PersistenceEngine defines how the persistent data(Information about worker, driver etc..)\n+   * is handled for recovery.\n+   *\n+   * @return\n+   */\n+  def createPersistenceEngine(): PersistenceEngine\n+\n+  /**\n+   * Create an instance of LeaderAgent that decides who gets elected as master.\n+   * @param master"
  }],
  "prId": 771
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "And here.\n",
    "commit": "29ba440ead3d5880125e0d5a010ee876606511fd",
    "createdAt": "2014-10-21T17:24:43Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.master\n+\n+import org.apache.spark.{Logging, SparkConf}\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.serializer.JavaSerializer\n+\n+/**\n+ * ::DeveloperApi::\n+ *\n+ * Implementation of this class can be plugged in as recovery mode alternative for Spark's\n+ * Standalone mode.\n+ *\n+ * @param conf SparkConf\n+ */\n+@DeveloperApi\n+abstract class StandaloneRecoveryModeFactory(conf: SparkConf) {\n+\n+  /**\n+   * PersistenceEngine defines how the persistent data(Information about worker, driver etc..)\n+   * is handled for recovery.\n+   *\n+   * @return\n+   */\n+  def createPersistenceEngine(): PersistenceEngine\n+\n+  /**\n+   * Create an instance of LeaderAgent that decides who gets elected as master.\n+   * @param master\n+   * @return\n+   */\n+  def createLeaderElectionAgent(master: LeaderElectable): LeaderElectionAgent\n+}\n+\n+/**\n+ * LeaderAgent in this case is a no-op. Since leader is forever leader as the actual\n+ * recovery is made by restoring from filesystem.\n+ *\n+ * @param conf SparkConf"
  }],
  "prId": 771
}]