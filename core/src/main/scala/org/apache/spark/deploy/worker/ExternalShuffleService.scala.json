[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "This is in the wrong package. It's no longer used for standalone mode only. It might make sense to put it in `o.a.s.deploy`\n",
    "commit": "6c2b1484d8b706bd30c2a7a5495e74479a532e88",
    "createdAt": "2015-04-16T17:30:51Z",
    "diffHunk": "@@ -18,12 +18,15 @@\n package org.apache.spark.deploy.worker"
  }],
  "prId": 4990
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "this needs to be up there above the spark imports (see https://cwiki.apache.org/confluence/display/SPARK/Spark+Code+Style+Guide)\n",
    "commit": "6c2b1484d8b706bd30c2a7a5495e74479a532e88",
    "createdAt": "2015-04-16T17:31:56Z",
    "diffHunk": "@@ -18,12 +18,15 @@\n package org.apache.spark.deploy.worker\n \n import org.apache.spark.{Logging, SparkConf, SecurityManager}\n+import org.apache.spark.util.Utils\n import org.apache.spark.network.TransportContext\n import org.apache.spark.network.netty.SparkTransportConf\n import org.apache.spark.network.sasl.SaslRpcHandler\n import org.apache.spark.network.server.TransportServer\n import org.apache.spark.network.shuffle.ExternalShuffleBlockHandler\n \n+import java.util.concurrent.CountDownLatch"
  }],
  "prId": 4990
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "`private[deploy]`\n",
    "commit": "6c2b1484d8b706bd30c2a7a5495e74479a532e88",
    "createdAt": "2015-04-16T17:32:19Z",
    "diffHunk": "@@ -32,7 +35,7 @@ import org.apache.spark.network.shuffle.ExternalShuffleBlockHandler\n  * Optionally requires SASL authentication in order to read. See [[SecurityManager]].\n  */\n private[worker]"
  }],
  "prId": 4990
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "Please add `Unit` return type\n",
    "commit": "6c2b1484d8b706bd30c2a7a5495e74479a532e88",
    "createdAt": "2015-04-16T17:32:38Z",
    "diffHunk": "@@ -64,3 +67,39 @@ class StandaloneWorkerShuffleService(sparkConf: SparkConf, securityManager: Secu\n     }\n   }\n }\n+\n+/**\n+ * A main class for running the external shuffle service.\n+ */\n+object ExternalShuffleService extends Logging {\n+  @volatile\n+  private var server: ExternalShuffleService = _\n+\n+  private val barrier = new CountDownLatch(1)\n+\n+  def main(args: Array[String]): Unit = {\n+    val sparkConf = new SparkConf\n+    Utils.loadDefaultSparkProperties(sparkConf)\n+    val securityManager = new SecurityManager(sparkConf)\n+\n+    // we override this value since this service is started from the command line\n+    // and we assume the user really wants it to be running\n+    sparkConf.set(\"spark.shuffle.service.enabled\", \"true\")\n+    server = new ExternalShuffleService(sparkConf, securityManager)\n+\n+    installShutdownHook()\n+\n+    // keep running until the process is terminated\n+    barrier.await()\n+  }\n+\n+  private def installShutdownHook() = {"
  }],
  "prId": 4990
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "This is kind of weird. I would just add a `start` method in the shuffle service that ignores this flag, and have `startIfEnabled` call `start`. Really I think the flag should be checked outside of the shuffle service before instantiating an instance of it, but we don't have to change that in this patch.\n",
    "commit": "6c2b1484d8b706bd30c2a7a5495e74479a532e88",
    "createdAt": "2015-04-16T17:34:08Z",
    "diffHunk": "@@ -64,3 +67,39 @@ class StandaloneWorkerShuffleService(sparkConf: SparkConf, securityManager: Secu\n     }\n   }\n }\n+\n+/**\n+ * A main class for running the external shuffle service.\n+ */\n+object ExternalShuffleService extends Logging {\n+  @volatile\n+  private var server: ExternalShuffleService = _\n+\n+  private val barrier = new CountDownLatch(1)\n+\n+  def main(args: Array[String]): Unit = {\n+    val sparkConf = new SparkConf\n+    Utils.loadDefaultSparkProperties(sparkConf)\n+    val securityManager = new SecurityManager(sparkConf)\n+\n+    // we override this value since this service is started from the command line\n+    // and we assume the user really wants it to be running\n+    sparkConf.set(\"spark.shuffle.service.enabled\", \"true\")"
  }],
  "prId": 4990
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "we never started this service!\n",
    "commit": "6c2b1484d8b706bd30c2a7a5495e74479a532e88",
    "createdAt": "2015-04-16T17:35:06Z",
    "diffHunk": "@@ -64,3 +67,39 @@ class StandaloneWorkerShuffleService(sparkConf: SparkConf, securityManager: Secu\n     }\n   }\n }\n+\n+/**\n+ * A main class for running the external shuffle service.\n+ */\n+object ExternalShuffleService extends Logging {\n+  @volatile\n+  private var server: ExternalShuffleService = _\n+\n+  private val barrier = new CountDownLatch(1)\n+\n+  def main(args: Array[String]): Unit = {\n+    val sparkConf = new SparkConf\n+    Utils.loadDefaultSparkProperties(sparkConf)\n+    val securityManager = new SecurityManager(sparkConf)\n+\n+    // we override this value since this service is started from the command line\n+    // and we assume the user really wants it to be running\n+    sparkConf.set(\"spark.shuffle.service.enabled\", \"true\")\n+    server = new ExternalShuffleService(sparkConf, securityManager)"
  }],
  "prId": 4990
}]