[{
  "comments": [{
    "author": {
      "login": "steveloughran"
    },
    "body": "to be strict here, there ought to be check for the request being an `HttpServletRequest`. That said, there is no other subclass of `ServletRequest` which is ever seen in the wild.\n",
    "commit": "93b1c6f7f75b8b32246d1949e775ac091b02a7e3",
    "createdAt": "2016-06-17T10:18:57Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.deploy.rest\n+\n+import javax.servlet._\n+import javax.servlet.http.{HttpServletRequest, HttpServletResponse}\n+\n+/**\n+ * This filter provides protection against cross site request forgery (CSRF)\n+ * attacks for REST APIs. Enabling this filter on an endpoint results in the\n+ * requirement of all client to send a particular HTTP header (X-XSRF-HEADER)\n+ * with every request. In the absense of this header the filter will reject the\n+ * attempt as a bad request.\n+ */\n+private[spark] class RestCsrfPreventionFilter extends Filter {\n+\n+  import RestCsrfPreventionFilter._\n+\n+  def init(filterConfig: FilterConfig): Unit = {}\n+\n+  def doFilter(\n+      servletRequest: ServletRequest,\n+      servletResponse: ServletResponse,\n+      filterChain: FilterChain): Unit = {\n+    val httpReq = servletRequest.asInstanceOf[HttpServletRequest]",
    "line": 40
  }],
  "prId": 13218
}]