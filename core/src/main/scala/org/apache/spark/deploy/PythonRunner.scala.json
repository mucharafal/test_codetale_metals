[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "note to myself: need to make it false default before merging.",
    "commit": "9e2d83277635b02cc03f35502294892dc7d8a3d2",
    "createdAt": "2019-06-18T04:26:59Z",
    "diffHunk": "@@ -54,13 +55,32 @@ object PythonRunner {\n     // Launch a Py4J gateway server for the process to connect to; this will let it see our\n     // Java system properties and such\n     val localhost = InetAddress.getLoopbackAddress()\n-    val gatewayServer = new py4j.GatewayServer.GatewayServerBuilder()\n-      .authToken(secret)\n-      .javaPort(0)\n-      .javaAddress(localhost)\n-      .callbackClient(py4j.GatewayServer.DEFAULT_PYTHON_PORT, localhost, secret)\n-      .build()\n-    val thread = new Thread(() => Utils.logUncaughtExceptions { gatewayServer.start() })\n+\n+    val start, getPortNum, shutdown = if (sys.env.getOrElse(\n+        \"PYSPARK_PIN_THREAD\", \"true\").toLowerCase(Locale.ROOT) == \"true\") {"
  }],
  "prId": 24898
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Let me try to clean up later ... ",
    "commit": "9e2d83277635b02cc03f35502294892dc7d8a3d2",
    "createdAt": "2019-06-18T04:37:20Z",
    "diffHunk": "@@ -54,13 +55,36 @@ object PythonRunner {\n     // Launch a Py4J gateway server for the process to connect to; this will let it see our\n     // Java system properties and such\n     val localhost = InetAddress.getLoopbackAddress()\n-    val gatewayServer = new py4j.GatewayServer.GatewayServerBuilder()\n-      .authToken(secret)\n-      .javaPort(0)\n-      .javaAddress(localhost)\n-      .callbackClient(py4j.GatewayServer.DEFAULT_PYTHON_PORT, localhost, secret)\n-      .build()\n-    val thread = new Thread(() => Utils.logUncaughtExceptions { gatewayServer.start() })\n+\n+    val server = if (sys.env.getOrElse(\n+        \"PYSPARK_PIN_THREAD\", \"true\").toLowerCase(Locale.ROOT) == \"true\") {\n+      val clientServer = new py4j.ClientServer.ClientServerBuilder()\n+        .authToken(secret)\n+        .javaPort(0)\n+        .javaAddress(localhost)\n+        .build()\n+\n+      (() => clientServer.startServer(),\n+        () => clientServer.getJavaServer.getListeningPort,\n+        () => clientServer.shutdown())\n+    } else {\n+      val gatewayServer = new py4j.GatewayServer.GatewayServerBuilder()\n+        .authToken(secret)\n+        .javaPort(0)\n+        .javaAddress(localhost)\n+        .callbackClient(py4j.GatewayServer.DEFAULT_PYTHON_PORT, localhost, secret)\n+        .build()\n+\n+      (() => gatewayServer.start(),\n+        () => gatewayServer.getListeningPort,\n+        () => gatewayServer.shutdown())\n+    }\n+\n+    val start: () => Unit = server._1\n+    val getPortNum: () => Int = server._2\n+    val shutdown: () => Unit = server._3"
  }],
  "prId": 24898
}]