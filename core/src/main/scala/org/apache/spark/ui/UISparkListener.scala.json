[{
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "need not\n",
    "commit": "e5f14fa5e63636c5eee5df084c913d938fdee541",
    "createdAt": "2014-02-28T23:45:30Z",
    "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ui\n+\n+import scala.collection.mutable\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.scheduler._\n+import org.apache.spark.storage._\n+import org.apache.spark.util.FileLogger\n+import org.apache.spark.util.JsonProtocol\n+\n+private[ui] trait UISparkListener extends SparkListener\n+\n+/**\n+ * A SparkListener that serves as an entry point for all events posted to the UI.\n+ *\n+ * GatewayUISparkListener achieves two functions:\n+ *\n+ *  (1) If the UI is live, GatewayUISparkListener posts each event to all attached listeners\n+ *      then logs it as JSON. This centralizes event logging and avoids having all attached\n+ *      listeners log the events on their own. By default, GatewayUISparkListener logs one\n+ *      file per job, though this needs not be the case."
  }],
  "prId": 42
}, {
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "I think as a starting point it would be better to just log at application boundaries rather than job boundaries. I.e. just have a single log for the entire spark application. This class makes the assumption that jobs are (mostly) sequential, but in fact stages and tasks from different jobs can be interleaved. So rolling the log based on onJobStart/onJobEnd is not correct.\n",
    "commit": "e5f14fa5e63636c5eee5df084c913d938fdee541",
    "createdAt": "2014-02-28T23:52:39Z",
    "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ui\n+\n+import scala.collection.mutable\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.scheduler._\n+import org.apache.spark.storage._\n+import org.apache.spark.util.FileLogger\n+import org.apache.spark.util.JsonProtocol\n+\n+private[ui] trait UISparkListener extends SparkListener\n+\n+/**\n+ * A SparkListener that serves as an entry point for all events posted to the UI.\n+ *\n+ * GatewayUISparkListener achieves two functions:\n+ *\n+ *  (1) If the UI is live, GatewayUISparkListener posts each event to all attached listeners\n+ *      then logs it as JSON. This centralizes event logging and avoids having all attached\n+ *      listeners log the events on their own. By default, GatewayUISparkListener logs one\n+ *      file per job, though this needs not be the case.\n+ *\n+ *  (2) If the UI is rendered from disk, GatewayUISparkListener replays each event deserialized\n+ *      from the event logs to all attached listeners.\n+ */\n+private[ui] class GatewayUISparkListener(parent: SparkUI, live: Boolean) extends SparkListener {"
  }],
  "prId": 42
}, {
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "We probably want to make the use of logging configurable. For instance by introducing a configuration value called `spark.eventLog.enabled` or something similar and have the default be \"false\". If it's not enabled then even for live code we won't turn it on. \n",
    "commit": "e5f14fa5e63636c5eee5df084c913d938fdee541",
    "createdAt": "2014-03-01T00:02:56Z",
    "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ui\n+\n+import scala.collection.mutable\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.scheduler._\n+import org.apache.spark.storage._\n+import org.apache.spark.util.FileLogger\n+import org.apache.spark.util.JsonProtocol\n+\n+private[ui] trait UISparkListener extends SparkListener\n+\n+/**\n+ * A SparkListener that serves as an entry point for all events posted to the UI.\n+ *\n+ * GatewayUISparkListener achieves two functions:\n+ *\n+ *  (1) If the UI is live, GatewayUISparkListener posts each event to all attached listeners\n+ *      then logs it as JSON. This centralizes event logging and avoids having all attached\n+ *      listeners log the events on their own. By default, GatewayUISparkListener logs one\n+ *      file per job, though this needs not be the case.\n+ *\n+ *  (2) If the UI is rendered from disk, GatewayUISparkListener replays each event deserialized\n+ *      from the event logs to all attached listeners.\n+ */\n+private[ui] class GatewayUISparkListener(parent: SparkUI, live: Boolean) extends SparkListener {\n+\n+  // Log events only if the UI is live\n+  private val logger: Option[FileLogger] = if (live) Some(new FileLogger()) else None"
  }],
  "prId": 42
}, {
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "This class doesn't seem particularly specific to the UI. It might be a good idea to expose this to the rest of Spark as a general utility that could be used potentially by other higher level applications that hook into the Listener interface (e.g. not just Spark's own UI). Like basically build a listener class that can either get data from a live context or read it from a file, if the file is present. Then you could have a class that extends that and adds the more UI specific stuff, like dispatching to all these internal listeners.\n\nThe doc here also implies that the GatewayUISparkListener is responsible for replaying events, but as far as I can tell that happens in another location.\n",
    "commit": "e5f14fa5e63636c5eee5df084c913d938fdee541",
    "createdAt": "2014-03-04T01:24:06Z",
    "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ui\n+\n+import scala.collection.mutable\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.scheduler._\n+import org.apache.spark.storage._\n+import org.apache.spark.util.FileLogger\n+import org.apache.spark.util.JsonProtocol\n+import org.apache.spark.SparkContext\n+\n+private[ui] trait UISparkListener extends SparkListener\n+\n+/**\n+ * A SparkListener that serves as an entry point for all events posted to the UI.\n+ *\n+ * GatewayUISparkListener achieves two functions:\n+ *\n+ *  (1) If the UI is live, GatewayUISparkListener posts each event to all attached listeners\n+ *      then logs it as JSON. This centralizes event logging and avoids having all attached\n+ *      listeners log the events on their own.\n+ *\n+ *  (2) If the UI is rendered from disk, GatewayUISparkListener replays each event deserialized\n+ *      from the event logs to all attached listeners.\n+ */\n+private[ui] class GatewayUISparkListener(parent: SparkUI, sc: SparkContext) extends SparkListener {"
  }, {
    "author": {
      "login": "pwendell"
    },
    "body": "I discussed with @andrewor14 offline, but the proposal was basically to refactor things in a way that makes the components more re-usable. Basically we'll separate the three responsibilities here into distinct classes:\n\na) logging a stream of events to a file.\nb) creating an event bus as the result of logged events.\nc) mutliplexing several spark listeners from one.\n",
    "commit": "e5f14fa5e63636c5eee5df084c913d938fdee541",
    "createdAt": "2014-03-04T01:47:19Z",
    "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ui\n+\n+import scala.collection.mutable\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.scheduler._\n+import org.apache.spark.storage._\n+import org.apache.spark.util.FileLogger\n+import org.apache.spark.util.JsonProtocol\n+import org.apache.spark.SparkContext\n+\n+private[ui] trait UISparkListener extends SparkListener\n+\n+/**\n+ * A SparkListener that serves as an entry point for all events posted to the UI.\n+ *\n+ * GatewayUISparkListener achieves two functions:\n+ *\n+ *  (1) If the UI is live, GatewayUISparkListener posts each event to all attached listeners\n+ *      then logs it as JSON. This centralizes event logging and avoids having all attached\n+ *      listeners log the events on their own.\n+ *\n+ *  (2) If the UI is rendered from disk, GatewayUISparkListener replays each event deserialized\n+ *      from the event logs to all attached listeners.\n+ */\n+private[ui] class GatewayUISparkListener(parent: SparkUI, sc: SparkContext) extends SparkListener {"
  }],
  "prId": 42
}, {
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "I think here we'd want a nonce also (e.g. timestamp) because otherwise if someone runs the same app twice the files will overwrite eachother.\n",
    "commit": "e5f14fa5e63636c5eee5df084c913d938fdee541",
    "createdAt": "2014-03-04T20:23:25Z",
    "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ui\n+\n+import scala.collection.mutable\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.scheduler._\n+import org.apache.spark.storage._\n+import org.apache.spark.util.FileLogger\n+import org.apache.spark.util.JsonProtocol\n+\n+private[ui] trait UISparkListener extends SparkListener\n+\n+/**\n+ * A SparkListener that serves as an entry point for all events posted to the UI.\n+ *\n+ * GatewayUISparkListener achieves two functions:\n+ *\n+ *  (1) If the UI is live, GatewayUISparkListener posts each event to all attached listeners\n+ *      then logs it as JSON. This centralizes event logging and avoids having all attached\n+ *      listeners log the events on their own.\n+ *\n+ *  (2) If the UI is rendered from disk, GatewayUISparkListener replays each event deserialized\n+ *      from the event logs to all attached listeners.\n+ *\n+ * Event logging is specified by three configurable parameters:\n+ *\n+ *   spark.eventLog.enabled - Whether event logging is enabled.\n+ *   spark.eventLog.dir - Path to the directory in which events are logged.\n+ *   spark.eventLog.overwrite - Whether to overwrite any existing files.\n+ */\n+private[ui] class GatewayUISparkListener(parent: SparkUI, sc: SparkContext) extends SparkListener {\n+\n+  // Log events only if the UI is live and event logging is enabled\n+  private val logger: Option[FileLogger] = {\n+    if (sc != null && sc.conf.getBoolean(\"spark.eventLog.enabled\", false)) {\n+      val logDir = sc.conf.get(\"spark.eventLog.dir\", \"/tmp/spark-events\")\n+      val appName = sc.appName.replaceAll(\"[ /]\", \"_\").toLowerCase"
  }],
  "prId": 42
}, {
  "comments": [{
    "author": {
      "login": "kayousterhout"
    },
    "body": "Do you need this intermediate trait?\n",
    "commit": "e5f14fa5e63636c5eee5df084c913d938fdee541",
    "createdAt": "2014-03-06T21:09:48Z",
    "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ui\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.scheduler._\n+import org.apache.spark.storage._\n+\n+private[ui] trait UISparkListener extends SparkListener"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "Not at all.\n",
    "commit": "e5f14fa5e63636c5eee5df084c913d938fdee541",
    "createdAt": "2014-03-11T00:59:05Z",
    "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ui\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.scheduler._\n+import org.apache.spark.storage._\n+\n+private[ui] trait UISparkListener extends SparkListener"
  }],
  "prId": 42
}, {
  "comments": [{
    "author": {
      "login": "kayousterhout"
    },
    "body": "I think it would make sense for this to live in storage/ (and as mentioned elsewhere, not have other UI listeners inherit from this one)\n",
    "commit": "e5f14fa5e63636c5eee5df084c913d938fdee541",
    "createdAt": "2014-03-06T22:08:43Z",
    "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ui\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.scheduler._\n+import org.apache.spark.storage._\n+\n+private[ui] trait UISparkListener extends SparkListener\n+\n+/**\n+ * A SparkListener that maintains executor storage status\n+ */\n+private[ui] class StorageStatusSparkListener extends UISparkListener {"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "Makes sense. One reason why it's not a good idea is because we end up maintaining two separate storage status lists with exactly the same information (because both ExecutorsUI and BlockManagerUI use this). This suggests the alternative of maintaining a pointer to a StorageStatusSparkListener in SparkUI.\n",
    "commit": "e5f14fa5e63636c5eee5df084c913d938fdee541",
    "createdAt": "2014-03-10T23:21:44Z",
    "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ui\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.scheduler._\n+import org.apache.spark.storage._\n+\n+private[ui] trait UISparkListener extends SparkListener\n+\n+/**\n+ * A SparkListener that maintains executor storage status\n+ */\n+private[ui] class StorageStatusSparkListener extends UISparkListener {"
  }],
  "prId": 42
}]