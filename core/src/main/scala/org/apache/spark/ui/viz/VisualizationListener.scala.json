[{
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "It might be good to pull the rendering logic out of the listener. If you look at the other listeners, their job is just to maintain data structures representing the logical state. Similarly here, I think it would be good to decouple the construction of the logical graph from the rendering itself. It's a nice separation of concerns, and in the (likely) case that we want to expose a public API for accessing the RDD and stage graph, we'll want to have more generic representation of this data that isn't tied to rendering.\n",
    "commit": "666c03b1176b44368de8dcf1810b19e64717d2cc",
    "createdAt": "2015-05-03T04:14:25Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ui.viz\n+\n+import scala.collection.mutable\n+import scala.xml.{Node, Unparsed}\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.scheduler._\n+import org.apache.spark.ui.SparkUI\n+\n+/**\n+ * A SparkListener that constructs RDD DAG visualization for the UI.\n+ */\n+private[ui] class VisualizationListener(conf: SparkConf) extends SparkListener {\n+  private val jobIdToStageIds = new mutable.HashMap[Int, Seq[Int]]\n+  private val stageIdToGraph = new mutable.HashMap[Int, VizGraph]\n+  private val stageIds = new mutable.ArrayBuffer[Int]\n+\n+  // How many jobs or stages to retain graph metadata for\n+  private val retainedStages =\n+    conf.getInt(\"spark.ui.retainedStages\", SparkUI.DEFAULT_RETAINED_STAGES)\n+\n+  /** Construct a \"Show visualization\" DOM element that expands into a visualization for a stage. */\n+  def showVizElementForStage(stageId: Int): Seq[Node] = {\n+    showVizElement(getVizGraphForStage(stageId).toSeq, forJob = false)\n+  }\n+\n+  /** Construct a \"Show visualization\" DOM element that expands into a visualization for a job. */\n+  def showVizElementForJob(jobId: Int): Seq[Node] = {\n+    showVizElement(getVizGraphsForJob(jobId), forJob = true)\n+  }\n+\n+  /** Construct a \"Show visualization\" DOM element that expands into a visualization on the UI. */\n+  private def showVizElement(graphs: Seq[VizGraph], forJob: Boolean): Seq[Node] = {\n+    <div>"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "The only thing is that this code is used in both the job page and the stage page. If we put them in those respective files then there will be some duplicate code.\n",
    "commit": "666c03b1176b44368de8dcf1810b19e64717d2cc",
    "createdAt": "2015-05-03T05:32:58Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ui.viz\n+\n+import scala.collection.mutable\n+import scala.xml.{Node, Unparsed}\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.scheduler._\n+import org.apache.spark.ui.SparkUI\n+\n+/**\n+ * A SparkListener that constructs RDD DAG visualization for the UI.\n+ */\n+private[ui] class VisualizationListener(conf: SparkConf) extends SparkListener {\n+  private val jobIdToStageIds = new mutable.HashMap[Int, Seq[Int]]\n+  private val stageIdToGraph = new mutable.HashMap[Int, VizGraph]\n+  private val stageIds = new mutable.ArrayBuffer[Int]\n+\n+  // How many jobs or stages to retain graph metadata for\n+  private val retainedStages =\n+    conf.getInt(\"spark.ui.retainedStages\", SparkUI.DEFAULT_RETAINED_STAGES)\n+\n+  /** Construct a \"Show visualization\" DOM element that expands into a visualization for a stage. */\n+  def showVizElementForStage(stageId: Int): Seq[Node] = {\n+    showVizElement(getVizGraphForStage(stageId).toSeq, forJob = false)\n+  }\n+\n+  /** Construct a \"Show visualization\" DOM element that expands into a visualization for a job. */\n+  def showVizElementForJob(jobId: Int): Seq[Node] = {\n+    showVizElement(getVizGraphsForJob(jobId), forJob = true)\n+  }\n+\n+  /** Construct a \"Show visualization\" DOM element that expands into a visualization on the UI. */\n+  private def showVizElement(graphs: Seq[VizGraph], forJob: Boolean): Seq[Node] = {\n+    <div>"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "maybe I should put it in `UIUtils`?\n",
    "commit": "666c03b1176b44368de8dcf1810b19e64717d2cc",
    "createdAt": "2015-05-03T05:33:13Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ui.viz\n+\n+import scala.collection.mutable\n+import scala.xml.{Node, Unparsed}\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.scheduler._\n+import org.apache.spark.ui.SparkUI\n+\n+/**\n+ * A SparkListener that constructs RDD DAG visualization for the UI.\n+ */\n+private[ui] class VisualizationListener(conf: SparkConf) extends SparkListener {\n+  private val jobIdToStageIds = new mutable.HashMap[Int, Seq[Int]]\n+  private val stageIdToGraph = new mutable.HashMap[Int, VizGraph]\n+  private val stageIds = new mutable.ArrayBuffer[Int]\n+\n+  // How many jobs or stages to retain graph metadata for\n+  private val retainedStages =\n+    conf.getInt(\"spark.ui.retainedStages\", SparkUI.DEFAULT_RETAINED_STAGES)\n+\n+  /** Construct a \"Show visualization\" DOM element that expands into a visualization for a stage. */\n+  def showVizElementForStage(stageId: Int): Seq[Node] = {\n+    showVizElement(getVizGraphForStage(stageId).toSeq, forJob = false)\n+  }\n+\n+  /** Construct a \"Show visualization\" DOM element that expands into a visualization for a job. */\n+  def showVizElementForJob(jobId: Int): Seq[Node] = {\n+    showVizElement(getVizGraphsForJob(jobId), forJob = true)\n+  }\n+\n+  /** Construct a \"Show visualization\" DOM element that expands into a visualization on the UI. */\n+  private def showVizElement(graphs: Seq[VizGraph], forJob: Boolean): Seq[Node] = {\n+    <div>"
  }],
  "prId": 5729
}, {
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "I might just rename this to `OperationGraphListener` or something (see the other comment). I think we want to keep this layer more generic and not specifically tied to visualization.\n",
    "commit": "666c03b1176b44368de8dcf1810b19e64717d2cc",
    "createdAt": "2015-05-03T04:15:14Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ui.viz\n+\n+import scala.collection.mutable\n+import scala.xml.{Node, Unparsed}\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.scheduler._\n+import org.apache.spark.ui.SparkUI\n+\n+/**\n+ * A SparkListener that constructs RDD DAG visualization for the UI.\n+ */\n+private[ui] class VisualizationListener(conf: SparkConf) extends SparkListener {"
  }, {
    "author": {
      "login": "pwendell"
    },
    "body": "After some more thought, I think that currently this is pretty tied to Job/Dag visualization, so it could make sense to just leave it as-is. If we want to expose something more general later, we can do that. Maybe add a NOTE that says if we want to make it public later on we should consider giving a more general representation of the scoping concept.\n",
    "commit": "666c03b1176b44368de8dcf1810b19e64717d2cc",
    "createdAt": "2015-05-03T20:01:41Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ui.viz\n+\n+import scala.collection.mutable\n+import scala.xml.{Node, Unparsed}\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.scheduler._\n+import org.apache.spark.ui.SparkUI\n+\n+/**\n+ * A SparkListener that constructs RDD DAG visualization for the UI.\n+ */\n+private[ui] class VisualizationListener(conf: SparkConf) extends SparkListener {"
  }],
  "prId": 5729
}]