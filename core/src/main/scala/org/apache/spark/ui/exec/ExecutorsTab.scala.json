[{
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "Looks like we can use `info.successful`?",
    "commit": "7f03341093c843086920e8218463b5d2ba6e37d2",
    "createdAt": "2017-07-21T22:58:42Z",
    "diffHunk": "@@ -140,6 +140,8 @@ class ExecutorsListener(storageStatusListener: StorageStatusListener, conf: Spar\n           return\n         case _: ExceptionFailure =>\n           taskSummary.tasksFailed += 1\n+        case _: ExecutorLostFailure =>"
  }, {
    "author": {
      "login": "jiangxb1987"
    },
    "body": "+1",
    "commit": "7f03341093c843086920e8218463b5d2ba6e37d2",
    "createdAt": "2017-07-23T14:23:11Z",
    "diffHunk": "@@ -140,6 +140,8 @@ class ExecutorsListener(storageStatusListener: StorageStatusListener, conf: Spar\n           return\n         case _: ExceptionFailure =>\n           taskSummary.tasksFailed += 1\n+        case _: ExecutorLostFailure =>"
  }, {
    "author": {
      "login": "pgandhi999"
    },
    "body": "Hi,\r\n   I have replaced most of the task failed cases with info.successful. Tested it as well. Have also written unit test to simulate my issue. Thank you.",
    "commit": "7f03341093c843086920e8218463b5d2ba6e37d2",
    "createdAt": "2017-07-25T14:58:05Z",
    "diffHunk": "@@ -140,6 +140,8 @@ class ExecutorsListener(storageStatusListener: StorageStatusListener, conf: Spar\n           return\n         case _: ExceptionFailure =>\n           taskSummary.tasksFailed += 1\n+        case _: ExecutorLostFailure =>"
  }],
  "prId": 18707
}, {
  "comments": [{
    "author": {
      "login": "jiangxb1987"
    },
    "body": "nit:\r\n```\r\nif (taskEnd.reason == Resubmitted) {\r\n  return ;\r\n}\r\n```",
    "commit": "7f03341093c843086920e8218463b5d2ba6e37d2",
    "createdAt": "2017-07-28T07:39:59Z",
    "diffHunk": "@@ -138,10 +138,12 @@ class ExecutorsListener(storageStatusListener: StorageStatusListener, conf: Spar\n           // could have failed half-way through. The correct fix would be to keep track of the\n           // metrics added by each attempt, but this is much more complicated.\n           return"
  }, {
    "author": {
      "login": "pgandhi999"
    },
    "body": "I have made the required changes and verified them. Thank you.",
    "commit": "7f03341093c843086920e8218463b5d2ba6e37d2",
    "createdAt": "2017-07-28T16:10:32Z",
    "diffHunk": "@@ -138,10 +138,12 @@ class ExecutorsListener(storageStatusListener: StorageStatusListener, conf: Spar\n           // could have failed half-way through. The correct fix would be to keep track of the\n           // metrics added by each attempt, but this is much more complicated.\n           return"
  }],
  "prId": 18707
}, {
  "comments": [{
    "author": {
      "login": "jiangxb1987"
    },
    "body": "I'm not sure this keeps the previous behavior, cc @zsxwing ",
    "commit": "7f03341093c843086920e8218463b5d2ba6e37d2",
    "createdAt": "2017-07-28T07:48:51Z",
    "diffHunk": "@@ -138,10 +138,12 @@ class ExecutorsListener(storageStatusListener: StorageStatusListener, conf: Spar\n           // could have failed half-way through. The correct fix would be to keep track of the\n           // metrics added by each attempt, but this is much more complicated.\n           return\n-        case _: ExceptionFailure =>\n-          taskSummary.tasksFailed += 1\n         case _ =>\n-          taskSummary.tasksComplete += 1\n+      }\n+      if (info.successful) {\n+        taskSummary.tasksComplete += 1\n+      } else {\n+        taskSummary.tasksFailed += 1",
    "line": 34
  }, {
    "author": {
      "login": "pgandhi999"
    },
    "body": "I went through the list of possible task failure reasons, and I found info.successful to be updated for all except Resubmitted case. If you think there is a possibility of any other reason that has been overlooked by me, do let me know.",
    "commit": "7f03341093c843086920e8218463b5d2ba6e37d2",
    "createdAt": "2017-07-28T16:11:55Z",
    "diffHunk": "@@ -138,10 +138,12 @@ class ExecutorsListener(storageStatusListener: StorageStatusListener, conf: Spar\n           // could have failed half-way through. The correct fix would be to keep track of the\n           // metrics added by each attempt, but this is much more complicated.\n           return\n-        case _: ExceptionFailure =>\n-          taskSummary.tasksFailed += 1\n         case _ =>\n-          taskSummary.tasksComplete += 1\n+      }\n+      if (info.successful) {\n+        taskSummary.tasksComplete += 1\n+      } else {\n+        taskSummary.tasksFailed += 1",
    "line": 34
  }],
  "prId": 18707
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "what's the relationship between `info.successful` and `taskEnd.reason`?",
    "commit": "7f03341093c843086920e8218463b5d2ba6e37d2",
    "createdAt": "2017-08-07T16:14:58Z",
    "diffHunk": "@@ -131,17 +131,17 @@ class ExecutorsListener(storageStatusListener: StorageStatusListener, conf: Spar\n     if (info != null) {\n       val eid = info.executorId\n       val taskSummary = executorToTaskSummary.getOrElseUpdate(eid, ExecutorTaskSummary(eid))\n-      taskEnd.reason match {\n-        case Resubmitted =>\n-          // Note: For resubmitted tasks, we continue to use the metrics that belong to the\n-          // first attempt of this task. This may not be 100% accurate because the first attempt\n-          // could have failed half-way through. The correct fix would be to keep track of the\n-          // metrics added by each attempt, but this is much more complicated.\n-          return\n-        case _: ExceptionFailure =>\n-          taskSummary.tasksFailed += 1\n-        case _ =>\n-          taskSummary.tasksComplete += 1\n+      // Note: For resubmitted tasks, we continue to use the metrics that belong to the\n+      // first attempt of this task. This may not be 100% accurate because the first attempt\n+      // could have failed half-way through. The correct fix would be to keep track of the\n+      // metrics added by each attempt, but this is much more complicated.\n+      if (taskEnd.reason == Resubmitted) {\n+        return\n+      }\n+      if (info.successful) {",
    "line": 31
  }, {
    "author": {
      "login": "pgandhi999"
    },
    "body": "def successful: Boolean = finished && !failed && !killed\r\n\r\nSo if  the task state shows finished and it has neither failed nor been killed, then info.successful is true. Now, there could be multiple reasons for a failed or killed task, and taskEnd.reason lists those. However, if task state is SUCCESS, so is the reason and thus, info.successful will be true in case of SUCCESS and false for all the other cases.",
    "commit": "7f03341093c843086920e8218463b5d2ba6e37d2",
    "createdAt": "2017-08-07T16:30:36Z",
    "diffHunk": "@@ -131,17 +131,17 @@ class ExecutorsListener(storageStatusListener: StorageStatusListener, conf: Spar\n     if (info != null) {\n       val eid = info.executorId\n       val taskSummary = executorToTaskSummary.getOrElseUpdate(eid, ExecutorTaskSummary(eid))\n-      taskEnd.reason match {\n-        case Resubmitted =>\n-          // Note: For resubmitted tasks, we continue to use the metrics that belong to the\n-          // first attempt of this task. This may not be 100% accurate because the first attempt\n-          // could have failed half-way through. The correct fix would be to keep track of the\n-          // metrics added by each attempt, but this is much more complicated.\n-          return\n-        case _: ExceptionFailure =>\n-          taskSummary.tasksFailed += 1\n-        case _ =>\n-          taskSummary.tasksComplete += 1\n+      // Note: For resubmitted tasks, we continue to use the metrics that belong to the\n+      // first attempt of this task. This may not be 100% accurate because the first attempt\n+      // could have failed half-way through. The correct fix would be to keep track of the\n+      // metrics added by each attempt, but this is much more complicated.\n+      if (taskEnd.reason == Resubmitted) {\n+        return\n+      }\n+      if (info.successful) {",
    "line": 31
  }],
  "prId": 18707
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "can we fix the problem by changing this line to `case _: TaskFailedReason`?",
    "commit": "7f03341093c843086920e8218463b5d2ba6e37d2",
    "createdAt": "2017-08-07T17:04:30Z",
    "diffHunk": "@@ -131,17 +131,17 @@ class ExecutorsListener(storageStatusListener: StorageStatusListener, conf: Spar\n     if (info != null) {\n       val eid = info.executorId\n       val taskSummary = executorToTaskSummary.getOrElseUpdate(eid, ExecutorTaskSummary(eid))\n-      taskEnd.reason match {\n-        case Resubmitted =>\n-          // Note: For resubmitted tasks, we continue to use the metrics that belong to the\n-          // first attempt of this task. This may not be 100% accurate because the first attempt\n-          // could have failed half-way through. The correct fix would be to keep track of the\n-          // metrics added by each attempt, but this is much more complicated.\n-          return\n-        case _: ExceptionFailure =>",
    "line": 20
  }, {
    "author": {
      "login": "pgandhi999"
    },
    "body": "So, I added info.successful check at the suggestion of @zsxwing and @jiangxb1987 . I feel this covers all the failed and killed cases which TaskFailedReason might have overlooked. However, if you feel otherwise, please let me know.",
    "commit": "7f03341093c843086920e8218463b5d2ba6e37d2",
    "createdAt": "2017-08-07T17:42:31Z",
    "diffHunk": "@@ -131,17 +131,17 @@ class ExecutorsListener(storageStatusListener: StorageStatusListener, conf: Spar\n     if (info != null) {\n       val eid = info.executorId\n       val taskSummary = executorToTaskSummary.getOrElseUpdate(eid, ExecutorTaskSummary(eid))\n-      taskEnd.reason match {\n-        case Resubmitted =>\n-          // Note: For resubmitted tasks, we continue to use the metrics that belong to the\n-          // first attempt of this task. This may not be 100% accurate because the first attempt\n-          // could have failed half-way through. The correct fix would be to keep track of the\n-          // metrics added by each attempt, but this is much more complicated.\n-          return\n-        case _: ExceptionFailure =>",
    "line": 20
  }],
  "prId": 18707
}]