[{
  "comments": [{
    "author": {
      "login": "ScrapCodes"
    },
    "body": "@pwendell Can I use Sorting.stableSort here ?\n",
    "commit": "3b11803ae9b64acba2d64ad02d1e31d756783eaf",
    "createdAt": "2015-01-16T08:43:18Z",
    "diffHunk": "@@ -37,12 +37,18 @@ private[ui] class AllStagesPage(parent: StagesTab) extends WebUIPage(\"\") {\n       val numCompletedStages = listener.numCompletedStages\n       val failedStages = listener.failedStages.reverse.toSeq\n       val numFailedStages = listener.numFailedStages\n+      val pendingStages = listener.pendingStages.values.toSeq\n+      val numWaitingStages = pendingStages.size\n       val now = System.currentTimeMillis\n \n       val activeStagesTable =\n         new StageTableBase(activeStages.sortBy(_.submissionTime).reverse,\n           parent.basePath, parent.listener, isFairScheduler = parent.isFairScheduler,\n           killEnabled = parent.killEnabled)\n+      val pendingStagesTable =\n+        new StageTableBase(pendingStages.sortBy(_.submissionTime),"
  }, {
    "author": {
      "login": "pwendell"
    },
    "body": "Why not just keep the sorting the same as it was? I think the submission time is unlikely to be tied in most cases. It would be good to just make it consistent with the existing ones.\n",
    "commit": "3b11803ae9b64acba2d64ad02d1e31d756783eaf",
    "createdAt": "2015-01-16T09:29:38Z",
    "diffHunk": "@@ -37,12 +37,18 @@ private[ui] class AllStagesPage(parent: StagesTab) extends WebUIPage(\"\") {\n       val numCompletedStages = listener.numCompletedStages\n       val failedStages = listener.failedStages.reverse.toSeq\n       val numFailedStages = listener.numFailedStages\n+      val pendingStages = listener.pendingStages.values.toSeq\n+      val numWaitingStages = pendingStages.size\n       val now = System.currentTimeMillis\n \n       val activeStagesTable =\n         new StageTableBase(activeStages.sortBy(_.submissionTime).reverse,\n           parent.basePath, parent.listener, isFairScheduler = parent.isFairScheduler,\n           killEnabled = parent.killEnabled)\n+      val pendingStagesTable =\n+        new StageTableBase(pendingStages.sortBy(_.submissionTime),"
  }, {
    "author": {
      "login": "ScrapCodes"
    },
    "body": "I was thinking about usability, like the most interesting stage which is next to be executed will appear at last. Anyway will change it.\n",
    "commit": "3b11803ae9b64acba2d64ad02d1e31d756783eaf",
    "createdAt": "2015-01-16T11:12:32Z",
    "diffHunk": "@@ -37,12 +37,18 @@ private[ui] class AllStagesPage(parent: StagesTab) extends WebUIPage(\"\") {\n       val numCompletedStages = listener.numCompletedStages\n       val failedStages = listener.failedStages.reverse.toSeq\n       val numFailedStages = listener.numFailedStages\n+      val pendingStages = listener.pendingStages.values.toSeq\n+      val numWaitingStages = pendingStages.size\n       val now = System.currentTimeMillis\n \n       val activeStagesTable =\n         new StageTableBase(activeStages.sortBy(_.submissionTime).reverse,\n           parent.basePath, parent.listener, isFairScheduler = parent.isFairScheduler,\n           killEnabled = parent.killEnabled)\n+      val pendingStagesTable =\n+        new StageTableBase(pendingStages.sortBy(_.submissionTime),"
  }],
  "prId": 4043
}, {
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "can you move this up with `activeStages` to make the declarations grouped properly?\n",
    "commit": "3b11803ae9b64acba2d64ad02d1e31d756783eaf",
    "createdAt": "2015-01-16T09:30:00Z",
    "diffHunk": "@@ -37,12 +37,18 @@ private[ui] class AllStagesPage(parent: StagesTab) extends WebUIPage(\"\") {\n       val numCompletedStages = listener.numCompletedStages\n       val failedStages = listener.failedStages.reverse.toSeq\n       val numFailedStages = listener.numFailedStages\n+      val pendingStages = listener.pendingStages.values.toSeq"
  }],
  "prId": 4043
}]