[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "Moved to SparkEnv.scala\n",
    "commit": "e5f14fa5e63636c5eee5df084c913d938fdee541",
    "createdAt": "2014-03-12T03:29:54Z",
    "diffHunk": "@@ -19,76 +19,74 @@ package org.apache.spark.ui.env\n \n import javax.servlet.http.HttpServletRequest\n \n-import scala.collection.JavaConversions._\n-import scala.util.Properties\n import scala.xml.Node\n \n import org.eclipse.jetty.servlet.ServletContextHandler\n \n-import org.apache.spark.SparkContext\n+import org.apache.spark.scheduler._\n+import org.apache.spark.ui._\n import org.apache.spark.ui.JettyUtils._\n import org.apache.spark.ui.Page.Environment\n-import org.apache.spark.ui.UIUtils\n \n-private[spark] class EnvironmentUI(sc: SparkContext) {\n+private[ui] class EnvironmentUI(parent: SparkUI) {\n+  private val appName = parent.appName\n+  private val basePath = parent.basePath\n+  private var _listener: Option[EnvironmentListener] = None\n+\n+  lazy val listener = _listener.get\n+\n+  def start() {\n+    _listener = Some(new EnvironmentListener)\n+  }\n \n   def getHandlers = Seq[ServletContextHandler](\n     createServletHandler(\"/environment\",\n-      createServlet((request: HttpServletRequest) => envDetails(request), sc.env.securityManager))\n+      (request: HttpServletRequest) => render(request), parent.securityManager, basePath)\n   )\n \n-  def envDetails(request: HttpServletRequest): Seq[Node] = {\n-    val jvmInformation = Seq(\n-      (\"Java Version\", \"%s (%s)\".format(Properties.javaVersion, Properties.javaVendor)),\n-      (\"Java Home\", Properties.javaHome),\n-      (\"Scala Version\", Properties.versionString),\n-      (\"Scala Home\", Properties.scalaHome)\n-    ).sorted\n-    def jvmRow(kv: (String, String)) = <tr><td>{kv._1}</td><td>{kv._2}</td></tr>\n-    def jvmTable =\n-      UIUtils.listingTable(Seq(\"Name\", \"Value\"), jvmRow, jvmInformation, fixedWidth = true)\n-\n-    val sparkProperties = sc.conf.getAll.sorted\n-\n-    val systemProperties = System.getProperties.iterator.toSeq\n-    val classPathProperty = systemProperties.find { case (k, v) =>\n-      k == \"java.class.path\"\n-    }.getOrElse((\"\", \"\"))\n-    val otherProperties = systemProperties.filter { case (k, v) =>\n-      k != \"java.class.path\" && !k.startsWith(\"spark.\")\n-    }.sorted\n-\n-    val propertyHeaders = Seq(\"Name\", \"Value\")\n-    def propertyRow(kv: (String, String)) = <tr><td>{kv._1}</td><td>{kv._2}</td></tr>\n-    val sparkPropertyTable =\n-      UIUtils.listingTable(propertyHeaders, propertyRow, sparkProperties, fixedWidth = true)\n-    val otherPropertyTable =\n-      UIUtils.listingTable(propertyHeaders, propertyRow, otherProperties, fixedWidth = true)\n-\n-    val classPathEntries = classPathProperty._2\n-        .split(sc.conf.get(\"path.separator\", \":\"))\n-        .filterNot(e => e.isEmpty)\n-        .map(e => (e, \"System Classpath\"))\n-    val addedJars = sc.addedJars.iterator.toSeq.map{case (path, time) => (path, \"Added By User\")}\n-    val addedFiles = sc.addedFiles.iterator.toSeq.map{case (path, time) => (path, \"Added By User\")}\n-    val classPath = (addedJars ++ addedFiles ++ classPathEntries).sorted\n-\n-    val classPathHeaders = Seq(\"Resource\", \"Source\")\n-    def classPathRow(data: (String, String)) = <tr><td>{data._1}</td><td>{data._2}</td></tr>\n-    val classPathTable =\n-      UIUtils.listingTable(classPathHeaders, classPathRow, classPath, fixedWidth = true)\n-",
    "line": 75
  }],
  "prId": 42
}]