[{
  "comments": [{
    "author": {
      "login": "mridulm"
    },
    "body": "private ?\n",
    "commit": "96621633534e84eb8e9a33c4e7afbec62b776430",
    "createdAt": "2016-11-03T10:08:56Z",
    "diffHunk": "@@ -197,8 +196,32 @@ private[spark] object UIData {\n       shuffleWriteMetrics: ShuffleWriteMetricsUIData)\n \n   case class InputMetricsUIData(bytesRead: Long, recordsRead: Long)\n+  object InputMetricsUIData {\n+    def apply(metrics: InputMetrics): InputMetricsUIData = {\n+      if (metrics.bytesRead == 0 && metrics.recordsRead == 0) {\n+        EMPTY\n+      } else {\n+        new InputMetricsUIData(\n+          bytesRead = metrics.bytesRead,\n+          recordsRead = metrics.recordsRead)\n+      }\n+    }\n+    val EMPTY = InputMetricsUIData(0, 0)"
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "Done.\n",
    "commit": "96621633534e84eb8e9a33c4e7afbec62b776430",
    "createdAt": "2016-11-03T18:06:38Z",
    "diffHunk": "@@ -197,8 +196,32 @@ private[spark] object UIData {\n       shuffleWriteMetrics: ShuffleWriteMetricsUIData)\n \n   case class InputMetricsUIData(bytesRead: Long, recordsRead: Long)\n+  object InputMetricsUIData {\n+    def apply(metrics: InputMetrics): InputMetricsUIData = {\n+      if (metrics.bytesRead == 0 && metrics.recordsRead == 0) {\n+        EMPTY\n+      } else {\n+        new InputMetricsUIData(\n+          bytesRead = metrics.bytesRead,\n+          recordsRead = metrics.recordsRead)\n+      }\n+    }\n+    val EMPTY = InputMetricsUIData(0, 0)"
  }],
  "prId": 15743
}, {
  "comments": [{
    "author": {
      "login": "mridulm"
    },
    "body": "I assume the else block is more common ?\nIf yes, would be good to invert the condition.\n",
    "commit": "96621633534e84eb8e9a33c4e7afbec62b776430",
    "createdAt": "2016-11-03T10:10:14Z",
    "diffHunk": "@@ -197,8 +196,32 @@ private[spark] object UIData {\n       shuffleWriteMetrics: ShuffleWriteMetricsUIData)\n \n   case class InputMetricsUIData(bytesRead: Long, recordsRead: Long)\n+  object InputMetricsUIData {\n+    def apply(metrics: InputMetrics): InputMetricsUIData = {\n+      if (metrics.bytesRead == 0 && metrics.recordsRead == 0) {\n+        EMPTY\n+      } else {\n+        new InputMetricsUIData(\n+          bytesRead = metrics.bytesRead,\n+          recordsRead = metrics.recordsRead)\n+      }\n+    }\n+    val EMPTY = InputMetricsUIData(0, 0)\n+  }\n \n   case class OutputMetricsUIData(bytesWritten: Long, recordsWritten: Long)\n+  object OutputMetricsUIData {\n+    def apply(metrics: OutputMetrics): OutputMetricsUIData = {\n+      if (metrics.bytesWritten == 0 && metrics.recordsWritten == 0) {",
    "line": 53
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "For OutputMetrics, I'd actually assume the opposite: these metrics are referring to bytes written to an external system, not bytes written to shuffle, so the majority of tasks won't have non-zero values for this metric (all but the last stage in a multi-stage job, for example).\n",
    "commit": "96621633534e84eb8e9a33c4e7afbec62b776430",
    "createdAt": "2016-11-03T18:06:29Z",
    "diffHunk": "@@ -197,8 +196,32 @@ private[spark] object UIData {\n       shuffleWriteMetrics: ShuffleWriteMetricsUIData)\n \n   case class InputMetricsUIData(bytesRead: Long, recordsRead: Long)\n+  object InputMetricsUIData {\n+    def apply(metrics: InputMetrics): InputMetricsUIData = {\n+      if (metrics.bytesRead == 0 && metrics.recordsRead == 0) {\n+        EMPTY\n+      } else {\n+        new InputMetricsUIData(\n+          bytesRead = metrics.bytesRead,\n+          recordsRead = metrics.recordsRead)\n+      }\n+    }\n+    val EMPTY = InputMetricsUIData(0, 0)\n+  }\n \n   case class OutputMetricsUIData(bytesWritten: Long, recordsWritten: Long)\n+  object OutputMetricsUIData {\n+    def apply(metrics: OutputMetrics): OutputMetricsUIData = {\n+      if (metrics.bytesWritten == 0 && metrics.recordsWritten == 0) {",
    "line": 53
  }, {
    "author": {
      "login": "mridulm"
    },
    "body": "sounds good\n",
    "commit": "96621633534e84eb8e9a33c4e7afbec62b776430",
    "createdAt": "2016-11-07T18:52:57Z",
    "diffHunk": "@@ -197,8 +196,32 @@ private[spark] object UIData {\n       shuffleWriteMetrics: ShuffleWriteMetricsUIData)\n \n   case class InputMetricsUIData(bytesRead: Long, recordsRead: Long)\n+  object InputMetricsUIData {\n+    def apply(metrics: InputMetrics): InputMetricsUIData = {\n+      if (metrics.bytesRead == 0 && metrics.recordsRead == 0) {\n+        EMPTY\n+      } else {\n+        new InputMetricsUIData(\n+          bytesRead = metrics.bytesRead,\n+          recordsRead = metrics.recordsRead)\n+      }\n+    }\n+    val EMPTY = InputMetricsUIData(0, 0)\n+  }\n \n   case class OutputMetricsUIData(bytesWritten: Long, recordsWritten: Long)\n+  object OutputMetricsUIData {\n+    def apply(metrics: OutputMetrics): OutputMetricsUIData = {\n+      if (metrics.bytesWritten == 0 && metrics.recordsWritten == 0) {",
    "line": 53
  }],
  "prId": 15743
}]