[{
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "also here, capitalize first letter\n",
    "commit": "87f8172fbc1e219cea18e80996b6b0fd12b141de",
    "createdAt": "2015-09-21T20:11:36Z",
    "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.ui.memory\n+\n+import java.util.Date\n+\n+import scala.xml.Node\n+\n+import org.apache.spark.scheduler.StageInfo\n+import org.apache.spark.ui.jobs.JobProgressListener\n+import org.apache.spark.ui.UIUtils\n+import org.apache.spark.util.Utils\n+\n+\n+private[ui] class MemTableBase(\n+    memInfos: Seq[(String, MemoryUIInfo)],\n+    listener: MemoryListener) {\n+\n+  protected def columns: Seq[Node] = {\n+    <th>Executor ID</th>\n+    <th>Address</th>\n+    <th>Net Memory (on-heap)</th>\n+    <th>Net Memory (direct-heap)</th>\n+    <th>Peak Net Memory (on-heap) / Happen Time</th>\n+    <th>Peak Net Read (direct-heap) / Happen Time</th>\n+  }\n+\n+  def toNodeSeq: Seq[Node] = {\n+    listener.synchronized {\n+      memTable(showRow, memInfos)\n+    }\n+  }\n+\n+  protected def memTable[T](makeRow: T => Seq[Node], rows: Seq[T]): Seq[Node] = {\n+    <table class={UIUtils.TABLE_CLASS_STRIPED}>\n+      <thead>\n+        {columns}\n+      </thead>\n+      <tbody>\n+        {rows.map(r => makeRow(r))}\n+      </tbody>\n+    </table>\n+  }\n+\n+  /** Render an HTML row representing an executor */\n+  private def showRow(info: (String, MemoryUIInfo)): Seq[Node] = {\n+    <tr>\n+      <td>\n+        {info._1}\n+      </td>\n+      <td>\n+        {info._2.executorAddress}\n+      </td>\n+      {if (info._2.transportInfo.isDefined) {\n+        <td>\n+          {Utils.bytesToString(info._2.transportInfo.get.onheapSize)}\n+        </td>\n+        <td>\n+          {Utils.bytesToString(info._2.transportInfo.get.directheapSize)}\n+        </td>\n+        <td>\n+          {Utils.bytesToString(info._2.transportInfo.get.peakOnheapSizeTime.memorySize)}\n+          /\n+          {UIUtils.formatDate(info._2.transportInfo.get.peakOnheapSizeTime.timeStamp)}\n+        </td>\n+        <td>\n+          {Utils.bytesToString(info._2.transportInfo.get.peakDirectheapSizeTime.memorySize)}\n+          /\n+          {UIUtils.formatDate(info._2.transportInfo.get.peakDirectheapSizeTime.timeStamp)}\n+        </td>\n+      } else {\n+        <td>N/A</td>\n+        <td>N/A</td>\n+        <td>N/A</td>\n+        <td>N/A</td>\n+      }}\n+    </tr>\n+  }\n+}\n+\n+private[ui] class stagesTableBase("
  }],
  "prId": 7753
}]