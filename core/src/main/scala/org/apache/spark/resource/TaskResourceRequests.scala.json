[{
  "comments": [{
    "author": {
      "login": "holdenk"
    },
    "body": "I feel like this is an odd way of doing this, could we have a double amount & an int as different signatures? Just thinking of someone scaling up the % of a resource and then not being able to specify more than 50% of a resource seems weird. If we do want to do this with a single type/function I'd say maybe keep it as a fraction up to but not including 1.\r\n\r\nAlso what would we do in the case a user asks for half a GPU?",
    "commit": "246de3c66c8c5a656b766ccd2f9bb3df12c9da0d",
    "createdAt": "2019-11-15T17:24:18Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.resource\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.resource.ResourceProfile._\n+import org.apache.spark.resource.ResourceUtils._\n+\n+/**\n+ * A set of task resource requests. This is used in conjuntion with the ResourceProfile to\n+ * programmatically specify the resources needed for an RDD that will be applied at the\n+ * stage level.\n+ *\n+ * This api is currently private until the rest of the pieces are in place and then it\n+ * will become public.\n+ */\n+private[spark] class TaskResourceRequests() extends Serializable {\n+\n+  private val _taskResources = new mutable.HashMap[String, TaskResourceRequest]()\n+\n+  def requests: Map[String, TaskResourceRequest] = _taskResources.toMap\n+\n+  /**\n+   * Specify number of cpus per Task.\n+   *\n+   * @param amount Number of cpus to allocate per Task.\n+   */\n+  def cpus(amount: Int): this.type = {\n+    val t = new TaskResourceRequest(CPUS, amount)\n+    _taskResources(CPUS) = t\n+    this\n+  }\n+\n+  /**\n+   *  Amount of a particular custom resource(GPU, FPGA, etc) to use. The resource names supported\n+   *  correspond to the regular Spark configs with the prefix removed. For instance, resources\n+   *  like GPUs are resource.gpu (spark configs spark.task.resource.gpu.*)\n+   *\n+   * @param resourceName Name of the resource.\n+   * @param amount Amount requesting as a Double to support fractional resource requests.",
    "line": 56
  }, {
    "author": {
      "login": "holdenk"
    },
    "body": "For the half-a-GPU I'm thinking about the situation where the node has one GPU and we ask for 0.5 of it. But maybe the nodes will all have more than that.",
    "commit": "246de3c66c8c5a656b766ccd2f9bb3df12c9da0d",
    "createdAt": "2019-11-15T17:44:19Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.resource\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.resource.ResourceProfile._\n+import org.apache.spark.resource.ResourceUtils._\n+\n+/**\n+ * A set of task resource requests. This is used in conjuntion with the ResourceProfile to\n+ * programmatically specify the resources needed for an RDD that will be applied at the\n+ * stage level.\n+ *\n+ * This api is currently private until the rest of the pieces are in place and then it\n+ * will become public.\n+ */\n+private[spark] class TaskResourceRequests() extends Serializable {\n+\n+  private val _taskResources = new mutable.HashMap[String, TaskResourceRequest]()\n+\n+  def requests: Map[String, TaskResourceRequest] = _taskResources.toMap\n+\n+  /**\n+   * Specify number of cpus per Task.\n+   *\n+   * @param amount Number of cpus to allocate per Task.\n+   */\n+  def cpus(amount: Int): this.type = {\n+    val t = new TaskResourceRequest(CPUS, amount)\n+    _taskResources(CPUS) = t\n+    this\n+  }\n+\n+  /**\n+   *  Amount of a particular custom resource(GPU, FPGA, etc) to use. The resource names supported\n+   *  correspond to the regular Spark configs with the prefix removed. For instance, resources\n+   *  like GPUs are resource.gpu (spark configs spark.task.resource.gpu.*)\n+   *\n+   * @param resourceName Name of the resource.\n+   * @param amount Amount requesting as a Double to support fractional resource requests.",
    "line": 56
  }, {
    "author": {
      "login": "tgravescs"
    },
    "body": "less then 1 gpu really means I want X tasks per GPU.  This use case is completely possible and we do this all the time. You can get performance wins when multiple spark tasks share the GPU because many times the data of 1 task is not enough to use the entire GPU and you can also overlap the copies to/from with the actual kernels running.",
    "commit": "246de3c66c8c5a656b766ccd2f9bb3df12c9da0d",
    "createdAt": "2019-11-15T21:42:04Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.resource\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.resource.ResourceProfile._\n+import org.apache.spark.resource.ResourceUtils._\n+\n+/**\n+ * A set of task resource requests. This is used in conjuntion with the ResourceProfile to\n+ * programmatically specify the resources needed for an RDD that will be applied at the\n+ * stage level.\n+ *\n+ * This api is currently private until the rest of the pieces are in place and then it\n+ * will become public.\n+ */\n+private[spark] class TaskResourceRequests() extends Serializable {\n+\n+  private val _taskResources = new mutable.HashMap[String, TaskResourceRequest]()\n+\n+  def requests: Map[String, TaskResourceRequest] = _taskResources.toMap\n+\n+  /**\n+   * Specify number of cpus per Task.\n+   *\n+   * @param amount Number of cpus to allocate per Task.\n+   */\n+  def cpus(amount: Int): this.type = {\n+    val t = new TaskResourceRequest(CPUS, amount)\n+    _taskResources(CPUS) = t\n+    this\n+  }\n+\n+  /**\n+   *  Amount of a particular custom resource(GPU, FPGA, etc) to use. The resource names supported\n+   *  correspond to the regular Spark configs with the prefix removed. For instance, resources\n+   *  like GPUs are resource.gpu (spark configs spark.task.resource.gpu.*)\n+   *\n+   * @param resourceName Name of the resource.\n+   * @param amount Amount requesting as a Double to support fractional resource requests.",
    "line": 56
  }],
  "prId": 26284
}]