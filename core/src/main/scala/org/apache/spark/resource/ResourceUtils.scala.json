[{
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "lets add description, especially explaining numParts and amount. Mention fractional use case where amount is user specified get changed to 1 and numParts is the number per resource equivalent.\r\n\r\nAlso need to fix formatting.  Please use formatting like ResourceRequest above",
    "commit": "d579c5d50ee793a09eebbb94f7998012ec81aa1e",
    "createdAt": "2019-10-10T14:03:42Z",
    "diffHunk": "@@ -47,7 +48,9 @@ private[spark] case class ResourceRequest(\n     discoveryScript: Option[String],\n     vendor: Option[String])\n \n-private[spark] case class ResourceRequirement(resourceName: String, amount: Int)\n+private[spark] case class ResourceRequirement(resourceName: String, amount: Int,"
  }],
  "prId": 26078
}, {
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "remove emtpy {}",
    "commit": "d579c5d50ee793a09eebbb94f7998012ec81aa1e",
    "createdAt": "2019-10-21T15:45:44Z",
    "diffHunk": "@@ -47,7 +48,25 @@ private[spark] case class ResourceRequest(\n     discoveryScript: Option[String],\n     vendor: Option[String])\n \n-private[spark] case class ResourceRequirement(resourceName: String, amount: Int)\n+/**\n+ * Case class that represents a user's resource requirement as given by configuration\n+ * (e.g spark.task.resource.[resource type].amount = 4)\n+ *\n+ * A configuration of spark.task.resource.[resource type].amount = 4, equates to:\n+ * amount = 4, and numParts = 1.\n+ *\n+ * A configuration of spark.task.resource.[resource type].amount = 0.25, equates to:\n+ * amount = 1, and numParts = 4.\n+ *\n+ * @param resourceName gpu, fpga, etc.\n+ * @param amount whole units of the resource we expect (e.g. 1 gpus, 2 fpgas)\n+ * @param numParts if not 1, the number of ways a whole resource is subdivided.\n+ */\n+private[spark] case class ResourceRequirement(\n+    resourceName: String,\n+    amount: Int,\n+    numParts: Int = 1) {"
  }, {
    "author": {
      "login": "abellina"
    },
    "body": "not sure how that got there, but fixed.",
    "commit": "d579c5d50ee793a09eebbb94f7998012ec81aa1e",
    "createdAt": "2019-10-22T13:40:08Z",
    "diffHunk": "@@ -47,7 +48,25 @@ private[spark] case class ResourceRequest(\n     discoveryScript: Option[String],\n     vendor: Option[String])\n \n-private[spark] case class ResourceRequirement(resourceName: String, amount: Int)\n+/**\n+ * Case class that represents a user's resource requirement as given by configuration\n+ * (e.g spark.task.resource.[resource type].amount = 4)\n+ *\n+ * A configuration of spark.task.resource.[resource type].amount = 4, equates to:\n+ * amount = 4, and numParts = 1.\n+ *\n+ * A configuration of spark.task.resource.[resource type].amount = 0.25, equates to:\n+ * amount = 1, and numParts = 4.\n+ *\n+ * @param resourceName gpu, fpga, etc.\n+ * @param amount whole units of the resource we expect (e.g. 1 gpus, 2 fpgas)\n+ * @param numParts if not 1, the number of ways a whole resource is subdivided.\n+ */\n+private[spark] case class ResourceRequirement(\n+    resourceName: String,\n+    amount: Int,\n+    numParts: Int = 1) {"
  }],
  "prId": 26078
}, {
  "comments": [{
    "author": {
      "login": "jiangxb1987"
    },
    "body": "nit: Instead of mentioning `a user's resource requirement`, I would prefer `a task` or `an application`",
    "commit": "d579c5d50ee793a09eebbb94f7998012ec81aa1e",
    "createdAt": "2019-10-29T21:18:21Z",
    "diffHunk": "@@ -47,7 +48,24 @@ private[spark] case class ResourceRequest(\n     discoveryScript: Option[String],\n     vendor: Option[String])\n \n-private[spark] case class ResourceRequirement(resourceName: String, amount: Int)\n+/**\n+ * Case class that represents a user's resource requirement as given by configuration"
  }],
  "prId": 26078
}, {
  "comments": [{
    "author": {
      "login": "jiangxb1987"
    },
    "body": "nit: do we use `[resource type]` elsewhere? I'd prefer keep the naming similar to other parts of docs/comments, e.g. `${resourceName}`",
    "commit": "d579c5d50ee793a09eebbb94f7998012ec81aa1e",
    "createdAt": "2019-10-29T21:20:06Z",
    "diffHunk": "@@ -47,7 +48,24 @@ private[spark] case class ResourceRequest(\n     discoveryScript: Option[String],\n     vendor: Option[String])\n \n-private[spark] case class ResourceRequirement(resourceName: String, amount: Int)\n+/**\n+ * Case class that represents a user's resource requirement as given by configuration\n+ * (e.g spark.task.resource.[resource type].amount = 4)"
  }],
  "prId": 26078
}, {
  "comments": [{
    "author": {
      "login": "jiangxb1987"
    },
    "body": "If we don't support the case `amount` > 1 and `numParts` != 1, then we'd better document it explicitly in the comment.",
    "commit": "d579c5d50ee793a09eebbb94f7998012ec81aa1e",
    "createdAt": "2019-10-29T21:22:44Z",
    "diffHunk": "@@ -47,7 +48,24 @@ private[spark] case class ResourceRequest(\n     discoveryScript: Option[String],\n     vendor: Option[String])\n \n-private[spark] case class ResourceRequirement(resourceName: String, amount: Int)\n+/**\n+ * Case class that represents a user's resource requirement as given by configuration\n+ * (e.g spark.task.resource.[resource type].amount = 4)\n+ *\n+ * A configuration of spark.task.resource.[resource type].amount = 4, equates to:\n+ * amount = 4, and numParts = 1.\n+ *\n+ * A configuration of spark.task.resource.[resource type].amount = 0.25, equates to:\n+ * amount = 1, and numParts = 4.\n+ *\n+ * @param resourceName gpu, fpga, etc.\n+ * @param amount whole units of the resource we expect (e.g. 1 gpus, 2 fpgas)\n+ * @param numParts if not 1, the number of ways a whole resource is subdivided.\n+ */\n+private[spark] case class ResourceRequirement(\n+    resourceName: String,\n+    amount: Int,\n+    numParts: Int = 1)",
    "line": 50
  }],
  "prId": 26078
}, {
  "comments": [{
    "author": {
      "login": "jiangxb1987"
    },
    "body": "If we are going to allow the resource amount to be double, then we'd better update all the places where `AMOUNT` is referred to, e.g. https://github.com/apache/spark/pull/26078/files#diff-cf8a27bbb66e5c8fa3f141de053fd2d7L68",
    "commit": "d579c5d50ee793a09eebbb94f7998012ec81aa1e",
    "createdAt": "2019-10-29T21:28:47Z",
    "diffHunk": "@@ -94,8 +112,28 @@ private[spark] object ResourceUtils extends Logging {\n \n   def parseResourceRequirements(sparkConf: SparkConf, componentName: String)\n     : Seq[ResourceRequirement] = {\n-    parseAllResourceRequests(sparkConf, componentName).map { request =>\n-      ResourceRequirement(request.id.resourceName, request.amount)\n+    listResourceIds(sparkConf, componentName).map { resourceId =>\n+      val settings = sparkConf.getAllWithPrefix(resourceId.confPrefix).toMap\n+      val amountDouble = settings.getOrElse(AMOUNT,\n+        throw new SparkException(s\"You must specify an amount for ${resourceId.resourceName}\")\n+      ).toDouble",
    "line": 64
  }, {
    "author": {
      "login": "abellina"
    },
    "body": "I am adding a header to the case class `ResourceRequirement` to help clear this. `AMOUNT` only makes sense as floating point when working with task resource requests. `ResourceRequirements` are at the executor level, and it doesn't make sense to have a fractional resource there, so those should remain being integers. Perhaps `AMOUNT` is a bit too general, but I am not sure we want to change that at this point.",
    "commit": "d579c5d50ee793a09eebbb94f7998012ec81aa1e",
    "createdAt": "2019-11-01T18:20:55Z",
    "diffHunk": "@@ -94,8 +112,28 @@ private[spark] object ResourceUtils extends Logging {\n \n   def parseResourceRequirements(sparkConf: SparkConf, componentName: String)\n     : Seq[ResourceRequirement] = {\n-    parseAllResourceRequests(sparkConf, componentName).map { request =>\n-      ResourceRequirement(request.id.resourceName, request.amount)\n+    listResourceIds(sparkConf, componentName).map { resourceId =>\n+      val settings = sparkConf.getAllWithPrefix(resourceId.confPrefix).toMap\n+      val amountDouble = settings.getOrElse(AMOUNT,\n+        throw new SparkException(s\"You must specify an amount for ${resourceId.resourceName}\")\n+      ).toDouble",
    "line": 64
  }],
  "prId": 26078
}]