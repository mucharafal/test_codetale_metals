[{
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "Or just call it `lock`?\n",
    "commit": "1e5eefac94a2db9b575bd391c3836b9352fdaee0",
    "createdAt": "2015-11-06T18:04:49Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.memory\n+\n+import javax.annotation.concurrent.GuardedBy\n+\n+/**\n+ * Manages bookkeeping for an adjustable-sized region of memory. This class is internal to\n+ * the [[MemoryManager]]. See subclasses for more details.\n+ *\n+ * @param memoryManager a [[MemoryManager]] instance, used for synchronization. We purposely"
  }],
  "prId": 9344
}, {
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "typo\n",
    "commit": "1e5eefac94a2db9b575bd391c3836b9352fdaee0",
    "createdAt": "2015-11-06T22:49:52Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.memory\n+\n+import javax.annotation.concurrent.GuardedBy\n+\n+/**\n+ * Manages bookkeeping for an adjustable-sized region of memory. This class is internal to\n+ * the [[MemoryManager]]. See subclasses for more details.\n+ *\n+ * @param lock a [[MemoryManager]] instance, used for synchronization. We purposely erase the type\n+ *             to `Object` to avoid programming errors, since this object should only be used for\n+ *             synchronization purposes.\n+ */\n+abstract class MemoryPool(lock: Object) {\n+\n+  @GuardedBy(\"lcok\")"
  }],
  "prId": 9344
}, {
  "comments": [{
    "author": {
      "login": "tedyu"
    },
    "body": "Can this check be modified such that at most _poolSize - memoryUsed bytes are freed and the actual number of bytes freed is returned ?\nThis way shrinkPoolToFreeSpace() can check this return value and do eviction accordingly.\n",
    "commit": "1e5eefac94a2db9b575bd391c3836b9352fdaee0",
    "createdAt": "2015-11-07T13:36:22Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.memory\n+\n+import javax.annotation.concurrent.GuardedBy\n+\n+/**\n+ * Manages bookkeeping for an adjustable-sized region of memory. This class is internal to\n+ * the [[MemoryManager]]. See subclasses for more details.\n+ *\n+ * @param lock a [[MemoryManager]] instance, used for synchronization. We purposely erase the type\n+ *             to `Object` to avoid programming errors, since this object should only be used for\n+ *             synchronization purposes.\n+ */\n+abstract class MemoryPool(lock: Object) {\n+\n+  @GuardedBy(\"lock\")\n+  private[this] var _poolSize: Long = 0\n+\n+  /**\n+   * Returns the current size of the pool, in bytes.\n+   */\n+  final def poolSize: Long = lock.synchronized {\n+    _poolSize\n+  }\n+\n+  /**\n+   * Returns the amount of free memory in the pool, in bytes.\n+   */\n+  final def memoryFree: Long = lock.synchronized {\n+    _poolSize - memoryUsed\n+  }\n+\n+  /**\n+   * Expands the pool by `delta` bytes.\n+   */\n+  final def incrementPoolSize(delta: Long): Unit = lock.synchronized {\n+    require(delta >= 0)\n+    _poolSize += delta\n+  }\n+\n+  /**\n+   * Shrinks the pool by `delta` bytes.\n+   */\n+  final def decrementPoolSize(delta: Long): Unit = lock.synchronized {\n+    require(delta >= 0)\n+    require(delta <= _poolSize)\n+    require(_poolSize - delta >= memoryUsed)",
    "line": 63
  }],
  "prId": 9344
}]