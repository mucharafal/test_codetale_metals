[{
  "comments": [{
    "author": {
      "login": "shivaram"
    },
    "body": "This is repeated - line 32 does the same thing\n",
    "commit": "f9214216fe33e365375a071e522cc915be8acd67",
    "createdAt": "2014-08-13T23:05:22Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty.server\n+\n+import io.netty.buffer.ByteBuf\n+import io.netty.channel.ChannelHandlerContext\n+import io.netty.handler.codec.MessageToByteEncoder\n+\n+/**\n+ * A simple encoder for BlockHeader. See [[BlockServer]] for the server to client protocol.\n+ */\n+private[server]\n+class BlockHeaderEncoder extends MessageToByteEncoder[BlockHeader] {\n+  override def encode(ctx: ChannelHandlerContext, msg: BlockHeader, out: ByteBuf): Unit = {\n+    // message = message length (4 bytes) + block id length (4 bytes) + block id + block data\n+    // message length = block id length (4 bytes) + size of block id + size of block data\n+    val blockId = msg.blockId.getBytes\n+    msg.error match {\n+      case Some(errorMsg) =>\n+        val errorBytes = errorMsg.getBytes\n+        out.writeInt(4 + blockId.length + errorBytes.size)\n+        out.writeInt(-blockId.length)\n+        out.writeBytes(blockId)\n+        out.writeBytes(errorBytes)\n+      case None =>\n+        val blockId = msg.blockId.getBytes"
  }],
  "prId": 1907
}]