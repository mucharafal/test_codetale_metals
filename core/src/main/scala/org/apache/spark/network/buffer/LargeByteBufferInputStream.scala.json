[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "skip the `val`?\n",
    "commit": "3447bb995b53c4d93154328c7c7c06e08a5ec9b9",
    "createdAt": "2015-04-20T18:47:58Z",
    "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.buffer\n+\n+import java.io.InputStream\n+\n+/**\n+ * Reads data from a LargeByteBuffer, and optionally cleans it up using buffer.dispose()\n+ * when the stream is closed (e.g. to close a memory-mapped file).\n+ */\n+private[spark]\n+class LargeByteBufferInputStream(private var buffer: LargeByteBuffer, dispose: Boolean = false)\n+  extends InputStream {\n+\n+  override def read(): Int = {\n+    if (buffer == null || buffer.remaining() == 0) {\n+      -1\n+    } else {\n+      buffer.get() & 0xFF\n+    }\n+  }\n+\n+  override def read(dest: Array[Byte]): Int = {\n+    read(dest, 0, dest.length)\n+  }\n+\n+  override def read(dest: Array[Byte], offset: Int, length: Int): Int = {\n+    if (buffer == null || buffer.remaining() == 0) {\n+      -1\n+    } else {\n+      val amountToGet = math.min(buffer.remaining(), length).toInt\n+      buffer.get(dest, offset, amountToGet)\n+      amountToGet\n+    }\n+  }\n+\n+  override def skip(bytes: Long): Long = {\n+    if (buffer != null) {\n+      val skipped = buffer.skip(bytes)"
  }],
  "prId": 5400
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Can you implement this in Java instead?\n",
    "commit": "3447bb995b53c4d93154328c7c7c06e08a5ec9b9",
    "createdAt": "2015-05-29T19:26:00Z",
    "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.buffer\n+\n+import java.io.InputStream\n+\n+/**\n+ * Reads data from a LargeByteBuffer, and optionally cleans it up using buffer.dispose()\n+ * when the stream is closed (e.g. to close a memory-mapped file).\n+ */\n+private[spark]\n+class LargeByteBufferInputStream(private var buffer: LargeByteBuffer, dispose: Boolean = false)"
  }, {
    "author": {
      "login": "squito"
    },
    "body": "sure, I can change it, but just curious -- why?  worried that it some scalaisms will sneak in that hurt performance?  Or for consistence w/ the other LargeByteBuffer classes?  (I figure this will mostly get _used_ from scala code, so I though consistency was a wash either way.)\n",
    "commit": "3447bb995b53c4d93154328c7c7c06e08a5ec9b9",
    "createdAt": "2015-05-29T19:54:00Z",
    "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.buffer\n+\n+import java.io.InputStream\n+\n+/**\n+ * Reads data from a LargeByteBuffer, and optionally cleans it up using buffer.dispose()\n+ * when the stream is closed (e.g. to close a memory-mapped file).\n+ */\n+private[spark]\n+class LargeByteBufferInputStream(private var buffer: LargeByteBuffer, dispose: Boolean = false)"
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "Java static analysis tooling is better (e.g. we can use FindBugs to try to find overflow-prone arithmetic issues).  Also, Java code can benefit from checked exceptions, which is useful when writing lower-level core code.  Checked exceptions may not be an issue for this particular file, but I'm trying to move more of the new low-level code towards Java in order to gain these benefits.\n",
    "commit": "3447bb995b53c4d93154328c7c7c06e08a5ec9b9",
    "createdAt": "2015-05-29T20:35:46Z",
    "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.buffer\n+\n+import java.io.InputStream\n+\n+/**\n+ * Reads data from a LargeByteBuffer, and optionally cleans it up using buffer.dispose()\n+ * when the stream is closed (e.g. to close a memory-mapped file).\n+ */\n+private[spark]\n+class LargeByteBufferInputStream(private var buffer: LargeByteBuffer, dispose: Boolean = false)"
  }],
  "prId": 5400
}]