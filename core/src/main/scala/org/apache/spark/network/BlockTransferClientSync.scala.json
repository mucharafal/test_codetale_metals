[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "I'm not sure I follow the class name. Feel to me like it should be `SyncBlockTransferClient` instead, since the client is synchronous (instead of this being some kind of synchronization object).",
    "commit": "faa583f88b410fc7ededafe36bcb1ef878482d44",
    "createdAt": "2019-04-30T18:18:33Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network\n+\n+import java.nio.ByteBuffer\n+\n+import scala.concurrent.Promise\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.spark.network.buffer.{FileSegmentManagedBuffer, ManagedBuffer, NioManagedBuffer}\n+import org.apache.spark.network.shuffle.{BlockFetchingListener, BlockTransferClient, DownloadFileManager}\n+import org.apache.spark.storage.EncryptedManagedBuffer\n+import org.apache.spark.util.ThreadUtils\n+\n+private[spark] class BlockTransferClientSync(val blockTransferClient: BlockTransferClient) {"
  }, {
    "author": {
      "login": "attilapiros"
    },
    "body": "done",
    "commit": "faa583f88b410fc7ededafe36bcb1ef878482d44",
    "createdAt": "2019-04-30T20:46:14Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network\n+\n+import java.nio.ByteBuffer\n+\n+import scala.concurrent.Promise\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.spark.network.buffer.{FileSegmentManagedBuffer, ManagedBuffer, NioManagedBuffer}\n+import org.apache.spark.network.shuffle.{BlockFetchingListener, BlockTransferClient, DownloadFileManager}\n+import org.apache.spark.storage.EncryptedManagedBuffer\n+import org.apache.spark.util.ThreadUtils\n+\n+private[spark] class BlockTransferClientSync(val blockTransferClient: BlockTransferClient) {"
  }],
  "prId": 24499
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "multi-line arg style is off",
    "commit": "faa583f88b410fc7ededafe36bcb1ef878482d44",
    "createdAt": "2019-04-30T18:18:48Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network\n+\n+import java.nio.ByteBuffer\n+\n+import scala.concurrent.Promise\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.spark.network.buffer.{FileSegmentManagedBuffer, ManagedBuffer, NioManagedBuffer}\n+import org.apache.spark.network.shuffle.{BlockFetchingListener, BlockTransferClient, DownloadFileManager}\n+import org.apache.spark.storage.EncryptedManagedBuffer\n+import org.apache.spark.util.ThreadUtils\n+\n+private[spark] class BlockTransferClientSync(val blockTransferClient: BlockTransferClient) {\n+\n+  /**\n+   * A special case of fetchBlocks, as it fetches only one block and is blocking.\n+   *\n+   * It is also only available after the BlockTransferClient is initialised.\n+   */\n+  def fetchBlockSync(host: String, port: Int, execId: String, blockId: String,"
  }, {
    "author": {
      "login": "attilapiros"
    },
    "body": "done",
    "commit": "faa583f88b410fc7ededafe36bcb1ef878482d44",
    "createdAt": "2019-04-30T20:46:01Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network\n+\n+import java.nio.ByteBuffer\n+\n+import scala.concurrent.Promise\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.spark.network.buffer.{FileSegmentManagedBuffer, ManagedBuffer, NioManagedBuffer}\n+import org.apache.spark.network.shuffle.{BlockFetchingListener, BlockTransferClient, DownloadFileManager}\n+import org.apache.spark.storage.EncryptedManagedBuffer\n+import org.apache.spark.util.ThreadUtils\n+\n+private[spark] class BlockTransferClientSync(val blockTransferClient: BlockTransferClient) {\n+\n+  /**\n+   * A special case of fetchBlocks, as it fetches only one block and is blocking.\n+   *\n+   * It is also only available after the BlockTransferClient is initialised.\n+   */\n+  def fetchBlockSync(host: String, port: Int, execId: String, blockId: String,"
  }],
  "prId": 24499
}]