[{
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "Can we just put this function in `Utils`? Since there isn't any state here, I don't think we need a separate `PortManager` class.\n",
    "commit": "038a579a26ffcfc1c5540f28176f236779eef12a",
    "createdAt": "2014-07-31T00:33:56Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network\n+\n+import java.net.InetSocketAddress\n+\n+import org.apache.spark.{Logging, SparkException}\n+import org.eclipse.jetty.server.Server\n+\n+private[spark] object PortManager extends Logging",
    "line": 25
  }],
  "prId": 1107
}, {
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "this needs to be mod 65536 or else you could go outside of the addressable port range.\n",
    "commit": "038a579a26ffcfc1c5540f28176f236779eef12a",
    "createdAt": "2014-07-31T02:14:29Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network\n+\n+import java.net.InetSocketAddress\n+\n+import org.apache.spark.{Logging, SparkException}\n+import org.eclipse.jetty.server.Server\n+\n+private[spark] object PortManager extends Logging\n+{\n+\n+  /**\n+   * Start service on given port, or attempt to fall back to the n+1 port for a certain number of\n+   * retries\n+   *\n+   * @param startPort\n+   * @param maxRetries Maximum number of retries to attempt.  A value of e.g. 3 will cause 4\n+   *                   total attempts, on ports n, n+1, n+2, and n+3\n+   * @param startService Function to start service on a given port.  Expected to throw a java.net\n+   *                     .BindException if the port is already in use\n+   * @tparam T\n+   * @throws SparkException When unable to start service in the given number of attempts\n+   * @return\n+   */\n+  def startWithIncrements[T](startPort: Int, maxRetries: Int, startService: Int => (T, Int)):\n+      (T, Int) = {\n+    for( offset <- 0 to maxRetries) {\n+      val tryPort = startPort + offset",
    "line": 44
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Also, once it passes 65535 it needs to keep trying at 1024, right? below that ports requires superuser access to open.\n",
    "commit": "038a579a26ffcfc1c5540f28176f236779eef12a",
    "createdAt": "2014-08-07T06:22:46Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network\n+\n+import java.net.InetSocketAddress\n+\n+import org.apache.spark.{Logging, SparkException}\n+import org.eclipse.jetty.server.Server\n+\n+private[spark] object PortManager extends Logging\n+{\n+\n+  /**\n+   * Start service on given port, or attempt to fall back to the n+1 port for a certain number of\n+   * retries\n+   *\n+   * @param startPort\n+   * @param maxRetries Maximum number of retries to attempt.  A value of e.g. 3 will cause 4\n+   *                   total attempts, on ports n, n+1, n+2, and n+3\n+   * @param startService Function to start service on a given port.  Expected to throw a java.net\n+   *                     .BindException if the port is already in use\n+   * @tparam T\n+   * @throws SparkException When unable to start service in the given number of attempts\n+   * @return\n+   */\n+  def startWithIncrements[T](startPort: Int, maxRetries: Int, startService: Int => (T, Int)):\n+      (T, Int) = {\n+    for( offset <- 0 to maxRetries) {\n+      val tryPort = startPort + offset",
    "line": 44
  }],
  "prId": 1107
}, {
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "This and `Server` below are un-used imports\n",
    "commit": "038a579a26ffcfc1c5540f28176f236779eef12a",
    "createdAt": "2014-07-31T02:18:23Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network\n+\n+import java.net.InetSocketAddress",
    "line": 20
  }],
  "prId": 1107
}, {
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "`for (offset <- 0 to maxRetries)`\n",
    "commit": "038a579a26ffcfc1c5540f28176f236779eef12a",
    "createdAt": "2014-07-31T02:21:11Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network\n+\n+import java.net.InetSocketAddress\n+\n+import org.apache.spark.{Logging, SparkException}\n+import org.eclipse.jetty.server.Server\n+\n+private[spark] object PortManager extends Logging\n+{\n+\n+  /**\n+   * Start service on given port, or attempt to fall back to the n+1 port for a certain number of\n+   * retries\n+   *\n+   * @param startPort\n+   * @param maxRetries Maximum number of retries to attempt.  A value of e.g. 3 will cause 4\n+   *                   total attempts, on ports n, n+1, n+2, and n+3\n+   * @param startService Function to start service on a given port.  Expected to throw a java.net\n+   *                     .BindException if the port is already in use\n+   * @tparam T\n+   * @throws SparkException When unable to start service in the given number of attempts\n+   * @return\n+   */\n+  def startWithIncrements[T](startPort: Int, maxRetries: Int, startService: Int => (T, Int)):\n+      (T, Int) = {\n+    for( offset <- 0 to maxRetries) {",
    "line": 43
  }],
  "prId": 1107
}, {
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "this can be pulled into the previous line\n",
    "commit": "038a579a26ffcfc1c5540f28176f236779eef12a",
    "createdAt": "2014-07-31T02:21:21Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network\n+\n+import java.net.InetSocketAddress\n+\n+import org.apache.spark.{Logging, SparkException}\n+import org.eclipse.jetty.server.Server\n+\n+private[spark] object PortManager extends Logging\n+{\n+\n+  /**\n+   * Start service on given port, or attempt to fall back to the n+1 port for a certain number of\n+   * retries\n+   *\n+   * @param startPort\n+   * @param maxRetries Maximum number of retries to attempt.  A value of e.g. 3 will cause 4\n+   *                   total attempts, on ports n, n+1, n+2, and n+3\n+   * @param startService Function to start service on a given port.  Expected to throw a java.net\n+   *                     .BindException if the port is already in use\n+   * @tparam T\n+   * @throws SparkException When unable to start service in the given number of attempts\n+   * @return\n+   */\n+  def startWithIncrements[T](startPort: Int, maxRetries: Int, startService: Int => (T, Int)):\n+      (T, Int) = {\n+    for( offset <- 0 to maxRetries) {\n+      val tryPort = startPort + offset\n+      try {\n+        return startService(tryPort)\n+      } catch {\n+        case e: java.net.BindException => {\n+          if (!e.getMessage.contains(\"Address already in use\") ||\n+            offset == (maxRetries-1)) {",
    "line": 50
  }],
  "prId": 1107
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "This doesn't do anything I believe\n",
    "commit": "038a579a26ffcfc1c5540f28176f236779eef12a",
    "createdAt": "2014-08-04T22:03:14Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network\n+\n+import java.net.InetSocketAddress\n+\n+import org.apache.spark.{Logging, SparkException}\n+import org.eclipse.jetty.server.Server\n+\n+private[spark] object PortManager extends Logging\n+{\n+\n+  /**\n+   * Start service on given port, or attempt to fall back to the n+1 port for a certain number of\n+   * retries\n+   *\n+   * @param startPort\n+   * @param maxRetries Maximum number of retries to attempt.  A value of e.g. 3 will cause 4\n+   *                   total attempts, on ports n, n+1, n+2, and n+3\n+   * @param startService Function to start service on a given port.  Expected to throw a java.net\n+   *                     .BindException if the port is already in use\n+   * @tparam T\n+   * @throws SparkException When unable to start service in the given number of attempts\n+   * @return\n+   */\n+  def startWithIncrements[T](startPort: Int, maxRetries: Int, startService: Int => (T, Int)):\n+      (T, Int) = {\n+    for( offset <- 0 to maxRetries) {\n+      val tryPort = startPort + offset\n+      try {\n+        return startService(tryPort)\n+      } catch {\n+        case e: java.net.BindException => {\n+          if (!e.getMessage.contains(\"Address already in use\") ||\n+            offset == (maxRetries-1)) {\n+            throw e\n+          }\n+          logInfo(\"Could not bind on port: \" + tryPort + \". Attempting port \" + (tryPort + 1))\n+        }\n+        case e: Exception => throw e",
    "line": 55
  }],
  "prId": 1107
}]