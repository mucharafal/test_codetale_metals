[{
  "comments": [{
    "author": {
      "login": "aarondav"
    },
    "body": "If the channel is not connected, remoteAddress() may return null. We should probably avoid an NPE here. By the way, given the usage, you should just need to not call \".toString\", and let the string interpolation take care of it.\n",
    "commit": "bdab2c74111c8bce382323f68732f87ca9b080a9",
    "createdAt": "2014-10-03T21:45:58Z",
    "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty\n+\n+import java.io.Closeable\n+import java.util.concurrent.TimeoutException\n+\n+import scala.concurrent.{Future, promise}\n+\n+import io.netty.channel.{ChannelFuture, ChannelFutureListener}\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.network.{ManagedBuffer, BlockFetchingListener}\n+import org.apache.spark.storage.StorageLevel\n+\n+\n+/**\n+ * Client for [[NettyBlockTransferService]]. The connection to server must have been established\n+ * using [[BlockClientFactory]] before instantiating this.\n+ *\n+ * This class is used to make requests to the server , while [[BlockClientHandler]] is responsible\n+ * for handling responses from the server.\n+ *\n+ * Concurrency: thread safe and can be called from multiple threads.\n+ *\n+ * @param cf the ChannelFuture for the connection.\n+ * @param handler [[BlockClientHandler]] for handling outstanding requests.\n+ */\n+@throws[TimeoutException]\n+private[netty]\n+class BlockClient(cf: ChannelFuture, handler: BlockClientHandler) extends Closeable with Logging {\n+\n+  private[this] val serverAddr = cf.channel().remoteAddress().toString",
    "line": 48
  }],
  "prId": 2330
}]