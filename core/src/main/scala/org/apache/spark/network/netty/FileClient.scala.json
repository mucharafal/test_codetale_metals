[{
  "comments": [{
    "author": {
      "login": "aarondav"
    },
    "body": "The comment \"// 1 min\" wasn't useless because it's not 100% clear that this is in seconds otherwise (though one could guess)\n",
    "commit": "332422fefb1b450de92fe8c31098ea036e7f3860",
    "createdAt": "2014-08-10T20:34:52Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty\n+\n+import java.util.concurrent.TimeUnit\n+\n+import io.netty.bootstrap.Bootstrap\n+import io.netty.channel.{Channel, ChannelOption, EventLoopGroup}\n+import io.netty.channel.oio.OioEventLoopGroup\n+import io.netty.channel.socket.oio.OioSocketChannel\n+\n+import org.apache.spark.Logging\n+\n+class FileClient(handler: FileClientHandler, connectTimeout: Int) extends Logging {\n+\n+  private var channel: Channel = _\n+  private var bootstrap: Bootstrap = _\n+  private var group: EventLoopGroup = _\n+  private val sendTimeout = 60",
    "line": 34
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "This will be gone soon.\n",
    "commit": "332422fefb1b450de92fe8c31098ea036e7f3860",
    "createdAt": "2014-08-11T00:53:50Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty\n+\n+import java.util.concurrent.TimeUnit\n+\n+import io.netty.bootstrap.Bootstrap\n+import io.netty.channel.{Channel, ChannelOption, EventLoopGroup}\n+import io.netty.channel.oio.OioEventLoopGroup\n+import io.netty.channel.socket.oio.OioSocketChannel\n+\n+import org.apache.spark.Logging\n+\n+class FileClient(handler: FileClientHandler, connectTimeout: Int) extends Logging {\n+\n+  private var channel: Channel = _\n+  private var bootstrap: Bootstrap = _\n+  private var group: EventLoopGroup = _\n+  private val sendTimeout = 60",
    "line": 34
  }],
  "prId": 1865
}, {
  "comments": [{
    "author": {
      "login": "aarondav"
    },
    "body": "Why is this needed?\n",
    "commit": "332422fefb1b450de92fe8c31098ea036e7f3860",
    "createdAt": "2014-08-10T20:35:34Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty\n+\n+import java.util.concurrent.TimeUnit\n+\n+import io.netty.bootstrap.Bootstrap\n+import io.netty.channel.{Channel, ChannelOption, EventLoopGroup}\n+import io.netty.channel.oio.OioEventLoopGroup\n+import io.netty.channel.socket.oio.OioSocketChannel\n+\n+import org.apache.spark.Logging\n+\n+class FileClient(handler: FileClientHandler, connectTimeout: Int) extends Logging {\n+\n+  private var channel: Channel = _\n+  private var bootstrap: Bootstrap = _\n+  private var group: EventLoopGroup = _\n+  private val sendTimeout = 60\n+\n+  def init(): Unit = {\n+    group = new OioEventLoopGroup\n+    bootstrap = new Bootstrap\n+    bootstrap.group(group)\n+      .channel(classOf[OioSocketChannel])\n+      .option(ChannelOption.SO_KEEPALIVE, java.lang.Boolean.TRUE)\n+      .option(ChannelOption.TCP_NODELAY, java.lang.Boolean.TRUE)\n+      .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, Integer.valueOf(connectTimeout))",
    "line": 43
  }, {
    "author": {
      "login": "shivaram"
    },
    "body": "I think having a connectTimeout is pretty useful ? I often notice connect timeouts on EC2 and this is not configurable in the default shuffle implementation (that is partly because we use NIO with SocketChannels etc.)\n",
    "commit": "332422fefb1b450de92fe8c31098ea036e7f3860",
    "createdAt": "2014-08-10T20:50:16Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty\n+\n+import java.util.concurrent.TimeUnit\n+\n+import io.netty.bootstrap.Bootstrap\n+import io.netty.channel.{Channel, ChannelOption, EventLoopGroup}\n+import io.netty.channel.oio.OioEventLoopGroup\n+import io.netty.channel.socket.oio.OioSocketChannel\n+\n+import org.apache.spark.Logging\n+\n+class FileClient(handler: FileClientHandler, connectTimeout: Int) extends Logging {\n+\n+  private var channel: Channel = _\n+  private var bootstrap: Bootstrap = _\n+  private var group: EventLoopGroup = _\n+  private val sendTimeout = 60\n+\n+  def init(): Unit = {\n+    group = new OioEventLoopGroup\n+    bootstrap = new Bootstrap\n+    bootstrap.group(group)\n+      .channel(classOf[OioSocketChannel])\n+      .option(ChannelOption.SO_KEEPALIVE, java.lang.Boolean.TRUE)\n+      .option(ChannelOption.TCP_NODELAY, java.lang.Boolean.TRUE)\n+      .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, Integer.valueOf(connectTimeout))",
    "line": 43
  }, {
    "author": {
      "login": "aarondav"
    },
    "body": "Sorry, wasn't asking about connectTimeout, I meant the Integer.valueOf(). I'm guessing it just doesn't compile without, which is kinda weird, you'd think there'd be a conversion from primitive to boxed in the Scala compiler.\n",
    "commit": "332422fefb1b450de92fe8c31098ea036e7f3860",
    "createdAt": "2014-08-10T20:59:16Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty\n+\n+import java.util.concurrent.TimeUnit\n+\n+import io.netty.bootstrap.Bootstrap\n+import io.netty.channel.{Channel, ChannelOption, EventLoopGroup}\n+import io.netty.channel.oio.OioEventLoopGroup\n+import io.netty.channel.socket.oio.OioSocketChannel\n+\n+import org.apache.spark.Logging\n+\n+class FileClient(handler: FileClientHandler, connectTimeout: Int) extends Logging {\n+\n+  private var channel: Channel = _\n+  private var bootstrap: Bootstrap = _\n+  private var group: EventLoopGroup = _\n+  private val sendTimeout = 60\n+\n+  def init(): Unit = {\n+    group = new OioEventLoopGroup\n+    bootstrap = new Bootstrap\n+    bootstrap.group(group)\n+      .channel(classOf[OioSocketChannel])\n+      .option(ChannelOption.SO_KEEPALIVE, java.lang.Boolean.TRUE)\n+      .option(ChannelOption.TCP_NODELAY, java.lang.Boolean.TRUE)\n+      .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, Integer.valueOf(connectTimeout))",
    "line": 43
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "Yea it didn't compile. \n",
    "commit": "332422fefb1b450de92fe8c31098ea036e7f3860",
    "createdAt": "2014-08-10T21:07:26Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty\n+\n+import java.util.concurrent.TimeUnit\n+\n+import io.netty.bootstrap.Bootstrap\n+import io.netty.channel.{Channel, ChannelOption, EventLoopGroup}\n+import io.netty.channel.oio.OioEventLoopGroup\n+import io.netty.channel.socket.oio.OioSocketChannel\n+\n+import org.apache.spark.Logging\n+\n+class FileClient(handler: FileClientHandler, connectTimeout: Int) extends Logging {\n+\n+  private var channel: Channel = _\n+  private var bootstrap: Bootstrap = _\n+  private var group: EventLoopGroup = _\n+  private val sendTimeout = 60\n+\n+  def init(): Unit = {\n+    group = new OioEventLoopGroup\n+    bootstrap = new Bootstrap\n+    bootstrap.group(group)\n+      .channel(classOf[OioSocketChannel])\n+      .option(ChannelOption.SO_KEEPALIVE, java.lang.Boolean.TRUE)\n+      .option(ChannelOption.TCP_NODELAY, java.lang.Boolean.TRUE)\n+      .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, Integer.valueOf(connectTimeout))",
    "line": 43
  }],
  "prId": 1865
}]