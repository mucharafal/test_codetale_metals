[{
  "comments": [{
    "author": {
      "login": "shivaram"
    },
    "body": "This seems generally useful. I'd say move this to `org/apache/spark/util` ?\n",
    "commit": "f9214216fe33e365375a071e522cc915be8acd67",
    "createdAt": "2014-08-13T20:24:36Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty.client\n+\n+/**\n+ * A simple iterator that lazily initializes the underlying iterator.\n+ *\n+ * The use case is that sometimes we might have many iterators open at the same time, and each of\n+ * the iterator might initialize its own buffer (e.g. decompression buffer, deserialization buffer).\n+ * This could lead to too many buffers open. If this iterator is used, we lazily initialize those\n+ * buffers.\n+ */\n+private[spark]\n+class LazyInitIterator(createIterator: => Iterator[Any]) extends Iterator[Any] {",
    "line": 29
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "It's a good idea. Let's do that later. for this one i want to minimize the change to the non-netty part of Spark.\n",
    "commit": "f9214216fe33e365375a071e522cc915be8acd67",
    "createdAt": "2014-08-13T20:51:02Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty.client\n+\n+/**\n+ * A simple iterator that lazily initializes the underlying iterator.\n+ *\n+ * The use case is that sometimes we might have many iterators open at the same time, and each of\n+ * the iterator might initialize its own buffer (e.g. decompression buffer, deserialization buffer).\n+ * This could lead to too many buffers open. If this iterator is used, we lazily initialize those\n+ * buffers.\n+ */\n+private[spark]\n+class LazyInitIterator(createIterator: => Iterator[Any]) extends Iterator[Any] {",
    "line": 29
  }],
  "prId": 1907
}]