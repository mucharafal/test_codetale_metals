[{
  "comments": [{
    "author": {
      "login": "shivaram"
    },
    "body": "Do you want to add 'netty' as a prefix for these config variables ? i.e 'spark.netty.shuffle.port' ? \n",
    "commit": "f9214216fe33e365375a071e522cc915be8acd67",
    "createdAt": "2014-08-13T20:20:35Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty\n+\n+import org.apache.spark.SparkConf\n+\n+/**\n+ * A central location that tracks all the settings we exposed to users.\n+ */\n+private[spark]\n+class NettyConfig(conf: SparkConf) {\n+\n+  /** Port the server listens on. Default to a random port. */\n+  private[netty] val serverPort = conf.getInt(\"spark.shuffle.io.port\", 0)",
    "line": 29
  }, {
    "author": {
      "login": "mateiz"
    },
    "body": "We probably shouldn't do that since we may want this to replace the current ConnectionManager.\n",
    "commit": "f9214216fe33e365375a071e522cc915be8acd67",
    "createdAt": "2014-08-13T21:34:57Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty\n+\n+import org.apache.spark.SparkConf\n+\n+/**\n+ * A central location that tracks all the settings we exposed to users.\n+ */\n+private[spark]\n+class NettyConfig(conf: SparkConf) {\n+\n+  /** Port the server listens on. Default to a random port. */\n+  private[netty] val serverPort = conf.getInt(\"spark.shuffle.io.port\", 0)",
    "line": 29
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "That said, I am not sure if shuffle.io is the best name either. This will also be used for non-shuffle stuff (like reading remote blocks). Maybe we should call it `spark.blockServer.io.port` (or potentially just `spark.blockManager.port`)?\n",
    "commit": "f9214216fe33e365375a071e522cc915be8acd67",
    "createdAt": "2014-08-13T22:39:57Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty\n+\n+import org.apache.spark.SparkConf\n+\n+/**\n+ * A central location that tracks all the settings we exposed to users.\n+ */\n+private[spark]\n+class NettyConfig(conf: SparkConf) {\n+\n+  /** Port the server listens on. Default to a random port. */\n+  private[netty] val serverPort = conf.getInt(\"spark.shuffle.io.port\", 0)",
    "line": 29
  }],
  "prId": 1907
}, {
  "comments": [{
    "author": {
      "login": "shivaram"
    },
    "body": "I have no idea what this means :) Could you explain this config variable better ?\n",
    "commit": "f9214216fe33e365375a071e522cc915be8acd67",
    "createdAt": "2014-08-13T20:21:31Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty\n+\n+import org.apache.spark.SparkConf\n+\n+/**\n+ * A central location that tracks all the settings we exposed to users.\n+ */\n+private[spark]\n+class NettyConfig(conf: SparkConf) {\n+\n+  /** Port the server listens on. Default to a random port. */\n+  private[netty] val serverPort = conf.getInt(\"spark.shuffle.io.port\", 0)\n+\n+  /** IO mode: nio, oio, epoll, or auto (try epoll first and then nio). */\n+  private[netty] val ioMode = conf.get(\"spark.shuffle.io.mode\", \"auto\").toLowerCase\n+\n+  /** Connect timeout in secs. Default 60 secs. */\n+  private[netty] val connectTimeoutMs = conf.getInt(\"spark.shuffle.io.connectionTimeout\", 60) * 1000\n+\n+  /**\n+   * Percentage of the desired amount of time spent for I/O in the child event loops.",
    "line": 38
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "This is actually copied from Netty.\n\nThat'd literally require explaining architecture for high performance networking... there are books and multiple presentations on that.\n",
    "commit": "f9214216fe33e365375a071e522cc915be8acd67",
    "createdAt": "2014-08-13T20:28:11Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty\n+\n+import org.apache.spark.SparkConf\n+\n+/**\n+ * A central location that tracks all the settings we exposed to users.\n+ */\n+private[spark]\n+class NettyConfig(conf: SparkConf) {\n+\n+  /** Port the server listens on. Default to a random port. */\n+  private[netty] val serverPort = conf.getInt(\"spark.shuffle.io.port\", 0)\n+\n+  /** IO mode: nio, oio, epoll, or auto (try epoll first and then nio). */\n+  private[netty] val ioMode = conf.get(\"spark.shuffle.io.mode\", \"auto\").toLowerCase\n+\n+  /** Connect timeout in secs. Default 60 secs. */\n+  private[netty] val connectTimeoutMs = conf.getInt(\"spark.shuffle.io.connectionTimeout\", 60) * 1000\n+\n+  /**\n+   * Percentage of the desired amount of time spent for I/O in the child event loops.",
    "line": 38
  }],
  "prId": 1907
}]