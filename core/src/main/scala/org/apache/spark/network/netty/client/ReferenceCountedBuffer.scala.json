[{
  "comments": [{
    "author": {
      "login": "shivaram"
    },
    "body": "Wouldn't `val underlying` create a public getter for `underlying` ? Not sure that matches the goal of not exposing Netty buffers\n",
    "commit": "f9214216fe33e365375a071e522cc915be8acd67",
    "createdAt": "2014-08-13T20:26:19Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty.client\n+\n+import java.io.InputStream\n+import java.nio.ByteBuffer\n+\n+import io.netty.buffer.{ByteBuf, ByteBufInputStream}\n+\n+\n+/**\n+ * A buffer abstraction based on Netty's ByteBuf so we don't expose Netty.\n+ * This is a Scala value class.\n+ *\n+ * The buffer's life cycle is NOT managed by the JVM, and thus requiring explicit declaration of\n+ * reference by the retain method and release method.\n+ */\n+private[spark]\n+class ReferenceCountedBuffer(val underlying: ByteBuf) extends AnyVal {",
    "line": 34
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "Nah that's not the goal, but in order to use value class we have to do that. Since this is not user facing API, it is ok. \n",
    "commit": "f9214216fe33e365375a071e522cc915be8acd67",
    "createdAt": "2014-08-13T20:27:17Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.netty.client\n+\n+import java.io.InputStream\n+import java.nio.ByteBuffer\n+\n+import io.netty.buffer.{ByteBuf, ByteBufInputStream}\n+\n+\n+/**\n+ * A buffer abstraction based on Netty's ByteBuf so we don't expose Netty.\n+ * This is a Scala value class.\n+ *\n+ * The buffer's life cycle is NOT managed by the JVM, and thus requiring explicit declaration of\n+ * reference by the retain method and release method.\n+ */\n+private[spark]\n+class ReferenceCountedBuffer(val underlying: ByteBuf) extends AnyVal {",
    "line": 34
  }],
  "prId": 1907
}]