[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "how about `def createMetricsReporter(context: TaskContext)`?\r\n\r\nThen in by default it's implemented as\r\n```\r\ncontext.taskMetrics().shuffleWriteMetrics\r\n```\r\n\r\nand in SQL we override it\r\n```\r\nnew SQLShuffle.....Reporter(super.createMetricsReporter(context))\r\n```",
    "commit": "bc2c4f187f8037aa540b0e6bae5d90d7d6e3509d",
    "createdAt": "2018-12-07T02:09:07Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle\n+\n+import org.apache.spark.{Partition, ShuffleDependency, SparkEnv, TaskContext}\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.scheduler.MapStatus\n+\n+/**\n+ * The interface for customizing shuffle write process. The driver create a ShuffleWriteProcessor\n+ * and put it into [[ShuffleDependency]], and executors use it in each ShuffleMapTask.\n+ */\n+private[spark] trait ShuffleWriteProcessor extends Serializable with Logging {\n+\n+  /**\n+   * Create a [[ShuffleWriteMetricsReporter]] from the default reporter, always return a proxy\n+   * reporter for both local accumulator and original reporter updating. As the reporter is a\n+   * per-row operator, here need a careful consideration on performance.\n+   */\n+  def createMetricsReporter(reporter: ShuffleWriteMetricsReporter): ShuffleWriteMetricsReporter"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "after it, we can just make `ShuffleWriteProcessor` a class",
    "commit": "bc2c4f187f8037aa540b0e6bae5d90d7d6e3509d",
    "createdAt": "2018-12-07T02:10:29Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle\n+\n+import org.apache.spark.{Partition, ShuffleDependency, SparkEnv, TaskContext}\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.scheduler.MapStatus\n+\n+/**\n+ * The interface for customizing shuffle write process. The driver create a ShuffleWriteProcessor\n+ * and put it into [[ShuffleDependency]], and executors use it in each ShuffleMapTask.\n+ */\n+private[spark] trait ShuffleWriteProcessor extends Serializable with Logging {\n+\n+  /**\n+   * Create a [[ShuffleWriteMetricsReporter]] from the default reporter, always return a proxy\n+   * reporter for both local accumulator and original reporter updating. As the reporter is a\n+   * per-row operator, here need a careful consideration on performance.\n+   */\n+  def createMetricsReporter(reporter: ShuffleWriteMetricsReporter): ShuffleWriteMetricsReporter"
  }, {
    "author": {
      "login": "xuanyuanking"
    },
    "body": "Copy, the trait can be added when we need more customization for SQL shuffle. Done in 6378a3d.",
    "commit": "bc2c4f187f8037aa540b0e6bae5d90d7d6e3509d",
    "createdAt": "2018-12-07T05:21:40Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle\n+\n+import org.apache.spark.{Partition, ShuffleDependency, SparkEnv, TaskContext}\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.scheduler.MapStatus\n+\n+/**\n+ * The interface for customizing shuffle write process. The driver create a ShuffleWriteProcessor\n+ * and put it into [[ShuffleDependency]], and executors use it in each ShuffleMapTask.\n+ */\n+private[spark] trait ShuffleWriteProcessor extends Serializable with Logging {\n+\n+  /**\n+   * Create a [[ShuffleWriteMetricsReporter]] from the default reporter, always return a proxy\n+   * reporter for both local accumulator and original reporter updating. As the reporter is a\n+   * per-row operator, here need a careful consideration on performance.\n+   */\n+  def createMetricsReporter(reporter: ShuffleWriteMetricsReporter): ShuffleWriteMetricsReporter"
  }],
  "prId": 23207
}]