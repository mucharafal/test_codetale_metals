[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "`(mapId)` -> `mapId`",
    "commit": "9c1dc5538afce26c4e693e353d8d4ef4231bb78c",
    "createdAt": "2019-10-11T11:12:06Z",
    "diffHunk": "@@ -36,19 +36,35 @@ private[spark] class BlockStoreShuffleReader[K, C](\n     readMetrics: ShuffleReadMetricsReporter,\n     serializerManager: SerializerManager = SparkEnv.get.serializerManager,\n     blockManager: BlockManager = SparkEnv.get.blockManager,\n-    mapOutputTracker: MapOutputTracker = SparkEnv.get.mapOutputTracker)\n+    mapOutputTracker: MapOutputTracker = SparkEnv.get.mapOutputTracker,\n+    mapId: Option[Int] = None)\n   extends ShuffleReader[K, C] with Logging {\n \n   private val dep = handle.dependency\n \n   /** Read the combined key-values for this reduce task */\n   override def read(): Iterator[Product2[K, C]] = {\n+    val blocksByAddress = (mapId) match {"
  }],
  "prId": 25295
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit:\r\n```\r\ncase Some(..) =>\r\ncase None =>\r\n```",
    "commit": "9c1dc5538afce26c4e693e353d8d4ef4231bb78c",
    "createdAt": "2019-10-15T07:35:42Z",
    "diffHunk": "@@ -36,18 +36,33 @@ private[spark] class BlockStoreShuffleReader[K, C](\n     readMetrics: ShuffleReadMetricsReporter,\n     serializerManager: SerializerManager = SparkEnv.get.serializerManager,\n     blockManager: BlockManager = SparkEnv.get.blockManager,\n-    mapOutputTracker: MapOutputTracker = SparkEnv.get.mapOutputTracker)\n+    mapOutputTracker: MapOutputTracker = SparkEnv.get.mapOutputTracker,\n+    mapId: Option[Int] = None)\n   extends ShuffleReader[K, C] with Logging {\n \n   private val dep = handle.dependency\n \n   /** Read the combined key-values for this reduce task */\n   override def read(): Iterator[Product2[K, C]] = {\n+    val blocksByAddress = mapId match {\n+      case (Some(mapId)) => mapOutputTracker.getMapSizesByExecutorId(\n+        handle.shuffleId,\n+        startPartition,\n+        endPartition,\n+        mapId)\n+      case (None) => mapOutputTracker.getMapSizesByExecutorId(\n+        handle.shuffleId,\n+        startPartition,\n+        endPartition)\n+      case (_) => throw new IllegalArgumentException(",
    "line": 23
  }],
  "prId": 25295
}]