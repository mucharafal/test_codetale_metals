[{
  "comments": [{
    "author": {
      "login": "colorant"
    },
    "body": "yeah, I see your concern, I thought about this too. actually in this PR, it mostly is used internally by HashShuffleManager's writter. While, we can take this as a way to give a chance to expose the internal storage objects for short cut usage. Such as current netty based shuffle sender. Without this interface, it's hard to implement without introduce maybe many more extra interface. to keep it simple. I offer the chance to expose the ShuffleBlockManager. \n\nAnd then, this \"location\" conception might not be meaningful, but and BlockObjectId might be a good  fit for all the possible shuffleManager, afterall, you are handling some objects whether it is a File , or a Stream, or whatever way you save your data to, So, a ShuffleBlockManager it self might still be needed to access this object in certain shortcut cases for simplifier API, and you can name the method getDataObjectHandle or whatever fits.. I do also have a PR for this idea, say generalize the object and pass around an ObjectID for different storage type at #1209 \n\nSo does this make any sense to you ;)  Still, I agree if we could find better way to solve the netty block sender problem, This could be hide.\n",
    "commit": "0e01ae321735aea5e4f568f247968e68e7f3ec33",
    "createdAt": "2014-06-27T05:08:55Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle\n+\n+import org.apache.spark.storage.{FileSegment, ShuffleBlockId}\n+import java.nio.ByteBuffer\n+\n+private[spark]\n+trait ShuffleBlockManager {"
  }, {
    "author": {
      "login": "colorant"
    },
    "body": "@rxin, How about we also hide current BlockFetcherIterator kind of thing behind shuffleManager. since a specific shuffleManager not necessary using current fetcher approaching to get shuffle data. Each shuffleManager should instance his own shuffle logic, while some could reuse the same logic, say FileBased one could reuse current implementation. By this way, we can solve the above problem and have better chance to not expose shuffleBlockManager, say a read/write interface for shuffle reader/writter is enough.\n",
    "commit": "0e01ae321735aea5e4f568f247968e68e7f3ec33",
    "createdAt": "2014-06-27T07:35:45Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle\n+\n+import org.apache.spark.storage.{FileSegment, ShuffleBlockId}\n+import java.nio.ByteBuffer\n+\n+private[spark]\n+trait ShuffleBlockManager {"
  }],
  "prId": 1241
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "sort the import\n",
    "commit": "0e01ae321735aea5e4f568f247968e68e7f3ec33",
    "createdAt": "2014-08-27T06:14:28Z",
    "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle\n+\n+import org.apache.spark.storage.{FileSegment, ShuffleBlockId}"
  }],
  "prId": 1241
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "can you add some javadoc explaining what this method is for?\n\ne.g. is it for getting local blocks or remote blocks? In what condition does it return Some(buf) vs None?\n",
    "commit": "0e01ae321735aea5e4f568f247968e68e7f3ec33",
    "createdAt": "2014-08-27T06:39:08Z",
    "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle\n+\n+import org.apache.spark.storage.{FileSegment, ShuffleBlockId}\n+import java.nio.ByteBuffer\n+\n+private[spark]\n+trait ShuffleBlockManager {\n+  type ShuffleId = Int\n+\n+  def getBytes(blockId: ShuffleBlockId): Option[ByteBuffer]"
  }],
  "prId": 1241
}]