[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "So this still has the problem I mentioned of leaving this class half-initialized and unable to clean itself up.\r\n\r\nIf you call `write()` and the `open()` call fails when initializing `wrappedStream`, for example, there is no code path that will close `partitionStream`. `close()` should handle that sort of thing.",
    "commit": "d4831577120f73b6bfe20ca887659566abcabb31",
    "createdAt": "2019-08-26T17:44:33Z",
    "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle\n+\n+import java.io.{Closeable, OutputStream}\n+\n+import org.apache.spark.serializer.{SerializationStream, SerializerInstance, SerializerManager}\n+import org.apache.spark.shuffle.api.ShufflePartitionWriter\n+import org.apache.spark.storage.BlockId\n+import org.apache.spark.util.collection.PairsWriter\n+\n+/**\n+ * A key-value writer inspired by {@link DiskBlockObjectWriter} that pushes the bytes to an\n+ * arbitrary partition writer instead of writing to local disk through the block manager.\n+ */\n+private[spark] class ShufflePartitionPairsWriter(\n+    partitionWriter: ShufflePartitionWriter,\n+    serializerManager: SerializerManager,\n+    serializerInstance: SerializerInstance,\n+    blockId: BlockId,\n+    writeMetrics: ShuffleWriteMetricsReporter)\n+  extends PairsWriter with Closeable {\n+\n+  private var isOpen = false\n+  private var partitionStream: OutputStream = _\n+  private var wrappedStream: OutputStream = _\n+  private var objOut: SerializationStream = _\n+  private var numRecordsWritten = 0\n+  private var curNumBytesWritten = 0L\n+\n+  override def write(key: Any, value: Any): Unit = {\n+    if (!isOpen) {\n+      open()",
    "line": 52
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "I tried to fix this in `close()`. Let me know if that's done correctly. Also wanted some adjustments in `ExternalSorter` to manage exception propagation.",
    "commit": "d4831577120f73b6bfe20ca887659566abcabb31",
    "createdAt": "2019-08-26T23:18:21Z",
    "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle\n+\n+import java.io.{Closeable, OutputStream}\n+\n+import org.apache.spark.serializer.{SerializationStream, SerializerInstance, SerializerManager}\n+import org.apache.spark.shuffle.api.ShufflePartitionWriter\n+import org.apache.spark.storage.BlockId\n+import org.apache.spark.util.collection.PairsWriter\n+\n+/**\n+ * A key-value writer inspired by {@link DiskBlockObjectWriter} that pushes the bytes to an\n+ * arbitrary partition writer instead of writing to local disk through the block manager.\n+ */\n+private[spark] class ShufflePartitionPairsWriter(\n+    partitionWriter: ShufflePartitionWriter,\n+    serializerManager: SerializerManager,\n+    serializerInstance: SerializerInstance,\n+    blockId: BlockId,\n+    writeMetrics: ShuffleWriteMetricsReporter)\n+  extends PairsWriter with Closeable {\n+\n+  private var isOpen = false\n+  private var partitionStream: OutputStream = _\n+  private var wrappedStream: OutputStream = _\n+  private var objOut: SerializationStream = _\n+  private var numRecordsWritten = 0\n+  private var curNumBytesWritten = 0L\n+\n+  override def write(key: Any, value: Any): Unit = {\n+    if (!isOpen) {\n+      open()",
    "line": 52
  }],
  "prId": 25342
}, {
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "I can't think of anything wrong here, but seems safer to be using `finally`.  kind of a stretch, but if some (badly implemented) stream throws a RuntimeException instead of an IOException you wouldn't clean up properly this way.  The nesting gets a bit ugly, but you could do this:\r\n\r\n```scala\r\ndef closeIfNonNull[T <: Closeable](x: T): T = {\r\n  if (x != null) x.close()\r\n  null.asInstanceOf[T]\r\n}\r\nUtils.tryWithSafeFinally {\r\n  objOut = closeIfNonNull(objOut)\r\n} {\r\n  // normally closing objOut would close the inner streams as well, but just in case there was\r\n  // an error in initialization etc. we make sure we clean the other streams up too\r\n  Utils.tryWithSafeFinally {\r\n    wrappedStream = closeIfNonNull(wrappedStream)\r\n  } {\r\n    partitionStream = closeIfNonNull(partitionStream)\r\n  }\r\n}\r\n```",
    "commit": "d4831577120f73b6bfe20ca887659566abcabb31",
    "createdAt": "2019-08-27T14:51:44Z",
    "diffHunk": "@@ -60,17 +60,43 @@ private[spark] class ShufflePartitionPairsWriter(\n   }\n \n   override def close(): Unit = {\n+    var thrownException: Option[IOException] = None\n     if (objOut != null) {\n-      // Closing objOut should propagate close to all inner layers\n-      objOut.close()\n+      thrownException = tryCloseOrAddSuppressed(objOut, thrownException)\n+      objOut = null\n     }\n-    objOut = null\n-    wrappedStream = null\n-    partitionStream = null\n+\n+    if (wrappedStream != null) {\n+      thrownException = tryCloseOrAddSuppressed(wrappedStream, thrownException)\n+      wrappedStream = null\n+    }\n+\n+    if (partitionStream != null) {\n+      thrownException = tryCloseOrAddSuppressed(partitionStream, thrownException)\n+      partitionStream = null\n+    }\n+\n+    thrownException.foreach(throw _)\n+\n     isOpen = false\n     updateBytesWritten()\n   }\n \n+  private def tryCloseOrAddSuppressed(\n+      closeable: Closeable, prevException: Option[IOException]): Option[IOException] = {\n+    var resolvedException = prevException\n+    try {\n+      closeable.close()\n+    } catch {\n+      case e: IOException =>\n+        resolvedException = prevException.map(presentPrev => {\n+          presentPrev.addSuppressed(e)\n+          presentPrev\n+        }).orElse(Some(e))\n+    }\n+    resolvedException"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "I also prefer Imran's approach. I'm just a tiny bit worried about bad stream implementations that don't have an idempotent `close()`, since both your code and Imran's are calling it multiple times on certain streams.\r\n\r\nProbably ok not to deal with that though.",
    "commit": "d4831577120f73b6bfe20ca887659566abcabb31",
    "createdAt": "2019-08-27T18:06:30Z",
    "diffHunk": "@@ -60,17 +60,43 @@ private[spark] class ShufflePartitionPairsWriter(\n   }\n \n   override def close(): Unit = {\n+    var thrownException: Option[IOException] = None\n     if (objOut != null) {\n-      // Closing objOut should propagate close to all inner layers\n-      objOut.close()\n+      thrownException = tryCloseOrAddSuppressed(objOut, thrownException)\n+      objOut = null\n     }\n-    objOut = null\n-    wrappedStream = null\n-    partitionStream = null\n+\n+    if (wrappedStream != null) {\n+      thrownException = tryCloseOrAddSuppressed(wrappedStream, thrownException)\n+      wrappedStream = null\n+    }\n+\n+    if (partitionStream != null) {\n+      thrownException = tryCloseOrAddSuppressed(partitionStream, thrownException)\n+      partitionStream = null\n+    }\n+\n+    thrownException.foreach(throw _)\n+\n     isOpen = false\n     updateBytesWritten()\n   }\n \n+  private def tryCloseOrAddSuppressed(\n+      closeable: Closeable, prevException: Option[IOException]): Option[IOException] = {\n+    var resolvedException = prevException\n+    try {\n+      closeable.close()\n+    } catch {\n+      case e: IOException =>\n+        resolvedException = prevException.map(presentPrev => {\n+          presentPrev.addSuppressed(e)\n+          presentPrev\n+        }).orElse(Some(e))\n+    }\n+    resolvedException"
  }],
  "prId": 25342
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Speaking of being nitpicky about error handling, this flag has weird semantics. If you call `write` and it fails to initialize the streams, and then you call `write` again, you'll potentially dereference still open streams.",
    "commit": "d4831577120f73b6bfe20ca887659566abcabb31",
    "createdAt": "2019-08-27T18:08:59Z",
    "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle\n+\n+import java.io.{Closeable, IOException, OutputStream}\n+\n+import org.apache.spark.serializer.{SerializationStream, SerializerInstance, SerializerManager}\n+import org.apache.spark.shuffle.api.ShufflePartitionWriter\n+import org.apache.spark.storage.BlockId\n+import org.apache.spark.util.collection.PairsWriter\n+\n+/**\n+ * A key-value writer inspired by {@link DiskBlockObjectWriter} that pushes the bytes to an\n+ * arbitrary partition writer instead of writing to local disk through the block manager.\n+ */\n+private[spark] class ShufflePartitionPairsWriter(\n+    partitionWriter: ShufflePartitionWriter,\n+    serializerManager: SerializerManager,\n+    serializerInstance: SerializerInstance,\n+    blockId: BlockId,\n+    writeMetrics: ShuffleWriteMetricsReporter)\n+  extends PairsWriter with Closeable {\n+\n+  private var isOpen = false\n+  private var partitionStream: OutputStream = _\n+  private var wrappedStream: OutputStream = _\n+  private var objOut: SerializationStream = _\n+  private var numRecordsWritten = 0\n+  private var curNumBytesWritten = 0L\n+\n+  override def write(key: Any, value: Any): Unit = {\n+    if (!isOpen) {\n+      open()\n+      isOpen = true"
  }],
  "prId": 25342
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Not used anymore.",
    "commit": "d4831577120f73b6bfe20ca887659566abcabb31",
    "createdAt": "2019-08-27T21:20:52Z",
    "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle\n+\n+import java.io.{Closeable, IOException, OutputStream}\n+\n+import org.apache.spark.serializer.{SerializationStream, SerializerInstance, SerializerManager}\n+import org.apache.spark.shuffle.api.ShufflePartitionWriter\n+import org.apache.spark.storage.BlockId\n+import org.apache.spark.util.Utils\n+import org.apache.spark.util.collection.PairsWriter\n+\n+/**\n+ * A key-value writer inspired by {@link DiskBlockObjectWriter} that pushes the bytes to an\n+ * arbitrary partition writer instead of writing to local disk through the block manager.\n+ */\n+private[spark] class ShufflePartitionPairsWriter(\n+    partitionWriter: ShufflePartitionWriter,\n+    serializerManager: SerializerManager,\n+    serializerInstance: SerializerInstance,\n+    blockId: BlockId,\n+    writeMetrics: ShuffleWriteMetricsReporter)\n+  extends PairsWriter with Closeable {\n+\n+  private var isOpen = false\n+  private var partitionStream: OutputStream = _\n+  private var wrappedStream: OutputStream = _\n+  private var objOut: SerializationStream = _\n+  private var numRecordsWritten = 0\n+  private var curNumBytesWritten = 0L\n+\n+  override def write(key: Any, value: Any): Unit = {\n+    if (!isOpen) {\n+      open()\n+      isOpen = true\n+    }\n+    objOut.writeKey(key)\n+    objOut.writeValue(value)\n+    recordWritten()\n+  }\n+\n+  private def open(): Unit = {\n+    try {\n+      partitionStream = partitionWriter.openStream\n+      wrappedStream = serializerManager.wrapStream(blockId, partitionStream)\n+      objOut = serializerInstance.serializeStream(wrappedStream)\n+    } catch {\n+      case e: Exception =>\n+        Utils.tryLogNonFatalError {\n+          close()\n+        }\n+        throw e\n+    }\n+  }\n+\n+  override def close(): Unit = {\n+    Utils.tryWithSafeFinally {\n+      objOut = closeIfNonNull(objOut)\n+    } {\n+      Utils.tryWithSafeFinally {\n+        wrappedStream = closeIfNonNull(wrappedStream)\n+      } {\n+        partitionStream = closeIfNonNull(partitionStream)\n+      }\n+    }\n+    isOpen = false\n+    updateBytesWritten()\n+  }\n+\n+  private def closeIfNonNull[T <: Closeable](closeable: T): T = {\n+    if (closeable != null) {\n+      closeable.close()\n+    }\n+    null.asInstanceOf[T]\n+  }\n+\n+  private def tryCloseOrAddSuppressed("
  }],
  "prId": 25342
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "One last comment about error handling. I'll just quote the `AutoCloseable` documentation instead:\r\n\r\n    It is strongly advised to relinquish the underlying resources and to internally\r\n    mark the resource as closed, prior to throwing the exception. \r\n\r\nMeaning, track whether you've closed the object, not whether it's opened. (`isOpen` can be replaced with `objOut != null`.) Then in `close()` do nothing if the stream has already been closed.",
    "commit": "d4831577120f73b6bfe20ca887659566abcabb31",
    "createdAt": "2019-08-27T21:22:51Z",
    "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.shuffle\n+\n+import java.io.{Closeable, IOException, OutputStream}\n+\n+import org.apache.spark.serializer.{SerializationStream, SerializerInstance, SerializerManager}\n+import org.apache.spark.shuffle.api.ShufflePartitionWriter\n+import org.apache.spark.storage.BlockId\n+import org.apache.spark.util.Utils\n+import org.apache.spark.util.collection.PairsWriter\n+\n+/**\n+ * A key-value writer inspired by {@link DiskBlockObjectWriter} that pushes the bytes to an\n+ * arbitrary partition writer instead of writing to local disk through the block manager.\n+ */\n+private[spark] class ShufflePartitionPairsWriter(\n+    partitionWriter: ShufflePartitionWriter,\n+    serializerManager: SerializerManager,\n+    serializerInstance: SerializerInstance,\n+    blockId: BlockId,\n+    writeMetrics: ShuffleWriteMetricsReporter)\n+  extends PairsWriter with Closeable {\n+\n+  private var isOpen = false\n+  private var partitionStream: OutputStream = _\n+  private var wrappedStream: OutputStream = _\n+  private var objOut: SerializationStream = _\n+  private var numRecordsWritten = 0\n+  private var curNumBytesWritten = 0L\n+\n+  override def write(key: Any, value: Any): Unit = {\n+    if (!isOpen) {\n+      open()\n+      isOpen = true\n+    }\n+    objOut.writeKey(key)\n+    objOut.writeValue(value)\n+    recordWritten()\n+  }\n+\n+  private def open(): Unit = {\n+    try {\n+      partitionStream = partitionWriter.openStream\n+      wrappedStream = serializerManager.wrapStream(blockId, partitionStream)\n+      objOut = serializerInstance.serializeStream(wrappedStream)\n+    } catch {\n+      case e: Exception =>\n+        Utils.tryLogNonFatalError {\n+          close()\n+        }\n+        throw e\n+    }\n+  }\n+\n+  override def close(): Unit = {\n+    Utils.tryWithSafeFinally {\n+      objOut = closeIfNonNull(objOut)\n+    } {\n+      Utils.tryWithSafeFinally {\n+        wrappedStream = closeIfNonNull(wrappedStream)\n+      } {\n+        partitionStream = closeIfNonNull(partitionStream)\n+      }\n+    }\n+    isOpen = false"
  }],
  "prId": 25342
}]