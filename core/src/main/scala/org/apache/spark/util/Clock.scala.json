[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Would be good to have \"Millis\" in the name to make the time scale clear. For some clocks the time scale matters. \n",
    "commit": "5ed3a035961dfb32eca26e1c088636c15a9fcda7",
    "createdAt": "2015-02-11T02:27:59Z",
    "diffHunk": "@@ -22,8 +22,35 @@ package org.apache.spark.util\n  */\n private[spark] trait Clock {",
    "line": 3
  }],
  "prId": 4514
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "@tdas this doesn't seem to be used. Can we just remove it?\n",
    "commit": "5ed3a035961dfb32eca26e1c088636c15a9fcda7",
    "createdAt": "2015-02-19T18:13:28Z",
    "diffHunk": "@@ -21,9 +21,36 @@ package org.apache.spark.util\n  * An interface to represent clocks, so that they can be mocked out in unit tests.\n  */\n private[spark] trait Clock {\n-  def getTime(): Long\n+  def getTimeMillis(): Long\n+  def waitTillTime(targetTime: Long): Long\n }\n \n-private[spark] object SystemClock extends Clock {\n-  def getTime(): Long = System.currentTimeMillis()\n+private[spark] class SystemClock extends Clock {\n+\n+  val minPollTime = 25L\n+\n+  def getTimeMillis(): Long = System.currentTimeMillis()\n+\n+  def waitTillTime(targetTime: Long): Long = {"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "I find this is used in `org.apache.spark.streaming.util.RecurringTimer` which is still needed in `JobGenerator` and `BlockGenerator`. I can make the other change though, one sec...\n",
    "commit": "5ed3a035961dfb32eca26e1c088636c15a9fcda7",
    "createdAt": "2015-02-19T21:00:10Z",
    "diffHunk": "@@ -21,9 +21,36 @@ package org.apache.spark.util\n  * An interface to represent clocks, so that they can be mocked out in unit tests.\n  */\n private[spark] trait Clock {\n-  def getTime(): Long\n+  def getTimeMillis(): Long\n+  def waitTillTime(targetTime: Long): Long\n }\n \n-private[spark] object SystemClock extends Clock {\n-  def getTime(): Long = System.currentTimeMillis()\n+private[spark] class SystemClock extends Clock {\n+\n+  val minPollTime = 25L\n+\n+  def getTimeMillis(): Long = System.currentTimeMillis()\n+\n+  def waitTillTime(targetTime: Long): Long = {"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "oh never mind, I didn't check outside of the diff\n",
    "commit": "5ed3a035961dfb32eca26e1c088636c15a9fcda7",
    "createdAt": "2015-02-19T21:24:27Z",
    "diffHunk": "@@ -21,9 +21,36 @@ package org.apache.spark.util\n  * An interface to represent clocks, so that they can be mocked out in unit tests.\n  */\n private[spark] trait Clock {\n-  def getTime(): Long\n+  def getTimeMillis(): Long\n+  def waitTillTime(targetTime: Long): Long\n }\n \n-private[spark] object SystemClock extends Clock {\n-  def getTime(): Long = System.currentTimeMillis()\n+private[spark] class SystemClock extends Clock {\n+\n+  val minPollTime = 25L\n+\n+  def getTimeMillis(): Long = System.currentTimeMillis()\n+\n+  def waitTillTime(targetTime: Long): Long = {"
  }],
  "prId": 4514
}]