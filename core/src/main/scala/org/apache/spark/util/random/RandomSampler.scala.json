[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "These changes on `RandomSampler` is submitted in #11578.\n",
    "commit": "12e1b37e076ca7161bae66ecec99938f1cd6e813",
    "createdAt": "2016-03-09T06:04:53Z",
    "diffHunk": "@@ -41,6 +41,12 @@ trait RandomSampler[T, U] extends Pseudorandom with Cloneable with Serializable\n   /** take a random sample */\n   def sample(items: Iterator[T]): Iterator[U]\n \n+  /**\n+   * Whether to sample the next item or not.\n+   * Return how many times the next item will be sampled. Return 0 if it is not sampled.\n+   */\n+  def sample(): Int\n+"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "If #11578 is merged, I will rebase this.\n",
    "commit": "12e1b37e076ca7161bae66ecec99938f1cd6e813",
    "createdAt": "2016-03-09T09:36:46Z",
    "diffHunk": "@@ -41,6 +41,12 @@ trait RandomSampler[T, U] extends Pseudorandom with Cloneable with Serializable\n   /** take a random sample */\n   def sample(items: Iterator[T]): Iterator[U]\n \n+  /**\n+   * Whether to sample the next item or not.\n+   * Return how many times the next item will be sampled. Return 0 if it is not sampled.\n+   */\n+  def sample(): Int\n+"
  }],
  "prId": 11517
}, {
  "comments": [{
    "author": {
      "login": "nongli"
    },
    "body": "Can we not have the code duplication and write the iterator version based on this function?\n",
    "commit": "12e1b37e076ca7161bae66ecec99938f1cd6e813",
    "createdAt": "2016-03-21T14:31:56Z",
    "diffHunk": "@@ -107,6 +113,28 @@ class BernoulliCellSampler[T](lb: Double, ub: Double, complement: Boolean = fals\n \n   override def setSeed(seed: Long): Unit = rng.setSeed(seed)\n \n+  override def sample(): Int = {"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "We can. As the discussion in #11578, I am just not sure if we want to remove the iterator-based implementation.\n",
    "commit": "12e1b37e076ca7161bae66ecec99938f1cd6e813",
    "createdAt": "2016-03-21T14:41:12Z",
    "diffHunk": "@@ -107,6 +113,28 @@ class BernoulliCellSampler[T](lb: Double, ub: Double, complement: Boolean = fals\n \n   override def setSeed(seed: Long): Unit = rng.setSeed(seed)\n \n+  override def sample(): Int = {"
  }],
  "prId": 11517
}, {
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "@mengxr  Is it OK to change this?\n",
    "commit": "12e1b37e076ca7161bae66ecec99938f1cd6e813",
    "createdAt": "2016-04-01T07:29:41Z",
    "diffHunk": "@@ -186,7 +186,7 @@ class BernoulliSampler[T: ClassTag](fraction: Double) extends RandomSampler[T, T\n  * @tparam T item type\n  */\n @DeveloperApi\n-class PoissonSampler[T: ClassTag](\n+class PoissonSampler[T](",
    "line": 5
  }],
  "prId": 11517
}]