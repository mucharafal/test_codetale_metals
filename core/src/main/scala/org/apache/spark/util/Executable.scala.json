[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "This trait feels funny. I didn't see what it is needed for though. It's used in tests only, but isn't used in a place where you need to abstract over both implementations?\n",
    "commit": "946202de791f39529ef0aa05cadc0c65c1cd3f70",
    "createdAt": "2016-09-19T08:54:41Z",
    "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+/*\n+ * Adds main method to a class or object\n+ */\n+private[spark] trait Executable {"
  }, {
    "author": {
      "login": "skonto"
    },
    "body": "I needed to mark specific classes with main support, I could have used a different implementation to find out about it like duck typing, or reflection etc but these are either not permitted (eg. scala style) or are too complex. It is not bad to tag a class that way. Maybe sound redundant even funny (I would not call it that way) but it serves a purpose to make things easy for the test code.\n",
    "commit": "946202de791f39529ef0aa05cadc0c65c1cd3f70",
    "createdAt": "2016-09-19T10:01:39Z",
    "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+/*\n+ * Adds main method to a class or object\n+ */\n+private[spark] trait Executable {"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "I don't think you need any of that; it seems like this is only called where SparkSubmit is definitely being invoked. I didn't see where a different implementation would even be used.\n",
    "commit": "946202de791f39529ef0aa05cadc0c65c1cd3f70",
    "createdAt": "2016-09-19T15:26:19Z",
    "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+/*\n+ * Adds main method to a class or object\n+ */\n+private[spark] trait Executable {"
  }, {
    "author": {
      "login": "skonto"
    },
    "body": "Ok so in the code there is no reason as you said. In the test code I tried to re-use this function [here](https://github.com/apache/spark/blob/master/core/src/test/scala/org/apache/spark/deploy/SparkSubmitSuite.scala#L68) doing some [refactoring](https://github.com/skonto/spark/blob/d40b928aba0f44c5b3397d61d4450489e5d387c6/core/src/test/scala/org/apache/spark/deploy/SparkSubmitSuite.scala#L61) first. In order this to work, I need to pass an object for testing and that object needs to implement some specific functions.\nSpark project does not allow duck typing and I thought reflection is too much. I could have avoided the trait in the first place by not reusing the function but I thought I could improve test code too.\n",
    "commit": "946202de791f39529ef0aa05cadc0c65c1cd3f70",
    "createdAt": "2016-09-21T09:20:35Z",
    "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+/*\n+ * Adds main method to a class or object\n+ */\n+private[spark] trait Executable {"
  }, {
    "author": {
      "login": "skonto"
    },
    "body": " Anyway I can eliminate it with reflection, it is test code anyway, is it ok @srowen?\n",
    "commit": "946202de791f39529ef0aa05cadc0c65c1cd3f70",
    "createdAt": "2016-09-21T10:05:41Z",
    "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+/*\n+ * Adds main method to a class or object\n+ */\n+private[spark] trait Executable {"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Agree that this trait seems unnecessary. For the test, you can use two arguments: a \"SparkConfigParseUtils\" and a second one that's a main function (`main: Array[String] => Unit`).\n",
    "commit": "946202de791f39529ef0aa05cadc0c65c1cd3f70",
    "createdAt": "2016-09-21T17:43:49Z",
    "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+/*\n+ * Adds main method to a class or object\n+ */\n+private[spark] trait Executable {"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "This trait still exists and still looks out of place. It could be merged with `CommandLineUtils`, which then could be called something like `SparkEntryPoint` (although `CommandLineUtils` is also probably fine).\n",
    "commit": "946202de791f39529ef0aa05cadc0c65c1cd3f70",
    "createdAt": "2016-10-19T22:50:27Z",
    "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+/*\n+ * Adds main method to a class or object\n+ */\n+private[spark] trait Executable {"
  }],
  "prId": 14650
}]