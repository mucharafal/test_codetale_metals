[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "I'm not really in love with the name of this class. Not only it's awkward, but it doesn't reflect the actual functionality, since it has more than just utility methods for parsing configs from the command line.\n\nI'd call it something more generic like `CommandLineUtils`, saying that it contains basic command line parsing functionality and methods to parse some common Spark CLI options.\n",
    "commit": "946202de791f39529ef0aa05cadc0c65c1cd3f70",
    "createdAt": "2016-09-21T18:04:10Z",
    "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+import java.io.PrintStream\n+\n+/*\n+ * Provides logic to parse Spark config properties from cli.\n+ * Used by processes creating a SparkConfig from cli args.\n+ * Facilitates the use of common error messages when spark conf parsing fails.\n+ *\n+ */\n+private[spark] trait SparkConfigParseUtils {"
  }, {
    "author": {
      "login": "skonto"
    },
    "body": "It is always a matter of taste... but anyway I can make it more generic np. For not being that accurate you are right the method adds the print functions as well. I couldnt come up with a better one at that time.\n",
    "commit": "946202de791f39529ef0aa05cadc0c65c1cd3f70",
    "createdAt": "2016-09-22T09:46:01Z",
    "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+import java.io.PrintStream\n+\n+/*\n+ * Provides logic to parse Spark config properties from cli.\n+ * Used by processes creating a SparkConfig from cli args.\n+ * Facilitates the use of common error messages when spark conf parsing fails.\n+ *\n+ */\n+private[spark] trait SparkConfigParseUtils {"
  }],
  "prId": 14650
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Could you add empty lines between `def`s?\n",
    "commit": "946202de791f39529ef0aa05cadc0c65c1cd3f70",
    "createdAt": "2016-09-21T18:04:27Z",
    "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+import java.io.PrintStream\n+\n+/*\n+ * Provides logic to parse Spark config properties from cli.\n+ * Used by processes creating a SparkConfig from cli args.\n+ * Facilitates the use of common error messages when spark conf parsing fails.\n+ *\n+ */\n+private[spark] trait SparkConfigParseUtils {\n+\n+  // scalastyle:off println\n+  // Exposed for testing\n+  private[spark] var exitFn: Int => Unit = (exitCode: Int) => System.exit(exitCode)\n+  private[spark] var printStream: PrintStream = System.err\n+  private[spark] def printWarning(str: String): Unit = printStream.println(\"Warning: \" + str)"
  }, {
    "author": {
      "login": "skonto"
    },
    "body": "Sure.\n",
    "commit": "946202de791f39529ef0aa05cadc0c65c1cd3f70",
    "createdAt": "2016-09-22T09:46:12Z",
    "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+import java.io.PrintStream\n+\n+/*\n+ * Provides logic to parse Spark config properties from cli.\n+ * Used by processes creating a SparkConfig from cli args.\n+ * Facilitates the use of common error messages when spark conf parsing fails.\n+ *\n+ */\n+private[spark] trait SparkConfigParseUtils {\n+\n+  // scalastyle:off println\n+  // Exposed for testing\n+  private[spark] var exitFn: Int => Unit = (exitCode: Int) => System.exit(exitCode)\n+  private[spark] var printStream: PrintStream = System.err\n+  private[spark] def printWarning(str: String): Unit = printStream.println(\"Warning: \" + str)"
  }],
  "prId": 14650
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "This signature is super awkward. I'd suggest two alternatives:\n- return the parsed (key, value) pair and let the caller decide what to do\n- move all config parsing into this trait and let it handle collecting the config values.\n\nThe latter could also include a method for handling `--properties-file`, and a way for getting the \"final\" Spark configuration. This functionality is kind of a pre-requisite for SPARK-12344, btw, which basically requires doing this for all processes that use \"spark-class\".\n",
    "commit": "946202de791f39529ef0aa05cadc0c65c1cd3f70",
    "createdAt": "2016-09-21T18:09:47Z",
    "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+import java.io.PrintStream\n+\n+/*\n+ * Provides logic to parse Spark config properties from cli.\n+ * Used by processes creating a SparkConfig from cli args.\n+ * Facilitates the use of common error messages when spark conf parsing fails.\n+ *\n+ */\n+private[spark] trait SparkConfigParseUtils {\n+\n+  // scalastyle:off println\n+  // Exposed for testing\n+  private[spark] var exitFn: Int => Unit = (exitCode: Int) => System.exit(exitCode)\n+  private[spark] var printStream: PrintStream = System.err\n+  private[spark] def printWarning(str: String): Unit = printStream.println(\"Warning: \" + str)\n+  private[spark] def printErrorAndExit(str: String): Unit = {\n+    printStream.println(\"Error: \" + str)\n+    printStream.println(\"Run with --help for usage help or --verbose for debug output\")\n+    exitFn(1)\n+  }\n+\n+  private[spark] def parseSparkConfProperty(pair: String, update: (String, String) => Unit)"
  }, {
    "author": {
      "login": "skonto"
    },
    "body": "The name just states that it parses a spark configuration property. I dont see it awkward. \nAnyway I will go with the first option.\n",
    "commit": "946202de791f39529ef0aa05cadc0c65c1cd3f70",
    "createdAt": "2016-09-22T09:51:13Z",
    "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+import java.io.PrintStream\n+\n+/*\n+ * Provides logic to parse Spark config properties from cli.\n+ * Used by processes creating a SparkConfig from cli args.\n+ * Facilitates the use of common error messages when spark conf parsing fails.\n+ *\n+ */\n+private[spark] trait SparkConfigParseUtils {\n+\n+  // scalastyle:off println\n+  // Exposed for testing\n+  private[spark] var exitFn: Int => Unit = (exitCode: Int) => System.exit(exitCode)\n+  private[spark] var printStream: PrintStream = System.err\n+  private[spark] def printWarning(str: String): Unit = printStream.println(\"Warning: \" + str)\n+  private[spark] def printErrorAndExit(str: String): Unit = {\n+    printStream.println(\"Error: \" + str)\n+    printStream.println(\"Run with --help for usage help or --verbose for debug output\")\n+    exitFn(1)\n+  }\n+\n+  private[spark] def parseSparkConfProperty(pair: String, update: (String, String) => Unit)"
  }],
  "prId": 14650
}]