[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "why not use `super.trim.array`? I think array copy is more efficient when there are a lot of elements.\n",
    "commit": "e77f45165079bbbecb0513c70c64d26c0b84df7d",
    "createdAt": "2014-09-17T05:54:46Z",
    "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.collection\n+\n+import scala.reflect.ClassTag\n+\n+/**\n+ * An append-only buffer that keeps track of its estimated size in bytes.\n+ */\n+private[spark] class SizeTrackingVector[T: ClassTag]\n+  extends PrimitiveVector[T]\n+  with SizeTracker {\n+\n+  override def +=(value: T): Unit = {\n+    super.+=(value)\n+    super.afterUpdate()\n+  }\n+\n+  override def resize(newLength: Int): PrimitiveVector[T] = {\n+    super.resize(newLength)\n+    resetSamples()\n+    this\n+  }\n+\n+  /**\n+   * Return a trimmed version of the underlying array.\n+   */\n+  def toArray: Array[T] = {\n+    super.iterator.toArray",
    "line": 44
  }],
  "prId": 1165
}]