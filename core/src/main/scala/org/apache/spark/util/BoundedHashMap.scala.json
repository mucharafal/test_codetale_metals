[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "what does protected[util] mean in Scala?  You can access it in all child classes of all classes in util? Pretty confusing here\n",
    "commit": "61b8d6e2b37d7b0e200e9a506c24d18c961f8d73",
    "createdAt": "2014-03-13T05:12:00Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+import scala.collection.mutable.{ArrayBuffer, SynchronizedMap}\n+\n+import java.util.{Collections, LinkedHashMap}\n+import java.util.Map.{Entry => JMapEntry}\n+import scala.reflect.ClassTag\n+\n+/**\n+ * A map that upper bounds the number of key-value pairs present in it. It can be configured to\n+ * drop the least recently user pair or the earliest inserted pair. It exposes a\n+ * scala.collection.mutable.Map interface to allow it to be a drop-in replacement for Scala\n+ * HashMaps.\n+ *\n+ * Internally, a Java LinkedHashMap is used to get insert-order or access-order behavior.\n+ * Note that the LinkedHashMap is not thread-safe and hence, it is wrapped in a\n+ * Collections.synchronizedMap. However, getting the Java HashMap's iterator and\n+ * using it can still lead to ConcurrentModificationExceptions. Hence, the iterator()\n+ * function is overridden to copy the all pairs into an ArrayBuffer and then return the\n+ * iterator to the ArrayBuffer. Also, the class apply the trait SynchronizedMap which\n+ * ensures that all calls to the Scala Map API are synchronized. This together ensures\n+ * that ConcurrentModificationException is never thrown.\n+ *\n+ * @param bound   max number of key-value pairs\n+ * @param useLRU  true = least recently used/accessed will be dropped when bound is reached,\n+ *                false = earliest inserted will be dropped\n+ */\n+private[spark] class BoundedHashMap[A, B](bound: Int, useLRU: Boolean)\n+  extends WrappedJavaHashMap[A, B, A, B] with SynchronizedMap[A, B] {\n+\n+  protected[util] val internalJavaMap = Collections.synchronizedMap(new LinkedHashMap[A, B](\n+    bound / 8, (0.75).toFloat, useLRU) {\n+    override protected def removeEldestEntry(eldest: JMapEntry[A, B]): Boolean = {\n+      size() > bound\n+    }\n+  })\n+\n+  protected[util] def newInstance[K1, V1](): WrappedJavaHashMap[K1, V1, _, _] = {"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "Oopsie. I thought I changed them to be public. Seems like I didnt.\n",
    "commit": "61b8d6e2b37d7b0e200e9a506c24d18c961f8d73",
    "createdAt": "2014-03-13T05:26:44Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+import scala.collection.mutable.{ArrayBuffer, SynchronizedMap}\n+\n+import java.util.{Collections, LinkedHashMap}\n+import java.util.Map.{Entry => JMapEntry}\n+import scala.reflect.ClassTag\n+\n+/**\n+ * A map that upper bounds the number of key-value pairs present in it. It can be configured to\n+ * drop the least recently user pair or the earliest inserted pair. It exposes a\n+ * scala.collection.mutable.Map interface to allow it to be a drop-in replacement for Scala\n+ * HashMaps.\n+ *\n+ * Internally, a Java LinkedHashMap is used to get insert-order or access-order behavior.\n+ * Note that the LinkedHashMap is not thread-safe and hence, it is wrapped in a\n+ * Collections.synchronizedMap. However, getting the Java HashMap's iterator and\n+ * using it can still lead to ConcurrentModificationExceptions. Hence, the iterator()\n+ * function is overridden to copy the all pairs into an ArrayBuffer and then return the\n+ * iterator to the ArrayBuffer. Also, the class apply the trait SynchronizedMap which\n+ * ensures that all calls to the Scala Map API are synchronized. This together ensures\n+ * that ConcurrentModificationException is never thrown.\n+ *\n+ * @param bound   max number of key-value pairs\n+ * @param useLRU  true = least recently used/accessed will be dropped when bound is reached,\n+ *                false = earliest inserted will be dropped\n+ */\n+private[spark] class BoundedHashMap[A, B](bound: Int, useLRU: Boolean)\n+  extends WrappedJavaHashMap[A, B, A, B] with SynchronizedMap[A, B] {\n+\n+  protected[util] val internalJavaMap = Collections.synchronizedMap(new LinkedHashMap[A, B](\n+    bound / 8, (0.75).toFloat, useLRU) {\n+    override protected def removeEldestEntry(eldest: JMapEntry[A, B]): Boolean = {\n+      size() > bound\n+    }\n+  })\n+\n+  protected[util] def newInstance[K1, V1](): WrappedJavaHashMap[K1, V1, _, _] = {"
  }],
  "prId": 126
}]