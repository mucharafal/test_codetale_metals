[{
  "comments": [{
    "author": {
      "login": "markhamstra"
    },
    "body": "What is the expected scenario in which a `KeyValueOrdering` is called for with `B` unordered? You're setting up `KeyValueOrdering` to be more general than your needs for its only current usage in `OrderedValueRDDFunctions`, but I'm not quite grasping how and where else you are expecting `KeyValueOrdering` to be used.\n\nIt's seeming to me that `KeyValueOrdering` should have two ctors: \n\n``` scala\nKeyValueOrdering[A, B](keyOrdering: Ordering[A], valueOrdering: Ordering[B])\n\n...\n\nthis(valueOrdering: Ordering[B]) = this(new HashOrdering[A], valueOrdering)\n```\n",
    "commit": "ea3516ac324da9d6bce8ede6694716b22b1b77c0",
    "createdAt": "2015-01-02T19:53:51Z",
    "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+private[spark] class HashOrdering[A] extends Ordering[A] {\n+  override def compare(x: A, y: A): Int = {\n+    val h1 = if (x == null) 0 else x.hashCode()\n+    val h2 = if (y == null) 0 else y.hashCode()\n+    if (h1 < h2) -1 else if (h1 == h2) 0 else 1\n+  }\n+}\n+\n+private[spark] class NoOrdering[A] extends Ordering[A] {\n+  override def compare(x: A, y: A): Int = 0\n+}\n+\n+private[spark] class KeyValueOrdering[A, B](\n+  ordering1: Option[Ordering[A]], ordering2: Option[Ordering[B]]\n+) extends Ordering[Product2[A, B]] {\n+  private val ord1 = ordering1.getOrElse(new HashOrdering[A])\n+  private val ord2 = ordering2.getOrElse(new NoOrdering[B])"
  }, {
    "author": {
      "login": "koertkuipers"
    },
    "body": "yeah thats right i copied it from another pullreq by me that needed a more general version. i can simplify it.\n",
    "commit": "ea3516ac324da9d6bce8ede6694716b22b1b77c0",
    "createdAt": "2015-01-02T21:29:59Z",
    "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+private[spark] class HashOrdering[A] extends Ordering[A] {\n+  override def compare(x: A, y: A): Int = {\n+    val h1 = if (x == null) 0 else x.hashCode()\n+    val h2 = if (y == null) 0 else y.hashCode()\n+    if (h1 < h2) -1 else if (h1 == h2) 0 else 1\n+  }\n+}\n+\n+private[spark] class NoOrdering[A] extends Ordering[A] {\n+  override def compare(x: A, y: A): Int = 0\n+}\n+\n+private[spark] class KeyValueOrdering[A, B](\n+  ordering1: Option[Ordering[A]], ordering2: Option[Ordering[B]]\n+) extends Ordering[Product2[A, B]] {\n+  private val ord1 = ordering1.getOrElse(new HashOrdering[A])\n+  private val ord2 = ordering2.getOrElse(new NoOrdering[B])"
  }],
  "prId": 3632
}, {
  "comments": [{
    "author": {
      "login": "markhamstra"
    },
    "body": "`ExternalSorter#keyComparator` should be refactored to use `spark.util.HashOrdering`.\n",
    "commit": "ea3516ac324da9d6bce8ede6694716b22b1b77c0",
    "createdAt": "2015-01-02T20:28:53Z",
    "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+private[spark] class HashOrdering[A] extends Ordering[A] {\n+  override def compare(x: A, y: A): Int = {\n+    val h1 = if (x == null) 0 else x.hashCode()\n+    val h2 = if (y == null) 0 else y.hashCode()\n+    if (h1 < h2) -1 else if (h1 == h2) 0 else 1\n+  }\n+}",
    "line": 26
  }],
  "prId": 3632
}, {
  "comments": [{
    "author": {
      "login": "markhamstra"
    },
    "body": "This isn't actually true.  The `compare` method only produces a partial ordering.  `ExternalSorter#keyComparator` gets away with the `Ordering[K]` falsehood only because later passes resolve hash collisions.\n",
    "commit": "ea3516ac324da9d6bce8ede6694716b22b1b77c0",
    "createdAt": "2015-01-02T21:02:01Z",
    "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+private[spark] class HashOrdering[A] extends Ordering[A] {",
    "line": 20
  }],
  "prId": 3632
}, {
  "comments": [{
    "author": {
      "login": "markhamstra"
    },
    "body": "What happens when `ord1` is `HashOrdering` and `c1 == 0` but `x._1 != y._1`?  More generally, what happens when `ord1` isn't actually a full ordering? \n",
    "commit": "ea3516ac324da9d6bce8ede6694716b22b1b77c0",
    "createdAt": "2015-01-02T21:02:06Z",
    "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+private[spark] class HashOrdering[A] extends Ordering[A] {\n+  override def compare(x: A, y: A): Int = {\n+    val h1 = if (x == null) 0 else x.hashCode()\n+    val h2 = if (y == null) 0 else y.hashCode()\n+    if (h1 < h2) -1 else if (h1 == h2) 0 else 1\n+  }\n+}\n+\n+private[spark] class NoOrdering[A] extends Ordering[A] {\n+  override def compare(x: A, y: A): Int = 0\n+}\n+\n+private[spark] class KeyValueOrdering[A, B](\n+  ordering1: Option[Ordering[A]], ordering2: Option[Ordering[B]]\n+) extends Ordering[Product2[A, B]] {\n+  private val ord1 = ordering1.getOrElse(new HashOrdering[A])\n+  private val ord2 = ordering2.getOrElse(new NoOrdering[B])\n+\n+  override def compare(x: Product2[A, B], y: Product2[A, B]): Int = {\n+    val c1 = ord1.compare(x._1, y._1)\n+    if (c1 != 0) c1 else ord2.compare(x._2, y._2)"
  }, {
    "author": {
      "login": "koertkuipers"
    },
    "body": "good point that doesn't look right. it could lead to keys being interleaved in the output.\n",
    "commit": "ea3516ac324da9d6bce8ede6694716b22b1b77c0",
    "createdAt": "2015-01-02T21:36:53Z",
    "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+private[spark] class HashOrdering[A] extends Ordering[A] {\n+  override def compare(x: A, y: A): Int = {\n+    val h1 = if (x == null) 0 else x.hashCode()\n+    val h2 = if (y == null) 0 else y.hashCode()\n+    if (h1 < h2) -1 else if (h1 == h2) 0 else 1\n+  }\n+}\n+\n+private[spark] class NoOrdering[A] extends Ordering[A] {\n+  override def compare(x: A, y: A): Int = 0\n+}\n+\n+private[spark] class KeyValueOrdering[A, B](\n+  ordering1: Option[Ordering[A]], ordering2: Option[Ordering[B]]\n+) extends Ordering[Product2[A, B]] {\n+  private val ord1 = ordering1.getOrElse(new HashOrdering[A])\n+  private val ord2 = ordering2.getOrElse(new NoOrdering[B])\n+\n+  override def compare(x: Product2[A, B], y: Product2[A, B]): Int = {\n+    val c1 = ord1.compare(x._1, y._1)\n+    if (c1 != 0) c1 else ord2.compare(x._2, y._2)"
  }, {
    "author": {
      "login": "koertkuipers"
    },
    "body": "i see 2 options:\n1) do something similar to what happens in ExternalSorter.mergeWithAggregation where in groupByKeyAndSortValues i am aware of the fact that i might be processing multiple keys (with same hashCode) at once and check for key equality. this increases memory requirements\n(all values for all keys with same hashCode have to fit in memory as opposed to all values for a single key).\n2) require an ordering for K which can be used as a tie breaker when the hashCodes of the keys are the same, so that i have a total ordering for K.\n\nthoughts?\n\ni will add a unit test where i have multiple keys with the same hashCode.\n",
    "commit": "ea3516ac324da9d6bce8ede6694716b22b1b77c0",
    "createdAt": "2015-01-03T01:34:23Z",
    "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+private[spark] class HashOrdering[A] extends Ordering[A] {\n+  override def compare(x: A, y: A): Int = {\n+    val h1 = if (x == null) 0 else x.hashCode()\n+    val h2 = if (y == null) 0 else y.hashCode()\n+    if (h1 < h2) -1 else if (h1 == h2) 0 else 1\n+  }\n+}\n+\n+private[spark] class NoOrdering[A] extends Ordering[A] {\n+  override def compare(x: A, y: A): Int = 0\n+}\n+\n+private[spark] class KeyValueOrdering[A, B](\n+  ordering1: Option[Ordering[A]], ordering2: Option[Ordering[B]]\n+) extends Ordering[Product2[A, B]] {\n+  private val ord1 = ordering1.getOrElse(new HashOrdering[A])\n+  private val ord2 = ordering2.getOrElse(new NoOrdering[B])\n+\n+  override def compare(x: Product2[A, B], y: Product2[A, B]): Int = {\n+    val c1 = ord1.compare(x._1, y._1)\n+    if (c1 != 0) c1 else ord2.compare(x._2, y._2)"
  }, {
    "author": {
      "login": "koertkuipers"
    },
    "body": "@markhamstra any preference between the 2 options?\n",
    "commit": "ea3516ac324da9d6bce8ede6694716b22b1b77c0",
    "createdAt": "2015-01-11T22:34:19Z",
    "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+private[spark] class HashOrdering[A] extends Ordering[A] {\n+  override def compare(x: A, y: A): Int = {\n+    val h1 = if (x == null) 0 else x.hashCode()\n+    val h2 = if (y == null) 0 else y.hashCode()\n+    if (h1 < h2) -1 else if (h1 == h2) 0 else 1\n+  }\n+}\n+\n+private[spark] class NoOrdering[A] extends Ordering[A] {\n+  override def compare(x: A, y: A): Int = 0\n+}\n+\n+private[spark] class KeyValueOrdering[A, B](\n+  ordering1: Option[Ordering[A]], ordering2: Option[Ordering[B]]\n+) extends Ordering[Product2[A, B]] {\n+  private val ord1 = ordering1.getOrElse(new HashOrdering[A])\n+  private val ord2 = ordering2.getOrElse(new NoOrdering[B])\n+\n+  override def compare(x: Product2[A, B], y: Product2[A, B]): Int = {\n+    val c1 = ord1.compare(x._1, y._1)\n+    if (c1 != 0) c1 else ord2.compare(x._2, y._2)"
  }],
  "prId": 3632
}]