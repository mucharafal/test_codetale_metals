[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "It looks like noSparkClassLoader should be true here?",
    "commit": "b3c43670781fa8412ccdf44bb6c1d4b2f69e1bae",
    "createdAt": "2019-03-20T14:24:19Z",
    "diffHunk": "@@ -378,10 +378,8 @@ private[spark] object ClosureCleaner extends Logging {\n     } else {\n       logDebug(s\"Cleaning lambda: ${lambdaFunc.get.getImplMethodName}\")\n \n-      // scalastyle:off classforname\n-      val captClass = Class.forName(lambdaFunc.get.getCapturingClass.replace('/', '.'),\n-        false, Thread.currentThread.getContextClassLoader)\n-      // scalastyle:on classforname\n+      val captClass = Utils.classForName(lambdaFunc.get.getCapturingClass.replace('/', '.'),\n+        initialize = false, noSparkClassLoader = false)"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Ah yes nice finding! Will fix.",
    "commit": "b3c43670781fa8412ccdf44bb6c1d4b2f69e1bae",
    "createdAt": "2019-03-20T14:28:34Z",
    "diffHunk": "@@ -378,10 +378,8 @@ private[spark] object ClosureCleaner extends Logging {\n     } else {\n       logDebug(s\"Cleaning lambda: ${lambdaFunc.get.getImplMethodName}\")\n \n-      // scalastyle:off classforname\n-      val captClass = Class.forName(lambdaFunc.get.getCapturingClass.replace('/', '.'),\n-        false, Thread.currentThread.getContextClassLoader)\n-      // scalastyle:on classforname\n+      val captClass = Utils.classForName(lambdaFunc.get.getCapturingClass.replace('/', '.'),\n+        initialize = false, noSparkClassLoader = false)"
  }],
  "prId": 24148
}]