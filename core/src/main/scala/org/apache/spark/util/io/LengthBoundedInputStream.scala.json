[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "It seems like you could implement these 3 methods without much trouble, no?\n",
    "commit": "06b87524ebff5779dbfe73440fc05f2f4ed30946",
    "createdAt": "2014-09-08T19:22:47Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.io\n+\n+import java.io.InputStream\n+\n+\n+/**\n+ * An InputStream that decorator that limits the number of bytes returned from the underlying\n+ * InputStream. If the underlying InputStream returns end of stream (-1 value in read) before\n+ * the limit is reached, then the end of stream is properly returned to the caller as well.\n+ *\n+ * One use case is to read a segment of a file (FileInputStream always reads until the end of a\n+ * file, whereas caller can use this one to limit it to stop before the end of the file).\n+ *\n+ * @param underlying Underlying InputStream to read from\n+ * @param limit number of bytes to read before returning EOF\n+ */\n+final class LengthBoundedInputStream(underlying: InputStream, limit: Long) extends InputStream {\n+\n+  private[this] var pos: Long = 0L\n+\n+  override def close(): Unit = underlying.close()\n+\n+  override def read(): Int = {\n+    if (pos >= limit) {\n+      -1\n+    } else {\n+      val buf = underlying.read()\n+      pos += 1\n+      buf\n+    }\n+  }\n+\n+  override def read(b: Array[Byte], off: Int, len: Int): Int = {\n+    if (pos >= limit) {\n+      -1\n+    } else {\n+      val bytesRead = underlying.read(b, off, math.min(limit - pos, len).toInt)\n+      if (bytesRead == -1) {\n+        -1\n+      } else {\n+        pos += bytesRead\n+        bytesRead\n+      }\n+    }\n+  }\n+\n+  override def available(): Int = throw new UnsupportedOperationException",
    "line": 64
  }],
  "prId": 2321
}]