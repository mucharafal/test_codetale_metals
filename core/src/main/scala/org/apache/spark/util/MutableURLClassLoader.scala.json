[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "I get this, and it makes sense, but in the case you describe, the child classloader had no resource under this name. It seems like it would have already returned the parent's copy. Is this really the nature of the problem then or do I misunderstand?\n",
    "commit": "8f1b6d98e986d576edf36021b4b8a4bc39f884e3",
    "createdAt": "2015-10-14T10:19:18Z",
    "diffHunk": "@@ -82,14 +84,9 @@ private[spark] class ChildFirstURLClassLoader(urls: Array[URL], parent: ClassLoa\n   }\n \n   override def getResources(name: String): Enumeration[URL] = {\n-    val urls = super.findResources(name)\n-    val res =\n-      if (urls != null && urls.hasMoreElements()) {\n-        urls\n-      } else {\n-        parentClassLoader.getResources(name)\n-      }\n-    res\n+    val childUrls = super.findResources(name).asScala\n+    val parentUrls = parentClassLoader.getResources(name).asScala\n+    (childUrls ++ parentUrls).asJavaEnumeration",
    "line": 23
  }, {
    "author": {
      "login": "alewando"
    },
    "body": "In my situation, the child classloader _did_ have resources under this name. With the Typesafe config library, it is typical (and suggested) that libraries package their own default configurations in a 'reference.conf' file at the root of their jar, and that applications do the same. All of the found configuration files are merged together. So in my case, the application assembly (in the child classloader) has it's own 'reference.conf' resource, which (due to this issue) is preventing akka's 'reference.conf' resource (in the parent classloader) from being seen. \n",
    "commit": "8f1b6d98e986d576edf36021b4b8a4bc39f884e3",
    "createdAt": "2015-10-14T11:40:28Z",
    "diffHunk": "@@ -82,14 +84,9 @@ private[spark] class ChildFirstURLClassLoader(urls: Array[URL], parent: ClassLoa\n   }\n \n   override def getResources(name: String): Enumeration[URL] = {\n-    val urls = super.findResources(name)\n-    val res =\n-      if (urls != null && urls.hasMoreElements()) {\n-        urls\n-      } else {\n-        parentClassLoader.getResources(name)\n-      }\n-    res\n+    val childUrls = super.findResources(name).asScala\n+    val parentUrls = parentClassLoader.getResources(name).asScala\n+    (childUrls ++ parentUrls).asJavaEnumeration",
    "line": 23
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "I get it. This makes sense, since the general contract is to return all visible resources under the name.\n",
    "commit": "8f1b6d98e986d576edf36021b4b8a4bc39f884e3",
    "createdAt": "2015-10-14T11:55:21Z",
    "diffHunk": "@@ -82,14 +84,9 @@ private[spark] class ChildFirstURLClassLoader(urls: Array[URL], parent: ClassLoa\n   }\n \n   override def getResources(name: String): Enumeration[URL] = {\n-    val urls = super.findResources(name)\n-    val res =\n-      if (urls != null && urls.hasMoreElements()) {\n-        urls\n-      } else {\n-        parentClassLoader.getResources(name)\n-      }\n-    res\n+    val childUrls = super.findResources(name).asScala\n+    val parentUrls = parentClassLoader.getResources(name).asScala\n+    (childUrls ++ parentUrls).asJavaEnumeration",
    "line": 23
  }],
  "prId": 9106
}]