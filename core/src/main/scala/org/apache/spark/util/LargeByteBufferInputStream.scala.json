[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Isn't this better done as part of `close()`?\n",
    "commit": "3447bb995b53c4d93154328c7c7c06e08a5ec9b9",
    "createdAt": "2015-04-07T21:29:05Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+import java.io.InputStream\n+\n+import org.apache.spark.network.buffer.LargeByteBuffer\n+import org.apache.spark.storage.BlockManager\n+\n+/**\n+ * Reads data from a LargeByteBuffer, and optionally cleans it up using buffer.dispose()\n+ * at the end of the stream (e.g. to close a memory-mapped file).\n+ */\n+private[spark]\n+class LargeByteBufferInputStream(private var buffer: LargeByteBuffer, dispose: Boolean = false)\n+  extends InputStream {\n+\n+  override def read(): Int = {\n+    if (buffer == null || buffer.remaining() == 0) {\n+      cleanUp()\n+      -1\n+    } else {\n+      val r = buffer.get() & 0xFF\n+      if (buffer.remaining() == 0) {\n+        cleanUp()"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "(In fact you do need `close()` in case the stream is closed before EOF is reached.)\n",
    "commit": "3447bb995b53c4d93154328c7c7c06e08a5ec9b9",
    "createdAt": "2015-04-07T21:34:24Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+import java.io.InputStream\n+\n+import org.apache.spark.network.buffer.LargeByteBuffer\n+import org.apache.spark.storage.BlockManager\n+\n+/**\n+ * Reads data from a LargeByteBuffer, and optionally cleans it up using buffer.dispose()\n+ * at the end of the stream (e.g. to close a memory-mapped file).\n+ */\n+private[spark]\n+class LargeByteBufferInputStream(private var buffer: LargeByteBuffer, dispose: Boolean = false)\n+  extends InputStream {\n+\n+  override def read(): Int = {\n+    if (buffer == null || buffer.remaining() == 0) {\n+      cleanUp()\n+      -1\n+    } else {\n+      val r = buffer.get() & 0xFF\n+      if (buffer.remaining() == 0) {\n+        cleanUp()"
  }, {
    "author": {
      "login": "squito"
    },
    "body": "If anyone is watching on the sidelines -- marcelo and I chatted about this a while and realized there is an issue with the existing use of `ByteBufferInputStream` (where this code was copied from) that prevents it from getting properly disposed in all cases.  I've opened https://issues.apache.org/jira/browse/SPARK-6839\n",
    "commit": "3447bb995b53c4d93154328c7c7c06e08a5ec9b9",
    "createdAt": "2015-04-10T00:58:07Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+import java.io.InputStream\n+\n+import org.apache.spark.network.buffer.LargeByteBuffer\n+import org.apache.spark.storage.BlockManager\n+\n+/**\n+ * Reads data from a LargeByteBuffer, and optionally cleans it up using buffer.dispose()\n+ * at the end of the stream (e.g. to close a memory-mapped file).\n+ */\n+private[spark]\n+class LargeByteBufferInputStream(private var buffer: LargeByteBuffer, dispose: Boolean = false)\n+  extends InputStream {\n+\n+  override def read(): Int = {\n+    if (buffer == null || buffer.remaining() == 0) {\n+      cleanUp()\n+      -1\n+    } else {\n+      val r = buffer.get() & 0xFF\n+      if (buffer.remaining() == 0) {\n+        cleanUp()"
  }],
  "prId": 5400
}]