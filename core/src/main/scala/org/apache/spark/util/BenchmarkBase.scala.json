[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "nit: try-catch and close it.",
    "commit": "075ef7a0696332c3b9d35ff1750ea7ade08e7c3d",
    "createdAt": "2018-09-28T08:43:45Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+import java.io.{File, FileOutputStream, OutputStream}\n+\n+/**\n+ * A base class for generate benchmark results to a file.\n+ */\n+abstract class BenchmarkBase {\n+  var output: Option[OutputStream] = None\n+\n+  def benchmark(): Unit\n+\n+  final def runBenchmark(benchmarkName: String)(func: => Any): Unit = {\n+    val separator = \"=\" * 96\n+    val testHeader = (separator + '\\n' + benchmarkName + '\\n' + separator + '\\n' + '\\n').getBytes\n+    output.foreach(_.write(testHeader))\n+    func\n+    output.foreach(_.write('\\n'))\n+  }\n+\n+  def main(args: Array[String]): Unit = {\n+    val regenerateBenchmarkFiles: Boolean = System.getenv(\"SPARK_GENERATE_BENCHMARK_FILES\") == \"1\"\n+    if (regenerateBenchmarkFiles) {\n+      val resultFileName = s\"${this.getClass.getSimpleName.replace(\"$\", \"\")}-results.txt\"\n+      val file = new File(s\"benchmarks/$resultFileName\")\n+      if (!file.exists()) {\n+        file.createNewFile()\n+      }\n+      output = Some(new FileOutputStream(file))",
    "line": 46
  }],
  "prId": 22443
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "nit: `Option(new FileOutputStream(file))` and remove `if (o != null) {` below.",
    "commit": "075ef7a0696332c3b9d35ff1750ea7ade08e7c3d",
    "createdAt": "2018-09-28T08:44:23Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+import java.io.{File, FileOutputStream, OutputStream}\n+\n+/**\n+ * A base class for generate benchmark results to a file.\n+ */\n+abstract class BenchmarkBase {\n+  var output: Option[OutputStream] = None\n+\n+  def benchmark(): Unit\n+\n+  final def runBenchmark(benchmarkName: String)(func: => Any): Unit = {\n+    val separator = \"=\" * 96\n+    val testHeader = (separator + '\\n' + benchmarkName + '\\n' + separator + '\\n' + '\\n').getBytes\n+    output.foreach(_.write(testHeader))\n+    func\n+    output.foreach(_.write('\\n'))\n+  }\n+\n+  def main(args: Array[String]): Unit = {\n+    val regenerateBenchmarkFiles: Boolean = System.getenv(\"SPARK_GENERATE_BENCHMARK_FILES\") == \"1\"\n+    if (regenerateBenchmarkFiles) {\n+      val resultFileName = s\"${this.getClass.getSimpleName.replace(\"$\", \"\")}-results.txt\"\n+      val file = new File(s\"benchmarks/$resultFileName\")\n+      if (!file.exists()) {\n+        file.createNewFile()\n+      }\n+      output = Some(new FileOutputStream(file))",
    "line": 46
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Please address them when you fix some codes around here next time.",
    "commit": "075ef7a0696332c3b9d35ff1750ea7ade08e7c3d",
    "createdAt": "2018-09-28T08:44:56Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+import java.io.{File, FileOutputStream, OutputStream}\n+\n+/**\n+ * A base class for generate benchmark results to a file.\n+ */\n+abstract class BenchmarkBase {\n+  var output: Option[OutputStream] = None\n+\n+  def benchmark(): Unit\n+\n+  final def runBenchmark(benchmarkName: String)(func: => Any): Unit = {\n+    val separator = \"=\" * 96\n+    val testHeader = (separator + '\\n' + benchmarkName + '\\n' + separator + '\\n' + '\\n').getBytes\n+    output.foreach(_.write(testHeader))\n+    func\n+    output.foreach(_.write('\\n'))\n+  }\n+\n+  def main(args: Array[String]): Unit = {\n+    val regenerateBenchmarkFiles: Boolean = System.getenv(\"SPARK_GENERATE_BENCHMARK_FILES\") == \"1\"\n+    if (regenerateBenchmarkFiles) {\n+      val resultFileName = s\"${this.getClass.getSimpleName.replace(\"$\", \"\")}-results.txt\"\n+      val file = new File(s\"benchmarks/$resultFileName\")\n+      if (!file.exists()) {\n+        file.createNewFile()\n+      }\n+      output = Some(new FileOutputStream(file))",
    "line": 46
  }, {
    "author": {
      "login": "wangyum"
    },
    "body": "Thanks @HyukjinKwon. Will fix it next time.",
    "commit": "075ef7a0696332c3b9d35ff1750ea7ade08e7c3d",
    "createdAt": "2018-09-28T08:51:15Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+import java.io.{File, FileOutputStream, OutputStream}\n+\n+/**\n+ * A base class for generate benchmark results to a file.\n+ */\n+abstract class BenchmarkBase {\n+  var output: Option[OutputStream] = None\n+\n+  def benchmark(): Unit\n+\n+  final def runBenchmark(benchmarkName: String)(func: => Any): Unit = {\n+    val separator = \"=\" * 96\n+    val testHeader = (separator + '\\n' + benchmarkName + '\\n' + separator + '\\n' + '\\n').getBytes\n+    output.foreach(_.write(testHeader))\n+    func\n+    output.foreach(_.write('\\n'))\n+  }\n+\n+  def main(args: Array[String]): Unit = {\n+    val regenerateBenchmarkFiles: Boolean = System.getenv(\"SPARK_GENERATE_BENCHMARK_FILES\") == \"1\"\n+    if (regenerateBenchmarkFiles) {\n+      val resultFileName = s\"${this.getClass.getSimpleName.replace(\"$\", \"\")}-results.txt\"\n+      val file = new File(s\"benchmarks/$resultFileName\")\n+      if (!file.exists()) {\n+        file.createNewFile()\n+      }\n+      output = Some(new FileOutputStream(file))",
    "line": 46
  }],
  "prId": 22443
}]