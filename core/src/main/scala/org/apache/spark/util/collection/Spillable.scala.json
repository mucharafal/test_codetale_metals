[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "can you comment on why the changes are safe/correct?\n",
    "commit": "383955781447150286c68dacac8bcb10196eef00",
    "createdAt": "2016-05-10T04:17:37Z",
    "diffHunk": "@@ -41,7 +41,7 @@ private[spark] abstract class Spillable[C](taskMemoryManager: TaskMemoryManager)\n   protected def forceSpill(): Boolean\n \n   // Number of elements read from input since last spill\n-  @volatile protected def elementsRead: Long = _elementsRead\n+  protected def elementsRead: Long = _elementsRead",
    "line": 5
  }, {
    "author": {
      "login": "lianhuiwang"
    },
    "body": "It has only one thread to use this method.  So we can remove volatile.\n",
    "commit": "383955781447150286c68dacac8bcb10196eef00",
    "createdAt": "2016-05-10T04:23:24Z",
    "diffHunk": "@@ -41,7 +41,7 @@ private[spark] abstract class Spillable[C](taskMemoryManager: TaskMemoryManager)\n   protected def forceSpill(): Boolean\n \n   // Number of elements read from input since last spill\n-  @volatile protected def elementsRead: Long = _elementsRead\n+  protected def elementsRead: Long = _elementsRead",
    "line": 5
  }],
  "prId": 13020
}, {
  "comments": [{
    "author": {
      "login": "lianhuiwang"
    },
    "body": "I delete this code in order to _elementsRead is called by one thread. So we do not need to make _elementsRead  volatile.\n",
    "commit": "383955781447150286c68dacac8bcb10196eef00",
    "createdAt": "2016-05-10T04:24:26Z",
    "diffHunk": "@@ -112,7 +112,6 @@ private[spark] abstract class Spillable[C](taskMemoryManager: TaskMemoryManager)\n       if (!isSpilled) {\n         0L\n       } else {\n-        _elementsRead = 0",
    "line": 13
  }],
  "prId": 13020
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "It's not meaningful to make a method volatile anyway right? the fact that it's not an error makes me think I could be missing something. No objection\n",
    "commit": "383955781447150286c68dacac8bcb10196eef00",
    "createdAt": "2016-05-10T17:11:02Z",
    "diffHunk": "@@ -41,7 +41,7 @@ private[spark] abstract class Spillable[C](taskMemoryManager: TaskMemoryManager)\n   protected def forceSpill(): Boolean\n \n   // Number of elements read from input since last spill\n-  @volatile protected def elementsRead: Long = _elementsRead",
    "line": 4
  }, {
    "author": {
      "login": "lianhuiwang"
    },
    "body": "Yes, I think you understand correctly. we can remove volatile of elementsRead method because there is only one thread to use it.\n",
    "commit": "383955781447150286c68dacac8bcb10196eef00",
    "createdAt": "2016-05-11T00:43:40Z",
    "diffHunk": "@@ -41,7 +41,7 @@ private[spark] abstract class Spillable[C](taskMemoryManager: TaskMemoryManager)\n   protected def forceSpill(): Boolean\n \n   // Number of elements read from input since last spill\n-  @volatile protected def elementsRead: Long = _elementsRead",
    "line": 4
  }],
  "prId": 13020
}]