[{
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "could you pull this expression out into it's own variable `val fieldsToTest = getAllFields(...)`. We try not to nest expressions like this to make the code more readable.\n",
    "commit": "5b93dc18d541b82394fca97743e96726698586b0",
    "createdAt": "2015-01-15T22:54:23Z",
    "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.util\n+\n+import java.lang.reflect.{Modifier, Field}\n+\n+import com.google.common.collect.Queues\n+\n+import scala.collection.mutable\n+\n+\n+/**\n+ * This class permits traversing a generic Object's reference graph. This is useful for debugging \n+ * serialization errors. See SPARK-3694.\n+ * \n+ * This code is based on code written by Josh Rosen found here:\n+ * https://gist.github.com/JoshRosen/d6a8972c99992e97d040\n+ */\n+object ObjectWalker {\n+  def isTransient(field: Field): Boolean = Modifier.isTransient(field.getModifiers)\n+  def isStatic(field: Field): Boolean = Modifier.isStatic(field.getModifiers)\n+  def isPrimitive(field: Field): Boolean = field.getType.isPrimitive\n+\n+  /**\n+   * Traverse the graph representing all references between the provided root object, its\n+   * members, and their references in turn. \n+   * \n+   * What we want to be able to do is readily identify un-serializable components AND the path\n+   * to those components. To do this, store the traversal of the graph as a 2-tuple - the actual \n+   * reference visited and its parent. Then, to get the path to the un-serializable reference \n+   * we can simply follow the parent links. \n+   *\n+   * @param rootObj - The root object for which to generate the reference graph\n+   * @return a new Set containing the 2-tuple of references from the traversal of the \n+   *         reference graph along with their parent references. (self, parent)\n+   */\n+  def buildRefGraph(rootObj: AnyRef): mutable.LinkedList[AnyRef] = {\n+    val visitedRefs = mutable.Set[AnyRef]()\n+    val toVisit = Queues.newArrayDeque[AnyRef]()\n+    var results = mutable.LinkedList[AnyRef]()\n+    \n+    toVisit.add(rootObj)\n+    \n+    while (!toVisit.isEmpty) {\n+      val obj : AnyRef = toVisit.pollFirst()\n+      // Store the last parent reference to enable quick retrieval of the path to a broken node\n+      \n+      if (!visitedRefs.contains(obj)) {\n+        results = mutable.LinkedList(obj).append(results)\n+        visitedRefs.add(obj)\n+          \n+        // Extract all the fields from the object that would be serialized. Transient and \n+        // static references are not serialized and primitive variables will always be serializable\n+        // and will not contain further references.\n+        \n+        for (field <- getAllFields(obj.getClass)"
  }],
  "prId": 3518
}, {
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "Does scala have a queue you can use here instead of using the google libraries?\n",
    "commit": "5b93dc18d541b82394fca97743e96726698586b0",
    "createdAt": "2015-01-15T22:55:18Z",
    "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.util\n+\n+import java.lang.reflect.{Modifier, Field}\n+\n+import com.google.common.collect.Queues"
  }],
  "prId": 3518
}]