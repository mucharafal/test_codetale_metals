[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "Can we avoid this? Seems fairly expensive by adding a lot more method calls ...\n",
    "commit": "bd919be5817e29dad476213a0b3b407d28ee0f24",
    "createdAt": "2015-01-16T06:33:12Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+/**\n+ * A Wrapper for iterators where a caller can get hooks before/after\n+ * iterator methods.\n+ * @param sub The iterator being wrapped.\n+ * @tparam A the iterable type\n+ */\n+private[spark]\n+class InterceptingIterator[A](sub: Iterator[A]) extends Iterator[A] {"
  }, {
    "author": {
      "login": "ksakellis"
    },
    "body": "So this is supposed to be a generic way of intercepting iterators. If we don't have this, i'd have to do something custom like CompletionIterator - i was trying to make something reusable.  \n",
    "commit": "bd919be5817e29dad476213a0b3b407d28ee0f24",
    "createdAt": "2015-01-16T06:47:01Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+/**\n+ * A Wrapper for iterators where a caller can get hooks before/after\n+ * iterator methods.\n+ * @param sub The iterator being wrapped.\n+ * @tparam A the iterable type\n+ */\n+private[spark]\n+class InterceptingIterator[A](sub: Iterator[A]) extends Iterator[A] {"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "Yea the thing is there is only a very limited number of places that you'd need to increment the counters. I'm not sure if this super generic design is worth it, unless you want to do a lot of performance studies of the differences ...\n",
    "commit": "bd919be5817e29dad476213a0b3b407d28ee0f24",
    "createdAt": "2015-01-16T06:51:19Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util\n+\n+/**\n+ * A Wrapper for iterators where a caller can get hooks before/after\n+ * iterator methods.\n+ * @param sub The iterator being wrapped.\n+ * @tparam A the iterable type\n+ */\n+private[spark]\n+class InterceptingIterator[A](sub: Iterator[A]) extends Iterator[A] {"
  }],
  "prId": 4067
}]