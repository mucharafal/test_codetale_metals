[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "This seems like the wrong code; maybe a new one is needed, not sure",
    "commit": "affcb04b3e20a9b151668c5c82408b1dac6d6d72",
    "createdAt": "2019-06-04T21:33:55Z",
    "diffHunk": "@@ -41,13 +48,19 @@ private[spark] class SparkUncaughtExceptionHandler(val exitOnUncaughtException:\n       if (!ShutdownHookManager.inShutdown()) {\n         exception match {\n           case _: OutOfMemoryError =>\n-            System.exit(SparkExitCode.OOM)\n+            // we need to exit immediately no space for graceful shutdown here\n+            // we cannot assume the jvm is healthy\n+            sysExit(SparkExitCode.OOM, isDriver)\n           case e: SparkFatalException if e.throwable.isInstanceOf[OutOfMemoryError] =>\n             // SPARK-24294: This is defensive code, in case that SparkFatalException is\n             // misused and uncaught.\n-            System.exit(SparkExitCode.OOM)\n+            sysExit(SparkExitCode.OOM, isDriver)\n+          case _: VirtualMachineError if exitOnUncaughtException =>\n+            // we need to exit immediately no space for graceful shutdown here\n+            // we cannot assume the jvm is healthy\n+            sysExit(SparkExitCode.OOM, isDriver)"
  }, {
    "author": {
      "login": "skonto"
    },
    "body": "Yeah I probably need to figure out some other generic one.",
    "commit": "affcb04b3e20a9b151668c5c82408b1dac6d6d72",
    "createdAt": "2019-06-04T22:22:49Z",
    "diffHunk": "@@ -41,13 +48,19 @@ private[spark] class SparkUncaughtExceptionHandler(val exitOnUncaughtException:\n       if (!ShutdownHookManager.inShutdown()) {\n         exception match {\n           case _: OutOfMemoryError =>\n-            System.exit(SparkExitCode.OOM)\n+            // we need to exit immediately no space for graceful shutdown here\n+            // we cannot assume the jvm is healthy\n+            sysExit(SparkExitCode.OOM, isDriver)\n           case e: SparkFatalException if e.throwable.isInstanceOf[OutOfMemoryError] =>\n             // SPARK-24294: This is defensive code, in case that SparkFatalException is\n             // misused and uncaught.\n-            System.exit(SparkExitCode.OOM)\n+            sysExit(SparkExitCode.OOM, isDriver)\n+          case _: VirtualMachineError if exitOnUncaughtException =>\n+            // we need to exit immediately no space for graceful shutdown here\n+            // we cannot assume the jvm is healthy\n+            sysExit(SparkExitCode.OOM, isDriver)"
  }, {
    "author": {
      "login": "skonto"
    },
    "body": "Fixed it.",
    "commit": "affcb04b3e20a9b151668c5c82408b1dac6d6d72",
    "createdAt": "2019-06-04T23:30:38Z",
    "diffHunk": "@@ -41,13 +48,19 @@ private[spark] class SparkUncaughtExceptionHandler(val exitOnUncaughtException:\n       if (!ShutdownHookManager.inShutdown()) {\n         exception match {\n           case _: OutOfMemoryError =>\n-            System.exit(SparkExitCode.OOM)\n+            // we need to exit immediately no space for graceful shutdown here\n+            // we cannot assume the jvm is healthy\n+            sysExit(SparkExitCode.OOM, isDriver)\n           case e: SparkFatalException if e.throwable.isInstanceOf[OutOfMemoryError] =>\n             // SPARK-24294: This is defensive code, in case that SparkFatalException is\n             // misused and uncaught.\n-            System.exit(SparkExitCode.OOM)\n+            sysExit(SparkExitCode.OOM, isDriver)\n+          case _: VirtualMachineError if exitOnUncaughtException =>\n+            // we need to exit immediately no space for graceful shutdown here\n+            // we cannot assume the jvm is healthy\n+            sysExit(SparkExitCode.OOM, isDriver)"
  }],
  "prId": 24796
}]