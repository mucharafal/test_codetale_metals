[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Nit: space before if",
    "commit": "52acfd58a82f20656331b43a2b27944fdfac2b3f",
    "createdAt": "2018-08-29T14:25:33Z",
    "diffHunk": "@@ -2794,6 +2794,27 @@ private[spark] object Utils extends Logging {\n       }\n     }\n   }\n+\n+  /**\n+   * Regular expression matching full width characters\n+   */\n+  private lazy val fullWidthRegex = (\"\"\"[\"\"\" +\n+    \"\"\"\\u1100-\\u115F\"\"\" +\n+    \"\"\"\\u2E80-\\uA4CF\"\"\" +\n+    \"\"\"\\uAC00-\\uD7A3\"\"\" +\n+    \"\"\"\\uF900-\\uFAFF\"\"\" +\n+    \"\"\"\\uFE10-\\uFE19\"\"\" +\n+    \"\"\"\\uFE30-\\uFE6F\"\"\" +\n+    \"\"\"\\uFF00-\\uFF60\"\"\" +\n+    \"\"\"\\uFFE0-\\uFFE6\"\"\" +\n+    \"\"\"]\"\"\").r\n+  /**\n+   * Return the number of half width of a string\n+   * A full width character occupies two half widths\n+   */\n+  def stringHalfWidth(str: String): Int = {\n+    if(str == null) 0 else str.length + fullWidthRegex.findAllIn(str).size"
  }],
  "prId": 22048
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Doesn't need to be lazy",
    "commit": "52acfd58a82f20656331b43a2b27944fdfac2b3f",
    "createdAt": "2018-08-29T14:25:45Z",
    "diffHunk": "@@ -2794,6 +2794,27 @@ private[spark] object Utils extends Logging {\n       }\n     }\n   }\n+\n+  /**\n+   * Regular expression matching full width characters\n+   */\n+  private lazy val fullWidthRegex = (\"\"\"[\"\"\" +"
  }],
  "prId": 22048
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "super nit: add blank line",
    "commit": "52acfd58a82f20656331b43a2b27944fdfac2b3f",
    "createdAt": "2018-08-29T23:48:14Z",
    "diffHunk": "@@ -2794,6 +2794,27 @@ private[spark] object Utils extends Logging {\n       }\n     }\n   }\n+\n+  /**\n+   * Regular expression matching full width characters\n+   */\n+  private lazy val fullWidthRegex = (\"\"\"[\"\"\" +\n+    \"\"\"\\u1100-\\u115F\"\"\" +\n+    \"\"\"\\u2E80-\\uA4CF\"\"\" +\n+    \"\"\"\\uAC00-\\uD7A3\"\"\" +\n+    \"\"\"\\uF900-\\uFAFF\"\"\" +\n+    \"\"\"\\uFE10-\\uFE19\"\"\" +\n+    \"\"\"\\uFE30-\\uFE6F\"\"\" +\n+    \"\"\"\\uFF00-\\uFF60\"\"\" +\n+    \"\"\"\\uFFE0-\\uFFE6\"\"\" +\n+    \"\"\"]\"\"\").r"
  }],
  "prId": 22048
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "How about this?\r\n```\r\n  /**\r\n   * Return the number of half widths in a given string. Note that a full width character\r\n   * occupies two half widths.\r\n   */\r\n```",
    "commit": "52acfd58a82f20656331b43a2b27944fdfac2b3f",
    "createdAt": "2018-08-29T23:53:12Z",
    "diffHunk": "@@ -2794,6 +2794,27 @@ private[spark] object Utils extends Logging {\n       }\n     }\n   }\n+\n+  /**\n+   * Regular expression matching full width characters\n+   */\n+  private lazy val fullWidthRegex = (\"\"\"[\"\"\" +\n+    \"\"\"\\u1100-\\u115F\"\"\" +\n+    \"\"\"\\u2E80-\\uA4CF\"\"\" +\n+    \"\"\"\\uAC00-\\uD7A3\"\"\" +\n+    \"\"\"\\uF900-\\uFAFF\"\"\" +\n+    \"\"\"\\uFE10-\\uFE19\"\"\" +\n+    \"\"\"\\uFE30-\\uFE6F\"\"\" +\n+    \"\"\"\\uFF00-\\uFF60\"\"\" +\n+    \"\"\"\\uFFE0-\\uFFE6\"\"\" +\n+    \"\"\"]\"\"\").r\n+  /**\n+   * Return the number of half width of a string\n+   * A full width character occupies two half widths\n+   */"
  }, {
    "author": {
      "login": "xuejianbest"
    },
    "body": "OK, thinks",
    "commit": "52acfd58a82f20656331b43a2b27944fdfac2b3f",
    "createdAt": "2018-08-30T01:48:11Z",
    "diffHunk": "@@ -2794,6 +2794,27 @@ private[spark] object Utils extends Logging {\n       }\n     }\n   }\n+\n+  /**\n+   * Regular expression matching full width characters\n+   */\n+  private lazy val fullWidthRegex = (\"\"\"[\"\"\" +\n+    \"\"\"\\u1100-\\u115F\"\"\" +\n+    \"\"\"\\u2E80-\\uA4CF\"\"\" +\n+    \"\"\"\\uAC00-\\uD7A3\"\"\" +\n+    \"\"\"\\uF900-\\uFAFF\"\"\" +\n+    \"\"\"\\uFE10-\\uFE19\"\"\" +\n+    \"\"\"\\uFE30-\\uFE6F\"\"\" +\n+    \"\"\"\\uFF00-\\uFF60\"\"\" +\n+    \"\"\"\\uFFE0-\\uFFE6\"\"\" +\n+    \"\"\"]\"\"\").r\n+  /**\n+   * Return the number of half width of a string\n+   * A full width character occupies two half widths\n+   */"
  }],
  "prId": 22048
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "A general question. \r\n- How to get this Regex list? Any reference?  It sounds like this should be a general problem\r\n- What is the performance impact?\r\n\r\nCan you answer them and post them in the PR description?",
    "commit": "52acfd58a82f20656331b43a2b27944fdfac2b3f",
    "createdAt": "2018-08-31T22:46:49Z",
    "diffHunk": "@@ -2794,6 +2794,30 @@ private[spark] object Utils extends Logging {\n       }\n     }\n   }\n+\n+  /**\n+   * Regular expression matching full width characters\n+   */\n+  private val fullWidthRegex = (\"\"\"[\"\"\" +\n+    // scalastyle:off nonascii\n+    \"\"\"\\u1100-\\u115F\"\"\" +\n+    \"\"\"\\u2E80-\\uA4CF\"\"\" +\n+    \"\"\"\\uAC00-\\uD7A3\"\"\" +\n+    \"\"\"\\uF900-\\uFAFF\"\"\" +\n+    \"\"\"\\uFE10-\\uFE19\"\"\" +\n+    \"\"\"\\uFE30-\\uFE6F\"\"\" +\n+    \"\"\"\\uFF00-\\uFF60\"\"\" +\n+    \"\"\"\\uFFE0-\\uFFE6\"\"\" +",
    "line": 20
  }, {
    "author": {
      "login": "xuejianbest"
    },
    "body": "- How to get this Regex list? Any reference? It sounds like this should be a general problem\r\n\r\nI looked at all the 0x0000-0xFFFF characters (unicode) and showed them under Xshell, then found all the full width characters. Get the regular expression.\r\n\r\n\r\n- What is the performance impact?\r\n\r\nI generated 1000 strings, each consisting of 1000 characters with a random unicode of 0x0000-0xFFFF. (a total of 1 million characters.)\r\nThen use this regular expression to find the full width character of these strings.\r\nI tested 100 rounds and then averaged.\r\nIt takes 49 milliseconds to complete matching all 1000 strings.\r\n\r\n@gatorsmile ",
    "commit": "52acfd58a82f20656331b43a2b27944fdfac2b3f",
    "createdAt": "2018-09-03T08:44:36Z",
    "diffHunk": "@@ -2794,6 +2794,30 @@ private[spark] object Utils extends Logging {\n       }\n     }\n   }\n+\n+  /**\n+   * Regular expression matching full width characters\n+   */\n+  private val fullWidthRegex = (\"\"\"[\"\"\" +\n+    // scalastyle:off nonascii\n+    \"\"\"\\u1100-\\u115F\"\"\" +\n+    \"\"\"\\u2E80-\\uA4CF\"\"\" +\n+    \"\"\"\\uAC00-\\uD7A3\"\"\" +\n+    \"\"\"\\uF900-\\uFAFF\"\"\" +\n+    \"\"\"\\uFE10-\\uFE19\"\"\" +\n+    \"\"\"\\uFE30-\\uFE6F\"\"\" +\n+    \"\"\"\\uFF00-\\uFF60\"\"\" +\n+    \"\"\"\\uFFE0-\\uFFE6\"\"\" +",
    "line": 20
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "> I looked at all the 0x0000-0xFFFF characters (unicode) and showed them under Xshell, then found all the full width characters. Get the regular expression.\r\n\r\nCan you describe them there and put a references to a public unicode document?\r\nSee the comment in `UTF8String`;\r\nhttps://github.com/apache/spark/blob/master/common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java#L65\r\n\r\n> It takes 49 milliseconds to complete matching all 1000 strings.\r\n\r\nHow about some additional overheads when calling `showString` as compared to `showString ` w/o this patch?",
    "commit": "52acfd58a82f20656331b43a2b27944fdfac2b3f",
    "createdAt": "2018-09-03T09:25:41Z",
    "diffHunk": "@@ -2794,6 +2794,30 @@ private[spark] object Utils extends Logging {\n       }\n     }\n   }\n+\n+  /**\n+   * Regular expression matching full width characters\n+   */\n+  private val fullWidthRegex = (\"\"\"[\"\"\" +\n+    // scalastyle:off nonascii\n+    \"\"\"\\u1100-\\u115F\"\"\" +\n+    \"\"\"\\u2E80-\\uA4CF\"\"\" +\n+    \"\"\"\\uAC00-\\uD7A3\"\"\" +\n+    \"\"\"\\uF900-\\uFAFF\"\"\" +\n+    \"\"\"\\uFE10-\\uFE19\"\"\" +\n+    \"\"\"\\uFE30-\\uFE6F\"\"\" +\n+    \"\"\"\\uFF00-\\uFF60\"\"\" +\n+    \"\"\"\\uFFE0-\\uFFE6\"\"\" +",
    "line": 20
  }, {
    "author": {
      "login": "xuejianbest"
    },
    "body": "> Can you describe them there and put a references to a public unicode document?\r\n\r\nThis is a regular expression match using unicode, regardless of the specific encoding.\r\nFor example, the following string is encoded using gbk instead of utf8, and the match still works：\r\n\r\n```scala\r\n\r\n    val bytes = Array[Byte](0xd6.toByte, 0xd0.toByte, 0xB9.toByte, 0xFA.toByte)\r\n    val s1 = new String(bytes, \"gbk\")    \r\n    println(s1) //中国    \r\n    val fullWidthRegex = (\"\"\"[\"\"\" +\r\n    // scalastyle:off nonascii\r\n    \"\"\"\\u1100-\\u115F\"\"\" +\r\n    \"\"\"\\u2E80-\\uA4CF\"\"\" +\r\n    \"\"\"\\uAC00-\\uD7A3\"\"\" +\r\n    \"\"\"\\uF900-\\uFAFF\"\"\" +\r\n    \"\"\"\\uFE10-\\uFE19\"\"\" +\r\n    \"\"\"\\uFE30-\\uFE6F\"\"\" +\r\n    \"\"\"\\uFF00-\\uFF60\"\"\" +\r\n    \"\"\"\\uFFE0-\\uFFE6\"\"\" +\r\n    // scalastyle:on nonascii\r\n    \"\"\"]\"\"\").r\r\n    println(fullWidthRegex.findAllIn(s1).size) //2\r\n\r\n```\r\n\r\nThis regular expression is obtained experimentally under a specific font.\r\nI don't understand what you are going to do.\r\n\r\n\r\n> How about some additional overheads when calling showString as compared to showString w/o this patch?\r\n\r\nI tested a Dataset consisting of 100 rows, each row has two columns, one column is the index (0-99), and the other column is a random string of length 100 characters, and then the showString display is called separately.\r\nThe original showString method (w/o this patch) took about 42ms, and the improved time took about 46ms, and the performance was about 10% worse.",
    "commit": "52acfd58a82f20656331b43a2b27944fdfac2b3f",
    "createdAt": "2018-09-04T03:18:02Z",
    "diffHunk": "@@ -2794,6 +2794,30 @@ private[spark] object Utils extends Logging {\n       }\n     }\n   }\n+\n+  /**\n+   * Regular expression matching full width characters\n+   */\n+  private val fullWidthRegex = (\"\"\"[\"\"\" +\n+    // scalastyle:off nonascii\n+    \"\"\"\\u1100-\\u115F\"\"\" +\n+    \"\"\"\\u2E80-\\uA4CF\"\"\" +\n+    \"\"\"\\uAC00-\\uD7A3\"\"\" +\n+    \"\"\"\\uF900-\\uFAFF\"\"\" +\n+    \"\"\"\\uFE10-\\uFE19\"\"\" +\n+    \"\"\"\\uFE30-\\uFE6F\"\"\" +\n+    \"\"\"\\uFF00-\\uFF60\"\"\" +\n+    \"\"\"\\uFFE0-\\uFFE6\"\"\" +",
    "line": 20
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "I think this is fine. Just copy a summary of your comments here into the comments in the code. Yes this has nothing to do with UTF8 encoding directly. You are matching UCS2 really, 16bit char values. ",
    "commit": "52acfd58a82f20656331b43a2b27944fdfac2b3f",
    "createdAt": "2018-09-04T10:23:45Z",
    "diffHunk": "@@ -2794,6 +2794,30 @@ private[spark] object Utils extends Logging {\n       }\n     }\n   }\n+\n+  /**\n+   * Regular expression matching full width characters\n+   */\n+  private val fullWidthRegex = (\"\"\"[\"\"\" +\n+    // scalastyle:off nonascii\n+    \"\"\"\\u1100-\\u115F\"\"\" +\n+    \"\"\"\\u2E80-\\uA4CF\"\"\" +\n+    \"\"\"\\uAC00-\\uD7A3\"\"\" +\n+    \"\"\"\\uF900-\\uFAFF\"\"\" +\n+    \"\"\"\\uFE10-\\uFE19\"\"\" +\n+    \"\"\"\\uFE30-\\uFE6F\"\"\" +\n+    \"\"\"\\uFF00-\\uFF60\"\"\" +\n+    \"\"\"\\uFFE0-\\uFFE6\"\"\" +",
    "line": 20
  }, {
    "author": {
      "login": "xuejianbest"
    },
    "body": "Do I need to merge the above commited into one commit, \r\nOr add another new commit?\r\nOr change the last commit comments ?\r\n@srowen ",
    "commit": "52acfd58a82f20656331b43a2b27944fdfac2b3f",
    "createdAt": "2018-09-04T10:41:17Z",
    "diffHunk": "@@ -2794,6 +2794,30 @@ private[spark] object Utils extends Logging {\n       }\n     }\n   }\n+\n+  /**\n+   * Regular expression matching full width characters\n+   */\n+  private val fullWidthRegex = (\"\"\"[\"\"\" +\n+    // scalastyle:off nonascii\n+    \"\"\"\\u1100-\\u115F\"\"\" +\n+    \"\"\"\\u2E80-\\uA4CF\"\"\" +\n+    \"\"\"\\uAC00-\\uD7A3\"\"\" +\n+    \"\"\"\\uF900-\\uFAFF\"\"\" +\n+    \"\"\"\\uFE10-\\uFE19\"\"\" +\n+    \"\"\"\\uFE30-\\uFE6F\"\"\" +\n+    \"\"\"\\uFF00-\\uFF60\"\"\" +\n+    \"\"\"\\uFFE0-\\uFFE6\"\"\" +",
    "line": 20
  }],
  "prId": 22048
}]