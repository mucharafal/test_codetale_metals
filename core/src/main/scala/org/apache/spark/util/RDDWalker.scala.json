[{
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "I'd remove this, since we handle attribution through `git blame` and release notes.\n",
    "commit": "5b93dc18d541b82394fca97743e96726698586b0",
    "createdAt": "2014-11-30T18:56:49Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// Created by Ilya Ganelin"
  }],
  "prId": 3518
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Import ordering; see https://cwiki.apache.org/confluence/display/SPARK/Spark+Code+Style+Guide#SparkCodeStyleGuide-Imports\n",
    "commit": "5b93dc18d541b82394fca97743e96726698586b0",
    "createdAt": "2014-11-30T18:57:09Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// Created by Ilya Ganelin\n+\n+package org.apache.spark.util\n+\n+import java.util"
  }],
  "prId": 3518
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Extra blank line.\n",
    "commit": "5b93dc18d541b82394fca97743e96726698586b0",
    "createdAt": "2014-11-30T18:57:57Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// Created by Ilya Ganelin\n+\n+package org.apache.spark.util\n+\n+import java.util\n+import org.apache.spark.rdd.RDD\n+import scala.language.existentials\n+\n+/**\n+ * This class allows execution of a function on an RDD and all of its dependencies. This is \n+ * accomplished by walking the object graph linking these RDDs. This is useful for debugging \n+ * internal RDD references. See SPARK-3694.\n+ */\n+object RDDWalker {\n+  \n+  // Keep track of both the RDD and its depth in the traversal graph.\n+  val walkQueue = new util.ArrayDeque[(RDD[_], Int)]\n+  var visited = new util.HashSet[RDD[_]]\n+  \n+\n+  /**\n+   *"
  }],
  "prId": 3518
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "No; the RDD DAG will not contain directed cycles.\n",
    "commit": "5b93dc18d541b82394fca97743e96726698586b0",
    "createdAt": "2014-11-30T18:58:36Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// Created by Ilya Ganelin\n+\n+package org.apache.spark.util\n+\n+import java.util\n+import org.apache.spark.rdd.RDD\n+import scala.language.existentials\n+\n+/**\n+ * This class allows execution of a function on an RDD and all of its dependencies. This is \n+ * accomplished by walking the object graph linking these RDDs. This is useful for debugging \n+ * internal RDD references. See SPARK-3694.\n+ */\n+object RDDWalker {\n+  \n+  // Keep track of both the RDD and its depth in the traversal graph.\n+  val walkQueue = new util.ArrayDeque[(RDD[_], Int)]\n+  var visited = new util.HashSet[RDD[_]]\n+  \n+\n+  /**\n+   *\n+   * Execute the passed function on the underlying RDD\n+   * @param rddToWalk - The RDD to traverse along with its dependencies\n+   * @param func - The function to execute on each node. Returns a string \n+   * @return Array[String] - An array of results generated by the traversal function\n+   * TODO Can there be cycles in RDD dependencies?"
  }],
  "prId": 3518
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "The scaladoc says that this returns an `Array[String]` but this actually returns a `util.ArrayList`; can you clean this up so that the method signature doesn't expose the concrete class of the collection type that it returns?\n",
    "commit": "5b93dc18d541b82394fca97743e96726698586b0",
    "createdAt": "2014-11-30T19:00:33Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// Created by Ilya Ganelin\n+\n+package org.apache.spark.util\n+\n+import java.util\n+import org.apache.spark.rdd.RDD\n+import scala.language.existentials\n+\n+/**\n+ * This class allows execution of a function on an RDD and all of its dependencies. This is \n+ * accomplished by walking the object graph linking these RDDs. This is useful for debugging \n+ * internal RDD references. See SPARK-3694.\n+ */\n+object RDDWalker {\n+  \n+  // Keep track of both the RDD and its depth in the traversal graph.\n+  val walkQueue = new util.ArrayDeque[(RDD[_], Int)]\n+  var visited = new util.HashSet[RDD[_]]\n+  \n+\n+  /**\n+   *\n+   * Execute the passed function on the underlying RDD\n+   * @param rddToWalk - The RDD to traverse along with its dependencies\n+   * @param func - The function to execute on each node. Returns a string \n+   * @return Array[String] - An array of results generated by the traversal function\n+   * TODO Can there be cycles in RDD dependencies?\n+   */\n+  def walk(rddToWalk : RDD[_], func : (RDD[_])=>String): util.ArrayList[String] ={"
  }],
  "prId": 3518
}]