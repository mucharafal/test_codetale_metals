[{
  "comments": [{
    "author": {
      "login": "shivaram"
    },
    "body": "Are we sure SparkConf has been initialized successfully at this point ? Or to to put it another way, in which cases does this code path get called from ? Is this in the `spark-submit` case or the shell etc. ? \n",
    "commit": "666b60947b46ca013b9a0a7dd014f2e6580ceb50",
    "createdAt": "2016-10-24T16:44:37Z",
    "diffHunk": "@@ -110,6 +115,11 @@ private[spark] object RBackend extends Logging {\n       val boundPort = sparkRBackend.init()\n       val serverSocket = new ServerSocket(0, 1, InetAddress.getByName(\"localhost\"))\n       val listenPort = serverSocket.getLocalPort()\n+      // Connection timeout is set by socket client. To make it configurable we will pass the\n+      // timeout value to client inside the temp file\n+      val conf = new SparkConf()\n+      val backendConnectionTimeout = conf.getInt(",
    "line": 42
  }, {
    "author": {
      "login": "falaki"
    },
    "body": "This is for `spark-submit`. Basically the JVM starts before the R process. As a result the only way for R process to get these configuration parameters from the JVM. In this case, `RBackend` sets the environment variables based on configs.\n\nFor the other mode where JVM is started after the R process, we are sending this timeout value through the TCP connection.\n\nAt least that is my current understanding of how deploy modes work. In our production environment we launch the R process from the JVM.\n",
    "commit": "666b60947b46ca013b9a0a7dd014f2e6580ceb50",
    "createdAt": "2016-10-26T21:59:05Z",
    "diffHunk": "@@ -110,6 +115,11 @@ private[spark] object RBackend extends Logging {\n       val boundPort = sparkRBackend.init()\n       val serverSocket = new ServerSocket(0, 1, InetAddress.getByName(\"localhost\"))\n       val listenPort = serverSocket.getLocalPort()\n+      // Connection timeout is set by socket client. To make it configurable we will pass the\n+      // timeout value to client inside the temp file\n+      val conf = new SparkConf()\n+      val backendConnectionTimeout = conf.getInt(",
    "line": 42
  }],
  "prId": 15471
}]