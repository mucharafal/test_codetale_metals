[{
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "When reviewing this, compare against Py4J's GatewayServer.main() method: https://github.com/bartdag/py4j/blob/master/py4j-java/src/py4j/GatewayServer.java#L596\n",
    "commit": "6a7740b23ecaa20dcb7e59f9468bfb24a6a224ed",
    "createdAt": "2015-02-14T05:05:54Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.python\n+\n+import java.io.DataOutputStream\n+import java.net.Socket\n+\n+import py4j.GatewayServer\n+\n+/**\n+ * Process that starts a Py4J GatewayServer on an ephemeral port and communicates the bound port\n+ * back to its caller via a callback port specified by the caller.\n+ *\n+ * This process is launched (via SparkSubmit) by the PySpark driver (see java_gateway.py).\n+ */\n+private[spark] object PythonGatewayServer {"
  }],
  "prId": 4603
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Initially, I wasn't sure whether we wanted to add a dependency on Spark's `Logging` trait here, since I was worried that having logging initialization performed here might cause problems, but on reflection I don't think that's an issue, so I'll re-work this to do proper logging.\n",
    "commit": "6a7740b23ecaa20dcb7e59f9468bfb24a6a224ed",
    "createdAt": "2015-02-14T05:14:08Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.python\n+\n+import java.io.DataOutputStream\n+import java.net.Socket\n+\n+import py4j.GatewayServer\n+\n+/**\n+ * Process that starts a Py4J GatewayServer on an ephemeral port and communicates the bound port\n+ * back to its caller via a callback port specified by the caller.\n+ *\n+ * This process is launched (via SparkSubmit) by the PySpark driver (see java_gateway.py).\n+ */\n+private[spark] object PythonGatewayServer {\n+  def main(args: Array[String]): Unit = {\n+    try {\n+      // Start a GatewayServer on an ephemeral port\n+      val gatewayServer: GatewayServer = new GatewayServer(null, 0)\n+      gatewayServer.start()\n+      val boundPort: Int = gatewayServer.getListeningPort\n+\n+      // Communicate the bound port back to the caller via the caller-specified callback port\n+      val callbackHost = sys.env(\"PYSPARK_DRIVER_CALLBACK_HOST\")\n+      val callbackPort = sys.env(\"PYSPARK_DRIVER_CALLBACK_PORT\").toInt\n+      val callbackSocket = new Socket(callbackHost, callbackPort)\n+      val dos = new DataOutputStream(callbackSocket.getOutputStream)\n+      dos.writeInt(boundPort)\n+      dos.close()\n+      callbackSocket.close()\n+\n+      // Exit on EOF or broken pipe to ensure that this process dies when the Python driver dies:\n+      while (System.in.read() != -1) {\n+        // Do nothing\n+      }\n+      System.exit(0)\n+    } catch {\n+      case e: Exception =>\n+        try {\n+          throw e"
  }],
  "prId": 4603
}, {
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "boundPort could be -1, if failed to bind. \n",
    "commit": "6a7740b23ecaa20dcb7e59f9468bfb24a6a224ed",
    "createdAt": "2015-02-14T17:04:22Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.python\n+\n+import java.io.DataOutputStream\n+import java.net.Socket\n+\n+import py4j.GatewayServer\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * Process that starts a Py4J GatewayServer on an ephemeral port and communicates the bound port\n+ * back to its caller via a callback port specified by the caller.\n+ *\n+ * This process is launched (via SparkSubmit) by the PySpark driver (see java_gateway.py).\n+ */\n+private[spark] object PythonGatewayServer extends Logging {\n+  def main(args: Array[String]): Unit = Utils.tryOrExit {\n+    // Start a GatewayServer on an ephemeral port\n+    val gatewayServer: GatewayServer = new GatewayServer(null, 0)\n+    gatewayServer.start()\n+    val boundPort: Int = gatewayServer.getListeningPort",
    "line": 39
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "I've added error-checking for this case.\n",
    "commit": "6a7740b23ecaa20dcb7e59f9468bfb24a6a224ed",
    "createdAt": "2015-02-16T00:23:00Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.python\n+\n+import java.io.DataOutputStream\n+import java.net.Socket\n+\n+import py4j.GatewayServer\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * Process that starts a Py4J GatewayServer on an ephemeral port and communicates the bound port\n+ * back to its caller via a callback port specified by the caller.\n+ *\n+ * This process is launched (via SparkSubmit) by the PySpark driver (see java_gateway.py).\n+ */\n+private[spark] object PythonGatewayServer extends Logging {\n+  def main(args: Array[String]): Unit = Utils.tryOrExit {\n+    // Start a GatewayServer on an ephemeral port\n+    val gatewayServer: GatewayServer = new GatewayServer(null, 0)\n+    gatewayServer.start()\n+    val boundPort: Int = gatewayServer.getListeningPort",
    "line": 39
  }],
  "prId": 4603
}]