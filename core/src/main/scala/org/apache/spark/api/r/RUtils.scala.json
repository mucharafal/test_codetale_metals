[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "remove `{ }`\n",
    "commit": "ca63c8644dd430c6373937bf6a79d4dc9d756140",
    "createdAt": "2015-06-30T02:59:24Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.r\n+\n+import java.io.{File}"
  }, {
    "author": {
      "login": "sun-rui"
    },
    "body": "fixed\n",
    "commit": "ca63c8644dd430c6373937bf6a79d4dc9d756140",
    "createdAt": "2015-06-30T04:18:49Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.r\n+\n+import java.io.{File}"
  }],
  "prId": 6743
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "I would just pass in an extra parameter `master: String` into this method instead of reading from system properties and environment variables. We can get that from `RRDD#context`.\n",
    "commit": "ca63c8644dd430c6373937bf6a79d4dc9d756140",
    "createdAt": "2015-06-30T03:01:58Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.r\n+\n+import java.io.{File}\n+\n+import org.apache.spark.SparkException\n+\n+private[spark] object RUtils {\n+  /**\n+   * Get the SparkR package path in various deployment modes.\n+   */\n+  def sparkRPackagePath(driver: Boolean): String = {"
  }, {
    "author": {
      "login": "sun-rui"
    },
    "body": "This function can be called on both driver and worker side. RDD#context will throw an exception if called on worker side.\n",
    "commit": "ca63c8644dd430c6373937bf6a79d4dc9d756140",
    "createdAt": "2015-06-30T04:21:35Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.r\n+\n+import java.io.{File}\n+\n+import org.apache.spark.SparkException\n+\n+private[spark] object RUtils {\n+  /**\n+   * Get the SparkR package path in various deployment modes.\n+   */\n+  def sparkRPackagePath(driver: Boolean): String = {"
  }],
  "prId": 6743
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "this expression is really hard to read. What are you trying to say?\n",
    "commit": "ca63c8644dd430c6373937bf6a79d4dc9d756140",
    "createdAt": "2015-06-30T03:03:21Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.r\n+\n+import java.io.{File}\n+\n+import org.apache.spark.SparkException\n+\n+private[spark] object RUtils {\n+  /**\n+   * Get the SparkR package path in various deployment modes.\n+   */\n+  def sparkRPackagePath(driver: Boolean): String = {\n+    val yarnMode = sys.env.get(\"SPARK_YARN_MODE\")\n+    if (!yarnMode.isEmpty && yarnMode.get == \"true\" &&\n+        !(driver && System.getProperty(\"spark.master\") == \"yarn-client\")) {"
  }, {
    "author": {
      "login": "sun-rui"
    },
    "body": "The intention is that:\ndriver at yarn cluster  mode -> get sparkR package from current directory\ndriver at yarn client mode -> get sparkR package from $SPARK_HOME/R/lib\nworker at yarn cluster  mode -> get sparkR package from current directory\nworker at yarn client mode -> get sparkR package from current directory\n\nI can add comments to make it easy to be read.\n",
    "commit": "ca63c8644dd430c6373937bf6a79d4dc9d756140",
    "createdAt": "2015-06-30T04:25:04Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.r\n+\n+import java.io.{File}\n+\n+import org.apache.spark.SparkException\n+\n+private[spark] object RUtils {\n+  /**\n+   * Get the SparkR package path in various deployment modes.\n+   */\n+  def sparkRPackagePath(driver: Boolean): String = {\n+    val yarnMode = sys.env.get(\"SPARK_YARN_MODE\")\n+    if (!yarnMode.isEmpty && yarnMode.get == \"true\" &&\n+        !(driver && System.getProperty(\"spark.master\") == \"yarn-client\")) {"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "even with comments it's still hard to follow. I suggested an alternative below.\n",
    "commit": "ca63c8644dd430c6373937bf6a79d4dc9d756140",
    "createdAt": "2015-07-01T17:32:33Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.r\n+\n+import java.io.{File}\n+\n+import org.apache.spark.SparkException\n+\n+private[spark] object RUtils {\n+  /**\n+   * Get the SparkR package path in various deployment modes.\n+   */\n+  def sparkRPackagePath(driver: Boolean): String = {\n+    val yarnMode = sys.env.get(\"SPARK_YARN_MODE\")\n+    if (!yarnMode.isEmpty && yarnMode.get == \"true\" &&\n+        !(driver && System.getProperty(\"spark.master\") == \"yarn-client\")) {"
  }],
  "prId": 6743
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "IIUC, this case is for standalone mode and the driver on yarn-client mode. Is that correct?\n",
    "commit": "ca63c8644dd430c6373937bf6a79d4dc9d756140",
    "createdAt": "2015-06-30T03:08:32Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.r\n+\n+import java.io.{File}\n+\n+import org.apache.spark.SparkException\n+\n+private[spark] object RUtils {\n+  /**\n+   * Get the SparkR package path in various deployment modes.\n+   */\n+  def sparkRPackagePath(driver: Boolean): String = {\n+    val yarnMode = sys.env.get(\"SPARK_YARN_MODE\")\n+    if (!yarnMode.isEmpty && yarnMode.get == \"true\" &&\n+        !(driver && System.getProperty(\"spark.master\") == \"yarn-client\")) {\n+      // The SparkR package distributed as an archive resource should be pointed to\n+      // by a symbol link \"sparkr\" in the current directory.\n+      new File(\"sparkr\").getAbsolutePath\n+    } else {\n+      // TBD: add support for MESOS"
  }, {
    "author": {
      "login": "sun-rui"
    },
    "body": "correct:)\n",
    "commit": "ca63c8644dd430c6373937bf6a79d4dc9d756140",
    "createdAt": "2015-06-30T04:28:56Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.r\n+\n+import java.io.{File}\n+\n+import org.apache.spark.SparkException\n+\n+private[spark] object RUtils {\n+  /**\n+   * Get the SparkR package path in various deployment modes.\n+   */\n+  def sparkRPackagePath(driver: Boolean): String = {\n+    val yarnMode = sys.env.get(\"SPARK_YARN_MODE\")\n+    if (!yarnMode.isEmpty && yarnMode.get == \"true\" &&\n+        !(driver && System.getProperty(\"spark.master\") == \"yarn-client\")) {\n+      // The SparkR package distributed as an archive resource should be pointed to\n+      // by a symbol link \"sparkr\" in the current directory.\n+      new File(\"sparkr\").getAbsolutePath\n+    } else {\n+      // TBD: add support for MESOS"
  }],
  "prId": 6743
}, {
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "doesn't seem like `localSparkRPackagePath` will ever return empty because of this `map` call?\n\n```\nsparkHome.map(\n      Seq(_, \"R\", \"lib\").mkString(File.separator)\n    )\n```\n",
    "commit": "ca63c8644dd430c6373937bf6a79d4dc9d756140",
    "createdAt": "2015-07-01T07:30:26Z",
    "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.r\n+\n+import java.io.File\n+\n+import org.apache.spark.SparkException\n+\n+private[spark] object RUtils {\n+  /**\n+   * Get the SparkR package path in the local spark distribution.\n+   */\n+  def localSparkRPackagePath: Option[String] = {\n+    val sparkHome = sys.env.get(\"SPARK_HOME\")\n+    sparkHome.map(\n+      Seq(_, \"R\", \"lib\").mkString(File.separator)\n+    )\n+  }\n+\n+  /**\n+   * Get the SparkR package path in various deployment modes.\n+   */\n+  def sparkRPackagePath(driver: Boolean): String = {\n+    val yarnMode = sys.env.get(\"SPARK_YARN_MODE\")\n+    if (!yarnMode.isEmpty && yarnMode.get == \"true\" &&\n+        !(driver && System.getProperty(\"spark.master\") == \"yarn-client\")) {\n+      // For workers in YARN modes and driver in yarn cluster mode,\n+      // the SparkR package distributed as an archive resource should be pointed to\n+      // by a symbol link \"sparkr\" in the current directory.\n+      new File(\"sparkr\").getAbsolutePath\n+    } else {\n+      // TBD: add support for MESOS\n+      val rPackagePath = localSparkRPackagePath"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "it will be empty if `SPARK_HOME` is not set right? This is an option map.\n",
    "commit": "ca63c8644dd430c6373937bf6a79d4dc9d756140",
    "createdAt": "2015-07-01T17:04:06Z",
    "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.r\n+\n+import java.io.File\n+\n+import org.apache.spark.SparkException\n+\n+private[spark] object RUtils {\n+  /**\n+   * Get the SparkR package path in the local spark distribution.\n+   */\n+  def localSparkRPackagePath: Option[String] = {\n+    val sparkHome = sys.env.get(\"SPARK_HOME\")\n+    sparkHome.map(\n+      Seq(_, \"R\", \"lib\").mkString(File.separator)\n+    )\n+  }\n+\n+  /**\n+   * Get the SparkR package path in various deployment modes.\n+   */\n+  def sparkRPackagePath(driver: Boolean): String = {\n+    val yarnMode = sys.env.get(\"SPARK_YARN_MODE\")\n+    if (!yarnMode.isEmpty && yarnMode.get == \"true\" &&\n+        !(driver && System.getProperty(\"spark.master\") == \"yarn-client\")) {\n+      // For workers in YARN modes and driver in yarn cluster mode,\n+      // the SparkR package distributed as an archive resource should be pointed to\n+      // by a symbol link \"sparkr\" in the current directory.\n+      new File(\"sparkr\").getAbsolutePath\n+    } else {\n+      // TBD: add support for MESOS\n+      val rPackagePath = localSparkRPackagePath"
  }, {
    "author": {
      "login": "sun-rui"
    },
    "body": "@felixcheung, sys.env.get() returns Option[String], Option[T].map() applies to the Option's value if the Option is nonempty.\n",
    "commit": "ca63c8644dd430c6373937bf6a79d4dc9d756140",
    "createdAt": "2015-07-02T00:10:41Z",
    "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.r\n+\n+import java.io.File\n+\n+import org.apache.spark.SparkException\n+\n+private[spark] object RUtils {\n+  /**\n+   * Get the SparkR package path in the local spark distribution.\n+   */\n+  def localSparkRPackagePath: Option[String] = {\n+    val sparkHome = sys.env.get(\"SPARK_HOME\")\n+    sparkHome.map(\n+      Seq(_, \"R\", \"lib\").mkString(File.separator)\n+    )\n+  }\n+\n+  /**\n+   * Get the SparkR package path in various deployment modes.\n+   */\n+  def sparkRPackagePath(driver: Boolean): String = {\n+    val yarnMode = sys.env.get(\"SPARK_YARN_MODE\")\n+    if (!yarnMode.isEmpty && yarnMode.get == \"true\" &&\n+        !(driver && System.getProperty(\"spark.master\") == \"yarn-client\")) {\n+      // For workers in YARN modes and driver in yarn cluster mode,\n+      // the SparkR package distributed as an archive resource should be pointed to\n+      // by a symbol link \"sparkr\" in the current directory.\n+      new File(\"sparkr\").getAbsolutePath\n+    } else {\n+      // TBD: add support for MESOS\n+      val rPackagePath = localSparkRPackagePath"
  }],
  "prId": 6743
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "you can just rewrite this else case as\n\n```\nlocalSparkRPackagePath.getOrElse {\n  throw new SparkException(\"SPARK_HOME not set...\")\n}\n```\n",
    "commit": "ca63c8644dd430c6373937bf6a79d4dc9d756140",
    "createdAt": "2015-07-01T17:04:43Z",
    "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.r\n+\n+import java.io.File\n+\n+import org.apache.spark.SparkException\n+\n+private[spark] object RUtils {\n+  /**\n+   * Get the SparkR package path in the local spark distribution.\n+   */\n+  def localSparkRPackagePath: Option[String] = {\n+    val sparkHome = sys.env.get(\"SPARK_HOME\")\n+    sparkHome.map(\n+      Seq(_, \"R\", \"lib\").mkString(File.separator)\n+    )\n+  }\n+\n+  /**\n+   * Get the SparkR package path in various deployment modes.\n+   */\n+  def sparkRPackagePath(driver: Boolean): String = {\n+    val yarnMode = sys.env.get(\"SPARK_YARN_MODE\")\n+    if (!yarnMode.isEmpty && yarnMode.get == \"true\" &&\n+        !(driver && System.getProperty(\"spark.master\") == \"yarn-client\")) {\n+      // For workers in YARN modes and driver in yarn cluster mode,\n+      // the SparkR package distributed as an archive resource should be pointed to\n+      // by a symbol link \"sparkr\" in the current directory.\n+      new File(\"sparkr\").getAbsolutePath\n+    } else {\n+      // TBD: add support for MESOS\n+      val rPackagePath = localSparkRPackagePath\n+      if (rPackagePath.isEmpty) {\n+        throw new SparkException(\"SPARK_HOME not set. Can't locate SparkR package.\")\n+      }\n+      rPackagePath.get"
  }, {
    "author": {
      "login": "sun-rui"
    },
    "body": "done\n",
    "commit": "ca63c8644dd430c6373937bf6a79d4dc9d756140",
    "createdAt": "2015-07-02T00:29:34Z",
    "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.r\n+\n+import java.io.File\n+\n+import org.apache.spark.SparkException\n+\n+private[spark] object RUtils {\n+  /**\n+   * Get the SparkR package path in the local spark distribution.\n+   */\n+  def localSparkRPackagePath: Option[String] = {\n+    val sparkHome = sys.env.get(\"SPARK_HOME\")\n+    sparkHome.map(\n+      Seq(_, \"R\", \"lib\").mkString(File.separator)\n+    )\n+  }\n+\n+  /**\n+   * Get the SparkR package path in various deployment modes.\n+   */\n+  def sparkRPackagePath(driver: Boolean): String = {\n+    val yarnMode = sys.env.get(\"SPARK_YARN_MODE\")\n+    if (!yarnMode.isEmpty && yarnMode.get == \"true\" &&\n+        !(driver && System.getProperty(\"spark.master\") == \"yarn-client\")) {\n+      // For workers in YARN modes and driver in yarn cluster mode,\n+      // the SparkR package distributed as an archive resource should be pointed to\n+      // by a symbol link \"sparkr\" in the current directory.\n+      new File(\"sparkr\").getAbsolutePath\n+    } else {\n+      // TBD: add support for MESOS\n+      val rPackagePath = localSparkRPackagePath\n+      if (rPackagePath.isEmpty) {\n+        throw new SparkException(\"SPARK_HOME not set. Can't locate SparkR package.\")\n+      }\n+      rPackagePath.get"
  }],
  "prId": 6743
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "I think we should rewrite this method in the following way. Right now it reads the deploy mode from `spark.master`, which happens to work for YARN but isn't really the right way to do it. Instead, we should pass the deploy mode from `SparkSubmit.scala` as `spark.submit.deployMode` or something. Then this method would look like\n\n```\n/**\n * Get the SparkR package path in various deployment modes.\n * This assumes that system properties `spark.master` and `spark.submit.deployMode`\n * and environment variable `SPARK_HOME` are set.\n */\ndef sparkRPackagePath(driver: Boolean): String = {\n  val master = sys.props(\"spark.master\")\n  val deployMode = sys.props(\"spark.submit.deployMode\")\n  val isYarnCluster = master.contains(\"yarn\") && deployMode == \"cluster\"\n  val isYarnClient = master.contains(\"yarn\") && deployMode == \"client\"\n\n  // In YARN mode, the SparkR package is distributed as an archive symbolically\n  // linked to the \"sparkr\" file in the current directory. Note that this does not apply\n  // to the driver in client mode because it is run outside of the cluster.\n  if (isYarnCluster || (isYarnClient && !driver)) {\n    new File(\"sparkr\").getAbsolutePath\n  } else {\n    // Otherwise, assume the package is local\n    // TODO: support this for Mesos\n    localSparkRPackagePath.getOrElse {\n      throw new SparkException(\"SPARK_HOME not set. Can't locate SparkR package.\")\n    }\n  }\n}\n```\n",
    "commit": "ca63c8644dd430c6373937bf6a79d4dc9d756140",
    "createdAt": "2015-07-01T17:31:47Z",
    "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.api.r\n+\n+import java.io.File\n+\n+import org.apache.spark.SparkException\n+\n+private[spark] object RUtils {\n+  /**\n+   * Get the SparkR package path in the local spark distribution.\n+   */\n+  def localSparkRPackagePath: Option[String] = {\n+    val sparkHome = sys.env.get(\"SPARK_HOME\")\n+    sparkHome.map(\n+      Seq(_, \"R\", \"lib\").mkString(File.separator)\n+    )\n+  }\n+\n+  /**\n+   * Get the SparkR package path in various deployment modes.\n+   */\n+  def sparkRPackagePath(driver: Boolean): String = {\n+    val yarnMode = sys.env.get(\"SPARK_YARN_MODE\")\n+    if (!yarnMode.isEmpty && yarnMode.get == \"true\" &&\n+        !(driver && System.getProperty(\"spark.master\") == \"yarn-client\")) {\n+      // For workers in YARN modes and driver in yarn cluster mode,\n+      // the SparkR package distributed as an archive resource should be pointed to\n+      // by a symbol link \"sparkr\" in the current directory.\n+      new File(\"sparkr\").getAbsolutePath"
  }],
  "prId": 6743
}]