[{
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "I think that this, and SerilaizableWritable more generally, may be a huge source of perf. bottlenecks for short tasks.  A common use of SerializableWritable is in serializing Hadoop Configurations, but it seems kind of crazy to create and discard a new Configuration in order to be able to deserialize the driver-provided conf.  Maybe we can make a substitute for SerializableWritable which only deals with Configuration subclasses and just calls `writeFields()` and `readFields()` directly.  This would sidestep a lot of the performance penalties involved in creating Configuration objects and having them spend tons of time loading defaults.\n",
    "commit": "46dd005b1515f33ae79db0403744fc8fd94a4f5a",
    "createdAt": "2015-06-05T06:23:56Z",
    "diffHunk": "@@ -41,7 +40,6 @@ class SerializableWritable[T <: Writable](@transient var t: T) extends Serializa\n   private def readObject(in: ObjectInputStream): Unit = Utils.tryOrIOException {\n     in.defaultReadObject()\n     val ow = new ObjectWritable()\n-    ow.setConf(new Configuration())",
    "line": 4
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "Apparently other folks have noticed Configuration's expensive instantiation costs, too: https://issues.apache.org/jira/browse/MAPREDUCE-5399\n",
    "commit": "46dd005b1515f33ae79db0403744fc8fd94a4f5a",
    "createdAt": "2015-06-05T07:11:59Z",
    "diffHunk": "@@ -41,7 +40,6 @@ class SerializableWritable[T <: Writable](@transient var t: T) extends Serializa\n   private def readObject(in: ObjectInputStream): Unit = Utils.tryOrIOException {\n     in.defaultReadObject()\n     val ow = new ObjectWritable()\n-    ow.setConf(new Configuration())",
    "line": 4
  }],
  "prId": 6663
}]