[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: ordering, should come before previous line.\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-09-28T20:06:03Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import java.security.NoSuchAlgorithmException\n+import javax.crypto.{KeyGenerator, SecretKey}\n+\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.crypto.CommonConfigurationKeys._\n+import org.apache.spark.SparkConf"
  }, {
    "author": {
      "login": "winningsix"
    },
    "body": "Just wonder why this line should come first.\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-09-30T01:11:00Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import java.security.NoSuchAlgorithmException\n+import javax.crypto.{KeyGenerator, SecretKey}\n+\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.crypto.CommonConfigurationKeys._\n+import org.apache.spark.SparkConf"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Because `org.apache.spark` is a \"parent\" of `org.apache.spark.crypto`.\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-09-30T12:29:22Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import java.security.NoSuchAlgorithmException\n+import javax.crypto.{KeyGenerator, SecretKey}\n+\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.crypto.CommonConfigurationKeys._\n+import org.apache.spark.SparkConf"
  }],
  "prId": 8880
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Feels a little overkill to have a class dedicated to holding a single boolean value. Is there more config information that you can put here, maybe consolidating some of the other config stuff in this patch?\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-09-28T20:09:32Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import java.security.NoSuchAlgorithmException\n+import javax.crypto.{KeyGenerator, SecretKey}\n+\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.crypto.CommonConfigurationKeys._\n+import org.apache.spark.SparkConf\n+\n+/**\n+ * CryptoConf is a class for Crypto configuration\n+ */\n+private[spark] case class CryptoConf(enabled: Boolean = false) {"
  }],
  "prId": 8880
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "This feels like something that would need a config option?\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-09-28T20:10:11Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import java.security.NoSuchAlgorithmException\n+import javax.crypto.{KeyGenerator, SecretKey}\n+\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.crypto.CommonConfigurationKeys._\n+import org.apache.spark.SparkConf\n+\n+/**\n+ * CryptoConf is a class for Crypto configuration\n+ */\n+private[spark] case class CryptoConf(enabled: Boolean = false) {\n+\n+}\n+\n+private[spark] object CryptoConf {\n+  def parse(sparkConf: SparkConf): CryptoConf = {\n+    val enabled = if (sparkConf != null) {\n+      sparkConf.getBoolean(\"spark.encrypted.shuffle\", false)\n+    } else {\n+      false\n+    }\n+    new CryptoConf(enabled)\n+  }\n+\n+  def initSparkShuffleCredentials(conf: SparkConf, credentials: Credentials) {\n+    if (credentials.getSecretKey(SPARK_SHUFFLE_TOKEN) == null) {\n+      var keyGen: KeyGenerator = null\n+      try {\n+        val SHUFFLE_KEY_LENGTH: Int = 64"
  }],
  "prId": 8880
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Config option for this maybe?\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-09-28T20:10:23Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import java.security.NoSuchAlgorithmException\n+import javax.crypto.{KeyGenerator, SecretKey}\n+\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.crypto.CommonConfigurationKeys._\n+import org.apache.spark.SparkConf\n+\n+/**\n+ * CryptoConf is a class for Crypto configuration\n+ */\n+private[spark] case class CryptoConf(enabled: Boolean = false) {\n+\n+}\n+\n+private[spark] object CryptoConf {\n+  def parse(sparkConf: SparkConf): CryptoConf = {\n+    val enabled = if (sparkConf != null) {\n+      sparkConf.getBoolean(\"spark.encrypted.shuffle\", false)\n+    } else {\n+      false\n+    }\n+    new CryptoConf(enabled)\n+  }\n+\n+  def initSparkShuffleCredentials(conf: SparkConf, credentials: Credentials) {\n+    if (credentials.getSecretKey(SPARK_SHUFFLE_TOKEN) == null) {\n+      var keyGen: KeyGenerator = null\n+      try {\n+        val SHUFFLE_KEY_LENGTH: Int = 64\n+        var keyLen: Int = if (conf.getBoolean(SPARK_ENCRYPTED_INTERMEDIATE_DATA,\n+          DEFAULT_SPARK_ENCRYPTED_INTERMEDIATE_DATA) == true) {\n+          conf.getInt(SPARK_ENCRYPTED_INTERMEDIATE_DATA_KEY_SIZE_BITS,\n+            DEFAULT_SPARK_ENCRYPTED_INTERMEDIATE_DATA_KEY_SIZE_BITS)\n+        } else {\n+          SHUFFLE_KEY_LENGTH\n+        }\n+        val SHUFFLE_KEYGEN_ALGORITHM = \"HmacSHA1\";"
  }],
  "prId": 8880
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "It would be nice to at least stash the original exception as the cause of the one you're throwing. `RuntimeException` is also a very generic exception, it would be better to have a more specific one.\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-09-28T20:11:00Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import java.security.NoSuchAlgorithmException\n+import javax.crypto.{KeyGenerator, SecretKey}\n+\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.crypto.CommonConfigurationKeys._\n+import org.apache.spark.SparkConf\n+\n+/**\n+ * CryptoConf is a class for Crypto configuration\n+ */\n+private[spark] case class CryptoConf(enabled: Boolean = false) {\n+\n+}\n+\n+private[spark] object CryptoConf {\n+  def parse(sparkConf: SparkConf): CryptoConf = {\n+    val enabled = if (sparkConf != null) {\n+      sparkConf.getBoolean(\"spark.encrypted.shuffle\", false)\n+    } else {\n+      false\n+    }\n+    new CryptoConf(enabled)\n+  }\n+\n+  def initSparkShuffleCredentials(conf: SparkConf, credentials: Credentials) {\n+    if (credentials.getSecretKey(SPARK_SHUFFLE_TOKEN) == null) {\n+      var keyGen: KeyGenerator = null\n+      try {\n+        val SHUFFLE_KEY_LENGTH: Int = 64\n+        var keyLen: Int = if (conf.getBoolean(SPARK_ENCRYPTED_INTERMEDIATE_DATA,\n+          DEFAULT_SPARK_ENCRYPTED_INTERMEDIATE_DATA) == true) {\n+          conf.getInt(SPARK_ENCRYPTED_INTERMEDIATE_DATA_KEY_SIZE_BITS,\n+            DEFAULT_SPARK_ENCRYPTED_INTERMEDIATE_DATA_KEY_SIZE_BITS)\n+        } else {\n+          SHUFFLE_KEY_LENGTH\n+        }\n+        val SHUFFLE_KEYGEN_ALGORITHM = \"HmacSHA1\";\n+        keyGen = KeyGenerator.getInstance(SHUFFLE_KEYGEN_ALGORITHM)\n+        keyGen.init(keyLen)\n+      } catch {\n+        case e: NoSuchAlgorithmException => throw new RuntimeException(\"Error generating \" +"
  }],
  "prId": 8880
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "You don't need this variable. Also there's a constant in `CommonConfigurationKeys` with this same name, and it doesn't seem to be used anywhere.\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-10-08T23:13:51Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import java.security.NoSuchAlgorithmException\n+import javax.crypto.KeyGenerator\n+\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.crypto.CommonConfigurationKeys._\n+\n+/**\n+ * CryptoConf is a class for Crypto configuration\n+ */\n+private[spark] object CryptoConf {\n+  def isShuffleEncryted(sparkConf: SparkConf): Boolean = {\n+    if (sparkConf != null) {\n+      sparkConf.getBoolean(SPARK_ENCRYPTED_SHUFFLE, false)\n+    } else {\n+      false\n+    }\n+  }\n+\n+  def initSparkShuffleCredentials(conf: SparkConf, credentials: Credentials) {\n+    if (credentials.getSecretKey(SPARK_SHUFFLE_TOKEN) == null) {\n+      var keyGen: KeyGenerator = null\n+      try {\n+        val SHUFFLE_KEY_LENGTH = DEFAULT_SHUFFLE_KEY_LENGTH"
  }],
  "prId": 8880
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: normally we reserve capital letter names to actual constants (not local `val`s).\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-10-08T23:18:02Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import java.security.NoSuchAlgorithmException\n+import javax.crypto.KeyGenerator\n+\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.crypto.CommonConfigurationKeys._\n+\n+/**\n+ * CryptoConf is a class for Crypto configuration\n+ */\n+private[spark] object CryptoConf {\n+  def isShuffleEncryted(sparkConf: SparkConf): Boolean = {\n+    if (sparkConf != null) {\n+      sparkConf.getBoolean(SPARK_ENCRYPTED_SHUFFLE, false)\n+    } else {\n+      false\n+    }\n+  }\n+\n+  def initSparkShuffleCredentials(conf: SparkConf, credentials: Credentials) {\n+    if (credentials.getSecretKey(SPARK_SHUFFLE_TOKEN) == null) {\n+      var keyGen: KeyGenerator = null\n+      try {\n+        val SHUFFLE_KEY_LENGTH = DEFAULT_SHUFFLE_KEY_LENGTH\n+        val keyLen = if (conf.getBoolean(SPARK_ENCRYPTED_INTERMEDIATE_DATA,\n+          DEFAULT_SPARK_ENCRYPTED_INTERMEDIATE_DATA) == true) {\n+          conf.getInt(SPARK_ENCRYPTED_INTERMEDIATE_DATA_KEY_SIZE_BITS,\n+            DEFAULT_SPARK_ENCRYPTED_INTERMEDIATE_DATA_KEY_SIZE_BITS)\n+        } else {\n+          SHUFFLE_KEY_LENGTH\n+        }\n+        val SHUFFLE_KEYGEN_ALGORITHM = conf.get(SPARK_SHUFFLE_KEYGEN_ALGORITHM,"
  }],
  "prId": 8880
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Why throw a new exception? You're losing information (the original stack trace) and not adding any useful information.\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-10-08T23:18:49Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import java.security.NoSuchAlgorithmException\n+import javax.crypto.KeyGenerator\n+\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.crypto.CommonConfigurationKeys._\n+\n+/**\n+ * CryptoConf is a class for Crypto configuration\n+ */\n+private[spark] object CryptoConf {\n+  def isShuffleEncryted(sparkConf: SparkConf): Boolean = {\n+    if (sparkConf != null) {\n+      sparkConf.getBoolean(SPARK_ENCRYPTED_SHUFFLE, false)\n+    } else {\n+      false\n+    }\n+  }\n+\n+  def initSparkShuffleCredentials(conf: SparkConf, credentials: Credentials) {\n+    if (credentials.getSecretKey(SPARK_SHUFFLE_TOKEN) == null) {\n+      var keyGen: KeyGenerator = null\n+      try {\n+        val SHUFFLE_KEY_LENGTH = DEFAULT_SHUFFLE_KEY_LENGTH\n+        val keyLen = if (conf.getBoolean(SPARK_ENCRYPTED_INTERMEDIATE_DATA,\n+          DEFAULT_SPARK_ENCRYPTED_INTERMEDIATE_DATA) == true) {\n+          conf.getInt(SPARK_ENCRYPTED_INTERMEDIATE_DATA_KEY_SIZE_BITS,\n+            DEFAULT_SPARK_ENCRYPTED_INTERMEDIATE_DATA_KEY_SIZE_BITS)\n+        } else {\n+          SHUFFLE_KEY_LENGTH\n+        }\n+        val SHUFFLE_KEYGEN_ALGORITHM = conf.get(SPARK_SHUFFLE_KEYGEN_ALGORITHM,\n+          DEFAULT_SPARK_SHUFFLE_KEYGEN_ALGORITHM)\n+        keyGen = KeyGenerator.getInstance(SHUFFLE_KEYGEN_ALGORITHM)\n+        keyGen.init(keyLen)\n+      } catch {\n+        case e: NoSuchAlgorithmException => throw new NoSuchAlgorithmException(\"Error generating \" +"
  }],
  "prId": 8880
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "I see you're calling this method both in `Client` and in `ApplicationMaster`. Is that necessary? Jobs will always go through `Client`, nobody runs the `ApplicationMaster` directly.\n\nIf the two calls are not necessary, you could remove the check for whether the key has already been added to the credentials object.\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-10-08T23:22:41Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import java.security.NoSuchAlgorithmException\n+import javax.crypto.KeyGenerator\n+\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.crypto.CommonConfigurationKeys._\n+\n+/**\n+ * CryptoConf is a class for Crypto configuration\n+ */\n+private[spark] object CryptoConf {\n+  def isShuffleEncryted(sparkConf: SparkConf): Boolean = {\n+    if (sparkConf != null) {\n+      sparkConf.getBoolean(SPARK_ENCRYPTED_SHUFFLE, false)\n+    } else {\n+      false\n+    }\n+  }\n+\n+  def initSparkShuffleCredentials(conf: SparkConf, credentials: Credentials) {"
  }, {
    "author": {
      "login": "winningsix"
    },
    "body": "Is this case possible that user is using the old client to submit a new job to a cluster with encryption enabled in Spark? I see hadoop mr is initializing the credentials on both sides. If you think no need for two calls, we can just add this method in server side which can guarantee encryption is working.\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-10-09T07:55:12Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import java.security.NoSuchAlgorithmException\n+import javax.crypto.KeyGenerator\n+\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.crypto.CommonConfigurationKeys._\n+\n+/**\n+ * CryptoConf is a class for Crypto configuration\n+ */\n+private[spark] object CryptoConf {\n+  def isShuffleEncryted(sparkConf: SparkConf): Boolean = {\n+    if (sparkConf != null) {\n+      sparkConf.getBoolean(SPARK_ENCRYPTED_SHUFFLE, false)\n+    } else {\n+      false\n+    }\n+  }\n+\n+  def initSparkShuffleCredentials(conf: SparkConf, credentials: Credentials) {"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "By \"old client\" I assume you mean not using spark-submit? That would mean calling the `Client` class directly, which still would go through the code you're adding. So no, I don't believe the two calls are necessary.\n\nWhere the call is made doesn't really matter to me as long as it works both for client and cluster modes (which is why I think it should be in `Client`).\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-10-09T16:47:49Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import java.security.NoSuchAlgorithmException\n+import javax.crypto.KeyGenerator\n+\n+import org.apache.hadoop.security.Credentials\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.crypto.CommonConfigurationKeys._\n+\n+/**\n+ * CryptoConf is a class for Crypto configuration\n+ */\n+private[spark] object CryptoConf {\n+  def isShuffleEncryted(sparkConf: SparkConf): Boolean = {\n+    if (sparkConf != null) {\n+      sparkConf.getBoolean(SPARK_ENCRYPTED_SHUFFLE, false)\n+    } else {\n+      false\n+    }\n+  }\n+\n+  def initSparkShuffleCredentials(conf: SparkConf, credentials: Credentials) {"
  }],
  "prId": 8880
}]