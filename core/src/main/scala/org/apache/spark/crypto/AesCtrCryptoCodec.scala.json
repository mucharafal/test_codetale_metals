[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "no need to import `Byte`\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-09-28T19:41:42Z",
    "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import com.google.common.base.Preconditions\n+import scala.Byte"
  }],
  "prId": 8880
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "All these classes should be `private[spark]`, at least.\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-09-28T19:42:10Z",
    "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import com.google.common.base.Preconditions\n+import scala.Byte\n+\n+/**\n+ * For AES, the algorithm block is fixed size of 128 bits.\n+ * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n+ */\n+abstract class AesCtrCryptoCodec extends CryptoCodec {"
  }],
  "prId": 8880
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: don't use capital letters only for parameter names (`IV`).\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-09-28T19:42:49Z",
    "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import com.google.common.base.Preconditions\n+import scala.Byte\n+\n+/**\n+ * For AES, the algorithm block is fixed size of 128 bits.\n+ * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n+ */\n+abstract class AesCtrCryptoCodec extends CryptoCodec {\n+  val CTR_OFFSET: Integer = 8\n+  val SUITE: CipherSuite = AES_CTR_NOPADDING\n+  val AES_BLOCK_SIZE: Integer = SUITE.algoBlockSize\n+\n+  override def getCipherSuite(): CipherSuite = {\n+    SUITE\n+  }\n+\n+  override def calculateIV(initIV: Array[Byte], counterVal: Long, IV: Array[Byte]): Unit = {"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Can you add a scaladoc describing what this method is doing?\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-09-28T19:43:31Z",
    "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import com.google.common.base.Preconditions\n+import scala.Byte\n+\n+/**\n+ * For AES, the algorithm block is fixed size of 128 bits.\n+ * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n+ */\n+abstract class AesCtrCryptoCodec extends CryptoCodec {\n+  val CTR_OFFSET: Integer = 8\n+  val SUITE: CipherSuite = AES_CTR_NOPADDING\n+  val AES_BLOCK_SIZE: Integer = SUITE.algoBlockSize\n+\n+  override def getCipherSuite(): CipherSuite = {\n+    SUITE\n+  }\n+\n+  override def calculateIV(initIV: Array[Byte], counterVal: Long, IV: Array[Byte]): Unit = {"
  }],
  "prId": 8880
}]