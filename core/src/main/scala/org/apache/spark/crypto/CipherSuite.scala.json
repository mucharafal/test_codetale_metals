[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "You could use Guava's `Objects.toStringHelper()`.\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-09-28T19:45:09Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+/**\n+ * Defines properties of a CipherSuite. Modeled after the ciphers in\n+ * {@link javax.crypto.Cipher}.\n+ * @param name    name of cipher suite, as in {@link javax.crypto.Cipher}\n+ * @param algoBlockSize size of an algorithm block in bytes\n+ */\n+case class CipherSuite(name: String, algoBlockSize: Int) {\n+  var unknownValue: Integer = null\n+\n+  def setUnknownValue(unknown: Integer) {\n+    this.unknownValue = unknown\n+  }\n+\n+  def getUnknownValue(): Integer = unknownValue\n+\n+\n+  override  def toString(): String = {\n+    var builder: StringBuilder = new StringBuilder(\"{\")"
  }],
  "prId": 8880
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: no need to specify the variable's type in these vases. This should also be a `val`.\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-09-28T19:45:55Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+/**\n+ * Defines properties of a CipherSuite. Modeled after the ciphers in\n+ * {@link javax.crypto.Cipher}.\n+ * @param name    name of cipher suite, as in {@link javax.crypto.Cipher}\n+ * @param algoBlockSize size of an algorithm block in bytes\n+ */\n+case class CipherSuite(name: String, algoBlockSize: Int) {\n+  var unknownValue: Integer = null\n+\n+  def setUnknownValue(unknown: Integer) {\n+    this.unknownValue = unknown\n+  }\n+\n+  def getUnknownValue(): Integer = unknownValue\n+\n+\n+  override  def toString(): String = {\n+    var builder: StringBuilder = new StringBuilder(\"{\")\n+    builder.append(\"name: \" + name)\n+    builder.append(\", algorithmBlockSize: \" + algoBlockSize)\n+    if (unknownValue != null) {\n+      builder.append(\", unknownValue: \" + unknownValue)\n+    }\n+    builder.append(\"}\")\n+    builder.toString()\n+  }\n+\n+  /**\n+   * Returns suffix of cipher suite configuration.\n+   * @return String configuration suffix\n+   */\n+  def getConfigSuffix(): String = {\n+    val parts = name.split(\"/\")\n+    var suffix: StringBuilder = new StringBuilder()"
  }],
  "prId": 8880
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: `.foreach { part =>`\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-09-28T19:46:13Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+/**\n+ * Defines properties of a CipherSuite. Modeled after the ciphers in\n+ * {@link javax.crypto.Cipher}.\n+ * @param name    name of cipher suite, as in {@link javax.crypto.Cipher}\n+ * @param algoBlockSize size of an algorithm block in bytes\n+ */\n+case class CipherSuite(name: String, algoBlockSize: Int) {\n+  var unknownValue: Integer = null\n+\n+  def setUnknownValue(unknown: Integer) {\n+    this.unknownValue = unknown\n+  }\n+\n+  def getUnknownValue(): Integer = unknownValue\n+\n+\n+  override  def toString(): String = {\n+    var builder: StringBuilder = new StringBuilder(\"{\")\n+    builder.append(\"name: \" + name)\n+    builder.append(\", algorithmBlockSize: \" + algoBlockSize)\n+    if (unknownValue != null) {\n+      builder.append(\", unknownValue: \" + unknownValue)\n+    }\n+    builder.append(\"}\")\n+    builder.toString()\n+  }\n+\n+  /**\n+   * Returns suffix of cipher suite configuration.\n+   * @return String configuration suffix\n+   */\n+  def getConfigSuffix(): String = {\n+    val parts = name.split(\"/\")\n+    var suffix: StringBuilder = new StringBuilder()\n+    parts.foreach(part =>"
  }],
  "prId": 8880
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "This whole method can be written as:\n\n```\n\".\" + name.split(\"/\").map(_.toLowerCase()).mkString(\".\")\n```\n\n(Assuming `name` cannot be empty.)\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-09-28T19:48:05Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+/**\n+ * Defines properties of a CipherSuite. Modeled after the ciphers in\n+ * {@link javax.crypto.Cipher}.\n+ * @param name    name of cipher suite, as in {@link javax.crypto.Cipher}\n+ * @param algoBlockSize size of an algorithm block in bytes\n+ */\n+case class CipherSuite(name: String, algoBlockSize: Int) {\n+  var unknownValue: Integer = null\n+\n+  def setUnknownValue(unknown: Integer) {\n+    this.unknownValue = unknown\n+  }\n+\n+  def getUnknownValue(): Integer = unknownValue\n+\n+\n+  override  def toString(): String = {\n+    var builder: StringBuilder = new StringBuilder(\"{\")\n+    builder.append(\"name: \" + name)\n+    builder.append(\", algorithmBlockSize: \" + algoBlockSize)\n+    if (unknownValue != null) {\n+      builder.append(\", unknownValue: \" + unknownValue)\n+    }\n+    builder.append(\"}\")\n+    builder.toString()\n+  }\n+\n+  /**\n+   * Returns suffix of cipher suite configuration.\n+   * @return String configuration suffix\n+   */\n+  def getConfigSuffix(): String = {\n+    val parts = name.split(\"/\")"
  }],
  "prId": 8880
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "use `name match { ... }` instead of cascading ifs. Also, if you call this method `apply`, you can just say `CipherSuite(\"foo\")` instead of `CipherSuite.convert(\"foo\")`.\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-09-28T19:51:21Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+/**\n+ * Defines properties of a CipherSuite. Modeled after the ciphers in\n+ * {@link javax.crypto.Cipher}.\n+ * @param name    name of cipher suite, as in {@link javax.crypto.Cipher}\n+ * @param algoBlockSize size of an algorithm block in bytes\n+ */\n+case class CipherSuite(name: String, algoBlockSize: Int) {\n+  var unknownValue: Integer = null\n+\n+  def setUnknownValue(unknown: Integer) {\n+    this.unknownValue = unknown\n+  }\n+\n+  def getUnknownValue(): Integer = unknownValue\n+\n+\n+  override  def toString(): String = {\n+    var builder: StringBuilder = new StringBuilder(\"{\")\n+    builder.append(\"name: \" + name)\n+    builder.append(\", algorithmBlockSize: \" + algoBlockSize)\n+    if (unknownValue != null) {\n+      builder.append(\", unknownValue: \" + unknownValue)\n+    }\n+    builder.append(\"}\")\n+    builder.toString()\n+  }\n+\n+  /**\n+   * Returns suffix of cipher suite configuration.\n+   * @return String configuration suffix\n+   */\n+  def getConfigSuffix(): String = {\n+    val parts = name.split(\"/\")\n+    var suffix: StringBuilder = new StringBuilder()\n+    parts.foreach(part =>\n+      suffix.append(\".\").append(part.toLowerCase())\n+    )\n+    suffix.toString()\n+  }\n+}\n+\n+\n+object UNKNOWN extends CipherSuite(\"Unknown\", 0)\n+\n+object AES_CTR_NOPADDING extends CipherSuite(\"AES/CTR/NoPadding\", 16)\n+\n+object CipherSuite {\n+  /**\n+   * Convert to CipherSuite from name, {@link #algoBlockSize} is fixed for\n+   * certain cipher suite, just need to compare the name.\n+   * @param name cipher suite name\n+   * @return CipherSuite cipher suite\n+   */\n+  def convert(name: String): CipherSuite = {\n+    if (name.equals(AES_CTR_NOPADDING.name)) {"
  }],
  "prId": 8880
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Hi @winningsix ,\n\nAs I mentioned before, you need to make _all_ the classes you're adding `private[spark]` (or more restricted, where possible). I don't believe any of these is meant to be a public API, right?\n\nYou can check the test report comment and see how they mention a bunch of new public classes being added; normally, that list should be empty.\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-10-08T22:46:58Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import com.google.common.base.Objects\n+\n+/**\n+ * Defines properties of a CipherSuite. Modeled after the ciphers in\n+ * {@link javax.crypto.Cipher}.\n+ * @param name    name of cipher suite, as in { @link javax.crypto.Cipher}\n+ * @param algoBlockSize size of an algorithm block in bytes\n+ */\n+case class CipherSuite(name: String, algoBlockSize: Int) {"
  }],
  "prId": 8880
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "I'd rather have these be declared as `val`s inside the `CipherSuite` object. Otherwise they're just hanging in the `org.apache.spark.crypto` package, without any context about what they are.\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-10-08T22:48:36Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import com.google.common.base.Objects\n+\n+/**\n+ * Defines properties of a CipherSuite. Modeled after the ciphers in\n+ * {@link javax.crypto.Cipher}.\n+ * @param name    name of cipher suite, as in { @link javax.crypto.Cipher}\n+ * @param algoBlockSize size of an algorithm block in bytes\n+ */\n+case class CipherSuite(name: String, algoBlockSize: Int) {\n+  var unknownValue: Integer = null\n+\n+  def setUnknownValue(unknown: Integer) {\n+    this.unknownValue = unknown\n+  }\n+\n+  def getUnknownValue(): Integer = unknownValue\n+\n+  override def toString(): String = {\n+    Objects.toStringHelper(this).add(\"name\", name).add(\"algoBlockSize\", algoBlockSize).toString\n+  }\n+\n+  /**\n+   * Returns suffix of cipher suite configuration.\n+   * @return String configuration suffix\n+   */\n+  def getConfigSuffix(): String = {\n+    \".\" + name.split(\"/\").map(_.toLowerCase()).mkString(\".\")\n+  }\n+}\n+\n+object UNKNOWN extends CipherSuite(\"Unknown\", 0)\n+\n+object AES_CTR_NOPADDING extends CipherSuite(\"AES/CTR/NoPadding\", 16)"
  }],
  "prId": 8880
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "This is a case class so I'm not sure you even need to override `toString`. (Unless you really want the property names there.)\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-10-14T20:44:02Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import com.google.common.base.Objects\n+\n+/**\n+ * Defines properties of a CipherSuite. Modeled after the ciphers in [[javax.crypto.Cipher]]\n+ * @param name    name of cipher suite, as in [[javax.crypto.Cipher]]\n+ * @param algoBlockSize size of an algorithm block in bytes\n+ */\n+private[spark] case class CipherSuite(name: String, algoBlockSize: Int) {\n+  private var _unknownValue: Integer = _\n+\n+  def unknownValue: Integer = _unknownValue\n+\n+  def unknownValue_=(unknownValue: Integer): Unit = {\n+    _unknownValue = unknownValue\n+  }\n+\n+  override def toString(): String = {\n+    Objects.toStringHelper(this).add(\"name\", name).add(\"algoBlockSize\", algoBlockSize).toString"
  }],
  "prId": 8880
}]