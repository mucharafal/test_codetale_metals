[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: move to previous line\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-10-09T00:15:31Z",
    "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import java.io.IOException\n+import java.nio.ByteBuffer\n+import java.security.{GeneralSecurityException, SecureRandom}\n+import javax.crypto.Cipher\n+import javax.crypto.spec.{IvParameterSpec, SecretKeySpec}\n+\n+import com.google.common.base.Preconditions\n+\n+import org.apache.spark.crypto.CommonConfigurationKeys\n+.SPARK_SECURITY_JAVA_SECURE_RANDOM_ALGORITHM_DEFAULT"
  }, {
    "author": {
      "login": "winningsix"
    },
    "body": "Seems it will exceed the right margin if we move it to the previous line.\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-10-09T04:47:30Z",
    "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import java.io.IOException\n+import java.nio.ByteBuffer\n+import java.security.{GeneralSecurityException, SecureRandom}\n+import javax.crypto.Cipher\n+import javax.crypto.spec.{IvParameterSpec, SecretKeySpec}\n+\n+import com.google.common.base.Preconditions\n+\n+import org.apache.spark.crypto.CommonConfigurationKeys\n+.SPARK_SECURITY_JAVA_SECURE_RANDOM_ALGORITHM_DEFAULT"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "In that case, you should indent the next line. Or, as an alternative, import all constants using `._`.\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-10-09T04:50:17Z",
    "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import java.io.IOException\n+import java.nio.ByteBuffer\n+import java.security.{GeneralSecurityException, SecureRandom}\n+import javax.crypto.Cipher\n+import javax.crypto.spec.{IvParameterSpec, SecretKeySpec}\n+\n+import com.google.common.base.Preconditions\n+\n+import org.apache.spark.crypto.CommonConfigurationKeys\n+.SPARK_SECURITY_JAVA_SECURE_RANDOM_ALGORITHM_DEFAULT"
  }],
  "prId": 8880
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: should come before the `.crypto` imports.\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-10-09T00:15:52Z",
    "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import java.io.IOException\n+import java.nio.ByteBuffer\n+import java.security.{GeneralSecurityException, SecureRandom}\n+import javax.crypto.Cipher\n+import javax.crypto.spec.{IvParameterSpec, SecretKeySpec}\n+\n+import com.google.common.base.Preconditions\n+\n+import org.apache.spark.crypto.CommonConfigurationKeys\n+.SPARK_SECURITY_JAVA_SECURE_RANDOM_ALGORITHM_DEFAULT\n+import org.apache.spark.crypto.CommonConfigurationKeys\n+.SPARK_SECURITY_JAVA_SECURE_RANDOM_ALGORITHM_KEY\n+import org.apache.spark.{SparkConf, Logging}"
  }],
  "prId": 8880
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "I'd rather this be a `val`.\n\n```\nval random = {\n   // all the code that is in setConf() currently\n}\n```\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-10-09T00:16:56Z",
    "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import java.io.IOException\n+import java.nio.ByteBuffer\n+import java.security.{GeneralSecurityException, SecureRandom}\n+import javax.crypto.Cipher\n+import javax.crypto.spec.{IvParameterSpec, SecretKeySpec}\n+\n+import com.google.common.base.Preconditions\n+\n+import org.apache.spark.crypto.CommonConfigurationKeys\n+.SPARK_SECURITY_JAVA_SECURE_RANDOM_ALGORITHM_DEFAULT\n+import org.apache.spark.crypto.CommonConfigurationKeys\n+.SPARK_SECURITY_JAVA_SECURE_RANDOM_ALGORITHM_KEY\n+import org.apache.spark.{SparkConf, Logging}\n+\n+/**\n+ * Implement the AES-CTR crypto codec using JCE provider.\n+ * @param conf\n+ */\n+private[spark] class JceAesCtrCryptoCodec(conf: SparkConf) extends AesCtrCryptoCodec with Logging {\n+  var provider: String = null\n+  var random: SecureRandom = null"
  }],
  "prId": 8880
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "I don't see this value being set anywhere. Am I missing something?\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-10-09T00:19:05Z",
    "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import java.io.IOException\n+import java.nio.ByteBuffer\n+import java.security.{GeneralSecurityException, SecureRandom}\n+import javax.crypto.Cipher\n+import javax.crypto.spec.{IvParameterSpec, SecretKeySpec}\n+\n+import com.google.common.base.Preconditions\n+\n+import org.apache.spark.crypto.CommonConfigurationKeys\n+.SPARK_SECURITY_JAVA_SECURE_RANDOM_ALGORITHM_DEFAULT\n+import org.apache.spark.crypto.CommonConfigurationKeys\n+.SPARK_SECURITY_JAVA_SECURE_RANDOM_ALGORITHM_KEY\n+import org.apache.spark.{SparkConf, Logging}\n+\n+/**\n+ * Implement the AES-CTR crypto codec using JCE provider.\n+ * @param conf\n+ */\n+private[spark] class JceAesCtrCryptoCodec(conf: SparkConf) extends AesCtrCryptoCodec with Logging {\n+  var provider: String = null"
  }],
  "prId": 8880
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: you don't need the braces here\n",
    "commit": "928a59bc4566ec40e6caeccbc628369f050c31c9",
    "createdAt": "2015-10-09T00:19:41Z",
    "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.crypto\n+\n+import java.io.IOException\n+import java.nio.ByteBuffer\n+import java.security.{GeneralSecurityException, SecureRandom}\n+import javax.crypto.Cipher\n+import javax.crypto.spec.{IvParameterSpec, SecretKeySpec}\n+\n+import com.google.common.base.Preconditions\n+\n+import org.apache.spark.crypto.CommonConfigurationKeys\n+.SPARK_SECURITY_JAVA_SECURE_RANDOM_ALGORITHM_DEFAULT\n+import org.apache.spark.crypto.CommonConfigurationKeys\n+.SPARK_SECURITY_JAVA_SECURE_RANDOM_ALGORITHM_KEY\n+import org.apache.spark.{SparkConf, Logging}\n+\n+/**\n+ * Implement the AES-CTR crypto codec using JCE provider.\n+ * @param conf\n+ */\n+private[spark] class JceAesCtrCryptoCodec(conf: SparkConf) extends AesCtrCryptoCodec with Logging {\n+  var provider: String = null\n+  var random: SecureRandom = null\n+\n+  setConf(conf)\n+\n+  def setConf(conf: SparkConf) {\n+    val secureRandomAlg: String = conf.get(SPARK_SECURITY_JAVA_SECURE_RANDOM_ALGORITHM_KEY,\n+      SPARK_SECURITY_JAVA_SECURE_RANDOM_ALGORITHM_DEFAULT)\n+    try {\n+      random = SecureRandom.getInstance(secureRandomAlg)\n+    }\n+    catch {\n+      case e: GeneralSecurityException => {"
  }],
  "prId": 8880
}]