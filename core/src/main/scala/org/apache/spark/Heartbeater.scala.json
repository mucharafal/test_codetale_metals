[{
  "comments": [{
    "author": {
      "login": "Ngone51"
    },
    "body": "I'm wondering should the prefix name of heartbeater thread be `\"executor-heartbeater\"` ?",
    "commit": "571285beace1a0c1df92d9f5127828ed8955c93f",
    "createdAt": "2018-05-10T04:47:28Z",
    "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import java.util.concurrent.TimeUnit\n+\n+import org.apache.spark.util.{ThreadUtils, Utils}\n+\n+/**\n+ * Creates a heartbeat thread which will call the specified reportHeartbeat function at\n+ * intervals of intervalMs.\n+ *\n+ * @param reportHeartbeat the heartbeat reporting function to call.\n+ * @param intervalMs the interval between heartbeats.\n+ */\n+private[spark] class Heartbeater(reportHeartbeat: () => Unit, intervalMs: Long) {\n+  // Executor for the heartbeat task\n+  private val heartbeater = ThreadUtils.newDaemonSingleThreadScheduledExecutor(\"driver-heartbeater\")"
  }, {
    "author": {
      "login": "edwinalu"
    },
    "body": "How about \"heartbeater\", since it could be for the driver as well? Alternatively, we can also pass in the name to the constructor.",
    "commit": "571285beace1a0c1df92d9f5127828ed8955c93f",
    "createdAt": "2018-05-11T01:28:22Z",
    "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import java.util.concurrent.TimeUnit\n+\n+import org.apache.spark.util.{ThreadUtils, Utils}\n+\n+/**\n+ * Creates a heartbeat thread which will call the specified reportHeartbeat function at\n+ * intervals of intervalMs.\n+ *\n+ * @param reportHeartbeat the heartbeat reporting function to call.\n+ * @param intervalMs the interval between heartbeats.\n+ */\n+private[spark] class Heartbeater(reportHeartbeat: () => Unit, intervalMs: Long) {\n+  // Executor for the heartbeat task\n+  private val heartbeater = ThreadUtils.newDaemonSingleThreadScheduledExecutor(\"driver-heartbeater\")"
  }, {
    "author": {
      "login": "Ngone51"
    },
    "body": "\"pass in the name to the constructor\" is better(if we do need to do this for the driver)",
    "commit": "571285beace1a0c1df92d9f5127828ed8955c93f",
    "createdAt": "2018-05-14T02:33:17Z",
    "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import java.util.concurrent.TimeUnit\n+\n+import org.apache.spark.util.{ThreadUtils, Utils}\n+\n+/**\n+ * Creates a heartbeat thread which will call the specified reportHeartbeat function at\n+ * intervals of intervalMs.\n+ *\n+ * @param reportHeartbeat the heartbeat reporting function to call.\n+ * @param intervalMs the interval between heartbeats.\n+ */\n+private[spark] class Heartbeater(reportHeartbeat: () => Unit, intervalMs: Long) {\n+  // Executor for the heartbeat task\n+  private val heartbeater = ThreadUtils.newDaemonSingleThreadScheduledExecutor(\"driver-heartbeater\")"
  }, {
    "author": {
      "login": "edwinalu"
    },
    "body": "Changed.",
    "commit": "571285beace1a0c1df92d9f5127828ed8955c93f",
    "createdAt": "2018-05-15T00:29:54Z",
    "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import java.util.concurrent.TimeUnit\n+\n+import org.apache.spark.util.{ThreadUtils, Utils}\n+\n+/**\n+ * Creates a heartbeat thread which will call the specified reportHeartbeat function at\n+ * intervals of intervalMs.\n+ *\n+ * @param reportHeartbeat the heartbeat reporting function to call.\n+ * @param intervalMs the interval between heartbeats.\n+ */\n+private[spark] class Heartbeater(reportHeartbeat: () => Unit, intervalMs: Long) {\n+  // Executor for the heartbeat task\n+  private val heartbeater = ThreadUtils.newDaemonSingleThreadScheduledExecutor(\"driver-heartbeater\")"
  }],
  "prId": 21221
}, {
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "nit: whole class is `private[spark]` so you don't need to add this to individual methods",
    "commit": "571285beace1a0c1df92d9f5127828ed8955c93f",
    "createdAt": "2018-06-27T19:11:37Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import java.util.concurrent.TimeUnit\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.memory.MemoryManager\n+import org.apache.spark.metrics.MetricGetter\n+import org.apache.spark.util.{ThreadUtils, Utils}\n+\n+/**\n+ * Creates a heartbeat thread which will call the specified reportHeartbeat function at\n+ * intervals of intervalMs.\n+ *\n+ * @param memoryManager the memory manager for execution and storage memory.\n+ * @param reportHeartbeat the heartbeat reporting function to call.\n+ * @param name the thread name for the heartbeater.\n+ * @param intervalMs the interval between heartbeats.\n+ */\n+private[spark] class Heartbeater(\n+    memoryManager: MemoryManager,\n+    reportHeartbeat: () => Unit,\n+    name: String,\n+    intervalMs: Long) extends Logging {\n+  // Executor for the heartbeat task\n+  private val heartbeater = ThreadUtils.newDaemonSingleThreadScheduledExecutor(name)\n+\n+  /** Schedules a task to report a heartbeat. */\n+  private[spark] def start(): Unit = {"
  }, {
    "author": {
      "login": "edwinalu"
    },
    "body": "Removed.",
    "commit": "571285beace1a0c1df92d9f5127828ed8955c93f",
    "createdAt": "2018-06-28T00:58:23Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import java.util.concurrent.TimeUnit\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.memory.MemoryManager\n+import org.apache.spark.metrics.MetricGetter\n+import org.apache.spark.util.{ThreadUtils, Utils}\n+\n+/**\n+ * Creates a heartbeat thread which will call the specified reportHeartbeat function at\n+ * intervals of intervalMs.\n+ *\n+ * @param memoryManager the memory manager for execution and storage memory.\n+ * @param reportHeartbeat the heartbeat reporting function to call.\n+ * @param name the thread name for the heartbeater.\n+ * @param intervalMs the interval between heartbeats.\n+ */\n+private[spark] class Heartbeater(\n+    memoryManager: MemoryManager,\n+    reportHeartbeat: () => Unit,\n+    name: String,\n+    intervalMs: Long) extends Logging {\n+  // Executor for the heartbeat task\n+  private val heartbeater = ThreadUtils.newDaemonSingleThreadScheduledExecutor(name)\n+\n+  /** Schedules a task to report a heartbeat. */\n+  private[spark] def start(): Unit = {"
  }],
  "prId": 21221
}]