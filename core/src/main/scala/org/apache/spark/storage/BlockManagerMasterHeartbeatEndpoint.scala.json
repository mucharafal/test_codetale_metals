[{
  "comments": [{
    "author": {
      "login": "xuanyuanking"
    },
    "body": "As we move these messages in the new RPC endpoint, I think they can be removed in the original class?\r\nhttps://github.com/apache/spark/pull/25971/files#diff-186864190089a718680accb51de5f0d4L89-L95",
    "commit": "7b8b398633789b65d116ce716d6fb1afcded0427",
    "createdAt": "2019-10-17T09:57:51Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rpc.{RpcCallContext, RpcEnv, ThreadSafeRpcEndpoint}\n+import org.apache.spark.storage.BlockManagerMessages.{BlockManagerHeartbeat, RegisterBlockManager, RemoveExecutor, UpdateBlockInfo}\n+\n+/**\n+ * Separate heartbeat out of BlockManagerMasterEndpoint due to performance consideration.\n+ */\n+private[spark] class BlockManagerMasterHeartbeatEndpoint(\n+    override val rpcEnv: RpcEnv,\n+    isLocal: Boolean)\n+  extends ThreadSafeRpcEndpoint with Logging {\n+\n+  // Mapping from block manager id to the block manager's information.\n+  private val blockManagerLastSeen = new mutable.HashMap[BlockManagerId, Long]\n+\n+  // Mapping from executor ID to block manager ID.\n+  private val blockManagerIdByExecutor = new mutable.HashMap[String, BlockManagerId]\n+\n+  override def receiveAndReply(context: RpcCallContext): PartialFunction[Any, Unit] = {\n+    case RegisterBlockManager(blockManagerId, _, _, _, _) =>"
  }, {
    "author": {
      "login": "xuanyuanking"
    },
    "body": "Got it, we need to handle these messages in both endpoints, do you think we should separate more thoroughly? Just handle these 4 kinds of message related to heart beat in this endpoint.",
    "commit": "7b8b398633789b65d116ce716d6fb1afcded0427",
    "createdAt": "2019-10-17T10:06:55Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rpc.{RpcCallContext, RpcEnv, ThreadSafeRpcEndpoint}\n+import org.apache.spark.storage.BlockManagerMessages.{BlockManagerHeartbeat, RegisterBlockManager, RemoveExecutor, UpdateBlockInfo}\n+\n+/**\n+ * Separate heartbeat out of BlockManagerMasterEndpoint due to performance consideration.\n+ */\n+private[spark] class BlockManagerMasterHeartbeatEndpoint(\n+    override val rpcEnv: RpcEnv,\n+    isLocal: Boolean)\n+  extends ThreadSafeRpcEndpoint with Logging {\n+\n+  // Mapping from block manager id to the block manager's information.\n+  private val blockManagerLastSeen = new mutable.HashMap[BlockManagerId, Long]\n+\n+  // Mapping from executor ID to block manager ID.\n+  private val blockManagerIdByExecutor = new mutable.HashMap[String, BlockManagerId]\n+\n+  override def receiveAndReply(context: RpcCallContext): PartialFunction[Any, Unit] = {\n+    case RegisterBlockManager(blockManagerId, _, _, _, _) =>"
  }, {
    "author": {
      "login": "LantaoJin"
    },
    "body": "Not all events need to be handled in heartbeat endpoint. But you noticed me that we need comments in original endpoint as a reminder for new coming events in future.",
    "commit": "7b8b398633789b65d116ce716d6fb1afcded0427",
    "createdAt": "2019-10-18T02:00:32Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rpc.{RpcCallContext, RpcEnv, ThreadSafeRpcEndpoint}\n+import org.apache.spark.storage.BlockManagerMessages.{BlockManagerHeartbeat, RegisterBlockManager, RemoveExecutor, UpdateBlockInfo}\n+\n+/**\n+ * Separate heartbeat out of BlockManagerMasterEndpoint due to performance consideration.\n+ */\n+private[spark] class BlockManagerMasterHeartbeatEndpoint(\n+    override val rpcEnv: RpcEnv,\n+    isLocal: Boolean)\n+  extends ThreadSafeRpcEndpoint with Logging {\n+\n+  // Mapping from block manager id to the block manager's information.\n+  private val blockManagerLastSeen = new mutable.HashMap[BlockManagerId, Long]\n+\n+  // Mapping from executor ID to block manager ID.\n+  private val blockManagerIdByExecutor = new mutable.HashMap[String, BlockManagerId]\n+\n+  override def receiveAndReply(context: RpcCallContext): PartialFunction[Any, Unit] = {\n+    case RegisterBlockManager(blockManagerId, _, _, _, _) =>"
  }, {
    "author": {
      "login": "LantaoJin"
    },
    "body": "https://github.com/apache/spark/blob/cb6c4f6842ae977c4f664703c1f3df5b23a0a004/core/src/main/scala/org/apache/spark/storage/BlockManagerMasterEndpoint.scala#L88",
    "commit": "7b8b398633789b65d116ce716d6fb1afcded0427",
    "createdAt": "2019-10-18T04:07:52Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rpc.{RpcCallContext, RpcEnv, ThreadSafeRpcEndpoint}\n+import org.apache.spark.storage.BlockManagerMessages.{BlockManagerHeartbeat, RegisterBlockManager, RemoveExecutor, UpdateBlockInfo}\n+\n+/**\n+ * Separate heartbeat out of BlockManagerMasterEndpoint due to performance consideration.\n+ */\n+private[spark] class BlockManagerMasterHeartbeatEndpoint(\n+    override val rpcEnv: RpcEnv,\n+    isLocal: Boolean)\n+  extends ThreadSafeRpcEndpoint with Logging {\n+\n+  // Mapping from block manager id to the block manager's information.\n+  private val blockManagerLastSeen = new mutable.HashMap[BlockManagerId, Long]\n+\n+  // Mapping from executor ID to block manager ID.\n+  private val blockManagerIdByExecutor = new mutable.HashMap[String, BlockManagerId]\n+\n+  override def receiveAndReply(context: RpcCallContext): PartialFunction[Any, Unit] = {\n+    case RegisterBlockManager(blockManagerId, _, _, _, _) =>"
  }],
  "prId": 25971
}, {
  "comments": [{
    "author": {
      "login": "Ngone51"
    },
    "body": "It would be better if you could comment that why you needs to handle `RegisterBlockManager`, `UpdateBlockInfo`, `RemoveExecutor` besides  `BlockManagerHeartbeat` in a heartbeat related endpoint.",
    "commit": "7b8b398633789b65d116ce716d6fb1afcded0427",
    "createdAt": "2019-10-17T12:17:09Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rpc.{RpcCallContext, RpcEnv, ThreadSafeRpcEndpoint}\n+import org.apache.spark.storage.BlockManagerMessages.{BlockManagerHeartbeat, RegisterBlockManager, RemoveExecutor, UpdateBlockInfo}\n+\n+/**\n+ * Separate heartbeat out of BlockManagerMasterEndpoint due to performance consideration.\n+ */\n+private[spark] class BlockManagerMasterHeartbeatEndpoint(\n+    override val rpcEnv: RpcEnv,\n+    isLocal: Boolean)\n+  extends ThreadSafeRpcEndpoint with Logging {\n+\n+  // Mapping from block manager id to the block manager's information.\n+  private val blockManagerLastSeen = new mutable.HashMap[BlockManagerId, Long]\n+\n+  // Mapping from executor ID to block manager ID.\n+  private val blockManagerIdByExecutor = new mutable.HashMap[String, BlockManagerId]\n+\n+  override def receiveAndReply(context: RpcCallContext): PartialFunction[Any, Unit] = {\n+    case RegisterBlockManager(blockManagerId, _, _, _, _) =>\n+      updateLastSeenMs(blockManagerId)\n+      blockManagerIdByExecutor(blockManagerId.executorId) = blockManagerId\n+      context.reply(true)\n+\n+    case UpdateBlockInfo(blockManagerId, _, _, _, _) =>\n+      updateLastSeenMs(blockManagerId)\n+      context.reply(true)\n+\n+    case RemoveExecutor(execId) =>\n+      blockManagerIdByExecutor.get(execId).foreach(blockManagerLastSeen.remove)\n+      blockManagerIdByExecutor -= execId\n+      context.reply(true)"
  }, {
    "author": {
      "login": "LantaoJin"
    },
    "body": "thanks, I will add some comments",
    "commit": "7b8b398633789b65d116ce716d6fb1afcded0427",
    "createdAt": "2019-10-18T01:54:54Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rpc.{RpcCallContext, RpcEnv, ThreadSafeRpcEndpoint}\n+import org.apache.spark.storage.BlockManagerMessages.{BlockManagerHeartbeat, RegisterBlockManager, RemoveExecutor, UpdateBlockInfo}\n+\n+/**\n+ * Separate heartbeat out of BlockManagerMasterEndpoint due to performance consideration.\n+ */\n+private[spark] class BlockManagerMasterHeartbeatEndpoint(\n+    override val rpcEnv: RpcEnv,\n+    isLocal: Boolean)\n+  extends ThreadSafeRpcEndpoint with Logging {\n+\n+  // Mapping from block manager id to the block manager's information.\n+  private val blockManagerLastSeen = new mutable.HashMap[BlockManagerId, Long]\n+\n+  // Mapping from executor ID to block manager ID.\n+  private val blockManagerIdByExecutor = new mutable.HashMap[String, BlockManagerId]\n+\n+  override def receiveAndReply(context: RpcCallContext): PartialFunction[Any, Unit] = {\n+    case RegisterBlockManager(blockManagerId, _, _, _, _) =>\n+      updateLastSeenMs(blockManagerId)\n+      blockManagerIdByExecutor(blockManagerId.executorId) = blockManagerId\n+      context.reply(true)\n+\n+    case UpdateBlockInfo(blockManagerId, _, _, _, _) =>\n+      updateLastSeenMs(blockManagerId)\n+      context.reply(true)\n+\n+    case RemoveExecutor(execId) =>\n+      blockManagerIdByExecutor.get(execId).foreach(blockManagerLastSeen.remove)\n+      blockManagerIdByExecutor -= execId\n+      context.reply(true)"
  }, {
    "author": {
      "login": "LantaoJin"
    },
    "body": "https://github.com/apache/spark/blob/cb6c4f6842ae977c4f664703c1f3df5b23a0a004/core/src/main/scala/org/apache/spark/storage/BlockManagerMasterHeartbeatEndpoint.scala#L40",
    "commit": "7b8b398633789b65d116ce716d6fb1afcded0427",
    "createdAt": "2019-10-18T04:08:52Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rpc.{RpcCallContext, RpcEnv, ThreadSafeRpcEndpoint}\n+import org.apache.spark.storage.BlockManagerMessages.{BlockManagerHeartbeat, RegisterBlockManager, RemoveExecutor, UpdateBlockInfo}\n+\n+/**\n+ * Separate heartbeat out of BlockManagerMasterEndpoint due to performance consideration.\n+ */\n+private[spark] class BlockManagerMasterHeartbeatEndpoint(\n+    override val rpcEnv: RpcEnv,\n+    isLocal: Boolean)\n+  extends ThreadSafeRpcEndpoint with Logging {\n+\n+  // Mapping from block manager id to the block manager's information.\n+  private val blockManagerLastSeen = new mutable.HashMap[BlockManagerId, Long]\n+\n+  // Mapping from executor ID to block manager ID.\n+  private val blockManagerIdByExecutor = new mutable.HashMap[String, BlockManagerId]\n+\n+  override def receiveAndReply(context: RpcCallContext): PartialFunction[Any, Unit] = {\n+    case RegisterBlockManager(blockManagerId, _, _, _, _) =>\n+      updateLastSeenMs(blockManagerId)\n+      blockManagerIdByExecutor(blockManagerId.executorId) = blockManagerId\n+      context.reply(true)\n+\n+    case UpdateBlockInfo(blockManagerId, _, _, _, _) =>\n+      updateLastSeenMs(blockManagerId)\n+      context.reply(true)\n+\n+    case RemoveExecutor(execId) =>\n+      blockManagerIdByExecutor.get(execId).foreach(blockManagerLastSeen.remove)\n+      blockManagerIdByExecutor -= execId\n+      context.reply(true)"
  }],
  "prId": 25971
}, {
  "comments": [{
    "author": {
      "login": "Ngone51"
    },
    "body": "I know this refactored from original code, but still feel weird that we don't ever use the `lastSeen` elsewhere.",
    "commit": "7b8b398633789b65d116ce716d6fb1afcded0427",
    "createdAt": "2019-10-17T12:19:22Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rpc.{RpcCallContext, RpcEnv, ThreadSafeRpcEndpoint}\n+import org.apache.spark.storage.BlockManagerMessages.{BlockManagerHeartbeat, RegisterBlockManager, RemoveExecutor, UpdateBlockInfo}\n+\n+/**\n+ * Separate heartbeat out of BlockManagerMasterEndpoint due to performance consideration.\n+ */\n+private[spark] class BlockManagerMasterHeartbeatEndpoint(\n+    override val rpcEnv: RpcEnv,\n+    isLocal: Boolean)\n+  extends ThreadSafeRpcEndpoint with Logging {\n+\n+  // Mapping from block manager id to the block manager's information.\n+  private val blockManagerLastSeen = new mutable.HashMap[BlockManagerId, Long]"
  }, {
    "author": {
      "login": "LantaoJin"
    },
    "body": "Yes, `def lastSeenMs: Long = _lastSeenMs` is never used in original code.",
    "commit": "7b8b398633789b65d116ce716d6fb1afcded0427",
    "createdAt": "2019-10-18T04:02:36Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rpc.{RpcCallContext, RpcEnv, ThreadSafeRpcEndpoint}\n+import org.apache.spark.storage.BlockManagerMessages.{BlockManagerHeartbeat, RegisterBlockManager, RemoveExecutor, UpdateBlockInfo}\n+\n+/**\n+ * Separate heartbeat out of BlockManagerMasterEndpoint due to performance consideration.\n+ */\n+private[spark] class BlockManagerMasterHeartbeatEndpoint(\n+    override val rpcEnv: RpcEnv,\n+    isLocal: Boolean)\n+  extends ThreadSafeRpcEndpoint with Logging {\n+\n+  // Mapping from block manager id to the block manager's information.\n+  private val blockManagerLastSeen = new mutable.HashMap[BlockManagerId, Long]"
  }, {
    "author": {
      "login": "Ngone51"
    },
    "body": "So, shall we eliminate `blockManagerLastSeen` as it may occupy a bunch of memory when there's thousands of executors/BlockManagers ?",
    "commit": "7b8b398633789b65d116ce716d6fb1afcded0427",
    "createdAt": "2019-10-18T06:03:32Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rpc.{RpcCallContext, RpcEnv, ThreadSafeRpcEndpoint}\n+import org.apache.spark.storage.BlockManagerMessages.{BlockManagerHeartbeat, RegisterBlockManager, RemoveExecutor, UpdateBlockInfo}\n+\n+/**\n+ * Separate heartbeat out of BlockManagerMasterEndpoint due to performance consideration.\n+ */\n+private[spark] class BlockManagerMasterHeartbeatEndpoint(\n+    override val rpcEnv: RpcEnv,\n+    isLocal: Boolean)\n+  extends ThreadSafeRpcEndpoint with Logging {\n+\n+  // Mapping from block manager id to the block manager's information.\n+  private val blockManagerLastSeen = new mutable.HashMap[BlockManagerId, Long]"
  }, {
    "author": {
      "login": "LantaoJin"
    },
    "body": "Let me see. Does it have a bug in original code? If `def lastSeenMs` never used is on purpose, why we need to do `updateLastSeenMs`",
    "commit": "7b8b398633789b65d116ce716d6fb1afcded0427",
    "createdAt": "2019-10-19T00:39:32Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rpc.{RpcCallContext, RpcEnv, ThreadSafeRpcEndpoint}\n+import org.apache.spark.storage.BlockManagerMessages.{BlockManagerHeartbeat, RegisterBlockManager, RemoveExecutor, UpdateBlockInfo}\n+\n+/**\n+ * Separate heartbeat out of BlockManagerMasterEndpoint due to performance consideration.\n+ */\n+private[spark] class BlockManagerMasterHeartbeatEndpoint(\n+    override val rpcEnv: RpcEnv,\n+    isLocal: Boolean)\n+  extends ThreadSafeRpcEndpoint with Logging {\n+\n+  // Mapping from block manager id to the block manager's information.\n+  private val blockManagerLastSeen = new mutable.HashMap[BlockManagerId, Long]"
  }, {
    "author": {
      "login": "LantaoJin"
    },
    "body": "No. we can not eliminate `blockManagerLastSeen ` for now at least. The lastSeenMs is not used but the `blockManagerLastSeen ` map is used to store all BlockManagerId for `def heartbeatReceived`. So the\r\n```\r\n  private val blockManagerLastSeen = new mutable.HashMap[BlockManagerId, Long]\r\n```\r\ncan be changed to \r\n```\r\n  private val blockManagers = new mutable.HashSet[BlockManagerId]\r\n```\r\nBut I think `blockManagerLastSeen` structure is better and no need more memory.",
    "commit": "7b8b398633789b65d116ce716d6fb1afcded0427",
    "createdAt": "2019-10-19T00:49:30Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rpc.{RpcCallContext, RpcEnv, ThreadSafeRpcEndpoint}\n+import org.apache.spark.storage.BlockManagerMessages.{BlockManagerHeartbeat, RegisterBlockManager, RemoveExecutor, UpdateBlockInfo}\n+\n+/**\n+ * Separate heartbeat out of BlockManagerMasterEndpoint due to performance consideration.\n+ */\n+private[spark] class BlockManagerMasterHeartbeatEndpoint(\n+    override val rpcEnv: RpcEnv,\n+    isLocal: Boolean)\n+  extends ThreadSafeRpcEndpoint with Logging {\n+\n+  // Mapping from block manager id to the block manager's information.\n+  private val blockManagerLastSeen = new mutable.HashMap[BlockManagerId, Long]"
  }, {
    "author": {
      "login": "Ngone51"
    },
    "body": "Make sense.",
    "commit": "7b8b398633789b65d116ce716d6fb1afcded0427",
    "createdAt": "2019-10-31T14:43:00Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rpc.{RpcCallContext, RpcEnv, ThreadSafeRpcEndpoint}\n+import org.apache.spark.storage.BlockManagerMessages.{BlockManagerHeartbeat, RegisterBlockManager, RemoveExecutor, UpdateBlockInfo}\n+\n+/**\n+ * Separate heartbeat out of BlockManagerMasterEndpoint due to performance consideration.\n+ */\n+private[spark] class BlockManagerMasterHeartbeatEndpoint(\n+    override val rpcEnv: RpcEnv,\n+    isLocal: Boolean)\n+  extends ThreadSafeRpcEndpoint with Logging {\n+\n+  // Mapping from block manager id to the block manager's information.\n+  private val blockManagerLastSeen = new mutable.HashMap[BlockManagerId, Long]"
  }],
  "prId": 25971
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "shall we add a comment that, for simplicity we reuse `StopBlockManagerMaster` to stop heartbeat end point.",
    "commit": "7b8b398633789b65d116ce716d6fb1afcded0427",
    "createdAt": "2019-11-08T09:43:35Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rpc.{IsolatedRpcEndpoint, RpcCallContext, RpcEnv}\n+import org.apache.spark.storage.BlockManagerMessages.{BlockManagerHeartbeat, StopBlockManagerMaster}\n+\n+/**\n+ * Separate heartbeat out of BlockManagerMasterEndpoint due to performance consideration.\n+ */\n+private[spark] class BlockManagerMasterHeartbeatEndpoint(\n+    override val rpcEnv: RpcEnv,\n+    isLocal: Boolean,\n+    blockManagerInfo: mutable.Map[BlockManagerId, BlockManagerInfo])\n+  extends IsolatedRpcEndpoint with Logging {\n+\n+  override def receiveAndReply(context: RpcCallContext): PartialFunction[Any, Unit] = {\n+    case BlockManagerHeartbeat(blockManagerId) =>\n+      context.reply(heartbeatReceived(blockManagerId))\n+\n+    case StopBlockManagerMaster =>",
    "line": 39
  }, {
    "author": {
      "login": "LantaoJin"
    },
    "body": "Do we need to emphasize **reuse**? All endpoints belong to BlockManagerMaster should stop themselves when they received `StopBlockManagerMaster ` event.",
    "commit": "7b8b398633789b65d116ce716d6fb1afcded0427",
    "createdAt": "2019-11-08T15:12:03Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rpc.{IsolatedRpcEndpoint, RpcCallContext, RpcEnv}\n+import org.apache.spark.storage.BlockManagerMessages.{BlockManagerHeartbeat, StopBlockManagerMaster}\n+\n+/**\n+ * Separate heartbeat out of BlockManagerMasterEndpoint due to performance consideration.\n+ */\n+private[spark] class BlockManagerMasterHeartbeatEndpoint(\n+    override val rpcEnv: RpcEnv,\n+    isLocal: Boolean,\n+    blockManagerInfo: mutable.Map[BlockManagerId, BlockManagerInfo])\n+  extends IsolatedRpcEndpoint with Logging {\n+\n+  override def receiveAndReply(context: RpcCallContext): PartialFunction[Any, Unit] = {\n+    case BlockManagerHeartbeat(blockManagerId) =>\n+      context.reply(heartbeatReceived(blockManagerId))\n+\n+    case StopBlockManagerMaster =>",
    "line": 39
  }],
  "prId": 25971
}, {
  "comments": [{
    "author": {
      "login": "Ngone51"
    },
    "body": "Actually, I'm wondering whether `BlockManagerMasterHeartbeatEndpoint ` should be an `IsolatedRpcEndpoint`. As `IsolatedRpcEndpoint` is mainly designed for those heavy&busy endpoints, e.g. `BlockManagerMasterEndpoint`,  `DriverEndpoint`, while `BlockManagerMasterHeartbeatEndpoint` doesn't seems to be high load. cc @vanzin @squito ",
    "commit": "7b8b398633789b65d116ce716d6fb1afcded0427",
    "createdAt": "2019-11-08T10:34:18Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rpc.{IsolatedRpcEndpoint, RpcCallContext, RpcEnv}\n+import org.apache.spark.storage.BlockManagerMessages.{BlockManagerHeartbeat, StopBlockManagerMaster}\n+\n+/**\n+ * Separate heartbeat out of BlockManagerMasterEndpoint due to performance consideration.\n+ */\n+private[spark] class BlockManagerMasterHeartbeatEndpoint(\n+    override val rpcEnv: RpcEnv,\n+    isLocal: Boolean,\n+    blockManagerInfo: mutable.Map[BlockManagerId, BlockManagerInfo])\n+  extends IsolatedRpcEndpoint with Logging {"
  }, {
    "author": {
      "login": "LantaoJin"
    },
    "body": "I just copy from `BlockManagerMasterEndpoint` :) \r\n`IsolatedRpcEndpoint` was merged recently. I miss the background about this.\r\nDo you suggest to change back to `ThreadSafeRpcEndpoint`?",
    "commit": "7b8b398633789b65d116ce716d6fb1afcded0427",
    "createdAt": "2019-11-08T11:36:14Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rpc.{IsolatedRpcEndpoint, RpcCallContext, RpcEnv}\n+import org.apache.spark.storage.BlockManagerMessages.{BlockManagerHeartbeat, StopBlockManagerMaster}\n+\n+/**\n+ * Separate heartbeat out of BlockManagerMasterEndpoint due to performance consideration.\n+ */\n+private[spark] class BlockManagerMasterHeartbeatEndpoint(\n+    override val rpcEnv: RpcEnv,\n+    isLocal: Boolean,\n+    blockManagerInfo: mutable.Map[BlockManagerId, BlockManagerInfo])\n+  extends IsolatedRpcEndpoint with Logging {"
  }, {
    "author": {
      "login": "Ngone51"
    },
    "body": "Yes, I think so.",
    "commit": "7b8b398633789b65d116ce716d6fb1afcded0427",
    "createdAt": "2019-11-08T11:43:34Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rpc.{IsolatedRpcEndpoint, RpcCallContext, RpcEnv}\n+import org.apache.spark.storage.BlockManagerMessages.{BlockManagerHeartbeat, StopBlockManagerMaster}\n+\n+/**\n+ * Separate heartbeat out of BlockManagerMasterEndpoint due to performance consideration.\n+ */\n+private[spark] class BlockManagerMasterHeartbeatEndpoint(\n+    override val rpcEnv: RpcEnv,\n+    isLocal: Boolean,\n+    blockManagerInfo: mutable.Map[BlockManagerId, BlockManagerInfo])\n+  extends IsolatedRpcEndpoint with Logging {"
  }, {
    "author": {
      "login": "LantaoJin"
    },
    "body": "Changed",
    "commit": "7b8b398633789b65d116ce716d6fb1afcded0427",
    "createdAt": "2019-11-08T11:51:12Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rpc.{IsolatedRpcEndpoint, RpcCallContext, RpcEnv}\n+import org.apache.spark.storage.BlockManagerMessages.{BlockManagerHeartbeat, StopBlockManagerMaster}\n+\n+/**\n+ * Separate heartbeat out of BlockManagerMasterEndpoint due to performance consideration.\n+ */\n+private[spark] class BlockManagerMasterHeartbeatEndpoint(\n+    override val rpcEnv: RpcEnv,\n+    isLocal: Boolean,\n+    blockManagerInfo: mutable.Map[BlockManagerId, BlockManagerInfo])\n+  extends IsolatedRpcEndpoint with Logging {"
  }],
  "prId": 25971
}]