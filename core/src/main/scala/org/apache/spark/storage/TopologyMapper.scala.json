[{
  "comments": [{
    "author": {
      "login": "ericl"
    },
    "body": "space after the if\n",
    "commit": "632d0436ca701031e03bd141b95d4b0bb5544150",
    "createdAt": "2016-08-09T23:15:45Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import java.io.{File, FileInputStream}\n+import java.util.Properties\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.SparkConf\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * ::DeveloperApi::\n+ * TopologyMapper provides topology information for a given host\n+ * @param conf SparkConf to get required properties, if needed\n+ */\n+@DeveloperApi\n+abstract class TopologyMapper(conf: SparkConf) {\n+  /**\n+   * Gets the topology information given the host name\n+   *\n+   * @param hostname Hostname\n+   * @return topology information for the given hostname. One can use a 'topology delimiter'\n+   *         to make this topology information nested.\n+   *         For example : ‘/myrack/myhost’, where ‘/’ is the topology delimiter,\n+   *         ‘myrack’ is the topology identifier, and ‘myhost’ is the individual host.\n+   *         This function only returns the topology information without the hostname.\n+   */\n+  def getTopologyForHost(hostname: String): String\n+}\n+\n+@DeveloperApi\n+class DefaultTopologyMapper(conf: SparkConf) extends TopologyMapper(conf) with Logging {\n+  override def getTopologyForHost(hostname: String): String = {\n+    logDebug(s\"Got a request for $hostname\")\n+    \"DefaultRack\"\n+  }\n+}\n+\n+/**\n+ * A simple file based topology mapper. This expects topology information provided as a\n+ * [[java.util.Properties]] file. The name of the file is obtained from SparkConf property\n+ * `spark.replication.topologyawareness.topologyfile`. To use this topology mapper, set the\n+ * `spark.replication.topologyawareness.topologyMapper` property to\n+ * [[org.apache.spark.storage.FileBasedTopologyMapper]]\n+ * @param conf SparkConf object\n+ */\n+@DeveloperApi\n+class FileBasedTopologyMapper(conf: SparkConf) extends TopologyMapper(conf) with Logging {\n+\n+  val topologyFile = conf.getOption(\"spark.replication.topologyawareness.topologyfile\")\n+  require(topologyFile.isDefined, \"Please provide topology file for FileBasedTopologyMapper.\")\n+  val topologyMap = Utils.getPropertiesFromFile(topologyFile.get)\n+\n+  override def getTopologyForHost(hostname: String): String = {\n+    val topology = topologyMap.get(hostname)\n+    if(topology.isDefined) {"
  }],
  "prId": 13152
}, {
  "comments": [{
    "author": {
      "login": "ericl"
    },
    "body": "newline\n",
    "commit": "632d0436ca701031e03bd141b95d4b0bb5544150",
    "createdAt": "2016-08-09T23:15:49Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import java.io.{File, FileInputStream}\n+import java.util.Properties\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.SparkConf\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * ::DeveloperApi::\n+ * TopologyMapper provides topology information for a given host\n+ * @param conf SparkConf to get required properties, if needed\n+ */\n+@DeveloperApi\n+abstract class TopologyMapper(conf: SparkConf) {\n+  /**\n+   * Gets the topology information given the host name\n+   *\n+   * @param hostname Hostname\n+   * @return topology information for the given hostname. One can use a 'topology delimiter'\n+   *         to make this topology information nested.\n+   *         For example : ‘/myrack/myhost’, where ‘/’ is the topology delimiter,\n+   *         ‘myrack’ is the topology identifier, and ‘myhost’ is the individual host.\n+   *         This function only returns the topology information without the hostname.\n+   */\n+  def getTopologyForHost(hostname: String): String\n+}\n+\n+@DeveloperApi\n+class DefaultTopologyMapper(conf: SparkConf) extends TopologyMapper(conf) with Logging {\n+  override def getTopologyForHost(hostname: String): String = {\n+    logDebug(s\"Got a request for $hostname\")\n+    \"DefaultRack\"\n+  }\n+}\n+\n+/**\n+ * A simple file based topology mapper. This expects topology information provided as a\n+ * [[java.util.Properties]] file. The name of the file is obtained from SparkConf property\n+ * `spark.replication.topologyawareness.topologyfile`. To use this topology mapper, set the\n+ * `spark.replication.topologyawareness.topologyMapper` property to\n+ * [[org.apache.spark.storage.FileBasedTopologyMapper]]\n+ * @param conf SparkConf object\n+ */\n+@DeveloperApi\n+class FileBasedTopologyMapper(conf: SparkConf) extends TopologyMapper(conf) with Logging {\n+\n+  val topologyFile = conf.getOption(\"spark.replication.topologyawareness.topologyfile\")\n+  require(topologyFile.isDefined, \"Please provide topology file for FileBasedTopologyMapper.\")"
  }],
  "prId": 13152
}, {
  "comments": [{
    "author": {
      "login": "ericl"
    },
    "body": "s/topologyfile/topologyFile\n",
    "commit": "632d0436ca701031e03bd141b95d4b0bb5544150",
    "createdAt": "2016-08-09T23:16:53Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import java.io.{File, FileInputStream}\n+import java.util.Properties\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.SparkConf\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * ::DeveloperApi::\n+ * TopologyMapper provides topology information for a given host\n+ * @param conf SparkConf to get required properties, if needed\n+ */\n+@DeveloperApi\n+abstract class TopologyMapper(conf: SparkConf) {\n+  /**\n+   * Gets the topology information given the host name\n+   *\n+   * @param hostname Hostname\n+   * @return topology information for the given hostname. One can use a 'topology delimiter'\n+   *         to make this topology information nested.\n+   *         For example : ‘/myrack/myhost’, where ‘/’ is the topology delimiter,\n+   *         ‘myrack’ is the topology identifier, and ‘myhost’ is the individual host.\n+   *         This function only returns the topology information without the hostname.\n+   */\n+  def getTopologyForHost(hostname: String): String\n+}\n+\n+@DeveloperApi\n+class DefaultTopologyMapper(conf: SparkConf) extends TopologyMapper(conf) with Logging {\n+  override def getTopologyForHost(hostname: String): String = {\n+    logDebug(s\"Got a request for $hostname\")\n+    \"DefaultRack\"\n+  }\n+}\n+\n+/**\n+ * A simple file based topology mapper. This expects topology information provided as a\n+ * [[java.util.Properties]] file. The name of the file is obtained from SparkConf property\n+ * `spark.replication.topologyawareness.topologyfile`. To use this topology mapper, set the"
  }],
  "prId": 13152
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "can you document what an empty string means?\n",
    "commit": "632d0436ca701031e03bd141b95d4b0bb5544150",
    "createdAt": "2016-08-19T04:23:59Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import java.io.{File, FileInputStream}\n+import java.util.Properties\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.SparkConf\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * ::DeveloperApi::\n+ * TopologyMapper provides topology information for a given host\n+ * @param conf SparkConf to get required properties, if needed\n+ */\n+@DeveloperApi\n+abstract class TopologyMapper(conf: SparkConf) {\n+  /**\n+   * Gets the topology information given the host name\n+   *\n+   * @param hostname Hostname\n+   * @return topology information for the given hostname. One can use a 'topology delimiter'\n+   *         to make this topology information nested.\n+   *         For example : ‘/myrack/myhost’, where ‘/’ is the topology delimiter,\n+   *         ‘myrack’ is the topology identifier, and ‘myhost’ is the individual host.\n+   *         This function only returns the topology information without the hostname.",
    "line": 40
  }],
  "prId": 13152
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "I was looking at existing configs - can we change the config to\n\n```\nspark.storage.replication.topologyFile\n```\n",
    "commit": "632d0436ca701031e03bd141b95d4b0bb5544150",
    "createdAt": "2016-08-25T02:06:41Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * ::DeveloperApi::\n+ * TopologyMapper provides topology information for a given host\n+ * @param conf SparkConf to get required properties, if needed\n+ */\n+@DeveloperApi\n+abstract class TopologyMapper(conf: SparkConf) {\n+  /**\n+   * Gets the topology information given the host name\n+   *\n+   * @param hostname Hostname\n+   * @return topology information for the given hostname. One can use a 'topology delimiter'\n+   *         to make this topology information nested.\n+   *         For example : ‘/myrack/myhost’, where ‘/’ is the topology delimiter,\n+   *         ‘myrack’ is the topology identifier, and ‘myhost’ is the individual host.\n+   *         This function only returns the topology information without the hostname.\n+   *         This information can be used when choosing executors for block replication\n+   *         to discern executors from a different rack than a candidate executor, for example.\n+   *\n+   *         An implementation can choose to use empty strings or None in case topology info\n+   *         is not available. This would imply that all such executors belong to the same rack.\n+   */\n+  def getTopologyForHost(hostname: String): Option[String]\n+}\n+\n+@DeveloperApi\n+class DefaultTopologyMapper(conf: SparkConf) extends TopologyMapper(conf) with Logging {\n+  override def getTopologyForHost(hostname: String): Option[String] = {\n+    logDebug(s\"Got a request for $hostname\")\n+    Some(\"DefaultRack\")\n+  }\n+}\n+\n+/**\n+ * A simple file based topology mapper. This expects topology information provided as a\n+ * [[java.util.Properties]] file. The name of the file is obtained from SparkConf property\n+ * `spark.replication.topologyawareness.topologyFile`. To use this topology mapper, set the\n+ * `spark.replication.topologyawareness.topologyMapper` property to\n+ * [[org.apache.spark.storage.FileBasedTopologyMapper]]\n+ * @param conf SparkConf object\n+ */\n+@DeveloperApi\n+class FileBasedTopologyMapper(conf: SparkConf) extends TopologyMapper(conf) with Logging {\n+  val topologyFile = conf.getOption(\"spark.replication.topologyawareness.topologyfile\")"
  }],
  "prId": 13152
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "\"Please specify topology file via spark.storage.replication.topologyFile for FileBasedTopologyMapper.\"\n",
    "commit": "632d0436ca701031e03bd141b95d4b0bb5544150",
    "createdAt": "2016-08-25T02:07:02Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * ::DeveloperApi::\n+ * TopologyMapper provides topology information for a given host\n+ * @param conf SparkConf to get required properties, if needed\n+ */\n+@DeveloperApi\n+abstract class TopologyMapper(conf: SparkConf) {\n+  /**\n+   * Gets the topology information given the host name\n+   *\n+   * @param hostname Hostname\n+   * @return topology information for the given hostname. One can use a 'topology delimiter'\n+   *         to make this topology information nested.\n+   *         For example : ‘/myrack/myhost’, where ‘/’ is the topology delimiter,\n+   *         ‘myrack’ is the topology identifier, and ‘myhost’ is the individual host.\n+   *         This function only returns the topology information without the hostname.\n+   *         This information can be used when choosing executors for block replication\n+   *         to discern executors from a different rack than a candidate executor, for example.\n+   *\n+   *         An implementation can choose to use empty strings or None in case topology info\n+   *         is not available. This would imply that all such executors belong to the same rack.\n+   */\n+  def getTopologyForHost(hostname: String): Option[String]\n+}\n+\n+@DeveloperApi\n+class DefaultTopologyMapper(conf: SparkConf) extends TopologyMapper(conf) with Logging {\n+  override def getTopologyForHost(hostname: String): Option[String] = {\n+    logDebug(s\"Got a request for $hostname\")\n+    Some(\"DefaultRack\")\n+  }\n+}\n+\n+/**\n+ * A simple file based topology mapper. This expects topology information provided as a\n+ * [[java.util.Properties]] file. The name of the file is obtained from SparkConf property\n+ * `spark.replication.topologyawareness.topologyFile`. To use this topology mapper, set the\n+ * `spark.replication.topologyawareness.topologyMapper` property to\n+ * [[org.apache.spark.storage.FileBasedTopologyMapper]]\n+ * @param conf SparkConf object\n+ */\n+@DeveloperApi\n+class FileBasedTopologyMapper(conf: SparkConf) extends TopologyMapper(conf) with Logging {\n+  val topologyFile = conf.getOption(\"spark.replication.topologyawareness.topologyfile\")\n+  require(topologyFile.isDefined, \"Please provide topology file for FileBasedTopologyMapper.\")"
  }],
  "prId": 13152
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "should this return None instead?\n",
    "commit": "632d0436ca701031e03bd141b95d4b0bb5544150",
    "createdAt": "2016-08-25T02:07:15Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * ::DeveloperApi::\n+ * TopologyMapper provides topology information for a given host\n+ * @param conf SparkConf to get required properties, if needed\n+ */\n+@DeveloperApi\n+abstract class TopologyMapper(conf: SparkConf) {\n+  /**\n+   * Gets the topology information given the host name\n+   *\n+   * @param hostname Hostname\n+   * @return topology information for the given hostname. One can use a 'topology delimiter'\n+   *         to make this topology information nested.\n+   *         For example : ‘/myrack/myhost’, where ‘/’ is the topology delimiter,\n+   *         ‘myrack’ is the topology identifier, and ‘myhost’ is the individual host.\n+   *         This function only returns the topology information without the hostname.\n+   *         This information can be used when choosing executors for block replication\n+   *         to discern executors from a different rack than a candidate executor, for example.\n+   *\n+   *         An implementation can choose to use empty strings or None in case topology info\n+   *         is not available. This would imply that all such executors belong to the same rack.\n+   */\n+  def getTopologyForHost(hostname: String): Option[String]\n+}\n+\n+@DeveloperApi\n+class DefaultTopologyMapper(conf: SparkConf) extends TopologyMapper(conf) with Logging {\n+  override def getTopologyForHost(hostname: String): Option[String] = {\n+    logDebug(s\"Got a request for $hostname\")\n+    Some(\"DefaultRack\")"
  }],
  "prId": 13152
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "add a simple classdoc here - something like \"A TopologyMapper that assumes all nodes are in the same rack\" \n",
    "commit": "632d0436ca701031e03bd141b95d4b0bb5544150",
    "createdAt": "2016-08-25T02:09:01Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * ::DeveloperApi::\n+ * TopologyMapper provides topology information for a given host\n+ * @param conf SparkConf to get required properties, if needed\n+ */\n+@DeveloperApi\n+abstract class TopologyMapper(conf: SparkConf) {\n+  /**\n+   * Gets the topology information given the host name\n+   *\n+   * @param hostname Hostname\n+   * @return topology information for the given hostname. One can use a 'topology delimiter'\n+   *         to make this topology information nested.\n+   *         For example : ‘/myrack/myhost’, where ‘/’ is the topology delimiter,\n+   *         ‘myrack’ is the topology identifier, and ‘myhost’ is the individual host.\n+   *         This function only returns the topology information without the hostname.\n+   *         This information can be used when choosing executors for block replication\n+   *         to discern executors from a different rack than a candidate executor, for example.\n+   *\n+   *         An implementation can choose to use empty strings or None in case topology info\n+   *         is not available. This would imply that all such executors belong to the same rack.\n+   */\n+  def getTopologyForHost(hostname: String): Option[String]\n+}\n+\n+@DeveloperApi\n+class DefaultTopologyMapper(conf: SparkConf) extends TopologyMapper(conf) with Logging {"
  }],
  "prId": 13152
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "can we add a unit test for FileBasedTopologyMapper itself?\n",
    "commit": "632d0436ca701031e03bd141b95d4b0bb5544150",
    "createdAt": "2016-08-25T02:10:25Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * ::DeveloperApi::\n+ * TopologyMapper provides topology information for a given host\n+ * @param conf SparkConf to get required properties, if needed\n+ */\n+@DeveloperApi\n+abstract class TopologyMapper(conf: SparkConf) {\n+  /**\n+   * Gets the topology information given the host name\n+   *\n+   * @param hostname Hostname\n+   * @return topology information for the given hostname. One can use a 'topology delimiter'\n+   *         to make this topology information nested.\n+   *         For example : ‘/myrack/myhost’, where ‘/’ is the topology delimiter,\n+   *         ‘myrack’ is the topology identifier, and ‘myhost’ is the individual host.\n+   *         This function only returns the topology information without the hostname.\n+   *         This information can be used when choosing executors for block replication\n+   *         to discern executors from a different rack than a candidate executor, for example.\n+   *\n+   *         An implementation can choose to use empty strings or None in case topology info\n+   *         is not available. This would imply that all such executors belong to the same rack.\n+   */\n+  def getTopologyForHost(hostname: String): Option[String]\n+}\n+\n+@DeveloperApi\n+class DefaultTopologyMapper(conf: SparkConf) extends TopologyMapper(conf) with Logging {\n+  override def getTopologyForHost(hostname: String): Option[String] = {\n+    logDebug(s\"Got a request for $hostname\")\n+    Some(\"DefaultRack\")\n+  }\n+}\n+\n+/**\n+ * A simple file based topology mapper. This expects topology information provided as a\n+ * [[java.util.Properties]] file. The name of the file is obtained from SparkConf property\n+ * `spark.replication.topologyawareness.topologyFile`. To use this topology mapper, set the\n+ * `spark.replication.topologyawareness.topologyMapper` property to\n+ * [[org.apache.spark.storage.FileBasedTopologyMapper]]\n+ * @param conf SparkConf object\n+ */\n+@DeveloperApi\n+class FileBasedTopologyMapper(conf: SparkConf) extends TopologyMapper(conf) with Logging {",
    "line": 70
  }],
  "prId": 13152
}]