[{
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "This should probably be placed next to the previous group of variables (the one that holds `failed`, `pending`, etc).  It should also be private.\n",
    "commit": "d2a7033360d96112b85715270c4b521d180daf5e",
    "createdAt": "2014-12-05T02:40:03Z",
    "diffHunk": "@@ -26,6 +29,17 @@ private[storage] class BlockInfo(val level: StorageLevel, val tellMaster: Boolea\n   private def failed: Boolean = size == BlockInfo.BLOCK_FAILED\n   private def initThread: Thread = BlockInfo.blockInfoInitThreads.get(this)\n \n+  val lock = new ReentrantLock()\n+  private val waitNCondition = lock.newCondition()\n+  private val wait1Condition = lock.newCondition()\n+\n+  val waitTypes = new WaitType(new mutable.HashMap +=\n+                            (\"PUT\" -> waitNCondition,\n+                            \"DROP\" -> wait1Condition,\n+                            \"GET\" -> wait1Condition))\n+\n+  var removed = false"
  }],
  "prId": 3582
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "I think you can just do  `Map(\"PUT\" -> waitNCondition, \"DROP\" -> wait1Condition, \"GET\" -> wait1Condition)` instead of using a mutable map.\n",
    "commit": "d2a7033360d96112b85715270c4b521d180daf5e",
    "createdAt": "2014-12-05T02:40:51Z",
    "diffHunk": "@@ -26,6 +29,17 @@ private[storage] class BlockInfo(val level: StorageLevel, val tellMaster: Boolea\n   private def failed: Boolean = size == BlockInfo.BLOCK_FAILED\n   private def initThread: Thread = BlockInfo.blockInfoInitThreads.get(this)\n \n+  val lock = new ReentrantLock()\n+  private val waitNCondition = lock.newCondition()\n+  private val wait1Condition = lock.newCondition()\n+\n+  val waitTypes = new WaitType(new mutable.HashMap +="
  }],
  "prId": 3582
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "These variables could use comments to explain what they're used for.\n",
    "commit": "d2a7033360d96112b85715270c4b521d180daf5e",
    "createdAt": "2014-12-05T02:41:35Z",
    "diffHunk": "@@ -26,6 +29,17 @@ private[storage] class BlockInfo(val level: StorageLevel, val tellMaster: Boolea\n   private def failed: Boolean = size == BlockInfo.BLOCK_FAILED\n   private def initThread: Thread = BlockInfo.blockInfoInitThreads.get(this)\n \n+  val lock = new ReentrantLock()\n+  private val waitNCondition = lock.newCondition()"
  }],
  "prId": 3582
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "I'm having a hard time understanding this class.  Can you please add comments to explain it?\n",
    "commit": "d2a7033360d96112b85715270c4b521d180daf5e",
    "createdAt": "2014-12-05T02:44:26Z",
    "diffHunk": "@@ -81,3 +101,45 @@ private object BlockInfo {\n   private val BLOCK_PENDING: Long = -1L\n   private val BLOCK_FAILED: Long = -2L\n }\n+\n+class WaitType(conditions: mutable.HashMap[String, Condition]) extends Enumeration {"
  }],
  "prId": 3582
}]