[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Maybe reorder imports.. (See [scala-style-guide#imports](https://github.com/databricks/scala-style-guide#imports))\n",
    "commit": "632d0436ca701031e03bd141b95d4b0bb5544150",
    "createdAt": "2016-05-18T02:15:32Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import org.apache.spark.annotation.DeveloperApi\n+\n+import scala.util.Random\n+import org.apache.spark.internal.Logging"
  }],
  "prId": 13152
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Maybe indentation as below:\n\n``` scala\ndef prioritize(peers: Seq[BlockManagerId],\n  peersReplicatedTo: Set[BlockManagerId],\n  blockId: BlockId): Seq[BlockManagerId]\n```\n",
    "commit": "632d0436ca701031e03bd141b95d4b0bb5544150",
    "createdAt": "2016-05-18T02:16:11Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import org.apache.spark.annotation.DeveloperApi\n+\n+import scala.util.Random\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * ::DeveloperApi::\n+ * BlockReplicationPrioritization provides logic for prioritizing a sequence of peers for\n+ * replicating blocks\n+ */\n+@DeveloperApi\n+trait BlockReplicationPrioritization {\n+\n+  /**\n+   * Method to prioritize a bunch of candidate peers of a block\n+   *\n+   * @param peers A list of peers of a BlockManager\n+   * @param peersReplicatedTo Set of peers already replicated to\n+   * @param blockId BlockId of the block being replicated. This can be used as a source of\n+   *                randomness if needed.\n+   * @return A prioritized list of peers. Lower the index of a peer, higher its priority\n+   */\n+  def prioritize(peers: Seq[BlockManagerId],\n+                 peersReplicatedTo: Set[BlockManagerId],\n+                 blockId: BlockId): Seq[BlockManagerId]"
  }],
  "prId": 13152
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Here too..\n\n``` scala\noverride def prioritize(peers: Seq[BlockManagerId],\n  peersReplicatedTo: Set[BlockManagerId],\n  blockId: BlockId): Seq[BlockManagerId] = {\n```\n",
    "commit": "632d0436ca701031e03bd141b95d4b0bb5544150",
    "createdAt": "2016-05-18T02:16:39Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import org.apache.spark.annotation.DeveloperApi\n+\n+import scala.util.Random\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * ::DeveloperApi::\n+ * BlockReplicationPrioritization provides logic for prioritizing a sequence of peers for\n+ * replicating blocks\n+ */\n+@DeveloperApi\n+trait BlockReplicationPrioritization {\n+\n+  /**\n+   * Method to prioritize a bunch of candidate peers of a block\n+   *\n+   * @param peers A list of peers of a BlockManager\n+   * @param peersReplicatedTo Set of peers already replicated to\n+   * @param blockId BlockId of the block being replicated. This can be used as a source of\n+   *                randomness if needed.\n+   * @return A prioritized list of peers. Lower the index of a peer, higher its priority\n+   */\n+  def prioritize(peers: Seq[BlockManagerId],\n+                 peersReplicatedTo: Set[BlockManagerId],\n+                 blockId: BlockId): Seq[BlockManagerId]\n+}\n+\n+@DeveloperApi\n+class DefaultBlockReplicationPrioritization(host: String)\n+  extends BlockReplicationPrioritization\n+  with Logging {\n+\n+  /**\n+   * Method to prioritize a bunch of candidate peers of a block. This is a basic implementation,\n+   * that just makes sure we put blocks on different hosts, if possible\n+   *\n+   * @param peers A list of peers of a BlockManager\n+   * @param peersReplicatedTo Set of peers already replicated to\n+   * @param blockId BlockId of the block being replicated. This can be used as a source of\n+   *                randomness if needed.\n+   * @return A prioritized list of peers. Lower the index of a peer, higher its priority\n+   */\n+  override def prioritize(peers: Seq[BlockManagerId],\n+                          peersReplicatedTo: Set[BlockManagerId],\n+                          blockId: BlockId): Seq[BlockManagerId] = {"
  }],
  "prId": 13152
}, {
  "comments": [{
    "author": {
      "login": "ericl"
    },
    "body": "style\n",
    "commit": "632d0436ca701031e03bd141b95d4b0bb5544150",
    "createdAt": "2016-08-04T22:43:32Z",
    "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.util.Random\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * ::DeveloperApi::\n+ * BlockReplicationPrioritization provides logic for prioritizing a sequence of peers for\n+ * replicating blocks\n+ */\n+@DeveloperApi\n+trait BlockReplicationPrioritization {\n+\n+  /**\n+   * Method to prioritize a bunch of candidate peers of a block\n+   *\n+   * @param blockManagerId Id of the current BlockManager for self identification\n+   * @param peers A list of peers of a BlockManager\n+   * @param peersReplicatedTo Set of peers already replicated to\n+   * @param blockId BlockId of the block being replicated. This can be used as a source of\n+   *                randomness if needed.\n+   * @return A prioritized list of peers. Lower the index of a peer, higher its priority\n+   */\n+  def prioritize(blockManagerId: BlockManagerId,"
  }],
  "prId": 13152
}, {
  "comments": [{
    "author": {
      "login": "ericl"
    },
    "body": "style\n",
    "commit": "632d0436ca701031e03bd141b95d4b0bb5544150",
    "createdAt": "2016-08-04T22:43:36Z",
    "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.util.Random\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * ::DeveloperApi::\n+ * BlockReplicationPrioritization provides logic for prioritizing a sequence of peers for\n+ * replicating blocks\n+ */\n+@DeveloperApi\n+trait BlockReplicationPrioritization {\n+\n+  /**\n+   * Method to prioritize a bunch of candidate peers of a block\n+   *\n+   * @param blockManagerId Id of the current BlockManager for self identification\n+   * @param peers A list of peers of a BlockManager\n+   * @param peersReplicatedTo Set of peers already replicated to\n+   * @param blockId BlockId of the block being replicated. This can be used as a source of\n+   *                randomness if needed.\n+   * @return A prioritized list of peers. Lower the index of a peer, higher its priority\n+   */\n+  def prioritize(blockManagerId: BlockManagerId,\n+    peers: Seq[BlockManagerId],\n+    peersReplicatedTo: Set[BlockManagerId],\n+    blockId: BlockId): Seq[BlockManagerId]\n+}\n+\n+@DeveloperApi\n+class DefaultBlockReplicationPrioritization\n+  extends BlockReplicationPrioritization\n+  with Logging {\n+\n+  /**\n+   * Method to prioritize a bunch of candidate peers of a block. This is a basic implementation,\n+   * that just makes sure we put blocks on different hosts, if possible\n+   *\n+   * @param blockManagerId Id of the current BlockManager for self identification\n+   * @param peers A list of peers of a BlockManager\n+   * @param peersReplicatedTo Set of peers already replicated to\n+   * @param blockId BlockId of the block being replicated. This can be used as a source of\n+   *                randomness if needed.\n+   * @return A prioritized list of peers. Lower the index of a peer, higher its priority\n+   */\n+  override def prioritize(blockManagerId: BlockManagerId,"
  }],
  "prId": 13152
}, {
  "comments": [{
    "author": {
      "login": "ericl"
    },
    "body": "add: BlockManager will replicate to each peer returned in order until the desired replication order is reached. If a replication fails, prioritize() will be called again to get a fresh prioritization.\n",
    "commit": "632d0436ca701031e03bd141b95d4b0bb5544150",
    "createdAt": "2016-08-09T23:13:19Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.util.Random\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * ::DeveloperApi::\n+ * BlockReplicationPrioritization provides logic for prioritizing a sequence of peers for\n+ * replicating blocks"
  }],
  "prId": 13152
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "so the Spark style for indentation is to have 4 spaces for function arguments, i.e.\n\n``` scala\noverride def prioritize(\n    blockManagerId: BlockManagerId,,\n    peers: Seq[BlockManagerId],\n    peersReplicatedTo: Set[BlockManagerId],\n    blockId: BlockId): Seq[BlockManagerId] = {\n  val random = new Random(blockId.hashCode)\n  ...\n}\n```\n",
    "commit": "632d0436ca701031e03bd141b95d4b0bb5544150",
    "createdAt": "2016-08-19T04:25:55Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.util.Random\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * ::DeveloperApi::\n+ * BlockReplicationPrioritization provides logic for prioritizing a sequence of peers for\n+ * replicating blocks. BlockManager will replicate to each peer returned in order until the\n+ * desired replication order is reached. If a replication fails, prioritize() will be called\n+ * again to get a fresh prioritization.\n+ */\n+@DeveloperApi\n+trait BlockReplicationPrioritization {\n+\n+  /**\n+   * Method to prioritize a bunch of candidate peers of a block\n+   *\n+   * @param blockManagerId Id of the current BlockManager for self identification\n+   * @param peers A list of peers of a BlockManager\n+   * @param peersReplicatedTo Set of peers already replicated to\n+   * @param blockId BlockId of the block being replicated. This can be used as a source of\n+   *                randomness if needed.\n+   * @return A prioritized list of peers. Lower the index of a peer, higher its priority\n+   */\n+  def prioritize(\n+    blockManagerId: BlockManagerId,\n+    peers: Seq[BlockManagerId],\n+    peersReplicatedTo: Set[BlockManagerId],\n+    blockId: BlockId): Seq[BlockManagerId]\n+}\n+\n+@DeveloperApi\n+class DefaultBlockReplicationPrioritization\n+  extends BlockReplicationPrioritization\n+  with Logging {\n+\n+  /**\n+   * Method to prioritize a bunch of candidate peers of a block. This is a basic implementation,\n+   * that just makes sure we put blocks on different hosts, if possible\n+   *\n+   * @param blockManagerId Id of the current BlockManager for self identification\n+   * @param peers A list of peers of a BlockManager\n+   * @param peersReplicatedTo Set of peers already replicated to\n+   * @param blockId BlockId of the block being replicated. This can be used as a source of\n+   *                randomness if needed.\n+   * @return A prioritized list of peers. Lower the index of a peer, higher its priority\n+   */\n+  override def prioritize(\n+    blockManagerId: BlockManagerId,"
  }],
  "prId": 13152
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "instead of Default, I'd call this RandomBlockReplicationPrioritization to better reflect what it does.\n",
    "commit": "632d0436ca701031e03bd141b95d4b0bb5544150",
    "createdAt": "2016-08-19T04:26:55Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.util.Random\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * ::DeveloperApi::\n+ * BlockReplicationPrioritization provides logic for prioritizing a sequence of peers for\n+ * replicating blocks. BlockManager will replicate to each peer returned in order until the\n+ * desired replication order is reached. If a replication fails, prioritize() will be called\n+ * again to get a fresh prioritization.\n+ */\n+@DeveloperApi\n+trait BlockReplicationPrioritization {\n+\n+  /**\n+   * Method to prioritize a bunch of candidate peers of a block\n+   *\n+   * @param blockManagerId Id of the current BlockManager for self identification\n+   * @param peers A list of peers of a BlockManager\n+   * @param peersReplicatedTo Set of peers already replicated to\n+   * @param blockId BlockId of the block being replicated. This can be used as a source of\n+   *                randomness if needed.\n+   * @return A prioritized list of peers. Lower the index of a peer, higher its priority\n+   */\n+  def prioritize(\n+    blockManagerId: BlockManagerId,\n+    peers: Seq[BlockManagerId],\n+    peersReplicatedTo: Set[BlockManagerId],\n+    blockId: BlockId): Seq[BlockManagerId]\n+}\n+\n+@DeveloperApi\n+class DefaultBlockReplicationPrioritization"
  }],
  "prId": 13152
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "is passing in all the peers a performance concern?\n",
    "commit": "632d0436ca701031e03bd141b95d4b0bb5544150",
    "createdAt": "2016-08-19T04:27:09Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.util.Random\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * ::DeveloperApi::\n+ * BlockReplicationPrioritization provides logic for prioritizing a sequence of peers for\n+ * replicating blocks. BlockManager will replicate to each peer returned in order until the\n+ * desired replication order is reached. If a replication fails, prioritize() will be called\n+ * again to get a fresh prioritization.\n+ */\n+@DeveloperApi\n+trait BlockReplicationPrioritization {\n+\n+  /**\n+   * Method to prioritize a bunch of candidate peers of a block\n+   *\n+   * @param blockManagerId Id of the current BlockManager for self identification\n+   * @param peers A list of peers of a BlockManager\n+   * @param peersReplicatedTo Set of peers already replicated to\n+   * @param blockId BlockId of the block being replicated. This can be used as a source of\n+   *                randomness if needed.\n+   * @return A prioritized list of peers. Lower the index of a peer, higher its priority\n+   */\n+  def prioritize(\n+    blockManagerId: BlockManagerId,\n+    peers: Seq[BlockManagerId],"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "also rather than a full prioritization, can we also pass in a number of replicas wanted and just return a smaller list there?\n",
    "commit": "632d0436ca701031e03bd141b95d4b0bb5544150",
    "createdAt": "2016-08-19T04:28:06Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.util.Random\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * ::DeveloperApi::\n+ * BlockReplicationPrioritization provides logic for prioritizing a sequence of peers for\n+ * replicating blocks. BlockManager will replicate to each peer returned in order until the\n+ * desired replication order is reached. If a replication fails, prioritize() will be called\n+ * again to get a fresh prioritization.\n+ */\n+@DeveloperApi\n+trait BlockReplicationPrioritization {\n+\n+  /**\n+   * Method to prioritize a bunch of candidate peers of a block\n+   *\n+   * @param blockManagerId Id of the current BlockManager for self identification\n+   * @param peers A list of peers of a BlockManager\n+   * @param peersReplicatedTo Set of peers already replicated to\n+   * @param blockId BlockId of the block being replicated. This can be used as a source of\n+   *                randomness if needed.\n+   * @return A prioritized list of peers. Lower the index of a peer, higher its priority\n+   */\n+  def prioritize(\n+    blockManagerId: BlockManagerId,\n+    peers: Seq[BlockManagerId],"
  }],
  "prId": 13152
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "can we just name this BlockReplicationPolicy?\n",
    "commit": "632d0436ca701031e03bd141b95d4b0bb5544150",
    "createdAt": "2016-08-19T04:36:41Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.util.Random\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.internal.Logging\n+\n+/**\n+ * ::DeveloperApi::\n+ * BlockReplicationPrioritization provides logic for prioritizing a sequence of peers for\n+ * replicating blocks. BlockManager will replicate to each peer returned in order until the\n+ * desired replication order is reached. If a replication fails, prioritize() will be called\n+ * again to get a fresh prioritization.\n+ */\n+@DeveloperApi\n+trait BlockReplicationPrioritization {"
  }],
  "prId": 13152
}]