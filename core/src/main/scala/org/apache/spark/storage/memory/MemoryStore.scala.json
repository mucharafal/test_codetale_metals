[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "This is the same approach we used in `putIteratorAsValues`. One thing still missing is `memoryGrowthFactor`, can we add that too?",
    "commit": "e1dc7a46afb99fba9b489e6a5359bc347799e876",
    "createdAt": "2017-09-14T08:03:58Z",
    "diffHunk": "@@ -325,6 +325,10 @@ private[spark] class MemoryStore(\n \n     // Whether there is still enough memory for us to continue unrolling this block\n     var keepUnrolling = true\n+    // Number of elements unrolled so far\n+    var elementsUnrolled = 0L\n+    // How often to check whether we need to request more memory\n+    val memoryCheckPeriod = 16"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "in the future we should do some refactor between `putIteratorAsValues` and `putIteratorAsBytes`, to reduce duplicated code.",
    "commit": "e1dc7a46afb99fba9b489e6a5359bc347799e876",
    "createdAt": "2017-09-14T08:04:56Z",
    "diffHunk": "@@ -325,6 +325,10 @@ private[spark] class MemoryStore(\n \n     // Whether there is still enough memory for us to continue unrolling this block\n     var keepUnrolling = true\n+    // Number of elements unrolled so far\n+    var elementsUnrolled = 0L\n+    // How often to check whether we need to request more memory\n+    val memoryCheckPeriod = 16"
  }, {
    "author": {
      "login": "ConeyLiu"
    },
    "body": "OK, I'll add it. I think I can take a try to refactor it. Do you need a separate pr?",
    "commit": "e1dc7a46afb99fba9b489e6a5359bc347799e876",
    "createdAt": "2017-09-14T11:46:51Z",
    "diffHunk": "@@ -325,6 +325,10 @@ private[spark] class MemoryStore(\n \n     // Whether there is still enough memory for us to continue unrolling this block\n     var keepUnrolling = true\n+    // Number of elements unrolled so far\n+    var elementsUnrolled = 0L\n+    // How often to check whether we need to request more memory\n+    val memoryCheckPeriod = 16"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "yea definitely not in this PR.",
    "commit": "e1dc7a46afb99fba9b489e6a5359bc347799e876",
    "createdAt": "2017-09-14T15:12:38Z",
    "diffHunk": "@@ -325,6 +325,10 @@ private[spark] class MemoryStore(\n \n     // Whether there is still enough memory for us to continue unrolling this block\n     var keepUnrolling = true\n+    // Number of elements unrolled so far\n+    var elementsUnrolled = 0L\n+    // How often to check whether we need to request more memory\n+    val memoryCheckPeriod = 16"
  }],
  "prId": 19135
}, {
  "comments": [{
    "author": {
      "login": "jiangxb1987"
    },
    "body": "Should this be made configurable? Or can we make sure it's the best magic number that we can choose?",
    "commit": "e1dc7a46afb99fba9b489e6a5359bc347799e876",
    "createdAt": "2017-09-14T19:48:37Z",
    "diffHunk": "@@ -325,6 +325,10 @@ private[spark] class MemoryStore(\n \n     // Whether there is still enough memory for us to continue unrolling this block\n     var keepUnrolling = true\n+    // Number of elements unrolled so far\n+    var elementsUnrolled = 0L\n+    // How often to check whether we need to request more memory\n+    val memoryCheckPeriod = 16"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "it's hard coded in `putIteratorAsValues` too, we can improve it later.",
    "commit": "e1dc7a46afb99fba9b489e6a5359bc347799e876",
    "createdAt": "2017-09-15T01:34:14Z",
    "diffHunk": "@@ -325,6 +325,10 @@ private[spark] class MemoryStore(\n \n     // Whether there is still enough memory for us to continue unrolling this block\n     var keepUnrolling = true\n+    // Number of elements unrolled so far\n+    var elementsUnrolled = 0L\n+    // How often to check whether we need to request more memory\n+    val memoryCheckPeriod = 16"
  }, {
    "author": {
      "login": "ConeyLiu"
    },
    "body": "I have just made it configurable. I'm not sure if this writting is reasonable. ",
    "commit": "e1dc7a46afb99fba9b489e6a5359bc347799e876",
    "createdAt": "2017-09-15T01:53:39Z",
    "diffHunk": "@@ -325,6 +325,10 @@ private[spark] class MemoryStore(\n \n     // Whether there is still enough memory for us to continue unrolling this block\n     var keepUnrolling = true\n+    // Number of elements unrolled so far\n+    var elementsUnrolled = 0L\n+    // How often to check whether we need to request more memory\n+    val memoryCheckPeriod = 16"
  }],
  "prId": 19135
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "we should move these 2 configs to `org.apache.spark.internal.config` and add some documents. They should be internal config I think.",
    "commit": "e1dc7a46afb99fba9b489e6a5359bc347799e876",
    "createdAt": "2017-09-15T14:30:59Z",
    "diffHunk": "@@ -190,11 +190,11 @@ private[spark] class MemoryStore(\n     // Initial per-task memory to request for unrolling blocks (bytes).\n     val initialMemoryThreshold = unrollMemoryThreshold\n     // How often to check whether we need to request more memory\n-    val memoryCheckPeriod = 16\n+    val memoryCheckPeriod = conf.getLong(\"spark.storage.unrollMemoryCheckPeriod\", 16)"
  }, {
    "author": {
      "login": "ConeyLiu"
    },
    "body": "OK, moved. Pls take a took.",
    "commit": "e1dc7a46afb99fba9b489e6a5359bc347799e876",
    "createdAt": "2017-09-17T12:39:05Z",
    "diffHunk": "@@ -190,11 +190,11 @@ private[spark] class MemoryStore(\n     // Initial per-task memory to request for unrolling blocks (bytes).\n     val initialMemoryThreshold = unrollMemoryThreshold\n     // How often to check whether we need to request more memory\n-    val memoryCheckPeriod = 16\n+    val memoryCheckPeriod = conf.getLong(\"spark.storage.unrollMemoryCheckPeriod\", 16)"
  }],
  "prId": 19135
}]