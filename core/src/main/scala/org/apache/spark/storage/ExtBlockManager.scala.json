[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "It's better to just have a shutdownHook function that we call during shutdown, and not ask the implementation to add the function to the jvm's sthudown hook.\n",
    "commit": "60acd8435ca8f4799de44ae07fa749b544f33280",
    "createdAt": "2015-04-23T00:31:02Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import java.nio.ByteBuffer\n+import org.apache.spark.Logging\n+\n+import scala.util.control.NonFatal\n+\n+\n+private[spark] abstract class ExtBlockManager {\n+\n+  /**\n+   * desc for the implementation.\n+   *\n+   */\n+  def desc(): String = {\"External Block Store\"}\n+\n+  /**\n+   * initialize a concrete block manager implementation.\n+   *\n+   * @throws java.io.IOException when FS init failure.\n+   */\n+  def init(blockManager: BlockManager, executorId: String): Unit\n+\n+  /**\n+   * remove the cache from ExtBlkStore\n+   *\n+   * @throws java.io.IOException when FS failure in removing file.\n+   */\n+  def removeFile(blockId: BlockId): Boolean\n+\n+  /**\n+   * check the existence of the block cache\n+   *\n+   * @throws java.io.IOException when FS failure in checking the block existence.\n+   */\n+  def fileExists(blockId: BlockId): Boolean\n+\n+  /**\n+   * save the cache to the ExtBlkStore.\n+   *\n+   * @throws java.io.IOException when FS failure in put blocks.\n+   */\n+  def putBytes(blockId: BlockId, bytes: ByteBuffer)\n+\n+  /**\n+   * retrieve the cache from ExtBlkStore\n+   *\n+   * @throws java.io.IOException when FS failure in get blocks.\n+   */\n+  def getBytes(blockId: BlockId): Option[ByteBuffer]\n+\n+  /**\n+   * retrieve the size of the cache\n+   *\n+   * @throws java.io.IOException when FS failure in get block size.\n+   */\n+  def getSize(blockId: BlockId): Long\n+\n+  /**\n+   * cleanup when shutdown\n+   *\n+   */\n+  def addShutdownHook()"
  }],
  "prId": 5430
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "Can you spend some time to improve the documentation of this API? Right now the javadocs are very sloppy. At the very least, we should:\n1. Write complete English sentences and words. For example \"desc\" is not a proper word.\n2. capitalize the first letters\n",
    "commit": "60acd8435ca8f4799de44ae07fa749b544f33280",
    "createdAt": "2015-04-23T00:33:23Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import java.nio.ByteBuffer\n+import org.apache.spark.Logging\n+\n+import scala.util.control.NonFatal\n+\n+\n+private[spark] abstract class ExtBlockManager {\n+\n+  /**\n+   * desc for the implementation."
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "I pointed out a few things, but in general would be great to improve the documentation here, beyond the things I've pointed out.\n",
    "commit": "60acd8435ca8f4799de44ae07fa749b544f33280",
    "createdAt": "2015-04-23T00:35:15Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import java.nio.ByteBuffer\n+import org.apache.spark.Logging\n+\n+import scala.util.control.NonFatal\n+\n+\n+private[spark] abstract class ExtBlockManager {\n+\n+  /**\n+   * desc for the implementation."
  }],
  "prId": 5430
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "this is not used, is it?\n",
    "commit": "60acd8435ca8f4799de44ae07fa749b544f33280",
    "createdAt": "2015-04-23T00:33:37Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import java.nio.ByteBuffer\n+import org.apache.spark.Logging\n+\n+import scala.util.control.NonFatal"
  }],
  "prId": 5430
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "this is not used, is it?\n",
    "commit": "60acd8435ca8f4799de44ae07fa749b544f33280",
    "createdAt": "2015-04-23T00:33:47Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import java.nio.ByteBuffer\n+import org.apache.spark.Logging"
  }],
  "prId": 5430
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "removeFile -> removeBlock\n",
    "commit": "60acd8435ca8f4799de44ae07fa749b544f33280",
    "createdAt": "2015-04-23T00:34:19Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import java.nio.ByteBuffer\n+import org.apache.spark.Logging\n+\n+import scala.util.control.NonFatal\n+\n+\n+private[spark] abstract class ExtBlockManager {\n+\n+  /**\n+   * desc for the implementation.\n+   *\n+   */\n+  def desc(): String = {\"External Block Store\"}\n+\n+  /**\n+   * initialize a concrete block manager implementation.\n+   *\n+   * @throws java.io.IOException when FS init failure.\n+   */\n+  def init(blockManager: BlockManager, executorId: String): Unit\n+\n+  /**\n+   * remove the cache from ExtBlkStore\n+   *\n+   * @throws java.io.IOException when FS failure in removing file.\n+   */\n+  def removeFile(blockId: BlockId): Boolean"
  }],
  "prId": 5430
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "blockExists\n",
    "commit": "60acd8435ca8f4799de44ae07fa749b544f33280",
    "createdAt": "2015-04-23T00:34:23Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import java.nio.ByteBuffer\n+import org.apache.spark.Logging\n+\n+import scala.util.control.NonFatal\n+\n+\n+private[spark] abstract class ExtBlockManager {\n+\n+  /**\n+   * desc for the implementation.\n+   *\n+   */\n+  def desc(): String = {\"External Block Store\"}\n+\n+  /**\n+   * initialize a concrete block manager implementation.\n+   *\n+   * @throws java.io.IOException when FS init failure.\n+   */\n+  def init(blockManager: BlockManager, executorId: String): Unit\n+\n+  /**\n+   * remove the cache from ExtBlkStore\n+   *\n+   * @throws java.io.IOException when FS failure in removing file.\n+   */\n+  def removeFile(blockId: BlockId): Boolean\n+\n+  /**\n+   * check the existence of the block cache\n+   *\n+   * @throws java.io.IOException when FS failure in checking the block existence.\n+   */\n+  def fileExists(blockId: BlockId): Boolean"
  }],
  "prId": 5430
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "\"Saves the block into the external block store.\"\n\nDon't use the word \"cache\" here.\n",
    "commit": "60acd8435ca8f4799de44ae07fa749b544f33280",
    "createdAt": "2015-04-23T00:34:50Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import java.nio.ByteBuffer\n+import org.apache.spark.Logging\n+\n+import scala.util.control.NonFatal\n+\n+\n+private[spark] abstract class ExtBlockManager {\n+\n+  /**\n+   * desc for the implementation.\n+   *\n+   */\n+  def desc(): String = {\"External Block Store\"}\n+\n+  /**\n+   * initialize a concrete block manager implementation.\n+   *\n+   * @throws java.io.IOException when FS init failure.\n+   */\n+  def init(blockManager: BlockManager, executorId: String): Unit\n+\n+  /**\n+   * remove the cache from ExtBlkStore\n+   *\n+   * @throws java.io.IOException when FS failure in removing file.\n+   */\n+  def removeFile(blockId: BlockId): Boolean\n+\n+  /**\n+   * check the existence of the block cache\n+   *\n+   * @throws java.io.IOException when FS failure in checking the block existence.\n+   */\n+  def fileExists(blockId: BlockId): Boolean\n+\n+  /**\n+   * save the cache to the ExtBlkStore."
  }],
  "prId": 5430
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "we should document when is None returned. \n",
    "commit": "60acd8435ca8f4799de44ae07fa749b544f33280",
    "createdAt": "2015-04-23T00:36:04Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import java.nio.ByteBuffer\n+import org.apache.spark.Logging\n+\n+import scala.util.control.NonFatal\n+\n+\n+private[spark] abstract class ExtBlockManager {\n+\n+  /**\n+   * desc for the implementation.\n+   *\n+   */\n+  def desc(): String = {\"External Block Store\"}\n+\n+  /**\n+   * initialize a concrete block manager implementation.\n+   *\n+   * @throws java.io.IOException when FS init failure.\n+   */\n+  def init(blockManager: BlockManager, executorId: String): Unit\n+\n+  /**\n+   * remove the cache from ExtBlkStore\n+   *\n+   * @throws java.io.IOException when FS failure in removing file.\n+   */\n+  def removeFile(blockId: BlockId): Boolean\n+\n+  /**\n+   * check the existence of the block cache\n+   *\n+   * @throws java.io.IOException when FS failure in checking the block existence.\n+   */\n+  def fileExists(blockId: BlockId): Boolean\n+\n+  /**\n+   * save the cache to the ExtBlkStore.\n+   *\n+   * @throws java.io.IOException when FS failure in put blocks.\n+   */\n+  def putBytes(blockId: BlockId, bytes: ByteBuffer)\n+\n+  /**\n+   * retrieve the cache from ExtBlkStore\n+   *\n+   * @throws java.io.IOException when FS failure in get blocks.\n+   */\n+  def getBytes(blockId: BlockId): Option[ByteBuffer]"
  }],
  "prId": 5430
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "how is desc going to be used? maybe we should just override toString? \n",
    "commit": "60acd8435ca8f4799de44ae07fa749b544f33280",
    "createdAt": "2015-04-23T00:38:29Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import java.nio.ByteBuffer\n+import org.apache.spark.Logging\n+\n+import scala.util.control.NonFatal\n+\n+\n+private[spark] abstract class ExtBlockManager {\n+\n+  /**\n+   * desc for the implementation.\n+   *\n+   */\n+  def desc(): String = {\"External Block Store\"}"
  }],
  "prId": 5430
}]