[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "put this on the 2nd line.\n",
    "commit": "60acd8435ca8f4799de44ae07fa749b544f33280",
    "createdAt": "2015-04-23T00:35:47Z",
    "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import java.nio.ByteBuffer\n+import org.apache.spark.Logging\n+import org.apache.spark.util.Utils\n+\n+import scala.util.control.NonFatal\n+\n+\n+/**\n+ * Stores BlockManager blocks on ExtBlkStore.\n+ * We capture any potential exception from underlying implementation\n+ * and return with the expected failure value\n+ */\n+private[spark] class ExtBlockStore(blockManager: BlockManager, executorId: String)\n+  extends BlockStore(blockManager: BlockManager) with Logging {\n+\n+  lazy val extBlkStoreManager: Option[ExtBlockManager] = createBlkManager()\n+\n+  logInfo(\"ExtBlkStore started\")\n+\n+  override def getSize(blockId: BlockId): Long = {\n+    try {\n+      extBlkStoreManager.map(_.getSize(blockId)).getOrElse(0)\n+    } catch {\n+      case NonFatal(t) => logError(s\"error in getSize from $blockId\", t)"
  }],
  "prId": 5430
}]