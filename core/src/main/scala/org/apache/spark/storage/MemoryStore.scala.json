[{
  "comments": [{
    "author": {
      "login": "nongli"
    },
    "body": "What are the semantics here? It seems reasonable for another thread to get this block. Who calls remove?\n",
    "commit": "9becde3d94ea41bba9e275b9108c61b91074f035",
    "createdAt": "2016-01-14T22:48:44Z",
    "diffHunk": "@@ -213,6 +213,11 @@ private[spark] class MemoryStore(blockManager: BlockManager, memoryManager: Memo\n   }\n \n   override def remove(blockId: BlockId): Boolean = memoryManager.synchronized {\n+    val referenceCount = blockManager.getReferenceCount(blockId)"
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "`MemoryStore.remove()` is called in a few places:\n- When removing a block in `BlockManager.removeBlock()`. This is called by ContextCleaner cleanup code (e.g. when removing blocks from RDDs which are have fallen out of scope on the driver) or when a user explicitly unpersists an RDD or deletes a broadcast variable.\n- When dropping a block memory in `BlockManager.dropFromMemory()`, which is (confusingly) called by the `MemoryStore` when dropping blocks to free up space.\n\nIn the second case, we'll never hit the error message because the MemoryStore won't try to evict blocks with non-zero pin/reference counts. We _do_ have to worry about the first case: if we try to force-remove a block while a task is still reading it then the removal should fail with an error.\n",
    "commit": "9becde3d94ea41bba9e275b9108c61b91074f035",
    "createdAt": "2016-01-14T23:00:49Z",
    "diffHunk": "@@ -213,6 +213,11 @@ private[spark] class MemoryStore(blockManager: BlockManager, memoryManager: Memo\n   }\n \n   override def remove(blockId: BlockId): Boolean = memoryManager.synchronized {\n+    val referenceCount = blockManager.getReferenceCount(blockId)"
  }],
  "prId": 10705
}, {
  "comments": [{
    "author": {
      "login": "nongli"
    },
    "body": "Can you turn the response from the question I asked last time about thread safety here to a comment?\n\nI'm not quite thing I get it. A user of the block manager with code like\nif (getPinCount(id) == 0) remove(id) is not generally safe right?\n",
    "commit": "9becde3d94ea41bba9e275b9108c61b91074f035",
    "createdAt": "2016-01-26T18:03:33Z",
    "diffHunk": "@@ -208,6 +208,11 @@ private[spark] class MemoryStore(blockManager: BlockManager, memoryManager: Memo\n   }\n \n   override def remove(blockId: BlockId): Boolean = memoryManager.synchronized {\n+    val pinCount = blockManager.getPinCount(blockId)"
  }],
  "prId": 10705
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "name boolean parameter, also add a comment to explain why we don't want to block here.\n",
    "commit": "9becde3d94ea41bba9e275b9108c61b91074f035",
    "createdAt": "2016-02-22T23:05:38Z",
    "diffHunk": "@@ -418,9 +423,11 @@ private[spark] class MemoryStore(blockManager: BlockManager, memoryManager: Memo\n         while (freedMemory < space && iterator.hasNext) {\n           val pair = iterator.next()\n           val blockId = pair.getKey\n-          if (rddToAdd.isEmpty || rddToAdd != getRddId(blockId)) {\n-            selectedBlocks += blockId\n-            freedMemory += pair.getValue.size\n+          if (blockIsEvictable(blockId)) {\n+            if (blockManager.blockInfoManager.lockForWriting(blockId, false).isDefined) {"
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "Done.\n",
    "commit": "9becde3d94ea41bba9e275b9108c61b91074f035",
    "createdAt": "2016-02-23T07:33:44Z",
    "diffHunk": "@@ -418,9 +423,11 @@ private[spark] class MemoryStore(blockManager: BlockManager, memoryManager: Memo\n         while (freedMemory < space && iterator.hasNext) {\n           val pair = iterator.next()\n           val blockId = pair.getKey\n-          if (rddToAdd.isEmpty || rddToAdd != getRddId(blockId)) {\n-            selectedBlocks += blockId\n-            freedMemory += pair.getValue.size\n+          if (blockIsEvictable(blockId)) {\n+            if (blockManager.blockInfoManager.lockForWriting(blockId, false).isDefined) {"
  }],
  "prId": 10705
}]