[{
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "Is it possible to avoid the buffer by just creating the EventBus earlier on in the SparkContext constructor (i.e. changing around the order so it comes before the the block manager)?\n",
    "commit": "e5f14fa5e63636c5eee5df084c913d938fdee541",
    "createdAt": "2014-03-14T07:14:28Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.scheduler._\n+\n+/**\n+ * A listener for BlockManager status updates.\n+ *\n+ * This listener provides a way to post executor storage status information as soon as it\n+ * is available (i.e. immediately after the associated BlockManager has registered with the\n+ * driver). This is necessary because the SparkContext is only notified when an executor is\n+ * launched, but by then the storage information is not ready yet.\n+ *\n+ * Further, it is possible for a BlockManager be registered before the listener bus on the\n+ * driver is initialized (e.g. the driver's own BlockManager), in which case the corresponding\n+ * event should be buffered.\n+ */\n+private[spark] class BlockManagerStatusListener extends SparkListener {"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "This would require creating the event bus and the scheduler before SparkEnv, since SparkEnv creates all the block manager classes. This is not possible, however, since the DAGScheduler depends on the block manager and the map output tracker.\n",
    "commit": "e5f14fa5e63636c5eee5df084c913d938fdee541",
    "createdAt": "2014-03-14T17:02:27Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.storage\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.scheduler._\n+\n+/**\n+ * A listener for BlockManager status updates.\n+ *\n+ * This listener provides a way to post executor storage status information as soon as it\n+ * is available (i.e. immediately after the associated BlockManager has registered with the\n+ * driver). This is necessary because the SparkContext is only notified when an executor is\n+ * launched, but by then the storage information is not ready yet.\n+ *\n+ * Further, it is possible for a BlockManager be registered before the listener bus on the\n+ * driver is initialized (e.g. the driver's own BlockManager), in which case the corresponding\n+ * event should be buffered.\n+ */\n+private[spark] class BlockManagerStatusListener extends SparkListener {"
  }],
  "prId": 42
}]