[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "What would units be here -- something like CUDA cores or GPU memory? below I just see \"gpu\" and \"gpu.count\" but there is already a separate count field.\r\nAlso, this doesn't account for type right? is that what the 'units' is supposed to help with?",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-15T13:55:48Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import org.apache.spark.annotation.Evolving\n+\n+/**\n+ * Class to hold information about a type of Resource. A resource could be a gpu, fpga, numa, etc.\n+ * The array of addresses are resource specific and describe how to access the resource.\n+ * For instance, for gpus the addresses would be the indices of the gpus.\n+ *\n+ * @param name the name of the resource\n+ * @param units the units of the resources, can be an empty string if units don't apply"
  }, {
    "author": {
      "login": "tgravescs"
    },
    "body": "for gpu the units would be empty. The idea is if things have a unit, like memory which has a unit you can put in GiB, MiB, etc.  ",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-15T14:16:21Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import org.apache.spark.annotation.Evolving\n+\n+/**\n+ * Class to hold information about a type of Resource. A resource could be a gpu, fpga, numa, etc.\n+ * The array of addresses are resource specific and describe how to access the resource.\n+ * For instance, for gpus the addresses would be the indices of the gpus.\n+ *\n+ * @param name the name of the resource\n+ * @param units the units of the resources, can be an empty string if units don't apply"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Makes sense, and maybe I missed it, but are there docs or examples of this? does the script actually discover this information about anything? looks like it's just finding count and address of GPUs",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-15T14:22:04Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import org.apache.spark.annotation.Evolving\n+\n+/**\n+ * Class to hold information about a type of Resource. A resource could be a gpu, fpga, numa, etc.\n+ * The array of addresses are resource specific and describe how to access the resource.\n+ * For instance, for gpus the addresses would be the indices of the gpus.\n+ *\n+ * @param name the name of the resource\n+ * @param units the units of the resources, can be an empty string if units don't apply"
  }, {
    "author": {
      "login": "tgravescs"
    },
    "body": "the example script provided is just doing gpu's and units don't apply to gpu's so its just finding the addresses. I agree with you that we need some more docs and I'll comment the script better.",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-16T14:04:52Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import org.apache.spark.annotation.Evolving\n+\n+/**\n+ * Class to hold information about a type of Resource. A resource could be a gpu, fpga, numa, etc.\n+ * The array of addresses are resource specific and describe how to access the resource.\n+ * For instance, for gpus the addresses would be the indices of the gpus.\n+ *\n+ * @param name the name of the resource\n+ * @param units the units of the resources, can be an empty string if units don't apply"
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Just make this a case class? you don't need getters then",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-15T13:56:12Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import org.apache.spark.annotation.Evolving\n+\n+/**\n+ * Class to hold information about a type of Resource. A resource could be a gpu, fpga, numa, etc.\n+ * The array of addresses are resource specific and describe how to access the resource.\n+ * For instance, for gpus the addresses would be the indices of the gpus.\n+ *\n+ * @param name the name of the resource\n+ * @param units the units of the resources, can be an empty string if units don't apply\n+ * @param count the number of resources available\n+ * @param addresses an optional array of strings describing the addresses of the resource\n+ */\n+@Evolving\n+class ResourceInformation("
  }, {
    "author": {
      "login": "tgravescs"
    },
    "body": "this is a user facing class and personally I think its better to have real class with getters as a more formal api for the user and potentially gives us ability to changes easier rather then having the parameters always public.  ",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-16T14:05:51Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import org.apache.spark.annotation.Evolving\n+\n+/**\n+ * Class to hold information about a type of Resource. A resource could be a gpu, fpga, numa, etc.\n+ * The array of addresses are resource specific and describe how to access the resource.\n+ * For instance, for gpus the addresses would be the indices of the gpus.\n+ *\n+ * @param name the name of the resource\n+ * @param units the units of the resources, can be an empty string if units don't apply\n+ * @param count the number of resources available\n+ * @param addresses an optional array of strings describing the addresses of the resource\n+ */\n+@Evolving\n+class ResourceInformation("
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "That's what a case class is though; it's just auto-generated. You can make parameters private if you want to not expose a getter.",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-16T14:09:33Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import org.apache.spark.annotation.Evolving\n+\n+/**\n+ * Class to hold information about a type of Resource. A resource could be a gpu, fpga, numa, etc.\n+ * The array of addresses are resource specific and describe how to access the resource.\n+ * For instance, for gpus the addresses would be the indices of the gpus.\n+ *\n+ * @param name the name of the resource\n+ * @param units the units of the resources, can be an empty string if units don't apply\n+ * @param count the number of resources available\n+ * @param addresses an optional array of strings describing the addresses of the resource\n+ */\n+@Evolving\n+class ResourceInformation("
  }, {
    "author": {
      "login": "tgravescs"
    },
    "body": "thats true, guess was just thinking it was more flexible, but really can't think of anything that would need to be mutable here so I'll change.",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-16T14:32:54Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import org.apache.spark.annotation.Evolving\n+\n+/**\n+ * Class to hold information about a type of Resource. A resource could be a gpu, fpga, numa, etc.\n+ * The array of addresses are resource specific and describe how to access the resource.\n+ * For instance, for gpus the addresses would be the indices of the gpus.\n+ *\n+ * @param name the name of the resource\n+ * @param units the units of the resources, can be an empty string if units don't apply\n+ * @param count the number of resources available\n+ * @param addresses an optional array of strings describing the addresses of the resource\n+ */\n+@Evolving\n+class ResourceInformation("
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Later, you can use its equals/== method and toString without having to write additional code too (or if needs to be customized, define it here)",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-16T14:36:15Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import org.apache.spark.annotation.Evolving\n+\n+/**\n+ * Class to hold information about a type of Resource. A resource could be a gpu, fpga, numa, etc.\n+ * The array of addresses are resource specific and describe how to access the resource.\n+ * For instance, for gpus the addresses would be the indices of the gpus.\n+ *\n+ * @param name the name of the resource\n+ * @param units the units of the resources, can be an empty string if units don't apply\n+ * @param count the number of resources available\n+ * @param addresses an optional array of strings describing the addresses of the resource\n+ */\n+@Evolving\n+class ResourceInformation("
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Where is this used?",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-15T15:15:47Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import org.apache.spark.annotation.Evolving\n+\n+/**\n+ * Class to hold information about a type of Resource. A resource could be a gpu, fpga, numa, etc.\n+ * The array of addresses are resource specific and describe how to access the resource.\n+ * For instance, for gpus the addresses would be the indices of the gpus.\n+ *\n+ * @param name the name of the resource\n+ * @param units the units of the resources, can be an empty string if units don't apply\n+ * @param count the number of resources available\n+ * @param addresses an optional array of strings describing the addresses of the resource\n+ */\n+@Evolving\n+class ResourceInformation(\n+    private val name: String,\n+    private val units: String,\n+    private val count: Long,\n+    private val addresses: Array[String] = Array.empty) extends Serializable {\n+\n+  def getName(): String = name\n+  def getUnits(): String = units\n+  def getCount(): Long = count\n+  def getAddresses(): Array[String] = addresses\n+}\n+\n+object ResourceInformation {\n+  // known types of resources\n+  final val GPU: String = \"gpu\"\n+\n+  // known resource type parameters\n+  final val GPU_COUNT: String = \"gpu.count\""
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "kiszk"
    },
    "body": "Is this used anywhere?",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-04-15T15:38:29Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import org.apache.spark.annotation.Evolving\n+\n+/**\n+ * Class to hold information about a type of Resource. A resource could be a gpu, fpga, numa, etc.\n+ * The array of addresses are resource specific and describe how to access the resource.\n+ * For instance, for gpus the addresses would be the indices of the gpus.\n+ *\n+ * @param name the name of the resource\n+ * @param units the units of the resources, can be an empty string if units don't apply\n+ * @param count the number of resources available\n+ * @param addresses an optional array of strings describing the addresses of the resource\n+ */\n+@Evolving\n+class ResourceInformation(\n+    private val name: String,\n+    private val units: String,\n+    private val count: Long,\n+    private val addresses: Array[String] = Array.empty) extends Serializable {\n+\n+  def getName(): String = name\n+  def getUnits(): String = units\n+  def getCount(): Long = count\n+  def getAddresses(): Array[String] = addresses\n+}\n+\n+object ResourceInformation {\n+  // known types of resources\n+  final val GPU: String = \"gpu\"\n+\n+  // known resource type parameters\n+  final val GPU_COUNT: String = \"gpu.count\""
  }],
  "prId": 24374
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Move it to test if this is used by test only.",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-24T05:58:11Z",
    "diffHunk": "@@ -35,3 +35,8 @@ class ResourceInformation(\n \n   override def toString: String = s\"[name: ${name}, addresses: ${addresses.mkString(\",\")}]\"\n }\n+\n+object ResourceInformation {\n+  // known types of resources\n+  final val GPU: String = \"gpu\""
  }, {
    "author": {
      "login": "jiangxb1987"
    },
    "body": "updated",
    "commit": "82cd1e35bdc7caaddb4122060d8fd6b98893cbb6",
    "createdAt": "2019-05-29T01:11:47Z",
    "diffHunk": "@@ -35,3 +35,8 @@ class ResourceInformation(\n \n   override def toString: String = s\"[name: ${name}, addresses: ${addresses.mkString(\",\")}]\"\n }\n+\n+object ResourceInformation {\n+  // known types of resources\n+  final val GPU: String = \"gpu\""
  }],
  "prId": 24374
}]