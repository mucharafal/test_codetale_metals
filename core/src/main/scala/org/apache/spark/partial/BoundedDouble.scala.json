[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "I was going to say that this can become a case class to get this all for free, but it's part of the API. In theory that doesn't change anything, so you can try a case class and see if MiMa accepts it. Otherwise you can do this, but you'll need to fix up a few little style things. I'd not change the toString, hashCode might be too long a line, and indent on equals is too deep\n",
    "commit": "4040e0ec2421d5abe9b89785955e1e3d2215676e",
    "createdAt": "2016-03-29T13:37:42Z",
    "diffHunk": "@@ -21,5 +21,20 @@ package org.apache.spark.partial\n  * A Double value with error bars and associated confidence.\n  */\n class BoundedDouble(val mean: Double, val confidence: Double, val low: Double, val high: Double) {\n-  override def toString(): String = \"[%.3f, %.3f]\".format(low, high)\n+  override def toString(): String = \"BoundedDouble(%.3f, %.3f, %.3f, %.3f)\".format(mean, confidence, low, high)"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "case classes bring extra concerns with binary compatibility (due to pattern matching). I'd minimize its use in public APIs.\n",
    "commit": "4040e0ec2421d5abe9b89785955e1e3d2215676e",
    "createdAt": "2016-03-29T18:19:54Z",
    "diffHunk": "@@ -21,5 +21,20 @@ package org.apache.spark.partial\n  * A Double value with error bars and associated confidence.\n  */\n class BoundedDouble(val mean: Double, val confidence: Double, val low: Double, val high: Double) {\n-  override def toString(): String = \"[%.3f, %.3f]\".format(low, high)\n+  override def toString(): String = \"BoundedDouble(%.3f, %.3f, %.3f, %.3f)\".format(mean, confidence, low, high)"
  }],
  "prId": 12016
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "(This might fail style checks without a space after : )\n",
    "commit": "4040e0ec2421d5abe9b89785955e1e3d2215676e",
    "createdAt": "2016-03-31T23:15:31Z",
    "diffHunk": "@@ -21,5 +21,23 @@ package org.apache.spark.partial\n  * A Double value with error bars and associated confidence.\n  */\n class BoundedDouble(val mean: Double, val confidence: Double, val low: Double, val high: Double) {\n-  override def toString(): String = \"[%.3f, %.3f]\".format(low, high)\n+  override def toString(): String =\n+    \"BoundedDouble(%.3f, %.3f, %.3f, %.3f)\".format(mean, confidence, low, high)\n+\n+  override def hashCode:Int ="
  }],
  "prId": 12016
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "OK, I think this is all good, except I think the `toString` should be left alone. I forgot to mention this. Not that I really expect anyone to depend on the format, but let's leave it since it's a public class. \n",
    "commit": "4040e0ec2421d5abe9b89785955e1e3d2215676e",
    "createdAt": "2016-04-02T23:20:56Z",
    "diffHunk": "@@ -21,5 +21,23 @@ package org.apache.spark.partial\n  * A Double value with error bars and associated confidence.\n  */\n class BoundedDouble(val mean: Double, val confidence: Double, val low: Double, val high: Double) {\n-  override def toString(): String = \"[%.3f, %.3f]\".format(low, high)\n+  override def toString(): String ="
  }, {
    "author": {
      "login": "mtustin-handy"
    },
    "body": "I definitely can put it back, but the previous toString was just weird - it\nonly printed the bounds. Anyway, I'll update this in a sec (to go back).\nLet me know if you change your mind.\n\nOn Saturday, April 2, 2016, Sean Owen notifications@github.com wrote:\n\n> In core/src/main/scala/org/apache/spark/partial/BoundedDouble.scala\n> https://github.com/apache/spark/pull/12016#discussion_r58301669:\n> \n> > @@ -21,5 +21,23 @@ package org.apache.spark.partial\n> > - A Double value with error bars and associated confidence.\n> >   */\n> >   class BoundedDouble(val mean: Double, val confidence: Double, val low: Double, val high: Double) {\n> >   -  override def toString(): String = \"[%.3f, %.3f]\".format(low, high)\n> >   -  override def toString(): String =\n> \n> OK, I think this is all good, except I think the toString should be left\n> alone. I forgot to mention this. Not that I really expect anyone to depend\n> on the format, but let's leave it since it's a public class.\n> \n> â€”\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/spark/pull/12016/files/5e3c47762f79b89544360c383db10b3d77411109#r58301669\n\n## \n\nWant to work at Handy? Check out our culture deck and open roles \nhttp://www.handy.com/careers\nLatest news http://www.handy.com/press at Handy\nHandy just raised $50m \nhttp://venturebeat.com/2015/11/02/on-demand-home-service-handy-raises-50m-in-round-led-by-fidelity/ led \nby Fidelity\n",
    "commit": "4040e0ec2421d5abe9b89785955e1e3d2215676e",
    "createdAt": "2016-04-02T23:25:32Z",
    "diffHunk": "@@ -21,5 +21,23 @@ package org.apache.spark.partial\n  * A Double value with error bars and associated confidence.\n  */\n class BoundedDouble(val mean: Double, val confidence: Double, val low: Double, val high: Double) {\n-  override def toString(): String = \"[%.3f, %.3f]\".format(low, high)\n+  override def toString(): String ="
  }, {
    "author": {
      "login": "mtustin-handy"
    },
    "body": "Done.\n",
    "commit": "4040e0ec2421d5abe9b89785955e1e3d2215676e",
    "createdAt": "2016-04-03T00:09:48Z",
    "diffHunk": "@@ -21,5 +21,23 @@ package org.apache.spark.partial\n  * A Double value with error bars and associated confidence.\n  */\n class BoundedDouble(val mean: Double, val confidence: Double, val low: Double, val high: Double) {\n-  override def toString(): String = \"[%.3f, %.3f]\".format(low, high)\n+  override def toString(): String ="
  }],
  "prId": 12016
}]