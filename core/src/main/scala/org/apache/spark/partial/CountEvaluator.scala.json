[{
  "comments": [{
    "author": {
      "login": "lovasoa"
    },
    "body": "@srowen I know it is a little late for a review, but now that we have a single distribution, it would make the code clearer to estimate directly the total count with the poisson distribution. That is removing the `1-p` here and the `sum + ` in the final BoundedDouble.",
    "commit": "f5311f998231dd85395e502675edb6fad92a4a60",
    "createdAt": "2017-06-14T23:07:30Z",
    "diffHunk": "@@ -48,22 +48,11 @@ private[spark] class CountEvaluator(totalOutputs: Int, confidence: Double)\n private[partial] object CountEvaluator {\n \n   def bound(confidence: Double, sum: Long, p: Double): BoundedDouble = {\n-    // Let the total count be N. A fraction p has been counted already, with sum 'sum',\n-    // as if each element from the total data set had been seen with probability p.\n-    val dist =\n-      if (sum <= 10000) {\n-        // The remaining count, k=N-sum, may be modeled as negative binomial (aka Pascal),\n-        // where there have been 'sum' successes of probability p already. (There are several\n-        // conventions, but this is the one followed by Commons Math3.)\n-        new PascalDistribution(sum.toInt, p)\n-      } else {\n-        // For large 'sum' (certainly, > Int.MaxValue!), use a Poisson approximation, which has\n-        // a different interpretation. \"sum\" elements have been observed having scanned a fraction\n-        // p of the data. This suggests data is counted at a rate of sum / p across the whole data\n-        // set. The total expected count from the rest is distributed as\n-        // (1-p) Poisson(sum / p) = Poisson(sum*(1-p)/p)\n-        new PoissonDistribution(sum * (1 - p) / p)\n-      }\n+    // \"sum\" elements have been observed having scanned a fraction\n+    // p of the data. This suggests data is counted at a rate of sum / p across the whole data\n+    // set. The total expected count from the rest is distributed as\n+    // (1-p) Poisson(sum / p) = Poisson(sum*(1-p)/p)\n+    val dist = new PoissonDistribution(sum * (1 - p) / p)",
    "line": 33
  }],
  "prId": 18276
}]