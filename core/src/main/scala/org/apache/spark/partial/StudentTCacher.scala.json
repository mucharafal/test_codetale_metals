[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "It was one-side before. Could you comment on the change?\n",
    "commit": "61a232ffd0378d56e7e4a3d2c2e8f9f8a9660a80",
    "createdAt": "2014-10-24T20:23:42Z",
    "diffHunk": "@@ -35,7 +37,8 @@ private[spark] class StudentTCacher(confidence: Double) {\n     } else {\n       val size = sampleSize.toInt\n       if (cache(size) < 0) {\n-        cache(size) = Probability.studentTInverse(1 - confidence, size - 1)\n+        val tDist = new TDistribution(size - 1)\n+        cache(size) = tDist.inverseCumulativeProbability(1 - (1 - confidence) / 2)",
    "line": 27
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "It should still be one-sided. The argument to the Colt method (http://acs.lbl.gov/ACSSoftware/colt/api/cern/jet/stat/Probability.html#studentTInverse(double, int)) was `alpha` such that the cumulative probability is `1-alpha/2`. For the Commons Math3 method, the argument is just the cumulative probability (http://commons.apache.org/proper/commons-math/apidocs/org/apache/commons/math3/distribution/AbstractRealDistribution.html#inverseCumulativeProbability(double)). So I translated as `1 - (1 - confidence) / 2`.\n",
    "commit": "61a232ffd0378d56e7e4a3d2c2e8f9f8a9660a80",
    "createdAt": "2014-10-24T20:57:25Z",
    "diffHunk": "@@ -35,7 +37,8 @@ private[spark] class StudentTCacher(confidence: Double) {\n     } else {\n       val size = sampleSize.toInt\n       if (cache(size) < 0) {\n-        cache(size) = Probability.studentTInverse(1 - confidence, size - 1)\n+        val tDist = new TDistribution(size - 1)\n+        cache(size) = tDist.inverseCumulativeProbability(1 - (1 - confidence) / 2)",
    "line": 27
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Thanks for the comment! This is helpful.\n",
    "commit": "61a232ffd0378d56e7e4a3d2c2e8f9f8a9660a80",
    "createdAt": "2014-10-24T22:36:33Z",
    "diffHunk": "@@ -35,7 +37,8 @@ private[spark] class StudentTCacher(confidence: Double) {\n     } else {\n       val size = sampleSize.toInt\n       if (cache(size) < 0) {\n-        cache(size) = Probability.studentTInverse(1 - confidence, size - 1)\n+        val tDist = new TDistribution(size - 1)\n+        cache(size) = tDist.inverseCumulativeProbability(1 - (1 - confidence) / 2)",
    "line": 27
  }],
  "prId": 2928
}]