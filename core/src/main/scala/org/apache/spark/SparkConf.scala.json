[{
  "comments": [{
    "author": {
      "login": "jiangxb1987"
    },
    "body": "```require(executorHeartbeatInterval > executorTimeoutThreshold, s\"The value of 'spark.network.timeout' must be no less than the value of 'spark.executor.heartbeatInterval'.\")```",
    "commit": "7ac2cd493e6fc0c8e1da678c6b9af43be0789602",
    "createdAt": "2017-12-12T04:11:46Z",
    "diffHunk": "@@ -564,6 +564,18 @@ class SparkConf(loadDefaults: Boolean) extends Cloneable with Logging with Seria\n     val encryptionEnabled = get(NETWORK_ENCRYPTION_ENABLED) || get(SASL_ENCRYPTION_ENABLED)\n     require(!encryptionEnabled || get(NETWORK_AUTH_ENABLED),\n       s\"${NETWORK_AUTH_ENABLED.key} must be enabled when enabling encryption.\")\n+\n+    val executorTimeoutThreshold = Utils.timeStringAsSeconds(get(\"spark.network.timeout\", \"120s\"))\n+    val executorHeartbeatInterval = Utils.timeStringAsSeconds(\n+      get(\"spark.executor.heartbeatInterval\", \"10s\"))\n+    if (executorHeartbeatInterval > executorTimeoutThreshold) {"
  }, {
    "author": {
      "login": "caneGuy"
    },
    "body": "Done @jiangxb1987  Thanks",
    "commit": "7ac2cd493e6fc0c8e1da678c6b9af43be0789602",
    "createdAt": "2017-12-12T04:18:50Z",
    "diffHunk": "@@ -564,6 +564,18 @@ class SparkConf(loadDefaults: Boolean) extends Cloneable with Logging with Seria\n     val encryptionEnabled = get(NETWORK_ENCRYPTION_ENABLED) || get(SASL_ENCRYPTION_ENABLED)\n     require(!encryptionEnabled || get(NETWORK_AUTH_ENABLED),\n       s\"${NETWORK_AUTH_ENABLED.key} must be enabled when enabling encryption.\")\n+\n+    val executorTimeoutThreshold = Utils.timeStringAsSeconds(get(\"spark.network.timeout\", \"120s\"))\n+    val executorHeartbeatInterval = Utils.timeStringAsSeconds(\n+      get(\"spark.executor.heartbeatInterval\", \"10s\"))\n+    if (executorHeartbeatInterval > executorTimeoutThreshold) {"
  }],
  "prId": 19942
}, {
  "comments": [{
    "author": {
      "login": "jiangxb1987"
    },
    "body": "nit: remove the 's' in this line and the following line.",
    "commit": "7ac2cd493e6fc0c8e1da678c6b9af43be0789602",
    "createdAt": "2017-12-12T04:21:06Z",
    "diffHunk": "@@ -564,6 +564,13 @@ class SparkConf(loadDefaults: Boolean) extends Cloneable with Logging with Seria\n     val encryptionEnabled = get(NETWORK_ENCRYPTION_ENABLED) || get(SASL_ENCRYPTION_ENABLED)\n     require(!encryptionEnabled || get(NETWORK_AUTH_ENABLED),\n       s\"${NETWORK_AUTH_ENABLED.key} must be enabled when enabling encryption.\")\n+\n+    val executorTimeoutThreshold = Utils.timeStringAsSeconds(get(\"spark.network.timeout\", \"120s\"))\n+    val executorHeartbeatInterval = Utils.timeStringAsSeconds(\n+      get(\"spark.executor.heartbeatInterval\", \"10s\"))\n+    require(executorHeartbeatInterval > executorTimeoutThreshold, s\"The value of\" +\n+      s\"spark.network.timeout' must be no less than the value of\" +"
  }, {
    "author": {
      "login": "caneGuy"
    },
    "body": "Done",
    "commit": "7ac2cd493e6fc0c8e1da678c6b9af43be0789602",
    "createdAt": "2017-12-12T05:11:56Z",
    "diffHunk": "@@ -564,6 +564,13 @@ class SparkConf(loadDefaults: Boolean) extends Cloneable with Logging with Seria\n     val encryptionEnabled = get(NETWORK_ENCRYPTION_ENABLED) || get(SASL_ENCRYPTION_ENABLED)\n     require(!encryptionEnabled || get(NETWORK_AUTH_ENABLED),\n       s\"${NETWORK_AUTH_ENABLED.key} must be enabled when enabling encryption.\")\n+\n+    val executorTimeoutThreshold = Utils.timeStringAsSeconds(get(\"spark.network.timeout\", \"120s\"))\n+    val executorHeartbeatInterval = Utils.timeStringAsSeconds(\n+      get(\"spark.executor.heartbeatInterval\", \"10s\"))\n+    require(executorHeartbeatInterval > executorTimeoutThreshold, s\"The value of\" +\n+      s\"spark.network.timeout' must be no less than the value of\" +"
  }],
  "prId": 19942
}, {
  "comments": [{
    "author": {
      "login": "jiangxb1987"
    },
    "body": "nit: The whitespace should always go to the end of the previous line instead of the beginning.",
    "commit": "7ac2cd493e6fc0c8e1da678c6b9af43be0789602",
    "createdAt": "2017-12-12T04:22:07Z",
    "diffHunk": "@@ -564,6 +564,13 @@ class SparkConf(loadDefaults: Boolean) extends Cloneable with Logging with Seria\n     val encryptionEnabled = get(NETWORK_ENCRYPTION_ENABLED) || get(SASL_ENCRYPTION_ENABLED)\n     require(!encryptionEnabled || get(NETWORK_AUTH_ENABLED),\n       s\"${NETWORK_AUTH_ENABLED.key} must be enabled when enabling encryption.\")\n+\n+    val executorTimeoutThreshold = Utils.timeStringAsSeconds(get(\"spark.network.timeout\", \"120s\"))\n+    val executorHeartbeatInterval = Utils.timeStringAsSeconds(\n+      get(\"spark.executor.heartbeatInterval\", \"10s\"))\n+    require(executorHeartbeatInterval > executorTimeoutThreshold, s\"The value of\" +\n+      s\"spark.network.timeout' must be no less than the value of\" +\n+      s\" 'spark.executor.heartbeatInterval'.\")"
  }, {
    "author": {
      "login": "caneGuy"
    },
    "body": "Sorry for that,i will check more carefully!",
    "commit": "7ac2cd493e6fc0c8e1da678c6b9af43be0789602",
    "createdAt": "2017-12-12T04:47:25Z",
    "diffHunk": "@@ -564,6 +564,13 @@ class SparkConf(loadDefaults: Boolean) extends Cloneable with Logging with Seria\n     val encryptionEnabled = get(NETWORK_ENCRYPTION_ENABLED) || get(SASL_ENCRYPTION_ENABLED)\n     require(!encryptionEnabled || get(NETWORK_AUTH_ENABLED),\n       s\"${NETWORK_AUTH_ENABLED.key} must be enabled when enabling encryption.\")\n+\n+    val executorTimeoutThreshold = Utils.timeStringAsSeconds(get(\"spark.network.timeout\", \"120s\"))\n+    val executorHeartbeatInterval = Utils.timeStringAsSeconds(\n+      get(\"spark.executor.heartbeatInterval\", \"10s\"))\n+    require(executorHeartbeatInterval > executorTimeoutThreshold, s\"The value of\" +\n+      s\"spark.network.timeout' must be no less than the value of\" +\n+      s\" 'spark.executor.heartbeatInterval'.\")"
  }, {
    "author": {
      "login": "caneGuy"
    },
    "body": "Done",
    "commit": "7ac2cd493e6fc0c8e1da678c6b9af43be0789602",
    "createdAt": "2017-12-12T05:11:47Z",
    "diffHunk": "@@ -564,6 +564,13 @@ class SparkConf(loadDefaults: Boolean) extends Cloneable with Logging with Seria\n     val encryptionEnabled = get(NETWORK_ENCRYPTION_ENABLED) || get(SASL_ENCRYPTION_ENABLED)\n     require(!encryptionEnabled || get(NETWORK_AUTH_ENABLED),\n       s\"${NETWORK_AUTH_ENABLED.key} must be enabled when enabling encryption.\")\n+\n+    val executorTimeoutThreshold = Utils.timeStringAsSeconds(get(\"spark.network.timeout\", \"120s\"))\n+    val executorHeartbeatInterval = Utils.timeStringAsSeconds(\n+      get(\"spark.executor.heartbeatInterval\", \"10s\"))\n+    require(executorHeartbeatInterval > executorTimeoutThreshold, s\"The value of\" +\n+      s\"spark.network.timeout' must be no less than the value of\" +\n+      s\" 'spark.executor.heartbeatInterval'.\")"
  }],
  "prId": 19942
}, {
  "comments": [{
    "author": {
      "login": "jiangxb1987"
    },
    "body": "Should also add a simple and explicit comment to explain the reason why this check is needed.",
    "commit": "7ac2cd493e6fc0c8e1da678c6b9af43be0789602",
    "createdAt": "2017-12-12T04:22:53Z",
    "diffHunk": "@@ -564,6 +564,13 @@ class SparkConf(loadDefaults: Boolean) extends Cloneable with Logging with Seria\n     val encryptionEnabled = get(NETWORK_ENCRYPTION_ENABLED) || get(SASL_ENCRYPTION_ENABLED)\n     require(!encryptionEnabled || get(NETWORK_AUTH_ENABLED),\n       s\"${NETWORK_AUTH_ENABLED.key} must be enabled when enabling encryption.\")\n+\n+    val executorTimeoutThreshold = Utils.timeStringAsSeconds(get(\"spark.network.timeout\", \"120s\"))\n+    val executorHeartbeatInterval = Utils.timeStringAsSeconds(\n+      get(\"spark.executor.heartbeatInterval\", \"10s\"))\n+    require(executorHeartbeatInterval > executorTimeoutThreshold, s\"The value of\" +"
  }, {
    "author": {
      "login": "caneGuy"
    },
    "body": "Done",
    "commit": "7ac2cd493e6fc0c8e1da678c6b9af43be0789602",
    "createdAt": "2017-12-12T05:12:09Z",
    "diffHunk": "@@ -564,6 +564,13 @@ class SparkConf(loadDefaults: Boolean) extends Cloneable with Logging with Seria\n     val encryptionEnabled = get(NETWORK_ENCRYPTION_ENABLED) || get(SASL_ENCRYPTION_ENABLED)\n     require(!encryptionEnabled || get(NETWORK_AUTH_ENABLED),\n       s\"${NETWORK_AUTH_ENABLED.key} must be enabled when enabling encryption.\")\n+\n+    val executorTimeoutThreshold = Utils.timeStringAsSeconds(get(\"spark.network.timeout\", \"120s\"))\n+    val executorHeartbeatInterval = Utils.timeStringAsSeconds(\n+      get(\"spark.executor.heartbeatInterval\", \"10s\"))\n+    require(executorHeartbeatInterval > executorTimeoutThreshold, s\"The value of\" +"
  }],
  "prId": 19942
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "`getTimeAsSeconds`, also below.",
    "commit": "7ac2cd493e6fc0c8e1da678c6b9af43be0789602",
    "createdAt": "2017-12-12T19:12:14Z",
    "diffHunk": "@@ -564,6 +564,15 @@ class SparkConf(loadDefaults: Boolean) extends Cloneable with Logging with Seria\n     val encryptionEnabled = get(NETWORK_ENCRYPTION_ENABLED) || get(SASL_ENCRYPTION_ENABLED)\n     require(!encryptionEnabled || get(NETWORK_AUTH_ENABLED),\n       s\"${NETWORK_AUTH_ENABLED.key} must be enabled when enabling encryption.\")\n+\n+    val executorTimeoutThreshold = Utils.timeStringAsSeconds(get(\"spark.network.timeout\", \"120s\"))"
  }, {
    "author": {
      "login": "caneGuy"
    },
    "body": "Done",
    "commit": "7ac2cd493e6fc0c8e1da678c6b9af43be0789602",
    "createdAt": "2017-12-13T11:10:31Z",
    "diffHunk": "@@ -564,6 +564,15 @@ class SparkConf(loadDefaults: Boolean) extends Cloneable with Logging with Seria\n     val encryptionEnabled = get(NETWORK_ENCRYPTION_ENABLED) || get(SASL_ENCRYPTION_ENABLED)\n     require(!encryptionEnabled || get(NETWORK_AUTH_ENABLED),\n       s\"${NETWORK_AUTH_ENABLED.key} must be enabled when enabling encryption.\")\n+\n+    val executorTimeoutThreshold = Utils.timeStringAsSeconds(get(\"spark.network.timeout\", \"120s\"))"
  }],
  "prId": 19942
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Add space after `.`.",
    "commit": "7ac2cd493e6fc0c8e1da678c6b9af43be0789602",
    "createdAt": "2017-12-12T19:12:48Z",
    "diffHunk": "@@ -564,6 +564,15 @@ class SparkConf(loadDefaults: Boolean) extends Cloneable with Logging with Seria\n     val encryptionEnabled = get(NETWORK_ENCRYPTION_ENABLED) || get(SASL_ENCRYPTION_ENABLED)\n     require(!encryptionEnabled || get(NETWORK_AUTH_ENABLED),\n       s\"${NETWORK_AUTH_ENABLED.key} must be enabled when enabling encryption.\")\n+\n+    val executorTimeoutThreshold = Utils.timeStringAsSeconds(get(\"spark.network.timeout\", \"120s\"))\n+    val executorHeartbeatInterval = Utils.timeStringAsSeconds(\n+      get(\"spark.executor.heartbeatInterval\", \"10s\"))\n+    // If spark.executor.heartbeatInterval bigger than spark.network.timeout,\n+    // it will almost always cause ExecutorLostFailure.See SPARK-22754."
  }, {
    "author": {
      "login": "caneGuy"
    },
    "body": "Done",
    "commit": "7ac2cd493e6fc0c8e1da678c6b9af43be0789602",
    "createdAt": "2017-12-13T11:10:25Z",
    "diffHunk": "@@ -564,6 +564,15 @@ class SparkConf(loadDefaults: Boolean) extends Cloneable with Logging with Seria\n     val encryptionEnabled = get(NETWORK_ENCRYPTION_ENABLED) || get(SASL_ENCRYPTION_ENABLED)\n     require(!encryptionEnabled || get(NETWORK_AUTH_ENABLED),\n       s\"${NETWORK_AUTH_ENABLED.key} must be enabled when enabling encryption.\")\n+\n+    val executorTimeoutThreshold = Utils.timeStringAsSeconds(get(\"spark.network.timeout\", \"120s\"))\n+    val executorHeartbeatInterval = Utils.timeStringAsSeconds(\n+      get(\"spark.executor.heartbeatInterval\", \"10s\"))\n+    // If spark.executor.heartbeatInterval bigger than spark.network.timeout,\n+    // it will almost always cause ExecutorLostFailure.See SPARK-22754."
  }],
  "prId": 19942
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "No need for 's', and you're missing an open quote in the next line. You could print the value of these params inline too.",
    "commit": "7ac2cd493e6fc0c8e1da678c6b9af43be0789602",
    "createdAt": "2017-12-13T13:53:35Z",
    "diffHunk": "@@ -564,6 +564,14 @@ class SparkConf(loadDefaults: Boolean) extends Cloneable with Logging with Seria\n     val encryptionEnabled = get(NETWORK_ENCRYPTION_ENABLED) || get(SASL_ENCRYPTION_ENABLED)\n     require(!encryptionEnabled || get(NETWORK_AUTH_ENABLED),\n       s\"${NETWORK_AUTH_ENABLED.key} must be enabled when enabling encryption.\")\n+\n+    val executorTimeoutThreshold = getTimeAsSeconds(\"spark.network.timeout\", \"120s\")\n+    val executorHeartbeatInterval = getTimeAsSeconds(\"spark.executor.heartbeatInterval\", \"10s\")\n+    // If spark.executor.heartbeatInterval bigger than spark.network.timeout,\n+    // it will almost always cause ExecutorLostFailure. See SPARK-22754.\n+    require(executorTimeoutThreshold > executorHeartbeatInterval, s\"The value of \" +"
  }],
  "prId": 19942
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "OK. Not sure about the purpose of the single quotes, and the message doesn't say it's in seconds. These aren't big deals, but if the point of this PR is a clear helpful message, this still needs to be better.",
    "commit": "7ac2cd493e6fc0c8e1da678c6b9af43be0789602",
    "createdAt": "2017-12-13T15:11:08Z",
    "diffHunk": "@@ -564,6 +564,14 @@ class SparkConf(loadDefaults: Boolean) extends Cloneable with Logging with Seria\n     val encryptionEnabled = get(NETWORK_ENCRYPTION_ENABLED) || get(SASL_ENCRYPTION_ENABLED)\n     require(!encryptionEnabled || get(NETWORK_AUTH_ENABLED),\n       s\"${NETWORK_AUTH_ENABLED.key} must be enabled when enabling encryption.\")\n+\n+    val executorTimeoutThreshold = getTimeAsSeconds(\"spark.network.timeout\", \"120s\")\n+    val executorHeartbeatInterval = getTimeAsSeconds(\"spark.executor.heartbeatInterval\", \"10s\")\n+    // If spark.executor.heartbeatInterval bigger than spark.network.timeout,\n+    // it will almost always cause ExecutorLostFailure. See SPARK-22754.\n+    require(executorTimeoutThreshold > executorHeartbeatInterval, \"The value of \" +\n+      s\"'spark.network.timeout=${executorTimeoutThreshold}' must be no less than the value of \" +"
  }, {
    "author": {
      "login": "caneGuy"
    },
    "body": "Agree with you @srowen Does new message make sense?",
    "commit": "7ac2cd493e6fc0c8e1da678c6b9af43be0789602",
    "createdAt": "2017-12-13T15:48:35Z",
    "diffHunk": "@@ -564,6 +564,14 @@ class SparkConf(loadDefaults: Boolean) extends Cloneable with Logging with Seria\n     val encryptionEnabled = get(NETWORK_ENCRYPTION_ENABLED) || get(SASL_ENCRYPTION_ENABLED)\n     require(!encryptionEnabled || get(NETWORK_AUTH_ENABLED),\n       s\"${NETWORK_AUTH_ENABLED.key} must be enabled when enabling encryption.\")\n+\n+    val executorTimeoutThreshold = getTimeAsSeconds(\"spark.network.timeout\", \"120s\")\n+    val executorHeartbeatInterval = getTimeAsSeconds(\"spark.executor.heartbeatInterval\", \"10s\")\n+    // If spark.executor.heartbeatInterval bigger than spark.network.timeout,\n+    // it will almost always cause ExecutorLostFailure. See SPARK-22754.\n+    require(executorTimeoutThreshold > executorHeartbeatInterval, \"The value of \" +\n+      s\"'spark.network.timeout=${executorTimeoutThreshold}' must be no less than the value of \" +"
  }],
  "prId": 19942
}]