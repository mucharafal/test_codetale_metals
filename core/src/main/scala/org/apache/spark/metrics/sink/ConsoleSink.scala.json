[{
  "comments": [{
    "author": {
      "login": "jiangxb1987"
    },
    "body": "nit: add comment for each param here.",
    "commit": "6728d52f40839936e32112d4447b95d684f2fe38",
    "createdAt": "2017-11-27T02:57:44Z",
    "diffHunk": "@@ -25,27 +25,29 @@ import com.codahale.metrics.{ConsoleReporter, MetricRegistry}\n import org.apache.spark.SecurityManager\n import org.apache.spark.metrics.MetricsSystem\n \n-private[spark] class ConsoleSink(val property: Properties, val registry: MetricRegistry,\n-    securityMgr: SecurityManager) extends Sink {\n+private[spark] class ConsoleSink("
  }],
  "prId": 11994
}, {
  "comments": [{
    "author": {
      "login": "jiangxb1987"
    },
    "body": "Emmm... These logics seems quite similar among different Sinks, could we abstract these logic in `Sink` class, or generate a trait for them?",
    "commit": "6728d52f40839936e32112d4447b95d684f2fe38",
    "createdAt": "2017-11-27T03:01:42Z",
    "diffHunk": "@@ -25,27 +25,29 @@ import com.codahale.metrics.{ConsoleReporter, MetricRegistry}\n import org.apache.spark.SecurityManager\n import org.apache.spark.metrics.MetricsSystem\n \n-private[spark] class ConsoleSink(val property: Properties, val registry: MetricRegistry,\n-    securityMgr: SecurityManager) extends Sink {\n+private[spark] class ConsoleSink(\n+    property: Properties,\n+    registry: MetricRegistry,\n+    securityMgr: SecurityManager) extends Sink(property, registry) {\n   val CONSOLE_DEFAULT_PERIOD = 10\n   val CONSOLE_DEFAULT_UNIT = \"SECONDS\"\n \n   val CONSOLE_KEY_PERIOD = \"period\"\n   val CONSOLE_KEY_UNIT = \"unit\"\n \n-  val pollPeriod = Option(property.getProperty(CONSOLE_KEY_PERIOD)) match {\n+  private val pollPeriod = Option(property.getProperty(CONSOLE_KEY_PERIOD)) match {"
  }],
  "prId": 11994
}]