[{
  "comments": [{
    "author": {
      "login": "szhem"
    },
    "body": "Changes in this file seems to be not necessary if removing metrics by exact match from the shared registry as described above.",
    "commit": "38cf244a68e1b5a0c1bca401b5f718e63cd45022",
    "createdAt": "2019-05-08T15:23:29Z",
    "diffHunk": "@@ -64,10 +64,11 @@ class DoubleAccumulatorSource extends AccumulatorSource\n  */"
  }],
  "prId": 24556
}, {
  "comments": [{
    "author": {
      "login": "szhem"
    },
    "body": "What is the reason of changing this public API and exposing the package private `Source`?",
    "commit": "38cf244a68e1b5a0c1bca401b5f718e63cd45022",
    "createdAt": "2019-05-12T18:14:13Z",
    "diffHunk": "@@ -64,10 +64,11 @@ class DoubleAccumulatorSource extends AccumulatorSource\n  */\n @Experimental\n object LongAccumulatorSource {\n-  def register(sc: SparkContext, accumulators: Map[String, LongAccumulator]): Unit = {\n+  def register(sc: SparkContext, accumulators: Map[String, LongAccumulator]): Source = {"
  }, {
    "author": {
      "login": "chummyhe89"
    },
    "body": "it give a chance to remove the registered source of AccumulatorSource's subclass in spark ",
    "commit": "38cf244a68e1b5a0c1bca401b5f718e63cd45022",
    "createdAt": "2019-05-14T11:42:10Z",
    "diffHunk": "@@ -64,10 +64,11 @@ class DoubleAccumulatorSource extends AccumulatorSource\n  */\n @Experimental\n object LongAccumulatorSource {\n-  def register(sc: SparkContext, accumulators: Map[String, LongAccumulator]): Unit = {\n+  def register(sc: SparkContext, accumulators: Map[String, LongAccumulator]): Source = {"
  }, {
    "author": {
      "login": "szhem"
    },
    "body": "`AccumulatorSource` is package private as well. So to extend it, it will be necessary to place your code within the same package. So there is no need to expose package private `Source` and make it a part of the public contract.\r\n\r\nTo implement tests without changing the API you could use something like the following\r\n```scala\r\nval source = new LongAccumulatorSource\r\nsource.register(accumulators)\r\nsc.env.metricsSystem.registerSource(source)\r\n```\r\n... instead of \r\n```scala\r\nLongAccumulatorSource.register(mockContext, Map(\"laF\" -> laFirst, \"laS\" -> laSecond))\r\n```\r\nSo the necessary source to delete during the tests will be already stored in the local variable.",
    "commit": "38cf244a68e1b5a0c1bca401b5f718e63cd45022",
    "createdAt": "2019-05-15T08:24:47Z",
    "diffHunk": "@@ -64,10 +64,11 @@ class DoubleAccumulatorSource extends AccumulatorSource\n  */\n @Experimental\n object LongAccumulatorSource {\n-  def register(sc: SparkContext, accumulators: Map[String, LongAccumulator]): Unit = {\n+  def register(sc: SparkContext, accumulators: Map[String, LongAccumulator]): Source = {"
  }, {
    "author": {
      "login": "chummyhe89"
    },
    "body": "It makes sense. thanks for your advise. ",
    "commit": "38cf244a68e1b5a0c1bca401b5f718e63cd45022",
    "createdAt": "2019-05-15T13:47:08Z",
    "diffHunk": "@@ -64,10 +64,11 @@ class DoubleAccumulatorSource extends AccumulatorSource\n  */\n @Experimental\n object LongAccumulatorSource {\n-  def register(sc: SparkContext, accumulators: Map[String, LongAccumulator]): Unit = {\n+  def register(sc: SparkContext, accumulators: Map[String, LongAccumulator]): Source = {"
  }],
  "prId": 24556
}, {
  "comments": [{
    "author": {
      "login": "szhem"
    },
    "body": "What is the reason of changing this public API and exposing the package private `Source`?",
    "commit": "38cf244a68e1b5a0c1bca401b5f718e63cd45022",
    "createdAt": "2019-05-12T18:14:18Z",
    "diffHunk": "@@ -64,10 +64,11 @@ class DoubleAccumulatorSource extends AccumulatorSource\n  */\n @Experimental\n object LongAccumulatorSource {\n-  def register(sc: SparkContext, accumulators: Map[String, LongAccumulator]): Unit = {\n+  def register(sc: SparkContext, accumulators: Map[String, LongAccumulator]): Source = {\n     val source = new LongAccumulatorSource\n     source.register(accumulators)\n     sc.env.metricsSystem.registerSource(source)\n+    source"
  }],
  "prId": 24556
}, {
  "comments": [{
    "author": {
      "login": "szhem"
    },
    "body": "What is the reason of changing this public API and exposing the package private `Source`?",
    "commit": "38cf244a68e1b5a0c1bca401b5f718e63cd45022",
    "createdAt": "2019-05-12T18:14:25Z",
    "diffHunk": "@@ -81,9 +82,10 @@ object LongAccumulatorSource {\n  */\n @Experimental\n object DoubleAccumulatorSource {\n-  def register(sc: SparkContext, accumulators: Map[String, DoubleAccumulator]): Unit = {\n+  def register(sc: SparkContext, accumulators: Map[String, DoubleAccumulator]): Source = {"
  }],
  "prId": 24556
}, {
  "comments": [{
    "author": {
      "login": "szhem"
    },
    "body": "What is the reason of changing this public API and exposing the package private `Source`?",
    "commit": "38cf244a68e1b5a0c1bca401b5f718e63cd45022",
    "createdAt": "2019-05-12T18:14:31Z",
    "diffHunk": "@@ -81,9 +82,10 @@ object LongAccumulatorSource {\n  */\n @Experimental\n object DoubleAccumulatorSource {\n-  def register(sc: SparkContext, accumulators: Map[String, DoubleAccumulator]): Unit = {\n+  def register(sc: SparkContext, accumulators: Map[String, DoubleAccumulator]): Source = {\n     val source = new DoubleAccumulatorSource\n     source.register(accumulators)\n     sc.env.metricsSystem.registerSource(source)\n+    source"
  }],
  "prId": 24556
}]