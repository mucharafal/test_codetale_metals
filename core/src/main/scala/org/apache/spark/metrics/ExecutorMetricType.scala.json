[{
  "comments": [{
    "author": {
      "login": "mccheah"
    },
    "body": "A few minor flags with this design could be:\r\n- When passing the memory manager to the bean-sourced metrics provider, the memory manager ends up being unused\r\n- There's an inconsistency with the fact that the metric types that use the memory manager accept the memory manager as an argument, but the metric types that use the memory beans construct the beans as singletons.\r\n\r\nThe following is a proposal that doesn't have the above inconsistencies, but is a bit more complex. Open to discussion on if the extra complexity is worthwhile here.\r\n\r\n```\r\nsealed trait ExecutorMetricType[T] {\r\n  private[spark] def getMetricValue(src: T): Long\r\n  private[spark] val name = ...\r\n}\r\n\r\ncase class MBeanMetricType(mbeanName: String) extends ExecutorMetricType[BufferPoolMXBean] {\r\n  override def name(): String = // derive some name from the bean name, most likely\r\n  override def getMetricValue(bean: BufferPoolMXBean): Long = {\r\n    bean.getMemoryUsed\r\n  }\r\n}\r\n\r\ncase object OnHeapExecutionMemory extends ExecutorMetricType[MemoryManager] {\r\n  override def name(): String = \"OnHeapExecution\"\r\n  override def getMetricValue(memoryManager: MemoryManager): Long = memoryManager. onHeapExecutionMemoryUsed\r\n}\r\n\r\nprivate[spark] object ExecutorMetricType {\r\n  val memoryManagerMetrics = IndexedSeq(\r\n      OnHeapExecutionMemory,\r\n      OffHeapExecutionMemory,\r\n      // Add all subtypes of ExecutorMetricType[MemoryManager] here.\r\n    )\r\n  private val BUFFER_POOL_BEAN_NAME = \"java.nio:type=BufferPool,name=direct\"\r\n  private val MAPPED_POOL_BEAN_NAME = \"java.nio:type=BufferPool,name=mapped\"\r\n  val mbeanMetrics = IndexedSeq(\r\n        (MBeanMetricType(BUFFER_POOL_BEAN_NAME), getBean(BUFFER_POOL_BEAN_NAME),\r\n        MBeanMetricType(MAPPED_POOL_BEAN_NAME), getBean(MAPPED_POOL_BEAN_NAME))\r\n\r\n  val values = memoryManagerMetrics ++ mBeanMetrics.map(_._1) // Just for length? There might be a simpler way\r\n\r\n  def getMetricsSummary(memoryManager: MemoryManager): ExecutorMetrics = {\r\n    val allMetrics = new Array[Long](values.length)\r\n    memoryManagerMetrics.zipWithIndex.forEach { case (index, metric) => allMetrics(index) = metrics.getMetricValue(memoryManager)\r\n    \r\n    mbeanMetrics.zipWithIndex.foreach { case (index, (metric, bean)) => allMetrics(index + memoryManagerMetrics.length) = metric.getMetricValue(bean)\r\n    return new ExecutorMetrics(allMetrics)\r\n  }\r\n\r\n  private def getBean(beanName: String): BufferPoolMxBean = {\r\n    ManagementFactory.newPlatformMXBeanProxy(\r\n      ManagementFactory.getPlatformMBeanServer,\r\n      new ObjectName(beanName).toString,\r\n      classOf[BufferPoolMXBean])\r\n  }\r\n}",
    "commit": "571285beace1a0c1df92d9f5127828ed8955c93f",
    "createdAt": "2018-07-30T21:41:55Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.metrics\n+\n+import java.lang.management.{BufferPoolMXBean, ManagementFactory}\n+import javax.management.ObjectName\n+\n+import org.apache.spark.memory.MemoryManager\n+\n+/**\n+ * Executor metric types for executor-level metrics stored in ExecutorMetrics.\n+ */\n+sealed trait ExecutorMetricType {\n+  private[spark] def getMetricValue(memoryManager: MemoryManager): Long",
    "line": 28
  }, {
    "author": {
      "login": "squito"
    },
    "body": "I appreciate the comparison with this alternative, but I don't see a big problem w/ the initial version.  If there were many different types for `T` that were really different, then I think I'd be more inclined to do that -- might still come to that as more types are added.\r\n\r\n(I'm also the one who suggested the current version, so I'm biased)",
    "commit": "571285beace1a0c1df92d9f5127828ed8955c93f",
    "createdAt": "2018-08-01T19:37:35Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.metrics\n+\n+import java.lang.management.{BufferPoolMXBean, ManagementFactory}\n+import javax.management.ObjectName\n+\n+import org.apache.spark.memory.MemoryManager\n+\n+/**\n+ * Executor metric types for executor-level metrics stored in ExecutorMetrics.\n+ */\n+sealed trait ExecutorMetricType {\n+  private[spark] def getMetricValue(memoryManager: MemoryManager): Long",
    "line": 28
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "Yup, on my end this is a low conviction suggestion - we might start feeling pain around this as we add more metric types, but for a first pass this is probably fine.",
    "commit": "571285beace1a0c1df92d9f5127828ed8955c93f",
    "createdAt": "2018-08-01T20:12:55Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.metrics\n+\n+import java.lang.management.{BufferPoolMXBean, ManagementFactory}\n+import javax.management.ObjectName\n+\n+import org.apache.spark.memory.MemoryManager\n+\n+/**\n+ * Executor metric types for executor-level metrics stored in ExecutorMetrics.\n+ */\n+sealed trait ExecutorMetricType {\n+  private[spark] def getMetricValue(memoryManager: MemoryManager): Long",
    "line": 28
  }, {
    "author": {
      "login": "edwinalu"
    },
    "body": "Let's stick with the current version for now, and revisit if we end up adding more metric types.",
    "commit": "571285beace1a0c1df92d9f5127828ed8955c93f",
    "createdAt": "2018-08-05T00:50:34Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.metrics\n+\n+import java.lang.management.{BufferPoolMXBean, ManagementFactory}\n+import javax.management.ObjectName\n+\n+import org.apache.spark.memory.MemoryManager\n+\n+/**\n+ * Executor metric types for executor-level metrics stored in ExecutorMetrics.\n+ */\n+sealed trait ExecutorMetricType {\n+  private[spark] def getMetricValue(memoryManager: MemoryManager): Long",
    "line": 28
  }],
  "prId": 21221
}, {
  "comments": [{
    "author": {
      "login": "mccheah"
    },
    "body": "Put a space after `[spark]`.",
    "commit": "571285beace1a0c1df92d9f5127828ed8955c93f",
    "createdAt": "2018-08-13T18:39:05Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.metrics\n+\n+import java.lang.management.{BufferPoolMXBean, ManagementFactory}\n+import javax.management.ObjectName\n+\n+import org.apache.spark.memory.MemoryManager\n+\n+/**\n+ * Executor metric types for executor-level metrics stored in ExecutorMetrics.\n+ */\n+sealed trait ExecutorMetricType {\n+  private[spark] def getMetricValue(memoryManager: MemoryManager): Long\n+  private[spark] val name = getClass().getName().stripSuffix(\"$\").split(\"\"\"\\.\"\"\").last\n+}\n+\n+private[spark] abstract class MemoryManagerExecutorMetricType(\n+    f: MemoryManager => Long) extends ExecutorMetricType {\n+  override private[spark] def getMetricValue(memoryManager: MemoryManager): Long = {\n+    f(memoryManager)\n+  }\n+}\n+\n+private[spark]abstract class MBeanExecutorMetricType(mBeanName: String)"
  }, {
    "author": {
      "login": "edwinalu"
    },
    "body": "Added.",
    "commit": "571285beace1a0c1df92d9f5127828ed8955c93f",
    "createdAt": "2018-08-13T21:48:33Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.metrics\n+\n+import java.lang.management.{BufferPoolMXBean, ManagementFactory}\n+import javax.management.ObjectName\n+\n+import org.apache.spark.memory.MemoryManager\n+\n+/**\n+ * Executor metric types for executor-level metrics stored in ExecutorMetrics.\n+ */\n+sealed trait ExecutorMetricType {\n+  private[spark] def getMetricValue(memoryManager: MemoryManager): Long\n+  private[spark] val name = getClass().getName().stripSuffix(\"$\").split(\"\"\"\\.\"\"\").last\n+}\n+\n+private[spark] abstract class MemoryManagerExecutorMetricType(\n+    f: MemoryManager => Long) extends ExecutorMetricType {\n+  override private[spark] def getMetricValue(memoryManager: MemoryManager): Long = {\n+    f(memoryManager)\n+  }\n+}\n+\n+private[spark]abstract class MBeanExecutorMetricType(mBeanName: String)"
  }],
  "prId": 21221
}]