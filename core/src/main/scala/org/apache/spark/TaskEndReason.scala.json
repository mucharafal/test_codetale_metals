[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "This name is kind of generic. I think it's OK to just call this `ExecutorNormalExit` or something.\n",
    "commit": "ee6fffa9d088271aafe13d15f4db326ed2a0c0c4",
    "createdAt": "2015-08-13T02:42:57Z",
    "diffHunk": "@@ -168,6 +168,23 @@ case class ExecutorLostFailure(execId: String) extends TaskFailedReason {\n \n /**\n  * :: DeveloperApi ::\n+ * The task failed because the executor that it was running on was prematurely terminated. The\n+ * executor is forcibly exited but the exit should be considered as part of normal cluster\n+ * behavior.\n+ */\n+@DeveloperApi\n+case class ExecutorForTaskExited("
  }],
  "prId": 8007
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "it's probably OK to leave out the `taskId` here since this is displayed on the UI next to the task ID anyway. Then you can remove the field from this case class.\n",
    "commit": "ee6fffa9d088271aafe13d15f4db326ed2a0c0c4",
    "createdAt": "2015-08-13T02:49:21Z",
    "diffHunk": "@@ -168,6 +168,23 @@ case class ExecutorLostFailure(execId: String) extends TaskFailedReason {\n \n /**\n  * :: DeveloperApi ::\n+ * The task failed because the executor that it was running on was prematurely terminated. The\n+ * executor is forcibly exited but the exit should be considered as part of normal cluster\n+ * behavior.\n+ */\n+@DeveloperApi\n+case class ExecutorForTaskExited(\n+    taskId: Long,\n+    execId: String,\n+    exitReason: String,\n+    exitCode: Int)\n+    extends TaskFailedReason {\n+  override def toErrorString: String = s\"Task with ID $taskId had its executor ${execId}\" +"
  }],
  "prId": 8007
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "This is a little verbose.\n\n`exit normally with exit code $exitCode:\\n $exitReason`\n",
    "commit": "ee6fffa9d088271aafe13d15f4db326ed2a0c0c4",
    "createdAt": "2015-08-13T02:49:51Z",
    "diffHunk": "@@ -168,6 +168,23 @@ case class ExecutorLostFailure(execId: String) extends TaskFailedReason {\n \n /**\n  * :: DeveloperApi ::\n+ * The task failed because the executor that it was running on was prematurely terminated. The\n+ * executor is forcibly exited but the exit should be considered as part of normal cluster\n+ * behavior.\n+ */\n+@DeveloperApi\n+case class ExecutorForTaskExited(\n+    taskId: Long,\n+    execId: String,\n+    exitReason: String,\n+    exitCode: Int)\n+    extends TaskFailedReason {\n+  override def toErrorString: String = s\"Task with ID $taskId had its executor ${execId}\" +\n+    s\" exit normally with exit code $exitCode, due to the following reason: $exitReason.\""
  }],
  "prId": 8007
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "unindent\n",
    "commit": "ee6fffa9d088271aafe13d15f4db326ed2a0c0c4",
    "createdAt": "2015-08-13T02:50:02Z",
    "diffHunk": "@@ -168,6 +168,23 @@ case class ExecutorLostFailure(execId: String) extends TaskFailedReason {\n \n /**\n  * :: DeveloperApi ::\n+ * The task failed because the executor that it was running on was prematurely terminated. The\n+ * executor is forcibly exited but the exit should be considered as part of normal cluster\n+ * behavior.\n+ */\n+@DeveloperApi\n+case class ExecutorForTaskExited(\n+    taskId: Long,\n+    execId: String,\n+    exitReason: String,\n+    exitCode: Int)\n+    extends TaskFailedReason {"
  }],
  "prId": 8007
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "I'd give the same feedback here, but then `ExecutorLostFailure` is a developer API... still I think that a single reason (with a boolean saying whether to treat it as an error) would be simpler.\n",
    "commit": "ee6fffa9d088271aafe13d15f4db326ed2a0c0c4",
    "createdAt": "2015-08-18T21:05:53Z",
    "diffHunk": "@@ -208,6 +208,22 @@ case class ExecutorLostFailure(execId: String) extends TaskFailedReason {\n \n /**\n  * :: DeveloperApi ::\n+ * The task failed because the executor that it was running on was prematurely terminated. The\n+ * executor is forcibly exited but the exit should be considered as part of normal cluster\n+ * behavior.\n+ */\n+@DeveloperApi\n+case class ExecutorNormalExit("
  }],
  "prId": 8007
}, {
  "comments": [{
    "author": {
      "login": "mccheah"
    },
    "body": "Actually was I supposed to change this? Will changing this break backwards compatibility for users? I notice JsonProtocolSuite broke.\n",
    "commit": "ee6fffa9d088271aafe13d15f4db326ed2a0c0c4",
    "createdAt": "2015-08-25T02:19:34Z",
    "diffHunk": "@@ -202,8 +209,17 @@ case class TaskCommitDenied(jobID: Int, partitionID: Int, attemptID: Int) extend\n  * the task crashed the JVM.\n  */\n @DeveloperApi\n-case class ExecutorLostFailure(execId: String) extends TaskFailedReason {\n-  override def toErrorString: String = s\"ExecutorLostFailure (executor ${execId} lost)\"\n+case class ExecutorLostFailure(execId: String, isNormalExit: Boolean = false)\n+  extends TaskFailedReason {\n+  override def toErrorString: String = {\n+    if (!isNormalExit) {\n+      s\"ExecutorLostFailure (executor ${execId} exited abnormally)\"\n+    } else {\n+      s\"ExecutorLostFailure (executor $execId} exited normally)\"\n+    }\n+  }\n+"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Ah, internal types that are serialized in event logs... :-/ The usual approach is to make new fields `Option[...]`, but that seems like overkill here. If you fixed JsonProtocolSuite then it's good enough for me.\n",
    "commit": "ee6fffa9d088271aafe13d15f4db326ed2a0c0c4",
    "createdAt": "2015-09-02T02:34:46Z",
    "diffHunk": "@@ -202,8 +209,17 @@ case class TaskCommitDenied(jobID: Int, partitionID: Int, attemptID: Int) extend\n  * the task crashed the JVM.\n  */\n @DeveloperApi\n-case class ExecutorLostFailure(execId: String) extends TaskFailedReason {\n-  override def toErrorString: String = s\"ExecutorLostFailure (executor ${execId} lost)\"\n+case class ExecutorLostFailure(execId: String, isNormalExit: Boolean = false)\n+  extends TaskFailedReason {\n+  override def toErrorString: String = {\n+    if (!isNormalExit) {\n+      s\"ExecutorLostFailure (executor ${execId} exited abnormally)\"\n+    } else {\n+      s\"ExecutorLostFailure (executor $execId} exited normally)\"\n+    }\n+  }\n+"
  }],
  "prId": 8007
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "now that it's a property of `TaskEndReason` it's a little verbose. I would just call this `shouldEventuallyFailJob`\n",
    "commit": "ee6fffa9d088271aafe13d15f4db326ed2a0c0c4",
    "createdAt": "2015-09-02T23:44:16Z",
    "diffHunk": "@@ -31,14 +31,18 @@ import org.apache.spark.util.Utils\n  * old stages to be resubmitted, such as shuffle map fetch failures.\n  */\n @DeveloperApi\n-sealed trait TaskEndReason\n+sealed trait TaskEndReason {\n+  def shouldTaskEndEventuallyFailJob: Boolean"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "actually, should this be a property of `TaskFailedReason`? This property doesn't make sense for `Success`, for instance. I would also make it default to `true` there\n",
    "commit": "ee6fffa9d088271aafe13d15f4db326ed2a0c0c4",
    "createdAt": "2015-09-02T23:45:04Z",
    "diffHunk": "@@ -31,14 +31,18 @@ import org.apache.spark.util.Utils\n  * old stages to be resubmitted, such as shuffle map fetch failures.\n  */\n @DeveloperApi\n-sealed trait TaskEndReason\n+sealed trait TaskEndReason {\n+  def shouldTaskEndEventuallyFailJob: Boolean"
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "Methods in the scheduler code only get instances of TaskEndReason, not specifically TaskFailedReason. Although I suppose we could do case matching / casting to appropriately handle where it's important.\n",
    "commit": "ee6fffa9d088271aafe13d15f4db326ed2a0c0c4",
    "createdAt": "2015-09-02T23:53:08Z",
    "diffHunk": "@@ -31,14 +31,18 @@ import org.apache.spark.util.Utils\n  * old stages to be resubmitted, such as shuffle map fetch failures.\n  */\n @DeveloperApi\n-sealed trait TaskEndReason\n+sealed trait TaskEndReason {\n+  def shouldTaskEndEventuallyFailJob: Boolean"
  }],
  "prId": 8007
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "you'll need to move the comment from `DAGScheduler` to explain this\n",
    "commit": "ee6fffa9d088271aafe13d15f4db326ed2a0c0c4",
    "createdAt": "2015-09-02T23:46:17Z",
    "diffHunk": "@@ -194,6 +200,7 @@ case object TaskKilled extends TaskFailedReason {\n case class TaskCommitDenied(jobID: Int, partitionID: Int, attemptID: Int) extends TaskFailedReason {\n   override def toErrorString: String = s\"TaskCommitDenied (Driver denied task commit)\" +\n     s\" for job: $jobID, partition: $partitionID, attempt: $attemptID\"\n+  override def shouldTaskEndEventuallyFailJob: Boolean = false"
  }],
  "prId": 8007
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "missing {\n",
    "commit": "ee6fffa9d088271aafe13d15f4db326ed2a0c0c4",
    "createdAt": "2015-09-02T23:46:30Z",
    "diffHunk": "@@ -202,8 +209,17 @@ case class TaskCommitDenied(jobID: Int, partitionID: Int, attemptID: Int) extend\n  * the task crashed the JVM.\n  */\n @DeveloperApi\n-case class ExecutorLostFailure(execId: String) extends TaskFailedReason {\n-  override def toErrorString: String = s\"ExecutorLostFailure (executor ${execId} lost)\"\n+case class ExecutorLostFailure(execId: String, isNormalExit: Boolean = false)\n+  extends TaskFailedReason {\n+  override def toErrorString: String = {\n+    if (!isNormalExit) {\n+      s\"ExecutorLostFailure (executor ${execId} exited abnormally)\"\n+    } else {\n+      s\"ExecutorLostFailure (executor $execId} exited normally)\""
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "to reduce chances of mistakes like these we can abstract this a little\n\n```\nval maybeNormally = if (isNormalExit) \"normally\" else \"abnormally\"\ns\"ExecutorLostFailure (executor ${execId} exited $maybeNormally)\"\n```\n",
    "commit": "ee6fffa9d088271aafe13d15f4db326ed2a0c0c4",
    "createdAt": "2015-09-02T23:48:16Z",
    "diffHunk": "@@ -202,8 +209,17 @@ case class TaskCommitDenied(jobID: Int, partitionID: Int, attemptID: Int) extend\n  * the task crashed the JVM.\n  */\n @DeveloperApi\n-case class ExecutorLostFailure(execId: String) extends TaskFailedReason {\n-  override def toErrorString: String = s\"ExecutorLostFailure (executor ${execId} lost)\"\n+case class ExecutorLostFailure(execId: String, isNormalExit: Boolean = false)\n+  extends TaskFailedReason {\n+  override def toErrorString: String = {\n+    if (!isNormalExit) {\n+      s\"ExecutorLostFailure (executor ${execId} exited abnormally)\"\n+    } else {\n+      s\"ExecutorLostFailure (executor $execId} exited normally)\""
  }],
  "prId": 8007
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "indentation is a little off?\n",
    "commit": "ee6fffa9d088271aafe13d15f4db326ed2a0c0c4",
    "createdAt": "2015-09-09T21:04:31Z",
    "diffHunk": "@@ -194,6 +196,12 @@ case object TaskKilled extends TaskFailedReason {\n case class TaskCommitDenied(jobID: Int, partitionID: Int, attemptID: Int) extends TaskFailedReason {\n   override def toErrorString: String = s\"TaskCommitDenied (Driver denied task commit)\" +\n     s\" for job: $jobID, partition: $partitionID, attempt: $attemptID\"\n+  /**\n+    If a task failed because its attempt to commit was denied, do not count this failure\n+    towards failing the stage. This is intended to prevent spurious stage failures in cases\n+    where many speculative tasks are launched and denied to commit.\n+  */"
  }],
  "prId": 8007
}]