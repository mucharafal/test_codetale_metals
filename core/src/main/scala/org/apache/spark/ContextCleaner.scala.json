[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "I think you can just call this `CleanCheckpoint` here and other places\n",
    "commit": "1649850082903ced06046d793ec60dc5ad1ee203",
    "createdAt": "2015-02-19T22:34:57Z",
    "diffHunk": "@@ -32,6 +32,7 @@ private sealed trait CleanupTask\n private case class CleanRDD(rddId: Int) extends CleanupTask\n private case class CleanShuffle(shuffleId: Int) extends CleanupTask\n private case class CleanBroadcast(broadcastId: Long) extends CleanupTask\n+private case class CleanRDDCheckpointData(rddId: Int) extends CleanupTask"
  }],
  "prId": 855
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "please add `Unit` return type here and other places\n",
    "commit": "1649850082903ced06046d793ec60dc5ad1ee203",
    "createdAt": "2015-04-10T00:55:59Z",
    "diffHunk": "@@ -139,6 +140,11 @@ private[spark] class ContextCleaner(sc: SparkContext) extends Logging {\n     registerForCleanup(broadcast, CleanBroadcast(broadcast.id))\n   }\n \n+  /** Register a RDDCheckpointData for cleanup when it is garbage collected. */\n+  def registerRDDCheckpointDataForCleanup[T](rdd: RDD[_], parentId: Int) {"
  }],
  "prId": 855
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "space after `sc`\n",
    "commit": "1649850082903ced06046d793ec60dc5ad1ee203",
    "createdAt": "2015-04-10T01:05:11Z",
    "diffHunk": "@@ -223,6 +231,18 @@ private[spark] class ContextCleaner(sc: SparkContext) extends Logging {\n     }\n   }\n \n+  /** Perform checkpoint cleanup. */\n+  def doCleanCheckpoint(rddId: Int, blocking: Boolean) {\n+    try {\n+      logDebug(\"Cleaning rdd checkpoint data \" + rddId)\n+      RDDCheckpointData.clearRDDCheckpointData(sc,rddId, blocking)"
  }],
  "prId": 855
}]