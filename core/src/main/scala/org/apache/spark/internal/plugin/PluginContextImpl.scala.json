[{
  "comments": [{
    "author": {
      "login": "LucaCanali"
    },
    "body": "I have been experimenting with adding a prefix to pluginName, something like \"Plugin.\" + pluginName. \r\nThis would have the advantage in our current setup to ease the use of plugin metrics with a graphite end point stored in InfluxDB. We currently do this with templates for InfluxDB. Current templates take the first entry in the measurement field list (separated by dots) as the sourceName/namespace value (DAGScheduler, BlockManager, JVMCPU, executor, etc), example: https://github.com/LucaCanali/Miscellaneous/blob/master/Spark_Dashboard/influxdb.conf_GRAPHITE\r\nAnother possible (mild?) advantage of adding a prefix to the source name, ahead of the class name, is that it would not allow a clash of plugin names with existing metrics namespaces.",
    "commit": "37ad680ec33ec6afac9d031897a549321e782d9c",
    "createdAt": "2019-10-28T13:50:19Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.internal.plugin\n+\n+import com.codahale.metrics.MetricRegistry\n+\n+import org.apache.spark.{SparkConf, SparkException}\n+import org.apache.spark.api.plugin.PluginContext\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.metrics.MetricsSystem\n+import org.apache.spark.metrics.source.Source\n+import org.apache.spark.rpc.RpcEnv\n+import org.apache.spark.util.RpcUtils\n+\n+private class PluginContextImpl(\n+    pluginName: String,\n+    rpcEnv: RpcEnv,\n+    metricsSystem: MetricsSystem,\n+    override val conf: SparkConf,\n+    override val executorID: String)\n+  extends PluginContext with Logging {\n+\n+  override def hostname(): String = rpcEnv.address.hostPort.split(\":\")(0)\n+\n+  private val registry = new MetricRegistry()\n+\n+  private lazy val driverEndpoint = try {\n+    RpcUtils.makeDriverRef(classOf[PluginEndpoint].getName(), conf, rpcEnv)\n+  } catch {\n+    case e: Exception =>\n+      logWarning(s\"Failed to create driver plugin endpoint ref.\", e)\n+      null\n+  }\n+\n+  override def metricRegistry(): MetricRegistry = registry\n+\n+  override def send(message: AnyRef): Unit = {\n+    if (driverEndpoint == null) {\n+      throw new IllegalStateException(\"Driver endpoint is not known.\")\n+    }\n+    driverEndpoint.send(PluginMessage(pluginName, message))\n+  }\n+\n+  override def ask(message: AnyRef): AnyRef = {\n+    try {\n+      if (driverEndpoint != null) {\n+        driverEndpoint.askSync[AnyRef](PluginMessage(pluginName, message))\n+      } else {\n+        throw new IllegalStateException(\"Driver endpoint is not known.\")\n+      }\n+    } catch {\n+      case e: SparkException if e.getCause() != null =>\n+        throw e.getCause()\n+    }\n+  }\n+\n+  def registerMetrics(): Unit = {\n+    if (!registry.getMetrics().isEmpty()) {\n+      val src = new PluginMetricsSource(pluginName, registry)"
  }],
  "prId": 26170
}]