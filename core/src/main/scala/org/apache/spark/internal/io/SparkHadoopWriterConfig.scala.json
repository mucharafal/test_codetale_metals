[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "do we need this? it seems like we don't want to make this configurable and there will only be two places that call this. Why not just have those two callers invoke the right constructor?\n",
    "commit": "bedcd10fe74192fd71088c8739c786d750639af6",
    "createdAt": "2016-11-14T02:17:26Z",
    "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.internal.io\n+\n+import scala.reflect.ClassTag\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.mapred.JobConf\n+import org.apache.hadoop.mapreduce._\n+\n+import org.apache.spark.util.{SerializableConfiguration, SerializableJobConf, Utils}\n+\n+/**\n+ * Interface for create output format/committer/writer used during saving an RDD using a Hadoop\n+ * OutputFormat (both from the old mapred API and the new mapreduce API)\n+ *\n+ * Notes:\n+ * 1. Implementations should throw [[IllegalArgumentException]] when wrong hadoop API is\n+ *    referenced;\n+ * 2. Implementations must be serializable, as the instance instantiated on the driver\n+ *    will be used for tasks on executors;\n+ * 3. Implementations should have a constructor with exactly one argument:\n+ *    (conf: SerializableConfiguration) or (conf: SerializableJobConf).\n+ */\n+abstract class SparkHadoopWriterConfig[K, V: ClassTag] extends Serializable {\n+\n+  // --------------------------------------------------------------------------\n+  // Create JobContext/TaskAttemptContext\n+  // --------------------------------------------------------------------------\n+\n+  def createJobContext(jobTrackerId: String, jobId: Int): JobContext\n+\n+  def createTaskAttemptContext(\n+      jobTrackerId: String,\n+      jobId: Int,\n+      splitId: Int,\n+      taskAttemptId: Int): TaskAttemptContext\n+\n+  // --------------------------------------------------------------------------\n+  // Create committer\n+  // --------------------------------------------------------------------------\n+\n+  def createCommitter(jobId: Int): HadoopMapReduceCommitProtocol\n+\n+  // --------------------------------------------------------------------------\n+  // Create writer\n+  // --------------------------------------------------------------------------\n+\n+  def initWriter(taskContext: TaskAttemptContext, splitId: Int): Unit\n+\n+  def write(pair: (K, V)): Unit\n+\n+  def closeWriter(taskContext: TaskAttemptContext): Unit\n+\n+  // --------------------------------------------------------------------------\n+  // Create OutputFormat\n+  // --------------------------------------------------------------------------\n+\n+  def initOutputFormat(jobContext: JobContext): Unit\n+\n+  // --------------------------------------------------------------------------\n+  // Verify hadoop config\n+  // --------------------------------------------------------------------------\n+\n+  def assertConf(): Unit\n+\n+  def checkOutputSpecs(jobContext: JobContext): Unit\n+\n+}\n+\n+object SparkHadoopWriterConfig {\n+\n+  /**\n+   * Instantiates a SparkHadoopWriterConfig using the given configuration.\n+   */\n+  def instantiate[K, V](className: String, conf: Configuration)("
  }, {
    "author": {
      "login": "jiangxb1987"
    },
    "body": "Reasonable, I'll address this.\n",
    "commit": "bedcd10fe74192fd71088c8739c786d750639af6",
    "createdAt": "2016-11-14T02:36:01Z",
    "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.internal.io\n+\n+import scala.reflect.ClassTag\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.mapred.JobConf\n+import org.apache.hadoop.mapreduce._\n+\n+import org.apache.spark.util.{SerializableConfiguration, SerializableJobConf, Utils}\n+\n+/**\n+ * Interface for create output format/committer/writer used during saving an RDD using a Hadoop\n+ * OutputFormat (both from the old mapred API and the new mapreduce API)\n+ *\n+ * Notes:\n+ * 1. Implementations should throw [[IllegalArgumentException]] when wrong hadoop API is\n+ *    referenced;\n+ * 2. Implementations must be serializable, as the instance instantiated on the driver\n+ *    will be used for tasks on executors;\n+ * 3. Implementations should have a constructor with exactly one argument:\n+ *    (conf: SerializableConfiguration) or (conf: SerializableJobConf).\n+ */\n+abstract class SparkHadoopWriterConfig[K, V: ClassTag] extends Serializable {\n+\n+  // --------------------------------------------------------------------------\n+  // Create JobContext/TaskAttemptContext\n+  // --------------------------------------------------------------------------\n+\n+  def createJobContext(jobTrackerId: String, jobId: Int): JobContext\n+\n+  def createTaskAttemptContext(\n+      jobTrackerId: String,\n+      jobId: Int,\n+      splitId: Int,\n+      taskAttemptId: Int): TaskAttemptContext\n+\n+  // --------------------------------------------------------------------------\n+  // Create committer\n+  // --------------------------------------------------------------------------\n+\n+  def createCommitter(jobId: Int): HadoopMapReduceCommitProtocol\n+\n+  // --------------------------------------------------------------------------\n+  // Create writer\n+  // --------------------------------------------------------------------------\n+\n+  def initWriter(taskContext: TaskAttemptContext, splitId: Int): Unit\n+\n+  def write(pair: (K, V)): Unit\n+\n+  def closeWriter(taskContext: TaskAttemptContext): Unit\n+\n+  // --------------------------------------------------------------------------\n+  // Create OutputFormat\n+  // --------------------------------------------------------------------------\n+\n+  def initOutputFormat(jobContext: JobContext): Unit\n+\n+  // --------------------------------------------------------------------------\n+  // Verify hadoop config\n+  // --------------------------------------------------------------------------\n+\n+  def assertConf(): Unit\n+\n+  def checkOutputSpecs(jobContext: JobContext): Unit\n+\n+}\n+\n+object SparkHadoopWriterConfig {\n+\n+  /**\n+   * Instantiates a SparkHadoopWriterConfig using the given configuration.\n+   */\n+  def instantiate[K, V](className: String, conf: Configuration)("
  }],
  "prId": 15861
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "One thing that confuses me is why this is named \"Config\"? \n",
    "commit": "bedcd10fe74192fd71088c8739c786d750639af6",
    "createdAt": "2016-11-14T02:20:24Z",
    "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.internal.io\n+\n+import scala.reflect.ClassTag\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.mapred.JobConf\n+import org.apache.hadoop.mapreduce._\n+\n+import org.apache.spark.util.{SerializableConfiguration, SerializableJobConf, Utils}\n+\n+/**\n+ * Interface for create output format/committer/writer used during saving an RDD using a Hadoop\n+ * OutputFormat (both from the old mapred API and the new mapreduce API)\n+ *\n+ * Notes:\n+ * 1. Implementations should throw [[IllegalArgumentException]] when wrong hadoop API is\n+ *    referenced;\n+ * 2. Implementations must be serializable, as the instance instantiated on the driver\n+ *    will be used for tasks on executors;\n+ * 3. Implementations should have a constructor with exactly one argument:\n+ *    (conf: SerializableConfiguration) or (conf: SerializableJobConf).\n+ */\n+abstract class SparkHadoopWriterConfig[K, V: ClassTag] extends Serializable {"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "If I understand this correctly, this is basically an abstraction that makes both the old mapred API and the new mapreduce API work, isn't it?\n",
    "commit": "bedcd10fe74192fd71088c8739c786d750639af6",
    "createdAt": "2016-11-14T02:20:56Z",
    "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.internal.io\n+\n+import scala.reflect.ClassTag\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.mapred.JobConf\n+import org.apache.hadoop.mapreduce._\n+\n+import org.apache.spark.util.{SerializableConfiguration, SerializableJobConf, Utils}\n+\n+/**\n+ * Interface for create output format/committer/writer used during saving an RDD using a Hadoop\n+ * OutputFormat (both from the old mapred API and the new mapreduce API)\n+ *\n+ * Notes:\n+ * 1. Implementations should throw [[IllegalArgumentException]] when wrong hadoop API is\n+ *    referenced;\n+ * 2. Implementations must be serializable, as the instance instantiated on the driver\n+ *    will be used for tasks on executors;\n+ * 3. Implementations should have a constructor with exactly one argument:\n+ *    (conf: SerializableConfiguration) or (conf: SerializableJobConf).\n+ */\n+abstract class SparkHadoopWriterConfig[K, V: ClassTag] extends Serializable {"
  }, {
    "author": {
      "login": "jiangxb1987"
    },
    "body": "Yes, it's an abstraction that conceal the differences between using the `mapred` and the `mapreduce` API. It is called `SparkHadoopWriterConfig` because we create everything from `JobConf/Configuration`, but I believe there is a more concise name for it, any suggestion?\n",
    "commit": "bedcd10fe74192fd71088c8739c786d750639af6",
    "createdAt": "2016-11-14T02:40:08Z",
    "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.internal.io\n+\n+import scala.reflect.ClassTag\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.mapred.JobConf\n+import org.apache.hadoop.mapreduce._\n+\n+import org.apache.spark.util.{SerializableConfiguration, SerializableJobConf, Utils}\n+\n+/**\n+ * Interface for create output format/committer/writer used during saving an RDD using a Hadoop\n+ * OutputFormat (both from the old mapred API and the new mapreduce API)\n+ *\n+ * Notes:\n+ * 1. Implementations should throw [[IllegalArgumentException]] when wrong hadoop API is\n+ *    referenced;\n+ * 2. Implementations must be serializable, as the instance instantiated on the driver\n+ *    will be used for tasks on executors;\n+ * 3. Implementations should have a constructor with exactly one argument:\n+ *    (conf: SerializableConfiguration) or (conf: SerializableJobConf).\n+ */\n+abstract class SparkHadoopWriterConfig[K, V: ClassTag] extends Serializable {"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "maybe just HadoopWriteConfigUtil ?\n",
    "commit": "bedcd10fe74192fd71088c8739c786d750639af6",
    "createdAt": "2016-11-17T07:35:42Z",
    "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.internal.io\n+\n+import scala.reflect.ClassTag\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.mapred.JobConf\n+import org.apache.hadoop.mapreduce._\n+\n+import org.apache.spark.util.{SerializableConfiguration, SerializableJobConf, Utils}\n+\n+/**\n+ * Interface for create output format/committer/writer used during saving an RDD using a Hadoop\n+ * OutputFormat (both from the old mapred API and the new mapreduce API)\n+ *\n+ * Notes:\n+ * 1. Implementations should throw [[IllegalArgumentException]] when wrong hadoop API is\n+ *    referenced;\n+ * 2. Implementations must be serializable, as the instance instantiated on the driver\n+ *    will be used for tasks on executors;\n+ * 3. Implementations should have a constructor with exactly one argument:\n+ *    (conf: SerializableConfiguration) or (conf: SerializableJobConf).\n+ */\n+abstract class SparkHadoopWriterConfig[K, V: ClassTag] extends Serializable {"
  }, {
    "author": {
      "login": "jiangxb1987"
    },
    "body": "Sure - I'll update that.\n",
    "commit": "bedcd10fe74192fd71088c8739c786d750639af6",
    "createdAt": "2016-11-17T08:17:06Z",
    "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.internal.io\n+\n+import scala.reflect.ClassTag\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.mapred.JobConf\n+import org.apache.hadoop.mapreduce._\n+\n+import org.apache.spark.util.{SerializableConfiguration, SerializableJobConf, Utils}\n+\n+/**\n+ * Interface for create output format/committer/writer used during saving an RDD using a Hadoop\n+ * OutputFormat (both from the old mapred API and the new mapreduce API)\n+ *\n+ * Notes:\n+ * 1. Implementations should throw [[IllegalArgumentException]] when wrong hadoop API is\n+ *    referenced;\n+ * 2. Implementations must be serializable, as the instance instantiated on the driver\n+ *    will be used for tasks on executors;\n+ * 3. Implementations should have a constructor with exactly one argument:\n+ *    (conf: SerializableConfiguration) or (conf: SerializableJobConf).\n+ */\n+abstract class SparkHadoopWriterConfig[K, V: ClassTag] extends Serializable {"
  }],
  "prId": 15861
}]