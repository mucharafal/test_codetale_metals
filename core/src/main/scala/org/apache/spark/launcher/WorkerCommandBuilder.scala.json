[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "nit same here\n",
    "commit": "18c7e4db3b9713c4bc13487e3a15e59b6bf2dc58",
    "createdAt": "2015-02-24T21:21:22Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher\n+\n+import java.io.File\n+import java.util.{HashMap => JHashMap, List => JList, Map => JMap}\n+\n+import scala.collection.JavaConversions._\n+\n+import org.apache.spark.deploy.Command\n+\n+/**\n+ * This class is used by CommandUtils. It uses some package-private APIs in SparkLauncher and so\n+ * needs to live in the same package as the rest of the library.\n+ */\n+private[spark] class WorkerCommandBuilder(sparkHome: String, memoryMb: Int, command: Command)\n+    extends AbstractCommandBuilder {"
  }],
  "prId": 3916
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "we should define a `def buildCommand()` that calls this with an empty map in the parent Java class, so we don't have to do this here.\n",
    "commit": "18c7e4db3b9713c4bc13487e3a15e59b6bf2dc58",
    "createdAt": "2015-02-24T21:22:52Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher\n+\n+import java.io.File\n+import java.util.{HashMap => JHashMap, List => JList, Map => JMap}\n+\n+import scala.collection.JavaConversions._\n+\n+import org.apache.spark.deploy.Command\n+\n+/**\n+ * This class is used by CommandUtils. It uses some package-private APIs in SparkLauncher and so\n+ * needs to live in the same package as the rest of the library.\n+ */\n+private[spark] class WorkerCommandBuilder(sparkHome: String, memoryMb: Int, command: Command)\n+    extends AbstractCommandBuilder {\n+\n+  childEnv.putAll(command.environment)\n+  childEnv.put(CommandBuilderUtils.ENV_SPARK_HOME, sparkHome)\n+\n+  override def buildCommand(env: JMap[String, String]): JList[String] = {\n+    val cmd = buildJavaCommand(command.classPathEntries.mkString(File.pathSeparator))\n+    cmd.add(s\"-Xms${memoryMb}M\")\n+    cmd.add(s\"-Xmx${memoryMb}M\")\n+    command.javaOpts.foreach { cmd.add }\n+    addPermGenSizeOpt(cmd)\n+    addOptionString(cmd, getenv(\"SPARK_JAVA_OPTS\"))\n+    cmd\n+  }\n+\n+  def buildCommand(): JList[String] = buildCommand(new JHashMap[String, String]())",
    "line": 48
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "I don't think that's right. The fact that `CommandUtils` ignores any environment set by `buildCommand` is a characteristic of that class, not of the library. The library expects code to actually pay attention to those env variables, it's just that CommandUtils is special and in the context it runs we know it's OK to ignore things.\n",
    "commit": "18c7e4db3b9713c4bc13487e3a15e59b6bf2dc58",
    "createdAt": "2015-02-25T00:21:45Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher\n+\n+import java.io.File\n+import java.util.{HashMap => JHashMap, List => JList, Map => JMap}\n+\n+import scala.collection.JavaConversions._\n+\n+import org.apache.spark.deploy.Command\n+\n+/**\n+ * This class is used by CommandUtils. It uses some package-private APIs in SparkLauncher and so\n+ * needs to live in the same package as the rest of the library.\n+ */\n+private[spark] class WorkerCommandBuilder(sparkHome: String, memoryMb: Int, command: Command)\n+    extends AbstractCommandBuilder {\n+\n+  childEnv.putAll(command.environment)\n+  childEnv.put(CommandBuilderUtils.ENV_SPARK_HOME, sparkHome)\n+\n+  override def buildCommand(env: JMap[String, String]): JList[String] = {\n+    val cmd = buildJavaCommand(command.classPathEntries.mkString(File.pathSeparator))\n+    cmd.add(s\"-Xms${memoryMb}M\")\n+    cmd.add(s\"-Xmx${memoryMb}M\")\n+    command.javaOpts.foreach { cmd.add }\n+    addPermGenSizeOpt(cmd)\n+    addOptionString(cmd, getenv(\"SPARK_JAVA_OPTS\"))\n+    cmd\n+  }\n+\n+  def buildCommand(): JList[String] = buildCommand(new JHashMap[String, String]())",
    "line": 48
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "ok, not a huge deal\n",
    "commit": "18c7e4db3b9713c4bc13487e3a15e59b6bf2dc58",
    "createdAt": "2015-02-25T00:59:18Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher\n+\n+import java.io.File\n+import java.util.{HashMap => JHashMap, List => JList, Map => JMap}\n+\n+import scala.collection.JavaConversions._\n+\n+import org.apache.spark.deploy.Command\n+\n+/**\n+ * This class is used by CommandUtils. It uses some package-private APIs in SparkLauncher and so\n+ * needs to live in the same package as the rest of the library.\n+ */\n+private[spark] class WorkerCommandBuilder(sparkHome: String, memoryMb: Int, command: Command)\n+    extends AbstractCommandBuilder {\n+\n+  childEnv.putAll(command.environment)\n+  childEnv.put(CommandBuilderUtils.ENV_SPARK_HOME, sparkHome)\n+\n+  override def buildCommand(env: JMap[String, String]): JList[String] = {\n+    val cmd = buildJavaCommand(command.classPathEntries.mkString(File.pathSeparator))\n+    cmd.add(s\"-Xms${memoryMb}M\")\n+    cmd.add(s\"-Xmx${memoryMb}M\")\n+    command.javaOpts.foreach { cmd.add }\n+    addPermGenSizeOpt(cmd)\n+    addOptionString(cmd, getenv(\"SPARK_JAVA_OPTS\"))\n+    cmd\n+  }\n+\n+  def buildCommand(): JList[String] = buildCommand(new JHashMap[String, String]())",
    "line": 48
  }],
  "prId": 3916
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "super small nit. I prefer either: `something.foreach(add)` or `something.foreach { x => cmd.add(x) }` but not something inn between. In this case I'd just use the former\n",
    "commit": "18c7e4db3b9713c4bc13487e3a15e59b6bf2dc58",
    "createdAt": "2015-02-24T21:24:10Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher\n+\n+import java.io.File\n+import java.util.{HashMap => JHashMap, List => JList, Map => JMap}\n+\n+import scala.collection.JavaConversions._\n+\n+import org.apache.spark.deploy.Command\n+\n+/**\n+ * This class is used by CommandUtils. It uses some package-private APIs in SparkLauncher and so\n+ * needs to live in the same package as the rest of the library.\n+ */\n+private[spark] class WorkerCommandBuilder(sparkHome: String, memoryMb: Int, command: Command)\n+    extends AbstractCommandBuilder {\n+\n+  childEnv.putAll(command.environment)\n+  childEnv.put(CommandBuilderUtils.ENV_SPARK_HOME, sparkHome)\n+\n+  override def buildCommand(env: JMap[String, String]): JList[String] = {\n+    val cmd = buildJavaCommand(command.classPathEntries.mkString(File.pathSeparator))\n+    cmd.add(s\"-Xms${memoryMb}M\")\n+    cmd.add(s\"-Xmx${memoryMb}M\")\n+    command.javaOpts.foreach { cmd.add }"
  }],
  "prId": 3916
}]