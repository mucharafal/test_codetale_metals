[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`> 0` precondition check",
    "commit": "99c5bc6226b395aeee79167180bfd92a349e45d3",
    "createdAt": "2017-09-28T22:53:03Z",
    "diffHunk": "@@ -108,9 +108,17 @@ class HashPartitioner(partitions: Int) extends Partitioner {\n class RangePartitioner[K : Ordering : ClassTag, V](\n     partitions: Int,\n     rdd: RDD[_ <: Product2[K, V]],\n-    private var ascending: Boolean = true)\n+    private var ascending: Boolean = true,\n+    val samplePointsPerPartitionHint: Int = 20)",
    "line": 6
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "done",
    "commit": "99c5bc6226b395aeee79167180bfd92a349e45d3",
    "createdAt": "2017-09-28T22:56:34Z",
    "diffHunk": "@@ -108,9 +108,17 @@ class HashPartitioner(partitions: Int) extends Partitioner {\n class RangePartitioner[K : Ordering : ClassTag, V](\n     partitions: Int,\n     rdd: RDD[_ <: Product2[K, V]],\n-    private var ascending: Boolean = true)\n+    private var ascending: Boolean = true,\n+    val samplePointsPerPartitionHint: Int = 20)",
    "line": 6
  }],
  "prId": 19387
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "The default value is 100 now in SQLConf, shall we also use 100 here as default value for `samplePointsPerPartitionHint` to be consistent?",
    "commit": "99c5bc6226b395aeee79167180bfd92a349e45d3",
    "createdAt": "2017-09-29T01:57:57Z",
    "diffHunk": "@@ -108,11 +108,21 @@ class HashPartitioner(partitions: Int) extends Partitioner {\n class RangePartitioner[K : Ordering : ClassTag, V](\n     partitions: Int,\n     rdd: RDD[_ <: Product2[K, V]],\n-    private var ascending: Boolean = true)\n+    private var ascending: Boolean = true,\n+    val samplePointsPerPartitionHint: Int = 20)\n   extends Partitioner {\n \n+  // A constructor declared in order to maintain backward compatibility for Java, when we add the\n+  // 4th constructor parameter samplePointsPerPartitionHint. See SPARK-22160.\n+  // This is added to make sure from a bytecode point of view, there is still a 3-arg ctor.\n+  def this(partitions: Int, rdd: RDD[_ <: Product2[K, V]], ascending: Boolean) = {\n+    this(partitions, rdd, ascending, samplePointsPerPartitionHint = 20)",
    "line": 13
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "That one has been there for much longer so I'd rather change the SQL default first and see what happens.\r\n",
    "commit": "99c5bc6226b395aeee79167180bfd92a349e45d3",
    "createdAt": "2017-09-29T04:06:33Z",
    "diffHunk": "@@ -108,11 +108,21 @@ class HashPartitioner(partitions: Int) extends Partitioner {\n class RangePartitioner[K : Ordering : ClassTag, V](\n     partitions: Int,\n     rdd: RDD[_ <: Product2[K, V]],\n-    private var ascending: Boolean = true)\n+    private var ascending: Boolean = true,\n+    val samplePointsPerPartitionHint: Int = 20)\n   extends Partitioner {\n \n+  // A constructor declared in order to maintain backward compatibility for Java, when we add the\n+  // 4th constructor parameter samplePointsPerPartitionHint. See SPARK-22160.\n+  // This is added to make sure from a bytecode point of view, there is still a 3-arg ctor.\n+  def this(partitions: Int, rdd: RDD[_ <: Product2[K, V]], ascending: Boolean) = {\n+    this(partitions, rdd, ascending, samplePointsPerPartitionHint = 20)",
    "line": 13
  }],
  "prId": 19387
}]