[{
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Not related to your changes and I don't expect you to fix it, but this could be an `AtomicInteger` instead.\n",
    "commit": "a581f3f99e072b39c3dcc0a103306b933ceea05b",
    "createdAt": "2014-12-09T19:52:31Z",
    "diffHunk": "@@ -281,7 +282,9 @@ object AccumulatorParam {\n private object Accumulators {\n   // TODO: Use soft references? => need to make readObject work properly then\n   val originals = Map[Long, Accumulable[_, _]]()\n-  val localAccums = Map[Thread, Map[Long, Accumulable[_, _]]]()\n+  val localAccums = new ThreadLocal[Map[Long, Accumulable[_, _]]]() {\n+    override protected def initialValue() = Map[Long, Accumulable[_, _]]()\n+  }\n   var lastId: Long = 0",
    "line": 20
  }, {
    "author": {
      "login": "nkronenfeld"
    },
    "body": "you mean the lastId?\nThat should only ever get used on the client - it's only called from the constructor of an individual accumulator, and if someone is creating one of those on a worker, they're already in trouble - so it should be ok as is.\n",
    "commit": "a581f3f99e072b39c3dcc0a103306b933ceea05b",
    "createdAt": "2014-12-09T23:33:50Z",
    "diffHunk": "@@ -281,7 +282,9 @@ object AccumulatorParam {\n private object Accumulators {\n   // TODO: Use soft references? => need to make readObject work properly then\n   val originals = Map[Long, Accumulable[_, _]]()\n-  val localAccums = Map[Thread, Map[Long, Accumulable[_, _]]]()\n+  val localAccums = new ThreadLocal[Map[Long, Accumulable[_, _]]]() {\n+    override protected def initialValue() = Map[Long, Accumulable[_, _]]()\n+  }\n   var lastId: Long = 0",
    "line": 20
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "Oh, I was just observing that this is only read through the `newIdI()` method and that it's effectively being used like an AtomicInteger.  Just another example of how this particular part of the code is kind of old / out-of-sync with the style of the rest of the codebase.  Don't worry about it; we can do a larger cleanup pass on this later.\n",
    "commit": "a581f3f99e072b39c3dcc0a103306b933ceea05b",
    "createdAt": "2014-12-09T23:40:11Z",
    "diffHunk": "@@ -281,7 +282,9 @@ object AccumulatorParam {\n private object Accumulators {\n   // TODO: Use soft references? => need to make readObject work properly then\n   val originals = Map[Long, Accumulable[_, _]]()\n-  val localAccums = Map[Thread, Map[Long, Accumulable[_, _]]]()\n+  val localAccums = new ThreadLocal[Map[Long, Accumulable[_, _]]]() {\n+    override protected def initialValue() = Map[Long, Accumulable[_, _]]()\n+  }\n   var lastId: Long = 0",
    "line": 20
  }],
  "prId": 3570
}]