[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "package private?",
    "commit": "c7600c24221d29fde31dca921d9d5863af2666e9",
    "createdAt": "2018-07-16T23:05:05Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import java.util.Properties\n+\n+import org.apache.spark.executor.TaskMetrics\n+import org.apache.spark.memory.TaskMemoryManager\n+import org.apache.spark.metrics.MetricsSystem\n+\n+/** A [[BarrierTaskContext]] implementation. */\n+class BarrierTaskContextImpl("
  }],
  "prId": 21758
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Ditto. Please provide JIRA link with TODO.",
    "commit": "c7600c24221d29fde31dca921d9d5863af2666e9",
    "createdAt": "2018-07-16T23:37:39Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import java.util.Properties\n+\n+import org.apache.spark.executor.TaskMetrics\n+import org.apache.spark.memory.TaskMemoryManager\n+import org.apache.spark.metrics.MetricsSystem\n+\n+/** A [[BarrierTaskContext]] implementation. */\n+class BarrierTaskContextImpl(\n+    override val stageId: Int,\n+    override val stageAttemptNumber: Int,\n+    override val partitionId: Int,\n+    override val taskAttemptId: Long,\n+    override val attemptNumber: Int,\n+    override val taskMemoryManager: TaskMemoryManager,\n+    localProperties: Properties,\n+    @transient private val metricsSystem: MetricsSystem,\n+    // The default value is only used in tests.\n+    override val taskMetrics: TaskMetrics = TaskMetrics.empty)\n+  extends TaskContextImpl(stageId, stageAttemptNumber, partitionId, taskAttemptId, attemptNumber,\n+      taskMemoryManager, localProperties, metricsSystem, taskMetrics)\n+    with BarrierTaskContext {\n+\n+  // TODO implement global barrier.\n+  override def barrier(): Unit = {}"
  }],
  "prId": 21758
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "is the first \".trim()\" necessary?",
    "commit": "c7600c24221d29fde31dca921d9d5863af2666e9",
    "createdAt": "2018-07-16T23:38:41Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark\n+\n+import java.util.Properties\n+\n+import org.apache.spark.executor.TaskMetrics\n+import org.apache.spark.memory.TaskMemoryManager\n+import org.apache.spark.metrics.MetricsSystem\n+\n+/** A [[BarrierTaskContext]] implementation. */\n+class BarrierTaskContextImpl(\n+    override val stageId: Int,\n+    override val stageAttemptNumber: Int,\n+    override val partitionId: Int,\n+    override val taskAttemptId: Long,\n+    override val attemptNumber: Int,\n+    override val taskMemoryManager: TaskMemoryManager,\n+    localProperties: Properties,\n+    @transient private val metricsSystem: MetricsSystem,\n+    // The default value is only used in tests.\n+    override val taskMetrics: TaskMetrics = TaskMetrics.empty)\n+  extends TaskContextImpl(stageId, stageAttemptNumber, partitionId, taskAttemptId, attemptNumber,\n+      taskMemoryManager, localProperties, metricsSystem, taskMetrics)\n+    with BarrierTaskContext {\n+\n+  // TODO implement global barrier.\n+  override def barrier(): Unit = {}\n+\n+  override def getTaskInfos(): Array[BarrierTaskInfo] = {\n+    val hostsStr = localProperties.getProperty(\"hosts\", \"\")\n+    hostsStr.trim().split(\",\").map(_.trim()).map(new BarrierTaskInfo(_))"
  }],
  "prId": 21758
}]