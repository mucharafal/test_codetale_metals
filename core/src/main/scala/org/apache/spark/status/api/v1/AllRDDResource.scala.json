[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: indentation\n",
    "commit": "da1e35f39cd60878f32b5446438afdf25d868d7b",
    "createdAt": "2015-04-07T18:50:49Z",
    "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.status.api.v1\n+\n+import javax.ws.rs.{GET, PathParam, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.storage.{RDDInfo, StorageStatus, StorageUtils}\n+import org.apache.spark.ui.storage.StorageListener\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class AllRDDResource(uiRoot: UIRoot) {\n+\n+  @GET\n+  def jobsList(\n+    @PathParam(\"appId\") appId: String\n+  ): Seq[RDDStorageInfo] = {\n+    uiRoot.withSparkUI(appId) { ui =>\n+      // should all access on storageListener also be synchronized?\n+      val storageStatusList = ui.storageListener.storageStatusList\n+      val rddInfos = ui.storageListener.rddInfoList\n+      rddInfos.map{rddInfo =>\n+        AllRDDResource.getRDDStorageInfo(rddInfo.id, rddInfo, storageStatusList,\n+          includeDetails = false)\n+      }\n+\n+    }\n+  }\n+\n+}\n+\n+private[spark] object AllRDDResource {\n+\n+  def getRDDStorageInfo(\n+      rddId: Int,\n+      listener: StorageListener,\n+      includeDetails: Boolean): Option[RDDStorageInfo] = {\n+    val storageStatusList = listener.storageStatusList\n+    listener.rddInfoList.find { _.id == rddId }.map { rddInfo =>\n+      getRDDStorageInfo(rddId, rddInfo, storageStatusList, includeDetails)\n+    }\n+  }\n+\n+  def getRDDStorageInfo(\n+    rddId: Int,\n+    rddInfo: RDDInfo,\n+    storageStatusList: Seq[StorageStatus],\n+    includeDetails: Boolean\n+  ): RDDStorageInfo = {\n+    val workers = storageStatusList.map { (rddId, _) }\n+    val blockLocations = StorageUtils.getRddBlockLocations(rddId, storageStatusList)\n+    val blocks = storageStatusList\n+      .flatMap { _.rddBlocksById(rddId) }\n+      .sortWith { _._1.name < _._1.name }\n+      .map { case (blockId, status) =>\n+      (blockId, status, blockLocations.get(blockId).getOrElse(Seq[String](\"Unknown\")))"
  }],
  "prId": 4435
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: delete\n",
    "commit": "da1e35f39cd60878f32b5446438afdf25d868d7b",
    "createdAt": "2015-04-20T21:41:29Z",
    "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.status.api.v1\n+\n+import javax.ws.rs.{GET, PathParam, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.storage.{RDDInfo, StorageStatus, StorageUtils}\n+import org.apache.spark.ui.storage.StorageListener\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class AllRDDResource(uiRoot: UIRoot) {\n+\n+  @GET\n+  def jobsList(\n+    @PathParam(\"appId\") appId: String\n+  ): Seq[RDDStorageInfo] = {\n+    uiRoot.withSparkUI(appId) { ui =>\n+      // should all access on storageListener also be synchronized?\n+      val storageStatusList = ui.storageListener.storageStatusList\n+      val rddInfos = ui.storageListener.rddInfoList\n+      rddInfos.map{rddInfo =>\n+        AllRDDResource.getRDDStorageInfo(rddInfo.id, rddInfo, storageStatusList,\n+          includeDetails = false)\n+      }\n+\n+    }\n+  }\n+\n+}\n+\n+private[spark] object AllRDDResource {\n+\n+  def getRDDStorageInfo(\n+      rddId: Int,\n+      listener: StorageListener,\n+      includeDetails: Boolean): Option[RDDStorageInfo] = {\n+    val storageStatusList = listener.storageStatusList\n+    listener.rddInfoList.find { _.id == rddId }.map { rddInfo =>\n+      getRDDStorageInfo(rddId, rddInfo, storageStatusList, includeDetails)\n+    }\n+  }\n+\n+  def getRDDStorageInfo(\n+    rddId: Int,\n+    rddInfo: RDDInfo,\n+    storageStatusList: Seq[StorageStatus],\n+    includeDetails: Boolean\n+  ): RDDStorageInfo = {\n+    val workers = storageStatusList.map { (rddId, _) }\n+    val blockLocations = StorageUtils.getRddBlockLocations(rddId, storageStatusList)\n+    val blocks = storageStatusList\n+      .flatMap { _.rddBlocksById(rddId) }\n+      .sortWith { _._1.name < _._1.name }\n+      .map { case (blockId, status) =>\n+        (blockId, status, blockLocations.get(blockId).getOrElse(Seq[String](\"Unknown\")))\n+      }\n+",
    "line": 66
  }],
  "prId": 4435
}]