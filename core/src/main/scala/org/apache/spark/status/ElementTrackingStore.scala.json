[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "You're kinda using this as a boolean, so `AtomicBoolean`? Also, `private`, and the variable name is a little cryptic (maybe just call it `busy` or something?).",
    "commit": "e062cf939298684d2dd64ba73dc8a8a6b3b10f68",
    "createdAt": "2019-05-15T23:51:13Z",
    "diffHunk": "@@ -46,7 +50,26 @@ import org.apache.spark.util.kvstore._\n  */\n private[spark] class ElementTrackingStore(store: KVStore, conf: SparkConf) extends KVStore {\n \n-  private val triggers = new HashMap[Class[_], Seq[Trigger[_]]]()\n+  private class LatchedTriggers(val triggers: Seq[Trigger[_]]) {\n+    val countDeferred = new AtomicInteger(0)"
  }],
  "prId": 24616
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "You could avoid the `WriteQueueResult` object with an inlined `if...else` here.",
    "commit": "e062cf939298684d2dd64ba73dc8a8a6b3b10f68",
    "createdAt": "2019-05-15T23:54:05Z",
    "diffHunk": "@@ -46,7 +50,26 @@ import org.apache.spark.util.kvstore._\n  */\n private[spark] class ElementTrackingStore(store: KVStore, conf: SparkConf) extends KVStore {\n \n-  private val triggers = new HashMap[Class[_], Seq[Trigger[_]]]()\n+  private class LatchedTriggers(val triggers: Seq[Trigger[_]]) {\n+    val countDeferred = new AtomicInteger(0)\n+\n+    def fireOnce(f: Seq[Trigger[_]] => Unit): Boolean = {\n+      val shouldExecute = countDeferred.compareAndSet(0, 1)\n+      if (shouldExecute) {\n+        doAsync {\n+          countDeferred.set(0)\n+          f(triggers)\n+        }\n+      }\n+      shouldExecute"
  }, {
    "author": {
      "login": "davidnavas"
    },
    "body": "I think there's a case where I needed the tri-value, but I'll take another peek.",
    "commit": "e062cf939298684d2dd64ba73dc8a8a6b3b10f68",
    "createdAt": "2019-05-16T02:43:50Z",
    "diffHunk": "@@ -46,7 +50,26 @@ import org.apache.spark.util.kvstore._\n  */\n private[spark] class ElementTrackingStore(store: KVStore, conf: SparkConf) extends KVStore {\n \n-  private val triggers = new HashMap[Class[_], Seq[Trigger[_]]]()\n+  private class LatchedTriggers(val triggers: Seq[Trigger[_]]) {\n+    val countDeferred = new AtomicInteger(0)\n+\n+    def fireOnce(f: Seq[Trigger[_]] => Unit): Boolean = {\n+      val shouldExecute = countDeferred.compareAndSet(0, 1)\n+      if (shouldExecute) {\n+        doAsync {\n+          countDeferred.set(0)\n+          f(triggers)\n+        }\n+      }\n+      shouldExecute"
  }, {
    "author": {
      "login": "davidnavas"
    },
    "body": "Hmm, my memory is faulty, this isn't a tri-value.  I'll inline here, sure.\r\n",
    "commit": "e062cf939298684d2dd64ba73dc8a8a6b3b10f68",
    "createdAt": "2019-05-16T17:23:47Z",
    "diffHunk": "@@ -46,7 +50,26 @@ import org.apache.spark.util.kvstore._\n  */\n private[spark] class ElementTrackingStore(store: KVStore, conf: SparkConf) extends KVStore {\n \n-  private val triggers = new HashMap[Class[_], Seq[Trigger[_]]]()\n+  private class LatchedTriggers(val triggers: Seq[Trigger[_]]) {\n+    val countDeferred = new AtomicInteger(0)\n+\n+    def fireOnce(f: Seq[Trigger[_]] => Unit): Boolean = {\n+      val shouldExecute = countDeferred.compareAndSet(0, 1)\n+      if (shouldExecute) {\n+        doAsync {\n+          countDeferred.set(0)\n+          f(triggers)\n+        }\n+      }\n+      shouldExecute"
  }],
  "prId": 24616
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Actually don't need this variable now.",
    "commit": "e062cf939298684d2dd64ba73dc8a8a6b3b10f68",
    "createdAt": "2019-05-17T23:18:42Z",
    "diffHunk": "@@ -46,7 +50,28 @@ import org.apache.spark.util.kvstore._\n  */\n private[spark] class ElementTrackingStore(store: KVStore, conf: SparkConf) extends KVStore {\n \n-  private val triggers = new HashMap[Class[_], Seq[Trigger[_]]]()\n+  private class LatchedTriggers(val triggers: Seq[Trigger[_]]) {\n+    private val pending = new AtomicBoolean(false)\n+\n+    def fireOnce(f: Seq[Trigger[_]] => Unit): WriteQueueResult = {\n+      val shouldEnqueue = pending.compareAndSet(false, true)"
  }],
  "prId": 24616
}]