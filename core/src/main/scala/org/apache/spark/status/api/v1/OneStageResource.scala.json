[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: move `.` to this line, indent next line.\n\nIf this the correct exception to throw here? It will show up as a 500 error, most probably.\n",
    "commit": "da1e35f39cd60878f32b5446438afdf25d868d7b",
    "createdAt": "2015-04-07T19:58:54Z",
    "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.status.api.v1\n+\n+import javax.ws.rs._\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.scheduler.StageInfo\n+import org.apache.spark.ui.jobs.JobProgressListener\n+import org.apache.spark.ui.jobs.UIData.StageUIData\n+import org.apache.spark.util.SparkEnum\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class OneStageResource(uiRoot: UIRoot) {\n+\n+  @GET\n+  @Path(\"\")\n+  def stageData(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int\n+  ): Seq[StageData] = {\n+    forStage(appId, stageId){ (listener,stageAttempts) =>\n+      stageAttempts.map { case (status, stageInfo) =>\n+        val stageUiData = listener.synchronized {\n+          listener.stageIdToData.get((stageInfo.stageId, stageInfo.attemptId)).\n+            getOrElse(throw new SparkException(\"failed to get full stage data for stage: \" +"
  }, {
    "author": {
      "login": "squito"
    },
    "body": "originally I thought 500 was OK, since it meant some internal inconsistent state.  But now I realize there is a little race condition between when I get the stage status, and the full stage ui data -- the lock on the listener is released in the middle, so the stage might get cleaned up in between.  I'll change the way `forStageAttempt` etc. to fix that\n",
    "commit": "da1e35f39cd60878f32b5446438afdf25d868d7b",
    "createdAt": "2015-04-08T16:00:16Z",
    "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.status.api.v1\n+\n+import javax.ws.rs._\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.scheduler.StageInfo\n+import org.apache.spark.ui.jobs.JobProgressListener\n+import org.apache.spark.ui.jobs.UIData.StageUIData\n+import org.apache.spark.util.SparkEnum\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class OneStageResource(uiRoot: UIRoot) {\n+\n+  @GET\n+  @Path(\"\")\n+  def stageData(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int\n+  ): Seq[StageData] = {\n+    forStage(appId, stageId){ (listener,stageAttempts) =>\n+      stageAttempts.map { case (status, stageInfo) =>\n+        val stageUiData = listener.synchronized {\n+          listener.stageIdToData.get((stageInfo.stageId, stageInfo.attemptId)).\n+            getOrElse(throw new SparkException(\"failed to get full stage data for stage: \" +"
  }],
  "prId": 4435
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "I see in certain places you're using comma-separated values, while in others you're using `List[Something]`. Is that intentional?\n",
    "commit": "da1e35f39cd60878f32b5446438afdf25d868d7b",
    "createdAt": "2015-04-07T20:00:02Z",
    "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.status.api.v1\n+\n+import javax.ws.rs._\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.scheduler.StageInfo\n+import org.apache.spark.ui.jobs.JobProgressListener\n+import org.apache.spark.ui.jobs.UIData.StageUIData\n+import org.apache.spark.util.SparkEnum\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class OneStageResource(uiRoot: UIRoot) {\n+\n+  @GET\n+  @Path(\"\")\n+  def stageData(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int\n+  ): Seq[StageData] = {\n+    forStage(appId, stageId){ (listener,stageAttempts) =>\n+      stageAttempts.map { case (status, stageInfo) =>\n+        val stageUiData = listener.synchronized {\n+          listener.stageIdToData.get((stageInfo.stageId, stageInfo.attemptId)).\n+            getOrElse(throw new SparkException(\"failed to get full stage data for stage: \" +\n+            stageInfo.stageId + \":\" + stageInfo.attemptId)\n+            )\n+        }\n+        AllStagesResource.stageUiToStageData(status, stageInfo, stageUiData,\n+          includeDetails = true)\n+      }\n+    }\n+  }\n+\n+  @GET\n+  @Path(\"/{attemptId: \\\\d+}\")\n+  def oneAttemptData(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int,\n+    @PathParam(\"attemptId\") attemptId: Int\n+  ): StageData = {\n+    forStageAttempt(appId, stageId, attemptId) { case (status, stageInfo, stageUiData) =>\n+      AllStagesResource.stageUiToStageData(status, stageInfo, stageUiData,\n+        includeDetails = true)\n+    }\n+  }\n+\n+  @GET\n+  @Path(\"/{attemptId: \\\\d+}/taskSummary\")\n+  def stageData(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int,\n+    @PathParam(\"attemptId\") attemptId: Int,\n+    @DefaultValue(\"0.05,0.25,0.5,0.75,0.95\") @QueryParam(\"quantiles\") quantileString: String"
  }, {
    "author": {
      "login": "squito"
    },
    "body": "I ran into a couple of limitations w/ `List[X]`.  (a) I found the longer URLs annoying `?quantile=0.01&quantile=0.05&quantile=0.25...` (b) I couldn't do nice error handling if parsing failed for individual `X`s (c) couldn't figure out how to specify a default with multiple values (which kinda makes sense, since its not clear what the behavior should be if the user added another value in that case).\n\n(c) is pretty important in this case.  I am tempted to drop use of `List[X]` in the other places if we want consistency -- also I could put in better error handling.\n",
    "commit": "da1e35f39cd60878f32b5446438afdf25d868d7b",
    "createdAt": "2015-04-08T17:30:22Z",
    "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.status.api.v1\n+\n+import javax.ws.rs._\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.scheduler.StageInfo\n+import org.apache.spark.ui.jobs.JobProgressListener\n+import org.apache.spark.ui.jobs.UIData.StageUIData\n+import org.apache.spark.util.SparkEnum\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class OneStageResource(uiRoot: UIRoot) {\n+\n+  @GET\n+  @Path(\"\")\n+  def stageData(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int\n+  ): Seq[StageData] = {\n+    forStage(appId, stageId){ (listener,stageAttempts) =>\n+      stageAttempts.map { case (status, stageInfo) =>\n+        val stageUiData = listener.synchronized {\n+          listener.stageIdToData.get((stageInfo.stageId, stageInfo.attemptId)).\n+            getOrElse(throw new SparkException(\"failed to get full stage data for stage: \" +\n+            stageInfo.stageId + \":\" + stageInfo.attemptId)\n+            )\n+        }\n+        AllStagesResource.stageUiToStageData(status, stageInfo, stageUiData,\n+          includeDetails = true)\n+      }\n+    }\n+  }\n+\n+  @GET\n+  @Path(\"/{attemptId: \\\\d+}\")\n+  def oneAttemptData(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int,\n+    @PathParam(\"attemptId\") attemptId: Int\n+  ): StageData = {\n+    forStageAttempt(appId, stageId, attemptId) { case (status, stageInfo, stageUiData) =>\n+      AllStagesResource.stageUiToStageData(status, stageInfo, stageUiData,\n+        includeDetails = true)\n+    }\n+  }\n+\n+  @GET\n+  @Path(\"/{attemptId: \\\\d+}/taskSummary\")\n+  def stageData(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int,\n+    @PathParam(\"attemptId\") attemptId: Int,\n+    @DefaultValue(\"0.05,0.25,0.5,0.75,0.95\") @QueryParam(\"quantiles\") quantileString: String"
  }],
  "prId": 4435
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "You can chain `filter` and `map` into a single call here.\n",
    "commit": "da1e35f39cd60878f32b5446438afdf25d868d7b",
    "createdAt": "2015-04-07T20:03:20Z",
    "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.status.api.v1\n+\n+import javax.ws.rs._\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.scheduler.StageInfo\n+import org.apache.spark.ui.jobs.JobProgressListener\n+import org.apache.spark.ui.jobs.UIData.StageUIData\n+import org.apache.spark.util.SparkEnum\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class OneStageResource(uiRoot: UIRoot) {\n+\n+  @GET\n+  @Path(\"\")\n+  def stageData(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int\n+  ): Seq[StageData] = {\n+    forStage(appId, stageId){ (listener,stageAttempts) =>\n+      stageAttempts.map { case (status, stageInfo) =>\n+        val stageUiData = listener.synchronized {\n+          listener.stageIdToData.get((stageInfo.stageId, stageInfo.attemptId)).\n+            getOrElse(throw new SparkException(\"failed to get full stage data for stage: \" +\n+            stageInfo.stageId + \":\" + stageInfo.attemptId)\n+            )\n+        }\n+        AllStagesResource.stageUiToStageData(status, stageInfo, stageUiData,\n+          includeDetails = true)\n+      }\n+    }\n+  }\n+\n+  @GET\n+  @Path(\"/{attemptId: \\\\d+}\")\n+  def oneAttemptData(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int,\n+    @PathParam(\"attemptId\") attemptId: Int\n+  ): StageData = {\n+    forStageAttempt(appId, stageId, attemptId) { case (status, stageInfo, stageUiData) =>\n+      AllStagesResource.stageUiToStageData(status, stageInfo, stageUiData,\n+        includeDetails = true)\n+    }\n+  }\n+\n+  @GET\n+  @Path(\"/{attemptId: \\\\d+}/taskSummary\")\n+  def stageData(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int,\n+    @PathParam(\"attemptId\") attemptId: Int,\n+    @DefaultValue(\"0.05,0.25,0.5,0.75,0.95\") @QueryParam(\"quantiles\") quantileString: String\n+  ): TaskMetricDistributions = {\n+    forStageAttempt(appId, stageId, attemptId) { case (status, stageInfo, stageUiData) =>\n+      val quantiles = quantileString.split(\",\").map{s =>\n+        try {\n+          s.toDouble\n+        } catch {\n+          case nfe: NumberFormatException =>\n+            throw new BadParameterException(\"quantiles\", \"double\", s)\n+        }\n+      }\n+      AllStagesResource.taskMetricDistributions(stageUiData.taskData.values, quantiles)\n+    }\n+  }\n+\n+  @GET\n+  @Path(\"/{attemptId: \\\\d+}/taskList\")\n+  def taskList(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int,\n+    @PathParam(\"attemptId\") attemptId: Int,\n+    @DefaultValue(\"0\") @QueryParam(\"offset\") offset: Int,\n+    @DefaultValue(\"20\") @QueryParam(\"length\") length: Int,\n+    @DefaultValue(\"ID\") @QueryParam(\"sortBy\") sortBy: TaskSorting\n+  ): Seq[TaskData] = {\n+    forStageAttempt(appId, stageId, attemptId) { case (status, stageInfo, stageUiData) =>\n+      val tasks = stageUiData.taskData.values.map{AllStagesResource.convertTaskData}.toIndexedSeq\n+        .sorted(sortBy.ordering)\n+      tasks.slice(offset, offset + length)  \n+    }\n+  }\n+\n+\n+  def forStage[T](appId: String, stageId: Int)\n+      (f: (JobProgressListener, Seq[(StageStatus, StageInfo)]) => T): T = {\n+    uiRoot.withSparkUI(appId) { ui =>\n+      val stageAndStatus = AllStagesResource.stagesAndStatus(ui)\n+      val stageAttempts = stageAndStatus.flatMap { case (status, stages) =>\n+        val matched = stages.filter { stage => stage.stageId == stageId}"
  }],
  "prId": 4435
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: space after `{`, space after `,`\n",
    "commit": "da1e35f39cd60878f32b5446438afdf25d868d7b",
    "createdAt": "2015-04-07T20:05:14Z",
    "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.status.api.v1\n+\n+import javax.ws.rs._\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.scheduler.StageInfo\n+import org.apache.spark.ui.jobs.JobProgressListener\n+import org.apache.spark.ui.jobs.UIData.StageUIData\n+import org.apache.spark.util.SparkEnum\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class OneStageResource(uiRoot: UIRoot) {\n+\n+  @GET\n+  @Path(\"\")\n+  def stageData(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int\n+  ): Seq[StageData] = {\n+    forStage(appId, stageId){ (listener,stageAttempts) =>"
  }],
  "prId": 4435
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Hmm... this threw me off a little bit. `forStageAttempt` sounds too much like `foreachStageAttempt`, while it's more like `withStageAttempt`. Meaning, the closure will just be executed on the single stage attempt being defined by the arguments, from what I understand. Maybe rename so it's clearer?\n",
    "commit": "da1e35f39cd60878f32b5446438afdf25d868d7b",
    "createdAt": "2015-04-07T20:11:26Z",
    "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.status.api.v1\n+\n+import javax.ws.rs._\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.scheduler.StageInfo\n+import org.apache.spark.ui.jobs.JobProgressListener\n+import org.apache.spark.ui.jobs.UIData.StageUIData\n+import org.apache.spark.util.SparkEnum\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class OneStageResource(uiRoot: UIRoot) {\n+\n+  @GET\n+  @Path(\"\")\n+  def stageData(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int\n+  ): Seq[StageData] = {\n+    forStage(appId, stageId){ (listener,stageAttempts) =>\n+      stageAttempts.map { case (status, stageInfo) =>\n+        val stageUiData = listener.synchronized {\n+          listener.stageIdToData.get((stageInfo.stageId, stageInfo.attemptId)).\n+            getOrElse(throw new SparkException(\"failed to get full stage data for stage: \" +\n+            stageInfo.stageId + \":\" + stageInfo.attemptId)\n+            )\n+        }\n+        AllStagesResource.stageUiToStageData(status, stageInfo, stageUiData,\n+          includeDetails = true)\n+      }\n+    }\n+  }\n+\n+  @GET\n+  @Path(\"/{attemptId: \\\\d+}\")\n+  def oneAttemptData(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int,\n+    @PathParam(\"attemptId\") attemptId: Int\n+  ): StageData = {\n+    forStageAttempt(appId, stageId, attemptId) { case (status, stageInfo, stageUiData) =>\n+      AllStagesResource.stageUiToStageData(status, stageInfo, stageUiData,\n+        includeDetails = true)\n+    }\n+  }\n+\n+  @GET\n+  @Path(\"/{attemptId: \\\\d+}/taskSummary\")\n+  def stageData(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int,\n+    @PathParam(\"attemptId\") attemptId: Int,\n+    @DefaultValue(\"0.05,0.25,0.5,0.75,0.95\") @QueryParam(\"quantiles\") quantileString: String\n+  ): TaskMetricDistributions = {\n+    forStageAttempt(appId, stageId, attemptId) { case (status, stageInfo, stageUiData) =>\n+      val quantiles = quantileString.split(\",\").map{s =>\n+        try {\n+          s.toDouble\n+        } catch {\n+          case nfe: NumberFormatException =>\n+            throw new BadParameterException(\"quantiles\", \"double\", s)\n+        }\n+      }\n+      AllStagesResource.taskMetricDistributions(stageUiData.taskData.values, quantiles)\n+    }\n+  }\n+\n+  @GET\n+  @Path(\"/{attemptId: \\\\d+}/taskList\")\n+  def taskList(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int,\n+    @PathParam(\"attemptId\") attemptId: Int,\n+    @DefaultValue(\"0\") @QueryParam(\"offset\") offset: Int,\n+    @DefaultValue(\"20\") @QueryParam(\"length\") length: Int,\n+    @DefaultValue(\"ID\") @QueryParam(\"sortBy\") sortBy: TaskSorting\n+  ): Seq[TaskData] = {\n+    forStageAttempt(appId, stageId, attemptId) { case (status, stageInfo, stageUiData) =>"
  }, {
    "author": {
      "login": "squito"
    },
    "body": "good point.  I'll also rename `forStage` -> `withStage`\n",
    "commit": "da1e35f39cd60878f32b5446438afdf25d868d7b",
    "createdAt": "2015-04-08T17:34:01Z",
    "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.status.api.v1\n+\n+import javax.ws.rs._\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.scheduler.StageInfo\n+import org.apache.spark.ui.jobs.JobProgressListener\n+import org.apache.spark.ui.jobs.UIData.StageUIData\n+import org.apache.spark.util.SparkEnum\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class OneStageResource(uiRoot: UIRoot) {\n+\n+  @GET\n+  @Path(\"\")\n+  def stageData(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int\n+  ): Seq[StageData] = {\n+    forStage(appId, stageId){ (listener,stageAttempts) =>\n+      stageAttempts.map { case (status, stageInfo) =>\n+        val stageUiData = listener.synchronized {\n+          listener.stageIdToData.get((stageInfo.stageId, stageInfo.attemptId)).\n+            getOrElse(throw new SparkException(\"failed to get full stage data for stage: \" +\n+            stageInfo.stageId + \":\" + stageInfo.attemptId)\n+            )\n+        }\n+        AllStagesResource.stageUiToStageData(status, stageInfo, stageUiData,\n+          includeDetails = true)\n+      }\n+    }\n+  }\n+\n+  @GET\n+  @Path(\"/{attemptId: \\\\d+}\")\n+  def oneAttemptData(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int,\n+    @PathParam(\"attemptId\") attemptId: Int\n+  ): StageData = {\n+    forStageAttempt(appId, stageId, attemptId) { case (status, stageInfo, stageUiData) =>\n+      AllStagesResource.stageUiToStageData(status, stageInfo, stageUiData,\n+        includeDetails = true)\n+    }\n+  }\n+\n+  @GET\n+  @Path(\"/{attemptId: \\\\d+}/taskSummary\")\n+  def stageData(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int,\n+    @PathParam(\"attemptId\") attemptId: Int,\n+    @DefaultValue(\"0.05,0.25,0.5,0.75,0.95\") @QueryParam(\"quantiles\") quantileString: String\n+  ): TaskMetricDistributions = {\n+    forStageAttempt(appId, stageId, attemptId) { case (status, stageInfo, stageUiData) =>\n+      val quantiles = quantileString.split(\",\").map{s =>\n+        try {\n+          s.toDouble\n+        } catch {\n+          case nfe: NumberFormatException =>\n+            throw new BadParameterException(\"quantiles\", \"double\", s)\n+        }\n+      }\n+      AllStagesResource.taskMetricDistributions(stageUiData.taskData.values, quantiles)\n+    }\n+  }\n+\n+  @GET\n+  @Path(\"/{attemptId: \\\\d+}/taskList\")\n+  def taskList(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int,\n+    @PathParam(\"attemptId\") attemptId: Int,\n+    @DefaultValue(\"0\") @QueryParam(\"offset\") offset: Int,\n+    @DefaultValue(\"20\") @QueryParam(\"length\") length: Int,\n+    @DefaultValue(\"ID\") @QueryParam(\"sortBy\") sortBy: TaskSorting\n+  ): Seq[TaskData] = {\n+    forStageAttempt(appId, stageId, attemptId) { case (status, stageInfo, stageUiData) =>"
  }],
  "prId": 4435
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: add empty line before here\n",
    "commit": "da1e35f39cd60878f32b5446438afdf25d868d7b",
    "createdAt": "2015-04-07T20:13:27Z",
    "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.status.api.v1\n+\n+import javax.ws.rs._\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.scheduler.StageInfo\n+import org.apache.spark.ui.jobs.JobProgressListener\n+import org.apache.spark.ui.jobs.UIData.StageUIData\n+import org.apache.spark.util.SparkEnum\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class OneStageResource(uiRoot: UIRoot) {\n+\n+  @GET\n+  @Path(\"\")\n+  def stageData(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int\n+  ): Seq[StageData] = {\n+    forStage(appId, stageId){ (listener,stageAttempts) =>\n+      stageAttempts.map { case (status, stageInfo) =>\n+        val stageUiData = listener.synchronized {\n+          listener.stageIdToData.get((stageInfo.stageId, stageInfo.attemptId)).\n+            getOrElse(throw new SparkException(\"failed to get full stage data for stage: \" +\n+            stageInfo.stageId + \":\" + stageInfo.attemptId)\n+            )\n+        }\n+        AllStagesResource.stageUiToStageData(status, stageInfo, stageUiData,\n+          includeDetails = true)\n+      }\n+    }\n+  }\n+\n+  @GET\n+  @Path(\"/{attemptId: \\\\d+}\")\n+  def oneAttemptData(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int,\n+    @PathParam(\"attemptId\") attemptId: Int\n+  ): StageData = {\n+    forStageAttempt(appId, stageId, attemptId) { case (status, stageInfo, stageUiData) =>\n+      AllStagesResource.stageUiToStageData(status, stageInfo, stageUiData,\n+        includeDetails = true)\n+    }\n+  }\n+\n+  @GET\n+  @Path(\"/{attemptId: \\\\d+}/taskSummary\")\n+  def stageData(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int,\n+    @PathParam(\"attemptId\") attemptId: Int,\n+    @DefaultValue(\"0.05,0.25,0.5,0.75,0.95\") @QueryParam(\"quantiles\") quantileString: String\n+  ): TaskMetricDistributions = {\n+    forStageAttempt(appId, stageId, attemptId) { case (status, stageInfo, stageUiData) =>\n+      val quantiles = quantileString.split(\",\").map{s =>\n+        try {\n+          s.toDouble\n+        } catch {\n+          case nfe: NumberFormatException =>\n+            throw new BadParameterException(\"quantiles\", \"double\", s)\n+        }\n+      }\n+      AllStagesResource.taskMetricDistributions(stageUiData.taskData.values, quantiles)\n+    }\n+  }\n+\n+  @GET\n+  @Path(\"/{attemptId: \\\\d+}/taskList\")\n+  def taskList(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"stageId\") stageId: Int,\n+    @PathParam(\"attemptId\") attemptId: Int,\n+    @DefaultValue(\"0\") @QueryParam(\"offset\") offset: Int,\n+    @DefaultValue(\"20\") @QueryParam(\"length\") length: Int,\n+    @DefaultValue(\"ID\") @QueryParam(\"sortBy\") sortBy: TaskSorting\n+  ): Seq[TaskData] = {\n+    forStageAttempt(appId, stageId, attemptId) { case (status, stageInfo, stageUiData) =>\n+      val tasks = stageUiData.taskData.values.map{AllStagesResource.convertTaskData}.toIndexedSeq\n+        .sorted(sortBy.ordering)\n+      tasks.slice(offset, offset + length)  \n+    }\n+  }\n+\n+\n+  def forStage[T](appId: String, stageId: Int)\n+      (f: (JobProgressListener, Seq[(StageStatus, StageInfo)]) => T): T = {\n+    uiRoot.withSparkUI(appId) { ui =>\n+      val stageAndStatus = AllStagesResource.stagesAndStatus(ui)\n+      val stageAttempts = stageAndStatus.flatMap { case (status, stages) =>\n+        val matched = stages.filter { stage => stage.stageId == stageId}\n+        matched.map {\n+          status -> _\n+        }\n+      }\n+      if (stageAttempts.isEmpty) {\n+        throw new NotFoundException(\"unknown stage: \" + stageId)\n+      } else {\n+        f(ui.jobProgressListener, stageAttempts)\n+      }\n+    }\n+  }\n+\n+  def forStageAttempt[T](appId: String, stageId: Int, attemptId: Int)\n+      (f: (StageStatus, StageInfo, StageUIData) => T): T = {\n+    forStage(appId, stageId) { case (listener, attempts) =>\n+        val oneAttempt = attempts.filter{ case (status, stage) =>\n+            stage.attemptId == attemptId\n+        }.headOption\n+        oneAttempt match {\n+          case Some((status, stageInfo)) =>\n+            val stageUiData = listener.synchronized {\n+              listener.stageIdToData.get((stageInfo.stageId, stageInfo.attemptId)).\n+                getOrElse(throw new SparkException(\"failed to get full stage data for stage: \" +\n+                stageInfo.stageId + \":\" + stageInfo.attemptId)\n+                )\n+            }\n+            f(status, stageInfo, stageUiData)\n+          case None =>\n+            val stageAttempts = attempts.map { _._2.attemptId}\n+            throw new NotFoundException(s\"unknown attempt for stage $stageId.  \" +\n+              s\"Found attempts: ${stageAttempts.mkString(\"[\", \",\", \"]\")}\")\n+        }\n+    }\n+  }\n+}\n+\n+sealed abstract class TaskSorting extends SparkEnum {\n+  def ordering: Ordering[TaskData]\n+  def alternateNames: Seq[String] = Seq()\n+}\n+object TaskSorting extends JerseyEnum[TaskSorting] {"
  }],
  "prId": 4435
}]