[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Does `toSeq` make a copy of the original values? Or is it lazily evaluated?\n\nIf the latter, the `synchronized` isn't helping much.\n",
    "commit": "da1e35f39cd60878f32b5446438afdf25d868d7b",
    "createdAt": "2015-04-07T18:49:04Z",
    "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.status.api.v1\n+\n+import java.util\n+import java.util.Date\n+import javax.ws.rs._\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.ui.SparkUI\n+import org.apache.spark.ui.jobs.JobProgressListener\n+import org.apache.spark.ui.jobs.UIData.JobUIData\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class AllJobsResource(uiRoot: UIRoot) {\n+\n+  @GET\n+  def jobsList(\n+    @PathParam(\"appId\") appId: String,\n+    @QueryParam(\"status\") statuses: java.util.List[JobStatus]\n+  ): Seq[JobData] = {\n+    uiRoot.withSparkUI(appId) { ui =>\n+      val statusToJobs: Seq[(JobStatus, Seq[JobUIData])] =\n+        AllJobsResource.getStatusToJobs(ui)\n+      val adjStatuses: util.List[JobStatus] = {\n+        if (statuses.isEmpty) {\n+          java.util.Arrays.asList(JobStatus.values: _*)\n+        }\n+        else {\n+          statuses\n+        }\n+      }\n+      val jobInfos = for {\n+        (status, jobs) <- statusToJobs\n+        job <- jobs if adjStatuses.contains(status)\n+      } yield {\n+        AllJobsResource.convertJobData(job, ui.jobProgressListener, false)\n+      }\n+      jobInfos.sortBy{- _.jobId}\n+    }\n+  }\n+\n+}\n+\n+private[v1] object AllJobsResource {\n+\n+  def getStatusToJobs(ui: SparkUI): Seq[(JobStatus, Seq[JobUIData])] = {\n+    val statusToJobs = ui.jobProgressListener.synchronized {\n+      Seq(\n+        JobStatus.RUNNING -> ui.jobProgressListener.activeJobs.values.toSeq,"
  }, {
    "author": {
      "login": "squito"
    },
    "body": "It does make a copy, though the scala docs are a little confusing on this.  It will return a `scala.collection.Seq`, which in theory could be a `mutable.Seq`.  It actually always returns an `immutable.Seq`, however.  Even if you start with a `mutable.Seq` and call `.toSeq`, you get a copy in an `immutable.Seq`.  (If you start w/ an `immutable.Seq`, then you get back the same object, but that would be OK since its immutable in any case.)  Do you think thats OK, or should we do something more defensive here?\n\n(You may be thinking of `Map.mapValues`, which is lazy)\n",
    "commit": "da1e35f39cd60878f32b5446438afdf25d868d7b",
    "createdAt": "2015-04-08T14:56:50Z",
    "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.status.api.v1\n+\n+import java.util\n+import java.util.Date\n+import javax.ws.rs._\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.ui.SparkUI\n+import org.apache.spark.ui.jobs.JobProgressListener\n+import org.apache.spark.ui.jobs.UIData.JobUIData\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class AllJobsResource(uiRoot: UIRoot) {\n+\n+  @GET\n+  def jobsList(\n+    @PathParam(\"appId\") appId: String,\n+    @QueryParam(\"status\") statuses: java.util.List[JobStatus]\n+  ): Seq[JobData] = {\n+    uiRoot.withSparkUI(appId) { ui =>\n+      val statusToJobs: Seq[(JobStatus, Seq[JobUIData])] =\n+        AllJobsResource.getStatusToJobs(ui)\n+      val adjStatuses: util.List[JobStatus] = {\n+        if (statuses.isEmpty) {\n+          java.util.Arrays.asList(JobStatus.values: _*)\n+        }\n+        else {\n+          statuses\n+        }\n+      }\n+      val jobInfos = for {\n+        (status, jobs) <- statusToJobs\n+        job <- jobs if adjStatuses.contains(status)\n+      } yield {\n+        AllJobsResource.convertJobData(job, ui.jobProgressListener, false)\n+      }\n+      jobInfos.sortBy{- _.jobId}\n+    }\n+  }\n+\n+}\n+\n+private[v1] object AllJobsResource {\n+\n+  def getStatusToJobs(ui: SparkUI): Seq[(JobStatus, Seq[JobUIData])] = {\n+    val statusToJobs = ui.jobProgressListener.synchronized {\n+      Seq(\n+        JobStatus.RUNNING -> ui.jobProgressListener.activeJobs.values.toSeq,"
  }],
  "prId": 4435
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "not needed?\n",
    "commit": "da1e35f39cd60878f32b5446438afdf25d868d7b",
    "createdAt": "2015-04-24T21:57:32Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.status.api.v1\n+\n+import java.util"
  }],
  "prId": 4435
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "instead of this, do:\n\n```\nimport java.util.{Date, List => JList}\n```\n\nAnd use `JList` everywhere instead of `java.util.List` or `util.List` (both of which you're using in different places).\n",
    "commit": "da1e35f39cd60878f32b5446438afdf25d868d7b",
    "createdAt": "2015-04-24T21:58:32Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.status.api.v1\n+\n+import java.util\n+import java.util.Date\n+import javax.ws.rs._\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.JobExecutionStatus\n+import org.apache.spark.ui.SparkUI\n+import org.apache.spark.ui.jobs.JobProgressListener\n+import org.apache.spark.ui.jobs.UIData.JobUIData\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class AllJobsResource(uiRoot: UIRoot) {\n+\n+  @GET\n+  def jobsList(\n+    @PathParam(\"appId\") appId: String,\n+    @QueryParam(\"status\") statuses: java.util.List[JobExecutionStatus]"
  }],
  "prId": 4435
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: `else` goes in the previous line\n",
    "commit": "da1e35f39cd60878f32b5446438afdf25d868d7b",
    "createdAt": "2015-04-24T21:58:59Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.status.api.v1\n+\n+import java.util\n+import java.util.Date\n+import javax.ws.rs._\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.JobExecutionStatus\n+import org.apache.spark.ui.SparkUI\n+import org.apache.spark.ui.jobs.JobProgressListener\n+import org.apache.spark.ui.jobs.UIData.JobUIData\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class AllJobsResource(uiRoot: UIRoot) {\n+\n+  @GET\n+  def jobsList(\n+    @PathParam(\"appId\") appId: String,\n+    @QueryParam(\"status\") statuses: java.util.List[JobExecutionStatus]\n+  ): Seq[JobData] = {\n+    uiRoot.withSparkUI(appId) { ui =>\n+      val statusToJobs: Seq[(JobExecutionStatus, Seq[JobUIData])] =\n+        AllJobsResource.getStatusToJobs(ui)\n+      val adjStatuses: util.List[JobExecutionStatus] = {\n+        if (statuses.isEmpty) {\n+          java.util.Arrays.asList(JobExecutionStatus.values(): _*)\n+        }\n+        else {"
  }],
  "prId": 4435
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: import `Arrays` at the top\n",
    "commit": "da1e35f39cd60878f32b5446438afdf25d868d7b",
    "createdAt": "2015-04-24T21:59:18Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.status.api.v1\n+\n+import java.util\n+import java.util.Date\n+import javax.ws.rs._\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.JobExecutionStatus\n+import org.apache.spark.ui.SparkUI\n+import org.apache.spark.ui.jobs.JobProgressListener\n+import org.apache.spark.ui.jobs.UIData.JobUIData\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class AllJobsResource(uiRoot: UIRoot) {\n+\n+  @GET\n+  def jobsList(\n+    @PathParam(\"appId\") appId: String,\n+    @QueryParam(\"status\") statuses: java.util.List[JobExecutionStatus]\n+  ): Seq[JobData] = {\n+    uiRoot.withSparkUI(appId) { ui =>\n+      val statusToJobs: Seq[(JobExecutionStatus, Seq[JobUIData])] =\n+        AllJobsResource.getStatusToJobs(ui)\n+      val adjStatuses: util.List[JobExecutionStatus] = {\n+        if (statuses.isEmpty) {\n+          java.util.Arrays.asList(JobExecutionStatus.values(): _*)"
  }],
  "prId": 4435
}]