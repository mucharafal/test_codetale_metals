[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: a more REST-y version would be `applications/{appId}/attempts/{attemptId}/download`\n",
    "commit": "221cc26784c4af8c210367e70d97961a0d8cb819",
    "createdAt": "2015-05-23T00:08:40Z",
    "diffHunk": "@@ -164,6 +164,18 @@ private[v1] class ApiRootResource extends UIRootFromServletContext {\n     }\n   }\n \n+  @Path(\"applications/{appId}/download\")\n+  def getEventLogs(\n+    @PathParam(\"appId\") appId: String): EventLogDownloadResource = {\n+    new EventLogDownloadResource(uiRoot, appId, None)\n+  }\n+\n+  @Path(\"applications/{appId}/{attemptId}/download\")"
  }, {
    "author": {
      "login": "harishreedharan"
    },
    "body": "I am following the current API format - for example: `applications/{appId}/{attemptId}/storage/rdd/{rddId: \\d+}` etc. \n",
    "commit": "221cc26784c4af8c210367e70d97961a0d8cb819",
    "createdAt": "2015-05-23T05:42:28Z",
    "diffHunk": "@@ -164,6 +164,18 @@ private[v1] class ApiRootResource extends UIRootFromServletContext {\n     }\n   }\n \n+  @Path(\"applications/{appId}/download\")\n+  def getEventLogs(\n+    @PathParam(\"appId\") appId: String): EventLogDownloadResource = {\n+    new EventLogDownloadResource(uiRoot, appId, None)\n+  }\n+\n+  @Path(\"applications/{appId}/{attemptId}/download\")"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Ah, that's too bad; wish I had caught that earlier, it's probably too late now. :-/\n\nAnyway, I have a slight preference for `/logs` as the URI, since REST generally discourages using verbs.\n",
    "commit": "221cc26784c4af8c210367e70d97961a0d8cb819",
    "createdAt": "2015-05-27T18:42:08Z",
    "diffHunk": "@@ -164,6 +164,18 @@ private[v1] class ApiRootResource extends UIRootFromServletContext {\n     }\n   }\n \n+  @Path(\"applications/{appId}/download\")\n+  def getEventLogs(\n+    @PathParam(\"appId\") appId: String): EventLogDownloadResource = {\n+    new EventLogDownloadResource(uiRoot, appId, None)\n+  }\n+\n+  @Path(\"applications/{appId}/{attemptId}/download\")"
  }],
  "prId": 5792
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "these need to be indented 2 more spaces\n",
    "commit": "221cc26784c4af8c210367e70d97961a0d8cb819",
    "createdAt": "2015-06-03T23:30:09Z",
    "diffHunk": "@@ -164,6 +165,18 @@ private[v1] class ApiRootResource extends UIRootFromServletContext {\n     }\n   }\n \n+  @Path(\"applications/{appId}/logs\")\n+  def getEventLogs(\n+    @PathParam(\"appId\") appId: String): EventLogDownloadResource = {\n+    new EventLogDownloadResource(uiRoot, appId, None)\n+  }\n+\n+  @Path(\"applications/{appId}/{attemptId}/logs\")\n+  def getEventLogs(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"attemptId\") attemptId: String): EventLogDownloadResource = {",
    "line": 21
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "(same L170)\n",
    "commit": "221cc26784c4af8c210367e70d97961a0d8cb819",
    "createdAt": "2015-06-03T23:38:48Z",
    "diffHunk": "@@ -164,6 +165,18 @@ private[v1] class ApiRootResource extends UIRootFromServletContext {\n     }\n   }\n \n+  @Path(\"applications/{appId}/logs\")\n+  def getEventLogs(\n+    @PathParam(\"appId\") appId: String): EventLogDownloadResource = {\n+    new EventLogDownloadResource(uiRoot, appId, None)\n+  }\n+\n+  @Path(\"applications/{appId}/{attemptId}/logs\")\n+  def getEventLogs(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"attemptId\") attemptId: String): EventLogDownloadResource = {",
    "line": 21
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "we can add a style checker for this in the future. this are also lots of violations in Spark itself.\n",
    "commit": "221cc26784c4af8c210367e70d97961a0d8cb819",
    "createdAt": "2015-06-04T17:55:17Z",
    "diffHunk": "@@ -164,6 +165,18 @@ private[v1] class ApiRootResource extends UIRootFromServletContext {\n     }\n   }\n \n+  @Path(\"applications/{appId}/logs\")\n+  def getEventLogs(\n+    @PathParam(\"appId\") appId: String): EventLogDownloadResource = {\n+    new EventLogDownloadResource(uiRoot, appId, None)\n+  }\n+\n+  @Path(\"applications/{appId}/{attemptId}/logs\")\n+  def getEventLogs(\n+    @PathParam(\"appId\") appId: String,\n+    @PathParam(\"attemptId\") attemptId: String): EventLogDownloadResource = {",
    "line": 21
  }],
  "prId": 5792
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "This needs a java doc since it's technically not the same as the one you defined in `ApplicationHistoryProvider`. We should expand on why attemptId is an option (what happens if it's `None`).\n",
    "commit": "221cc26784c4af8c210367e70d97961a0d8cb819",
    "createdAt": "2015-06-03T23:43:34Z",
    "diffHunk": "@@ -193,6 +206,13 @@ private[spark] trait UIRoot {\n   def getSparkUI(appKey: String): Option[SparkUI]\n   def getApplicationInfoList: Iterator[ApplicationInfo]\n \n+  def writeEventLogs(appId: String, attemptId: Option[String], zipStream: ZipOutputStream): Unit = {",
    "line": 31
  }],
  "prId": 5792
}]