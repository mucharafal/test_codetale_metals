[{
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "It might be nice to add an explanatory comment to this trait, e.g. to explain that it's inherited by both the Master and Application web UIs in order to abstract away such and such...\n",
    "commit": "da1e35f39cd60878f32b5446438afdf25d868d7b",
    "createdAt": "2015-03-31T00:49:37Z",
    "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.status.api.v1\n+\n+import javax.servlet.ServletContext\n+import javax.ws.rs._\n+import javax.ws.rs.core.{Context, Response}\n+\n+import com.sun.jersey.api.core.ResourceConfig\n+import com.sun.jersey.spi.container.servlet.ServletContainer\n+import org.eclipse.jetty.server.handler.ContextHandler\n+import org.eclipse.jetty.servlet.{ServletContextHandler, ServletHolder}\n+\n+import org.apache.spark.SecurityManager\n+import org.apache.spark.ui.SparkUI\n+\n+@Path(\"/v1\")\n+private[v1] class JsonRootResource extends UIRootFromServletContext {\n+\n+  @Path(\"applications\")\n+  def getApplicationList(): ApplicationListResource = {\n+    new ApplicationListResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}\")\n+  def getApplication(): OneApplicationResource = {\n+    new OneApplicationResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/jobs\")\n+  def getJobs(): AllJobsResource = {\n+    new AllJobsResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/jobs/{jobId: \\\\d+}\")\n+  def getJob(): OneJobResource = {\n+    new OneJobResource(uiRoot)\n+  }\n+\n+\n+  @Path(\"applications/{appId}/executors\")\n+  def getExecutors(): ExecutorListResource = {\n+    new ExecutorListResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/stages\")\n+  def getStages(): AllStagesResource= {\n+    new AllStagesResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/stages/{stageId: \\\\d+}\")\n+  def getStage(): OneStageResource= {\n+    new OneStageResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/stages/{stageId: \\\\d+}/{attemptId: \\\\d+}\")\n+  def getStageAttempt(): OneStageAttemptResource= {\n+    new OneStageAttemptResource(uiRoot)\n+  }\n+\n+\n+  @Path(\"applications/{appId}/storage/rdd\")\n+  def getRdds(): AllRDDResource = {\n+    new AllRDDResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/storage/rdd/{rddId: \\\\d+}\")\n+  def getRdd(): OneRDDResource = {\n+    new OneRDDResource(uiRoot)\n+  }\n+\n+}\n+\n+private[spark] object JsonRootResource {\n+\n+  def getJsonServlet(uiRoot: UIRoot): ServletContextHandler = {\n+    val jerseyContext = new ServletContextHandler(ServletContextHandler.NO_SESSIONS)\n+    jerseyContext.setContextPath(\"/json\")\n+    val holder:ServletHolder = new ServletHolder(classOf[ServletContainer])\n+    holder.setInitParameter(\"com.sun.jersey.config.property.resourceConfigClass\",\n+      \"com.sun.jersey.api.core.PackagesResourceConfig\")\n+    holder.setInitParameter(\"com.sun.jersey.config.property.packages\",\n+      \"org.apache.spark.status.api.v1\")\n+    holder.setInitParameter(ResourceConfig.PROPERTY_CONTAINER_REQUEST_FILTERS,\n+      classOf[SecurityFilter].getCanonicalName)\n+    UIRootFromServletContext.setUiRoot(jerseyContext, uiRoot)\n+    jerseyContext.addServlet(holder, \"/*\")\n+    jerseyContext\n+  }\n+}\n+\n+\n+private[spark] trait UIRoot {"
  }],
  "prId": 4435
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "`NoSuchElementException`?\n",
    "commit": "da1e35f39cd60878f32b5446438afdf25d868d7b",
    "createdAt": "2015-04-07T19:54:58Z",
    "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.status.api.v1\n+\n+import javax.servlet.ServletContext\n+import javax.ws.rs._\n+import javax.ws.rs.core.{Context, Response}\n+\n+import com.sun.jersey.api.core.ResourceConfig\n+import com.sun.jersey.spi.container.servlet.ServletContainer\n+import org.eclipse.jetty.server.handler.ContextHandler\n+import org.eclipse.jetty.servlet.{ServletContextHandler, ServletHolder}\n+\n+import org.apache.spark.SecurityManager\n+import org.apache.spark.ui.SparkUI\n+\n+@Path(\"/v1\")\n+private[v1] class JsonRootResource extends UIRootFromServletContext {\n+\n+  @Path(\"applications\")\n+  def getApplicationList(): ApplicationListResource = {\n+    new ApplicationListResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}\")\n+  def getApplication(): OneApplicationResource = {\n+    new OneApplicationResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/jobs\")\n+  def getJobs(): AllJobsResource = {\n+    new AllJobsResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/jobs/{jobId: \\\\d+}\")\n+  def getJob(): OneJobResource = {\n+    new OneJobResource(uiRoot)\n+  }\n+\n+\n+  @Path(\"applications/{appId}/executors\")\n+  def getExecutors(): ExecutorListResource = {\n+    new ExecutorListResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/stages\")\n+  def getStages(): AllStagesResource= {\n+    new AllStagesResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/stages/{stageId: \\\\d+}\")\n+  def getStage(): OneStageResource= {\n+    new OneStageResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/storage/rdd\")\n+  def getRdds(): AllRDDResource = {\n+    new AllRDDResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/storage/rdd/{rddId: \\\\d+}\")\n+  def getRdd(): OneRDDResource = {\n+    new OneRDDResource(uiRoot)\n+  }\n+\n+}\n+\n+private[spark] object JsonRootResource {\n+\n+  def getJsonServlet(uiRoot: UIRoot): ServletContextHandler = {\n+    val jerseyContext = new ServletContextHandler(ServletContextHandler.NO_SESSIONS)\n+    jerseyContext.setContextPath(\"/json\")\n+    val holder:ServletHolder = new ServletHolder(classOf[ServletContainer])\n+    holder.setInitParameter(\"com.sun.jersey.config.property.resourceConfigClass\",\n+      \"com.sun.jersey.api.core.PackagesResourceConfig\")\n+    holder.setInitParameter(\"com.sun.jersey.config.property.packages\",\n+      \"org.apache.spark.status.api.v1\")\n+    holder.setInitParameter(ResourceConfig.PROPERTY_CONTAINER_REQUEST_FILTERS,\n+      classOf[SecurityFilter].getCanonicalName)\n+    UIRootFromServletContext.setUiRoot(jerseyContext, uiRoot)\n+    jerseyContext.addServlet(holder, \"/*\")\n+    jerseyContext\n+  }\n+}\n+\n+\n+/**\n+ * This trait is shared by the all the root containers for application UI information --\n+ * the HistoryServer, the Master UI, and the application UI.  This provides the common\n+ * interface needed for them all to expose application info as json.\n+ */\n+private[spark] trait UIRoot {\n+  def getSparkUI(appKey: String): Option[SparkUI]\n+  def getApplicationInfoList: Seq[ApplicationInfo]\n+\n+  /**\n+   * Get the spark UI with the given appID, and apply a function\n+   * to it.  If there is no such app, throw an appropriate exception\n+   */\n+  def withSparkUI[T](appId: String)(f: SparkUI => T): T = {\n+    getSparkUI(appId) match {\n+      case Some(ui) =>\n+        f(ui)\n+      case None => throw new NotFoundException(\"no such app: \" + appId)\n+    }\n+  }\n+  def securityManager: SecurityManager\n+}\n+\n+private[v1] object UIRootFromServletContext {\n+  private val attribute = getClass.getCanonicalName\n+  def setUiRoot(contextHandler: ContextHandler, uiRoot: UIRoot): Unit = {\n+    contextHandler.setAttribute(attribute, uiRoot)\n+  }\n+  def getUiRoot(context: ServletContext): UIRoot = {\n+    context.getAttribute(attribute).asInstanceOf[UIRoot]\n+  }\n+}\n+\n+private[v1] trait UIRootFromServletContext {\n+  @Context\n+  var servletContext: ServletContext = _\n+\n+  def uiRoot: UIRoot = UIRootFromServletContext.getUiRoot(servletContext)\n+}\n+\n+private[v1] class NotFoundException(msg: String) extends WebApplicationException(\n+  new IllegalArgumentException(msg),"
  }],
  "prId": 4435
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Use interpolation?\n",
    "commit": "da1e35f39cd60878f32b5446438afdf25d868d7b",
    "createdAt": "2015-04-07T19:56:05Z",
    "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.status.api.v1\n+\n+import javax.servlet.ServletContext\n+import javax.ws.rs._\n+import javax.ws.rs.core.{Context, Response}\n+\n+import com.sun.jersey.api.core.ResourceConfig\n+import com.sun.jersey.spi.container.servlet.ServletContainer\n+import org.eclipse.jetty.server.handler.ContextHandler\n+import org.eclipse.jetty.servlet.{ServletContextHandler, ServletHolder}\n+\n+import org.apache.spark.SecurityManager\n+import org.apache.spark.ui.SparkUI\n+\n+@Path(\"/v1\")\n+private[v1] class JsonRootResource extends UIRootFromServletContext {\n+\n+  @Path(\"applications\")\n+  def getApplicationList(): ApplicationListResource = {\n+    new ApplicationListResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}\")\n+  def getApplication(): OneApplicationResource = {\n+    new OneApplicationResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/jobs\")\n+  def getJobs(): AllJobsResource = {\n+    new AllJobsResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/jobs/{jobId: \\\\d+}\")\n+  def getJob(): OneJobResource = {\n+    new OneJobResource(uiRoot)\n+  }\n+\n+\n+  @Path(\"applications/{appId}/executors\")\n+  def getExecutors(): ExecutorListResource = {\n+    new ExecutorListResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/stages\")\n+  def getStages(): AllStagesResource= {\n+    new AllStagesResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/stages/{stageId: \\\\d+}\")\n+  def getStage(): OneStageResource= {\n+    new OneStageResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/storage/rdd\")\n+  def getRdds(): AllRDDResource = {\n+    new AllRDDResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/storage/rdd/{rddId: \\\\d+}\")\n+  def getRdd(): OneRDDResource = {\n+    new OneRDDResource(uiRoot)\n+  }\n+\n+}\n+\n+private[spark] object JsonRootResource {\n+\n+  def getJsonServlet(uiRoot: UIRoot): ServletContextHandler = {\n+    val jerseyContext = new ServletContextHandler(ServletContextHandler.NO_SESSIONS)\n+    jerseyContext.setContextPath(\"/json\")\n+    val holder:ServletHolder = new ServletHolder(classOf[ServletContainer])\n+    holder.setInitParameter(\"com.sun.jersey.config.property.resourceConfigClass\",\n+      \"com.sun.jersey.api.core.PackagesResourceConfig\")\n+    holder.setInitParameter(\"com.sun.jersey.config.property.packages\",\n+      \"org.apache.spark.status.api.v1\")\n+    holder.setInitParameter(ResourceConfig.PROPERTY_CONTAINER_REQUEST_FILTERS,\n+      classOf[SecurityFilter].getCanonicalName)\n+    UIRootFromServletContext.setUiRoot(jerseyContext, uiRoot)\n+    jerseyContext.addServlet(holder, \"/*\")\n+    jerseyContext\n+  }\n+}\n+\n+\n+/**\n+ * This trait is shared by the all the root containers for application UI information --\n+ * the HistoryServer, the Master UI, and the application UI.  This provides the common\n+ * interface needed for them all to expose application info as json.\n+ */\n+private[spark] trait UIRoot {\n+  def getSparkUI(appKey: String): Option[SparkUI]\n+  def getApplicationInfoList: Seq[ApplicationInfo]\n+\n+  /**\n+   * Get the spark UI with the given appID, and apply a function\n+   * to it.  If there is no such app, throw an appropriate exception\n+   */\n+  def withSparkUI[T](appId: String)(f: SparkUI => T): T = {\n+    getSparkUI(appId) match {\n+      case Some(ui) =>\n+        f(ui)\n+      case None => throw new NotFoundException(\"no such app: \" + appId)\n+    }\n+  }\n+  def securityManager: SecurityManager\n+}\n+\n+private[v1] object UIRootFromServletContext {\n+  private val attribute = getClass.getCanonicalName\n+  def setUiRoot(contextHandler: ContextHandler, uiRoot: UIRoot): Unit = {\n+    contextHandler.setAttribute(attribute, uiRoot)\n+  }\n+  def getUiRoot(context: ServletContext): UIRoot = {\n+    context.getAttribute(attribute).asInstanceOf[UIRoot]\n+  }\n+}\n+\n+private[v1] trait UIRootFromServletContext {\n+  @Context\n+  var servletContext: ServletContext = _\n+\n+  def uiRoot: UIRoot = UIRootFromServletContext.getUiRoot(servletContext)\n+}\n+\n+private[v1] class NotFoundException(msg: String) extends WebApplicationException(\n+  new IllegalArgumentException(msg),\n+    Response\n+      .status(Response.Status.NOT_FOUND)\n+      .entity(msg)\n+      .build()\n+)\n+\n+private[v1] class BadParameterException(msg: String) extends WebApplicationException(\n+  new IllegalArgumentException(msg),\n+  Response\n+    .status(Response.Status.BAD_REQUEST)\n+    .entity(msg)\n+    .build()\n+) {\n+  def this(param: String, exp: String, actual: String) = {\n+    this(\"Bad value for parameter \\\"\" + param + \"\\\".  Expected a \" + exp + \", got \\\"\" +"
  }, {
    "author": {
      "login": "squito"
    },
    "body": "string interpolation behaves strangely with quotes.  A simple `s\"...\"` doesn't like escaped quotes inside.  You can use the triple quote version `s\"\"\"...\"\"\"` but I had some vague recollection that it had some surprises vs. regular triple-quoted strings.  Just did a bit of research -- I guess what I want is `raw\"\"\"...\"\"\"` http://stackoverflow.com/a/25633978/1442961\n",
    "commit": "da1e35f39cd60878f32b5446438afdf25d868d7b",
    "createdAt": "2015-04-08T15:31:49Z",
    "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.status.api.v1\n+\n+import javax.servlet.ServletContext\n+import javax.ws.rs._\n+import javax.ws.rs.core.{Context, Response}\n+\n+import com.sun.jersey.api.core.ResourceConfig\n+import com.sun.jersey.spi.container.servlet.ServletContainer\n+import org.eclipse.jetty.server.handler.ContextHandler\n+import org.eclipse.jetty.servlet.{ServletContextHandler, ServletHolder}\n+\n+import org.apache.spark.SecurityManager\n+import org.apache.spark.ui.SparkUI\n+\n+@Path(\"/v1\")\n+private[v1] class JsonRootResource extends UIRootFromServletContext {\n+\n+  @Path(\"applications\")\n+  def getApplicationList(): ApplicationListResource = {\n+    new ApplicationListResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}\")\n+  def getApplication(): OneApplicationResource = {\n+    new OneApplicationResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/jobs\")\n+  def getJobs(): AllJobsResource = {\n+    new AllJobsResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/jobs/{jobId: \\\\d+}\")\n+  def getJob(): OneJobResource = {\n+    new OneJobResource(uiRoot)\n+  }\n+\n+\n+  @Path(\"applications/{appId}/executors\")\n+  def getExecutors(): ExecutorListResource = {\n+    new ExecutorListResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/stages\")\n+  def getStages(): AllStagesResource= {\n+    new AllStagesResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/stages/{stageId: \\\\d+}\")\n+  def getStage(): OneStageResource= {\n+    new OneStageResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/storage/rdd\")\n+  def getRdds(): AllRDDResource = {\n+    new AllRDDResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/storage/rdd/{rddId: \\\\d+}\")\n+  def getRdd(): OneRDDResource = {\n+    new OneRDDResource(uiRoot)\n+  }\n+\n+}\n+\n+private[spark] object JsonRootResource {\n+\n+  def getJsonServlet(uiRoot: UIRoot): ServletContextHandler = {\n+    val jerseyContext = new ServletContextHandler(ServletContextHandler.NO_SESSIONS)\n+    jerseyContext.setContextPath(\"/json\")\n+    val holder:ServletHolder = new ServletHolder(classOf[ServletContainer])\n+    holder.setInitParameter(\"com.sun.jersey.config.property.resourceConfigClass\",\n+      \"com.sun.jersey.api.core.PackagesResourceConfig\")\n+    holder.setInitParameter(\"com.sun.jersey.config.property.packages\",\n+      \"org.apache.spark.status.api.v1\")\n+    holder.setInitParameter(ResourceConfig.PROPERTY_CONTAINER_REQUEST_FILTERS,\n+      classOf[SecurityFilter].getCanonicalName)\n+    UIRootFromServletContext.setUiRoot(jerseyContext, uiRoot)\n+    jerseyContext.addServlet(holder, \"/*\")\n+    jerseyContext\n+  }\n+}\n+\n+\n+/**\n+ * This trait is shared by the all the root containers for application UI information --\n+ * the HistoryServer, the Master UI, and the application UI.  This provides the common\n+ * interface needed for them all to expose application info as json.\n+ */\n+private[spark] trait UIRoot {\n+  def getSparkUI(appKey: String): Option[SparkUI]\n+  def getApplicationInfoList: Seq[ApplicationInfo]\n+\n+  /**\n+   * Get the spark UI with the given appID, and apply a function\n+   * to it.  If there is no such app, throw an appropriate exception\n+   */\n+  def withSparkUI[T](appId: String)(f: SparkUI => T): T = {\n+    getSparkUI(appId) match {\n+      case Some(ui) =>\n+        f(ui)\n+      case None => throw new NotFoundException(\"no such app: \" + appId)\n+    }\n+  }\n+  def securityManager: SecurityManager\n+}\n+\n+private[v1] object UIRootFromServletContext {\n+  private val attribute = getClass.getCanonicalName\n+  def setUiRoot(contextHandler: ContextHandler, uiRoot: UIRoot): Unit = {\n+    contextHandler.setAttribute(attribute, uiRoot)\n+  }\n+  def getUiRoot(context: ServletContext): UIRoot = {\n+    context.getAttribute(attribute).asInstanceOf[UIRoot]\n+  }\n+}\n+\n+private[v1] trait UIRootFromServletContext {\n+  @Context\n+  var servletContext: ServletContext = _\n+\n+  def uiRoot: UIRoot = UIRootFromServletContext.getUiRoot(servletContext)\n+}\n+\n+private[v1] class NotFoundException(msg: String) extends WebApplicationException(\n+  new IllegalArgumentException(msg),\n+    Response\n+      .status(Response.Status.NOT_FOUND)\n+      .entity(msg)\n+      .build()\n+)\n+\n+private[v1] class BadParameterException(msg: String) extends WebApplicationException(\n+  new IllegalArgumentException(msg),\n+  Response\n+    .status(Response.Status.BAD_REQUEST)\n+    .entity(msg)\n+    .build()\n+) {\n+  def this(param: String, exp: String, actual: String) = {\n+    this(\"Bad value for parameter \\\"\" + param + \"\\\".  Expected a \" + exp + \", got \\\"\" +"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Since it's just an error message, you could use single quotes around the values you want to quote. Achieves the same goal.\n",
    "commit": "da1e35f39cd60878f32b5446438afdf25d868d7b",
    "createdAt": "2015-04-08T16:40:25Z",
    "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.status.api.v1\n+\n+import javax.servlet.ServletContext\n+import javax.ws.rs._\n+import javax.ws.rs.core.{Context, Response}\n+\n+import com.sun.jersey.api.core.ResourceConfig\n+import com.sun.jersey.spi.container.servlet.ServletContainer\n+import org.eclipse.jetty.server.handler.ContextHandler\n+import org.eclipse.jetty.servlet.{ServletContextHandler, ServletHolder}\n+\n+import org.apache.spark.SecurityManager\n+import org.apache.spark.ui.SparkUI\n+\n+@Path(\"/v1\")\n+private[v1] class JsonRootResource extends UIRootFromServletContext {\n+\n+  @Path(\"applications\")\n+  def getApplicationList(): ApplicationListResource = {\n+    new ApplicationListResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}\")\n+  def getApplication(): OneApplicationResource = {\n+    new OneApplicationResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/jobs\")\n+  def getJobs(): AllJobsResource = {\n+    new AllJobsResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/jobs/{jobId: \\\\d+}\")\n+  def getJob(): OneJobResource = {\n+    new OneJobResource(uiRoot)\n+  }\n+\n+\n+  @Path(\"applications/{appId}/executors\")\n+  def getExecutors(): ExecutorListResource = {\n+    new ExecutorListResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/stages\")\n+  def getStages(): AllStagesResource= {\n+    new AllStagesResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/stages/{stageId: \\\\d+}\")\n+  def getStage(): OneStageResource= {\n+    new OneStageResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/storage/rdd\")\n+  def getRdds(): AllRDDResource = {\n+    new AllRDDResource(uiRoot)\n+  }\n+\n+  @Path(\"applications/{appId}/storage/rdd/{rddId: \\\\d+}\")\n+  def getRdd(): OneRDDResource = {\n+    new OneRDDResource(uiRoot)\n+  }\n+\n+}\n+\n+private[spark] object JsonRootResource {\n+\n+  def getJsonServlet(uiRoot: UIRoot): ServletContextHandler = {\n+    val jerseyContext = new ServletContextHandler(ServletContextHandler.NO_SESSIONS)\n+    jerseyContext.setContextPath(\"/json\")\n+    val holder:ServletHolder = new ServletHolder(classOf[ServletContainer])\n+    holder.setInitParameter(\"com.sun.jersey.config.property.resourceConfigClass\",\n+      \"com.sun.jersey.api.core.PackagesResourceConfig\")\n+    holder.setInitParameter(\"com.sun.jersey.config.property.packages\",\n+      \"org.apache.spark.status.api.v1\")\n+    holder.setInitParameter(ResourceConfig.PROPERTY_CONTAINER_REQUEST_FILTERS,\n+      classOf[SecurityFilter].getCanonicalName)\n+    UIRootFromServletContext.setUiRoot(jerseyContext, uiRoot)\n+    jerseyContext.addServlet(holder, \"/*\")\n+    jerseyContext\n+  }\n+}\n+\n+\n+/**\n+ * This trait is shared by the all the root containers for application UI information --\n+ * the HistoryServer, the Master UI, and the application UI.  This provides the common\n+ * interface needed for them all to expose application info as json.\n+ */\n+private[spark] trait UIRoot {\n+  def getSparkUI(appKey: String): Option[SparkUI]\n+  def getApplicationInfoList: Seq[ApplicationInfo]\n+\n+  /**\n+   * Get the spark UI with the given appID, and apply a function\n+   * to it.  If there is no such app, throw an appropriate exception\n+   */\n+  def withSparkUI[T](appId: String)(f: SparkUI => T): T = {\n+    getSparkUI(appId) match {\n+      case Some(ui) =>\n+        f(ui)\n+      case None => throw new NotFoundException(\"no such app: \" + appId)\n+    }\n+  }\n+  def securityManager: SecurityManager\n+}\n+\n+private[v1] object UIRootFromServletContext {\n+  private val attribute = getClass.getCanonicalName\n+  def setUiRoot(contextHandler: ContextHandler, uiRoot: UIRoot): Unit = {\n+    contextHandler.setAttribute(attribute, uiRoot)\n+  }\n+  def getUiRoot(context: ServletContext): UIRoot = {\n+    context.getAttribute(attribute).asInstanceOf[UIRoot]\n+  }\n+}\n+\n+private[v1] trait UIRootFromServletContext {\n+  @Context\n+  var servletContext: ServletContext = _\n+\n+  def uiRoot: UIRoot = UIRootFromServletContext.getUiRoot(servletContext)\n+}\n+\n+private[v1] class NotFoundException(msg: String) extends WebApplicationException(\n+  new IllegalArgumentException(msg),\n+    Response\n+      .status(Response.Status.NOT_FOUND)\n+      .entity(msg)\n+      .build()\n+)\n+\n+private[v1] class BadParameterException(msg: String) extends WebApplicationException(\n+  new IllegalArgumentException(msg),\n+  Response\n+    .status(Response.Status.BAD_REQUEST)\n+    .entity(msg)\n+    .build()\n+) {\n+  def this(param: String, exp: String, actual: String) = {\n+    this(\"Bad value for parameter \\\"\" + param + \"\\\".  Expected a \" + exp + \", got \\\"\" +"
  }],
  "prId": 4435
}]