[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "add a unit test where there is only # month specified, but nothing else.\nand another one with only # year.\nand then one more for year + month.\n\nand one for only day, week, ... all the units.\n",
    "commit": "3bbb9d6a38050b35a26ac39ea8382d491b1fe609",
    "createdAt": "2015-07-11T07:16:41Z",
    "diffHunk": "@@ -56,4 +56,34 @@ public void toStringTest() {\n     i = new Interval(34, 3 * MICROS_PER_WEEK + 13 * MICROS_PER_HOUR + 123);\n     assertEquals(i.toString(), \"interval 2 years 10 months 3 weeks 13 hours 123 microseconds\");\n   }\n+\n+  @Test\n+  public void fromStringTest() {\n+    String s;\n+    Interval i;\n+\n+    s = \"interval  2 weeks -6 minute\";"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "also add a unit test where the string is just \"int\", and one for empty string.\n",
    "commit": "3bbb9d6a38050b35a26ac39ea8382d491b1fe609",
    "createdAt": "2015-07-11T07:21:50Z",
    "diffHunk": "@@ -56,4 +56,34 @@ public void toStringTest() {\n     i = new Interval(34, 3 * MICROS_PER_WEEK + 13 * MICROS_PER_HOUR + 123);\n     assertEquals(i.toString(), \"interval 2 years 10 months 3 weeks 13 hours 123 microseconds\");\n   }\n+\n+  @Test\n+  public void fromStringTest() {\n+    String s;\n+    Interval i;\n+\n+    s = \"interval  2 weeks -6 minute\";"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "do we need to test all the combinations of units?\n",
    "commit": "3bbb9d6a38050b35a26ac39ea8382d491b1fe609",
    "createdAt": "2015-07-11T07:51:02Z",
    "diffHunk": "@@ -56,4 +56,34 @@ public void toStringTest() {\n     i = new Interval(34, 3 * MICROS_PER_WEEK + 13 * MICROS_PER_HOUR + 123);\n     assertEquals(i.toString(), \"interval 2 years 10 months 3 weeks 13 hours 123 microseconds\");\n   }\n+\n+  @Test\n+  public void fromStringTest() {\n+    String s;\n+    Interval i;\n+\n+    s = \"interval  2 weeks -6 minute\";"
  }],
  "prId": 7355
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "do we need to test all the combinations of units?\n",
    "commit": "3bbb9d6a38050b35a26ac39ea8382d491b1fe609",
    "createdAt": "2015-07-11T08:55:23Z",
    "diffHunk": "@@ -56,4 +56,53 @@ public void toStringTest() {\n     i = new Interval(34, 3 * MICROS_PER_WEEK + 13 * MICROS_PER_HOUR + 123);\n     assertEquals(i.toString(), \"interval 2 years 10 months 3 weeks 13 hours 123 microseconds\");\n   }\n+\n+  @Test\n+  public void fromStringTest() {\n+    testSingleUnit(\"year\", 3, 36, 0);\n+    testSingleUnit(\"month\", 3, 3, 0);\n+    testSingleUnit(\"week\", 3, 0, 3 * MICROS_PER_WEEK);\n+    testSingleUnit(\"day\", 3, 0, 3 * MICROS_PER_DAY);\n+    testSingleUnit(\"hour\", 3, 0, 3 * MICROS_PER_HOUR);\n+    testSingleUnit(\"minute\", 3, 0, 3 * MICROS_PER_MINUTE);\n+    testSingleUnit(\"second\", 3, 0, 3 * MICROS_PER_SECOND);\n+    testSingleUnit(\"millisecond\", 3, 0, 3 * MICROS_PER_MILLI);\n+    testSingleUnit(\"microsecond\", 3, 0, 3);\n+\n+    String s;\n+    Interval i;\n+\n+    s = \"interval   -5  years  23   month\";\n+    i = new Interval(-5 * 12 + 23, 0);\n+    assertEquals(Interval.fromString(s), i);"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "probably not - but we should definitely test each unit at least once.\n",
    "commit": "3bbb9d6a38050b35a26ac39ea8382d491b1fe609",
    "createdAt": "2015-07-12T05:18:50Z",
    "diffHunk": "@@ -56,4 +56,53 @@ public void toStringTest() {\n     i = new Interval(34, 3 * MICROS_PER_WEEK + 13 * MICROS_PER_HOUR + 123);\n     assertEquals(i.toString(), \"interval 2 years 10 months 3 weeks 13 hours 123 microseconds\");\n   }\n+\n+  @Test\n+  public void fromStringTest() {\n+    testSingleUnit(\"year\", 3, 36, 0);\n+    testSingleUnit(\"month\", 3, 3, 0);\n+    testSingleUnit(\"week\", 3, 0, 3 * MICROS_PER_WEEK);\n+    testSingleUnit(\"day\", 3, 0, 3 * MICROS_PER_DAY);\n+    testSingleUnit(\"hour\", 3, 0, 3 * MICROS_PER_HOUR);\n+    testSingleUnit(\"minute\", 3, 0, 3 * MICROS_PER_MINUTE);\n+    testSingleUnit(\"second\", 3, 0, 3 * MICROS_PER_SECOND);\n+    testSingleUnit(\"millisecond\", 3, 0, 3 * MICROS_PER_MILLI);\n+    testSingleUnit(\"microsecond\", 3, 0, 3);\n+\n+    String s;\n+    Interval i;\n+\n+    s = \"interval   -5  years  23   month\";\n+    i = new Interval(-5 * 12 + 23, 0);\n+    assertEquals(Interval.fromString(s), i);"
  }],
  "prId": 7355
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "remove i and use null directly. \n\n\"i\" is a bad name since it is usually used for iterating over an array.\n",
    "commit": "3bbb9d6a38050b35a26ac39ea8382d491b1fe609",
    "createdAt": "2015-07-12T05:19:53Z",
    "diffHunk": "@@ -56,4 +56,53 @@ public void toStringTest() {\n     i = new Interval(34, 3 * MICROS_PER_WEEK + 13 * MICROS_PER_HOUR + 123);\n     assertEquals(i.toString(), \"interval 2 years 10 months 3 weeks 13 hours 123 microseconds\");\n   }\n+\n+  @Test\n+  public void fromStringTest() {\n+    testSingleUnit(\"year\", 3, 36, 0);\n+    testSingleUnit(\"month\", 3, 3, 0);\n+    testSingleUnit(\"week\", 3, 0, 3 * MICROS_PER_WEEK);\n+    testSingleUnit(\"day\", 3, 0, 3 * MICROS_PER_DAY);\n+    testSingleUnit(\"hour\", 3, 0, 3 * MICROS_PER_HOUR);\n+    testSingleUnit(\"minute\", 3, 0, 3 * MICROS_PER_MINUTE);\n+    testSingleUnit(\"second\", 3, 0, 3 * MICROS_PER_SECOND);\n+    testSingleUnit(\"millisecond\", 3, 0, 3 * MICROS_PER_MILLI);\n+    testSingleUnit(\"microsecond\", 3, 0, 3);\n+\n+    String s;\n+    Interval i;\n+\n+    s = \"interval   -5  years  23   month\";\n+    i = new Interval(-5 * 12 + 23, 0);\n+    assertEquals(Interval.fromString(s), i);\n+\n+    // Error cases\n+    i = null;"
  }],
  "prId": 7355
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "s -> input\n",
    "commit": "3bbb9d6a38050b35a26ac39ea8382d491b1fe609",
    "createdAt": "2015-07-12T05:20:08Z",
    "diffHunk": "@@ -56,4 +56,53 @@ public void toStringTest() {\n     i = new Interval(34, 3 * MICROS_PER_WEEK + 13 * MICROS_PER_HOUR + 123);\n     assertEquals(i.toString(), \"interval 2 years 10 months 3 weeks 13 hours 123 microseconds\");\n   }\n+\n+  @Test\n+  public void fromStringTest() {\n+    testSingleUnit(\"year\", 3, 36, 0);\n+    testSingleUnit(\"month\", 3, 3, 0);\n+    testSingleUnit(\"week\", 3, 0, 3 * MICROS_PER_WEEK);\n+    testSingleUnit(\"day\", 3, 0, 3 * MICROS_PER_DAY);\n+    testSingleUnit(\"hour\", 3, 0, 3 * MICROS_PER_HOUR);\n+    testSingleUnit(\"minute\", 3, 0, 3 * MICROS_PER_MINUTE);\n+    testSingleUnit(\"second\", 3, 0, 3 * MICROS_PER_SECOND);\n+    testSingleUnit(\"millisecond\", 3, 0, 3 * MICROS_PER_MILLI);\n+    testSingleUnit(\"microsecond\", 3, 0, 3);\n+\n+    String s;\n+    Interval i;\n+\n+    s = \"interval   -5  years  23   month\";"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "and i -> interval\n",
    "commit": "3bbb9d6a38050b35a26ac39ea8382d491b1fe609",
    "createdAt": "2015-07-12T05:20:29Z",
    "diffHunk": "@@ -56,4 +56,53 @@ public void toStringTest() {\n     i = new Interval(34, 3 * MICROS_PER_WEEK + 13 * MICROS_PER_HOUR + 123);\n     assertEquals(i.toString(), \"interval 2 years 10 months 3 weeks 13 hours 123 microseconds\");\n   }\n+\n+  @Test\n+  public void fromStringTest() {\n+    testSingleUnit(\"year\", 3, 36, 0);\n+    testSingleUnit(\"month\", 3, 3, 0);\n+    testSingleUnit(\"week\", 3, 0, 3 * MICROS_PER_WEEK);\n+    testSingleUnit(\"day\", 3, 0, 3 * MICROS_PER_DAY);\n+    testSingleUnit(\"hour\", 3, 0, 3 * MICROS_PER_HOUR);\n+    testSingleUnit(\"minute\", 3, 0, 3 * MICROS_PER_MINUTE);\n+    testSingleUnit(\"second\", 3, 0, 3 * MICROS_PER_SECOND);\n+    testSingleUnit(\"millisecond\", 3, 0, 3 * MICROS_PER_MILLI);\n+    testSingleUnit(\"microsecond\", 3, 0, 3);\n+\n+    String s;\n+    Interval i;\n+\n+    s = \"interval   -5  years  23   month\";"
  }],
  "prId": 7355
}]