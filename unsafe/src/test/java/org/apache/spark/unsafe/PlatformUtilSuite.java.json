[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Oh yes, this is a good test. I missed this earlier. Nits: casts usually have a space afterwards in Java, and `i++` is more idiomatic for incrementing. I would not change it unless you have to make other changes.\n",
    "commit": "ebf4d10fcfcf956af2edf7e033b8da609c32eb44",
    "createdAt": "2015-12-01T19:13:50Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.unsafe;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class PlatformUtilSuite {\n+\n+  @Test\n+  public void overlappingCopyMemory() {\n+    byte[] data = new byte[3 * 1024 * 1024];\n+    int size = 2 * 1024 * 1024;\n+    for (int i = 0; i < data.length; ++i) {\n+      data[i] = (byte)i;\n+    }\n+\n+    Platform.copyMemory(data, Platform.BYTE_ARRAY_OFFSET, data, Platform.BYTE_ARRAY_OFFSET, size);\n+    for (int i = 0; i < data.length; ++i) {",
    "line": 34
  }, {
    "author": {
      "login": "nongli"
    },
    "body": "Old habits die hard :)\n\nI feel pretty good that if this test case passes then unsafe.copyMemory works. There is a question of whether this behavior is unspecified and can between different jvms.\n",
    "commit": "ebf4d10fcfcf956af2edf7e033b8da609c32eb44",
    "createdAt": "2015-12-01T19:31:45Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.unsafe;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class PlatformUtilSuite {\n+\n+  @Test\n+  public void overlappingCopyMemory() {\n+    byte[] data = new byte[3 * 1024 * 1024];\n+    int size = 2 * 1024 * 1024;\n+    for (int i = 0; i < data.length; ++i) {\n+      data[i] = (byte)i;\n+    }\n+\n+    Platform.copyMemory(data, Platform.BYTE_ARRAY_OFFSET, data, Platform.BYTE_ARRAY_OFFSET, size);\n+    for (int i = 0; i < data.length; ++i) {",
    "line": 34
  }],
  "prId": 10068
}]