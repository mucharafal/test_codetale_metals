[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "can we remove this since it is not used?\n",
    "commit": "eeee512bd94d463f741170e904ae186e238f997c",
    "createdAt": "2015-04-28T08:00:42Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.unsafe.memory;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.spark.unsafe.PlatformDependent;\n+\n+/**\n+ * A consecutive block of memory, starting at a {@link MemoryLocation} with a fixed size.\n+ */\n+public class MemoryBlock extends MemoryLocation {\n+\n+  private final long length;\n+\n+  /**\n+   * Optional page number; used when this MemoryBlock represents a page allocated by a\n+   * MemoryManager. This is package-private and is modified by MemoryManager.\n+   */\n+  int pageNumber = -1;\n+\n+  public int getPageNumber() {\n+    return pageNumber;\n+  }\n+\n+  MemoryBlock(@Nullable Object obj, long offset, long length) {\n+    super(obj, offset);\n+    this.length = length;\n+  }\n+\n+  /**\n+   * Returns the size of the memory block.\n+   */\n+  public long size() {\n+    return length;\n+  }\n+\n+  /**\n+   * Clear the contents of this memory block.  Returns `this` to facilitate chaining.\n+   */\n+  public MemoryBlock zero() {\n+    PlatformDependent.UNSAFE.setMemory(obj, offset, length, (byte) 0);\n+    return this;\n+  }\n+\n+  /**\n+   * Creates a memory block pointing to the memory used by the byte array.\n+   */\n+  public static MemoryBlock fromByteArray(final byte[] array) {"
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "It's called in a test method in `TestLongArray.scala`, but we don't need it so I'll take it out.\n",
    "commit": "eeee512bd94d463f741170e904ae186e238f997c",
    "createdAt": "2015-04-28T18:40:09Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.unsafe.memory;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.spark.unsafe.PlatformDependent;\n+\n+/**\n+ * A consecutive block of memory, starting at a {@link MemoryLocation} with a fixed size.\n+ */\n+public class MemoryBlock extends MemoryLocation {\n+\n+  private final long length;\n+\n+  /**\n+   * Optional page number; used when this MemoryBlock represents a page allocated by a\n+   * MemoryManager. This is package-private and is modified by MemoryManager.\n+   */\n+  int pageNumber = -1;\n+\n+  public int getPageNumber() {\n+    return pageNumber;\n+  }\n+\n+  MemoryBlock(@Nullable Object obj, long offset, long length) {\n+    super(obj, offset);\n+    this.length = length;\n+  }\n+\n+  /**\n+   * Returns the size of the memory block.\n+   */\n+  public long size() {\n+    return length;\n+  }\n+\n+  /**\n+   * Clear the contents of this memory block.  Returns `this` to facilitate chaining.\n+   */\n+  public MemoryBlock zero() {\n+    PlatformDependent.UNSAFE.setMemory(obj, offset, length, (byte) 0);\n+    return this;\n+  }\n+\n+  /**\n+   * Creates a memory block pointing to the memory used by the byte array.\n+   */\n+  public static MemoryBlock fromByteArray(final byte[] array) {"
  }],
  "prId": 5725
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "would this be slightly faster if it is a long? since we do quite a bit of shifting and casting from int to long for this field\n",
    "commit": "eeee512bd94d463f741170e904ae186e238f997c",
    "createdAt": "2015-04-28T08:05:13Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.unsafe.memory;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.spark.unsafe.PlatformDependent;\n+\n+/**\n+ * A consecutive block of memory, starting at a {@link MemoryLocation} with a fixed size.\n+ */\n+public class MemoryBlock extends MemoryLocation {\n+\n+  private final long length;\n+\n+  /**\n+   * Optional page number; used when this MemoryBlock represents a page allocated by a\n+   * MemoryManager. This is package-private and is modified by MemoryManager.\n+   */\n+  int pageNumber = -1;",
    "line": 35
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "My original motivation for making this an int was the fact that our page table is indexed by an integer, but now that I look more closely it looks like it's most-often read by `encodePageNumberAndOffset`, which does the long cast.  If we wanted to go a bit further in terms of saving instructions here, I guess we could store the pre-shifted page number then do the reverse shift for the accesses in `freePage`, since that's performed far fewer times.\n",
    "commit": "eeee512bd94d463f741170e904ae186e238f997c",
    "createdAt": "2015-04-28T20:27:21Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.unsafe.memory;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.spark.unsafe.PlatformDependent;\n+\n+/**\n+ * A consecutive block of memory, starting at a {@link MemoryLocation} with a fixed size.\n+ */\n+public class MemoryBlock extends MemoryLocation {\n+\n+  private final long length;\n+\n+  /**\n+   * Optional page number; used when this MemoryBlock represents a page allocated by a\n+   * MemoryManager. This is package-private and is modified by MemoryManager.\n+   */\n+  int pageNumber = -1;",
    "line": 35
  }],
  "prId": 5725
}]