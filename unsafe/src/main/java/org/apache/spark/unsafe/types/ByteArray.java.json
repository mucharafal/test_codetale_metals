[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "can we reuse an empty array?\n",
    "commit": "40b01f7d99852eaa04220ae89b3da8b60fa26550",
    "createdAt": "2015-08-12T18:56:59Z",
    "diffHunk": "@@ -29,4 +31,45 @@\n   public static void writeToMemory(byte[] src, Object target, long targetOffset) {\n     Platform.copyMemory(src, Platform.BYTE_ARRAY_OFFSET, target, targetOffset, src.length);\n   }\n+\n+  /**\n+   * Returns a 64-bit integer that can be used as the prefix used in sorting.\n+   */\n+  public static long getPrefix(byte[] bytes) {\n+    if (bytes == null) {\n+      return 0L;\n+    } else {\n+      final int minLen = Math.min(bytes.length, 8);\n+      long p = 0;\n+      for (int i = 0; i < minLen; ++i) {\n+        p |= (128L + Platform.getByte(bytes, Platform.BYTE_ARRAY_OFFSET + i))\n+            << (56 - 8 * i);\n+      }\n+      return p;\n+    }\n+  }\n+\n+  public static byte[] subStringSQL(byte[] bytes, int pos, int len) {\n+    // This pos calculation is according to UTF8String#subStringSQL\n+    if (pos > bytes.length) {\n+      return new byte[0];"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "Good idea and fixed.\n",
    "commit": "40b01f7d99852eaa04220ae89b3da8b60fa26550",
    "createdAt": "2015-08-13T16:18:46Z",
    "diffHunk": "@@ -29,4 +31,45 @@\n   public static void writeToMemory(byte[] src, Object target, long targetOffset) {\n     Platform.copyMemory(src, Platform.BYTE_ARRAY_OFFSET, target, targetOffset, src.length);\n   }\n+\n+  /**\n+   * Returns a 64-bit integer that can be used as the prefix used in sorting.\n+   */\n+  public static long getPrefix(byte[] bytes) {\n+    if (bytes == null) {\n+      return 0L;\n+    } else {\n+      final int minLen = Math.min(bytes.length, 8);\n+      long p = 0;\n+      for (int i = 0; i < minLen; ++i) {\n+        p |= (128L + Platform.getByte(bytes, Platform.BYTE_ARRAY_OFFSET + i))\n+            << (56 - 8 * i);\n+      }\n+      return p;\n+    }\n+  }\n+\n+  public static byte[] subStringSQL(byte[] bytes, int pos, int len) {\n+    // This pos calculation is according to UTF8String#subStringSQL\n+    if (pos > bytes.length) {\n+      return new byte[0];"
  }],
  "prId": 8122
}]