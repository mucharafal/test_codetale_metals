[
  {
    "id" : "8338d528-fdbe-4879-8ab7-4a3d2809e1f8",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "e48a7d4a-7edc-4c03-96ff-a666e855bc97",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "and Eclipse?",
        "createdAt" : "2020-01-09T13:57:50Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,718 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0 codename `Cobalt`. This release includes a\n+huge number of new features and improvements.\n+\n+Metals is a language server for Scala that works with VS Code, Atom, Vim,\n+Sublime Text and Emacs. Metals is developed at the"
  },
  {
    "id" : "1ff3d57b-3fb8-482a-b90a-a3cc877ae52f",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "7b2331f1-c73b-46fa-b99b-51097af04dc5",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Suggestion: have a \"Refactors\" section, which explains we've started implementing refactors. \"Rename\" is the first huge one (which is why it has special treatment in LSP) and we're now starting to tackle other refactors via code actions. Import symbol is the first one.\r\n\r\nI think from a user perspective those features fall under the same hat.",
        "createdAt" : "2020-01-09T14:00:22Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8084679b-9edf-4c10-99ac-adff105dc897",
        "parentId" : "7b2331f1-c73b-46fa-b99b-51097af04dc5",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "I also like the idea of breaking them up into a couple sections. I think that lends to better readability.",
        "createdAt" : "2020-01-09T14:35:32Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,718 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0 codename `Cobalt`. This release includes a\n+huge number of new features and improvements.\n+\n+Metals is a language server for Scala that works with VS Code, Atom, Vim,\n+Sublime Text and Emacs. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community.\n+\n+In this release we merged 201 PRs and closed 24 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out the website and give Metals a try: https://scalameta.org/metals/\n+\n+- goto implementation\n+- rename symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- breakpoints\n+- improvements for Bloop integration\n+- first code action - import missing symbol\n+- worksheet support\n+- Add completion to add all abstract members To mention\n+\n+## Goto implementation\n+\n+TODO\n+\n+## Rename symbol"
  },
  {
    "id" : "c082b1a0-b8e6-4682-8e03-0bdc5630b3db",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "315d9d00-de1a-4784-96ec-1076be86367c",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Same suggestion: have a unified \"Debugging\" section which includes running and debugging with breakpoints.\r\n\r\nI see breakpoints as a critical feature of a debugger, rather than a standalone one.",
        "createdAt" : "2020-01-09T14:01:32Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,718 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0 codename `Cobalt`. This release includes a\n+huge number of new features and improvements.\n+\n+Metals is a language server for Scala that works with VS Code, Atom, Vim,\n+Sublime Text and Emacs. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community.\n+\n+In this release we merged 201 PRs and closed 24 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out the website and give Metals a try: https://scalameta.org/metals/\n+\n+- goto implementation\n+- rename symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- breakpoints\n+- improvements for Bloop integration\n+- first code action - import missing symbol\n+- worksheet support\n+- Add completion to add all abstract members To mention\n+\n+## Goto implementation\n+\n+TODO\n+\n+## Rename symbol\n+\n+TODO\n+\n+## Support for Pants build tool\n+\n+TODO\n+\n+## Run and debug for tests and main methods\n+\n+TODO @marek1840 ?\n+\n+## Breakpoints\n+\n+TODO @marek1840 ?\n+"
  },
  {
    "id" : "8929b077-d5a0-4984-b515-84e19487cbb3",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "3d9a5517-d80e-411e-bebd-bbd835888dc4",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nannounce the release of Metals v0.8.0, codename `Cobalt`. This release includes a\r\n```",
        "createdAt" : "2020-01-09T14:26:19Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,718 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0 codename `Cobalt`. This release includes a"
  },
  {
    "id" : "68f4db31-232d-4a2f-9603-66ad1abad541",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "34351827-2a8e-4248-8d2f-fc6f38e70330",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nCheck out [https://scalameta.org/metals/](https://scalameta.org/metals/) and give Metals a try!\r\n```",
        "createdAt" : "2020-01-09T14:29:42Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cadf4827-2085-46d8-b203-80b6b00cce99",
        "parentId" : "34351827-2a8e-4248-8d2f-fc6f38e70330",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-10T14:41:06Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,718 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0 codename `Cobalt`. This release includes a\n+huge number of new features and improvements.\n+\n+Metals is a language server for Scala that works with VS Code, Atom, Vim,\n+Sublime Text and Emacs. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community.\n+\n+In this release we merged 201 PRs and closed 24 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out the website and give Metals a try: https://scalameta.org/metals/"
  },
  {
    "id" : "49e8ea91-2466-4b73-a4b9-c1a36d31282f",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "5203d7aa-212a-47af-b190-0bce94c1c7f9",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "To mention?",
        "createdAt" : "2020-01-09T14:30:15Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9cf9c5c2-a287-4851-adab-65d5b2a71b8d",
        "parentId" : "5203d7aa-212a-47af-b190-0bce94c1c7f9",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-10T12:08:21Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,718 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0 codename `Cobalt`. This release includes a\n+huge number of new features and improvements.\n+\n+Metals is a language server for Scala that works with VS Code, Atom, Vim,\n+Sublime Text and Emacs. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community.\n+\n+In this release we merged 201 PRs and closed 24 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out the website and give Metals a try: https://scalameta.org/metals/\n+\n+- goto implementation\n+- rename symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- breakpoints\n+- improvements for Bloop integration\n+- first code action - import missing symbol\n+- worksheet support\n+- Add completion to add all abstract members To mention"
  },
  {
    "id" : "1bc9c0fa-2e5e-4e43-8ba9-e41ff1f96aa1",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "52e1951f-0a57-47ad-8034-9d2211c97913",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Decoration protocol for `coc-metals` isn't finished yet. Depending on when we will actually release, it may be, but as of now it's not. ",
        "createdAt" : "2020-01-09T14:36:56Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e2649b9c-aee6-49d4-99a0-84e3d38113f8",
        "parentId" : "52e1951f-0a57-47ad-8034-9d2211c97913",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Actually, keep it in. Just merged it in this morning.",
        "createdAt" : "2020-01-10T10:42:42Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d82745ba-5455-4e68-bb52-faac6e37b57c",
        "parentId" : "52e1951f-0a57-47ad-8034-9d2211c97913",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Cool! :D",
        "createdAt" : "2020-01-10T12:08:35Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,718 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0 codename `Cobalt`. This release includes a\n+huge number of new features and improvements.\n+\n+Metals is a language server for Scala that works with VS Code, Atom, Vim,\n+Sublime Text and Emacs. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community.\n+\n+In this release we merged 201 PRs and closed 24 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out the website and give Metals a try: https://scalameta.org/metals/\n+\n+- goto implementation\n+- rename symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- breakpoints\n+- improvements for Bloop integration\n+- first code action - import missing symbol\n+- worksheet support\n+- Add completion to add all abstract members To mention\n+\n+## Goto implementation\n+\n+TODO\n+\n+## Rename symbol\n+\n+TODO\n+\n+## Support for Pants build tool\n+\n+TODO\n+\n+## Run and debug for tests and main methods\n+\n+TODO @marek1840 ?\n+\n+## Breakpoints\n+\n+TODO @marek1840 ?\n+\n+## Improvements for Bloop integration\n+\n+TODO\n+\n+Restart Bloop automatically if newer version is needed Automatically reconnct\n+Switch to to using Bloop Launcher Remove separate plugin for Metals Bloop itself\n+resolves semanticdb\n+\n+## Support for java 11\n+\n+TODO\n+\n+Currently tested on CI No warning when using 11 and it will be detected\n+automatically\n+\n+## Worksheet support\n+\n+TODO\n+\n+via decoration protocol for coc-metals and vs code via applyEdit and comments +"
  },
  {
    "id" : "0d7addeb-2d9e-48c6-b377-a9e9a1ea3f9b",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "21899ff4-59ab-4a28-9207-759512c01ae4",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "This is a duplicate from line 86.",
        "createdAt" : "2020-01-09T14:38:13Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,718 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0 codename `Cobalt`. This release includes a\n+huge number of new features and improvements.\n+\n+Metals is a language server for Scala that works with VS Code, Atom, Vim,\n+Sublime Text and Emacs. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community.\n+\n+In this release we merged 201 PRs and closed 24 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out the website and give Metals a try: https://scalameta.org/metals/\n+\n+- goto implementation\n+- rename symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- breakpoints\n+- improvements for Bloop integration\n+- first code action - import missing symbol\n+- worksheet support\n+- Add completion to add all abstract members To mention\n+\n+## Goto implementation\n+\n+TODO\n+\n+## Rename symbol\n+\n+TODO\n+\n+## Support for Pants build tool\n+\n+TODO\n+\n+## Run and debug for tests and main methods\n+\n+TODO @marek1840 ?\n+\n+## Breakpoints\n+\n+TODO @marek1840 ?\n+\n+## Improvements for Bloop integration\n+\n+TODO\n+\n+Restart Bloop automatically if newer version is needed Automatically reconnct\n+Switch to to using Bloop Launcher Remove separate plugin for Metals Bloop itself\n+resolves semanticdb\n+\n+## Support for java 11\n+\n+TODO\n+\n+Currently tested on CI No warning when using 11 and it will be detected\n+automatically\n+\n+## Worksheet support\n+\n+TODO\n+\n+via decoration protocol for coc-metals and vs code via applyEdit and comments +\n+hover\n+\n+## Better support for Vim via coc-metals\n+\n+TODO @ckipp01 ?\n+\n+## Import missing symbol\n+\n+TODO @gabro ?\n+\n+## Other improvements\n+\n+- Sort auto-completed exhaustive match'es by declaration order 1174\n+- Handle abstract var overrides\n+- Add an empty line after the package declaration before import\n+- Sort auto-completed exhaustive match'es by declaration order"
  },
  {
    "id" : "777f4910-2798-4ea4-8ab2-8633ad715be1",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "d01bbe6c-5e22-4202-832d-f76ca07e9f1a",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "- formatting on paste for multi-line strings\r\n- json doctor support",
        "createdAt" : "2020-01-09T14:38:43Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "dddd1ffc-93e4-4065-b29d-9a65bb51c9d7",
        "parentId" : "d01bbe6c-5e22-4202-832d-f76ca07e9f1a",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "> formatting on paste for multi-line strings\r\n\r\nwasn't it in the previous release?\r\n\r\n> json doctor support\r\n\r\nIt seems not really user facing, we tend to include things that users might use themselves",
        "createdAt" : "2020-01-09T15:04:13Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c1661f99-f23b-48fe-8bcb-4dba1bc73e2b",
        "parentId" : "d01bbe6c-5e22-4202-832d-f76ca07e9f1a",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "I believe the previous release had `onTypeFormatting`, but didn't support formatting on multiline string pastes. The PR is listed below https://github.com/scalameta/metals/pull/968.\r\n\r\nRegarding json doctor, that makes sense, didn't think of that 👍 ",
        "createdAt" : "2020-01-09T15:09:05Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cefc7852-1c08-496b-aff5-c04128383698",
        "parentId" : "d01bbe6c-5e22-4202-832d-f76ca07e9f1a",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Actually on paste formatting  was included in 0.7.6 - must have forgotten to add the PR there",
        "createdAt" : "2020-01-10T14:17:12Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d75e7205-3553-47fd-ba91-456f7efa6707",
        "parentId" : "d01bbe6c-5e22-4202-832d-f76ca07e9f1a",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Actually nevermind. The fix was merged later.",
        "createdAt" : "2020-01-10T14:23:28Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5c90c498-b509-4870-871c-1c3d0a4e6242",
        "parentId" : "d01bbe6c-5e22-4202-832d-f76ca07e9f1a",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Added",
        "createdAt" : "2020-01-10T14:41:21Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : 291,
    "diffHunk" : "@@ -0,0 +1,718 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0 codename `Cobalt`. This release includes a\n+huge number of new features and improvements.\n+\n+Metals is a language server for Scala that works with VS Code, Atom, Vim,\n+Sublime Text and Emacs. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community.\n+\n+In this release we merged 201 PRs and closed 24 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out the website and give Metals a try: https://scalameta.org/metals/\n+\n+- goto implementation\n+- rename symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- breakpoints\n+- improvements for Bloop integration\n+- first code action - import missing symbol\n+- worksheet support\n+- Add completion to add all abstract members To mention\n+\n+## Goto implementation\n+\n+TODO\n+\n+## Rename symbol\n+\n+TODO\n+\n+## Support for Pants build tool\n+\n+TODO\n+\n+## Run and debug for tests and main methods\n+\n+TODO @marek1840 ?\n+\n+## Breakpoints\n+\n+TODO @marek1840 ?\n+\n+## Improvements for Bloop integration\n+\n+TODO\n+\n+Restart Bloop automatically if newer version is needed Automatically reconnct\n+Switch to to using Bloop Launcher Remove separate plugin for Metals Bloop itself\n+resolves semanticdb\n+\n+## Support for java 11\n+\n+TODO\n+\n+Currently tested on CI No warning when using 11 and it will be detected\n+automatically\n+\n+## Worksheet support\n+\n+TODO\n+\n+via decoration protocol for coc-metals and vs code via applyEdit and comments +\n+hover\n+\n+## Better support for Vim via coc-metals\n+\n+TODO @ckipp01 ?\n+\n+## Import missing symbol\n+\n+TODO @gabro ?\n+\n+## Other improvements\n+\n+- Sort auto-completed exhaustive match'es by declaration order 1174\n+- Handle abstract var overrides\n+- Add an empty line after the package declaration before import\n+- Sort auto-completed exhaustive match'es by declaration order\n+- Encode the workspace path directory in build digests\n+- Tone down \"No SemanticDB\" warning\n+- Send Tree View update notification on first no-op compilation.\n+- Enable goToDefinition when cursor is at end of symbol\n+- Prioritize build targets with supported Scala versions.\n+"
  },
  {
    "id" : "66df5c63-ea9c-4f76-8029-51641d8bc835",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "4b8cf90b-0533-4cd3-99f7-4781375fdef7",
        "parentId" : null,
        "author" : {
          "login" : "ritschwumm",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/547138?v=4"
        },
        "body" : "typo, reconnct should be reconnect",
        "createdAt" : "2020-01-09T16:01:32Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ritschwumm",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/547138?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,718 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0 codename `Cobalt`. This release includes a\n+huge number of new features and improvements.\n+\n+Metals is a language server for Scala that works with VS Code, Atom, Vim,\n+Sublime Text and Emacs. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community.\n+\n+In this release we merged 201 PRs and closed 24 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out the website and give Metals a try: https://scalameta.org/metals/\n+\n+- goto implementation\n+- rename symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- breakpoints\n+- improvements for Bloop integration\n+- first code action - import missing symbol\n+- worksheet support\n+- Add completion to add all abstract members To mention\n+\n+## Goto implementation\n+\n+TODO\n+\n+## Rename symbol\n+\n+TODO\n+\n+## Support for Pants build tool\n+\n+TODO\n+\n+## Run and debug for tests and main methods\n+\n+TODO @marek1840 ?\n+\n+## Breakpoints\n+\n+TODO @marek1840 ?\n+\n+## Improvements for Bloop integration\n+\n+TODO\n+\n+Restart Bloop automatically if newer version is needed Automatically reconnct"
  },
  {
    "id" : "3c2b7109-ac68-47a3-a074-57b812f9f467",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "0dd47840-ed89-4e2f-b427-b75c8a551127",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Add Lunatech?",
        "createdAt" : "2020-01-09T16:04:27Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dd884577-9792-4603-bdca-a19138d78e9c",
        "parentId" : "0dd47840-ed89-4e2f-b427-b75c8a551127",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I was thinking about it and wanted to ask @ckipp01 , but totally forgot :sweat: \r\n\r\n@ckipp01 what do you think about it?",
        "createdAt" : "2020-01-09T16:23:37Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "361eb79b-0516-43b1-9590-829f7075291d",
        "parentId" : "0dd47840-ed89-4e2f-b427-b75c8a551127",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "I'm all for it if you guys are willing. I thought about it when I read it, but didn't want to be pushy about it. However, I know Lunatech would really appreciate it. ",
        "createdAt" : "2020-01-09T16:51:15Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2158bf3d-f9b2-407b-9c87-af130edb7c92",
        "parentId" : "0dd47840-ed89-4e2f-b427-b75c8a551127",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Added, is it alright?",
        "createdAt" : "2020-01-10T12:09:12Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "81410215-280c-483b-b92b-b4e85635f487",
        "parentId" : "0dd47840-ed89-4e2f-b427-b75c8a551127",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Yup, that's great!",
        "createdAt" : "2020-01-10T15:13:25Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,718 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0 codename `Cobalt`. This release includes a\n+huge number of new features and improvements.\n+\n+Metals is a language server for Scala that works with VS Code, Atom, Vim,\n+Sublime Text and Emacs. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)"
  },
  {
    "id" : "f1933f52-2e41-4877-9eb9-62e1566e5731",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "218040a5-5a08-425a-9000-f64cdc052565",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "> This release includes a huge number of new features and improvements, ~which we were~ perfecting over the last couple of months.\r\n------\r\nThis release includes a huge number of new features and improvements, which we've been perfecting over the last couple of months.",
        "createdAt" : "2020-01-10T16:00:04Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7be53369-65f4-4cbc-bae6-7dba59462f0d",
        "parentId" : "218040a5-5a08-425a-9000-f64cdc052565",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "How about formulating the introduction like this?\r\n\r\n---\r\n\r\nWe are excited to announce the release of Metals v0.8.0, codename `Cobalt`. This release includes a large number of new features and improvements, which have been under development since September 2019.\r\n\r\n* Commits since last release: 727\r\n* Merged PRs: 207\r\n* Contributors: N\r\n* Closed issues: 82\r\n* New features: M\r\n\r\nFor full details:  https://github.com/scalameta/metals/milestone/9?closed=1",
        "createdAt" : "2020-01-10T20:06:22Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2e5871aa-394b-4271-a2b5-a8238e9bc427",
        "parentId" : "218040a5-5a08-425a-9000-f64cdc052565",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:14:41Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months."
  },
  {
    "id" : "af3da7c3-fe4a-4304-8f58-82a8211037e4",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "2627e517-a6a7-42fb-ae39-a2376fa0c2e2",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nIn this release we merged 207 PRs and closed 82 issues!\r\n```",
        "createdAt" : "2020-01-10T16:05:34Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "735511ff-9748-486f-8a44-4a586be99cb4",
        "parentId" : "2627e517-a6a7-42fb-ae39-a2376fa0c2e2",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Applied Olaf's suggestion.",
        "createdAt" : "2020-01-13T11:14:09Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:"
  },
  {
    "id" : "708a7bce-ae5f-4cc0-b443-4e0c5a8b4d4e",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "68081f74-1016-4363-a0db-569f349d7b76",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nFull details: [https://github.com/scalameta/metals/milestone/9?closed=1](https://github.com/scalameta/metals/milestone/9?closed=1)\r\n```",
        "createdAt" : "2020-01-10T16:06:01Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5efef08a-b1d1-4c7e-ac8f-f6e7d94809e4",
        "parentId" : "68081f74-1016-4363-a0db-569f349d7b76",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Applied Olaf's suggestion.",
        "createdAt" : "2020-01-13T11:14:22Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1"
  },
  {
    "id" : "622fe92d-82ec-42e1-a78d-54d65636cf0c",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "ee00934d-9b69-4324-8bf3-51c3d6ded898",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\n- support for the Pants build tool\r\n```",
        "createdAt" : "2020-01-10T16:08:03Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6a10dcf9-31d2-48cc-ba68-0590342c87ac",
        "parentId" : "ee00934d-9b69-4324-8bf3-51c3d6ded898",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:15:29Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool"
  },
  {
    "id" : "7f11724d-7253-41cb-a5d1-bc25071f37b1",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "e39f2246-4b6c-4a56-b172-16333ea8f852",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nof semanticDB, this will only work after the workspace is fully compiled.\r\n```",
        "createdAt" : "2020-01-10T16:09:17Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "13887a0e-37f1-4aff-805d-c4455307ed26",
        "parentId" : "e39f2246-4b6c-4a56-b172-16333ea8f852",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:15:40Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled."
  },
  {
    "id" : "0546e815-e928-4341-888e-09ef3685b2e8",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "27f46ce5-b3cc-441d-b433-5b9234df718d",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nFind implementations also works for symbols outside of the workspace, although\r\n```",
        "createdAt" : "2020-01-10T16:09:52Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7946c4f6-9afa-4192-b101-efae08161a1a",
        "parentId" : "27f46ce5-b3cc-441d-b433-5b9234df718d",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "It's the activity of finding implementation - that's what I was aiming for,",
        "createdAt" : "2020-01-13T11:18:59Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although"
  },
  {
    "id" : "13dc0e46-2338-4941-a590-dc07f5e0278f",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "46d89f16-1767-47ba-b92d-dd3b0b6c0d11",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "> in that case it might take a while to load the classpath symbol information at\r\nfirst.\r\n------\r\nin that case, it might take a while to load the classpath symbol information for the first time.",
        "createdAt" : "2020-01-10T16:10:56Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6dd9165e-c860-422c-a453-5b28c0d705e8",
        "parentId" : "46d89f16-1767-47ba-b92d-dd3b0b6c0d11",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:15:54Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so"
  },
  {
    "id" : "0e51fcf0-c384-4f5d-b25a-ce31a485222e",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "6a7fae7c-8746-4926-97e9-e1b8fa09887a",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nthis might take longer only once per build target.\r\n```\r\n```suggestion\r\nthis might take longer once per build target.\r\n```",
        "createdAt" : "2020-01-10T16:11:31Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a1d339af-cd94-44c4-9378-35605ac9b882",
        "parentId" : "6a7fae7c-8746-4926-97e9-e1b8fa09887a",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:16:03Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target."
  },
  {
    "id" : "0794eec2-462a-44ac-be2a-f592f6ffb5dd",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "d14ff9e9-1a3f-4d83-8c26-c5d4148ae779",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nThanks to the implementation of the `Go to implementations` feature, we were able to work\r\n```",
        "createdAt" : "2020-01-10T16:11:54Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work"
  },
  {
    "id" : "6a800ba2-1c28-49bf-8d6f-f9b259faa3f8",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "9e41ae9c-aaca-40f4-80eb-bae206e427aa",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\n  all children overriding that symbol\r\n```",
        "createdAt" : "2020-01-10T16:12:57Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7ea54ca9-aa64-45fc-bade-862ea9881cb1",
        "parentId" : "9e41ae9c-aaca-40f4-80eb-bae206e427aa",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:16:11Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,"
  },
  {
    "id" : "2961675e-5ea9-4f91-b806-9c9cc4e51d5b",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "f11831b5-7fad-409d-a3a4-51ffe2a61182",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\n- java symbols are not renamed\r\n```",
        "createdAt" : "2020-01-10T16:13:06Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f03f730f-c0fb-4b74-8ada-de27aa59207e",
        "parentId" : "f11831b5-7fad-409d-a3a4-51ffe2a61182",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:16:18Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,"
  },
  {
    "id" : "61e2d304-e431-4acc-b048-3ed32fcfd764",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "f103cb0a-7e26-458a-b965-8e8b9b779b03",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\n  change the semantics\r\n```",
        "createdAt" : "2020-01-10T16:13:27Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f588badb-2587-4577-a9e5-29a3d158fd04",
        "parentId" : "f103cb0a-7e26-458a-b965-8e8b9b779b03",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:16:24Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,"
  },
  {
    "id" : "6d8d3335-22b7-4a9d-8394-1b555ce411ad",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "0cfc6381-0610-425e-9c57-120e964dcf6e",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\n  character to make sure code compiles afterwards\r\n```",
        "createdAt" : "2020-01-10T16:13:55Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "602a9dd6-051e-4062-8bac-c846d32227c1",
        "parentId" : "0cfc6381-0610-425e-9c57-120e964dcf6e",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:16:29Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,"
  },
  {
    "id" : "10bc22d4-9773-4acb-865e-36885ed87d4b",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "2aa9af28-10c2-4237-8fb3-00db75a2effb",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\n  `.newname()`\r\n```",
        "createdAt" : "2020-01-10T16:14:09Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8b022714-1d1f-4c75-81b4-793dc93598ee",
        "parentId" : "2aa9af28-10c2-4237-8fb3-00db75a2effb",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:16:37Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,"
  },
  {
    "id" : "fa1dd062-f397-4cce-9790-29775a5a4555",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "db9d90d5-9d80-4630-b960-859ca6119e8f",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\n  be renamed\r\n```",
        "createdAt" : "2020-01-10T16:14:20Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "36dcef62-0167-41ac-903f-171cc92253b5",
        "parentId" : "db9d90d5-9d80-4630-b960-859ca6119e8f",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:16:44Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,"
  },
  {
    "id" : "9d71d06a-b466-4f27-80cb-e24aba8367c7",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "329ae9d9-74a6-4cb7-a7b6-d9fe71b62e3b",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\n- companion objects will also be renamed with their companion classes\r\n```",
        "createdAt" : "2020-01-10T16:14:30Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "10501fc3-63ca-4897-aad8-8ab5406eb114",
        "parentId" : "329ae9d9-74a6-4cb7-a7b6-d9fe71b62e3b",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:16:52Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes."
  },
  {
    "id" : "fe4bc73c-9186-4c8c-87a2-04006c44b119",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "17c7de45-cc93-4cfc-9db6-b42c152a834b",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "In the past when you were implementing an abstract member in a concrete class, you'd see the completion option to override the member. However, if you wanted to implement all of the abstract members, you'd need to do each one individually. Now you'll see a new completion option in the scenario to `Implement all members` which will implement all the members at once.\r\n\r\n![implement all members](https://i.imgur.com/ayBaCDU.gif)\r\n",
        "createdAt" : "2020-01-10T16:14:46Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f5956362-9fe1-4c26-9cfa-b7ce692d86b4",
        "parentId" : "17c7de45-cc93-4cfc-9db6-b42c152a834b",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Thanks! Added the whole section.",
        "createdAt" : "2020-01-13T12:17:08Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members\n+\n+TODO @ckipp01 ?"
  },
  {
    "id" : "947c9f4f-e0cf-437e-9716-96a758935bb1",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "ee0daf9e-5aa5-4a53-8a56-1d1da750544c",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nThanks to the recent work by @olafurpg you can now use Metals with the Pants build\r\n```",
        "createdAt" : "2020-01-10T16:15:11Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "01682c3a-002b-483d-a4d6-620ee3a32e60",
        "parentId" : "ee0daf9e-5aa5-4a53-8a56-1d1da750544c",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:18:45Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members\n+\n+TODO @ckipp01 ?\n+\n+### Import missing symbol\n+\n+TODO @gabro ?\n+\n+## Build tools\n+\n+### Support for Pants build tool\n+\n+Thanks to recent work by @olafurpg you can now use Metals with the Pants build"
  },
  {
    "id" : "529289c6-e015-41f7-9435-6b2aa16b155f",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "ba8166b3-a230-4fb2-a9bf-513fca743a25",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\ntool. The support is the same as the other supported build tools. The Pants\r\n```",
        "createdAt" : "2020-01-10T16:16:01Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "756ce77a-4147-4ada-bd17-b38be88f7552",
        "parentId" : "ba8166b3-a230-4fb2-a9bf-513fca743a25",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:18:56Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members\n+\n+TODO @ckipp01 ?\n+\n+### Import missing symbol\n+\n+TODO @gabro ?\n+\n+## Build tools\n+\n+### Support for Pants build tool\n+\n+Thanks to recent work by @olafurpg you can now use Metals with the Pants build\n+tool. The support will is the same as in case of other build tools, the Pants"
  },
  {
    "id" : "a71d6566-fd0a-4f62-8a21-4e3ae37e452b",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "1950b903-d30a-4a5d-a24c-4c9d2aad8ea2",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nIn order to make the integration between Bloop and Metals a smoother\r\n```",
        "createdAt" : "2020-01-10T16:16:46Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e91641fc-f3d6-413c-9f19-3bb3c75b780f",
        "parentId" : "1950b903-d30a-4a5d-a24c-4c9d2aad8ea2",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:19:02Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members\n+\n+TODO @ckipp01 ?\n+\n+### Import missing symbol\n+\n+TODO @gabro ?\n+\n+## Build tools\n+\n+### Support for Pants build tool\n+\n+Thanks to recent work by @olafurpg you can now use Metals with the Pants build\n+tool. The support will is the same as in case of other build tools, the Pants\n+workspace will be detected automatically and an automatic import will be\n+suggested.\n+\n+The support is currently included inside of Metals itself in contrast to other\n+build tools, which have their `bloopInstall` command implemented inside Bloop.\n+It is important to note that we are still working on improvements that will help\n+with large codebases that Pants is usually used for.\n+\n+### Improvements for Bloop integration\n+\n+In order to make the integration between Bloop and Metals a more smooth"
  },
  {
    "id" : "4c96d1ba-9d09-4954-915a-412f233c2d64",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "15880343-a8fd-43c0-93f9-7b3b07323652",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nexperience, several new improvements are included in this release. There are\r\n```",
        "createdAt" : "2020-01-10T16:17:10Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "476bb611-c6d8-46d2-bc63-2563e531138f",
        "parentId" : "15880343-a8fd-43c0-93f9-7b3b07323652",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:19:14Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members\n+\n+TODO @ckipp01 ?\n+\n+### Import missing symbol\n+\n+TODO @gabro ?\n+\n+## Build tools\n+\n+### Support for Pants build tool\n+\n+Thanks to recent work by @olafurpg you can now use Metals with the Pants build\n+tool. The support will is the same as in case of other build tools, the Pants\n+workspace will be detected automatically and an automatic import will be\n+suggested.\n+\n+The support is currently included inside of Metals itself in contrast to other\n+build tools, which have their `bloopInstall` command implemented inside Bloop.\n+It is important to note that we are still working on improvements that will help\n+with large codebases that Pants is usually used for.\n+\n+### Improvements for Bloop integration\n+\n+In order to make the integration between Bloop and Metals a more smooth\n+experience several new improvements are now included in this release. There are"
  },
  {
    "id" : "359825d5-5b29-4587-ae3c-16d65341480f",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "7eeed8cd-9816-48ac-80aa-11918d8d54f3",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nbased on feedback from users as well as our own experiences while working\r\n```",
        "createdAt" : "2020-01-10T16:17:47Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e6a82182-434e-4c36-9314-80715fbc7eea",
        "parentId" : "7eeed8cd-9816-48ac-80aa-11918d8d54f3",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:19:42Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members\n+\n+TODO @ckipp01 ?\n+\n+### Import missing symbol\n+\n+TODO @gabro ?\n+\n+## Build tools\n+\n+### Support for Pants build tool\n+\n+Thanks to recent work by @olafurpg you can now use Metals with the Pants build\n+tool. The support will is the same as in case of other build tools, the Pants\n+workspace will be detected automatically and an automatic import will be\n+suggested.\n+\n+The support is currently included inside of Metals itself in contrast to other\n+build tools, which have their `bloopInstall` command implemented inside Bloop.\n+It is important to note that we are still working on improvements that will help\n+with large codebases that Pants is usually used for.\n+\n+### Improvements for Bloop integration\n+\n+In order to make the integration between Bloop and Metals a more smooth\n+experience several new improvements are now included in this release. There are\n+based on feedback from the user as well us our own experiences while working"
  },
  {
    "id" : "69863db0-3a7d-4875-afb8-8debf7d3cde1",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "788ec633-0d04-4682-8f91-babfab2e66bf",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nMetals requires the SemanticDB compiler plugin for a number of features to\r\n```",
        "createdAt" : "2020-01-10T16:18:21Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e83d85f9-f9fb-46f3-8507-aa273d6895ee",
        "parentId" : "788ec633-0d04-4682-8f91-babfab2e66bf",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:19:25Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members\n+\n+TODO @ckipp01 ?\n+\n+### Import missing symbol\n+\n+TODO @gabro ?\n+\n+## Build tools\n+\n+### Support for Pants build tool\n+\n+Thanks to recent work by @olafurpg you can now use Metals with the Pants build\n+tool. The support will is the same as in case of other build tools, the Pants\n+workspace will be detected automatically and an automatic import will be\n+suggested.\n+\n+The support is currently included inside of Metals itself in contrast to other\n+build tools, which have their `bloopInstall` command implemented inside Bloop.\n+It is important to note that we are still working on improvements that will help\n+with large codebases that Pants is usually used for.\n+\n+### Improvements for Bloop integration\n+\n+In order to make the integration between Bloop and Metals a more smooth\n+experience several new improvements are now included in this release. There are\n+based on feedback from the user as well us our own experiences while working\n+with Metals and should make the overall experience of importing the build and\n+compiling much better.\n+\n+#### SemanticDB is resolved inside Bloop\n+\n+Metals require the SemanticDB compiler plugin for a number of features to"
  },
  {
    "id" : "fedc2cc5-ae5e-4329-9e32-94239f2eb277",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "eb3c55c8-bea3-4bbd-be2d-69fec7e29653",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\n[recent changes](https://github.com/scalacenter/bloop/pull/942), Metals can send\r\n```",
        "createdAt" : "2020-01-10T16:19:15Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e1e0c435-5770-449e-a31b-0698dca022cf",
        "parentId" : "eb3c55c8-bea3-4bbd-be2d-69fec7e29653",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:19:48Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members\n+\n+TODO @ckipp01 ?\n+\n+### Import missing symbol\n+\n+TODO @gabro ?\n+\n+## Build tools\n+\n+### Support for Pants build tool\n+\n+Thanks to recent work by @olafurpg you can now use Metals with the Pants build\n+tool. The support will is the same as in case of other build tools, the Pants\n+workspace will be detected automatically and an automatic import will be\n+suggested.\n+\n+The support is currently included inside of Metals itself in contrast to other\n+build tools, which have their `bloopInstall` command implemented inside Bloop.\n+It is important to note that we are still working on improvements that will help\n+with large codebases that Pants is usually used for.\n+\n+### Improvements for Bloop integration\n+\n+In order to make the integration between Bloop and Metals a more smooth\n+experience several new improvements are now included in this release. There are\n+based on feedback from the user as well us our own experiences while working\n+with Metals and should make the overall experience of importing the build and\n+compiling much better.\n+\n+#### SemanticDB is resolved inside Bloop\n+\n+Metals require the SemanticDB compiler plugin for a number of features to\n+function properly. Because of that it was quite difficult to add it\n+automatically in all supported plugins even if those supported Bloop itself.\n+Perfect examples are Seed and Fury, which use Bloop to compile code, however\n+adding a plugin automatically would require changes to their core code.\n+\n+Currently, thanks to\n+[recent changes](https://github.com/scalacenter/bloop/pull/942) Metals can send"
  },
  {
    "id" : "1887e64f-0421-4cd5-a3cc-2da64924b62a",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "814c9b46-e3e5-4f2f-8407-f9f8beefbfb0",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\n  via automatically generated `./project/metals.sbt` file and ran when imported\r\n```",
        "createdAt" : "2020-01-10T16:20:44Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bc97dc04-bf9e-4ca1-8eda-7552af018601",
        "parentId" : "814c9b46-e3e5-4f2f-8407-f9f8beefbfb0",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:19:56Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members\n+\n+TODO @ckipp01 ?\n+\n+### Import missing symbol\n+\n+TODO @gabro ?\n+\n+## Build tools\n+\n+### Support for Pants build tool\n+\n+Thanks to recent work by @olafurpg you can now use Metals with the Pants build\n+tool. The support will is the same as in case of other build tools, the Pants\n+workspace will be detected automatically and an automatic import will be\n+suggested.\n+\n+The support is currently included inside of Metals itself in contrast to other\n+build tools, which have their `bloopInstall` command implemented inside Bloop.\n+It is important to note that we are still working on improvements that will help\n+with large codebases that Pants is usually used for.\n+\n+### Improvements for Bloop integration\n+\n+In order to make the integration between Bloop and Metals a more smooth\n+experience several new improvements are now included in this release. There are\n+based on feedback from the user as well us our own experiences while working\n+with Metals and should make the overall experience of importing the build and\n+compiling much better.\n+\n+#### SemanticDB is resolved inside Bloop\n+\n+Metals require the SemanticDB compiler plugin for a number of features to\n+function properly. Because of that it was quite difficult to add it\n+automatically in all supported plugins even if those supported Bloop itself.\n+Perfect examples are Seed and Fury, which use Bloop to compile code, however\n+adding a plugin automatically would require changes to their core code.\n+\n+Currently, thanks to\n+[recent changes](https://github.com/scalacenter/bloop/pull/942) Metals can send\n+information about the SemanticDB version, which Bloop uses to automatically\n+download and configure the SemanticDB scalac plugin. Thanks to that no changes\n+in the build tool itself are needed. Particular changes in regards to build\n+tools are:\n+\n+- Gradle - predef script code used in automatic import is now simplified a lot\n+  and works with even more customized workspaces. The only thing it needs to do\n+  is add the Bloop plugin and run `bloopInstall`, which can easily be done\n+  automatically by the user.\n+- Maven - no manual configuration is now needed. To import automatically just\n+  the plugin is needed to be invoked with a setting for downloading sources.\n+- Sbt - the `metals-sbt` plugin is now removed and the Bloop plugin is now added\n+  via automatically generated `./project/metals.sbt` file and run when imported"
  },
  {
    "id" : "93b2025c-59bf-4046-99e4-fe0efccaf05f",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "536d264a-b37c-43d0-9a5d-b14c2600e8fb",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\ninstance with the specified version if none is running. This simplified the\r\n```",
        "createdAt" : "2020-01-10T16:21:28Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e3b43f78-bf50-48d7-8673-baec4298bf67",
        "parentId" : "536d264a-b37c-43d0-9a5d-b14c2600e8fb",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:20:02Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members\n+\n+TODO @ckipp01 ?\n+\n+### Import missing symbol\n+\n+TODO @gabro ?\n+\n+## Build tools\n+\n+### Support for Pants build tool\n+\n+Thanks to recent work by @olafurpg you can now use Metals with the Pants build\n+tool. The support will is the same as in case of other build tools, the Pants\n+workspace will be detected automatically and an automatic import will be\n+suggested.\n+\n+The support is currently included inside of Metals itself in contrast to other\n+build tools, which have their `bloopInstall` command implemented inside Bloop.\n+It is important to note that we are still working on improvements that will help\n+with large codebases that Pants is usually used for.\n+\n+### Improvements for Bloop integration\n+\n+In order to make the integration between Bloop and Metals a more smooth\n+experience several new improvements are now included in this release. There are\n+based on feedback from the user as well us our own experiences while working\n+with Metals and should make the overall experience of importing the build and\n+compiling much better.\n+\n+#### SemanticDB is resolved inside Bloop\n+\n+Metals require the SemanticDB compiler plugin for a number of features to\n+function properly. Because of that it was quite difficult to add it\n+automatically in all supported plugins even if those supported Bloop itself.\n+Perfect examples are Seed and Fury, which use Bloop to compile code, however\n+adding a plugin automatically would require changes to their core code.\n+\n+Currently, thanks to\n+[recent changes](https://github.com/scalacenter/bloop/pull/942) Metals can send\n+information about the SemanticDB version, which Bloop uses to automatically\n+download and configure the SemanticDB scalac plugin. Thanks to that no changes\n+in the build tool itself are needed. Particular changes in regards to build\n+tools are:\n+\n+- Gradle - predef script code used in automatic import is now simplified a lot\n+  and works with even more customized workspaces. The only thing it needs to do\n+  is add the Bloop plugin and run `bloopInstall`, which can easily be done\n+  automatically by the user.\n+- Maven - no manual configuration is now needed. To import automatically just\n+  the plugin is needed to be invoked with a setting for downloading sources.\n+- Sbt - the `metals-sbt` plugin is now removed and the Bloop plugin is now added\n+  via automatically generated `./project/metals.sbt` file and run when imported\n+  automatically. Thanks to this solution it should be possible to reuse Metals\n+  compilation in the upcoming feature for offloading compilation in Sbt.\n+- Mill - logic for adding semanticDB plugin is removed from Mill.\n+- Pants, Fury, Seed - no changes were needed for the semanticDB integration and\n+  should work out of the box.\n+\n+#### Switch to to using Bloop Launcher\n+\n+Instead of using internal Metals logic, we now use the Bloop Launcher, which\n+enables us to either connect to an existing Bsp server or start a new Bloop\n+instance with the specified version if nothing is running. This simplified the"
  },
  {
    "id" : "e8495b30-421b-4df4-ad92-9b6e08c1facf",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "c98b3557-e6f8-443f-9703-9c20c03fafae",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "> This simplified the connection to Bloop greatly and enabled to work on further improvements.\r\n\r\n-------\r\n\r\nThis greatly simplified the connection to Bloop and enabled us to work on further improvements.",
        "createdAt" : "2020-01-10T16:22:12Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "64816854-f4de-4adc-a970-b058422a3c14",
        "parentId" : "c98b3557-e6f8-443f-9703-9c20c03fafae",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:20:10Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members\n+\n+TODO @ckipp01 ?\n+\n+### Import missing symbol\n+\n+TODO @gabro ?\n+\n+## Build tools\n+\n+### Support for Pants build tool\n+\n+Thanks to recent work by @olafurpg you can now use Metals with the Pants build\n+tool. The support will is the same as in case of other build tools, the Pants\n+workspace will be detected automatically and an automatic import will be\n+suggested.\n+\n+The support is currently included inside of Metals itself in contrast to other\n+build tools, which have their `bloopInstall` command implemented inside Bloop.\n+It is important to note that we are still working on improvements that will help\n+with large codebases that Pants is usually used for.\n+\n+### Improvements for Bloop integration\n+\n+In order to make the integration between Bloop and Metals a more smooth\n+experience several new improvements are now included in this release. There are\n+based on feedback from the user as well us our own experiences while working\n+with Metals and should make the overall experience of importing the build and\n+compiling much better.\n+\n+#### SemanticDB is resolved inside Bloop\n+\n+Metals require the SemanticDB compiler plugin for a number of features to\n+function properly. Because of that it was quite difficult to add it\n+automatically in all supported plugins even if those supported Bloop itself.\n+Perfect examples are Seed and Fury, which use Bloop to compile code, however\n+adding a plugin automatically would require changes to their core code.\n+\n+Currently, thanks to\n+[recent changes](https://github.com/scalacenter/bloop/pull/942) Metals can send\n+information about the SemanticDB version, which Bloop uses to automatically\n+download and configure the SemanticDB scalac plugin. Thanks to that no changes\n+in the build tool itself are needed. Particular changes in regards to build\n+tools are:\n+\n+- Gradle - predef script code used in automatic import is now simplified a lot\n+  and works with even more customized workspaces. The only thing it needs to do\n+  is add the Bloop plugin and run `bloopInstall`, which can easily be done\n+  automatically by the user.\n+- Maven - no manual configuration is now needed. To import automatically just\n+  the plugin is needed to be invoked with a setting for downloading sources.\n+- Sbt - the `metals-sbt` plugin is now removed and the Bloop plugin is now added\n+  via automatically generated `./project/metals.sbt` file and run when imported\n+  automatically. Thanks to this solution it should be possible to reuse Metals\n+  compilation in the upcoming feature for offloading compilation in Sbt.\n+- Mill - logic for adding semanticDB plugin is removed from Mill.\n+- Pants, Fury, Seed - no changes were needed for the semanticDB integration and\n+  should work out of the box.\n+\n+#### Switch to to using Bloop Launcher\n+\n+Instead of using internal Metals logic, we now use the Bloop Launcher, which\n+enables us to either connect to an existing Bsp server or start a new Bloop\n+instance with the specified version if nothing is running. This simplified the\n+connection to Bloop greatly and enabled to work on further improvements."
  },
  {
    "id" : "d3a3d958-2438-40ec-9e9f-6d1101b85f2d",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "82e07010-d314-4474-a43b-096f5ec1e094",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "> If the version running currently is older we offer to restart it automatically and start a new\r\none. Only if Bloop was installed manually it might not be work.\r\n-----\r\nIf the current running version is older we offer to automatically restart it with the newer version. However, this may not work if Bloop was installed manually.",
        "createdAt" : "2020-01-10T16:25:33Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "786006c2-7bf1-4c41-98af-608181866fee",
        "parentId" : "82e07010-d314-4474-a43b-096f5ec1e094",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:20:19Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members\n+\n+TODO @ckipp01 ?\n+\n+### Import missing symbol\n+\n+TODO @gabro ?\n+\n+## Build tools\n+\n+### Support for Pants build tool\n+\n+Thanks to recent work by @olafurpg you can now use Metals with the Pants build\n+tool. The support will is the same as in case of other build tools, the Pants\n+workspace will be detected automatically and an automatic import will be\n+suggested.\n+\n+The support is currently included inside of Metals itself in contrast to other\n+build tools, which have their `bloopInstall` command implemented inside Bloop.\n+It is important to note that we are still working on improvements that will help\n+with large codebases that Pants is usually used for.\n+\n+### Improvements for Bloop integration\n+\n+In order to make the integration between Bloop and Metals a more smooth\n+experience several new improvements are now included in this release. There are\n+based on feedback from the user as well us our own experiences while working\n+with Metals and should make the overall experience of importing the build and\n+compiling much better.\n+\n+#### SemanticDB is resolved inside Bloop\n+\n+Metals require the SemanticDB compiler plugin for a number of features to\n+function properly. Because of that it was quite difficult to add it\n+automatically in all supported plugins even if those supported Bloop itself.\n+Perfect examples are Seed and Fury, which use Bloop to compile code, however\n+adding a plugin automatically would require changes to their core code.\n+\n+Currently, thanks to\n+[recent changes](https://github.com/scalacenter/bloop/pull/942) Metals can send\n+information about the SemanticDB version, which Bloop uses to automatically\n+download and configure the SemanticDB scalac plugin. Thanks to that no changes\n+in the build tool itself are needed. Particular changes in regards to build\n+tools are:\n+\n+- Gradle - predef script code used in automatic import is now simplified a lot\n+  and works with even more customized workspaces. The only thing it needs to do\n+  is add the Bloop plugin and run `bloopInstall`, which can easily be done\n+  automatically by the user.\n+- Maven - no manual configuration is now needed. To import automatically just\n+  the plugin is needed to be invoked with a setting for downloading sources.\n+- Sbt - the `metals-sbt` plugin is now removed and the Bloop plugin is now added\n+  via automatically generated `./project/metals.sbt` file and run when imported\n+  automatically. Thanks to this solution it should be possible to reuse Metals\n+  compilation in the upcoming feature for offloading compilation in Sbt.\n+- Mill - logic for adding semanticDB plugin is removed from Mill.\n+- Pants, Fury, Seed - no changes were needed for the semanticDB integration and\n+  should work out of the box.\n+\n+#### Switch to to using Bloop Launcher\n+\n+Instead of using internal Metals logic, we now use the Bloop Launcher, which\n+enables us to either connect to an existing Bsp server or start a new Bloop\n+instance with the specified version if nothing is running. This simplified the\n+connection to Bloop greatly and enabled to work on further improvements.\n+\n+#### Restart Bloop automatically if newer version is needed\n+\n+Whenever Metals is started and connects to the Bloop build server it receives\n+information about the version it is running. We compare that version to the one\n+needed by Metals to make sure everything is properly working. If the version\n+running currently is older we offer to restart it automatically and start a new\n+one. Only if Bloop was installed manually it might not be work."
  },
  {
    "id" : "7a9d1693-8ca1-4b23-bc79-f05accba6335",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "246709df-7526-40a6-8491-f2d90e8247d7",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nThere were numerous issues reported that the connection to Bps or Bloop was being\r\n```",
        "createdAt" : "2020-01-10T16:25:54Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ee4cc9a7-d2f9-45c8-8506-172b9a38e0c3",
        "parentId" : "246709df-7526-40a6-8491-f2d90e8247d7",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:20:27Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members\n+\n+TODO @ckipp01 ?\n+\n+### Import missing symbol\n+\n+TODO @gabro ?\n+\n+## Build tools\n+\n+### Support for Pants build tool\n+\n+Thanks to recent work by @olafurpg you can now use Metals with the Pants build\n+tool. The support will is the same as in case of other build tools, the Pants\n+workspace will be detected automatically and an automatic import will be\n+suggested.\n+\n+The support is currently included inside of Metals itself in contrast to other\n+build tools, which have their `bloopInstall` command implemented inside Bloop.\n+It is important to note that we are still working on improvements that will help\n+with large codebases that Pants is usually used for.\n+\n+### Improvements for Bloop integration\n+\n+In order to make the integration between Bloop and Metals a more smooth\n+experience several new improvements are now included in this release. There are\n+based on feedback from the user as well us our own experiences while working\n+with Metals and should make the overall experience of importing the build and\n+compiling much better.\n+\n+#### SemanticDB is resolved inside Bloop\n+\n+Metals require the SemanticDB compiler plugin for a number of features to\n+function properly. Because of that it was quite difficult to add it\n+automatically in all supported plugins even if those supported Bloop itself.\n+Perfect examples are Seed and Fury, which use Bloop to compile code, however\n+adding a plugin automatically would require changes to their core code.\n+\n+Currently, thanks to\n+[recent changes](https://github.com/scalacenter/bloop/pull/942) Metals can send\n+information about the SemanticDB version, which Bloop uses to automatically\n+download and configure the SemanticDB scalac plugin. Thanks to that no changes\n+in the build tool itself are needed. Particular changes in regards to build\n+tools are:\n+\n+- Gradle - predef script code used in automatic import is now simplified a lot\n+  and works with even more customized workspaces. The only thing it needs to do\n+  is add the Bloop plugin and run `bloopInstall`, which can easily be done\n+  automatically by the user.\n+- Maven - no manual configuration is now needed. To import automatically just\n+  the plugin is needed to be invoked with a setting for downloading sources.\n+- Sbt - the `metals-sbt` plugin is now removed and the Bloop plugin is now added\n+  via automatically generated `./project/metals.sbt` file and run when imported\n+  automatically. Thanks to this solution it should be possible to reuse Metals\n+  compilation in the upcoming feature for offloading compilation in Sbt.\n+- Mill - logic for adding semanticDB plugin is removed from Mill.\n+- Pants, Fury, Seed - no changes were needed for the semanticDB integration and\n+  should work out of the box.\n+\n+#### Switch to to using Bloop Launcher\n+\n+Instead of using internal Metals logic, we now use the Bloop Launcher, which\n+enables us to either connect to an existing Bsp server or start a new Bloop\n+instance with the specified version if nothing is running. This simplified the\n+connection to Bloop greatly and enabled to work on further improvements.\n+\n+#### Restart Bloop automatically if newer version is needed\n+\n+Whenever Metals is started and connects to the Bloop build server it receives\n+information about the version it is running. We compare that version to the one\n+needed by Metals to make sure everything is properly working. If the version\n+running currently is older we offer to restart it automatically and start a new\n+one. Only if Bloop was installed manually it might not be work.\n+\n+#### Automatically reconnect to Bsp/Bloop if connection is broken\n+\n+There were numerous issues reported that the connection to Bps or Bloop is being"
  },
  {
    "id" : "8d828e83-0088-4be5-9d19-14f559318110",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "66883d71-6cbd-4fb8-805d-812fd9828bce",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nTo solve this, we now detect if the connection is closed and offer the user the\r\n```",
        "createdAt" : "2020-01-10T16:26:21Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2b38fe07-06d1-4f23-a436-3707696e4fbb",
        "parentId" : "66883d71-6cbd-4fb8-805d-812fd9828bce",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:20:34Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members\n+\n+TODO @ckipp01 ?\n+\n+### Import missing symbol\n+\n+TODO @gabro ?\n+\n+## Build tools\n+\n+### Support for Pants build tool\n+\n+Thanks to recent work by @olafurpg you can now use Metals with the Pants build\n+tool. The support will is the same as in case of other build tools, the Pants\n+workspace will be detected automatically and an automatic import will be\n+suggested.\n+\n+The support is currently included inside of Metals itself in contrast to other\n+build tools, which have their `bloopInstall` command implemented inside Bloop.\n+It is important to note that we are still working on improvements that will help\n+with large codebases that Pants is usually used for.\n+\n+### Improvements for Bloop integration\n+\n+In order to make the integration between Bloop and Metals a more smooth\n+experience several new improvements are now included in this release. There are\n+based on feedback from the user as well us our own experiences while working\n+with Metals and should make the overall experience of importing the build and\n+compiling much better.\n+\n+#### SemanticDB is resolved inside Bloop\n+\n+Metals require the SemanticDB compiler plugin for a number of features to\n+function properly. Because of that it was quite difficult to add it\n+automatically in all supported plugins even if those supported Bloop itself.\n+Perfect examples are Seed and Fury, which use Bloop to compile code, however\n+adding a plugin automatically would require changes to their core code.\n+\n+Currently, thanks to\n+[recent changes](https://github.com/scalacenter/bloop/pull/942) Metals can send\n+information about the SemanticDB version, which Bloop uses to automatically\n+download and configure the SemanticDB scalac plugin. Thanks to that no changes\n+in the build tool itself are needed. Particular changes in regards to build\n+tools are:\n+\n+- Gradle - predef script code used in automatic import is now simplified a lot\n+  and works with even more customized workspaces. The only thing it needs to do\n+  is add the Bloop plugin and run `bloopInstall`, which can easily be done\n+  automatically by the user.\n+- Maven - no manual configuration is now needed. To import automatically just\n+  the plugin is needed to be invoked with a setting for downloading sources.\n+- Sbt - the `metals-sbt` plugin is now removed and the Bloop plugin is now added\n+  via automatically generated `./project/metals.sbt` file and run when imported\n+  automatically. Thanks to this solution it should be possible to reuse Metals\n+  compilation in the upcoming feature for offloading compilation in Sbt.\n+- Mill - logic for adding semanticDB plugin is removed from Mill.\n+- Pants, Fury, Seed - no changes were needed for the semanticDB integration and\n+  should work out of the box.\n+\n+#### Switch to to using Bloop Launcher\n+\n+Instead of using internal Metals logic, we now use the Bloop Launcher, which\n+enables us to either connect to an existing Bsp server or start a new Bloop\n+instance with the specified version if nothing is running. This simplified the\n+connection to Bloop greatly and enabled to work on further improvements.\n+\n+#### Restart Bloop automatically if newer version is needed\n+\n+Whenever Metals is started and connects to the Bloop build server it receives\n+information about the version it is running. We compare that version to the one\n+needed by Metals to make sure everything is properly working. If the version\n+running currently is older we offer to restart it automatically and start a new\n+one. Only if Bloop was installed manually it might not be work.\n+\n+#### Automatically reconnect to Bsp/Bloop if connection is broken\n+\n+There were numerous issues reported that the connection to Bps or Bloop is being\n+lost, which causes Metals to behave erratically due to no compilation being run.\n+To solve this, we now detect if the connection is closed and offer user the"
  },
  {
    "id" : "e7ded6d4-1dbf-493d-8f2c-c984bdbe5429",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "1b7d4651-2236-4782-a4d9-a2eab04e1299",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\ndown and when the connection was just interrupted. It should also solve the\r\n```",
        "createdAt" : "2020-01-10T16:26:51Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c214d1a9-51d0-4b37-97cd-113efdd4ef5e",
        "parentId" : "1b7d4651-2236-4782-a4d9-a2eab04e1299",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:20:42Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members\n+\n+TODO @ckipp01 ?\n+\n+### Import missing symbol\n+\n+TODO @gabro ?\n+\n+## Build tools\n+\n+### Support for Pants build tool\n+\n+Thanks to recent work by @olafurpg you can now use Metals with the Pants build\n+tool. The support will is the same as in case of other build tools, the Pants\n+workspace will be detected automatically and an automatic import will be\n+suggested.\n+\n+The support is currently included inside of Metals itself in contrast to other\n+build tools, which have their `bloopInstall` command implemented inside Bloop.\n+It is important to note that we are still working on improvements that will help\n+with large codebases that Pants is usually used for.\n+\n+### Improvements for Bloop integration\n+\n+In order to make the integration between Bloop and Metals a more smooth\n+experience several new improvements are now included in this release. There are\n+based on feedback from the user as well us our own experiences while working\n+with Metals and should make the overall experience of importing the build and\n+compiling much better.\n+\n+#### SemanticDB is resolved inside Bloop\n+\n+Metals require the SemanticDB compiler plugin for a number of features to\n+function properly. Because of that it was quite difficult to add it\n+automatically in all supported plugins even if those supported Bloop itself.\n+Perfect examples are Seed and Fury, which use Bloop to compile code, however\n+adding a plugin automatically would require changes to their core code.\n+\n+Currently, thanks to\n+[recent changes](https://github.com/scalacenter/bloop/pull/942) Metals can send\n+information about the SemanticDB version, which Bloop uses to automatically\n+download and configure the SemanticDB scalac plugin. Thanks to that no changes\n+in the build tool itself are needed. Particular changes in regards to build\n+tools are:\n+\n+- Gradle - predef script code used in automatic import is now simplified a lot\n+  and works with even more customized workspaces. The only thing it needs to do\n+  is add the Bloop plugin and run `bloopInstall`, which can easily be done\n+  automatically by the user.\n+- Maven - no manual configuration is now needed. To import automatically just\n+  the plugin is needed to be invoked with a setting for downloading sources.\n+- Sbt - the `metals-sbt` plugin is now removed and the Bloop plugin is now added\n+  via automatically generated `./project/metals.sbt` file and run when imported\n+  automatically. Thanks to this solution it should be possible to reuse Metals\n+  compilation in the upcoming feature for offloading compilation in Sbt.\n+- Mill - logic for adding semanticDB plugin is removed from Mill.\n+- Pants, Fury, Seed - no changes were needed for the semanticDB integration and\n+  should work out of the box.\n+\n+#### Switch to to using Bloop Launcher\n+\n+Instead of using internal Metals logic, we now use the Bloop Launcher, which\n+enables us to either connect to an existing Bsp server or start a new Bloop\n+instance with the specified version if nothing is running. This simplified the\n+connection to Bloop greatly and enabled to work on further improvements.\n+\n+#### Restart Bloop automatically if newer version is needed\n+\n+Whenever Metals is started and connects to the Bloop build server it receives\n+information about the version it is running. We compare that version to the one\n+needed by Metals to make sure everything is properly working. If the version\n+running currently is older we offer to restart it automatically and start a new\n+one. Only if Bloop was installed manually it might not be work.\n+\n+#### Automatically reconnect to Bsp/Bloop if connection is broken\n+\n+There were numerous issues reported that the connection to Bps or Bloop is being\n+lost, which causes Metals to behave erratically due to no compilation being run.\n+To solve this, we now detect if the connection is closed and offer user the\n+option of automatic reconnection. This works both when the build server was\n+downed and when the connection was just interrupted. It should also solve the"
  },
  {
    "id" : "420d1442-4c5d-4fe3-9410-a61f74aa2e10",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "a83a0c0a-9480-42d3-a882-d6de04547f55",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nIt is now possible to run main methods and tests via a clickable code lens.\r\n```",
        "createdAt" : "2020-01-10T16:27:33Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8b944ebf-21f6-4986-bb07-3888e8d850ad",
        "parentId" : "a83a0c0a-9480-42d3-a882-d6de04547f55",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:22:02Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members\n+\n+TODO @ckipp01 ?\n+\n+### Import missing symbol\n+\n+TODO @gabro ?\n+\n+## Build tools\n+\n+### Support for Pants build tool\n+\n+Thanks to recent work by @olafurpg you can now use Metals with the Pants build\n+tool. The support will is the same as in case of other build tools, the Pants\n+workspace will be detected automatically and an automatic import will be\n+suggested.\n+\n+The support is currently included inside of Metals itself in contrast to other\n+build tools, which have their `bloopInstall` command implemented inside Bloop.\n+It is important to note that we are still working on improvements that will help\n+with large codebases that Pants is usually used for.\n+\n+### Improvements for Bloop integration\n+\n+In order to make the integration between Bloop and Metals a more smooth\n+experience several new improvements are now included in this release. There are\n+based on feedback from the user as well us our own experiences while working\n+with Metals and should make the overall experience of importing the build and\n+compiling much better.\n+\n+#### SemanticDB is resolved inside Bloop\n+\n+Metals require the SemanticDB compiler plugin for a number of features to\n+function properly. Because of that it was quite difficult to add it\n+automatically in all supported plugins even if those supported Bloop itself.\n+Perfect examples are Seed and Fury, which use Bloop to compile code, however\n+adding a plugin automatically would require changes to their core code.\n+\n+Currently, thanks to\n+[recent changes](https://github.com/scalacenter/bloop/pull/942) Metals can send\n+information about the SemanticDB version, which Bloop uses to automatically\n+download and configure the SemanticDB scalac plugin. Thanks to that no changes\n+in the build tool itself are needed. Particular changes in regards to build\n+tools are:\n+\n+- Gradle - predef script code used in automatic import is now simplified a lot\n+  and works with even more customized workspaces. The only thing it needs to do\n+  is add the Bloop plugin and run `bloopInstall`, which can easily be done\n+  automatically by the user.\n+- Maven - no manual configuration is now needed. To import automatically just\n+  the plugin is needed to be invoked with a setting for downloading sources.\n+- Sbt - the `metals-sbt` plugin is now removed and the Bloop plugin is now added\n+  via automatically generated `./project/metals.sbt` file and run when imported\n+  automatically. Thanks to this solution it should be possible to reuse Metals\n+  compilation in the upcoming feature for offloading compilation in Sbt.\n+- Mill - logic for adding semanticDB plugin is removed from Mill.\n+- Pants, Fury, Seed - no changes were needed for the semanticDB integration and\n+  should work out of the box.\n+\n+#### Switch to to using Bloop Launcher\n+\n+Instead of using internal Metals logic, we now use the Bloop Launcher, which\n+enables us to either connect to an existing Bsp server or start a new Bloop\n+instance with the specified version if nothing is running. This simplified the\n+connection to Bloop greatly and enabled to work on further improvements.\n+\n+#### Restart Bloop automatically if newer version is needed\n+\n+Whenever Metals is started and connects to the Bloop build server it receives\n+information about the version it is running. We compare that version to the one\n+needed by Metals to make sure everything is properly working. If the version\n+running currently is older we offer to restart it automatically and start a new\n+one. Only if Bloop was installed manually it might not be work.\n+\n+#### Automatically reconnect to Bsp/Bloop if connection is broken\n+\n+There were numerous issues reported that the connection to Bps or Bloop is being\n+lost, which causes Metals to behave erratically due to no compilation being run.\n+To solve this, we now detect if the connection is closed and offer user the\n+option of automatic reconnection. This works both when the build server was\n+downed and when the connection was just interrupted. It should also solve the\n+issues on MacOs with dropped connection.\n+\n+## Debugging\n+\n+It is possible now to run main methods and tests via a clickable code lens,"
  },
  {
    "id" : "0b5e4e68-715f-4935-9fb2-a9ad3fb8b12f",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "5f0fb65f-f18d-47f3-8f8c-8e6adcfd4476",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nHowever, it currently only works in Visual Studio Code. We also allow setting\r\n```",
        "createdAt" : "2020-01-10T16:27:52Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "59582ca2-e3c5-48fd-8e5d-096fc0113c28",
        "parentId" : "5f0fb65f-f18d-47f3-8f8c-8e6adcfd4476",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:22:08Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members\n+\n+TODO @ckipp01 ?\n+\n+### Import missing symbol\n+\n+TODO @gabro ?\n+\n+## Build tools\n+\n+### Support for Pants build tool\n+\n+Thanks to recent work by @olafurpg you can now use Metals with the Pants build\n+tool. The support will is the same as in case of other build tools, the Pants\n+workspace will be detected automatically and an automatic import will be\n+suggested.\n+\n+The support is currently included inside of Metals itself in contrast to other\n+build tools, which have their `bloopInstall` command implemented inside Bloop.\n+It is important to note that we are still working on improvements that will help\n+with large codebases that Pants is usually used for.\n+\n+### Improvements for Bloop integration\n+\n+In order to make the integration between Bloop and Metals a more smooth\n+experience several new improvements are now included in this release. There are\n+based on feedback from the user as well us our own experiences while working\n+with Metals and should make the overall experience of importing the build and\n+compiling much better.\n+\n+#### SemanticDB is resolved inside Bloop\n+\n+Metals require the SemanticDB compiler plugin for a number of features to\n+function properly. Because of that it was quite difficult to add it\n+automatically in all supported plugins even if those supported Bloop itself.\n+Perfect examples are Seed and Fury, which use Bloop to compile code, however\n+adding a plugin automatically would require changes to their core code.\n+\n+Currently, thanks to\n+[recent changes](https://github.com/scalacenter/bloop/pull/942) Metals can send\n+information about the SemanticDB version, which Bloop uses to automatically\n+download and configure the SemanticDB scalac plugin. Thanks to that no changes\n+in the build tool itself are needed. Particular changes in regards to build\n+tools are:\n+\n+- Gradle - predef script code used in automatic import is now simplified a lot\n+  and works with even more customized workspaces. The only thing it needs to do\n+  is add the Bloop plugin and run `bloopInstall`, which can easily be done\n+  automatically by the user.\n+- Maven - no manual configuration is now needed. To import automatically just\n+  the plugin is needed to be invoked with a setting for downloading sources.\n+- Sbt - the `metals-sbt` plugin is now removed and the Bloop plugin is now added\n+  via automatically generated `./project/metals.sbt` file and run when imported\n+  automatically. Thanks to this solution it should be possible to reuse Metals\n+  compilation in the upcoming feature for offloading compilation in Sbt.\n+- Mill - logic for adding semanticDB plugin is removed from Mill.\n+- Pants, Fury, Seed - no changes were needed for the semanticDB integration and\n+  should work out of the box.\n+\n+#### Switch to to using Bloop Launcher\n+\n+Instead of using internal Metals logic, we now use the Bloop Launcher, which\n+enables us to either connect to an existing Bsp server or start a new Bloop\n+instance with the specified version if nothing is running. This simplified the\n+connection to Bloop greatly and enabled to work on further improvements.\n+\n+#### Restart Bloop automatically if newer version is needed\n+\n+Whenever Metals is started and connects to the Bloop build server it receives\n+information about the version it is running. We compare that version to the one\n+needed by Metals to make sure everything is properly working. If the version\n+running currently is older we offer to restart it automatically and start a new\n+one. Only if Bloop was installed manually it might not be work.\n+\n+#### Automatically reconnect to Bsp/Bloop if connection is broken\n+\n+There were numerous issues reported that the connection to Bps or Bloop is being\n+lost, which causes Metals to behave erratically due to no compilation being run.\n+To solve this, we now detect if the connection is closed and offer user the\n+option of automatic reconnection. This works both when the build server was\n+downed and when the connection was just interrupted. It should also solve the\n+issues on MacOs with dropped connection.\n+\n+## Debugging\n+\n+It is possible now to run main methods and tests via a clickable code lens,\n+however it currently only works in Visual Studio Code. We also allow setting"
  },
  {
    "id" : "07a78a97-a0cc-4bf8-80c8-493781354a62",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "859b9f31-5506-4e5f-aad7-1e24891d6f35",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "In order to better support the Vim experience with Metals, [`coc-metals`](https://github.com/scalameta/coc-metals) extension was created which is an extension for [`coc.nvim`](https://github.com/neoclide/coc.nvim), the most popular LSP client for Vim and Neovim. With this new extension comes a whole bunch of new features for Metals + Vim users.\r\n\r\n  - automated installation\r\n  - easier configuration options\r\n  - easier workspace commands\r\n  - embedded doctor\r\n  - input box support\r\n  - implementation of the decoration protocol (Neovim only)\r\n\r\n![coc-metals](https://i.imgur.com/zofu4VI.png)\r\n\r\n",
        "createdAt" : "2020-01-10T16:29:32Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0674e2db-8c63-4ad7-9c3d-59405e329587",
        "parentId" : "859b9f31-5506-4e5f-aad7-1e24891d6f35",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Thanks, added everything here too.",
        "createdAt" : "2020-01-13T12:22:27Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members\n+\n+TODO @ckipp01 ?\n+\n+### Import missing symbol\n+\n+TODO @gabro ?\n+\n+## Build tools\n+\n+### Support for Pants build tool\n+\n+Thanks to recent work by @olafurpg you can now use Metals with the Pants build\n+tool. The support will is the same as in case of other build tools, the Pants\n+workspace will be detected automatically and an automatic import will be\n+suggested.\n+\n+The support is currently included inside of Metals itself in contrast to other\n+build tools, which have their `bloopInstall` command implemented inside Bloop.\n+It is important to note that we are still working on improvements that will help\n+with large codebases that Pants is usually used for.\n+\n+### Improvements for Bloop integration\n+\n+In order to make the integration between Bloop and Metals a more smooth\n+experience several new improvements are now included in this release. There are\n+based on feedback from the user as well us our own experiences while working\n+with Metals and should make the overall experience of importing the build and\n+compiling much better.\n+\n+#### SemanticDB is resolved inside Bloop\n+\n+Metals require the SemanticDB compiler plugin for a number of features to\n+function properly. Because of that it was quite difficult to add it\n+automatically in all supported plugins even if those supported Bloop itself.\n+Perfect examples are Seed and Fury, which use Bloop to compile code, however\n+adding a plugin automatically would require changes to their core code.\n+\n+Currently, thanks to\n+[recent changes](https://github.com/scalacenter/bloop/pull/942) Metals can send\n+information about the SemanticDB version, which Bloop uses to automatically\n+download and configure the SemanticDB scalac plugin. Thanks to that no changes\n+in the build tool itself are needed. Particular changes in regards to build\n+tools are:\n+\n+- Gradle - predef script code used in automatic import is now simplified a lot\n+  and works with even more customized workspaces. The only thing it needs to do\n+  is add the Bloop plugin and run `bloopInstall`, which can easily be done\n+  automatically by the user.\n+- Maven - no manual configuration is now needed. To import automatically just\n+  the plugin is needed to be invoked with a setting for downloading sources.\n+- Sbt - the `metals-sbt` plugin is now removed and the Bloop plugin is now added\n+  via automatically generated `./project/metals.sbt` file and run when imported\n+  automatically. Thanks to this solution it should be possible to reuse Metals\n+  compilation in the upcoming feature for offloading compilation in Sbt.\n+- Mill - logic for adding semanticDB plugin is removed from Mill.\n+- Pants, Fury, Seed - no changes were needed for the semanticDB integration and\n+  should work out of the box.\n+\n+#### Switch to to using Bloop Launcher\n+\n+Instead of using internal Metals logic, we now use the Bloop Launcher, which\n+enables us to either connect to an existing Bsp server or start a new Bloop\n+instance with the specified version if nothing is running. This simplified the\n+connection to Bloop greatly and enabled to work on further improvements.\n+\n+#### Restart Bloop automatically if newer version is needed\n+\n+Whenever Metals is started and connects to the Bloop build server it receives\n+information about the version it is running. We compare that version to the one\n+needed by Metals to make sure everything is properly working. If the version\n+running currently is older we offer to restart it automatically and start a new\n+one. Only if Bloop was installed manually it might not be work.\n+\n+#### Automatically reconnect to Bsp/Bloop if connection is broken\n+\n+There were numerous issues reported that the connection to Bps or Bloop is being\n+lost, which causes Metals to behave erratically due to no compilation being run.\n+To solve this, we now detect if the connection is closed and offer user the\n+option of automatic reconnection. This works both when the build server was\n+downed and when the connection was just interrupted. It should also solve the\n+issues on MacOs with dropped connection.\n+\n+## Debugging\n+\n+It is possible now to run main methods and tests via a clickable code lens,\n+however it currently only works in Visual Studio Code. We also allow setting\n+breakpoints in both Java and Scala source files and to check all variables at\n+each.\n+\n+Known breakpoints limitations we are working on:\n+\n+- breakpoint may get ignored when set in a type containing nested type\n+  declarations preceding the breakpoint (see\n+  https://github.com/scalameta/metals/issues/1195)\n+- breakpoint may get wrongly resolved for an ambiguous type (e.g. a.b.Foo)\n+  defined inside two modules on the project (see\n+  https://github.com/scalameta/metals/issues/1196)\n+\n+### How to add support for debugging in my editor?\n+\n+You will need to handle two commands in your language client extension:\n+[`metals-run-session-start`](https://github.com/scalameta/metals/blob/master/metals/src/main/scala/scala/meta/internal/metals/ClientCommands.scala#L56)\n+and\n+[`metals-debug-session-start`](https://github.com/scalameta/metals/blob/master/metals/src/main/scala/scala/meta/internal/metals/ClientCommands.scala#L78).\n+Those commands should get executed automatically by the lsp client once the user\n+activates a code lens. The difference between them is that the former ignores\n+all breakpoints being set while the latter respects them. The procedure of\n+starting the run/debug session is as follows:\n+\n+1. Request the debug adapter uri from metals server using the\n+   [`debug-adapter-start`](https://github.com/scalameta/metals/blob/master/metals/src/main/scala/scala/meta/internal/metals/ServerCommands.scala#L95)\n+   command.\n+2. Connect the debug adapter extension specific to you editor using the\n+   aforementioned uri and let it drive the run/debug session. For reference,\n+   take a look at the\n+   [vscode implementation](https://github.com/scalameta/metals-vscode/blob/master/src/scalaDebugger.ts)\n+   and how it is\n+   [wired up together](https://github.com/scalameta/metals-vscode/blob/master/src/extension.ts#L356)\n+\n+## Worksheet support\n+\n+Thanks to great work by @olafurpg and some additional refinements by\n+@alekseiAlefirov, worksheets are now available in all supported editors.\n+\n+Worksheets are way to evaluate code real time to test and prototype any new code\n+in an simple way. To create a worksheet all that is needed is to create a file\n+with the extension `worksheet.sc` and Metals will take care of the rest.\n+\n+There are two ways worksheets are implemented for different editors. One is with\n+an additional extension to LSP called `Decoration extension` and it's used by\n+Visual Studio Code and coc-metals.\n+\n+Visual Studio Code:\n+\n+![worksheet](https://user-images.githubusercontent.com/1408093/68093266-b0b3e680-fe8b-11e9-92dd-0165f169966f.gif)\n+\n+The other way worksheets are implemented for all other editors that don't\n+support the `Decoration extension` is using workspace/applyEdits and comments\n+with hover for larger results.\n+\n+Sublime:\n+\n+![worksheet2](https://user-images.githubusercontent.com/10850363/70265661-29fc6d00-179b-11ea-842e-935045e27f96.gif)\n+\n+## Better support for Vim via coc-metals\n+\n+TODO @ckipp01 ?"
  },
  {
    "id" : "ab56dc6b-699e-40fb-96f4-433331076f1d",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "c22e21a0-14c7-4463-b7d4-bbcb1dd85cf3",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nThanks to @isomarcte we now also run all tests on JDK 11, which enables\r\n```",
        "createdAt" : "2020-01-10T16:32:25Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c26477e9-98d8-4431-bfbb-da36ba224af1",
        "parentId" : "c22e21a0-14c7-4463-b7d4-bbcb1dd85cf3",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:22:39Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members\n+\n+TODO @ckipp01 ?\n+\n+### Import missing symbol\n+\n+TODO @gabro ?\n+\n+## Build tools\n+\n+### Support for Pants build tool\n+\n+Thanks to recent work by @olafurpg you can now use Metals with the Pants build\n+tool. The support will is the same as in case of other build tools, the Pants\n+workspace will be detected automatically and an automatic import will be\n+suggested.\n+\n+The support is currently included inside of Metals itself in contrast to other\n+build tools, which have their `bloopInstall` command implemented inside Bloop.\n+It is important to note that we are still working on improvements that will help\n+with large codebases that Pants is usually used for.\n+\n+### Improvements for Bloop integration\n+\n+In order to make the integration between Bloop and Metals a more smooth\n+experience several new improvements are now included in this release. There are\n+based on feedback from the user as well us our own experiences while working\n+with Metals and should make the overall experience of importing the build and\n+compiling much better.\n+\n+#### SemanticDB is resolved inside Bloop\n+\n+Metals require the SemanticDB compiler plugin for a number of features to\n+function properly. Because of that it was quite difficult to add it\n+automatically in all supported plugins even if those supported Bloop itself.\n+Perfect examples are Seed and Fury, which use Bloop to compile code, however\n+adding a plugin automatically would require changes to their core code.\n+\n+Currently, thanks to\n+[recent changes](https://github.com/scalacenter/bloop/pull/942) Metals can send\n+information about the SemanticDB version, which Bloop uses to automatically\n+download and configure the SemanticDB scalac plugin. Thanks to that no changes\n+in the build tool itself are needed. Particular changes in regards to build\n+tools are:\n+\n+- Gradle - predef script code used in automatic import is now simplified a lot\n+  and works with even more customized workspaces. The only thing it needs to do\n+  is add the Bloop plugin and run `bloopInstall`, which can easily be done\n+  automatically by the user.\n+- Maven - no manual configuration is now needed. To import automatically just\n+  the plugin is needed to be invoked with a setting for downloading sources.\n+- Sbt - the `metals-sbt` plugin is now removed and the Bloop plugin is now added\n+  via automatically generated `./project/metals.sbt` file and run when imported\n+  automatically. Thanks to this solution it should be possible to reuse Metals\n+  compilation in the upcoming feature for offloading compilation in Sbt.\n+- Mill - logic for adding semanticDB plugin is removed from Mill.\n+- Pants, Fury, Seed - no changes were needed for the semanticDB integration and\n+  should work out of the box.\n+\n+#### Switch to to using Bloop Launcher\n+\n+Instead of using internal Metals logic, we now use the Bloop Launcher, which\n+enables us to either connect to an existing Bsp server or start a new Bloop\n+instance with the specified version if nothing is running. This simplified the\n+connection to Bloop greatly and enabled to work on further improvements.\n+\n+#### Restart Bloop automatically if newer version is needed\n+\n+Whenever Metals is started and connects to the Bloop build server it receives\n+information about the version it is running. We compare that version to the one\n+needed by Metals to make sure everything is properly working. If the version\n+running currently is older we offer to restart it automatically and start a new\n+one. Only if Bloop was installed manually it might not be work.\n+\n+#### Automatically reconnect to Bsp/Bloop if connection is broken\n+\n+There were numerous issues reported that the connection to Bps or Bloop is being\n+lost, which causes Metals to behave erratically due to no compilation being run.\n+To solve this, we now detect if the connection is closed and offer user the\n+option of automatic reconnection. This works both when the build server was\n+downed and when the connection was just interrupted. It should also solve the\n+issues on MacOs with dropped connection.\n+\n+## Debugging\n+\n+It is possible now to run main methods and tests via a clickable code lens,\n+however it currently only works in Visual Studio Code. We also allow setting\n+breakpoints in both Java and Scala source files and to check all variables at\n+each.\n+\n+Known breakpoints limitations we are working on:\n+\n+- breakpoint may get ignored when set in a type containing nested type\n+  declarations preceding the breakpoint (see\n+  https://github.com/scalameta/metals/issues/1195)\n+- breakpoint may get wrongly resolved for an ambiguous type (e.g. a.b.Foo)\n+  defined inside two modules on the project (see\n+  https://github.com/scalameta/metals/issues/1196)\n+\n+### How to add support for debugging in my editor?\n+\n+You will need to handle two commands in your language client extension:\n+[`metals-run-session-start`](https://github.com/scalameta/metals/blob/master/metals/src/main/scala/scala/meta/internal/metals/ClientCommands.scala#L56)\n+and\n+[`metals-debug-session-start`](https://github.com/scalameta/metals/blob/master/metals/src/main/scala/scala/meta/internal/metals/ClientCommands.scala#L78).\n+Those commands should get executed automatically by the lsp client once the user\n+activates a code lens. The difference between them is that the former ignores\n+all breakpoints being set while the latter respects them. The procedure of\n+starting the run/debug session is as follows:\n+\n+1. Request the debug adapter uri from metals server using the\n+   [`debug-adapter-start`](https://github.com/scalameta/metals/blob/master/metals/src/main/scala/scala/meta/internal/metals/ServerCommands.scala#L95)\n+   command.\n+2. Connect the debug adapter extension specific to you editor using the\n+   aforementioned uri and let it drive the run/debug session. For reference,\n+   take a look at the\n+   [vscode implementation](https://github.com/scalameta/metals-vscode/blob/master/src/scalaDebugger.ts)\n+   and how it is\n+   [wired up together](https://github.com/scalameta/metals-vscode/blob/master/src/extension.ts#L356)\n+\n+## Worksheet support\n+\n+Thanks to great work by @olafurpg and some additional refinements by\n+@alekseiAlefirov, worksheets are now available in all supported editors.\n+\n+Worksheets are way to evaluate code real time to test and prototype any new code\n+in an simple way. To create a worksheet all that is needed is to create a file\n+with the extension `worksheet.sc` and Metals will take care of the rest.\n+\n+There are two ways worksheets are implemented for different editors. One is with\n+an additional extension to LSP called `Decoration extension` and it's used by\n+Visual Studio Code and coc-metals.\n+\n+Visual Studio Code:\n+\n+![worksheet](https://user-images.githubusercontent.com/1408093/68093266-b0b3e680-fe8b-11e9-92dd-0165f169966f.gif)\n+\n+The other way worksheets are implemented for all other editors that don't\n+support the `Decoration extension` is using workspace/applyEdits and comments\n+with hover for larger results.\n+\n+Sublime:\n+\n+![worksheet2](https://user-images.githubusercontent.com/10850363/70265661-29fc6d00-179b-11ea-842e-935045e27f96.gif)\n+\n+## Better support for Vim via coc-metals\n+\n+TODO @ckipp01 ?\n+\n+## Support for java 11\n+\n+Thanks to @isomarcte we now run all tests additionally on JDK 11, which enables"
  },
  {
    "id" : "4ee18d29-5b96-43c1-b8a2-8b7d881ca6f0",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "f00f6278-417b-40a3-833d-7b93f6ab6bbb",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This can go higher IMO",
        "createdAt" : "2020-01-10T20:06:47Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "55443f85-0c1f-4241-a0f1-ba531fbe30f6",
        "parentId" : "f00f6278-417b-40a3-833d-7b93f6ab6bbb",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Moved it as one of the first",
        "createdAt" : "2020-01-13T12:23:01Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods"
  },
  {
    "id" : "534091dc-3554-42b7-9029-f249382fa787",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "1decf34e-e65d-4de3-a2e7-4a13591c0147",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "```suggestion\r\nof SemanticDB, this will work after the workspace is fully compiled.\r\n```",
        "createdAt" : "2020-01-10T20:07:22Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "226a6e57-910b-4d7e-9703-57ee69ee4842",
        "parentId" : "1decf34e-e65d-4de3-a2e7-4a13591c0147",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T12:23:06Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled."
  },
  {
    "id" : "5566cca8-55f1-4a7d-8d50-8575a0937955",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "404c186e-fa20-4e66-91cc-224092f8eeae",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "We can use this for the Pants integration for now:\r\n\r\n```suggestion\r\n### Experimental build tool support for Pants\r\n\r\nThanks to the recent work by [@olafurpg](https://github.com/olafurpg), there's now experimental support for the Pants build tool. The Pants integration is still evolving so it's not yet documented. The end goal is to support Pants in the same way as other build tools like sbt, Maven and Gradle. \r\n```\r\n\r\nThere's still a lot of remaining work to support more advanced Pants features like bundles.",
        "createdAt" : "2020-01-10T20:08:48Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bc78c930-1ff9-466c-8c00-908dda7dad1c",
        "parentId" : "404c186e-fa20-4e66-91cc-224092f8eeae",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Ok cool, added the `Experimanetal` tag",
        "createdAt" : "2020-01-13T12:23:29Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members\n+\n+TODO @ckipp01 ?\n+\n+### Import missing symbol\n+\n+TODO @gabro ?\n+\n+## Build tools\n+\n+### Support for Pants build tool"
  },
  {
    "id" : "237dcc53-e3d1-49f4-92fc-fb6716fedf48",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "e193ce27-202a-4f5a-bd81-790ccff2052a",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This can go higher up IMO",
        "createdAt" : "2020-01-10T20:19:02Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members\n+\n+TODO @ckipp01 ?\n+\n+### Import missing symbol\n+\n+TODO @gabro ?\n+\n+## Build tools\n+\n+### Support for Pants build tool\n+\n+Thanks to recent work by @olafurpg you can now use Metals with the Pants build\n+tool. The support will is the same as in case of other build tools, the Pants\n+workspace will be detected automatically and an automatic import will be\n+suggested.\n+\n+The support is currently included inside of Metals itself in contrast to other\n+build tools, which have their `bloopInstall` command implemented inside Bloop.\n+It is important to note that we are still working on improvements that will help\n+with large codebases that Pants is usually used for.\n+\n+### Improvements for Bloop integration\n+\n+In order to make the integration between Bloop and Metals a more smooth\n+experience several new improvements are now included in this release. There are\n+based on feedback from the user as well us our own experiences while working\n+with Metals and should make the overall experience of importing the build and\n+compiling much better.\n+\n+#### SemanticDB is resolved inside Bloop\n+\n+Metals require the SemanticDB compiler plugin for a number of features to\n+function properly. Because of that it was quite difficult to add it\n+automatically in all supported plugins even if those supported Bloop itself.\n+Perfect examples are Seed and Fury, which use Bloop to compile code, however\n+adding a plugin automatically would require changes to their core code.\n+\n+Currently, thanks to\n+[recent changes](https://github.com/scalacenter/bloop/pull/942) Metals can send\n+information about the SemanticDB version, which Bloop uses to automatically\n+download and configure the SemanticDB scalac plugin. Thanks to that no changes\n+in the build tool itself are needed. Particular changes in regards to build\n+tools are:\n+\n+- Gradle - predef script code used in automatic import is now simplified a lot\n+  and works with even more customized workspaces. The only thing it needs to do\n+  is add the Bloop plugin and run `bloopInstall`, which can easily be done\n+  automatically by the user.\n+- Maven - no manual configuration is now needed. To import automatically just\n+  the plugin is needed to be invoked with a setting for downloading sources.\n+- Sbt - the `metals-sbt` plugin is now removed and the Bloop plugin is now added\n+  via automatically generated `./project/metals.sbt` file and run when imported\n+  automatically. Thanks to this solution it should be possible to reuse Metals\n+  compilation in the upcoming feature for offloading compilation in Sbt.\n+- Mill - logic for adding semanticDB plugin is removed from Mill.\n+- Pants, Fury, Seed - no changes were needed for the semanticDB integration and\n+  should work out of the box.\n+\n+#### Switch to to using Bloop Launcher\n+\n+Instead of using internal Metals logic, we now use the Bloop Launcher, which\n+enables us to either connect to an existing Bsp server or start a new Bloop\n+instance with the specified version if nothing is running. This simplified the\n+connection to Bloop greatly and enabled to work on further improvements.\n+\n+#### Restart Bloop automatically if newer version is needed\n+\n+Whenever Metals is started and connects to the Bloop build server it receives\n+information about the version it is running. We compare that version to the one\n+needed by Metals to make sure everything is properly working. If the version\n+running currently is older we offer to restart it automatically and start a new\n+one. Only if Bloop was installed manually it might not be work.\n+\n+#### Automatically reconnect to Bsp/Bloop if connection is broken\n+\n+There were numerous issues reported that the connection to Bps or Bloop is being\n+lost, which causes Metals to behave erratically due to no compilation being run.\n+To solve this, we now detect if the connection is closed and offer user the\n+option of automatic reconnection. This works both when the build server was\n+downed and when the connection was just interrupted. It should also solve the\n+issues on MacOs with dropped connection.\n+\n+## Debugging"
  },
  {
    "id" : "b651a634-7deb-49c3-8d46-dc6e79ca7f16",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "4df8f6d7-400e-441e-9748-60036a90d227",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "This section feels a too focused on the implementations details, since it begins by talking about the new index.\r\n\r\nI would rephrase it to something more \"user-oriented\" like:\r\n\r\n> Metals now implements the `textDocument/implementations` LSP endpoint, which enables all supported editors to display a list of all implementations of abstract classes or members.\r\n> \r\n> ![implementations](https://i.imgur.com/rke6iny.gif)\r\n> \r\n> Finding implementations also works for symbols outside of the workspace, at the price of a small performance penalty for the first invocation.\r\n> \r\n> The work done for this feature was also instrumental for implementing the Rename refactor (see below)",
        "createdAt" : "2020-01-11T12:23:27Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e22cbcfd-04ee-4b1f-a2d7-853e0e6cae8d",
        "parentId" : "4df8f6d7-400e-441e-9748-60036a90d227",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Hmm... maybe we can follow up with a blog entry detailing implementation",
        "createdAt" : "2020-01-13T11:47:54Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "78c61388-d2c2-40c5-9004-99713131a5b0",
        "parentId" : "4df8f6d7-400e-441e-9748-60036a90d227",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Switched to you version, sounds indeed better,  we should detail the implementation in a separate blog post.",
        "createdAt" : "2020-01-13T12:24:07Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled."
  },
  {
    "id" : "214100b5-a958-47e0-b33d-cd2e300a3efa",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "f7c3b9ff-06a6-4a54-9d76-1447912dfd11",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I would add a small intro:\r\n\r\n> Refactoring support is one of the most requested features in Metals. In this release, we started by implementing the most commonly used refactors: rename and import missing symbol.\r\n\r\n> We plan to add more common refactors along the way. Make sure to check out the [ones that have already been proposed](https://github.com/scalameta/metals/issues/707) and consider suggesting other refactors that are essential in your development workflow.",
        "createdAt" : "2020-01-11T13:57:36Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b1b3949f-7c73-4771-a41e-05c92037f0aa",
        "parentId" : "f7c3b9ff-06a6-4a54-9d76-1447912dfd11",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Good idea, added.",
        "createdAt" : "2020-01-13T12:24:19Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : 87,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor"
  },
  {
    "id" : "e919c80c-badd-4e51-aafa-a1ba209086cb",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "c1d3d36e-6a97-4aef-9314-ed94a5641743",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Another refactor that is commonly requested is the ability to fix a compilation error by auto-importing a symbol present on the classpath.\r\n\r\nThis was previously possible in Metals only during completions, but we were lacking what LSP calls a _code action_.\r\n\r\nCode actions are context-sensitive actions that are proposed to the user in order to fix an error or to perform a relevant refactor.\r\n\r\nThanks to the work of @gabro we now have a basic architecture in place for supporting code actions and we were able to implement this feature.\r\n\r\n![2019-12-11 18 12 34](https://user-images.githubusercontent.com/691940/72205552-b5e17300-3484-11ea-8a32-795c517c9d58.gif)\r\n\r\n",
        "createdAt" : "2020-01-11T14:18:38Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d75adfe8-6c3a-44a4-a1d2-ad69cf1a055c",
        "parentId" : "c1d3d36e-6a97-4aef-9314-ed94a5641743",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Thanks! Added.",
        "createdAt" : "2020-01-13T12:24:33Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members\n+\n+TODO @ckipp01 ?\n+\n+### Import missing symbol\n+\n+TODO @gabro ?"
  },
  {
    "id" : "6127b51f-7cf7-41dc-bdc8-d21777e74813",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "90bdd8e7-b982-4533-9cf9-c6474dca3b29",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Nit: I don't think this should go under \"Refactor\", since it's a completion item.",
        "createdAt" : "2020-01-11T14:19:39Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members"
  },
  {
    "id" : "a7295f27-90bb-4e18-8b4a-57b5389a10ff",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "f03714db-e14c-44fe-85c1-53b522837c34",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I think this section belong to the docs more than to the release notes.",
        "createdAt" : "2020-01-11T14:21:04Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0089300b-1f0a-48da-a649-ca1c14c7d3a1",
        "parentId" : "f03714db-e14c-44fe-85c1-53b522837c34",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I agree and moved it to a separate document.",
        "createdAt" : "2020-01-13T12:25:02Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,894 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+After a long while of silence and with loads of new features we are excited to\n+announce the release of Metals v0.8.0, codename `Cobalt`. This release includes\n+a huge number of new features and improvements, which we were perfecting over\n+the last couple of months.\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+In this release we merged 207 PRs and closed 82 issues, full details:\n+https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- support for Pants build tool\n+- run and debug for tests and main methods\n+- improvements for Bloop integration\n+- worksheet support\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Additional index was created inside of Metals that keeps up-to-date information\n+about class hierarchies inside the workspace based on the SemanticDB\n+information. This allows us to find both all classes extending the particular\n+parent class and symbols being implemented inside of those classes. Due to usage\n+of semanticDB, this will work after the workspace is fully compiled.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementation also works for symbols outside of the workspace, although\n+in that case it might take a while to load the classpath symbol information at\n+first. Consecutive calls will reuse cached classpath symbols information, so\n+this might take longer only once per build target.\n+\n+## Refactor\n+\n+### Rename symbol\n+\n+Thanks to implementing the `Go to implementations` feature, we were able to work\n+on a proper rename for any workspace symbol that will rename all occurences of a\n+symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol,\n+- java symbols are not renamed,\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics,\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards,\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`,\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed,\n+- companion objects will also be renamed with their companion classes.\n+\n+### Completion to add all abstract members\n+\n+TODO @ckipp01 ?\n+\n+### Import missing symbol\n+\n+TODO @gabro ?\n+\n+## Build tools\n+\n+### Support for Pants build tool\n+\n+Thanks to recent work by @olafurpg you can now use Metals with the Pants build\n+tool. The support will is the same as in case of other build tools, the Pants\n+workspace will be detected automatically and an automatic import will be\n+suggested.\n+\n+The support is currently included inside of Metals itself in contrast to other\n+build tools, which have their `bloopInstall` command implemented inside Bloop.\n+It is important to note that we are still working on improvements that will help\n+with large codebases that Pants is usually used for.\n+\n+### Improvements for Bloop integration\n+\n+In order to make the integration between Bloop and Metals a more smooth\n+experience several new improvements are now included in this release. There are\n+based on feedback from the user as well us our own experiences while working\n+with Metals and should make the overall experience of importing the build and\n+compiling much better.\n+\n+#### SemanticDB is resolved inside Bloop\n+\n+Metals require the SemanticDB compiler plugin for a number of features to\n+function properly. Because of that it was quite difficult to add it\n+automatically in all supported plugins even if those supported Bloop itself.\n+Perfect examples are Seed and Fury, which use Bloop to compile code, however\n+adding a plugin automatically would require changes to their core code.\n+\n+Currently, thanks to\n+[recent changes](https://github.com/scalacenter/bloop/pull/942) Metals can send\n+information about the SemanticDB version, which Bloop uses to automatically\n+download and configure the SemanticDB scalac plugin. Thanks to that no changes\n+in the build tool itself are needed. Particular changes in regards to build\n+tools are:\n+\n+- Gradle - predef script code used in automatic import is now simplified a lot\n+  and works with even more customized workspaces. The only thing it needs to do\n+  is add the Bloop plugin and run `bloopInstall`, which can easily be done\n+  automatically by the user.\n+- Maven - no manual configuration is now needed. To import automatically just\n+  the plugin is needed to be invoked with a setting for downloading sources.\n+- Sbt - the `metals-sbt` plugin is now removed and the Bloop plugin is now added\n+  via automatically generated `./project/metals.sbt` file and run when imported\n+  automatically. Thanks to this solution it should be possible to reuse Metals\n+  compilation in the upcoming feature for offloading compilation in Sbt.\n+- Mill - logic for adding semanticDB plugin is removed from Mill.\n+- Pants, Fury, Seed - no changes were needed for the semanticDB integration and\n+  should work out of the box.\n+\n+#### Switch to to using Bloop Launcher\n+\n+Instead of using internal Metals logic, we now use the Bloop Launcher, which\n+enables us to either connect to an existing Bsp server or start a new Bloop\n+instance with the specified version if nothing is running. This simplified the\n+connection to Bloop greatly and enabled to work on further improvements.\n+\n+#### Restart Bloop automatically if newer version is needed\n+\n+Whenever Metals is started and connects to the Bloop build server it receives\n+information about the version it is running. We compare that version to the one\n+needed by Metals to make sure everything is properly working. If the version\n+running currently is older we offer to restart it automatically and start a new\n+one. Only if Bloop was installed manually it might not be work.\n+\n+#### Automatically reconnect to Bsp/Bloop if connection is broken\n+\n+There were numerous issues reported that the connection to Bps or Bloop is being\n+lost, which causes Metals to behave erratically due to no compilation being run.\n+To solve this, we now detect if the connection is closed and offer user the\n+option of automatic reconnection. This works both when the build server was\n+downed and when the connection was just interrupted. It should also solve the\n+issues on MacOs with dropped connection.\n+\n+## Debugging\n+\n+It is possible now to run main methods and tests via a clickable code lens,\n+however it currently only works in Visual Studio Code. We also allow setting\n+breakpoints in both Java and Scala source files and to check all variables at\n+each.\n+\n+Known breakpoints limitations we are working on:\n+\n+- breakpoint may get ignored when set in a type containing nested type\n+  declarations preceding the breakpoint (see\n+  https://github.com/scalameta/metals/issues/1195)\n+- breakpoint may get wrongly resolved for an ambiguous type (e.g. a.b.Foo)\n+  defined inside two modules on the project (see\n+  https://github.com/scalameta/metals/issues/1196)\n+\n+### How to add support for debugging in my editor?\n+\n+You will need to handle two commands in your language client extension:\n+[`metals-run-session-start`](https://github.com/scalameta/metals/blob/master/metals/src/main/scala/scala/meta/internal/metals/ClientCommands.scala#L56)\n+and\n+[`metals-debug-session-start`](https://github.com/scalameta/metals/blob/master/metals/src/main/scala/scala/meta/internal/metals/ClientCommands.scala#L78).\n+Those commands should get executed automatically by the lsp client once the user\n+activates a code lens. The difference between them is that the former ignores\n+all breakpoints being set while the latter respects them. The procedure of\n+starting the run/debug session is as follows:\n+\n+1. Request the debug adapter uri from metals server using the\n+   [`debug-adapter-start`](https://github.com/scalameta/metals/blob/master/metals/src/main/scala/scala/meta/internal/metals/ServerCommands.scala#L95)\n+   command.\n+2. Connect the debug adapter extension specific to you editor using the\n+   aforementioned uri and let it drive the run/debug session. For reference,\n+   take a look at the\n+   [vscode implementation](https://github.com/scalameta/metals-vscode/blob/master/src/scalaDebugger.ts)\n+   and how it is\n+   [wired up together](https://github.com/scalameta/metals-vscode/blob/master/src/extension.ts#L356)"
  },
  {
    "id" : "2734563f-6f91-427d-8225-b44694fc6a26",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "cbb77c92-a059-42d8-bf4a-675f982bd03b",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nWorksheets are way to evaluate code in real time to test and prototype any new code\r\n```",
        "createdAt" : "2020-01-13T13:04:21Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,917 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+We are excited to announce the release of Metals v0.8.0, codename Cobalt. This\n+release includes a large number of new features and improvements, which have\n+been under development since September 2019.\n+\n+Commits since last release: 727\n+\n+Merged PRs: 207\n+\n+Contributors: 19\n+\n+Closed issues: 82\n+\n+New features: 9\n+\n+For full details: https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- run and debug for tests and main methods\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- worksheet support\n+- experimental support for the Pants build tool\n+- improvements for Bloop integration\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Debugging\n+\n+It is possible to run main methods and tests via a clickable code lens. However,\n+it currently only works in Visual Studio Code. We also allow setting breakpoints\n+in both Java and Scala source files and to check all variables at each.\n+\n+Known breakpoints limitations we are working on:\n+\n+- breakpoint may get ignored when set in a type containing nested type\n+  declarations preceding the breakpoint (see\n+  https://github.com/scalameta/metals/issues/1195)\n+- breakpoint may get wrongly resolved for an ambiguous type (e.g. a.b.Foo)\n+  defined inside two modules on the project (see\n+  https://github.com/scalameta/metals/issues/1196)\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Metals now implements the textDocument/implementations LSP endpoint, which\n+enables all supported editors to display a list of all implementations of\n+abstract classes or members.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementations also works for symbols outside of the workspace, at the\n+price of a small performance penalty for the first invocation.\n+\n+The work done for this feature was also instrumental for implementing the Rename\n+refactor (see below)\n+\n+## Refactor\n+\n+Refactoring support is one of the most requested features in Metals. In this\n+release, we started by implementing the most commonly used refactors: rename and\n+import missing symbol.\n+\n+We plan to add more common refactors along the way. Make sure to check out the\n+[ones that have already been proposed](https://github.com/scalameta/metals/issues/707)\n+and consider suggesting other refactors that are essential in your development\n+workflow.\n+\n+### Rename symbol\n+\n+Thanks to the implementation of the `Go to implementations` feature, we were\n+able to work on a proper rename for any workspace symbol that will rename all\n+occurrences of a symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol\n+- java symbols are not renamed\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed\n+- companion objects will also be renamed with their companion classes\n+\n+## Worksheet support\n+\n+Thanks to great work by @olafurpg and some additional refinements by\n+@alekseiAlefirov, worksheets are now available in all supported editors.\n+\n+Worksheets are way to evaluate code real time to test and prototype any new code"
  },
  {
    "id" : "1e8b63a4-76f4-4f14-bbaa-d2788b8c942e",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "2f1e73c8-7d00-4cc4-98b1-fda6b6abc0f1",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "```suggestion\r\nseveral new improvements are included in this release. They're based on\r\n```",
        "createdAt" : "2020-01-13T13:05:49Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,917 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+We are excited to announce the release of Metals v0.8.0, codename Cobalt. This\n+release includes a large number of new features and improvements, which have\n+been under development since September 2019.\n+\n+Commits since last release: 727\n+\n+Merged PRs: 207\n+\n+Contributors: 19\n+\n+Closed issues: 82\n+\n+New features: 9\n+\n+For full details: https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- run and debug for tests and main methods\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- worksheet support\n+- experimental support for the Pants build tool\n+- improvements for Bloop integration\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Debugging\n+\n+It is possible to run main methods and tests via a clickable code lens. However,\n+it currently only works in Visual Studio Code. We also allow setting breakpoints\n+in both Java and Scala source files and to check all variables at each.\n+\n+Known breakpoints limitations we are working on:\n+\n+- breakpoint may get ignored when set in a type containing nested type\n+  declarations preceding the breakpoint (see\n+  https://github.com/scalameta/metals/issues/1195)\n+- breakpoint may get wrongly resolved for an ambiguous type (e.g. a.b.Foo)\n+  defined inside two modules on the project (see\n+  https://github.com/scalameta/metals/issues/1196)\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Metals now implements the textDocument/implementations LSP endpoint, which\n+enables all supported editors to display a list of all implementations of\n+abstract classes or members.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementations also works for symbols outside of the workspace, at the\n+price of a small performance penalty for the first invocation.\n+\n+The work done for this feature was also instrumental for implementing the Rename\n+refactor (see below)\n+\n+## Refactor\n+\n+Refactoring support is one of the most requested features in Metals. In this\n+release, we started by implementing the most commonly used refactors: rename and\n+import missing symbol.\n+\n+We plan to add more common refactors along the way. Make sure to check out the\n+[ones that have already been proposed](https://github.com/scalameta/metals/issues/707)\n+and consider suggesting other refactors that are essential in your development\n+workflow.\n+\n+### Rename symbol\n+\n+Thanks to the implementation of the `Go to implementations` feature, we were\n+able to work on a proper rename for any workspace symbol that will rename all\n+occurrences of a symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol\n+- java symbols are not renamed\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed\n+- companion objects will also be renamed with their companion classes\n+\n+## Worksheet support\n+\n+Thanks to great work by @olafurpg and some additional refinements by\n+@alekseiAlefirov, worksheets are now available in all supported editors.\n+\n+Worksheets are way to evaluate code real time to test and prototype any new code\n+in an simple way. To create a worksheet all that is needed is to create a file\n+with the extension `worksheet.sc` and Metals will take care of the rest.\n+\n+There are two ways worksheets are implemented for different editors. One is with\n+an additional extension to LSP called `Decoration extension` and it's used by\n+Visual Studio Code and coc-metals.\n+\n+Visual Studio Code:\n+\n+![worksheet](https://user-images.githubusercontent.com/1408093/68093266-b0b3e680-fe8b-11e9-92dd-0165f169966f.gif)\n+\n+The other way worksheets are implemented for all other editors that don't\n+support the `Decoration extension` is using workspace/applyEdits and comments\n+with hover for larger results.\n+\n+Sublime:\n+\n+![worksheet2](https://user-images.githubusercontent.com/10850363/70265661-29fc6d00-179b-11ea-842e-935045e27f96.gif)\n+\n+## Build tools\n+\n+### Experimental build tool support for Pants\n+\n+Thanks to the recent work by @olafurpg you can now use Metals with the Pants\n+build tool. The support is the same as the other supported build tools. The\n+Pants workspace will be detected automatically and an automatic import will be\n+suggested.\n+\n+The support is currently included inside of Metals itself in contrast to other\n+build tools, which have their `bloopInstall` command implemented inside Bloop.\n+It is important to note that we are still working on improvements that will help\n+with large codebases that Pants is usually used for.\n+\n+### Improvements for Bloop integration\n+\n+In order to make the integration between Bloop and Metals a smoother experience,\n+several new improvements are included in this release. There are based on"
  },
  {
    "id" : "6df24211-a9d7-4103-8a7e-03101ae4e762",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "c2c0f73a-7158-48bb-b069-1cd77e859f38",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Should this be a `!` instead of a `~`?",
        "createdAt" : "2020-01-13T13:09:33Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "41637ec2-1371-429c-a0c9-12a49233e0aa",
        "parentId" : "c2c0f73a-7158-48bb-b069-1cd77e859f38",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed!",
        "createdAt" : "2020-01-13T14:51:44Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,917 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+We are excited to announce the release of Metals v0.8.0, codename Cobalt. This\n+release includes a large number of new features and improvements, which have\n+been under development since September 2019.\n+\n+Commits since last release: 727\n+\n+Merged PRs: 207\n+\n+Contributors: 19\n+\n+Closed issues: 82\n+\n+New features: 9\n+\n+For full details: https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+@ckipp01. We are extremely grateful for the growing support from the community\n+and businesses alike, which shows in the number of new contributions and their\n+quality.\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- run and debug for tests and main methods\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- worksheet support\n+- experimental support for the Pants build tool\n+- improvements for Bloop integration\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+\n+## Debugging\n+\n+It is possible to run main methods and tests via a clickable code lens. However,\n+it currently only works in Visual Studio Code. We also allow setting breakpoints\n+in both Java and Scala source files and to check all variables at each.\n+\n+Known breakpoints limitations we are working on:\n+\n+- breakpoint may get ignored when set in a type containing nested type\n+  declarations preceding the breakpoint (see\n+  https://github.com/scalameta/metals/issues/1195)\n+- breakpoint may get wrongly resolved for an ambiguous type (e.g. a.b.Foo)\n+  defined inside two modules on the project (see\n+  https://github.com/scalameta/metals/issues/1196)\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Metals now implements the textDocument/implementations LSP endpoint, which\n+enables all supported editors to display a list of all implementations of\n+abstract classes or members.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementations also works for symbols outside of the workspace, at the\n+price of a small performance penalty for the first invocation.\n+\n+The work done for this feature was also instrumental for implementing the Rename\n+refactor (see below)\n+\n+## Refactor\n+\n+Refactoring support is one of the most requested features in Metals. In this\n+release, we started by implementing the most commonly used refactors: rename and\n+import missing symbol.\n+\n+We plan to add more common refactors along the way. Make sure to check out the\n+[ones that have already been proposed](https://github.com/scalameta/metals/issues/707)\n+and consider suggesting other refactors that are essential in your development\n+workflow.\n+\n+### Rename symbol\n+\n+Thanks to the implementation of the `Go to implementations` feature, we were\n+able to work on a proper rename for any workspace symbol that will rename all\n+occurrences of a symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol\n+- java symbols are not renamed\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed\n+- companion objects will also be renamed with their companion classes\n+\n+## Worksheet support\n+\n+Thanks to great work by @olafurpg and some additional refinements by\n+@alekseiAlefirov, worksheets are now available in all supported editors.\n+\n+Worksheets are way to evaluate code real time to test and prototype any new code\n+in an simple way. To create a worksheet all that is needed is to create a file\n+with the extension `worksheet.sc` and Metals will take care of the rest.\n+\n+There are two ways worksheets are implemented for different editors. One is with\n+an additional extension to LSP called `Decoration extension` and it's used by\n+Visual Studio Code and coc-metals.\n+\n+Visual Studio Code:\n+\n+![worksheet](https://user-images.githubusercontent.com/1408093/68093266-b0b3e680-fe8b-11e9-92dd-0165f169966f.gif)\n+\n+The other way worksheets are implemented for all other editors that don't\n+support the `Decoration extension` is using workspace/applyEdits and comments\n+with hover for larger results.\n+\n+Sublime:\n+\n+![worksheet2](https://user-images.githubusercontent.com/10850363/70265661-29fc6d00-179b-11ea-842e-935045e27f96.gif)\n+\n+## Build tools\n+\n+### Experimental build tool support for Pants\n+\n+Thanks to the recent work by @olafurpg you can now use Metals with the Pants\n+build tool. The support is the same as the other supported build tools. The\n+Pants workspace will be detected automatically and an automatic import will be\n+suggested.\n+\n+The support is currently included inside of Metals itself in contrast to other\n+build tools, which have their `bloopInstall` command implemented inside Bloop.\n+It is important to note that we are still working on improvements that will help\n+with large codebases that Pants is usually used for.\n+\n+### Improvements for Bloop integration\n+\n+In order to make the integration between Bloop and Metals a smoother experience,\n+several new improvements are included in this release. There are based on\n+feedback from users as well us our own experiences while working with Metals and\n+should make the overall experience of importing the build and compiling much\n+better.\n+\n+#### SemanticDB is resolved inside Bloop\n+\n+Metals requires the SemanticDB compiler plugin for a number of features to\n+function properly. Because of that it was quite difficult to add it\n+automatically in all supported build tools even if those supported Bloop itself.\n+Perfect examples are Seed and Fury, which use Bloop to compile code, however\n+adding a plugin automatically would require changes to their core code.\n+\n+Currently, thanks to\n+[recent changes](https://github.com/scalacenter/bloop/pull/942), Metals can send\n+information about the SemanticDB version, which Bloop uses to automatically\n+download and configure the SemanticDB scalac plugin. Thanks to that no changes\n+in the build tool itself are needed. Particular changes in regards to build\n+tools are:\n+\n+- Gradle - predef script code used in automatic import is now simplified a lot\n+  and works with even more customized workspaces. The only thing it needs to do\n+  is add the Bloop plugin and run `bloopInstall`, which can easily be done\n+  automatically by the user.\n+- Maven - no manual configuration is now needed. To import automatically just\n+  the plugin is needed to be invoked with a setting for downloading sources.\n+- Sbt - the `metals-sbt` plugin is now removed and the Bloop plugin is now added\n+  via automatically generated `./project/metals.sbt` file and ran when imported\n+  automatically. Thanks to this solution it should be possible to reuse Metals\n+  compilation in the upcoming feature for offloading compilation in Sbt.\n+- Mill - logic for adding semanticDB plugin is removed from Mill.\n+- Pants, Fury, Seed - no changes were needed for the semanticDB integration and\n+  should work out of the box.\n+\n+#### Switch to to using Bloop Launcher\n+\n+Instead of using internal Metals logic, we now use the Bloop Launcher, which\n+enables us to either connect to an existing Bsp server or start a new Bloop\n+instance with the specified version if none is running. This greatly simplified\n+the connection to Bloop and enabled us to work on further improvements.\n+\n+#### Restart Bloop automatically if newer version is needed\n+\n+Whenever Metals is started and connects to the Bloop build server it receives\n+information about the version it is running. We compare that version to the one\n+needed by Metals to make sure everything is properly working. If the current\n+running version is older we offer to automatically restart it with the newer\n+version. However, this may not work if Bloop was installed manually.\n+\n+#### Automatically reconnect to Bsp/Bloop if connection is broken\n+\n+There were numerous issues reported that the connection to Bps or Bloop was\n+being lost, which causes Metals to behave erratically due to no compilation\n+being run. To solve this, we now detect if the connection is closed and offer\n+the user the option of automatic reconnection. This works both when the build\n+server was down and when the connection was just interrupted. It should also\n+solve the issues on MacOs with dropped connection.\n+\n+## Completions\n+\n+### Import missing symbol\n+\n+Another refactor that is commonly requested is the ability to fix a compilation\n+error by auto-importing a symbol present on the classpath.\n+\n+This was previously possible in Metals only during completions, but we were\n+lacking what LSP calls a code action.\n+\n+Code actions are context-sensitive actions that are proposed to the user in\n+order to fix an error or to perform a relevant refactor.\n+\n+Thanks to the work of @gabro we now have a basic architecture in place for\n+supporting code actions and we were able to implement this feature.\n+\n+## Better support for Vim via coc-metals\n+\n+In order to better support the Vim experience with Metals, coc-metals extension\n+was created which is an extension for coc.nvim, the most popular LSP client for\n+Vim and Neovim. With this new extension comes a whole bunch of new features for\n+Metals + Vim users.\n+\n+- automated installation\n+- easier configuration options\n+- easier workspace commands\n+- embedded doctor\n+- input box support\n+- implementation of the decoration protocol (Neovim only)\n+\n+~[coc-metals](https://camo.githubusercontent.com/0f56f5a3a874e7c69eff3aaeb2dfe47dc586e3d3/68747470733a2f2f692e696d6775722e636f6d2f7a6f66753456492e706e67)"
  },
  {
    "id" : "7d1fb234-5b2f-4ed4-9fe1-e2f318d14219",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "6a66fa7f-3109-4be5-8065-bffa165127fc",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "```suggestion\r\ngrowing support from the community and businesses alike, which shows in the number\r\n```\r\n?",
        "createdAt" : "2020-01-13T14:49:21Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "672eed04-3ba3-4dc8-bf25-3cb9b7e19a06",
        "parentId" : "6a66fa7f-3109-4be5-8065-bffa165127fc",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-01-13T15:30:26Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,953 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+We are excited to announce the release of Metals v0.8.0, codename Cobalt. This\n+release includes a large number of new features and improvements, which have\n+been under development since September 2019.\n+\n+Commits since last release: 727\n+\n+Merged PRs: 214\n+\n+Contributors: 19\n+\n+Closed issues: 84\n+\n+New features: 8\n+\n+For full details: https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+[@ckipp01](https://github.com/ckipp01). We are extremely grateful for the\n+growing support from the community and business alike, which shows in the number"
  },
  {
    "id" : "deb93748-2a04-4f8b-8584-bfeb3e1e6f15",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "3e7b593a-51b2-47fe-b6c8-d95da8fa2a22",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I think it's fair game to boast a bit more. The known limitations don't need to appear above the demo GIF\r\n\r\n```suggestion\r\nIt is now possible to run and test directly from VS Code using the new \"Run\", \"Test\" and \"Debug test\" buttons. The \"Debug test\" button supports debugging with breakpoints. It's possible to insert breakpoints in Java and Scala sources for both workspace sources as well as library dependency sources.\r\n\r\n> super awesome debugging demo GIF\r\n\r\nKnown limitations:\r\n* Debugging is only supported in VS Code at this moment, we hope to increase the editor support in the future. To support debugging, editors need to implement the [Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/)\r\n* Breakpoints may not work as expected in all source locations (example: inner classes, ambiguous names, lambdas). Please share your feedback by reporting issues!\r\n```",
        "createdAt" : "2020-01-13T14:57:34Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d6312765-258d-46c8-ac75-780003b32237",
        "parentId" : "3e7b593a-51b2-47fe-b6c8-d95da8fa2a22",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Fixed, thanks!",
        "createdAt" : "2020-01-13T15:30:16Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,953 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+We are excited to announce the release of Metals v0.8.0, codename Cobalt. This\n+release includes a large number of new features and improvements, which have\n+been under development since September 2019.\n+\n+Commits since last release: 727\n+\n+Merged PRs: 214\n+\n+Contributors: 19\n+\n+Closed issues: 84\n+\n+New features: 8\n+\n+For full details: https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+[@ckipp01](https://github.com/ckipp01). We are extremely grateful for the\n+growing support from the community and business alike, which shows in the number\n+of new contributions and their quality.\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- run and debug for tests and main methods\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- worksheet support\n+- experimental support for the Pants build tool\n+- improvements for Bloop integration\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+- scaladoc auto completion on type `/**`\n+\n+## Debugging\n+\n+It is possible to run main methods and tests via a clickable code lens. However,"
  },
  {
    "id" : "44e7f313-b9b6-43ce-a2e9-5285be8f785e",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "be4dd0a6-8184-4060-b3c9-c6070a4522fb",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "This section did not incorporate yet the full suggestion from  https://github.com/scalameta/metals/pull/1278#discussion_r365410510\r\n\r\n> Thanks to the recent work by [@olafurpg](https://github.com/olafurpg), there's now experimental support for the Pants build tool. The Pants integration is still evolving so it's not yet documented. The end goal is to support Pants in the same way as other build tools like sbt, Maven and Gradle. \r\n\r\n\r\nWe don't need to say more about Pants for now.\r\n",
        "createdAt" : "2020-01-13T15:00:33Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "274dc1e6-da90-475f-8300-fa39327423c4",
        "parentId" : "be4dd0a6-8184-4060-b3c9-c6070a4522fb",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Missed it! Sorry - added that paragraph and removed the previous version",
        "createdAt" : "2020-01-13T15:30:05Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,953 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+We are excited to announce the release of Metals v0.8.0, codename Cobalt. This\n+release includes a large number of new features and improvements, which have\n+been under development since September 2019.\n+\n+Commits since last release: 727\n+\n+Merged PRs: 214\n+\n+Contributors: 19\n+\n+Closed issues: 84\n+\n+New features: 8\n+\n+For full details: https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+[@ckipp01](https://github.com/ckipp01). We are extremely grateful for the\n+growing support from the community and business alike, which shows in the number\n+of new contributions and their quality.\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- run and debug for tests and main methods\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- worksheet support\n+- experimental support for the Pants build tool\n+- improvements for Bloop integration\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+- scaladoc auto completion on type `/**`\n+\n+## Debugging\n+\n+It is possible to run main methods and tests via a clickable code lens. However,\n+it currently only works in Visual Studio Code. We also allow setting breakpoints\n+in both Java and Scala source files and to check all variables at each.\n+\n+Known breakpoints limitations we are working on:\n+\n+- breakpoint may get ignored when set in a type containing nested type\n+  declarations preceding the breakpoint (see\n+  https://github.com/scalameta/metals/issues/1195)\n+- breakpoint may get wrongly resolved for an ambiguous type (e.g. a.b.Foo)\n+  defined inside two modules on the project (see\n+  https://github.com/scalameta/metals/issues/1196)\n+\n+![debug](https://user-images.githubusercontent.com/3709537/70703645-d0cb9680-1cd0-11ea-9034-a2ef18ffb588.gif)\n+\n+To support other editors please take a look into the documentation on the Metals\n+website.\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Metals now implements the textDocument/implementations LSP endpoint, which\n+enables all supported editors to display a list of all implementations of\n+abstract classes or members.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementations also works for symbols outside of the workspace, at the\n+price of a small performance penalty for the first invocation.\n+\n+The work done for this feature was also instrumental for implementing the Rename\n+refactor (see below).\n+\n+## Refactor\n+\n+Refactoring support is one of the most requested features in Metals. In this\n+release, we started by implementing the most commonly used refactors: rename and\n+import missing symbol.\n+\n+We plan to add more common refactors along the way. Make sure to check out the\n+[ones that have already been proposed](https://github.com/scalameta/metals/issues/707)\n+and consider suggesting other refactors that are essential in your development\n+workflow.\n+\n+### Rename symbol\n+\n+Thanks to the implementation of the `Go to implementations` feature, we were\n+able to work on a proper rename for any workspace symbol that will rename all\n+occurrences of a symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol\n+- java symbols are not renamed\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed\n+- companion objects will also be renamed along with their companion classes\n+\n+### Import missing symbol\n+\n+Another refactor that is commonly requested is the ability to fix a compilation\n+error by auto-importing a symbol present on the classpath.\n+\n+This was previously possible in Metals only during completions, but we were\n+lacking what LSP calls a code action.\n+\n+Code actions are context-sensitive actions that are proposed to the user in\n+order to fix an error or to perform a relevant refactor.\n+\n+Thanks to the work of @gabro we now have a basic architecture in place for\n+supporting code actions and we were able to implement this feature.\n+\n+![missing-symbol](https://user-images.githubusercontent.com/691940/68937367-8839bf80-079c-11ea-8401-4927f6531d24.gif)\n+\n+## Worksheet support\n+\n+Thanks to great work by @olafurpg and some additional refinements by\n+@alekseiAlefirov, worksheets are now available in all supported editors.\n+\n+Worksheets are a way to evaluate code in real time to test and prototype any new\n+features in a simple way. To create a worksheet all that is needed is to create\n+a file with the extension `worksheet.sc` and Metals will take care of the rest.\n+\n+There are two ways worksheets are implemented for different editors. One is with\n+an additional extension to LSP called `Decoration extension` and it's used by\n+Visual Studio Code and coc-metals.\n+\n+Visual Studio Code:\n+\n+![worksheet](https://user-images.githubusercontent.com/1408093/68093266-b0b3e680-fe8b-11e9-92dd-0165f169966f.gif)\n+\n+The other way worksheets are implemented for all other editors that don't\n+support the `Decoration extension` is using workspace/applyEdits and comments\n+with hover for larger results.\n+\n+Sublime:\n+\n+![worksheet2](https://user-images.githubusercontent.com/10850363/70265661-29fc6d00-179b-11ea-842e-935045e27f96.gif)\n+\n+## Build tools\n+\n+### Experimental build tool support for Pants"
  },
  {
    "id" : "c9306702-41e4-4bd1-a1e2-9799fe71d8b0",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "223c625c-3c73-4694-9d30-aa1ece93ba94",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Are we sure we need level 4 nested headers? I think levels 2 and 3 are usually enough.",
        "createdAt" : "2020-01-13T15:01:27Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "36bbb7a7-1436-4ddd-8113-94ec73d7e282",
        "parentId" : "223c625c-3c73-4694-9d30-aa1ece93ba94",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Reduced to level 3 - I was sure about it easier. I moved the intro just below the `Build tools` header and was able to reduce to 3.",
        "createdAt" : "2020-01-13T15:29:29Z",
        "updatedAt" : "2020-01-13T16:05:42Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "219a75cb06ea05adb9f9803fe11847a0104af7d5",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,953 @@\n+---\n+author: Tomasz Godzik\n+title: Metals v0.8.0 - Cobalt\n+authorURL: https://twitter.com/TomekGodzik\n+authorImageURL: https://github.com/tgodzik.png\n+---\n+\n+We are excited to announce the release of Metals v0.8.0, codename Cobalt. This\n+release includes a large number of new features and improvements, which have\n+been under development since September 2019.\n+\n+Commits since last release: 727\n+\n+Merged PRs: 214\n+\n+Contributors: 19\n+\n+Closed issues: 84\n+\n+New features: 8\n+\n+For full details: https://github.com/scalameta/metals/milestone/9?closed=1\n+\n+Metals is a language server for Scala that works with VS Code, Vim, Emacs,\n+Sublime Text, Atom and Eclipse. Metals is developed at the\n+[Scala Center](https://scala.epfl.ch/) and [VirtusLab](https://virtuslab.com)\n+along with contributors from the community. Recently, Metals has also gained\n+support from [Lunatech](https://lunatech.com) with the contributions from\n+[@ckipp01](https://github.com/ckipp01). We are extremely grateful for the\n+growing support from the community and business alike, which shows in the number\n+of new contributions and their quality.\n+\n+## TL;DR\n+\n+Check out [https://scalameta.org/metals/](https://scalameta.org/metals/) and\n+give Metals a try!\n+\n+- run and debug for tests and main methods\n+- go to implementations\n+- rename symbol\n+- first code action - import missing symbol\n+- worksheet support\n+- experimental support for the Pants build tool\n+- improvements for Bloop integration\n+- better support for Vim via coc-metals\n+- completion to add all abstract members\n+- scaladoc auto completion on type `/**`\n+\n+## Debugging\n+\n+It is possible to run main methods and tests via a clickable code lens. However,\n+it currently only works in Visual Studio Code. We also allow setting breakpoints\n+in both Java and Scala source files and to check all variables at each.\n+\n+Known breakpoints limitations we are working on:\n+\n+- breakpoint may get ignored when set in a type containing nested type\n+  declarations preceding the breakpoint (see\n+  https://github.com/scalameta/metals/issues/1195)\n+- breakpoint may get wrongly resolved for an ambiguous type (e.g. a.b.Foo)\n+  defined inside two modules on the project (see\n+  https://github.com/scalameta/metals/issues/1196)\n+\n+![debug](https://user-images.githubusercontent.com/3709537/70703645-d0cb9680-1cd0-11ea-9034-a2ef18ffb588.gif)\n+\n+To support other editors please take a look into the documentation on the Metals\n+website.\n+\n+## Navigation\n+\n+### Go to implementations\n+\n+Metals now implements the textDocument/implementations LSP endpoint, which\n+enables all supported editors to display a list of all implementations of\n+abstract classes or members.\n+\n+![implementations](https://i.imgur.com/rke6iny.gif)\n+\n+Finding implementations also works for symbols outside of the workspace, at the\n+price of a small performance penalty for the first invocation.\n+\n+The work done for this feature was also instrumental for implementing the Rename\n+refactor (see below).\n+\n+## Refactor\n+\n+Refactoring support is one of the most requested features in Metals. In this\n+release, we started by implementing the most commonly used refactors: rename and\n+import missing symbol.\n+\n+We plan to add more common refactors along the way. Make sure to check out the\n+[ones that have already been proposed](https://github.com/scalameta/metals/issues/707)\n+and consider suggesting other refactors that are essential in your development\n+workflow.\n+\n+### Rename symbol\n+\n+Thanks to the implementation of the `Go to implementations` feature, we were\n+able to work on a proper rename for any workspace symbol that will rename all\n+occurrences of a symbol even if that symbol is a part of a class hierarchy.\n+\n+![rename](https://i.imgur.com/QHaJCr0.gif)\n+\n+There are a couple of cases in which rename might behave differently based on\n+the particular symbol being renamed:\n+\n+- renaming an overriden symbol will rename all occurrences for both parent and\n+  all children overriding that symbol\n+- java symbols are not renamed\n+- renaming \"hashCode\", \"unapply\", \"unary\\_!\", \"!\" is not supported, since they\n+  change the semantics\n+- methods starting with `:` can only be renamed to ones with the same first\n+  character to make sure code compiles afterwards\n+- renaming apply will change all occurrences with just `()` to a full name\n+  `.newname()`\n+- if renaming a class with the same name as the file, the file's name will also\n+  be renamed\n+- companion objects will also be renamed along with their companion classes\n+\n+### Import missing symbol\n+\n+Another refactor that is commonly requested is the ability to fix a compilation\n+error by auto-importing a symbol present on the classpath.\n+\n+This was previously possible in Metals only during completions, but we were\n+lacking what LSP calls a code action.\n+\n+Code actions are context-sensitive actions that are proposed to the user in\n+order to fix an error or to perform a relevant refactor.\n+\n+Thanks to the work of @gabro we now have a basic architecture in place for\n+supporting code actions and we were able to implement this feature.\n+\n+![missing-symbol](https://user-images.githubusercontent.com/691940/68937367-8839bf80-079c-11ea-8401-4927f6531d24.gif)\n+\n+## Worksheet support\n+\n+Thanks to great work by @olafurpg and some additional refinements by\n+@alekseiAlefirov, worksheets are now available in all supported editors.\n+\n+Worksheets are a way to evaluate code in real time to test and prototype any new\n+features in a simple way. To create a worksheet all that is needed is to create\n+a file with the extension `worksheet.sc` and Metals will take care of the rest.\n+\n+There are two ways worksheets are implemented for different editors. One is with\n+an additional extension to LSP called `Decoration extension` and it's used by\n+Visual Studio Code and coc-metals.\n+\n+Visual Studio Code:\n+\n+![worksheet](https://user-images.githubusercontent.com/1408093/68093266-b0b3e680-fe8b-11e9-92dd-0165f169966f.gif)\n+\n+The other way worksheets are implemented for all other editors that don't\n+support the `Decoration extension` is using workspace/applyEdits and comments\n+with hover for larger results.\n+\n+Sublime:\n+\n+![worksheet2](https://user-images.githubusercontent.com/10850363/70265661-29fc6d00-179b-11ea-842e-935045e27f96.gif)\n+\n+## Build tools\n+\n+### Experimental build tool support for Pants\n+\n+Thanks to the recent work by @olafurpg you can now use Metals with the Pants\n+build tool. The support is the same as the other supported build tools. The\n+Pants workspace will be detected automatically and an automatic import will be\n+suggested. Please remember that the support is still experimental and some more\n+advances use cases might not be supported.\n+\n+The support is currently included inside of Metals itself in contrast to other\n+build tools, which have their `bloopInstall` command implemented inside Bloop.\n+It is important to note that we are still working on improvements that will help\n+with large codebases that Pants is usually used for.\n+\n+### Improvements for Bloop integration\n+\n+In order to make the integration between Bloop and Metals a smoother experience,\n+several new improvements are included in this release. There're based on\n+feedback from users as well us our own experiences while working with Metals and\n+should make the overall experience of importing the build and compiling much\n+better.\n+\n+#### SemanticDB is resolved inside Bloop\n+\n+Metals requires the SemanticDB compiler plugin for a number of features to\n+function properly. Because of that it was quite difficult to add it\n+automatically in all supported build tools even if those supported Bloop itself.\n+Perfect examples are Seed and Fury, which use Bloop to compile code, however\n+adding a plugin automatically would require changes to their core code.\n+\n+Currently, thanks to\n+[recent changes](https://github.com/scalacenter/bloop/pull/942), Metals can send\n+information about the SemanticDB version, which Bloop uses to automatically\n+download and configure the SemanticDB scalac plugin. Thanks to that no changes\n+in the build tool itself are needed. Particular changes in regards to build\n+tools are:\n+\n+- Gradle - predef script code used in automatic import is now simplified a lot\n+  and works with even more customized workspaces. The only thing it needs to do\n+  is add the Bloop plugin and run `bloopInstall`, which can easily also be done\n+  manually by the user.\n+- Maven - no manual configuration is now needed. To import automatically just\n+  the plugin is needed to be invoked with a setting for downloading sources.\n+- Sbt - the `metals-sbt` plugin is now removed and the Bloop plugin is now added\n+  via automatically generated `./project/metals.sbt` file and ran when imported\n+  automatically. Thanks to this solution it should be possible to reuse Metals\n+  compilation in the upcoming feature for offloading compilation in Sbt.\n+- Mill - logic for adding semanticDB plugin is removed from Mill.\n+- Pants, Fury, Seed - no changes were needed for the semanticDB integration and\n+  should work out of the box.\n+\n+#### Switch to to using Bloop Launcher\n+\n+Instead of using internal Metals logic, we now use the Bloop Launcher, which\n+enables us to either connect to an existing Bsp server or start a new Bloop\n+instance with the specified version if none is running. This greatly simplified\n+the connection to Bloop and enabled us to work on further improvements.\n+\n+#### Restart Bloop automatically if newer version is needed\n+\n+Whenever Metals is started and connects to the Bloop build server it receives\n+information about the version it is running. We compare that version to the one\n+needed by Metals to make sure everything is properly working. If the current\n+running version is older we offer to automatically restart it with the newer\n+version. However, this may not work if Bloop was installed manually.\n+\n+#### Automatically reconnect to Bsp/Bloop if connection is broken"
  },
  {
    "id" : "c33aed60-f0b5-46d8-aaa2-4ede82012984",
    "prId" : 1833,
    "comments" : [
      {
        "id" : "3bbcb1c8-816e-4b79-9205-f100e4ec6b43",
        "parentId" : null,
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Since these blogs somewhat serve as release notes and _sort of_ a changelog, do we really want to change this blog post to remove reference at all to Pants? This seems to imply that we are sort of _hiding_ away that we had experimental pants support at one time. My question is mainly just trying to understand the reason behind this.",
        "createdAt" : "2020-06-18T17:47:38Z",
        "updatedAt" : "2020-06-25T06:06:57Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0b5480fe-4bf9-4039-bff9-353516828104",
        "parentId" : "3bbcb1c8-816e-4b79-9205-f100e4ec6b43",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "My reasoning to remove this part is because it appears when users search for \"Pants\" on the website. Since the Pants integration is now gone I figured it would be best if this section didn't show up when people search for it.",
        "createdAt" : "2020-06-25T06:18:15Z",
        "updatedAt" : "2020-06-25T06:18:15Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "24d585838ffe8978ee3a30f502b81859f1776dc6",
    "line" : 48,
    "diffHunk" : "@@ -241,13 +239,6 @@ the user the option of automatic reconnection. This works both when the build\n server was down and when the connection was just interrupted. It should also\n solve the issues on MacOs with dropped connection.\n \n-### Experimental build tool support for Pants\n-\n-Thanks to the recent work by [@olafurpg](https://github.com/olafurpg), there's\n-now experimental support for the Pants build tool. The Pants integration is\n-still evolving so it's not yet documented. The end goal is to support Pants in\n-the same way as other build tools like sbt, Maven and Gradle.\n-"
  }
]