[
  {
    "id" : "cc010da3-f426-451e-8ec3-f4504b9e699b",
    "prId" : 405,
    "comments" : [
      {
        "id" : "d0abf338-80cb-4e7b-99f9-a93307be20d4",
        "parentId" : null,
        "author" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "body" : "This sentence is weird. Is it missing an \"and\" somewhere?",
        "createdAt" : "2018-12-12T15:25:32Z",
        "updatedAt" : "2018-12-13T08:21:14Z",
        "lastEditedBy" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "036afbd4-90e3-467e-92de-6c3617218cbe",
        "parentId" : "d0abf338-80cb-4e7b-99f9-a93307be20d4",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "good catch, \"other features AND we're sharing the computer\"",
        "createdAt" : "2018-12-12T15:39:37Z",
        "updatedAt" : "2018-12-13T08:21:14Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a7325ef8f5cd65e506d3554b9e1fae362bcfe914",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,290 @@\n+---\n+author: Ólafur Páll Geirsson\n+title: Fast goto definition with low memory footprint\n+authorURL: https://twitter.com/olafurpg\n+authorImageURL: https://avatars2.githubusercontent.com/u/1408093?s=460&v=4\n+---\n+\n+Metals throws away its navigation index when it shuts down. Next time it starts,\n+the index is computed again from scratch. Although this approach is simple, it\n+requires indexing to be fast enough so you don't mind running it again and\n+again. Also, because we don't persist the index to disk, we need to be careful\n+with memory usage.\n+\n+This post covers how Metals achieves fast source indexing for Scala with a small\n+memory footprint. We describe the problem statement, explain the initial\n+solution and how an optimization delivered a 10x speedup. Finally, we evaluate\n+the result on a real-world project.\n+\n+<!-- truncate -->\n+\n+The work presented in this post was done as part of my job at the\n+[Scala Center](https://scala.epfl.ch/).\n+\n+<style>\n+blockquote {\n+  background-color: rgba(100, 205, 255, 0.3);\n+  border-left: 8px solid #64cdff;\n+}\n+</style>\n+\n+## Problem statement\n+\n+What happens when you run Goto Definition? In reality, a lot goes on but in this\n+post we're gonna focus on a specific problem: given a method like\n+`scala.Some.isEmpty` and many thousand source files with millions of lines of\n+code, how do we quickly find the source file that defines that method?\n+\n+![goto-definition](https://user-images.githubusercontent.com/1408093/49591684-67070700-f96f-11e8-873d-90c40480528b.gif)\n+\n+There are some hard constraints:\n+\n+- we must answer quickly, normal requests should respond within 100-200ms.\n+- memory usage should not exceed 10-100Mb since we also need memory to implement\n+  other features we're sharing the computer with other applications."
  },
  {
    "id" : "d80d541f-3995-42fb-a7aa-52d37469364c",
    "prId" : 405,
    "comments" : [
      {
        "id" : "d27045cf-032f-4eb5-9d0a-ae3ef9fc12bd",
        "parentId" : null,
        "author" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "body" : "What about braced package declarations:\r\n```scala\r\npackage foo\r\n\r\npackage bar {\r\n  class Foobar\r\n}\r\n```\r\nAlso: classes in `package object`s?\r\n?",
        "createdAt" : "2018-12-12T15:30:21Z",
        "updatedAt" : "2018-12-13T08:21:14Z",
        "lastEditedBy" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cb1873f7-9fc3-4491-9027-9ed231779aaa",
        "parentId" : "d27045cf-032f-4eb5-9d0a-ae3ef9fc12bd",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Those are handled, the logic in this post is maybe a bit oversimplified. I'll update to make it clearer",
        "createdAt" : "2018-12-12T15:36:18Z",
        "updatedAt" : "2018-12-13T08:21:14Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a7325ef8f5cd65e506d3554b9e1fae362bcfe914",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,290 @@\n+---\n+author: Ólafur Páll Geirsson\n+title: Fast goto definition with low memory footprint\n+authorURL: https://twitter.com/olafurpg\n+authorImageURL: https://avatars2.githubusercontent.com/u/1408093?s=460&v=4\n+---\n+\n+Metals throws away its navigation index when it shuts down. Next time it starts,\n+the index is computed again from scratch. Although this approach is simple, it\n+requires indexing to be fast enough so you don't mind running it again and\n+again. Also, because we don't persist the index to disk, we need to be careful\n+with memory usage.\n+\n+This post covers how Metals achieves fast source indexing for Scala with a small\n+memory footprint. We describe the problem statement, explain the initial\n+solution and how an optimization delivered a 10x speedup. Finally, we evaluate\n+the result on a real-world project.\n+\n+<!-- truncate -->\n+\n+The work presented in this post was done as part of my job at the\n+[Scala Center](https://scala.epfl.ch/).\n+\n+<style>\n+blockquote {\n+  background-color: rgba(100, 205, 255, 0.3);\n+  border-left: 8px solid #64cdff;\n+}\n+</style>\n+\n+## Problem statement\n+\n+What happens when you run Goto Definition? In reality, a lot goes on but in this\n+post we're gonna focus on a specific problem: given a method like\n+`scala.Some.isEmpty` and many thousand source files with millions of lines of\n+code, how do we quickly find the source file that defines that method?\n+\n+![goto-definition](https://user-images.githubusercontent.com/1408093/49591684-67070700-f96f-11e8-873d-90c40480528b.gif)\n+\n+There are some hard constraints:\n+\n+- we must answer quickly, normal requests should respond within 100-200ms.\n+- memory usage should not exceed 10-100Mb since we also need memory to implement\n+  other features we're sharing the computer with other applications.\n+- computing an index should not take more than ~10 seconds after importing the\n+  build, even for large projects with millions of lines of source code\n+  (including dependencies).\n+\n+To keep things simple, imagine we have all source files available in a directory\n+that we can walk and read.\n+\n+```scala\n+walk()\n+// Stream(\"scala/Option.scala\", \"scala/Predef.scala\", ...)\n+\n+read(\"scala/Option.scala\")\n+// \"sealed abstract class Option { ... }; class Some extends Option { ... }\"\n+```\n+\n+For Java, the challenge is not so difficult since the compiler enforces that\n+each source file contains a single public class with matching filename.\n+\n+```java\n+// java/nio/file/Files.java\n+package java.nio.file;\n+public class Files {\n+    public static byte[] readAllBytes(path: Path) {\n+      // ...\n+    }\n+}\n+```\n+\n+To navigate to the `Files.readAllBytes()` method we take the enclosing toplevel\n+class `java.nio.file.Files` and read the corresponding file\n+`java/nio/File/Files.java`. This approach is fast (almost instant!) and it also\n+requires no index sucking up memory.\n+\n+For Scala, the problem is trickier because the compiler allows multiple toplevel\n+classes in the same source file.\n+\n+```scala\n+// scala/Option.scala\n+package scala\n+sealed abstract class Option[+T] { /* ... */ }\n+final class Some[+T](value: T) extends Option[T] {\n+  def isEmpty = false\n+  // ...\n+}\n+```\n+\n+To navigate to the `scala.Some.isEmpty` method we can't use the same approach as\n+in Java because the class `scala.Some` is in `scala/Option.scala`, not\n+`scala/Some.scala`.\n+\n+One possible solution is to read the `scala/Some.class` classfile that contains\n+the filename `Option.scala` where `scala.Some` is defined.\n+\n+```sh\n+$ javap -classpath $(coursier fetch org.scala-lang:scala-library:2.12.8) scala.Some\n+Compiled from \"Option.scala\"\n+...\n+```\n+\n+However, source information in classfiles is not always reliable and it may be\n+removed by tools that process jar files. Let's restrict the problem to only use\n+source files.\n+\n+Instead of using JVM classfiles, we can walk all Scala source files and build an\n+index that maps toplevel classes to the source file that defines that class. The\n+index looks something like this:\n+\n+```scala\n+val index = Map[Symbol, Path](\n+  Symbol(\"scala.Some\") -> Path(\"scala/Option.scala\"),\n+  // ...\n+)\n+```\n+\n+Our challenge is to build this index as fast as possible.\n+\n+## Initial solution\n+\n+The first implementation of the Metals indexer used the\n+[Scalameta](https://scalameta.org/) parser. This parser does not desugar the\n+original code making it useful for refactoring and code-formatting tools like\n+[Scalafix](http://scalacenter.github.io/scalafix/)/[Scalafmt](http://scalameta.org/scalafmt).\n+I'm also familiar with Scalameta parser API so it was fast to get a working\n+implementation. However, is the parser fast enough to parse millions of lines of\n+code on every server startup?\n+\n+According to JMH benchmarks, parsing a sizable corpus of Scala code, the\n+Scalameta parser handles ~92k lines/second. The benchmarks use the \"single-shot\"\n+mode of JMH, for which the documentation says:\n+\n+> \"This mode is useful to estimate the \"cold\" performance when you don't want to\n+> hide the warmup invocations.\"\n+\n+Cold performance is an OK estimate for our use-case since indexing happens\n+during server startup.\n+\n+The Scala standard library is ~36k lines so at 92k lines/second this solution\n+scales up to a codebase with up to 20-30 similarly-sized library dependencies.\n+If we add more library dependencies, we exceed the 10 second constraint for\n+indexing time. For a codebase with 5 million lines of code, users might have to\n+wait one minute for indexing to complete. We should aim for better.\n+\n+## Optimized solution\n+\n+We can speed up indexing by writing a custom parser that extracts only the\n+information we need from a source file. For example, the Scalameta parser\n+extracts method implementations that are irrelevant for our indexer. Our indexer\n+needs to know the toplevel classes and nothing more.\n+\n+The algorithm for this custom parser that only extracts toplevel classes goes\n+roughly like this.\n+\n+- tokenize source file\n+- on `package` keyword, record package name\n+- on `class` and `trait` and `object` keywords, record toplevel class\n+- on `(` and `[` and `{` delimiters, skip tokens until we find matching closing\n+  delimiter"
  }
]