[
  {
    "id" : "1e609261-71d8-4d14-a1bd-008fe89ac4da",
    "prId" : 1940,
    "comments" : [
      {
        "id" : "7e542a8c-83cb-4b68-9e7a-440726fc7b42",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "```suggestion\r\nbeginnings of Metals, but I want to focus in on a specific file that still exists\r\n```",
        "createdAt" : "2020-07-23T14:48:24Z",
        "updatedAt" : "2020-07-23T15:01:48Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7403a897-7d7e-45cc-be23-28f0f86e1a44",
        "parentId" : "7e542a8c-83cb-4b68-9e7a-440726fc7b42",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Fixed.",
        "createdAt" : "2020-07-23T14:59:26Z",
        "updatedAt" : "2020-07-23T15:01:48Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "43552c9016dde086c365af59754a9bfbf2486f72",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,223 @@\n+---\n+author: Chris Kipp\n+title: A Dive into Configuring Metals\n+authorURL: https://twitter.com/ckipp01\n+authorImageURL: https://avatars1.githubusercontent.com/u/13974112?s=400&u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4\n+---\n+\n+As of this last Metals release, it's now 100% possible to fully configure Metals\n+without any need to pass in server properties. Depending on your editor of\n+choice, the process to configure Metals may be completely abstracted away. You\n+simply click install, wait a bit, and start coding. In this post I'd like to\n+talk a bit about the progression of how Metals was originally configured fully\n+with server properties and how it can now be fully configured via the client,\n+which in [LSP](https://microsoft.github.io/language-server-protocol/) terms is\n+your editor. This can serve both as a guide for those client extension\n+maintainers out there and also those curious at how Metals correctly works for\n+all the various editors.\n+\n+## The first configuration\n+\n+Looking back to the Fall of 2018, you see a giant glimpse of Metals becoming\n+what it is today when looking at a giant commit by\n+[@olafurpg](https://twitter.com/olafurpg) with the title [Implement pretty\n+basic language server and build\n+client.](https://github.com/scalameta/metals/commit/df6b41acaad1978ffd1fa25c41909c38425932ab).\n+It's a pretty fascinating commit to look at if you're interested in the\n+beginnings of Metal, but I want to focus in on a specific file that still exists"
  },
  {
    "id" : "756faa52-8961-4b18-a509-6f1de2a50be0",
    "prId" : 1940,
    "comments" : [
      {
        "id" : "e20ac4b9-5374-443b-a907-d9466484dc5f",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "```suggestion\r\nHappy coding with Metals!\r\n```\r\n?",
        "createdAt" : "2020-07-23T14:54:54Z",
        "updatedAt" : "2020-07-23T15:01:48Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f187a9ac-556b-42ac-835e-7e04d8058e6a",
        "parentId" : "e20ac4b9-5374-443b-a907-d9466484dc5f",
        "author" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-07-23T14:59:57Z",
        "updatedAt" : "2020-07-23T15:01:48Z",
        "lastEditedBy" : {
          "login" : "ckipp01",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/13974112?u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "43552c9016dde086c365af59754a9bfbf2486f72",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,223 @@\n+---\n+author: Chris Kipp\n+title: A Dive into Configuring Metals\n+authorURL: https://twitter.com/ckipp01\n+authorImageURL: https://avatars1.githubusercontent.com/u/13974112?s=400&u=7b6a2ddab8eec6f99e4e40ae9b81f71cb5ba92e5&v=4\n+---\n+\n+As of this last Metals release, it's now 100% possible to fully configure Metals\n+without any need to pass in server properties. Depending on your editor of\n+choice, the process to configure Metals may be completely abstracted away. You\n+simply click install, wait a bit, and start coding. In this post I'd like to\n+talk a bit about the progression of how Metals was originally configured fully\n+with server properties and how it can now be fully configured via the client,\n+which in [LSP](https://microsoft.github.io/language-server-protocol/) terms is\n+your editor. This can serve both as a guide for those client extension\n+maintainers out there and also those curious at how Metals correctly works for\n+all the various editors.\n+\n+## The first configuration\n+\n+Looking back to the Fall of 2018, you see a giant glimpse of Metals becoming\n+what it is today when looking at a giant commit by\n+[@olafurpg](https://twitter.com/olafurpg) with the title [Implement pretty\n+basic language server and build\n+client.](https://github.com/scalameta/metals/commit/df6b41acaad1978ffd1fa25c41909c38425932ab).\n+It's a pretty fascinating commit to look at if you're interested in the\n+beginnings of Metal, but I want to focus in on a specific file that still exists\n+today, which is the\n+[MetalsServerConfig.scala](https://github.com/scalameta/metals/commit/df6b41acaad1978ffd1fa25c41909c38425932ab#diff-dc72b5c684177c884881164ab17182eb).\n+In this file you see the first configuration options that existed for Metals.\n+You see things like `isLogShowMessage` to ensure users were correctly getting\n+status messages instead of everything just going into the logs. (This was also\n+before\n+[`metals/status`](https://scalameta.org/metals/docs/editors/new-editor.html#metalsstatus)\n+existed which is used today for a better status experience in Metals). You also\n+see other options like `isHttpEnabled` for Metals to start the Doctor for those\n+that needed an HTTP client interface, or even an `icons` setting to ensure\n+things looked nice and matched your client. At this point, instead of just\n+having the user specify every one of these when they bootstrapped the server, a\n+`metals.client` property was introduced that we could give editors a set of\n+defaults. Here is an example for the first settings for Vim and Metals using the\n+[vim-lsc](https://github.com/natebosch/vim-lsc) plugin:\n+\n+```scala\n+System.getProperty(\"metals.client\", \"unknown\") match {\n+  case \"vim-lsc\" =>\n+    MetalsServerConfig().copy(\n+      isExtensionsEnabled = false,\n+      fileWatcher = FileWatcherConfig.auto,\n+      isLogStatusBar = true,\n+      isNoInitialized = true,\n+      isHttpEnabled = true,\n+      icons = Icons.unicode\n+    )\n+  ...\n+```\n+The property would then be set when the user would bootstrap Metals. This\n+started out as a manual process for almost all the editors utilizing\n+[Coursier](https://github.com/coursier/coursier). This still actually remains a\n+valid way to configure Metals, although not recommended if your client supports\n+setting `InitializationOptions` in the\n+[`initalize`](https://microsoft.github.io/language-server-protocol/specifications/specification-current/#initialize)\n+request. It's also almost the identical process that happens behind the scenes\n+when client extensions like\n+[metals-vscode](https://github.com/scalameta/metals-vscode),\n+[coc-metals](https://github.com/scalameta/coc-metals), and\n+[metals-sublime](https://github.com/scalameta/metals-sublime) bootstrap the\n+server for you. For example, here is how you would manually do this:\n+\n+```sh\n+coursier bootstrap \\\n+  --java-opt -Xss4m \\\n+  --java-opt -Xms100m \\\n+  --java-opt -Dmetals.client=emacs \\\n+  org.scalameta:metals_2.12:0.9.2 \\\n+  -r bintray:scalacenter/releases \\\n+  -r sonatype:snapshots \\\n+  -o /usr/local/bin/metals-emacs -f\n+```\n+\n+In the above example, you would then get the defaults specified in\n+`MetalsServerConfig.scala` for `emacs`. Again, when the process is automated\n+it's very similar, and you can see this if you poke around the\n+[`fetchAndLaunchMetals`](https://github.com/scalameta/metals-vscode/blob/master/src/extension.ts#L166)\n+function in the VS-Code extension. You can see how the path to Coursier is\n+grabbed, your `JAVA_HOME` is captured, and how we get some extra\n+variables/properties to call Metals with.\n+\n+## User configuration\n+\n+Apart from server properties, it was also necessary for users to be able to\n+easily change a setting, even while in the editor. For example, we have a\n+current setting `metals.superMethodLensesEnabled` which when enabled will\n+display a code lens that when invoked will either go to the parent class\n+containing the definition of the method or symbol or display the full method\n+hierarchy allowing you to choose where to go. \n+\n+Here is an example of what this looks like in Vim:\n+![Super Method Hierarchy](https://i.imgur.com/rEvhzG1.png)\n+\n+This feature is actually turned off by default since in very large code bases\n+you may experience a lag. So if a user wanted to turn this on, it wouldn't be a\n+great user experience to have to re-bootstrap the server to enable this feature.\n+This is where the User Configuration comes into play by being able to change a\n+configuration value and notify the server via\n+[`workspace/didChangeConfiguration`](https://microsoft.github.io/language-server-protocol/specification#workspace_didChangeConfiguration).\n+This can fully happen for most of the user configuration values without any need\n+to restart the server. You can see the first configuration options added this\n+way in [this\n+commit](https://github.com/scalameta/metals/commit/f4706ec75afb9bf797e3144f4a0e91bb0b186e07)\n+where the ability to define your `JAVA_HOME` was added. With now allowing for\n+user configurations in Metals, this allowed for an even more customized\n+experience.\n+\n+## Experimental\n+\n+Being able to customize the server with properties and allowing users to pass in\n+some configuration values worked great. However, once Metals started creating\n+LSP extensions for functionality that wasn't supported fully just by LSP, then a\n+way was needed for the client to express that it supported these extensions.\n+This is when Metals started to use the\n+[`ClientCapabilities.experimental`](https://microsoft.github.io/language-server-protocol/specifications/specification-current/#initialize)\n+field which the client needed to declare support the extension. You can see the\n+first inklings of this when the [Tree View\n+Protocol](https://scalameta.org/metals/docs/editors/tree-view-protocol.html) was\n+introduced [here in this\n+commit](https://github.com/scalameta/metals/commit/a55a2413ef10237c8510eb707c0de0cd03b83d85#diff-f8c05eebbf12c9c21a7d568f09b500ea).\n+This then continued to be further expanded as we introduced more extensions.\n+\n+As it became easier for various clients to set this, we slowly [started to\n+migrate](https://github.com/scalameta/metals/pull/1414) other options that could\n+only be previously set via server properties to\n+`ClientCapabilities.experimental`. So settings like which format you'd like the\n+Doctor to return could now be set directly by the client without need to\n+bootstrap the server with a specific property. This allowed for much easier\n+configuration than was previously had.\n+\n+## InitializationOptions\n+\n+Once it was clear that configuring Metals via the client was desirable, a closer\n+look was taken at `InitializationOptions` that can be passed in during the\n+[`initialize`](https://microsoft.github.io/language-server-protocol/specifications/specification-current/#initialize)\n+request. Since any value is able to be passed in this way, a decision was made\n+to fully migrate all the possible settings that were previously set as server\n+properties (except a select few that we'll touch on later), and also move all\n+the of settings that could be set under `experimental` to\n+`InitializationOptions` as well. This ultimately allows for clients to fully\n+configured Metals via `InitializationOptions` without the need to set any server\n+properties. In theory this also meant that you could not use the same Metals\n+executable for VS Code, Vim, or Emacs since the server is fully being configured\n+by the client itself. The current settings that can be passed in and their\n+defaults are explained in detail [here on the\n+website](https://scalameta.org/metals/docs/editors/new-editor.html#initializationoptions),\n+but the interface is as follows:\n+\n+```typescript\n+interface MetalsInitializationOptions {\n+  compilerOptions?: CompilerInitializationOptions;\n+  debuggingProvider?: boolean;\n+  decorationProvider?: boolean;\n+  didFocusProvider?: boolean;\n+  doctorProvider?: \"json\" | \"html\";\n+  executeClientCommandProvider?: boolean;\n+  globSyntax?: \"vscode\" | \"uri\";\n+  icons?: \"vscode\" | \"octicons\" | \"atom\" | \"unicode\";\n+  inputBoxProvider?: boolean;\n+  isExitOnShutdown?: boolean;\n+  isHttpEnabled?: boolean;\n+  openFilesOnRenameProvider?: boolean;\n+  quickPickProvider?: boolean;\n+  renameFileThreshold?: number;\n+  slowTaskProvider?: boolean;\n+  statusBarProvider?: \"on\" | \"off\" | \"log-message\" | \"show-message\";\n+  treeViewProvider?: boolean;\n+  openNewWindowProvider?: boolean;\n+}\n+```\n+```typescript\n+interface CompilerInitializationOptions {\n+  completionCommand?: string;\n+  isCompletionItemDetailEnabled?: boolean;\n+  isCompletionItemDocumentationEnabled?: boolean;\n+  isCompletionItemResolve?: boolean;\n+  isHoverDocumentationEnabled?: boolean;\n+  isSignatureHelpDocumentationEnabled?: boolean;\n+  overrideDefFormat?: \"ascii\" | \"unicode\";\n+  parameterHintsCommand?: string;\n+  snippetAutoIndent?: boolean;\n+}\n+```\n+\n+You'll notice that this allows for a much finer grained configuration if the\n+client chooses to set certain values. Everything from whether or not the Scala\n+Presentation Compiler should populate the `SignatureHelp.documentation` to\n+whether or not the editor supports opening a new window after using the\n+`metals.new-scala-project` command can now be easily configured. Fully\n+configuring Metals through `InitializationOptions` is now the recommended way to\n+configure Metals.\n+\n+## Are there still server properties?\n+\n+While all of the old server properties still exist for Metals, it's no longer\n+recommended to use them to configure Metals. However, there are still a few\n+server properties that remain only server properties since they are not meant to\n+be widely used, and aren't exactly recommended to use for the average user. You\n+can see an up to date list of these [here on the\n+website](https://scalameta.org/metals/docs/editors/new-editor.html#metals-server-properties)\n+and what functionality they provide.\n+\n+## Conclusion\n+\n+As of Metals 0.9.2 it's fully possibly for all clients to use a default\n+bootstrapped Metals that can fully be configured via `InitializationOptions`.\n+There is a freshly updated [Integrating a new\n+editor](https://scalameta.org/metals/docs/editors/new-editor.html) section on\n+the website to help explain how to exactly configure a client for usage with\n+Metals. As always, don't hesitate to reach out on any of the various channels\n+located in the footer or submit an issue to either improve documentation or to\n+log a bug. Also as a reminder, there is a separate repo for\n+[metals-feature-requests](https://github.com/scalameta/metals-feature-requests).\n+\n+\n+Happy Metals using."
  }
]