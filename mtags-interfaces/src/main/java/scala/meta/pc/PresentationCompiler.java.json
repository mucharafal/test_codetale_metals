[
  {
    "id" : "ba7191b6-73f4-459a-887f-8eb14f46fe58",
    "prId" : 736,
    "comments" : [
      {
        "id" : "c1dd30c8-edab-4c39-af04-00ea862a44a8",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "Formatting has gone wild",
        "createdAt" : "2019-05-31T10:41:57Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : null,
    "diffHunk" : "@@ -62,8 +62,7 @@\n \n      */\n     public abstract CompletableFuture<DefinitionResult> definition(OffsetParams params);\n-\n-    /**\n+/**"
  },
  {
    "id" : "48332c52-d70f-4cab-ac85-259bd1b30a2f",
    "prId" : 959,
    "comments" : [
      {
        "id" : "b3ea5c1a-2bc8-4dc1-8ddb-03e3590fc19e",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "`getLocation` -> `typeDefinition`",
        "createdAt" : "2019-10-04T14:10:37Z",
        "updatedAt" : "2019-10-04T14:19:50Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7b0f1eec3bb71a43264c9f32fa70860622c41aaa",
    "line" : 26,
    "diffHunk" : "@@ -57,6 +52,11 @@\n      */\n     public abstract CompletableFuture<Optional<Hover>> hover(OffsetParams params);\n \n+    /**\n+     * Returns location of the expression's type definition at the given position.\n+     */\n+    public abstract CompletableFuture<Optional<Location>> getLocation(OffsetParams params);"
  },
  {
    "id" : "a98183d6-f69c-4f07-a584-944652b9697a",
    "prId" : 978,
    "comments" : [
      {
        "id" : "9b099423-d6b3-4345-890c-5b019456d38b",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "typeDefinition",
        "createdAt" : "2019-10-14T10:12:03Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : null,
    "diffHunk" : "@@ -57,6 +56,11 @@\n      */\n     public abstract CompletableFuture<Optional<Hover>> hover(OffsetParams params);\n \n+    /**\n+     * Returns location of the expression's type definition at the given position.\n+     */\n+    public abstract CompletableFuture<Optional<Location>> getLocation(OffsetParams params);"
  },
  {
    "id" : "e63761ee-71be-42ba-a628-315c9106222f",
    "prId" : 978,
    "comments" : [
      {
        "id" : "1e2fe1f7-3e7c-4a71-8072-88d6829f2036",
        "parentId" : null,
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "> location\r\n\r\ndoes it always return a **single** location? The signature contains a list, so it may be a bit confusing.",
        "createdAt" : "2019-11-13T07:52:59Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0a657784-b1b6-47b9-90c1-003f64c71898",
        "parentId" : "1e2fe1f7-3e7c-4a71-8072-88d6829f2036",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "It does, but typeDefinition in MetalsLanguageServer returns list, so the one in PresentationCompiler return the same type.",
        "createdAt" : "2019-11-13T15:33:56Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f3eba027-7b53-49a8-8419-8ffd982b050b",
        "parentId" : "1e2fe1f7-3e7c-4a71-8072-88d6829f2036",
        "author" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "body" : "If it **always** returns single location, the the type should reflect that. If a list is needed at the call site, then it can be wrapped there. In the end, PresentationCompiler is not a LanguageServer, so there should be no coupling between those",
        "createdAt" : "2019-11-14T15:45:06Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "marek1840",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?u=2bdae30d4b911a57f5cb033e41831a6373de88bb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f0975d66-8e4c-4c1d-87d6-ade35e9cb0c3",
        "parentId" : "1e2fe1f7-3e7c-4a71-8072-88d6829f2036",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "The signature should reflect the LSP protocol, which is a list of locations",
        "createdAt" : "2019-11-16T00:58:11Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "09677e6a-b89c-45dd-b49f-7b31b93ce7ab",
        "parentId" : "1e2fe1f7-3e7c-4a71-8072-88d6829f2036",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "One tricky case where there are multiple type definitions\r\n\r\n```scala\r\ndef overload(a: Int): Int = a\r\ndef overload(a: String): String = a\r\n\r\noverloa@@d // should show both `Int.scala` and `String.scala`\r\n```\r\n\r\n",
        "createdAt" : "2019-11-18T05:16:40Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0687ae2f-88f0-4caf-b4b4-bd21427b2c8e",
        "parentId" : "1e2fe1f7-3e7c-4a71-8072-88d6829f2036",
        "author" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "body" : "Unfortunately compiler returns error in such case.",
        "createdAt" : "2019-12-10T13:00:31Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "sswistun-vl",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56023683?u=f003afed233efe6b3491f405b0affea9c99d3163&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5e31dc6c-1301-46cc-8b19-57d6878907b1",
        "parentId" : "1e2fe1f7-3e7c-4a71-8072-88d6829f2036",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "I don't think it can show both. If we invoke one function then goto definition will only go to one. The same should happen with type definition.",
        "createdAt" : "2019-12-16T14:14:57Z",
        "updatedAt" : "2019-12-18T13:50:19Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "316b10f8dae0939ba80f4ffb8eb60ae0b0fad9ea",
    "line" : 17,
    "diffHunk" : "@@ -57,6 +56,11 @@\n      */\n     public abstract CompletableFuture<Optional<Hover>> hover(OffsetParams params);\n \n+    /**\n+     * Returns location of the expression's type definition at the given position."
  },
  {
    "id" : "d4586c41-d104-4b76-beaa-d10b9b215e0b",
    "prId" : 1065,
    "comments" : [
      {
        "id" : "827f0963-7124-46c7-a425-7ec369762a34",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Maybe we could do something more general:\r\n```\r\npublic abstract CompletableFuture<List<CodeActionResult>> codeAction(String input, ActionType actionType, OffsetParams params);\r\n\r\nenum ActionType{\r\n  Import, Implement, TypeAnnotation\r\n}\r\n```\r\notherwise we will be adding a lot of different methods for each action. ",
        "createdAt" : "2019-12-09T21:08:00Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2bb30c06-a23a-4762-b245-82bdff144491",
        "parentId" : "827f0963-7124-46c7-a425-7ec369762a34",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Good point: I'm torn about this. From one end, I share your concern, from another I'm not sure of what code actions will be implemented so I'm wary of generalizing the API without knowing the use cases.",
        "createdAt" : "2019-12-10T09:55:11Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1b4ab302-feba-421d-8310-23e1f6089065",
        "parentId" : "827f0963-7124-46c7-a425-7ec369762a34",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Ok, let's leave it then and see if generalizing it will be useful in the future. ",
        "createdAt" : "2019-12-11T10:24:51Z",
        "updatedAt" : "2019-12-11T15:30:45Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1e046b2b878d476d389f19bdcaa73ae4b7c121c9",
    "line" : 7,
    "diffHunk" : "@@ -63,6 +63,11 @@\n      */\n     public abstract CompletableFuture<DefinitionResult> definition(OffsetParams params);\n \n+    /**\n+     * Return the necessary imports for a symbol at the given position.\n+     */\n+    public abstract CompletableFuture<List<AutoImportsResult>> autoImports(String name, OffsetParams params);"
  },
  {
    "id" : "0a462277-4cf6-454e-ac42-99b3e4b26dc1",
    "prId" : 1379,
    "comments" : [
      {
        "id" : "dc561522-d10a-4e63-bfec-f0f829ea462f",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "maybe implementAbstactMembers for consistency?",
        "createdAt" : "2020-02-09T21:34:18Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e100253dce0a50a1201510f9bec11fbe8f298bbb",
    "line" : null,
    "diffHunk" : "@@ -68,6 +69,11 @@\n      */\n     public abstract CompletableFuture<List<AutoImportsResult>> autoImports(String name, OffsetParams params);\n \n+    /**\n+     * Return the missing implements and imports for the symbol at the given position.\n+     */\n+    public abstract CompletableFuture<List<TextEdit>> autoImplement(OffsetParams params);"
  },
  {
    "id" : "0a73c0d5-a6e3-4023-bcbc-afc3e7469fc4",
    "prId" : 1523,
    "comments" : [
      {
        "id" : "6ec0ec40-f00c-40ec-bd6f-686434f548b0",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Is it necessary to define this in Java? Feels like we should be able to reuse code in Scala 2 and Scala 3 more easily 🤔 ",
        "createdAt" : "2020-04-08T17:41:54Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0d11fb40-b9bd-471b-bfad-d74e2f241fb0",
        "parentId" : "6ec0ec40-f00c-40ec-bd6f-686434f548b0",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "It was not necessary, but since it was useful to have in both PresentationCompiler implementations I thought it would good to have it here. Especially since this is java code we are interacting with.\r\n\r\nI will put it into a separate object.",
        "createdAt" : "2020-04-10T11:25:55Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8a2b63a6-69f8-4707-a041-aa4da22058fc",
        "parentId" : "6ec0ec40-f00c-40ec-bd6f-686434f548b0",
        "author" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "It's here: https://github.com/scalameta/metals/pull/1523/files#diff-8d0d759de71bb32f0a0f4734991ae91dR1-R14",
        "createdAt" : "2020-04-10T15:54:56Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1142490703f832961ac0df1debd14b4f3b12ce7d",
    "line" : null,
    "diffHunk" : "@@ -161,4 +200,11 @@\n      * detail that the compiler is `null` when it has been reset.\n      */\n     public abstract boolean isLoaded();\n+\n+    protected CompletionList emptyCompletion(){"
  }
]