[{
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "Should this return a structure containing an environment and a list (maybe a small Command class or something)? I couldn't find any instances where env is expected to be non-empty when this function is invoked - that is, it seems like it's just used as a return value.\n",
    "commit": "18c7e4db3b9713c4bc13487e3a15e59b6bf2dc58",
    "createdAt": "2015-02-23T06:08:52Z",
    "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Internal interface that defines a command builder.\n+ */\n+interface CommandBuilder {\n+\n+  List<String> buildCommand(Map<String, String> env) throws IOException;"
  }, {
    "author": {
      "login": "pwendell"
    },
    "body": "If it's going to stay as is, it would be good to document what the calle expects it to contain when invoked, and the fact that the callee will mutate it in place.\n",
    "commit": "18c7e4db3b9713c4bc13487e3a15e59b6bf2dc58",
    "createdAt": "2015-02-23T06:11:04Z",
    "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Internal interface that defines a command builder.\n+ */\n+interface CommandBuilder {\n+\n+  List<String> buildCommand(Map<String, String> env) throws IOException;"
  }],
  "prId": 3916
}, {
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "IMO - it might be simpler to just not have this interface. It's confusing because a lot of the heavy lifting for building commands in in SparkLauncher, but that class doesn't actually implement this. Also, you never interact with `CommandBuilder`'s in a generic way, you only use it in a case where you already have a branch distinguishing the only two possible implementations.\n\nIn cases such as this, I'm not sure it the code simpler to understand when there is an interface.\n",
    "commit": "18c7e4db3b9713c4bc13487e3a15e59b6bf2dc58",
    "createdAt": "2015-02-23T08:00:59Z",
    "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Internal interface that defines a command builder.\n+ */\n+interface CommandBuilder {"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "`Main.java` actually uses `CommandBuilder`.\n",
    "commit": "18c7e4db3b9713c4bc13487e3a15e59b6bf2dc58",
    "createdAt": "2015-02-23T17:44:03Z",
    "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Internal interface that defines a command builder.\n+ */\n+interface CommandBuilder {"
  }],
  "prId": 3916
}]