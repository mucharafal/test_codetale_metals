[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "new line\n",
    "commit": "18c7e4db3b9713c4bc13487e3a15e59b6bf2dc58",
    "createdAt": "2015-01-13T03:31:55Z",
    "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.util.Map;\n+\n+/**\n+ * Configuration key definitions for Spark jobs, and some helper methods.\n+ */\n+public class LauncherCommon {\n+\n+  /** The Spark master. */\n+  public static final String SPARK_MASTER = \"spark.master\";\n+\n+  /** Configuration key for the driver memory. */\n+  public static final String DRIVER_MEMORY = \"spark.driver.memory\";\n+  /** Configuration key for the driver class path. */\n+  public static final String DRIVER_CLASSPATH = \"spark.driver.extraClassPath\";\n+  /** Configuration key for the driver VM options. */\n+  public static final String DRIVER_JAVA_OPTIONS = \"spark.driver.extraJavaOptions\";\n+  /** Configuration key for the driver native library path. */\n+  public static final String DRIVER_LIBRARY_PATH = \"spark.driver.extraLibraryPath\";\n+\n+  /** Configuration key for the executor memory. */\n+  public static final String EXECUTOR_MEMORY = \"spark.executor.memory\";\n+  /** Configuration key for the executor class path. */\n+  public static final String EXECUTOR_CLASSPATH = \"spark.executor.extraClassPath\";\n+  /** Configuration key for the executor VM options. */\n+  public static final String EXECUTOR_JAVA_OPTIONS = \"spark.executor.extraJavaOptions\";\n+  /** Configuration key for the executor native library path. */\n+  public static final String EXECUTOR_LIBRARY_PATH = \"spark.executor.extraLibraryOptions\";\n+  /** Configuration key for the number of executor CPU cores. */\n+  public static final String EXECUTOR_CORES = \"spark.executor.cores\";\n+\n+  protected static boolean isEmpty(String s) {\n+    return s == null || s.isEmpty();\n+  }\n+\n+  protected static String join(String sep, String... elements) {\n+    StringBuilder sb = new StringBuilder();\n+    for (String e : elements) {\n+      if (e != null) {\n+        if (sb.length() > 0) {\n+          sb.append(sep);\n+        }\n+        sb.append(e);\n+      }\n+    }\n+    return sb.toString();\n+  }\n+\n+  protected static String join(String sep, Iterable<String> elements) {\n+    StringBuilder sb = new StringBuilder();\n+    for (String e : elements) {\n+      if (e != null) {\n+        if (sb.length() > 0) {\n+          sb.append(sep);\n+        }\n+        sb.append(e);\n+      }\n+    }\n+    return sb.toString();\n+  }\n+\n+  protected static String find(String key, Map<?, ?>... maps) {\n+    for (Map<?, ?> map : maps) {\n+      String value = (String) map.get(key);\n+      if (!isEmpty(value)) {\n+        return value;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  protected static String first(String... candidates) {\n+    for (String s : candidates) {\n+      if (!isEmpty(s)) {\n+        return s;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  protected static void checkNotNull(Object o, String arg) {\n+    if (o == null) {\n+      throw new IllegalArgumentException(String.format(\"'%s' must not be null.\", arg));\n+    }\n+  }\n+\n+  protected static void checkArgument(boolean check, String msg, Object... args) {\n+    if (!check) {\n+      throw new IllegalArgumentException(String.format(msg, args));\n+    }\n+  }\n+\n+  protected static void checkState(boolean check, String msg, Object... args) {\n+    if (!check) {\n+      throw new IllegalStateException(String.format(msg, args));\n+    }\n+  }\n+\n+  // To avoid subclassing outside this package.\n+  LauncherCommon() { }\n+\n+}"
  }],
  "prId": 3916
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "`firstNonEmpty`. It'll be cool if we could have quick java docs for each of these methods\n",
    "commit": "18c7e4db3b9713c4bc13487e3a15e59b6bf2dc58",
    "createdAt": "2015-01-13T19:17:37Z",
    "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.util.Map;\n+\n+/**\n+ * Configuration key definitions for Spark jobs, and some helper methods.\n+ */\n+public class LauncherCommon {\n+\n+  /** The Spark master. */\n+  public static final String SPARK_MASTER = \"spark.master\";\n+\n+  /** Configuration key for the driver memory. */\n+  public static final String DRIVER_MEMORY = \"spark.driver.memory\";\n+  /** Configuration key for the driver class path. */\n+  public static final String DRIVER_CLASSPATH = \"spark.driver.extraClassPath\";\n+  /** Configuration key for the driver VM options. */\n+  public static final String DRIVER_JAVA_OPTIONS = \"spark.driver.extraJavaOptions\";\n+  /** Configuration key for the driver native library path. */\n+  public static final String DRIVER_LIBRARY_PATH = \"spark.driver.extraLibraryPath\";\n+\n+  /** Configuration key for the executor memory. */\n+  public static final String EXECUTOR_MEMORY = \"spark.executor.memory\";\n+  /** Configuration key for the executor class path. */\n+  public static final String EXECUTOR_CLASSPATH = \"spark.executor.extraClassPath\";\n+  /** Configuration key for the executor VM options. */\n+  public static final String EXECUTOR_JAVA_OPTIONS = \"spark.executor.extraJavaOptions\";\n+  /** Configuration key for the executor native library path. */\n+  public static final String EXECUTOR_LIBRARY_PATH = \"spark.executor.extraLibraryOptions\";\n+  /** Configuration key for the number of executor CPU cores. */\n+  public static final String EXECUTOR_CORES = \"spark.executor.cores\";\n+\n+  protected static boolean isEmpty(String s) {\n+    return s == null || s.isEmpty();\n+  }\n+\n+  protected static String join(String sep, String... elements) {\n+    StringBuilder sb = new StringBuilder();\n+    for (String e : elements) {\n+      if (e != null) {\n+        if (sb.length() > 0) {\n+          sb.append(sep);\n+        }\n+        sb.append(e);\n+      }\n+    }\n+    return sb.toString();\n+  }\n+\n+  protected static String join(String sep, Iterable<String> elements) {\n+    StringBuilder sb = new StringBuilder();\n+    for (String e : elements) {\n+      if (e != null) {\n+        if (sb.length() > 0) {\n+          sb.append(sep);\n+        }\n+        sb.append(e);\n+      }\n+    }\n+    return sb.toString();\n+  }\n+\n+  protected static String find(String key, Map<?, ?>... maps) {\n+    for (Map<?, ?> map : maps) {\n+      String value = (String) map.get(key);\n+      if (!isEmpty(value)) {\n+        return value;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  protected static String first(String... candidates) {"
  }],
  "prId": 3916
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "these should be `DRIVER_EXTRA_*`, same as the corresponding executor ones\n",
    "commit": "18c7e4db3b9713c4bc13487e3a15e59b6bf2dc58",
    "createdAt": "2015-01-13T22:29:48Z",
    "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.util.Map;\n+\n+/**\n+ * Configuration key definitions for Spark jobs, and some helper methods.\n+ */\n+public class LauncherCommon {\n+\n+  /** The Spark master. */\n+  public static final String SPARK_MASTER = \"spark.master\";\n+\n+  /** Configuration key for the driver memory. */\n+  public static final String DRIVER_MEMORY = \"spark.driver.memory\";\n+  /** Configuration key for the driver class path. */\n+  public static final String DRIVER_CLASSPATH = \"spark.driver.extraClassPath\";\n+  /** Configuration key for the driver VM options. */\n+  public static final String DRIVER_JAVA_OPTIONS = \"spark.driver.extraJavaOptions\";\n+  /** Configuration key for the driver native library path. */\n+  public static final String DRIVER_LIBRARY_PATH = \"spark.driver.extraLibraryPath\";"
  }],
  "prId": 3916
}, {
  "comments": [{
    "author": {
      "login": "sryza"
    },
    "body": "Why not static?\n",
    "commit": "18c7e4db3b9713c4bc13487e3a15e59b6bf2dc58",
    "createdAt": "2015-01-14T22:15:58Z",
    "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Configuration key definitions for Spark jobs, and some helper methods.\n+ */\n+public class LauncherCommon {\n+\n+  /** The Spark master. */\n+  public static final String SPARK_MASTER = \"spark.master\";\n+\n+  /** Configuration key for the driver memory. */\n+  public static final String DRIVER_MEMORY = \"spark.driver.memory\";\n+  /** Configuration key for the driver class path. */\n+  public static final String DRIVER_EXTRA_CLASSPATH = \"spark.driver.extraClassPath\";\n+  /** Configuration key for the driver VM options. */\n+  public static final String DRIVER_EXTRA_JAVA_OPTIONS = \"spark.driver.extraJavaOptions\";\n+  /** Configuration key for the driver native library path. */\n+  public static final String DRIVER_EXTRA_LIBRARY_PATH = \"spark.driver.extraLibraryPath\";\n+\n+  /** Configuration key for the executor memory. */\n+  public static final String EXECUTOR_MEMORY = \"spark.executor.memory\";\n+  /** Configuration key for the executor class path. */\n+  public static final String EXECUTOR_EXTRA_CLASSPATH = \"spark.executor.extraClassPath\";\n+  /** Configuration key for the executor VM options. */\n+  public static final String EXECUTOR_EXTRA_JAVA_OPTIONS = \"spark.executor.extraJavaOptions\";\n+  /** Configuration key for the executor native library path. */\n+  public static final String EXECUTOR_EXTRA_LIBRARY_PATH = \"spark.executor.extraLibraryOptions\";\n+  /** Configuration key for the number of executor CPU cores. */\n+  public static final String EXECUTOR_CORES = \"spark.executor.cores\";\n+\n+  /** Returns whether the given string is null or empty. */\n+  protected static boolean isEmpty(String s) {\n+    return s == null || s.isEmpty();\n+  }\n+\n+  /** Joins a list of strings using the given separator. */\n+  protected static String join(String sep, String... elements) {\n+    StringBuilder sb = new StringBuilder();\n+    for (String e : elements) {\n+      if (e != null) {\n+        if (sb.length() > 0) {\n+          sb.append(sep);\n+        }\n+        sb.append(e);\n+      }\n+    }\n+    return sb.toString();\n+  }\n+\n+  /** Joins a list of strings using the given separator. */\n+  protected static String join(String sep, Iterable<String> elements) {\n+    StringBuilder sb = new StringBuilder();\n+    for (String e : elements) {\n+      if (e != null) {\n+        if (sb.length() > 0) {\n+          sb.append(sep);\n+        }\n+        sb.append(e);\n+      }\n+    }\n+    return sb.toString();\n+  }\n+\n+  /** Returns the first value mapped to the given key in the given maps. */\n+  protected static String find(String key, Map<?, ?>... maps) {\n+    for (Map<?, ?> map : maps) {\n+      String value = (String) map.get(key);\n+      if (!isEmpty(value)) {\n+        return value;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /** Returns the first non-empty, non-null string in the given list. */\n+  protected static String firstNonEmpty(String... candidates) {\n+    for (String s : candidates) {\n+      if (!isEmpty(s)) {\n+        return s;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /** Returns the name of the env variable that holds the native library path. */\n+  protected static String getLibPathEnvName() {\n+    if (isWindows()) {\n+      return \"PATH\";\n+    }\n+\n+    String os = System.getProperty(\"os.name\");\n+    if (os.startsWith(\"Mac OS X\")) {\n+      return \"DYLD_LIBRARY_PATH\";\n+    } else {\n+      return \"LD_LIBRARY_PATH\";\n+    }\n+  }\n+\n+  /** Returns whether the OS is Windows. */\n+  protected static boolean isWindows() {\n+    String os = System.getProperty(\"os.name\");\n+    return os.startsWith(\"Windows\");\n+  }\n+\n+  /**\n+   * Updates the user environment to contain the merged value of \"envKey\" after appending\n+   * the given path list.\n+   */\n+  protected void mergeEnvPathList(Map<String, String> userEnv, String envKey, String pathList) {"
  }],
  "prId": 3916
}, {
  "comments": [{
    "author": {
      "login": "sryza"
    },
    "body": "Can this be replaced with Guava's `Joiner.on`?  Or are we somehow avoiding Guava's inclusion?\n",
    "commit": "18c7e4db3b9713c4bc13487e3a15e59b6bf2dc58",
    "createdAt": "2015-01-14T22:26:48Z",
    "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Configuration key definitions for Spark jobs, and some helper methods.\n+ */\n+public class LauncherCommon {\n+\n+  /** The Spark master. */\n+  public static final String SPARK_MASTER = \"spark.master\";\n+\n+  /** Configuration key for the driver memory. */\n+  public static final String DRIVER_MEMORY = \"spark.driver.memory\";\n+  /** Configuration key for the driver class path. */\n+  public static final String DRIVER_EXTRA_CLASSPATH = \"spark.driver.extraClassPath\";\n+  /** Configuration key for the driver VM options. */\n+  public static final String DRIVER_EXTRA_JAVA_OPTIONS = \"spark.driver.extraJavaOptions\";\n+  /** Configuration key for the driver native library path. */\n+  public static final String DRIVER_EXTRA_LIBRARY_PATH = \"spark.driver.extraLibraryPath\";\n+\n+  /** Configuration key for the executor memory. */\n+  public static final String EXECUTOR_MEMORY = \"spark.executor.memory\";\n+  /** Configuration key for the executor class path. */\n+  public static final String EXECUTOR_EXTRA_CLASSPATH = \"spark.executor.extraClassPath\";\n+  /** Configuration key for the executor VM options. */\n+  public static final String EXECUTOR_EXTRA_JAVA_OPTIONS = \"spark.executor.extraJavaOptions\";\n+  /** Configuration key for the executor native library path. */\n+  public static final String EXECUTOR_EXTRA_LIBRARY_PATH = \"spark.executor.extraLibraryOptions\";\n+  /** Configuration key for the number of executor CPU cores. */\n+  public static final String EXECUTOR_CORES = \"spark.executor.cores\";\n+\n+  /** Returns whether the given string is null or empty. */\n+  protected static boolean isEmpty(String s) {\n+    return s == null || s.isEmpty();\n+  }\n+\n+  /** Joins a list of strings using the given separator. */\n+  protected static String join(String sep, String... elements) {\n+    StringBuilder sb = new StringBuilder();\n+    for (String e : elements) {\n+      if (e != null) {\n+        if (sb.length() > 0) {\n+          sb.append(sep);\n+        }\n+        sb.append(e);\n+      }\n+    }\n+    return sb.toString();\n+  }\n+\n+  /** Joins a list of strings using the given separator. */"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "This library should not have any external dependencies.\n",
    "commit": "18c7e4db3b9713c4bc13487e3a15e59b6bf2dc58",
    "createdAt": "2015-01-14T22:30:47Z",
    "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Configuration key definitions for Spark jobs, and some helper methods.\n+ */\n+public class LauncherCommon {\n+\n+  /** The Spark master. */\n+  public static final String SPARK_MASTER = \"spark.master\";\n+\n+  /** Configuration key for the driver memory. */\n+  public static final String DRIVER_MEMORY = \"spark.driver.memory\";\n+  /** Configuration key for the driver class path. */\n+  public static final String DRIVER_EXTRA_CLASSPATH = \"spark.driver.extraClassPath\";\n+  /** Configuration key for the driver VM options. */\n+  public static final String DRIVER_EXTRA_JAVA_OPTIONS = \"spark.driver.extraJavaOptions\";\n+  /** Configuration key for the driver native library path. */\n+  public static final String DRIVER_EXTRA_LIBRARY_PATH = \"spark.driver.extraLibraryPath\";\n+\n+  /** Configuration key for the executor memory. */\n+  public static final String EXECUTOR_MEMORY = \"spark.executor.memory\";\n+  /** Configuration key for the executor class path. */\n+  public static final String EXECUTOR_EXTRA_CLASSPATH = \"spark.executor.extraClassPath\";\n+  /** Configuration key for the executor VM options. */\n+  public static final String EXECUTOR_EXTRA_JAVA_OPTIONS = \"spark.executor.extraJavaOptions\";\n+  /** Configuration key for the executor native library path. */\n+  public static final String EXECUTOR_EXTRA_LIBRARY_PATH = \"spark.executor.extraLibraryOptions\";\n+  /** Configuration key for the number of executor CPU cores. */\n+  public static final String EXECUTOR_CORES = \"spark.executor.cores\";\n+\n+  /** Returns whether the given string is null or empty. */\n+  protected static boolean isEmpty(String s) {\n+    return s == null || s.isEmpty();\n+  }\n+\n+  /** Joins a list of strings using the given separator. */\n+  protected static String join(String sep, String... elements) {\n+    StringBuilder sb = new StringBuilder();\n+    for (String e : elements) {\n+      if (e != null) {\n+        if (sb.length() > 0) {\n+          sb.append(sep);\n+        }\n+        sb.append(e);\n+      }\n+    }\n+    return sb.toString();\n+  }\n+\n+  /** Joins a list of strings using the given separator. */"
  }],
  "prId": 3916
}, {
  "comments": [{
    "author": {
      "login": "sryza"
    },
    "body": "Nit: should be \"Spark apps\"\n",
    "commit": "18c7e4db3b9713c4bc13487e3a15e59b6bf2dc58",
    "createdAt": "2015-01-14T22:29:08Z",
    "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Configuration key definitions for Spark jobs, and some helper methods."
  }],
  "prId": 3916
}, {
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "We have more often used the name `XUtils` than `XCommon` - but no strong feelings.\n",
    "commit": "18c7e4db3b9713c4bc13487e3a15e59b6bf2dc58",
    "createdAt": "2015-02-19T02:20:41Z",
    "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Configuration key definitions for Spark apps, and some helper methods.\n+ */\n+public class LauncherCommon {"
  }],
  "prId": 3916
}]