[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "unindent\n",
    "commit": "18c7e4db3b9713c4bc13487e3a15e59b6bf2dc58",
    "createdAt": "2015-01-13T03:32:34Z",
    "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+/**\n+ * Launcher for PySpark.\n+ * <p/>\n+ * Handles parsing command line options passed to the pyspark script. This allows\n+ * sharing that logic with other launchers, to keep them in sync.\n+ */\n+class PySparkLauncher extends AbstractLauncher<PySparkLauncher> {\n+\n+  private final List<String> args;\n+\n+  PySparkLauncher(List<String> args) {\n+    this.args = args;\n+  }\n+\n+  @Override\n+  protected List<String> buildLauncherCommand() throws IOException {\n+    SparkSubmitCliLauncher launcher = new SparkSubmitCliLauncher(true, args);\n+\n+    // For backwards compatibility, if a script is specified in\n+    // the pyspark command line, then run it using spark-submit.\n+    if (!launcher.getArgs().isEmpty() && launcher.getArgs().get(0).endsWith(\".py\")) {\n+      System.err.println(\n+        \"WARNING: Running python applications through 'pyspark' is deprecated as of Spark 1.0.\\n\" +\n+        \"Use ./bin/spark-submit <python file>\");\n+      return launcher.buildLauncherCommand();\n+    }\n+\n+    // When launching the pyspark shell, the spark-submit arguments should be stored in the\n+    // PYSPARK_SUBMIT_ARGS env variable. The executable is the PYSPARK_DRIVER_PYTHON env variable\n+    // set by the pyspark script, followed by PYSPARK_DRIVER_PYTHON_OPTS.\n+    checkArgument(launcher.getArgs().isEmpty(),\n+        \"pyspark does not support any application options.\");"
  }],
  "prId": 3916
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "It's weird that the `PySparkLauncher` internally creates a `SparkSubmitCliLauncher` to build the command. I think `SparkSubmitCliLauncher` can just handle all the logic with something like the following:\n\n```\nprotected List<String> buildLauncherCommand() {\n  if (isPython(getAppResource)) {\n    buildPythonLauncherCommand() // another private method\n  } else {\n    super.buildLauncherCommand()\n  }\n}\n```\n",
    "commit": "18c7e4db3b9713c4bc13487e3a15e59b6bf2dc58",
    "createdAt": "2015-01-13T23:21:15Z",
    "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+/**\n+ * Launcher for PySpark.\n+ * <p/>\n+ * Handles parsing command line options passed to the pyspark script. This allows\n+ * sharing that logic with other launchers, to keep them in sync.\n+ */\n+class PySparkLauncher extends AbstractLauncher<PySparkLauncher> {\n+\n+  private final List<String> args;\n+\n+  PySparkLauncher(List<String> args) {\n+    this.args = args;\n+  }\n+\n+  @Override\n+  protected List<String> buildLauncherCommand() throws IOException {\n+    SparkSubmitCliLauncher launcher = new SparkSubmitCliLauncher(true, args);"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "This also allows `bin/pyspark` to go through `bin/spark-submit` as before, since we push the handling of the divergence in behavior all the way to `SparkSubmitCliLauncher`.\n\nThis PR currently has `bin/pyspark` calling `bin/spark-class` by providing a special class called \"pyspark\", which isn't intuitive to me because \"pyspark\" isn't really a class.\n",
    "commit": "18c7e4db3b9713c4bc13487e3a15e59b6bf2dc58",
    "createdAt": "2015-01-13T23:24:26Z",
    "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+/**\n+ * Launcher for PySpark.\n+ * <p/>\n+ * Handles parsing command line options passed to the pyspark script. This allows\n+ * sharing that logic with other launchers, to keep them in sync.\n+ */\n+class PySparkLauncher extends AbstractLauncher<PySparkLauncher> {\n+\n+  private final List<String> args;\n+\n+  PySparkLauncher(List<String> args) {\n+    this.args = args;\n+  }\n+\n+  @Override\n+  protected List<String> buildLauncherCommand() throws IOException {\n+    SparkSubmitCliLauncher launcher = new SparkSubmitCliLauncher(true, args);"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "`bin/pyspark` did not go through `spark-submit` nor `spark-class` before. It did its own thing to parse the `spark-submit` arguments and stash them in an environment variable. The code that calls `spark-submit` is in `java_gateway.py` and it's still there.\n\nI wanted to avoid that extra duplicated  command line parsing code, but for that I needed to make `bin/pyspark` go through the launcher library. I can call `spark-submit` but I'd need to special case in much the same way - because I'd have to create a special resource name to identify the pyspark shell and trigger the \"generate the pyspark command\" mode.\n\nAnyway, that can probably clean up some things in the internal API, so let me take a stab.\n",
    "commit": "18c7e4db3b9713c4bc13487e3a15e59b6bf2dc58",
    "createdAt": "2015-01-13T23:43:46Z",
    "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+/**\n+ * Launcher for PySpark.\n+ * <p/>\n+ * Handles parsing command line options passed to the pyspark script. This allows\n+ * sharing that logic with other launchers, to keep them in sync.\n+ */\n+class PySparkLauncher extends AbstractLauncher<PySparkLauncher> {\n+\n+  private final List<String> args;\n+\n+  PySparkLauncher(List<String> args) {\n+    this.args = args;\n+  }\n+\n+  @Override\n+  protected List<String> buildLauncherCommand() throws IOException {\n+    SparkSubmitCliLauncher launcher = new SparkSubmitCliLauncher(true, args);"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "Ok, by \"going through spark-submit\" I mean it calls spark-submit, directly or indirectly. Previously it would still call `bin/spark-submit` as a subprocess in `java_gateway.py`.\n",
    "commit": "18c7e4db3b9713c4bc13487e3a15e59b6bf2dc58",
    "createdAt": "2015-01-14T00:33:32Z",
    "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+/**\n+ * Launcher for PySpark.\n+ * <p/>\n+ * Handles parsing command line options passed to the pyspark script. This allows\n+ * sharing that logic with other launchers, to keep them in sync.\n+ */\n+class PySparkLauncher extends AbstractLauncher<PySparkLauncher> {\n+\n+  private final List<String> args;\n+\n+  PySparkLauncher(List<String> args) {\n+    this.args = args;\n+  }\n+\n+  @Override\n+  protected List<String> buildLauncherCommand() throws IOException {\n+    SparkSubmitCliLauncher launcher = new SparkSubmitCliLauncher(true, args);"
  }],
  "prId": 3916
}]