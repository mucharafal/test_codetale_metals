[{
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "remove extra blank newlines\n",
    "commit": "10513ec4a1cee2de26104945dc2eae54efeed9d2",
    "createdAt": "2016-09-08T13:53:54Z",
    "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+\n+public abstract class AbstractSparkAppHandle implements SparkAppHandle {\n+  private static final Logger LOG = Logger.getLogger(AbstractSparkAppHandle.class.getName());\n+  protected final String secret;\n+  protected final LauncherServer server;\n+  protected boolean disposed;\n+  protected List<Listener> listeners;\n+  protected State state;\n+  private LauncherConnection connection;\n+  private String appId;\n+\n+  OutputRedirector redirector;\n+"
  }],
  "prId": 15009
}, {
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "remove extra newline\n",
    "commit": "10513ec4a1cee2de26104945dc2eae54efeed9d2",
    "createdAt": "2016-09-08T13:56:12Z",
    "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+\n+public abstract class AbstractSparkAppHandle implements SparkAppHandle {\n+  private static final Logger LOG = Logger.getLogger(AbstractSparkAppHandle.class.getName());\n+  protected final String secret;\n+  protected final LauncherServer server;\n+  protected boolean disposed;\n+  protected List<Listener> listeners;\n+  protected State state;\n+  private LauncherConnection connection;\n+  private String appId;\n+\n+  OutputRedirector redirector;\n+\n+\n+\n+  public AbstractSparkAppHandle(LauncherServer server, String secret) {\n+    this.server = server;\n+    this.secret = secret;\n+    this.state = State.UNKNOWN;\n+  }\n+\n+  @Override\n+  public synchronized void addListener(Listener l) {\n+    if (listeners == null) {\n+      listeners = new ArrayList<>();\n+    }\n+    listeners.add(l);\n+  }\n+\n+  @Override\n+  public State getState() {\n+    return state;\n+  }\n+\n+  @Override\n+  public String getAppId() {\n+    return appId;\n+  }\n+\n+  @Override\n+  public void stop() {\n+    CommandBuilderUtils.checkState(connection != null, \"Application is still not connected.\");\n+    try {\n+      connection.send(new LauncherProtocol.Stop());\n+    } catch (IOException ioe) {\n+      throw new RuntimeException(ioe);\n+    }\n+  }\n+\n+  @Override\n+  public synchronized void disconnect() {\n+    if (!disposed) {\n+      disposed = true;\n+      if (connection != null) {\n+        try {\n+          connection.close();\n+        } catch (IOException ioe) {\n+          // no-op.\n+        }\n+      }\n+      server.unregister(this);\n+      if (redirector != null) {\n+        redirector.stop();\n+      }\n+    }\n+  }\n+\n+  String getSecret() {\n+    return secret;\n+  }\n+\n+  void setConnection(LauncherConnection connection) {\n+    this.connection = connection;\n+  }\n+\n+  LauncherServer getServer() {\n+    return server;\n+  }\n+\n+  LauncherConnection getConnection() {\n+    return connection;\n+  }\n+\n+  void setState(State s) {\n+    if (!state.isFinal()) {\n+      state = s;\n+      fireEvent(false);\n+    } else {\n+      LOG.log(Level.WARNING, \"Backend requested transition from final state {0} to {1}.\",\n+        new Object[]{state, s});\n+    }\n+  }\n+\n+  void setAppId(String appId) {\n+    this.appId = appId;\n+    fireEvent(true);\n+  }\n+\n+  private synchronized void fireEvent(boolean isInfoChanged) {\n+    if (listeners != null) {\n+      for (Listener l : listeners) {\n+        if (isInfoChanged) {\n+          l.infoChanged(this);\n+        } else {\n+          l.stateChanged(this);\n+        }\n+      }\n+    }\n+  }\n+",
    "line": 132
  }],
  "prId": 15009
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: too many blank lines\n",
    "commit": "10513ec4a1cee2de26104945dc2eae54efeed9d2",
    "createdAt": "2016-10-24T21:25:39Z",
    "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+"
  }],
  "prId": 15009
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: please add a blank line between static and non-static fields.\n",
    "commit": "10513ec4a1cee2de26104945dc2eae54efeed9d2",
    "createdAt": "2016-10-24T21:26:54Z",
    "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+\n+public abstract class AbstractSparkAppHandle implements SparkAppHandle {\n+  private static final Logger LOG = Logger.getLogger(AbstractSparkAppHandle.class.getName());\n+  protected final String secret;"
  }],
  "prId": 15009
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: `getName()` is unnecessary.\n",
    "commit": "10513ec4a1cee2de26104945dc2eae54efeed9d2",
    "createdAt": "2016-11-10T19:22:57Z",
    "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+public abstract class AbstractSparkAppHandle implements SparkAppHandle {\n+  private static final Logger LOG = Logger.getLogger(AbstractSparkAppHandle.class.getName());"
  }, {
    "author": {
      "login": "kishorvpatil"
    },
    "body": "`java.util.logging.Logger#getLogger` would complain if argument is not a String.",
    "commit": "10513ec4a1cee2de26104945dc2eae54efeed9d2",
    "createdAt": "2017-02-07T15:06:06Z",
    "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+public abstract class AbstractSparkAppHandle implements SparkAppHandle {\n+  private static final Logger LOG = Logger.getLogger(AbstractSparkAppHandle.class.getName());"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Nevermind, forgot this is java.util.logging not slf4j...",
    "commit": "10513ec4a1cee2de26104945dc2eae54efeed9d2",
    "createdAt": "2017-02-14T00:46:26Z",
    "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.launcher;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+public abstract class AbstractSparkAppHandle implements SparkAppHandle {\n+  private static final Logger LOG = Logger.getLogger(AbstractSparkAppHandle.class.getName());"
  }],
  "prId": 15009
}]