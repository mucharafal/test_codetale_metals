[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "You could check that `parser.HELP` is in the final command.\n",
    "commit": "2941e6273d064376f0e540fa0655c345d9c52461",
    "createdAt": "2016-05-19T19:54:36Z",
    "diffHunk": "@@ -59,6 +59,16 @@ public void testClusterCmdBuilder() throws Exception {\n   }\n \n   @Test\n+  public void testCliHelpAndNoArg() throws Exception {\n+    List<String> sparkSubmitArgs = Arrays.asList(parser.HELP);\n+    Map<String, String> env = new HashMap<>();\n+    List<String> cmd = buildCommand(sparkSubmitArgs, env);"
  }],
  "prId": 13163
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Ah, there's a problem here. This line should be testing `sparkEmptyArgs`. And at that point the assert needs to be moved up a bit.\n\nIn fact, it's better to have two separate test methods (one for help, one for empty).\n",
    "commit": "2941e6273d064376f0e540fa0655c345d9c52461",
    "createdAt": "2016-05-19T23:13:55Z",
    "diffHunk": "@@ -59,6 +59,17 @@ public void testClusterCmdBuilder() throws Exception {\n   }\n \n   @Test\n+  public void testCliHelpAndNoArg() throws Exception {\n+    List<String> sparkSubmitArgs = Arrays.asList(parser.HELP);\n+    Map<String, String> env = new HashMap<>();\n+    List<String> cmd = buildCommand(sparkSubmitArgs, env);\n+\n+    List<String> sparkEmptyArgs = Arrays.asList(\"\");\n+    cmd = buildCommand(sparkSubmitArgs, env);"
  }, {
    "author": {
      "login": "wangmiao1981"
    },
    "body": "I add one more assert for `sparkSubmitArgs` and modified the message of `sparkEmptyArgs`. Local unit test works fine.\n",
    "commit": "2941e6273d064376f0e540fa0655c345d9c52461",
    "createdAt": "2016-05-19T23:31:01Z",
    "diffHunk": "@@ -59,6 +59,17 @@ public void testClusterCmdBuilder() throws Exception {\n   }\n \n   @Test\n+  public void testCliHelpAndNoArg() throws Exception {\n+    List<String> sparkSubmitArgs = Arrays.asList(parser.HELP);\n+    Map<String, String> env = new HashMap<>();\n+    List<String> cmd = buildCommand(sparkSubmitArgs, env);\n+\n+    List<String> sparkEmptyArgs = Arrays.asList(\"\");\n+    cmd = buildCommand(sparkSubmitArgs, env);"
  }],
  "prId": 13163
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "This is still wrong; you're not testing `sparkEmptyArgs` at all!\n\nIf you break this into two different tests, you'll see what I mean, because `sparkSubmitArgs` won't be defined when you're supposed to be testing the empty args list.\n\n(If that makes it clearer, call the first list `helpArgs` instead of `sparkSubmitArgs`; then it will be easier to see that you're using the wrong list in this call.)\n",
    "commit": "2941e6273d064376f0e540fa0655c345d9c52461",
    "createdAt": "2016-05-19T23:49:45Z",
    "diffHunk": "@@ -59,6 +59,18 @@ public void testClusterCmdBuilder() throws Exception {\n   }\n \n   @Test\n+  public void testCliHelpAndNoArg() throws Exception {\n+    List<String> sparkSubmitArgs = Arrays.asList(parser.HELP);\n+    Map<String, String> env = new HashMap<>();\n+    List<String> cmd = buildCommand(sparkSubmitArgs, env);\n+    assertTrue(\"--help should be contained in the final cmd.\", cmd.contains(parser.HELP));\n+\n+    List<String> sparkEmptyArgs = Arrays.asList(\"\");\n+    cmd = buildCommand(sparkSubmitArgs, env);"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Oh, and BTW, you should use `Collections.emptyList()`, because you don't really have an empty args list, but an args list with a single argument that happens to be an empty string.\n",
    "commit": "2941e6273d064376f0e540fa0655c345d9c52461",
    "createdAt": "2016-05-19T23:50:49Z",
    "diffHunk": "@@ -59,6 +59,18 @@ public void testClusterCmdBuilder() throws Exception {\n   }\n \n   @Test\n+  public void testCliHelpAndNoArg() throws Exception {\n+    List<String> sparkSubmitArgs = Arrays.asList(parser.HELP);\n+    Map<String, String> env = new HashMap<>();\n+    List<String> cmd = buildCommand(sparkSubmitArgs, env);\n+    assertTrue(\"--help should be contained in the final cmd.\", cmd.contains(parser.HELP));\n+\n+    List<String> sparkEmptyArgs = Arrays.asList(\"\");\n+    cmd = buildCommand(sparkSubmitArgs, env);"
  }, {
    "author": {
      "login": "wangmiao1981"
    },
    "body": "Sorry for this obvious mistake! It is really a stupid mistake. Thanks for your time!\n",
    "commit": "2941e6273d064376f0e540fa0655c345d9c52461",
    "createdAt": "2016-05-20T04:02:10Z",
    "diffHunk": "@@ -59,6 +59,18 @@ public void testClusterCmdBuilder() throws Exception {\n   }\n \n   @Test\n+  public void testCliHelpAndNoArg() throws Exception {\n+    List<String> sparkSubmitArgs = Arrays.asList(parser.HELP);\n+    Map<String, String> env = new HashMap<>();\n+    List<String> cmd = buildCommand(sparkSubmitArgs, env);\n+    assertTrue(\"--help should be contained in the final cmd.\", cmd.contains(parser.HELP));\n+\n+    List<String> sparkEmptyArgs = Arrays.asList(\"\");\n+    cmd = buildCommand(sparkSubmitArgs, env);"
  }],
  "prId": 13163
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: alignment is incorrect here. I'll fix during merge.\n",
    "commit": "2941e6273d064376f0e540fa0655c345d9c52461",
    "createdAt": "2016-05-20T17:27:05Z",
    "diffHunk": "@@ -59,6 +59,19 @@ public void testClusterCmdBuilder() throws Exception {\n   }\n \n   @Test\n+  public void testCliHelpAndNoArg() throws Exception {\n+    List<String> helpArgs = Arrays.asList(parser.HELP);\n+    Map<String, String> env = new HashMap<>();\n+    List<String> cmd = buildCommand(helpArgs, env);\n+    assertTrue(\"--help should be contained in the final cmd.\", cmd.contains(parser.HELP));\n+\n+    List<String> sparkEmptyArgs = Collections.emptyList();\n+    cmd = buildCommand(sparkEmptyArgs, env);\n+    assertTrue(\"org.apache.spark.deploy.SparkSubmit should be contained in the final cmd of empty input.\",\n+              cmd.contains(\"org.apache.spark.deploy.SparkSubmit\"));",
    "line": 13
  }],
  "prId": 13163
}]