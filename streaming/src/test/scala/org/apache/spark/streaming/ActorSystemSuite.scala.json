[{
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "you don't need to make a streamingContext for this test at all, it just involves akka actors.  In fact, I think this test should get moved to AkkaUtilsSuite as well.\n",
    "commit": "d4bb0e9309df6d681eb7a809590cf859e7930701",
    "createdAt": "2015-05-05T19:56:15Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming\n+\n+import akka.actor.{Actor, Props}\n+import org.apache.spark._\n+import org.apache.spark.util.{AkkaUtils, ConfiguredTimeout}\n+import org.scalatest.concurrent.Timeouts\n+import org.scalatest.{BeforeAndAfter, FunSuite}\n+\n+\n+class EchoActor extends Actor {\n+  def receive: Receive = {\n+    case msg =>\n+      Thread.sleep(1200)\n+      sender() ! msg\n+  }\n+}\n+\n+\n+class ActorSystemSuite extends FunSuite with BeforeAndAfter with Timeouts with Logging {\n+\n+  val master = \"local[2]\"\n+  val appName = this.getClass.getSimpleName\n+  val batchDuration = Milliseconds(500)\n+  val sparkHome = \"someDir\"\n+  val envPair = \"key\" -> \"value\"\n+\n+  var ssc: StreamingContext = null\n+\n+  test(\"actor askWithReply using ConfiguredTimeout\") {\n+    val conf = new SparkConf()\n+\n+    val shortProp = \"spark.ask.short.timeout\"\n+\n+    conf.set(shortProp, \"1s\")\n+\n+    ssc = new StreamingContext(master, appName, batchDuration)",
    "line": 53
  }, {
    "author": {
      "login": "BryanCutler"
    },
    "body": "No problem, in my initial tests I created the Actors from the ActorSystem, so I thought that was required.  I'll rework this into AkkaUtilsSuite and shorten the timeouts as you mentioned below.\n",
    "commit": "d4bb0e9309df6d681eb7a809590cf859e7930701",
    "createdAt": "2015-05-06T21:22:57Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming\n+\n+import akka.actor.{Actor, Props}\n+import org.apache.spark._\n+import org.apache.spark.util.{AkkaUtils, ConfiguredTimeout}\n+import org.scalatest.concurrent.Timeouts\n+import org.scalatest.{BeforeAndAfter, FunSuite}\n+\n+\n+class EchoActor extends Actor {\n+  def receive: Receive = {\n+    case msg =>\n+      Thread.sleep(1200)\n+      sender() ! msg\n+  }\n+}\n+\n+\n+class ActorSystemSuite extends FunSuite with BeforeAndAfter with Timeouts with Logging {\n+\n+  val master = \"local[2]\"\n+  val appName = this.getClass.getSimpleName\n+  val batchDuration = Milliseconds(500)\n+  val sparkHome = \"someDir\"\n+  val envPair = \"key\" -> \"value\"\n+\n+  var ssc: StreamingContext = null\n+\n+  test(\"actor askWithReply using ConfiguredTimeout\") {\n+    val conf = new SparkConf()\n+\n+    val shortProp = \"spark.ask.short.timeout\"\n+\n+    conf.set(shortProp, \"1s\")\n+\n+    ssc = new StreamingContext(master, appName, batchDuration)",
    "line": 53
  }],
  "prId": 5741
}, {
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "you could get around the fact that the conf timeouts have a minimum time of seconds by directly creating your timeout here: `new ConfiguredTimeout(20 milliseconds, \"This timeout is configured by foobar\")`.  1 second for a test is not the end of the world, but would be nice to get it shorter.  I'd also be sure to have one test where the reply _is_ received within the timeout, so that we know we don't always incorrectly throw the exception.\n",
    "commit": "d4bb0e9309df6d681eb7a809590cf859e7930701",
    "createdAt": "2015-05-05T20:00:46Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming\n+\n+import akka.actor.{Actor, Props}\n+import org.apache.spark._\n+import org.apache.spark.util.{AkkaUtils, ConfiguredTimeout}\n+import org.scalatest.concurrent.Timeouts\n+import org.scalatest.{BeforeAndAfter, FunSuite}\n+\n+\n+class EchoActor extends Actor {\n+  def receive: Receive = {\n+    case msg =>\n+      Thread.sleep(1200)\n+      sender() ! msg\n+  }\n+}\n+\n+\n+class ActorSystemSuite extends FunSuite with BeforeAndAfter with Timeouts with Logging {\n+\n+  val master = \"local[2]\"\n+  val appName = this.getClass.getSimpleName\n+  val batchDuration = Milliseconds(500)\n+  val sparkHome = \"someDir\"\n+  val envPair = \"key\" -> \"value\"\n+\n+  var ssc: StreamingContext = null\n+\n+  test(\"actor askWithReply using ConfiguredTimeout\") {\n+    val conf = new SparkConf()\n+\n+    val shortProp = \"spark.ask.short.timeout\"\n+\n+    conf.set(shortProp, \"1s\")\n+\n+    ssc = new StreamingContext(master, appName, batchDuration)\n+\n+    val actorSystem = AkkaUtils.createActorSystem(\"EchoActors\", \"127.0.0.1\", 9999, conf = conf,\n+      securityManager = new SecurityManager(conf))._1\n+\n+    val askingActor = actorSystem.actorOf(Props[EchoActor], \"AskingActor\")\n+\n+    AkkaUtils.askWithReply[String](\"this should echo\", askingActor, 1, 0,\n+      ConfiguredTimeout.createAskTimeout(conf))",
    "line": 61
  }],
  "prId": 5741
}, {
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "this can be simplified to:\n\n```\nval exc = intercept[SparkException] {\n  AkkaUtils.askWithReply[String](\"this should timeout\", askingActor, 1, 0,\n        ConfiguredTimeout(conf, shortProp))\n}\nassert(exc.getCause().getMessage().contains(\"...\"))\n```\n",
    "commit": "d4bb0e9309df6d681eb7a809590cf859e7930701",
    "createdAt": "2015-05-05T20:01:47Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming\n+\n+import akka.actor.{Actor, Props}\n+import org.apache.spark._\n+import org.apache.spark.util.{AkkaUtils, ConfiguredTimeout}\n+import org.scalatest.concurrent.Timeouts\n+import org.scalatest.{BeforeAndAfter, FunSuite}\n+\n+\n+class EchoActor extends Actor {\n+  def receive: Receive = {\n+    case msg =>\n+      Thread.sleep(1200)\n+      sender() ! msg\n+  }\n+}\n+\n+\n+class ActorSystemSuite extends FunSuite with BeforeAndAfter with Timeouts with Logging {\n+\n+  val master = \"local[2]\"\n+  val appName = this.getClass.getSimpleName\n+  val batchDuration = Milliseconds(500)\n+  val sparkHome = \"someDir\"\n+  val envPair = \"key\" -> \"value\"\n+\n+  var ssc: StreamingContext = null\n+\n+  test(\"actor askWithReply using ConfiguredTimeout\") {\n+    val conf = new SparkConf()\n+\n+    val shortProp = \"spark.ask.short.timeout\"\n+\n+    conf.set(shortProp, \"1s\")\n+\n+    ssc = new StreamingContext(master, appName, batchDuration)\n+\n+    val actorSystem = AkkaUtils.createActorSystem(\"EchoActors\", \"127.0.0.1\", 9999, conf = conf,\n+      securityManager = new SecurityManager(conf))._1\n+\n+    val askingActor = actorSystem.actorOf(Props[EchoActor], \"AskingActor\")\n+\n+    AkkaUtils.askWithReply[String](\"this should echo\", askingActor, 1, 0,\n+      ConfiguredTimeout.createAskTimeout(conf))\n+\n+    try {\n+      AkkaUtils.askWithReply[String](\"this should timeout\", askingActor, 1, 0,\n+        ConfiguredTimeout(conf, shortProp))\n+      throw new TestException(\"required exception not raised during AkkaUtils.askWithReply\")\n+    } catch {\n+      case se: SparkException =>\n+        assert(se.getCause().getMessage().contains(shortProp))",
    "line": 69
  }, {
    "author": {
      "login": "BryanCutler"
    },
    "body": "that's a nice trick, thanks!\n",
    "commit": "d4bb0e9309df6d681eb7a809590cf859e7930701",
    "createdAt": "2015-05-06T21:25:08Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming\n+\n+import akka.actor.{Actor, Props}\n+import org.apache.spark._\n+import org.apache.spark.util.{AkkaUtils, ConfiguredTimeout}\n+import org.scalatest.concurrent.Timeouts\n+import org.scalatest.{BeforeAndAfter, FunSuite}\n+\n+\n+class EchoActor extends Actor {\n+  def receive: Receive = {\n+    case msg =>\n+      Thread.sleep(1200)\n+      sender() ! msg\n+  }\n+}\n+\n+\n+class ActorSystemSuite extends FunSuite with BeforeAndAfter with Timeouts with Logging {\n+\n+  val master = \"local[2]\"\n+  val appName = this.getClass.getSimpleName\n+  val batchDuration = Milliseconds(500)\n+  val sparkHome = \"someDir\"\n+  val envPair = \"key\" -> \"value\"\n+\n+  var ssc: StreamingContext = null\n+\n+  test(\"actor askWithReply using ConfiguredTimeout\") {\n+    val conf = new SparkConf()\n+\n+    val shortProp = \"spark.ask.short.timeout\"\n+\n+    conf.set(shortProp, \"1s\")\n+\n+    ssc = new StreamingContext(master, appName, batchDuration)\n+\n+    val actorSystem = AkkaUtils.createActorSystem(\"EchoActors\", \"127.0.0.1\", 9999, conf = conf,\n+      securityManager = new SecurityManager(conf))._1\n+\n+    val askingActor = actorSystem.actorOf(Props[EchoActor], \"AskingActor\")\n+\n+    AkkaUtils.askWithReply[String](\"this should echo\", askingActor, 1, 0,\n+      ConfiguredTimeout.createAskTimeout(conf))\n+\n+    try {\n+      AkkaUtils.askWithReply[String](\"this should timeout\", askingActor, 1, 0,\n+        ConfiguredTimeout(conf, shortProp))\n+      throw new TestException(\"required exception not raised during AkkaUtils.askWithReply\")\n+    } catch {\n+      case se: SparkException =>\n+        assert(se.getCause().getMessage().contains(shortProp))",
    "line": 69
  }],
  "prId": 5741
}]