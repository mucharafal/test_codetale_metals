[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Easier to read if this is made a function and called with two different serializers.\n",
    "commit": "ee452fe45da2fb3b6775b8622b03b8aaafa997b0",
    "createdAt": "2016-01-07T01:44:47Z",
    "diffHunk": "@@ -267,12 +270,17 @@ class StateMapSuite extends SparkFunSuite {\n     assertMap(stateMap, refMap.toMap, time, \"Final state map does not match reference map\")\n   }\n \n-  private def testSerialization[MapType <: StateMap[Int, Int]](\n+  private def testSerialization[MapType <: StateMap[Int, Int] : ClassTag](\n     map: MapType, msg: String): MapType = {\n-    val deserMap = Utils.deserialize[MapType](\n-      Utils.serialize(map), Thread.currentThread().getContextClassLoader)\n-    assertMap(deserMap, map, 1, msg)\n-    deserMap\n+    val deserMaps = Array(new JavaSerializer(conf), new KryoSerializer(conf)).map {"
  }],
  "prId": 10609
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Does this need the ClassTag\n",
    "commit": "ee452fe45da2fb3b6775b8622b03b8aaafa997b0",
    "createdAt": "2016-01-07T20:37:33Z",
    "diffHunk": "@@ -321,4 +336,59 @@ class StateMapSuite extends SparkFunSuite {\n       }\n     }\n   }\n+\n+  test(\"OpenHashMapBasedStateMap - serializing and deserializing with KryoSerializable states\") {\n+    val map = new OpenHashMapBasedStateMap[KryoState, KryoState]()\n+    map.put(new KryoState(\"a\"), new KryoState(\"b\"), 1)\n+    testSerialization(\n+      new KryoSerializer(conf), map, \"error deserializing and serialized KryoSerializable states\")\n+  }\n+\n+  test(\"EmptyStateMap - serializing and deserializing\") {\n+    val map = StateMap.empty[KryoState, KryoState]\n+    // Since EmptyStateMap doesn't contains any date, KryoState won't break JavaSerializer.\n+    assert(serializeAndDeserialize(new JavaSerializer(conf), map).\n+      isInstanceOf[EmptyStateMap[KryoState, KryoState]])\n+    assert(serializeAndDeserialize(new KryoSerializer(conf), map).\n+      isInstanceOf[EmptyStateMap[KryoState, KryoState]])\n+  }\n+\n+  test(\"MapWithStateRDDRecord - serializing and deserializing with KryoSerializable states\") {\n+    val map = new OpenHashMapBasedStateMap[KryoState, KryoState]()\n+    map.put(new KryoState(\"a\"), new KryoState(\"b\"), 1)\n+\n+    val record =\n+      MapWithStateRDDRecord[KryoState, KryoState, KryoState](map, Seq(new KryoState(\"c\")))\n+    val deserRecord = serializeAndDeserialize(new KryoSerializer(conf), record)\n+    assert(!(record eq deserRecord))\n+    assert(record.stateMap.getAll().toSeq === deserRecord.stateMap.getAll().toSeq)\n+    assert(record.mappedData === deserRecord.mappedData)\n+  }\n+\n+  private def serializeAndDeserialize[T: ClassTag](serializer: Serializer, t: T): T = {",
    "line": 114
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "Yes. `deserialize` needs the ClassTag\n",
    "commit": "ee452fe45da2fb3b6775b8622b03b8aaafa997b0",
    "createdAt": "2016-01-07T20:39:50Z",
    "diffHunk": "@@ -321,4 +336,59 @@ class StateMapSuite extends SparkFunSuite {\n       }\n     }\n   }\n+\n+  test(\"OpenHashMapBasedStateMap - serializing and deserializing with KryoSerializable states\") {\n+    val map = new OpenHashMapBasedStateMap[KryoState, KryoState]()\n+    map.put(new KryoState(\"a\"), new KryoState(\"b\"), 1)\n+    testSerialization(\n+      new KryoSerializer(conf), map, \"error deserializing and serialized KryoSerializable states\")\n+  }\n+\n+  test(\"EmptyStateMap - serializing and deserializing\") {\n+    val map = StateMap.empty[KryoState, KryoState]\n+    // Since EmptyStateMap doesn't contains any date, KryoState won't break JavaSerializer.\n+    assert(serializeAndDeserialize(new JavaSerializer(conf), map).\n+      isInstanceOf[EmptyStateMap[KryoState, KryoState]])\n+    assert(serializeAndDeserialize(new KryoSerializer(conf), map).\n+      isInstanceOf[EmptyStateMap[KryoState, KryoState]])\n+  }\n+\n+  test(\"MapWithStateRDDRecord - serializing and deserializing with KryoSerializable states\") {\n+    val map = new OpenHashMapBasedStateMap[KryoState, KryoState]()\n+    map.put(new KryoState(\"a\"), new KryoState(\"b\"), 1)\n+\n+    val record =\n+      MapWithStateRDDRecord[KryoState, KryoState, KryoState](map, Seq(new KryoState(\"c\")))\n+    val deserRecord = serializeAndDeserialize(new KryoSerializer(conf), record)\n+    assert(!(record eq deserRecord))\n+    assert(record.stateMap.getAll().toSeq === deserRecord.stateMap.getAll().toSeq)\n+    assert(record.mappedData === deserRecord.mappedData)\n+  }\n+\n+  private def serializeAndDeserialize[T: ClassTag](serializer: Serializer, t: T): T = {",
    "line": 114
  }],
  "prId": 10609
}]