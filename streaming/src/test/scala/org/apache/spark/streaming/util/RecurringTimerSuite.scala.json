[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "super nit: `t` -> `thread`, got confused with `t` being timer.\n",
    "commit": "e8e490da14b360c3be39fb66d7cc20a01c06decf",
    "createdAt": "2015-09-22T21:29:17Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.util\n+\n+import scala.collection.mutable\n+import scala.concurrent.duration._\n+\n+import org.scalatest.concurrent.Eventually._\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.util.ManualClock\n+\n+class RecurringTimerSuite extends SparkFunSuite {\n+\n+  test(\"basic\") {\n+    val clock = new ManualClock()\n+    val results = new mutable.ArrayBuffer[Long]() with mutable.SynchronizedBuffer[Long]\n+    val timer = new RecurringTimer(clock, 100, time => {\n+      results += time\n+    }, \"RecurringTimerSuite-basic\")\n+    timer.start(0)\n+    eventually(timeout(10.seconds), interval(10.millis)) {\n+      assert(results === Seq(0L))\n+    }\n+    clock.advance(100)\n+    eventually(timeout(10.seconds), interval(10.millis)) {\n+      assert(results === Seq(0L, 100L))\n+    }\n+    clock.advance(200)\n+    eventually(timeout(10.seconds), interval(10.millis)) {\n+      assert(results === Seq(0L, 100L, 200L, 300L))\n+    }\n+    assert(timer.stop(interruptTimer = true) === 300L)\n+  }\n+\n+  test(\"SPARK-10224: call 'callback' after stopping\") {\n+    val clock = new ManualClock()\n+    val results = new mutable.ArrayBuffer[Long]() with mutable.SynchronizedBuffer[Long]\n+    val timer = new RecurringTimer(clock, 100, time => {\n+      results += time\n+    }, \"RecurringTimerSuite-SPARK-10224\")\n+    timer.start(0)\n+    eventually(timeout(10.seconds), interval(10.millis)) {\n+      assert(results === Seq(0L))\n+    }\n+    @volatile var lastTime = -1L\n+    // Now RecurringTimer is waiting for the next interval\n+    val t = new Thread {"
  }],
  "prId": 8417
}]