[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Do we use this convention in Spark? I dont think so. Please replace with { } \n",
    "commit": "339f8540035879f5bf5d3acd83e6f5fc5757d4cf",
    "createdAt": "2015-05-01T03:30:58Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.scheduler\n+\n+import org.scalatest.{BeforeAndAfter, FunSuite}\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.streaming.{Time, Duration, StreamingContext}\n+import org.apache.spark.streaming.dstream.{ReceiverInputDStream, InputDStream}\n+import org.apache.spark.streaming.receiver.Receiver\n+\n+class InputInfoTrackerSuite extends FunSuite with BeforeAndAfter {\n+\n+  private var ssc: StreamingContext = _\n+\n+  before {\n+    val conf = new SparkConf().setMaster(\"local[2]\").setAppName(\"DirectStreamTacker\")\n+    if (ssc == null) {\n+      ssc = new StreamingContext(conf, Duration(1000))\n+    }\n+  }\n+\n+  after {\n+    if (ssc != null) {\n+      ssc.stop()\n+      ssc = null\n+    }\n+  }\n+\n+  test(\"test track the number of input stream\") {\n+    class TestInputDStream extends InputDStream[String](ssc) {\n+      def start() { }\n+      def stop() { }\n+      def compute(validTime: Time): Option[RDD[String]] = ???"
  }],
  "prId": 5680
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Please replace with null. \n",
    "commit": "339f8540035879f5bf5d3acd83e6f5fc5757d4cf",
    "createdAt": "2015-05-01T03:31:12Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.scheduler\n+\n+import org.scalatest.{BeforeAndAfter, FunSuite}\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.streaming.{Time, Duration, StreamingContext}\n+import org.apache.spark.streaming.dstream.{ReceiverInputDStream, InputDStream}\n+import org.apache.spark.streaming.receiver.Receiver\n+\n+class InputInfoTrackerSuite extends FunSuite with BeforeAndAfter {\n+\n+  private var ssc: StreamingContext = _\n+\n+  before {\n+    val conf = new SparkConf().setMaster(\"local[2]\").setAppName(\"DirectStreamTacker\")\n+    if (ssc == null) {\n+      ssc = new StreamingContext(conf, Duration(1000))\n+    }\n+  }\n+\n+  after {\n+    if (ssc != null) {\n+      ssc.stop()\n+      ssc = null\n+    }\n+  }\n+\n+  test(\"test track the number of input stream\") {\n+    class TestInputDStream extends InputDStream[String](ssc) {\n+      def start() { }\n+      def stop() { }\n+      def compute(validTime: Time): Option[RDD[String]] = ???\n+    }\n+\n+    class TestReceiverInputDStream extends ReceiverInputDStream[String](ssc) {\n+      def getReceiver: Receiver[String] = ???"
  }],
  "prId": 5680
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "This is test is unrelated to the InputInfoTracker, so probably should not be in here. Rather put it in `InputStreamsSuite`.\n",
    "commit": "339f8540035879f5bf5d3acd83e6f5fc5757d4cf",
    "createdAt": "2015-05-01T03:38:54Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.scheduler\n+\n+import org.scalatest.{BeforeAndAfter, FunSuite}\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.streaming.{Time, Duration, StreamingContext}\n+import org.apache.spark.streaming.dstream.{ReceiverInputDStream, InputDStream}\n+import org.apache.spark.streaming.receiver.Receiver\n+\n+class InputInfoTrackerSuite extends FunSuite with BeforeAndAfter {\n+\n+  private var ssc: StreamingContext = _\n+\n+  before {\n+    val conf = new SparkConf().setMaster(\"local[2]\").setAppName(\"DirectStreamTacker\")\n+    if (ssc == null) {\n+      ssc = new StreamingContext(conf, Duration(1000))\n+    }\n+  }\n+\n+  after {\n+    if (ssc != null) {\n+      ssc.stop()\n+      ssc = null\n+    }\n+  }\n+\n+  test(\"test track the number of input stream\") {"
  }],
  "prId": 5680
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "I think we need an end-to-end test as well, to test the code path interacting between JobGenerator, StreamingListener and InputInfoTracker. I thought about what is a simple way to do and here is an idea. Checkpoint StreamingListenerSuite. The first test \"batch info\" can be extended to test the numRecords. For that to work, the input stream used in these tests is [TestInputDStream](https://github.com/apache/spark/blob/master/streaming/src/test/scala/org/apache/spark/streaming/TestSuiteBase.scala#L43). You could extend add a line in the TestSuiteBased.compute to post InputInfo. And then test the info in StreamingListenerSuite. Does that make sense?\n",
    "commit": "339f8540035879f5bf5d3acd83e6f5fc5757d4cf",
    "createdAt": "2015-05-01T03:57:19Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.scheduler\n+\n+import org.scalatest.{BeforeAndAfter, FunSuite}\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.streaming.{Time, Duration, StreamingContext}\n+import org.apache.spark.streaming.dstream.{ReceiverInputDStream, InputDStream}\n+import org.apache.spark.streaming.receiver.Receiver\n+\n+class InputInfoTrackerSuite extends FunSuite with BeforeAndAfter {\n+\n+  private var ssc: StreamingContext = _\n+\n+  before {\n+    val conf = new SparkConf().setMaster(\"local[2]\").setAppName(\"DirectStreamTacker\")\n+    if (ssc == null) {\n+      ssc = new StreamingContext(conf, Duration(1000))\n+    }\n+  }\n+\n+  after {\n+    if (ssc != null) {\n+      ssc.stop()\n+      ssc = null\n+    }\n+  }\n+\n+  test(\"test track the number of input stream\") {\n+    class TestInputDStream extends InputDStream[String](ssc) {\n+      def start() { }\n+      def stop() { }\n+      def compute(validTime: Time): Option[RDD[String]] = ???\n+    }\n+\n+    class TestReceiverInputDStream extends ReceiverInputDStream[String](ssc) {\n+      def getReceiver: Receiver[String] = ???\n+    }\n+\n+    // Register input streams\n+    val receiverInputStreams = Array(new TestReceiverInputDStream, new TestReceiverInputDStream)\n+    val inputStreams = Array(new TestInputDStream, new TestInputDStream, new TestInputDStream)\n+\n+    assert(ssc.graph.getInputStreams().length == 5)\n+    assert(ssc.graph.getReceiverInputStreams().length == 2)\n+    assert(ssc.graph.getReceiverInputStreams() === receiverInputStreams)\n+    assert(ssc.graph.getInputStreams().map(_.id) === Array(0, 1, 2, 3, 4))\n+    assert(receiverInputStreams.map(_.id) === Array(0, 1))\n+  }\n+\n+  test(\"test report and get InputInfo from InputInfoTracker\") {\n+    val inputInfoTracker = new InputInfoTracker(ssc)\n+\n+    val streamId1 = 0\n+    val streamId2 = 1\n+    val time = Time(0L)\n+    val inputInfo1 = InputInfo(time, streamId1, 100L)\n+    val inputInfo2 = InputInfo(time, streamId2, 300L)\n+    inputInfoTracker.reportInfo(inputInfo1.batchTime, inputInfo1)\n+    inputInfoTracker.reportInfo(inputInfo2.batchTime, inputInfo2)\n+\n+    val batchTimeToInputInfos = inputInfoTracker.getInfo(time)\n+    assert(batchTimeToInputInfos.size == 2)\n+    assert(batchTimeToInputInfos.keys === Set(streamId1, streamId2))\n+    assert(batchTimeToInputInfos(streamId1) === inputInfo1)\n+    assert(batchTimeToInputInfos(streamId2) === inputInfo2)\n+    assert(inputInfoTracker.getInfo(time)(streamId1) === inputInfo1)\n+  }\n+\n+  test(\"test cleanup InputInfo from InputInfoTracker\") {\n+    val inputInfoTracker = new InputInfoTracker(ssc)\n+\n+    val streamId1 = 0\n+    val inputInfo1 = InputInfo(Time(0), streamId1, 100L)\n+    val inputInfo2 = InputInfo(Time(1), streamId1, 300L)\n+    inputInfoTracker.reportInfo(inputInfo1.batchTime, inputInfo1)\n+    inputInfoTracker.reportInfo(inputInfo2.batchTime, inputInfo2)\n+\n+    inputInfoTracker.cleanup(Time(0))\n+    assert(inputInfoTracker.getInfo(Time(0))(streamId1) === inputInfo1)\n+    assert(inputInfoTracker.getInfo(Time(1))(streamId1) === inputInfo2)\n+\n+    inputInfoTracker.cleanup(Time(1))\n+    assert(inputInfoTracker.getInfo(Time(0)).get(streamId1) === None)\n+    assert(inputInfoTracker.getInfo(Time(1))(streamId1) === inputInfo2)\n+  }",
    "line": 78
  }, {
    "author": {
      "login": "jerryshao"
    },
    "body": "Hi @tdas , what's the meaning of `Checkpoint StreamingListenerSuite`?\n",
    "commit": "339f8540035879f5bf5d3acd83e6f5fc5757d4cf",
    "createdAt": "2015-05-01T05:51:49Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.scheduler\n+\n+import org.scalatest.{BeforeAndAfter, FunSuite}\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.streaming.{Time, Duration, StreamingContext}\n+import org.apache.spark.streaming.dstream.{ReceiverInputDStream, InputDStream}\n+import org.apache.spark.streaming.receiver.Receiver\n+\n+class InputInfoTrackerSuite extends FunSuite with BeforeAndAfter {\n+\n+  private var ssc: StreamingContext = _\n+\n+  before {\n+    val conf = new SparkConf().setMaster(\"local[2]\").setAppName(\"DirectStreamTacker\")\n+    if (ssc == null) {\n+      ssc = new StreamingContext(conf, Duration(1000))\n+    }\n+  }\n+\n+  after {\n+    if (ssc != null) {\n+      ssc.stop()\n+      ssc = null\n+    }\n+  }\n+\n+  test(\"test track the number of input stream\") {\n+    class TestInputDStream extends InputDStream[String](ssc) {\n+      def start() { }\n+      def stop() { }\n+      def compute(validTime: Time): Option[RDD[String]] = ???\n+    }\n+\n+    class TestReceiverInputDStream extends ReceiverInputDStream[String](ssc) {\n+      def getReceiver: Receiver[String] = ???\n+    }\n+\n+    // Register input streams\n+    val receiverInputStreams = Array(new TestReceiverInputDStream, new TestReceiverInputDStream)\n+    val inputStreams = Array(new TestInputDStream, new TestInputDStream, new TestInputDStream)\n+\n+    assert(ssc.graph.getInputStreams().length == 5)\n+    assert(ssc.graph.getReceiverInputStreams().length == 2)\n+    assert(ssc.graph.getReceiverInputStreams() === receiverInputStreams)\n+    assert(ssc.graph.getInputStreams().map(_.id) === Array(0, 1, 2, 3, 4))\n+    assert(receiverInputStreams.map(_.id) === Array(0, 1))\n+  }\n+\n+  test(\"test report and get InputInfo from InputInfoTracker\") {\n+    val inputInfoTracker = new InputInfoTracker(ssc)\n+\n+    val streamId1 = 0\n+    val streamId2 = 1\n+    val time = Time(0L)\n+    val inputInfo1 = InputInfo(time, streamId1, 100L)\n+    val inputInfo2 = InputInfo(time, streamId2, 300L)\n+    inputInfoTracker.reportInfo(inputInfo1.batchTime, inputInfo1)\n+    inputInfoTracker.reportInfo(inputInfo2.batchTime, inputInfo2)\n+\n+    val batchTimeToInputInfos = inputInfoTracker.getInfo(time)\n+    assert(batchTimeToInputInfos.size == 2)\n+    assert(batchTimeToInputInfos.keys === Set(streamId1, streamId2))\n+    assert(batchTimeToInputInfos(streamId1) === inputInfo1)\n+    assert(batchTimeToInputInfos(streamId2) === inputInfo2)\n+    assert(inputInfoTracker.getInfo(time)(streamId1) === inputInfo1)\n+  }\n+\n+  test(\"test cleanup InputInfo from InputInfoTracker\") {\n+    val inputInfoTracker = new InputInfoTracker(ssc)\n+\n+    val streamId1 = 0\n+    val inputInfo1 = InputInfo(Time(0), streamId1, 100L)\n+    val inputInfo2 = InputInfo(Time(1), streamId1, 300L)\n+    inputInfoTracker.reportInfo(inputInfo1.batchTime, inputInfo1)\n+    inputInfoTracker.reportInfo(inputInfo2.batchTime, inputInfo2)\n+\n+    inputInfoTracker.cleanup(Time(0))\n+    assert(inputInfoTracker.getInfo(Time(0))(streamId1) === inputInfo1)\n+    assert(inputInfoTracker.getInfo(Time(1))(streamId1) === inputInfo2)\n+\n+    inputInfoTracker.cleanup(Time(1))\n+    assert(inputInfoTracker.getInfo(Time(0)).get(streamId1) === None)\n+    assert(inputInfoTracker.getInfo(Time(1))(streamId1) === inputInfo2)\n+  }",
    "line": 78
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "Sorry, typo. I meant \"Checkout StreamingListenerSuite.\"\n\n:)\n",
    "commit": "339f8540035879f5bf5d3acd83e6f5fc5757d4cf",
    "createdAt": "2015-05-01T06:14:13Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.scheduler\n+\n+import org.scalatest.{BeforeAndAfter, FunSuite}\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.streaming.{Time, Duration, StreamingContext}\n+import org.apache.spark.streaming.dstream.{ReceiverInputDStream, InputDStream}\n+import org.apache.spark.streaming.receiver.Receiver\n+\n+class InputInfoTrackerSuite extends FunSuite with BeforeAndAfter {\n+\n+  private var ssc: StreamingContext = _\n+\n+  before {\n+    val conf = new SparkConf().setMaster(\"local[2]\").setAppName(\"DirectStreamTacker\")\n+    if (ssc == null) {\n+      ssc = new StreamingContext(conf, Duration(1000))\n+    }\n+  }\n+\n+  after {\n+    if (ssc != null) {\n+      ssc.stop()\n+      ssc = null\n+    }\n+  }\n+\n+  test(\"test track the number of input stream\") {\n+    class TestInputDStream extends InputDStream[String](ssc) {\n+      def start() { }\n+      def stop() { }\n+      def compute(validTime: Time): Option[RDD[String]] = ???\n+    }\n+\n+    class TestReceiverInputDStream extends ReceiverInputDStream[String](ssc) {\n+      def getReceiver: Receiver[String] = ???\n+    }\n+\n+    // Register input streams\n+    val receiverInputStreams = Array(new TestReceiverInputDStream, new TestReceiverInputDStream)\n+    val inputStreams = Array(new TestInputDStream, new TestInputDStream, new TestInputDStream)\n+\n+    assert(ssc.graph.getInputStreams().length == 5)\n+    assert(ssc.graph.getReceiverInputStreams().length == 2)\n+    assert(ssc.graph.getReceiverInputStreams() === receiverInputStreams)\n+    assert(ssc.graph.getInputStreams().map(_.id) === Array(0, 1, 2, 3, 4))\n+    assert(receiverInputStreams.map(_.id) === Array(0, 1))\n+  }\n+\n+  test(\"test report and get InputInfo from InputInfoTracker\") {\n+    val inputInfoTracker = new InputInfoTracker(ssc)\n+\n+    val streamId1 = 0\n+    val streamId2 = 1\n+    val time = Time(0L)\n+    val inputInfo1 = InputInfo(time, streamId1, 100L)\n+    val inputInfo2 = InputInfo(time, streamId2, 300L)\n+    inputInfoTracker.reportInfo(inputInfo1.batchTime, inputInfo1)\n+    inputInfoTracker.reportInfo(inputInfo2.batchTime, inputInfo2)\n+\n+    val batchTimeToInputInfos = inputInfoTracker.getInfo(time)\n+    assert(batchTimeToInputInfos.size == 2)\n+    assert(batchTimeToInputInfos.keys === Set(streamId1, streamId2))\n+    assert(batchTimeToInputInfos(streamId1) === inputInfo1)\n+    assert(batchTimeToInputInfos(streamId2) === inputInfo2)\n+    assert(inputInfoTracker.getInfo(time)(streamId1) === inputInfo1)\n+  }\n+\n+  test(\"test cleanup InputInfo from InputInfoTracker\") {\n+    val inputInfoTracker = new InputInfoTracker(ssc)\n+\n+    val streamId1 = 0\n+    val inputInfo1 = InputInfo(Time(0), streamId1, 100L)\n+    val inputInfo2 = InputInfo(Time(1), streamId1, 300L)\n+    inputInfoTracker.reportInfo(inputInfo1.batchTime, inputInfo1)\n+    inputInfoTracker.reportInfo(inputInfo2.batchTime, inputInfo2)\n+\n+    inputInfoTracker.cleanup(Time(0))\n+    assert(inputInfoTracker.getInfo(Time(0))(streamId1) === inputInfo1)\n+    assert(inputInfoTracker.getInfo(Time(1))(streamId1) === inputInfo2)\n+\n+    inputInfoTracker.cleanup(Time(1))\n+    assert(inputInfoTracker.getInfo(Time(0)).get(streamId1) === None)\n+    assert(inputInfoTracker.getInfo(Time(1))(streamId1) === inputInfo2)\n+  }",
    "line": 78
  }],
  "prId": 5680
}]