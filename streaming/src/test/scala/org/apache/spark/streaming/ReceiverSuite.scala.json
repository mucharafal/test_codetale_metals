[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "So, `10.seconds` is enough? Or, do you need to re-trigger this PR to validate more?\r\nBTW, thank you so much for taking care of this case! This is really an long standing issue.",
    "commit": "f70b3c1149322162401dce1533e05ef909a1ec07",
    "createdAt": "2019-09-20T04:17:45Z",
    "diffHunk": "@@ -106,19 +106,22 @@ class ReceiverSuite extends TestSuiteBase with TimeLimits with Serializable {\n     assert(executor.errors.head.eq(exception))\n \n     // Verify restarting actually stops and starts the receiver\n-    receiver.restart(\"restarting\", null, 600)\n-    eventually(timeout(300.milliseconds), interval(10.milliseconds)) {\n-      // receiver will be stopped async\n-      assert(receiver.isStopped)\n-      assert(receiver.onStopCalled)\n-    }\n-    eventually(timeout(1.second), interval(10.milliseconds)) {\n-      // receiver will be started async\n-      assert(receiver.onStartCalled)\n-      assert(executor.isReceiverStarted)\n+    executor.callsRecorder.reset()\n+    receiver.callsRecorder.reset()\n+    receiver.restart(\"restarting\", null, 100)\n+    eventually(timeout(10.seconds), interval(10.milliseconds)) {",
    "line": 26
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Yes that was actually 1.3 seconds (300ms + 1s) and it hasn't been failing for high probability so it should be pretty enough.",
    "commit": "f70b3c1149322162401dce1533e05ef909a1ec07",
    "createdAt": "2019-09-20T04:21:29Z",
    "diffHunk": "@@ -106,19 +106,22 @@ class ReceiverSuite extends TestSuiteBase with TimeLimits with Serializable {\n     assert(executor.errors.head.eq(exception))\n \n     // Verify restarting actually stops and starts the receiver\n-    receiver.restart(\"restarting\", null, 600)\n-    eventually(timeout(300.milliseconds), interval(10.milliseconds)) {\n-      // receiver will be stopped async\n-      assert(receiver.isStopped)\n-      assert(receiver.onStopCalled)\n-    }\n-    eventually(timeout(1.second), interval(10.milliseconds)) {\n-      // receiver will be started async\n-      assert(receiver.onStartCalled)\n-      assert(executor.isReceiverStarted)\n+    executor.callsRecorder.reset()\n+    receiver.callsRecorder.reset()\n+    receiver.restart(\"restarting\", null, 100)\n+    eventually(timeout(10.seconds), interval(10.milliseconds)) {",
    "line": 26
  }],
  "prId": 25862
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "This goes down from 600 to 100?",
    "commit": "f70b3c1149322162401dce1533e05ef909a1ec07",
    "createdAt": "2019-09-25T17:52:14Z",
    "diffHunk": "@@ -106,19 +106,22 @@ class ReceiverSuite extends TestSuiteBase with TimeLimits with Serializable {\n     assert(executor.errors.head.eq(exception))\n \n     // Verify restarting actually stops and starts the receiver\n-    receiver.restart(\"restarting\", null, 600)\n-    eventually(timeout(300.milliseconds), interval(10.milliseconds)) {\n-      // receiver will be stopped async\n-      assert(receiver.isStopped)\n-      assert(receiver.onStopCalled)\n-    }\n-    eventually(timeout(1.second), interval(10.milliseconds)) {\n-      // receiver will be started async\n-      assert(receiver.onStartCalled)\n-      assert(executor.isReceiverStarted)\n+    executor.callsRecorder.reset()\n+    receiver.callsRecorder.reset()\n+    receiver.restart(\"restarting\", null, 100)",
    "line": 25
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Ah yes we no longer need so long delay as we don't rely on timing.",
    "commit": "f70b3c1149322162401dce1533e05ef909a1ec07",
    "createdAt": "2019-09-25T20:01:13Z",
    "diffHunk": "@@ -106,19 +106,22 @@ class ReceiverSuite extends TestSuiteBase with TimeLimits with Serializable {\n     assert(executor.errors.head.eq(exception))\n \n     // Verify restarting actually stops and starts the receiver\n-    receiver.restart(\"restarting\", null, 600)\n-    eventually(timeout(300.milliseconds), interval(10.milliseconds)) {\n-      // receiver will be stopped async\n-      assert(receiver.isStopped)\n-      assert(receiver.onStopCalled)\n-    }\n-    eventually(timeout(1.second), interval(10.milliseconds)) {\n-      // receiver will be started async\n-      assert(receiver.onStartCalled)\n-      assert(executor.isReceiverStarted)\n+    executor.callsRecorder.reset()\n+    receiver.callsRecorder.reset()\n+    receiver.restart(\"restarting\", null, 100)",
    "line": 25
  }],
  "prId": 25862
}]