[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "please add an unit test that is going to verify whether setting the appropriate params in the SparkConf create the right estimator and the right estimator parameters.\n",
    "commit": "aa5b097e3d58f07feb830f0ff5456088064b7fff",
    "createdAt": "2015-07-30T23:06:18Z",
    "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.scheduler.rate\n+\n+import scala.util.Random\n+\n+import org.scalatest._\n+import org.scalatest.Matchers\n+import org.scalatest.Inspectors._\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class PIDRateEstimatorSuite extends SparkFunSuite with Matchers {\n+\n+  test(\"first bound is None\") {"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "Also add unit test to check whether setting the parameters to incorrect ranges throws errors or not (use intercept[ ] to catch errors)\n",
    "commit": "aa5b097e3d58f07feb830f0ff5456088064b7fff",
    "createdAt": "2015-07-31T00:50:52Z",
    "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.scheduler.rate\n+\n+import scala.util.Random\n+\n+import org.scalatest._\n+import org.scalatest.Matchers\n+import org.scalatest.Inspectors._\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class PIDRateEstimatorSuite extends SparkFunSuite with Matchers {\n+\n+  test(\"first bound is None\") {"
  }],
  "prId": 7648
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "This is hard to understand. Basically the internal state is being mutated in these series of calls. So could you put asserts on the internal state so that I can understand what are the expected changes\n",
    "commit": "aa5b097e3d58f07feb830f0ff5456088064b7fff",
    "createdAt": "2015-07-30T23:08:51Z",
    "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.scheduler.rate\n+\n+import scala.util.Random\n+\n+import org.scalatest._\n+import org.scalatest.Matchers\n+import org.scalatest.Inspectors._\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class PIDRateEstimatorSuite extends SparkFunSuite with Matchers {\n+\n+  test(\"first bound is None\") {\n+    val p = new PIDRateEstimator(20, -1D, 0D, 0D)\n+    p.compute(0, 10, 10, 0) should equal(None)\n+  }\n+\n+  test(\"second bound is rate\") {\n+    val p = new PIDRateEstimator(20, -1D, 0D, 0D)\n+    p.compute(0, 10, 10, 0)\n+    // 1000 elements / s\n+    p.compute(10, 10, 10, 0) should equal(Some(1000))\n+  }\n+\n+  test(\"works even with no time between updates\") {\n+    val p = new PIDRateEstimator(20, -1D, 0D, 0D)\n+    p.compute(0, 10, 10, 0)"
  }, {
    "author": {
      "login": "dragos"
    },
    "body": "This test isn't really about mutating state, but checking that two consecutive updates for the same time doesn't trip the estimator (for instance, a division by zero).\n",
    "commit": "aa5b097e3d58f07feb830f0ff5456088064b7fff",
    "createdAt": "2015-07-31T09:16:39Z",
    "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.scheduler.rate\n+\n+import scala.util.Random\n+\n+import org.scalatest._\n+import org.scalatest.Matchers\n+import org.scalatest.Inspectors._\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class PIDRateEstimatorSuite extends SparkFunSuite with Matchers {\n+\n+  test(\"first bound is None\") {\n+    val p = new PIDRateEstimator(20, -1D, 0D, 0D)\n+    p.compute(0, 10, 10, 0) should equal(None)\n+  }\n+\n+  test(\"second bound is rate\") {\n+    val p = new PIDRateEstimator(20, -1D, 0D, 0D)\n+    p.compute(0, 10, 10, 0)\n+    // 1000 elements / s\n+    p.compute(10, 10, 10, 0) should equal(Some(1000))\n+  }\n+\n+  test(\"works even with no time between updates\") {\n+    val p = new PIDRateEstimator(20, -1D, 0D, 0D)\n+    p.compute(0, 10, 10, 0)"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "Then it will easier to get if inline comments said so ..  // same time as previous update\n",
    "commit": "aa5b097e3d58f07feb830f0ff5456088064b7fff",
    "createdAt": "2015-07-31T09:21:11Z",
    "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.scheduler.rate\n+\n+import scala.util.Random\n+\n+import org.scalatest._\n+import org.scalatest.Matchers\n+import org.scalatest.Inspectors._\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class PIDRateEstimatorSuite extends SparkFunSuite with Matchers {\n+\n+  test(\"first bound is None\") {\n+    val p = new PIDRateEstimator(20, -1D, 0D, 0D)\n+    p.compute(0, 10, 10, 0) should equal(None)\n+  }\n+\n+  test(\"second bound is rate\") {\n+    val p = new PIDRateEstimator(20, -1D, 0D, 0D)\n+    p.compute(0, 10, 10, 0)\n+    // 1000 elements / s\n+    p.compute(10, 10, 10, 0) should equal(Some(1000))\n+  }\n+\n+  test(\"works even with no time between updates\") {\n+    val p = new PIDRateEstimator(20, -1D, 0D, 0D)\n+    p.compute(0, 10, 10, 0)"
  }],
  "prId": 7648
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "If the same parameters are used everywhere, please put this in a function. Easier to read.\n",
    "commit": "aa5b097e3d58f07feb830f0ff5456088064b7fff",
    "createdAt": "2015-07-31T00:47:50Z",
    "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.scheduler.rate\n+\n+import scala.util.Random\n+\n+import org.scalatest._\n+import org.scalatest.Matchers\n+import org.scalatest.Inspectors._\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class PIDRateEstimatorSuite extends SparkFunSuite with Matchers {\n+\n+  test(\"first bound is None\") {\n+    val p = new PIDRateEstimator(20, -1D, 0D, 0D)\n+    p.compute(0, 10, 10, 0) should equal(None)\n+  }\n+\n+  test(\"second bound is rate\") {\n+    val p = new PIDRateEstimator(20, -1D, 0D, 0D)\n+    p.compute(0, 10, 10, 0)\n+    // 1000 elements / s\n+    p.compute(10, 10, 10, 0) should equal(Some(1000))\n+  }\n+\n+  test(\"works even with no time between updates\") {\n+    val p = new PIDRateEstimator(20, -1D, 0D, 0D)"
  }],
  "prId": 7648
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "For each of the test could you explain in words the kind of input pattern you are testing against, and what the expected output be? Its kinda hard to understand it from the tests itself, so I am not to verify whether the test is doing what its supposed to do.\n",
    "commit": "aa5b097e3d58f07feb830f0ff5456088064b7fff",
    "createdAt": "2015-07-31T01:36:17Z",
    "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.scheduler.rate\n+\n+import scala.util.Random\n+\n+import org.scalatest._\n+import org.scalatest.Matchers\n+import org.scalatest.Inspectors._\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class PIDRateEstimatorSuite extends SparkFunSuite with Matchers {\n+\n+  test(\"first bound is None\") {\n+    val p = new PIDRateEstimator(20, -1D, 0D, 0D)\n+    p.compute(0, 10, 10, 0) should equal(None)\n+  }\n+\n+  test(\"second bound is rate\") {\n+    val p = new PIDRateEstimator(20, -1D, 0D, 0D)\n+    p.compute(0, 10, 10, 0)\n+    // 1000 elements / s\n+    p.compute(10, 10, 10, 0) should equal(Some(1000))\n+  }\n+\n+  test(\"works even with no time between updates\") {\n+    val p = new PIDRateEstimator(20, -1D, 0D, 0D)\n+    p.compute(0, 10, 10, 0)\n+    p.compute(10, 10, 10, 0)\n+    p.compute(10, 10, 10, 0) should equal(None)\n+  }\n+\n+  test(\"bound is never negative\") {\n+    val p = new PIDRateEstimator(20, -1D, -1D, 0D)"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "This is important, please add this, otherwise its impossible for me to review and is a blocker. Basically I dont want this piece code to become so exotic so that no one other than you and me understand this in the future. \n",
    "commit": "aa5b097e3d58f07feb830f0ff5456088064b7fff",
    "createdAt": "2015-07-31T09:18:49Z",
    "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.scheduler.rate\n+\n+import scala.util.Random\n+\n+import org.scalatest._\n+import org.scalatest.Matchers\n+import org.scalatest.Inspectors._\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class PIDRateEstimatorSuite extends SparkFunSuite with Matchers {\n+\n+  test(\"first bound is None\") {\n+    val p = new PIDRateEstimator(20, -1D, 0D, 0D)\n+    p.compute(0, 10, 10, 0) should equal(None)\n+  }\n+\n+  test(\"second bound is rate\") {\n+    val p = new PIDRateEstimator(20, -1D, 0D, 0D)\n+    p.compute(0, 10, 10, 0)\n+    // 1000 elements / s\n+    p.compute(10, 10, 10, 0) should equal(Some(1000))\n+  }\n+\n+  test(\"works even with no time between updates\") {\n+    val p = new PIDRateEstimator(20, -1D, 0D, 0D)\n+    p.compute(0, 10, 10, 0)\n+    p.compute(10, 10, 10, 0)\n+    p.compute(10, 10, 10, 0) should equal(None)\n+  }\n+\n+  test(\"bound is never negative\") {\n+    val p = new PIDRateEstimator(20, -1D, -1D, 0D)"
  }],
  "prId": 7648
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Test for the `spark.streaming.backpressure.rateEstimator.pid.*` params as well. \n",
    "commit": "aa5b097e3d58f07feb830f0ff5456088064b7fff",
    "createdAt": "2015-07-31T09:49:19Z",
    "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.scheduler.rate\n+\n+import scala.util.Random\n+\n+import org.scalatest.Inspectors.forAll\n+import org.scalatest.Matchers\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.streaming.Seconds\n+\n+class PIDRateEstimatorSuite extends SparkFunSuite with Matchers {\n+\n+  test(\"the right estimator is created\") {\n+    val conf = new SparkConf\n+    conf.set(\"spark.streaming.backpressure.rateEstimator\", \"pid\")\n+    val pid = RateEstimator.create(conf, Seconds(1))\n+    pid.getClass should equal(classOf[PIDRateEstimator])\n+  }",
    "line": 35
  }],
  "prId": 7648
}]