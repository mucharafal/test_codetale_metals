[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Any specific reason to pull this class out of the method? It doesn't seem to be used anywhere else.\n",
    "commit": "e6524b86c6d9862fb99672f121f038f25b7497db",
    "createdAt": "2015-09-10T23:05:29Z",
    "diffHunk": "@@ -1818,26 +1815,25 @@ public Integer call(String s) throws Exception {\n   // InputStream functionality is deferred to the existing Scala tests.\n   @Test\n   public void testSocketTextStream() {\n-      JavaReceiverInputDStream<String> test = ssc.socketTextStream(\"localhost\", 12345);\n+    ssc.socketTextStream(\"localhost\", 12345);\n   }\n \n-  @Test\n-  public void testSocketString() {\n-\n-    class Converter implements Function<InputStream, Iterable<String>> {"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Declaring classes inside methods is super weird in Java, to me, even if it's allowed. It seemed clearer to establish it as a simple static inner class. I guess I'm not even clear it needs to be non-anonymous, and so on reflection, maybe it just can be an anonymous inner class, which is not weird.\n",
    "commit": "e6524b86c6d9862fb99672f121f038f25b7497db",
    "createdAt": "2015-09-11T09:44:15Z",
    "diffHunk": "@@ -1818,26 +1815,25 @@ public Integer call(String s) throws Exception {\n   // InputStream functionality is deferred to the existing Scala tests.\n   @Test\n   public void testSocketTextStream() {\n-      JavaReceiverInputDStream<String> test = ssc.socketTextStream(\"localhost\", 12345);\n+    ssc.socketTextStream(\"localhost\", 12345);\n   }\n \n-  @Test\n-  public void testSocketString() {\n-\n-    class Converter implements Function<InputStream, Iterable<String>> {"
  }],
  "prId": 8706
}]