[{
  "comments": [{
    "author": {
      "login": "ajbozarth"
    },
    "body": "echoing @vanzin's comment from the previous pr, these should either go on the same line or have brackets",
    "commit": "94dce7728881b02ed10e82120f9c46ed55b24144",
    "createdAt": "2016-12-12T21:42:41Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1.streaming\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.status.api.v1.streaming.AllReceiversResource._\n+import org.apache.spark.streaming.ui.StreamingJobProgressListener\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class AllReceiversResource(listener: StreamingJobProgressListener) {\n+\n+  @GET\n+  def receiversList(): Seq[ReceiverInfo] = {\n+    receiverInfoList(listener).sortBy(_.streamId)\n+  }\n+}\n+\n+private[v1] object AllReceiversResource {\n+\n+  def receiverInfoList(listener: StreamingJobProgressListener): Seq[ReceiverInfo] = {\n+    listener.synchronized {\n+      listener.receivedRecordRateWithBatchTime.map { case (streamId, eventRates) =>\n+\n+        val receiverInfo = listener.receiverInfo(streamId)\n+        val streamName = receiverInfo.map(_.name).\n+          orElse(listener.streamName(streamId)).getOrElse(s\"Stream-$streamId\")\n+        val avgEventRate =\n+          if (eventRates.isEmpty) None\n+          else Some(eventRates.map(_._2).sum / eventRates.size)\n+\n+        val (errorTime, errorMessage, error) = receiverInfo match {\n+          case None => (None, None, None)\n+          case Some(info) =>\n+            val someTime = {\n+              if (info.lastErrorTime >= 0) Some(new Date(info.lastErrorTime))\n+              else None"
  }, {
    "author": {
      "login": "saturday-shi"
    },
    "body": "Uh... I think I misunderstood the comment. You mean something like `if (...) Some(...) else None` should be in the same line?",
    "commit": "94dce7728881b02ed10e82120f9c46ed55b24144",
    "createdAt": "2016-12-13T00:25:47Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1.streaming\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.status.api.v1.streaming.AllReceiversResource._\n+import org.apache.spark.streaming.ui.StreamingJobProgressListener\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class AllReceiversResource(listener: StreamingJobProgressListener) {\n+\n+  @GET\n+  def receiversList(): Seq[ReceiverInfo] = {\n+    receiverInfoList(listener).sortBy(_.streamId)\n+  }\n+}\n+\n+private[v1] object AllReceiversResource {\n+\n+  def receiverInfoList(listener: StreamingJobProgressListener): Seq[ReceiverInfo] = {\n+    listener.synchronized {\n+      listener.receivedRecordRateWithBatchTime.map { case (streamId, eventRates) =>\n+\n+        val receiverInfo = listener.receiverInfo(streamId)\n+        val streamName = receiverInfo.map(_.name).\n+          orElse(listener.streamName(streamId)).getOrElse(s\"Stream-$streamId\")\n+        val avgEventRate =\n+          if (eventRates.isEmpty) None\n+          else Some(eventRates.map(_._2).sum / eventRates.size)\n+\n+        val (errorTime, errorMessage, error) = receiverInfo match {\n+          case None => (None, None, None)\n+          case Some(info) =>\n+            val someTime = {\n+              if (info.lastErrorTime >= 0) Some(new Date(info.lastErrorTime))\n+              else None"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Yes (or, if that doesn't fit in 100 chars, you need to use `{` and `}`).",
    "commit": "94dce7728881b02ed10e82120f9c46ed55b24144",
    "createdAt": "2016-12-13T00:49:39Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1.streaming\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.status.api.v1.streaming.AllReceiversResource._\n+import org.apache.spark.streaming.ui.StreamingJobProgressListener\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class AllReceiversResource(listener: StreamingJobProgressListener) {\n+\n+  @GET\n+  def receiversList(): Seq[ReceiverInfo] = {\n+    receiverInfoList(listener).sortBy(_.streamId)\n+  }\n+}\n+\n+private[v1] object AllReceiversResource {\n+\n+  def receiverInfoList(listener: StreamingJobProgressListener): Seq[ReceiverInfo] = {\n+    listener.synchronized {\n+      listener.receivedRecordRateWithBatchTime.map { case (streamId, eventRates) =>\n+\n+        val receiverInfo = listener.receiverInfo(streamId)\n+        val streamName = receiverInfo.map(_.name).\n+          orElse(listener.streamName(streamId)).getOrElse(s\"Stream-$streamId\")\n+        val avgEventRate =\n+          if (eventRates.isEmpty) None\n+          else Some(eventRates.map(_._2).sum / eventRates.size)\n+\n+        val (errorTime, errorMessage, error) = receiverInfo match {\n+          case None => (None, None, None)\n+          case Some(info) =>\n+            val someTime = {\n+              if (info.lastErrorTime >= 0) Some(new Date(info.lastErrorTime))\n+              else None"
  }],
  "prId": 16253
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: `.` goes on the next line",
    "commit": "94dce7728881b02ed10e82120f9c46ed55b24144",
    "createdAt": "2016-12-15T18:28:08Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1.streaming\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.status.api.v1.streaming.AllReceiversResource._\n+import org.apache.spark.streaming.ui.StreamingJobProgressListener\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class AllReceiversResource(listener: StreamingJobProgressListener) {\n+\n+  @GET\n+  def receiversList(): Seq[ReceiverInfo] = {\n+    receiverInfoList(listener).sortBy(_.streamId)\n+  }\n+}\n+\n+private[v1] object AllReceiversResource {\n+\n+  def receiverInfoList(listener: StreamingJobProgressListener): Seq[ReceiverInfo] = {\n+    listener.synchronized {\n+      listener.receivedRecordRateWithBatchTime.map { case (streamId, eventRates) =>\n+\n+        val receiverInfo = listener.receiverInfo(streamId)\n+        val streamName = receiverInfo.map(_.name)."
  }, {
    "author": {
      "login": "saturday-shi"
    },
    "body": "I used the same style with the similar code in [StreamingPage.scala](https://github.com/apache/spark/blob/e115cdad29ae90c7d0b7da6d2a2e90047dc87985/streaming/src/main/scala/org/apache/spark/streaming/ui/StreamingPage.scala#L435-L436). Should I fix StreamingPage too if this style doesn't looks so good?",
    "commit": "94dce7728881b02ed10e82120f9c46ed55b24144",
    "createdAt": "2016-12-16T00:34:30Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1.streaming\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.status.api.v1.streaming.AllReceiversResource._\n+import org.apache.spark.streaming.ui.StreamingJobProgressListener\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class AllReceiversResource(listener: StreamingJobProgressListener) {\n+\n+  @GET\n+  def receiversList(): Seq[ReceiverInfo] = {\n+    receiverInfoList(listener).sortBy(_.streamId)\n+  }\n+}\n+\n+private[v1] object AllReceiversResource {\n+\n+  def receiverInfoList(listener: StreamingJobProgressListener): Seq[ReceiverInfo] = {\n+    listener.synchronized {\n+      listener.receivedRecordRateWithBatchTime.map { case (streamId, eventRates) =>\n+\n+        val receiverInfo = listener.receiverInfo(streamId)\n+        val streamName = receiverInfo.map(_.name)."
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "No need to fix existing places, but better to follow the usual style in new code.",
    "commit": "94dce7728881b02ed10e82120f9c46ed55b24144",
    "createdAt": "2016-12-16T00:39:31Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1.streaming\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.status.api.v1.streaming.AllReceiversResource._\n+import org.apache.spark.streaming.ui.StreamingJobProgressListener\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class AllReceiversResource(listener: StreamingJobProgressListener) {\n+\n+  @GET\n+  def receiversList(): Seq[ReceiverInfo] = {\n+    receiverInfoList(listener).sortBy(_.streamId)\n+  }\n+}\n+\n+private[v1] object AllReceiversResource {\n+\n+  def receiverInfoList(listener: StreamingJobProgressListener): Seq[ReceiverInfo] = {\n+    listener.synchronized {\n+      listener.receivedRecordRateWithBatchTime.map { case (streamId, eventRates) =>\n+\n+        val receiverInfo = listener.receiverInfo(streamId)\n+        val streamName = receiverInfo.map(_.name)."
  }],
  "prId": 16253
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: style",
    "commit": "94dce7728881b02ed10e82120f9c46ed55b24144",
    "createdAt": "2016-12-15T18:28:24Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1.streaming\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.status.api.v1.streaming.AllReceiversResource._\n+import org.apache.spark.streaming.ui.StreamingJobProgressListener\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class AllReceiversResource(listener: StreamingJobProgressListener) {\n+\n+  @GET\n+  def receiversList(): Seq[ReceiverInfo] = {\n+    receiverInfoList(listener).sortBy(_.streamId)\n+  }\n+}\n+\n+private[v1] object AllReceiversResource {\n+\n+  def receiverInfoList(listener: StreamingJobProgressListener): Seq[ReceiverInfo] = {\n+    listener.synchronized {\n+      listener.receivedRecordRateWithBatchTime.map { case (streamId, eventRates) =>\n+\n+        val receiverInfo = listener.receiverInfo(streamId)\n+        val streamName = receiverInfo.map(_.name).\n+          orElse(listener.streamName(streamId)).getOrElse(s\"Stream-$streamId\")\n+        val avgEventRate =\n+          if (eventRates.isEmpty) None"
  }],
  "prId": 16253
}]