[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Weird, was the compiler complaining about something here?\n",
    "commit": "81d18120bff0a772a566ddfe19e439f309b5d5df",
    "createdAt": "2015-12-02T19:47:38Z",
    "diffHunk": "@@ -48,17 +50,7 @@ private[streaming] class FileBasedWriteAheadLogWriter(path: String, hadoopConf:\n     val lengthToWrite = data.remaining()\n     val segment = new FileBasedWriteAheadLogSegment(path, nextOffset, lengthToWrite)\n     stream.writeInt(lengthToWrite)\n-    if (data.hasArray) {\n-      stream.write(data.array())\n-    } else {\n-      // If the buffer is not backed by an array, we transfer using temp array\n-      // Note that despite the extra array copy, this should be faster than byte-by-byte copy\n-      while (data.hasRemaining) {\n-        val array = new Array[Byte](data.remaining)\n-        data.get(array)\n-        stream.write(array)\n-      }\n-    }\n+    Utils.writeByteBuffer(data, stream: OutputStream)",
    "line": 24
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "Yes. Because `FSDataOutputStream` implements both `OutputStream` and `DataOutput`.\n",
    "commit": "81d18120bff0a772a566ddfe19e439f309b5d5df",
    "createdAt": "2015-12-02T19:50:14Z",
    "diffHunk": "@@ -48,17 +50,7 @@ private[streaming] class FileBasedWriteAheadLogWriter(path: String, hadoopConf:\n     val lengthToWrite = data.remaining()\n     val segment = new FileBasedWriteAheadLogSegment(path, nextOffset, lengthToWrite)\n     stream.writeInt(lengthToWrite)\n-    if (data.hasArray) {\n-      stream.write(data.array())\n-    } else {\n-      // If the buffer is not backed by an array, we transfer using temp array\n-      // Note that despite the extra array copy, this should be faster than byte-by-byte copy\n-      while (data.hasRemaining) {\n-        val array = new Array[Byte](data.remaining)\n-        data.get(array)\n-        stream.write(array)\n-      }\n-    }\n+    Utils.writeByteBuffer(data, stream: OutputStream)",
    "line": 24
  }],
  "prId": 10083
}]