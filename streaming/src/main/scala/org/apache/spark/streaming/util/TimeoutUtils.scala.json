[{
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Minor style nit: spaces after colons.\n",
    "commit": "1c50a26120d3aecf583c3fced4e92caab0d50a91",
    "createdAt": "2015-01-05T00:26:26Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.util\n+\n+\n+private[streaming] object TimeoutUtils {\n+  /**\n+   * Waiting function with a timeout.\n+   * Returns true if done, false for timeout\n+   */\n+  def waitUntilDone(timeout:Long, done:() => Boolean): Boolean = {"
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "Also, this method is kind of similar to ScalaTest's `eventually`; maybe we can adopt some of the sugar / syntax from there (e.g. timeouts and polling intervals using the Scala `Duration` class), although I guess there is the key difference that `eventually` throws exceptions while this returns booleans to signal success/failure.\n",
    "commit": "1c50a26120d3aecf583c3fced4e92caab0d50a91",
    "createdAt": "2015-01-05T00:27:50Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.util\n+\n+\n+private[streaming] object TimeoutUtils {\n+  /**\n+   * Waiting function with a timeout.\n+   * Returns true if done, false for timeout\n+   */\n+  def waitUntilDone(timeout:Long, done:() => Boolean): Boolean = {"
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "Actually, this should probably use the Streaming duration class.\n",
    "commit": "1c50a26120d3aecf583c3fced4e92caab0d50a91",
    "createdAt": "2015-01-05T00:28:07Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.util\n+\n+\n+private[streaming] object TimeoutUtils {\n+  /**\n+   * Waiting function with a timeout.\n+   * Returns true if done, false for timeout\n+   */\n+  def waitUntilDone(timeout:Long, done:() => Boolean): Boolean = {"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "I mentioned in another comment, we can either use the `Clock` trait's `waitForTime`. Or if we want to implement something more generic like this (say `waitForCondition`), then it might better to implement in a proper class like `o.a.s.streaming.utils.ConditionWaiter` rather than something like `TimeoutUtils` which probably will have only this one method ever. And yes, having convenience methods like `eventually` would be cool. \n",
    "commit": "1c50a26120d3aecf583c3fced4e92caab0d50a91",
    "createdAt": "2015-01-05T04:44:22Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.util\n+\n+\n+private[streaming] object TimeoutUtils {\n+  /**\n+   * Waiting function with a timeout.\n+   * Returns true if done, false for timeout\n+   */\n+  def waitUntilDone(timeout:Long, done:() => Boolean): Boolean = {"
  }],
  "prId": 3868
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Space after while.\n",
    "commit": "1c50a26120d3aecf583c3fced4e92caab0d50a91",
    "createdAt": "2015-01-05T00:26:30Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.util\n+\n+\n+private[streaming] object TimeoutUtils {\n+  /**\n+   * Waiting function with a timeout.\n+   * Returns true if done, false for timeout\n+   */\n+  def waitUntilDone(timeout:Long, done:() => Boolean): Boolean = {\n+    var result = false\n+    val pollTime = 100\n+    val timeWhenStopStarted = System.currentTimeMillis()\n+    def hasTimedOut = System.currentTimeMillis() - timeWhenStopStarted > timeout\n+    while(!hasTimedOut && !done()) {"
  }],
  "prId": 3868
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "I don't think you need this variable; I think you can just return `done()` instead.\n",
    "commit": "1c50a26120d3aecf583c3fced4e92caab0d50a91",
    "createdAt": "2015-01-05T00:28:47Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.util\n+\n+\n+private[streaming] object TimeoutUtils {\n+  /**\n+   * Waiting function with a timeout.\n+   * Returns true if done, false for timeout\n+   */\n+  def waitUntilDone(timeout:Long, done:() => Boolean): Boolean = {\n+    var result = false"
  }],
  "prId": 3868
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "This should probably be named something like `startTime`.\n",
    "commit": "1c50a26120d3aecf583c3fced4e92caab0d50a91",
    "createdAt": "2015-01-05T00:29:16Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.util\n+\n+\n+private[streaming] object TimeoutUtils {\n+  /**\n+   * Waiting function with a timeout.\n+   * Returns true if done, false for timeout\n+   */\n+  def waitUntilDone(timeout:Long, done:() => Boolean): Boolean = {\n+    var result = false\n+    val pollTime = 100\n+    val timeWhenStopStarted = System.currentTimeMillis()"
  }],
  "prId": 3868
}]