[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "This could also be named StreamingListenerManager. Semantically still means that this is something that manages stuff, and is not confused to be a bus in any way.\n",
    "commit": "8eb545c7b6c8fbb2c67f0aadd8ec070f9b10ba9e",
    "createdAt": "2016-01-19T18:44:27Z",
    "diffHunk": "@@ -17,17 +17,38 @@\n \n package org.apache.spark.streaming.scheduler\n \n-import java.util.concurrent.atomic.AtomicBoolean\n+import org.apache.spark.scheduler.{LiveListenerBus, SparkListener, SparkListenerEvent}\n+import org.apache.spark.util.ListenerBus\n \n-import org.apache.spark.Logging\n-import org.apache.spark.util.AsynchronousListenerBus\n+/**\n+ * Wrap StreamingListenerEvent as SparkListenerEvent so that it can be posted to Spark listener bus.\n+ */\n+private[streaming] case class WrappedStreamingListenerEvent(\n+    streamingListenerEvent: StreamingListenerEvent) extends SparkListenerEvent {\n+\n+  // TODO once SPARK-12140 is resolved this will be true as well\n+  protected[spark] override def logEvent: Boolean = false\n+}\n \n-/** Asynchronously passes StreamingListenerEvents to registered StreamingListeners. */\n-private[spark] class StreamingListenerBus\n-  extends AsynchronousListenerBus[StreamingListener, StreamingListenerEvent](\"StreamingListenerBus\")\n-  with Logging {\n+/**\n+ * A Streaming listener bus to forward events in WrappedStreamingListenerEvent to StreamingListeners\n+ */\n+private[streaming] class StreamingListenerForwardingBus(sparkListenerBus: LiveListenerBus)"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "Can we please call this `StreamingListenerBus`? It really _is_ a listener bus from the perspective of streaming, right? The streaming scheduler has a reference to the bus and posts events to it. Listeners register to the bus and receive events from it. I think `*Manager` has been kind of like a catch-all default name for things we don't know what to call, like `BlockManager` or `ConnectionManager`.\n\nIn this case it's literally just a bus whose details are hidden from the caller.\n",
    "commit": "8eb545c7b6c8fbb2c67f0aadd8ec070f9b10ba9e",
    "createdAt": "2016-01-19T19:19:28Z",
    "diffHunk": "@@ -17,17 +17,38 @@\n \n package org.apache.spark.streaming.scheduler\n \n-import java.util.concurrent.atomic.AtomicBoolean\n+import org.apache.spark.scheduler.{LiveListenerBus, SparkListener, SparkListenerEvent}\n+import org.apache.spark.util.ListenerBus\n \n-import org.apache.spark.Logging\n-import org.apache.spark.util.AsynchronousListenerBus\n+/**\n+ * Wrap StreamingListenerEvent as SparkListenerEvent so that it can be posted to Spark listener bus.\n+ */\n+private[streaming] case class WrappedStreamingListenerEvent(\n+    streamingListenerEvent: StreamingListenerEvent) extends SparkListenerEvent {\n+\n+  // TODO once SPARK-12140 is resolved this will be true as well\n+  protected[spark] override def logEvent: Boolean = false\n+}\n \n-/** Asynchronously passes StreamingListenerEvents to registered StreamingListeners. */\n-private[spark] class StreamingListenerBus\n-  extends AsynchronousListenerBus[StreamingListener, StreamingListenerEvent](\"StreamingListenerBus\")\n-  with Logging {\n+/**\n+ * A Streaming listener bus to forward events in WrappedStreamingListenerEvent to StreamingListeners\n+ */\n+private[streaming] class StreamingListenerForwardingBus(sparkListenerBus: LiveListenerBus)"
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "Looks StreamingListenerBus is better. I just renamed it to StreamingListenerBus\n",
    "commit": "8eb545c7b6c8fbb2c67f0aadd8ec070f9b10ba9e",
    "createdAt": "2016-01-19T19:50:35Z",
    "diffHunk": "@@ -17,17 +17,38 @@\n \n package org.apache.spark.streaming.scheduler\n \n-import java.util.concurrent.atomic.AtomicBoolean\n+import org.apache.spark.scheduler.{LiveListenerBus, SparkListener, SparkListenerEvent}\n+import org.apache.spark.util.ListenerBus\n \n-import org.apache.spark.Logging\n-import org.apache.spark.util.AsynchronousListenerBus\n+/**\n+ * Wrap StreamingListenerEvent as SparkListenerEvent so that it can be posted to Spark listener bus.\n+ */\n+private[streaming] case class WrappedStreamingListenerEvent(\n+    streamingListenerEvent: StreamingListenerEvent) extends SparkListenerEvent {\n+\n+  // TODO once SPARK-12140 is resolved this will be true as well\n+  protected[spark] override def logEvent: Boolean = false\n+}\n \n-/** Asynchronously passes StreamingListenerEvents to registered StreamingListeners. */\n-private[spark] class StreamingListenerBus\n-  extends AsynchronousListenerBus[StreamingListener, StreamingListenerEvent](\"StreamingListenerBus\")\n-  with Logging {\n+/**\n+ * A Streaming listener bus to forward events in WrappedStreamingListenerEvent to StreamingListeners\n+ */\n+private[streaming] class StreamingListenerForwardingBus(sparkListenerBus: LiveListenerBus)"
  }],
  "prId": 10779
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "No need to add a todo here. Rather better to explicitly say, \"do not log streaming events in event log as history server does not support streaming events (SPARK-12140)\"\n",
    "commit": "8eb545c7b6c8fbb2c67f0aadd8ec070f9b10ba9e",
    "createdAt": "2016-01-19T18:45:11Z",
    "diffHunk": "@@ -17,17 +17,38 @@\n \n package org.apache.spark.streaming.scheduler\n \n-import java.util.concurrent.atomic.AtomicBoolean\n+import org.apache.spark.scheduler.{LiveListenerBus, SparkListener, SparkListenerEvent}\n+import org.apache.spark.util.ListenerBus\n \n-import org.apache.spark.Logging\n-import org.apache.spark.util.AsynchronousListenerBus\n+/**\n+ * Wrap StreamingListenerEvent as SparkListenerEvent so that it can be posted to Spark listener bus.\n+ */\n+private[streaming] case class WrappedStreamingListenerEvent(\n+    streamingListenerEvent: StreamingListenerEvent) extends SparkListenerEvent {\n+\n+  // TODO once SPARK-12140 is resolved this will be true as well"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "but once we do SPARK-12140 we can just remove this flag no?\n",
    "commit": "8eb545c7b6c8fbb2c67f0aadd8ec070f9b10ba9e",
    "createdAt": "2016-01-19T19:11:07Z",
    "diffHunk": "@@ -17,17 +17,38 @@\n \n package org.apache.spark.streaming.scheduler\n \n-import java.util.concurrent.atomic.AtomicBoolean\n+import org.apache.spark.scheduler.{LiveListenerBus, SparkListener, SparkListenerEvent}\n+import org.apache.spark.util.ListenerBus\n \n-import org.apache.spark.Logging\n-import org.apache.spark.util.AsynchronousListenerBus\n+/**\n+ * Wrap StreamingListenerEvent as SparkListenerEvent so that it can be posted to Spark listener bus.\n+ */\n+private[streaming] case class WrappedStreamingListenerEvent(\n+    streamingListenerEvent: StreamingListenerEvent) extends SparkListenerEvent {\n+\n+  // TODO once SPARK-12140 is resolved this will be true as well"
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "Updated the comments to include both the history server stuff and TODO\n",
    "commit": "8eb545c7b6c8fbb2c67f0aadd8ec070f9b10ba9e",
    "createdAt": "2016-01-19T19:55:08Z",
    "diffHunk": "@@ -17,17 +17,38 @@\n \n package org.apache.spark.streaming.scheduler\n \n-import java.util.concurrent.atomic.AtomicBoolean\n+import org.apache.spark.scheduler.{LiveListenerBus, SparkListener, SparkListenerEvent}\n+import org.apache.spark.util.ListenerBus\n \n-import org.apache.spark.Logging\n-import org.apache.spark.util.AsynchronousListenerBus\n+/**\n+ * Wrap StreamingListenerEvent as SparkListenerEvent so that it can be posted to Spark listener bus.\n+ */\n+private[streaming] case class WrappedStreamingListenerEvent(\n+    streamingListenerEvent: StreamingListenerEvent) extends SparkListenerEvent {\n+\n+  // TODO once SPARK-12140 is resolved this will be true as well"
  }],
  "prId": 10779
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "I am inclined to put this as an internal class of `StreamingListenerForwardingBus` because this is basically an internal implementation detail that streaming events are wrapped as spark events.\n",
    "commit": "8eb545c7b6c8fbb2c67f0aadd8ec070f9b10ba9e",
    "createdAt": "2016-01-19T18:47:44Z",
    "diffHunk": "@@ -17,17 +17,38 @@\n \n package org.apache.spark.streaming.scheduler\n \n-import java.util.concurrent.atomic.AtomicBoolean\n+import org.apache.spark.scheduler.{LiveListenerBus, SparkListener, SparkListenerEvent}\n+import org.apache.spark.util.ListenerBus\n \n-import org.apache.spark.Logging\n-import org.apache.spark.util.AsynchronousListenerBus\n+/**\n+ * Wrap StreamingListenerEvent as SparkListenerEvent so that it can be posted to Spark listener bus.\n+ */\n+private[streaming] case class WrappedStreamingListenerEvent("
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "+1\n",
    "commit": "8eb545c7b6c8fbb2c67f0aadd8ec070f9b10ba9e",
    "createdAt": "2016-01-19T19:11:33Z",
    "diffHunk": "@@ -17,17 +17,38 @@\n \n package org.apache.spark.streaming.scheduler\n \n-import java.util.concurrent.atomic.AtomicBoolean\n+import org.apache.spark.scheduler.{LiveListenerBus, SparkListener, SparkListenerEvent}\n+import org.apache.spark.util.ListenerBus\n \n-import org.apache.spark.Logging\n-import org.apache.spark.util.AsynchronousListenerBus\n+/**\n+ * Wrap StreamingListenerEvent as SparkListenerEvent so that it can be posted to Spark listener bus.\n+ */\n+private[streaming] case class WrappedStreamingListenerEvent("
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "Moved `WrappedStreamingListenerEvent` into `StreamingListenerBus`\n",
    "commit": "8eb545c7b6c8fbb2c67f0aadd8ec070f9b10ba9e",
    "createdAt": "2016-01-19T19:54:43Z",
    "diffHunk": "@@ -17,17 +17,38 @@\n \n package org.apache.spark.streaming.scheduler\n \n-import java.util.concurrent.atomic.AtomicBoolean\n+import org.apache.spark.scheduler.{LiveListenerBus, SparkListener, SparkListenerEvent}\n+import org.apache.spark.util.ListenerBus\n \n-import org.apache.spark.Logging\n-import org.apache.spark.util.AsynchronousListenerBus\n+/**\n+ * Wrap StreamingListenerEvent as SparkListenerEvent so that it can be posted to Spark listener bus.\n+ */\n+private[streaming] case class WrappedStreamingListenerEvent("
  }],
  "prId": 10779
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "I am not sure whether this should be extend `ListenerBus`. It gets confusing again on whether the events are posted on same thread, different async thread, or forwarded to a different async thread. Also this inherits the `postAll` method which someone can accidentally use and violate all threading assumptions.\n\nIf you have extended `ListenerBus` just to inherit the `listeners` list and the `addListener` method, then its simpler to just redo those 3 lines of code here. \n\n@andrewor14 thoughts?\n",
    "commit": "8eb545c7b6c8fbb2c67f0aadd8ec070f9b10ba9e",
    "createdAt": "2016-01-19T18:52:04Z",
    "diffHunk": "@@ -17,17 +17,38 @@\n \n package org.apache.spark.streaming.scheduler\n \n-import java.util.concurrent.atomic.AtomicBoolean\n+import org.apache.spark.scheduler.{LiveListenerBus, SparkListener, SparkListenerEvent}\n+import org.apache.spark.util.ListenerBus\n \n-import org.apache.spark.Logging\n-import org.apache.spark.util.AsynchronousListenerBus\n+/**\n+ * Wrap StreamingListenerEvent as SparkListenerEvent so that it can be posted to Spark listener bus.\n+ */\n+private[streaming] case class WrappedStreamingListenerEvent(\n+    streamingListenerEvent: StreamingListenerEvent) extends SparkListenerEvent {\n+\n+  // TODO once SPARK-12140 is resolved this will be true as well\n+  protected[spark] override def logEvent: Boolean = false\n+}\n \n-/** Asynchronously passes StreamingListenerEvents to registered StreamingListeners. */\n-private[spark] class StreamingListenerBus\n-  extends AsynchronousListenerBus[StreamingListener, StreamingListenerEvent](\"StreamingListenerBus\")\n-  with Logging {\n+/**\n+ * A Streaming listener bus to forward events in WrappedStreamingListenerEvent to StreamingListeners\n+ */\n+private[streaming] class StreamingListenerForwardingBus(sparkListenerBus: LiveListenerBus)\n+  extends SparkListener with ListenerBus[StreamingListener, StreamingListenerEvent] {"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "I think it's fine that it extends `ListenerBus` since it does in fact share the same method signatures. I don't see how the threading assumptions are violated if we call `postToAll`. There's only 1 thread (the core listener bus), and that thread calls this synchronously.\n\nAlso it's not just the 3 lines. We also want to inherit the `postToAll` method because we want to post to all streaming listeners, right? The implementation also has some try catch logic in there so I think it's better this way.\n",
    "commit": "8eb545c7b6c8fbb2c67f0aadd8ec070f9b10ba9e",
    "createdAt": "2016-01-19T19:17:27Z",
    "diffHunk": "@@ -17,17 +17,38 @@\n \n package org.apache.spark.streaming.scheduler\n \n-import java.util.concurrent.atomic.AtomicBoolean\n+import org.apache.spark.scheduler.{LiveListenerBus, SparkListener, SparkListenerEvent}\n+import org.apache.spark.util.ListenerBus\n \n-import org.apache.spark.Logging\n-import org.apache.spark.util.AsynchronousListenerBus\n+/**\n+ * Wrap StreamingListenerEvent as SparkListenerEvent so that it can be posted to Spark listener bus.\n+ */\n+private[streaming] case class WrappedStreamingListenerEvent(\n+    streamingListenerEvent: StreamingListenerEvent) extends SparkListenerEvent {\n+\n+  // TODO once SPARK-12140 is resolved this will be true as well\n+  protected[spark] override def logEvent: Boolean = false\n+}\n \n-/** Asynchronously passes StreamingListenerEvents to registered StreamingListeners. */\n-private[spark] class StreamingListenerBus\n-  extends AsynchronousListenerBus[StreamingListener, StreamingListenerEvent](\"StreamingListenerBus\")\n-  with Logging {\n+/**\n+ * A Streaming listener bus to forward events in WrappedStreamingListenerEvent to StreamingListeners\n+ */\n+private[streaming] class StreamingListenerForwardingBus(sparkListenerBus: LiveListenerBus)\n+  extends SparkListener with ListenerBus[StreamingListener, StreamingListenerEvent] {"
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "Spark's `LiveListenerBus` and the old `StreamingListenerBus` also extend ListenerBus and has the `postAll` method. Since nobody complaints it, I think it's fine.\n",
    "commit": "8eb545c7b6c8fbb2c67f0aadd8ec070f9b10ba9e",
    "createdAt": "2016-01-19T19:53:12Z",
    "diffHunk": "@@ -17,17 +17,38 @@\n \n package org.apache.spark.streaming.scheduler\n \n-import java.util.concurrent.atomic.AtomicBoolean\n+import org.apache.spark.scheduler.{LiveListenerBus, SparkListener, SparkListenerEvent}\n+import org.apache.spark.util.ListenerBus\n \n-import org.apache.spark.Logging\n-import org.apache.spark.util.AsynchronousListenerBus\n+/**\n+ * Wrap StreamingListenerEvent as SparkListenerEvent so that it can be posted to Spark listener bus.\n+ */\n+private[streaming] case class WrappedStreamingListenerEvent(\n+    streamingListenerEvent: StreamingListenerEvent) extends SparkListenerEvent {\n+\n+  // TODO once SPARK-12140 is resolved this will be true as well\n+  protected[spark] override def logEvent: Boolean = false\n+}\n \n-/** Asynchronously passes StreamingListenerEvents to registered StreamingListeners. */\n-private[spark] class StreamingListenerBus\n-  extends AsynchronousListenerBus[StreamingListener, StreamingListenerEvent](\"StreamingListenerBus\")\n-  with Logging {\n+/**\n+ * A Streaming listener bus to forward events in WrappedStreamingListenerEvent to StreamingListeners\n+ */\n+private[streaming] class StreamingListenerForwardingBus(sparkListenerBus: LiveListenerBus)\n+  extends SparkListener with ListenerBus[StreamingListener, StreamingListenerEvent] {"
  }],
  "prId": 10779
}]