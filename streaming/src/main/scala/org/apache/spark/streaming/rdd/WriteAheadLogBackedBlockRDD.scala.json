[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Hi, @Myasuka .\r\nI'm just wondering why do you change `getAbsolutePath` to `getPath` together? Is it related to your fix?",
    "commit": "895b7669a426064a1116b72d8db0b204fec092a9",
    "createdAt": "2017-06-29T21:19:58Z",
    "diffHunk": "@@ -135,8 +135,11 @@ class WriteAheadLogBackedBlockRDD[T: ClassTag](\n         // FileBasedWriteAheadLog will not create any file or directory at that path. Also,\n         // this dummy directory should not already exist otherwise the WAL will try to recover\n         // past events from the directory and throw errors.\n+        // Specifically, the nonExistentDirectory will contain a colon in windows, this is invalid\n+        // for hadoop. Remove the drive letter and colon, e.g. \"D:\" out of this path by default\n         val nonExistentDirectory = new File(\n-          System.getProperty(\"java.io.tmpdir\"), UUID.randomUUID().toString).getAbsolutePath\n+          System.getProperty(\"java.io.tmpdir\").replaceFirst(\"[a-zA-Z]:\", \"\"),\n+          UUID.randomUUID().toString).getPath"
  }, {
    "author": {
      "login": "Myasuka"
    },
    "body": "Yes, `getAbsolutePath` will still get path with driver letter and colon, which is illegal fro HDFS, that's why I change `getAbsolutePath` to `getPath`.",
    "commit": "895b7669a426064a1116b72d8db0b204fec092a9",
    "createdAt": "2017-06-30T02:49:16Z",
    "diffHunk": "@@ -135,8 +135,11 @@ class WriteAheadLogBackedBlockRDD[T: ClassTag](\n         // FileBasedWriteAheadLog will not create any file or directory at that path. Also,\n         // this dummy directory should not already exist otherwise the WAL will try to recover\n         // past events from the directory and throw errors.\n+        // Specifically, the nonExistentDirectory will contain a colon in windows, this is invalid\n+        // for hadoop. Remove the drive letter and colon, e.g. \"D:\" out of this path by default\n         val nonExistentDirectory = new File(\n-          System.getProperty(\"java.io.tmpdir\"), UUID.randomUUID().toString).getAbsolutePath\n+          System.getProperty(\"java.io.tmpdir\").replaceFirst(\"[a-zA-Z]:\", \"\"),\n+          UUID.randomUUID().toString).getPath"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "In that case, what about this?\r\n```scala\r\nval nonExistentDirectory = new File(\r\n  System.getProperty(\"java.io.tmpdir\"), \r\n  UUID.randomUUID().toString).getAbsolutePath.replaceFirst(\"[a-zA-Z]:\", \"\")\r\n```",
    "commit": "895b7669a426064a1116b72d8db0b204fec092a9",
    "createdAt": "2017-06-30T02:55:23Z",
    "diffHunk": "@@ -135,8 +135,11 @@ class WriteAheadLogBackedBlockRDD[T: ClassTag](\n         // FileBasedWriteAheadLog will not create any file or directory at that path. Also,\n         // this dummy directory should not already exist otherwise the WAL will try to recover\n         // past events from the directory and throw errors.\n+        // Specifically, the nonExistentDirectory will contain a colon in windows, this is invalid\n+        // for hadoop. Remove the drive letter and colon, e.g. \"D:\" out of this path by default\n         val nonExistentDirectory = new File(\n-          System.getProperty(\"java.io.tmpdir\"), UUID.randomUUID().toString).getAbsolutePath\n+          System.getProperty(\"java.io.tmpdir\").replaceFirst(\"[a-zA-Z]:\", \"\"),\n+          UUID.randomUUID().toString).getPath"
  }, {
    "author": {
      "login": "Myasuka"
    },
    "body": "I think this is the same, if you prefer this change, I could add another commit.",
    "commit": "895b7669a426064a1116b72d8db0b204fec092a9",
    "createdAt": "2017-06-30T08:27:16Z",
    "diffHunk": "@@ -135,8 +135,11 @@ class WriteAheadLogBackedBlockRDD[T: ClassTag](\n         // FileBasedWriteAheadLog will not create any file or directory at that path. Also,\n         // this dummy directory should not already exist otherwise the WAL will try to recover\n         // past events from the directory and throw errors.\n+        // Specifically, the nonExistentDirectory will contain a colon in windows, this is invalid\n+        // for hadoop. Remove the drive letter and colon, e.g. \"D:\" out of this path by default\n         val nonExistentDirectory = new File(\n-          System.getProperty(\"java.io.tmpdir\"), UUID.randomUUID().toString).getAbsolutePath\n+          System.getProperty(\"java.io.tmpdir\").replaceFirst(\"[a-zA-Z]:\", \"\"),\n+          UUID.randomUUID().toString).getPath"
  }],
  "prId": 18452
}]