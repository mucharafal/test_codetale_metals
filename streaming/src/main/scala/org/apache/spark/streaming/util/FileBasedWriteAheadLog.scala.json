[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "If this check necessary? Wouldn't `listStatus` fail if the directory does not exist or is a file?\n",
    "commit": "fa8c3bebf31a03686972c5e09ea5b7703c9e81fe",
    "createdAt": "2016-08-05T21:56:35Z",
    "diffHunk": "@@ -231,13 +232,17 @@ private[streaming] class FileBasedWriteAheadLog(\n     val logDirectoryPath = new Path(logDirectory)\n     val fileSystem = HdfsUtils.getFileSystemForPath(logDirectoryPath, hadoopConf)\n \n-    if (fileSystem.exists(logDirectoryPath) &&\n-        fileSystem.getFileStatus(logDirectoryPath).isDirectory) {\n-      val logFileInfo = logFilesTologInfo(fileSystem.listStatus(logDirectoryPath).map { _.getPath })\n-      pastLogs.clear()\n-      pastLogs ++= logFileInfo\n-      logInfo(s\"Recovered ${logFileInfo.size} write ahead log files from $logDirectory\")\n-      logDebug(s\"Recovered files are:\\n${logFileInfo.map(_.path).mkString(\"\\n\")}\")\n+    try {\n+      if (fileSystem.getFileStatus(logDirectoryPath).isDirectory) {"
  }, {
    "author": {
      "login": "steveloughran"
    },
    "body": "If you call `listStatus(file)` it returns a stat of the file, rather than listing of the children. Irritating as it's hard to differentiate listStatus(file) and listStatus(dir-with-one-child) except by examining the name of the returned status, and once you've got symlinks in the mix that differentiation isn't easy (The standard FileSystem globber has to jump though these hoops, hoops a dedicated s3a globber can/will avoid)\n",
    "commit": "fa8c3bebf31a03686972c5e09ea5b7703c9e81fe",
    "createdAt": "2016-08-13T10:06:06Z",
    "diffHunk": "@@ -231,13 +232,17 @@ private[streaming] class FileBasedWriteAheadLog(\n     val logDirectoryPath = new Path(logDirectory)\n     val fileSystem = HdfsUtils.getFileSystemForPath(logDirectoryPath, hadoopConf)\n \n-    if (fileSystem.exists(logDirectoryPath) &&\n-        fileSystem.getFileStatus(logDirectoryPath).isDirectory) {\n-      val logFileInfo = logFilesTologInfo(fileSystem.listStatus(logDirectoryPath).map { _.getPath })\n-      pastLogs.clear()\n-      pastLogs ++= logFileInfo\n-      logInfo(s\"Recovered ${logFileInfo.size} write ahead log files from $logDirectory\")\n-      logDebug(s\"Recovered files are:\\n${logFileInfo.map(_.path).mkString(\"\\n\")}\")\n+    try {\n+      if (fileSystem.getFileStatus(logDirectoryPath).isDirectory) {"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Ugh. Can you add a comment in the code explaining that?\n",
    "commit": "fa8c3bebf31a03686972c5e09ea5b7703c9e81fe",
    "createdAt": "2016-08-15T18:59:00Z",
    "diffHunk": "@@ -231,13 +232,17 @@ private[streaming] class FileBasedWriteAheadLog(\n     val logDirectoryPath = new Path(logDirectory)\n     val fileSystem = HdfsUtils.getFileSystemForPath(logDirectoryPath, hadoopConf)\n \n-    if (fileSystem.exists(logDirectoryPath) &&\n-        fileSystem.getFileStatus(logDirectoryPath).isDirectory) {\n-      val logFileInfo = logFilesTologInfo(fileSystem.listStatus(logDirectoryPath).map { _.getPath })\n-      pastLogs.clear()\n-      pastLogs ++= logFileInfo\n-      logInfo(s\"Recovered ${logFileInfo.size} write ahead log files from $logDirectory\")\n-      logDebug(s\"Recovered files are:\\n${logFileInfo.map(_.path).mkString(\"\\n\")}\")\n+    try {\n+      if (fileSystem.getFileStatus(logDirectoryPath).isDirectory) {"
  }, {
    "author": {
      "login": "steveloughran"
    },
    "body": "will do. Like you say, \"ugh\"\n",
    "commit": "fa8c3bebf31a03686972c5e09ea5b7703c9e81fe",
    "createdAt": "2016-08-17T12:46:52Z",
    "diffHunk": "@@ -231,13 +232,17 @@ private[streaming] class FileBasedWriteAheadLog(\n     val logDirectoryPath = new Path(logDirectory)\n     val fileSystem = HdfsUtils.getFileSystemForPath(logDirectoryPath, hadoopConf)\n \n-    if (fileSystem.exists(logDirectoryPath) &&\n-        fileSystem.getFileStatus(logDirectoryPath).isDirectory) {\n-      val logFileInfo = logFilesTologInfo(fileSystem.listStatus(logDirectoryPath).map { _.getPath })\n-      pastLogs.clear()\n-      pastLogs ++= logFileInfo\n-      logInfo(s\"Recovered ${logFileInfo.size} write ahead log files from $logDirectory\")\n-      logDebug(s\"Recovered files are:\\n${logFileInfo.map(_.path).mkString(\"\\n\")}\")\n+    try {\n+      if (fileSystem.getFileStatus(logDirectoryPath).isDirectory) {"
  }],
  "prId": 14371
}]