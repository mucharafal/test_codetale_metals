[{
  "comments": [{
    "author": {
      "login": "jerryshao"
    },
    "body": "I think here Java friendly constructor is necessary, `create` might not be directly used in Java code.\n",
    "commit": "ae64786fd937002a2cc1f80518d54e970a6bbb21",
    "createdAt": "2015-10-27T06:55:54Z",
    "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming\n+\n+import scala.reflect.ClassTag\n+\n+import org.apache.spark.{HashPartitioner, Partitioner}\n+import org.apache.spark.api.java.JavaPairRDD\n+import org.apache.spark.rdd.RDD\n+\n+\n+/**\n+ * Abstract class having all the specifications of DStream.trackStateByKey().\n+ * Use the `TrackStateSpec.create()` or `TrackStateSpec.create()` to create instances of this class.\n+ *\n+ * {{{\n+ *    TrackStateSpec(trackingFunction)            // in Scala\n+ *    TrackStateSpec.create(trackingFunction)     // in Java\n+ * }}}\n+ */\n+sealed abstract class TrackStateSpec[K: ClassTag, V: ClassTag, S: ClassTag, T: ClassTag]\n+  extends Serializable {\n+\n+  def initialState(rdd: RDD[(K, S)]): this.type\n+  def initialState(javaPairRDD: JavaPairRDD[K, S]): this.type\n+\n+  def numPartitions(numPartitions: Int): this.type\n+  def partitioner(partitioner: Partitioner): this.type\n+\n+  def timeout(interval: Duration): this.type\n+}\n+\n+\n+/** Builder object for creating instances of TrackStateSpec */\n+object TrackStateSpec {\n+\n+  def apply[K: ClassTag, V: ClassTag, S: ClassTag, T: ClassTag](\n+      trackingFunction: (K, Option[V], State[S]) => Option[T]): TrackStateSpec[K, V, S, T] = {\n+    new TrackStateSpecImpl[K, V, S, T](trackingFunction)\n+  }\n+\n+  def create[K: ClassTag, V: ClassTag, S: ClassTag, T: ClassTag](\n+      trackingFunction: (K, Option[V], State[S]) => Option[T]): TrackStateSpec[K, V, S, T] = {\n+    apply(trackingFunction)\n+  }"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "Yeah, I was planning to add all the Java friendly stuff on in a later PR, and focus on core functionality in this PR.\n",
    "commit": "ae64786fd937002a2cc1f80518d54e970a6bbb21",
    "createdAt": "2015-10-27T08:51:13Z",
    "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming\n+\n+import scala.reflect.ClassTag\n+\n+import org.apache.spark.{HashPartitioner, Partitioner}\n+import org.apache.spark.api.java.JavaPairRDD\n+import org.apache.spark.rdd.RDD\n+\n+\n+/**\n+ * Abstract class having all the specifications of DStream.trackStateByKey().\n+ * Use the `TrackStateSpec.create()` or `TrackStateSpec.create()` to create instances of this class.\n+ *\n+ * {{{\n+ *    TrackStateSpec(trackingFunction)            // in Scala\n+ *    TrackStateSpec.create(trackingFunction)     // in Java\n+ * }}}\n+ */\n+sealed abstract class TrackStateSpec[K: ClassTag, V: ClassTag, S: ClassTag, T: ClassTag]\n+  extends Serializable {\n+\n+  def initialState(rdd: RDD[(K, S)]): this.type\n+  def initialState(javaPairRDD: JavaPairRDD[K, S]): this.type\n+\n+  def numPartitions(numPartitions: Int): this.type\n+  def partitioner(partitioner: Partitioner): this.type\n+\n+  def timeout(interval: Duration): this.type\n+}\n+\n+\n+/** Builder object for creating instances of TrackStateSpec */\n+object TrackStateSpec {\n+\n+  def apply[K: ClassTag, V: ClassTag, S: ClassTag, T: ClassTag](\n+      trackingFunction: (K, Option[V], State[S]) => Option[T]): TrackStateSpec[K, V, S, T] = {\n+    new TrackStateSpecImpl[K, V, S, T](trackingFunction)\n+  }\n+\n+  def create[K: ClassTag, V: ClassTag, S: ClassTag, T: ClassTag](\n+      trackingFunction: (K, Option[V], State[S]) => Option[T]): TrackStateSpec[K, V, S, T] = {\n+    apply(trackingFunction)\n+  }"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "An alternative suggestion from community. Just make an implicit conversion to Option. That would make Scala users happy.\n",
    "commit": "ae64786fd937002a2cc1f80518d54e970a6bbb21",
    "createdAt": "2015-11-06T01:54:58Z",
    "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming\n+\n+import scala.reflect.ClassTag\n+\n+import org.apache.spark.{HashPartitioner, Partitioner}\n+import org.apache.spark.api.java.JavaPairRDD\n+import org.apache.spark.rdd.RDD\n+\n+\n+/**\n+ * Abstract class having all the specifications of DStream.trackStateByKey().\n+ * Use the `TrackStateSpec.create()` or `TrackStateSpec.create()` to create instances of this class.\n+ *\n+ * {{{\n+ *    TrackStateSpec(trackingFunction)            // in Scala\n+ *    TrackStateSpec.create(trackingFunction)     // in Java\n+ * }}}\n+ */\n+sealed abstract class TrackStateSpec[K: ClassTag, V: ClassTag, S: ClassTag, T: ClassTag]\n+  extends Serializable {\n+\n+  def initialState(rdd: RDD[(K, S)]): this.type\n+  def initialState(javaPairRDD: JavaPairRDD[K, S]): this.type\n+\n+  def numPartitions(numPartitions: Int): this.type\n+  def partitioner(partitioner: Partitioner): this.type\n+\n+  def timeout(interval: Duration): this.type\n+}\n+\n+\n+/** Builder object for creating instances of TrackStateSpec */\n+object TrackStateSpec {\n+\n+  def apply[K: ClassTag, V: ClassTag, S: ClassTag, T: ClassTag](\n+      trackingFunction: (K, Option[V], State[S]) => Option[T]): TrackStateSpec[K, V, S, T] = {\n+    new TrackStateSpecImpl[K, V, S, T](trackingFunction)\n+  }\n+\n+  def create[K: ClassTag, V: ClassTag, S: ClassTag, T: ClassTag](\n+      trackingFunction: (K, Option[V], State[S]) => Option[T]): TrackStateSpec[K, V, S, T] = {\n+    apply(trackingFunction)\n+  }"
  }],
  "prId": 9256
}, {
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "I would prefer to just call this `StateSpec`.\n",
    "commit": "ae64786fd937002a2cc1f80518d54e970a6bbb21",
    "createdAt": "2015-11-05T06:36:25Z",
    "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming\n+\n+import scala.reflect.ClassTag\n+\n+import org.apache.spark.{HashPartitioner, Partitioner}\n+import org.apache.spark.api.java.JavaPairRDD\n+import org.apache.spark.rdd.RDD\n+\n+\n+/**\n+ * Abstract class having all the specifications of DStream.trackStateByKey().\n+ * Use the `TrackStateSpec.create()` or `TrackStateSpec.create()` to create instances of this class.\n+ *\n+ * {{{\n+ *    TrackStateSpec(trackingFunction)            // in Scala\n+ *    TrackStateSpec.create(trackingFunction)     // in Java\n+ * }}}\n+ */\n+sealed abstract class TrackStateSpec[K: ClassTag, V: ClassTag, S: ClassTag, T: ClassTag]"
  }],
  "prId": 9256
}, {
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "A doc here to precisely define timeouts would be really helpful.\n",
    "commit": "ae64786fd937002a2cc1f80518d54e970a6bbb21",
    "createdAt": "2015-11-05T07:08:53Z",
    "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming\n+\n+import scala.reflect.ClassTag\n+\n+import org.apache.spark.{HashPartitioner, Partitioner}\n+import org.apache.spark.api.java.JavaPairRDD\n+import org.apache.spark.rdd.RDD\n+\n+\n+/**\n+ * Abstract class having all the specifications of DStream.trackStateByKey().\n+ * Use the `TrackStateSpec.create()` or `TrackStateSpec.create()` to create instances of this class.\n+ *\n+ * {{{\n+ *    TrackStateSpec(trackingFunction)            // in Scala\n+ *    TrackStateSpec.create(trackingFunction)     // in Java\n+ * }}}\n+ */\n+sealed abstract class TrackStateSpec[K: ClassTag, V: ClassTag, S: ClassTag, T: ClassTag]\n+  extends Serializable {\n+\n+  def initialState(rdd: RDD[(K, S)]): this.type\n+  def initialState(javaPairRDD: JavaPairRDD[K, S]): this.type\n+\n+  def numPartitions(numPartitions: Int): this.type\n+  def partitioner(partitioner: Partitioner): this.type\n+\n+  def timeout(interval: Duration): this.type"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "Is this scala Duration? Why not just take milliseconds?\n",
    "commit": "ae64786fd937002a2cc1f80518d54e970a6bbb21",
    "createdAt": "2015-11-05T17:59:38Z",
    "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming\n+\n+import scala.reflect.ClassTag\n+\n+import org.apache.spark.{HashPartitioner, Partitioner}\n+import org.apache.spark.api.java.JavaPairRDD\n+import org.apache.spark.rdd.RDD\n+\n+\n+/**\n+ * Abstract class having all the specifications of DStream.trackStateByKey().\n+ * Use the `TrackStateSpec.create()` or `TrackStateSpec.create()` to create instances of this class.\n+ *\n+ * {{{\n+ *    TrackStateSpec(trackingFunction)            // in Scala\n+ *    TrackStateSpec.create(trackingFunction)     // in Java\n+ * }}}\n+ */\n+sealed abstract class TrackStateSpec[K: ClassTag, V: ClassTag, S: ClassTag, T: ClassTag]\n+  extends Serializable {\n+\n+  def initialState(rdd: RDD[(K, S)]): this.type\n+  def initialState(javaPairRDD: JavaPairRDD[K, S]): this.type\n+\n+  def numPartitions(numPartitions: Int): this.type\n+  def partitioner(partitioner: Partitioner): this.type\n+\n+  def timeout(interval: Duration): this.type"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "Spark Streaming Duration. To keep it consistent with other API. And will add the doc.\n",
    "commit": "ae64786fd937002a2cc1f80518d54e970a6bbb21",
    "createdAt": "2015-11-06T01:54:00Z",
    "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming\n+\n+import scala.reflect.ClassTag\n+\n+import org.apache.spark.{HashPartitioner, Partitioner}\n+import org.apache.spark.api.java.JavaPairRDD\n+import org.apache.spark.rdd.RDD\n+\n+\n+/**\n+ * Abstract class having all the specifications of DStream.trackStateByKey().\n+ * Use the `TrackStateSpec.create()` or `TrackStateSpec.create()` to create instances of this class.\n+ *\n+ * {{{\n+ *    TrackStateSpec(trackingFunction)            // in Scala\n+ *    TrackStateSpec.create(trackingFunction)     // in Java\n+ * }}}\n+ */\n+sealed abstract class TrackStateSpec[K: ClassTag, V: ClassTag, S: ClassTag, T: ClassTag]\n+  extends Serializable {\n+\n+  def initialState(rdd: RDD[(K, S)]): this.type\n+  def initialState(javaPairRDD: JavaPairRDD[K, S]): this.type\n+\n+  def numPartitions(numPartitions: Int): this.type\n+  def partitioner(partitioner: Partitioner): this.type\n+\n+  def timeout(interval: Duration): this.type"
  }],
  "prId": 9256
}]