[{
  "comments": [{
    "author": {
      "login": "harishreedharan"
    },
    "body": "Do we really need to wait till the next time? You could just take a parameter specifying whether the method should be called on stop or not, and then pass the current time in.\n",
    "commit": "e8e490da14b360c3be39fb66d7cc20a01c06decf",
    "createdAt": "2015-09-22T04:27:22Z",
    "diffHunk": "@@ -99,6 +99,8 @@ class RecurringTimer(clock: Clock, period: Long, callback: (Long) => Unit, name:\n         nextTime += period\n         logDebug(\"Callback for \" + name + \" called at time \" + prevTime)\n       }\n+      clock.waitTillTime(nextTime)"
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "> Do we really need to wait till the next time? You could just take a parameter specifying whether the method should be called on stop or not, and then pass the current time in.\n\nI just want to make it not break the semantics of RecurringTimer.\n",
    "commit": "e8e490da14b360c3be39fb66d7cc20a01c06decf",
    "createdAt": "2015-09-22T04:32:56Z",
    "diffHunk": "@@ -99,6 +99,8 @@ class RecurringTimer(clock: Clock, period: Long, callback: (Long) => Unit, name:\n         nextTime += period\n         logDebug(\"Callback for \" + name + \" called at time \" + prevTime)\n       }\n+      clock.waitTillTime(nextTime)"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "Yes, the RecurringTimer is designed to call the function at particular time interval, it should not deviate from that even for the last call. \n",
    "commit": "e8e490da14b360c3be39fb66d7cc20a01c06decf",
    "createdAt": "2015-09-22T09:39:23Z",
    "diffHunk": "@@ -99,6 +99,8 @@ class RecurringTimer(clock: Clock, period: Long, callback: (Long) => Unit, name:\n         nextTime += period\n         logDebug(\"Callback for \" + name + \" called at time \" + prevTime)\n       }\n+      clock.waitTillTime(nextTime)"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "BTW, are you updating the `prevTime` which is returned by `stop()` as the last time the call was made?\nI think there arent unit tests for this, could you add them, so that this behavior is properly captured.\n",
    "commit": "e8e490da14b360c3be39fb66d7cc20a01c06decf",
    "createdAt": "2015-09-22T09:42:02Z",
    "diffHunk": "@@ -99,6 +99,8 @@ class RecurringTimer(clock: Clock, period: Long, callback: (Long) => Unit, name:\n         nextTime += period\n         logDebug(\"Callback for \" + name + \" called at time \" + prevTime)\n       }\n+      clock.waitTillTime(nextTime)"
  }],
  "prId": 8417
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "To be clear this does not signify that stopping is over (that is calling the callback has been stopped). This is just signifies that the stopping processing has been started.\n\nI am wondering whether this is ambiguous, and it may be cleaner to actually capture the three states - Initialized, Started, Stopping, Stopped. Similar to what you did for the ReceiverTracker some time ago. Then it becomes easy to read, reason about and test.\n",
    "commit": "e8e490da14b360c3be39fb66d7cc20a01c06decf",
    "createdAt": "2015-09-22T21:33:11Z",
    "diffHunk": "@@ -87,22 +87,32 @@ class RecurringTimer(clock: Clock, period: Long, callback: (Long) => Unit, name:\n     prevTime\n   }\n \n+  private def triggerActionForNextInterval(): Unit = {\n+    clock.waitTillTime(nextTime)\n+    callback(nextTime)\n+    prevTime = nextTime\n+    nextTime += period\n+    logDebug(\"Callback for \" + name + \" called at time \" + prevTime)\n+  }\n+\n   /**\n    * Repeatedly call the callback every interval.\n    */\n   private def loop() {\n     try {\n       while (!stopped) {\n-        clock.waitTillTime(nextTime)\n-        callback(nextTime)\n-        prevTime = nextTime\n-        nextTime += period\n-        logDebug(\"Callback for \" + name + \" called at time \" + prevTime)\n+        triggerActionForNextInterval()\n       }\n+      triggerActionForNextInterval()\n     } catch {\n       case e: InterruptedException =>\n     }\n   }\n+\n+  /*\n+   * Return whether `stop` is called.\n+   */\n+  def isStopped: Boolean = stopped"
  }],
  "prId": 8417
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Could you update the docs on stop() to capture the information that it is guaranteed that there will be at least one callback after the stop has been called.\n",
    "commit": "e8e490da14b360c3be39fb66d7cc20a01c06decf",
    "createdAt": "2015-09-22T21:37:06Z",
    "diffHunk": "@@ -87,22 +87,32 @@ class RecurringTimer(clock: Clock, period: Long, callback: (Long) => Unit, name:\n     prevTime\n   }\n \n+  private def triggerActionForNextInterval(): Unit = {",
    "line": 16
  }],
  "prId": 8417
}]