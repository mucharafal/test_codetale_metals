[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "If the Java API is going to use -1 as \"not set\" (equivalent to Python), then would the python being using -1 as well? \n",
    "commit": "c21e786c72b5b89a22c6a3f2237ee33e09e55e0b",
    "createdAt": "2015-11-09T22:46:35Z",
    "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.api.java\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.streaming.scheduler._\n+\n+/**\n+ * A wrapper to convert a [[JavaStreamingListener]] to a [[StreamingListener]].\n+ */\n+private[streaming] class JavaStreamingListenerWrapper(javaStreamingListener: JavaStreamingListener)\n+  extends StreamingListener {\n+\n+  private def toJavaReceiverInfo(receiverInfo: ReceiverInfo): JavaReceiverInfo = {\n+    JavaReceiverInfo(\n+      receiverInfo.streamId,\n+      receiverInfo.name,\n+      receiverInfo.active,\n+      receiverInfo.location,\n+      receiverInfo.lastErrorMessage,\n+      receiverInfo.lastError,\n+      receiverInfo.lastErrorTime\n+    )\n+  }\n+\n+  private def toJavaStreamInputInfo(streamInputInfo: StreamInputInfo): JavaStreamInputInfo = {\n+    JavaStreamInputInfo(\n+      streamInputInfo.inputStreamId,\n+      streamInputInfo.numRecords: Long,\n+      streamInputInfo.metadata.asJava,\n+      streamInputInfo.metadataDescription.orNull\n+    )\n+  }\n+\n+  private def toJavaOutputOperationInfo(\n+      outputOperationInfo: OutputOperationInfo): JavaOutputOperationInfo = {\n+    JavaOutputOperationInfo(\n+      outputOperationInfo.batchTime,\n+      outputOperationInfo.id,\n+      outputOperationInfo.name,\n+      outputOperationInfo.description: String,\n+      outputOperationInfo.startTime.getOrElse(-1),\n+      outputOperationInfo.endTime.getOrElse(-1),\n+      outputOperationInfo.failureReason.orNull\n+    )\n+  }\n+\n+  private def toJavaBatchInfo(batchInfo: BatchInfo): JavaBatchInfo = {\n+    JavaBatchInfo(\n+      batchInfo.batchTime,\n+      batchInfo.streamIdToInputInfo.mapValues(toJavaStreamInputInfo(_)).asJava,\n+      batchInfo.submissionTime,\n+      batchInfo.processingStartTime.getOrElse(-1),",
    "line": 69
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "> If the Java API is going to use -1 as \"not set\" (equivalent to Python), then would the python being using -1 as well?\n\nYes.\n",
    "commit": "c21e786c72b5b89a22c6a3f2237ee33e09e55e0b",
    "createdAt": "2015-11-09T22:53:54Z",
    "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.api.java\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.streaming.scheduler._\n+\n+/**\n+ * A wrapper to convert a [[JavaStreamingListener]] to a [[StreamingListener]].\n+ */\n+private[streaming] class JavaStreamingListenerWrapper(javaStreamingListener: JavaStreamingListener)\n+  extends StreamingListener {\n+\n+  private def toJavaReceiverInfo(receiverInfo: ReceiverInfo): JavaReceiverInfo = {\n+    JavaReceiverInfo(\n+      receiverInfo.streamId,\n+      receiverInfo.name,\n+      receiverInfo.active,\n+      receiverInfo.location,\n+      receiverInfo.lastErrorMessage,\n+      receiverInfo.lastError,\n+      receiverInfo.lastErrorTime\n+    )\n+  }\n+\n+  private def toJavaStreamInputInfo(streamInputInfo: StreamInputInfo): JavaStreamInputInfo = {\n+    JavaStreamInputInfo(\n+      streamInputInfo.inputStreamId,\n+      streamInputInfo.numRecords: Long,\n+      streamInputInfo.metadata.asJava,\n+      streamInputInfo.metadataDescription.orNull\n+    )\n+  }\n+\n+  private def toJavaOutputOperationInfo(\n+      outputOperationInfo: OutputOperationInfo): JavaOutputOperationInfo = {\n+    JavaOutputOperationInfo(\n+      outputOperationInfo.batchTime,\n+      outputOperationInfo.id,\n+      outputOperationInfo.name,\n+      outputOperationInfo.description: String,\n+      outputOperationInfo.startTime.getOrElse(-1),\n+      outputOperationInfo.endTime.getOrElse(-1),\n+      outputOperationInfo.failureReason.orNull\n+    )\n+  }\n+\n+  private def toJavaBatchInfo(batchInfo: BatchInfo): JavaBatchInfo = {\n+    JavaBatchInfo(\n+      batchInfo.batchTime,\n+      batchInfo.streamIdToInputInfo.mapValues(toJavaStreamInputInfo(_)).asJava,\n+      batchInfo.submissionTime,\n+      batchInfo.processingStartTime.getOrElse(-1),",
    "line": 69
  }],
  "prId": 9420
}]