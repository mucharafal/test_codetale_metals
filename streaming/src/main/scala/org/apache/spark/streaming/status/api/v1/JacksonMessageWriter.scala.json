[{
  "comments": [{
    "author": {
      "login": "uncleGen"
    },
    "body": "Duplicated class, why not use **JacksonMessageWriter** in spark-core?",
    "commit": "651dc679b865603be677ca9d30b975ce5c3c5df0",
    "createdAt": "2016-11-24T09:12:24Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.status.api.v1\n+\n+import java.io.OutputStream\n+import java.lang.annotation.Annotation\n+import java.lang.reflect.Type\n+import java.nio.charset.StandardCharsets\n+import java.text.SimpleDateFormat\n+import java.util.{Calendar, Locale, SimpleTimeZone}\n+import javax.ws.rs.Produces\n+import javax.ws.rs.core.{MediaType, MultivaluedMap}\n+import javax.ws.rs.ext.{MessageBodyWriter, Provider}\n+\n+import com.fasterxml.jackson.annotation.JsonInclude\n+import com.fasterxml.jackson.databind.{ObjectMapper, SerializationFeature}\n+\n+/**\n+ * This class converts the POJO metric responses into json, using jackson.\n+ *\n+ * This doesn't follow the standard jersey-jackson plugin options, because we want to stick\n+ * with an old version of jersey (since we have it from yarn anyway) and don't want to pull in lots\n+ * of dependencies from a new plugin.\n+ *\n+ * Note that jersey automatically discovers this class based on its package and its annotations.\n+ */\n+@Provider\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class JacksonMessageWriter extends MessageBodyWriter[Object]{\n+",
    "line": 44
  }, {
    "author": {
      "login": "ChorPangChan"
    },
    "body": "actually im not sure about this.\r\ncan you explain a little bit more?\r\n\r\nthere is a posibility that someone can change JacksonMessageWriter in spark-core\r\nwithout even notice that streaming is also using that class\r\n\r\nin the view of providing an api, im not sure if that would be a good idea.",
    "commit": "651dc679b865603be677ca9d30b975ce5c3c5df0",
    "createdAt": "2016-11-25T02:25:58Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.status.api.v1\n+\n+import java.io.OutputStream\n+import java.lang.annotation.Annotation\n+import java.lang.reflect.Type\n+import java.nio.charset.StandardCharsets\n+import java.text.SimpleDateFormat\n+import java.util.{Calendar, Locale, SimpleTimeZone}\n+import javax.ws.rs.Produces\n+import javax.ws.rs.core.{MediaType, MultivaluedMap}\n+import javax.ws.rs.ext.{MessageBodyWriter, Provider}\n+\n+import com.fasterxml.jackson.annotation.JsonInclude\n+import com.fasterxml.jackson.databind.{ObjectMapper, SerializationFeature}\n+\n+/**\n+ * This class converts the POJO metric responses into json, using jackson.\n+ *\n+ * This doesn't follow the standard jersey-jackson plugin options, because we want to stick\n+ * with an old version of jersey (since we have it from yarn anyway) and don't want to pull in lots\n+ * of dependencies from a new plugin.\n+ *\n+ * Note that jersey automatically discovers this class based on its package and its annotations.\n+ */\n+@Provider\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class JacksonMessageWriter extends MessageBodyWriter[Object]{\n+",
    "line": 44
  }, {
    "author": {
      "login": "uncleGen"
    },
    "body": "> there is a posibility that someone can change JacksonMessageWriter in spark-core\r\nwithout even notice that streaming is also using that class\r\n\r\nIMHO, we should not worry about this kind of problem. It is about “correctness” that everyone should guarantee when commit code. Besides, we can add new unit test to avoid incompatibility. Isn't it?",
    "commit": "651dc679b865603be677ca9d30b975ce5c3c5df0",
    "createdAt": "2016-11-25T03:18:45Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.status.api.v1\n+\n+import java.io.OutputStream\n+import java.lang.annotation.Annotation\n+import java.lang.reflect.Type\n+import java.nio.charset.StandardCharsets\n+import java.text.SimpleDateFormat\n+import java.util.{Calendar, Locale, SimpleTimeZone}\n+import javax.ws.rs.Produces\n+import javax.ws.rs.core.{MediaType, MultivaluedMap}\n+import javax.ws.rs.ext.{MessageBodyWriter, Provider}\n+\n+import com.fasterxml.jackson.annotation.JsonInclude\n+import com.fasterxml.jackson.databind.{ObjectMapper, SerializationFeature}\n+\n+/**\n+ * This class converts the POJO metric responses into json, using jackson.\n+ *\n+ * This doesn't follow the standard jersey-jackson plugin options, because we want to stick\n+ * with an old version of jersey (since we have it from yarn anyway) and don't want to pull in lots\n+ * of dependencies from a new plugin.\n+ *\n+ * Note that jersey automatically discovers this class based on its package and its annotations.\n+ */\n+@Provider\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class JacksonMessageWriter extends MessageBodyWriter[Object]{\n+",
    "line": 44
  }, {
    "author": {
      "login": "ChorPangChan"
    },
    "body": "I agree in terms of functionality\r\nbut how about the design/structure\r\n\r\nJacksonMessageWriter in spark-core is private to api.v1\r\nAlthouth we can use it though holder.setInitParameter\r\nshoud we?\r\nis there any sample of reusing the JacksonMessageWriter in other component?\r\n\r\nI imaging someday in the future, sommeone will create a v2 api\r\nand inside that v2 api, there will be another JacksonMessageWriter as well\r\nbecause even they have the same function, I dont think they have the same meaning\r\n\r\nin order to share the class of JacksonMessageWriter\r\nwe may need to move it outside v1 first\r\nand i think that will be too much to consider for our current goal.",
    "commit": "651dc679b865603be677ca9d30b975ce5c3c5df0",
    "createdAt": "2016-11-25T04:28:04Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.status.api.v1\n+\n+import java.io.OutputStream\n+import java.lang.annotation.Annotation\n+import java.lang.reflect.Type\n+import java.nio.charset.StandardCharsets\n+import java.text.SimpleDateFormat\n+import java.util.{Calendar, Locale, SimpleTimeZone}\n+import javax.ws.rs.Produces\n+import javax.ws.rs.core.{MediaType, MultivaluedMap}\n+import javax.ws.rs.ext.{MessageBodyWriter, Provider}\n+\n+import com.fasterxml.jackson.annotation.JsonInclude\n+import com.fasterxml.jackson.databind.{ObjectMapper, SerializationFeature}\n+\n+/**\n+ * This class converts the POJO metric responses into json, using jackson.\n+ *\n+ * This doesn't follow the standard jersey-jackson plugin options, because we want to stick\n+ * with an old version of jersey (since we have it from yarn anyway) and don't want to pull in lots\n+ * of dependencies from a new plugin.\n+ *\n+ * Note that jersey automatically discovers this class based on its package and its annotations.\n+ */\n+@Provider\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class JacksonMessageWriter extends MessageBodyWriter[Object]{\n+",
    "line": 44
  }],
  "prId": 16000
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "You shouldn't add this. You should just use the one from spark-core. The whole API should use consistent serialization, and all API endpoints should be using the same provider here. In fact you shouldn't even register a second provider - the registration done by the spark-core code should also apply to any API endpoints you're adding in this module.\r\n\r\nYou may need to mess with the registration of the provider in core a little bit, though. Or maybe not, if you do the package renaming I requested.",
    "commit": "651dc679b865603be677ca9d30b975ce5c3c5df0",
    "createdAt": "2016-12-05T22:36:27Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.streaming.status.api.v1\n+\n+import java.io.OutputStream\n+import java.lang.annotation.Annotation\n+import java.lang.reflect.Type\n+import java.nio.charset.StandardCharsets\n+import java.text.SimpleDateFormat\n+import java.util.{Calendar, Locale, SimpleTimeZone}\n+import javax.ws.rs.Produces\n+import javax.ws.rs.core.{MediaType, MultivaluedMap}\n+import javax.ws.rs.ext.{MessageBodyWriter, Provider}\n+\n+import com.fasterxml.jackson.annotation.JsonInclude\n+import com.fasterxml.jackson.databind.{ObjectMapper, SerializationFeature}\n+\n+/**\n+ * This class converts the POJO metric responses into json, using jackson.\n+ *\n+ * This doesn't follow the standard jersey-jackson plugin options, because we want to stick\n+ * with an old version of jersey (since we have it from yarn anyway) and don't want to pull in lots\n+ * of dependencies from a new plugin.\n+ *\n+ * Note that jersey automatically discovers this class based on its package and its annotations.\n+ */\n+@Provider\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class JacksonMessageWriter extends MessageBodyWriter[Object]{",
    "line": 43
  }],
  "prId": 16000
}]