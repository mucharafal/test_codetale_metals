[{
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: private[streaming]\n",
    "commit": "c941c3e5e457c8fe3fbf546c5e09aa954075be19",
    "createdAt": "2015-11-11T17:58:48Z",
    "diffHunk": "@@ -18,6 +18,82 @@\n package org.apache.spark.streaming.api.java\n \n import org.apache.spark.streaming.Time\n+import org.apache.spark.streaming.scheduler.StreamingListener\n+\n+private[streaming] trait PythonStreamingListener{\n+\n+  /** Called when a receiver has been started */\n+  def onReceiverStarted(receiverStarted: JavaStreamingListenerReceiverStarted) { }\n+\n+  /** Called when a receiver has reported an error */\n+  def onReceiverError(receiverError: JavaStreamingListenerReceiverError) { }\n+\n+  /** Called when a receiver has been stopped */\n+  def onReceiverStopped(receiverStopped: JavaStreamingListenerReceiverStopped) { }\n+\n+  /** Called when a batch of jobs has been submitted for processing. */\n+  def onBatchSubmitted(batchSubmitted: JavaStreamingListenerBatchSubmitted) { }\n+\n+  /** Called when processing of a batch of jobs has started.  */\n+  def onBatchStarted(batchStarted: JavaStreamingListenerBatchStarted) { }\n+\n+  /** Called when processing of a batch of jobs has completed. */\n+  def onBatchCompleted(batchCompleted: JavaStreamingListenerBatchCompleted) { }\n+\n+  /** Called when processing of a job of a batch has started. */\n+  def onOutputOperationStarted(\n+      outputOperationStarted: JavaStreamingListenerOutputOperationStarted) { }\n+\n+  /** Called when processing of a job of a batch has completed. */\n+  def onOutputOperationCompleted(\n+      outputOperationCompleted: JavaStreamingListenerOutputOperationCompleted) { }\n+}\n+\n+class PythonStreamingListenerWrapper(listener: PythonStreamingListener)"
  }],
  "prId": 9186
}]