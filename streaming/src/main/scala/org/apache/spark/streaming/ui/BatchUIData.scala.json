[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "What is `equals` and `hashCode` useful for? Unit tests? If so, then could this be a case class? Since this is internal class and binary compatibility is not really an issue, then best to make it a case class. Reduces code complexity.\n",
    "commit": "0727d35a153da9f27516e1d3834046e5ed6a6088",
    "createdAt": "2015-04-29T08:50:09Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.spark.streaming.ui\n+\n+import org.apache.spark.streaming.Time\n+import org.apache.spark.streaming.scheduler.BatchInfo\n+import org.apache.spark.streaming.ui.StreamingJobProgressListener._\n+\n+private[ui] case class OutputOpIdAndSparkJobId(outputOpId: OutputOpId, sparkJobId: SparkJobId)\n+\n+private[ui] class BatchUIData(\n+    val batchTime: Time,\n+    val receiverNumRecords: Map[Int, Long],\n+    val submissionTime: Long,\n+    val processingStartTime: Option[Long],\n+    val processingEndTime: Option[Long]) {\n+\n+  var outputOpIdSparkJobIdPairs: Seq[OutputOpIdAndSparkJobId] = Seq.empty\n+\n+  /**\n+   * Time taken for the first job of this batch to start processing from the time this batch\n+   * was submitted to the streaming scheduler. Essentially, it is\n+   * `processingStartTime` - `submissionTime`.\n+   */\n+  def schedulingDelay: Option[Long] = processingStartTime.map(_ - submissionTime)\n+\n+  /**\n+   * Time taken for the all jobs of this batch to finish processing from the time they started\n+   * processing. Essentially, it is `processingEndTime` - `processingStartTime`.\n+   */\n+  def processingDelay: Option[Long] = {\n+    for (start <- processingStartTime;\n+         end <- processingEndTime)\n+      yield end - start\n+  }\n+\n+  /**\n+   * Time taken for all the jobs of this batch to finish processing from the time they\n+   * were submitted.  Essentially, it is `processingDelay` + `schedulingDelay`.\n+   */\n+  def totalDelay: Option[Long] = processingEndTime.map(_ - submissionTime)\n+\n+  /**\n+   * The number of recorders received by the receivers in this batch.\n+   */\n+  def numRecords: Long = receiverNumRecords.map(_._2).sum\n+\n+  def canEqual(other: Any): Boolean = other.isInstanceOf[BatchUIData]\n+\n+  override def equals(other: Any): Boolean = other match {"
  }],
  "prId": 5473
}]