[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Can you explain what this does? Just for some context?\nAlso will this serialize using Kryo or just embed Java serialization within Kryo? Maybe it is a good idea to make it as efficient in Kryo as possible. \n",
    "commit": "ee452fe45da2fb3b6775b8622b03b8aaafa997b0",
    "createdAt": "2016-01-07T01:46:09Z",
    "diffHunk": "@@ -77,6 +80,7 @@ private[streaming] class EmptyStateMap[K: ClassTag, S: ClassTag] extends StateMa\n }\n \n /** Implementation of StateMap based on Spark's [[org.apache.spark.util.collection.OpenHashMap]] */\n+@DefaultSerializer(classOf[KryoJavaSerializer])"
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "Actually, this is not a correct fix because the user can put objects that only support Kryo into this Map. KryoJavaSerializer cannot handle them. Fixed this issue in my latest commit.\n",
    "commit": "ee452fe45da2fb3b6775b8622b03b8aaafa997b0",
    "createdAt": "2016-01-07T19:06:39Z",
    "diffHunk": "@@ -77,6 +80,7 @@ private[streaming] class EmptyStateMap[K: ClassTag, S: ClassTag] extends StateMa\n }\n \n /** Implementation of StateMap based on Spark's [[org.apache.spark.util.collection.OpenHashMap]] */\n+@DefaultSerializer(classOf[KryoJavaSerializer])"
  }],
  "prId": 10609
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "I removed ClassTag because EmptyStateMap doesn't need it. If removing them, we don't need to add any codes for `EmptyStateMap` since it doesn't contain any field.\n",
    "commit": "ee452fe45da2fb3b6775b8622b03b8aaafa997b0",
    "createdAt": "2016-01-07T19:08:48Z",
    "diffHunk": "@@ -17,16 +17,20 @@\n \n package org.apache.spark.streaming.util\n \n-import java.io.{ObjectInputStream, ObjectOutputStream}\n+import java.io._\n \n import scala.reflect.ClassTag\n \n+import com.esotericsoftware.kryo.{Kryo, KryoSerializable}\n+import com.esotericsoftware.kryo.io.{Input, Output}\n+\n import org.apache.spark.SparkConf\n+import org.apache.spark.serializer.{KryoOutputObjectOutputBridge, KryoInputObjectInputBridge}\n import org.apache.spark.streaming.util.OpenHashMapBasedStateMap._\n import org.apache.spark.util.collection.OpenHashMap\n \n /** Internal interface for defining the map that keeps track of sessions. */\n-private[streaming] abstract class StateMap[K: ClassTag, S: ClassTag] extends Serializable {",
    "line": 18
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "Good idea.\n",
    "commit": "ee452fe45da2fb3b6775b8622b03b8aaafa997b0",
    "createdAt": "2016-01-07T20:18:16Z",
    "diffHunk": "@@ -17,16 +17,20 @@\n \n package org.apache.spark.streaming.util\n \n-import java.io.{ObjectInputStream, ObjectOutputStream}\n+import java.io._\n \n import scala.reflect.ClassTag\n \n+import com.esotericsoftware.kryo.{Kryo, KryoSerializable}\n+import com.esotericsoftware.kryo.io.{Input, Output}\n+\n import org.apache.spark.SparkConf\n+import org.apache.spark.serializer.{KryoOutputObjectOutputBridge, KryoInputObjectInputBridge}\n import org.apache.spark.streaming.util.OpenHashMapBasedStateMap._\n import org.apache.spark.util.collection.OpenHashMap\n \n /** Internal interface for defining the map that keeps track of sessions. */\n-private[streaming] abstract class StateMap[K: ClassTag, S: ClassTag] extends Serializable {",
    "line": 18
  }],
  "prId": 10609
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "Add `keyClassTag` and `stateClassTag` so that we can recover them.\n",
    "commit": "ee452fe45da2fb3b6775b8622b03b8aaafa997b0",
    "createdAt": "2016-01-07T19:09:50Z",
    "diffHunk": "@@ -77,21 +81,26 @@ private[streaming] class EmptyStateMap[K: ClassTag, S: ClassTag] extends StateMa\n }\n \n /** Implementation of StateMap based on Spark's [[org.apache.spark.util.collection.OpenHashMap]] */\n-private[streaming] class OpenHashMapBasedStateMap[K: ClassTag, S: ClassTag](\n+private[streaming] class OpenHashMapBasedStateMap[K, S](\n     @transient @volatile var parentStateMap: StateMap[K, S],\n-    initialCapacity: Int = DEFAULT_INITIAL_CAPACITY,\n-    deltaChainThreshold: Int = DELTA_CHAIN_LENGTH_THRESHOLD\n-  ) extends StateMap[K, S] { self =>\n+    private var initialCapacity: Int = DEFAULT_INITIAL_CAPACITY,\n+    private var deltaChainThreshold: Int = DELTA_CHAIN_LENGTH_THRESHOLD\n+  )(implicit private var keyClassTag: ClassTag[K], private var stateClassTag: ClassTag[S])",
    "line": 53
  }],
  "prId": 10609
}]