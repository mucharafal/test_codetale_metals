[{
  "comments": [{
    "author": {
      "login": "dragos"
    },
    "body": "Probably not worth to serialize (same for RateEstimator). If we make them `@transient`, we should add a test that after recovery from a checkpoint the rate controller is still active (non-null and registered with the streaming listener bus).\n\n@tdas what do you think?\n",
    "commit": "f168c9476fc7104d3d3f92702793e0d9116117d0",
    "createdAt": "2015-07-22T21:29:30Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.scheduler\n+\n+import java.util.concurrent.atomic.AtomicLong\n+\n+import scala.concurrent.{ExecutionContext, Future}\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.streaming.scheduler.rate.RateEstimator\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * :: DeveloperApi ::\n+ * A StreamingListener that receives batch completion updates, and maintains\n+ * an estimate of the speed at which this stream should ingest messages,\n+ * given an estimate computation from a `RateEstimator`\n+ */\n+@DeveloperApi\n+private [streaming] abstract class RateController(val streamUID: Int, rateEstimator: RateEstimator)\n+  extends StreamingListener with Serializable {"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "Yes. Agreed. Transient plus update some existing test case in CheckpointSuite\n",
    "commit": "f168c9476fc7104d3d3f92702793e0d9116117d0",
    "createdAt": "2015-07-23T04:26:26Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.scheduler\n+\n+import java.util.concurrent.atomic.AtomicLong\n+\n+import scala.concurrent.{ExecutionContext, Future}\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.streaming.scheduler.rate.RateEstimator\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * :: DeveloperApi ::\n+ * A StreamingListener that receives batch completion updates, and maintains\n+ * an estimate of the speed at which this stream should ingest messages,\n+ * given an estimate computation from a `RateEstimator`\n+ */\n+@DeveloperApi\n+private [streaming] abstract class RateController(val streamUID: Int, rateEstimator: RateEstimator)\n+  extends StreamingListener with Serializable {"
  }],
  "prId": 7600
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "newSpeed  --> newRate\n",
    "commit": "f168c9476fc7104d3d3f92702793e0d9116117d0",
    "createdAt": "2015-07-24T06:49:51Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.scheduler\n+\n+import java.util.concurrent.atomic.AtomicLong\n+\n+import scala.concurrent.{ExecutionContext, Future}\n+\n+import org.apache.spark.streaming.scheduler.rate.RateEstimator\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * A StreamingListener that receives batch completion updates, and maintains\n+ * an estimate of the speed at which this stream should ingest messages,\n+ * given an estimate computation from a `RateEstimator`\n+ */\n+private [streaming] abstract class RateController(val streamUID: Int, rateEstimator: RateEstimator)\n+  extends StreamingListener with Serializable {\n+\n+  protected def publish(rate: Long): Unit\n+\n+  // Used to compute & publish the rate update asynchronously\n+  @transient\n+  implicit private val executionContext = ExecutionContext.fromExecutorService(\n+    ThreadUtils.newDaemonSingleThreadExecutor(\"stream-rate-update\"))\n+\n+  private val rateLimit: AtomicLong = new AtomicLong(-1L)\n+\n+  /**\n+   * Compute the new rate limit and publish it asynchronously.\n+   */\n+  private def computeAndPublish(time: Long, elems: Long, workDelay: Long, waitDelay: Long): Unit =\n+    Future[Unit] {\n+      val newSpeed = rateEstimator.compute(time, elems, workDelay, waitDelay)"
  }],
  "prId": 7600
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "We dont generally use postfix notation. use `newSpeed.foraech`\n",
    "commit": "f168c9476fc7104d3d3f92702793e0d9116117d0",
    "createdAt": "2015-07-24T06:49:56Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.scheduler\n+\n+import java.util.concurrent.atomic.AtomicLong\n+\n+import scala.concurrent.{ExecutionContext, Future}\n+\n+import org.apache.spark.streaming.scheduler.rate.RateEstimator\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * A StreamingListener that receives batch completion updates, and maintains\n+ * an estimate of the speed at which this stream should ingest messages,\n+ * given an estimate computation from a `RateEstimator`\n+ */\n+private [streaming] abstract class RateController(val streamUID: Int, rateEstimator: RateEstimator)\n+  extends StreamingListener with Serializable {\n+\n+  protected def publish(rate: Long): Unit\n+\n+  // Used to compute & publish the rate update asynchronously\n+  @transient\n+  implicit private val executionContext = ExecutionContext.fromExecutorService(\n+    ThreadUtils.newDaemonSingleThreadExecutor(\"stream-rate-update\"))\n+\n+  private val rateLimit: AtomicLong = new AtomicLong(-1L)\n+\n+  /**\n+   * Compute the new rate limit and publish it asynchronously.\n+   */\n+  private def computeAndPublish(time: Long, elems: Long, workDelay: Long, waitDelay: Long): Unit =\n+    Future[Unit] {\n+      val newSpeed = rateEstimator.compute(time, elems, workDelay, waitDelay)\n+      newSpeed foreach { s =>"
  }],
  "prId": 7600
}]