[{
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "I remember this line cannot be put here because the compiler cannot infer `KeyType`.\n",
    "commit": "6d29b7a69c81f19b241a6b0202ddd07b990fd508",
    "createdAt": "2015-12-09T21:28:04Z",
    "diffHunk": "@@ -91,92 +96,93 @@ sealed abstract class StateSpec[KeyType, ValueType, StateType, EmittedType] exte\n /**\n  * :: Experimental ::\n  * Builder object for creating instances of [[org.apache.spark.streaming.StateSpec StateSpec]]\n- * that is used for specifying the parameters of the DStream transformation `trackStateByKey`\n+ * that is used for specifying the parameters of the DStream transformation `mapWithState`\n  * that is used for specifying the parameters of the DStream transformation\n- * `trackStateByKey` operation of a\n+ * `mapWithState` operation of a\n  * [[org.apache.spark.streaming.dstream.PairDStreamFunctions pair DStream]] (Scala) or a\n  * [[org.apache.spark.streaming.api.java.JavaPairDStream JavaPairDStream]] (Java).\n  *\n  * Example in Scala:\n  * {{{\n- *    def trackingFunction(data: Option[ValueType], wrappedState: State[StateType]): EmittedType = {\n+ *    def mappingFunction(data: Option[ValueType], wrappedState: State[StateType]): MappedType = {\n  *      ...\n  *    }\n  *\n- *    val emittedRecordDStream = keyValueDStream.trackStateByKey[StateType, EmittedDataType](\n- *        StateSpec.function(trackingFunction).numPartitions(10))\n+ *    val spec = StateSpec.function(mappingFunction).numPartitions(10)",
    "line": 122
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "I am modifying the signature of the function to have the key. See jira SPARK-12245. So then this should not be a problem.\n",
    "commit": "6d29b7a69c81f19b241a6b0202ddd07b990fd508",
    "createdAt": "2015-12-09T21:31:04Z",
    "diffHunk": "@@ -91,92 +96,93 @@ sealed abstract class StateSpec[KeyType, ValueType, StateType, EmittedType] exte\n /**\n  * :: Experimental ::\n  * Builder object for creating instances of [[org.apache.spark.streaming.StateSpec StateSpec]]\n- * that is used for specifying the parameters of the DStream transformation `trackStateByKey`\n+ * that is used for specifying the parameters of the DStream transformation `mapWithState`\n  * that is used for specifying the parameters of the DStream transformation\n- * `trackStateByKey` operation of a\n+ * `mapWithState` operation of a\n  * [[org.apache.spark.streaming.dstream.PairDStreamFunctions pair DStream]] (Scala) or a\n  * [[org.apache.spark.streaming.api.java.JavaPairDStream JavaPairDStream]] (Java).\n  *\n  * Example in Scala:\n  * {{{\n- *    def trackingFunction(data: Option[ValueType], wrappedState: State[StateType]): EmittedType = {\n+ *    def mappingFunction(data: Option[ValueType], wrappedState: State[StateType]): MappedType = {\n  *      ...\n  *    }\n  *\n- *    val emittedRecordDStream = keyValueDStream.trackStateByKey[StateType, EmittedDataType](\n- *        StateSpec.function(trackingFunction).numPartitions(10))\n+ *    val spec = StateSpec.function(mappingFunction).numPartitions(10)",
    "line": 122
  }],
  "prId": 10224
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: the key type is `String` now\n",
    "commit": "6d29b7a69c81f19b241a6b0202ddd07b990fd508",
    "createdAt": "2015-12-10T00:19:30Z",
    "diffHunk": "@@ -91,115 +105,125 @@ sealed abstract class StateSpec[KeyType, ValueType, StateType, EmittedType] exte\n /**\n  * :: Experimental ::\n  * Builder object for creating instances of [[org.apache.spark.streaming.StateSpec StateSpec]]\n- * that is used for specifying the parameters of the DStream transformation `trackStateByKey`\n+ * that is used for specifying the parameters of the DStream transformation `mapWithState`\n  * that is used for specifying the parameters of the DStream transformation\n- * `trackStateByKey` operation of a\n+ * `mapWithState` operation of a\n  * [[org.apache.spark.streaming.dstream.PairDStreamFunctions pair DStream]] (Scala) or a\n  * [[org.apache.spark.streaming.api.java.JavaPairDStream JavaPairDStream]] (Java).\n  *\n  * Example in Scala:\n  * {{{\n- *    def trackingFunction(data: Option[ValueType], wrappedState: State[StateType]): EmittedType = {\n- *      ...\n+ *    // A mapping function that maintains an integer state and return a String\n+ *    def mappingFunction(key: String, value: Option[Int], state: State[Int]): Option[String] = {\n+ *      // Use state.exists(), state.get(), state.update() and state.remove()\n+ *      // to manage state, and return the necessary string\n  *    }\n  *\n- *    val emittedRecordDStream = keyValueDStream.trackStateByKey[StateType, EmittedDataType](\n- *        StateSpec.function(trackingFunction).numPartitions(10))\n+ *    val spec = StateSpec.function(mappingFunction).numPartitions(10)\n+ *\n+ *    val mapWithStateDStream = keyValueDStream.mapWithState[StateType, MappedType](spec)\n  * }}}\n  *\n  * Example in Java:\n  * {{{\n- *    StateSpec<KeyType, ValueType, StateType, EmittedDataType> spec =\n- *      StateSpec.<KeyType, ValueType, StateType, EmittedDataType>function(trackingFunction)\n- *                    .numPartition(10);\n+ *   // A mapping function that maintains an integer state and return a string\n+ *   Function3<String, Optional<Integer>, State<Integer>, String> mappingFunction =\n+ *       new Function3<String, Optional<Integer>, State<Integer>, String>() {\n+ *           @Override\n+ *           public Optional<String> call(Optional<Integer> value, State<Integer> state) {\n+ *               // Use state.exists(), state.get(), state.update() and state.remove()\n+ *               // to manage state, and return the necessary string\n+ *           }\n+ *       };\n  *\n- *    JavaTrackStateDStream<KeyType, ValueType, StateType, EmittedType> emittedRecordDStream =\n- *      javaPairDStream.<StateType, EmittedDataType>trackStateByKey(spec);\n+ *    JavaMapWithStateDStream<Integer, Integer, Integer, String> mapWithStateDStream ="
  }],
  "prId": 10224
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: the key type is `String`\n",
    "commit": "6d29b7a69c81f19b241a6b0202ddd07b990fd508",
    "createdAt": "2015-12-10T00:19:50Z",
    "diffHunk": "@@ -37,50 +37,64 @@ import org.apache.spark.{HashPartitioner, Partitioner}\n  *\n  * Example in Scala:\n  * {{{\n- *    def trackingFunction(data: Option[ValueType], wrappedState: State[StateType]): EmittedType = {\n- *      ...\n+ *    // A mapping function that maintains an integer state and return a String\n+ *    def mappingFunction(key: String, value: Option[Int], state: State[Int]): Option[String] = {\n+ *      // Use state.exists(), state.get(), state.update() and state.remove()\n+ *      // to manage state, and return the necessary string\n  *    }\n  *\n- *    val spec = StateSpec.function(trackingFunction).numPartitions(10)\n+ *    val spec = StateSpec.function(mappingFunction).numPartitions(10)\n  *\n- *    val emittedRecordDStream = keyValueDStream.trackStateByKey[StateType, EmittedDataType](spec)\n+ *    val mapWithStateDStream = keyValueDStream.mapWithState[StateType, MappedType](spec)\n  * }}}\n  *\n  * Example in Java:\n  * {{{\n- *    StateSpec<KeyType, ValueType, StateType, EmittedDataType> spec =\n- *      StateSpec.<KeyType, ValueType, StateType, EmittedDataType>function(trackingFunction)\n- *                    .numPartition(10);\n+ *   // A mapping function that maintains an integer state and return a string\n+ *   Function3<String, Optional<Integer>, State<Integer>, String> mappingFunction =\n+ *       new Function3<String, Optional<Integer>, State<Integer>, String>() {\n+ *           @Override\n+ *           public Optional<String> call(Optional<Integer> value, State<Integer> state) {\n+ *               // Use state.exists(), state.get(), state.update() and state.remove()\n+ *               // to manage state, and return the necessary string\n+ *           }\n+ *       };\n  *\n- *    JavaTrackStateDStream<KeyType, ValueType, StateType, EmittedType> emittedRecordDStream =\n- *      javaPairDStream.<StateType, EmittedDataType>trackStateByKey(spec);\n+ *    JavaMapWithStateDStream<Integer, Integer, Integer, String> mapWithStateDStream ="
  }],
  "prId": 10224
}]