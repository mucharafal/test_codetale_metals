[{
  "comments": [{
    "author": {
      "login": "uncleGen"
    },
    "body": "nit: some indent issue",
    "commit": "651dc679b865603be677ca9d30b975ce5c3c5df0",
    "createdAt": "2016-11-24T09:15:28Z",
    "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.status.api.v1\n+\n+import javax.servlet.ServletContext\n+import javax.ws.rs.{Path, WebApplicationException}\n+import javax.ws.rs.core.{Context, Response}\n+\n+import org.eclipse.jetty.server.handler.ContextHandler\n+import org.eclipse.jetty.servlet.{ServletContextHandler, ServletHolder}\n+import org.glassfish.jersey.server.ServerProperties\n+import org.glassfish.jersey.servlet.ServletContainer\n+\n+import org.apache.spark.status.api.v1.UIRoot\n+import org.apache.spark.streaming.ui.StreamingJobProgressListener\n+\n+@Path(\"/v1\")\n+private[v1] class StreamingApiRootResource extends StreamingUIRootFromServletContext{\n+\n+  @Path(\"statistics\")\n+  def getStreamingStatistics(): StreamingStatisticsResource = {\n+    new StreamingStatisticsResource(listener, startTimeMillis)\n+  }\n+\n+  @Path(\"receivers\")\n+  def getReceivers(): AllReceiversResource = {\n+    new AllReceiversResource(listener)\n+  }\n+\n+  @Path(\"receivers/{streamId: \\\\d+}\")\n+  def getReceiver(): OneReceiverResource = {\n+    new OneReceiverResource(listener)\n+  }\n+\n+  @Path(\"batches\")\n+  def getBatches(): AllBatchesResource = {\n+    new AllBatchesResource(listener)\n+  }\n+\n+  @Path(\"batches/{batchId: \\\\d+}\")\n+  def getBatch(): OneBatchResource = {\n+    new OneBatchResource(listener)\n+  }\n+\n+  @Path(\"batches/{batchId: \\\\d+}/operations\")\n+  def getOutputOperations(): AllOutputOperationsResource = {\n+    new AllOutputOperationsResource(listener)\n+  }\n+\n+  @Path(\"batches/{batchId: \\\\d+}/operations/{outputOpId: \\\\d+}\")\n+  def getOutputOperation(): OneOutputOperationResource = {\n+    new OneOutputOperationResource(listener)\n+  }\n+\n+}\n+\n+private[spark] object StreamingApiRootResource {\n+\n+  def getServletHandler(\n+    uiRoot: UIRoot,\n+    listener: StreamingJobProgressListener,\n+    startTimeMillis: Long\n+  ): ServletContextHandler = {\n+"
  }, {
    "author": {
      "login": "uncleGen"
    },
    "body": "nit: move \"): ServletContextHandler = {\"  to above line ",
    "commit": "651dc679b865603be677ca9d30b975ce5c3c5df0",
    "createdAt": "2016-11-24T09:18:02Z",
    "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.status.api.v1\n+\n+import javax.servlet.ServletContext\n+import javax.ws.rs.{Path, WebApplicationException}\n+import javax.ws.rs.core.{Context, Response}\n+\n+import org.eclipse.jetty.server.handler.ContextHandler\n+import org.eclipse.jetty.servlet.{ServletContextHandler, ServletHolder}\n+import org.glassfish.jersey.server.ServerProperties\n+import org.glassfish.jersey.servlet.ServletContainer\n+\n+import org.apache.spark.status.api.v1.UIRoot\n+import org.apache.spark.streaming.ui.StreamingJobProgressListener\n+\n+@Path(\"/v1\")\n+private[v1] class StreamingApiRootResource extends StreamingUIRootFromServletContext{\n+\n+  @Path(\"statistics\")\n+  def getStreamingStatistics(): StreamingStatisticsResource = {\n+    new StreamingStatisticsResource(listener, startTimeMillis)\n+  }\n+\n+  @Path(\"receivers\")\n+  def getReceivers(): AllReceiversResource = {\n+    new AllReceiversResource(listener)\n+  }\n+\n+  @Path(\"receivers/{streamId: \\\\d+}\")\n+  def getReceiver(): OneReceiverResource = {\n+    new OneReceiverResource(listener)\n+  }\n+\n+  @Path(\"batches\")\n+  def getBatches(): AllBatchesResource = {\n+    new AllBatchesResource(listener)\n+  }\n+\n+  @Path(\"batches/{batchId: \\\\d+}\")\n+  def getBatch(): OneBatchResource = {\n+    new OneBatchResource(listener)\n+  }\n+\n+  @Path(\"batches/{batchId: \\\\d+}/operations\")\n+  def getOutputOperations(): AllOutputOperationsResource = {\n+    new AllOutputOperationsResource(listener)\n+  }\n+\n+  @Path(\"batches/{batchId: \\\\d+}/operations/{outputOpId: \\\\d+}\")\n+  def getOutputOperation(): OneOutputOperationResource = {\n+    new OneOutputOperationResource(listener)\n+  }\n+\n+}\n+\n+private[spark] object StreamingApiRootResource {\n+\n+  def getServletHandler(\n+    uiRoot: UIRoot,\n+    listener: StreamingJobProgressListener,\n+    startTimeMillis: Long\n+  ): ServletContextHandler = {\n+"
  }],
  "prId": 16000
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Hmmm. I don't like this very much. I'd change it as part of my ongoing work anyway, once this gets in, but might as well do that now.\r\n\r\nThe streaming API endpoints should show up under the existing API, instead of creating a new hierarchy. So you should have \"/api/v1/application/:id/:attempt/streaming\".\r\n\r\nThere's no streaming in the SHS now, but if there was, your current endpoint would look extremely out of place, and you wouldn't even have a way to reach the API for different applications (since this is not \"mounted\" under the applications resource).",
    "commit": "651dc679b865603be677ca9d30b975ce5c3c5df0",
    "createdAt": "2016-12-05T22:43:59Z",
    "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.status.api.v1\n+\n+import javax.servlet.ServletContext\n+import javax.ws.rs.{Path, WebApplicationException}\n+import javax.ws.rs.core.{Context, Response}\n+\n+import org.eclipse.jetty.server.handler.ContextHandler\n+import org.eclipse.jetty.servlet.{ServletContextHandler, ServletHolder}\n+import org.glassfish.jersey.server.ServerProperties\n+import org.glassfish.jersey.servlet.ServletContainer\n+\n+import org.apache.spark.status.api.v1.UIRoot\n+import org.apache.spark.streaming.ui.StreamingJobProgressListener\n+\n+@Path(\"/v1\")",
    "line": 32
  }],
  "prId": 16000
}]