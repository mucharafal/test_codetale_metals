[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "We already have utility methods for this in `Utils`, no?\n",
    "commit": "9f7cd1999895ac6631eac48cf60c4d20110c0d42",
    "createdAt": "2015-05-05T08:04:14Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.ui\n+\n+import java.util.concurrent.TimeUnit\n+\n+object UIUtils {\n+\n+  /**\n+   * Return the short string for a `TimeUnit`.\n+   */\n+  def shortTimeUnitString(unit: TimeUnit): String = unit match {\n+    case TimeUnit.NANOSECONDS => \"ns\"\n+    case TimeUnit.MICROSECONDS => \"us\"\n+    case TimeUnit.MILLISECONDS => \"ms\"\n+    case TimeUnit.SECONDS => \"sec\"\n+    case TimeUnit.MINUTES => \"min\"\n+    case TimeUnit.HOURS => \"hrs\"\n+    case TimeUnit.DAYS => \"days\"\n+  }\n+\n+  /**\n+   * Find the best `TimeUnit` for converting milliseconds to a friendly string. Return the value\n+   * after converting, also with its TimeUnit.\n+   */\n+  def normalizeDuration(milliseconds: Long): (Double, TimeUnit) = {",
    "line": 41
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "Yes, but this one requires normalizing and getting the unit by which it is normalized. And later we will use the same unit to normalize others time intervals. This is so that we can set the max Y-axis range and corresponding time unit for all the histograms and then map all other values using the same unit.\n",
    "commit": "9f7cd1999895ac6631eac48cf60c4d20110c0d42",
    "createdAt": "2015-05-05T09:10:30Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming.ui\n+\n+import java.util.concurrent.TimeUnit\n+\n+object UIUtils {\n+\n+  /**\n+   * Return the short string for a `TimeUnit`.\n+   */\n+  def shortTimeUnitString(unit: TimeUnit): String = unit match {\n+    case TimeUnit.NANOSECONDS => \"ns\"\n+    case TimeUnit.MICROSECONDS => \"us\"\n+    case TimeUnit.MILLISECONDS => \"ms\"\n+    case TimeUnit.SECONDS => \"sec\"\n+    case TimeUnit.MINUTES => \"min\"\n+    case TimeUnit.HOURS => \"hrs\"\n+    case TimeUnit.DAYS => \"days\"\n+  }\n+\n+  /**\n+   * Find the best `TimeUnit` for converting milliseconds to a friendly string. Return the value\n+   * after converting, also with its TimeUnit.\n+   */\n+  def normalizeDuration(milliseconds: Long): (Double, TimeUnit) = {",
    "line": 41
  }],
  "prId": 5533
}]