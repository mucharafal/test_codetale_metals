[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "What is the use of the \"name\"? You seem to create set name in each DStream, then set local property using that name, and then the same name and subsequent property gets read by RDDs generated in the thread. It doesnt seem like that the \"name\" gets is even shown as part of the short/long callsite. Only used in the property name. Wouldnt it have worked without the \"name\" in the property name? I think I am missing something here.\n",
    "commit": "b9ed945863806a657af31febbf63c53e57828b4f",
    "createdAt": "2014-08-02T03:13:36Z",
    "diffHunk": "@@ -106,6 +106,24 @@ abstract class DStream[T: ClassTag] (\n   /** Return the StreamingContext associated with this DStream */\n   def context = ssc\n \n+  private[streaming] val RDD_NAME: String = \"rddName\";\n+\n+  @transient var name: String = null\n+\n+  /** Assign a name to this DStream */\n+  def setName(_name: String) = {\n+    name = _name\n+  }\n+\n+  /* Find the creation callSite */\n+  val creationSite = Utils.getCallSite\n+\n+  /* Store the creation callSite in threadlocal */\n+  private[streaming] def setCallSite = {\n+    ssc.sparkContext.setLocalProperty(name + Utils.CALL_SITE_SHORT, creationSite.short)\n+    ssc.sparkContext.setLocalProperty(name + Utils.CALL_SITE_LONG, creationSite.long)"
  }],
  "prId": 1723
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Please specify the return type, in these functions. I think we are enforcing explicit return-types nowadays, even for Unit.\n",
    "commit": "b9ed945863806a657af31febbf63c53e57828b4f",
    "createdAt": "2014-08-18T02:09:02Z",
    "diffHunk": "@@ -106,6 +106,27 @@ abstract class DStream[T: ClassTag] (\n   /** Return the StreamingContext associated with this DStream */\n   def context = ssc\n \n+  /* Find the creation callSite */\n+  val creationSite = Utils.getCallSite\n+\n+  /* Store the creation callSite in threadlocal */\n+  private[streaming] def setCreationCallSite() = {\n+    ssc.sparkContext.setLocalProperty(Utils.CALL_SITE_SHORT, creationSite.shortForm)\n+    ssc.sparkContext.setLocalProperty(Utils.CALL_SITE_LONG, creationSite.longForm)\n+  }\n+\n+  /* Store the supplied callSite in threadlocal */\n+  private[streaming] def setCallSite(callSite: CallSite) = {\n+    ssc.sparkContext.setLocalProperty(Utils.CALL_SITE_SHORT, callSite.shortForm)\n+    ssc.sparkContext.setLocalProperty(Utils.CALL_SITE_LONG, callSite.longForm)\n+  }\n+\n+  /* Return the current callSite */\n+  private[streaming] def getCallSite() = {"
  }],
  "prId": 1723
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Dealing with this separately in two code paths is prone to errors in the future. Can you make the `compute(time) match { ... }` return into a variable and use that later. Something like this.\n\n```\nval rddOption = compute(time) match {\n    // no setCallSite inside this\n}\nsetCallSite(prevCallSite)   // only one instance of setCallSite, common to both code paths.\nreturn rddOption\n```\n\nAnd while on that, can you also add `return` at other code paths in this function. That is, the `None` in lines 332 and 335 in this commit?\n",
    "commit": "b9ed945863806a657af31febbf63c53e57828b4f",
    "createdAt": "2014-08-18T04:01:39Z",
    "diffHunk": "@@ -302,8 +325,10 @@ abstract class DStream[T: ClassTag] (\n                   \" for checkpointing at time \" + time)\n               }\n               generatedRDDs.put(time, newRDD)\n+              setCallSite(prevCallSite)"
  }],
  "prId": 1723
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Can you change these method names to `setRDD***CallSite` to make it clear that this does not affect the callsite of the DStream but of the RDDs generated by the DStream. Also, just `private` is sufficient, as this is not being used by any other class other than DStream.\n",
    "commit": "b9ed945863806a657af31febbf63c53e57828b4f",
    "createdAt": "2014-08-18T05:13:12Z",
    "diffHunk": "@@ -106,6 +106,27 @@ abstract class DStream[T: ClassTag] (\n   /** Return the StreamingContext associated with this DStream */\n   def context = ssc\n \n+  /* Find the creation callSite */\n+  val creationSite = Utils.getCallSite\n+\n+  /* Store the creation callSite in threadlocal */\n+  private[streaming] def setCreationCallSite() = {"
  }],
  "prId": 1723
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Any reason why this was not changed to `getRDDCreationCallSite()` to match the set method?\n",
    "commit": "b9ed945863806a657af31febbf63c53e57828b4f",
    "createdAt": "2014-08-19T10:38:05Z",
    "diffHunk": "@@ -106,6 +106,27 @@ abstract class DStream[T: ClassTag] (\n   /** Return the StreamingContext associated with this DStream */\n   def context = ssc\n \n+  /* Find the creation callSite */\n+  val creationSite = Utils.getCallSite\n+\n+  /* Store the RDD creation callSite in threadlocal */\n+  private def setRDDCreationCallSite() = {\n+    ssc.sparkContext.setLocalProperty(Utils.CALL_SITE_SHORT, creationSite.shortForm)\n+    ssc.sparkContext.setLocalProperty(Utils.CALL_SITE_LONG, creationSite.longForm)\n+  }\n+\n+  /* Store the supplied callSite in threadlocal */\n+  private def setRDDCallSite(callSite: CallSite) = {\n+    ssc.sparkContext.setLocalProperty(Utils.CALL_SITE_SHORT, callSite.shortForm)\n+    ssc.sparkContext.setLocalProperty(Utils.CALL_SITE_LONG, callSite.longForm)\n+  }\n+\n+  /* Return the current callSite */\n+  private[streaming] def getCallSite(): CallSite = {"
  }],
  "prId": 1723
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "These two methods are pretty much similar. Can you please merge them? Make the `callsite` parameter have the default value of `creationSite`\n",
    "commit": "b9ed945863806a657af31febbf63c53e57828b4f",
    "createdAt": "2014-08-19T10:43:11Z",
    "diffHunk": "@@ -106,6 +106,27 @@ abstract class DStream[T: ClassTag] (\n   /** Return the StreamingContext associated with this DStream */\n   def context = ssc\n \n+  /* Find the creation callSite */\n+  val creationSite = Utils.getCallSite\n+\n+  /* Store the RDD creation callSite in threadlocal */\n+  private def setRDDCreationCallSite() = {\n+    ssc.sparkContext.setLocalProperty(Utils.CALL_SITE_SHORT, creationSite.shortForm)"
  }, {
    "author": {
      "login": "mubarak"
    },
    "body": "Updated\n",
    "commit": "b9ed945863806a657af31febbf63c53e57828b4f",
    "createdAt": "2014-08-20T08:10:14Z",
    "diffHunk": "@@ -106,6 +106,27 @@ abstract class DStream[T: ClassTag] (\n   /** Return the StreamingContext associated with this DStream */\n   def context = ssc\n \n+  /* Find the creation callSite */\n+  val creationSite = Utils.getCallSite\n+\n+  /* Store the RDD creation callSite in threadlocal */\n+  private def setRDDCreationCallSite() = {\n+    ssc.sparkContext.setLocalProperty(Utils.CALL_SITE_SHORT, creationSite.shortForm)"
  }],
  "prId": 1723
}]