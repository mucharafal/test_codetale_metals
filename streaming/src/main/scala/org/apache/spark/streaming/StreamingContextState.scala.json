[{
  "comments": [{
    "author": {
      "login": "harishreedharan"
    },
    "body": "Is this Java friendly? Can Java handle Scala `object`s? Maybe use a Java enum instead.\n",
    "commit": "80ee0e614258f103904eb92bae62c3b9fc06cf2c",
    "createdAt": "2015-05-11T18:03:17Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming\n+\n+import org.apache.spark.annotation.DeveloperApi\n+\n+/**\n+ * :: DeveloperApi ::\n+ *\n+ * Represents the state of the StreamingContext.\n+ */\n+@DeveloperApi\n+class StreamingContextState private (enumValue: Int) {\n+\n+  override def hashCode: Int = enumValue\n+\n+  override def equals(other: Any): Boolean = {\n+    other match {\n+      case otherState: StreamingContextState =>\n+        otherState.hashCode == this.hashCode\n+      case _ =>\n+        false\n+    }\n+  }\n+}\n+\n+/**\n+ * :: DeveloperApi ::\n+ *\n+ * Object enumerating all the states that a StreamingContext can be.\n+ */\n+@DeveloperApi\n+object StreamingContextState {"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "StorageLevels can be accessed in Java. In fact, they were added for Java. So this should be fine. But I am double-minded on whether to this in Java or not. \n@pwendell Do you have any thoughts on what is the Spark-norm on defining enum-like things that has to be Java friendly?\n",
    "commit": "80ee0e614258f103904eb92bae62c3b9fc06cf2c",
    "createdAt": "2015-05-11T18:10:00Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming\n+\n+import org.apache.spark.annotation.DeveloperApi\n+\n+/**\n+ * :: DeveloperApi ::\n+ *\n+ * Represents the state of the StreamingContext.\n+ */\n+@DeveloperApi\n+class StreamingContextState private (enumValue: Int) {\n+\n+  override def hashCode: Int = enumValue\n+\n+  override def equals(other: Any): Boolean = {\n+    other match {\n+      case otherState: StreamingContextState =>\n+        otherState.hashCode == this.hashCode\n+      case _ =>\n+        false\n+    }\n+  }\n+}\n+\n+/**\n+ * :: DeveloperApi ::\n+ *\n+ * Object enumerating all the states that a StreamingContext can be.\n+ */\n+@DeveloperApi\n+object StreamingContextState {"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "Okay, chatted with him. Seems like Java enum was decided to be the norm from henceforth.\n",
    "commit": "80ee0e614258f103904eb92bae62c3b9fc06cf2c",
    "createdAt": "2015-05-11T18:27:11Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.streaming\n+\n+import org.apache.spark.annotation.DeveloperApi\n+\n+/**\n+ * :: DeveloperApi ::\n+ *\n+ * Represents the state of the StreamingContext.\n+ */\n+@DeveloperApi\n+class StreamingContextState private (enumValue: Int) {\n+\n+  override def hashCode: Int = enumValue\n+\n+  override def equals(other: Any): Boolean = {\n+    other match {\n+      case otherState: StreamingContextState =>\n+        otherState.hashCode == this.hashCode\n+      case _ =>\n+        false\n+    }\n+  }\n+}\n+\n+/**\n+ * :: DeveloperApi ::\n+ *\n+ * Object enumerating all the states that a StreamingContext can be.\n+ */\n+@DeveloperApi\n+object StreamingContextState {"
  }],
  "prId": 6058
}]