[
  {
    "id" : "5a1678aa-e857-4e5a-b37b-22dca8c677be",
    "prId" : 170,
    "comments" : [
      {
        "id" : "670dbae1-7f56-4c76-8ec5-486a2d2763bc",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "same comment as #172. This changes the logger name.",
        "createdAt" : "2018-01-10T18:53:15Z",
        "updatedAt" : "2018-01-14T13:17:44Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "613fd10ebf6b145898fce9d6aa7c21e62b46937f",
    "line" : null,
    "diffHunk" : "@@ -20,7 +21,7 @@ import io.circe.syntax._\n  *\n  * @note The header part is defined to be ASCII encoded, while the content part is UTF8.\n  */\n-class MessageWriter(out: OutputStream) extends LazyLogging {\n+class MessageWriter(out: OutputStream, logger: Logger) {"
  },
  {
    "id" : "f7c6fbae-c67f-437c-bea3-ec8e26dd25e9",
    "prId" : 170,
    "comments" : [
      {
        "id" : "25518600-c923-45b3-8e4e-5425ace75f16",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "```scala\r\nval json = msg.asJson.deepMerge(Json.obj(\"jsonrpc\" -> \"2.0\".asJson)\r\n```",
        "createdAt" : "2018-01-10T18:53:42Z",
        "updatedAt" : "2018-01-14T13:17:44Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2aca58d6-d362-41f1-8838-e550925a71b4",
        "parentId" : "25518600-c923-45b3-8e4e-5425ace75f16",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Nice! Didn't know about `\"2.0\".asJson`. I went with \r\n\r\n```\r\nval json = msg.asJson.withObject(_.add(\"jsonrpc\", \"2.0\".asJson).asJson)\r\n```\r\n\r\nsince we only want to add this if it's an object.\r\n\r\nI find it a bit annoying to require `.asJson` on JsonObject, do you have an intuition why it's like this?",
        "createdAt" : "2018-01-14T13:04:01Z",
        "updatedAt" : "2018-01-14T13:17:44Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a0d8874c-acea-4757-ac12-f85dbc11d9b0",
        "parentId" : "25518600-c923-45b3-8e4e-5425ace75f16",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I guess JsonObject is a complex data structure that it's unlreated to the Json AST per se. Anyway, I'm from the phone so I can't try, but I think mapObject would do the trick, since it's from JSONObject => JSONObject ",
        "createdAt" : "2018-01-14T13:23:29Z",
        "updatedAt" : "2018-01-14T13:23:29Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "613fd10ebf6b145898fce9d6aa7c21e62b46937f",
    "line" : null,
    "diffHunk" : "@@ -34,13 +35,16 @@ class MessageWriter(out: OutputStream) extends LazyLogging {\n     lock.synchronized {\n       require(h.get(ContentLen).isEmpty)\n \n-      val str = msg.asJson.noSpaces\n+      val json = msg.asJson.withObject(\n+        obj => Json.fromJsonObject(obj.add(\"jsonrpc\", Json.fromString(\"2.0\")))\n+      )"
  },
  {
    "id" : "4b4a14fa-0d02-4647-8938-f67c71f8cbac",
    "prId" : 172,
    "comments" : [
      {
        "id" : "817ed322-ade2-440e-9126-e26cf73de4df",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "Note that this changes the logger name: `LazyLogging` instantiates a logger using `getClass.getName` as the name, so now this logger won't be called `org.langmeta.jsonrpc.MessageWriter`, but something else depending on the caller.\r\n\r\nIf we move to file/position kind of logging instead this is won't be an issue, but for now this will lead to inconsistent names in the logs.\r\n\r\nA possible alternative is to explicitly do\r\n\r\n```scala\r\nval logger = Logger(classOf[MessageWriter])\r\n```\r\n\r\non the call site. It's not ideal, but at least it's consistent.",
        "createdAt" : "2018-01-10T18:40:11Z",
        "updatedAt" : "2018-01-10T18:41:40Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5d53c98e-1b57-4e6e-bd99-816a01095cd5",
        "parentId" : "817ed322-ade2-440e-9126-e26cf73de4df",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I think that\r\n```scala\r\nval logger = Logger(classOf[MessageWriter])\r\n```\r\nwill use LoggerFactory which breaks the integration in bloop. I agree this change makes debugging quite bad, but I personally use `pprint` during development. I would love to switch to a file:line output format where this won't matter, but that would mean moving to another api like airframe-log (which is not sl4j backed). What do you propose we do?",
        "createdAt" : "2018-01-10T19:03:32Z",
        "updatedAt" : "2018-01-10T19:03:32Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d164cfaf-7958-4e87-b7dd-38dea41d8a52",
        "parentId" : "817ed322-ade2-440e-9126-e26cf73de4df",
        "author" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "How does `LoggerFactory` break the integration in bloop? `LazyLogging` uses `LoggerFactory` too:\r\n\r\nhttps://github.com/typesafehub/scala-logging/blob/953ebc3dba7d2bb01317e6311d08481370ce9824/src/main/scala/com/typesafe/scalalogging/Logging.scala#L28",
        "createdAt" : "2018-01-10T19:05:34Z",
        "updatedAt" : "2018-01-10T19:05:54Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "15584e11-c855-48b1-9d47-8d3c4a8cdd7f",
        "parentId" : "817ed322-ade2-440e-9126-e26cf73de4df",
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "bloop needs a way to use the jsonrpc API without triggering LoggerFactory, LazyLogging is behind a lazy val so if it's never used then LoggerFactory never gets triggered.",
        "createdAt" : "2018-01-10T19:16:19Z",
        "updatedAt" : "2018-01-10T19:16:19Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cd4724d11b332145fac1ee90a6b0dffec98f69fd",
    "line" : 14,
    "diffHunk" : "@@ -20,7 +20,7 @@ import io.circe.syntax._\n  *\n  * @note The header part is defined to be ASCII encoded, while the content part is UTF8.\n  */\n-class MessageWriter(out: OutputStream) extends LazyLogging {\n+class MessageWriter(out: OutputStream, logger: Logger) {"
  },
  {
    "id" : "41532492-bc6e-4316-9f9a-b5a26e35c271",
    "prId" : 177,
    "comments" : [
      {
        "id" : "c45cd4f1-2259-4d72-8e7c-ec5a0a41d5e7",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "Aha, this makes more sense!",
        "createdAt" : "2018-01-14T14:38:38Z",
        "updatedAt" : "2018-01-14T14:38:43Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e518e335838919b39f0ef7103b96629298e6c706",
    "line" : 5,
    "diffHunk" : "@@ -34,7 +34,7 @@ class MessageWriter(out: OutputStream, logger: Logger) {\n     lock.synchronized {\n       require(h.get(ContentLen).isEmpty)\n \n-      val json = msg.asJson.withObject(_.add(\"jsonrpc\", \"2.0\".asJson).asJson)\n+      val json = msg.asJson.mapObject(_.add(\"jsonrpc\", \"2.0\".asJson))"
  }
]