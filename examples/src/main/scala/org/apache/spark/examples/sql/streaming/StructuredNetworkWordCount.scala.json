[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "df --> lines\n",
    "commit": "a8c3fecdf63fc2df93d1287a2e8c6ddebc5cbe61",
    "createdAt": "2016-06-21T22:13:43Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.sql.streaming\n+\n+import org.apache.spark.sql.{functions, SparkSession}\n+import org.apache.spark.sql.streaming.OutputMode\n+\n+\n+/**\n+ * Counts words in UTF8 encoded, '\\n' delimited text received from the network every second.\n+ *\n+ * Usage: StructuredNetworkWordCount <hostname> <port> <checkpoint dir>\n+ * <hostname> and <port> describe the TCP server that Spark Streaming would connect to receive data.\n+ *\n+ * To run this on your local machine, you need to first run a Netcat server\n+ *    `$ nc -lk 9999`\n+ * and then run the example\n+ *    `$ bin/run-example org.apache.spark.examples.sql.streaming.StructuredNetworkWordCount\n+ *    localhost 9999 <checkpoint dir>`\n+ */\n+object StructuredNetworkWordCount {\n+  def main(args: Array[String]) {\n+    if (args.length < 3) {\n+      System.err.println(\"Usage: StructuredNetworkWordCount <hostname> <port> <checkpoint dir>\")\n+      System.exit(1)\n+    }\n+\n+    val spark = SparkSession\n+      .builder\n+      .appName(\"StructuredNetworkWordCount\")\n+      .getOrCreate()\n+\n+    import spark.implicits._\n+\n+    val df = spark.readStream"
  }],
  "prId": 13816
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "you can import function._ and simplify the code further.\n",
    "commit": "a8c3fecdf63fc2df93d1287a2e8c6ddebc5cbe61",
    "createdAt": "2016-06-22T01:09:17Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.sql.streaming\n+\n+import org.apache.spark.sql.{functions, SparkSession}\n+import org.apache.spark.sql.streaming.OutputMode\n+\n+\n+/**\n+ * Counts words in UTF8 encoded, '\\n' delimited text received from the network every second.\n+ *\n+ * Usage: StructuredNetworkWordCount <hostname> <port> <checkpoint dir>\n+ * <hostname> and <port> describe the TCP server that Spark Streaming would connect to receive data.\n+ *\n+ * To run this on your local machine, you need to first run a Netcat server\n+ *    `$ nc -lk 9999`\n+ * and then run the example\n+ *    `$ bin/run-example org.apache.spark.examples.sql.streaming.StructuredNetworkWordCount\n+ *    localhost 9999 <checkpoint dir>`\n+ */\n+object StructuredNetworkWordCount {\n+  def main(args: Array[String]) {\n+    if (args.length < 3) {\n+      System.err.println(\"Usage: StructuredNetworkWordCount <hostname> <port> <checkpoint dir>\")\n+      System.exit(1)\n+    }\n+\n+    val host = args(0)\n+    val port = args(1).toInt\n+    val checkpointDir = args(2)\n+\n+    val spark = SparkSession\n+      .builder\n+      .appName(\"StructuredNetworkWordCount\")\n+      .getOrCreate()\n+\n+    import spark.implicits._\n+\n+    // input lines (may be multiple words on each line)\n+    val lines = spark.readStream\n+      .format(\"socket\")\n+      .option(\"host\", host)\n+      .option(\"port\", port)\n+      .load().as[String]\n+\n+    // input words\n+    val words = lines.select(\n+      functions.explode("
  }],
  "prId": 13816
}]