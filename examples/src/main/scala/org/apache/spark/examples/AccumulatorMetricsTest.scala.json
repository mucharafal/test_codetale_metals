[{
  "comments": [{
    "author": {
      "login": "redsanket"
    },
    "body": "Example named as Test is a bit confusing i think... thoughts?",
    "commit": "682cfd7d5542a31538d204cef02b32585a2ecb63",
    "createdAt": "2018-12-08T05:31:42Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples\n+\n+import org.apache.spark.metrics.source.{DoubleAccumulatorSource, LongAccumulatorSource}\n+import org.apache.spark.sql.SparkSession\n+\n+/**\n+ * Usage: AccumulatorMetricsTest [partitions] [numElem] [blockSize]\n+ */\n+object AccumulatorMetricsTest {",
    "line": 38
  }, {
    "author": {
      "login": "abellina"
    },
    "body": "@redsanket yes at first I thought that, but there are other many other \"examples\" here with the suffix Test.  ",
    "commit": "682cfd7d5542a31538d204cef02b32585a2ecb63",
    "createdAt": "2018-12-08T18:54:55Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples\n+\n+import org.apache.spark.metrics.source.{DoubleAccumulatorSource, LongAccumulatorSource}\n+import org.apache.spark.sql.SparkSession\n+\n+/**\n+ * Usage: AccumulatorMetricsTest [partitions] [numElem] [blockSize]\n+ */\n+object AccumulatorMetricsTest {",
    "line": 38
  }],
  "prId": 23242
}, {
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "add a description on what this does",
    "commit": "682cfd7d5542a31538d204cef02b32585a2ecb63",
    "createdAt": "2018-12-18T20:11:50Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples\n+\n+import org.apache.spark.metrics.source.{DoubleAccumulatorSource, LongAccumulatorSource}\n+import org.apache.spark.sql.SparkSession\n+\n+/**\n+ * Usage: AccumulatorMetricsTest [partitions] [numElem] [blockSize]\n+ */",
    "line": 37
  }],
  "prId": 23242
}, {
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "we don't need this, assume copy from the BroadcastTest one",
    "commit": "682cfd7d5542a31538d204cef02b32585a2ecb63",
    "createdAt": "2018-12-18T20:12:38Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples\n+\n+import org.apache.spark.metrics.source.{DoubleAccumulatorSource, LongAccumulatorSource}\n+import org.apache.spark.sql.SparkSession\n+\n+/**\n+ * Usage: AccumulatorMetricsTest [partitions] [numElem] [blockSize]\n+ */\n+object AccumulatorMetricsTest {\n+  def main(args: Array[String]) {\n+\n+    val blockSize = if (args.length > 2) args(2) else \"4096\"\n+\n+    val spark = SparkSession\n+      .builder()\n+      .config(\"spark.broadcast.blockSize\", blockSize)"
  }],
  "prId": 23242
}, {
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "I think we could simplify the test by remove the broadcast stuff as that isn't really what we are testing, just leave the accumulator updates  and do simple map.  Print the accumulators at the end.  Also perhaps we should put more information the register part and how someone running this might see those metrics output",
    "commit": "682cfd7d5542a31538d204cef02b32585a2ecb63",
    "createdAt": "2018-12-18T20:17:20Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples\n+\n+import org.apache.spark.metrics.source.{DoubleAccumulatorSource, LongAccumulatorSource}\n+import org.apache.spark.sql.SparkSession\n+\n+/**\n+ * Usage: AccumulatorMetricsTest [partitions] [numElem] [blockSize]\n+ */\n+object AccumulatorMetricsTest {\n+  def main(args: Array[String]) {\n+\n+    val blockSize = if (args.length > 2) args(2) else \"4096\"\n+\n+    val spark = SparkSession\n+      .builder()\n+      .config(\"spark.broadcast.blockSize\", blockSize)\n+      .getOrCreate()\n+\n+    val sc = spark.sparkContext\n+\n+    val acc = sc.longAccumulator(\"my-long-metric\")\n+    LongAccumulatorSource.register(sc, List((\"my-long-metric\" -> acc)).toMap)\n+\n+    val acc2 = sc.doubleAccumulator(\"my-double-metric\")\n+    DoubleAccumulatorSource.register(sc, List((\"my-double-metric\" -> acc2)).toMap)\n+\n+    val slices = if (args.length > 0) args(0).toInt else 2\n+    val num = if (args.length > 1) args(1).toInt else 1000000\n+\n+    val arr1 = (0 until num).toArray\n+\n+    for (i <- 0 until 3) {\n+      println(s\"Iteration $i\")\n+      println(\"===========\")\n+      val startTime = System.nanoTime\n+      val barr1 = sc.broadcast(arr1)\n+      val observedSizes = sc.parallelize(1 to 10, slices).map(_ => {\n+        acc.add(1)\n+        acc2.add(1.1)\n+        barr1.value.length"
  }],
  "prId": 23242
}, {
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "perhaps we should expand this more saying using ConsoleSink so the metrics going to stdout show up as metrics like AccumulatorSource.my-double-metric",
    "commit": "682cfd7d5542a31538d204cef02b32585a2ecb63",
    "createdAt": "2018-12-19T19:48:19Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples\n+\n+import org.apache.spark.metrics.source.{DoubleAccumulatorSource, LongAccumulatorSource}\n+import org.apache.spark.sql.SparkSession\n+\n+/**\n+ * Usage: AccumulatorMetricsTest [numElem]\n+ *\n+ * This example shows how to register accumulators against the accumulator source.\n+ * A simple RDD is created, and during the map, the accumulators are incremented.\n+ *\n+ * The only argument, numElem, sets the number elements in the collection to parallize.\n+ *\n+ * The result is output to stdout in the driver with the values of the accumulators.",
    "line": 32
  }],
  "prId": 23242
}]