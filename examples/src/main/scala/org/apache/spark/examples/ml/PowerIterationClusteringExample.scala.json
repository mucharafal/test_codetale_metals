[{
  "comments": [{
    "author": {
      "login": "hhbyyh"
    },
    "body": "This may not be necessary.",
    "commit": "6b75b8c20d862dba3f7679833a081296d2a2f8a3",
    "createdAt": "2018-05-20T17:59:56Z",
    "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+import org.apache.log4j.{Level, Logger}\n+\n+// $example on$\n+import org.apache.spark.ml.clustering.PowerIterationClustering\n+// $example off$\n+import org.apache.spark.sql.{DataFrame, Row, SparkSession}\n+\n+\n+ /**\n+  * An example demonstrating power iteration clustering.\n+  * Run with\n+  * {{{\n+  * bin/run-example ml.PowerIterationClusteringExample\n+  * }}}\n+  */\n+\n+object PowerIterationClusteringExample {\n+\n+  def main(args: Array[String]): Unit = {\n+    val spark = SparkSession\n+      .builder\n+      .appName(s\"${this.getClass.getSimpleName}\")\n+      .getOrCreate()\n+\n+    Logger.getRootLogger.setLevel(Level.WARN)"
  }, {
    "author": {
      "login": "shahidki31"
    },
    "body": "Yes. I have removed.",
    "commit": "6b75b8c20d862dba3f7679833a081296d2a2f8a3",
    "createdAt": "2018-05-21T20:27:27Z",
    "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+import org.apache.log4j.{Level, Logger}\n+\n+// $example on$\n+import org.apache.spark.ml.clustering.PowerIterationClustering\n+// $example off$\n+import org.apache.spark.sql.{DataFrame, Row, SparkSession}\n+\n+\n+ /**\n+  * An example demonstrating power iteration clustering.\n+  * Run with\n+  * {{{\n+  * bin/run-example ml.PowerIterationClusteringExample\n+  * }}}\n+  */\n+\n+object PowerIterationClusteringExample {\n+\n+  def main(args: Array[String]): Unit = {\n+    val spark = SparkSession\n+      .builder\n+      .appName(s\"${this.getClass.getSimpleName}\")\n+      .getOrCreate()\n+\n+    Logger.getRootLogger.setLevel(Level.WARN)"
  }],
  "prId": 21248
}, {
  "comments": [{
    "author": {
      "login": "hhbyyh"
    },
    "body": "Maybe add `prediction.show()` first to demo the result of the `transform`",
    "commit": "6b75b8c20d862dba3f7679833a081296d2a2f8a3",
    "createdAt": "2018-05-20T18:05:44Z",
    "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+import org.apache.log4j.{Level, Logger}\n+\n+// $example on$\n+import org.apache.spark.ml.clustering.PowerIterationClustering\n+// $example off$\n+import org.apache.spark.sql.{DataFrame, Row, SparkSession}\n+\n+\n+ /**\n+  * An example demonstrating power iteration clustering.\n+  * Run with\n+  * {{{\n+  * bin/run-example ml.PowerIterationClusteringExample\n+  * }}}\n+  */\n+\n+object PowerIterationClusteringExample {\n+\n+  def main(args: Array[String]): Unit = {\n+    val spark = SparkSession\n+      .builder\n+      .appName(s\"${this.getClass.getSimpleName}\")\n+      .getOrCreate()\n+\n+    Logger.getRootLogger.setLevel(Level.WARN)\n+\n+    // $example on$\n+\n+    // Generates data.\n+    val radius1 = 1.0\n+    val numPoints1 = 5\n+    val radius2 = 4.0\n+    val numPoints2 = 20\n+\n+    val dataset = generatePICData(spark, radius1, radius2, numPoints1, numPoints2)\n+\n+    // Trains a PIC model.\n+    val model = new PowerIterationClustering().\n+      setK(2).\n+      setInitMode(\"degree\").\n+      setMaxIter(20)\n+\n+    val prediction = model.transform(dataset).select(\"id\", \"prediction\")\n+\n+    //  Shows the result.\n+    //  println(\"Cluster Assignment: \")"
  }, {
    "author": {
      "login": "shahidki31"
    },
    "body": "Yes. prediction.show() would be better in the new dataset.",
    "commit": "6b75b8c20d862dba3f7679833a081296d2a2f8a3",
    "createdAt": "2018-05-21T20:28:36Z",
    "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+import org.apache.log4j.{Level, Logger}\n+\n+// $example on$\n+import org.apache.spark.ml.clustering.PowerIterationClustering\n+// $example off$\n+import org.apache.spark.sql.{DataFrame, Row, SparkSession}\n+\n+\n+ /**\n+  * An example demonstrating power iteration clustering.\n+  * Run with\n+  * {{{\n+  * bin/run-example ml.PowerIterationClusteringExample\n+  * }}}\n+  */\n+\n+object PowerIterationClusteringExample {\n+\n+  def main(args: Array[String]): Unit = {\n+    val spark = SparkSession\n+      .builder\n+      .appName(s\"${this.getClass.getSimpleName}\")\n+      .getOrCreate()\n+\n+    Logger.getRootLogger.setLevel(Level.WARN)\n+\n+    // $example on$\n+\n+    // Generates data.\n+    val radius1 = 1.0\n+    val numPoints1 = 5\n+    val radius2 = 4.0\n+    val numPoints2 = 20\n+\n+    val dataset = generatePICData(spark, radius1, radius2, numPoints1, numPoints2)\n+\n+    // Trains a PIC model.\n+    val model = new PowerIterationClustering().\n+      setK(2).\n+      setInitMode(\"degree\").\n+      setMaxIter(20)\n+\n+    val prediction = model.transform(dataset).select(\"id\", \"prediction\")\n+\n+    //  Shows the result.\n+    //  println(\"Cluster Assignment: \")"
  }],
  "prId": 21248
}, {
  "comments": [{
    "author": {
      "login": "hhbyyh"
    },
    "body": "This can be achieved by DataFrame API, groupBy.. collect_set",
    "commit": "6b75b8c20d862dba3f7679833a081296d2a2f8a3",
    "createdAt": "2018-05-20T18:07:52Z",
    "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+import org.apache.log4j.{Level, Logger}\n+\n+// $example on$\n+import org.apache.spark.ml.clustering.PowerIterationClustering\n+// $example off$\n+import org.apache.spark.sql.{DataFrame, Row, SparkSession}\n+\n+\n+ /**\n+  * An example demonstrating power iteration clustering.\n+  * Run with\n+  * {{{\n+  * bin/run-example ml.PowerIterationClusteringExample\n+  * }}}\n+  */\n+\n+object PowerIterationClusteringExample {\n+\n+  def main(args: Array[String]): Unit = {\n+    val spark = SparkSession\n+      .builder\n+      .appName(s\"${this.getClass.getSimpleName}\")\n+      .getOrCreate()\n+\n+    Logger.getRootLogger.setLevel(Level.WARN)\n+\n+    // $example on$\n+\n+    // Generates data.\n+    val radius1 = 1.0\n+    val numPoints1 = 5\n+    val radius2 = 4.0\n+    val numPoints2 = 20\n+\n+    val dataset = generatePICData(spark, radius1, radius2, numPoints1, numPoints2)\n+\n+    // Trains a PIC model.\n+    val model = new PowerIterationClustering().\n+      setK(2).\n+      setInitMode(\"degree\").\n+      setMaxIter(20)\n+\n+    val prediction = model.transform(dataset).select(\"id\", \"prediction\")\n+\n+    //  Shows the result.\n+    //  println(\"Cluster Assignment: \")\n+    val result = prediction.collect().map {\n+      row => (row(1), row(0))\n+    }.groupBy(_._1).mapValues(_.map(_._2))\n+\n+    result.foreach {\n+      case (cluster, points) => println(s\"$cluster -> [${points.mkString(\",\")}]\")\n+    }"
  }, {
    "author": {
      "login": "shahidki31"
    },
    "body": "prediction.show() displays the cluster assignment properly. So this may not be required. current output based on the new dataset will be,\r\n| id|prediction|\r\n+---+----------+\r\n|  4|            1|\r\n|  0|            0|\r\n|  1|            0|\r\n|  3|            1|\r\n|  2|            0|\r\n+---+----------+",
    "commit": "6b75b8c20d862dba3f7679833a081296d2a2f8a3",
    "createdAt": "2018-05-21T20:30:38Z",
    "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+import org.apache.log4j.{Level, Logger}\n+\n+// $example on$\n+import org.apache.spark.ml.clustering.PowerIterationClustering\n+// $example off$\n+import org.apache.spark.sql.{DataFrame, Row, SparkSession}\n+\n+\n+ /**\n+  * An example demonstrating power iteration clustering.\n+  * Run with\n+  * {{{\n+  * bin/run-example ml.PowerIterationClusteringExample\n+  * }}}\n+  */\n+\n+object PowerIterationClusteringExample {\n+\n+  def main(args: Array[String]): Unit = {\n+    val spark = SparkSession\n+      .builder\n+      .appName(s\"${this.getClass.getSimpleName}\")\n+      .getOrCreate()\n+\n+    Logger.getRootLogger.setLevel(Level.WARN)\n+\n+    // $example on$\n+\n+    // Generates data.\n+    val radius1 = 1.0\n+    val numPoints1 = 5\n+    val radius2 = 4.0\n+    val numPoints2 = 20\n+\n+    val dataset = generatePICData(spark, radius1, radius2, numPoints1, numPoints2)\n+\n+    // Trains a PIC model.\n+    val model = new PowerIterationClustering().\n+      setK(2).\n+      setInitMode(\"degree\").\n+      setMaxIter(20)\n+\n+    val prediction = model.transform(dataset).select(\"id\", \"prediction\")\n+\n+    //  Shows the result.\n+    //  println(\"Cluster Assignment: \")\n+    val result = prediction.collect().map {\n+      row => (row(1), row(0))\n+    }.groupBy(_._1).mapValues(_.map(_._2))\n+\n+    result.foreach {\n+      case (cluster, points) => println(s\"$cluster -> [${points.mkString(\",\")}]\")\n+    }"
  }],
  "prId": 21248
}]