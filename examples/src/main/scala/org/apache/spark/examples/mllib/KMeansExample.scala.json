[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "remove blank line\n",
    "commit": "8b9228dfaefdf966841d91bb838a7aeacb5854e2",
    "createdAt": "2016-02-16T01:34:22Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+// $example on$\n+import org.apache.spark.mllib.clustering.{KMeans, KMeansModel}\n+import org.apache.spark.mllib.linalg.Vectors\n+// $example off$\n+\n+object KMeansExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"KMeansExample\").setMaster(\"local[*]\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    // Load and parse the data\n+    val data = sc.textFile(\"data/mllib/kmeans_data.txt\")\n+    val parsedData = data.map(s => Vectors.dense(s.split(' ').map(_.toDouble))).cache()\n+\n+    // Cluster the data into two classes using KMeans\n+    val numClusters = 2\n+    val numIterations = 20\n+    val clusters = KMeans.train(parsedData, numClusters, numIterations)\n+\n+    // Evaluate clustering by computing Within Set Sum of Squared Errors\n+    val WSSSE = clusters.computeCost(parsedData)\n+    println(\"Within Set Sum of Squared Errors = \" + WSSSE)\n+\n+    // Save and load model\n+    clusters.save(sc, \"myModelPath\")\n+    val sameModel = KMeansModel.load(sc, \"myModelPath\")\n+"
  }],
  "prId": 11116
}]