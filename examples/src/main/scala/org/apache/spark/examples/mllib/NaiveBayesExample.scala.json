[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "ditto\n",
    "commit": "331eab24603f6df1f9dd650625b89a5454777bc2",
    "createdAt": "2015-10-30T06:09:45Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+// $example on$\n+import org.apache.spark.mllib.classification.{NaiveBayes, NaiveBayesModel}\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.regression.LabeledPoint\n+// $example off$\n+import org.apache.spark.{SparkConf, SparkContext}\n+\n+object NaiveBayesExample {\n+\n+  def main(args: Array[String]) {\n+    val conf = new SparkConf().setAppName(\"NaiveBayesExample\")\n+    val sc = new SparkContext(conf)\n+    // $example on$\n+    val data = sc.textFile(\"data/mllib/sample_naive_bayes_data.txt\")\n+    val parsedData = data.map { line =>\n+      val parts = line.split(',')\n+      LabeledPoint(parts(0).toDouble, Vectors.dense(parts(1).split(' ').map(_.toDouble)))\n+    }\n+\n+    // Split data into training (60%) and test (40%).\n+    val splits = parsedData.randomSplit(Array(0.6, 0.4), seed = 11L)\n+    val training = splits(0)\n+    val test = splits(1)\n+\n+    val model = NaiveBayes.train(training, lambda = 1.0, modelType = \"multinomial\")\n+\n+    val predictionAndLabel = test.map(p => (model.predict(p.features), p.label))\n+    val accuracy = 1.0 * predictionAndLabel.filter(x => x._1 == x._2).count() / test.count()\n+\n+    // Save and load model\n+    model.save(sc, \"myModelPath\")"
  }],
  "prId": 9353
}]