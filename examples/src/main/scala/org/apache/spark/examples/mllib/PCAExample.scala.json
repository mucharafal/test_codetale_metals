[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Make it out of example on and off\n",
    "commit": "3513e0f63ed88479052266db5ddc0f22aab175a2",
    "createdAt": "2016-02-21T02:53:10Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkConf\n+// $example on$\n+import org.apache.spark.SparkContext"
  }],
  "prId": 11142
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "`training.first().features.size/2` to `training.first().features.size / 2`\n",
    "commit": "3513e0f63ed88479052266db5ddc0f22aab175a2",
    "createdAt": "2016-02-21T02:55:26Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkConf\n+// $example on$\n+import org.apache.spark.SparkContext\n+import org.apache.spark.mllib.feature.PCA\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.regression.{LabeledPoint, LinearRegressionWithSGD}\n+// $example off$\n+\n+object PCAExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"PCAExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    val data = sc.textFile(\"data/mllib/ridge-data/lpsa.data\").map { line =>\n+      val parts = line.split(',')\n+      LabeledPoint(parts(0).toDouble, Vectors.dense(parts(1).split(' ').map(_.toDouble)))\n+    }.cache()\n+\n+    val splits = data.randomSplit(Array(0.6, 0.4), seed = 11L)\n+    val training = splits(0).cache()\n+    val test = splits(1)\n+\n+    val pca = new PCA(training.first().features.size/2).fit(data.map(_.features))"
  }],
  "prId": 11142
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "change the two lines to:\n\n``` scala\nval MSE = valuesAndPreds.map { case(v, p) => math.pow(v - p, 2) }.mean()\nval MSE_pca = valuesAndPreds_pca.map { case(v, p) => math.pow(v - p, 2) }.mean()\n```\n",
    "commit": "3513e0f63ed88479052266db5ddc0f22aab175a2",
    "createdAt": "2016-02-21T02:57:13Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkConf\n+// $example on$\n+import org.apache.spark.SparkContext\n+import org.apache.spark.mllib.feature.PCA\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.regression.{LabeledPoint, LinearRegressionWithSGD}\n+// $example off$\n+\n+object PCAExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"PCAExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    val data = sc.textFile(\"data/mllib/ridge-data/lpsa.data\").map { line =>\n+      val parts = line.split(',')\n+      LabeledPoint(parts(0).toDouble, Vectors.dense(parts(1).split(' ').map(_.toDouble)))\n+    }.cache()\n+\n+    val splits = data.randomSplit(Array(0.6, 0.4), seed = 11L)\n+    val training = splits(0).cache()\n+    val test = splits(1)\n+\n+    val pca = new PCA(training.first().features.size/2).fit(data.map(_.features))\n+    val training_pca = training.map(p => p.copy(features = pca.transform(p.features)))\n+    val test_pca = test.map(p => p.copy(features = pca.transform(p.features)))\n+\n+    val numIterations = 100\n+    val model = LinearRegressionWithSGD.train(training, numIterations)\n+    val model_pca = LinearRegressionWithSGD.train(training_pca, numIterations)\n+\n+    val valuesAndPreds = test.map { point =>\n+      val score = model.predict(point.features)\n+      (score, point.label)\n+    }\n+\n+    val valuesAndPreds_pca = test_pca.map { point =>\n+      val score = model_pca.predict(point.features)\n+      (score, point.label)\n+    }\n+\n+    val MSE = valuesAndPreds.map{case(v, p) => math.pow((v - p), 2)}.mean()"
  }],
  "prId": 11142
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "def main(args: Array[String]): Unit = {\n",
    "commit": "3513e0f63ed88479052266db5ddc0f22aab175a2",
    "createdAt": "2016-02-21T02:58:51Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkConf\n+// $example on$\n+import org.apache.spark.SparkContext\n+import org.apache.spark.mllib.feature.PCA\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.regression.{LabeledPoint, LinearRegressionWithSGD}\n+// $example off$\n+\n+object PCAExample {\n+\n+  def main(args: Array[String]) {"
  }],
  "prId": 11142
}]