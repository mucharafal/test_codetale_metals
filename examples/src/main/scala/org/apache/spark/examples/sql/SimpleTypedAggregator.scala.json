[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Yup, +1 to have an example somewhere like this since `Aggregator` seems to be still an API, it looks better to let users know how to use it. If we go ahead with getting these out, the current PR looks quite good and conservative.",
    "commit": "a7faa2b48cc72c6f00a3059ebca9db027804b38a",
    "createdAt": "2019-02-12T16:31:59Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.sql\n+\n+import org.apache.spark.sql.{Encoder, Encoders, SparkSession}\n+import org.apache.spark.sql.expressions.Aggregator\n+\n+// scalastyle:off println\n+object SimpleTypedAggregator {\n+\n+  def main(args: Array[String]): Unit = {\n+    val spark = SparkSession\n+      .builder\n+      .master(\"local\")\n+      .appName(\"common typed aggregator implementations\")\n+      .getOrCreate()\n+\n+    import spark.implicits._\n+    val ds = spark.range(20).select(('id % 3).as(\"key\"), 'id).as[(Long, Long)]\n+    println(\"input data:\")\n+    ds.show()\n+\n+    println(\"running typed sum:\")\n+    ds.groupByKey(_._1).agg(new TypedSum[(Long, Long)](_._2).toColumn).show()\n+\n+    println(\"running typed count:\")\n+    ds.groupByKey(_._1).agg(new TypedCount[(Long, Long)](_._2).toColumn).show()\n+\n+    println(\"running typed average:\")\n+    ds.groupByKey(_._1).agg(new TypedAverage[(Long, Long)](_._2.toDouble).toColumn).show()\n+\n+    spark.stop()\n+  }\n+}\n+// scalastyle:on println\n+\n+class TypedSum[IN](val f: IN => Long) extends Aggregator[IN, Long, Long] {",
    "line": 52
  }],
  "prId": 23763
}]