[{
  "comments": [{
    "author": {
      "login": "yanboliang"
    },
    "body": "Remove unnecessary import.\n",
    "commit": "1b1bc93f0d606d3a517a49b397957d99c35c4b99",
    "createdAt": "2016-06-03T07:26:43Z",
    "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+// $example on$\n+import java.io.File"
  }],
  "prId": 13461
}, {
  "comments": [{
    "author": {
      "login": "yanboliang"
    },
    "body": "Minor: It's better we can implement `validateInputType` since the default one do nothing and will not handles schema validation which is mentioned in the annotation of this class.\n",
    "commit": "1b1bc93f0d606d3a517a49b397957d99c35c4b99",
    "createdAt": "2016-06-03T07:32:30Z",
    "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+// $example on$\n+import java.io.File\n+\n+import org.apache.spark.ml.UnaryTransformer\n+import org.apache.spark.ml.param.DoubleParam\n+import org.apache.spark.ml.util.{DefaultParamsReadable, DefaultParamsWritable, Identifiable}\n+import org.apache.spark.sql.functions.col\n+// $example off$\n+import org.apache.spark.sql.SparkSession\n+// $example on$\n+import org.apache.spark.sql.types.{DataType, DataTypes}\n+import org.apache.spark.util.Utils\n+// $example off$\n+\n+/**\n+ * An example demonstrating creating a custom [[org.apache.spark.ml.Transformer]] using\n+ * the [[UnaryTransformer]] abstraction.\n+ *\n+ * Run with\n+ * {{{\n+ * bin/run-example ml.UnaryTransformerExample\n+ * }}}\n+ */\n+object UnaryTransformerExample {\n+\n+  // $example on$\n+  /**\n+   * Simple Transformer which adds a constant value to input Doubles.\n+   *\n+   * [[UnaryTransformer]] handles schema validation and other elements required by Pipelines.\n+   * It also defines parameters for specifying input and output columns:\n+   * [[UnaryTransformer.inputCol]] and [[UnaryTransformer.outputCol]].\n+   *\n+   * [[DefaultParamsWritable]] provides a default implementation for persisting instances\n+   * of this Transformer.\n+   */\n+  class MyTransformer(override val uid: String)\n+    extends UnaryTransformer[Double, Double, MyTransformer] with DefaultParamsWritable {\n+\n+    final val shift: DoubleParam = new DoubleParam(this, \"shift\", \"Value added to input\")\n+\n+    def getShift: Double = $(shift)\n+\n+    def setShift(value: Double): this.type = set(shift, value)\n+\n+    def this() = this(Identifiable.randomUID(\"myT\"))\n+\n+    override protected def createTransformFunc: Double => Double = (input: Double) => {\n+      input + $(shift)\n+    }\n+\n+    override protected def outputDataType: DataType = DataTypes.DoubleType\n+  }"
  }],
  "prId": 13461
}]