[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "`val MSE = valuesAndPreds.map { case(v, p) => math.pow((v - p), 2) }.mean()`\n",
    "commit": "90004058248ed356252fddcfc86bdc913175b644",
    "createdAt": "2016-02-26T08:49:02Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+// $example on$\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.regression.LinearRegressionModel\n+import org.apache.spark.mllib.regression.LinearRegressionWithSGD\n+// $example off$\n+\n+object LinearRegressionWithSGDExample {\n+\n+  def main(args: Array[String]): Unit = {\n+    val conf = new SparkConf().setAppName(\"LinearRegressionWithSGDExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    // Load and parse the data\n+    val data = sc.textFile(\"data/mllib/ridge-data/lpsa.data\")\n+    val parsedData = data.map { line =>\n+      val parts = line.split(',')\n+      LabeledPoint(parts(0).toDouble, Vectors.dense(parts(1).split(' ').map(_.toDouble)))\n+    }.cache()\n+\n+    // Building the model\n+    val numIterations = 100\n+    val stepSize = 0.00000001\n+    val model = LinearRegressionWithSGD.train(parsedData, numIterations, stepSize)\n+\n+    // Evaluate model on training examples and compute training error\n+    val valuesAndPreds = parsedData.map { point =>\n+      val prediction = model.predict(point.features)\n+      (point.label, prediction)\n+    }\n+    val MSE = valuesAndPreds.map{case(v, p) => math.pow((v - p), 2)}.mean()"
  }],
  "prId": 11320
}]