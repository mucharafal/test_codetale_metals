[{
  "comments": [{
    "author": {
      "login": "aarondav"
    },
    "body": "Did you mean to put the stripMargin on the following line?\n",
    "commit": "4a6131f7de10dddda6c42a35e93b2abe77e793dd",
    "createdAt": "2014-11-27T16:48:35Z",
    "diffHunk": "@@ -49,40 +49,43 @@ object LinearRegression extends App {\n       regType: RegType = L2,\n       regParam: Double = 0.01) extends AbstractParams[Params]\n \n-  val defaultParams = Params()\n-\n-  val parser = new OptionParser[Params](\"LinearRegression\") {\n-    head(\"LinearRegression: an example app for linear regression.\")\n-    opt[Int](\"numIterations\")\n-      .text(\"number of iterations\")\n-      .action((x, c) => c.copy(numIterations = x))\n-    opt[Double](\"stepSize\")\n-      .text(s\"initial step size, default: ${defaultParams.stepSize}\")\n-      .action((x, c) => c.copy(stepSize = x))\n-    opt[String](\"regType\")\n-      .text(s\"regularization type (${RegType.values.mkString(\",\")}), \" +\n-      s\"default: ${defaultParams.regType}\")\n-      .action((x, c) => c.copy(regType = RegType.withName(x)))\n-    opt[Double](\"regParam\")\n-      .text(s\"regularization parameter, default: ${defaultParams.regParam}\")\n-    arg[String](\"<input>\")\n-      .required()\n-      .text(\"input paths to labeled examples in LIBSVM format\")\n-      .action((x, c) => c.copy(input = x))\n-    note(\n-      \"\"\"\n+  def main(args: Array[String]) {\n+    val defaultParams = Params()\n+\n+    val parser = new OptionParser[Params](\"LinearRegression\") {\n+      head(\"LinearRegression: an example app for linear regression.\")\n+      opt[Int](\"numIterations\")\n+        .text(\"number of iterations\")\n+        .action((x, c) => c.copy(numIterations = x))\n+      opt[Double](\"stepSize\")\n+        .text(s\"initial step size, default: ${defaultParams.stepSize}\")\n+        .action((x, c) => c.copy(stepSize = x))\n+      opt[String](\"regType\")\n+        .text(s\"regularization type (${RegType.values.mkString(\",\")}), \" +\n+        s\"default: ${defaultParams.regType}\")\n+        .action((x, c) => c.copy(regType = RegType.withName(x)))\n+      opt[Double](\"regParam\")\n+        .text(s\"regularization parameter, default: ${defaultParams.regParam}\")\n+      arg[String](\"<input>\")\n+        .required()\n+        .text(\"input paths to labeled examples in LIBSVM format\")\n+        .action((x, c) => c.copy(input = x))\n+      note(\n+        \"\"\"\n         |For example, the following command runs this app on a synthetic dataset:\n         |\n         | bin/spark-submit --class org.apache.spark.examples.mllib.LinearRegression \\\n         |  examples/target/scala-*/spark-examples-*.jar \\\n         |  data/mllib/sample_linear_regression_data.txt\n-      \"\"\".stripMargin)\n-  }\n+      \"\"\"."
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Oops, the auto-indent messed that up. Fix coming.\n",
    "commit": "4a6131f7de10dddda6c42a35e93b2abe77e793dd",
    "createdAt": "2014-11-27T16:55:53Z",
    "diffHunk": "@@ -49,40 +49,43 @@ object LinearRegression extends App {\n       regType: RegType = L2,\n       regParam: Double = 0.01) extends AbstractParams[Params]\n \n-  val defaultParams = Params()\n-\n-  val parser = new OptionParser[Params](\"LinearRegression\") {\n-    head(\"LinearRegression: an example app for linear regression.\")\n-    opt[Int](\"numIterations\")\n-      .text(\"number of iterations\")\n-      .action((x, c) => c.copy(numIterations = x))\n-    opt[Double](\"stepSize\")\n-      .text(s\"initial step size, default: ${defaultParams.stepSize}\")\n-      .action((x, c) => c.copy(stepSize = x))\n-    opt[String](\"regType\")\n-      .text(s\"regularization type (${RegType.values.mkString(\",\")}), \" +\n-      s\"default: ${defaultParams.regType}\")\n-      .action((x, c) => c.copy(regType = RegType.withName(x)))\n-    opt[Double](\"regParam\")\n-      .text(s\"regularization parameter, default: ${defaultParams.regParam}\")\n-    arg[String](\"<input>\")\n-      .required()\n-      .text(\"input paths to labeled examples in LIBSVM format\")\n-      .action((x, c) => c.copy(input = x))\n-    note(\n-      \"\"\"\n+  def main(args: Array[String]) {\n+    val defaultParams = Params()\n+\n+    val parser = new OptionParser[Params](\"LinearRegression\") {\n+      head(\"LinearRegression: an example app for linear regression.\")\n+      opt[Int](\"numIterations\")\n+        .text(\"number of iterations\")\n+        .action((x, c) => c.copy(numIterations = x))\n+      opt[Double](\"stepSize\")\n+        .text(s\"initial step size, default: ${defaultParams.stepSize}\")\n+        .action((x, c) => c.copy(stepSize = x))\n+      opt[String](\"regType\")\n+        .text(s\"regularization type (${RegType.values.mkString(\",\")}), \" +\n+        s\"default: ${defaultParams.regType}\")\n+        .action((x, c) => c.copy(regType = RegType.withName(x)))\n+      opt[Double](\"regParam\")\n+        .text(s\"regularization parameter, default: ${defaultParams.regParam}\")\n+      arg[String](\"<input>\")\n+        .required()\n+        .text(\"input paths to labeled examples in LIBSVM format\")\n+        .action((x, c) => c.copy(input = x))\n+      note(\n+        \"\"\"\n         |For example, the following command runs this app on a synthetic dataset:\n         |\n         | bin/spark-submit --class org.apache.spark.examples.mllib.LinearRegression \\\n         |  examples/target/scala-*/spark-examples-*.jar \\\n         |  data/mllib/sample_linear_regression_data.txt\n-      \"\"\".stripMargin)\n-  }\n+      \"\"\"."
  }],
  "prId": 3497
}]