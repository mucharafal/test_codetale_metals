[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Output precision like other examples?\n",
    "commit": "e27fe714e553901860f45dba6906fa7fcc4dcdb0",
    "createdAt": "2016-04-08T20:39:41Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+// $example on$\n+import org.apache.spark.ml.classification.{NaiveBayes}\n+import org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\n+// $example off$\n+import org.apache.spark.sql.SQLContext\n+\n+object NaiveBayesExample {\n+  def main(args: Array[String]): Unit = {\n+    val conf = new SparkConf().setAppName(\"NaiveBayesExample\")\n+    val sc = new SparkContext(conf)\n+    val sqlContext = new SQLContext(sc)\n+    // $example on$\n+    // Load the data stored in LIBSVM format as a DataFrame.\n+    val data = sqlContext.read.format(\"libsvm\").load(\"data/mllib/sample_libsvm_data.txt\")\n+\n+    // Split the data into training and test sets (30% held out for testing)\n+    val Array(trainingData, testData) = data.randomSplit(Array(0.7, 0.3))\n+\n+    // Train a DecisionTree model.\n+    val model = new NaiveBayes()\n+      .fit(trainingData)\n+\n+    // Select example rows to display.\n+    val predictions = model.transform(testData)\n+    predictions.show()\n+\n+    // Select (prediction, true label) and compute test error\n+    val evaluator = new MulticlassClassificationEvaluator()\n+      .setLabelCol(\"label\")\n+      .setPredictionCol(\"prediction\")\n+      .setMetricName(\"precision\")\n+    val accuracy = evaluator.evaluate(predictions)\n+    println(\"Test Error = \" + (1.0 - accuracy))"
  }],
  "prId": 11015
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "I would call it \"precision\" instead of \"accuracy\" since it might confuse people (even though they are the same here).\n",
    "commit": "e27fe714e553901860f45dba6906fa7fcc4dcdb0",
    "createdAt": "2016-04-12T20:32:52Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+// $example on$\n+import org.apache.spark.ml.classification.{NaiveBayes}\n+import org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\n+// $example off$\n+import org.apache.spark.sql.SQLContext\n+\n+object NaiveBayesExample {\n+  def main(args: Array[String]): Unit = {\n+    val conf = new SparkConf().setAppName(\"NaiveBayesExample\")\n+    val sc = new SparkContext(conf)\n+    val sqlContext = new SQLContext(sc)\n+    // $example on$\n+    // Load the data stored in LIBSVM format as a DataFrame.\n+    val data = sqlContext.read.format(\"libsvm\").load(\"data/mllib/sample_libsvm_data.txt\")\n+\n+    // Split the data into training and test sets (30% held out for testing)\n+    val Array(trainingData, testData) = data.randomSplit(Array(0.7, 0.3))\n+\n+    // Train a NaiveBayes model.\n+    val model = new NaiveBayes()\n+      .fit(trainingData)\n+\n+    // Select example rows to display.\n+    val predictions = model.transform(testData)\n+    predictions.show()\n+\n+    // Select (prediction, true label) and compute test error\n+    val evaluator = new MulticlassClassificationEvaluator()\n+      .setLabelCol(\"label\")\n+      .setPredictionCol(\"prediction\")\n+      .setMetricName(\"precision\")\n+    val accuracy = evaluator.evaluate(predictions)"
  }],
  "prId": 11015
}]