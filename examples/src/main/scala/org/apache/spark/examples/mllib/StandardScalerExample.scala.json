[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Move it out of example on and off\n",
    "commit": "3513e0f63ed88479052266db5ddc0f22aab175a2",
    "createdAt": "2016-02-21T02:58:06Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkConf\n+// $example on$\n+import org.apache.spark.SparkContext"
  }],
  "prId": 11142
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "def main(args: Array[String]): Unit = {\n",
    "commit": "3513e0f63ed88479052266db5ddc0f22aab175a2",
    "createdAt": "2016-02-21T02:59:03Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkConf\n+// $example on$\n+import org.apache.spark.SparkContext\n+import org.apache.spark.mllib.feature.{StandardScaler, StandardScalerModel}\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.util.MLUtils\n+// $example off$\n+\n+object StandardScalerExample {\n+\n+  def main(args: Array[String]) {"
  }],
  "prId": 11142
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Add outputs of data1 and data2\n",
    "commit": "3513e0f63ed88479052266db5ddc0f22aab175a2",
    "createdAt": "2016-02-21T03:00:54Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkConf\n+// $example on$\n+import org.apache.spark.SparkContext\n+import org.apache.spark.mllib.feature.{StandardScaler, StandardScalerModel}\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.util.MLUtils\n+// $example off$\n+\n+object StandardScalerExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"StandardScalerExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    val data = MLUtils.loadLibSVMFile(sc, \"data/mllib/sample_libsvm_data.txt\")\n+\n+    val scaler1 = new StandardScaler().fit(data.map(x => x.features))\n+    val scaler2 = new StandardScaler(withMean = true, withStd = true).fit(data.map(x => x.features))\n+    // scaler3 is an identical model to scaler2, and will produce identical transformations\n+    val scaler3 = new StandardScalerModel(scaler2.std, scaler2.mean)\n+\n+    // data1 will be unit variance.\n+    val data1 = data.map(x => (x.label, scaler1.transform(x.features)))\n+\n+    // Without converting the features into dense vectors, transformation with zero mean will raise\n+    // exception on sparse vector.\n+    // data2 will be unit variance and zero mean.\n+    val data2 = data.map(x => (x.label, scaler2.transform(Vectors.dense(x.features.toArray))))\n+    // $example off$\n+",
    "line": 52
  }],
  "prId": 11142
}]