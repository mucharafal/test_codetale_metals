[{
  "comments": [{
    "author": {
      "login": "sethah"
    },
    "body": "We'll want to use SparkSession here and elsewhere now.\n",
    "commit": "8b9f33a0a5991959743e29e9f61175a20ce14a87",
    "createdAt": "2016-05-05T23:17:53Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+// $example on$\n+import org.apache.spark.ml.regression.GeneralizedLinearRegression\n+// $example off$\n+import org.apache.spark.sql.SQLContext\n+\n+object GeneralizedLinearRegressionExample {\n+\n+  def main(args: Array[String]): Unit = {\n+    val conf = new SparkConf().setAppName(\"GeneralizedLinearRegressionExample\")\n+    val sc = new SparkContext(conf)\n+    val sqlContext = new SQLContext(sc)"
  }],
  "prId": 12754
}, {
  "comments": [{
    "author": {
      "login": "sethah"
    },
    "body": "I think it would be nice to show off the testing summary (`val testSummary = model.evaluate(testData)`), but I know we try to keep the examples rather brief. \n",
    "commit": "8b9f33a0a5991959743e29e9f61175a20ce14a87",
    "createdAt": "2016-05-06T18:29:02Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+// $example on$\n+import org.apache.spark.ml.regression.GeneralizedLinearRegression\n+// $example off$\n+import org.apache.spark.sql.SparkSession\n+\n+object GeneralizedLinearRegressionExample {\n+\n+  def main(args: Array[String]): Unit = {\n+    val spark = SparkSession\n+      .builder\n+      .appName(\"GeneralizedLinearRegressionExample\")\n+      .getOrCreate()\n+\n+    // $example on$\n+    // Load training data\n+    val training = spark.read.format(\"libsvm\")\n+      .load(\"data/mllib/sample_linear_regression_data.txt\")\n+\n+    val glr = new GeneralizedLinearRegression()\n+      .setFamily(\"gaussian\")\n+      .setLink(\"identity\")\n+      .setMaxIter(10)\n+      .setRegParam(0.3)\n+\n+    // Fit the model\n+    val model = glr.fit(training)\n+\n+    // Print the coefficients and intercept for generalized linear regression model\n+    println(s\"Coefficients: ${model.coefficients} Intercept: ${model.intercept}\")\n+\n+    // Summarize the model over the training set and print out some metrics\n+    val summary = model.summary"
  }, {
    "author": {
      "login": "yanboliang"
    },
    "body": "We should keep the example succinct, so I think it does not necessary to illustrate a complete ML pipeline in the algorithm example. \n",
    "commit": "8b9f33a0a5991959743e29e9f61175a20ce14a87",
    "createdAt": "2016-05-10T02:31:04Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+// $example on$\n+import org.apache.spark.ml.regression.GeneralizedLinearRegression\n+// $example off$\n+import org.apache.spark.sql.SparkSession\n+\n+object GeneralizedLinearRegressionExample {\n+\n+  def main(args: Array[String]): Unit = {\n+    val spark = SparkSession\n+      .builder\n+      .appName(\"GeneralizedLinearRegressionExample\")\n+      .getOrCreate()\n+\n+    // $example on$\n+    // Load training data\n+    val training = spark.read.format(\"libsvm\")\n+      .load(\"data/mllib/sample_linear_regression_data.txt\")\n+\n+    val glr = new GeneralizedLinearRegression()\n+      .setFamily(\"gaussian\")\n+      .setLink(\"identity\")\n+      .setMaxIter(10)\n+      .setRegParam(0.3)\n+\n+    // Fit the model\n+    val model = glr.fit(training)\n+\n+    // Print the coefficients and intercept for generalized linear regression model\n+    println(s\"Coefficients: ${model.coefficients} Intercept: ${model.intercept}\")\n+\n+    // Summarize the model over the training set and print out some metrics\n+    val summary = model.summary"
  }],
  "prId": 12754
}, {
  "comments": [{
    "author": {
      "login": "sethah"
    },
    "body": "If we don't add a test summary, can you call this `dataset` or something similar? `training` doesn't make sense, IMO, if there isn't a test set also.\n",
    "commit": "8b9f33a0a5991959743e29e9f61175a20ce14a87",
    "createdAt": "2016-05-06T18:29:38Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+// $example on$\n+import org.apache.spark.ml.regression.GeneralizedLinearRegression\n+// $example off$\n+import org.apache.spark.sql.SparkSession\n+\n+object GeneralizedLinearRegressionExample {\n+\n+  def main(args: Array[String]): Unit = {\n+    val spark = SparkSession\n+      .builder\n+      .appName(\"GeneralizedLinearRegressionExample\")\n+      .getOrCreate()\n+\n+    // $example on$\n+    // Load training data\n+    val training = spark.read.format(\"libsvm\")"
  }, {
    "author": {
      "login": "yanboliang"
    },
    "body": "Agree, updated.\n",
    "commit": "8b9f33a0a5991959743e29e9f61175a20ce14a87",
    "createdAt": "2016-05-10T02:35:36Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+// $example on$\n+import org.apache.spark.ml.regression.GeneralizedLinearRegression\n+// $example off$\n+import org.apache.spark.sql.SparkSession\n+\n+object GeneralizedLinearRegressionExample {\n+\n+  def main(args: Array[String]): Unit = {\n+    val spark = SparkSession\n+      .builder\n+      .appName(\"GeneralizedLinearRegressionExample\")\n+      .getOrCreate()\n+\n+    // $example on$\n+    // Load training data\n+    val training = spark.read.format(\"libsvm\")"
  }],
  "prId": 12754
}, {
  "comments": [{
    "author": {
      "login": "sethah"
    },
    "body": "In other examples, we place a comment at the top of the file explaining how to run the example. For instance:\n\n``` scala\n\n/**\n * An example demonstrating a bisecting k-means clustering.\n * Run with\n * {{{\n * bin/run-example ml.BisectingKMeansExample\n * }}}\n */\n```\n\nWe seem to be very inconsistent about this. It would be nice to choose a convention and stick to it. Thoughts? @MLnick @zhengruifeng\n",
    "commit": "8b9f33a0a5991959743e29e9f61175a20ce14a87",
    "createdAt": "2016-05-10T15:05:13Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+// $example on$\n+import org.apache.spark.ml.regression.GeneralizedLinearRegression\n+// $example off$\n+import org.apache.spark.sql.SparkSession\n+\n+object GeneralizedLinearRegressionExample {"
  }, {
    "author": {
      "login": "MLnick"
    },
    "body": "I like the comment being there - we should try to have that consistently in\nall the examples\nOn Tue, 10 May 2016 at 17:07, Seth Hendrickson notifications@github.com\nwrote:\n\n> In\n> examples/src/main/scala/org/apache/spark/examples/ml/GeneralizedLinearRegressionExample.scala\n> https://github.com/apache/spark/pull/12754#discussion_r62689150:\n> \n> > - \\* Unless required by applicable law or agreed to in writing, software\n> > - \\* distributed under the License is distributed on an \"AS IS\" BASIS,\n> > - \\* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n> > - \\* See the License for the specific language governing permissions and\n> > - \\* limitations under the License.\n> > - */\n> >   +\n> >   +// scalastyle:off println\n> >   +package org.apache.spark.examples.ml\n> >   +\n> >   +// $example on$\n> >   +import org.apache.spark.ml.regression.GeneralizedLinearRegression\n> >   +// $example off$\n> >   +import org.apache.spark.sql.SparkSession\n> >   +\n> >   +object GeneralizedLinearRegressionExample {\n> \n> In other examples, we place a comment at the top of the file explaining\n> how to run the example. For instance:\n> \n> /*\\* \\* An example demonstrating a bisecting k-means clustering. \\* Run with \\* {{{ \\* bin/run-example ml.BisectingKMeansExample \\* }}} */\n> \n> We seem to be very inconsistent about this. It would be nice to choose a\n> convention and stick to it. Thoughts? @MLnick https://github.com/MLnick\n> @zhengruifeng https://github.com/zhengruifeng\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/spark/pull/12754/files/faa9892f7b6fcc245456d3b83ca4f8d03a220b64#r62689150\n",
    "commit": "8b9f33a0a5991959743e29e9f61175a20ce14a87",
    "createdAt": "2016-05-10T15:16:28Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+// $example on$\n+import org.apache.spark.ml.regression.GeneralizedLinearRegression\n+// $example off$\n+import org.apache.spark.sql.SparkSession\n+\n+object GeneralizedLinearRegressionExample {"
  }],
  "prId": 12754
}, {
  "comments": [{
    "author": {
      "login": "sethah"
    },
    "body": "Let's separate these onto two line here and the Java example.\n",
    "commit": "8b9f33a0a5991959743e29e9f61175a20ce14a87",
    "createdAt": "2016-05-13T15:02:49Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+// $example on$\n+import org.apache.spark.ml.regression.GeneralizedLinearRegression\n+// $example off$\n+import org.apache.spark.sql.SparkSession\n+\n+/**\n+ * An example demonstrating generalized linear regression.\n+ * Run with\n+ * {{{\n+ * bin/run-example ml.GeneralizedLinearRegressionExample\n+ * }}}\n+ */\n+\n+object GeneralizedLinearRegressionExample {\n+\n+  def main(args: Array[String]): Unit = {\n+    val spark = SparkSession\n+      .builder\n+      .appName(\"GeneralizedLinearRegressionExample\")\n+      .getOrCreate()\n+\n+    // $example on$\n+    // Load training data\n+    val dataset = spark.read.format(\"libsvm\")\n+      .load(\"data/mllib/sample_linear_regression_data.txt\")\n+\n+    val glr = new GeneralizedLinearRegression()\n+      .setFamily(\"gaussian\")\n+      .setLink(\"identity\")\n+      .setMaxIter(10)\n+      .setRegParam(0.3)\n+\n+    // Fit the model\n+    val model = glr.fit(dataset)\n+\n+    // Print the coefficients and intercept for generalized linear regression model\n+    println(s\"Coefficients: ${model.coefficients} Intercept: ${model.intercept}\")"
  }],
  "prId": 12754
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "`Deviance Residuals`\n",
    "commit": "8b9f33a0a5991959743e29e9f61175a20ce14a87",
    "createdAt": "2016-05-13T17:18:22Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+// $example on$\n+import org.apache.spark.ml.regression.GeneralizedLinearRegression\n+// $example off$\n+import org.apache.spark.sql.SparkSession\n+\n+/**\n+ * An example demonstrating generalized linear regression.\n+ * Run with\n+ * {{{\n+ * bin/run-example ml.GeneralizedLinearRegressionExample\n+ * }}}\n+ */\n+\n+object GeneralizedLinearRegressionExample {\n+\n+  def main(args: Array[String]): Unit = {\n+    val spark = SparkSession\n+      .builder\n+      .appName(\"GeneralizedLinearRegressionExample\")\n+      .getOrCreate()\n+\n+    // $example on$\n+    // Load training data\n+    val dataset = spark.read.format(\"libsvm\")\n+      .load(\"data/mllib/sample_linear_regression_data.txt\")\n+\n+    val glr = new GeneralizedLinearRegression()\n+      .setFamily(\"gaussian\")\n+      .setLink(\"identity\")\n+      .setMaxIter(10)\n+      .setRegParam(0.3)\n+\n+    // Fit the model\n+    val model = glr.fit(dataset)\n+\n+    // Print the coefficients and intercept for generalized linear regression model\n+    println(s\"Coefficients: ${model.coefficients}\")\n+    println(s\"Intercept: ${model.intercept}\")\n+\n+    // Summarize the model over the training set and print out some metrics\n+    val summary = model.summary\n+    println(s\"Coefficient Standard Errors: ${summary.coefficientStandardErrors.mkString(\",\")}\")\n+    println(s\"T Values: ${summary.tValues.mkString(\",\")}\")\n+    println(s\"P Values: ${summary.pValues.mkString(\",\")}\")\n+    println(s\"Dispersion: ${summary.dispersion}\")\n+    println(s\"Null Deviance: ${summary.nullDeviance}\")\n+    println(s\"Residual Degree Of Freedom Null: ${summary.residualDegreeOfFreedomNull}\")\n+    println(s\"Deviance: ${summary.deviance}\")\n+    println(s\"Residual Degree Of Freedom: ${summary.residualDegreeOfFreedom}\")\n+    println(s\"AIC: ${summary.aic}\")\n+    println(\"DevianceResiduals: \")"
  }],
  "prId": 12754
}]