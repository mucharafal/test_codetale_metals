[{
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "This mentions caching but doesn't cache. ",
    "commit": "7c09f9a4705cc47e01b91a3d8ae85d44c2790f0d",
    "createdAt": "2016-12-01T07:23:46Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+// $example on$\n+import org.apache.spark.ml.feature.MinHashLSH\n+import org.apache.spark.ml.linalg.Vectors\n+// $example off$\n+import org.apache.spark.sql.SparkSession\n+\n+object ApproxSimilarityJoinExample {\n+  def main(args: Array[String]): Unit = {\n+    // Creates a SparkSession\n+    val spark = SparkSession\n+      .builder\n+      .appName(\"ApproxSimilarityJoinExample\")\n+      .getOrCreate()\n+\n+    // $example on$\n+    val dfA = spark.createDataFrame(Seq(\n+      (0, Vectors.sparse(6, Seq((0, 1.0), (1, 1.0), (2, 1.0)))),\n+      (1, Vectors.sparse(6, Seq((2, 1.0), (3, 1.0), (4, 1.0)))),\n+      (2, Vectors.sparse(6, Seq((0, 1.0), (2, 1.0), (4, 1.0))))\n+    )).toDF(\"id\", \"keys\")\n+\n+    val dfB = spark.createDataFrame(Seq(\n+      (3, Vectors.sparse(6, Seq((1, 1.0), (3, 1.0), (5, 1.0)))),\n+      (4, Vectors.sparse(6, Seq((2, 1.0), (3, 1.0), (5, 1.0)))),\n+      (5, Vectors.sparse(6, Seq((1, 1.0), (2, 1.0), (4, 1.0))))\n+    )).toDF(\"id\", \"keys\")\n+\n+    val mh = new MinHashLSH()\n+      .setNumHashTables(5)\n+      .setInputCol(\"keys\")\n+      .setOutputCol(\"values\")\n+\n+    val model = mh.fit(dfA)\n+    model.approxSimilarityJoin(dfA, dfB, 0.6).show()\n+\n+    // Cache the transformed columns"
  }, {
    "author": {
      "login": "Yunni"
    },
    "body": "Fixed.",
    "commit": "7c09f9a4705cc47e01b91a3d8ae85d44c2790f0d",
    "createdAt": "2016-12-02T23:16:10Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+// $example on$\n+import org.apache.spark.ml.feature.MinHashLSH\n+import org.apache.spark.ml.linalg.Vectors\n+// $example off$\n+import org.apache.spark.sql.SparkSession\n+\n+object ApproxSimilarityJoinExample {\n+  def main(args: Array[String]): Unit = {\n+    // Creates a SparkSession\n+    val spark = SparkSession\n+      .builder\n+      .appName(\"ApproxSimilarityJoinExample\")\n+      .getOrCreate()\n+\n+    // $example on$\n+    val dfA = spark.createDataFrame(Seq(\n+      (0, Vectors.sparse(6, Seq((0, 1.0), (1, 1.0), (2, 1.0)))),\n+      (1, Vectors.sparse(6, Seq((2, 1.0), (3, 1.0), (4, 1.0)))),\n+      (2, Vectors.sparse(6, Seq((0, 1.0), (2, 1.0), (4, 1.0))))\n+    )).toDF(\"id\", \"keys\")\n+\n+    val dfB = spark.createDataFrame(Seq(\n+      (3, Vectors.sparse(6, Seq((1, 1.0), (3, 1.0), (5, 1.0)))),\n+      (4, Vectors.sparse(6, Seq((2, 1.0), (3, 1.0), (5, 1.0)))),\n+      (5, Vectors.sparse(6, Seq((1, 1.0), (2, 1.0), (4, 1.0))))\n+    )).toDF(\"id\", \"keys\")\n+\n+    val mh = new MinHashLSH()\n+      .setNumHashTables(5)\n+      .setInputCol(\"keys\")\n+      .setOutputCol(\"values\")\n+\n+    val model = mh.fit(dfA)\n+    model.approxSimilarityJoin(dfA, dfB, 0.6).show()\n+\n+    // Cache the transformed columns"
  }],
  "prId": 15795
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "Just a note - will `approxSimilarityJoin` return duplicates? We should think about removing them automatically then?",
    "commit": "7c09f9a4705cc47e01b91a3d8ae85d44c2790f0d",
    "createdAt": "2016-12-01T07:24:37Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+// $example on$\n+import org.apache.spark.ml.feature.MinHashLSH\n+import org.apache.spark.ml.linalg.Vectors\n+// $example off$\n+import org.apache.spark.sql.SparkSession\n+\n+object ApproxSimilarityJoinExample {\n+  def main(args: Array[String]): Unit = {\n+    // Creates a SparkSession\n+    val spark = SparkSession\n+      .builder\n+      .appName(\"ApproxSimilarityJoinExample\")\n+      .getOrCreate()\n+\n+    // $example on$\n+    val dfA = spark.createDataFrame(Seq(\n+      (0, Vectors.sparse(6, Seq((0, 1.0), (1, 1.0), (2, 1.0)))),\n+      (1, Vectors.sparse(6, Seq((2, 1.0), (3, 1.0), (4, 1.0)))),\n+      (2, Vectors.sparse(6, Seq((0, 1.0), (2, 1.0), (4, 1.0))))\n+    )).toDF(\"id\", \"keys\")\n+\n+    val dfB = spark.createDataFrame(Seq(\n+      (3, Vectors.sparse(6, Seq((1, 1.0), (3, 1.0), (5, 1.0)))),\n+      (4, Vectors.sparse(6, Seq((2, 1.0), (3, 1.0), (5, 1.0)))),\n+      (5, Vectors.sparse(6, Seq((1, 1.0), (2, 1.0), (4, 1.0))))\n+    )).toDF(\"id\", \"keys\")\n+\n+    val mh = new MinHashLSH()\n+      .setNumHashTables(5)\n+      .setInputCol(\"keys\")\n+      .setOutputCol(\"values\")\n+\n+    val model = mh.fit(dfA)\n+    model.approxSimilarityJoin(dfA, dfB, 0.6).show()\n+\n+    // Cache the transformed columns\n+    val transformedA = model.transform(dfA)\n+    val transformedB = model.transform(dfB)\n+    model.approxSimilarityJoin(transformedA, transformedB, 0.6).show()\n+\n+    // Self Join\n+    model.approxSimilarityJoin(dfA, dfA, 0.6).filter(\"datasetA.id < datasetB.id\").show()"
  }, {
    "author": {
      "login": "Yunni"
    },
    "body": "Duplicates are only in self join, where both (RowA, RowB) and (RowB, RowA) will appear in the results.",
    "commit": "7c09f9a4705cc47e01b91a3d8ae85d44c2790f0d",
    "createdAt": "2016-12-02T23:17:38Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+// $example on$\n+import org.apache.spark.ml.feature.MinHashLSH\n+import org.apache.spark.ml.linalg.Vectors\n+// $example off$\n+import org.apache.spark.sql.SparkSession\n+\n+object ApproxSimilarityJoinExample {\n+  def main(args: Array[String]): Unit = {\n+    // Creates a SparkSession\n+    val spark = SparkSession\n+      .builder\n+      .appName(\"ApproxSimilarityJoinExample\")\n+      .getOrCreate()\n+\n+    // $example on$\n+    val dfA = spark.createDataFrame(Seq(\n+      (0, Vectors.sparse(6, Seq((0, 1.0), (1, 1.0), (2, 1.0)))),\n+      (1, Vectors.sparse(6, Seq((2, 1.0), (3, 1.0), (4, 1.0)))),\n+      (2, Vectors.sparse(6, Seq((0, 1.0), (2, 1.0), (4, 1.0))))\n+    )).toDF(\"id\", \"keys\")\n+\n+    val dfB = spark.createDataFrame(Seq(\n+      (3, Vectors.sparse(6, Seq((1, 1.0), (3, 1.0), (5, 1.0)))),\n+      (4, Vectors.sparse(6, Seq((2, 1.0), (3, 1.0), (5, 1.0)))),\n+      (5, Vectors.sparse(6, Seq((1, 1.0), (2, 1.0), (4, 1.0))))\n+    )).toDF(\"id\", \"keys\")\n+\n+    val mh = new MinHashLSH()\n+      .setNumHashTables(5)\n+      .setInputCol(\"keys\")\n+      .setOutputCol(\"values\")\n+\n+    val model = mh.fit(dfA)\n+    model.approxSimilarityJoin(dfA, dfB, 0.6).show()\n+\n+    // Cache the transformed columns\n+    val transformedA = model.transform(dfA)\n+    val transformedB = model.transform(dfB)\n+    model.approxSimilarityJoin(transformedA, transformedB, 0.6).show()\n+\n+    // Self Join\n+    model.approxSimilarityJoin(dfA, dfA, 0.6).filter(\"datasetA.id < datasetB.id\").show()"
  }],
  "prId": 15795
}]