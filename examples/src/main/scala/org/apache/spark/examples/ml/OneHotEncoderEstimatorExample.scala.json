[{
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "I know the examples are re-creating the existing `OneHotEncoder` examples, but perhaps we should just drop the `StringIndexer` part and show a simplified example transforming the raw label indices to OHE vectors?\r\n\r\nWe could mention in the user guide that it is common to encode categorical features using `StringIndexer` first?",
    "commit": "3c697bd069519b99f19796d7f173655ffccefb50",
    "createdAt": "2018-01-15T10:20:13Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+// $example on$\n+import org.apache.spark.ml.feature.{OneHotEncoderEstimator, StringIndexer}\n+// $example off$\n+import org.apache.spark.sql.SparkSession\n+\n+object OneHotEncoderEstimatorExample {\n+  def main(args: Array[String]): Unit = {\n+    val spark = SparkSession\n+      .builder\n+      .appName(\"OneHotEncoderEstimatorExample\")\n+      .getOrCreate()\n+\n+    // $example on$\n+    val df = spark.createDataFrame(Seq("
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "Ok for me. As an example, it seems a bit lengthy because the two `StringIndexer`.",
    "commit": "3c697bd069519b99f19796d7f173655ffccefb50",
    "createdAt": "2018-01-16T01:39:36Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+// $example on$\n+import org.apache.spark.ml.feature.{OneHotEncoderEstimator, StringIndexer}\n+// $example off$\n+import org.apache.spark.sql.SparkSession\n+\n+object OneHotEncoderEstimatorExample {\n+  def main(args: Array[String]): Unit = {\n+    val spark = SparkSession\n+      .builder\n+      .appName(\"OneHotEncoderEstimatorExample\")\n+      .getOrCreate()\n+\n+    // $example on$\n+    val df = spark.createDataFrame(Seq("
  }],
  "prId": 20257
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "Same applies here.",
    "commit": "3c697bd069519b99f19796d7f173655ffccefb50",
    "createdAt": "2018-01-16T12:21:32Z",
    "diffHunk": "@@ -19,38 +19,34 @@\n package org.apache.spark.examples.ml\n \n // $example on$\n-import org.apache.spark.ml.feature.{OneHotEncoder, StringIndexer}\n+import org.apache.spark.ml.feature.OneHotEncoderEstimator\n // $example off$\n import org.apache.spark.sql.SparkSession\n \n-object OneHotEncoderExample {\n+object OneHotEncoderEstimatorExample {\n   def main(args: Array[String]): Unit = {\n     val spark = SparkSession\n       .builder\n-      .appName(\"OneHotEncoderExample\")\n+      .appName(\"OneHotEncoderEstimatorExample\")\n       .getOrCreate()\n \n     // $example on$\n+    // Notice: this categorical features are usually encoded with `StringIndexer`."
  }],
  "prId": 20257
}]