[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "rename the appname\n",
    "commit": "8f71ac6793406113984cf5eff41b12d4142be5a7",
    "createdAt": "2015-11-09T11:37:14Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+// $example on$\n+import org.apache.spark.mllib.classification.LogisticRegressionModel\n+import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.optimization.{LBFGS, LogisticGradient, SquaredL2Updater}\n+import org.apache.spark.mllib.util.MLUtils\n+// $example off$\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+\n+object LBFGSExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"SimpleFPGrowth\")"
  }],
  "prId": 9516
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "add `:Unit =` as the return value\n",
    "commit": "8f71ac6793406113984cf5eff41b12d4142be5a7",
    "createdAt": "2015-11-09T11:37:47Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+// $example on$\n+import org.apache.spark.mllib.classification.LogisticRegressionModel\n+import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.optimization.{LBFGS, LogisticGradient, SquaredL2Updater}\n+import org.apache.spark.mllib.util.MLUtils\n+// $example off$\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+\n+object LBFGSExample {\n+\n+  def main(args: Array[String]) {"
  }],
  "prId": 9516
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "remove the blank line\n",
    "commit": "8f71ac6793406113984cf5eff41b12d4142be5a7",
    "createdAt": "2015-11-09T11:38:31Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+// $example on$\n+import org.apache.spark.mllib.classification.LogisticRegressionModel\n+import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.optimization.{LBFGS, LogisticGradient, SquaredL2Updater}\n+import org.apache.spark.mllib.util.MLUtils\n+// $example off$\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+\n+object LBFGSExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"SimpleFPGrowth\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    val data = MLUtils.loadLibSVMFile(sc, \"data/mllib/sample_libsvm_data.txt\")\n+    val numFeatures = data.take(1)(0).features.size\n+\n+    // Split data into training (60%) and test (40%).\n+    val splits = data.randomSplit(Array(0.6, 0.4), seed = 11L)\n+\n+    // Append 1 into the training data as intercept.\n+    val training = splits(0).map(x => (x.label, MLUtils.appendBias(x.features))).cache()\n+\n+    val test = splits(1)\n+\n+    // Run training algorithm to build the model\n+    val numCorrections = 10\n+    val convergenceTol = 1e-4\n+    val maxNumIterations = 20\n+    val regParam = 0.1\n+    val initialWeightsWithIntercept = Vectors.dense(new Array[Double](numFeatures + 1))\n+\n+    val (weightsWithIntercept, loss) = LBFGS.runLBFGS(\n+      training,\n+      new LogisticGradient(),\n+      new SquaredL2Updater(),\n+      numCorrections,\n+      convergenceTol,\n+      maxNumIterations,\n+      regParam,\n+      initialWeightsWithIntercept)\n+\n+    val model = new LogisticRegressionModel(\n+      Vectors.dense(weightsWithIntercept.toArray.slice(0, weightsWithIntercept.size - 1)),\n+      weightsWithIntercept(weightsWithIntercept.size - 1))\n+\n+    // Clear the default threshold.\n+    model.clearThreshold()\n+\n+    // Compute raw scores on the test set.\n+    val scoreAndLabels = test.map { point =>\n+      val score = model.predict(point.features)\n+      (score, point.label)\n+    }\n+\n+    // Get evaluation metrics.\n+    val metrics = new BinaryClassificationMetrics(scoreAndLabels)\n+    val auROC = metrics.areaUnderROC()\n+\n+    println(\"Loss of each step in training process\")\n+    loss.foreach(println)\n+    println(\"Area under ROC = \" + auROC)\n+    // $example off$\n+  }\n+"
  }],
  "prId": 9516
}]