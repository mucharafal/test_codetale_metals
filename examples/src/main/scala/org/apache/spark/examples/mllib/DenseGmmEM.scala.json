[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "no need for this import\n",
    "commit": "aaa8f25a579d9c9aa191734377b503fb73299b78",
    "createdAt": "2014-12-11T03:09:43Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+import org.apache.spark.mllib.clustering.GaussianMixtureModel"
  }],
  "prId": 3022
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "scala style: should use this spacing: \"if (args.length != 3)\"\n",
    "commit": "aaa8f25a579d9c9aa191734377b503fb73299b78",
    "createdAt": "2014-12-11T03:09:45Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+import org.apache.spark.mllib.clustering.GaussianMixtureModel\n+import org.apache.spark.mllib.clustering.GMMExpectationMaximization\n+import org.apache.spark.mllib.linalg.Vectors\n+\n+object DenseGmmEM {\n+  def main(args: Array[String]): Unit = {\n+    if( args.length != 3 ) {"
  }],
  "prId": 3022
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "\"tol\" --> \"delta\" (or whatever delta is changed to; see other comment about delta)\n",
    "commit": "aaa8f25a579d9c9aa191734377b503fb73299b78",
    "createdAt": "2014-12-11T03:09:46Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+import org.apache.spark.mllib.clustering.GaussianMixtureModel\n+import org.apache.spark.mllib.clustering.GMMExpectationMaximization\n+import org.apache.spark.mllib.linalg.Vectors\n+\n+object DenseGmmEM {\n+  def main(args: Array[String]): Unit = {\n+    if( args.length != 3 ) {\n+      println(\"usage: DenseGmmEM <input file> <k> <delta>\")\n+    } else {\n+      run(args(0), args(1).toInt, args(2).toDouble)\n+    }\n+  }\n+\n+  def run(inputFile: String, k: Int, tol: Double) {"
  }],
  "prId": 3022
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "scala style: For multi-line map() calls, use braces:\n\n```\n    val data = ctx.textFile(inputFile).map { line =>\n        Vectors.dense(line.trim.split(' ').map(_.toDouble))\n      }.cache()\n```\n\nThis occurs in several other places in this PR.  Could you please fix those too?\n",
    "commit": "aaa8f25a579d9c9aa191734377b503fb73299b78",
    "createdAt": "2014-12-11T03:09:48Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+import org.apache.spark.mllib.clustering.GaussianMixtureModel\n+import org.apache.spark.mllib.clustering.GMMExpectationMaximization\n+import org.apache.spark.mllib.linalg.Vectors\n+\n+object DenseGmmEM {\n+  def main(args: Array[String]): Unit = {\n+    if( args.length != 3 ) {\n+      println(\"usage: DenseGmmEM <input file> <k> <delta>\")\n+    } else {\n+      run(args(0), args(1).toInt, args(2).toDouble)\n+    }\n+  }\n+\n+  def run(inputFile: String, k: Int, tol: Double) {\n+    val conf = new SparkConf().setAppName(\"Spark EM Sample\")\n+    val ctx  = new SparkContext(conf)\n+    \n+    val data = ctx.textFile(inputFile).map(line =>"
  }],
  "prId": 3022
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "index +4 spaces only\n",
    "commit": "aaa8f25a579d9c9aa191734377b503fb73299b78",
    "createdAt": "2014-12-15T22:01:14Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+import org.apache.spark.mllib.clustering.GaussianMixtureModelEM\n+import org.apache.spark.mllib.linalg.Vectors\n+\n+object DenseGmmEM {\n+  def main(args: Array[String]): Unit = {\n+    if (args.length != 3) {\n+      println(\"usage: DenseGmmEM <input file> <k> <convergenceTol>\")\n+    } else {\n+      run(args(0), args(1).toInt, args(2).toDouble)\n+    }\n+  }\n+\n+  def run(inputFile: String, k: Int, convergenceTol: Double) {\n+    val conf = new SparkConf().setAppName(\"Spark EM Sample\")\n+    val ctx  = new SparkContext(conf)\n+    \n+    val data = ctx.textFile(inputFile).map{ line =>\n+        Vectors.dense(line.trim.split(' ').map(_.toDouble))\n+      }.cache()\n+      \n+    val clusters = new GaussianMixtureModelEM()\n+                        .setK(k)"
  }],
  "prId": 3022
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Sorry!  I just checked other places in the codebase, and it looks like +2 spaces is the correct indentation.\n",
    "commit": "aaa8f25a579d9c9aa191734377b503fb73299b78",
    "createdAt": "2014-12-16T01:26:50Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+import org.apache.spark.mllib.clustering.GaussianMixtureModelEM\n+import org.apache.spark.mllib.linalg.Vectors\n+\n+object DenseGmmEM {\n+  def main(args: Array[String]): Unit = {\n+    if (args.length != 3) {\n+      println(\"usage: DenseGmmEM <input file> <k> <convergenceTol>\")\n+    } else {\n+      run(args(0), args(1).toInt, args(2).toDouble)\n+    }\n+  }\n+\n+  def run(inputFile: String, k: Int, convergenceTol: Double) {\n+    val conf = new SparkConf().setAppName(\"Spark EM Sample\")\n+    val ctx  = new SparkContext(conf)\n+    \n+    val data = ctx.textFile(inputFile).map{ line =>\n+      Vectors.dense(line.trim.split(' ').map(_.toDouble))\n+    }.cache\n+      \n+    val clusters = new GaussianMixtureModelEM()\n+        .setK(k)"
  }],
  "prId": 3022
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Please add documentation similar to other examples (e.g., DenseKMeans.scala)\n",
    "commit": "aaa8f25a579d9c9aa191734377b503fb73299b78",
    "createdAt": "2014-12-18T00:22:27Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+import org.apache.spark.mllib.clustering.GaussianMixtureModelEM\n+import org.apache.spark.mllib.linalg.Vectors\n+\n+object DenseGmmEM {"
  }],
  "prId": 3022
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Maybe use newlines instead of spaces since the formatting looks odd otherwise.\n",
    "commit": "aaa8f25a579d9c9aa191734377b503fb73299b78",
    "createdAt": "2014-12-18T00:22:29Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+import org.apache.spark.mllib.clustering.GaussianMixtureModelEM\n+import org.apache.spark.mllib.linalg.Vectors\n+\n+object DenseGmmEM {\n+  def main(args: Array[String]): Unit = {\n+    if (args.length != 3) {\n+      println(\"usage: DenseGmmEM <input file> <k> <convergenceTol>\")\n+    } else {\n+      run(args(0), args(1).toInt, args(2).toDouble)\n+    }\n+  }\n+\n+  def run(inputFile: String, k: Int, convergenceTol: Double) {\n+    val conf = new SparkConf().setAppName(\"Spark EM Sample\")\n+    val ctx  = new SparkContext(conf)\n+    \n+    val data = ctx.textFile(inputFile).map{ line =>\n+      Vectors.dense(line.trim.split(' ').map(_.toDouble))\n+    }.cache\n+      \n+    val clusters = new GaussianMixtureModelEM()\n+      .setK(k)\n+      .setConvergenceTol(convergenceTol)\n+      .run(data)\n+    \n+    for (i <- 0 until clusters.k) {\n+      println(\"weight=%f mu=%s sigma=\\n%s\\n\" format "
  }],
  "prId": 3022
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Can this print a line here saying \"Cluster labels:\"?\n",
    "commit": "aaa8f25a579d9c9aa191734377b503fb73299b78",
    "createdAt": "2014-12-18T00:22:30Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+import org.apache.spark.mllib.clustering.GaussianMixtureModelEM\n+import org.apache.spark.mllib.linalg.Vectors\n+\n+object DenseGmmEM {\n+  def main(args: Array[String]): Unit = {\n+    if (args.length != 3) {\n+      println(\"usage: DenseGmmEM <input file> <k> <convergenceTol>\")\n+    } else {\n+      run(args(0), args(1).toInt, args(2).toDouble)\n+    }\n+  }\n+\n+  def run(inputFile: String, k: Int, convergenceTol: Double) {\n+    val conf = new SparkConf().setAppName(\"Spark EM Sample\")\n+    val ctx  = new SparkContext(conf)\n+    \n+    val data = ctx.textFile(inputFile).map{ line =>\n+      Vectors.dense(line.trim.split(' ').map(_.toDouble))\n+    }.cache\n+      \n+    val clusters = new GaussianMixtureModelEM()\n+      .setK(k)\n+      .setConvergenceTol(convergenceTol)\n+      .run(data)\n+    \n+    for (i <- 0 until clusters.k) {\n+      println(\"weight=%f mu=%s sigma=\\n%s\\n\" format \n+        (clusters.weight(i), clusters.mu(i), clusters.sigma(i)))\n+    }\n+    \n+    val (responsibilityMatrix, clusterLabels) = clusters.predict(data)\n+    for (x <- clusterLabels.collect) {"
  }],
  "prId": 3022
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Make private\n",
    "commit": "aaa8f25a579d9c9aa191734377b503fb73299b78",
    "createdAt": "2014-12-19T00:50:17Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+import org.apache.spark.mllib.clustering.GaussianMixtureModelEM\n+import org.apache.spark.mllib.linalg.Vectors\n+\n+/**\n+ * An example Gaussian Mixture Model EM app. Run with\n+ * {{{\n+ * ./bin/run-example org.apache.spark.examples.mllib.DenseGmmEM <input> <k> <covergenceTol>\n+ * }}}\n+ * If you use it as a template to create your own app, please use `spark-submit` to submit your app.\n+ */\n+object DenseGmmEM {\n+  def main(args: Array[String]): Unit = {\n+    if (args.length != 3) {\n+      println(\"usage: DenseGmmEM <input file> <k> <convergenceTol>\")\n+    } else {\n+      run(args(0), args(1).toInt, args(2).toDouble)\n+    }\n+  }\n+\n+  def run(inputFile: String, k: Int, convergenceTol: Double) {"
  }],
  "prId": 3022
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "FYI: It's preferable to use parentheses after calls like cache() which have side effects.  (Some IDEs give warnings about that.)  Ditto for collect, println\n",
    "commit": "aaa8f25a579d9c9aa191734377b503fb73299b78",
    "createdAt": "2014-12-19T00:50:20Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+import org.apache.spark.mllib.clustering.GaussianMixtureModelEM\n+import org.apache.spark.mllib.linalg.Vectors\n+\n+/**\n+ * An example Gaussian Mixture Model EM app. Run with\n+ * {{{\n+ * ./bin/run-example org.apache.spark.examples.mllib.DenseGmmEM <input> <k> <covergenceTol>\n+ * }}}\n+ * If you use it as a template to create your own app, please use `spark-submit` to submit your app.\n+ */\n+object DenseGmmEM {\n+  def main(args: Array[String]): Unit = {\n+    if (args.length != 3) {\n+      println(\"usage: DenseGmmEM <input file> <k> <convergenceTol>\")\n+    } else {\n+      run(args(0), args(1).toInt, args(2).toDouble)\n+    }\n+  }\n+\n+  def run(inputFile: String, k: Int, convergenceTol: Double) {\n+    val conf = new SparkConf().setAppName(\"Spark EM Sample\")\n+    val ctx  = new SparkContext(conf)\n+    \n+    val data = ctx.textFile(inputFile).map{ line =>\n+      Vectors.dense(line.trim.split(' ').map(_.toDouble))\n+    }.cache"
  }, {
    "author": {
      "login": "tgaloppo"
    },
    "body": "Ok.  I'm not even sure this cache() makes sense, since within the algorithm the vectors are converted to breeze vectors and that is the RDD operated on.\n",
    "commit": "aaa8f25a579d9c9aa191734377b503fb73299b78",
    "createdAt": "2014-12-19T01:04:11Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+import org.apache.spark.mllib.clustering.GaussianMixtureModelEM\n+import org.apache.spark.mllib.linalg.Vectors\n+\n+/**\n+ * An example Gaussian Mixture Model EM app. Run with\n+ * {{{\n+ * ./bin/run-example org.apache.spark.examples.mllib.DenseGmmEM <input> <k> <covergenceTol>\n+ * }}}\n+ * If you use it as a template to create your own app, please use `spark-submit` to submit your app.\n+ */\n+object DenseGmmEM {\n+  def main(args: Array[String]): Unit = {\n+    if (args.length != 3) {\n+      println(\"usage: DenseGmmEM <input file> <k> <convergenceTol>\")\n+    } else {\n+      run(args(0), args(1).toInt, args(2).toDouble)\n+    }\n+  }\n+\n+  def run(inputFile: String, k: Int, convergenceTol: Double) {\n+    val conf = new SparkConf().setAppName(\"Spark EM Sample\")\n+    val ctx  = new SparkContext(conf)\n+    \n+    val data = ctx.textFile(inputFile).map{ line =>\n+      Vectors.dense(line.trim.split(' ').map(_.toDouble))\n+    }.cache"
  }],
  "prId": 3022
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "If people try this on a big dataset, it will crash when collect is called.  It might be good to do: `clusterLabels.take(100).collect()` (which will take <= 100 instances) (and to change the println above accordingly).\n",
    "commit": "aaa8f25a579d9c9aa191734377b503fb73299b78",
    "createdAt": "2014-12-19T00:50:23Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+import org.apache.spark.mllib.clustering.GaussianMixtureModelEM\n+import org.apache.spark.mllib.linalg.Vectors\n+\n+/**\n+ * An example Gaussian Mixture Model EM app. Run with\n+ * {{{\n+ * ./bin/run-example org.apache.spark.examples.mllib.DenseGmmEM <input> <k> <covergenceTol>\n+ * }}}\n+ * If you use it as a template to create your own app, please use `spark-submit` to submit your app.\n+ */\n+object DenseGmmEM {\n+  def main(args: Array[String]): Unit = {\n+    if (args.length != 3) {\n+      println(\"usage: DenseGmmEM <input file> <k> <convergenceTol>\")\n+    } else {\n+      run(args(0), args(1).toInt, args(2).toDouble)\n+    }\n+  }\n+\n+  def run(inputFile: String, k: Int, convergenceTol: Double) {\n+    val conf = new SparkConf().setAppName(\"Spark EM Sample\")\n+    val ctx  = new SparkContext(conf)\n+    \n+    val data = ctx.textFile(inputFile).map{ line =>\n+      Vectors.dense(line.trim.split(' ').map(_.toDouble))\n+    }.cache\n+      \n+    val clusters = new GaussianMixtureModelEM()\n+      .setK(k)\n+      .setConvergenceTol(convergenceTol)\n+      .run(data)\n+    \n+    for (i <- 0 until clusters.k) {\n+      println(\"weight=%f\\nmu=%s\\nsigma=\\n%s\\n\" format \n+        (clusters.weight(i), clusters.mu(i), clusters.sigma(i)))\n+    }\n+    \n+    println(\"Cluster labels:\")\n+    val (responsibilityMatrix, clusterLabels) = clusters.predict(data)\n+    for (x <- clusterLabels.collect) {"
  }],
  "prId": 3022
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Gaussian Mixture Model EM example.\n",
    "commit": "aaa8f25a579d9c9aa191734377b503fb73299b78",
    "createdAt": "2014-12-19T07:36:44Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+import org.apache.spark.mllib.clustering.GaussianMixtureModelEM\n+import org.apache.spark.mllib.linalg.Vectors\n+\n+/**\n+ * An example Gaussian Mixture Model EM app. Run with\n+ * {{{\n+ * ./bin/run-example org.apache.spark.examples.mllib.DenseGmmEM <input> <k> <covergenceTol>\n+ * }}}\n+ * If you use it as a template to create your own app, please use `spark-submit` to submit your app.\n+ */\n+object DenseGmmEM {\n+  def main(args: Array[String]): Unit = {\n+    if (args.length != 3) {\n+      println(\"usage: DenseGmmEM <input file> <k> <convergenceTol>\")\n+    } else {\n+      run(args(0), args(1).toInt, args(2).toDouble)\n+    }\n+  }\n+\n+  private def run(inputFile: String, k: Int, convergenceTol: Double) {\n+    val conf = new SparkConf().setAppName(\"Spark EM Sample\")"
  }],
  "prId": 3022
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "space before `{` ( please also update others)\n",
    "commit": "aaa8f25a579d9c9aa191734377b503fb73299b78",
    "createdAt": "2014-12-19T07:36:47Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+import org.apache.spark.mllib.clustering.GaussianMixtureModelEM\n+import org.apache.spark.mllib.linalg.Vectors\n+\n+/**\n+ * An example Gaussian Mixture Model EM app. Run with\n+ * {{{\n+ * ./bin/run-example org.apache.spark.examples.mllib.DenseGmmEM <input> <k> <covergenceTol>\n+ * }}}\n+ * If you use it as a template to create your own app, please use `spark-submit` to submit your app.\n+ */\n+object DenseGmmEM {\n+  def main(args: Array[String]): Unit = {\n+    if (args.length != 3) {\n+      println(\"usage: DenseGmmEM <input file> <k> <convergenceTol>\")\n+    } else {\n+      run(args(0), args(1).toInt, args(2).toDouble)\n+    }\n+  }\n+\n+  private def run(inputFile: String, k: Int, convergenceTol: Double) {\n+    val conf = new SparkConf().setAppName(\"Spark EM Sample\")\n+    val ctx  = new SparkContext(conf)\n+    \n+    val data = ctx.textFile(inputFile).map{ line =>"
  }],
  "prId": 3022
}, {
  "comments": [{
    "author": {
      "login": "FlytxtRnD"
    },
    "body": "Can we take maxIterations as an optional input parameter?\n",
    "commit": "aaa8f25a579d9c9aa191734377b503fb73299b78",
    "createdAt": "2014-12-22T11:51:42Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+import org.apache.spark.mllib.clustering.GaussianMixtureModelEM\n+import org.apache.spark.mllib.linalg.Vectors\n+\n+/**\n+ * An example Gaussian Mixture Model EM app. Run with\n+ * {{{\n+ * ./bin/run-example org.apache.spark.examples.mllib.DenseGmmEM <input> <k> <covergenceTol>\n+ * }}}\n+ * If you use it as a template to create your own app, please use `spark-submit` to submit your app.\n+ */\n+object DenseGmmEM {\n+  def main(args: Array[String]): Unit = {\n+    if (args.length != 3) {\n+      println(\"usage: DenseGmmEM <input file> <k> <convergenceTol>\")\n+    } else {\n+      run(args(0), args(1).toInt, args(2).toDouble)\n+    }\n+  }\n+\n+  private def run(inputFile: String, k: Int, convergenceTol: Double) {"
  }],
  "prId": 3022
}]