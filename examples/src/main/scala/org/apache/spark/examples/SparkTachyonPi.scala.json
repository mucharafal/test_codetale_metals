[{
  "comments": [{
    "author": {
      "login": "mateiz"
    },
    "body": "IMO it doesn't make sense to port this particular program to Tachyon since it only goes over the data once. How about porting SparkHdfsLR instead?\n",
    "commit": "72b7768c0e289618834b74e9ab85082e8aea4c90",
    "createdAt": "2014-03-27T00:29:59Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples\n+\n+import scala.math.random\n+\n+import org.apache.spark._\n+import org.apache.spark.storage.StorageLevel\n+\n+/** Computes an approximation to pi */"
  }, {
    "author": {
      "login": "mateiz"
    },
    "body": "Also the doc comment should explain that this uses Tachyon for storage.\n",
    "commit": "72b7768c0e289618834b74e9ab85082e8aea4c90",
    "createdAt": "2014-03-27T00:30:11Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples\n+\n+import scala.math.random\n+\n+import org.apache.spark._\n+import org.apache.spark.storage.StorageLevel\n+\n+/** Computes an approximation to pi */"
  }],
  "prId": 158
}, {
  "comments": [{
    "author": {
      "login": "mateiz"
    },
    "body": "Code style of this comment is wrong, it should look like\n\n```\n/**\n * Computes ...\n * This example ...\n */\n```\n",
    "commit": "72b7768c0e289618834b74e9ab85082e8aea4c90",
    "createdAt": "2014-04-02T01:45:20Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples\n+\n+import scala.math.random\n+\n+import org.apache.spark._\n+import org.apache.spark.storage.StorageLevel\n+\n+/** Computes an approximation to pi \n+ *  This example uses Tachyon to persist rdds during computation.\n+ */"
  }],
  "prId": 158
}, {
  "comments": [{
    "author": {
      "login": "mateiz"
    },
    "body": "Why do we have 1- and 2- in these messages? It looks like debug code, just have a simple job.\n",
    "commit": "72b7768c0e289618834b74e9ab85082e8aea4c90",
    "createdAt": "2014-04-02T01:45:38Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples\n+\n+import scala.math.random\n+\n+import org.apache.spark._\n+import org.apache.spark.storage.StorageLevel\n+\n+/** Computes an approximation to pi \n+ *  This example uses Tachyon to persist rdds during computation.\n+ */\n+object SparkTachyonPi {\n+  def main(args: Array[String]) {\n+    if (args.length == 0) {\n+      System.err.println(\"Usage: SparkTachyonPi <master> [<slices>]\")\n+      System.exit(1)\n+    }\n+    val spark = new SparkContext(args(0), \"SparkTachyonPi\",\n+      System.getenv(\"SPARK_HOME\"), SparkContext.jarOfClass(this.getClass))\n+    \n+    val slices = if (args.length > 1) args(1).toInt else 2\n+    val n = 100000 * slices\n+    \n+    val rdd = spark.parallelize(1 to n, slices)\n+    rdd.persist(StorageLevel.OFF_HEAP)\n+    val count = rdd.map { i =>\n+      val x = random * 2 - 1\n+      val y = random * 2 - 1\n+      if (x * x + y * y < 1) 1 else 0\n+    }.reduce(_ + _)\n+    println(\"1- Pi is roughly \" + 4.0 * count / n)"
  }],
  "prId": 158
}]