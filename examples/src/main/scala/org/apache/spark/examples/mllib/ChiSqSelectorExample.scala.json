[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Move the SparkContext out of example on and off\n",
    "commit": "3513e0f63ed88479052266db5ddc0f22aab175a2",
    "createdAt": "2016-02-21T02:44:30Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkConf\n+// $example on$\n+import org.apache.spark.SparkContext"
  }],
  "prId": 11142
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "`def main(args: Array[String]): Unit = {`\n",
    "commit": "3513e0f63ed88479052266db5ddc0f22aab175a2",
    "createdAt": "2016-02-21T02:45:35Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkConf\n+// $example on$\n+import org.apache.spark.SparkContext\n+import org.apache.spark.mllib.feature.ChiSqSelector\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.util.MLUtils\n+// $example off$\n+\n+object ChiSqSelectorExample {\n+\n+  def main(args: Array[String]) {"
  }],
  "prId": 11142
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Remove the last two white spaces before two parentheses:\n\n`LabeledPoint(lp.label, Vectors.dense(lp.features.toArray.map { x => (x / 16).floor }))`\n",
    "commit": "3513e0f63ed88479052266db5ddc0f22aab175a2",
    "createdAt": "2016-02-21T02:47:42Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkConf\n+// $example on$\n+import org.apache.spark.SparkContext\n+import org.apache.spark.mllib.feature.ChiSqSelector\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.util.MLUtils\n+// $example off$\n+\n+object ChiSqSelectorExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"ChiSqSelectorExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    // Load some data in libsvm format\n+    val data = MLUtils.loadLibSVMFile(sc, \"data/mllib/sample_libsvm_data.txt\")\n+    // Discretize data in 16 equal bins since ChiSqSelector requires categorical features\n+    // Even though features are doubles, the ChiSqSelector treats each unique value as a category\n+    val discretizedData = data.map { lp =>\n+      LabeledPoint(lp.label, Vectors.dense(lp.features.toArray.map { x => (x / 16).floor } ) )"
  }],
  "prId": 11142
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "add an output of `filteredData`\n",
    "commit": "3513e0f63ed88479052266db5ddc0f22aab175a2",
    "createdAt": "2016-02-21T02:48:46Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkConf\n+// $example on$\n+import org.apache.spark.SparkContext\n+import org.apache.spark.mllib.feature.ChiSqSelector\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.util.MLUtils\n+// $example off$\n+\n+object ChiSqSelectorExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"ChiSqSelectorExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    // Load some data in libsvm format\n+    val data = MLUtils.loadLibSVMFile(sc, \"data/mllib/sample_libsvm_data.txt\")\n+    // Discretize data in 16 equal bins since ChiSqSelector requires categorical features\n+    // Even though features are doubles, the ChiSqSelector treats each unique value as a category\n+    val discretizedData = data.map { lp =>\n+      LabeledPoint(lp.label, Vectors.dense(lp.features.toArray.map { x => (x / 16).floor } ) )\n+    }\n+    // Create ChiSqSelector that will select top 50 of 692 features\n+    val selector = new ChiSqSelector(50)\n+    // Create ChiSqSelector model (selecting features)\n+    val transformer = selector.fit(discretizedData)\n+    // Filter the top 50 features from each feature vector\n+    val filteredData = discretizedData.map { lp =>\n+      LabeledPoint(lp.label, transformer.transform(lp.features))\n+    }\n+    // $example off$\n+",
    "line": 54
  }],
  "prId": 11142
}]