[{
  "comments": [{
    "author": {
      "login": "kanzhang"
    },
    "body": "How about adding `case null => null` for null handling?\n",
    "commit": "b8cc12b84d387072db5c882407a19d8a55840334",
    "createdAt": "2014-07-22T23:42:13Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.spark.examples.pythonconverters\n+\n+import org.apache.spark.api.python.Converter\n+import collection.JavaConversions._\n+\n+import org.apache.avro.generic.GenericRecord\n+import org.apache.avro.mapred.AvroKey\n+import org.apache.avro.mapreduce.AvroKeyInputFormat\n+import org.apache.avro.Schema.Field\n+import org.apache.avro.Schema\n+import org.apache.avro.Schema.Type._\n+\n+/* \n+  Example usage in pyspark:  \n+\n+    avroRdd = sc.newAPIHadoopFile(\"/tmp/data.avro\", \n+      \"org.apache.avro.mapreduce.AvroKeyInputFormat\", \n+      \"org.apache.avro.mapred.AvroKey\", \n+      \"org.apache.hadoop.io.NullWritable\",\n+      keyConverter=\"org.apache.spark.examples.pythonconverters.AvroGenericConverter\")\n+*/\n+class AvroGenericConverter extends Converter[AvroKey[GenericRecord], java.util.Map[String, Any]] {\n+  override def convert(obj: AvroKey[GenericRecord]): java.util.Map[String, Any] = {\n+\n+    def unpackRecord(record: GenericRecord): java.util.Map[String,Any] = {\n+      mapAsJavaMap(record.getSchema.getFields.map( f => (f.name, unpack(record.get(f.name), f.schema) ) ).toMap)\n+    }\n+    \n+    def unpackArray(value: Any, schema: Schema): java.util.List[Any] = {\n+      bufferAsJavaList(value.asInstanceOf[java.util.List[Any]].map( v => unpack(v, schema)))\n+    }\n+\n+    def unpackUnion(value: Any): Any = value match {   \n+      case v:java.lang.Double => value.asInstanceOf[java.lang.Double]\n+      case v:java.lang.Float => value.asInstanceOf[java.lang.Float]  \n+      case v:java.lang.Integer => value.asInstanceOf[java.lang.Integer] \n+      case v:java.lang.Long => value.asInstanceOf[java.lang.Long] \n+      case v:java.lang.String => value.asInstanceOf[java.lang.String] ",
    "line": 56
  }, {
    "author": {
      "login": "ericgarcia"
    },
    "body": "@kanzhang I couldn't get Java/Scala null passed into Python. It crashed when I tried to do this so I encoded it as an empty string instead. If someone else can figure this out, that would be cool.\n",
    "commit": "b8cc12b84d387072db5c882407a19d8a55840334",
    "createdAt": "2014-07-23T00:47:30Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.spark.examples.pythonconverters\n+\n+import org.apache.spark.api.python.Converter\n+import collection.JavaConversions._\n+\n+import org.apache.avro.generic.GenericRecord\n+import org.apache.avro.mapred.AvroKey\n+import org.apache.avro.mapreduce.AvroKeyInputFormat\n+import org.apache.avro.Schema.Field\n+import org.apache.avro.Schema\n+import org.apache.avro.Schema.Type._\n+\n+/* \n+  Example usage in pyspark:  \n+\n+    avroRdd = sc.newAPIHadoopFile(\"/tmp/data.avro\", \n+      \"org.apache.avro.mapreduce.AvroKeyInputFormat\", \n+      \"org.apache.avro.mapred.AvroKey\", \n+      \"org.apache.hadoop.io.NullWritable\",\n+      keyConverter=\"org.apache.spark.examples.pythonconverters.AvroGenericConverter\")\n+*/\n+class AvroGenericConverter extends Converter[AvroKey[GenericRecord], java.util.Map[String, Any]] {\n+  override def convert(obj: AvroKey[GenericRecord]): java.util.Map[String, Any] = {\n+\n+    def unpackRecord(record: GenericRecord): java.util.Map[String,Any] = {\n+      mapAsJavaMap(record.getSchema.getFields.map( f => (f.name, unpack(record.get(f.name), f.schema) ) ).toMap)\n+    }\n+    \n+    def unpackArray(value: Any, schema: Schema): java.util.List[Any] = {\n+      bufferAsJavaList(value.asInstanceOf[java.util.List[Any]].map( v => unpack(v, schema)))\n+    }\n+\n+    def unpackUnion(value: Any): Any = value match {   \n+      case v:java.lang.Double => value.asInstanceOf[java.lang.Double]\n+      case v:java.lang.Float => value.asInstanceOf[java.lang.Float]  \n+      case v:java.lang.Integer => value.asInstanceOf[java.lang.Integer] \n+      case v:java.lang.Long => value.asInstanceOf[java.lang.Long] \n+      case v:java.lang.String => value.asInstanceOf[java.lang.String] ",
    "line": 56
  }, {
    "author": {
      "login": "kanzhang"
    },
    "body": "One thing you could try to avoid NullPointerException is to wrap any intermediate `value` that could be null into `Option(value)` and only at the end of transformation call `.orNull` on it to get the value.\n",
    "commit": "b8cc12b84d387072db5c882407a19d8a55840334",
    "createdAt": "2014-07-23T01:06:59Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.spark.examples.pythonconverters\n+\n+import org.apache.spark.api.python.Converter\n+import collection.JavaConversions._\n+\n+import org.apache.avro.generic.GenericRecord\n+import org.apache.avro.mapred.AvroKey\n+import org.apache.avro.mapreduce.AvroKeyInputFormat\n+import org.apache.avro.Schema.Field\n+import org.apache.avro.Schema\n+import org.apache.avro.Schema.Type._\n+\n+/* \n+  Example usage in pyspark:  \n+\n+    avroRdd = sc.newAPIHadoopFile(\"/tmp/data.avro\", \n+      \"org.apache.avro.mapreduce.AvroKeyInputFormat\", \n+      \"org.apache.avro.mapred.AvroKey\", \n+      \"org.apache.hadoop.io.NullWritable\",\n+      keyConverter=\"org.apache.spark.examples.pythonconverters.AvroGenericConverter\")\n+*/\n+class AvroGenericConverter extends Converter[AvroKey[GenericRecord], java.util.Map[String, Any]] {\n+  override def convert(obj: AvroKey[GenericRecord]): java.util.Map[String, Any] = {\n+\n+    def unpackRecord(record: GenericRecord): java.util.Map[String,Any] = {\n+      mapAsJavaMap(record.getSchema.getFields.map( f => (f.name, unpack(record.get(f.name), f.schema) ) ).toMap)\n+    }\n+    \n+    def unpackArray(value: Any, schema: Schema): java.util.List[Any] = {\n+      bufferAsJavaList(value.asInstanceOf[java.util.List[Any]].map( v => unpack(v, schema)))\n+    }\n+\n+    def unpackUnion(value: Any): Any = value match {   \n+      case v:java.lang.Double => value.asInstanceOf[java.lang.Double]\n+      case v:java.lang.Float => value.asInstanceOf[java.lang.Float]  \n+      case v:java.lang.Integer => value.asInstanceOf[java.lang.Integer] \n+      case v:java.lang.Long => value.asInstanceOf[java.lang.Long] \n+      case v:java.lang.String => value.asInstanceOf[java.lang.String] ",
    "line": 56
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "I think that #1551 will address this issue with passing nulls from Java/Scala to Python. I'll update this thread once I've merged that PR.\n",
    "commit": "b8cc12b84d387072db5c882407a19d8a55840334",
    "createdAt": "2014-07-29T06:04:04Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.spark.examples.pythonconverters\n+\n+import org.apache.spark.api.python.Converter\n+import collection.JavaConversions._\n+\n+import org.apache.avro.generic.GenericRecord\n+import org.apache.avro.mapred.AvroKey\n+import org.apache.avro.mapreduce.AvroKeyInputFormat\n+import org.apache.avro.Schema.Field\n+import org.apache.avro.Schema\n+import org.apache.avro.Schema.Type._\n+\n+/* \n+  Example usage in pyspark:  \n+\n+    avroRdd = sc.newAPIHadoopFile(\"/tmp/data.avro\", \n+      \"org.apache.avro.mapreduce.AvroKeyInputFormat\", \n+      \"org.apache.avro.mapred.AvroKey\", \n+      \"org.apache.hadoop.io.NullWritable\",\n+      keyConverter=\"org.apache.spark.examples.pythonconverters.AvroGenericConverter\")\n+*/\n+class AvroGenericConverter extends Converter[AvroKey[GenericRecord], java.util.Map[String, Any]] {\n+  override def convert(obj: AvroKey[GenericRecord]): java.util.Map[String, Any] = {\n+\n+    def unpackRecord(record: GenericRecord): java.util.Map[String,Any] = {\n+      mapAsJavaMap(record.getSchema.getFields.map( f => (f.name, unpack(record.get(f.name), f.schema) ) ).toMap)\n+    }\n+    \n+    def unpackArray(value: Any, schema: Schema): java.util.List[Any] = {\n+      bufferAsJavaList(value.asInstanceOf[java.util.List[Any]].map( v => unpack(v, schema)))\n+    }\n+\n+    def unpackUnion(value: Any): Any = value match {   \n+      case v:java.lang.Double => value.asInstanceOf[java.lang.Double]\n+      case v:java.lang.Float => value.asInstanceOf[java.lang.Float]  \n+      case v:java.lang.Integer => value.asInstanceOf[java.lang.Integer] \n+      case v:java.lang.Long => value.asInstanceOf[java.lang.Long] \n+      case v:java.lang.String => value.asInstanceOf[java.lang.String] ",
    "line": 56
  }],
  "prId": 1536
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Unless I'm overlooking something, isn't this method essentially a no-op since it's a function Any => Any that only performs casts?\n",
    "commit": "b8cc12b84d387072db5c882407a19d8a55840334",
    "createdAt": "2014-07-29T06:52:15Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.spark.examples.pythonconverters\n+\n+import org.apache.spark.api.python.Converter\n+import collection.JavaConversions._\n+\n+import org.apache.avro.generic.GenericRecord\n+import org.apache.avro.mapred.AvroKey\n+import org.apache.avro.mapreduce.AvroKeyInputFormat\n+import org.apache.avro.Schema.Field\n+import org.apache.avro.Schema\n+import org.apache.avro.Schema.Type._\n+\n+/* \n+  Example usage in pyspark:  \n+\n+    avroRdd = sc.newAPIHadoopFile(\"/tmp/data.avro\", \n+      \"org.apache.avro.mapreduce.AvroKeyInputFormat\", \n+      \"org.apache.avro.mapred.AvroKey\", \n+      \"org.apache.hadoop.io.NullWritable\",\n+      keyConverter=\"org.apache.spark.examples.pythonconverters.AvroGenericConverter\")\n+*/\n+class AvroGenericConverter extends Converter[AvroKey[GenericRecord], java.util.Map[String, Any]] {\n+  override def convert(obj: AvroKey[GenericRecord]): java.util.Map[String, Any] = {\n+\n+    def unpackRecord(record: GenericRecord): java.util.Map[String,Any] = {\n+      mapAsJavaMap(record.getSchema.getFields.map( f => (f.name, unpack(record.get(f.name), f.schema) ) ).toMap)\n+    }\n+    \n+    def unpackArray(value: Any, schema: Schema): java.util.List[Any] = {\n+      bufferAsJavaList(value.asInstanceOf[java.util.List[Any]].map( v => unpack(v, schema)))\n+    }\n+\n+    def unpackUnion(value: Any): Any = value match {   ",
    "line": 51
  }],
  "prId": 1536
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "It seems like you can eliminate most of the cases in this `unpack` method since most of them don't need special handling.  It looks like three distinct cases are Records, which we want to unpack into Maps, arrays, in which we want to recursively unpack any Records, and primitive types, which we pass through unchanged.\n",
    "commit": "b8cc12b84d387072db5c882407a19d8a55840334",
    "createdAt": "2014-07-29T06:56:51Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.spark.examples.pythonconverters\n+\n+import org.apache.spark.api.python.Converter\n+import collection.JavaConversions._\n+\n+import org.apache.avro.generic.GenericRecord\n+import org.apache.avro.mapred.AvroKey\n+import org.apache.avro.mapreduce.AvroKeyInputFormat\n+import org.apache.avro.Schema.Field\n+import org.apache.avro.Schema\n+import org.apache.avro.Schema.Type._\n+\n+/* \n+  Example usage in pyspark:  \n+\n+    avroRdd = sc.newAPIHadoopFile(\"/tmp/data.avro\", \n+      \"org.apache.avro.mapreduce.AvroKeyInputFormat\", \n+      \"org.apache.avro.mapred.AvroKey\", \n+      \"org.apache.hadoop.io.NullWritable\",\n+      keyConverter=\"org.apache.spark.examples.pythonconverters.AvroGenericConverter\")\n+*/\n+class AvroGenericConverter extends Converter[AvroKey[GenericRecord], java.util.Map[String, Any]] {\n+  override def convert(obj: AvroKey[GenericRecord]): java.util.Map[String, Any] = {\n+\n+    def unpackRecord(record: GenericRecord): java.util.Map[String,Any] = {\n+      mapAsJavaMap(record.getSchema.getFields.map( f => (f.name, unpack(record.get(f.name), f.schema) ) ).toMap)\n+    }\n+    \n+    def unpackArray(value: Any, schema: Schema): java.util.List[Any] = {\n+      bufferAsJavaList(value.asInstanceOf[java.util.List[Any]].map( v => unpack(v, schema)))\n+    }\n+\n+    def unpackUnion(value: Any): Any = value match {   \n+      case v:java.lang.Double => value.asInstanceOf[java.lang.Double]\n+      case v:java.lang.Float => value.asInstanceOf[java.lang.Float]  \n+      case v:java.lang.Integer => value.asInstanceOf[java.lang.Integer] \n+      case v:java.lang.Long => value.asInstanceOf[java.lang.Long] \n+      case v:java.lang.String => value.asInstanceOf[java.lang.String] \n+      case _ => \"\"\n+    }\n+\n+    def unpack(value: Any, schema: Schema): Any = schema.getType match {",
    "line": 60
  }],
  "prId": 1536
}]