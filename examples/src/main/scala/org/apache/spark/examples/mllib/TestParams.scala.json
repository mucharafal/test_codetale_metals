[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "The name `TestParams` may be confusing because it is not used in test. We could call it `AbstractParams`.\n",
    "commit": "cff873fb9be9d30312c17e4d322e4dc36e0e58de",
    "createdAt": "2014-10-08T00:54:34Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+/**\n+ * Abstract class for parameter case classes.\n+ * This overrides the [[toString]] method to print all case class fields by name and value.\n+ * @tparam T  Concrete parameter class.\n+ */\n+abstract class TestParams[T: scala.reflect.runtime.universe.TypeTag] {"
  }],
  "prId": 2700
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Shall we move this import outside class closure and then use only `TypeTag` in line 25.\n",
    "commit": "cff873fb9be9d30312c17e4d322e4dc36e0e58de",
    "createdAt": "2014-10-08T00:54:36Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+/**\n+ * Abstract class for parameter case classes.\n+ * This overrides the [[toString]] method to print all case class fields by name and value.\n+ * @tparam T  Concrete parameter class.\n+ */\n+abstract class TestParams[T: scala.reflect.runtime.universe.TypeTag] {\n+\n+  import scala.reflect.runtime.universe._"
  }],
  "prId": 2700
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "This may not look pretty in the WebUI:\n\n![screen shot 2014-10-07 at 5 36 36 pm](https://cloud.githubusercontent.com/assets/829644/4552499/5d241b2c-4e85-11e4-8934-0c162038429b.png)\n\nWe can output in a JSON-like format:\n\n```\n{\n  maxIter: 10,\n  regParm: 1.0\n}\n```\n",
    "commit": "cff873fb9be9d30312c17e4d322e4dc36e0e58de",
    "createdAt": "2014-10-08T00:54:39Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+/**\n+ * Abstract class for parameter case classes.\n+ * This overrides the [[toString]] method to print all case class fields by name and value.\n+ * @tparam T  Concrete parameter class.\n+ */\n+abstract class TestParams[T: scala.reflect.runtime.universe.TypeTag] {\n+\n+  import scala.reflect.runtime.universe._\n+\n+  private def tag: TypeTag[T] = typeTag[T]\n+\n+  /**\n+   * Finds all case class fields in concrete class instance, and outputs them one per line:\n+   * \"[field name]:\\t[field value]\\n\""
  }],
  "prId": 2700
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "use `mkString(\"{\", \",\", \"}\")`\n",
    "commit": "cff873fb9be9d30312c17e4d322e4dc36e0e58de",
    "createdAt": "2014-10-08T00:54:45Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+/**\n+ * Abstract class for parameter case classes.\n+ * This overrides the [[toString]] method to print all case class fields by name and value.\n+ * @tparam T  Concrete parameter class.\n+ */\n+abstract class TestParams[T: scala.reflect.runtime.universe.TypeTag] {\n+\n+  import scala.reflect.runtime.universe._\n+\n+  private def tag: TypeTag[T] = typeTag[T]\n+\n+  /**\n+   * Finds all case class fields in concrete class instance, and outputs them one per line:\n+   * \"[field name]:\\t[field value]\\n\"\n+   */\n+  override def toString: String = {\n+    val tpe = tag.tpe\n+    val allAccessors = tpe.declarations.collect {\n+      case m: MethodSymbol if m.isCaseAccessor => m\n+    }\n+    val mirror = runtimeMirror(getClass.getClassLoader)\n+    val instanceMirror = mirror.reflect(this)\n+    allAccessors.map { f =>\n+      val paramName = f.name.toString\n+      val fieldMirror = instanceMirror.reflectField(f)\n+      val paramValue = fieldMirror.get\n+      s\"$paramName:\\t$paramValue\\n\"\n+    }.foldLeft(\"\")(_ + _)"
  }],
  "prId": 2700
}]