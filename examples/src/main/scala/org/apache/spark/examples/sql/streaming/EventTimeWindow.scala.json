[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "i dont like it that the user has to enter data in a particular format. that make this clumsy to use. \n\nhow about this. lets add an option in the socket source, that attaches the receiving time as a column in the data. so the returned schema would be (time, line) if that option is specified. then we can very easily write a simple sliding window word count example using that.\nwhat do you think?\n",
    "commit": "8f97b66f55ececd91434a3f9a3b28dd6c5412d46",
    "createdAt": "2016-06-29T08:49:59Z",
    "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.sql.streaming\n+\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types.{DoubleType, TimestampType}\n+\n+/**\n+ * Computes the average signal from IoT device readings over a sliding window of\n+ * configurable duration. The readings are received over the network and must be\n+ * UTF8-encoded and separated by '\\n'.\n+ *\n+ * A single reading should take the format\n+ * <device name (string)>, <reading (double)>, <time (timestamp)>\n+ *\n+ * Usage: EventTimeWindow <hostname> <port> <window duration>\n+ *   <slide duration> <checkpoint dir>\n+ * <hostname> and <port> describe the TCP server that Structured Streaming would connect to\n+ * receive data.\n+ * <window duration> gives the size of window, specified as integer number of seconds, minutes,\n+ * or days, e.g. \"1 minute\", \"2 seconds\"\n+ * <slide duration> gives the amount of time successive windows are offset from one another,\n+ * given in the same units as above\n+ * (<window duration> and <slide duration> must be enclosed by quotes to ensure that\n+ * they are processed as individual arguments)\n+ *\n+ * To run this on your local machine, you need to first run a Netcat server\n+ *    `$ nc -lk 9999`\n+ * and then run the example\n+ *    `$ bin/run-example sql.streaming.EventTimeWindow\n+ *    localhost 9999 <window duration> <slide duration> <checkpoint dir>`\n+ *\n+ * Type device readings in the format given above into Netcat.\n+ *\n+ * An example sequence of device readings:\n+ * dev0,7.0,2015-03-18T12:00:00\n+ * dev1,8.0,2015-03-18T12:00:10\n+ * dev0,5.0,2015-03-18T12:00:20\n+ * dev1,3.0,2015-03-18T12:00:30"
  }],
  "prId": 13957
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "as i said offline this is very complex example. rather just do streaming windowed word count. \n",
    "commit": "8f97b66f55ececd91434a3f9a3b28dd6c5412d46",
    "createdAt": "2016-06-30T00:42:17Z",
    "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.sql.streaming\n+\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.types.{DoubleType, TimestampType}\n+\n+/**\n+ * Computes the average signal from IoT device readings over a sliding window of\n+ * configurable duration. The readings are received over the network and must be\n+ * UTF8-encoded and separated by '\\n'.\n+ *\n+ * A single reading should take the format\n+ * <device name (string)>, <reading (double)>\n+ *\n+ * Usage: EventTimeWindow <hostname> <port> <window duration>\n+ *   <slide duration>\n+ * <hostname> and <port> describe the TCP server that Structured Streaming would connect to\n+ * receive data.\n+ * <window duration> gives the size of window, specified as integer number of seconds, minutes,\n+ * or days, e.g. \"1 minute\", \"2 seconds\"\n+ * <slide duration> gives the amount of time successive windows are offset from one another,\n+ * given in the same units as above\n+ * (<window duration> and <slide duration> must be enclosed by quotes to ensure that\n+ * they are processed as individual arguments)\n+ *\n+ * To run this on your local machine, you need to first run a Netcat server\n+ *    `$ nc -lk 9999`\n+ * and then run the example\n+ *    `$ bin/run-example sql.streaming.EventTimeWindow\n+ *    localhost 9999 <window duration> <slide duration>`\n+ *\n+ * Type device readings in the format given above into Netcat.\n+ *\n+ * An example sequence of device readings:\n+ * dev0,7.0\n+ * dev1,8.0\n+ * dev0,5.0\n+ * dev1,3.0\n+ */\n+object EventTimeWindow {\n+\n+  def main(args: Array[String]) {\n+    if (args.length < 4) {\n+      System.err.println(\"Usage: EventTimeWindow <hostname> <port> <window duration>\" +\n+        \" <slide duration>\")\n+      System.exit(1)\n+    }\n+\n+    val host = args(0)\n+    val port = args(1).toInt\n+    val windowSize = args(2)\n+    val slideSize = args(3)\n+\n+    val spark = SparkSession\n+      .builder\n+      .appName(\"EventTimeWindow\")\n+      .getOrCreate()\n+\n+    // Create DataFrame representing the stream of input readings from connection to host:port\n+    val lines = spark.readStream\n+      .format(\"socket\")\n+      .option(\"host\", host)\n+      .option(\"port\", port)\n+      .option(\"includeTimestamp\", true)\n+      .load()\n+\n+    // Split the readings into their individual components\n+    val splitLines = lines.select(\n+      split(lines.col(\"value\"), \",\").alias(\"pieces\"),"
  }],
  "prId": 13957
}]