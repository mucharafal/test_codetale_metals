[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "remove it\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:02:41Z",
    "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+// $example on$"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "ditto\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:02:47Z",
    "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+// $example on$\n+import org.apache.spark.{SparkConf, SparkContext}\n+// $example off$"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "def main(args: Array[String]): Unit = {\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:03:06Z",
    "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+// $example on$\n+import org.apache.spark.{SparkConf, SparkContext}\n+// $example off$\n+\n+object StratifiedSamplingExample {\n+\n+  def main(args: Array[String]) {"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "remove it\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:03:21Z",
    "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+// $example on$\n+import org.apache.spark.{SparkConf, SparkContext}\n+// $example off$\n+\n+object StratifiedSamplingExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"StratifiedSamplingExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    // an RDD[(K, V)] of any key value pairs\n+    val data = sc.parallelize(\n+      Seq((1, 'a'), (1, 'b'), (2, 'c'), (2, 'd'), (2, 'e'), (3, 'f')))\n+\n+    // specify the exact fraction desired from each key\n+    val fractions = Map(1 -> 0.1, 2 -> 0.6, 3 -> 0.3)\n+\n+    // Get an exact sample from each stratum\n+    val approxSample = data.sampleByKey(withReplacement = false, fractions)\n+    val exactSample = data.sampleByKeyExact(withReplacement = false, fractions)\n+"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "add a println() here.\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:03:45Z",
    "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+// $example on$\n+import org.apache.spark.{SparkConf, SparkContext}\n+// $example off$\n+\n+object StratifiedSamplingExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"StratifiedSamplingExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    // an RDD[(K, V)] of any key value pairs\n+    val data = sc.parallelize(\n+      Seq((1, 'a'), (1, 'b'), (2, 'c'), (2, 'd'), (2, 'e'), (3, 'f')))\n+\n+    // specify the exact fraction desired from each key\n+    val fractions = Map(1 -> 0.1, 2 -> 0.6, 3 -> 0.3)\n+\n+    // Get an exact sample from each stratum\n+    val approxSample = data.sampleByKey(withReplacement = false, fractions)\n+    val exactSample = data.sampleByKeyExact(withReplacement = false, fractions)\n+\n+    // $example off$\n+\n+    approxSample.foreach(println)"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "It would be useful to print a header to say which one is approx and which is exact.\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-16T23:43:01Z",
    "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+\n+object StratifiedSamplingExample {\n+\n+  def main(args: Array[String]): Unit = {\n+\n+    val conf = new SparkConf().setAppName(\"StratifiedSamplingExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    // an RDD[(K, V)] of any key value pairs\n+    val data = sc.parallelize(\n+      Seq((1, 'a'), (1, 'b'), (2, 'c'), (2, 'd'), (2, 'e'), (3, 'f')))\n+\n+    // specify the exact fraction desired from each key\n+    val fractions = Map(1 -> 0.1, 2 -> 0.6, 3 -> 0.3)\n+\n+    // Get an exact sample from each stratum\n+    val approxSample = data.sampleByKey(withReplacement = false, fractions)\n+    val exactSample = data.sampleByKeyExact(withReplacement = false, fractions)\n+    // $example off$\n+\n+    approxSample.foreach(println)"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "(minor) To show that the sample size is exact. We can print its size.\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-16T23:43:26Z",
    "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+\n+object StratifiedSamplingExample {\n+\n+  def main(args: Array[String]): Unit = {\n+\n+    val conf = new SparkConf().setAppName(\"StratifiedSamplingExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    // an RDD[(K, V)] of any key value pairs\n+    val data = sc.parallelize(\n+      Seq((1, 'a'), (1, 'b'), (2, 'c'), (2, 'd'), (2, 'e'), (3, 'f')))\n+\n+    // specify the exact fraction desired from each key\n+    val fractions = Map(1 -> 0.1, 2 -> 0.6, 3 -> 0.3)\n+\n+    // Get an exact sample from each stratum\n+    val approxSample = data.sampleByKey(withReplacement = false, fractions)\n+    val exactSample = data.sampleByKeyExact(withReplacement = false, fractions)\n+    // $example off$\n+\n+    approxSample.foreach(println)\n+    println()\n+    exactSample.foreach(println)"
  }],
  "prId": 11108
}]