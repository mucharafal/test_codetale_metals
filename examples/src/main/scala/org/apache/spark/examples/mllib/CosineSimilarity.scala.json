[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "separate this import from spark imports and move it before spark imports\n",
    "commit": "8f20b825ddc3291982801e79517872cca61304b5",
    "createdAt": "2014-10-07T22:19:35Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.linalg.distributed.{MatrixEntry, RowMatrix}\n+import org.apache.spark.{SparkConf, SparkContext}\n+import scopt.OptionParser"
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "Moved above spark imports and separated.\n",
    "commit": "8f20b825ddc3291982801e79517872cca61304b5",
    "createdAt": "2014-10-07T22:35:57Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.linalg.distributed.{MatrixEntry, RowMatrix}\n+import org.apache.spark.{SparkConf, SparkContext}\n+import scopt.OptionParser"
  }],
  "prId": 2622
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`org.apache.spark.examples.mllib.CosineSimilarity` -> `mllib.CosineSimilarity` (we don't need `org.apache.spark.examples` with `run-example`)\n",
    "commit": "8f20b825ddc3291982801e79517872cca61304b5",
    "createdAt": "2014-10-07T22:19:37Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.linalg.distributed.{MatrixEntry, RowMatrix}\n+import org.apache.spark.{SparkConf, SparkContext}\n+import scopt.OptionParser\n+\n+/**\n+ * Compute the similar columns of a matrix, using cosine similarity.\n+ *\n+ * The input matrix must be stored in row-oriented dense format, one line per row with its entries\n+ * separated by space. For example,\n+ * {{{\n+ * 0.5 1.0\n+ * 2.0 3.0\n+ * 4.0 5.0\n+ * }}}\n+ * represents a 3-by-2 matrix, whose first row is (0.5, 1.0).\n+ *\n+ * Example invocation:\n+ *\n+ * bin/run-example org.apache.spark.examples.mllib.CosineSimilarity \\"
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "Changed to just mllib.CosineSimilarity\n",
    "commit": "8f20b825ddc3291982801e79517872cca61304b5",
    "createdAt": "2014-10-07T22:36:10Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.linalg.distributed.{MatrixEntry, RowMatrix}\n+import org.apache.spark.{SparkConf, SparkContext}\n+import scopt.OptionParser\n+\n+/**\n+ * Compute the similar columns of a matrix, using cosine similarity.\n+ *\n+ * The input matrix must be stored in row-oriented dense format, one line per row with its entries\n+ * separated by space. For example,\n+ * {{{\n+ * 0.5 1.0\n+ * 2.0 3.0\n+ * 4.0 5.0\n+ * }}}\n+ * represents a 3-by-2 matrix, whose first row is (0.5, 1.0).\n+ *\n+ * Example invocation:\n+ *\n+ * bin/run-example org.apache.spark.examples.mllib.CosineSimilarity \\"
  }],
  "prId": 2622
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`input` should be a positional parameter. (See BinaryClassification.scala for example)\n",
    "commit": "8f20b825ddc3291982801e79517872cca61304b5",
    "createdAt": "2014-10-07T22:19:39Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.linalg.distributed.{MatrixEntry, RowMatrix}\n+import org.apache.spark.{SparkConf, SparkContext}\n+import scopt.OptionParser\n+\n+/**\n+ * Compute the similar columns of a matrix, using cosine similarity.\n+ *\n+ * The input matrix must be stored in row-oriented dense format, one line per row with its entries\n+ * separated by space. For example,\n+ * {{{\n+ * 0.5 1.0\n+ * 2.0 3.0\n+ * 4.0 5.0\n+ * }}}\n+ * represents a 3-by-2 matrix, whose first row is (0.5, 1.0).\n+ *\n+ * Example invocation:\n+ *\n+ * bin/run-example org.apache.spark.examples.mllib.CosineSimilarity \\\n+ * --inputFile data/mllib/sample_svm_data.txt --threshold 0.1\n+ */\n+object CosineSimilarity {\n+  case class Params(inputFile: String = null, threshold: Double = 0.1)\n+\n+  def main(args: Array[String]) {\n+    val defaultParams = Params()\n+\n+    val parser = new OptionParser[Params](\"CosineSimilarity\") {\n+      head(\"CosineSimilarity: an example app.\")\n+      opt[String](\"inputFile\")"
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "Turn `input` into positional parameter\n",
    "commit": "8f20b825ddc3291982801e79517872cca61304b5",
    "createdAt": "2014-10-07T22:36:22Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.linalg.distributed.{MatrixEntry, RowMatrix}\n+import org.apache.spark.{SparkConf, SparkContext}\n+import scopt.OptionParser\n+\n+/**\n+ * Compute the similar columns of a matrix, using cosine similarity.\n+ *\n+ * The input matrix must be stored in row-oriented dense format, one line per row with its entries\n+ * separated by space. For example,\n+ * {{{\n+ * 0.5 1.0\n+ * 2.0 3.0\n+ * 4.0 5.0\n+ * }}}\n+ * represents a 3-by-2 matrix, whose first row is (0.5, 1.0).\n+ *\n+ * Example invocation:\n+ *\n+ * bin/run-example org.apache.spark.examples.mllib.CosineSimilarity \\\n+ * --inputFile data/mllib/sample_svm_data.txt --threshold 0.1\n+ */\n+object CosineSimilarity {\n+  case class Params(inputFile: String = null, threshold: Double = 0.1)\n+\n+  def main(args: Array[String]) {\n+    val defaultParams = Params()\n+\n+    val parser = new OptionParser[Params](\"CosineSimilarity\") {\n+      head(\"CosineSimilarity: an example app.\")\n+      opt[String](\"inputFile\")"
  }],
  "prId": 2622
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Shall we use LIBSVM format? Please cache `rows`.\n",
    "commit": "8f20b825ddc3291982801e79517872cca61304b5",
    "createdAt": "2014-10-07T22:19:42Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.linalg.distributed.{MatrixEntry, RowMatrix}\n+import org.apache.spark.{SparkConf, SparkContext}\n+import scopt.OptionParser\n+\n+/**\n+ * Compute the similar columns of a matrix, using cosine similarity.\n+ *\n+ * The input matrix must be stored in row-oriented dense format, one line per row with its entries\n+ * separated by space. For example,\n+ * {{{\n+ * 0.5 1.0\n+ * 2.0 3.0\n+ * 4.0 5.0\n+ * }}}\n+ * represents a 3-by-2 matrix, whose first row is (0.5, 1.0).\n+ *\n+ * Example invocation:\n+ *\n+ * bin/run-example org.apache.spark.examples.mllib.CosineSimilarity \\\n+ * --inputFile data/mllib/sample_svm_data.txt --threshold 0.1\n+ */\n+object CosineSimilarity {\n+  case class Params(inputFile: String = null, threshold: Double = 0.1)\n+\n+  def main(args: Array[String]) {\n+    val defaultParams = Params()\n+\n+    val parser = new OptionParser[Params](\"CosineSimilarity\") {\n+      head(\"CosineSimilarity: an example app.\")\n+      opt[String](\"inputFile\")\n+        .required()\n+        .text(s\"input file, one row per line, space-separated\")\n+        .action((x, c) => c.copy(inputFile = x))\n+      opt[Double](\"threshold\")\n+        .required()\n+        .text(s\"threshold similarity: to tradeoff computation vs quality estimate\")\n+        .action((x, c) => c.copy(threshold = x))\n+      note(\n+        \"\"\"\n+          |For example, the following command runs this app on a dataset:\n+          |\n+          | ./bin/spark-submit  --class org.apache.spark.examples.mllib.CosineSimilarity \\\n+          | examplesjar.jar \\\n+          | --inputFile data/mllib/sample_svm_data.txt --threshold 0.1\n+        \"\"\".stripMargin)\n+    }\n+\n+    parser.parse(args, defaultParams).map { params =>\n+      run(params)\n+    } getOrElse {\n+      System.exit(1)\n+    }\n+  }\n+\n+  def run(params: Params) {\n+    val conf = new SparkConf().setAppName(\"CosineSimilarity\")\n+    val sc = new SparkContext(conf)\n+\n+    // Load and parse the data file.\n+    val rows = sc.textFile(params.inputFile).map { line =>",
    "line": 82
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "No that doesn't make sense since the input is an arbitrary matrix but libsvm comes with labels. cached rows.\n",
    "commit": "8f20b825ddc3291982801e79517872cca61304b5",
    "createdAt": "2014-10-07T22:36:54Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.linalg.distributed.{MatrixEntry, RowMatrix}\n+import org.apache.spark.{SparkConf, SparkContext}\n+import scopt.OptionParser\n+\n+/**\n+ * Compute the similar columns of a matrix, using cosine similarity.\n+ *\n+ * The input matrix must be stored in row-oriented dense format, one line per row with its entries\n+ * separated by space. For example,\n+ * {{{\n+ * 0.5 1.0\n+ * 2.0 3.0\n+ * 4.0 5.0\n+ * }}}\n+ * represents a 3-by-2 matrix, whose first row is (0.5, 1.0).\n+ *\n+ * Example invocation:\n+ *\n+ * bin/run-example org.apache.spark.examples.mllib.CosineSimilarity \\\n+ * --inputFile data/mllib/sample_svm_data.txt --threshold 0.1\n+ */\n+object CosineSimilarity {\n+  case class Params(inputFile: String = null, threshold: Double = 0.1)\n+\n+  def main(args: Array[String]) {\n+    val defaultParams = Params()\n+\n+    val parser = new OptionParser[Params](\"CosineSimilarity\") {\n+      head(\"CosineSimilarity: an example app.\")\n+      opt[String](\"inputFile\")\n+        .required()\n+        .text(s\"input file, one row per line, space-separated\")\n+        .action((x, c) => c.copy(inputFile = x))\n+      opt[Double](\"threshold\")\n+        .required()\n+        .text(s\"threshold similarity: to tradeoff computation vs quality estimate\")\n+        .action((x, c) => c.copy(threshold = x))\n+      note(\n+        \"\"\"\n+          |For example, the following command runs this app on a dataset:\n+          |\n+          | ./bin/spark-submit  --class org.apache.spark.examples.mllib.CosineSimilarity \\\n+          | examplesjar.jar \\\n+          | --inputFile data/mllib/sample_svm_data.txt --threshold 0.1\n+        \"\"\".stripMargin)\n+    }\n+\n+    parser.parse(args, defaultParams).map { params =>\n+      run(params)\n+    } getOrElse {\n+      System.exit(1)\n+    }\n+  }\n+\n+  def run(params: Params) {\n+    val conf = new SparkConf().setAppName(\"CosineSimilarity\")\n+    val sc = new SparkContext(conf)\n+\n+    // Load and parse the data file.\n+    val rows = sc.textFile(params.inputFile).map { line =>",
    "line": 82
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "You're right.\n",
    "commit": "8f20b825ddc3291982801e79517872cca61304b5",
    "createdAt": "2014-10-07T22:46:58Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.linalg.distributed.{MatrixEntry, RowMatrix}\n+import org.apache.spark.{SparkConf, SparkContext}\n+import scopt.OptionParser\n+\n+/**\n+ * Compute the similar columns of a matrix, using cosine similarity.\n+ *\n+ * The input matrix must be stored in row-oriented dense format, one line per row with its entries\n+ * separated by space. For example,\n+ * {{{\n+ * 0.5 1.0\n+ * 2.0 3.0\n+ * 4.0 5.0\n+ * }}}\n+ * represents a 3-by-2 matrix, whose first row is (0.5, 1.0).\n+ *\n+ * Example invocation:\n+ *\n+ * bin/run-example org.apache.spark.examples.mllib.CosineSimilarity \\\n+ * --inputFile data/mllib/sample_svm_data.txt --threshold 0.1\n+ */\n+object CosineSimilarity {\n+  case class Params(inputFile: String = null, threshold: Double = 0.1)\n+\n+  def main(args: Array[String]) {\n+    val defaultParams = Params()\n+\n+    val parser = new OptionParser[Params](\"CosineSimilarity\") {\n+      head(\"CosineSimilarity: an example app.\")\n+      opt[String](\"inputFile\")\n+        .required()\n+        .text(s\"input file, one row per line, space-separated\")\n+        .action((x, c) => c.copy(inputFile = x))\n+      opt[Double](\"threshold\")\n+        .required()\n+        .text(s\"threshold similarity: to tradeoff computation vs quality estimate\")\n+        .action((x, c) => c.copy(threshold = x))\n+      note(\n+        \"\"\"\n+          |For example, the following command runs this app on a dataset:\n+          |\n+          | ./bin/spark-submit  --class org.apache.spark.examples.mllib.CosineSimilarity \\\n+          | examplesjar.jar \\\n+          | --inputFile data/mllib/sample_svm_data.txt --threshold 0.1\n+        \"\"\".stripMargin)\n+    }\n+\n+    parser.parse(args, defaultParams).map { params =>\n+      run(params)\n+    } getOrElse {\n+      System.exit(1)\n+    }\n+  }\n+\n+  def run(params: Params) {\n+    val conf = new SparkConf().setAppName(\"CosineSimilarity\")\n+    val sc = new SparkContext(conf)\n+\n+    // Load and parse the data file.\n+    val rows = sc.textFile(params.inputFile).map { line =>",
    "line": 82
  }],
  "prId": 2622
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "This is my bad. Let's make this block easier to read.\n\n```\nval exactEntries = exact.entries.map { case MatrixEntry(i, j, u) => ((i, j), u) }\nval approxEntries = approx.entries.map { case MatrixEntry(i, j, v) => ((i, j), v) }\nval MAE = exactEntries.leftOuterJoin(approxEntries).values.map {\n  case (u, Some(v)) =>\n    math.abs(u - v)\n  case (u, None) =>\n    math.abs(u)\n}.mean()\n```\n",
    "commit": "8f20b825ddc3291982801e79517872cca61304b5",
    "createdAt": "2014-10-07T22:24:15Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.linalg.distributed.{MatrixEntry, RowMatrix}\n+import org.apache.spark.{SparkConf, SparkContext}\n+import scopt.OptionParser\n+\n+/**\n+ * Compute the similar columns of a matrix, using cosine similarity.\n+ *\n+ * The input matrix must be stored in row-oriented dense format, one line per row with its entries\n+ * separated by space. For example,\n+ * {{{\n+ * 0.5 1.0\n+ * 2.0 3.0\n+ * 4.0 5.0\n+ * }}}\n+ * represents a 3-by-2 matrix, whose first row is (0.5, 1.0).\n+ *\n+ * Example invocation:\n+ *\n+ * bin/run-example org.apache.spark.examples.mllib.CosineSimilarity \\\n+ * --inputFile data/mllib/sample_svm_data.txt --threshold 0.1\n+ */\n+object CosineSimilarity {\n+  case class Params(inputFile: String = null, threshold: Double = 0.1)\n+\n+  def main(args: Array[String]) {\n+    val defaultParams = Params()\n+\n+    val parser = new OptionParser[Params](\"CosineSimilarity\") {\n+      head(\"CosineSimilarity: an example app.\")\n+      opt[String](\"inputFile\")\n+        .required()\n+        .text(s\"input file, one row per line, space-separated\")\n+        .action((x, c) => c.copy(inputFile = x))\n+      opt[Double](\"threshold\")\n+        .required()\n+        .text(s\"threshold similarity: to tradeoff computation vs quality estimate\")\n+        .action((x, c) => c.copy(threshold = x))\n+      note(\n+        \"\"\"\n+          |For example, the following command runs this app on a dataset:\n+          |\n+          | ./bin/spark-submit  --class org.apache.spark.examples.mllib.CosineSimilarity \\\n+          | examplesjar.jar \\\n+          | --inputFile data/mllib/sample_svm_data.txt --threshold 0.1\n+        \"\"\".stripMargin)\n+    }\n+\n+    parser.parse(args, defaultParams).map { params =>\n+      run(params)\n+    } getOrElse {\n+      System.exit(1)\n+    }\n+  }\n+\n+  def run(params: Params) {\n+    val conf = new SparkConf().setAppName(\"CosineSimilarity\")\n+    val sc = new SparkContext(conf)\n+\n+    // Load and parse the data file.\n+    val rows = sc.textFile(params.inputFile).map { line =>\n+      val values = line.split(' ').map(_.toDouble)\n+      Vectors.dense(values)\n+    }\n+    val mat = new RowMatrix(rows)\n+\n+    // Compute similar columns perfectly, with brute force.\n+    val exact = mat.columnSimilarities()\n+\n+    // Compute similar columns with estimation using DIMSUM\n+    val approx = mat.columnSimilarities(params.threshold)\n+\n+    val MAE = exact.entries.map { case MatrixEntry(i, j, u) =>"
  }, {
    "author": {
      "login": "rezazadeh"
    },
    "body": "Changed to your suggestion, thanks.\n",
    "commit": "8f20b825ddc3291982801e79517872cca61304b5",
    "createdAt": "2014-10-07T22:37:06Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkContext._\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.linalg.distributed.{MatrixEntry, RowMatrix}\n+import org.apache.spark.{SparkConf, SparkContext}\n+import scopt.OptionParser\n+\n+/**\n+ * Compute the similar columns of a matrix, using cosine similarity.\n+ *\n+ * The input matrix must be stored in row-oriented dense format, one line per row with its entries\n+ * separated by space. For example,\n+ * {{{\n+ * 0.5 1.0\n+ * 2.0 3.0\n+ * 4.0 5.0\n+ * }}}\n+ * represents a 3-by-2 matrix, whose first row is (0.5, 1.0).\n+ *\n+ * Example invocation:\n+ *\n+ * bin/run-example org.apache.spark.examples.mllib.CosineSimilarity \\\n+ * --inputFile data/mllib/sample_svm_data.txt --threshold 0.1\n+ */\n+object CosineSimilarity {\n+  case class Params(inputFile: String = null, threshold: Double = 0.1)\n+\n+  def main(args: Array[String]) {\n+    val defaultParams = Params()\n+\n+    val parser = new OptionParser[Params](\"CosineSimilarity\") {\n+      head(\"CosineSimilarity: an example app.\")\n+      opt[String](\"inputFile\")\n+        .required()\n+        .text(s\"input file, one row per line, space-separated\")\n+        .action((x, c) => c.copy(inputFile = x))\n+      opt[Double](\"threshold\")\n+        .required()\n+        .text(s\"threshold similarity: to tradeoff computation vs quality estimate\")\n+        .action((x, c) => c.copy(threshold = x))\n+      note(\n+        \"\"\"\n+          |For example, the following command runs this app on a dataset:\n+          |\n+          | ./bin/spark-submit  --class org.apache.spark.examples.mllib.CosineSimilarity \\\n+          | examplesjar.jar \\\n+          | --inputFile data/mllib/sample_svm_data.txt --threshold 0.1\n+        \"\"\".stripMargin)\n+    }\n+\n+    parser.parse(args, defaultParams).map { params =>\n+      run(params)\n+    } getOrElse {\n+      System.exit(1)\n+    }\n+  }\n+\n+  def run(params: Params) {\n+    val conf = new SparkConf().setAppName(\"CosineSimilarity\")\n+    val sc = new SparkContext(conf)\n+\n+    // Load and parse the data file.\n+    val rows = sc.textFile(params.inputFile).map { line =>\n+      val values = line.split(' ').map(_.toDouble)\n+      Vectors.dense(values)\n+    }\n+    val mat = new RowMatrix(rows)\n+\n+    // Compute similar columns perfectly, with brute force.\n+    val exact = mat.columnSimilarities()\n+\n+    // Compute similar columns with estimation using DIMSUM\n+    val approx = mat.columnSimilarities(params.threshold)\n+\n+    val MAE = exact.entries.map { case MatrixEntry(i, j, u) =>"
  }],
  "prId": 2622
}]