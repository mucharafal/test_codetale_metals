[{
  "comments": [{
    "author": {
      "login": "BrianLondon"
    },
    "body": "I believe this change will resolve SPARK-12786.\n",
    "commit": "c31be3524f9de9b82d8ea475d7d67c38641a4e66",
    "createdAt": "2016-01-15T15:25:44Z",
    "diffHunk": "@@ -108,9 +107,13 @@ object FeederActor {\n     }\n     val Seq(host, port) = args.toSeq\n \n-    val conf = new SparkConf\n-    val actorSystem = AkkaUtils.createActorSystem(\"test\", host, port.toInt, conf = conf,\n-      securityManager = new SecurityManager(conf))._1\n+    val akkaConf = ConfigFactory.parseString(\n+      s\"\"\"akka.actor.provider = \"akka.remote.RemoteActorRefProvider\"",
    "line": 35
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "@zsxwing Could you also tag that JIRA in this PR and resolve it when this is closed. \n",
    "commit": "c31be3524f9de9b82d8ea475d7d67c38641a4e66",
    "createdAt": "2016-01-18T20:12:55Z",
    "diffHunk": "@@ -108,9 +107,13 @@ object FeederActor {\n     }\n     val Seq(host, port) = args.toSeq\n \n-    val conf = new SparkConf\n-    val actorSystem = AkkaUtils.createActorSystem(\"test\", host, port.toInt, conf = conf,\n-      securityManager = new SecurityManager(conf))._1\n+    val akkaConf = ConfigFactory.parseString(\n+      s\"\"\"akka.actor.provider = \"akka.remote.RemoteActorRefProvider\"",
    "line": 35
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "Updated the title\n",
    "commit": "c31be3524f9de9b82d8ea475d7d67c38641a4e66",
    "createdAt": "2016-01-18T22:08:32Z",
    "diffHunk": "@@ -108,9 +107,13 @@ object FeederActor {\n     }\n     val Seq(host, port) = args.toSeq\n \n-    val conf = new SparkConf\n-    val actorSystem = AkkaUtils.createActorSystem(\"test\", host, port.toInt, conf = conf,\n-      securityManager = new SecurityManager(conf))._1\n+    val akkaConf = ConfigFactory.parseString(\n+      s\"\"\"akka.actor.provider = \"akka.remote.RemoteActorRefProvider\"",
    "line": 35
  }],
  "prId": 10744
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Please use the standard configurations that is recommended by Akka 2.3.0 for remoting. \nhttp://doc.akka.io/docs/akka/2.3.0/scala/remoting.html\n",
    "commit": "c31be3524f9de9b82d8ea475d7d67c38641a4e66",
    "createdAt": "2016-01-18T19:50:59Z",
    "diffHunk": "@@ -108,9 +107,13 @@ object FeederActor {\n     }\n     val Seq(host, port) = args.toSeq\n \n-    val conf = new SparkConf\n-    val actorSystem = AkkaUtils.createActorSystem(\"test\", host, port.toInt, conf = conf,\n-      securityManager = new SecurityManager(conf))._1\n+    val akkaConf = ConfigFactory.parseString(\n+      s\"\"\"akka.actor.provider = \"akka.remote.RemoteActorRefProvider\"\n+         |akka.remote.netty.tcp.transport-class = \"akka.remote.transport.netty.NettyTransport\""
  }],
  "prId": 10744
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "use standard confs\n",
    "commit": "c31be3524f9de9b82d8ea475d7d67c38641a4e66",
    "createdAt": "2016-01-18T19:52:17Z",
    "diffHunk": "@@ -150,16 +153,27 @@ object ActorWordCount {\n      *\n      * An important point to note:\n      * Since Actor may exist outside the spark framework, It is thus user's responsibility\n-     * to ensure the type safety, i.e type of data received and InputDstream\n+     * to ensure the type safety, i.e type of data received and InputDStream\n      * should be same.\n      *\n      * For example: Both actorStream and SampleActorReceiver are parameterized\n      * to same type to ensure type safety.\n      */\n+    def actorSystemCreator(): ActorSystem = {\n+      val uniqueSystemName = s\"actor-wordcount-${TaskContext.get().taskAttemptId()}\"\n+      val akkaConf = ConfigFactory.parseString(\n+        s\"\"\"akka.actor.provider = \"akka.remote.RemoteActorRefProvider\"\n+           |akka.remote.netty.tcp.transport-class = \"akka.remote.transport.netty.NettyTransport\""
  }],
  "prId": 10744
}]