[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Change the two lines into \n\n``` Scala\n// summary of the test including the p-value, degrees of freedom, test statistic, the method\n// used, and the null hypothesis.\nprintln(goodnessOfFitTestResult)\n\n```\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:12:25Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+// $example on$\n+import org.apache.spark.mllib.linalg._\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.mllib.stat.test.ChiSqTestResult\n+import org.apache.spark.rdd.RDD\n+// $example off$\n+\n+object HypothesisTestingExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"HypothesisTestingExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    // a vector composed of the frequencies of events\n+    val vec: Vector = Vectors.dense(0.1, 0.15, 0.2, 0.3, 0.25)\n+\n+    // compute the goodness of fit. If a second vector to test against is not supplied\n+    // as a parameter, the test runs against a uniform distribution.\n+    val goodnessOfFitTestResult = Statistics.chiSqTest(vec)\n+    println(goodnessOfFitTestResult) // summary of the test including the p-value,"
  }, {
    "author": {
      "login": "yinxusen"
    },
    "body": "add a println here\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:16:06Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+// $example on$\n+import org.apache.spark.mllib.linalg._\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.mllib.stat.test.ChiSqTestResult\n+import org.apache.spark.rdd.RDD\n+// $example off$\n+\n+object HypothesisTestingExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"HypothesisTestingExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    // a vector composed of the frequencies of events\n+    val vec: Vector = Vectors.dense(0.1, 0.15, 0.2, 0.3, 0.25)\n+\n+    // compute the goodness of fit. If a second vector to test against is not supplied\n+    // as a parameter, the test runs against a uniform distribution.\n+    val goodnessOfFitTestResult = Statistics.chiSqTest(vec)\n+    println(goodnessOfFitTestResult) // summary of the test including the p-value,"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "change it into\n\n``` Scala\n// summary of the test including the p-value, degrees of freedom\nprintln(independenceTestResult)\n```\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:13:03Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+// $example on$\n+import org.apache.spark.mllib.linalg._\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.mllib.stat.test.ChiSqTestResult\n+import org.apache.spark.rdd.RDD\n+// $example off$\n+\n+object HypothesisTestingExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"HypothesisTestingExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    // a vector composed of the frequencies of events\n+    val vec: Vector = Vectors.dense(0.1, 0.15, 0.2, 0.3, 0.25)\n+\n+    // compute the goodness of fit. If a second vector to test against is not supplied\n+    // as a parameter, the test runs against a uniform distribution.\n+    val goodnessOfFitTestResult = Statistics.chiSqTest(vec)\n+    println(goodnessOfFitTestResult) // summary of the test including the p-value,\n+    // degrees of freedom, test statistic, the method used, and the null hypothesis.\n+\n+    // a contingency matrix. Create a dense matrix ((1.0, 2.0), (3.0, 4.0), (5.0, 6.0))\n+    val mat: Matrix = Matrices.dense(3, 2, Array(1.0, 3.0, 5.0, 2.0, 4.0, 6.0))\n+\n+    // conduct Pearson's independence test on the input contingency matrix\n+    val independenceTestResult = Statistics.chiSqTest(mat)\n+    println(independenceTestResult) // summary of the test including the p-value, degrees of freedom"
  }, {
    "author": {
      "login": "yinxusen"
    },
    "body": "add a println here\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:16:14Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+// $example on$\n+import org.apache.spark.mllib.linalg._\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.mllib.stat.test.ChiSqTestResult\n+import org.apache.spark.rdd.RDD\n+// $example off$\n+\n+object HypothesisTestingExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"HypothesisTestingExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    // a vector composed of the frequencies of events\n+    val vec: Vector = Vectors.dense(0.1, 0.15, 0.2, 0.3, 0.25)\n+\n+    // compute the goodness of fit. If a second vector to test against is not supplied\n+    // as a parameter, the test runs against a uniform distribution.\n+    val goodnessOfFitTestResult = Statistics.chiSqTest(vec)\n+    println(goodnessOfFitTestResult) // summary of the test including the p-value,\n+    // degrees of freedom, test statistic, the method used, and the null hypothesis.\n+\n+    // a contingency matrix. Create a dense matrix ((1.0, 2.0), (3.0, 4.0), (5.0, 6.0))\n+    val mat: Matrix = Matrices.dense(3, 2, Array(1.0, 3.0, 5.0, 2.0, 4.0, 6.0))\n+\n+    // conduct Pearson's independence test on the input contingency matrix\n+    val independenceTestResult = Statistics.chiSqTest(mat)\n+    println(independenceTestResult) // summary of the test including the p-value, degrees of freedom"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "2-indent\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:13:31Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+// $example on$\n+import org.apache.spark.mllib.linalg._\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.mllib.stat.test.ChiSqTestResult\n+import org.apache.spark.rdd.RDD\n+// $example off$\n+\n+object HypothesisTestingExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"HypothesisTestingExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    // a vector composed of the frequencies of events\n+    val vec: Vector = Vectors.dense(0.1, 0.15, 0.2, 0.3, 0.25)\n+\n+    // compute the goodness of fit. If a second vector to test against is not supplied\n+    // as a parameter, the test runs against a uniform distribution.\n+    val goodnessOfFitTestResult = Statistics.chiSqTest(vec)\n+    println(goodnessOfFitTestResult) // summary of the test including the p-value,\n+    // degrees of freedom, test statistic, the method used, and the null hypothesis.\n+\n+    // a contingency matrix. Create a dense matrix ((1.0, 2.0), (3.0, 4.0), (5.0, 6.0))\n+    val mat: Matrix = Matrices.dense(3, 2, Array(1.0, 3.0, 5.0, 2.0, 4.0, 6.0))\n+\n+    // conduct Pearson's independence test on the input contingency matrix\n+    val independenceTestResult = Statistics.chiSqTest(mat)\n+    println(independenceTestResult) // summary of the test including the p-value, degrees of freedom\n+\n+    val p1 = LabeledPoint(1.0, Vectors.dense(1.0, 0.0, 3.0))\n+    val p2 = LabeledPoint(1.0, Vectors.dense(1.0, 2.0, 0.0))\n+    val p3 = LabeledPoint(-1.0, Vectors.dense(-1.0, 0.0, -0.5))\n+    val obs: RDD[LabeledPoint] = sc.parallelize(Seq(p1, p2, p3)) // (feature, label) pairs."
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "2-indent\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:13:49Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+// $example on$\n+import org.apache.spark.mllib.linalg._\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.mllib.stat.test.ChiSqTestResult\n+import org.apache.spark.rdd.RDD\n+// $example off$\n+\n+object HypothesisTestingExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"HypothesisTestingExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    // a vector composed of the frequencies of events\n+    val vec: Vector = Vectors.dense(0.1, 0.15, 0.2, 0.3, 0.25)\n+\n+    // compute the goodness of fit. If a second vector to test against is not supplied\n+    // as a parameter, the test runs against a uniform distribution.\n+    val goodnessOfFitTestResult = Statistics.chiSqTest(vec)\n+    println(goodnessOfFitTestResult) // summary of the test including the p-value,\n+    // degrees of freedom, test statistic, the method used, and the null hypothesis.\n+\n+    // a contingency matrix. Create a dense matrix ((1.0, 2.0), (3.0, 4.0), (5.0, 6.0))\n+    val mat: Matrix = Matrices.dense(3, 2, Array(1.0, 3.0, 5.0, 2.0, 4.0, 6.0))\n+\n+    // conduct Pearson's independence test on the input contingency matrix\n+    val independenceTestResult = Statistics.chiSqTest(mat)\n+    println(independenceTestResult) // summary of the test including the p-value, degrees of freedom\n+\n+    val p1 = LabeledPoint(1.0, Vectors.dense(1.0, 0.0, 3.0))\n+    val p2 = LabeledPoint(1.0, Vectors.dense(1.0, 2.0, 0.0))\n+    val p3 = LabeledPoint(-1.0, Vectors.dense(-1.0, 0.0, -0.5))\n+    val obs: RDD[LabeledPoint] = sc.parallelize(Seq(p1, p2, p3)) // (feature, label) pairs.\n+\n+    // The contingency table is constructed from the raw (feature, label) pairs and used to conduct\n+    // the independence test. Returns an array containing the ChiSquaredTestResult for every feature\n+    // against the label.\n+    val featureTestResults: Array[ChiSqTestResult] = Statistics.chiSqTest(obs)\n+    var i = 1\n+    featureTestResults.foreach { result =>\n+      println(s\"Column $i:\\n$result\")\n+      i += 1\n+    } // summary of the test"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Use `featureTestResults.zipWithIndex` instead of `var`\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:14:32Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+// $example on$\n+import org.apache.spark.mllib.linalg._\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.mllib.stat.test.ChiSqTestResult\n+import org.apache.spark.rdd.RDD\n+// $example off$\n+\n+object HypothesisTestingExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"HypothesisTestingExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    // a vector composed of the frequencies of events\n+    val vec: Vector = Vectors.dense(0.1, 0.15, 0.2, 0.3, 0.25)\n+\n+    // compute the goodness of fit. If a second vector to test against is not supplied\n+    // as a parameter, the test runs against a uniform distribution.\n+    val goodnessOfFitTestResult = Statistics.chiSqTest(vec)\n+    println(goodnessOfFitTestResult) // summary of the test including the p-value,\n+    // degrees of freedom, test statistic, the method used, and the null hypothesis.\n+\n+    // a contingency matrix. Create a dense matrix ((1.0, 2.0), (3.0, 4.0), (5.0, 6.0))\n+    val mat: Matrix = Matrices.dense(3, 2, Array(1.0, 3.0, 5.0, 2.0, 4.0, 6.0))\n+\n+    // conduct Pearson's independence test on the input contingency matrix\n+    val independenceTestResult = Statistics.chiSqTest(mat)\n+    println(independenceTestResult) // summary of the test including the p-value, degrees of freedom\n+\n+    val p1 = LabeledPoint(1.0, Vectors.dense(1.0, 0.0, 3.0))\n+    val p2 = LabeledPoint(1.0, Vectors.dense(1.0, 2.0, 0.0))\n+    val p3 = LabeledPoint(-1.0, Vectors.dense(-1.0, 0.0, -0.5))\n+    val obs: RDD[LabeledPoint] = sc.parallelize(Seq(p1, p2, p3)) // (feature, label) pairs.\n+\n+    // The contingency table is constructed from the raw (feature, label) pairs and used to conduct\n+    // the independence test. Returns an array containing the ChiSquaredTestResult for every feature\n+    // against the label.\n+    val featureTestResults: Array[ChiSqTestResult] = Statistics.chiSqTest(obs)\n+    var i = 1"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "add a \"\\n\" for each output line\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:16:42Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+// $example on$\n+import org.apache.spark.mllib.linalg._\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.mllib.stat.test.ChiSqTestResult\n+import org.apache.spark.rdd.RDD\n+// $example off$\n+\n+object HypothesisTestingExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"HypothesisTestingExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    // a vector composed of the frequencies of events\n+    val vec: Vector = Vectors.dense(0.1, 0.15, 0.2, 0.3, 0.25)\n+\n+    // compute the goodness of fit. If a second vector to test against is not supplied\n+    // as a parameter, the test runs against a uniform distribution.\n+    val goodnessOfFitTestResult = Statistics.chiSqTest(vec)\n+    println(goodnessOfFitTestResult) // summary of the test including the p-value,\n+    // degrees of freedom, test statistic, the method used, and the null hypothesis.\n+\n+    // a contingency matrix. Create a dense matrix ((1.0, 2.0), (3.0, 4.0), (5.0, 6.0))\n+    val mat: Matrix = Matrices.dense(3, 2, Array(1.0, 3.0, 5.0, 2.0, 4.0, 6.0))\n+\n+    // conduct Pearson's independence test on the input contingency matrix\n+    val independenceTestResult = Statistics.chiSqTest(mat)\n+    println(independenceTestResult) // summary of the test including the p-value, degrees of freedom\n+\n+    val p1 = LabeledPoint(1.0, Vectors.dense(1.0, 0.0, 3.0))\n+    val p2 = LabeledPoint(1.0, Vectors.dense(1.0, 2.0, 0.0))\n+    val p3 = LabeledPoint(-1.0, Vectors.dense(-1.0, 0.0, -0.5))\n+    val obs: RDD[LabeledPoint] = sc.parallelize(Seq(p1, p2, p3)) // (feature, label) pairs.\n+\n+    // The contingency table is constructed from the raw (feature, label) pairs and used to conduct\n+    // the independence test. Returns an array containing the ChiSquaredTestResult for every feature\n+    // against the label.\n+    val featureTestResults: Array[ChiSqTestResult] = Statistics.chiSqTest(obs)\n+    var i = 1\n+    featureTestResults.foreach { result =>\n+      println(s\"Column $i:\\n$result\")"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "This is not really necessary as part of the example code.\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-16T23:39:39Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+// $example on$\n+import org.apache.spark.mllib.linalg._\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.mllib.stat.test.ChiSqTestResult\n+import org.apache.spark.rdd.RDD\n+// $example off$\n+\n+object HypothesisTestingExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"HypothesisTestingExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    // a vector composed of the frequencies of events\n+    val vec: Vector = Vectors.dense(0.1, 0.15, 0.2, 0.3, 0.25)\n+\n+    // compute the goodness of fit. If a second vector to test against is not supplied\n+    // as a parameter, the test runs against a uniform distribution.\n+    val goodnessOfFitTestResult = Statistics.chiSqTest(vec)\n+    // summary of the test including the p-value, degrees of freedom, test statistic, the method\n+    // used, and the null hypothesis.\n+    println(goodnessOfFitTestResult)\n+    println()"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "use `case (k, v) =>`\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-16T23:41:08Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+// $example on$\n+import org.apache.spark.mllib.linalg._\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.mllib.stat.test.ChiSqTestResult\n+import org.apache.spark.rdd.RDD\n+// $example off$\n+\n+object HypothesisTestingExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"HypothesisTestingExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    // a vector composed of the frequencies of events\n+    val vec: Vector = Vectors.dense(0.1, 0.15, 0.2, 0.3, 0.25)\n+\n+    // compute the goodness of fit. If a second vector to test against is not supplied\n+    // as a parameter, the test runs against a uniform distribution.\n+    val goodnessOfFitTestResult = Statistics.chiSqTest(vec)\n+    // summary of the test including the p-value, degrees of freedom, test statistic, the method\n+    // used, and the null hypothesis.\n+    println(goodnessOfFitTestResult)\n+    println()\n+\n+    // a contingency matrix. Create a dense matrix ((1.0, 2.0), (3.0, 4.0), (5.0, 6.0))\n+    val mat: Matrix = Matrices.dense(3, 2, Array(1.0, 3.0, 5.0, 2.0, 4.0, 6.0))\n+\n+    // conduct Pearson's independence test on the input contingency matrix\n+    val independenceTestResult = Statistics.chiSqTest(mat)\n+    // summary of the test including the p-value, degrees of freedom\n+    println(independenceTestResult)\n+    println()\n+\n+    val p1 = LabeledPoint(1.0, Vectors.dense(1.0, 0.0, 3.0))\n+    val p2 = LabeledPoint(1.0, Vectors.dense(1.0, 2.0, 0.0))\n+    val p3 = LabeledPoint(-1.0, Vectors.dense(-1.0, 0.0, -0.5))\n+    val obs: RDD[LabeledPoint] = sc.parallelize(Seq(p1, p2, p3))  // (feature, label) pairs.\n+\n+    // The contingency table is constructed from the raw (feature, label) pairs and used to conduct\n+    // the independence test. Returns an array containing the ChiSquaredTestResult for every feature\n+    // against the label.\n+    val featureTestResults: Array[ChiSqTestResult] = Statistics.chiSqTest(obs)\n+    featureTestResults.zipWithIndex.foreach { result =>"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "You are not using `s\"...\"`. Put all variables inside quotes would make the code easier to read.\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-16T23:41:34Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+// $example on$\n+import org.apache.spark.mllib.linalg._\n+import org.apache.spark.mllib.regression.LabeledPoint\n+import org.apache.spark.mllib.stat.Statistics\n+import org.apache.spark.mllib.stat.test.ChiSqTestResult\n+import org.apache.spark.rdd.RDD\n+// $example off$\n+\n+object HypothesisTestingExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"HypothesisTestingExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    // a vector composed of the frequencies of events\n+    val vec: Vector = Vectors.dense(0.1, 0.15, 0.2, 0.3, 0.25)\n+\n+    // compute the goodness of fit. If a second vector to test against is not supplied\n+    // as a parameter, the test runs against a uniform distribution.\n+    val goodnessOfFitTestResult = Statistics.chiSqTest(vec)\n+    // summary of the test including the p-value, degrees of freedom, test statistic, the method\n+    // used, and the null hypothesis.\n+    println(goodnessOfFitTestResult)\n+    println()\n+\n+    // a contingency matrix. Create a dense matrix ((1.0, 2.0), (3.0, 4.0), (5.0, 6.0))\n+    val mat: Matrix = Matrices.dense(3, 2, Array(1.0, 3.0, 5.0, 2.0, 4.0, 6.0))\n+\n+    // conduct Pearson's independence test on the input contingency matrix\n+    val independenceTestResult = Statistics.chiSqTest(mat)\n+    // summary of the test including the p-value, degrees of freedom\n+    println(independenceTestResult)\n+    println()\n+\n+    val p1 = LabeledPoint(1.0, Vectors.dense(1.0, 0.0, 3.0))\n+    val p2 = LabeledPoint(1.0, Vectors.dense(1.0, 2.0, 0.0))\n+    val p3 = LabeledPoint(-1.0, Vectors.dense(-1.0, 0.0, -0.5))\n+    val obs: RDD[LabeledPoint] = sc.parallelize(Seq(p1, p2, p3))  // (feature, label) pairs.\n+\n+    // The contingency table is constructed from the raw (feature, label) pairs and used to conduct\n+    // the independence test. Returns an array containing the ChiSquaredTestResult for every feature\n+    // against the label.\n+    val featureTestResults: Array[ChiSqTestResult] = Statistics.chiSqTest(obs)\n+    featureTestResults.zipWithIndex.foreach { result =>\n+      println(s\"Column \" + (result._2 + 1).toString + \":\")"
  }],
  "prId": 11108
}]