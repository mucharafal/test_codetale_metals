[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "This is different from current example code in user guide, where we use `sqlContext.read.format(\"libsvm\").load(\"data/mllib/sample_libsvm_data.txt\")`. Please find other places and switch to using \"libsvm\" data source instead.\n",
    "commit": "4d9cffb006d99a1ee1649eddfb470ca737ff4e16",
    "createdAt": "2015-11-17T21:54:07Z",
    "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+import org.apache.spark.sql.SQLContext\n+import org.apache.spark.{SparkConf, SparkContext}\n+// $example on$\n+import org.apache.spark.ml.Pipeline\n+import org.apache.spark.ml.classification.{RandomForestClassificationModel, RandomForestClassifier}\n+import org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\n+import org.apache.spark.ml.feature.{IndexToString, StringIndexer, VectorIndexer}\n+import org.apache.spark.mllib.util.MLUtils\n+// $example off$\n+\n+object RandomForestClassifierExample {\n+  def main(args: Array[String]): Unit = {\n+    val conf = new SparkConf().setAppName(\"RandomForestClassifierExample\")\n+    val sc = new SparkContext(conf)\n+    val sqlContext = new SQLContext(sc)\n+    import sqlContext.implicits._\n+\n+    // $example on$\n+    // Load and parse the data file, converting it to a DataFrame.\n+    val data = MLUtils.loadLibSVMFile(sc, \"data/mllib/sample_libsvm_data.txt\").toDF()"
  }],
  "prId": 9716
}]