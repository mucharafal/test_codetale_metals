[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "It might be cleaner to rename `LabeledPointParser.parse` to `LabeledPoint.parse` and make it public. For the parser, the original name is `LabeledPoint.parse`. But `LabeledPoint` is a case class and the type signature is a little complicated to match. But if you can figure it out, we can remove `MLStreamingUtils`.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-07-30T00:31:58Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.mllib.util.MLStreamingUtils\n+import org.apache.spark.mllib.regression.StreamingLinearRegressionWithSGD\n+import org.apache.spark.streaming.{Seconds, StreamingContext}\n+\n+/**\n+ * Continually update a model on one stream of data using streaming linear regression,\n+ * while making predictions on another stream of data\n+ *\n+ */\n+object StreamingLinearRegression {\n+\n+  def main(args: Array[String]) {\n+\n+    if (args.length != 4) {\n+      System.err.println(\n+        \"Usage: StreamingLinearRegression <trainingData> <testData> <batchDuration> <numFeatures>\")\n+      System.exit(1)\n+    }\n+\n+    val conf = new SparkConf().setMaster(\"local\").setAppName(\"StreamingLinearRegression\")\n+    val ssc = new StreamingContext(conf, Seconds(args(2).toLong))\n+\n+    val trainingData = MLStreamingUtils.loadLabeledPointsFromText(ssc, args(0))"
  }, {
    "author": {
      "login": "freeman-lab"
    },
    "body": "I like this idea, but I can actually trivially remove `MLStreamingUtils` by just moving its `loadStreamingLabeledPoints` into `MLUtils`. Maybe we can rename LabeledPoint in another PR. \n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-08-01T07:11:32Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.mllib.util.MLStreamingUtils\n+import org.apache.spark.mllib.regression.StreamingLinearRegressionWithSGD\n+import org.apache.spark.streaming.{Seconds, StreamingContext}\n+\n+/**\n+ * Continually update a model on one stream of data using streaming linear regression,\n+ * while making predictions on another stream of data\n+ *\n+ */\n+object StreamingLinearRegression {\n+\n+  def main(args: Array[String]) {\n+\n+    if (args.length != 4) {\n+      System.err.println(\n+        \"Usage: StreamingLinearRegression <trainingData> <testData> <batchDuration> <numFeatures>\")\n+      System.exit(1)\n+    }\n+\n+    val conf = new SparkConf().setMaster(\"local\").setAppName(\"StreamingLinearRegression\")\n+    val ssc = new StreamingContext(conf, Seconds(args(2).toLong))\n+\n+    val trainingData = MLStreamingUtils.loadLabeledPointsFromText(ssc, args(0))"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "Another solution is to make `LabeledPointParser` public and chain operations `ssc.textFileStream(path).map(LabeledPointParser.parse)`. If we want to load vectors, we can use `ssc.textFileStream(path).map(Vectors.parse)` instead of defining a new method `MLStreamingUtils.loadStreamingVectors`.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-08-01T15:03:57Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.mllib.util.MLStreamingUtils\n+import org.apache.spark.mllib.regression.StreamingLinearRegressionWithSGD\n+import org.apache.spark.streaming.{Seconds, StreamingContext}\n+\n+/**\n+ * Continually update a model on one stream of data using streaming linear regression,\n+ * while making predictions on another stream of data\n+ *\n+ */\n+object StreamingLinearRegression {\n+\n+  def main(args: Array[String]) {\n+\n+    if (args.length != 4) {\n+      System.err.println(\n+        \"Usage: StreamingLinearRegression <trainingData> <testData> <batchDuration> <numFeatures>\")\n+      System.exit(1)\n+    }\n+\n+    val conf = new SparkConf().setMaster(\"local\").setAppName(\"StreamingLinearRegression\")\n+    val ssc = new StreamingContext(conf, Seconds(args(2).toLong))\n+\n+    val trainingData = MLStreamingUtils.loadLabeledPointsFromText(ssc, args(0))"
  }],
  "prId": 1361
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "The example needs a more documentation on how to run this. Is my assumption correct that the data needs to be loaded through the text file stream by writing new files to a folder? If that is the case, then all the usage details need to be mentioned.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-08-01T17:22:42Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.mllib.util.MLStreamingUtils\n+import org.apache.spark.mllib.regression.StreamingLinearRegressionWithSGD\n+import org.apache.spark.streaming.{Seconds, StreamingContext}\n+\n+/**\n+ * Continually update a model on one stream of data using streaming linear regression,\n+ * while making predictions on another stream of data\n+ *"
  }, {
    "author": {
      "login": "freeman-lab"
    },
    "body": "That's correct, I'll make it much more clear how the example works.\n",
    "commit": "775ea29e53a7067ff6e143b455b49ddbb8553d94",
    "createdAt": "2014-08-01T17:28:16Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.mllib.util.MLStreamingUtils\n+import org.apache.spark.mllib.regression.StreamingLinearRegressionWithSGD\n+import org.apache.spark.streaming.{Seconds, StreamingContext}\n+\n+/**\n+ * Continually update a model on one stream of data using streaming linear regression,\n+ * while making predictions on another stream of data\n+ *"
  }],
  "prId": 1361
}]