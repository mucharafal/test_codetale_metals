[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Add $example on$ $example off$ in imports\n",
    "commit": "3b031da55b81b9440539dfe7ee9579fe4c656b9d",
    "createdAt": "2016-02-15T21:44:49Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.SparkContext\n+import org.apache.spark.mllib.linalg.Matrix"
  }],
  "prId": 11132
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "remove the blank and print U, s, and V.\n",
    "commit": "3b031da55b81b9440539dfe7ee9579fe4c656b9d",
    "createdAt": "2016-02-15T21:45:29Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.SparkContext\n+import org.apache.spark.mllib.linalg.Matrix\n+import org.apache.spark.mllib.linalg.SingularValueDecomposition\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.linalg.distributed.RowMatrix\n+\n+object SVDExample {\n+\n+  def main(args: Array[String]): Unit = {\n+\n+    val conf = new SparkConf().setAppName(\"SVDExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    val data = Array(\n+      Vectors.sparse(5, Seq((1, 1.0), (3, 7.0))),\n+      Vectors.dense(2.0, 0.0, 3.0, 4.0, 5.0),\n+      Vectors.dense(4.0, 0.0, 0.0, 6.0, 7.0))\n+\n+    val dataRDD = sc.parallelize(data, 2)\n+\n+    val mat: RowMatrix = new RowMatrix(dataRDD)\n+\n+    // Compute the top 20 singular values and corresponding singular vectors.\n+    val svd: SingularValueDecomposition[RowMatrix, Matrix] = mat.computeSVD(20, computeU = true)\n+    val U: RowMatrix = svd.U // The U factor is a RowMatrix.\n+    val s: Vector = svd.s // The singular values are stored in a local dense vector.\n+    val V: Matrix = svd.V // The V factor is a local dense matrix.\n+"
  }],
  "prId": 11132
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Use 2-indent spaces for inline comments.\n",
    "commit": "3b031da55b81b9440539dfe7ee9579fe4c656b9d",
    "createdAt": "2016-02-18T05:54:51Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+// $example on$\n+import org.apache.spark.SparkConf\n+import org.apache.spark.SparkContext\n+import org.apache.spark.mllib.linalg.Matrix\n+import org.apache.spark.mllib.linalg.SingularValueDecomposition\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.linalg.distributed.RowMatrix\n+// $example off$\n+\n+object SVDExample {\n+\n+  def main(args: Array[String]): Unit = {\n+\n+    val conf = new SparkConf().setAppName(\"SVDExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    val data = Array(\n+      Vectors.sparse(5, Seq((1, 1.0), (3, 7.0))),\n+      Vectors.dense(2.0, 0.0, 3.0, 4.0, 5.0),\n+      Vectors.dense(4.0, 0.0, 0.0, 6.0, 7.0))\n+\n+    val dataRDD = sc.parallelize(data, 2)\n+\n+    val mat: RowMatrix = new RowMatrix(dataRDD)\n+\n+    // Compute the top 5 singular values and corresponding singular vectors.\n+    val svd: SingularValueDecomposition[RowMatrix, Matrix] = mat.computeSVD(5, computeU = true)\n+    val U: RowMatrix = svd.U // The U factor is a RowMatrix."
  }],
  "prId": 11132
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Move the `// $example off$` here.\n",
    "commit": "3b031da55b81b9440539dfe7ee9579fe4c656b9d",
    "createdAt": "2016-02-18T05:55:25Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+// $example on$\n+import org.apache.spark.SparkConf\n+import org.apache.spark.SparkContext\n+import org.apache.spark.mllib.linalg.Matrix\n+import org.apache.spark.mllib.linalg.SingularValueDecomposition\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.linalg.distributed.RowMatrix\n+// $example off$\n+\n+object SVDExample {\n+\n+  def main(args: Array[String]): Unit = {\n+\n+    val conf = new SparkConf().setAppName(\"SVDExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    val data = Array(\n+      Vectors.sparse(5, Seq((1, 1.0), (3, 7.0))),\n+      Vectors.dense(2.0, 0.0, 3.0, 4.0, 5.0),\n+      Vectors.dense(4.0, 0.0, 0.0, 6.0, 7.0))\n+\n+    val dataRDD = sc.parallelize(data, 2)\n+\n+    val mat: RowMatrix = new RowMatrix(dataRDD)\n+\n+    // Compute the top 5 singular values and corresponding singular vectors.\n+    val svd: SingularValueDecomposition[RowMatrix, Matrix] = mat.computeSVD(5, computeU = true)\n+    val U: RowMatrix = svd.U // The U factor is a RowMatrix.\n+    val s: Vector = svd.s // The singular values are stored in a local dense vector.\n+    val V: Matrix = svd.V // The V factor is a local dense matrix.\n+    val collect = U.rows.collect()"
  }],
  "prId": 11132
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Move // $example off$ here, since lines below are what we added intent to output.\n",
    "commit": "3b031da55b81b9440539dfe7ee9579fe4c656b9d",
    "createdAt": "2016-02-18T22:07:23Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.SparkContext\n+// $example on$\n+import org.apache.spark.mllib.linalg.Matrix\n+import org.apache.spark.mllib.linalg.SingularValueDecomposition\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.linalg.distributed.RowMatrix\n+// $example off$\n+\n+object SVDExample {\n+\n+  def main(args: Array[String]): Unit = {\n+\n+    val conf = new SparkConf().setAppName(\"SVDExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    val data = Array(\n+      Vectors.sparse(5, Seq((1, 1.0), (3, 7.0))),\n+      Vectors.dense(2.0, 0.0, 3.0, 4.0, 5.0),\n+      Vectors.dense(4.0, 0.0, 0.0, 6.0, 7.0))\n+\n+    val dataRDD = sc.parallelize(data, 2)\n+\n+    val mat: RowMatrix = new RowMatrix(dataRDD)\n+\n+    // Compute the top 5 singular values and corresponding singular vectors.\n+    val svd: SingularValueDecomposition[RowMatrix, Matrix] = mat.computeSVD(5, computeU = true)\n+    val U: RowMatrix = svd.U  // The U factor is a RowMatrix.\n+    val s: Vector = svd.s  // The singular values are stored in a local dense vector.\n+    val V: Matrix = svd.V  // The V factor is a local dense matrix.",
    "line": 52
  }],
  "prId": 11132
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "`s\"V factor is\\n: $V\"`\n",
    "commit": "3b031da55b81b9440539dfe7ee9579fe4c656b9d",
    "createdAt": "2016-02-20T22:44:26Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.SparkContext\n+// $example on$\n+import org.apache.spark.mllib.linalg.Matrix\n+import org.apache.spark.mllib.linalg.SingularValueDecomposition\n+import org.apache.spark.mllib.linalg.Vector\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.linalg.distributed.RowMatrix\n+// $example off$\n+\n+object SVDExample {\n+\n+  def main(args: Array[String]): Unit = {\n+\n+    val conf = new SparkConf().setAppName(\"SVDExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    val data = Array(\n+      Vectors.sparse(5, Seq((1, 1.0), (3, 7.0))),\n+      Vectors.dense(2.0, 0.0, 3.0, 4.0, 5.0),\n+      Vectors.dense(4.0, 0.0, 0.0, 6.0, 7.0))\n+\n+    val dataRDD = sc.parallelize(data, 2)\n+\n+    val mat: RowMatrix = new RowMatrix(dataRDD)\n+\n+    // Compute the top 5 singular values and corresponding singular vectors.\n+    val svd: SingularValueDecomposition[RowMatrix, Matrix] = mat.computeSVD(5, computeU = true)\n+    val U: RowMatrix = svd.U  // The U factor is a RowMatrix.\n+    val s: Vector = svd.s  // The singular values are stored in a local dense vector.\n+    val V: Matrix = svd.V  // The V factor is a local dense matrix.\n+    // $example off$\n+    val collect = U.rows.collect()\n+    println(\"U factor is:\")\n+    collect.foreach { vector => println(vector) }\n+    println(s\"Singular values are: $s\")\n+    println(s\"V factor is: $V\")"
  }],
  "prId": 11132
}]