[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "remove the blank and print `projected`.\n",
    "commit": "3b031da55b81b9440539dfe7ee9579fe4c656b9d",
    "createdAt": "2016-02-15T21:42:02Z",
    "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.SparkContext\n+import org.apache.spark.mllib.linalg.Matrix\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.linalg.distributed.RowMatrix\n+\n+object PCAOnRowMatrixExample {\n+\n+  def main(args: Array[String]): Unit = {\n+\n+    val conf = new SparkConf().setAppName(\"SVDExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    val data = Array(\n+      Vectors.sparse(5, Seq((1, 1.0), (3, 7.0))),\n+      Vectors.dense(2.0, 0.0, 3.0, 4.0, 5.0),\n+      Vectors.dense(4.0, 0.0, 0.0, 6.0, 7.0))\n+\n+    val dataRDD = sc.parallelize(data, 2)\n+\n+    val mat: RowMatrix = new RowMatrix(dataRDD)\n+\n+    // Compute the top 10 principal components.\n+    // Principal components are stored in a local dense matrix.\n+    val pc: Matrix = mat.computePrincipalComponents(10)\n+\n+    // Project the rows to the linear space spanned by the top 10 principal components.\n+    val projected: RowMatrix = mat.multiply(pc)\n+"
  }],
  "prId": 11132
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Add $example on$ $example off$ in imports\n",
    "commit": "3b031da55b81b9440539dfe7ee9579fe4c656b9d",
    "createdAt": "2016-02-15T21:44:18Z",
    "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.SparkContext\n+import org.apache.spark.mllib.linalg.Matrix"
  }],
  "prId": 11132
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Move `SparkConf` and `SparkContext` out of `$example on$` and `$example off` since they are not involved in the code lines we trimmed out. See example below.\n\n``` scala\nimport org.apache.spark.SparkConf\nimport org.apache.spark.SparkContext\n// $example on$\nimport org.apache.spark.mllib.linalg.Matrix\nimport org.apache.spark.mllib.linalg.SingularValueDecomposition\nimport org.apache.spark.mllib.linalg.Vector\nimport org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.mllib.linalg.distributed.RowMatrix\n// $example off$\n```\n",
    "commit": "3b031da55b81b9440539dfe7ee9579fe4c656b9d",
    "createdAt": "2016-02-18T05:53:17Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+// $example on$\n+import org.apache.spark.SparkConf\n+import org.apache.spark.SparkContext\n+import org.apache.spark.mllib.linalg.Matrix"
  }],
  "prId": 11132
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Wrong name of `SVDExample`\n",
    "commit": "3b031da55b81b9440539dfe7ee9579fe4c656b9d",
    "createdAt": "2016-02-18T06:00:22Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+// $example on$\n+import org.apache.spark.SparkConf\n+import org.apache.spark.SparkContext\n+import org.apache.spark.mllib.linalg.Matrix\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.linalg.distributed.RowMatrix\n+// $example off$\n+\n+object PCAOnRowMatrixExample {\n+\n+  def main(args: Array[String]): Unit = {\n+\n+    val conf = new SparkConf().setAppName(\"SVDExample\")"
  }],
  "prId": 11132
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Move `// $example off$` here.\n",
    "commit": "3b031da55b81b9440539dfe7ee9579fe4c656b9d",
    "createdAt": "2016-02-18T06:01:21Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+// $example on$\n+import org.apache.spark.SparkConf\n+import org.apache.spark.SparkContext\n+import org.apache.spark.mllib.linalg.Matrix\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.linalg.distributed.RowMatrix\n+// $example off$\n+\n+object PCAOnRowMatrixExample {\n+\n+  def main(args: Array[String]): Unit = {\n+\n+    val conf = new SparkConf().setAppName(\"SVDExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    val data = Array(\n+      Vectors.sparse(5, Seq((1, 1.0), (3, 7.0))),\n+      Vectors.dense(2.0, 0.0, 3.0, 4.0, 5.0),\n+      Vectors.dense(4.0, 0.0, 0.0, 6.0, 7.0))\n+\n+    val dataRDD = sc.parallelize(data, 2)\n+\n+    val mat: RowMatrix = new RowMatrix(dataRDD)\n+\n+    // Compute the top 4 principal components.\n+    // Principal components are stored in a local dense matrix.\n+    val pc: Matrix = mat.computePrincipalComponents(4)\n+\n+    // Project the rows to the linear space spanned by the top 4 principal components.\n+    val projected: RowMatrix = mat.multiply(pc)",
    "line": 51
  }],
  "prId": 11132
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "It's better to add parenthesis to empty-parenthesis method if the method has side effect. I.e. use `projected.rows.collect()`\n",
    "commit": "3b031da55b81b9440539dfe7ee9579fe4c656b9d",
    "createdAt": "2016-02-18T06:04:44Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+// $example on$\n+import org.apache.spark.SparkConf\n+import org.apache.spark.SparkContext\n+import org.apache.spark.mllib.linalg.Matrix\n+import org.apache.spark.mllib.linalg.Vectors\n+import org.apache.spark.mllib.linalg.distributed.RowMatrix\n+// $example off$\n+\n+object PCAOnRowMatrixExample {\n+\n+  def main(args: Array[String]): Unit = {\n+\n+    val conf = new SparkConf().setAppName(\"SVDExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    val data = Array(\n+      Vectors.sparse(5, Seq((1, 1.0), (3, 7.0))),\n+      Vectors.dense(2.0, 0.0, 3.0, 4.0, 5.0),\n+      Vectors.dense(4.0, 0.0, 0.0, 6.0, 7.0))\n+\n+    val dataRDD = sc.parallelize(data, 2)\n+\n+    val mat: RowMatrix = new RowMatrix(dataRDD)\n+\n+    // Compute the top 4 principal components.\n+    // Principal components are stored in a local dense matrix.\n+    val pc: Matrix = mat.computePrincipalComponents(4)\n+\n+    // Project the rows to the linear space spanned by the top 4 principal components.\n+    val projected: RowMatrix = mat.multiply(pc)\n+    val collect = projected.rows.collect"
  }],
  "prId": 11132
}]