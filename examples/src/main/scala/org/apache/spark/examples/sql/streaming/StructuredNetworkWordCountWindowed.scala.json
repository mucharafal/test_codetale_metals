[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "not clear what is the format of specifying the durations. Either add examples in the usage, or make sure they are in seconds and the user has to specify a single number.\n",
    "commit": "8f97b66f55ececd91434a3f9a3b28dd6c5412d46",
    "createdAt": "2016-07-01T06:26:31Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.sql.streaming\n+\n+import java.sql.Timestamp\n+\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.functions._\n+\n+/**\n+ * Counts words in UTF8 encoded, '\\n' delimited text received from the network over a\n+ * sliding window of configurable duration. Each line from the network is tagged\n+ * with a timestamp that is used to determine the windows into which it falls.\n+ *\n+ * Usage: StructuredNetworkWordCountWindowed <hostname> <port> <window duration> <slide duration>\n+ * <hostname> and <port> describe the TCP server that Structured Streaming\n+ * would connect to receive data.\n+ * <window duration> gives the size of window, specified as integer number of seconds, minutes,\n+ * or days, e.g. \"1 minute\", \"2 seconds\"\n+ * <slide duration> gives the amount of time successive windows are offset from one another,\n+ * given in the same units as above. <slide duration> should be less than or equal to\n+ * <window duration>. If the two are equal, successive windows have no overlap.\n+ * (<window duration> and <slide duration> must be enclosed by quotes to ensure that\n+ * they are processed as individual arguments)\n+ *\n+ * To run this on your local machine, you need to first run a Netcat server\n+ *    `$ nc -lk 9999`\n+ * and then run the example\n+ *    `$ bin/run-example sql.streaming.StructuredNetworkWordCountWindowed\n+ *    localhost 9999 <window duration> <slide duration>`\n+ *\n+ * One recommended <window duration>, <slide duration> pair is \"1 minute\",\n+ * \"30 seconds\"\n+ */\n+object StructuredNetworkWordCountWindowed {\n+\n+  def main(args: Array[String]) {\n+    if (args.length < 4) {\n+      System.err.println(\"Usage: StructuredNetworkWordCountWindowed <hostname> <port>\" +\n+        \" <window duration> <slide duration>\")"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "on second thought might be simpler to just use seconds. less prone to users entering incorrect format.\n",
    "commit": "8f97b66f55ececd91434a3f9a3b28dd6c5412d46",
    "createdAt": "2016-07-01T08:02:43Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.sql.streaming\n+\n+import java.sql.Timestamp\n+\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.functions._\n+\n+/**\n+ * Counts words in UTF8 encoded, '\\n' delimited text received from the network over a\n+ * sliding window of configurable duration. Each line from the network is tagged\n+ * with a timestamp that is used to determine the windows into which it falls.\n+ *\n+ * Usage: StructuredNetworkWordCountWindowed <hostname> <port> <window duration> <slide duration>\n+ * <hostname> and <port> describe the TCP server that Structured Streaming\n+ * would connect to receive data.\n+ * <window duration> gives the size of window, specified as integer number of seconds, minutes,\n+ * or days, e.g. \"1 minute\", \"2 seconds\"\n+ * <slide duration> gives the amount of time successive windows are offset from one another,\n+ * given in the same units as above. <slide duration> should be less than or equal to\n+ * <window duration>. If the two are equal, successive windows have no overlap.\n+ * (<window duration> and <slide duration> must be enclosed by quotes to ensure that\n+ * they are processed as individual arguments)\n+ *\n+ * To run this on your local machine, you need to first run a Netcat server\n+ *    `$ nc -lk 9999`\n+ * and then run the example\n+ *    `$ bin/run-example sql.streaming.StructuredNetworkWordCountWindowed\n+ *    localhost 9999 <window duration> <slide duration>`\n+ *\n+ * One recommended <window duration>, <slide duration> pair is \"1 minute\",\n+ * \"30 seconds\"\n+ */\n+object StructuredNetworkWordCountWindowed {\n+\n+  def main(args: Array[String]) {\n+    if (args.length < 4) {\n+      System.err.println(\"Usage: StructuredNetworkWordCountWindowed <hostname> <port>\" +\n+        \" <window duration> <slide duration>\")"
  }],
  "prId": 13957
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "put the following map in the same line.\n",
    "commit": "8f97b66f55ececd91434a3f9a3b28dd6c5412d46",
    "createdAt": "2016-07-01T07:55:18Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.sql.streaming\n+\n+import java.sql.Timestamp\n+\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.functions._\n+\n+/**\n+ * Counts words in UTF8 encoded, '\\n' delimited text received from the network over a\n+ * sliding window of configurable duration. Each line from the network is tagged\n+ * with a timestamp that is used to determine the windows into which it falls.\n+ *\n+ * Usage: StructuredNetworkWordCountWindowed <hostname> <port> <window duration> <slide duration>\n+ * <hostname> and <port> describe the TCP server that Structured Streaming\n+ * would connect to receive data.\n+ * <window duration> gives the size of window, specified as integer number of seconds, minutes,\n+ * or days, e.g. \"1 minute\", \"2 seconds\"\n+ * <slide duration> gives the amount of time successive windows are offset from one another,\n+ * given in the same units as above. <slide duration> should be less than or equal to\n+ * <window duration>. If the two are equal, successive windows have no overlap.\n+ * (<window duration> and <slide duration> must be enclosed by quotes to ensure that\n+ * they are processed as individual arguments)\n+ *\n+ * To run this on your local machine, you need to first run a Netcat server\n+ *    `$ nc -lk 9999`\n+ * and then run the example\n+ *    `$ bin/run-example sql.streaming.StructuredNetworkWordCountWindowed\n+ *    localhost 9999 <window duration> <slide duration>`\n+ *\n+ * One recommended <window duration>, <slide duration> pair is \"1 minute\",\n+ * \"30 seconds\"\n+ */\n+object StructuredNetworkWordCountWindowed {\n+\n+  def main(args: Array[String]) {\n+    if (args.length < 4) {\n+      System.err.println(\"Usage: StructuredNetworkWordCountWindowed <hostname> <port>\" +\n+        \" <window duration> <slide duration>\")\n+      System.exit(1)\n+    }\n+\n+    val host = args(0)\n+    val port = args(1).toInt\n+    val windowSize = args(2)\n+    val slideSize = args(3)\n+\n+    val spark = SparkSession\n+      .builder\n+      .appName(\"StructuredNetworkWordCountWindowed\")\n+      .getOrCreate()\n+\n+    import spark.implicits._\n+\n+    // Create DataFrame representing the stream of input lines from connection to host:port\n+    val lines = spark.readStream\n+      .format(\"socket\")\n+      .option(\"host\", host)\n+      .option(\"port\", port)\n+      .option(\"includeTimestamp\", true)\n+      .load().as[(String, Timestamp)]\n+\n+    // Split the lines into words, retaining timestamps\n+    val words = lines.flatMap(line =>\n+      line._1.split(\" \")"
  }],
  "prId": 13957
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "you could convert this to a DF with nice column name with `.toDF(\"word\",  \"timestamp\")`. Then you wont need the `as(\"word\")` later.\n",
    "commit": "8f97b66f55ececd91434a3f9a3b28dd6c5412d46",
    "createdAt": "2016-07-01T08:00:45Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.sql.streaming\n+\n+import java.sql.Timestamp\n+\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.functions._\n+\n+/**\n+ * Counts words in UTF8 encoded, '\\n' delimited text received from the network over a\n+ * sliding window of configurable duration. Each line from the network is tagged\n+ * with a timestamp that is used to determine the windows into which it falls.\n+ *\n+ * Usage: StructuredNetworkWordCountWindowed <hostname> <port> <window duration> <slide duration>\n+ * <hostname> and <port> describe the TCP server that Structured Streaming\n+ * would connect to receive data.\n+ * <window duration> gives the size of window, specified as integer number of seconds, minutes,\n+ * or days, e.g. \"1 minute\", \"2 seconds\"\n+ * <slide duration> gives the amount of time successive windows are offset from one another,\n+ * given in the same units as above. <slide duration> should be less than or equal to\n+ * <window duration>. If the two are equal, successive windows have no overlap.\n+ * (<window duration> and <slide duration> must be enclosed by quotes to ensure that\n+ * they are processed as individual arguments)\n+ *\n+ * To run this on your local machine, you need to first run a Netcat server\n+ *    `$ nc -lk 9999`\n+ * and then run the example\n+ *    `$ bin/run-example sql.streaming.StructuredNetworkWordCountWindowed\n+ *    localhost 9999 <window duration> <slide duration>`\n+ *\n+ * One recommended <window duration>, <slide duration> pair is \"1 minute\",\n+ * \"30 seconds\"\n+ */\n+object StructuredNetworkWordCountWindowed {\n+\n+  def main(args: Array[String]) {\n+    if (args.length < 4) {\n+      System.err.println(\"Usage: StructuredNetworkWordCountWindowed <hostname> <port>\" +\n+        \" <window duration> <slide duration>\")\n+      System.exit(1)\n+    }\n+\n+    val host = args(0)\n+    val port = args(1).toInt\n+    val windowSize = args(2)\n+    val slideSize = args(3)\n+\n+    val spark = SparkSession\n+      .builder\n+      .appName(\"StructuredNetworkWordCountWindowed\")\n+      .getOrCreate()\n+\n+    import spark.implicits._\n+\n+    // Create DataFrame representing the stream of input lines from connection to host:port\n+    val lines = spark.readStream\n+      .format(\"socket\")\n+      .option(\"host\", host)\n+      .option(\"port\", port)\n+      .option(\"includeTimestamp\", true)\n+      .load().as[(String, Timestamp)]\n+\n+    // Split the lines into words, retaining timestamps\n+    val words = lines.flatMap(line =>\n+      line._1.split(\" \")\n+        .map(word => (word, line._2))\n+    )"
  }],
  "prId": 13957
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "try the `$\"timetamp\"` notation. update other example if it works. \n",
    "commit": "8f97b66f55ececd91434a3f9a3b28dd6c5412d46",
    "createdAt": "2016-07-01T20:38:05Z",
    "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.sql.streaming\n+\n+import java.sql.Timestamp\n+\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.functions._\n+\n+/**\n+ * Counts words in UTF8 encoded, '\\n' delimited text received from the network over a\n+ * sliding window of configurable duration. Each line from the network is tagged\n+ * with a timestamp that is used to determine the windows into which it falls.\n+ *\n+ * Usage: StructuredNetworkWordCountWindowed <hostname> <port> <window duration> <slide duration>\n+ * <hostname> and <port> describe the TCP server that Structured Streaming\n+ * would connect to receive data.\n+ * <window duration> gives the size of window, specified as integer number of seconds\n+ * <slide duration> gives the amount of time successive windows are offset from one another,\n+ * given in the same units as above. <slide duration> should be less than or equal to\n+ * <window duration>. If the two are equal, successive windows have no overlap.\n+ *\n+ * To run this on your local machine, you need to first run a Netcat server\n+ *    `$ nc -lk 9999`\n+ * and then run the example\n+ *    `$ bin/run-example sql.streaming.StructuredNetworkWordCountWindowed\n+ *    localhost 9999 <window duration> <slide duration>`\n+ *\n+ * One recommended <window duration>, <slide duration> pair is 60, 30\n+ */\n+object StructuredNetworkWordCountWindowed {\n+\n+  def main(args: Array[String]) {\n+    if (args.length < 4) {\n+      System.err.println(\"Usage: StructuredNetworkWordCountWindowed <hostname> <port>\" +\n+        \" <window duration in seconds> <slide duration in seconds>\")\n+      System.exit(1)\n+    }\n+\n+    val host = args(0)\n+    val port = args(1).toInt\n+    val windowSize = args(2).toInt\n+    val slideSize = args(3).toInt\n+    if (slideSize > windowSize) {\n+      System.err.println(\"<slide duration> must be less than or equal to <window duration>\")\n+    }\n+\n+    val spark = SparkSession\n+      .builder\n+      .appName(\"StructuredNetworkWordCountWindowed\")\n+      .getOrCreate()\n+\n+    import spark.implicits._\n+\n+    // Create DataFrame representing the stream of input lines from connection to host:port\n+    val lines = spark.readStream\n+      .format(\"socket\")\n+      .option(\"host\", host)\n+      .option(\"port\", port)\n+      .option(\"includeTimestamp\", true)\n+      .load().as[(String, Timestamp)]\n+\n+    // Split the lines into words, retaining timestamps\n+    val words = lines.flatMap(line =>\n+      line._1.split(\" \").map(word => (word, line._2))\n+    ).toDF(\"word\", \"timestamp\")\n+\n+    // Group the data by window and word and compute the count of each group\n+    val windowedCounts = words.groupBy(\n+      window(words.col(\"timestamp\"), s\"$windowSize seconds\", s\"$slideSize seconds\"),"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "Also move the \"$windowSize seconds\" higher up .. similar to the python, so that this piece of code looks simpler, and can be exactly copied over to the guide.\n",
    "commit": "8f97b66f55ececd91434a3f9a3b28dd6c5412d46",
    "createdAt": "2016-07-01T20:39:26Z",
    "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.sql.streaming\n+\n+import java.sql.Timestamp\n+\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.functions._\n+\n+/**\n+ * Counts words in UTF8 encoded, '\\n' delimited text received from the network over a\n+ * sliding window of configurable duration. Each line from the network is tagged\n+ * with a timestamp that is used to determine the windows into which it falls.\n+ *\n+ * Usage: StructuredNetworkWordCountWindowed <hostname> <port> <window duration> <slide duration>\n+ * <hostname> and <port> describe the TCP server that Structured Streaming\n+ * would connect to receive data.\n+ * <window duration> gives the size of window, specified as integer number of seconds\n+ * <slide duration> gives the amount of time successive windows are offset from one another,\n+ * given in the same units as above. <slide duration> should be less than or equal to\n+ * <window duration>. If the two are equal, successive windows have no overlap.\n+ *\n+ * To run this on your local machine, you need to first run a Netcat server\n+ *    `$ nc -lk 9999`\n+ * and then run the example\n+ *    `$ bin/run-example sql.streaming.StructuredNetworkWordCountWindowed\n+ *    localhost 9999 <window duration> <slide duration>`\n+ *\n+ * One recommended <window duration>, <slide duration> pair is 60, 30\n+ */\n+object StructuredNetworkWordCountWindowed {\n+\n+  def main(args: Array[String]) {\n+    if (args.length < 4) {\n+      System.err.println(\"Usage: StructuredNetworkWordCountWindowed <hostname> <port>\" +\n+        \" <window duration in seconds> <slide duration in seconds>\")\n+      System.exit(1)\n+    }\n+\n+    val host = args(0)\n+    val port = args(1).toInt\n+    val windowSize = args(2).toInt\n+    val slideSize = args(3).toInt\n+    if (slideSize > windowSize) {\n+      System.err.println(\"<slide duration> must be less than or equal to <window duration>\")\n+    }\n+\n+    val spark = SparkSession\n+      .builder\n+      .appName(\"StructuredNetworkWordCountWindowed\")\n+      .getOrCreate()\n+\n+    import spark.implicits._\n+\n+    // Create DataFrame representing the stream of input lines from connection to host:port\n+    val lines = spark.readStream\n+      .format(\"socket\")\n+      .option(\"host\", host)\n+      .option(\"port\", port)\n+      .option(\"includeTimestamp\", true)\n+      .load().as[(String, Timestamp)]\n+\n+    // Split the lines into words, retaining timestamps\n+    val words = lines.flatMap(line =>\n+      line._1.split(\" \").map(word => (word, line._2))\n+    ).toDF(\"word\", \"timestamp\")\n+\n+    // Group the data by window and word and compute the count of each group\n+    val windowedCounts = words.groupBy(\n+      window(words.col(\"timestamp\"), s\"$windowSize seconds\", s\"$slideSize seconds\"),"
  }],
  "prId": 13957
}]