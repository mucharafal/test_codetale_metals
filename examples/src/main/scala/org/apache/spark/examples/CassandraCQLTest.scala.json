[{
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "Add a space after the comma\n",
    "commit": "3493f81e81b783afa35cd996219bfe36db383c1b",
    "createdAt": "2014-03-06T04:56:45Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.hadoop.mapreduce.Job\n+import org.apache.cassandra.hadoop.ConfigHelper\n+import org.apache.cassandra.utils.ByteBufferUtil\n+import org.apache.cassandra.hadoop.cql3.CqlPagingInputFormat\n+import org.apache.cassandra.db.IColumn\n+import org.apache.cassandra.hadoop.cql3.CqlConfigHelper\n+import org.apache.cassandra.hadoop.cql3.CqlOutputFormat\n+import scala.collection.JavaConversions._\n+import java.nio.ByteBuffer\n+import scala.collection.mutable.ListBuffer\n+import scala.collection.immutable.Map\n+\n+/*\n+  Need to create following keyspace and column family in cassandra before running this example\n+  Start CQL shell using ./bin/cqlsh and execute following commands\n+  CREATE KEYSPACE retail WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};\n+  use retail;\n+\n+  CREATE TABLE salecount (product_id text,sale_count int, PRIMARY KEY (product_id));\n+  CREATE TABLE ordercf (user_id text,\n+    time timestamp,\n+    product_id text,\n+    quantity int,\n+    PRIMARY KEY (user_id, time));\n+  INSERT INTO ordercf (user_id, time, product_id, quantity) VALUES ('bob', 1385983646000, 'iphone', 1);\n+  INSERT INTO ordercf (user_id, time, product_id, quantity) VALUES ('tom', 1385983647000, 'samsung', 4);\n+  INSERT INTO ordercf (user_id, time, product_id, quantity) VALUES ('dora', 1385983648000, 'nokia', 2);\n+  INSERT INTO ordercf (user_id, time, product_id, quantity) VALUES ('charlie', 1385983649000, 'iphone', 2);\n+*/\n+ \n+/*\n+ * This example demonstrates how to read and write to cassandra column family created using CQL3\n+ * using Spark.\n+ * Parameters : <spark_master> <cassandra_node> <cassandra_port>\n+ * Usage: ./bin/run-example org.apache.spark.examples.CassandraCQLTest local[2] localhost 9160\n+ *\n+ */\n+object CassandraCQLTest {\n+\n+  def main(args: Array[String]) {\n+    val sc = new SparkContext(args(0), \"CQLTestApp\", System.getenv(\"SPARK_HOME\"), SparkContext.jarOfClass(this.getClass))\n+    val cHost: String = args(1)\n+    val cPort: String = args(2)\n+    val KeySpace = \"retail\"\n+    val InputColumnFamily = \"ordercf\"\n+    val OutputColumnFamily = \"salecount\"\n+\n+    val job = new Job()\n+    job.setInputFormatClass(classOf[CqlPagingInputFormat])\n+    ConfigHelper.setInputInitialAddress(job.getConfiguration(), cHost)\n+    ConfigHelper.setInputRpcPort(job.getConfiguration(), cPort)\n+    ConfigHelper.setInputColumnFamily(job.getConfiguration(), KeySpace, InputColumnFamily)\n+    ConfigHelper.setInputPartitioner(job.getConfiguration(), \"Murmur3Partitioner\")\n+    CqlConfigHelper.setInputCQLPageRowSize(job.getConfiguration(), \"3\");\n+\n+    // CqlConfigHelper.setInputWhereClauses(job.getConfiguration(), \"user_id='bob'\");\n+\n+    // An UPDATE writes one or more columns to a record in a Cassandra column family. \n+    val query:String = \"UPDATE \" + KeySpace + \".\" + OutputColumnFamily + \" SET sale_count = ? \"\n+    CqlConfigHelper.setOutputCql(job.getConfiguration(), query);\n+\n+    job.setOutputFormatClass(classOf[CqlOutputFormat]);\n+    ConfigHelper.setOutputColumnFamily(job.getConfiguration(), KeySpace, OutputColumnFamily);\n+    ConfigHelper.setOutputInitialAddress(job.getConfiguration(), cHost);\n+    ConfigHelper.setOutputRpcPort(job.getConfiguration(), cPort)\n+    ConfigHelper.setOutputPartitioner(job.getConfiguration(), \"Murmur3Partitioner\");\n+\n+    val casRdd = sc.newAPIHadoopRDD(job.getConfiguration(),\n+      classOf[CqlPagingInputFormat],\n+      classOf[java.util.Map[String,ByteBuffer]],\n+      classOf[java.util.Map[String,ByteBuffer]])\n+\n+    println(\"Count: \" + casRdd.count);\n+    val productSaleRDD = casRdd.map {\n+      case (key, value) => {\n+        (ByteBufferUtil.string(value.get(\"product_id\")),ByteBufferUtil.toInt(value.get(\"quantity\")))"
  }],
  "prId": 87
}, {
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "Typically we don't declare the `String` type in this situation: \n\n```\nval query = \"UPDATE \" + KeySpace + \".\" + OutputColumnFamily + \" SET sale_count = ? \"\n```\n\nor with interpolation\n\n```\nval query = s\"UPDATE $KeySpace.$OutputColumnFamily SET sale_count = ? \"\n```\n",
    "commit": "3493f81e81b783afa35cd996219bfe36db383c1b",
    "createdAt": "2014-03-06T04:58:28Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.hadoop.mapreduce.Job\n+import org.apache.cassandra.hadoop.ConfigHelper\n+import org.apache.cassandra.utils.ByteBufferUtil\n+import org.apache.cassandra.hadoop.cql3.CqlPagingInputFormat\n+import org.apache.cassandra.db.IColumn\n+import org.apache.cassandra.hadoop.cql3.CqlConfigHelper\n+import org.apache.cassandra.hadoop.cql3.CqlOutputFormat\n+import scala.collection.JavaConversions._\n+import java.nio.ByteBuffer\n+import scala.collection.mutable.ListBuffer\n+import scala.collection.immutable.Map\n+\n+/*\n+  Need to create following keyspace and column family in cassandra before running this example\n+  Start CQL shell using ./bin/cqlsh and execute following commands\n+  CREATE KEYSPACE retail WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};\n+  use retail;\n+\n+  CREATE TABLE salecount (product_id text,sale_count int, PRIMARY KEY (product_id));\n+  CREATE TABLE ordercf (user_id text,\n+    time timestamp,\n+    product_id text,\n+    quantity int,\n+    PRIMARY KEY (user_id, time));\n+  INSERT INTO ordercf (user_id, time, product_id, quantity) VALUES ('bob', 1385983646000, 'iphone', 1);\n+  INSERT INTO ordercf (user_id, time, product_id, quantity) VALUES ('tom', 1385983647000, 'samsung', 4);\n+  INSERT INTO ordercf (user_id, time, product_id, quantity) VALUES ('dora', 1385983648000, 'nokia', 2);\n+  INSERT INTO ordercf (user_id, time, product_id, quantity) VALUES ('charlie', 1385983649000, 'iphone', 2);\n+*/\n+ \n+/*\n+ * This example demonstrates how to read and write to cassandra column family created using CQL3\n+ * using Spark.\n+ * Parameters : <spark_master> <cassandra_node> <cassandra_port>\n+ * Usage: ./bin/run-example org.apache.spark.examples.CassandraCQLTest local[2] localhost 9160\n+ *\n+ */\n+object CassandraCQLTest {\n+\n+  def main(args: Array[String]) {\n+    val sc = new SparkContext(args(0), \"CQLTestApp\", System.getenv(\"SPARK_HOME\"), SparkContext.jarOfClass(this.getClass))\n+    val cHost: String = args(1)\n+    val cPort: String = args(2)\n+    val KeySpace = \"retail\"\n+    val InputColumnFamily = \"ordercf\"\n+    val OutputColumnFamily = \"salecount\"\n+\n+    val job = new Job()\n+    job.setInputFormatClass(classOf[CqlPagingInputFormat])\n+    ConfigHelper.setInputInitialAddress(job.getConfiguration(), cHost)\n+    ConfigHelper.setInputRpcPort(job.getConfiguration(), cPort)\n+    ConfigHelper.setInputColumnFamily(job.getConfiguration(), KeySpace, InputColumnFamily)\n+    ConfigHelper.setInputPartitioner(job.getConfiguration(), \"Murmur3Partitioner\")\n+    CqlConfigHelper.setInputCQLPageRowSize(job.getConfiguration(), \"3\");\n+\n+    // CqlConfigHelper.setInputWhereClauses(job.getConfiguration(), \"user_id='bob'\");\n+\n+    // An UPDATE writes one or more columns to a record in a Cassandra column family. \n+    val query:String = \"UPDATE \" + KeySpace + \".\" + OutputColumnFamily + \" SET sale_count = ? \""
  }],
  "prId": 87
}, {
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "no need for the semi-colon: `;`... there are a bunch in this file, mind removing them?\n",
    "commit": "3493f81e81b783afa35cd996219bfe36db383c1b",
    "createdAt": "2014-03-06T04:59:19Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.SparkContext._\n+import org.apache.hadoop.mapreduce.Job\n+import org.apache.cassandra.hadoop.ConfigHelper\n+import org.apache.cassandra.utils.ByteBufferUtil\n+import org.apache.cassandra.hadoop.cql3.CqlPagingInputFormat\n+import org.apache.cassandra.db.IColumn\n+import org.apache.cassandra.hadoop.cql3.CqlConfigHelper\n+import org.apache.cassandra.hadoop.cql3.CqlOutputFormat\n+import scala.collection.JavaConversions._\n+import java.nio.ByteBuffer\n+import scala.collection.mutable.ListBuffer\n+import scala.collection.immutable.Map\n+\n+/*\n+  Need to create following keyspace and column family in cassandra before running this example\n+  Start CQL shell using ./bin/cqlsh and execute following commands\n+  CREATE KEYSPACE retail WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};\n+  use retail;\n+\n+  CREATE TABLE salecount (product_id text,sale_count int, PRIMARY KEY (product_id));\n+  CREATE TABLE ordercf (user_id text,\n+    time timestamp,\n+    product_id text,\n+    quantity int,\n+    PRIMARY KEY (user_id, time));\n+  INSERT INTO ordercf (user_id, time, product_id, quantity) VALUES ('bob', 1385983646000, 'iphone', 1);\n+  INSERT INTO ordercf (user_id, time, product_id, quantity) VALUES ('tom', 1385983647000, 'samsung', 4);\n+  INSERT INTO ordercf (user_id, time, product_id, quantity) VALUES ('dora', 1385983648000, 'nokia', 2);\n+  INSERT INTO ordercf (user_id, time, product_id, quantity) VALUES ('charlie', 1385983649000, 'iphone', 2);\n+*/\n+ \n+/*\n+ * This example demonstrates how to read and write to cassandra column family created using CQL3\n+ * using Spark.\n+ * Parameters : <spark_master> <cassandra_node> <cassandra_port>\n+ * Usage: ./bin/run-example org.apache.spark.examples.CassandraCQLTest local[2] localhost 9160\n+ *\n+ */\n+object CassandraCQLTest {\n+\n+  def main(args: Array[String]) {\n+    val sc = new SparkContext(args(0), \"CQLTestApp\", System.getenv(\"SPARK_HOME\"), SparkContext.jarOfClass(this.getClass))\n+    val cHost: String = args(1)\n+    val cPort: String = args(2)\n+    val KeySpace = \"retail\"\n+    val InputColumnFamily = \"ordercf\"\n+    val OutputColumnFamily = \"salecount\"\n+\n+    val job = new Job()\n+    job.setInputFormatClass(classOf[CqlPagingInputFormat])\n+    ConfigHelper.setInputInitialAddress(job.getConfiguration(), cHost)\n+    ConfigHelper.setInputRpcPort(job.getConfiguration(), cPort)\n+    ConfigHelper.setInputColumnFamily(job.getConfiguration(), KeySpace, InputColumnFamily)\n+    ConfigHelper.setInputPartitioner(job.getConfiguration(), \"Murmur3Partitioner\")\n+    CqlConfigHelper.setInputCQLPageRowSize(job.getConfiguration(), \"3\");\n+\n+    // CqlConfigHelper.setInputWhereClauses(job.getConfiguration(), \"user_id='bob'\");"
  }],
  "prId": 87
}]