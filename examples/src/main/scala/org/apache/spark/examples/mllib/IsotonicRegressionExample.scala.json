[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "remove the blank line\n",
    "commit": "331eab24603f6df1f9dd650625b89a5454777bc2",
    "createdAt": "2015-10-30T01:10:35Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+// $example on$\n+import org.apache.spark.mllib.regression.{IsotonicRegression, IsotonicRegressionModel}\n+// $example off$\n+import org.apache.spark.{SparkConf, SparkContext}\n+\n+object IsotonicRegressionExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"IsotonicRegressionExample\")\n+    val sc = new SparkContext(conf)\n+\n+    // $example on$\n+    val data = sc.textFile(\"data/mllib/sample_isotonic_regression_data.txt\")\n+\n+    // Create label, feature, weight tuples from input data with weight set to default value 1.0.\n+    val parsedData = data.map { line =>\n+      val parts = line.split(',').map(_.toDouble)\n+      (parts(0), parts(1), 1.0)\n+    }\n+\n+    // Split data into training (60%) and test (40%) sets.\n+    val splits = parsedData.randomSplit(Array(0.6, 0.4), seed = 11L)\n+    val training = splits(0)\n+    val test = splits(1)\n+\n+    // Create isotonic regression model from training data.\n+    // Isotonic parameter defaults to true so it is only shown for demonstration\n+    val model = new IsotonicRegression().setIsotonic(true).run(training)\n+\n+    // Create tuples of predicted and real labels.\n+    val predictionAndLabel = test.map { point =>\n+      val predictedLabel = model.predict(point._2)\n+      (predictedLabel, point._1)\n+    }\n+\n+    // Calculate mean squared error between predicted and real labels.\n+    val meanSquaredError = predictionAndLabel.map { case (p, l) => math.pow((p - l), 2) }.mean()\n+    println(\"Mean Squared Error = \" + meanSquaredError)\n+\n+    // Save and load model\n+    model.save(sc, \"myModelPath\")\n+    val sameModel = IsotonicRegressionModel.load(sc, \"myModelPath\")\n+"
  }],
  "prId": 9353
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Add `: Unit =` to the method declaration.\n",
    "commit": "331eab24603f6df1f9dd650625b89a5454777bc2",
    "createdAt": "2015-10-30T06:09:39Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+// $example on$\n+import org.apache.spark.mllib.regression.{IsotonicRegression, IsotonicRegressionModel}\n+// $example off$\n+import org.apache.spark.{SparkConf, SparkContext}\n+\n+object IsotonicRegressionExample {\n+\n+  def main(args: Array[String]) {"
  }],
  "prId": 9353
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Maybe it useful to change it to `\"target/tmp/myIsotonicRegressionModel\"` because users might run in under `spark/` folder.\n",
    "commit": "331eab24603f6df1f9dd650625b89a5454777bc2",
    "createdAt": "2015-10-30T06:09:41Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+// $example on$\n+import org.apache.spark.mllib.regression.{IsotonicRegression, IsotonicRegressionModel}\n+// $example off$\n+import org.apache.spark.{SparkConf, SparkContext}\n+\n+object IsotonicRegressionExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"IsotonicRegressionExample\")\n+    val sc = new SparkContext(conf)\n+    // $example on$\n+    val data = sc.textFile(\"data/mllib/sample_isotonic_regression_data.txt\")\n+\n+    // Create label, feature, weight tuples from input data with weight set to default value 1.0.\n+    val parsedData = data.map { line =>\n+      val parts = line.split(',').map(_.toDouble)\n+      (parts(0), parts(1), 1.0)\n+    }\n+\n+    // Split data into training (60%) and test (40%) sets.\n+    val splits = parsedData.randomSplit(Array(0.6, 0.4), seed = 11L)\n+    val training = splits(0)\n+    val test = splits(1)\n+\n+    // Create isotonic regression model from training data.\n+    // Isotonic parameter defaults to true so it is only shown for demonstration\n+    val model = new IsotonicRegression().setIsotonic(true).run(training)\n+\n+    // Create tuples of predicted and real labels.\n+    val predictionAndLabel = test.map { point =>\n+      val predictedLabel = model.predict(point._2)\n+      (predictedLabel, point._1)\n+    }\n+\n+    // Calculate mean squared error between predicted and real labels.\n+    val meanSquaredError = predictionAndLabel.map { case (p, l) => math.pow((p - l), 2) }.mean()\n+    println(\"Mean Squared Error = \" + meanSquaredError)\n+\n+    // Save and load model\n+    model.save(sc, \"myModelPath\")"
  }],
  "prId": 9353
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "same here\n",
    "commit": "331eab24603f6df1f9dd650625b89a5454777bc2",
    "createdAt": "2015-10-30T06:09:43Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib\n+\n+// $example on$\n+import org.apache.spark.mllib.regression.{IsotonicRegression, IsotonicRegressionModel}\n+// $example off$\n+import org.apache.spark.{SparkConf, SparkContext}\n+\n+object IsotonicRegressionExample {\n+\n+  def main(args: Array[String]) {\n+\n+    val conf = new SparkConf().setAppName(\"IsotonicRegressionExample\")\n+    val sc = new SparkContext(conf)\n+    // $example on$\n+    val data = sc.textFile(\"data/mllib/sample_isotonic_regression_data.txt\")\n+\n+    // Create label, feature, weight tuples from input data with weight set to default value 1.0.\n+    val parsedData = data.map { line =>\n+      val parts = line.split(',').map(_.toDouble)\n+      (parts(0), parts(1), 1.0)\n+    }\n+\n+    // Split data into training (60%) and test (40%) sets.\n+    val splits = parsedData.randomSplit(Array(0.6, 0.4), seed = 11L)\n+    val training = splits(0)\n+    val test = splits(1)\n+\n+    // Create isotonic regression model from training data.\n+    // Isotonic parameter defaults to true so it is only shown for demonstration\n+    val model = new IsotonicRegression().setIsotonic(true).run(training)\n+\n+    // Create tuples of predicted and real labels.\n+    val predictionAndLabel = test.map { point =>\n+      val predictedLabel = model.predict(point._2)\n+      (predictedLabel, point._1)\n+    }\n+\n+    // Calculate mean squared error between predicted and real labels.\n+    val meanSquaredError = predictionAndLabel.map { case (p, l) => math.pow((p - l), 2) }.mean()\n+    println(\"Mean Squared Error = \" + meanSquaredError)\n+\n+    // Save and load model\n+    model.save(sc, \"myModelPath\")\n+    val sameModel = IsotonicRegressionModel.load(sc, \"myModelPath\")"
  }],
  "prId": 9353
}]