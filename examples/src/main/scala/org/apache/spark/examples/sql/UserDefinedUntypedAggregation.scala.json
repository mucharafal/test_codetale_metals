[{
  "comments": [{
    "author": {
      "login": "assafmendelson"
    },
    "body": "Maybe add a little explanation here. For example, when I first saw this I tried to figure out where \"salary\" appears in the code as in practice it is being accessed by index only (input.getLong(0)). ",
    "commit": "0b17e132b24daf0f0eab5cd53e3dc84ffb56c2dd",
    "createdAt": "2016-12-19T08:54:58Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.sql\n+\n+// $example on:untyped_custom_aggregation$\n+import org.apache.spark.sql.expressions.MutableAggregationBuffer\n+import org.apache.spark.sql.expressions.UserDefinedAggregateFunction\n+import org.apache.spark.sql.types._\n+import org.apache.spark.sql.Row\n+import org.apache.spark.sql.SparkSession\n+// $example off:untyped_custom_aggregation$\n+\n+object UserDefinedUntypedAggregation {\n+\n+  // $example on:untyped_custom_aggregation$\n+  object MyAverage extends UserDefinedAggregateFunction {\n+    // Data types of input arguments\n+    def inputSchema: StructType = StructType(StructField(\"salary\", LongType) :: Nil)"
  }, {
    "author": {
      "login": "aokolnychyi"
    },
    "body": "@assafmendelson Yes, your point is definitely reasonable. Now I am thinking whether I should keep \"salary\" here. As an option, I can replace \"salary\" with \"inputColumn\" or something like this to make `MyAverage` more generic. No reason to bound it to salary. What's your opinion?",
    "commit": "0b17e132b24daf0f0eab5cd53e3dc84ffb56c2dd",
    "createdAt": "2016-12-19T12:02:53Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.sql\n+\n+// $example on:untyped_custom_aggregation$\n+import org.apache.spark.sql.expressions.MutableAggregationBuffer\n+import org.apache.spark.sql.expressions.UserDefinedAggregateFunction\n+import org.apache.spark.sql.types._\n+import org.apache.spark.sql.Row\n+import org.apache.spark.sql.SparkSession\n+// $example off:untyped_custom_aggregation$\n+\n+object UserDefinedUntypedAggregation {\n+\n+  // $example on:untyped_custom_aggregation$\n+  object MyAverage extends UserDefinedAggregateFunction {\n+    // Data types of input arguments\n+    def inputSchema: StructType = StructType(StructField(\"salary\", LongType) :: Nil)"
  }, {
    "author": {
      "login": "assafmendelson"
    },
    "body": "I would go with inputColumn. \r\nWhat I think should be more strongly explained is that this is basically the schema of the input for the aggregate function and not for the source dataframe.  Basically someone might think that their original dataframe might need to have this name for the column.",
    "commit": "0b17e132b24daf0f0eab5cd53e3dc84ffb56c2dd",
    "createdAt": "2016-12-19T12:53:58Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.sql\n+\n+// $example on:untyped_custom_aggregation$\n+import org.apache.spark.sql.expressions.MutableAggregationBuffer\n+import org.apache.spark.sql.expressions.UserDefinedAggregateFunction\n+import org.apache.spark.sql.types._\n+import org.apache.spark.sql.Row\n+import org.apache.spark.sql.SparkSession\n+// $example off:untyped_custom_aggregation$\n+\n+object UserDefinedUntypedAggregation {\n+\n+  // $example on:untyped_custom_aggregation$\n+  object MyAverage extends UserDefinedAggregateFunction {\n+    // Data types of input arguments\n+    def inputSchema: StructType = StructType(StructField(\"salary\", LongType) :: Nil)"
  }],
  "prId": 16329
}, {
  "comments": [{
    "author": {
      "login": "assafmendelson"
    },
    "body": "I believe an explanation on what MutableAggregationBuffer is should be added.\r\nBasically explain the fact that it is a row, how to access it, what it means for it to be mutable (including probably explaining that arrays and map types are immutable even if the buffer itself is mutable) etc.",
    "commit": "0b17e132b24daf0f0eab5cd53e3dc84ffb56c2dd",
    "createdAt": "2016-12-19T09:00:32Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.sql\n+\n+// $example on:untyped_custom_aggregation$\n+import org.apache.spark.sql.expressions.MutableAggregationBuffer\n+import org.apache.spark.sql.expressions.UserDefinedAggregateFunction\n+import org.apache.spark.sql.types._\n+import org.apache.spark.sql.Row\n+import org.apache.spark.sql.SparkSession\n+// $example off:untyped_custom_aggregation$\n+\n+object UserDefinedUntypedAggregation {\n+\n+  // $example on:untyped_custom_aggregation$\n+  object MyAverage extends UserDefinedAggregateFunction {\n+    // Data types of input arguments\n+    def inputSchema: StructType = StructType(StructField(\"salary\", LongType) :: Nil)\n+    // Data types of values in the aggregation buffer\n+    def bufferSchema: StructType = {\n+      StructType(StructField(\"sum\", LongType) :: StructField(\"count\", LongType) :: Nil)\n+    }\n+    // The data type of the returned value\n+    def dataType: DataType = DoubleType\n+    // Whether this function always returns the same output on the identical input\n+    def deterministic: Boolean = true\n+    // Initializes the given aggregation buffer\n+    def initialize(buffer: MutableAggregationBuffer): Unit = {"
  }, {
    "author": {
      "login": "aokolnychyi"
    },
    "body": "Agree, I will try to add a small but meaningful explanation here. ",
    "commit": "0b17e132b24daf0f0eab5cd53e3dc84ffb56c2dd",
    "createdAt": "2016-12-19T12:05:24Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.sql\n+\n+// $example on:untyped_custom_aggregation$\n+import org.apache.spark.sql.expressions.MutableAggregationBuffer\n+import org.apache.spark.sql.expressions.UserDefinedAggregateFunction\n+import org.apache.spark.sql.types._\n+import org.apache.spark.sql.Row\n+import org.apache.spark.sql.SparkSession\n+// $example off:untyped_custom_aggregation$\n+\n+object UserDefinedUntypedAggregation {\n+\n+  // $example on:untyped_custom_aggregation$\n+  object MyAverage extends UserDefinedAggregateFunction {\n+    // Data types of input arguments\n+    def inputSchema: StructType = StructType(StructField(\"salary\", LongType) :: Nil)\n+    // Data types of values in the aggregation buffer\n+    def bufferSchema: StructType = {\n+      StructType(StructField(\"sum\", LongType) :: StructField(\"count\", LongType) :: Nil)\n+    }\n+    // The data type of the returned value\n+    def dataType: DataType = DoubleType\n+    // Whether this function always returns the same output on the identical input\n+    def deterministic: Boolean = true\n+    // Initializes the given aggregation buffer\n+    def initialize(buffer: MutableAggregationBuffer): Unit = {"
  }],
  "prId": 16329
}]