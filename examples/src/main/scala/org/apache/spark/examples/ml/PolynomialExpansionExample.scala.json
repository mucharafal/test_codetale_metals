[{
  "comments": [{
    "author": {
      "login": "BenFradet"
    },
    "body": "Trailing lines\n",
    "commit": "771d015000114828ab32e38301acbb50df150f9d",
    "createdAt": "2015-12-09T09:36:42Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+// $example on$\n+import org.apache.spark.ml.feature.PolynomialExpansion\n+import org.apache.spark.mllib.linalg.Vectors\n+// $example off$\n+import org.apache.spark.sql.SQLContext\n+import org.apache.spark.{SparkConf, SparkContext}\n+\n+object PolynomialExpansionExample {\n+  def main(args: Array[String]): Unit = {\n+    val conf = new SparkConf().setAppName(\"PolynomialExpansionExample\")\n+    val sc = new SparkContext(conf)\n+    val sqlContext = new SQLContext(sc)\n+\n+    // $example on$\n+    val data = Array(\n+      Vectors.dense(-2.0, 2.3),\n+      Vectors.dense(0.0, 0.0),\n+      Vectors.dense(0.6, -1.1)\n+    )\n+    val df = sqlContext.createDataFrame(data.map(Tuple1.apply)).toDF(\"features\")\n+    val polynomialExpansion = new PolynomialExpansion()\n+      .setInputCol(\"features\")\n+      .setOutputCol(\"polyFeatures\")\n+      .setDegree(3)\n+    val polyDF = polynomialExpansion.transform(df)\n+    polyDF.select(\"polyFeatures\").take(3).foreach(println)\n+    // $example off$\n+    sc.stop()\n+  }\n+}\n+// scalastyle:on println\n+\n+"
  }],
  "prId": 10219
}]