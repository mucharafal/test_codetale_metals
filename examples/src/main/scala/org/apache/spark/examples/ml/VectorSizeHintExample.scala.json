[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "ditto.",
    "commit": "3055eec72bb71e7fe7d586903fbf8ea57a70fa82",
    "createdAt": "2018-01-18T00:56:14Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.ml\n+\n+// $example on$\n+import org.apache.spark.ml.feature.{VectorAssembler, VectorSizeHint}\n+import org.apache.spark.ml.linalg.Vectors\n+// $example off$\n+import org.apache.spark.sql.SparkSession\n+\n+object VectorSizeHintExample {\n+  def main(args: Array[String]): Unit = {\n+    val spark = SparkSession\n+      .builder\n+      .appName(\"VectorSizeHintExample\")\n+      .getOrCreate()\n+\n+    // $example on$\n+    val dataset = spark.createDataFrame(\n+      Seq(\n+        (0, 18, 1.0, Vectors.dense(0.0, 10.0, 0.5), 1.0),\n+        (0, 18, 1.0, Vectors.dense(0.0, 10.0), 0.0))\n+    ).toDF(\"id\", \"hour\", \"mobile\", \"userFeatures\", \"clicked\")\n+\n+    val sizeHint = new VectorSizeHint()\n+      .setInputCol(\"userFeatures\")\n+      .setHandleInvalid(\"skip\")\n+      .setSize(3)\n+\n+    val datasetWithSize = sizeHint.transform(dataset)\n+    println(\"Rows where 'userFeatures' is not the right size are filtered out\")\n+    datasetWithSize.show(false)\n+\n+    val assembler = new VectorAssembler()\n+      .setInputCols(Array(\"hour\", \"mobile\", \"userFeatures\"))\n+      .setOutputCol(\"features\")\n+\n+    // This dataframe can be used by used by downstream transformers as before"
  }],
  "prId": 20285
}]