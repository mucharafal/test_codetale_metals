[{
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "use `SparkSession` builder pattern as per https://github.com/apache/spark/pull/12281#discussion_r62179743\n",
    "commit": "8cd45d33281f1435ddef5fef00c0b10e349b76dd",
    "createdAt": "2016-05-05T12:50:24Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml\n+\n+// scalastyle:off println\n+\n+import org.apache.spark.{SparkConf, SparkContext}\n+// $example on$\n+import org.apache.spark.ml.clustering.BisectingKMeans\n+import org.apache.spark.mllib.linalg.Vectors\n+// $example off$\n+import org.apache.spark.sql.{DataFrame, SQLContext}\n+\n+/**\n+ * An example demonstrating a bisecting k-means clustering.\n+ * Run with\n+ * {{{\n+ * bin/run-example ml.BisectingKMeansExample\n+ * }}}\n+ */\n+object BisectingKMeansExample {\n+\n+  def main(args: Array[String]): Unit = {\n+    // Creates a Spark context and a SQL context\n+    val conf = new SparkConf().setAppName(\"BisectingKMeansExample\")"
  }],
  "prId": 11844
}, {
  "comments": [{
    "author": {
      "login": "sethah"
    },
    "body": "So, in updating the Kmeans examples, I had the same issues that make this code a bit ugly. I came up with:\n\n``` scala\nval vecAssembler = new VectorAssembler()\n      .setInputCols(Array(\"x\", \"y\", \"z\"))\n      .setOutputCol(\"features\")\n\n    val schema = StructType(Array(\n      StructField(\"x\", DataTypes.DoubleType),\n      StructField(\"y\", DataTypes.DoubleType),\n      StructField(\"z\", DataTypes.DoubleType)))\n\n    val dataset = vecAssembler.transform(\n      spark.read\n      .format(\"csv\")\n      .option(\"sep\", \" \")\n      .schema(schema)\n      .load(\"data/mllib/kmeans_data.txt\"))\n```\n\nI think it's a little bit better since we don't convert to RDD in what we claim is the \"dataframe API,\" but I am not certain what is best. Thoughts? @MLnick \n",
    "commit": "8cd45d33281f1435ddef5fef00c0b10e349b76dd",
    "createdAt": "2016-05-05T20:42:22Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml\n+\n+// scalastyle:off println\n+\n+// $example on$\n+import org.apache.spark.ml.clustering.BisectingKMeans\n+import org.apache.spark.mllib.linalg.{Vectors, VectorUDT}\n+import org.apache.spark.sql.{DataFrame, Row, SparkSession}\n+import org.apache.spark.sql.types.{StructField, StructType}\n+// $example off$\n+\n+/**\n+ * An example demonstrating a bisecting k-means clustering.\n+ * Run with\n+ * {{{\n+ * bin/run-example ml.BisectingKMeansExample\n+ * }}}\n+ */\n+object BisectingKMeansExample {\n+\n+  def main(args: Array[String]): Unit = {\n+    // Creates a SparkSession\n+    val spark = SparkSession.builder.appName(\"BisectingKMeansExample\").getOrCreate()\n+\n+    // $example on$\n+    // Crates a DataFrame\n+    val rowRDD = spark.read.text(\"data/mllib/kmeans_data.txt\").rdd"
  }, {
    "author": {
      "login": "yanboliang"
    },
    "body": "@sethah 's proposal is feasible. I'd like to use dataset with libsvm format, then we can load it use `spark.read.format(\"libsvm\")`. We can get features with `Vector` type and feed them into model training directly. Although the dataset has label column but we don't use it actually. This will make the example more succinct.\n",
    "commit": "8cd45d33281f1435ddef5fef00c0b10e349b76dd",
    "createdAt": "2016-05-06T08:07:41Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml\n+\n+// scalastyle:off println\n+\n+// $example on$\n+import org.apache.spark.ml.clustering.BisectingKMeans\n+import org.apache.spark.mllib.linalg.{Vectors, VectorUDT}\n+import org.apache.spark.sql.{DataFrame, Row, SparkSession}\n+import org.apache.spark.sql.types.{StructField, StructType}\n+// $example off$\n+\n+/**\n+ * An example demonstrating a bisecting k-means clustering.\n+ * Run with\n+ * {{{\n+ * bin/run-example ml.BisectingKMeansExample\n+ * }}}\n+ */\n+object BisectingKMeansExample {\n+\n+  def main(args: Array[String]): Unit = {\n+    // Creates a SparkSession\n+    val spark = SparkSession.builder.appName(\"BisectingKMeansExample\").getOrCreate()\n+\n+    // $example on$\n+    // Crates a DataFrame\n+    val rowRDD = spark.read.text(\"data/mllib/kmeans_data.txt\").rdd"
  }, {
    "author": {
      "login": "MLnick"
    },
    "body": "Yeah, I propose we just use an existing LIBSVM example data file, or we can\ncreate a new one from kmeans_example_data.\n\nOn Fri, 6 May 2016 at 10:08 Yanbo Liang notifications@github.com wrote:\n\n> In\n> examples/src/main/scala/org/apache/spark/examples/ml/BisectingKMeansExample.scala\n> https://github.com/apache/spark/pull/11844#discussion_r62299617:\n> \n> > +/**\n> > - \\* An example demonstrating a bisecting k-means clustering.\n> > - \\* Run with\n> > - \\* {{{\n> > - \\* bin/run-example ml.BisectingKMeansExample\n> > - \\* }}}\n> > - */\n> >   +object BisectingKMeansExample {\n> >   +\n> > -  def main(args: Array[String]): Unit = {\n> > -    // Creates a SparkSession\n> > -    val spark = SparkSession.builder.appName(\"BisectingKMeansExample\").getOrCreate()\n> >   +\n> > -    // $example on$\n> > -    // Crates a DataFrame\n> > -    val rowRDD = spark.read.text(\"data/mllib/kmeans_data.txt\").rdd\n> \n> @sethah https://github.com/sethah 's proposal is feasible. I'd like to\n> use dataset with libsvm format, then we can load it directly use\n> spark.read.format(\"libsvm\"). We can get features with Vector type and\n> feed them into model training. Although the dataset has label column but we\n> don't use actually. This will make the example more succinct.\n> \n> â€”\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/spark/pull/11844/files/e2aaabd318a76b6edc59a99cfbc0f6239c833c0c#r62299617\n",
    "commit": "8cd45d33281f1435ddef5fef00c0b10e349b76dd",
    "createdAt": "2016-05-06T09:19:45Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml\n+\n+// scalastyle:off println\n+\n+// $example on$\n+import org.apache.spark.ml.clustering.BisectingKMeans\n+import org.apache.spark.mllib.linalg.{Vectors, VectorUDT}\n+import org.apache.spark.sql.{DataFrame, Row, SparkSession}\n+import org.apache.spark.sql.types.{StructField, StructType}\n+// $example off$\n+\n+/**\n+ * An example demonstrating a bisecting k-means clustering.\n+ * Run with\n+ * {{{\n+ * bin/run-example ml.BisectingKMeansExample\n+ * }}}\n+ */\n+object BisectingKMeansExample {\n+\n+  def main(args: Array[String]): Unit = {\n+    // Creates a SparkSession\n+    val spark = SparkSession.builder.appName(\"BisectingKMeansExample\").getOrCreate()\n+\n+    // $example on$\n+    // Crates a DataFrame\n+    val rowRDD = spark.read.text(\"data/mllib/kmeans_data.txt\").rdd"
  }, {
    "author": {
      "login": "zhengruifeng"
    },
    "body": "Good Idea. I will create a libsvm file containing the data in `data/mllib/kmeans_data` and use it in  examples of KMeans and BisectKMeans\n",
    "commit": "8cd45d33281f1435ddef5fef00c0b10e349b76dd",
    "createdAt": "2016-05-06T13:05:25Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml\n+\n+// scalastyle:off println\n+\n+// $example on$\n+import org.apache.spark.ml.clustering.BisectingKMeans\n+import org.apache.spark.mllib.linalg.{Vectors, VectorUDT}\n+import org.apache.spark.sql.{DataFrame, Row, SparkSession}\n+import org.apache.spark.sql.types.{StructField, StructType}\n+// $example off$\n+\n+/**\n+ * An example demonstrating a bisecting k-means clustering.\n+ * Run with\n+ * {{{\n+ * bin/run-example ml.BisectingKMeansExample\n+ * }}}\n+ */\n+object BisectingKMeansExample {\n+\n+  def main(args: Array[String]): Unit = {\n+    // Creates a SparkSession\n+    val spark = SparkSession.builder.appName(\"BisectingKMeansExample\").getOrCreate()\n+\n+    // $example on$\n+    // Crates a DataFrame\n+    val rowRDD = spark.read.text(\"data/mllib/kmeans_data.txt\").rdd"
  }],
  "prId": 11844
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "minor, don't think it's really necessary to have the `DataFrame` type annotation here\n",
    "commit": "8cd45d33281f1435ddef5fef00c0b10e349b76dd",
    "createdAt": "2016-05-09T12:28:15Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml\n+\n+// scalastyle:off println\n+\n+// $example on$\n+import org.apache.spark.ml.clustering.BisectingKMeans\n+import org.apache.spark.sql.{DataFrame, SparkSession}\n+// $example off$\n+\n+/**\n+ * An example demonstrating a bisecting k-means clustering.\n+ * Run with\n+ * {{{\n+ * bin/run-example ml.BisectingKMeansExample\n+ * }}}\n+ */\n+object BisectingKMeansExample {\n+\n+  def main(args: Array[String]): Unit = {\n+    // Creates a SparkSession\n+    val spark = SparkSession\n+      .builder\n+      .appName(\"BisectingKMeansExample\")\n+      .getOrCreate()\n+\n+    // $example on$\n+    // Loads data.\n+    val dataset: DataFrame = spark.read.format(\"libsvm\").load(\"data/mllib/sample_kmeans_data.txt\")"
  }],
  "prId": 11844
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "`${cost}` can simply be `$cost`\n",
    "commit": "8cd45d33281f1435ddef5fef00c0b10e349b76dd",
    "createdAt": "2016-05-09T12:28:49Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml\n+\n+// scalastyle:off println\n+\n+// $example on$\n+import org.apache.spark.ml.clustering.BisectingKMeans\n+import org.apache.spark.sql.{DataFrame, SparkSession}\n+// $example off$\n+\n+/**\n+ * An example demonstrating a bisecting k-means clustering.\n+ * Run with\n+ * {{{\n+ * bin/run-example ml.BisectingKMeansExample\n+ * }}}\n+ */\n+object BisectingKMeansExample {\n+\n+  def main(args: Array[String]): Unit = {\n+    // Creates a SparkSession\n+    val spark = SparkSession\n+      .builder\n+      .appName(\"BisectingKMeansExample\")\n+      .getOrCreate()\n+\n+    // $example on$\n+    // Loads data.\n+    val dataset: DataFrame = spark.read.format(\"libsvm\").load(\"data/mllib/sample_kmeans_data.txt\")\n+\n+    // Trains a bisecting k-means model.\n+    val bkm = new BisectingKMeans().setK(2).setSeed(1)\n+    val model = bkm.fit(dataset)\n+\n+    // Evaluate clustering.\n+    val cost = model.computeCost(dataset)\n+    println(s\"Compute Cost: ${cost}\")"
  }],
  "prId": 11844
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "likewise, you can remove the braces in the string interpolation here as they're just single variables, no method or property invocations\n",
    "commit": "8cd45d33281f1435ddef5fef00c0b10e349b76dd",
    "createdAt": "2016-05-09T12:29:28Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml\n+\n+// scalastyle:off println\n+\n+// $example on$\n+import org.apache.spark.ml.clustering.BisectingKMeans\n+import org.apache.spark.sql.{DataFrame, SparkSession}\n+// $example off$\n+\n+/**\n+ * An example demonstrating a bisecting k-means clustering.\n+ * Run with\n+ * {{{\n+ * bin/run-example ml.BisectingKMeansExample\n+ * }}}\n+ */\n+object BisectingKMeansExample {\n+\n+  def main(args: Array[String]): Unit = {\n+    // Creates a SparkSession\n+    val spark = SparkSession\n+      .builder\n+      .appName(\"BisectingKMeansExample\")\n+      .getOrCreate()\n+\n+    // $example on$\n+    // Loads data.\n+    val dataset: DataFrame = spark.read.format(\"libsvm\").load(\"data/mllib/sample_kmeans_data.txt\")\n+\n+    // Trains a bisecting k-means model.\n+    val bkm = new BisectingKMeans().setK(2).setSeed(1)\n+    val model = bkm.fit(dataset)\n+\n+    // Evaluate clustering.\n+    val cost = model.computeCost(dataset)\n+    println(s\"Compute Cost: ${cost}\")\n+\n+    // Shows the result.\n+    println(\"Final Centers: \")\n+    model.clusterCenters.zipWithIndex.foreach {\n+      case (clusterCenter, i) =>\n+        println(s\"Cluster Center ${i}: ${clusterCenter}\");"
  }],
  "prId": 11844
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "remove the `a` here, can simply be `... demonstrating bisecting ...`\n",
    "commit": "8cd45d33281f1435ddef5fef00c0b10e349b76dd",
    "createdAt": "2016-05-10T17:16:28Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml\n+\n+// scalastyle:off println\n+\n+// $example on$\n+import org.apache.spark.ml.clustering.BisectingKMeans\n+// $example off$\n+import org.apache.spark.sql.SparkSession\n+\n+/**\n+ * An example demonstrating a bisecting k-means clustering."
  }],
  "prId": 11844
}]