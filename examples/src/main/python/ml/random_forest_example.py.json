[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "I think we should remove the specification of \"featureSubsetStrategy\" and \"gini\" since those are expert-only params.\n",
    "commit": "732506ef0dc17fd074f5f51e0b285edcfe3489aa",
    "createdAt": "2015-05-29T03:17:43Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import print_function\n+\n+import sys\n+\n+from pyspark import SparkContext\n+from pyspark.ml.classification import RandomForestClassifier\n+from pyspark.ml.feature import StringIndexer\n+from pyspark.ml.regression import RandomForestRegressor\n+from pyspark.mllib.evaluation import MulticlassMetrics, RegressionMetrics\n+from pyspark.mllib.util import MLUtils\n+from pyspark.sql import Row, SQLContext\n+\n+\"\"\"\n+A simple example demonstrating a RandomForest Classification/Regression Pipeline.\n+Run with:\n+  bin/spark-submit examples/src/main/python/ml/random_forest_example.py\n+\"\"\"\n+\n+\n+def testClassification(train, test):\n+    # Train a RandomForest model.\n+    # Setting featureSubsetStrategy=\"auto\" lets the algorithm choose.\n+    # Note: Use larger numTrees in practice.\n+\n+    rf = RandomForestClassifier(labelCol=\"indexed\","
  }],
  "prId": 6443
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Fit call on 1 line?\n",
    "commit": "732506ef0dc17fd074f5f51e0b285edcfe3489aa",
    "createdAt": "2015-05-29T03:17:45Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import print_function\n+\n+import sys\n+\n+from pyspark import SparkContext\n+from pyspark.ml.classification import RandomForestClassifier\n+from pyspark.ml.feature import StringIndexer\n+from pyspark.ml.regression import RandomForestRegressor\n+from pyspark.mllib.evaluation import MulticlassMetrics, RegressionMetrics\n+from pyspark.mllib.util import MLUtils\n+from pyspark.sql import Row, SQLContext\n+\n+\"\"\"\n+A simple example demonstrating a RandomForest Classification/Regression Pipeline.\n+Run with:\n+  bin/spark-submit examples/src/main/python/ml/random_forest_example.py\n+\"\"\"\n+\n+\n+def testClassification(train, test):\n+    # Train a RandomForest model.\n+    # Setting featureSubsetStrategy=\"auto\" lets the algorithm choose.\n+    # Note: Use larger numTrees in practice.\n+\n+    rf = RandomForestClassifier(labelCol=\"indexed\",\n+                                numTrees=3, featureSubsetStrategy=\"auto\",\n+                                impurity='gini', maxDepth=4)\n+\n+    model = rf.fit(train)\n+    predictionAndLabels = model.transform(test).select(\"prediction\", \"indexed\") \\\n+        .map(lambda x: (float(x.prediction), float(x.indexed)))\n+\n+    metrics = MulticlassMetrics(predictionAndLabels)\n+    print(\"weighted f-measure %.3f\" % metrics.weightedFMeasure())\n+    print(\"precision %s\" % metrics.precision())\n+    print(\"recall %s\" % metrics.recall())\n+\n+\n+def testRegression(train, test):\n+    # Train a RandomForest model.\n+    # Note: Use larger numTrees in practice.\n+\n+    rf = RandomForestRegressor(labelCol=\"indexed\","
  }],
  "prId": 6443
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "I'd call it \"indexedLabel\" to be very explicit in the example (same for other examples)\n",
    "commit": "732506ef0dc17fd074f5f51e0b285edcfe3489aa",
    "createdAt": "2015-05-29T03:17:46Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import print_function\n+\n+import sys\n+\n+from pyspark import SparkContext\n+from pyspark.ml.classification import RandomForestClassifier\n+from pyspark.ml.feature import StringIndexer\n+from pyspark.ml.regression import RandomForestRegressor\n+from pyspark.mllib.evaluation import MulticlassMetrics, RegressionMetrics\n+from pyspark.mllib.util import MLUtils\n+from pyspark.sql import Row, SQLContext\n+\n+\"\"\"\n+A simple example demonstrating a RandomForest Classification/Regression Pipeline.\n+Run with:\n+  bin/spark-submit examples/src/main/python/ml/random_forest_example.py\n+\"\"\"\n+\n+\n+def testClassification(train, test):\n+    # Train a RandomForest model.\n+    # Setting featureSubsetStrategy=\"auto\" lets the algorithm choose.\n+    # Note: Use larger numTrees in practice.\n+\n+    rf = RandomForestClassifier(labelCol=\"indexed\",\n+                                numTrees=3, featureSubsetStrategy=\"auto\",\n+                                impurity='gini', maxDepth=4)\n+\n+    model = rf.fit(train)\n+    predictionAndLabels = model.transform(test).select(\"prediction\", \"indexed\") \\\n+        .map(lambda x: (float(x.prediction), float(x.indexed)))\n+\n+    metrics = MulticlassMetrics(predictionAndLabels)\n+    print(\"weighted f-measure %.3f\" % metrics.weightedFMeasure())\n+    print(\"precision %s\" % metrics.precision())\n+    print(\"recall %s\" % metrics.recall())\n+\n+\n+def testRegression(train, test):\n+    # Train a RandomForest model.\n+    # Note: Use larger numTrees in practice.\n+\n+    rf = RandomForestRegressor(labelCol=\"indexed\",\n+                               numTrees=3,\n+                               maxDepth=4)\n+\n+    model = rf.fit(train)\n+    predictionAndLabels = model.transform(test).select(\"prediction\", \"indexed\") \\\n+        .map(lambda x: (float(x.prediction), float(x.indexed)))\n+\n+    metrics = RegressionMetrics(predictionAndLabels)\n+    print(\"rmse %.3f\" % metrics.rootMeanSquaredError)\n+    print(\"r2 %.3f\" % metrics.r2)\n+    print(\"mae %.3f\" % metrics.meanAbsoluteError)\n+\n+\n+if __name__ == \"__main__\":\n+    if len(sys.argv) > 1:\n+        print(\"Usage: random_forest_example\", file=sys.stderr)\n+        exit(1)\n+    sc = SparkContext(appName=\"PythonRandomForestExample\")\n+    sqlContext = SQLContext(sc)\n+\n+    # Load and parse the data file into a dataframe.\n+    df = MLUtils.loadLibSVMFile(sc, \"data/mllib/sample_libsvm_data.txt\").toDF()\n+\n+    # Map labels into an indexed column of labels in [0, numLabels)\n+    stringIndexer = StringIndexer(inputCol=\"label\", outputCol=\"indexed\")"
  }],
  "prId": 6443
}]