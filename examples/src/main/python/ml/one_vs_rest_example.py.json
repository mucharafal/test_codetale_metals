[{
  "comments": [{
    "author": {
      "login": "yanboliang"
    },
    "body": "Use `SparkSession` instead of `SQLContext`. See #12809 for details.\n",
    "commit": "9049002d48bee41a389782c082a7fd4752a6d3fe",
    "createdAt": "2016-05-05T14:07:14Z",
    "diffHunk": "@@ -0,0 +1,125 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import print_function\n+\n+import argparse\n+\n+from pyspark import SparkContext\n+\n+# $example on$\n+from pyspark.ml.classification import LogisticRegression, OneVsRest\n+from pyspark.mllib.evaluation import MulticlassMetrics\n+from pyspark.sql import SQLContext\n+# $example off$\n+\n+\"\"\"\n+An example runner for Multiclass to Binary Reduction with One Vs Rest.\n+The example uses Logistic Regression as the base classifier. All parameters that\n+can be specified on the base classifier can be passed in to the runner options.\n+Run with:\n+\n+  bin/spark-submit examples/src/main/python/ml/one_vs_rest_example.py\n+\"\"\"\n+\n+\n+def parse():\n+    parser = argparse.ArgumentParser()\n+    parser.add_argument(\"--input\",\n+                        help=\"input path to labeled examples. This path must be specified\")\n+    parser.add_argument(\"--fracTest\", type=float, default=0.2,\n+                        help=\"fraction of data to hold out for testing.  If given option testInput,\"\n+                             \" this option is ignored. default: 0.2\")\n+    parser.add_argument(\"--testInput\",\n+                        help=\"iinput path to test dataset. If given, option fracTest is ignored\")\n+    parser.add_argument(\"--maxIter\", type=int, default=100,\n+                        help=\"maximum number of iterations for Logistic Regression. default: 100\")\n+    parser.add_argument(\"--tol\", type=float, default=1e-6,\n+                        help=\"the convergence tolerance of iterations for Logistic Regression.\"\n+                             \" default: 1e-6\")\n+    parser.add_argument(\"--fitIntercept\", default=\"true\",\n+                        help=\"fit intercept for Logistic Regression. default: true\")\n+    parser.add_argument(\"--regParam\", type=float,\n+                        help=\"the regularization parameter for Logistic Regression. default: None\")\n+    parser.add_argument(\"--elasticNetParam\", type=float,\n+                        help=\"the ElasticNet mixing parameter for Logistic Regression. default:\"\n+                             \" None\")\n+    params = parser.parse_args()\n+\n+    assert params.input is not None, \"input is required\"\n+    assert 0 <= params.fracTest < 1, \"fracTest value incorrect; should be in [0,1).\"\n+    assert params.fitIntercept in (\"true\", \"false\")\n+    params.fitIntercept = params.fitIntercept == \"true\"\n+\n+    return params\n+\n+if __name__ == \"__main__\":\n+\n+    params = parse()\n+\n+    sc = SparkContext(appName=\"PythonOneVsRestExample\")"
  }, {
    "author": {
      "login": "zhengruifeng"
    },
    "body": "Thanks!\n",
    "commit": "9049002d48bee41a389782c082a7fd4752a6d3fe",
    "createdAt": "2016-05-06T02:25:52Z",
    "diffHunk": "@@ -0,0 +1,125 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import print_function\n+\n+import argparse\n+\n+from pyspark import SparkContext\n+\n+# $example on$\n+from pyspark.ml.classification import LogisticRegression, OneVsRest\n+from pyspark.mllib.evaluation import MulticlassMetrics\n+from pyspark.sql import SQLContext\n+# $example off$\n+\n+\"\"\"\n+An example runner for Multiclass to Binary Reduction with One Vs Rest.\n+The example uses Logistic Regression as the base classifier. All parameters that\n+can be specified on the base classifier can be passed in to the runner options.\n+Run with:\n+\n+  bin/spark-submit examples/src/main/python/ml/one_vs_rest_example.py\n+\"\"\"\n+\n+\n+def parse():\n+    parser = argparse.ArgumentParser()\n+    parser.add_argument(\"--input\",\n+                        help=\"input path to labeled examples. This path must be specified\")\n+    parser.add_argument(\"--fracTest\", type=float, default=0.2,\n+                        help=\"fraction of data to hold out for testing.  If given option testInput,\"\n+                             \" this option is ignored. default: 0.2\")\n+    parser.add_argument(\"--testInput\",\n+                        help=\"iinput path to test dataset. If given, option fracTest is ignored\")\n+    parser.add_argument(\"--maxIter\", type=int, default=100,\n+                        help=\"maximum number of iterations for Logistic Regression. default: 100\")\n+    parser.add_argument(\"--tol\", type=float, default=1e-6,\n+                        help=\"the convergence tolerance of iterations for Logistic Regression.\"\n+                             \" default: 1e-6\")\n+    parser.add_argument(\"--fitIntercept\", default=\"true\",\n+                        help=\"fit intercept for Logistic Regression. default: true\")\n+    parser.add_argument(\"--regParam\", type=float,\n+                        help=\"the regularization parameter for Logistic Regression. default: None\")\n+    parser.add_argument(\"--elasticNetParam\", type=float,\n+                        help=\"the ElasticNet mixing parameter for Logistic Regression. default:\"\n+                             \" None\")\n+    params = parser.parse_args()\n+\n+    assert params.input is not None, \"input is required\"\n+    assert 0 <= params.fracTest < 1, \"fracTest value incorrect; should be in [0,1).\"\n+    assert params.fitIntercept in (\"true\", \"false\")\n+    params.fitIntercept = params.fitIntercept == \"true\"\n+\n+    return params\n+\n+if __name__ == \"__main__\":\n+\n+    params = parse()\n+\n+    sc = SparkContext(appName=\"PythonOneVsRestExample\")"
  }],
  "prId": 12920
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "same here, use ml evaluator.\n",
    "commit": "9049002d48bee41a389782c082a7fd4752a6d3fe",
    "createdAt": "2016-05-07T09:30:35Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import print_function\n+\n+# $example on$\n+from pyspark.ml.classification import LogisticRegression, OneVsRest\n+from pyspark.mllib.evaluation import MulticlassMetrics\n+# $example off$\n+from pyspark.sql import SparkSession\n+\n+\"\"\"\n+An example runner for Multiclass to Binary Reduction with One Vs Rest.\n+The example uses Logistic Regression as the base classifier.\n+Run with:\n+  bin/spark-submit examples/src/main/python/ml/one_vs_rest_example.py\n+\"\"\"\n+\n+\n+if __name__ == \"__main__\":\n+    spark = SparkSession \\\n+        .builder \\\n+        .appName(\"OneHotEncoderExample\") \\\n+        .getOrCreate()\n+\n+    # $example on$\n+    # load data file.\n+    inputData = spark.read.format(\"libsvm\") \\\n+        .load(\"data/mllib/sample_multiclass_classification_data.txt\")\n+\n+    # generate the train/test split.\n+    (train, test) = inputData.randomSplit([0.8, 0.2])\n+\n+    # instantiate the base classifier.\n+    lrParams = {'maxIter': 10, 'tol': 1E-6, 'fitIntercept': True}\n+    lr = LogisticRegression(**lrParams)\n+\n+    # instantiate the One Vs Rest Classifier.\n+    ovr = OneVsRest(classifier=lr)\n+\n+    # train the multiclass model.\n+    ovrModel = ovr.fit(train)\n+\n+    # score the model on test data.\n+    predictions = ovrModel.transform(test)\n+\n+    # obtain metrics.\n+    predictionAndLabels = predictions.rdd.map(lambda r: (r.prediction, r.label))\n+    metrics = MulticlassMetrics(predictionAndLabels)"
  }],
  "prId": 12920
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "This is a little strange, why not simply `LogisticRegression(maxIter=10, tol=...)`?\n",
    "commit": "9049002d48bee41a389782c082a7fd4752a6d3fe",
    "createdAt": "2016-05-07T09:32:36Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import print_function\n+\n+# $example on$\n+from pyspark.ml.classification import LogisticRegression, OneVsRest\n+from pyspark.mllib.evaluation import MulticlassMetrics\n+# $example off$\n+from pyspark.sql import SparkSession\n+\n+\"\"\"\n+An example runner for Multiclass to Binary Reduction with One Vs Rest.\n+The example uses Logistic Regression as the base classifier.\n+Run with:\n+  bin/spark-submit examples/src/main/python/ml/one_vs_rest_example.py\n+\"\"\"\n+\n+\n+if __name__ == \"__main__\":\n+    spark = SparkSession \\\n+        .builder \\\n+        .appName(\"OneHotEncoderExample\") \\\n+        .getOrCreate()\n+\n+    # $example on$\n+    # load data file.\n+    inputData = spark.read.format(\"libsvm\") \\\n+        .load(\"data/mllib/sample_multiclass_classification_data.txt\")\n+\n+    # generate the train/test split.\n+    (train, test) = inputData.randomSplit([0.8, 0.2])\n+\n+    # instantiate the base classifier.\n+    lrParams = {'maxIter': 10, 'tol': 1E-6, 'fitIntercept': True}"
  }],
  "prId": 12920
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "Incorrect app name here\n",
    "commit": "9049002d48bee41a389782c082a7fd4752a6d3fe",
    "createdAt": "2016-05-07T09:34:40Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import print_function\n+\n+# $example on$\n+from pyspark.ml.classification import LogisticRegression, OneVsRest\n+from pyspark.mllib.evaluation import MulticlassMetrics\n+# $example off$\n+from pyspark.sql import SparkSession\n+\n+\"\"\"\n+An example runner for Multiclass to Binary Reduction with One Vs Rest.\n+The example uses Logistic Regression as the base classifier.\n+Run with:\n+  bin/spark-submit examples/src/main/python/ml/one_vs_rest_example.py\n+\"\"\"\n+\n+\n+if __name__ == \"__main__\":\n+    spark = SparkSession \\\n+        .builder \\\n+        .appName(\"OneHotEncoderExample\") \\"
  }],
  "prId": 12920
}]