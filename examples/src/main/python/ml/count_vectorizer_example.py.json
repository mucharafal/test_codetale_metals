[{
  "comments": [{
    "author": {
      "login": "holdenk"
    },
    "body": "Similar comment as previous reordering of SparkSession import, consider moving $example off$ above this import so examples remain the same.\n",
    "commit": "582c8221998d6fe055d066106e9ca43204f96bb9",
    "createdAt": "2016-08-27T07:54:17Z",
    "diffHunk": "@@ -17,9 +17,10 @@\n \n from __future__ import print_function\n \n-from pyspark.sql import SparkSession\n # $example on$\n from pyspark.ml.feature import CountVectorizer\n+from pyspark.sql import SparkSession"
  }],
  "prId": 14830
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Could you double check if it really does not follow pep8? I have seen the removed syntax more often (e.g., `numpy`).",
    "commit": "582c8221998d6fe055d066106e9ca43204f96bb9",
    "createdAt": "2017-02-15T11:23:36Z",
    "diffHunk": "@@ -17,23 +17,26 @@\n \n from __future__ import print_function\n \n-from pyspark.sql import SparkSession\n # $example on$\n from pyspark.ml.feature import CountVectorizer\n # $example off$\n+from pyspark.sql import SparkSession\n+\n \n if __name__ == \"__main__\":\n-    spark = SparkSession\\\n-        .builder\\\n-        .appName(\"CountVectorizerExample\")\\\n-        .getOrCreate()\n+    spark = (SparkSession\n+             .builder\n+             .appName(\"CountVectorizerExample\")\n+             .getOrCreate())\n \n     # $example on$\n     # Input data: Each row is a bag of words with a ID.\n-    df = spark.createDataFrame([\n-        (0, \"a b c\".split(\" \")),\n-        (1, \"a b b c a\".split(\" \"))\n-    ], [\"id\", \"words\"])\n+    df = spark.createDataFrame(\n+        [\n+            (0, \"a b c\".split(\" \")),\n+            (1, \"a b b c a\".split(\" \"))\n+        ],",
    "line": 31
  }, {
    "author": {
      "login": "gsemet"
    },
    "body": "Indeed, this is a recommendation not an obligation. I see it to be more looking like Scala multi-line code, and I prefer it. It is a personal opinion, and I don't think there is a pylint/pep8 check to prevent using \\.",
    "commit": "582c8221998d6fe055d066106e9ca43204f96bb9",
    "createdAt": "2017-02-15T12:07:06Z",
    "diffHunk": "@@ -17,23 +17,26 @@\n \n from __future__ import print_function\n \n-from pyspark.sql import SparkSession\n # $example on$\n from pyspark.ml.feature import CountVectorizer\n # $example off$\n+from pyspark.sql import SparkSession\n+\n \n if __name__ == \"__main__\":\n-    spark = SparkSession\\\n-        .builder\\\n-        .appName(\"CountVectorizerExample\")\\\n-        .getOrCreate()\n+    spark = (SparkSession\n+             .builder\n+             .appName(\"CountVectorizerExample\")\n+             .getOrCreate())\n \n     # $example on$\n     # Input data: Each row is a bag of words with a ID.\n-    df = spark.createDataFrame([\n-        (0, \"a b c\".split(\" \")),\n-        (1, \"a b b c a\".split(\" \"))\n-    ], [\"id\", \"words\"])\n+    df = spark.createDataFrame(\n+        [\n+            (0, \"a b c\".split(\" \")),\n+            (1, \"a b b c a\".split(\" \"))\n+        ],",
    "line": 31
  }],
  "prId": 14830
}]